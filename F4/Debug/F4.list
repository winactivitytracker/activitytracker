
F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011dfc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d5c  08011fa0  08011fa0  00021fa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013cfc  08013cfc  0003020c  2**0
                  CONTENTS
  4 .ARM          00000008  08013cfc  08013cfc  00023cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013d04  08013d04  0003020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013d04  08013d04  00023d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013d08  08013d08  00023d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08013d0c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000057c8  2000020c  08013f18  0003020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200059d4  08013f18  000359d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003005a  00000000  00000000  0003023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000064b3  00000000  00000000  00060296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021b0  00000000  00000000  00066750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f40  00000000  00000000  00068900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fcb2  00000000  00000000  0006a840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bbf9  00000000  00000000  0008a4f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab961  00000000  00000000  000b60eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00161a4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a32c  00000000  00000000  00161aa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000020c 	.word	0x2000020c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011f84 	.word	0x08011f84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000210 	.word	0x20000210
 80001dc:	08011f84 	.word	0x08011f84

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <getActivity>:

Activity_T CurrentActivity;
extern GPS_t GPS;

void getActivity()
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

		if(0 < GPS.speed_km && GPS.speed_km < 2.5)
 8001000:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <getActivity+0xa4>)
 8001002:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001006:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800100a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100e:	dd0d      	ble.n	800102c <getActivity+0x30>
 8001010:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <getActivity+0xa4>)
 8001012:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001016:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800101a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800101e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001022:	d503      	bpl.n	800102c <getActivity+0x30>
		{
			CurrentActivity.currentActivity = noMovement;	//nomovement
 8001024:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <getActivity+0xa8>)
 8001026:	2201      	movs	r2, #1
 8001028:	721a      	strb	r2, [r3, #8]
 800102a:	e033      	b.n	8001094 <getActivity+0x98>
		}
		else if(GPS.speed_km >= 2.5 && GPS.speed_km < 7.0)
 800102c:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <getActivity+0xa4>)
 800102e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001032:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8001036:	eef4 7ac7 	vcmpe.f32	s15, s14
 800103a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103e:	db0d      	blt.n	800105c <getActivity+0x60>
 8001040:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <getActivity+0xa4>)
 8001042:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001046:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800104a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800104e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001052:	d503      	bpl.n	800105c <getActivity+0x60>
		{
			CurrentActivity.currentActivity = walking;	//walking
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <getActivity+0xa8>)
 8001056:	2202      	movs	r2, #2
 8001058:	721a      	strb	r2, [r3, #8]
 800105a:	e01b      	b.n	8001094 <getActivity+0x98>
		}
		else if(GPS.speed_km >= 7.0 && GPS.speed_km < 15.0)
 800105c:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <getActivity+0xa4>)
 800105e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001062:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8001066:	eef4 7ac7 	vcmpe.f32	s15, s14
 800106a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800106e:	db0d      	blt.n	800108c <getActivity+0x90>
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <getActivity+0xa4>)
 8001072:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001076:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800107a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800107e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001082:	d503      	bpl.n	800108c <getActivity+0x90>
		{
			CurrentActivity.currentActivity = running;
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <getActivity+0xa8>)
 8001086:	2203      	movs	r2, #3
 8001088:	721a      	strb	r2, [r3, #8]
 800108a:	e003      	b.n	8001094 <getActivity+0x98>
		}
		else
		{
			CurrentActivity.currentActivity =  unknown;
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <getActivity+0xa8>)
 800108e:	2200      	movs	r2, #0
 8001090:	721a      	strb	r2, [r3, #8]
		}

}
 8001092:	bf00      	nop
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20004d08 	.word	0x20004d08
 80010a4:	20004ca4 	.word	0x20004ca4

080010a8 <activityToString>:

char* activityToString(uint8_t activity)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
	char* string = "";
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <activityToString+0x48>)
 80010b4:	60fb      	str	r3, [r7, #12]

	switch (activity) {
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2b03      	cmp	r3, #3
 80010ba:	d00c      	beq.n	80010d6 <activityToString+0x2e>
 80010bc:	2b03      	cmp	r3, #3
 80010be:	dc0d      	bgt.n	80010dc <activityToString+0x34>
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d002      	beq.n	80010ca <activityToString+0x22>
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d003      	beq.n	80010d0 <activityToString+0x28>
 80010c8:	e008      	b.n	80010dc <activityToString+0x34>
		case noMovement:
			string = "Geen beweging";
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <activityToString+0x4c>)
 80010cc:	60fb      	str	r3, [r7, #12]
			break;
 80010ce:	e008      	b.n	80010e2 <activityToString+0x3a>
		case walking:
			string = "Wandelen";
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <activityToString+0x50>)
 80010d2:	60fb      	str	r3, [r7, #12]
			break;
 80010d4:	e005      	b.n	80010e2 <activityToString+0x3a>
		case running:
			string = "Hardlopen";
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <activityToString+0x54>)
 80010d8:	60fb      	str	r3, [r7, #12]
			break;
 80010da:	e002      	b.n	80010e2 <activityToString+0x3a>
		default:
			string = "onbekend";
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <activityToString+0x58>)
 80010de:	60fb      	str	r3, [r7, #12]
			break;
 80010e0:	bf00      	nop
	}
	return string;
 80010e2:	68fb      	ldr	r3, [r7, #12]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	08011fa0 	.word	0x08011fa0
 80010f4:	08011fa4 	.word	0x08011fa4
 80010f8:	08011fb4 	.word	0x08011fb4
 80010fc:	08011fc0 	.word	0x08011fc0
 8001100:	08011fcc 	.word	0x08011fcc

08001104 <CalculateActivityAverage>:

void CalculateActivityAverage(uint8_t lastActiveMinute)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
	switch (lastActiveMinute) {
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b03      	cmp	r3, #3
 8001112:	d014      	beq.n	800113e <CalculateActivityAverage+0x3a>
 8001114:	2b03      	cmp	r3, #3
 8001116:	dc19      	bgt.n	800114c <CalculateActivityAverage+0x48>
 8001118:	2b01      	cmp	r3, #1
 800111a:	d002      	beq.n	8001122 <CalculateActivityAverage+0x1e>
 800111c:	2b02      	cmp	r3, #2
 800111e:	d007      	beq.n	8001130 <CalculateActivityAverage+0x2c>
 8001120:	e014      	b.n	800114c <CalculateActivityAverage+0x48>
		case noMovement:
			CurrentActivity.activityTotal[noMovement]++;
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <CalculateActivityAverage+0x64>)
 8001124:	791b      	ldrb	r3, [r3, #4]
 8001126:	3301      	adds	r3, #1
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <CalculateActivityAverage+0x64>)
 800112c:	711a      	strb	r2, [r3, #4]
			break;
 800112e:	e014      	b.n	800115a <CalculateActivityAverage+0x56>
		case walking:
			CurrentActivity.activityTotal[walking]++;
 8001130:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <CalculateActivityAverage+0x64>)
 8001132:	795b      	ldrb	r3, [r3, #5]
 8001134:	3301      	adds	r3, #1
 8001136:	b2da      	uxtb	r2, r3
 8001138:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <CalculateActivityAverage+0x64>)
 800113a:	715a      	strb	r2, [r3, #5]
			break;
 800113c:	e00d      	b.n	800115a <CalculateActivityAverage+0x56>
		case running:
			CurrentActivity.activityTotal[running]++;
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <CalculateActivityAverage+0x64>)
 8001140:	799b      	ldrb	r3, [r3, #6]
 8001142:	3301      	adds	r3, #1
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <CalculateActivityAverage+0x64>)
 8001148:	719a      	strb	r2, [r3, #6]
			break;
 800114a:	e006      	b.n	800115a <CalculateActivityAverage+0x56>
		default:
			CurrentActivity.activityTotal[unknown]++;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <CalculateActivityAverage+0x64>)
 800114e:	78db      	ldrb	r3, [r3, #3]
 8001150:	3301      	adds	r3, #1
 8001152:	b2da      	uxtb	r2, r3
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <CalculateActivityAverage+0x64>)
 8001156:	70da      	strb	r2, [r3, #3]
			break;
 8001158:	bf00      	nop
	}
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	20004ca4 	.word	0x20004ca4

0800116c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001172:	463b      	mov	r3, r7
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800117e:	4b21      	ldr	r3, [pc, #132]	; (8001204 <MX_ADC1_Init+0x98>)
 8001180:	4a21      	ldr	r2, [pc, #132]	; (8001208 <MX_ADC1_Init+0x9c>)
 8001182:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001184:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <MX_ADC1_Init+0x98>)
 8001186:	2200      	movs	r2, #0
 8001188:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800118a:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <MX_ADC1_Init+0x98>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001190:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <MX_ADC1_Init+0x98>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001196:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <MX_ADC1_Init+0x98>)
 8001198:	2200      	movs	r2, #0
 800119a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800119c:	4b19      	ldr	r3, [pc, #100]	; (8001204 <MX_ADC1_Init+0x98>)
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011a4:	4b17      	ldr	r3, [pc, #92]	; (8001204 <MX_ADC1_Init+0x98>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011aa:	4b16      	ldr	r3, [pc, #88]	; (8001204 <MX_ADC1_Init+0x98>)
 80011ac:	4a17      	ldr	r2, [pc, #92]	; (800120c <MX_ADC1_Init+0xa0>)
 80011ae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <MX_ADC1_Init+0x98>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <MX_ADC1_Init+0x98>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <MX_ADC1_Init+0x98>)
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <MX_ADC1_Init+0x98>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011ca:	480e      	ldr	r0, [pc, #56]	; (8001204 <MX_ADC1_Init+0x98>)
 80011cc:	f001 feb4 	bl	8002f38 <HAL_ADC_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80011d6:	f000 ffc7 	bl	8002168 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011da:	2301      	movs	r3, #1
 80011dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011de:	2301      	movs	r3, #1
 80011e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e6:	463b      	mov	r3, r7
 80011e8:	4619      	mov	r1, r3
 80011ea:	4806      	ldr	r0, [pc, #24]	; (8001204 <MX_ADC1_Init+0x98>)
 80011ec:	f002 f908 	bl	8003400 <HAL_ADC_ConfigChannel>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80011f6:	f000 ffb7 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20004cb0 	.word	0x20004cb0
 8001208:	40012000 	.word	0x40012000
 800120c:	0f000001 	.word	0x0f000001

08001210 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a17      	ldr	r2, [pc, #92]	; (800128c <HAL_ADC_MspInit+0x7c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d127      	bne.n	8001282 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	4b16      	ldr	r3, [pc, #88]	; (8001290 <HAL_ADC_MspInit+0x80>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	4a15      	ldr	r2, [pc, #84]	; (8001290 <HAL_ADC_MspInit+0x80>)
 800123c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001240:	6453      	str	r3, [r2, #68]	; 0x44
 8001242:	4b13      	ldr	r3, [pc, #76]	; (8001290 <HAL_ADC_MspInit+0x80>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <HAL_ADC_MspInit+0x80>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a0e      	ldr	r2, [pc, #56]	; (8001290 <HAL_ADC_MspInit+0x80>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <HAL_ADC_MspInit+0x80>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800126a:	2302      	movs	r3, #2
 800126c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800126e:	2303      	movs	r3, #3
 8001270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	4805      	ldr	r0, [pc, #20]	; (8001294 <HAL_ADC_MspInit+0x84>)
 800127e:	f002 fc5b 	bl	8003b38 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001282:	bf00      	nop
 8001284:	3728      	adds	r7, #40	; 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40012000 	.word	0x40012000
 8001290:	40023800 	.word	0x40023800
 8001294:	40020000 	.word	0x40020000

08001298 <HAL_ADC_ConvCpltCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
    ADCValue = HAL_ADC_GetValue(&hadc1);
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <HAL_ADC_ConvCpltCallback+0x20>)
 80012a2:	f002 f88c 	bl	80033be <HAL_ADC_GetValue>
 80012a6:	4603      	mov	r3, r0
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	4b04      	ldr	r3, [pc, #16]	; (80012bc <HAL_ADC_ConvCpltCallback+0x24>)
 80012ac:	801a      	strh	r2, [r3, #0]
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20004cb0 	.word	0x20004cb0
 80012bc:	20000228 	.word	0x20000228

080012c0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80012c4:	4a10      	ldr	r2, [pc, #64]	; (8001308 <MX_FREERTOS_Init+0x48>)
 80012c6:	2100      	movs	r1, #0
 80012c8:	4810      	ldr	r0, [pc, #64]	; (800130c <MX_FREERTOS_Init+0x4c>)
 80012ca:	f008 fb59 	bl	8009980 <osThreadNew>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4a0f      	ldr	r2, [pc, #60]	; (8001310 <MX_FREERTOS_Init+0x50>)
 80012d2:	6013      	str	r3, [r2, #0]

  /* creation of DrawOnOledTask */
  DrawOnOledTaskHandle = osThreadNew(StartDrawing, NULL, &DrawOnOledTask_attributes);
 80012d4:	4a0f      	ldr	r2, [pc, #60]	; (8001314 <MX_FREERTOS_Init+0x54>)
 80012d6:	2100      	movs	r1, #0
 80012d8:	480f      	ldr	r0, [pc, #60]	; (8001318 <MX_FREERTOS_Init+0x58>)
 80012da:	f008 fb51 	bl	8009980 <osThreadNew>
 80012de:	4603      	mov	r3, r0
 80012e0:	4a0e      	ldr	r2, [pc, #56]	; (800131c <MX_FREERTOS_Init+0x5c>)
 80012e2:	6013      	str	r3, [r2, #0]

  /* creation of ActivityTask */
  ActivityTaskHandle = osThreadNew(StartActivityTask, NULL, &ActivityTask_attributes);
 80012e4:	4a0e      	ldr	r2, [pc, #56]	; (8001320 <MX_FREERTOS_Init+0x60>)
 80012e6:	2100      	movs	r1, #0
 80012e8:	480e      	ldr	r0, [pc, #56]	; (8001324 <MX_FREERTOS_Init+0x64>)
 80012ea:	f008 fb49 	bl	8009980 <osThreadNew>
 80012ee:	4603      	mov	r3, r0
 80012f0:	4a0d      	ldr	r2, [pc, #52]	; (8001328 <MX_FREERTOS_Init+0x68>)
 80012f2:	6013      	str	r3, [r2, #0]

  /* creation of readBattery */
  readBatteryHandle = osThreadNew(StartReadBattery, NULL, &readBattery_attributes);
 80012f4:	4a0d      	ldr	r2, [pc, #52]	; (800132c <MX_FREERTOS_Init+0x6c>)
 80012f6:	2100      	movs	r1, #0
 80012f8:	480d      	ldr	r0, [pc, #52]	; (8001330 <MX_FREERTOS_Init+0x70>)
 80012fa:	f008 fb41 	bl	8009980 <osThreadNew>
 80012fe:	4603      	mov	r3, r0
 8001300:	4a0c      	ldr	r2, [pc, #48]	; (8001334 <MX_FREERTOS_Init+0x74>)
 8001302:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}
 8001308:	08013708 	.word	0x08013708
 800130c:	08001339 	.word	0x08001339
 8001310:	20004cf8 	.word	0x20004cf8
 8001314:	0801372c 	.word	0x0801372c
 8001318:	08001349 	.word	0x08001349
 800131c:	20004d00 	.word	0x20004d00
 8001320:	08013750 	.word	0x08013750
 8001324:	080014b9 	.word	0x080014b9
 8001328:	20004cfc 	.word	0x20004cfc
 800132c:	08013774 	.word	0x08013774
 8001330:	08001735 	.word	0x08001735
 8001334:	20004d04 	.word	0x20004d04

08001338 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001340:	2001      	movs	r0, #1
 8001342:	f008 fbaf 	bl	8009aa4 <osDelay>
 8001346:	e7fb      	b.n	8001340 <StartDefaultTask+0x8>

08001348 <StartDrawing>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDrawing */
void StartDrawing(void *argument)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	char numbers[10];
	char *currentTime;

	SSD1306_GotoXY (0,0);
 8001350:	2100      	movs	r1, #0
 8001352:	2000      	movs	r0, #0
 8001354:	f001 fa10 	bl	8002778 <SSD1306_GotoXY>
	sprintf(numbers, "batt: %.0f", batteryPer);
 8001358:	4b4b      	ldr	r3, [pc, #300]	; (8001488 <StartDrawing+0x140>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f8fb 	bl	8000558 <__aeabi_f2d>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	f107 0008 	add.w	r0, r7, #8
 800136a:	4948      	ldr	r1, [pc, #288]	; (800148c <StartDrawing+0x144>)
 800136c:	f00c fcf8 	bl	800dd60 <siprintf>
	SSD1306_Puts (numbers, &Font_7x10, 1);
 8001370:	f107 0308 	add.w	r3, r7, #8
 8001374:	2201      	movs	r2, #1
 8001376:	4946      	ldr	r1, [pc, #280]	; (8001490 <StartDrawing+0x148>)
 8001378:	4618      	mov	r0, r3
 800137a:	f001 fa93 	bl	80028a4 <SSD1306_Puts>

	SSD1306_GotoXY (80,0);
 800137e:	2100      	movs	r1, #0
 8001380:	2050      	movs	r0, #80	; 0x50
 8001382:	f001 f9f9 	bl	8002778 <SSD1306_GotoXY>
	SSD1306_Puts ("ADM:", &Font_7x10, 1);
 8001386:	2201      	movs	r2, #1
 8001388:	4941      	ldr	r1, [pc, #260]	; (8001490 <StartDrawing+0x148>)
 800138a:	4842      	ldr	r0, [pc, #264]	; (8001494 <StartDrawing+0x14c>)
 800138c:	f001 fa8a 	bl	80028a4 <SSD1306_Puts>

	SSD1306_GotoXY (110, 0);
 8001390:	2100      	movs	r1, #0
 8001392:	206e      	movs	r0, #110	; 0x6e
 8001394:	f001 f9f0 	bl	8002778 <SSD1306_GotoXY>
	sprintf(numbers, "%d", CurrentActivity.activeDailyMinutes);
 8001398:	4b3f      	ldr	r3, [pc, #252]	; (8001498 <StartDrawing+0x150>)
 800139a:	785b      	ldrb	r3, [r3, #1]
 800139c:	461a      	mov	r2, r3
 800139e:	f107 0308 	add.w	r3, r7, #8
 80013a2:	493e      	ldr	r1, [pc, #248]	; (800149c <StartDrawing+0x154>)
 80013a4:	4618      	mov	r0, r3
 80013a6:	f00c fcdb 	bl	800dd60 <siprintf>
	SSD1306_Puts(numbers, &Font_7x10, 1);
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	2201      	movs	r2, #1
 80013b0:	4937      	ldr	r1, [pc, #220]	; (8001490 <StartDrawing+0x148>)
 80013b2:	4618      	mov	r0, r3
 80013b4:	f001 fa76 	bl	80028a4 <SSD1306_Puts>

	SSD1306_GotoXY (0, 25);
 80013b8:	2119      	movs	r1, #25
 80013ba:	2000      	movs	r0, #0
 80013bc:	f001 f9dc 	bl	8002778 <SSD1306_GotoXY>
	sprintf(numbers, "%.2f", GPS.speed_km);
 80013c0:	4b37      	ldr	r3, [pc, #220]	; (80014a0 <StartDrawing+0x158>)
 80013c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff f8c7 	bl	8000558 <__aeabi_f2d>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	f107 0008 	add.w	r0, r7, #8
 80013d2:	4934      	ldr	r1, [pc, #208]	; (80014a4 <StartDrawing+0x15c>)
 80013d4:	f00c fcc4 	bl	800dd60 <siprintf>
	SSD1306_Puts(numbers, &Font_11x18, 1);
 80013d8:	f107 0308 	add.w	r3, r7, #8
 80013dc:	2201      	movs	r2, #1
 80013de:	4932      	ldr	r1, [pc, #200]	; (80014a8 <StartDrawing+0x160>)
 80013e0:	4618      	mov	r0, r3
 80013e2:	f001 fa5f 	bl	80028a4 <SSD1306_Puts>
	SSD1306_GotoXY (50,31);
 80013e6:	211f      	movs	r1, #31
 80013e8:	2032      	movs	r0, #50	; 0x32
 80013ea:	f001 f9c5 	bl	8002778 <SSD1306_GotoXY>
	SSD1306_Puts ("km/u", &Font_7x10, 1);
 80013ee:	2201      	movs	r2, #1
 80013f0:	4927      	ldr	r1, [pc, #156]	; (8001490 <StartDrawing+0x148>)
 80013f2:	482e      	ldr	r0, [pc, #184]	; (80014ac <StartDrawing+0x164>)
 80013f4:	f001 fa56 	bl	80028a4 <SSD1306_Puts>

	SSD1306_GotoXY (0,10);
 80013f8:	210a      	movs	r1, #10
 80013fa:	2000      	movs	r0, #0
 80013fc:	f001 f9bc 	bl	8002778 <SSD1306_GotoXY>
	//SSD1306_Puts(getActivity(), &Font_7x10, 1);
	SSD1306_Puts(activityToString(CurrentActivity.lastActiveMinute), &Font_7x10, 1);
 8001400:	4b25      	ldr	r3, [pc, #148]	; (8001498 <StartDrawing+0x150>)
 8001402:	789b      	ldrb	r3, [r3, #2]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fe4f 	bl	80010a8 <activityToString>
 800140a:	4603      	mov	r3, r0
 800140c:	2201      	movs	r2, #1
 800140e:	4920      	ldr	r1, [pc, #128]	; (8001490 <StartDrawing+0x148>)
 8001410:	4618      	mov	r0, r3
 8001412:	f001 fa47 	bl	80028a4 <SSD1306_Puts>
	SSD1306_Puts("          ",&Font_7x10, 1);
 8001416:	2201      	movs	r2, #1
 8001418:	491d      	ldr	r1, [pc, #116]	; (8001490 <StartDrawing+0x148>)
 800141a:	4825      	ldr	r0, [pc, #148]	; (80014b0 <StartDrawing+0x168>)
 800141c:	f001 fa42 	bl	80028a4 <SSD1306_Puts>

	currentTime = getTime();
 8001420:	f000 fcc0 	bl	8001da4 <getTime>
 8001424:	6178      	str	r0, [r7, #20]
	SSD1306_GotoXY (0, 45);
 8001426:	212d      	movs	r1, #45	; 0x2d
 8001428:	2000      	movs	r0, #0
 800142a:	f001 f9a5 	bl	8002778 <SSD1306_GotoXY>
	SSD1306_Puts(currentTime, &Font_7x10, 1);
 800142e:	2201      	movs	r2, #1
 8001430:	4917      	ldr	r1, [pc, #92]	; (8001490 <StartDrawing+0x148>)
 8001432:	6978      	ldr	r0, [r7, #20]
 8001434:	f001 fa36 	bl	80028a4 <SSD1306_Puts>

	free(currentTime);
 8001438:	6978      	ldr	r0, [r7, #20]
 800143a:	f00b fd39 	bl	800ceb0 <free>

	SSD1306_GotoXY (80,10);
 800143e:	210a      	movs	r1, #10
 8001440:	2050      	movs	r0, #80	; 0x50
 8001442:	f001 f999 	bl	8002778 <SSD1306_GotoXY>
	SSD1306_Puts ("AL:", &Font_7x10, 1);
 8001446:	2201      	movs	r2, #1
 8001448:	4911      	ldr	r1, [pc, #68]	; (8001490 <StartDrawing+0x148>)
 800144a:	481a      	ldr	r0, [pc, #104]	; (80014b4 <StartDrawing+0x16c>)
 800144c:	f001 fa2a 	bl	80028a4 <SSD1306_Puts>

	SSD1306_GotoXY (110, 10);
 8001450:	210a      	movs	r1, #10
 8001452:	206e      	movs	r0, #110	; 0x6e
 8001454:	f001 f990 	bl	8002778 <SSD1306_GotoXY>
	sprintf(numbers, "%d", CurrentActivity.length);
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <StartDrawing+0x150>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	490e      	ldr	r1, [pc, #56]	; (800149c <StartDrawing+0x154>)
 8001464:	4618      	mov	r0, r3
 8001466:	f00c fc7b 	bl	800dd60 <siprintf>
	SSD1306_Puts(numbers, &Font_7x10, 1);
 800146a:	f107 0308 	add.w	r3, r7, #8
 800146e:	2201      	movs	r2, #1
 8001470:	4907      	ldr	r1, [pc, #28]	; (8001490 <StartDrawing+0x148>)
 8001472:	4618      	mov	r0, r3
 8001474:	f001 fa16 	bl	80028a4 <SSD1306_Puts>

	SSD1306_UpdateScreen();
 8001478:	f001 f8d8 	bl	800262c <SSD1306_UpdateScreen>

    osDelay(1000);
 800147c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001480:	f008 fb10 	bl	8009aa4 <osDelay>
  {
 8001484:	e764      	b.n	8001350 <StartDrawing+0x8>
 8001486:	bf00      	nop
 8001488:	2000022c 	.word	0x2000022c
 800148c:	08012010 	.word	0x08012010
 8001490:	20000000 	.word	0x20000000
 8001494:	0801201c 	.word	0x0801201c
 8001498:	20004ca4 	.word	0x20004ca4
 800149c:	08012024 	.word	0x08012024
 80014a0:	20004d08 	.word	0x20004d08
 80014a4:	08012028 	.word	0x08012028
 80014a8:	20000008 	.word	0x20000008
 80014ac:	08012030 	.word	0x08012030
 80014b0:	08012038 	.word	0x08012038
 80014b4:	08012044 	.word	0x08012044

080014b8 <StartActivityTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartActivityTask */
void StartActivityTask(void *argument)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartActivityTask */
	static float time;
	//static uint8_t activityPM[20];
	static uint8_t counter = 0, counterPM = 0, counterPauze = 0;
	static uint8_t trackActivity[4];
	char* SDString = "";
 80014c0:	4b91      	ldr	r3, [pc, #580]	; (8001708 <StartActivityTask+0x250>)
 80014c2:	61bb      	str	r3, [r7, #24]
  /* Infinite loop */
  for(;;)
  {
	  getActivity();
 80014c4:	f7ff fd9a 	bl	8000ffc <getActivity>

	  	if(time != GPS.utc_time)
 80014c8:	4b90      	ldr	r3, [pc, #576]	; (800170c <StartActivityTask+0x254>)
 80014ca:	ed93 7a06 	vldr	s14, [r3, #24]
 80014ce:	4b90      	ldr	r3, [pc, #576]	; (8001710 <StartActivityTask+0x258>)
 80014d0:	edd3 7a00 	vldr	s15, [r3]
 80014d4:	eeb4 7a67 	vcmp.f32	s14, s15
 80014d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014dc:	f000 810f 	beq.w	80016fe <StartActivityTask+0x246>
	  	{
	  		time = GPS.utc_time;
 80014e0:	4b8a      	ldr	r3, [pc, #552]	; (800170c <StartActivityTask+0x254>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a8a      	ldr	r2, [pc, #552]	; (8001710 <StartActivityTask+0x258>)
 80014e6:	6013      	str	r3, [r2, #0]

	  		if(counter < 60)	//one minute
 80014e8:	4b8a      	ldr	r3, [pc, #552]	; (8001714 <StartActivityTask+0x25c>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b3b      	cmp	r3, #59	; 0x3b
 80014ee:	d82d      	bhi.n	800154c <StartActivityTask+0x94>
	  		{
	  			switch (CurrentActivity.currentActivity) {
 80014f0:	4b89      	ldr	r3, [pc, #548]	; (8001718 <StartActivityTask+0x260>)
 80014f2:	7a1b      	ldrb	r3, [r3, #8]
 80014f4:	2b03      	cmp	r3, #3
 80014f6:	d014      	beq.n	8001522 <StartActivityTask+0x6a>
 80014f8:	2b03      	cmp	r3, #3
 80014fa:	dc19      	bgt.n	8001530 <StartActivityTask+0x78>
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d002      	beq.n	8001506 <StartActivityTask+0x4e>
 8001500:	2b02      	cmp	r3, #2
 8001502:	d007      	beq.n	8001514 <StartActivityTask+0x5c>
 8001504:	e014      	b.n	8001530 <StartActivityTask+0x78>
	  				case noMovement:
	  					trackActivity[noMovement]++;
 8001506:	4b85      	ldr	r3, [pc, #532]	; (800171c <StartActivityTask+0x264>)
 8001508:	785b      	ldrb	r3, [r3, #1]
 800150a:	3301      	adds	r3, #1
 800150c:	b2da      	uxtb	r2, r3
 800150e:	4b83      	ldr	r3, [pc, #524]	; (800171c <StartActivityTask+0x264>)
 8001510:	705a      	strb	r2, [r3, #1]
	  					break;
 8001512:	e014      	b.n	800153e <StartActivityTask+0x86>
	  				case walking:
	  					trackActivity[walking]++;
 8001514:	4b81      	ldr	r3, [pc, #516]	; (800171c <StartActivityTask+0x264>)
 8001516:	789b      	ldrb	r3, [r3, #2]
 8001518:	3301      	adds	r3, #1
 800151a:	b2da      	uxtb	r2, r3
 800151c:	4b7f      	ldr	r3, [pc, #508]	; (800171c <StartActivityTask+0x264>)
 800151e:	709a      	strb	r2, [r3, #2]
	  					break;
 8001520:	e00d      	b.n	800153e <StartActivityTask+0x86>
	  				case running:
	  					trackActivity[running]++;
 8001522:	4b7e      	ldr	r3, [pc, #504]	; (800171c <StartActivityTask+0x264>)
 8001524:	78db      	ldrb	r3, [r3, #3]
 8001526:	3301      	adds	r3, #1
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4b7c      	ldr	r3, [pc, #496]	; (800171c <StartActivityTask+0x264>)
 800152c:	70da      	strb	r2, [r3, #3]
	  					break;
 800152e:	e006      	b.n	800153e <StartActivityTask+0x86>
	  				default:
	  					trackActivity[unknown]++;
 8001530:	4b7a      	ldr	r3, [pc, #488]	; (800171c <StartActivityTask+0x264>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	3301      	adds	r3, #1
 8001536:	b2da      	uxtb	r2, r3
 8001538:	4b78      	ldr	r3, [pc, #480]	; (800171c <StartActivityTask+0x264>)
 800153a:	701a      	strb	r2, [r3, #0]
	  					break;
 800153c:	bf00      	nop
	  			}

	  			counter++;
 800153e:	4b75      	ldr	r3, [pc, #468]	; (8001714 <StartActivityTask+0x25c>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	3301      	adds	r3, #1
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4b73      	ldr	r3, [pc, #460]	; (8001714 <StartActivityTask+0x25c>)
 8001548:	701a      	strb	r2, [r3, #0]
 800154a:	e0d8      	b.n	80016fe <StartActivityTask+0x246>
	  		}
	  		else
	  		{
	  			uint8_t current = 0; //index = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	  			for(int i = 0; i < 4; i++)
 8001552:	2300      	movs	r3, #0
 8001554:	623b      	str	r3, [r7, #32]
 8001556:	e019      	b.n	800158c <StartActivityTask+0xd4>
	  			{
	  				if(current <= trackActivity[i])
 8001558:	4a70      	ldr	r2, [pc, #448]	; (800171c <StartActivityTask+0x264>)
 800155a:	6a3b      	ldr	r3, [r7, #32]
 800155c:	4413      	add	r3, r2
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001564:	429a      	cmp	r2, r3
 8001566:	d80e      	bhi.n	8001586 <StartActivityTask+0xce>
	  				{
	  					current = trackActivity[i];
 8001568:	4a6c      	ldr	r2, [pc, #432]	; (800171c <StartActivityTask+0x264>)
 800156a:	6a3b      	ldr	r3, [r7, #32]
 800156c:	4413      	add	r3, r2
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  					trackActivity[i] = 0;
 8001574:	4a69      	ldr	r2, [pc, #420]	; (800171c <StartActivityTask+0x264>)
 8001576:	6a3b      	ldr	r3, [r7, #32]
 8001578:	4413      	add	r3, r2
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]
	  					CurrentActivity.lastActiveMinute = i;
 800157e:	6a3b      	ldr	r3, [r7, #32]
 8001580:	b2da      	uxtb	r2, r3
 8001582:	4b65      	ldr	r3, [pc, #404]	; (8001718 <StartActivityTask+0x260>)
 8001584:	709a      	strb	r2, [r3, #2]
	  			for(int i = 0; i < 4; i++)
 8001586:	6a3b      	ldr	r3, [r7, #32]
 8001588:	3301      	adds	r3, #1
 800158a:	623b      	str	r3, [r7, #32]
 800158c:	6a3b      	ldr	r3, [r7, #32]
 800158e:	2b03      	cmp	r3, #3
 8001590:	dde2      	ble.n	8001558 <StartActivityTask+0xa0>
	  				}
	  			}

	  			if(counterPM < 0Xff)
 8001592:	4b63      	ldr	r3, [pc, #396]	; (8001720 <StartActivityTask+0x268>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2bff      	cmp	r3, #255	; 0xff
 8001598:	d065      	beq.n	8001666 <StartActivityTask+0x1ae>
	  			{
	  				if((CurrentActivity.lastActiveMinute == walking || CurrentActivity.lastActiveMinute == running))
 800159a:	4b5f      	ldr	r3, [pc, #380]	; (8001718 <StartActivityTask+0x260>)
 800159c:	789b      	ldrb	r3, [r3, #2]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d003      	beq.n	80015aa <StartActivityTask+0xf2>
 80015a2:	4b5d      	ldr	r3, [pc, #372]	; (8001718 <StartActivityTask+0x260>)
 80015a4:	789b      	ldrb	r3, [r3, #2]
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d134      	bne.n	8001614 <StartActivityTask+0x15c>
	  				{
	  					if(counterPM == 0)
 80015aa:	4b5d      	ldr	r3, [pc, #372]	; (8001720 <StartActivityTask+0x268>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d102      	bne.n	80015b8 <StartActivityTask+0x100>
	  					{
	  						writeStartToSD("MinActi.txt");
 80015b2:	485c      	ldr	r0, [pc, #368]	; (8001724 <StartActivityTask+0x26c>)
 80015b4:	f000 feda 	bl	800236c <writeStartToSD>
	  					}
	  					CalculateActivityAverage(CurrentActivity.lastActiveMinute);
 80015b8:	4b57      	ldr	r3, [pc, #348]	; (8001718 <StartActivityTask+0x260>)
 80015ba:	789b      	ldrb	r3, [r3, #2]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fda1 	bl	8001104 <CalculateActivityAverage>
	  					CurrentActivity.length++;
 80015c2:	4b55      	ldr	r3, [pc, #340]	; (8001718 <StartActivityTask+0x260>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	3301      	adds	r3, #1
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4b53      	ldr	r3, [pc, #332]	; (8001718 <StartActivityTask+0x260>)
 80015cc:	701a      	strb	r2, [r3, #0]
	  					CurrentActivity.activeDailyMinutes++;
 80015ce:	4b52      	ldr	r3, [pc, #328]	; (8001718 <StartActivityTask+0x260>)
 80015d0:	785b      	ldrb	r3, [r3, #1]
 80015d2:	3301      	adds	r3, #1
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4b50      	ldr	r3, [pc, #320]	; (8001718 <StartActivityTask+0x260>)
 80015d8:	705a      	strb	r2, [r3, #1]
	  					SDString = activityToString(CurrentActivity.lastActiveMinute);
 80015da:	4b4f      	ldr	r3, [pc, #316]	; (8001718 <StartActivityTask+0x260>)
 80015dc:	789b      	ldrb	r3, [r3, #2]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fd62 	bl	80010a8 <activityToString>
 80015e4:	61b8      	str	r0, [r7, #24]
						if(!activityToSD("MinActi.txt", SDString))
 80015e6:	69b9      	ldr	r1, [r7, #24]
 80015e8:	484e      	ldr	r0, [pc, #312]	; (8001724 <StartActivityTask+0x26c>)
 80015ea:	f000 fe5f 	bl	80022ac <activityToSD>
 80015ee:	4603      	mov	r3, r0
 80015f0:	f083 0301 	eor.w	r3, r3, #1
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d005      	beq.n	8001606 <StartActivityTask+0x14e>
						{
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, SET);
 80015fa:	2201      	movs	r2, #1
 80015fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001600:	4849      	ldr	r0, [pc, #292]	; (8001728 <StartActivityTask+0x270>)
 8001602:	f002 fc1d 	bl	8003e40 <HAL_GPIO_WritePin>
						}
	  					counterPM++;
 8001606:	4b46      	ldr	r3, [pc, #280]	; (8001720 <StartActivityTask+0x268>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	3301      	adds	r3, #1
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4b44      	ldr	r3, [pc, #272]	; (8001720 <StartActivityTask+0x268>)
 8001610:	701a      	strb	r2, [r3, #0]
 8001612:	e071      	b.n	80016f8 <StartActivityTask+0x240>
	  				}
	  				else if(counterPM != 0 && (CurrentActivity.lastActiveMinute == noMovement || CurrentActivity.lastActiveMinute == unknown))
 8001614:	4b42      	ldr	r3, [pc, #264]	; (8001720 <StartActivityTask+0x268>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d06d      	beq.n	80016f8 <StartActivityTask+0x240>
 800161c:	4b3e      	ldr	r3, [pc, #248]	; (8001718 <StartActivityTask+0x260>)
 800161e:	789b      	ldrb	r3, [r3, #2]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d003      	beq.n	800162c <StartActivityTask+0x174>
 8001624:	4b3c      	ldr	r3, [pc, #240]	; (8001718 <StartActivityTask+0x260>)
 8001626:	789b      	ldrb	r3, [r3, #2]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d165      	bne.n	80016f8 <StartActivityTask+0x240>
	  				{
	  					if(counterPauze < 2)
 800162c:	4b3f      	ldr	r3, [pc, #252]	; (800172c <StartActivityTask+0x274>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d811      	bhi.n	8001658 <StartActivityTask+0x1a0>
	  					{
	  						CalculateActivityAverage(CurrentActivity.lastActiveMinute);
 8001634:	4b38      	ldr	r3, [pc, #224]	; (8001718 <StartActivityTask+0x260>)
 8001636:	789b      	ldrb	r3, [r3, #2]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fd63 	bl	8001104 <CalculateActivityAverage>
	  						counterPauze++;
 800163e:	4b3b      	ldr	r3, [pc, #236]	; (800172c <StartActivityTask+0x274>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	3301      	adds	r3, #1
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4b39      	ldr	r3, [pc, #228]	; (800172c <StartActivityTask+0x274>)
 8001648:	701a      	strb	r2, [r3, #0]
	  						counterPM++;
 800164a:	4b35      	ldr	r3, [pc, #212]	; (8001720 <StartActivityTask+0x268>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	3301      	adds	r3, #1
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4b33      	ldr	r3, [pc, #204]	; (8001720 <StartActivityTask+0x268>)
 8001654:	701a      	strb	r2, [r3, #0]
 8001656:	e04f      	b.n	80016f8 <StartActivityTask+0x240>
	  					}
	  					else
	  					{
	  						counterPM = 0Xff;
 8001658:	4b31      	ldr	r3, [pc, #196]	; (8001720 <StartActivityTask+0x268>)
 800165a:	22ff      	movs	r2, #255	; 0xff
 800165c:	701a      	strb	r2, [r3, #0]
	  						counterPauze = 0;
 800165e:	4b33      	ldr	r3, [pc, #204]	; (800172c <StartActivityTask+0x274>)
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
 8001664:	e048      	b.n	80016f8 <StartActivityTask+0x240>
	  			else
	  			{
	  				//calculate the avarage for total activity
	  				//and write total activity to sd

	  				current = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  				for(int i = 0; i < sizeof(CurrentActivity.activityTotal); i++)
 800166c:	2300      	movs	r3, #0
 800166e:	61fb      	str	r3, [r7, #28]
 8001670:	e01c      	b.n	80016ac <StartActivityTask+0x1f4>
					{
						if(current <= CurrentActivity.activityTotal[i])
 8001672:	4a29      	ldr	r2, [pc, #164]	; (8001718 <StartActivityTask+0x260>)
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	4413      	add	r3, r2
 8001678:	3303      	adds	r3, #3
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001680:	429a      	cmp	r2, r3
 8001682:	d810      	bhi.n	80016a6 <StartActivityTask+0x1ee>
						{
							current = CurrentActivity.activityTotal[i];
 8001684:	4a24      	ldr	r2, [pc, #144]	; (8001718 <StartActivityTask+0x260>)
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	4413      	add	r3, r2
 800168a:	3303      	adds	r3, #3
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							CurrentActivity.activityTotal[i] = 0;
 8001692:	4a21      	ldr	r2, [pc, #132]	; (8001718 <StartActivityTask+0x260>)
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	4413      	add	r3, r2
 8001698:	3303      	adds	r3, #3
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
							CurrentActivity.totalActivity = i;
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <StartActivityTask+0x260>)
 80016a4:	725a      	strb	r2, [r3, #9]
	  				for(int i = 0; i < sizeof(CurrentActivity.activityTotal); i++)
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3301      	adds	r3, #1
 80016aa:	61fb      	str	r3, [r7, #28]
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	2b03      	cmp	r3, #3
 80016b0:	d9df      	bls.n	8001672 <StartActivityTask+0x1ba>
						}
					}
	  				char numbers[10];
					sprintf(numbers, "%d", CurrentActivity.length);
 80016b2:	4b19      	ldr	r3, [pc, #100]	; (8001718 <StartActivityTask+0x260>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	f107 030c 	add.w	r3, r7, #12
 80016bc:	491c      	ldr	r1, [pc, #112]	; (8001730 <StartActivityTask+0x278>)
 80016be:	4618      	mov	r0, r3
 80016c0:	f00c fb4e 	bl	800dd60 <siprintf>
					SDString = activityToString(CurrentActivity.totalActivity);
 80016c4:	4b14      	ldr	r3, [pc, #80]	; (8001718 <StartActivityTask+0x260>)
 80016c6:	7a5b      	ldrb	r3, [r3, #9]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fced 	bl	80010a8 <activityToString>
 80016ce:	61b8      	str	r0, [r7, #24]
	  				totalActivityToSD("MinActi.txt", numbers, SDString);
 80016d0:	f107 030c 	add.w	r3, r7, #12
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4619      	mov	r1, r3
 80016d8:	4812      	ldr	r0, [pc, #72]	; (8001724 <StartActivityTask+0x26c>)
 80016da:	f000 fe13 	bl	8002304 <totalActivityToSD>

	  				//lengte van de activiteit toevoegen
	  				CurrentActivity.previousLength = CurrentActivity.length;
 80016de:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <StartActivityTask+0x260>)
 80016e0:	781a      	ldrb	r2, [r3, #0]
 80016e2:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <StartActivityTask+0x260>)
 80016e4:	71da      	strb	r2, [r3, #7]
	  				CurrentActivity.length = 0;
 80016e6:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <StartActivityTask+0x260>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	701a      	strb	r2, [r3, #0]
	  				counterPM = 0;
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <StartActivityTask+0x268>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
	  				counterPauze = 0;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <StartActivityTask+0x274>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
	  			}
	  			counter = 0;
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <StartActivityTask+0x25c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
	  		}

	  	}

	      osDelay(100);
 80016fe:	2064      	movs	r0, #100	; 0x64
 8001700:	f008 f9d0 	bl	8009aa4 <osDelay>
	  getActivity();
 8001704:	e6de      	b.n	80014c4 <StartActivityTask+0xc>
 8001706:	bf00      	nop
 8001708:	08012048 	.word	0x08012048
 800170c:	20004d08 	.word	0x20004d08
 8001710:	20000234 	.word	0x20000234
 8001714:	20000238 	.word	0x20000238
 8001718:	20004ca4 	.word	0x20004ca4
 800171c:	2000023c 	.word	0x2000023c
 8001720:	20000240 	.word	0x20000240
 8001724:	0801204c 	.word	0x0801204c
 8001728:	40020400 	.word	0x40020400
 800172c:	20000241 	.word	0x20000241
 8001730:	08012024 	.word	0x08012024

08001734 <StartReadBattery>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadBattery */
void StartReadBattery(void *argument)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadBattery */
  /* Infinite loop */
  for(;;)
  {
	batteryPer = calculateBattery(CALCULATEPERCENTAGE);
 800173c:	2000      	movs	r0, #0
 800173e:	f000 f82f 	bl	80017a0 <calculateBattery>
 8001742:	eef0 7a40 	vmov.f32	s15, s0
 8001746:	4b13      	ldr	r3, [pc, #76]	; (8001794 <StartReadBattery+0x60>)
 8001748:	edc3 7a00 	vstr	s15, [r3]
	batteryVol = calculateBattery(CALCULATEVOLTAGE);
 800174c:	2001      	movs	r0, #1
 800174e:	f000 f827 	bl	80017a0 <calculateBattery>
 8001752:	eef0 7a40 	vmov.f32	s15, s0
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <StartReadBattery+0x64>)
 8001758:	edc3 7a00 	vstr	s15, [r3]
	if(batteryVol < 3.0)
 800175c:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <StartReadBattery+0x64>)
 800175e:	edd3 7a00 	vldr	s15, [r3]
 8001762:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001766:	eef4 7ac7 	vcmpe.f32	s15, s14
 800176a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176e:	d506      	bpl.n	800177e <StartReadBattery+0x4a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, SET);
 8001770:	2201      	movs	r2, #1
 8001772:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001776:	4809      	ldr	r0, [pc, #36]	; (800179c <StartReadBattery+0x68>)
 8001778:	f002 fb62 	bl	8003e40 <HAL_GPIO_WritePin>
 800177c:	e005      	b.n	800178a <StartReadBattery+0x56>
	} else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 800177e:	2200      	movs	r2, #0
 8001780:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001784:	4805      	ldr	r0, [pc, #20]	; (800179c <StartReadBattery+0x68>)
 8001786:	f002 fb5b 	bl	8003e40 <HAL_GPIO_WritePin>
	}
    osDelay(5000);
 800178a:	f241 3088 	movw	r0, #5000	; 0x1388
 800178e:	f008 f989 	bl	8009aa4 <osDelay>
	batteryPer = calculateBattery(CALCULATEPERCENTAGE);
 8001792:	e7d3      	b.n	800173c <StartReadBattery+0x8>
 8001794:	2000022c 	.word	0x2000022c
 8001798:	20000230 	.word	0x20000230
 800179c:	40020400 	.word	0x40020400

080017a0 <calculateBattery>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

float calculateBattery(uint8_t whatCalculation)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
	uint16_t localADC = ADCValue;	//grab the last conversion value
 80017aa:	4b31      	ldr	r3, [pc, #196]	; (8001870 <calculateBattery+0xd0>)
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	81fb      	strh	r3, [r7, #14]
	HAL_ADC_Start_IT(&hadc1);		//start a new conversion already so it's ready for the next time the function is called
 80017b0:	4830      	ldr	r0, [pc, #192]	; (8001874 <calculateBattery+0xd4>)
 80017b2:	f001 fc05 	bl	8002fc0 <HAL_ADC_Start_IT>
	if(whatCalculation == CALCULATEPERCENTAGE)
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d12b      	bne.n	8001814 <calculateBattery+0x74>
	{
		return 71.428571428571 * ((localADC / (float)4095) * 4.2) - 200;
 80017bc:	89fb      	ldrh	r3, [r7, #14]
 80017be:	ee07 3a90 	vmov	s15, r3
 80017c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017c6:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001878 <calculateBattery+0xd8>
 80017ca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017ce:	ee16 0a90 	vmov	r0, s13
 80017d2:	f7fe fec1 	bl	8000558 <__aeabi_f2d>
 80017d6:	a322      	add	r3, pc, #136	; (adr r3, 8001860 <calculateBattery+0xc0>)
 80017d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017dc:	f7fe ff14 	bl	8000608 <__aeabi_dmul>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4610      	mov	r0, r2
 80017e6:	4619      	mov	r1, r3
 80017e8:	a31f      	add	r3, pc, #124	; (adr r3, 8001868 <calculateBattery+0xc8>)
 80017ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ee:	f7fe ff0b 	bl	8000608 <__aeabi_dmul>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4610      	mov	r0, r2
 80017f8:	4619      	mov	r1, r3
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	4b1f      	ldr	r3, [pc, #124]	; (800187c <calculateBattery+0xdc>)
 8001800:	f7fe fd4a 	bl	8000298 <__aeabi_dsub>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4610      	mov	r0, r2
 800180a:	4619      	mov	r1, r3
 800180c:	f7ff f9f4 	bl	8000bf8 <__aeabi_d2f>
 8001810:	4603      	mov	r3, r0
 8001812:	e01d      	b.n	8001850 <calculateBattery+0xb0>
		//return (localADC / (float)4095) * 100;
	} else if(whatCalculation == CALCULATEVOLTAGE)
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d119      	bne.n	800184e <calculateBattery+0xae>
	{
		return (localADC / (float)4095) * 4.2;
 800181a:	89fb      	ldrh	r3, [r7, #14]
 800181c:	ee07 3a90 	vmov	s15, r3
 8001820:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001824:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001878 <calculateBattery+0xd8>
 8001828:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800182c:	ee16 0a90 	vmov	r0, s13
 8001830:	f7fe fe92 	bl	8000558 <__aeabi_f2d>
 8001834:	a30a      	add	r3, pc, #40	; (adr r3, 8001860 <calculateBattery+0xc0>)
 8001836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183a:	f7fe fee5 	bl	8000608 <__aeabi_dmul>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4610      	mov	r0, r2
 8001844:	4619      	mov	r1, r3
 8001846:	f7ff f9d7 	bl	8000bf8 <__aeabi_d2f>
 800184a:	4603      	mov	r3, r0
 800184c:	e000      	b.n	8001850 <calculateBattery+0xb0>
	}
	return -1.0;
 800184e:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <calculateBattery+0xe0>)
 8001850:	ee07 3a90 	vmov	s15, r3
}
 8001854:	eeb0 0a67 	vmov.f32	s0, s15
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	cccccccd 	.word	0xcccccccd
 8001864:	4010cccc 	.word	0x4010cccc
 8001868:	b6db6d99 	.word	0xb6db6d99
 800186c:	4051db6d 	.word	0x4051db6d
 8001870:	20000228 	.word	0x20000228
 8001874:	20004cb0 	.word	0x20004cb0
 8001878:	457ff000 	.word	0x457ff000
 800187c:	40690000 	.word	0x40690000
 8001880:	bf800000 	.word	0xbf800000

08001884 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	; 0x28
 8001888:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	60da      	str	r2, [r3, #12]
 8001898:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	4b37      	ldr	r3, [pc, #220]	; (800197c <MX_GPIO_Init+0xf8>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a36      	ldr	r2, [pc, #216]	; (800197c <MX_GPIO_Init+0xf8>)
 80018a4:	f043 0304 	orr.w	r3, r3, #4
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b34      	ldr	r3, [pc, #208]	; (800197c <MX_GPIO_Init+0xf8>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0304 	and.w	r3, r3, #4
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	4b30      	ldr	r3, [pc, #192]	; (800197c <MX_GPIO_Init+0xf8>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a2f      	ldr	r2, [pc, #188]	; (800197c <MX_GPIO_Init+0xf8>)
 80018c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b2d      	ldr	r3, [pc, #180]	; (800197c <MX_GPIO_Init+0xf8>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	4b29      	ldr	r3, [pc, #164]	; (800197c <MX_GPIO_Init+0xf8>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a28      	ldr	r2, [pc, #160]	; (800197c <MX_GPIO_Init+0xf8>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b26      	ldr	r3, [pc, #152]	; (800197c <MX_GPIO_Init+0xf8>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	4b22      	ldr	r3, [pc, #136]	; (800197c <MX_GPIO_Init+0xf8>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a21      	ldr	r2, [pc, #132]	; (800197c <MX_GPIO_Init+0xf8>)
 80018f8:	f043 0302 	orr.w	r3, r3, #2
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b1f      	ldr	r3, [pc, #124]	; (800197c <MX_GPIO_Init+0xf8>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800190a:	2200      	movs	r2, #0
 800190c:	2110      	movs	r1, #16
 800190e:	481c      	ldr	r0, [pc, #112]	; (8001980 <MX_GPIO_Init+0xfc>)
 8001910:	f002 fa96 	bl	8003e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001914:	2200      	movs	r2, #0
 8001916:	f240 3102 	movw	r1, #770	; 0x302
 800191a:	481a      	ldr	r0, [pc, #104]	; (8001984 <MX_GPIO_Init+0x100>)
 800191c:	f002 fa90 	bl	8003e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001920:	2310      	movs	r3, #16
 8001922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001924:	2301      	movs	r3, #1
 8001926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	2300      	movs	r3, #0
 800192e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	4619      	mov	r1, r3
 8001936:	4812      	ldr	r0, [pc, #72]	; (8001980 <MX_GPIO_Init+0xfc>)
 8001938:	f002 f8fe 	bl	8003b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9;
 800193c:	f240 3302 	movw	r3, #770	; 0x302
 8001940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001942:	2301      	movs	r3, #1
 8001944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2300      	movs	r3, #0
 800194c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4619      	mov	r1, r3
 8001954:	480b      	ldr	r0, [pc, #44]	; (8001984 <MX_GPIO_Init+0x100>)
 8001956:	f002 f8ef 	bl	8003b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|SD_CD_Pin;
 800195a:	230c      	movs	r3, #12
 800195c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800195e:	2300      	movs	r3, #0
 8001960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001966:	f107 0314 	add.w	r3, r7, #20
 800196a:	4619      	mov	r1, r3
 800196c:	4805      	ldr	r0, [pc, #20]	; (8001984 <MX_GPIO_Init+0x100>)
 800196e:	f002 f8e3 	bl	8003b38 <HAL_GPIO_Init>

}
 8001972:	bf00      	nop
 8001974:	3728      	adds	r7, #40	; 0x28
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800
 8001980:	40020000 	.word	0x40020000
 8001984:	40020400 	.word	0x40020400

08001988 <GPS_Init>:
	CDC_Transmit_FS((unsigned char *) buf, (uint16_t) strlen(buf));
}
#endif

void GPS_Init()
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &GPS.rxTmp, 1);
 800198c:	2201      	movs	r2, #1
 800198e:	4903      	ldr	r1, [pc, #12]	; (800199c <GPS_Init+0x14>)
 8001990:	4803      	ldr	r0, [pc, #12]	; (80019a0 <GPS_Init+0x18>)
 8001992:	f004 fa26 	bl	8005de2 <HAL_UART_Receive_IT>
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20004f64 	.word	0x20004f64
 80019a0:	200054c8 	.word	0x200054c8

080019a4 <GPS_UART_CallBack>:


void GPS_UART_CallBack(){
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	GPS.LastTime=HAL_GetTick();
 80019a8:	f001 fa96 	bl	8002ed8 <HAL_GetTick>
 80019ac:	4603      	mov	r3, r0
 80019ae:	4a35      	ldr	r2, [pc, #212]	; (8001a84 <GPS_UART_CallBack+0xe0>)
 80019b0:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
	static int i = 0;
	if(GPS.rxTmp != '\n' && GPS.rxIndex < sizeof(GPS.rxBuffer)-2)
 80019b4:	4b33      	ldr	r3, [pc, #204]	; (8001a84 <GPS_UART_CallBack+0xe0>)
 80019b6:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80019ba:	2b0a      	cmp	r3, #10
 80019bc:	d044      	beq.n	8001a48 <GPS_UART_CallBack+0xa4>
 80019be:	4b31      	ldr	r3, [pc, #196]	; (8001a84 <GPS_UART_CallBack+0xe0>)
 80019c0:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 80019c4:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80019c8:	d23e      	bcs.n	8001a48 <GPS_UART_CallBack+0xa4>
	{
		if(i % 2)
 80019ca:	4b2f      	ldr	r3, [pc, #188]	; (8001a88 <GPS_UART_CallBack+0xe4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d032      	beq.n	8001a3c <GPS_UART_CallBack+0x98>
		{
			if(GPS.rxBuffer[GPS.rxIndex - 1]== ',' && GPS.rxTmp == ',') {  // check n-1 and n chr's for two ',,'
 80019d6:	4b2b      	ldr	r3, [pc, #172]	; (8001a84 <GPS_UART_CallBack+0xe0>)
 80019d8:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 80019dc:	3b01      	subs	r3, #1
 80019de:	4a29      	ldr	r2, [pc, #164]	; (8001a84 <GPS_UART_CallBack+0xe0>)
 80019e0:	4413      	add	r3, r2
 80019e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80019e6:	2b2c      	cmp	r3, #44	; 0x2c
 80019e8:	d115      	bne.n	8001a16 <GPS_UART_CallBack+0x72>
 80019ea:	4b26      	ldr	r3, [pc, #152]	; (8001a84 <GPS_UART_CallBack+0xe0>)
 80019ec:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80019f0:	2b2c      	cmp	r3, #44	; 0x2c
 80019f2:	d110      	bne.n	8001a16 <GPS_UART_CallBack+0x72>
				GPS.rxBuffer[GPS.rxIndex] = '0';      // add a '0'
 80019f4:	4b23      	ldr	r3, [pc, #140]	; (8001a84 <GPS_UART_CallBack+0xe0>)
 80019f6:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 80019fa:	461a      	mov	r2, r3
 80019fc:	4b21      	ldr	r3, [pc, #132]	; (8001a84 <GPS_UART_CallBack+0xe0>)
 80019fe:	4413      	add	r3, r2
 8001a00:	2230      	movs	r2, #48	; 0x30
 8001a02:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
				GPS.rxIndex++;
 8001a06:	4b1f      	ldr	r3, [pc, #124]	; (8001a84 <GPS_UART_CallBack+0xe0>)
 8001a08:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	4b1c      	ldr	r3, [pc, #112]	; (8001a84 <GPS_UART_CallBack+0xe0>)
 8001a12:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
			}

			GPS.rxBuffer[GPS.rxIndex] = GPS.rxTmp;
 8001a16:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <GPS_UART_CallBack+0xe0>)
 8001a18:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <GPS_UART_CallBack+0xe0>)
 8001a20:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 8001a24:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <GPS_UART_CallBack+0xe0>)
 8001a26:	440b      	add	r3, r1
 8001a28:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

			GPS.rxIndex++;
 8001a2c:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <GPS_UART_CallBack+0xe0>)
 8001a2e:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 8001a32:	3301      	adds	r3, #1
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <GPS_UART_CallBack+0xe0>)
 8001a38:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
		}
		i++;
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <GPS_UART_CallBack+0xe4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	3301      	adds	r3, #1
 8001a42:	4a11      	ldr	r2, [pc, #68]	; (8001a88 <GPS_UART_CallBack+0xe4>)
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	e015      	b.n	8001a74 <GPS_UART_CallBack+0xd0>
	}
	else
	{

		if(GPS_validate((char*) GPS.rxBuffer))
 8001a48:	4810      	ldr	r0, [pc, #64]	; (8001a8c <GPS_UART_CallBack+0xe8>)
 8001a4a:	f000 f825 	bl	8001a98 <GPS_validate>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d002      	beq.n	8001a5a <GPS_UART_CallBack+0xb6>
			GPS_parse((char*) GPS.rxBuffer);
 8001a54:	480d      	ldr	r0, [pc, #52]	; (8001a8c <GPS_UART_CallBack+0xe8>)
 8001a56:	f000 f881 	bl	8001b5c <GPS_parse>
		GPS.rxIndex=0;
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <GPS_UART_CallBack+0xe0>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
		i = 0;
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <GPS_UART_CallBack+0xe4>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
		memset(GPS.rxBuffer, 0, sizeof(GPS.rxBuffer));
 8001a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4807      	ldr	r0, [pc, #28]	; (8001a8c <GPS_UART_CallBack+0xe8>)
 8001a70:	f00b fa34 	bl	800cedc <memset>
	}
	HAL_UART_Receive_IT(GPS_USART, &GPS.rxTmp, 1);
 8001a74:	2201      	movs	r2, #1
 8001a76:	4906      	ldr	r1, [pc, #24]	; (8001a90 <GPS_UART_CallBack+0xec>)
 8001a78:	4806      	ldr	r0, [pc, #24]	; (8001a94 <GPS_UART_CallBack+0xf0>)
 8001a7a:	f004 f9b2 	bl	8005de2 <HAL_UART_Receive_IT>
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20004d08 	.word	0x20004d08
 8001a88:	20000244 	.word	0x20000244
 8001a8c:	20004d61 	.word	0x20004d61
 8001a90:	20004f64 	.word	0x20004f64
 8001a94:	200054c8 	.word	0x200054c8

08001a98 <GPS_validate>:


int GPS_validate(char *nmeastr){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	613b      	str	r3, [r7, #16]


    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b24      	cmp	r3, #36	; 0x24
 8001ab2:	d103      	bne.n	8001abc <GPS_validate+0x24>
        i++;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	617b      	str	r3, [r7, #20]
    else
        return 0;


    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001aba:	e00c      	b.n	8001ad6 <GPS_validate+0x3e>
        return 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	e047      	b.n	8001b50 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	4053      	eors	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        i++;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	4413      	add	r3, r2
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d008      	beq.n	8001af4 <GPS_validate+0x5c>
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b2a      	cmp	r3, #42	; 0x2a
 8001aec:	d002      	beq.n	8001af4 <GPS_validate+0x5c>
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	2b4a      	cmp	r3, #74	; 0x4a
 8001af2:	dde5      	ble.n	8001ac0 <GPS_validate+0x28>
    }

    if(i >= 75){
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	2b4a      	cmp	r3, #74	; 0x4a
 8001af8:	dd01      	ble.n	8001afe <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 8001afa:	2300      	movs	r3, #0
 8001afc:	e028      	b.n	8001b50 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	4413      	add	r3, r2
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b2a      	cmp	r3, #42	; 0x2a
 8001b08:	d119      	bne.n	8001b3e <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	3302      	adds	r3, #2
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8001b26:	f107 0308 	add.w	r3, r7, #8
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	490a      	ldr	r1, [pc, #40]	; (8001b58 <GPS_validate+0xc0>)
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f00c f916 	bl	800dd60 <siprintf>

    return((checkcalcstr[0] == check[0])
 8001b34:	7a3a      	ldrb	r2, [r7, #8]
 8001b36:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d108      	bne.n	8001b4e <GPS_validate+0xb6>
 8001b3c:	e001      	b.n	8001b42 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e006      	b.n	8001b50 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001b42:	7a7a      	ldrb	r2, [r7, #9]
 8001b44:	7b7b      	ldrb	r3, [r7, #13]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d101      	bne.n	8001b4e <GPS_validate+0xb6>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e000      	b.n	8001b50 <GPS_validate+0xb8>
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	08012058 	.word	0x08012058

08001b5c <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	; 0x28
 8001b60:	af08      	add	r7, sp, #32
 8001b62:	6078      	str	r0, [r7, #4]



	   if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 8001b64:	2206      	movs	r2, #6
 8001b66:	494a      	ldr	r1, [pc, #296]	; (8001c90 <GPS_parse+0x134>)
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f00c f98a 	bl	800de82 <strncmp>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d118      	bne.n	8001ba6 <GPS_parse+0x4a>

	    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1)
 8001b74:	4b47      	ldr	r3, [pc, #284]	; (8001c94 <GPS_parse+0x138>)
 8001b76:	9307      	str	r3, [sp, #28]
 8001b78:	4b47      	ldr	r3, [pc, #284]	; (8001c98 <GPS_parse+0x13c>)
 8001b7a:	9306      	str	r3, [sp, #24]
 8001b7c:	4b47      	ldr	r3, [pc, #284]	; (8001c9c <GPS_parse+0x140>)
 8001b7e:	9305      	str	r3, [sp, #20]
 8001b80:	4b47      	ldr	r3, [pc, #284]	; (8001ca0 <GPS_parse+0x144>)
 8001b82:	9304      	str	r3, [sp, #16]
 8001b84:	4b47      	ldr	r3, [pc, #284]	; (8001ca4 <GPS_parse+0x148>)
 8001b86:	9303      	str	r3, [sp, #12]
 8001b88:	4b47      	ldr	r3, [pc, #284]	; (8001ca8 <GPS_parse+0x14c>)
 8001b8a:	9302      	str	r3, [sp, #8]
 8001b8c:	4b47      	ldr	r3, [pc, #284]	; (8001cac <GPS_parse+0x150>)
 8001b8e:	9301      	str	r3, [sp, #4]
 8001b90:	4b47      	ldr	r3, [pc, #284]	; (8001cb0 <GPS_parse+0x154>)
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	4b47      	ldr	r3, [pc, #284]	; (8001cb4 <GPS_parse+0x158>)
 8001b96:	4a48      	ldr	r2, [pc, #288]	; (8001cb8 <GPS_parse+0x15c>)
 8001b98:	4948      	ldr	r1, [pc, #288]	; (8001cbc <GPS_parse+0x160>)
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f00c f900 	bl	800dda0 <siscanf>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	e070      	b.n	8001c88 <GPS_parse+0x12c>
	    		return;
	    }
	    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 8001ba6:	2206      	movs	r2, #6
 8001ba8:	4945      	ldr	r1, [pc, #276]	; (8001cc0 <GPS_parse+0x164>)
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f00c f969 	bl	800de82 <strncmp>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d114      	bne.n	8001be0 <GPS_parse+0x84>

	    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 8001bb6:	4b43      	ldr	r3, [pc, #268]	; (8001cc4 <GPS_parse+0x168>)
 8001bb8:	9305      	str	r3, [sp, #20]
 8001bba:	4b43      	ldr	r3, [pc, #268]	; (8001cc8 <GPS_parse+0x16c>)
 8001bbc:	9304      	str	r3, [sp, #16]
 8001bbe:	4b43      	ldr	r3, [pc, #268]	; (8001ccc <GPS_parse+0x170>)
 8001bc0:	9303      	str	r3, [sp, #12]
 8001bc2:	4b39      	ldr	r3, [pc, #228]	; (8001ca8 <GPS_parse+0x14c>)
 8001bc4:	9302      	str	r3, [sp, #8]
 8001bc6:	4b39      	ldr	r3, [pc, #228]	; (8001cac <GPS_parse+0x150>)
 8001bc8:	9301      	str	r3, [sp, #4]
 8001bca:	4b39      	ldr	r3, [pc, #228]	; (8001cb0 <GPS_parse+0x154>)
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	4b39      	ldr	r3, [pc, #228]	; (8001cb4 <GPS_parse+0x158>)
 8001bd0:	4a39      	ldr	r2, [pc, #228]	; (8001cb8 <GPS_parse+0x15c>)
 8001bd2:	493f      	ldr	r1, [pc, #252]	; (8001cd0 <GPS_parse+0x174>)
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f00c f8e3 	bl	800dda0 <siscanf>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	e053      	b.n	8001c88 <GPS_parse+0x12c>
	    		return;
	    }
	    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 8001be0:	2206      	movs	r2, #6
 8001be2:	493c      	ldr	r1, [pc, #240]	; (8001cd4 <GPS_parse+0x178>)
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f00c f94c 	bl	800de82 <strncmp>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d12f      	bne.n	8001c50 <GPS_parse+0xf4>

	        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 8001bf0:	4b39      	ldr	r3, [pc, #228]	; (8001cd8 <GPS_parse+0x17c>)
 8001bf2:	9303      	str	r3, [sp, #12]
 8001bf4:	4b30      	ldr	r3, [pc, #192]	; (8001cb8 <GPS_parse+0x15c>)
 8001bf6:	9302      	str	r3, [sp, #8]
 8001bf8:	4b2b      	ldr	r3, [pc, #172]	; (8001ca8 <GPS_parse+0x14c>)
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	4b2b      	ldr	r3, [pc, #172]	; (8001cac <GPS_parse+0x150>)
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	4b2b      	ldr	r3, [pc, #172]	; (8001cb0 <GPS_parse+0x154>)
 8001c02:	4a2c      	ldr	r2, [pc, #176]	; (8001cb4 <GPS_parse+0x158>)
 8001c04:	4935      	ldr	r1, [pc, #212]	; (8001cdc <GPS_parse+0x180>)
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f00c f8ca 	bl	800dda0 <siscanf>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	dd3a      	ble.n	8001c88 <GPS_parse+0x12c>
	        {
				GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001c12:	4b33      	ldr	r3, [pc, #204]	; (8001ce0 <GPS_parse+0x184>)
 8001c14:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c18:	4b31      	ldr	r3, [pc, #196]	; (8001ce0 <GPS_parse+0x184>)
 8001c1a:	7f1b      	ldrb	r3, [r3, #28]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c22:	f000 f871 	bl	8001d08 <GPS_nmea_to_dec>
 8001c26:	eef0 7a40 	vmov.f32	s15, s0
 8001c2a:	4b2d      	ldr	r3, [pc, #180]	; (8001ce0 <GPS_parse+0x184>)
 8001c2c:	edc3 7a01 	vstr	s15, [r3, #4]
				GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001c30:	4b2b      	ldr	r3, [pc, #172]	; (8001ce0 <GPS_parse+0x184>)
 8001c32:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c36:	4b2a      	ldr	r3, [pc, #168]	; (8001ce0 <GPS_parse+0x184>)
 8001c38:	7f5b      	ldrb	r3, [r3, #29]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c40:	f000 f862 	bl	8001d08 <GPS_nmea_to_dec>
 8001c44:	eef0 7a40 	vmov.f32	s15, s0
 8001c48:	4b25      	ldr	r3, [pc, #148]	; (8001ce0 <GPS_parse+0x184>)
 8001c4a:	edc3 7a00 	vstr	s15, [r3]

				return;
 8001c4e:	e01b      	b.n	8001c88 <GPS_parse+0x12c>
			}
	    }
	    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 8001c50:	2206      	movs	r2, #6
 8001c52:	4924      	ldr	r1, [pc, #144]	; (8001ce4 <GPS_parse+0x188>)
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f00c f914 	bl	800de82 <strncmp>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d113      	bne.n	8001c88 <GPS_parse+0x12c>

			if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8001c60:	4b21      	ldr	r3, [pc, #132]	; (8001ce8 <GPS_parse+0x18c>)
 8001c62:	9305      	str	r3, [sp, #20]
 8001c64:	4b21      	ldr	r3, [pc, #132]	; (8001cec <GPS_parse+0x190>)
 8001c66:	9304      	str	r3, [sp, #16]
 8001c68:	4b21      	ldr	r3, [pc, #132]	; (8001cf0 <GPS_parse+0x194>)
 8001c6a:	9303      	str	r3, [sp, #12]
 8001c6c:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <GPS_parse+0x170>)
 8001c6e:	9302      	str	r3, [sp, #8]
 8001c70:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <GPS_parse+0x198>)
 8001c72:	9301      	str	r3, [sp, #4]
 8001c74:	4b20      	ldr	r3, [pc, #128]	; (8001cf8 <GPS_parse+0x19c>)
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	4b20      	ldr	r3, [pc, #128]	; (8001cfc <GPS_parse+0x1a0>)
 8001c7a:	4a21      	ldr	r2, [pc, #132]	; (8001d00 <GPS_parse+0x1a4>)
 8001c7c:	4921      	ldr	r1, [pc, #132]	; (8001d04 <GPS_parse+0x1a8>)
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f00c f88e 	bl	800dda0 <siscanf>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
				return;

	    }
	}
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	08012060 	.word	0x08012060
 8001c94:	20004d38 	.word	0x20004d38
 8001c98:	20004d34 	.word	0x20004d34
 8001c9c:	20004d30 	.word	0x20004d30
 8001ca0:	20004d2c 	.word	0x20004d2c
 8001ca4:	20004d28 	.word	0x20004d28
 8001ca8:	20004d25 	.word	0x20004d25
 8001cac:	20004d18 	.word	0x20004d18
 8001cb0:	20004d24 	.word	0x20004d24
 8001cb4:	20004d1c 	.word	0x20004d1c
 8001cb8:	20004d20 	.word	0x20004d20
 8001cbc:	08012068 	.word	0x08012068
 8001cc0:	08012090 	.word	0x08012090
 8001cc4:	20004d44 	.word	0x20004d44
 8001cc8:	20004d40 	.word	0x20004d40
 8001ccc:	20004d3c 	.word	0x20004d3c
 8001cd0:	08012098 	.word	0x08012098
 8001cd4:	080120b8 	.word	0x080120b8
 8001cd8:	20004d48 	.word	0x20004d48
 8001cdc:	080120c0 	.word	0x080120c0
 8001ce0:	20004d08 	.word	0x20004d08
 8001ce4:	080120dc 	.word	0x080120dc
 8001ce8:	20004d60 	.word	0x20004d60
 8001cec:	20004d5c 	.word	0x20004d5c
 8001cf0:	20004d59 	.word	0x20004d59
 8001cf4:	20004d58 	.word	0x20004d58
 8001cf8:	20004d54 	.word	0x20004d54
 8001cfc:	20004d50 	.word	0x20004d50
 8001d00:	20004d4c 	.word	0x20004d4c
 8001d04:	080120e4 	.word	0x080120e4

08001d08 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8001d08:	b480      	push	{r7}
 8001d0a:	b087      	sub	sp, #28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d12:	4603      	mov	r3, r0
 8001d14:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8001d16:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d1a:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001d9c <GPS_nmea_to_dec+0x94>
 8001d1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d26:	ee17 3a90 	vmov	r3, s15
 8001d2a:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	2264      	movs	r2, #100	; 0x64
 8001d30:	fb02 f303 	mul.w	r3, r2, r3
 8001d34:	ee07 3a90 	vmov	s15, r3
 8001d38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d3c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d44:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8001d48:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d4c:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001da0 <GPS_nmea_to_dec+0x98>
 8001d50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d54:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	ee07 3a90 	vmov	s15, r3
 8001d5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d62:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d6a:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8001d6e:	78fb      	ldrb	r3, [r7, #3]
 8001d70:	2b53      	cmp	r3, #83	; 0x53
 8001d72:	d002      	beq.n	8001d7a <GPS_nmea_to_dec+0x72>
 8001d74:	78fb      	ldrb	r3, [r7, #3]
 8001d76:	2b57      	cmp	r3, #87	; 0x57
 8001d78:	d105      	bne.n	8001d86 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8001d7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d7e:	eef1 7a67 	vneg.f32	s15, s15
 8001d82:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	ee07 3a90 	vmov	s15, r3
}
 8001d8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d90:	371c      	adds	r7, #28
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	42c80000 	.word	0x42c80000
 8001da0:	42700000 	.word	0x42700000

08001da4 <getTime>:

char* getTime()
{
 8001da4:	b5b0      	push	{r4, r5, r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af04      	add	r7, sp, #16

	char *toArray;

	toArray = malloc (sizeof (char) * 10);
 8001daa:	200a      	movs	r0, #10
 8001dac:	f00b f878 	bl	800cea0 <malloc>
 8001db0:	4603      	mov	r3, r0
 8001db2:	607b      	str	r3, [r7, #4]
	float time = GPS.utc_time + 20000; //make it CET
 8001db4:	4b33      	ldr	r3, [pc, #204]	; (8001e84 <getTime+0xe0>)
 8001db6:	edd3 7a06 	vldr	s15, [r3, #24]
 8001dba:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001e88 <getTime+0xe4>
 8001dbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dc2:	edc7 7a00 	vstr	s15, [r7]
	sprintf(toArray, "%f", time );
 8001dc6:	6838      	ldr	r0, [r7, #0]
 8001dc8:	f7fe fbc6 	bl	8000558 <__aeabi_f2d>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	492e      	ldr	r1, [pc, #184]	; (8001e8c <getTime+0xe8>)
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f00b ffc4 	bl	800dd60 <siprintf>

	if(GPS.utc_time == 0)
 8001dd8:	4b2a      	ldr	r3, [pc, #168]	; (8001e84 <getTime+0xe0>)
 8001dda:	edd3 7a06 	vldr	s15, [r3, #24]
 8001dde:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de6:	d102      	bne.n	8001dee <getTime+0x4a>
	{
		CurrentActivity.activeDailyMinutes = 0;
 8001de8:	4b29      	ldr	r3, [pc, #164]	; (8001e90 <getTime+0xec>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	705a      	strb	r2, [r3, #1]
	}

	if(time < 100000)
 8001dee:	edd7 7a00 	vldr	s15, [r7]
 8001df2:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001e94 <getTime+0xf0>
 8001df6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dfe:	d51b      	bpl.n	8001e38 <getTime+0x94>
		sprintf(toArray, "%c:%c%c:%c%c", toArray[0], toArray[1], toArray[2], toArray[3], toArray[4]);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	461c      	mov	r4, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3302      	adds	r3, #2
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	461a      	mov	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3303      	adds	r3, #3
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3304      	adds	r3, #4
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	9302      	str	r3, [sp, #8]
 8001e26:	9101      	str	r1, [sp, #4]
 8001e28:	9200      	str	r2, [sp, #0]
 8001e2a:	4623      	mov	r3, r4
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	491a      	ldr	r1, [pc, #104]	; (8001e98 <getTime+0xf4>)
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f00b ff95 	bl	800dd60 <siprintf>
 8001e36:	e01f      	b.n	8001e78 <getTime+0xd4>
	else
		sprintf(toArray, "%c%c:%c%c:%c%c", toArray[0], toArray[1], toArray[2], toArray[3], toArray[4], toArray[5]);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	461c      	mov	r4, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3301      	adds	r3, #1
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	461d      	mov	r5, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3302      	adds	r3, #2
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3303      	adds	r3, #3
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	4619      	mov	r1, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3305      	adds	r3, #5
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	9303      	str	r3, [sp, #12]
 8001e66:	9002      	str	r0, [sp, #8]
 8001e68:	9101      	str	r1, [sp, #4]
 8001e6a:	9200      	str	r2, [sp, #0]
 8001e6c:	462b      	mov	r3, r5
 8001e6e:	4622      	mov	r2, r4
 8001e70:	490a      	ldr	r1, [pc, #40]	; (8001e9c <getTime+0xf8>)
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f00b ff74 	bl	800dd60 <siprintf>

	return toArray;
 8001e78:	687b      	ldr	r3, [r7, #4]


}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bdb0      	pop	{r4, r5, r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20004d08 	.word	0x20004d08
 8001e88:	469c4000 	.word	0x469c4000
 8001e8c:	08012104 	.word	0x08012104
 8001e90:	20004ca4 	.word	0x20004ca4
 8001e94:	47c35000 	.word	0x47c35000
 8001e98:	08012108 	.word	0x08012108
 8001e9c:	08012118 	.word	0x08012118

08001ea0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <MX_I2C1_Init+0x50>)
 8001ea6:	4a13      	ldr	r2, [pc, #76]	; (8001ef4 <MX_I2C1_Init+0x54>)
 8001ea8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001eaa:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <MX_I2C1_Init+0x50>)
 8001eac:	4a12      	ldr	r2, [pc, #72]	; (8001ef8 <MX_I2C1_Init+0x58>)
 8001eae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <MX_I2C1_Init+0x50>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <MX_I2C1_Init+0x50>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <MX_I2C1_Init+0x50>)
 8001ebe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ec2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ec4:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <MX_I2C1_Init+0x50>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <MX_I2C1_Init+0x50>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ed0:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <MX_I2C1_Init+0x50>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <MX_I2C1_Init+0x50>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001edc:	4804      	ldr	r0, [pc, #16]	; (8001ef0 <MX_I2C1_Init+0x50>)
 8001ede:	f001 ffc9 	bl	8003e74 <HAL_I2C_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ee8:	f000 f93e 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20004f6c 	.word	0x20004f6c
 8001ef4:	40005400 	.word	0x40005400
 8001ef8:	00061a80 	.word	0x00061a80

08001efc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08a      	sub	sp, #40	; 0x28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a19      	ldr	r2, [pc, #100]	; (8001f80 <HAL_I2C_MspInit+0x84>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d12b      	bne.n	8001f76 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <HAL_I2C_MspInit+0x88>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a17      	ldr	r2, [pc, #92]	; (8001f84 <HAL_I2C_MspInit+0x88>)
 8001f28:	f043 0302 	orr.w	r3, r3, #2
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <HAL_I2C_MspInit+0x88>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f3a:	23c0      	movs	r3, #192	; 0xc0
 8001f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f3e:	2312      	movs	r3, #18
 8001f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f42:	2301      	movs	r3, #1
 8001f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f46:	2303      	movs	r3, #3
 8001f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4e:	f107 0314 	add.w	r3, r7, #20
 8001f52:	4619      	mov	r1, r3
 8001f54:	480c      	ldr	r0, [pc, #48]	; (8001f88 <HAL_I2C_MspInit+0x8c>)
 8001f56:	f001 fdef 	bl	8003b38 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <HAL_I2C_MspInit+0x88>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	4a08      	ldr	r2, [pc, #32]	; (8001f84 <HAL_I2C_MspInit+0x88>)
 8001f64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f68:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_I2C_MspInit+0x88>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001f76:	bf00      	nop
 8001f78:	3728      	adds	r7, #40	; 0x28
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40005400 	.word	0x40005400
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40020400 	.word	0x40020400

08001f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f90:	f000 ff6c 	bl	8002e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f94:	f000 f858 	bl	8002048 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f98:	f7ff fc74 	bl	8001884 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001f9c:	f7ff ff80 	bl	8001ea0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001fa0:	f000 fa02 	bl	80023a8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001fa4:	f000 fec6 	bl	8002d34 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001fa8:	f7ff f8e0 	bl	800116c <MX_ADC1_Init>
  MX_FATFS_Init();
 8001fac:	f004 fc58 	bl	8006860 <MX_FATFS_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001fb0:	f000 f8b4 	bl	800211c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  GPS_Init();
 8001fb4:	f7ff fce8 	bl	8001988 <GPS_Init>
  SSD1306_Init();
 8001fb8:	f000 fa74 	bl	80024a4 <SSD1306_Init>
  SSD1306_Clear();
 8001fbc:	f000 fc97 	bl	80028ee <SSD1306_Clear>
  SSD1306_UpdateScreen();
 8001fc0:	f000 fb34 	bl	800262c <SSD1306_UpdateScreen>
  if(initSdCard())
 8001fc4:	f000 f8d6 	bl	8002174 <initSdCard>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00c      	beq.n	8001fe8 <main+0x5c>
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, SET);
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fd4:	4819      	ldr	r0, [pc, #100]	; (800203c <main+0xb0>)
 8001fd6:	f001 ff33 	bl	8003e40 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fe0:	4816      	ldr	r0, [pc, #88]	; (800203c <main+0xb0>)
 8001fe2:	f001 ff2d 	bl	8003e40 <HAL_GPIO_WritePin>
 8001fe6:	e00b      	b.n	8002000 <main+0x74>
  } else
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, SET);
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fee:	4813      	ldr	r0, [pc, #76]	; (800203c <main+0xb0>)
 8001ff0:	f001 ff26 	bl	8003e40 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ffa:	4810      	ldr	r0, [pc, #64]	; (800203c <main+0xb0>)
 8001ffc:	f001 ff20 	bl	8003e40 <HAL_GPIO_WritePin>
  }

  __HAL_UART_ENABLE_IT(&huart1, UART_FLAG_RXNE);
 8002000:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <main+0xb4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	695a      	ldr	r2, [r3, #20]
 8002006:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <main+0xb4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 0220 	orr.w	r2, r2, #32
 800200e:	615a      	str	r2, [r3, #20]
  __HAL_ADC_ENABLE_IT(&hadc1, ADC_FLAG_EOC);
 8002010:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <main+0xb8>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <main+0xb8>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0202 	orr.w	r2, r2, #2
 800201e:	605a      	str	r2, [r3, #4]

  HAL_ADC_Start_IT(&hadc1);
 8002020:	4808      	ldr	r0, [pc, #32]	; (8002044 <main+0xb8>)
 8002022:	f000 ffcd 	bl	8002fc0 <HAL_ADC_Start_IT>

  HAL_Delay(1000);
 8002026:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800202a:	f000 ff61 	bl	8002ef0 <HAL_Delay>
    /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800202e:	f007 fc5d 	bl	80098ec <osKernelInitialize>
  MX_FREERTOS_Init();
 8002032:	f7ff f945 	bl	80012c0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002036:	f007 fc7d 	bl	8009934 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800203a:	e7fe      	b.n	800203a <main+0xae>
 800203c:	40020400 	.word	0x40020400
 8002040:	200054c8 	.word	0x200054c8
 8002044:	20004cb0 	.word	0x20004cb0

08002048 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b094      	sub	sp, #80	; 0x50
 800204c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800204e:	f107 0320 	add.w	r3, r7, #32
 8002052:	2230      	movs	r2, #48	; 0x30
 8002054:	2100      	movs	r1, #0
 8002056:	4618      	mov	r0, r3
 8002058:	f00a ff40 	bl	800cedc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800205c:	f107 030c 	add.w	r3, r7, #12
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800206c:	2300      	movs	r3, #0
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	4b28      	ldr	r3, [pc, #160]	; (8002114 <SystemClock_Config+0xcc>)
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	4a27      	ldr	r2, [pc, #156]	; (8002114 <SystemClock_Config+0xcc>)
 8002076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800207a:	6413      	str	r3, [r2, #64]	; 0x40
 800207c:	4b25      	ldr	r3, [pc, #148]	; (8002114 <SystemClock_Config+0xcc>)
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002088:	2300      	movs	r3, #0
 800208a:	607b      	str	r3, [r7, #4]
 800208c:	4b22      	ldr	r3, [pc, #136]	; (8002118 <SystemClock_Config+0xd0>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002094:	4a20      	ldr	r2, [pc, #128]	; (8002118 <SystemClock_Config+0xd0>)
 8002096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <SystemClock_Config+0xd0>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020a4:	607b      	str	r3, [r7, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020a8:	2301      	movs	r3, #1
 80020aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020b2:	2302      	movs	r3, #2
 80020b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80020bc:	2319      	movs	r3, #25
 80020be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020c4:	2302      	movs	r3, #2
 80020c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80020c8:	2305      	movs	r3, #5
 80020ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020cc:	f107 0320 	add.w	r3, r7, #32
 80020d0:	4618      	mov	r0, r3
 80020d2:	f002 fc49 	bl	8004968 <HAL_RCC_OscConfig>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80020dc:	f000 f844 	bl	8002168 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020e0:	230f      	movs	r3, #15
 80020e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020e4:	2302      	movs	r3, #2
 80020e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020f6:	f107 030c 	add.w	r3, r7, #12
 80020fa:	2102      	movs	r1, #2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f002 feab 	bl	8004e58 <HAL_RCC_ClockConfig>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002108:	f000 f82e 	bl	8002168 <Error_Handler>
  }
}
 800210c:	bf00      	nop
 800210e:	3750      	adds	r7, #80	; 0x50
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40023800 	.word	0x40023800
 8002118:	40007000 	.word	0x40007000

0800211c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002120:	2200      	movs	r2, #0
 8002122:	2105      	movs	r1, #5
 8002124:	2025      	movs	r0, #37	; 0x25
 8002126:	f001 fc4b 	bl	80039c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800212a:	2025      	movs	r0, #37	; 0x25
 800212c:	f001 fc64 	bl	80039f8 <HAL_NVIC_EnableIRQ>
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8002130:	2200      	movs	r2, #0
 8002132:	2105      	movs	r1, #5
 8002134:	2012      	movs	r0, #18
 8002136:	f001 fc43 	bl	80039c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 800213a:	2012      	movs	r0, #18
 800213c:	f001 fc5c 	bl	80039f8 <HAL_NVIC_EnableIRQ>
}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a04      	ldr	r2, [pc, #16]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d101      	bne.n	800215a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002156:	f000 feab 	bl	8002eb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40000400 	.word	0x40000400

08002168 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800216c:	b672      	cpsid	i
}
 800216e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002170:	e7fe      	b.n	8002170 <Error_Handler+0x8>
	...

08002174 <initSdCard>:
FATFS FatFs; 	//Fatfs handle
FIL fil; 		//File handle
FRESULT fres; //Result after operations

bool initSdCard()
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
	fres = f_mount(&FatFs, "", 1); //1=mount now
 8002178:	2201      	movs	r2, #1
 800217a:	4908      	ldr	r1, [pc, #32]	; (800219c <initSdCard+0x28>)
 800217c:	4808      	ldr	r0, [pc, #32]	; (80021a0 <initSdCard+0x2c>)
 800217e:	f006 fe49 	bl	8008e14 <f_mount>
 8002182:	4603      	mov	r3, r0
 8002184:	461a      	mov	r2, r3
 8002186:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <initSdCard+0x30>)
 8002188:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK)
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <initSdCard+0x30>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <initSdCard+0x22>
	{
	   	return false;
 8002192:	2300      	movs	r3, #0
 8002194:	e000      	b.n	8002198 <initSdCard+0x24>
	} else
	{
	   	return true;
 8002196:	2301      	movs	r3, #1
	}
}
 8002198:	4618      	mov	r0, r3
 800219a:	bd80      	pop	{r7, pc}
 800219c:	08012128 	.word	0x08012128
 80021a0:	20004fc0 	.word	0x20004fc0
 80021a4:	200051f4 	.word	0x200051f4

080021a8 <writeFile>:


bool writeFile(char* fileName, char* string)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
	//char* internalString = "";
	if(openFileRead(fileName))
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f83e 	bl	8002234 <openFileRead>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <writeFile+0x1e>
	{
		f_close(&fil);
 80021be:	481b      	ldr	r0, [pc, #108]	; (800222c <writeFile+0x84>)
 80021c0:	f007 fa7e 	bl	80096c0 <f_close>
 80021c4:	e002      	b.n	80021cc <writeFile+0x24>
	} else
	{
		makeNewFile(fileName);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f850 	bl	800226c <makeNewFile>
	}

	fres = f_open(&fil, fileName, FA_WRITE | FA_OPEN_EXISTING | FA_OPEN_APPEND);
 80021cc:	2232      	movs	r2, #50	; 0x32
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	4816      	ldr	r0, [pc, #88]	; (800222c <writeFile+0x84>)
 80021d2:	f006 fe83 	bl	8008edc <f_open>
 80021d6:	4603      	mov	r3, r0
 80021d8:	461a      	mov	r2, r3
 80021da:	4b15      	ldr	r3, [pc, #84]	; (8002230 <writeFile+0x88>)
 80021dc:	701a      	strb	r2, [r3, #0]
	if(fres == FR_OK) {
 80021de:	4b14      	ldr	r3, [pc, #80]	; (8002230 <writeFile+0x88>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d11d      	bne.n	8002222 <writeFile+0x7a>
		//Copy in a string
		uint16_t stringLength = strlen(string);
 80021e6:	6838      	ldr	r0, [r7, #0]
 80021e8:	f7fd fffa 	bl	80001e0 <strlen>
 80021ec:	4603      	mov	r3, r0
 80021ee:	81fb      	strh	r3, [r7, #14]
	    //strncpy((char*)internalString, string, stringLength);
	    UINT bytesWrote;
	    fres = f_write(&fil, string, stringLength, &bytesWrote);
 80021f0:	89fa      	ldrh	r2, [r7, #14]
 80021f2:	f107 0308 	add.w	r3, r7, #8
 80021f6:	6839      	ldr	r1, [r7, #0]
 80021f8:	480c      	ldr	r0, [pc, #48]	; (800222c <writeFile+0x84>)
 80021fa:	f007 f834 	bl	8009266 <f_write>
 80021fe:	4603      	mov	r3, r0
 8002200:	461a      	mov	r2, r3
 8002202:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <writeFile+0x88>)
 8002204:	701a      	strb	r2, [r3, #0]
	    if(fres == FR_OK) {
 8002206:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <writeFile+0x88>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d104      	bne.n	8002218 <writeFile+0x70>
	    	f_close(&fil);
 800220e:	4807      	ldr	r0, [pc, #28]	; (800222c <writeFile+0x84>)
 8002210:	f007 fa56 	bl	80096c0 <f_close>
	    	return true;
 8002214:	2301      	movs	r3, #1
 8002216:	e005      	b.n	8002224 <writeFile+0x7c>
	    } else {
	    	f_close(&fil);
 8002218:	4804      	ldr	r0, [pc, #16]	; (800222c <writeFile+0x84>)
 800221a:	f007 fa51 	bl	80096c0 <f_close>
	    	return false;
 800221e:	2300      	movs	r3, #0
 8002220:	e000      	b.n	8002224 <writeFile+0x7c>
	    }
	} else {
	   	return false;
 8002222:	2300      	movs	r3, #0
	}
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	200051f8 	.word	0x200051f8
 8002230:	200051f4 	.word	0x200051f4

08002234 <openFileRead>:

bool openFileRead(char* fileName)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
	fres = f_open(&fil, fileName, FA_READ);
 800223c:	2201      	movs	r2, #1
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	4808      	ldr	r0, [pc, #32]	; (8002264 <openFileRead+0x30>)
 8002242:	f006 fe4b 	bl	8008edc <f_open>
 8002246:	4603      	mov	r3, r0
 8002248:	461a      	mov	r2, r3
 800224a:	4b07      	ldr	r3, [pc, #28]	; (8002268 <openFileRead+0x34>)
 800224c:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 800224e:	4b06      	ldr	r3, [pc, #24]	; (8002268 <openFileRead+0x34>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <openFileRead+0x26>
	    return false;
 8002256:	2300      	movs	r3, #0
 8002258:	e000      	b.n	800225c <openFileRead+0x28>
    } else
    {
    	return true;
 800225a:	2301      	movs	r3, #1
    }
}
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	200051f8 	.word	0x200051f8
 8002268:	200051f4 	.word	0x200051f4

0800226c <makeNewFile>:
		return "file error";
	}
}

bool makeNewFile(char* fileName)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	//Make a new file with the "fileName", make sure ".txt" is included in the fileName
	fres = f_open(&fil, fileName, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_NEW);
 8002274:	2216      	movs	r2, #22
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	480a      	ldr	r0, [pc, #40]	; (80022a4 <makeNewFile+0x38>)
 800227a:	f006 fe2f 	bl	8008edc <f_open>
 800227e:	4603      	mov	r3, r0
 8002280:	461a      	mov	r2, r3
 8002282:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <makeNewFile+0x3c>)
 8002284:	701a      	strb	r2, [r3, #0]
	if(fres == FR_OK) {
 8002286:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <makeNewFile+0x3c>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d104      	bne.n	8002298 <makeNewFile+0x2c>
		f_close(&fil);
 800228e:	4805      	ldr	r0, [pc, #20]	; (80022a4 <makeNewFile+0x38>)
 8002290:	f007 fa16 	bl	80096c0 <f_close>
		return true;
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <makeNewFile+0x2e>
	} else {
	   	return false;
 8002298:	2300      	movs	r3, #0
	}
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	200051f8 	.word	0x200051f8
 80022a8:	200051f4 	.word	0x200051f4

080022ac <activityToSD>:

bool activityToSD(char* fileName, char* string)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
	char *sTime;
	sTime = getTime();
 80022b6:	f7ff fd75 	bl	8001da4 <getTime>
 80022ba:	60f8      	str	r0, [r7, #12]
	writeFile(fileName, sTime);
 80022bc:	68f9      	ldr	r1, [r7, #12]
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff ff72 	bl	80021a8 <writeFile>
	writeFile(fileName, " : ");
 80022c4:	490d      	ldr	r1, [pc, #52]	; (80022fc <activityToSD+0x50>)
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff ff6e 	bl	80021a8 <writeFile>
	if(writeFile(fileName, string))
 80022cc:	6839      	ldr	r1, [r7, #0]
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff ff6a 	bl	80021a8 <writeFile>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d008      	beq.n	80022ec <activityToSD+0x40>
	{
		free(sTime);
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f00a fde8 	bl	800ceb0 <free>
		writeFile(fileName, "\n");
 80022e0:	4907      	ldr	r1, [pc, #28]	; (8002300 <activityToSD+0x54>)
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff ff60 	bl	80021a8 <writeFile>
		return true;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e003      	b.n	80022f4 <activityToSD+0x48>
	} else
	{
		free(sTime);
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f00a fddf 	bl	800ceb0 <free>
		return false;
 80022f2:	2300      	movs	r3, #0
	}

}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	08012148 	.word	0x08012148
 8002300:	0801214c 	.word	0x0801214c

08002304 <totalActivityToSD>:

void totalActivityToSD(char* fileName, char* firstString, char* secondString)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
	char *sTime;
	sTime = getTime();
 8002310:	f7ff fd48 	bl	8001da4 <getTime>
 8002314:	6178      	str	r0, [r7, #20]
	writeFile(fileName, "Einde activiteit, activteit gedaan voor ");
 8002316:	4911      	ldr	r1, [pc, #68]	; (800235c <totalActivityToSD+0x58>)
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f7ff ff45 	bl	80021a8 <writeFile>
	writeFile(fileName, firstString);
 800231e:	68b9      	ldr	r1, [r7, #8]
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f7ff ff41 	bl	80021a8 <writeFile>
	writeFile(fileName, " minuten.\nActiviteit beëindigt op: ");
 8002326:	490e      	ldr	r1, [pc, #56]	; (8002360 <totalActivityToSD+0x5c>)
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f7ff ff3d 	bl	80021a8 <writeFile>
	writeFile(fileName, sTime);
 800232e:	6979      	ldr	r1, [r7, #20]
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f7ff ff39 	bl	80021a8 <writeFile>
	free(sTime);
 8002336:	6978      	ldr	r0, [r7, #20]
 8002338:	f00a fdba 	bl	800ceb0 <free>
	writeFile(fileName, ". Activiteit was: ");
 800233c:	4909      	ldr	r1, [pc, #36]	; (8002364 <totalActivityToSD+0x60>)
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f7ff ff32 	bl	80021a8 <writeFile>
	writeFile(fileName, secondString);
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f7ff ff2e 	bl	80021a8 <writeFile>
	writeFile(fileName, "\n");
 800234c:	4906      	ldr	r1, [pc, #24]	; (8002368 <totalActivityToSD+0x64>)
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f7ff ff2a 	bl	80021a8 <writeFile>

}
 8002354:	bf00      	nop
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	08012150 	.word	0x08012150
 8002360:	0801217c 	.word	0x0801217c
 8002364:	080121a4 	.word	0x080121a4
 8002368:	0801214c 	.word	0x0801214c

0800236c <writeStartToSD>:

void writeStartToSD(char* fileName)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
	char *sTime;
	sTime = getTime();
 8002374:	f7ff fd16 	bl	8001da4 <getTime>
 8002378:	60f8      	str	r0, [r7, #12]
	writeFile(fileName, "Nieuwe activiteit gestart op: ");
 800237a:	4909      	ldr	r1, [pc, #36]	; (80023a0 <writeStartToSD+0x34>)
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7ff ff13 	bl	80021a8 <writeFile>
	writeFile(fileName, sTime);
 8002382:	68f9      	ldr	r1, [r7, #12]
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff ff0f 	bl	80021a8 <writeFile>
	free(sTime);
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f00a fd90 	bl	800ceb0 <free>
	writeFile(fileName, "\n");
 8002390:	4904      	ldr	r1, [pc, #16]	; (80023a4 <writeStartToSD+0x38>)
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff ff08 	bl	80021a8 <writeFile>
}
 8002398:	bf00      	nop
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	080121b8 	.word	0x080121b8
 80023a4:	0801214c 	.word	0x0801214c

080023a8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80023ac:	4b17      	ldr	r3, [pc, #92]	; (800240c <MX_SPI1_Init+0x64>)
 80023ae:	4a18      	ldr	r2, [pc, #96]	; (8002410 <MX_SPI1_Init+0x68>)
 80023b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023b2:	4b16      	ldr	r3, [pc, #88]	; (800240c <MX_SPI1_Init+0x64>)
 80023b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023ba:	4b14      	ldr	r3, [pc, #80]	; (800240c <MX_SPI1_Init+0x64>)
 80023bc:	2200      	movs	r2, #0
 80023be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023c0:	4b12      	ldr	r3, [pc, #72]	; (800240c <MX_SPI1_Init+0x64>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023c6:	4b11      	ldr	r3, [pc, #68]	; (800240c <MX_SPI1_Init+0x64>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023cc:	4b0f      	ldr	r3, [pc, #60]	; (800240c <MX_SPI1_Init+0x64>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023d2:	4b0e      	ldr	r3, [pc, #56]	; (800240c <MX_SPI1_Init+0x64>)
 80023d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80023da:	4b0c      	ldr	r3, [pc, #48]	; (800240c <MX_SPI1_Init+0x64>)
 80023dc:	2230      	movs	r2, #48	; 0x30
 80023de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023e0:	4b0a      	ldr	r3, [pc, #40]	; (800240c <MX_SPI1_Init+0x64>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023e6:	4b09      	ldr	r3, [pc, #36]	; (800240c <MX_SPI1_Init+0x64>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023ec:	4b07      	ldr	r3, [pc, #28]	; (800240c <MX_SPI1_Init+0x64>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80023f2:	4b06      	ldr	r3, [pc, #24]	; (800240c <MX_SPI1_Init+0x64>)
 80023f4:	220a      	movs	r2, #10
 80023f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023f8:	4804      	ldr	r0, [pc, #16]	; (800240c <MX_SPI1_Init+0x64>)
 80023fa:	f002 ff2f 	bl	800525c <HAL_SPI_Init>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002404:	f7ff feb0 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002408:	bf00      	nop
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20005428 	.word	0x20005428
 8002410:	40013000 	.word	0x40013000

08002414 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08a      	sub	sp, #40	; 0x28
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 0314 	add.w	r3, r7, #20
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a19      	ldr	r2, [pc, #100]	; (8002498 <HAL_SPI_MspInit+0x84>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d12b      	bne.n	800248e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	613b      	str	r3, [r7, #16]
 800243a:	4b18      	ldr	r3, [pc, #96]	; (800249c <HAL_SPI_MspInit+0x88>)
 800243c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243e:	4a17      	ldr	r2, [pc, #92]	; (800249c <HAL_SPI_MspInit+0x88>)
 8002440:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002444:	6453      	str	r3, [r2, #68]	; 0x44
 8002446:	4b15      	ldr	r3, [pc, #84]	; (800249c <HAL_SPI_MspInit+0x88>)
 8002448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800244e:	613b      	str	r3, [r7, #16]
 8002450:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	4b11      	ldr	r3, [pc, #68]	; (800249c <HAL_SPI_MspInit+0x88>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	4a10      	ldr	r2, [pc, #64]	; (800249c <HAL_SPI_MspInit+0x88>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	6313      	str	r3, [r2, #48]	; 0x30
 8002462:	4b0e      	ldr	r3, [pc, #56]	; (800249c <HAL_SPI_MspInit+0x88>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800246e:	23e0      	movs	r3, #224	; 0xe0
 8002470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002472:	2302      	movs	r3, #2
 8002474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247a:	2303      	movs	r3, #3
 800247c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800247e:	2305      	movs	r3, #5
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002482:	f107 0314 	add.w	r3, r7, #20
 8002486:	4619      	mov	r1, r3
 8002488:	4805      	ldr	r0, [pc, #20]	; (80024a0 <HAL_SPI_MspInit+0x8c>)
 800248a:	f001 fb55 	bl	8003b38 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800248e:	bf00      	nop
 8002490:	3728      	adds	r7, #40	; 0x28
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40013000 	.word	0x40013000
 800249c:	40023800 	.word	0x40023800
 80024a0:	40020000 	.word	0x40020000

080024a4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80024aa:	f000 fa29 	bl	8002900 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80024ae:	f644 6320 	movw	r3, #20000	; 0x4e20
 80024b2:	2201      	movs	r2, #1
 80024b4:	2178      	movs	r1, #120	; 0x78
 80024b6:	485b      	ldr	r0, [pc, #364]	; (8002624 <SSD1306_Init+0x180>)
 80024b8:	f001 ff1e 	bl	80042f8 <HAL_I2C_IsDeviceReady>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	e0a9      	b.n	800261a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80024c6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80024ca:	607b      	str	r3, [r7, #4]
	while(p>0)
 80024cc:	e002      	b.n	80024d4 <SSD1306_Init+0x30>
		p--;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	3b01      	subs	r3, #1
 80024d2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f9      	bne.n	80024ce <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80024da:	22ae      	movs	r2, #174	; 0xae
 80024dc:	2100      	movs	r1, #0
 80024de:	2078      	movs	r0, #120	; 0x78
 80024e0:	f000 fa6c 	bl	80029bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80024e4:	2220      	movs	r2, #32
 80024e6:	2100      	movs	r1, #0
 80024e8:	2078      	movs	r0, #120	; 0x78
 80024ea:	f000 fa67 	bl	80029bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80024ee:	2210      	movs	r2, #16
 80024f0:	2100      	movs	r1, #0
 80024f2:	2078      	movs	r0, #120	; 0x78
 80024f4:	f000 fa62 	bl	80029bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80024f8:	22b0      	movs	r2, #176	; 0xb0
 80024fa:	2100      	movs	r1, #0
 80024fc:	2078      	movs	r0, #120	; 0x78
 80024fe:	f000 fa5d 	bl	80029bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002502:	22c8      	movs	r2, #200	; 0xc8
 8002504:	2100      	movs	r1, #0
 8002506:	2078      	movs	r0, #120	; 0x78
 8002508:	f000 fa58 	bl	80029bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800250c:	2200      	movs	r2, #0
 800250e:	2100      	movs	r1, #0
 8002510:	2078      	movs	r0, #120	; 0x78
 8002512:	f000 fa53 	bl	80029bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002516:	2210      	movs	r2, #16
 8002518:	2100      	movs	r1, #0
 800251a:	2078      	movs	r0, #120	; 0x78
 800251c:	f000 fa4e 	bl	80029bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002520:	2240      	movs	r2, #64	; 0x40
 8002522:	2100      	movs	r1, #0
 8002524:	2078      	movs	r0, #120	; 0x78
 8002526:	f000 fa49 	bl	80029bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800252a:	2281      	movs	r2, #129	; 0x81
 800252c:	2100      	movs	r1, #0
 800252e:	2078      	movs	r0, #120	; 0x78
 8002530:	f000 fa44 	bl	80029bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002534:	22ff      	movs	r2, #255	; 0xff
 8002536:	2100      	movs	r1, #0
 8002538:	2078      	movs	r0, #120	; 0x78
 800253a:	f000 fa3f 	bl	80029bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800253e:	22a1      	movs	r2, #161	; 0xa1
 8002540:	2100      	movs	r1, #0
 8002542:	2078      	movs	r0, #120	; 0x78
 8002544:	f000 fa3a 	bl	80029bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002548:	22a6      	movs	r2, #166	; 0xa6
 800254a:	2100      	movs	r1, #0
 800254c:	2078      	movs	r0, #120	; 0x78
 800254e:	f000 fa35 	bl	80029bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002552:	22a8      	movs	r2, #168	; 0xa8
 8002554:	2100      	movs	r1, #0
 8002556:	2078      	movs	r0, #120	; 0x78
 8002558:	f000 fa30 	bl	80029bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800255c:	223f      	movs	r2, #63	; 0x3f
 800255e:	2100      	movs	r1, #0
 8002560:	2078      	movs	r0, #120	; 0x78
 8002562:	f000 fa2b 	bl	80029bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002566:	22a4      	movs	r2, #164	; 0xa4
 8002568:	2100      	movs	r1, #0
 800256a:	2078      	movs	r0, #120	; 0x78
 800256c:	f000 fa26 	bl	80029bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002570:	22d3      	movs	r2, #211	; 0xd3
 8002572:	2100      	movs	r1, #0
 8002574:	2078      	movs	r0, #120	; 0x78
 8002576:	f000 fa21 	bl	80029bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	2078      	movs	r0, #120	; 0x78
 8002580:	f000 fa1c 	bl	80029bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002584:	22d5      	movs	r2, #213	; 0xd5
 8002586:	2100      	movs	r1, #0
 8002588:	2078      	movs	r0, #120	; 0x78
 800258a:	f000 fa17 	bl	80029bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800258e:	22f0      	movs	r2, #240	; 0xf0
 8002590:	2100      	movs	r1, #0
 8002592:	2078      	movs	r0, #120	; 0x78
 8002594:	f000 fa12 	bl	80029bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002598:	22d9      	movs	r2, #217	; 0xd9
 800259a:	2100      	movs	r1, #0
 800259c:	2078      	movs	r0, #120	; 0x78
 800259e:	f000 fa0d 	bl	80029bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80025a2:	2222      	movs	r2, #34	; 0x22
 80025a4:	2100      	movs	r1, #0
 80025a6:	2078      	movs	r0, #120	; 0x78
 80025a8:	f000 fa08 	bl	80029bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80025ac:	22da      	movs	r2, #218	; 0xda
 80025ae:	2100      	movs	r1, #0
 80025b0:	2078      	movs	r0, #120	; 0x78
 80025b2:	f000 fa03 	bl	80029bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80025b6:	2212      	movs	r2, #18
 80025b8:	2100      	movs	r1, #0
 80025ba:	2078      	movs	r0, #120	; 0x78
 80025bc:	f000 f9fe 	bl	80029bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80025c0:	22db      	movs	r2, #219	; 0xdb
 80025c2:	2100      	movs	r1, #0
 80025c4:	2078      	movs	r0, #120	; 0x78
 80025c6:	f000 f9f9 	bl	80029bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80025ca:	2220      	movs	r2, #32
 80025cc:	2100      	movs	r1, #0
 80025ce:	2078      	movs	r0, #120	; 0x78
 80025d0:	f000 f9f4 	bl	80029bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80025d4:	228d      	movs	r2, #141	; 0x8d
 80025d6:	2100      	movs	r1, #0
 80025d8:	2078      	movs	r0, #120	; 0x78
 80025da:	f000 f9ef 	bl	80029bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80025de:	2214      	movs	r2, #20
 80025e0:	2100      	movs	r1, #0
 80025e2:	2078      	movs	r0, #120	; 0x78
 80025e4:	f000 f9ea 	bl	80029bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80025e8:	22af      	movs	r2, #175	; 0xaf
 80025ea:	2100      	movs	r1, #0
 80025ec:	2078      	movs	r0, #120	; 0x78
 80025ee:	f000 f9e5 	bl	80029bc <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80025f2:	222e      	movs	r2, #46	; 0x2e
 80025f4:	2100      	movs	r1, #0
 80025f6:	2078      	movs	r0, #120	; 0x78
 80025f8:	f000 f9e0 	bl	80029bc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80025fc:	2000      	movs	r0, #0
 80025fe:	f000 f843 	bl	8002688 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002602:	f000 f813 	bl	800262c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002606:	4b08      	ldr	r3, [pc, #32]	; (8002628 <SSD1306_Init+0x184>)
 8002608:	2200      	movs	r2, #0
 800260a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800260c:	4b06      	ldr	r3, [pc, #24]	; (8002628 <SSD1306_Init+0x184>)
 800260e:	2200      	movs	r2, #0
 8002610:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002612:	4b05      	ldr	r3, [pc, #20]	; (8002628 <SSD1306_Init+0x184>)
 8002614:	2201      	movs	r2, #1
 8002616:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002618:	2301      	movs	r3, #1
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20004f6c 	.word	0x20004f6c
 8002628:	20000648 	.word	0x20000648

0800262c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8002632:	2300      	movs	r3, #0
 8002634:	71fb      	strb	r3, [r7, #7]
 8002636:	e01d      	b.n	8002674 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	3b50      	subs	r3, #80	; 0x50
 800263c:	b2db      	uxtb	r3, r3
 800263e:	461a      	mov	r2, r3
 8002640:	2100      	movs	r1, #0
 8002642:	2078      	movs	r0, #120	; 0x78
 8002644:	f000 f9ba 	bl	80029bc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002648:	2200      	movs	r2, #0
 800264a:	2100      	movs	r1, #0
 800264c:	2078      	movs	r0, #120	; 0x78
 800264e:	f000 f9b5 	bl	80029bc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002652:	2210      	movs	r2, #16
 8002654:	2100      	movs	r1, #0
 8002656:	2078      	movs	r0, #120	; 0x78
 8002658:	f000 f9b0 	bl	80029bc <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	01db      	lsls	r3, r3, #7
 8002660:	4a08      	ldr	r2, [pc, #32]	; (8002684 <SSD1306_UpdateScreen+0x58>)
 8002662:	441a      	add	r2, r3
 8002664:	2380      	movs	r3, #128	; 0x80
 8002666:	2140      	movs	r1, #64	; 0x40
 8002668:	2078      	movs	r0, #120	; 0x78
 800266a:	f000 f95f 	bl	800292c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	3301      	adds	r3, #1
 8002672:	71fb      	strb	r3, [r7, #7]
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	2b07      	cmp	r3, #7
 8002678:	d9de      	bls.n	8002638 <SSD1306_UpdateScreen+0xc>
	}
}
 800267a:	bf00      	nop
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20000248 	.word	0x20000248

08002688 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <SSD1306_Fill+0x14>
 8002698:	2300      	movs	r3, #0
 800269a:	e000      	b.n	800269e <SSD1306_Fill+0x16>
 800269c:	23ff      	movs	r3, #255	; 0xff
 800269e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026a2:	4619      	mov	r1, r3
 80026a4:	4803      	ldr	r0, [pc, #12]	; (80026b4 <SSD1306_Fill+0x2c>)
 80026a6:	f00a fc19 	bl	800cedc <memset>
}
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20000248 	.word	0x20000248

080026b8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	80fb      	strh	r3, [r7, #6]
 80026c2:	460b      	mov	r3, r1
 80026c4:	80bb      	strh	r3, [r7, #4]
 80026c6:	4613      	mov	r3, r2
 80026c8:	70fb      	strb	r3, [r7, #3]
	if (
 80026ca:	88fb      	ldrh	r3, [r7, #6]
 80026cc:	2b7f      	cmp	r3, #127	; 0x7f
 80026ce:	d848      	bhi.n	8002762 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80026d0:	88bb      	ldrh	r3, [r7, #4]
 80026d2:	2b3f      	cmp	r3, #63	; 0x3f
 80026d4:	d845      	bhi.n	8002762 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80026d6:	4b26      	ldr	r3, [pc, #152]	; (8002770 <SSD1306_DrawPixel+0xb8>)
 80026d8:	791b      	ldrb	r3, [r3, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d006      	beq.n	80026ec <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80026de:	78fb      	ldrb	r3, [r7, #3]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	bf0c      	ite	eq
 80026e4:	2301      	moveq	r3, #1
 80026e6:	2300      	movne	r3, #0
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80026ec:	78fb      	ldrb	r3, [r7, #3]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d11a      	bne.n	8002728 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80026f2:	88fa      	ldrh	r2, [r7, #6]
 80026f4:	88bb      	ldrh	r3, [r7, #4]
 80026f6:	08db      	lsrs	r3, r3, #3
 80026f8:	b298      	uxth	r0, r3
 80026fa:	4603      	mov	r3, r0
 80026fc:	01db      	lsls	r3, r3, #7
 80026fe:	4413      	add	r3, r2
 8002700:	4a1c      	ldr	r2, [pc, #112]	; (8002774 <SSD1306_DrawPixel+0xbc>)
 8002702:	5cd3      	ldrb	r3, [r2, r3]
 8002704:	b25a      	sxtb	r2, r3
 8002706:	88bb      	ldrh	r3, [r7, #4]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	2101      	movs	r1, #1
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	b25b      	sxtb	r3, r3
 8002714:	4313      	orrs	r3, r2
 8002716:	b259      	sxtb	r1, r3
 8002718:	88fa      	ldrh	r2, [r7, #6]
 800271a:	4603      	mov	r3, r0
 800271c:	01db      	lsls	r3, r3, #7
 800271e:	4413      	add	r3, r2
 8002720:	b2c9      	uxtb	r1, r1
 8002722:	4a14      	ldr	r2, [pc, #80]	; (8002774 <SSD1306_DrawPixel+0xbc>)
 8002724:	54d1      	strb	r1, [r2, r3]
 8002726:	e01d      	b.n	8002764 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002728:	88fa      	ldrh	r2, [r7, #6]
 800272a:	88bb      	ldrh	r3, [r7, #4]
 800272c:	08db      	lsrs	r3, r3, #3
 800272e:	b298      	uxth	r0, r3
 8002730:	4603      	mov	r3, r0
 8002732:	01db      	lsls	r3, r3, #7
 8002734:	4413      	add	r3, r2
 8002736:	4a0f      	ldr	r2, [pc, #60]	; (8002774 <SSD1306_DrawPixel+0xbc>)
 8002738:	5cd3      	ldrb	r3, [r2, r3]
 800273a:	b25a      	sxtb	r2, r3
 800273c:	88bb      	ldrh	r3, [r7, #4]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	2101      	movs	r1, #1
 8002744:	fa01 f303 	lsl.w	r3, r1, r3
 8002748:	b25b      	sxtb	r3, r3
 800274a:	43db      	mvns	r3, r3
 800274c:	b25b      	sxtb	r3, r3
 800274e:	4013      	ands	r3, r2
 8002750:	b259      	sxtb	r1, r3
 8002752:	88fa      	ldrh	r2, [r7, #6]
 8002754:	4603      	mov	r3, r0
 8002756:	01db      	lsls	r3, r3, #7
 8002758:	4413      	add	r3, r2
 800275a:	b2c9      	uxtb	r1, r1
 800275c:	4a05      	ldr	r2, [pc, #20]	; (8002774 <SSD1306_DrawPixel+0xbc>)
 800275e:	54d1      	strb	r1, [r2, r3]
 8002760:	e000      	b.n	8002764 <SSD1306_DrawPixel+0xac>
		return;
 8002762:	bf00      	nop
	}
}
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	20000648 	.word	0x20000648
 8002774:	20000248 	.word	0x20000248

08002778 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	460a      	mov	r2, r1
 8002782:	80fb      	strh	r3, [r7, #6]
 8002784:	4613      	mov	r3, r2
 8002786:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002788:	4a05      	ldr	r2, [pc, #20]	; (80027a0 <SSD1306_GotoXY+0x28>)
 800278a:	88fb      	ldrh	r3, [r7, #6]
 800278c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800278e:	4a04      	ldr	r2, [pc, #16]	; (80027a0 <SSD1306_GotoXY+0x28>)
 8002790:	88bb      	ldrh	r3, [r7, #4]
 8002792:	8053      	strh	r3, [r2, #2]
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	20000648 	.word	0x20000648

080027a4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	6039      	str	r1, [r7, #0]
 80027ae:	71fb      	strb	r3, [r7, #7]
 80027b0:	4613      	mov	r3, r2
 80027b2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80027b4:	4b3a      	ldr	r3, [pc, #232]	; (80028a0 <SSD1306_Putc+0xfc>)
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	461a      	mov	r2, r3
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	4413      	add	r3, r2
	if (
 80027c0:	2b7f      	cmp	r3, #127	; 0x7f
 80027c2:	dc07      	bgt.n	80027d4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80027c4:	4b36      	ldr	r3, [pc, #216]	; (80028a0 <SSD1306_Putc+0xfc>)
 80027c6:	885b      	ldrh	r3, [r3, #2]
 80027c8:	461a      	mov	r2, r3
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	785b      	ldrb	r3, [r3, #1]
 80027ce:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80027d0:	2b3f      	cmp	r3, #63	; 0x3f
 80027d2:	dd01      	ble.n	80027d8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80027d4:	2300      	movs	r3, #0
 80027d6:	e05e      	b.n	8002896 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	e04b      	b.n	8002876 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	3b20      	subs	r3, #32
 80027e6:	6839      	ldr	r1, [r7, #0]
 80027e8:	7849      	ldrb	r1, [r1, #1]
 80027ea:	fb01 f303 	mul.w	r3, r1, r3
 80027ee:	4619      	mov	r1, r3
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	440b      	add	r3, r1
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	4413      	add	r3, r2
 80027f8:	881b      	ldrh	r3, [r3, #0]
 80027fa:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80027fc:	2300      	movs	r3, #0
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	e030      	b.n	8002864 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d010      	beq.n	8002834 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002812:	4b23      	ldr	r3, [pc, #140]	; (80028a0 <SSD1306_Putc+0xfc>)
 8002814:	881a      	ldrh	r2, [r3, #0]
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	b29b      	uxth	r3, r3
 800281a:	4413      	add	r3, r2
 800281c:	b298      	uxth	r0, r3
 800281e:	4b20      	ldr	r3, [pc, #128]	; (80028a0 <SSD1306_Putc+0xfc>)
 8002820:	885a      	ldrh	r2, [r3, #2]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	b29b      	uxth	r3, r3
 8002826:	4413      	add	r3, r2
 8002828:	b29b      	uxth	r3, r3
 800282a:	79ba      	ldrb	r2, [r7, #6]
 800282c:	4619      	mov	r1, r3
 800282e:	f7ff ff43 	bl	80026b8 <SSD1306_DrawPixel>
 8002832:	e014      	b.n	800285e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002834:	4b1a      	ldr	r3, [pc, #104]	; (80028a0 <SSD1306_Putc+0xfc>)
 8002836:	881a      	ldrh	r2, [r3, #0]
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	b29b      	uxth	r3, r3
 800283c:	4413      	add	r3, r2
 800283e:	b298      	uxth	r0, r3
 8002840:	4b17      	ldr	r3, [pc, #92]	; (80028a0 <SSD1306_Putc+0xfc>)
 8002842:	885a      	ldrh	r2, [r3, #2]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	b29b      	uxth	r3, r3
 8002848:	4413      	add	r3, r2
 800284a:	b299      	uxth	r1, r3
 800284c:	79bb      	ldrb	r3, [r7, #6]
 800284e:	2b00      	cmp	r3, #0
 8002850:	bf0c      	ite	eq
 8002852:	2301      	moveq	r3, #1
 8002854:	2300      	movne	r3, #0
 8002856:	b2db      	uxtb	r3, r3
 8002858:	461a      	mov	r2, r3
 800285a:	f7ff ff2d 	bl	80026b8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	3301      	adds	r3, #1
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	461a      	mov	r2, r3
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4293      	cmp	r3, r2
 800286e:	d3c8      	bcc.n	8002802 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	3301      	adds	r3, #1
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	785b      	ldrb	r3, [r3, #1]
 800287a:	461a      	mov	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	4293      	cmp	r3, r2
 8002880:	d3ad      	bcc.n	80027de <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002882:	4b07      	ldr	r3, [pc, #28]	; (80028a0 <SSD1306_Putc+0xfc>)
 8002884:	881a      	ldrh	r2, [r3, #0]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	b29b      	uxth	r3, r3
 800288c:	4413      	add	r3, r2
 800288e:	b29a      	uxth	r2, r3
 8002890:	4b03      	ldr	r3, [pc, #12]	; (80028a0 <SSD1306_Putc+0xfc>)
 8002892:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002894:	79fb      	ldrb	r3, [r7, #7]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	20000648 	.word	0x20000648

080028a4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	4613      	mov	r3, r2
 80028b0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80028b2:	e012      	b.n	80028da <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	79fa      	ldrb	r2, [r7, #7]
 80028ba:	68b9      	ldr	r1, [r7, #8]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff ff71 	bl	80027a4 <SSD1306_Putc>
 80028c2:	4603      	mov	r3, r0
 80028c4:	461a      	mov	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d002      	beq.n	80028d4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	e008      	b.n	80028e6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	3301      	adds	r3, #1
 80028d8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1e8      	bne.n	80028b4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	781b      	ldrb	r3, [r3, #0]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80028f2:	2000      	movs	r0, #0
 80028f4:	f7ff fec8 	bl	8002688 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80028f8:	f7ff fe98 	bl	800262c <SSD1306_UpdateScreen>
}
 80028fc:	bf00      	nop
 80028fe:	bd80      	pop	{r7, pc}

08002900 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002906:	4b08      	ldr	r3, [pc, #32]	; (8002928 <ssd1306_I2C_Init+0x28>)
 8002908:	607b      	str	r3, [r7, #4]
	while(p>0)
 800290a:	e002      	b.n	8002912 <ssd1306_I2C_Init+0x12>
		p--;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3b01      	subs	r3, #1
 8002910:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1f9      	bne.n	800290c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002918:	bf00      	nop
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	0003d090 	.word	0x0003d090

0800292c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800292c:	b590      	push	{r4, r7, lr}
 800292e:	b0c7      	sub	sp, #284	; 0x11c
 8002930:	af02      	add	r7, sp, #8
 8002932:	4604      	mov	r4, r0
 8002934:	4608      	mov	r0, r1
 8002936:	4639      	mov	r1, r7
 8002938:	600a      	str	r2, [r1, #0]
 800293a:	4619      	mov	r1, r3
 800293c:	1dfb      	adds	r3, r7, #7
 800293e:	4622      	mov	r2, r4
 8002940:	701a      	strb	r2, [r3, #0]
 8002942:	1dbb      	adds	r3, r7, #6
 8002944:	4602      	mov	r2, r0
 8002946:	701a      	strb	r2, [r3, #0]
 8002948:	1d3b      	adds	r3, r7, #4
 800294a:	460a      	mov	r2, r1
 800294c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800294e:	f107 030c 	add.w	r3, r7, #12
 8002952:	1dba      	adds	r2, r7, #6
 8002954:	7812      	ldrb	r2, [r2, #0]
 8002956:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002958:	2300      	movs	r3, #0
 800295a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800295e:	e010      	b.n	8002982 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8002960:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002964:	463a      	mov	r2, r7
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	441a      	add	r2, r3
 800296a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800296e:	3301      	adds	r3, #1
 8002970:	7811      	ldrb	r1, [r2, #0]
 8002972:	f107 020c 	add.w	r2, r7, #12
 8002976:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002978:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800297c:	3301      	adds	r3, #1
 800297e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002982:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002986:	b29b      	uxth	r3, r3
 8002988:	1d3a      	adds	r2, r7, #4
 800298a:	8812      	ldrh	r2, [r2, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d8e7      	bhi.n	8002960 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002990:	1dfb      	adds	r3, r7, #7
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	b299      	uxth	r1, r3
 8002996:	1d3b      	adds	r3, r7, #4
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	3301      	adds	r3, #1
 800299c:	b29b      	uxth	r3, r3
 800299e:	f107 020c 	add.w	r2, r7, #12
 80029a2:	200a      	movs	r0, #10
 80029a4:	9000      	str	r0, [sp, #0]
 80029a6:	4804      	ldr	r0, [pc, #16]	; (80029b8 <ssd1306_I2C_WriteMulti+0x8c>)
 80029a8:	f001 fba8 	bl	80040fc <HAL_I2C_Master_Transmit>
}
 80029ac:	bf00      	nop
 80029ae:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd90      	pop	{r4, r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20004f6c 	.word	0x20004f6c

080029bc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af02      	add	r7, sp, #8
 80029c2:	4603      	mov	r3, r0
 80029c4:	71fb      	strb	r3, [r7, #7]
 80029c6:	460b      	mov	r3, r1
 80029c8:	71bb      	strb	r3, [r7, #6]
 80029ca:	4613      	mov	r3, r2
 80029cc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80029ce:	79bb      	ldrb	r3, [r7, #6]
 80029d0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80029d2:	797b      	ldrb	r3, [r7, #5]
 80029d4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	b299      	uxth	r1, r3
 80029da:	f107 020c 	add.w	r2, r7, #12
 80029de:	230a      	movs	r3, #10
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	2302      	movs	r3, #2
 80029e4:	4803      	ldr	r0, [pc, #12]	; (80029f4 <ssd1306_I2C_Write+0x38>)
 80029e6:	f001 fb89 	bl	80040fc <HAL_I2C_Master_Transmit>
}
 80029ea:	bf00      	nop
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20004f6c 	.word	0x20004f6c

080029f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	607b      	str	r3, [r7, #4]
 8002a02:	4b12      	ldr	r3, [pc, #72]	; (8002a4c <HAL_MspInit+0x54>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	4a11      	ldr	r2, [pc, #68]	; (8002a4c <HAL_MspInit+0x54>)
 8002a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a0e:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <HAL_MspInit+0x54>)
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a16:	607b      	str	r3, [r7, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	603b      	str	r3, [r7, #0]
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <HAL_MspInit+0x54>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	4a0a      	ldr	r2, [pc, #40]	; (8002a4c <HAL_MspInit+0x54>)
 8002a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a28:	6413      	str	r3, [r2, #64]	; 0x40
 8002a2a:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <HAL_MspInit+0x54>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a32:	603b      	str	r3, [r7, #0]
 8002a34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a36:	2200      	movs	r2, #0
 8002a38:	210f      	movs	r1, #15
 8002a3a:	f06f 0001 	mvn.w	r0, #1
 8002a3e:	f000 ffbf 	bl	80039c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40023800 	.word	0x40023800

08002a50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08c      	sub	sp, #48	; 0x30
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8002a60:	2200      	movs	r2, #0
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	201d      	movs	r0, #29
 8002a66:	f000 ffab 	bl	80039c0 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a6a:	201d      	movs	r0, #29
 8002a6c:	f000 ffc4 	bl	80039f8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	4b1f      	ldr	r3, [pc, #124]	; (8002af4 <HAL_InitTick+0xa4>)
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	4a1e      	ldr	r2, [pc, #120]	; (8002af4 <HAL_InitTick+0xa4>)
 8002a7a:	f043 0302 	orr.w	r3, r3, #2
 8002a7e:	6413      	str	r3, [r2, #64]	; 0x40
 8002a80:	4b1c      	ldr	r3, [pc, #112]	; (8002af4 <HAL_InitTick+0xa4>)
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a8c:	f107 0210 	add.w	r2, r7, #16
 8002a90:	f107 0314 	add.w	r3, r7, #20
 8002a94:	4611      	mov	r1, r2
 8002a96:	4618      	mov	r0, r3
 8002a98:	f002 fbae 	bl	80051f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002a9c:	f002 fb84 	bl	80051a8 <HAL_RCC_GetPCLK1Freq>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa8:	4a13      	ldr	r2, [pc, #76]	; (8002af8 <HAL_InitTick+0xa8>)
 8002aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002aae:	0c9b      	lsrs	r3, r3, #18
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8002ab4:	4b11      	ldr	r3, [pc, #68]	; (8002afc <HAL_InitTick+0xac>)
 8002ab6:	4a12      	ldr	r2, [pc, #72]	; (8002b00 <HAL_InitTick+0xb0>)
 8002ab8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002aba:	4b10      	ldr	r3, [pc, #64]	; (8002afc <HAL_InitTick+0xac>)
 8002abc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ac0:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8002ac2:	4a0e      	ldr	r2, [pc, #56]	; (8002afc <HAL_InitTick+0xac>)
 8002ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac6:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <HAL_InitTick+0xac>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ace:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <HAL_InitTick+0xac>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8002ad4:	4809      	ldr	r0, [pc, #36]	; (8002afc <HAL_InitTick+0xac>)
 8002ad6:	f002 feb7 	bl	8005848 <HAL_TIM_Base_Init>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d104      	bne.n	8002aea <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8002ae0:	4806      	ldr	r0, [pc, #24]	; (8002afc <HAL_InitTick+0xac>)
 8002ae2:	f002 ff0b 	bl	80058fc <HAL_TIM_Base_Start_IT>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	e000      	b.n	8002aec <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3730      	adds	r7, #48	; 0x30
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40023800 	.word	0x40023800
 8002af8:	431bde83 	.word	0x431bde83
 8002afc:	20005480 	.word	0x20005480
 8002b00:	40000400 	.word	0x40000400

08002b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b08:	e7fe      	b.n	8002b08 <NMI_Handler+0x4>

08002b0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b0e:	e7fe      	b.n	8002b0e <HardFault_Handler+0x4>

08002b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b14:	e7fe      	b.n	8002b14 <MemManage_Handler+0x4>

08002b16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b16:	b480      	push	{r7}
 8002b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b1a:	e7fe      	b.n	8002b1a <BusFault_Handler+0x4>

08002b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b20:	e7fe      	b.n	8002b20 <UsageFault_Handler+0x4>

08002b22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b22:	b480      	push	{r7}
 8002b24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b26:	bf00      	nop
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002b34:	4802      	ldr	r0, [pc, #8]	; (8002b40 <ADC_IRQHandler+0x10>)
 8002b36:	f000 fb01 	bl	800313c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20004cb0 	.word	0x20004cb0

08002b44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b48:	4802      	ldr	r0, [pc, #8]	; (8002b54 <TIM3_IRQHandler+0x10>)
 8002b4a:	f002 ff39 	bl	80059c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20005480 	.word	0x20005480

08002b58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  HAL_UART_RxCpltCallback(&huart1);
 8002b5c:	4803      	ldr	r0, [pc, #12]	; (8002b6c <USART1_IRQHandler+0x14>)
 8002b5e:	f000 f807 	bl	8002b70 <HAL_UART_RxCpltCallback>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b62:	4802      	ldr	r0, [pc, #8]	; (8002b6c <USART1_IRQHandler+0x14>)
 8002b64:	f003 f96e 	bl	8005e44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  //GPS_CallBack();
  /* USER CODE END USART1_IRQn 1 */
}
 8002b68:	bf00      	nop
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	200054c8 	.word	0x200054c8

08002b70 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
	GPS_UART_CallBack();
 8002b78:	f7fe ff14 	bl	80019a4 <GPS_UART_CallBack>
}
 8002b7c:	bf00      	nop
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
	return 1;
 8002b88:	2301      	movs	r3, #1
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <_kill>:

int _kill(int pid, int sig)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b9e:	f00a f955 	bl	800ce4c <__errno>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2216      	movs	r2, #22
 8002ba6:	601a      	str	r2, [r3, #0]
	return -1;
 8002ba8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <_exit>:

void _exit (int status)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f7ff ffe7 	bl	8002b94 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002bc6:	e7fe      	b.n	8002bc6 <_exit+0x12>

08002bc8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	e00a      	b.n	8002bf0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002bda:	f3af 8000 	nop.w
 8002bde:	4601      	mov	r1, r0
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	1c5a      	adds	r2, r3, #1
 8002be4:	60ba      	str	r2, [r7, #8]
 8002be6:	b2ca      	uxtb	r2, r1
 8002be8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	3301      	adds	r3, #1
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	dbf0      	blt.n	8002bda <_read+0x12>
	}

return len;
 8002bf8:	687b      	ldr	r3, [r7, #4]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b086      	sub	sp, #24
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	60f8      	str	r0, [r7, #12]
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]
 8002c12:	e009      	b.n	8002c28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	60ba      	str	r2, [r7, #8]
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	3301      	adds	r3, #1
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	dbf1      	blt.n	8002c14 <_write+0x12>
	}
	return len;
 8002c30:	687b      	ldr	r3, [r7, #4]
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <_close>:

int _close(int file)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
	return -1;
 8002c42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
 8002c5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c62:	605a      	str	r2, [r3, #4]
	return 0;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <_isatty>:

int _isatty(int file)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
	return 1;
 8002c7a:	2301      	movs	r3, #1
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
	return 0;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
	...

08002ca4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cac:	4a14      	ldr	r2, [pc, #80]	; (8002d00 <_sbrk+0x5c>)
 8002cae:	4b15      	ldr	r3, [pc, #84]	; (8002d04 <_sbrk+0x60>)
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cb8:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <_sbrk+0x64>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d102      	bne.n	8002cc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cc0:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <_sbrk+0x64>)
 8002cc2:	4a12      	ldr	r2, [pc, #72]	; (8002d0c <_sbrk+0x68>)
 8002cc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cc6:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <_sbrk+0x64>)
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4413      	add	r3, r2
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d207      	bcs.n	8002ce4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cd4:	f00a f8ba 	bl	800ce4c <__errno>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	220c      	movs	r2, #12
 8002cdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cde:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce2:	e009      	b.n	8002cf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ce4:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <_sbrk+0x64>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cea:	4b07      	ldr	r3, [pc, #28]	; (8002d08 <_sbrk+0x64>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	4a05      	ldr	r2, [pc, #20]	; (8002d08 <_sbrk+0x64>)
 8002cf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	20010000 	.word	0x20010000
 8002d04:	00000400 	.word	0x00000400
 8002d08:	20000650 	.word	0x20000650
 8002d0c:	200059d8 	.word	0x200059d8

08002d10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d14:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <SystemInit+0x20>)
 8002d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1a:	4a05      	ldr	r2, [pc, #20]	; (8002d30 <SystemInit+0x20>)
 8002d1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d24:	bf00      	nop
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	e000ed00 	.word	0xe000ed00

08002d34 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d38:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <MX_USART1_UART_Init+0x4c>)
 8002d3a:	4a12      	ldr	r2, [pc, #72]	; (8002d84 <MX_USART1_UART_Init+0x50>)
 8002d3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002d3e:	4b10      	ldr	r3, [pc, #64]	; (8002d80 <MX_USART1_UART_Init+0x4c>)
 8002d40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002d44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d46:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <MX_USART1_UART_Init+0x4c>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <MX_USART1_UART_Init+0x4c>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d52:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <MX_USART1_UART_Init+0x4c>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d58:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <MX_USART1_UART_Init+0x4c>)
 8002d5a:	220c      	movs	r2, #12
 8002d5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d5e:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <MX_USART1_UART_Init+0x4c>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <MX_USART1_UART_Init+0x4c>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d6a:	4805      	ldr	r0, [pc, #20]	; (8002d80 <MX_USART1_UART_Init+0x4c>)
 8002d6c:	f002 ffec 	bl	8005d48 <HAL_UART_Init>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002d76:	f7ff f9f7 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 8002d7a:	bf00      	nop
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	200054c8 	.word	0x200054c8
 8002d84:	40011000 	.word	0x40011000

08002d88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08a      	sub	sp, #40	; 0x28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d90:	f107 0314 	add.w	r3, r7, #20
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	609a      	str	r2, [r3, #8]
 8002d9c:	60da      	str	r2, [r3, #12]
 8002d9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a19      	ldr	r2, [pc, #100]	; (8002e0c <HAL_UART_MspInit+0x84>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d12c      	bne.n	8002e04 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	4b18      	ldr	r3, [pc, #96]	; (8002e10 <HAL_UART_MspInit+0x88>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	4a17      	ldr	r2, [pc, #92]	; (8002e10 <HAL_UART_MspInit+0x88>)
 8002db4:	f043 0310 	orr.w	r3, r3, #16
 8002db8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dba:	4b15      	ldr	r3, [pc, #84]	; (8002e10 <HAL_UART_MspInit+0x88>)
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	613b      	str	r3, [r7, #16]
 8002dc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	4b11      	ldr	r3, [pc, #68]	; (8002e10 <HAL_UART_MspInit+0x88>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	4a10      	ldr	r2, [pc, #64]	; (8002e10 <HAL_UART_MspInit+0x88>)
 8002dd0:	f043 0301 	orr.w	r3, r3, #1
 8002dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd6:	4b0e      	ldr	r3, [pc, #56]	; (8002e10 <HAL_UART_MspInit+0x88>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002de2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de8:	2302      	movs	r3, #2
 8002dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dec:	2300      	movs	r3, #0
 8002dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df0:	2303      	movs	r3, #3
 8002df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002df4:	2307      	movs	r3, #7
 8002df6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df8:	f107 0314 	add.w	r3, r7, #20
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4805      	ldr	r0, [pc, #20]	; (8002e14 <HAL_UART_MspInit+0x8c>)
 8002e00:	f000 fe9a 	bl	8003b38 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002e04:	bf00      	nop
 8002e06:	3728      	adds	r7, #40	; 0x28
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40011000 	.word	0x40011000
 8002e10:	40023800 	.word	0x40023800
 8002e14:	40020000 	.word	0x40020000

08002e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e1c:	480d      	ldr	r0, [pc, #52]	; (8002e54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e1e:	490e      	ldr	r1, [pc, #56]	; (8002e58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e20:	4a0e      	ldr	r2, [pc, #56]	; (8002e5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e24:	e002      	b.n	8002e2c <LoopCopyDataInit>

08002e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e2a:	3304      	adds	r3, #4

08002e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e30:	d3f9      	bcc.n	8002e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e32:	4a0b      	ldr	r2, [pc, #44]	; (8002e60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e34:	4c0b      	ldr	r4, [pc, #44]	; (8002e64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e38:	e001      	b.n	8002e3e <LoopFillZerobss>

08002e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e3c:	3204      	adds	r2, #4

08002e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e40:	d3fb      	bcc.n	8002e3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e42:	f7ff ff65 	bl	8002d10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e46:	f00a f807 	bl	800ce58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e4a:	f7ff f89f 	bl	8001f8c <main>
  bx  lr    
 8002e4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e50:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e58:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8002e5c:	08013d0c 	.word	0x08013d0c
  ldr r2, =_sbss
 8002e60:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8002e64:	200059d4 	.word	0x200059d4

08002e68 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e68:	e7fe      	b.n	8002e68 <DMA1_Stream0_IRQHandler>
	...

08002e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e70:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <HAL_Init+0x40>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a0d      	ldr	r2, [pc, #52]	; (8002eac <HAL_Init+0x40>)
 8002e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <HAL_Init+0x40>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a0a      	ldr	r2, [pc, #40]	; (8002eac <HAL_Init+0x40>)
 8002e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e88:	4b08      	ldr	r3, [pc, #32]	; (8002eac <HAL_Init+0x40>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a07      	ldr	r2, [pc, #28]	; (8002eac <HAL_Init+0x40>)
 8002e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e94:	2003      	movs	r0, #3
 8002e96:	f000 fd88 	bl	80039aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	f7ff fdd8 	bl	8002a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ea0:	f7ff fdaa 	bl	80029f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40023c00 	.word	0x40023c00

08002eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002eb4:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <HAL_IncTick+0x20>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <HAL_IncTick+0x24>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	4a04      	ldr	r2, [pc, #16]	; (8002ed4 <HAL_IncTick+0x24>)
 8002ec2:	6013      	str	r3, [r2, #0]
}
 8002ec4:	bf00      	nop
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	20000018 	.word	0x20000018
 8002ed4:	2000550c 	.word	0x2000550c

08002ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  return uwTick;
 8002edc:	4b03      	ldr	r3, [pc, #12]	; (8002eec <HAL_GetTick+0x14>)
 8002ede:	681b      	ldr	r3, [r3, #0]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	2000550c 	.word	0x2000550c

08002ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ef8:	f7ff ffee 	bl	8002ed8 <HAL_GetTick>
 8002efc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f08:	d005      	beq.n	8002f16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f0a:	4b0a      	ldr	r3, [pc, #40]	; (8002f34 <HAL_Delay+0x44>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4413      	add	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f16:	bf00      	nop
 8002f18:	f7ff ffde 	bl	8002ed8 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d8f7      	bhi.n	8002f18 <HAL_Delay+0x28>
  {
  }
}
 8002f28:	bf00      	nop
 8002f2a:	bf00      	nop
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20000018 	.word	0x20000018

08002f38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e033      	b.n	8002fb6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d109      	bne.n	8002f6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7fe f95a 	bl	8001210 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d118      	bne.n	8002fa8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f7e:	f023 0302 	bic.w	r3, r3, #2
 8002f82:	f043 0202 	orr.w	r2, r3, #2
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fb5a 	bl	8003644 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f023 0303 	bic.w	r3, r3, #3
 8002f9e:	f043 0201 	orr.w	r2, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	641a      	str	r2, [r3, #64]	; 0x40
 8002fa6:	e001      	b.n	8002fac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d101      	bne.n	8002fda <HAL_ADC_Start_IT+0x1a>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	e0a1      	b.n	800311e <HAL_ADC_Start_IT+0x15e>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d018      	beq.n	8003022 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003000:	4b4a      	ldr	r3, [pc, #296]	; (800312c <HAL_ADC_Start_IT+0x16c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a4a      	ldr	r2, [pc, #296]	; (8003130 <HAL_ADC_Start_IT+0x170>)
 8003006:	fba2 2303 	umull	r2, r3, r2, r3
 800300a:	0c9a      	lsrs	r2, r3, #18
 800300c:	4613      	mov	r3, r2
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	4413      	add	r3, r2
 8003012:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003014:	e002      	b.n	800301c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	3b01      	subs	r3, #1
 800301a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f9      	bne.n	8003016 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b01      	cmp	r3, #1
 800302e:	d169      	bne.n	8003104 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003038:	f023 0301 	bic.w	r3, r3, #1
 800303c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304e:	2b00      	cmp	r3, #0
 8003050:	d007      	beq.n	8003062 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800305a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800306a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800306e:	d106      	bne.n	800307e <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003074:	f023 0206 	bic.w	r2, r3, #6
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	645a      	str	r2, [r3, #68]	; 0x44
 800307c:	e002      	b.n	8003084 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800308c:	4b29      	ldr	r3, [pc, #164]	; (8003134 <HAL_ADC_Start_IT+0x174>)
 800308e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003098:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6812      	ldr	r2, [r2, #0]
 80030a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030a8:	f043 0320 	orr.w	r3, r3, #32
 80030ac:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f003 031f 	and.w	r3, r3, #31
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10f      	bne.n	80030da <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d129      	bne.n	800311c <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	e020      	b.n	800311c <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a16      	ldr	r2, [pc, #88]	; (8003138 <HAL_ADC_Start_IT+0x178>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d11b      	bne.n	800311c <HAL_ADC_Start_IT+0x15c>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d114      	bne.n	800311c <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003100:	609a      	str	r2, [r3, #8]
 8003102:	e00b      	b.n	800311c <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	f043 0210 	orr.w	r2, r3, #16
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003114:	f043 0201 	orr.w	r2, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	20000010 	.word	0x20000010
 8003130:	431bde83 	.word	0x431bde83
 8003134:	40012300 	.word	0x40012300
 8003138:	40012000 	.word	0x40012000

0800313c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	2300      	movs	r3, #0
 800314a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b02      	cmp	r3, #2
 8003158:	bf0c      	ite	eq
 800315a:	2301      	moveq	r3, #1
 800315c:	2300      	movne	r3, #0
 800315e:	b2db      	uxtb	r3, r3
 8003160:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 0320 	and.w	r3, r3, #32
 800316c:	2b20      	cmp	r3, #32
 800316e:	bf0c      	ite	eq
 8003170:	2301      	moveq	r3, #1
 8003172:	2300      	movne	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d049      	beq.n	8003212 <HAL_ADC_IRQHandler+0xd6>
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d046      	beq.n	8003212 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003188:	f003 0310 	and.w	r3, r3, #16
 800318c:	2b00      	cmp	r3, #0
 800318e:	d105      	bne.n	800319c <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d12b      	bne.n	8003202 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d127      	bne.n	8003202 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d006      	beq.n	80031ce <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d119      	bne.n	8003202 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0220 	bic.w	r2, r2, #32
 80031dc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d105      	bne.n	8003202 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f043 0201 	orr.w	r2, r3, #1
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7fe f848 	bl	8001298 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f06f 0212 	mvn.w	r2, #18
 8003210:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b04      	cmp	r3, #4
 800321e:	bf0c      	ite	eq
 8003220:	2301      	moveq	r3, #1
 8003222:	2300      	movne	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003232:	2b80      	cmp	r3, #128	; 0x80
 8003234:	bf0c      	ite	eq
 8003236:	2301      	moveq	r3, #1
 8003238:	2300      	movne	r3, #0
 800323a:	b2db      	uxtb	r3, r3
 800323c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d057      	beq.n	80032f4 <HAL_ADC_IRQHandler+0x1b8>
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d054      	beq.n	80032f4 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f003 0310 	and.w	r3, r3, #16
 8003252:	2b00      	cmp	r3, #0
 8003254:	d105      	bne.n	8003262 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d139      	bne.n	80032e4 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003276:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800327a:	2b00      	cmp	r3, #0
 800327c:	d006      	beq.n	800328c <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003288:	2b00      	cmp	r3, #0
 800328a:	d12b      	bne.n	80032e4 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003296:	2b00      	cmp	r3, #0
 8003298:	d124      	bne.n	80032e4 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d11d      	bne.n	80032e4 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d119      	bne.n	80032e4 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032be:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d105      	bne.n	80032e4 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	f043 0201 	orr.w	r2, r3, #1
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 faa9 	bl	800383c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f06f 020c 	mvn.w	r2, #12
 80032f2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b01      	cmp	r3, #1
 8003300:	bf0c      	ite	eq
 8003302:	2301      	moveq	r3, #1
 8003304:	2300      	movne	r3, #0
 8003306:	b2db      	uxtb	r3, r3
 8003308:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003314:	2b40      	cmp	r3, #64	; 0x40
 8003316:	bf0c      	ite	eq
 8003318:	2301      	moveq	r3, #1
 800331a:	2300      	movne	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d017      	beq.n	8003356 <HAL_ADC_IRQHandler+0x21a>
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d014      	beq.n	8003356 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b01      	cmp	r3, #1
 8003338:	d10d      	bne.n	8003356 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f846 	bl	80033d8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f06f 0201 	mvn.w	r2, #1
 8003354:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0320 	and.w	r3, r3, #32
 8003360:	2b20      	cmp	r3, #32
 8003362:	bf0c      	ite	eq
 8003364:	2301      	moveq	r3, #1
 8003366:	2300      	movne	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003376:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800337a:	bf0c      	ite	eq
 800337c:	2301      	moveq	r3, #1
 800337e:	2300      	movne	r3, #0
 8003380:	b2db      	uxtb	r3, r3
 8003382:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d015      	beq.n	80033b6 <HAL_ADC_IRQHandler+0x27a>
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d012      	beq.n	80033b6 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003394:	f043 0202 	orr.w	r2, r3, #2
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f06f 0220 	mvn.w	r2, #32
 80033a4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f820 	bl	80033ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f06f 0220 	mvn.w	r2, #32
 80033b4:	601a      	str	r2, [r3, #0]
  }
}
 80033b6:	bf00      	nop
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800340a:	2300      	movs	r3, #0
 800340c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_ADC_ConfigChannel+0x1c>
 8003418:	2302      	movs	r3, #2
 800341a:	e105      	b.n	8003628 <HAL_ADC_ConfigChannel+0x228>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b09      	cmp	r3, #9
 800342a:	d925      	bls.n	8003478 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68d9      	ldr	r1, [r3, #12]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	b29b      	uxth	r3, r3
 8003438:	461a      	mov	r2, r3
 800343a:	4613      	mov	r3, r2
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	4413      	add	r3, r2
 8003440:	3b1e      	subs	r3, #30
 8003442:	2207      	movs	r2, #7
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	43da      	mvns	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	400a      	ands	r2, r1
 8003450:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68d9      	ldr	r1, [r3, #12]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	b29b      	uxth	r3, r3
 8003462:	4618      	mov	r0, r3
 8003464:	4603      	mov	r3, r0
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	4403      	add	r3, r0
 800346a:	3b1e      	subs	r3, #30
 800346c:	409a      	lsls	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	60da      	str	r2, [r3, #12]
 8003476:	e022      	b.n	80034be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6919      	ldr	r1, [r3, #16]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	b29b      	uxth	r3, r3
 8003484:	461a      	mov	r2, r3
 8003486:	4613      	mov	r3, r2
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	4413      	add	r3, r2
 800348c:	2207      	movs	r2, #7
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43da      	mvns	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	400a      	ands	r2, r1
 800349a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6919      	ldr	r1, [r3, #16]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	4618      	mov	r0, r3
 80034ae:	4603      	mov	r3, r0
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	4403      	add	r3, r0
 80034b4:	409a      	lsls	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b06      	cmp	r3, #6
 80034c4:	d824      	bhi.n	8003510 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	4613      	mov	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	3b05      	subs	r3, #5
 80034d8:	221f      	movs	r2, #31
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	43da      	mvns	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	400a      	ands	r2, r1
 80034e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	4618      	mov	r0, r3
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	4613      	mov	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	3b05      	subs	r3, #5
 8003502:	fa00 f203 	lsl.w	r2, r0, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	635a      	str	r2, [r3, #52]	; 0x34
 800350e:	e04c      	b.n	80035aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b0c      	cmp	r3, #12
 8003516:	d824      	bhi.n	8003562 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	4613      	mov	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	3b23      	subs	r3, #35	; 0x23
 800352a:	221f      	movs	r2, #31
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	43da      	mvns	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	400a      	ands	r2, r1
 8003538:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	b29b      	uxth	r3, r3
 8003546:	4618      	mov	r0, r3
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4413      	add	r3, r2
 8003552:	3b23      	subs	r3, #35	; 0x23
 8003554:	fa00 f203 	lsl.w	r2, r0, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	631a      	str	r2, [r3, #48]	; 0x30
 8003560:	e023      	b.n	80035aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	4613      	mov	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	3b41      	subs	r3, #65	; 0x41
 8003574:	221f      	movs	r2, #31
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	43da      	mvns	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	400a      	ands	r2, r1
 8003582:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	b29b      	uxth	r3, r3
 8003590:	4618      	mov	r0, r3
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	3b41      	subs	r3, #65	; 0x41
 800359e:	fa00 f203 	lsl.w	r2, r0, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035aa:	4b22      	ldr	r3, [pc, #136]	; (8003634 <HAL_ADC_ConfigChannel+0x234>)
 80035ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a21      	ldr	r2, [pc, #132]	; (8003638 <HAL_ADC_ConfigChannel+0x238>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d109      	bne.n	80035cc <HAL_ADC_ConfigChannel+0x1cc>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b12      	cmp	r3, #18
 80035be:	d105      	bne.n	80035cc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a19      	ldr	r2, [pc, #100]	; (8003638 <HAL_ADC_ConfigChannel+0x238>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d123      	bne.n	800361e <HAL_ADC_ConfigChannel+0x21e>
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b10      	cmp	r3, #16
 80035dc:	d003      	beq.n	80035e6 <HAL_ADC_ConfigChannel+0x1e6>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b11      	cmp	r3, #17
 80035e4:	d11b      	bne.n	800361e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2b10      	cmp	r3, #16
 80035f8:	d111      	bne.n	800361e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035fa:	4b10      	ldr	r3, [pc, #64]	; (800363c <HAL_ADC_ConfigChannel+0x23c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a10      	ldr	r2, [pc, #64]	; (8003640 <HAL_ADC_ConfigChannel+0x240>)
 8003600:	fba2 2303 	umull	r2, r3, r2, r3
 8003604:	0c9a      	lsrs	r2, r3, #18
 8003606:	4613      	mov	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003610:	e002      	b.n	8003618 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	3b01      	subs	r3, #1
 8003616:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f9      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	40012300 	.word	0x40012300
 8003638:	40012000 	.word	0x40012000
 800363c:	20000010 	.word	0x20000010
 8003640:	431bde83 	.word	0x431bde83

08003644 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800364c:	4b79      	ldr	r3, [pc, #484]	; (8003834 <ADC_Init+0x1f0>)
 800364e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	431a      	orrs	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003678:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6859      	ldr	r1, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	021a      	lsls	r2, r3, #8
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800369c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6859      	ldr	r1, [r3, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6899      	ldr	r1, [r3, #8]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d6:	4a58      	ldr	r2, [pc, #352]	; (8003838 <ADC_Init+0x1f4>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d022      	beq.n	8003722 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6899      	ldr	r1, [r3, #8]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800370c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6899      	ldr	r1, [r3, #8]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	430a      	orrs	r2, r1
 800371e:	609a      	str	r2, [r3, #8]
 8003720:	e00f      	b.n	8003742 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003730:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003740:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0202 	bic.w	r2, r2, #2
 8003750:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6899      	ldr	r1, [r3, #8]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	7e1b      	ldrb	r3, [r3, #24]
 800375c:	005a      	lsls	r2, r3, #1
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 3020 	ldrb.w	r3, [r3, #32]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d01b      	beq.n	80037a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800377e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800378e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6859      	ldr	r1, [r3, #4]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	3b01      	subs	r3, #1
 800379c:	035a      	lsls	r2, r3, #13
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	605a      	str	r2, [r3, #4]
 80037a6:	e007      	b.n	80037b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80037c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	051a      	lsls	r2, r3, #20
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6899      	ldr	r1, [r3, #8]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037fa:	025a      	lsls	r2, r3, #9
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003812:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6899      	ldr	r1, [r3, #8]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	029a      	lsls	r2, r3, #10
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	609a      	str	r2, [r3, #8]
}
 8003828:	bf00      	nop
 800382a:	3714      	adds	r7, #20
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	40012300 	.word	0x40012300
 8003838:	0f000001 	.word	0x0f000001

0800383c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003860:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <__NVIC_SetPriorityGrouping+0x44>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800386c:	4013      	ands	r3, r2
 800386e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003878:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800387c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003882:	4a04      	ldr	r2, [pc, #16]	; (8003894 <__NVIC_SetPriorityGrouping+0x44>)
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	60d3      	str	r3, [r2, #12]
}
 8003888:	bf00      	nop
 800388a:	3714      	adds	r7, #20
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	e000ed00 	.word	0xe000ed00

08003898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800389c:	4b04      	ldr	r3, [pc, #16]	; (80038b0 <__NVIC_GetPriorityGrouping+0x18>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	0a1b      	lsrs	r3, r3, #8
 80038a2:	f003 0307 	and.w	r3, r3, #7
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	e000ed00 	.word	0xe000ed00

080038b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	4603      	mov	r3, r0
 80038bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	db0b      	blt.n	80038de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038c6:	79fb      	ldrb	r3, [r7, #7]
 80038c8:	f003 021f 	and.w	r2, r3, #31
 80038cc:	4907      	ldr	r1, [pc, #28]	; (80038ec <__NVIC_EnableIRQ+0x38>)
 80038ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d2:	095b      	lsrs	r3, r3, #5
 80038d4:	2001      	movs	r0, #1
 80038d6:	fa00 f202 	lsl.w	r2, r0, r2
 80038da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	e000e100 	.word	0xe000e100

080038f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	6039      	str	r1, [r7, #0]
 80038fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003900:	2b00      	cmp	r3, #0
 8003902:	db0a      	blt.n	800391a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	b2da      	uxtb	r2, r3
 8003908:	490c      	ldr	r1, [pc, #48]	; (800393c <__NVIC_SetPriority+0x4c>)
 800390a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390e:	0112      	lsls	r2, r2, #4
 8003910:	b2d2      	uxtb	r2, r2
 8003912:	440b      	add	r3, r1
 8003914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003918:	e00a      	b.n	8003930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	b2da      	uxtb	r2, r3
 800391e:	4908      	ldr	r1, [pc, #32]	; (8003940 <__NVIC_SetPriority+0x50>)
 8003920:	79fb      	ldrb	r3, [r7, #7]
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	3b04      	subs	r3, #4
 8003928:	0112      	lsls	r2, r2, #4
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	440b      	add	r3, r1
 800392e:	761a      	strb	r2, [r3, #24]
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	e000e100 	.word	0xe000e100
 8003940:	e000ed00 	.word	0xe000ed00

08003944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003944:	b480      	push	{r7}
 8003946:	b089      	sub	sp, #36	; 0x24
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	f1c3 0307 	rsb	r3, r3, #7
 800395e:	2b04      	cmp	r3, #4
 8003960:	bf28      	it	cs
 8003962:	2304      	movcs	r3, #4
 8003964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	3304      	adds	r3, #4
 800396a:	2b06      	cmp	r3, #6
 800396c:	d902      	bls.n	8003974 <NVIC_EncodePriority+0x30>
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	3b03      	subs	r3, #3
 8003972:	e000      	b.n	8003976 <NVIC_EncodePriority+0x32>
 8003974:	2300      	movs	r3, #0
 8003976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003978:	f04f 32ff 	mov.w	r2, #4294967295
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	43da      	mvns	r2, r3
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	401a      	ands	r2, r3
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800398c:	f04f 31ff 	mov.w	r1, #4294967295
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	fa01 f303 	lsl.w	r3, r1, r3
 8003996:	43d9      	mvns	r1, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800399c:	4313      	orrs	r3, r2
         );
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3724      	adds	r7, #36	; 0x24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b082      	sub	sp, #8
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7ff ff4c 	bl	8003850 <__NVIC_SetPriorityGrouping>
}
 80039b8:	bf00      	nop
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	4603      	mov	r3, r0
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
 80039cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039d2:	f7ff ff61 	bl	8003898 <__NVIC_GetPriorityGrouping>
 80039d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	68b9      	ldr	r1, [r7, #8]
 80039dc:	6978      	ldr	r0, [r7, #20]
 80039de:	f7ff ffb1 	bl	8003944 <NVIC_EncodePriority>
 80039e2:	4602      	mov	r2, r0
 80039e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039e8:	4611      	mov	r1, r2
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff ff80 	bl	80038f0 <__NVIC_SetPriority>
}
 80039f0:	bf00      	nop
 80039f2:	3718      	adds	r7, #24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff ff54 	bl	80038b4 <__NVIC_EnableIRQ>
}
 8003a0c:	bf00      	nop
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a20:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a22:	f7ff fa59 	bl	8002ed8 <HAL_GetTick>
 8003a26:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d008      	beq.n	8003a46 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2280      	movs	r2, #128	; 0x80
 8003a38:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e052      	b.n	8003aec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0216 	bic.w	r2, r2, #22
 8003a54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695a      	ldr	r2, [r3, #20]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a64:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d103      	bne.n	8003a76 <HAL_DMA_Abort+0x62>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d007      	beq.n	8003a86 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0208 	bic.w	r2, r2, #8
 8003a84:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0201 	bic.w	r2, r2, #1
 8003a94:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a96:	e013      	b.n	8003ac0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a98:	f7ff fa1e 	bl	8002ed8 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b05      	cmp	r3, #5
 8003aa4:	d90c      	bls.n	8003ac0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2203      	movs	r2, #3
 8003ab8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e015      	b.n	8003aec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1e4      	bne.n	8003a98 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad2:	223f      	movs	r2, #63	; 0x3f
 8003ad4:	409a      	lsls	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d004      	beq.n	8003b12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2280      	movs	r2, #128	; 0x80
 8003b0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e00c      	b.n	8003b2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2205      	movs	r2, #5
 8003b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0201 	bic.w	r2, r2, #1
 8003b28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b089      	sub	sp, #36	; 0x24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b46:	2300      	movs	r3, #0
 8003b48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61fb      	str	r3, [r7, #28]
 8003b52:	e159      	b.n	8003e08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b54:	2201      	movs	r2, #1
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	4013      	ands	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	f040 8148 	bne.w	8003e02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d005      	beq.n	8003b8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d130      	bne.n	8003bec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	2203      	movs	r2, #3
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	091b      	lsrs	r3, r3, #4
 8003bd6:	f003 0201 	and.w	r2, r3, #1
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f003 0303 	and.w	r3, r3, #3
 8003bf4:	2b03      	cmp	r3, #3
 8003bf6:	d017      	beq.n	8003c28 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	2203      	movs	r2, #3
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	689a      	ldr	r2, [r3, #8]
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 0303 	and.w	r3, r3, #3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d123      	bne.n	8003c7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	08da      	lsrs	r2, r3, #3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3208      	adds	r2, #8
 8003c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	220f      	movs	r2, #15
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	43db      	mvns	r3, r3
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	4013      	ands	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	691a      	ldr	r2, [r3, #16]
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	08da      	lsrs	r2, r3, #3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3208      	adds	r2, #8
 8003c76:	69b9      	ldr	r1, [r7, #24]
 8003c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	2203      	movs	r2, #3
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	4013      	ands	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f003 0203 	and.w	r2, r3, #3
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 80a2 	beq.w	8003e02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	4b57      	ldr	r3, [pc, #348]	; (8003e20 <HAL_GPIO_Init+0x2e8>)
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc6:	4a56      	ldr	r2, [pc, #344]	; (8003e20 <HAL_GPIO_Init+0x2e8>)
 8003cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8003cce:	4b54      	ldr	r3, [pc, #336]	; (8003e20 <HAL_GPIO_Init+0x2e8>)
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cd6:	60fb      	str	r3, [r7, #12]
 8003cd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cda:	4a52      	ldr	r2, [pc, #328]	; (8003e24 <HAL_GPIO_Init+0x2ec>)
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	089b      	lsrs	r3, r3, #2
 8003ce0:	3302      	adds	r3, #2
 8003ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	220f      	movs	r2, #15
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	43db      	mvns	r3, r3
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a49      	ldr	r2, [pc, #292]	; (8003e28 <HAL_GPIO_Init+0x2f0>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d019      	beq.n	8003d3a <HAL_GPIO_Init+0x202>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a48      	ldr	r2, [pc, #288]	; (8003e2c <HAL_GPIO_Init+0x2f4>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d013      	beq.n	8003d36 <HAL_GPIO_Init+0x1fe>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a47      	ldr	r2, [pc, #284]	; (8003e30 <HAL_GPIO_Init+0x2f8>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d00d      	beq.n	8003d32 <HAL_GPIO_Init+0x1fa>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a46      	ldr	r2, [pc, #280]	; (8003e34 <HAL_GPIO_Init+0x2fc>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d007      	beq.n	8003d2e <HAL_GPIO_Init+0x1f6>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a45      	ldr	r2, [pc, #276]	; (8003e38 <HAL_GPIO_Init+0x300>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d101      	bne.n	8003d2a <HAL_GPIO_Init+0x1f2>
 8003d26:	2304      	movs	r3, #4
 8003d28:	e008      	b.n	8003d3c <HAL_GPIO_Init+0x204>
 8003d2a:	2307      	movs	r3, #7
 8003d2c:	e006      	b.n	8003d3c <HAL_GPIO_Init+0x204>
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e004      	b.n	8003d3c <HAL_GPIO_Init+0x204>
 8003d32:	2302      	movs	r3, #2
 8003d34:	e002      	b.n	8003d3c <HAL_GPIO_Init+0x204>
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <HAL_GPIO_Init+0x204>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	69fa      	ldr	r2, [r7, #28]
 8003d3e:	f002 0203 	and.w	r2, r2, #3
 8003d42:	0092      	lsls	r2, r2, #2
 8003d44:	4093      	lsls	r3, r2
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d4c:	4935      	ldr	r1, [pc, #212]	; (8003e24 <HAL_GPIO_Init+0x2ec>)
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	089b      	lsrs	r3, r3, #2
 8003d52:	3302      	adds	r3, #2
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d5a:	4b38      	ldr	r3, [pc, #224]	; (8003e3c <HAL_GPIO_Init+0x304>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	43db      	mvns	r3, r3
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	4013      	ands	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d7e:	4a2f      	ldr	r2, [pc, #188]	; (8003e3c <HAL_GPIO_Init+0x304>)
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d84:	4b2d      	ldr	r3, [pc, #180]	; (8003e3c <HAL_GPIO_Init+0x304>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	4013      	ands	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003da8:	4a24      	ldr	r2, [pc, #144]	; (8003e3c <HAL_GPIO_Init+0x304>)
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dae:	4b23      	ldr	r3, [pc, #140]	; (8003e3c <HAL_GPIO_Init+0x304>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	43db      	mvns	r3, r3
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dd2:	4a1a      	ldr	r2, [pc, #104]	; (8003e3c <HAL_GPIO_Init+0x304>)
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dd8:	4b18      	ldr	r3, [pc, #96]	; (8003e3c <HAL_GPIO_Init+0x304>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	43db      	mvns	r3, r3
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	4013      	ands	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003dfc:	4a0f      	ldr	r2, [pc, #60]	; (8003e3c <HAL_GPIO_Init+0x304>)
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	3301      	adds	r3, #1
 8003e06:	61fb      	str	r3, [r7, #28]
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	2b0f      	cmp	r3, #15
 8003e0c:	f67f aea2 	bls.w	8003b54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e10:	bf00      	nop
 8003e12:	bf00      	nop
 8003e14:	3724      	adds	r7, #36	; 0x24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	40023800 	.word	0x40023800
 8003e24:	40013800 	.word	0x40013800
 8003e28:	40020000 	.word	0x40020000
 8003e2c:	40020400 	.word	0x40020400
 8003e30:	40020800 	.word	0x40020800
 8003e34:	40020c00 	.word	0x40020c00
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	40013c00 	.word	0x40013c00

08003e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	460b      	mov	r3, r1
 8003e4a:	807b      	strh	r3, [r7, #2]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e50:	787b      	ldrb	r3, [r7, #1]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e56:	887a      	ldrh	r2, [r7, #2]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e5c:	e003      	b.n	8003e66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e5e:	887b      	ldrh	r3, [r7, #2]
 8003e60:	041a      	lsls	r2, r3, #16
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	619a      	str	r2, [r3, #24]
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
	...

08003e74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e12b      	b.n	80040de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7fe f82e 	bl	8001efc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2224      	movs	r2, #36	; 0x24
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 0201 	bic.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ec6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ed6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ed8:	f001 f966 	bl	80051a8 <HAL_RCC_GetPCLK1Freq>
 8003edc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	4a81      	ldr	r2, [pc, #516]	; (80040e8 <HAL_I2C_Init+0x274>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d807      	bhi.n	8003ef8 <HAL_I2C_Init+0x84>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4a80      	ldr	r2, [pc, #512]	; (80040ec <HAL_I2C_Init+0x278>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	bf94      	ite	ls
 8003ef0:	2301      	movls	r3, #1
 8003ef2:	2300      	movhi	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	e006      	b.n	8003f06 <HAL_I2C_Init+0x92>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4a7d      	ldr	r2, [pc, #500]	; (80040f0 <HAL_I2C_Init+0x27c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	bf94      	ite	ls
 8003f00:	2301      	movls	r3, #1
 8003f02:	2300      	movhi	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e0e7      	b.n	80040de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4a78      	ldr	r2, [pc, #480]	; (80040f4 <HAL_I2C_Init+0x280>)
 8003f12:	fba2 2303 	umull	r2, r3, r2, r3
 8003f16:	0c9b      	lsrs	r3, r3, #18
 8003f18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	4a6a      	ldr	r2, [pc, #424]	; (80040e8 <HAL_I2C_Init+0x274>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d802      	bhi.n	8003f48 <HAL_I2C_Init+0xd4>
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	3301      	adds	r3, #1
 8003f46:	e009      	b.n	8003f5c <HAL_I2C_Init+0xe8>
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f4e:	fb02 f303 	mul.w	r3, r2, r3
 8003f52:	4a69      	ldr	r2, [pc, #420]	; (80040f8 <HAL_I2C_Init+0x284>)
 8003f54:	fba2 2303 	umull	r2, r3, r2, r3
 8003f58:	099b      	lsrs	r3, r3, #6
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6812      	ldr	r2, [r2, #0]
 8003f60:	430b      	orrs	r3, r1
 8003f62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	495c      	ldr	r1, [pc, #368]	; (80040e8 <HAL_I2C_Init+0x274>)
 8003f78:	428b      	cmp	r3, r1
 8003f7a:	d819      	bhi.n	8003fb0 <HAL_I2C_Init+0x13c>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	1e59      	subs	r1, r3, #1
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f8a:	1c59      	adds	r1, r3, #1
 8003f8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f90:	400b      	ands	r3, r1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00a      	beq.n	8003fac <HAL_I2C_Init+0x138>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	1e59      	subs	r1, r3, #1
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003faa:	e051      	b.n	8004050 <HAL_I2C_Init+0x1dc>
 8003fac:	2304      	movs	r3, #4
 8003fae:	e04f      	b.n	8004050 <HAL_I2C_Init+0x1dc>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d111      	bne.n	8003fdc <HAL_I2C_Init+0x168>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	1e58      	subs	r0, r3, #1
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6859      	ldr	r1, [r3, #4]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	440b      	add	r3, r1
 8003fc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fca:	3301      	adds	r3, #1
 8003fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	bf0c      	ite	eq
 8003fd4:	2301      	moveq	r3, #1
 8003fd6:	2300      	movne	r3, #0
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	e012      	b.n	8004002 <HAL_I2C_Init+0x18e>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	1e58      	subs	r0, r3, #1
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6859      	ldr	r1, [r3, #4]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	0099      	lsls	r1, r3, #2
 8003fec:	440b      	add	r3, r1
 8003fee:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	bf0c      	ite	eq
 8003ffc:	2301      	moveq	r3, #1
 8003ffe:	2300      	movne	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <HAL_I2C_Init+0x196>
 8004006:	2301      	movs	r3, #1
 8004008:	e022      	b.n	8004050 <HAL_I2C_Init+0x1dc>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10e      	bne.n	8004030 <HAL_I2C_Init+0x1bc>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	1e58      	subs	r0, r3, #1
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6859      	ldr	r1, [r3, #4]
 800401a:	460b      	mov	r3, r1
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	440b      	add	r3, r1
 8004020:	fbb0 f3f3 	udiv	r3, r0, r3
 8004024:	3301      	adds	r3, #1
 8004026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800402a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800402e:	e00f      	b.n	8004050 <HAL_I2C_Init+0x1dc>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	1e58      	subs	r0, r3, #1
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6859      	ldr	r1, [r3, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	0099      	lsls	r1, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	fbb0 f3f3 	udiv	r3, r0, r3
 8004046:	3301      	adds	r3, #1
 8004048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800404c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	6809      	ldr	r1, [r1, #0]
 8004054:	4313      	orrs	r3, r2
 8004056:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	69da      	ldr	r2, [r3, #28]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800407e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6911      	ldr	r1, [r2, #16]
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	68d2      	ldr	r2, [r2, #12]
 800408a:	4311      	orrs	r1, r2
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6812      	ldr	r2, [r2, #0]
 8004090:	430b      	orrs	r3, r1
 8004092:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695a      	ldr	r2, [r3, #20]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0201 	orr.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	000186a0 	.word	0x000186a0
 80040ec:	001e847f 	.word	0x001e847f
 80040f0:	003d08ff 	.word	0x003d08ff
 80040f4:	431bde83 	.word	0x431bde83
 80040f8:	10624dd3 	.word	0x10624dd3

080040fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b088      	sub	sp, #32
 8004100:	af02      	add	r7, sp, #8
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	607a      	str	r2, [r7, #4]
 8004106:	461a      	mov	r2, r3
 8004108:	460b      	mov	r3, r1
 800410a:	817b      	strh	r3, [r7, #10]
 800410c:	4613      	mov	r3, r2
 800410e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004110:	f7fe fee2 	bl	8002ed8 <HAL_GetTick>
 8004114:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b20      	cmp	r3, #32
 8004120:	f040 80e0 	bne.w	80042e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	2319      	movs	r3, #25
 800412a:	2201      	movs	r2, #1
 800412c:	4970      	ldr	r1, [pc, #448]	; (80042f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 fa92 	bl	8004658 <I2C_WaitOnFlagUntilTimeout>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800413a:	2302      	movs	r3, #2
 800413c:	e0d3      	b.n	80042e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004144:	2b01      	cmp	r3, #1
 8004146:	d101      	bne.n	800414c <HAL_I2C_Master_Transmit+0x50>
 8004148:	2302      	movs	r3, #2
 800414a:	e0cc      	b.n	80042e6 <HAL_I2C_Master_Transmit+0x1ea>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b01      	cmp	r3, #1
 8004160:	d007      	beq.n	8004172 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f042 0201 	orr.w	r2, r2, #1
 8004170:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004180:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2221      	movs	r2, #33	; 0x21
 8004186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2210      	movs	r2, #16
 800418e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	893a      	ldrh	r2, [r7, #8]
 80041a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	4a50      	ldr	r2, [pc, #320]	; (80042f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80041b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80041b4:	8979      	ldrh	r1, [r7, #10]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	6a3a      	ldr	r2, [r7, #32]
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 f9ca 	bl	8004554 <I2C_MasterRequestWrite>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e08d      	b.n	80042e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ca:	2300      	movs	r3, #0
 80041cc:	613b      	str	r3, [r7, #16]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	613b      	str	r3, [r7, #16]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80041e0:	e066      	b.n	80042b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	6a39      	ldr	r1, [r7, #32]
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 fb0c 	bl	8004804 <I2C_WaitOnTXEFlagUntilTimeout>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00d      	beq.n	800420e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d107      	bne.n	800420a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004208:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e06b      	b.n	80042e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	781a      	ldrb	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004228:	b29b      	uxth	r3, r3
 800422a:	3b01      	subs	r3, #1
 800422c:	b29a      	uxth	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b04      	cmp	r3, #4
 800424a:	d11b      	bne.n	8004284 <HAL_I2C_Master_Transmit+0x188>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004250:	2b00      	cmp	r3, #0
 8004252:	d017      	beq.n	8004284 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	781a      	ldrb	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426e:	b29b      	uxth	r3, r3
 8004270:	3b01      	subs	r3, #1
 8004272:	b29a      	uxth	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800427c:	3b01      	subs	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	6a39      	ldr	r1, [r7, #32]
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 fafc 	bl	8004886 <I2C_WaitOnBTFFlagUntilTimeout>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00d      	beq.n	80042b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004298:	2b04      	cmp	r3, #4
 800429a:	d107      	bne.n	80042ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e01a      	b.n	80042e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d194      	bne.n	80041e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	e000      	b.n	80042e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80042e4:	2302      	movs	r3, #2
  }
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	00100002 	.word	0x00100002
 80042f4:	ffff0000 	.word	0xffff0000

080042f8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b08a      	sub	sp, #40	; 0x28
 80042fc:	af02      	add	r7, sp, #8
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	607a      	str	r2, [r7, #4]
 8004302:	603b      	str	r3, [r7, #0]
 8004304:	460b      	mov	r3, r1
 8004306:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004308:	f7fe fde6 	bl	8002ed8 <HAL_GetTick>
 800430c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800430e:	2301      	movs	r3, #1
 8004310:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b20      	cmp	r3, #32
 800431c:	f040 8111 	bne.w	8004542 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	2319      	movs	r3, #25
 8004326:	2201      	movs	r2, #1
 8004328:	4988      	ldr	r1, [pc, #544]	; (800454c <HAL_I2C_IsDeviceReady+0x254>)
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 f994 	bl	8004658 <I2C_WaitOnFlagUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004336:	2302      	movs	r3, #2
 8004338:	e104      	b.n	8004544 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_I2C_IsDeviceReady+0x50>
 8004344:	2302      	movs	r3, #2
 8004346:	e0fd      	b.n	8004544 <HAL_I2C_IsDeviceReady+0x24c>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b01      	cmp	r3, #1
 800435c:	d007      	beq.n	800436e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f042 0201 	orr.w	r2, r2, #1
 800436c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800437c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2224      	movs	r2, #36	; 0x24
 8004382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4a70      	ldr	r2, [pc, #448]	; (8004550 <HAL_I2C_IsDeviceReady+0x258>)
 8004390:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043a0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 f952 	bl	8004658 <I2C_WaitOnFlagUntilTimeout>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00d      	beq.n	80043d6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043c8:	d103      	bne.n	80043d2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043d0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e0b6      	b.n	8004544 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043d6:	897b      	ldrh	r3, [r7, #10]
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	461a      	mov	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043e4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80043e6:	f7fe fd77 	bl	8002ed8 <HAL_GetTick>
 80043ea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	bf0c      	ite	eq
 80043fa:	2301      	moveq	r3, #1
 80043fc:	2300      	movne	r3, #0
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800440c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004410:	bf0c      	ite	eq
 8004412:	2301      	moveq	r3, #1
 8004414:	2300      	movne	r3, #0
 8004416:	b2db      	uxtb	r3, r3
 8004418:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800441a:	e025      	b.n	8004468 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800441c:	f7fe fd5c 	bl	8002ed8 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	429a      	cmp	r2, r3
 800442a:	d302      	bcc.n	8004432 <HAL_I2C_IsDeviceReady+0x13a>
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d103      	bne.n	800443a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	22a0      	movs	r2, #160	; 0xa0
 8004436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b02      	cmp	r3, #2
 8004446:	bf0c      	ite	eq
 8004448:	2301      	moveq	r3, #1
 800444a:	2300      	movne	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800445a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800445e:	bf0c      	ite	eq
 8004460:	2301      	moveq	r3, #1
 8004462:	2300      	movne	r3, #0
 8004464:	b2db      	uxtb	r3, r3
 8004466:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2ba0      	cmp	r3, #160	; 0xa0
 8004472:	d005      	beq.n	8004480 <HAL_I2C_IsDeviceReady+0x188>
 8004474:	7dfb      	ldrb	r3, [r7, #23]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d102      	bne.n	8004480 <HAL_I2C_IsDeviceReady+0x188>
 800447a:	7dbb      	ldrb	r3, [r7, #22]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0cd      	beq.n	800441c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2220      	movs	r2, #32
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b02      	cmp	r3, #2
 8004494:	d129      	bne.n	80044ea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044a4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044a6:	2300      	movs	r3, #0
 80044a8:	613b      	str	r3, [r7, #16]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	613b      	str	r3, [r7, #16]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	613b      	str	r3, [r7, #16]
 80044ba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	2319      	movs	r3, #25
 80044c2:	2201      	movs	r2, #1
 80044c4:	4921      	ldr	r1, [pc, #132]	; (800454c <HAL_I2C_IsDeviceReady+0x254>)
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 f8c6 	bl	8004658 <I2C_WaitOnFlagUntilTimeout>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e036      	b.n	8004544 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2220      	movs	r2, #32
 80044da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80044e6:	2300      	movs	r3, #0
 80044e8:	e02c      	b.n	8004544 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044f8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004502:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	2319      	movs	r3, #25
 800450a:	2201      	movs	r2, #1
 800450c:	490f      	ldr	r1, [pc, #60]	; (800454c <HAL_I2C_IsDeviceReady+0x254>)
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f000 f8a2 	bl	8004658 <I2C_WaitOnFlagUntilTimeout>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e012      	b.n	8004544 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	3301      	adds	r3, #1
 8004522:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	429a      	cmp	r2, r3
 800452a:	f4ff af32 	bcc.w	8004392 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2220      	movs	r2, #32
 8004532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004542:	2302      	movs	r3, #2
  }
}
 8004544:	4618      	mov	r0, r3
 8004546:	3720      	adds	r7, #32
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	00100002 	.word	0x00100002
 8004550:	ffff0000 	.word	0xffff0000

08004554 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af02      	add	r7, sp, #8
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	607a      	str	r2, [r7, #4]
 800455e:	603b      	str	r3, [r7, #0]
 8004560:	460b      	mov	r3, r1
 8004562:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004568:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2b08      	cmp	r3, #8
 800456e:	d006      	beq.n	800457e <I2C_MasterRequestWrite+0x2a>
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d003      	beq.n	800457e <I2C_MasterRequestWrite+0x2a>
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800457c:	d108      	bne.n	8004590 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	e00b      	b.n	80045a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004594:	2b12      	cmp	r3, #18
 8004596:	d107      	bne.n	80045a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	9300      	str	r3, [sp, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 f84f 	bl	8004658 <I2C_WaitOnFlagUntilTimeout>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00d      	beq.n	80045dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ce:	d103      	bne.n	80045d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e035      	b.n	8004648 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045e4:	d108      	bne.n	80045f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045e6:	897b      	ldrh	r3, [r7, #10]
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	461a      	mov	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045f4:	611a      	str	r2, [r3, #16]
 80045f6:	e01b      	b.n	8004630 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045f8:	897b      	ldrh	r3, [r7, #10]
 80045fa:	11db      	asrs	r3, r3, #7
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	f003 0306 	and.w	r3, r3, #6
 8004602:	b2db      	uxtb	r3, r3
 8004604:	f063 030f 	orn	r3, r3, #15
 8004608:	b2da      	uxtb	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	490e      	ldr	r1, [pc, #56]	; (8004650 <I2C_MasterRequestWrite+0xfc>)
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 f875 	bl	8004706 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e010      	b.n	8004648 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004626:	897b      	ldrh	r3, [r7, #10]
 8004628:	b2da      	uxtb	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	4907      	ldr	r1, [pc, #28]	; (8004654 <I2C_MasterRequestWrite+0x100>)
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 f865 	bl	8004706 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3718      	adds	r7, #24
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	00010008 	.word	0x00010008
 8004654:	00010002 	.word	0x00010002

08004658 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	603b      	str	r3, [r7, #0]
 8004664:	4613      	mov	r3, r2
 8004666:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004668:	e025      	b.n	80046b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004670:	d021      	beq.n	80046b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004672:	f7fe fc31 	bl	8002ed8 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	429a      	cmp	r2, r3
 8004680:	d302      	bcc.n	8004688 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d116      	bne.n	80046b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2220      	movs	r2, #32
 8004692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	f043 0220 	orr.w	r2, r3, #32
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e023      	b.n	80046fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	0c1b      	lsrs	r3, r3, #16
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d10d      	bne.n	80046dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	43da      	mvns	r2, r3
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	4013      	ands	r3, r2
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	bf0c      	ite	eq
 80046d2:	2301      	moveq	r3, #1
 80046d4:	2300      	movne	r3, #0
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	461a      	mov	r2, r3
 80046da:	e00c      	b.n	80046f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	43da      	mvns	r2, r3
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	4013      	ands	r3, r2
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	bf0c      	ite	eq
 80046ee:	2301      	moveq	r3, #1
 80046f0:	2300      	movne	r3, #0
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	461a      	mov	r2, r3
 80046f6:	79fb      	ldrb	r3, [r7, #7]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d0b6      	beq.n	800466a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b084      	sub	sp, #16
 800470a:	af00      	add	r7, sp, #0
 800470c:	60f8      	str	r0, [r7, #12]
 800470e:	60b9      	str	r1, [r7, #8]
 8004710:	607a      	str	r2, [r7, #4]
 8004712:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004714:	e051      	b.n	80047ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004724:	d123      	bne.n	800476e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004734:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800473e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2220      	movs	r2, #32
 800474a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	f043 0204 	orr.w	r2, r3, #4
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e046      	b.n	80047fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004774:	d021      	beq.n	80047ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004776:	f7fe fbaf 	bl	8002ed8 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	429a      	cmp	r2, r3
 8004784:	d302      	bcc.n	800478c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d116      	bne.n	80047ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2220      	movs	r2, #32
 8004796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	f043 0220 	orr.w	r2, r3, #32
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e020      	b.n	80047fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	0c1b      	lsrs	r3, r3, #16
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d10c      	bne.n	80047de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	43da      	mvns	r2, r3
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	4013      	ands	r3, r2
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	bf14      	ite	ne
 80047d6:	2301      	movne	r3, #1
 80047d8:	2300      	moveq	r3, #0
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	e00b      	b.n	80047f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	43da      	mvns	r2, r3
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	4013      	ands	r3, r2
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	bf14      	ite	ne
 80047f0:	2301      	movne	r3, #1
 80047f2:	2300      	moveq	r3, #0
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d18d      	bne.n	8004716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004810:	e02d      	b.n	800486e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 f878 	bl	8004908 <I2C_IsAcknowledgeFailed>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e02d      	b.n	800487e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004828:	d021      	beq.n	800486e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800482a:	f7fe fb55 	bl	8002ed8 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	429a      	cmp	r2, r3
 8004838:	d302      	bcc.n	8004840 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d116      	bne.n	800486e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2220      	movs	r2, #32
 800484a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	f043 0220 	orr.w	r2, r3, #32
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e007      	b.n	800487e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004878:	2b80      	cmp	r3, #128	; 0x80
 800487a:	d1ca      	bne.n	8004812 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b084      	sub	sp, #16
 800488a:	af00      	add	r7, sp, #0
 800488c:	60f8      	str	r0, [r7, #12]
 800488e:	60b9      	str	r1, [r7, #8]
 8004890:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004892:	e02d      	b.n	80048f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f000 f837 	bl	8004908 <I2C_IsAcknowledgeFailed>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d001      	beq.n	80048a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e02d      	b.n	8004900 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048aa:	d021      	beq.n	80048f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ac:	f7fe fb14 	bl	8002ed8 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d302      	bcc.n	80048c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d116      	bne.n	80048f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048dc:	f043 0220 	orr.w	r2, r3, #32
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e007      	b.n	8004900 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	f003 0304 	and.w	r3, r3, #4
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d1ca      	bne.n	8004894 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800491a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800491e:	d11b      	bne.n	8004958 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004928:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2220      	movs	r2, #32
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004944:	f043 0204 	orr.w	r2, r3, #4
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e000      	b.n	800495a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
	...

08004968 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e264      	b.n	8004e44 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d075      	beq.n	8004a72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004986:	4ba3      	ldr	r3, [pc, #652]	; (8004c14 <HAL_RCC_OscConfig+0x2ac>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 030c 	and.w	r3, r3, #12
 800498e:	2b04      	cmp	r3, #4
 8004990:	d00c      	beq.n	80049ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004992:	4ba0      	ldr	r3, [pc, #640]	; (8004c14 <HAL_RCC_OscConfig+0x2ac>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800499a:	2b08      	cmp	r3, #8
 800499c:	d112      	bne.n	80049c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800499e:	4b9d      	ldr	r3, [pc, #628]	; (8004c14 <HAL_RCC_OscConfig+0x2ac>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049aa:	d10b      	bne.n	80049c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049ac:	4b99      	ldr	r3, [pc, #612]	; (8004c14 <HAL_RCC_OscConfig+0x2ac>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d05b      	beq.n	8004a70 <HAL_RCC_OscConfig+0x108>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d157      	bne.n	8004a70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e23f      	b.n	8004e44 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049cc:	d106      	bne.n	80049dc <HAL_RCC_OscConfig+0x74>
 80049ce:	4b91      	ldr	r3, [pc, #580]	; (8004c14 <HAL_RCC_OscConfig+0x2ac>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a90      	ldr	r2, [pc, #576]	; (8004c14 <HAL_RCC_OscConfig+0x2ac>)
 80049d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049d8:	6013      	str	r3, [r2, #0]
 80049da:	e01d      	b.n	8004a18 <HAL_RCC_OscConfig+0xb0>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049e4:	d10c      	bne.n	8004a00 <HAL_RCC_OscConfig+0x98>
 80049e6:	4b8b      	ldr	r3, [pc, #556]	; (8004c14 <HAL_RCC_OscConfig+0x2ac>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a8a      	ldr	r2, [pc, #552]	; (8004c14 <HAL_RCC_OscConfig+0x2ac>)
 80049ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	4b88      	ldr	r3, [pc, #544]	; (8004c14 <HAL_RCC_OscConfig+0x2ac>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a87      	ldr	r2, [pc, #540]	; (8004c14 <HAL_RCC_OscConfig+0x2ac>)
 80049f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	e00b      	b.n	8004a18 <HAL_RCC_OscConfig+0xb0>
 8004a00:	4b84      	ldr	r3, [pc, #528]	; (8004c14 <HAL_RCC_OscConfig+0x2ac>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a83      	ldr	r2, [pc, #524]	; (8004c14 <HAL_RCC_OscConfig+0x2ac>)
 8004a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a0a:	6013      	str	r3, [r2, #0]
 8004a0c:	4b81      	ldr	r3, [pc, #516]	; (8004c14 <HAL_RCC_OscConfig+0x2ac>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a80      	ldr	r2, [pc, #512]	; (8004c14 <HAL_RCC_OscConfig+0x2ac>)
 8004a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d013      	beq.n	8004a48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a20:	f7fe fa5a 	bl	8002ed8 <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a28:	f7fe fa56 	bl	8002ed8 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b64      	cmp	r3, #100	; 0x64
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e204      	b.n	8004e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a3a:	4b76      	ldr	r3, [pc, #472]	; (8004c14 <HAL_RCC_OscConfig+0x2ac>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d0f0      	beq.n	8004a28 <HAL_RCC_OscConfig+0xc0>
 8004a46:	e014      	b.n	8004a72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a48:	f7fe fa46 	bl	8002ed8 <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a50:	f7fe fa42 	bl	8002ed8 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b64      	cmp	r3, #100	; 0x64
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e1f0      	b.n	8004e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a62:	4b6c      	ldr	r3, [pc, #432]	; (8004c14 <HAL_RCC_OscConfig+0x2ac>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1f0      	bne.n	8004a50 <HAL_RCC_OscConfig+0xe8>
 8004a6e:	e000      	b.n	8004a72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d063      	beq.n	8004b46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a7e:	4b65      	ldr	r3, [pc, #404]	; (8004c14 <HAL_RCC_OscConfig+0x2ac>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f003 030c 	and.w	r3, r3, #12
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00b      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a8a:	4b62      	ldr	r3, [pc, #392]	; (8004c14 <HAL_RCC_OscConfig+0x2ac>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a92:	2b08      	cmp	r3, #8
 8004a94:	d11c      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a96:	4b5f      	ldr	r3, [pc, #380]	; (8004c14 <HAL_RCC_OscConfig+0x2ac>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d116      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aa2:	4b5c      	ldr	r3, [pc, #368]	; (8004c14 <HAL_RCC_OscConfig+0x2ac>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d005      	beq.n	8004aba <HAL_RCC_OscConfig+0x152>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d001      	beq.n	8004aba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e1c4      	b.n	8004e44 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aba:	4b56      	ldr	r3, [pc, #344]	; (8004c14 <HAL_RCC_OscConfig+0x2ac>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	4952      	ldr	r1, [pc, #328]	; (8004c14 <HAL_RCC_OscConfig+0x2ac>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ace:	e03a      	b.n	8004b46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d020      	beq.n	8004b1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ad8:	4b4f      	ldr	r3, [pc, #316]	; (8004c18 <HAL_RCC_OscConfig+0x2b0>)
 8004ada:	2201      	movs	r2, #1
 8004adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ade:	f7fe f9fb 	bl	8002ed8 <HAL_GetTick>
 8004ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ae4:	e008      	b.n	8004af8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ae6:	f7fe f9f7 	bl	8002ed8 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e1a5      	b.n	8004e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004af8:	4b46      	ldr	r3, [pc, #280]	; (8004c14 <HAL_RCC_OscConfig+0x2ac>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d0f0      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b04:	4b43      	ldr	r3, [pc, #268]	; (8004c14 <HAL_RCC_OscConfig+0x2ac>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	00db      	lsls	r3, r3, #3
 8004b12:	4940      	ldr	r1, [pc, #256]	; (8004c14 <HAL_RCC_OscConfig+0x2ac>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	600b      	str	r3, [r1, #0]
 8004b18:	e015      	b.n	8004b46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b1a:	4b3f      	ldr	r3, [pc, #252]	; (8004c18 <HAL_RCC_OscConfig+0x2b0>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b20:	f7fe f9da 	bl	8002ed8 <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b28:	f7fe f9d6 	bl	8002ed8 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e184      	b.n	8004e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b3a:	4b36      	ldr	r3, [pc, #216]	; (8004c14 <HAL_RCC_OscConfig+0x2ac>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1f0      	bne.n	8004b28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0308 	and.w	r3, r3, #8
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d030      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d016      	beq.n	8004b88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b5a:	4b30      	ldr	r3, [pc, #192]	; (8004c1c <HAL_RCC_OscConfig+0x2b4>)
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b60:	f7fe f9ba 	bl	8002ed8 <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b68:	f7fe f9b6 	bl	8002ed8 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e164      	b.n	8004e44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b7a:	4b26      	ldr	r3, [pc, #152]	; (8004c14 <HAL_RCC_OscConfig+0x2ac>)
 8004b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d0f0      	beq.n	8004b68 <HAL_RCC_OscConfig+0x200>
 8004b86:	e015      	b.n	8004bb4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b88:	4b24      	ldr	r3, [pc, #144]	; (8004c1c <HAL_RCC_OscConfig+0x2b4>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b8e:	f7fe f9a3 	bl	8002ed8 <HAL_GetTick>
 8004b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b94:	e008      	b.n	8004ba8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b96:	f7fe f99f 	bl	8002ed8 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e14d      	b.n	8004e44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ba8:	4b1a      	ldr	r3, [pc, #104]	; (8004c14 <HAL_RCC_OscConfig+0x2ac>)
 8004baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1f0      	bne.n	8004b96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 80a0 	beq.w	8004d02 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bc6:	4b13      	ldr	r3, [pc, #76]	; (8004c14 <HAL_RCC_OscConfig+0x2ac>)
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10f      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	60bb      	str	r3, [r7, #8]
 8004bd6:	4b0f      	ldr	r3, [pc, #60]	; (8004c14 <HAL_RCC_OscConfig+0x2ac>)
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	4a0e      	ldr	r2, [pc, #56]	; (8004c14 <HAL_RCC_OscConfig+0x2ac>)
 8004bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004be0:	6413      	str	r3, [r2, #64]	; 0x40
 8004be2:	4b0c      	ldr	r3, [pc, #48]	; (8004c14 <HAL_RCC_OscConfig+0x2ac>)
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bea:	60bb      	str	r3, [r7, #8]
 8004bec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bf2:	4b0b      	ldr	r3, [pc, #44]	; (8004c20 <HAL_RCC_OscConfig+0x2b8>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d121      	bne.n	8004c42 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bfe:	4b08      	ldr	r3, [pc, #32]	; (8004c20 <HAL_RCC_OscConfig+0x2b8>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a07      	ldr	r2, [pc, #28]	; (8004c20 <HAL_RCC_OscConfig+0x2b8>)
 8004c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c0a:	f7fe f965 	bl	8002ed8 <HAL_GetTick>
 8004c0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c10:	e011      	b.n	8004c36 <HAL_RCC_OscConfig+0x2ce>
 8004c12:	bf00      	nop
 8004c14:	40023800 	.word	0x40023800
 8004c18:	42470000 	.word	0x42470000
 8004c1c:	42470e80 	.word	0x42470e80
 8004c20:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c24:	f7fe f958 	bl	8002ed8 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e106      	b.n	8004e44 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c36:	4b85      	ldr	r3, [pc, #532]	; (8004e4c <HAL_RCC_OscConfig+0x4e4>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0f0      	beq.n	8004c24 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d106      	bne.n	8004c58 <HAL_RCC_OscConfig+0x2f0>
 8004c4a:	4b81      	ldr	r3, [pc, #516]	; (8004e50 <HAL_RCC_OscConfig+0x4e8>)
 8004c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4e:	4a80      	ldr	r2, [pc, #512]	; (8004e50 <HAL_RCC_OscConfig+0x4e8>)
 8004c50:	f043 0301 	orr.w	r3, r3, #1
 8004c54:	6713      	str	r3, [r2, #112]	; 0x70
 8004c56:	e01c      	b.n	8004c92 <HAL_RCC_OscConfig+0x32a>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	2b05      	cmp	r3, #5
 8004c5e:	d10c      	bne.n	8004c7a <HAL_RCC_OscConfig+0x312>
 8004c60:	4b7b      	ldr	r3, [pc, #492]	; (8004e50 <HAL_RCC_OscConfig+0x4e8>)
 8004c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c64:	4a7a      	ldr	r2, [pc, #488]	; (8004e50 <HAL_RCC_OscConfig+0x4e8>)
 8004c66:	f043 0304 	orr.w	r3, r3, #4
 8004c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c6c:	4b78      	ldr	r3, [pc, #480]	; (8004e50 <HAL_RCC_OscConfig+0x4e8>)
 8004c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c70:	4a77      	ldr	r2, [pc, #476]	; (8004e50 <HAL_RCC_OscConfig+0x4e8>)
 8004c72:	f043 0301 	orr.w	r3, r3, #1
 8004c76:	6713      	str	r3, [r2, #112]	; 0x70
 8004c78:	e00b      	b.n	8004c92 <HAL_RCC_OscConfig+0x32a>
 8004c7a:	4b75      	ldr	r3, [pc, #468]	; (8004e50 <HAL_RCC_OscConfig+0x4e8>)
 8004c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7e:	4a74      	ldr	r2, [pc, #464]	; (8004e50 <HAL_RCC_OscConfig+0x4e8>)
 8004c80:	f023 0301 	bic.w	r3, r3, #1
 8004c84:	6713      	str	r3, [r2, #112]	; 0x70
 8004c86:	4b72      	ldr	r3, [pc, #456]	; (8004e50 <HAL_RCC_OscConfig+0x4e8>)
 8004c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8a:	4a71      	ldr	r2, [pc, #452]	; (8004e50 <HAL_RCC_OscConfig+0x4e8>)
 8004c8c:	f023 0304 	bic.w	r3, r3, #4
 8004c90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d015      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c9a:	f7fe f91d 	bl	8002ed8 <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca0:	e00a      	b.n	8004cb8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ca2:	f7fe f919 	bl	8002ed8 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e0c5      	b.n	8004e44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cb8:	4b65      	ldr	r3, [pc, #404]	; (8004e50 <HAL_RCC_OscConfig+0x4e8>)
 8004cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0ee      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x33a>
 8004cc4:	e014      	b.n	8004cf0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cc6:	f7fe f907 	bl	8002ed8 <HAL_GetTick>
 8004cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ccc:	e00a      	b.n	8004ce4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cce:	f7fe f903 	bl	8002ed8 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e0af      	b.n	8004e44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ce4:	4b5a      	ldr	r3, [pc, #360]	; (8004e50 <HAL_RCC_OscConfig+0x4e8>)
 8004ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1ee      	bne.n	8004cce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cf0:	7dfb      	ldrb	r3, [r7, #23]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d105      	bne.n	8004d02 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cf6:	4b56      	ldr	r3, [pc, #344]	; (8004e50 <HAL_RCC_OscConfig+0x4e8>)
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	4a55      	ldr	r2, [pc, #340]	; (8004e50 <HAL_RCC_OscConfig+0x4e8>)
 8004cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 809b 	beq.w	8004e42 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d0c:	4b50      	ldr	r3, [pc, #320]	; (8004e50 <HAL_RCC_OscConfig+0x4e8>)
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f003 030c 	and.w	r3, r3, #12
 8004d14:	2b08      	cmp	r3, #8
 8004d16:	d05c      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d141      	bne.n	8004da4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d20:	4b4c      	ldr	r3, [pc, #304]	; (8004e54 <HAL_RCC_OscConfig+0x4ec>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d26:	f7fe f8d7 	bl	8002ed8 <HAL_GetTick>
 8004d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d2c:	e008      	b.n	8004d40 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d2e:	f7fe f8d3 	bl	8002ed8 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e081      	b.n	8004e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d40:	4b43      	ldr	r3, [pc, #268]	; (8004e50 <HAL_RCC_OscConfig+0x4e8>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1f0      	bne.n	8004d2e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	69da      	ldr	r2, [r3, #28]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	431a      	orrs	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	019b      	lsls	r3, r3, #6
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d62:	085b      	lsrs	r3, r3, #1
 8004d64:	3b01      	subs	r3, #1
 8004d66:	041b      	lsls	r3, r3, #16
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6e:	061b      	lsls	r3, r3, #24
 8004d70:	4937      	ldr	r1, [pc, #220]	; (8004e50 <HAL_RCC_OscConfig+0x4e8>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d76:	4b37      	ldr	r3, [pc, #220]	; (8004e54 <HAL_RCC_OscConfig+0x4ec>)
 8004d78:	2201      	movs	r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d7c:	f7fe f8ac 	bl	8002ed8 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d84:	f7fe f8a8 	bl	8002ed8 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e056      	b.n	8004e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d96:	4b2e      	ldr	r3, [pc, #184]	; (8004e50 <HAL_RCC_OscConfig+0x4e8>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0f0      	beq.n	8004d84 <HAL_RCC_OscConfig+0x41c>
 8004da2:	e04e      	b.n	8004e42 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004da4:	4b2b      	ldr	r3, [pc, #172]	; (8004e54 <HAL_RCC_OscConfig+0x4ec>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004daa:	f7fe f895 	bl	8002ed8 <HAL_GetTick>
 8004dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004db0:	e008      	b.n	8004dc4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004db2:	f7fe f891 	bl	8002ed8 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e03f      	b.n	8004e44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dc4:	4b22      	ldr	r3, [pc, #136]	; (8004e50 <HAL_RCC_OscConfig+0x4e8>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1f0      	bne.n	8004db2 <HAL_RCC_OscConfig+0x44a>
 8004dd0:	e037      	b.n	8004e42 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d101      	bne.n	8004dde <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e032      	b.n	8004e44 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004dde:	4b1c      	ldr	r3, [pc, #112]	; (8004e50 <HAL_RCC_OscConfig+0x4e8>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d028      	beq.n	8004e3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d121      	bne.n	8004e3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d11a      	bne.n	8004e3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e0e:	4013      	ands	r3, r2
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e14:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d111      	bne.n	8004e3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e24:	085b      	lsrs	r3, r3, #1
 8004e26:	3b01      	subs	r3, #1
 8004e28:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d107      	bne.n	8004e3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e38:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d001      	beq.n	8004e42 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e000      	b.n	8004e44 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3718      	adds	r7, #24
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40007000 	.word	0x40007000
 8004e50:	40023800 	.word	0x40023800
 8004e54:	42470060 	.word	0x42470060

08004e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d101      	bne.n	8004e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e0cc      	b.n	8005006 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e6c:	4b68      	ldr	r3, [pc, #416]	; (8005010 <HAL_RCC_ClockConfig+0x1b8>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d90c      	bls.n	8004e94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e7a:	4b65      	ldr	r3, [pc, #404]	; (8005010 <HAL_RCC_ClockConfig+0x1b8>)
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e82:	4b63      	ldr	r3, [pc, #396]	; (8005010 <HAL_RCC_ClockConfig+0x1b8>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0307 	and.w	r3, r3, #7
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d001      	beq.n	8004e94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e0b8      	b.n	8005006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d020      	beq.n	8004ee2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d005      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004eac:	4b59      	ldr	r3, [pc, #356]	; (8005014 <HAL_RCC_ClockConfig+0x1bc>)
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	4a58      	ldr	r2, [pc, #352]	; (8005014 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004eb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d005      	beq.n	8004ed0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ec4:	4b53      	ldr	r3, [pc, #332]	; (8005014 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	4a52      	ldr	r2, [pc, #328]	; (8005014 <HAL_RCC_ClockConfig+0x1bc>)
 8004eca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ece:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ed0:	4b50      	ldr	r3, [pc, #320]	; (8005014 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	494d      	ldr	r1, [pc, #308]	; (8005014 <HAL_RCC_ClockConfig+0x1bc>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d044      	beq.n	8004f78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d107      	bne.n	8004f06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ef6:	4b47      	ldr	r3, [pc, #284]	; (8005014 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d119      	bne.n	8004f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e07f      	b.n	8005006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d003      	beq.n	8004f16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f12:	2b03      	cmp	r3, #3
 8004f14:	d107      	bne.n	8004f26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f16:	4b3f      	ldr	r3, [pc, #252]	; (8005014 <HAL_RCC_ClockConfig+0x1bc>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d109      	bne.n	8004f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e06f      	b.n	8005006 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f26:	4b3b      	ldr	r3, [pc, #236]	; (8005014 <HAL_RCC_ClockConfig+0x1bc>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e067      	b.n	8005006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f36:	4b37      	ldr	r3, [pc, #220]	; (8005014 <HAL_RCC_ClockConfig+0x1bc>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f023 0203 	bic.w	r2, r3, #3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	4934      	ldr	r1, [pc, #208]	; (8005014 <HAL_RCC_ClockConfig+0x1bc>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f48:	f7fd ffc6 	bl	8002ed8 <HAL_GetTick>
 8004f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f4e:	e00a      	b.n	8004f66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f50:	f7fd ffc2 	bl	8002ed8 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e04f      	b.n	8005006 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f66:	4b2b      	ldr	r3, [pc, #172]	; (8005014 <HAL_RCC_ClockConfig+0x1bc>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f003 020c 	and.w	r2, r3, #12
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d1eb      	bne.n	8004f50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f78:	4b25      	ldr	r3, [pc, #148]	; (8005010 <HAL_RCC_ClockConfig+0x1b8>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d20c      	bcs.n	8004fa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f86:	4b22      	ldr	r3, [pc, #136]	; (8005010 <HAL_RCC_ClockConfig+0x1b8>)
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	b2d2      	uxtb	r2, r2
 8004f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f8e:	4b20      	ldr	r3, [pc, #128]	; (8005010 <HAL_RCC_ClockConfig+0x1b8>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d001      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e032      	b.n	8005006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0304 	and.w	r3, r3, #4
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d008      	beq.n	8004fbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fac:	4b19      	ldr	r3, [pc, #100]	; (8005014 <HAL_RCC_ClockConfig+0x1bc>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	4916      	ldr	r1, [pc, #88]	; (8005014 <HAL_RCC_ClockConfig+0x1bc>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0308 	and.w	r3, r3, #8
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d009      	beq.n	8004fde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fca:	4b12      	ldr	r3, [pc, #72]	; (8005014 <HAL_RCC_ClockConfig+0x1bc>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	490e      	ldr	r1, [pc, #56]	; (8005014 <HAL_RCC_ClockConfig+0x1bc>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004fde:	f000 f821 	bl	8005024 <HAL_RCC_GetSysClockFreq>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	4b0b      	ldr	r3, [pc, #44]	; (8005014 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	091b      	lsrs	r3, r3, #4
 8004fea:	f003 030f 	and.w	r3, r3, #15
 8004fee:	490a      	ldr	r1, [pc, #40]	; (8005018 <HAL_RCC_ClockConfig+0x1c0>)
 8004ff0:	5ccb      	ldrb	r3, [r1, r3]
 8004ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff6:	4a09      	ldr	r2, [pc, #36]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ffa:	4b09      	ldr	r3, [pc, #36]	; (8005020 <HAL_RCC_ClockConfig+0x1c8>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fd fd26 	bl	8002a50 <HAL_InitTick>

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	40023c00 	.word	0x40023c00
 8005014:	40023800 	.word	0x40023800
 8005018:	08013798 	.word	0x08013798
 800501c:	20000010 	.word	0x20000010
 8005020:	20000014 	.word	0x20000014

08005024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005024:	b5b0      	push	{r4, r5, r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800502a:	2100      	movs	r1, #0
 800502c:	6079      	str	r1, [r7, #4]
 800502e:	2100      	movs	r1, #0
 8005030:	60f9      	str	r1, [r7, #12]
 8005032:	2100      	movs	r1, #0
 8005034:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005036:	2100      	movs	r1, #0
 8005038:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800503a:	4952      	ldr	r1, [pc, #328]	; (8005184 <HAL_RCC_GetSysClockFreq+0x160>)
 800503c:	6889      	ldr	r1, [r1, #8]
 800503e:	f001 010c 	and.w	r1, r1, #12
 8005042:	2908      	cmp	r1, #8
 8005044:	d00d      	beq.n	8005062 <HAL_RCC_GetSysClockFreq+0x3e>
 8005046:	2908      	cmp	r1, #8
 8005048:	f200 8094 	bhi.w	8005174 <HAL_RCC_GetSysClockFreq+0x150>
 800504c:	2900      	cmp	r1, #0
 800504e:	d002      	beq.n	8005056 <HAL_RCC_GetSysClockFreq+0x32>
 8005050:	2904      	cmp	r1, #4
 8005052:	d003      	beq.n	800505c <HAL_RCC_GetSysClockFreq+0x38>
 8005054:	e08e      	b.n	8005174 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005056:	4b4c      	ldr	r3, [pc, #304]	; (8005188 <HAL_RCC_GetSysClockFreq+0x164>)
 8005058:	60bb      	str	r3, [r7, #8]
       break;
 800505a:	e08e      	b.n	800517a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800505c:	4b4b      	ldr	r3, [pc, #300]	; (800518c <HAL_RCC_GetSysClockFreq+0x168>)
 800505e:	60bb      	str	r3, [r7, #8]
      break;
 8005060:	e08b      	b.n	800517a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005062:	4948      	ldr	r1, [pc, #288]	; (8005184 <HAL_RCC_GetSysClockFreq+0x160>)
 8005064:	6849      	ldr	r1, [r1, #4]
 8005066:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800506a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800506c:	4945      	ldr	r1, [pc, #276]	; (8005184 <HAL_RCC_GetSysClockFreq+0x160>)
 800506e:	6849      	ldr	r1, [r1, #4]
 8005070:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005074:	2900      	cmp	r1, #0
 8005076:	d024      	beq.n	80050c2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005078:	4942      	ldr	r1, [pc, #264]	; (8005184 <HAL_RCC_GetSysClockFreq+0x160>)
 800507a:	6849      	ldr	r1, [r1, #4]
 800507c:	0989      	lsrs	r1, r1, #6
 800507e:	4608      	mov	r0, r1
 8005080:	f04f 0100 	mov.w	r1, #0
 8005084:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005088:	f04f 0500 	mov.w	r5, #0
 800508c:	ea00 0204 	and.w	r2, r0, r4
 8005090:	ea01 0305 	and.w	r3, r1, r5
 8005094:	493d      	ldr	r1, [pc, #244]	; (800518c <HAL_RCC_GetSysClockFreq+0x168>)
 8005096:	fb01 f003 	mul.w	r0, r1, r3
 800509a:	2100      	movs	r1, #0
 800509c:	fb01 f102 	mul.w	r1, r1, r2
 80050a0:	1844      	adds	r4, r0, r1
 80050a2:	493a      	ldr	r1, [pc, #232]	; (800518c <HAL_RCC_GetSysClockFreq+0x168>)
 80050a4:	fba2 0101 	umull	r0, r1, r2, r1
 80050a8:	1863      	adds	r3, r4, r1
 80050aa:	4619      	mov	r1, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	461a      	mov	r2, r3
 80050b0:	f04f 0300 	mov.w	r3, #0
 80050b4:	f7fb fdf0 	bl	8000c98 <__aeabi_uldivmod>
 80050b8:	4602      	mov	r2, r0
 80050ba:	460b      	mov	r3, r1
 80050bc:	4613      	mov	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]
 80050c0:	e04a      	b.n	8005158 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050c2:	4b30      	ldr	r3, [pc, #192]	; (8005184 <HAL_RCC_GetSysClockFreq+0x160>)
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	099b      	lsrs	r3, r3, #6
 80050c8:	461a      	mov	r2, r3
 80050ca:	f04f 0300 	mov.w	r3, #0
 80050ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80050d2:	f04f 0100 	mov.w	r1, #0
 80050d6:	ea02 0400 	and.w	r4, r2, r0
 80050da:	ea03 0501 	and.w	r5, r3, r1
 80050de:	4620      	mov	r0, r4
 80050e0:	4629      	mov	r1, r5
 80050e2:	f04f 0200 	mov.w	r2, #0
 80050e6:	f04f 0300 	mov.w	r3, #0
 80050ea:	014b      	lsls	r3, r1, #5
 80050ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80050f0:	0142      	lsls	r2, r0, #5
 80050f2:	4610      	mov	r0, r2
 80050f4:	4619      	mov	r1, r3
 80050f6:	1b00      	subs	r0, r0, r4
 80050f8:	eb61 0105 	sbc.w	r1, r1, r5
 80050fc:	f04f 0200 	mov.w	r2, #0
 8005100:	f04f 0300 	mov.w	r3, #0
 8005104:	018b      	lsls	r3, r1, #6
 8005106:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800510a:	0182      	lsls	r2, r0, #6
 800510c:	1a12      	subs	r2, r2, r0
 800510e:	eb63 0301 	sbc.w	r3, r3, r1
 8005112:	f04f 0000 	mov.w	r0, #0
 8005116:	f04f 0100 	mov.w	r1, #0
 800511a:	00d9      	lsls	r1, r3, #3
 800511c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005120:	00d0      	lsls	r0, r2, #3
 8005122:	4602      	mov	r2, r0
 8005124:	460b      	mov	r3, r1
 8005126:	1912      	adds	r2, r2, r4
 8005128:	eb45 0303 	adc.w	r3, r5, r3
 800512c:	f04f 0000 	mov.w	r0, #0
 8005130:	f04f 0100 	mov.w	r1, #0
 8005134:	0299      	lsls	r1, r3, #10
 8005136:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800513a:	0290      	lsls	r0, r2, #10
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	4610      	mov	r0, r2
 8005142:	4619      	mov	r1, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	461a      	mov	r2, r3
 8005148:	f04f 0300 	mov.w	r3, #0
 800514c:	f7fb fda4 	bl	8000c98 <__aeabi_uldivmod>
 8005150:	4602      	mov	r2, r0
 8005152:	460b      	mov	r3, r1
 8005154:	4613      	mov	r3, r2
 8005156:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005158:	4b0a      	ldr	r3, [pc, #40]	; (8005184 <HAL_RCC_GetSysClockFreq+0x160>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	0c1b      	lsrs	r3, r3, #16
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	3301      	adds	r3, #1
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005170:	60bb      	str	r3, [r7, #8]
      break;
 8005172:	e002      	b.n	800517a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005174:	4b04      	ldr	r3, [pc, #16]	; (8005188 <HAL_RCC_GetSysClockFreq+0x164>)
 8005176:	60bb      	str	r3, [r7, #8]
      break;
 8005178:	bf00      	nop
    }
  }
  return sysclockfreq;
 800517a:	68bb      	ldr	r3, [r7, #8]
}
 800517c:	4618      	mov	r0, r3
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bdb0      	pop	{r4, r5, r7, pc}
 8005184:	40023800 	.word	0x40023800
 8005188:	00f42400 	.word	0x00f42400
 800518c:	017d7840 	.word	0x017d7840

08005190 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005190:	b480      	push	{r7}
 8005192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005194:	4b03      	ldr	r3, [pc, #12]	; (80051a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005196:	681b      	ldr	r3, [r3, #0]
}
 8005198:	4618      	mov	r0, r3
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	20000010 	.word	0x20000010

080051a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051ac:	f7ff fff0 	bl	8005190 <HAL_RCC_GetHCLKFreq>
 80051b0:	4602      	mov	r2, r0
 80051b2:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	0a9b      	lsrs	r3, r3, #10
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	4903      	ldr	r1, [pc, #12]	; (80051cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80051be:	5ccb      	ldrb	r3, [r1, r3]
 80051c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40023800 	.word	0x40023800
 80051cc:	080137a8 	.word	0x080137a8

080051d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80051d4:	f7ff ffdc 	bl	8005190 <HAL_RCC_GetHCLKFreq>
 80051d8:	4602      	mov	r2, r0
 80051da:	4b05      	ldr	r3, [pc, #20]	; (80051f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	0b5b      	lsrs	r3, r3, #13
 80051e0:	f003 0307 	and.w	r3, r3, #7
 80051e4:	4903      	ldr	r1, [pc, #12]	; (80051f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051e6:	5ccb      	ldrb	r3, [r1, r3]
 80051e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	40023800 	.word	0x40023800
 80051f4:	080137a8 	.word	0x080137a8

080051f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	220f      	movs	r2, #15
 8005206:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005208:	4b12      	ldr	r3, [pc, #72]	; (8005254 <HAL_RCC_GetClockConfig+0x5c>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f003 0203 	and.w	r2, r3, #3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005214:	4b0f      	ldr	r3, [pc, #60]	; (8005254 <HAL_RCC_GetClockConfig+0x5c>)
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005220:	4b0c      	ldr	r3, [pc, #48]	; (8005254 <HAL_RCC_GetClockConfig+0x5c>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800522c:	4b09      	ldr	r3, [pc, #36]	; (8005254 <HAL_RCC_GetClockConfig+0x5c>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	08db      	lsrs	r3, r3, #3
 8005232:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800523a:	4b07      	ldr	r3, [pc, #28]	; (8005258 <HAL_RCC_GetClockConfig+0x60>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0207 	and.w	r2, r3, #7
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	601a      	str	r2, [r3, #0]
}
 8005246:	bf00      	nop
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	40023800 	.word	0x40023800
 8005258:	40023c00 	.word	0x40023c00

0800525c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e07b      	b.n	8005366 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	2b00      	cmp	r3, #0
 8005274:	d108      	bne.n	8005288 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800527e:	d009      	beq.n	8005294 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	61da      	str	r2, [r3, #28]
 8005286:	e005      	b.n	8005294 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d106      	bne.n	80052b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7fd f8b0 	bl	8002414 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80052dc:	431a      	orrs	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052e6:	431a      	orrs	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	431a      	orrs	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	431a      	orrs	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005304:	431a      	orrs	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	69db      	ldr	r3, [r3, #28]
 800530a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005318:	ea42 0103 	orr.w	r1, r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005320:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	430a      	orrs	r2, r1
 800532a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	0c1b      	lsrs	r3, r3, #16
 8005332:	f003 0104 	and.w	r1, r3, #4
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533a:	f003 0210 	and.w	r2, r3, #16
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	69da      	ldr	r2, [r3, #28]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005354:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b08c      	sub	sp, #48	; 0x30
 8005372:	af00      	add	r7, sp, #0
 8005374:	60f8      	str	r0, [r7, #12]
 8005376:	60b9      	str	r1, [r7, #8]
 8005378:	607a      	str	r2, [r7, #4]
 800537a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800537c:	2301      	movs	r3, #1
 800537e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005380:	2300      	movs	r3, #0
 8005382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <HAL_SPI_TransmitReceive+0x26>
 8005390:	2302      	movs	r3, #2
 8005392:	e18a      	b.n	80056aa <HAL_SPI_TransmitReceive+0x33c>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800539c:	f7fd fd9c 	bl	8002ed8 <HAL_GetTick>
 80053a0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80053b2:	887b      	ldrh	r3, [r7, #2]
 80053b4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80053b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d00f      	beq.n	80053de <HAL_SPI_TransmitReceive+0x70>
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053c4:	d107      	bne.n	80053d6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d103      	bne.n	80053d6 <HAL_SPI_TransmitReceive+0x68>
 80053ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053d2:	2b04      	cmp	r3, #4
 80053d4:	d003      	beq.n	80053de <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80053d6:	2302      	movs	r3, #2
 80053d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80053dc:	e15b      	b.n	8005696 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d005      	beq.n	80053f0 <HAL_SPI_TransmitReceive+0x82>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d002      	beq.n	80053f0 <HAL_SPI_TransmitReceive+0x82>
 80053ea:	887b      	ldrh	r3, [r7, #2]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d103      	bne.n	80053f8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80053f6:	e14e      	b.n	8005696 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b04      	cmp	r3, #4
 8005402:	d003      	beq.n	800540c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2205      	movs	r2, #5
 8005408:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	887a      	ldrh	r2, [r7, #2]
 800541c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	887a      	ldrh	r2, [r7, #2]
 8005422:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	887a      	ldrh	r2, [r7, #2]
 800542e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	887a      	ldrh	r2, [r7, #2]
 8005434:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544c:	2b40      	cmp	r3, #64	; 0x40
 800544e:	d007      	beq.n	8005460 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800545e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005468:	d178      	bne.n	800555c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d002      	beq.n	8005478 <HAL_SPI_TransmitReceive+0x10a>
 8005472:	8b7b      	ldrh	r3, [r7, #26]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d166      	bne.n	8005546 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547c:	881a      	ldrh	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005488:	1c9a      	adds	r2, r3, #2
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005492:	b29b      	uxth	r3, r3
 8005494:	3b01      	subs	r3, #1
 8005496:	b29a      	uxth	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800549c:	e053      	b.n	8005546 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d11b      	bne.n	80054e4 <HAL_SPI_TransmitReceive+0x176>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d016      	beq.n	80054e4 <HAL_SPI_TransmitReceive+0x176>
 80054b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d113      	bne.n	80054e4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c0:	881a      	ldrh	r2, [r3, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054cc:	1c9a      	adds	r2, r3, #2
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	3b01      	subs	r3, #1
 80054da:	b29a      	uxth	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d119      	bne.n	8005526 <HAL_SPI_TransmitReceive+0x1b8>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d014      	beq.n	8005526 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68da      	ldr	r2, [r3, #12]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005506:	b292      	uxth	r2, r2
 8005508:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550e:	1c9a      	adds	r2, r3, #2
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005518:	b29b      	uxth	r3, r3
 800551a:	3b01      	subs	r3, #1
 800551c:	b29a      	uxth	r2, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005522:	2301      	movs	r3, #1
 8005524:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005526:	f7fd fcd7 	bl	8002ed8 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005532:	429a      	cmp	r2, r3
 8005534:	d807      	bhi.n	8005546 <HAL_SPI_TransmitReceive+0x1d8>
 8005536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553c:	d003      	beq.n	8005546 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005544:	e0a7      	b.n	8005696 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800554a:	b29b      	uxth	r3, r3
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1a6      	bne.n	800549e <HAL_SPI_TransmitReceive+0x130>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005554:	b29b      	uxth	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1a1      	bne.n	800549e <HAL_SPI_TransmitReceive+0x130>
 800555a:	e07c      	b.n	8005656 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d002      	beq.n	800556a <HAL_SPI_TransmitReceive+0x1fc>
 8005564:	8b7b      	ldrh	r3, [r7, #26]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d16b      	bne.n	8005642 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	330c      	adds	r3, #12
 8005574:	7812      	ldrb	r2, [r2, #0]
 8005576:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557c:	1c5a      	adds	r2, r3, #1
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005586:	b29b      	uxth	r3, r3
 8005588:	3b01      	subs	r3, #1
 800558a:	b29a      	uxth	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005590:	e057      	b.n	8005642 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	2b02      	cmp	r3, #2
 800559e:	d11c      	bne.n	80055da <HAL_SPI_TransmitReceive+0x26c>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d017      	beq.n	80055da <HAL_SPI_TransmitReceive+0x26c>
 80055aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d114      	bne.n	80055da <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	330c      	adds	r3, #12
 80055ba:	7812      	ldrb	r2, [r2, #0]
 80055bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c2:	1c5a      	adds	r2, r3, #1
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	3b01      	subs	r3, #1
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055d6:	2300      	movs	r3, #0
 80055d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d119      	bne.n	800561c <HAL_SPI_TransmitReceive+0x2ae>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d014      	beq.n	800561c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68da      	ldr	r2, [r3, #12]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fc:	b2d2      	uxtb	r2, r2
 80055fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005604:	1c5a      	adds	r2, r3, #1
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800560e:	b29b      	uxth	r3, r3
 8005610:	3b01      	subs	r3, #1
 8005612:	b29a      	uxth	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005618:	2301      	movs	r3, #1
 800561a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800561c:	f7fd fc5c 	bl	8002ed8 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005628:	429a      	cmp	r2, r3
 800562a:	d803      	bhi.n	8005634 <HAL_SPI_TransmitReceive+0x2c6>
 800562c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005632:	d102      	bne.n	800563a <HAL_SPI_TransmitReceive+0x2cc>
 8005634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005636:	2b00      	cmp	r3, #0
 8005638:	d103      	bne.n	8005642 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005640:	e029      	b.n	8005696 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005646:	b29b      	uxth	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1a2      	bne.n	8005592 <HAL_SPI_TransmitReceive+0x224>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005650:	b29b      	uxth	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d19d      	bne.n	8005592 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005658:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 f8b2 	bl	80057c4 <SPI_EndRxTxTransaction>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d006      	beq.n	8005674 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2220      	movs	r2, #32
 8005670:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005672:	e010      	b.n	8005696 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10b      	bne.n	8005694 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800567c:	2300      	movs	r3, #0
 800567e:	617b      	str	r3, [r7, #20]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	617b      	str	r3, [r7, #20]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	617b      	str	r3, [r7, #20]
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	e000      	b.n	8005696 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005694:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80056a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3730      	adds	r7, #48	; 0x30
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
	...

080056b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b088      	sub	sp, #32
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	603b      	str	r3, [r7, #0]
 80056c0:	4613      	mov	r3, r2
 80056c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056c4:	f7fd fc08 	bl	8002ed8 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056cc:	1a9b      	subs	r3, r3, r2
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	4413      	add	r3, r2
 80056d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056d4:	f7fd fc00 	bl	8002ed8 <HAL_GetTick>
 80056d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056da:	4b39      	ldr	r3, [pc, #228]	; (80057c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	015b      	lsls	r3, r3, #5
 80056e0:	0d1b      	lsrs	r3, r3, #20
 80056e2:	69fa      	ldr	r2, [r7, #28]
 80056e4:	fb02 f303 	mul.w	r3, r2, r3
 80056e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056ea:	e054      	b.n	8005796 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f2:	d050      	beq.n	8005796 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056f4:	f7fd fbf0 	bl	8002ed8 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	69fa      	ldr	r2, [r7, #28]
 8005700:	429a      	cmp	r2, r3
 8005702:	d902      	bls.n	800570a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d13d      	bne.n	8005786 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005718:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005722:	d111      	bne.n	8005748 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800572c:	d004      	beq.n	8005738 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005736:	d107      	bne.n	8005748 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005746:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005750:	d10f      	bne.n	8005772 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005770:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e017      	b.n	80057b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800578c:	2300      	movs	r3, #0
 800578e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	3b01      	subs	r3, #1
 8005794:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	4013      	ands	r3, r2
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	bf0c      	ite	eq
 80057a6:	2301      	moveq	r3, #1
 80057a8:	2300      	movne	r3, #0
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	461a      	mov	r2, r3
 80057ae:	79fb      	ldrb	r3, [r7, #7]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d19b      	bne.n	80056ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3720      	adds	r7, #32
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	20000010 	.word	0x20000010

080057c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b088      	sub	sp, #32
 80057c8:	af02      	add	r7, sp, #8
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80057d0:	4b1b      	ldr	r3, [pc, #108]	; (8005840 <SPI_EndRxTxTransaction+0x7c>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a1b      	ldr	r2, [pc, #108]	; (8005844 <SPI_EndRxTxTransaction+0x80>)
 80057d6:	fba2 2303 	umull	r2, r3, r2, r3
 80057da:	0d5b      	lsrs	r3, r3, #21
 80057dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80057e0:	fb02 f303 	mul.w	r3, r2, r3
 80057e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057ee:	d112      	bne.n	8005816 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	9300      	str	r3, [sp, #0]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	2200      	movs	r2, #0
 80057f8:	2180      	movs	r1, #128	; 0x80
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f7ff ff5a 	bl	80056b4 <SPI_WaitFlagStateUntilTimeout>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d016      	beq.n	8005834 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800580a:	f043 0220 	orr.w	r2, r3, #32
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e00f      	b.n	8005836 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00a      	beq.n	8005832 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	3b01      	subs	r3, #1
 8005820:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800582c:	2b80      	cmp	r3, #128	; 0x80
 800582e:	d0f2      	beq.n	8005816 <SPI_EndRxTxTransaction+0x52>
 8005830:	e000      	b.n	8005834 <SPI_EndRxTxTransaction+0x70>
        break;
 8005832:	bf00      	nop
  }

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	20000010 	.word	0x20000010
 8005844:	165e9f81 	.word	0x165e9f81

08005848 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e041      	b.n	80058de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d106      	bne.n	8005874 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f839 	bl	80058e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	3304      	adds	r3, #4
 8005884:	4619      	mov	r1, r3
 8005886:	4610      	mov	r0, r2
 8005888:	f000 f9ca 	bl	8005c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b083      	sub	sp, #12
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80058ee:	bf00      	nop
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
	...

080058fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b01      	cmp	r3, #1
 800590e:	d001      	beq.n	8005914 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e044      	b.n	800599e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68da      	ldr	r2, [r3, #12]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f042 0201 	orr.w	r2, r2, #1
 800592a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a1e      	ldr	r2, [pc, #120]	; (80059ac <HAL_TIM_Base_Start_IT+0xb0>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d018      	beq.n	8005968 <HAL_TIM_Base_Start_IT+0x6c>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800593e:	d013      	beq.n	8005968 <HAL_TIM_Base_Start_IT+0x6c>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a1a      	ldr	r2, [pc, #104]	; (80059b0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d00e      	beq.n	8005968 <HAL_TIM_Base_Start_IT+0x6c>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a19      	ldr	r2, [pc, #100]	; (80059b4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d009      	beq.n	8005968 <HAL_TIM_Base_Start_IT+0x6c>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a17      	ldr	r2, [pc, #92]	; (80059b8 <HAL_TIM_Base_Start_IT+0xbc>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d004      	beq.n	8005968 <HAL_TIM_Base_Start_IT+0x6c>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a16      	ldr	r2, [pc, #88]	; (80059bc <HAL_TIM_Base_Start_IT+0xc0>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d111      	bne.n	800598c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f003 0307 	and.w	r3, r3, #7
 8005972:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2b06      	cmp	r3, #6
 8005978:	d010      	beq.n	800599c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f042 0201 	orr.w	r2, r2, #1
 8005988:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800598a:	e007      	b.n	800599c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0201 	orr.w	r2, r2, #1
 800599a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3714      	adds	r7, #20
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	40010000 	.word	0x40010000
 80059b0:	40000400 	.word	0x40000400
 80059b4:	40000800 	.word	0x40000800
 80059b8:	40000c00 	.word	0x40000c00
 80059bc:	40014000 	.word	0x40014000

080059c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d122      	bne.n	8005a1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	f003 0302 	and.w	r3, r3, #2
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d11b      	bne.n	8005a1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f06f 0202 	mvn.w	r2, #2
 80059ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	f003 0303 	and.w	r3, r3, #3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f8ee 	bl	8005be4 <HAL_TIM_IC_CaptureCallback>
 8005a08:	e005      	b.n	8005a16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f8e0 	bl	8005bd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f8f1 	bl	8005bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	f003 0304 	and.w	r3, r3, #4
 8005a26:	2b04      	cmp	r3, #4
 8005a28:	d122      	bne.n	8005a70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f003 0304 	and.w	r3, r3, #4
 8005a34:	2b04      	cmp	r3, #4
 8005a36:	d11b      	bne.n	8005a70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f06f 0204 	mvn.w	r2, #4
 8005a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2202      	movs	r2, #2
 8005a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f8c4 	bl	8005be4 <HAL_TIM_IC_CaptureCallback>
 8005a5c:	e005      	b.n	8005a6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f8b6 	bl	8005bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 f8c7 	bl	8005bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	f003 0308 	and.w	r3, r3, #8
 8005a7a:	2b08      	cmp	r3, #8
 8005a7c:	d122      	bne.n	8005ac4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	f003 0308 	and.w	r3, r3, #8
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	d11b      	bne.n	8005ac4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f06f 0208 	mvn.w	r2, #8
 8005a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2204      	movs	r2, #4
 8005a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f89a 	bl	8005be4 <HAL_TIM_IC_CaptureCallback>
 8005ab0:	e005      	b.n	8005abe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f88c 	bl	8005bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f89d 	bl	8005bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	f003 0310 	and.w	r3, r3, #16
 8005ace:	2b10      	cmp	r3, #16
 8005ad0:	d122      	bne.n	8005b18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f003 0310 	and.w	r3, r3, #16
 8005adc:	2b10      	cmp	r3, #16
 8005ade:	d11b      	bne.n	8005b18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f06f 0210 	mvn.w	r2, #16
 8005ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2208      	movs	r2, #8
 8005aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f870 	bl	8005be4 <HAL_TIM_IC_CaptureCallback>
 8005b04:	e005      	b.n	8005b12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f862 	bl	8005bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 f873 	bl	8005bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d10e      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d107      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f06f 0201 	mvn.w	r2, #1
 8005b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7fc fb00 	bl	8002144 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b4e:	2b80      	cmp	r3, #128	; 0x80
 8005b50:	d10e      	bne.n	8005b70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b5c:	2b80      	cmp	r3, #128	; 0x80
 8005b5e:	d107      	bne.n	8005b70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f8e2 	bl	8005d34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b7a:	2b40      	cmp	r3, #64	; 0x40
 8005b7c:	d10e      	bne.n	8005b9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b88:	2b40      	cmp	r3, #64	; 0x40
 8005b8a:	d107      	bne.n	8005b9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f838 	bl	8005c0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	f003 0320 	and.w	r3, r3, #32
 8005ba6:	2b20      	cmp	r3, #32
 8005ba8:	d10e      	bne.n	8005bc8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f003 0320 	and.w	r3, r3, #32
 8005bb4:	2b20      	cmp	r3, #32
 8005bb6:	d107      	bne.n	8005bc8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f06f 0220 	mvn.w	r2, #32
 8005bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f8ac 	bl	8005d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bc8:	bf00      	nop
 8005bca:	3708      	adds	r7, #8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a34      	ldr	r2, [pc, #208]	; (8005d04 <TIM_Base_SetConfig+0xe4>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d00f      	beq.n	8005c58 <TIM_Base_SetConfig+0x38>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c3e:	d00b      	beq.n	8005c58 <TIM_Base_SetConfig+0x38>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a31      	ldr	r2, [pc, #196]	; (8005d08 <TIM_Base_SetConfig+0xe8>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d007      	beq.n	8005c58 <TIM_Base_SetConfig+0x38>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a30      	ldr	r2, [pc, #192]	; (8005d0c <TIM_Base_SetConfig+0xec>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d003      	beq.n	8005c58 <TIM_Base_SetConfig+0x38>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a2f      	ldr	r2, [pc, #188]	; (8005d10 <TIM_Base_SetConfig+0xf0>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d108      	bne.n	8005c6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a25      	ldr	r2, [pc, #148]	; (8005d04 <TIM_Base_SetConfig+0xe4>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d01b      	beq.n	8005caa <TIM_Base_SetConfig+0x8a>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c78:	d017      	beq.n	8005caa <TIM_Base_SetConfig+0x8a>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a22      	ldr	r2, [pc, #136]	; (8005d08 <TIM_Base_SetConfig+0xe8>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d013      	beq.n	8005caa <TIM_Base_SetConfig+0x8a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a21      	ldr	r2, [pc, #132]	; (8005d0c <TIM_Base_SetConfig+0xec>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d00f      	beq.n	8005caa <TIM_Base_SetConfig+0x8a>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a20      	ldr	r2, [pc, #128]	; (8005d10 <TIM_Base_SetConfig+0xf0>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d00b      	beq.n	8005caa <TIM_Base_SetConfig+0x8a>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a1f      	ldr	r2, [pc, #124]	; (8005d14 <TIM_Base_SetConfig+0xf4>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d007      	beq.n	8005caa <TIM_Base_SetConfig+0x8a>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a1e      	ldr	r2, [pc, #120]	; (8005d18 <TIM_Base_SetConfig+0xf8>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d003      	beq.n	8005caa <TIM_Base_SetConfig+0x8a>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a1d      	ldr	r2, [pc, #116]	; (8005d1c <TIM_Base_SetConfig+0xfc>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d108      	bne.n	8005cbc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	689a      	ldr	r2, [r3, #8]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a08      	ldr	r2, [pc, #32]	; (8005d04 <TIM_Base_SetConfig+0xe4>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d103      	bne.n	8005cf0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	691a      	ldr	r2, [r3, #16]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	615a      	str	r2, [r3, #20]
}
 8005cf6:	bf00      	nop
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	40010000 	.word	0x40010000
 8005d08:	40000400 	.word	0x40000400
 8005d0c:	40000800 	.word	0x40000800
 8005d10:	40000c00 	.word	0x40000c00
 8005d14:	40014000 	.word	0x40014000
 8005d18:	40014400 	.word	0x40014400
 8005d1c:	40014800 	.word	0x40014800

08005d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d101      	bne.n	8005d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e03f      	b.n	8005dda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d106      	bne.n	8005d74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7fd f80a 	bl	8002d88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2224      	movs	r2, #36	; 0x24
 8005d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68da      	ldr	r2, [r3, #12]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 fb9f 	bl	80064d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	691a      	ldr	r2, [r3, #16]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005da0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	695a      	ldr	r2, [r3, #20]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005db0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68da      	ldr	r2, [r3, #12]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005dc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2220      	movs	r2, #32
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b084      	sub	sp, #16
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	60f8      	str	r0, [r7, #12]
 8005dea:	60b9      	str	r1, [r7, #8]
 8005dec:	4613      	mov	r3, r2
 8005dee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b20      	cmp	r3, #32
 8005dfa:	d11d      	bne.n	8005e38 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <HAL_UART_Receive_IT+0x26>
 8005e02:	88fb      	ldrh	r3, [r7, #6]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d101      	bne.n	8005e0c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e016      	b.n	8005e3a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d101      	bne.n	8005e1a <HAL_UART_Receive_IT+0x38>
 8005e16:	2302      	movs	r3, #2
 8005e18:	e00f      	b.n	8005e3a <HAL_UART_Receive_IT+0x58>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005e28:	88fb      	ldrh	r3, [r7, #6]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	68b9      	ldr	r1, [r7, #8]
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f000 f9d4 	bl	80061dc <UART_Start_Receive_IT>
 8005e34:	4603      	mov	r3, r0
 8005e36:	e000      	b.n	8005e3a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005e38:	2302      	movs	r3, #2
  }
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
	...

08005e44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b08a      	sub	sp, #40	; 0x28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005e64:	2300      	movs	r3, #0
 8005e66:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6e:	f003 030f 	and.w	r3, r3, #15
 8005e72:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10d      	bne.n	8005e96 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7c:	f003 0320 	and.w	r3, r3, #32
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d008      	beq.n	8005e96 <HAL_UART_IRQHandler+0x52>
 8005e84:	6a3b      	ldr	r3, [r7, #32]
 8005e86:	f003 0320 	and.w	r3, r3, #32
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d003      	beq.n	8005e96 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 fa87 	bl	80063a2 <UART_Receive_IT>
      return;
 8005e94:	e17c      	b.n	8006190 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 80b1 	beq.w	8006000 <HAL_UART_IRQHandler+0x1bc>
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d105      	bne.n	8005eb4 <HAL_UART_IRQHandler+0x70>
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f000 80a6 	beq.w	8006000 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00a      	beq.n	8005ed4 <HAL_UART_IRQHandler+0x90>
 8005ebe:	6a3b      	ldr	r3, [r7, #32]
 8005ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d005      	beq.n	8005ed4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ecc:	f043 0201 	orr.w	r2, r3, #1
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed6:	f003 0304 	and.w	r3, r3, #4
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00a      	beq.n	8005ef4 <HAL_UART_IRQHandler+0xb0>
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d005      	beq.n	8005ef4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eec:	f043 0202 	orr.w	r2, r3, #2
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00a      	beq.n	8005f14 <HAL_UART_IRQHandler+0xd0>
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d005      	beq.n	8005f14 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0c:	f043 0204 	orr.w	r2, r3, #4
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f16:	f003 0308 	and.w	r3, r3, #8
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00f      	beq.n	8005f3e <HAL_UART_IRQHandler+0xfa>
 8005f1e:	6a3b      	ldr	r3, [r7, #32]
 8005f20:	f003 0320 	and.w	r3, r3, #32
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d104      	bne.n	8005f32 <HAL_UART_IRQHandler+0xee>
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d005      	beq.n	8005f3e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f36:	f043 0208 	orr.w	r2, r3, #8
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f000 811f 	beq.w	8006186 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4a:	f003 0320 	and.w	r3, r3, #32
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d007      	beq.n	8005f62 <HAL_UART_IRQHandler+0x11e>
 8005f52:	6a3b      	ldr	r3, [r7, #32]
 8005f54:	f003 0320 	and.w	r3, r3, #32
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d002      	beq.n	8005f62 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 fa20 	bl	80063a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f6c:	2b40      	cmp	r3, #64	; 0x40
 8005f6e:	bf0c      	ite	eq
 8005f70:	2301      	moveq	r3, #1
 8005f72:	2300      	movne	r3, #0
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7c:	f003 0308 	and.w	r3, r3, #8
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d102      	bne.n	8005f8a <HAL_UART_IRQHandler+0x146>
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d031      	beq.n	8005fee <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f960 	bl	8006250 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9a:	2b40      	cmp	r3, #64	; 0x40
 8005f9c:	d123      	bne.n	8005fe6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	695a      	ldr	r2, [r3, #20]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fac:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d013      	beq.n	8005fde <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fba:	4a77      	ldr	r2, [pc, #476]	; (8006198 <HAL_UART_IRQHandler+0x354>)
 8005fbc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7fd fd96 	bl	8003af4 <HAL_DMA_Abort_IT>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d016      	beq.n	8005ffc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fd8:	4610      	mov	r0, r2
 8005fda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fdc:	e00e      	b.n	8005ffc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f8e6 	bl	80061b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe4:	e00a      	b.n	8005ffc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f8e2 	bl	80061b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fec:	e006      	b.n	8005ffc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f8de 	bl	80061b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005ffa:	e0c4      	b.n	8006186 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ffc:	bf00      	nop
    return;
 8005ffe:	e0c2      	b.n	8006186 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006004:	2b01      	cmp	r3, #1
 8006006:	f040 80a2 	bne.w	800614e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	f003 0310 	and.w	r3, r3, #16
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 809c 	beq.w	800614e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	f003 0310 	and.w	r3, r3, #16
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 8096 	beq.w	800614e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006022:	2300      	movs	r3, #0
 8006024:	60fb      	str	r3, [r7, #12]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	60fb      	str	r3, [r7, #12]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	60fb      	str	r3, [r7, #12]
 8006036:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006042:	2b40      	cmp	r3, #64	; 0x40
 8006044:	d14f      	bne.n	80060e6 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006050:	8a3b      	ldrh	r3, [r7, #16]
 8006052:	2b00      	cmp	r3, #0
 8006054:	f000 8099 	beq.w	800618a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800605c:	8a3a      	ldrh	r2, [r7, #16]
 800605e:	429a      	cmp	r2, r3
 8006060:	f080 8093 	bcs.w	800618a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	8a3a      	ldrh	r2, [r7, #16]
 8006068:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006074:	d02b      	beq.n	80060ce <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68da      	ldr	r2, [r3, #12]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006084:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	695a      	ldr	r2, [r3, #20]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f022 0201 	bic.w	r2, r2, #1
 8006094:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	695a      	ldr	r2, [r3, #20]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060a4:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68da      	ldr	r2, [r3, #12]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f022 0210 	bic.w	r2, r2, #16
 80060c2:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7fd fca3 	bl	8003a14 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	b29b      	uxth	r3, r3
 80060dc:	4619      	mov	r1, r3
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f870 	bl	80061c4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80060e4:	e051      	b.n	800618a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d047      	beq.n	800618e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80060fe:	8a7b      	ldrh	r3, [r7, #18]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d044      	beq.n	800618e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68da      	ldr	r2, [r3, #12]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006112:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	695a      	ldr	r2, [r3, #20]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f022 0201 	bic.w	r2, r2, #1
 8006122:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2220      	movs	r2, #32
 8006128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68da      	ldr	r2, [r3, #12]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f022 0210 	bic.w	r2, r2, #16
 8006140:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006142:	8a7b      	ldrh	r3, [r7, #18]
 8006144:	4619      	mov	r1, r3
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f83c 	bl	80061c4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800614c:	e01f      	b.n	800618e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006154:	2b00      	cmp	r3, #0
 8006156:	d008      	beq.n	800616a <HAL_UART_IRQHandler+0x326>
 8006158:	6a3b      	ldr	r3, [r7, #32]
 800615a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800615e:	2b00      	cmp	r3, #0
 8006160:	d003      	beq.n	800616a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f8b5 	bl	80062d2 <UART_Transmit_IT>
    return;
 8006168:	e012      	b.n	8006190 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800616a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00d      	beq.n	8006190 <HAL_UART_IRQHandler+0x34c>
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617a:	2b00      	cmp	r3, #0
 800617c:	d008      	beq.n	8006190 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f8f7 	bl	8006372 <UART_EndTransmit_IT>
    return;
 8006184:	e004      	b.n	8006190 <HAL_UART_IRQHandler+0x34c>
    return;
 8006186:	bf00      	nop
 8006188:	e002      	b.n	8006190 <HAL_UART_IRQHandler+0x34c>
      return;
 800618a:	bf00      	nop
 800618c:	e000      	b.n	8006190 <HAL_UART_IRQHandler+0x34c>
      return;
 800618e:	bf00      	nop
  }
}
 8006190:	3728      	adds	r7, #40	; 0x28
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	080062ab 	.word	0x080062ab

0800619c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	460b      	mov	r3, r1
 80061ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	4613      	mov	r3, r2
 80061e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	88fa      	ldrh	r2, [r7, #6]
 80061f4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	88fa      	ldrh	r2, [r7, #6]
 80061fa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2222      	movs	r2, #34	; 0x22
 8006206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68da      	ldr	r2, [r3, #12]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006220:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	695a      	ldr	r2, [r3, #20]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f042 0201 	orr.w	r2, r2, #1
 8006230:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68da      	ldr	r2, [r3, #12]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f042 0220 	orr.w	r2, r2, #32
 8006240:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68da      	ldr	r2, [r3, #12]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006266:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	695a      	ldr	r2, [r3, #20]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 0201 	bic.w	r2, r2, #1
 8006276:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627c:	2b01      	cmp	r3, #1
 800627e:	d107      	bne.n	8006290 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68da      	ldr	r2, [r3, #12]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f022 0210 	bic.w	r2, r2, #16
 800628e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2220      	movs	r2, #32
 8006294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800629e:	bf00      	nop
 80062a0:	370c      	adds	r7, #12
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b084      	sub	sp, #16
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f7ff ff73 	bl	80061b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062ca:	bf00      	nop
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b085      	sub	sp, #20
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b21      	cmp	r3, #33	; 0x21
 80062e4:	d13e      	bne.n	8006364 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ee:	d114      	bne.n	800631a <UART_Transmit_IT+0x48>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d110      	bne.n	800631a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	881b      	ldrh	r3, [r3, #0]
 8006302:	461a      	mov	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800630c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	1c9a      	adds	r2, r3, #2
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	621a      	str	r2, [r3, #32]
 8006318:	e008      	b.n	800632c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	1c59      	adds	r1, r3, #1
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	6211      	str	r1, [r2, #32]
 8006324:	781a      	ldrb	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006330:	b29b      	uxth	r3, r3
 8006332:	3b01      	subs	r3, #1
 8006334:	b29b      	uxth	r3, r3
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	4619      	mov	r1, r3
 800633a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10f      	bne.n	8006360 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800634e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68da      	ldr	r2, [r3, #12]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800635e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006360:	2300      	movs	r3, #0
 8006362:	e000      	b.n	8006366 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006364:	2302      	movs	r3, #2
  }
}
 8006366:	4618      	mov	r0, r3
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b082      	sub	sp, #8
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68da      	ldr	r2, [r3, #12]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006388:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2220      	movs	r2, #32
 800638e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7ff ff02 	bl	800619c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b084      	sub	sp, #16
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b22      	cmp	r3, #34	; 0x22
 80063b4:	f040 8087 	bne.w	80064c6 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063c0:	d117      	bne.n	80063f2 <UART_Receive_IT+0x50>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d113      	bne.n	80063f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80063ca:	2300      	movs	r3, #0
 80063cc:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	b29b      	uxth	r3, r3
 80063dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ea:	1c9a      	adds	r2, r3, #2
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	629a      	str	r2, [r3, #40]	; 0x28
 80063f0:	e026      	b.n	8006440 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80063f8:	2300      	movs	r3, #0
 80063fa:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006404:	d007      	beq.n	8006416 <UART_Receive_IT+0x74>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10a      	bne.n	8006424 <UART_Receive_IT+0x82>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d106      	bne.n	8006424 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	b2da      	uxtb	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	701a      	strb	r2, [r3, #0]
 8006422:	e008      	b.n	8006436 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	b2db      	uxtb	r3, r3
 800642c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006430:	b2da      	uxtb	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643a:	1c5a      	adds	r2, r3, #1
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006444:	b29b      	uxth	r3, r3
 8006446:	3b01      	subs	r3, #1
 8006448:	b29b      	uxth	r3, r3
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	4619      	mov	r1, r3
 800644e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006450:	2b00      	cmp	r3, #0
 8006452:	d136      	bne.n	80064c2 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68da      	ldr	r2, [r3, #12]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 0220 	bic.w	r2, r2, #32
 8006462:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68da      	ldr	r2, [r3, #12]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006472:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	695a      	ldr	r2, [r3, #20]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 0201 	bic.w	r2, r2, #1
 8006482:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2220      	movs	r2, #32
 8006488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006490:	2b01      	cmp	r3, #1
 8006492:	d10e      	bne.n	80064b2 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68da      	ldr	r2, [r3, #12]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f022 0210 	bic.w	r2, r2, #16
 80064a2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064a8:	4619      	mov	r1, r3
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7ff fe8a 	bl	80061c4 <HAL_UARTEx_RxEventCallback>
 80064b0:	e002      	b.n	80064b8 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7fc fb5c 	bl	8002b70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80064be:	2300      	movs	r3, #0
 80064c0:	e002      	b.n	80064c8 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	e000      	b.n	80064c8 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80064c6:	2302      	movs	r3, #2
  }
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d4:	b09f      	sub	sp, #124	; 0x7c
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80064e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064e6:	68d9      	ldr	r1, [r3, #12]
 80064e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	ea40 0301 	orr.w	r3, r0, r1
 80064f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064f4:	689a      	ldr	r2, [r3, #8]
 80064f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	431a      	orrs	r2, r3
 80064fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	431a      	orrs	r2, r3
 8006502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006504:	69db      	ldr	r3, [r3, #28]
 8006506:	4313      	orrs	r3, r2
 8006508:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800650a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006514:	f021 010c 	bic.w	r1, r1, #12
 8006518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800651e:	430b      	orrs	r3, r1
 8006520:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800652c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800652e:	6999      	ldr	r1, [r3, #24]
 8006530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	ea40 0301 	orr.w	r3, r0, r1
 8006538:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800653a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	4bc5      	ldr	r3, [pc, #788]	; (8006854 <UART_SetConfig+0x384>)
 8006540:	429a      	cmp	r2, r3
 8006542:	d004      	beq.n	800654e <UART_SetConfig+0x7e>
 8006544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	4bc3      	ldr	r3, [pc, #780]	; (8006858 <UART_SetConfig+0x388>)
 800654a:	429a      	cmp	r2, r3
 800654c:	d103      	bne.n	8006556 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800654e:	f7fe fe3f 	bl	80051d0 <HAL_RCC_GetPCLK2Freq>
 8006552:	6778      	str	r0, [r7, #116]	; 0x74
 8006554:	e002      	b.n	800655c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006556:	f7fe fe27 	bl	80051a8 <HAL_RCC_GetPCLK1Freq>
 800655a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800655c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800655e:	69db      	ldr	r3, [r3, #28]
 8006560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006564:	f040 80b6 	bne.w	80066d4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006568:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800656a:	461c      	mov	r4, r3
 800656c:	f04f 0500 	mov.w	r5, #0
 8006570:	4622      	mov	r2, r4
 8006572:	462b      	mov	r3, r5
 8006574:	1891      	adds	r1, r2, r2
 8006576:	6439      	str	r1, [r7, #64]	; 0x40
 8006578:	415b      	adcs	r3, r3
 800657a:	647b      	str	r3, [r7, #68]	; 0x44
 800657c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006580:	1912      	adds	r2, r2, r4
 8006582:	eb45 0303 	adc.w	r3, r5, r3
 8006586:	f04f 0000 	mov.w	r0, #0
 800658a:	f04f 0100 	mov.w	r1, #0
 800658e:	00d9      	lsls	r1, r3, #3
 8006590:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006594:	00d0      	lsls	r0, r2, #3
 8006596:	4602      	mov	r2, r0
 8006598:	460b      	mov	r3, r1
 800659a:	1911      	adds	r1, r2, r4
 800659c:	6639      	str	r1, [r7, #96]	; 0x60
 800659e:	416b      	adcs	r3, r5
 80065a0:	667b      	str	r3, [r7, #100]	; 0x64
 80065a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	461a      	mov	r2, r3
 80065a8:	f04f 0300 	mov.w	r3, #0
 80065ac:	1891      	adds	r1, r2, r2
 80065ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80065b0:	415b      	adcs	r3, r3
 80065b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80065b8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80065bc:	f7fa fb6c 	bl	8000c98 <__aeabi_uldivmod>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	4ba5      	ldr	r3, [pc, #660]	; (800685c <UART_SetConfig+0x38c>)
 80065c6:	fba3 2302 	umull	r2, r3, r3, r2
 80065ca:	095b      	lsrs	r3, r3, #5
 80065cc:	011e      	lsls	r6, r3, #4
 80065ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065d0:	461c      	mov	r4, r3
 80065d2:	f04f 0500 	mov.w	r5, #0
 80065d6:	4622      	mov	r2, r4
 80065d8:	462b      	mov	r3, r5
 80065da:	1891      	adds	r1, r2, r2
 80065dc:	6339      	str	r1, [r7, #48]	; 0x30
 80065de:	415b      	adcs	r3, r3
 80065e0:	637b      	str	r3, [r7, #52]	; 0x34
 80065e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80065e6:	1912      	adds	r2, r2, r4
 80065e8:	eb45 0303 	adc.w	r3, r5, r3
 80065ec:	f04f 0000 	mov.w	r0, #0
 80065f0:	f04f 0100 	mov.w	r1, #0
 80065f4:	00d9      	lsls	r1, r3, #3
 80065f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80065fa:	00d0      	lsls	r0, r2, #3
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	1911      	adds	r1, r2, r4
 8006602:	65b9      	str	r1, [r7, #88]	; 0x58
 8006604:	416b      	adcs	r3, r5
 8006606:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	461a      	mov	r2, r3
 800660e:	f04f 0300 	mov.w	r3, #0
 8006612:	1891      	adds	r1, r2, r2
 8006614:	62b9      	str	r1, [r7, #40]	; 0x28
 8006616:	415b      	adcs	r3, r3
 8006618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800661a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800661e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006622:	f7fa fb39 	bl	8000c98 <__aeabi_uldivmod>
 8006626:	4602      	mov	r2, r0
 8006628:	460b      	mov	r3, r1
 800662a:	4b8c      	ldr	r3, [pc, #560]	; (800685c <UART_SetConfig+0x38c>)
 800662c:	fba3 1302 	umull	r1, r3, r3, r2
 8006630:	095b      	lsrs	r3, r3, #5
 8006632:	2164      	movs	r1, #100	; 0x64
 8006634:	fb01 f303 	mul.w	r3, r1, r3
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	00db      	lsls	r3, r3, #3
 800663c:	3332      	adds	r3, #50	; 0x32
 800663e:	4a87      	ldr	r2, [pc, #540]	; (800685c <UART_SetConfig+0x38c>)
 8006640:	fba2 2303 	umull	r2, r3, r2, r3
 8006644:	095b      	lsrs	r3, r3, #5
 8006646:	005b      	lsls	r3, r3, #1
 8006648:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800664c:	441e      	add	r6, r3
 800664e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006650:	4618      	mov	r0, r3
 8006652:	f04f 0100 	mov.w	r1, #0
 8006656:	4602      	mov	r2, r0
 8006658:	460b      	mov	r3, r1
 800665a:	1894      	adds	r4, r2, r2
 800665c:	623c      	str	r4, [r7, #32]
 800665e:	415b      	adcs	r3, r3
 8006660:	627b      	str	r3, [r7, #36]	; 0x24
 8006662:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006666:	1812      	adds	r2, r2, r0
 8006668:	eb41 0303 	adc.w	r3, r1, r3
 800666c:	f04f 0400 	mov.w	r4, #0
 8006670:	f04f 0500 	mov.w	r5, #0
 8006674:	00dd      	lsls	r5, r3, #3
 8006676:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800667a:	00d4      	lsls	r4, r2, #3
 800667c:	4622      	mov	r2, r4
 800667e:	462b      	mov	r3, r5
 8006680:	1814      	adds	r4, r2, r0
 8006682:	653c      	str	r4, [r7, #80]	; 0x50
 8006684:	414b      	adcs	r3, r1
 8006686:	657b      	str	r3, [r7, #84]	; 0x54
 8006688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	461a      	mov	r2, r3
 800668e:	f04f 0300 	mov.w	r3, #0
 8006692:	1891      	adds	r1, r2, r2
 8006694:	61b9      	str	r1, [r7, #24]
 8006696:	415b      	adcs	r3, r3
 8006698:	61fb      	str	r3, [r7, #28]
 800669a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800669e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80066a2:	f7fa faf9 	bl	8000c98 <__aeabi_uldivmod>
 80066a6:	4602      	mov	r2, r0
 80066a8:	460b      	mov	r3, r1
 80066aa:	4b6c      	ldr	r3, [pc, #432]	; (800685c <UART_SetConfig+0x38c>)
 80066ac:	fba3 1302 	umull	r1, r3, r3, r2
 80066b0:	095b      	lsrs	r3, r3, #5
 80066b2:	2164      	movs	r1, #100	; 0x64
 80066b4:	fb01 f303 	mul.w	r3, r1, r3
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	3332      	adds	r3, #50	; 0x32
 80066be:	4a67      	ldr	r2, [pc, #412]	; (800685c <UART_SetConfig+0x38c>)
 80066c0:	fba2 2303 	umull	r2, r3, r2, r3
 80066c4:	095b      	lsrs	r3, r3, #5
 80066c6:	f003 0207 	and.w	r2, r3, #7
 80066ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4432      	add	r2, r6
 80066d0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80066d2:	e0b9      	b.n	8006848 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066d6:	461c      	mov	r4, r3
 80066d8:	f04f 0500 	mov.w	r5, #0
 80066dc:	4622      	mov	r2, r4
 80066de:	462b      	mov	r3, r5
 80066e0:	1891      	adds	r1, r2, r2
 80066e2:	6139      	str	r1, [r7, #16]
 80066e4:	415b      	adcs	r3, r3
 80066e6:	617b      	str	r3, [r7, #20]
 80066e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80066ec:	1912      	adds	r2, r2, r4
 80066ee:	eb45 0303 	adc.w	r3, r5, r3
 80066f2:	f04f 0000 	mov.w	r0, #0
 80066f6:	f04f 0100 	mov.w	r1, #0
 80066fa:	00d9      	lsls	r1, r3, #3
 80066fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006700:	00d0      	lsls	r0, r2, #3
 8006702:	4602      	mov	r2, r0
 8006704:	460b      	mov	r3, r1
 8006706:	eb12 0804 	adds.w	r8, r2, r4
 800670a:	eb43 0905 	adc.w	r9, r3, r5
 800670e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	4618      	mov	r0, r3
 8006714:	f04f 0100 	mov.w	r1, #0
 8006718:	f04f 0200 	mov.w	r2, #0
 800671c:	f04f 0300 	mov.w	r3, #0
 8006720:	008b      	lsls	r3, r1, #2
 8006722:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006726:	0082      	lsls	r2, r0, #2
 8006728:	4640      	mov	r0, r8
 800672a:	4649      	mov	r1, r9
 800672c:	f7fa fab4 	bl	8000c98 <__aeabi_uldivmod>
 8006730:	4602      	mov	r2, r0
 8006732:	460b      	mov	r3, r1
 8006734:	4b49      	ldr	r3, [pc, #292]	; (800685c <UART_SetConfig+0x38c>)
 8006736:	fba3 2302 	umull	r2, r3, r3, r2
 800673a:	095b      	lsrs	r3, r3, #5
 800673c:	011e      	lsls	r6, r3, #4
 800673e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006740:	4618      	mov	r0, r3
 8006742:	f04f 0100 	mov.w	r1, #0
 8006746:	4602      	mov	r2, r0
 8006748:	460b      	mov	r3, r1
 800674a:	1894      	adds	r4, r2, r2
 800674c:	60bc      	str	r4, [r7, #8]
 800674e:	415b      	adcs	r3, r3
 8006750:	60fb      	str	r3, [r7, #12]
 8006752:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006756:	1812      	adds	r2, r2, r0
 8006758:	eb41 0303 	adc.w	r3, r1, r3
 800675c:	f04f 0400 	mov.w	r4, #0
 8006760:	f04f 0500 	mov.w	r5, #0
 8006764:	00dd      	lsls	r5, r3, #3
 8006766:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800676a:	00d4      	lsls	r4, r2, #3
 800676c:	4622      	mov	r2, r4
 800676e:	462b      	mov	r3, r5
 8006770:	1814      	adds	r4, r2, r0
 8006772:	64bc      	str	r4, [r7, #72]	; 0x48
 8006774:	414b      	adcs	r3, r1
 8006776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	4618      	mov	r0, r3
 800677e:	f04f 0100 	mov.w	r1, #0
 8006782:	f04f 0200 	mov.w	r2, #0
 8006786:	f04f 0300 	mov.w	r3, #0
 800678a:	008b      	lsls	r3, r1, #2
 800678c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006790:	0082      	lsls	r2, r0, #2
 8006792:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006796:	f7fa fa7f 	bl	8000c98 <__aeabi_uldivmod>
 800679a:	4602      	mov	r2, r0
 800679c:	460b      	mov	r3, r1
 800679e:	4b2f      	ldr	r3, [pc, #188]	; (800685c <UART_SetConfig+0x38c>)
 80067a0:	fba3 1302 	umull	r1, r3, r3, r2
 80067a4:	095b      	lsrs	r3, r3, #5
 80067a6:	2164      	movs	r1, #100	; 0x64
 80067a8:	fb01 f303 	mul.w	r3, r1, r3
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	011b      	lsls	r3, r3, #4
 80067b0:	3332      	adds	r3, #50	; 0x32
 80067b2:	4a2a      	ldr	r2, [pc, #168]	; (800685c <UART_SetConfig+0x38c>)
 80067b4:	fba2 2303 	umull	r2, r3, r2, r3
 80067b8:	095b      	lsrs	r3, r3, #5
 80067ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067be:	441e      	add	r6, r3
 80067c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067c2:	4618      	mov	r0, r3
 80067c4:	f04f 0100 	mov.w	r1, #0
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	1894      	adds	r4, r2, r2
 80067ce:	603c      	str	r4, [r7, #0]
 80067d0:	415b      	adcs	r3, r3
 80067d2:	607b      	str	r3, [r7, #4]
 80067d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067d8:	1812      	adds	r2, r2, r0
 80067da:	eb41 0303 	adc.w	r3, r1, r3
 80067de:	f04f 0400 	mov.w	r4, #0
 80067e2:	f04f 0500 	mov.w	r5, #0
 80067e6:	00dd      	lsls	r5, r3, #3
 80067e8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80067ec:	00d4      	lsls	r4, r2, #3
 80067ee:	4622      	mov	r2, r4
 80067f0:	462b      	mov	r3, r5
 80067f2:	eb12 0a00 	adds.w	sl, r2, r0
 80067f6:	eb43 0b01 	adc.w	fp, r3, r1
 80067fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	4618      	mov	r0, r3
 8006800:	f04f 0100 	mov.w	r1, #0
 8006804:	f04f 0200 	mov.w	r2, #0
 8006808:	f04f 0300 	mov.w	r3, #0
 800680c:	008b      	lsls	r3, r1, #2
 800680e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006812:	0082      	lsls	r2, r0, #2
 8006814:	4650      	mov	r0, sl
 8006816:	4659      	mov	r1, fp
 8006818:	f7fa fa3e 	bl	8000c98 <__aeabi_uldivmod>
 800681c:	4602      	mov	r2, r0
 800681e:	460b      	mov	r3, r1
 8006820:	4b0e      	ldr	r3, [pc, #56]	; (800685c <UART_SetConfig+0x38c>)
 8006822:	fba3 1302 	umull	r1, r3, r3, r2
 8006826:	095b      	lsrs	r3, r3, #5
 8006828:	2164      	movs	r1, #100	; 0x64
 800682a:	fb01 f303 	mul.w	r3, r1, r3
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	011b      	lsls	r3, r3, #4
 8006832:	3332      	adds	r3, #50	; 0x32
 8006834:	4a09      	ldr	r2, [pc, #36]	; (800685c <UART_SetConfig+0x38c>)
 8006836:	fba2 2303 	umull	r2, r3, r2, r3
 800683a:	095b      	lsrs	r3, r3, #5
 800683c:	f003 020f 	and.w	r2, r3, #15
 8006840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4432      	add	r2, r6
 8006846:	609a      	str	r2, [r3, #8]
}
 8006848:	bf00      	nop
 800684a:	377c      	adds	r7, #124	; 0x7c
 800684c:	46bd      	mov	sp, r7
 800684e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006852:	bf00      	nop
 8006854:	40011000 	.word	0x40011000
 8006858:	40011400 	.word	0x40011400
 800685c:	51eb851f 	.word	0x51eb851f

08006860 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006864:	4904      	ldr	r1, [pc, #16]	; (8006878 <MX_FATFS_Init+0x18>)
 8006866:	4805      	ldr	r0, [pc, #20]	; (800687c <MX_FATFS_Init+0x1c>)
 8006868:	f002 ffa6 	bl	80097b8 <FATFS_LinkDriver>
 800686c:	4603      	mov	r3, r0
 800686e:	461a      	mov	r2, r3
 8006870:	4b03      	ldr	r3, [pc, #12]	; (8006880 <MX_FATFS_Init+0x20>)
 8006872:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006874:	bf00      	nop
 8006876:	bd80      	pop	{r7, pc}
 8006878:	20005510 	.word	0x20005510
 800687c:	2000001c 	.word	0x2000001c
 8006880:	20005514 	.word	0x20005514

08006884 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006884:	b480      	push	{r7}
 8006886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006888:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800688a:	4618      	mov	r0, r3
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	4603      	mov	r3, r0
 800689c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800689e:	79fb      	ldrb	r3, [r7, #7]
 80068a0:	4618      	mov	r0, r3
 80068a2:	f000 f9d9 	bl	8006c58 <USER_SPI_initialize>
 80068a6:	4603      	mov	r3, r0
    Stat = STA_NOINIT;
    return Stat;
  /* USER CODE END INIT */
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3708      	adds	r7, #8
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	4603      	mov	r3, r0
 80068b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80068ba:	79fb      	ldrb	r3, [r7, #7]
 80068bc:	4618      	mov	r0, r3
 80068be:	f000 fab7 	bl	8006e30 <USER_SPI_status>
 80068c2:	4603      	mov	r3, r0
    //Stat = STA_NOINIT;
    //return Stat;
  /* USER CODE END STATUS */
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3708      	adds	r7, #8
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60b9      	str	r1, [r7, #8]
 80068d4:	607a      	str	r2, [r7, #4]
 80068d6:	603b      	str	r3, [r7, #0]
 80068d8:	4603      	mov	r3, r0
 80068da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 80068dc:	7bf8      	ldrb	r0, [r7, #15]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	68b9      	ldr	r1, [r7, #8]
 80068e4:	f000 faba 	bl	8006e5c <USER_SPI_read>
 80068e8:	4603      	mov	r3, r0
    //return RES_OK;
  /* USER CODE END READ */
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b084      	sub	sp, #16
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
 80068fc:	603b      	str	r3, [r7, #0]
 80068fe:	4603      	mov	r3, r0
 8006900:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8006902:	7bf8      	ldrb	r0, [r7, #15]
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	68b9      	ldr	r1, [r7, #8]
 800690a:	f000 fb0d 	bl	8006f28 <USER_SPI_write>
 800690e:	4603      	mov	r3, r0
    //return RES_OK;
  /* USER CODE END WRITE */
}
 8006910:	4618      	mov	r0, r3
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	4603      	mov	r3, r0
 8006920:	603a      	str	r2, [r7, #0]
 8006922:	71fb      	strb	r3, [r7, #7]
 8006924:	460b      	mov	r3, r1
 8006926:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8006928:	79b9      	ldrb	r1, [r7, #6]
 800692a:	79fb      	ldrb	r3, [r7, #7]
 800692c:	683a      	ldr	r2, [r7, #0]
 800692e:	4618      	mov	r0, r3
 8006930:	f000 fb76 	bl	8007020 <USER_SPI_ioctl>
 8006934:	4603      	mov	r3, r0
    //DRESULT res = RES_ERROR;
    //return res;
  /* USER CODE END IOCTL */
}
 8006936:	4618      	mov	r0, r3
 8006938:	3708      	adds	r7, #8
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
	...

08006940 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8006948:	f7fc fac6 	bl	8002ed8 <HAL_GetTick>
 800694c:	4603      	mov	r3, r0
 800694e:	4a04      	ldr	r2, [pc, #16]	; (8006960 <SPI_Timer_On+0x20>)
 8006950:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8006952:	4a04      	ldr	r2, [pc, #16]	; (8006964 <SPI_Timer_On+0x24>)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6013      	str	r3, [r2, #0]
}
 8006958:	bf00      	nop
 800695a:	3708      	adds	r7, #8
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	2000597c 	.word	0x2000597c
 8006964:	20005980 	.word	0x20005980

08006968 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8006968:	b580      	push	{r7, lr}
 800696a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800696c:	f7fc fab4 	bl	8002ed8 <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	4b06      	ldr	r3, [pc, #24]	; (800698c <SPI_Timer_Status+0x24>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	1ad2      	subs	r2, r2, r3
 8006978:	4b05      	ldr	r3, [pc, #20]	; (8006990 <SPI_Timer_Status+0x28>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	429a      	cmp	r2, r3
 800697e:	bf34      	ite	cc
 8006980:	2301      	movcc	r3, #1
 8006982:	2300      	movcs	r3, #0
 8006984:	b2db      	uxtb	r3, r3
}
 8006986:	4618      	mov	r0, r3
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	2000597c 	.word	0x2000597c
 8006990:	20005980 	.word	0x20005980

08006994 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af02      	add	r7, sp, #8
 800699a:	4603      	mov	r3, r0
 800699c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800699e:	f107 020f 	add.w	r2, r7, #15
 80069a2:	1df9      	adds	r1, r7, #7
 80069a4:	2332      	movs	r3, #50	; 0x32
 80069a6:	9300      	str	r3, [sp, #0]
 80069a8:	2301      	movs	r3, #1
 80069aa:	4804      	ldr	r0, [pc, #16]	; (80069bc <xchg_spi+0x28>)
 80069ac:	f7fe fcdf 	bl	800536e <HAL_SPI_TransmitReceive>
    return rxDat;
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	20005428 	.word	0x20005428

080069c0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80069c0:	b590      	push	{r4, r7, lr}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80069ca:	2300      	movs	r3, #0
 80069cc:	60fb      	str	r3, [r7, #12]
 80069ce:	e00a      	b.n	80069e6 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	18d4      	adds	r4, r2, r3
 80069d6:	20ff      	movs	r0, #255	; 0xff
 80069d8:	f7ff ffdc 	bl	8006994 <xchg_spi>
 80069dc:	4603      	mov	r3, r0
 80069de:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	3301      	adds	r3, #1
 80069e4:	60fb      	str	r3, [r7, #12]
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d3f0      	bcc.n	80069d0 <rcvr_spi_multi+0x10>
	}
}
 80069ee:	bf00      	nop
 80069f0:	bf00      	nop
 80069f2:	3714      	adds	r7, #20
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd90      	pop	{r4, r7, pc}

080069f8 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8006a02:	2300      	movs	r3, #0
 8006a04:	60fb      	str	r3, [r7, #12]
 8006a06:	e009      	b.n	8006a1c <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7ff ffbf 	bl	8006994 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	60fb      	str	r3, [r7, #12]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d3f1      	bcc.n	8006a08 <xmit_spi_multi+0x10>
	}
}
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b086      	sub	sp, #24
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8006a36:	f7fc fa4f 	bl	8002ed8 <HAL_GetTick>
 8006a3a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8006a40:	20ff      	movs	r0, #255	; 0xff
 8006a42:	f7ff ffa7 	bl	8006994 <xchg_spi>
 8006a46:	4603      	mov	r3, r0
 8006a48:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8006a4a:	7bfb      	ldrb	r3, [r7, #15]
 8006a4c:	2bff      	cmp	r3, #255	; 0xff
 8006a4e:	d007      	beq.n	8006a60 <wait_ready+0x32>
 8006a50:	f7fc fa42 	bl	8002ed8 <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d8ef      	bhi.n	8006a40 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
 8006a62:	2bff      	cmp	r3, #255	; 0xff
 8006a64:	bf0c      	ite	eq
 8006a66:	2301      	moveq	r3, #1
 8006a68:	2300      	movne	r3, #0
 8006a6a:	b2db      	uxtb	r3, r3
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3718      	adds	r7, #24
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8006a78:	2201      	movs	r2, #1
 8006a7a:	2110      	movs	r1, #16
 8006a7c:	4803      	ldr	r0, [pc, #12]	; (8006a8c <despiselect+0x18>)
 8006a7e:	f7fd f9df 	bl	8003e40 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8006a82:	20ff      	movs	r0, #255	; 0xff
 8006a84:	f7ff ff86 	bl	8006994 <xchg_spi>

}
 8006a88:	bf00      	nop
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	40020000 	.word	0x40020000

08006a90 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8006a94:	2200      	movs	r2, #0
 8006a96:	2110      	movs	r1, #16
 8006a98:	4809      	ldr	r0, [pc, #36]	; (8006ac0 <spiselect+0x30>)
 8006a9a:	f7fd f9d1 	bl	8003e40 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8006a9e:	20ff      	movs	r0, #255	; 0xff
 8006aa0:	f7ff ff78 	bl	8006994 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8006aa4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006aa8:	f7ff ffc1 	bl	8006a2e <wait_ready>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <spiselect+0x26>
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e002      	b.n	8006abc <spiselect+0x2c>

	despiselect();
 8006ab6:	f7ff ffdd 	bl	8006a74 <despiselect>
	return 0;	/* Timeout */
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	40020000 	.word	0x40020000

08006ac4 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8006ace:	20c8      	movs	r0, #200	; 0xc8
 8006ad0:	f7ff ff36 	bl	8006940 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8006ad4:	20ff      	movs	r0, #255	; 0xff
 8006ad6:	f7ff ff5d 	bl	8006994 <xchg_spi>
 8006ada:	4603      	mov	r3, r0
 8006adc:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8006ade:	7bfb      	ldrb	r3, [r7, #15]
 8006ae0:	2bff      	cmp	r3, #255	; 0xff
 8006ae2:	d104      	bne.n	8006aee <rcvr_datablock+0x2a>
 8006ae4:	f7ff ff40 	bl	8006968 <SPI_Timer_Status>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1f2      	bne.n	8006ad4 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8006aee:	7bfb      	ldrb	r3, [r7, #15]
 8006af0:	2bfe      	cmp	r3, #254	; 0xfe
 8006af2:	d001      	beq.n	8006af8 <rcvr_datablock+0x34>
 8006af4:	2300      	movs	r3, #0
 8006af6:	e00a      	b.n	8006b0e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006af8:	6839      	ldr	r1, [r7, #0]
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7ff ff60 	bl	80069c0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8006b00:	20ff      	movs	r0, #255	; 0xff
 8006b02:	f7ff ff47 	bl	8006994 <xchg_spi>
 8006b06:	20ff      	movs	r0, #255	; 0xff
 8006b08:	f7ff ff44 	bl	8006994 <xchg_spi>

	return 1;						/* Function succeeded */
 8006b0c:	2301      	movs	r3, #1
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b084      	sub	sp, #16
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
 8006b1e:	460b      	mov	r3, r1
 8006b20:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8006b22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b26:	f7ff ff82 	bl	8006a2e <wait_ready>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <xmit_datablock+0x1e>
 8006b30:	2300      	movs	r3, #0
 8006b32:	e01e      	b.n	8006b72 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8006b34:	78fb      	ldrb	r3, [r7, #3]
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7ff ff2c 	bl	8006994 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8006b3c:	78fb      	ldrb	r3, [r7, #3]
 8006b3e:	2bfd      	cmp	r3, #253	; 0xfd
 8006b40:	d016      	beq.n	8006b70 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8006b42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7ff ff56 	bl	80069f8 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8006b4c:	20ff      	movs	r0, #255	; 0xff
 8006b4e:	f7ff ff21 	bl	8006994 <xchg_spi>
 8006b52:	20ff      	movs	r0, #255	; 0xff
 8006b54:	f7ff ff1e 	bl	8006994 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8006b58:	20ff      	movs	r0, #255	; 0xff
 8006b5a:	f7ff ff1b 	bl	8006994 <xchg_spi>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8006b62:	7bfb      	ldrb	r3, [r7, #15]
 8006b64:	f003 031f 	and.w	r3, r3, #31
 8006b68:	2b05      	cmp	r3, #5
 8006b6a:	d001      	beq.n	8006b70 <xmit_datablock+0x5a>
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	e000      	b.n	8006b72 <xmit_datablock+0x5c>
	}
	return 1;
 8006b70:	2301      	movs	r3, #1
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b084      	sub	sp, #16
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	4603      	mov	r3, r0
 8006b82:	6039      	str	r1, [r7, #0]
 8006b84:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8006b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	da0e      	bge.n	8006bac <send_cmd+0x32>
		cmd &= 0x7F;
 8006b8e:	79fb      	ldrb	r3, [r7, #7]
 8006b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b94:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8006b96:	2100      	movs	r1, #0
 8006b98:	2037      	movs	r0, #55	; 0x37
 8006b9a:	f7ff ffee 	bl	8006b7a <send_cmd>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8006ba2:	7bbb      	ldrb	r3, [r7, #14]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d901      	bls.n	8006bac <send_cmd+0x32>
 8006ba8:	7bbb      	ldrb	r3, [r7, #14]
 8006baa:	e051      	b.n	8006c50 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8006bac:	79fb      	ldrb	r3, [r7, #7]
 8006bae:	2b0c      	cmp	r3, #12
 8006bb0:	d008      	beq.n	8006bc4 <send_cmd+0x4a>
		despiselect();
 8006bb2:	f7ff ff5f 	bl	8006a74 <despiselect>
		if (!spiselect()) return 0xFF;
 8006bb6:	f7ff ff6b 	bl	8006a90 <spiselect>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d101      	bne.n	8006bc4 <send_cmd+0x4a>
 8006bc0:	23ff      	movs	r3, #255	; 0xff
 8006bc2:	e045      	b.n	8006c50 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8006bc4:	79fb      	ldrb	r3, [r7, #7]
 8006bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7ff fee1 	bl	8006994 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	0e1b      	lsrs	r3, r3, #24
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7ff fedb 	bl	8006994 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	0c1b      	lsrs	r3, r3, #16
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7ff fed5 	bl	8006994 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	0a1b      	lsrs	r3, r3, #8
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7ff fecf 	bl	8006994 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7ff feca 	bl	8006994 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8006c00:	2301      	movs	r3, #1
 8006c02:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8006c04:	79fb      	ldrb	r3, [r7, #7]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <send_cmd+0x94>
 8006c0a:	2395      	movs	r3, #149	; 0x95
 8006c0c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8006c0e:	79fb      	ldrb	r3, [r7, #7]
 8006c10:	2b08      	cmp	r3, #8
 8006c12:	d101      	bne.n	8006c18 <send_cmd+0x9e>
 8006c14:	2387      	movs	r3, #135	; 0x87
 8006c16:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8006c18:	7bfb      	ldrb	r3, [r7, #15]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7ff feba 	bl	8006994 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8006c20:	79fb      	ldrb	r3, [r7, #7]
 8006c22:	2b0c      	cmp	r3, #12
 8006c24:	d102      	bne.n	8006c2c <send_cmd+0xb2>
 8006c26:	20ff      	movs	r0, #255	; 0xff
 8006c28:	f7ff feb4 	bl	8006994 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8006c2c:	230a      	movs	r3, #10
 8006c2e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8006c30:	20ff      	movs	r0, #255	; 0xff
 8006c32:	f7ff feaf 	bl	8006994 <xchg_spi>
 8006c36:	4603      	mov	r3, r0
 8006c38:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8006c3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	da05      	bge.n	8006c4e <send_cmd+0xd4>
 8006c42:	7bfb      	ldrb	r3, [r7, #15]
 8006c44:	3b01      	subs	r3, #1
 8006c46:	73fb      	strb	r3, [r7, #15]
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1f0      	bne.n	8006c30 <send_cmd+0xb6>

	return res;							/* Return received response */
 8006c4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006c58:	b590      	push	{r4, r7, lr}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	4603      	mov	r3, r0
 8006c60:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006c62:	79fb      	ldrb	r3, [r7, #7]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d001      	beq.n	8006c6c <USER_SPI_initialize+0x14>
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e0d6      	b.n	8006e1a <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8006c6c:	4b6d      	ldr	r3, [pc, #436]	; (8006e24 <USER_SPI_initialize+0x1cc>)
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	f003 0302 	and.w	r3, r3, #2
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d003      	beq.n	8006c82 <USER_SPI_initialize+0x2a>
 8006c7a:	4b6a      	ldr	r3, [pc, #424]	; (8006e24 <USER_SPI_initialize+0x1cc>)
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	e0cb      	b.n	8006e1a <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8006c82:	4b69      	ldr	r3, [pc, #420]	; (8006e28 <USER_SPI_initialize+0x1d0>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006c8c:	4b66      	ldr	r3, [pc, #408]	; (8006e28 <USER_SPI_initialize+0x1d0>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8006c94:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8006c96:	230a      	movs	r3, #10
 8006c98:	73fb      	strb	r3, [r7, #15]
 8006c9a:	e005      	b.n	8006ca8 <USER_SPI_initialize+0x50>
 8006c9c:	20ff      	movs	r0, #255	; 0xff
 8006c9e:	f7ff fe79 	bl	8006994 <xchg_spi>
 8006ca2:	7bfb      	ldrb	r3, [r7, #15]
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	73fb      	strb	r3, [r7, #15]
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1f6      	bne.n	8006c9c <USER_SPI_initialize+0x44>

	ty = 0;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	2000      	movs	r0, #0
 8006cb6:	f7ff ff60 	bl	8006b7a <send_cmd>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	f040 808b 	bne.w	8006dd8 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8006cc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006cc6:	f7ff fe3b 	bl	8006940 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8006cca:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006cce:	2008      	movs	r0, #8
 8006cd0:	f7ff ff53 	bl	8006b7a <send_cmd>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d151      	bne.n	8006d7e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8006cda:	2300      	movs	r3, #0
 8006cdc:	73fb      	strb	r3, [r7, #15]
 8006cde:	e00d      	b.n	8006cfc <USER_SPI_initialize+0xa4>
 8006ce0:	7bfc      	ldrb	r4, [r7, #15]
 8006ce2:	20ff      	movs	r0, #255	; 0xff
 8006ce4:	f7ff fe56 	bl	8006994 <xchg_spi>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	461a      	mov	r2, r3
 8006cec:	f107 0310 	add.w	r3, r7, #16
 8006cf0:	4423      	add	r3, r4
 8006cf2:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006cf6:	7bfb      	ldrb	r3, [r7, #15]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	73fb      	strb	r3, [r7, #15]
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
 8006cfe:	2b03      	cmp	r3, #3
 8006d00:	d9ee      	bls.n	8006ce0 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8006d02:	7abb      	ldrb	r3, [r7, #10]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d167      	bne.n	8006dd8 <USER_SPI_initialize+0x180>
 8006d08:	7afb      	ldrb	r3, [r7, #11]
 8006d0a:	2baa      	cmp	r3, #170	; 0xaa
 8006d0c:	d164      	bne.n	8006dd8 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8006d0e:	bf00      	nop
 8006d10:	f7ff fe2a 	bl	8006968 <SPI_Timer_Status>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d007      	beq.n	8006d2a <USER_SPI_initialize+0xd2>
 8006d1a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006d1e:	20a9      	movs	r0, #169	; 0xa9
 8006d20:	f7ff ff2b 	bl	8006b7a <send_cmd>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d1f2      	bne.n	8006d10 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8006d2a:	f7ff fe1d 	bl	8006968 <SPI_Timer_Status>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d051      	beq.n	8006dd8 <USER_SPI_initialize+0x180>
 8006d34:	2100      	movs	r1, #0
 8006d36:	203a      	movs	r0, #58	; 0x3a
 8006d38:	f7ff ff1f 	bl	8006b7a <send_cmd>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d14a      	bne.n	8006dd8 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8006d42:	2300      	movs	r3, #0
 8006d44:	73fb      	strb	r3, [r7, #15]
 8006d46:	e00d      	b.n	8006d64 <USER_SPI_initialize+0x10c>
 8006d48:	7bfc      	ldrb	r4, [r7, #15]
 8006d4a:	20ff      	movs	r0, #255	; 0xff
 8006d4c:	f7ff fe22 	bl	8006994 <xchg_spi>
 8006d50:	4603      	mov	r3, r0
 8006d52:	461a      	mov	r2, r3
 8006d54:	f107 0310 	add.w	r3, r7, #16
 8006d58:	4423      	add	r3, r4
 8006d5a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006d5e:	7bfb      	ldrb	r3, [r7, #15]
 8006d60:	3301      	adds	r3, #1
 8006d62:	73fb      	strb	r3, [r7, #15]
 8006d64:	7bfb      	ldrb	r3, [r7, #15]
 8006d66:	2b03      	cmp	r3, #3
 8006d68:	d9ee      	bls.n	8006d48 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8006d6a:	7a3b      	ldrb	r3, [r7, #8]
 8006d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d001      	beq.n	8006d78 <USER_SPI_initialize+0x120>
 8006d74:	230c      	movs	r3, #12
 8006d76:	e000      	b.n	8006d7a <USER_SPI_initialize+0x122>
 8006d78:	2304      	movs	r3, #4
 8006d7a:	737b      	strb	r3, [r7, #13]
 8006d7c:	e02c      	b.n	8006dd8 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8006d7e:	2100      	movs	r1, #0
 8006d80:	20a9      	movs	r0, #169	; 0xa9
 8006d82:	f7ff fefa 	bl	8006b7a <send_cmd>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d804      	bhi.n	8006d96 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8006d8c:	2302      	movs	r3, #2
 8006d8e:	737b      	strb	r3, [r7, #13]
 8006d90:	23a9      	movs	r3, #169	; 0xa9
 8006d92:	73bb      	strb	r3, [r7, #14]
 8006d94:	e003      	b.n	8006d9e <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8006d96:	2301      	movs	r3, #1
 8006d98:	737b      	strb	r3, [r7, #13]
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8006d9e:	bf00      	nop
 8006da0:	f7ff fde2 	bl	8006968 <SPI_Timer_Status>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d007      	beq.n	8006dba <USER_SPI_initialize+0x162>
 8006daa:	7bbb      	ldrb	r3, [r7, #14]
 8006dac:	2100      	movs	r1, #0
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7ff fee3 	bl	8006b7a <send_cmd>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1f2      	bne.n	8006da0 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8006dba:	f7ff fdd5 	bl	8006968 <SPI_Timer_Status>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d007      	beq.n	8006dd4 <USER_SPI_initialize+0x17c>
 8006dc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006dc8:	2010      	movs	r0, #16
 8006dca:	f7ff fed6 	bl	8006b7a <send_cmd>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d001      	beq.n	8006dd8 <USER_SPI_initialize+0x180>
				ty = 0;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8006dd8:	4a14      	ldr	r2, [pc, #80]	; (8006e2c <USER_SPI_initialize+0x1d4>)
 8006dda:	7b7b      	ldrb	r3, [r7, #13]
 8006ddc:	7013      	strb	r3, [r2, #0]
	despiselect();
 8006dde:	f7ff fe49 	bl	8006a74 <despiselect>

	if (ty) {			/* OK */
 8006de2:	7b7b      	ldrb	r3, [r7, #13]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d012      	beq.n	8006e0e <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8006de8:	4b0f      	ldr	r3, [pc, #60]	; (8006e28 <USER_SPI_initialize+0x1d0>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006df2:	4b0d      	ldr	r3, [pc, #52]	; (8006e28 <USER_SPI_initialize+0x1d0>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f042 0210 	orr.w	r2, r2, #16
 8006dfa:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8006dfc:	4b09      	ldr	r3, [pc, #36]	; (8006e24 <USER_SPI_initialize+0x1cc>)
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	f023 0301 	bic.w	r3, r3, #1
 8006e06:	b2da      	uxtb	r2, r3
 8006e08:	4b06      	ldr	r3, [pc, #24]	; (8006e24 <USER_SPI_initialize+0x1cc>)
 8006e0a:	701a      	strb	r2, [r3, #0]
 8006e0c:	e002      	b.n	8006e14 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8006e0e:	4b05      	ldr	r3, [pc, #20]	; (8006e24 <USER_SPI_initialize+0x1cc>)
 8006e10:	2201      	movs	r2, #1
 8006e12:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8006e14:	4b03      	ldr	r3, [pc, #12]	; (8006e24 <USER_SPI_initialize+0x1cc>)
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	b2db      	uxtb	r3, r3
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd90      	pop	{r4, r7, pc}
 8006e22:	bf00      	nop
 8006e24:	20000030 	.word	0x20000030
 8006e28:	20005428 	.word	0x20005428
 8006e2c:	20000654 	.word	0x20000654

08006e30 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	4603      	mov	r3, r0
 8006e38:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8006e3a:	79fb      	ldrb	r3, [r7, #7]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d001      	beq.n	8006e44 <USER_SPI_status+0x14>
 8006e40:	2301      	movs	r3, #1
 8006e42:	e002      	b.n	8006e4a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8006e44:	4b04      	ldr	r3, [pc, #16]	; (8006e58 <USER_SPI_status+0x28>)
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	b2db      	uxtb	r3, r3
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	20000030 	.word	0x20000030

08006e5c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60b9      	str	r1, [r7, #8]
 8006e64:	607a      	str	r2, [r7, #4]
 8006e66:	603b      	str	r3, [r7, #0]
 8006e68:	4603      	mov	r3, r0
 8006e6a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d102      	bne.n	8006e78 <USER_SPI_read+0x1c>
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d101      	bne.n	8006e7c <USER_SPI_read+0x20>
 8006e78:	2304      	movs	r3, #4
 8006e7a:	e04d      	b.n	8006f18 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006e7c:	4b28      	ldr	r3, [pc, #160]	; (8006f20 <USER_SPI_read+0xc4>)
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d001      	beq.n	8006e8e <USER_SPI_read+0x32>
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e044      	b.n	8006f18 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8006e8e:	4b25      	ldr	r3, [pc, #148]	; (8006f24 <USER_SPI_read+0xc8>)
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	f003 0308 	and.w	r3, r3, #8
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d102      	bne.n	8006ea0 <USER_SPI_read+0x44>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	025b      	lsls	r3, r3, #9
 8006e9e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d111      	bne.n	8006eca <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8006ea6:	6879      	ldr	r1, [r7, #4]
 8006ea8:	2011      	movs	r0, #17
 8006eaa:	f7ff fe66 	bl	8006b7a <send_cmd>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d129      	bne.n	8006f08 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8006eb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006eb8:	68b8      	ldr	r0, [r7, #8]
 8006eba:	f7ff fe03 	bl	8006ac4 <rcvr_datablock>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d021      	beq.n	8006f08 <USER_SPI_read+0xac>
			count = 0;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	603b      	str	r3, [r7, #0]
 8006ec8:	e01e      	b.n	8006f08 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8006eca:	6879      	ldr	r1, [r7, #4]
 8006ecc:	2012      	movs	r0, #18
 8006ece:	f7ff fe54 	bl	8006b7a <send_cmd>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d117      	bne.n	8006f08 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8006ed8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006edc:	68b8      	ldr	r0, [r7, #8]
 8006ede:	f7ff fdf1 	bl	8006ac4 <rcvr_datablock>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00a      	beq.n	8006efe <USER_SPI_read+0xa2>
				buff += 512;
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006eee:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	603b      	str	r3, [r7, #0]
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1ed      	bne.n	8006ed8 <USER_SPI_read+0x7c>
 8006efc:	e000      	b.n	8006f00 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8006efe:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8006f00:	2100      	movs	r1, #0
 8006f02:	200c      	movs	r0, #12
 8006f04:	f7ff fe39 	bl	8006b7a <send_cmd>
		}
	}
	despiselect();
 8006f08:	f7ff fdb4 	bl	8006a74 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	bf14      	ite	ne
 8006f12:	2301      	movne	r3, #1
 8006f14:	2300      	moveq	r3, #0
 8006f16:	b2db      	uxtb	r3, r3
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	20000030 	.word	0x20000030
 8006f24:	20000654 	.word	0x20000654

08006f28 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60b9      	str	r1, [r7, #8]
 8006f30:	607a      	str	r2, [r7, #4]
 8006f32:	603b      	str	r3, [r7, #0]
 8006f34:	4603      	mov	r3, r0
 8006f36:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006f38:	7bfb      	ldrb	r3, [r7, #15]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d102      	bne.n	8006f44 <USER_SPI_write+0x1c>
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d101      	bne.n	8006f48 <USER_SPI_write+0x20>
 8006f44:	2304      	movs	r3, #4
 8006f46:	e063      	b.n	8007010 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8006f48:	4b33      	ldr	r3, [pc, #204]	; (8007018 <USER_SPI_write+0xf0>)
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d001      	beq.n	8006f5a <USER_SPI_write+0x32>
 8006f56:	2303      	movs	r3, #3
 8006f58:	e05a      	b.n	8007010 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8006f5a:	4b2f      	ldr	r3, [pc, #188]	; (8007018 <USER_SPI_write+0xf0>)
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	f003 0304 	and.w	r3, r3, #4
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d001      	beq.n	8006f6c <USER_SPI_write+0x44>
 8006f68:	2302      	movs	r3, #2
 8006f6a:	e051      	b.n	8007010 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8006f6c:	4b2b      	ldr	r3, [pc, #172]	; (800701c <USER_SPI_write+0xf4>)
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	f003 0308 	and.w	r3, r3, #8
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d102      	bne.n	8006f7e <USER_SPI_write+0x56>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	025b      	lsls	r3, r3, #9
 8006f7c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d110      	bne.n	8006fa6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8006f84:	6879      	ldr	r1, [r7, #4]
 8006f86:	2018      	movs	r0, #24
 8006f88:	f7ff fdf7 	bl	8006b7a <send_cmd>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d136      	bne.n	8007000 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8006f92:	21fe      	movs	r1, #254	; 0xfe
 8006f94:	68b8      	ldr	r0, [r7, #8]
 8006f96:	f7ff fdbe 	bl	8006b16 <xmit_datablock>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d02f      	beq.n	8007000 <USER_SPI_write+0xd8>
			count = 0;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	603b      	str	r3, [r7, #0]
 8006fa4:	e02c      	b.n	8007000 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8006fa6:	4b1d      	ldr	r3, [pc, #116]	; (800701c <USER_SPI_write+0xf4>)
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	f003 0306 	and.w	r3, r3, #6
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d003      	beq.n	8006fba <USER_SPI_write+0x92>
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	2097      	movs	r0, #151	; 0x97
 8006fb6:	f7ff fde0 	bl	8006b7a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8006fba:	6879      	ldr	r1, [r7, #4]
 8006fbc:	2019      	movs	r0, #25
 8006fbe:	f7ff fddc 	bl	8006b7a <send_cmd>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d11b      	bne.n	8007000 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8006fc8:	21fc      	movs	r1, #252	; 0xfc
 8006fca:	68b8      	ldr	r0, [r7, #8]
 8006fcc:	f7ff fda3 	bl	8006b16 <xmit_datablock>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00a      	beq.n	8006fec <USER_SPI_write+0xc4>
				buff += 512;
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006fdc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	603b      	str	r3, [r7, #0]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1ee      	bne.n	8006fc8 <USER_SPI_write+0xa0>
 8006fea:	e000      	b.n	8006fee <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8006fec:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8006fee:	21fd      	movs	r1, #253	; 0xfd
 8006ff0:	2000      	movs	r0, #0
 8006ff2:	f7ff fd90 	bl	8006b16 <xmit_datablock>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d101      	bne.n	8007000 <USER_SPI_write+0xd8>
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8007000:	f7ff fd38 	bl	8006a74 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	bf14      	ite	ne
 800700a:	2301      	movne	r3, #1
 800700c:	2300      	moveq	r3, #0
 800700e:	b2db      	uxtb	r3, r3
}
 8007010:	4618      	mov	r0, r3
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	20000030 	.word	0x20000030
 800701c:	20000654 	.word	0x20000654

08007020 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b08c      	sub	sp, #48	; 0x30
 8007024:	af00      	add	r7, sp, #0
 8007026:	4603      	mov	r3, r0
 8007028:	603a      	str	r2, [r7, #0]
 800702a:	71fb      	strb	r3, [r7, #7]
 800702c:	460b      	mov	r3, r1
 800702e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8007030:	79fb      	ldrb	r3, [r7, #7]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d001      	beq.n	800703a <USER_SPI_ioctl+0x1a>
 8007036:	2304      	movs	r3, #4
 8007038:	e15a      	b.n	80072f0 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800703a:	4baf      	ldr	r3, [pc, #700]	; (80072f8 <USER_SPI_ioctl+0x2d8>)
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	b2db      	uxtb	r3, r3
 8007040:	f003 0301 	and.w	r3, r3, #1
 8007044:	2b00      	cmp	r3, #0
 8007046:	d001      	beq.n	800704c <USER_SPI_ioctl+0x2c>
 8007048:	2303      	movs	r3, #3
 800704a:	e151      	b.n	80072f0 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8007052:	79bb      	ldrb	r3, [r7, #6]
 8007054:	2b04      	cmp	r3, #4
 8007056:	f200 8136 	bhi.w	80072c6 <USER_SPI_ioctl+0x2a6>
 800705a:	a201      	add	r2, pc, #4	; (adr r2, 8007060 <USER_SPI_ioctl+0x40>)
 800705c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007060:	08007075 	.word	0x08007075
 8007064:	08007089 	.word	0x08007089
 8007068:	080072c7 	.word	0x080072c7
 800706c:	08007135 	.word	0x08007135
 8007070:	0800722b 	.word	0x0800722b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8007074:	f7ff fd0c 	bl	8006a90 <spiselect>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	f000 8127 	beq.w	80072ce <USER_SPI_ioctl+0x2ae>
 8007080:	2300      	movs	r3, #0
 8007082:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8007086:	e122      	b.n	80072ce <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8007088:	2100      	movs	r1, #0
 800708a:	2009      	movs	r0, #9
 800708c:	f7ff fd75 	bl	8006b7a <send_cmd>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	f040 811d 	bne.w	80072d2 <USER_SPI_ioctl+0x2b2>
 8007098:	f107 030c 	add.w	r3, r7, #12
 800709c:	2110      	movs	r1, #16
 800709e:	4618      	mov	r0, r3
 80070a0:	f7ff fd10 	bl	8006ac4 <rcvr_datablock>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f000 8113 	beq.w	80072d2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80070ac:	7b3b      	ldrb	r3, [r7, #12]
 80070ae:	099b      	lsrs	r3, r3, #6
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d111      	bne.n	80070da <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80070b6:	7d7b      	ldrb	r3, [r7, #21]
 80070b8:	461a      	mov	r2, r3
 80070ba:	7d3b      	ldrb	r3, [r7, #20]
 80070bc:	021b      	lsls	r3, r3, #8
 80070be:	4413      	add	r3, r2
 80070c0:	461a      	mov	r2, r3
 80070c2:	7cfb      	ldrb	r3, [r7, #19]
 80070c4:	041b      	lsls	r3, r3, #16
 80070c6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80070ca:	4413      	add	r3, r2
 80070cc:	3301      	adds	r3, #1
 80070ce:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	029a      	lsls	r2, r3, #10
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	601a      	str	r2, [r3, #0]
 80070d8:	e028      	b.n	800712c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80070da:	7c7b      	ldrb	r3, [r7, #17]
 80070dc:	f003 030f 	and.w	r3, r3, #15
 80070e0:	b2da      	uxtb	r2, r3
 80070e2:	7dbb      	ldrb	r3, [r7, #22]
 80070e4:	09db      	lsrs	r3, r3, #7
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	4413      	add	r3, r2
 80070ea:	b2da      	uxtb	r2, r3
 80070ec:	7d7b      	ldrb	r3, [r7, #21]
 80070ee:	005b      	lsls	r3, r3, #1
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	f003 0306 	and.w	r3, r3, #6
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	4413      	add	r3, r2
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	3302      	adds	r3, #2
 80070fe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8007102:	7d3b      	ldrb	r3, [r7, #20]
 8007104:	099b      	lsrs	r3, r3, #6
 8007106:	b2db      	uxtb	r3, r3
 8007108:	461a      	mov	r2, r3
 800710a:	7cfb      	ldrb	r3, [r7, #19]
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	441a      	add	r2, r3
 8007110:	7cbb      	ldrb	r3, [r7, #18]
 8007112:	029b      	lsls	r3, r3, #10
 8007114:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007118:	4413      	add	r3, r2
 800711a:	3301      	adds	r3, #1
 800711c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800711e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007122:	3b09      	subs	r3, #9
 8007124:	69fa      	ldr	r2, [r7, #28]
 8007126:	409a      	lsls	r2, r3
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800712c:	2300      	movs	r3, #0
 800712e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8007132:	e0ce      	b.n	80072d2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8007134:	4b71      	ldr	r3, [pc, #452]	; (80072fc <USER_SPI_ioctl+0x2dc>)
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	f003 0304 	and.w	r3, r3, #4
 800713c:	2b00      	cmp	r3, #0
 800713e:	d031      	beq.n	80071a4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8007140:	2100      	movs	r1, #0
 8007142:	208d      	movs	r0, #141	; 0x8d
 8007144:	f7ff fd19 	bl	8006b7a <send_cmd>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	f040 80c3 	bne.w	80072d6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8007150:	20ff      	movs	r0, #255	; 0xff
 8007152:	f7ff fc1f 	bl	8006994 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8007156:	f107 030c 	add.w	r3, r7, #12
 800715a:	2110      	movs	r1, #16
 800715c:	4618      	mov	r0, r3
 800715e:	f7ff fcb1 	bl	8006ac4 <rcvr_datablock>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 80b6 	beq.w	80072d6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800716a:	2330      	movs	r3, #48	; 0x30
 800716c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007170:	e007      	b.n	8007182 <USER_SPI_ioctl+0x162>
 8007172:	20ff      	movs	r0, #255	; 0xff
 8007174:	f7ff fc0e 	bl	8006994 <xchg_spi>
 8007178:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800717c:	3b01      	subs	r3, #1
 800717e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007182:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1f3      	bne.n	8007172 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800718a:	7dbb      	ldrb	r3, [r7, #22]
 800718c:	091b      	lsrs	r3, r3, #4
 800718e:	b2db      	uxtb	r3, r3
 8007190:	461a      	mov	r2, r3
 8007192:	2310      	movs	r3, #16
 8007194:	fa03 f202 	lsl.w	r2, r3, r2
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800719c:	2300      	movs	r3, #0
 800719e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80071a2:	e098      	b.n	80072d6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80071a4:	2100      	movs	r1, #0
 80071a6:	2009      	movs	r0, #9
 80071a8:	f7ff fce7 	bl	8006b7a <send_cmd>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	f040 8091 	bne.w	80072d6 <USER_SPI_ioctl+0x2b6>
 80071b4:	f107 030c 	add.w	r3, r7, #12
 80071b8:	2110      	movs	r1, #16
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7ff fc82 	bl	8006ac4 <rcvr_datablock>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f000 8087 	beq.w	80072d6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80071c8:	4b4c      	ldr	r3, [pc, #304]	; (80072fc <USER_SPI_ioctl+0x2dc>)
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	f003 0302 	and.w	r3, r3, #2
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d012      	beq.n	80071fa <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80071d4:	7dbb      	ldrb	r3, [r7, #22]
 80071d6:	005b      	lsls	r3, r3, #1
 80071d8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80071dc:	7dfa      	ldrb	r2, [r7, #23]
 80071de:	09d2      	lsrs	r2, r2, #7
 80071e0:	b2d2      	uxtb	r2, r2
 80071e2:	4413      	add	r3, r2
 80071e4:	1c5a      	adds	r2, r3, #1
 80071e6:	7e7b      	ldrb	r3, [r7, #25]
 80071e8:	099b      	lsrs	r3, r3, #6
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	3b01      	subs	r3, #1
 80071ee:	fa02 f303 	lsl.w	r3, r2, r3
 80071f2:	461a      	mov	r2, r3
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	601a      	str	r2, [r3, #0]
 80071f8:	e013      	b.n	8007222 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80071fa:	7dbb      	ldrb	r3, [r7, #22]
 80071fc:	109b      	asrs	r3, r3, #2
 80071fe:	b29b      	uxth	r3, r3
 8007200:	f003 031f 	and.w	r3, r3, #31
 8007204:	3301      	adds	r3, #1
 8007206:	7dfa      	ldrb	r2, [r7, #23]
 8007208:	00d2      	lsls	r2, r2, #3
 800720a:	f002 0218 	and.w	r2, r2, #24
 800720e:	7df9      	ldrb	r1, [r7, #23]
 8007210:	0949      	lsrs	r1, r1, #5
 8007212:	b2c9      	uxtb	r1, r1
 8007214:	440a      	add	r2, r1
 8007216:	3201      	adds	r2, #1
 8007218:	fb02 f303 	mul.w	r3, r2, r3
 800721c:	461a      	mov	r2, r3
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8007222:	2300      	movs	r3, #0
 8007224:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8007228:	e055      	b.n	80072d6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800722a:	4b34      	ldr	r3, [pc, #208]	; (80072fc <USER_SPI_ioctl+0x2dc>)
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	f003 0306 	and.w	r3, r3, #6
 8007232:	2b00      	cmp	r3, #0
 8007234:	d051      	beq.n	80072da <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007236:	f107 020c 	add.w	r2, r7, #12
 800723a:	79fb      	ldrb	r3, [r7, #7]
 800723c:	210b      	movs	r1, #11
 800723e:	4618      	mov	r0, r3
 8007240:	f7ff feee 	bl	8007020 <USER_SPI_ioctl>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d149      	bne.n	80072de <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800724a:	7b3b      	ldrb	r3, [r7, #12]
 800724c:	099b      	lsrs	r3, r3, #6
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b00      	cmp	r3, #0
 8007252:	d104      	bne.n	800725e <USER_SPI_ioctl+0x23e>
 8007254:	7dbb      	ldrb	r3, [r7, #22]
 8007256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800725a:	2b00      	cmp	r3, #0
 800725c:	d041      	beq.n	80072e2 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	623b      	str	r3, [r7, #32]
 8007262:	6a3b      	ldr	r3, [r7, #32]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	62bb      	str	r3, [r7, #40]	; 0x28
 8007268:	6a3b      	ldr	r3, [r7, #32]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800726e:	4b23      	ldr	r3, [pc, #140]	; (80072fc <USER_SPI_ioctl+0x2dc>)
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	f003 0308 	and.w	r3, r3, #8
 8007276:	2b00      	cmp	r3, #0
 8007278:	d105      	bne.n	8007286 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800727a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727c:	025b      	lsls	r3, r3, #9
 800727e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007282:	025b      	lsls	r3, r3, #9
 8007284:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8007286:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007288:	2020      	movs	r0, #32
 800728a:	f7ff fc76 	bl	8006b7a <send_cmd>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d128      	bne.n	80072e6 <USER_SPI_ioctl+0x2c6>
 8007294:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007296:	2021      	movs	r0, #33	; 0x21
 8007298:	f7ff fc6f 	bl	8006b7a <send_cmd>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d121      	bne.n	80072e6 <USER_SPI_ioctl+0x2c6>
 80072a2:	2100      	movs	r1, #0
 80072a4:	2026      	movs	r0, #38	; 0x26
 80072a6:	f7ff fc68 	bl	8006b7a <send_cmd>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d11a      	bne.n	80072e6 <USER_SPI_ioctl+0x2c6>
 80072b0:	f247 5030 	movw	r0, #30000	; 0x7530
 80072b4:	f7ff fbbb 	bl	8006a2e <wait_ready>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d013      	beq.n	80072e6 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80072be:	2300      	movs	r3, #0
 80072c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80072c4:	e00f      	b.n	80072e6 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80072c6:	2304      	movs	r3, #4
 80072c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80072cc:	e00c      	b.n	80072e8 <USER_SPI_ioctl+0x2c8>
		break;
 80072ce:	bf00      	nop
 80072d0:	e00a      	b.n	80072e8 <USER_SPI_ioctl+0x2c8>
		break;
 80072d2:	bf00      	nop
 80072d4:	e008      	b.n	80072e8 <USER_SPI_ioctl+0x2c8>
		break;
 80072d6:	bf00      	nop
 80072d8:	e006      	b.n	80072e8 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80072da:	bf00      	nop
 80072dc:	e004      	b.n	80072e8 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80072de:	bf00      	nop
 80072e0:	e002      	b.n	80072e8 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80072e2:	bf00      	nop
 80072e4:	e000      	b.n	80072e8 <USER_SPI_ioctl+0x2c8>
		break;
 80072e6:	bf00      	nop
	}

	despiselect();
 80072e8:	f7ff fbc4 	bl	8006a74 <despiselect>

	return res;
 80072ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3730      	adds	r7, #48	; 0x30
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	20000030 	.word	0x20000030
 80072fc:	20000654 	.word	0x20000654

08007300 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	4603      	mov	r3, r0
 8007308:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800730a:	79fb      	ldrb	r3, [r7, #7]
 800730c:	4a08      	ldr	r2, [pc, #32]	; (8007330 <disk_status+0x30>)
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	4413      	add	r3, r2
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	79fa      	ldrb	r2, [r7, #7]
 8007318:	4905      	ldr	r1, [pc, #20]	; (8007330 <disk_status+0x30>)
 800731a:	440a      	add	r2, r1
 800731c:	7a12      	ldrb	r2, [r2, #8]
 800731e:	4610      	mov	r0, r2
 8007320:	4798      	blx	r3
 8007322:	4603      	mov	r3, r0
 8007324:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007326:	7bfb      	ldrb	r3, [r7, #15]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	20000680 	.word	0x20000680

08007334 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	4603      	mov	r3, r0
 800733c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800733e:	2300      	movs	r3, #0
 8007340:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007342:	79fb      	ldrb	r3, [r7, #7]
 8007344:	4a0d      	ldr	r2, [pc, #52]	; (800737c <disk_initialize+0x48>)
 8007346:	5cd3      	ldrb	r3, [r2, r3]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d111      	bne.n	8007370 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800734c:	79fb      	ldrb	r3, [r7, #7]
 800734e:	4a0b      	ldr	r2, [pc, #44]	; (800737c <disk_initialize+0x48>)
 8007350:	2101      	movs	r1, #1
 8007352:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007354:	79fb      	ldrb	r3, [r7, #7]
 8007356:	4a09      	ldr	r2, [pc, #36]	; (800737c <disk_initialize+0x48>)
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	4413      	add	r3, r2
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	79fa      	ldrb	r2, [r7, #7]
 8007362:	4906      	ldr	r1, [pc, #24]	; (800737c <disk_initialize+0x48>)
 8007364:	440a      	add	r2, r1
 8007366:	7a12      	ldrb	r2, [r2, #8]
 8007368:	4610      	mov	r0, r2
 800736a:	4798      	blx	r3
 800736c:	4603      	mov	r3, r0
 800736e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007370:	7bfb      	ldrb	r3, [r7, #15]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	20000680 	.word	0x20000680

08007380 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007380:	b590      	push	{r4, r7, lr}
 8007382:	b087      	sub	sp, #28
 8007384:	af00      	add	r7, sp, #0
 8007386:	60b9      	str	r1, [r7, #8]
 8007388:	607a      	str	r2, [r7, #4]
 800738a:	603b      	str	r3, [r7, #0]
 800738c:	4603      	mov	r3, r0
 800738e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007390:	7bfb      	ldrb	r3, [r7, #15]
 8007392:	4a0a      	ldr	r2, [pc, #40]	; (80073bc <disk_read+0x3c>)
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4413      	add	r3, r2
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	689c      	ldr	r4, [r3, #8]
 800739c:	7bfb      	ldrb	r3, [r7, #15]
 800739e:	4a07      	ldr	r2, [pc, #28]	; (80073bc <disk_read+0x3c>)
 80073a0:	4413      	add	r3, r2
 80073a2:	7a18      	ldrb	r0, [r3, #8]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	68b9      	ldr	r1, [r7, #8]
 80073aa:	47a0      	blx	r4
 80073ac:	4603      	mov	r3, r0
 80073ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80073b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	371c      	adds	r7, #28
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd90      	pop	{r4, r7, pc}
 80073ba:	bf00      	nop
 80073bc:	20000680 	.word	0x20000680

080073c0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80073c0:	b590      	push	{r4, r7, lr}
 80073c2:	b087      	sub	sp, #28
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60b9      	str	r1, [r7, #8]
 80073c8:	607a      	str	r2, [r7, #4]
 80073ca:	603b      	str	r3, [r7, #0]
 80073cc:	4603      	mov	r3, r0
 80073ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80073d0:	7bfb      	ldrb	r3, [r7, #15]
 80073d2:	4a0a      	ldr	r2, [pc, #40]	; (80073fc <disk_write+0x3c>)
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	4413      	add	r3, r2
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	68dc      	ldr	r4, [r3, #12]
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
 80073de:	4a07      	ldr	r2, [pc, #28]	; (80073fc <disk_write+0x3c>)
 80073e0:	4413      	add	r3, r2
 80073e2:	7a18      	ldrb	r0, [r3, #8]
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	68b9      	ldr	r1, [r7, #8]
 80073ea:	47a0      	blx	r4
 80073ec:	4603      	mov	r3, r0
 80073ee:	75fb      	strb	r3, [r7, #23]
  return res;
 80073f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	371c      	adds	r7, #28
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd90      	pop	{r4, r7, pc}
 80073fa:	bf00      	nop
 80073fc:	20000680 	.word	0x20000680

08007400 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	4603      	mov	r3, r0
 8007408:	603a      	str	r2, [r7, #0]
 800740a:	71fb      	strb	r3, [r7, #7]
 800740c:	460b      	mov	r3, r1
 800740e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007410:	79fb      	ldrb	r3, [r7, #7]
 8007412:	4a09      	ldr	r2, [pc, #36]	; (8007438 <disk_ioctl+0x38>)
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	4413      	add	r3, r2
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	79fa      	ldrb	r2, [r7, #7]
 800741e:	4906      	ldr	r1, [pc, #24]	; (8007438 <disk_ioctl+0x38>)
 8007420:	440a      	add	r2, r1
 8007422:	7a10      	ldrb	r0, [r2, #8]
 8007424:	79b9      	ldrb	r1, [r7, #6]
 8007426:	683a      	ldr	r2, [r7, #0]
 8007428:	4798      	blx	r3
 800742a:	4603      	mov	r3, r0
 800742c:	73fb      	strb	r3, [r7, #15]
  return res;
 800742e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007430:	4618      	mov	r0, r3
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	20000680 	.word	0x20000680

0800743c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	3301      	adds	r3, #1
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800744c:	89fb      	ldrh	r3, [r7, #14]
 800744e:	021b      	lsls	r3, r3, #8
 8007450:	b21a      	sxth	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	b21b      	sxth	r3, r3
 8007458:	4313      	orrs	r3, r2
 800745a:	b21b      	sxth	r3, r3
 800745c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800745e:	89fb      	ldrh	r3, [r7, #14]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3714      	adds	r7, #20
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	3303      	adds	r3, #3
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	021b      	lsls	r3, r3, #8
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	3202      	adds	r2, #2
 8007484:	7812      	ldrb	r2, [r2, #0]
 8007486:	4313      	orrs	r3, r2
 8007488:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	021b      	lsls	r3, r3, #8
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	3201      	adds	r2, #1
 8007492:	7812      	ldrb	r2, [r2, #0]
 8007494:	4313      	orrs	r3, r2
 8007496:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	021b      	lsls	r3, r3, #8
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	7812      	ldrb	r2, [r2, #0]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	60fb      	str	r3, [r7, #12]
	return rv;
 80074a4:	68fb      	ldr	r3, [r7, #12]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80074b2:	b480      	push	{r7}
 80074b4:	b083      	sub	sp, #12
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	460b      	mov	r3, r1
 80074bc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	1c5a      	adds	r2, r3, #1
 80074c2:	607a      	str	r2, [r7, #4]
 80074c4:	887a      	ldrh	r2, [r7, #2]
 80074c6:	b2d2      	uxtb	r2, r2
 80074c8:	701a      	strb	r2, [r3, #0]
 80074ca:	887b      	ldrh	r3, [r7, #2]
 80074cc:	0a1b      	lsrs	r3, r3, #8
 80074ce:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	1c5a      	adds	r2, r3, #1
 80074d4:	607a      	str	r2, [r7, #4]
 80074d6:	887a      	ldrh	r2, [r7, #2]
 80074d8:	b2d2      	uxtb	r2, r2
 80074da:	701a      	strb	r2, [r3, #0]
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	1c5a      	adds	r2, r3, #1
 80074f6:	607a      	str	r2, [r7, #4]
 80074f8:	683a      	ldr	r2, [r7, #0]
 80074fa:	b2d2      	uxtb	r2, r2
 80074fc:	701a      	strb	r2, [r3, #0]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	0a1b      	lsrs	r3, r3, #8
 8007502:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	1c5a      	adds	r2, r3, #1
 8007508:	607a      	str	r2, [r7, #4]
 800750a:	683a      	ldr	r2, [r7, #0]
 800750c:	b2d2      	uxtb	r2, r2
 800750e:	701a      	strb	r2, [r3, #0]
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	0a1b      	lsrs	r3, r3, #8
 8007514:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	1c5a      	adds	r2, r3, #1
 800751a:	607a      	str	r2, [r7, #4]
 800751c:	683a      	ldr	r2, [r7, #0]
 800751e:	b2d2      	uxtb	r2, r2
 8007520:	701a      	strb	r2, [r3, #0]
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	0a1b      	lsrs	r3, r3, #8
 8007526:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	1c5a      	adds	r2, r3, #1
 800752c:	607a      	str	r2, [r7, #4]
 800752e:	683a      	ldr	r2, [r7, #0]
 8007530:	b2d2      	uxtb	r2, r2
 8007532:	701a      	strb	r2, [r3, #0]
}
 8007534:	bf00      	nop
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007540:	b480      	push	{r7}
 8007542:	b087      	sub	sp, #28
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00d      	beq.n	8007576 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800755a:	693a      	ldr	r2, [r7, #16]
 800755c:	1c53      	adds	r3, r2, #1
 800755e:	613b      	str	r3, [r7, #16]
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	1c59      	adds	r1, r3, #1
 8007564:	6179      	str	r1, [r7, #20]
 8007566:	7812      	ldrb	r2, [r2, #0]
 8007568:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	3b01      	subs	r3, #1
 800756e:	607b      	str	r3, [r7, #4]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1f1      	bne.n	800755a <mem_cpy+0x1a>
	}
}
 8007576:	bf00      	nop
 8007578:	371c      	adds	r7, #28
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007582:	b480      	push	{r7}
 8007584:	b087      	sub	sp, #28
 8007586:	af00      	add	r7, sp, #0
 8007588:	60f8      	str	r0, [r7, #12]
 800758a:	60b9      	str	r1, [r7, #8]
 800758c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	1c5a      	adds	r2, r3, #1
 8007596:	617a      	str	r2, [r7, #20]
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	b2d2      	uxtb	r2, r2
 800759c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	3b01      	subs	r3, #1
 80075a2:	607b      	str	r3, [r7, #4]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d1f3      	bne.n	8007592 <mem_set+0x10>
}
 80075aa:	bf00      	nop
 80075ac:	bf00      	nop
 80075ae:	371c      	adds	r7, #28
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80075b8:	b480      	push	{r7}
 80075ba:	b089      	sub	sp, #36	; 0x24
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	61fb      	str	r3, [r7, #28]
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80075cc:	2300      	movs	r3, #0
 80075ce:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	1c5a      	adds	r2, r3, #1
 80075d4:	61fa      	str	r2, [r7, #28]
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	4619      	mov	r1, r3
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	1c5a      	adds	r2, r3, #1
 80075de:	61ba      	str	r2, [r7, #24]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	1acb      	subs	r3, r1, r3
 80075e4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	3b01      	subs	r3, #1
 80075ea:	607b      	str	r3, [r7, #4]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d002      	beq.n	80075f8 <mem_cmp+0x40>
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d0eb      	beq.n	80075d0 <mem_cmp+0x18>

	return r;
 80075f8:	697b      	ldr	r3, [r7, #20]
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3724      	adds	r7, #36	; 0x24
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr

08007606 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007606:	b480      	push	{r7}
 8007608:	b083      	sub	sp, #12
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
 800760e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007610:	e002      	b.n	8007618 <chk_chr+0x12>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	3301      	adds	r3, #1
 8007616:	607b      	str	r3, [r7, #4]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d005      	beq.n	800762c <chk_chr+0x26>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	461a      	mov	r2, r3
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	4293      	cmp	r3, r2
 800762a:	d1f2      	bne.n	8007612 <chk_chr+0xc>
	return *str;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	781b      	ldrb	r3, [r3, #0]
}
 8007630:	4618      	mov	r0, r3
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d009      	beq.n	800765e <lock_fs+0x22>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	4618      	mov	r0, r3
 8007650:	f002 f8e8 	bl	8009824 <ff_req_grant>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d001      	beq.n	800765e <lock_fs+0x22>
 800765a:	2301      	movs	r3, #1
 800765c:	e000      	b.n	8007660 <lock_fs+0x24>
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3708      	adds	r7, #8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	460b      	mov	r3, r1
 8007672:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00d      	beq.n	8007696 <unlock_fs+0x2e>
 800767a:	78fb      	ldrb	r3, [r7, #3]
 800767c:	2b0c      	cmp	r3, #12
 800767e:	d00a      	beq.n	8007696 <unlock_fs+0x2e>
 8007680:	78fb      	ldrb	r3, [r7, #3]
 8007682:	2b0b      	cmp	r3, #11
 8007684:	d007      	beq.n	8007696 <unlock_fs+0x2e>
 8007686:	78fb      	ldrb	r3, [r7, #3]
 8007688:	2b0f      	cmp	r3, #15
 800768a:	d004      	beq.n	8007696 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	4618      	mov	r0, r3
 8007692:	f002 f8dc 	bl	800984e <ff_rel_grant>
	}
}
 8007696:	bf00      	nop
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
	...

080076a0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b085      	sub	sp, #20
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80076aa:	2300      	movs	r3, #0
 80076ac:	60bb      	str	r3, [r7, #8]
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	60fb      	str	r3, [r7, #12]
 80076b2:	e029      	b.n	8007708 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80076b4:	4a27      	ldr	r2, [pc, #156]	; (8007754 <chk_lock+0xb4>)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	011b      	lsls	r3, r3, #4
 80076ba:	4413      	add	r3, r2
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d01d      	beq.n	80076fe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80076c2:	4a24      	ldr	r2, [pc, #144]	; (8007754 <chk_lock+0xb4>)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	011b      	lsls	r3, r3, #4
 80076c8:	4413      	add	r3, r2
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d116      	bne.n	8007702 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80076d4:	4a1f      	ldr	r2, [pc, #124]	; (8007754 <chk_lock+0xb4>)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	011b      	lsls	r3, r3, #4
 80076da:	4413      	add	r3, r2
 80076dc:	3304      	adds	r3, #4
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d10c      	bne.n	8007702 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80076e8:	4a1a      	ldr	r2, [pc, #104]	; (8007754 <chk_lock+0xb4>)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	011b      	lsls	r3, r3, #4
 80076ee:	4413      	add	r3, r2
 80076f0:	3308      	adds	r3, #8
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d102      	bne.n	8007702 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80076fc:	e007      	b.n	800770e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80076fe:	2301      	movs	r3, #1
 8007700:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	3301      	adds	r3, #1
 8007706:	60fb      	str	r3, [r7, #12]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2b01      	cmp	r3, #1
 800770c:	d9d2      	bls.n	80076b4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2b02      	cmp	r3, #2
 8007712:	d109      	bne.n	8007728 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d102      	bne.n	8007720 <chk_lock+0x80>
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	2b02      	cmp	r3, #2
 800771e:	d101      	bne.n	8007724 <chk_lock+0x84>
 8007720:	2300      	movs	r3, #0
 8007722:	e010      	b.n	8007746 <chk_lock+0xa6>
 8007724:	2312      	movs	r3, #18
 8007726:	e00e      	b.n	8007746 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d108      	bne.n	8007740 <chk_lock+0xa0>
 800772e:	4a09      	ldr	r2, [pc, #36]	; (8007754 <chk_lock+0xb4>)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	011b      	lsls	r3, r3, #4
 8007734:	4413      	add	r3, r2
 8007736:	330c      	adds	r3, #12
 8007738:	881b      	ldrh	r3, [r3, #0]
 800773a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800773e:	d101      	bne.n	8007744 <chk_lock+0xa4>
 8007740:	2310      	movs	r3, #16
 8007742:	e000      	b.n	8007746 <chk_lock+0xa6>
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	20000660 	.word	0x20000660

08007758 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800775e:	2300      	movs	r3, #0
 8007760:	607b      	str	r3, [r7, #4]
 8007762:	e002      	b.n	800776a <enq_lock+0x12>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	3301      	adds	r3, #1
 8007768:	607b      	str	r3, [r7, #4]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2b01      	cmp	r3, #1
 800776e:	d806      	bhi.n	800777e <enq_lock+0x26>
 8007770:	4a09      	ldr	r2, [pc, #36]	; (8007798 <enq_lock+0x40>)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	011b      	lsls	r3, r3, #4
 8007776:	4413      	add	r3, r2
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d1f2      	bne.n	8007764 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2b02      	cmp	r3, #2
 8007782:	bf14      	ite	ne
 8007784:	2301      	movne	r3, #1
 8007786:	2300      	moveq	r3, #0
 8007788:	b2db      	uxtb	r3, r3
}
 800778a:	4618      	mov	r0, r3
 800778c:	370c      	adds	r7, #12
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	20000660 	.word	0x20000660

0800779c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800779c:	b480      	push	{r7}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80077a6:	2300      	movs	r3, #0
 80077a8:	60fb      	str	r3, [r7, #12]
 80077aa:	e01f      	b.n	80077ec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80077ac:	4a41      	ldr	r2, [pc, #260]	; (80078b4 <inc_lock+0x118>)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	011b      	lsls	r3, r3, #4
 80077b2:	4413      	add	r3, r2
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d113      	bne.n	80077e6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80077be:	4a3d      	ldr	r2, [pc, #244]	; (80078b4 <inc_lock+0x118>)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	011b      	lsls	r3, r3, #4
 80077c4:	4413      	add	r3, r2
 80077c6:	3304      	adds	r3, #4
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d109      	bne.n	80077e6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80077d2:	4a38      	ldr	r2, [pc, #224]	; (80078b4 <inc_lock+0x118>)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	011b      	lsls	r3, r3, #4
 80077d8:	4413      	add	r3, r2
 80077da:	3308      	adds	r3, #8
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d006      	beq.n	80077f4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	3301      	adds	r3, #1
 80077ea:	60fb      	str	r3, [r7, #12]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d9dc      	bls.n	80077ac <inc_lock+0x10>
 80077f2:	e000      	b.n	80077f6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80077f4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d132      	bne.n	8007862 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80077fc:	2300      	movs	r3, #0
 80077fe:	60fb      	str	r3, [r7, #12]
 8007800:	e002      	b.n	8007808 <inc_lock+0x6c>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	3301      	adds	r3, #1
 8007806:	60fb      	str	r3, [r7, #12]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2b01      	cmp	r3, #1
 800780c:	d806      	bhi.n	800781c <inc_lock+0x80>
 800780e:	4a29      	ldr	r2, [pc, #164]	; (80078b4 <inc_lock+0x118>)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	011b      	lsls	r3, r3, #4
 8007814:	4413      	add	r3, r2
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1f2      	bne.n	8007802 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2b02      	cmp	r3, #2
 8007820:	d101      	bne.n	8007826 <inc_lock+0x8a>
 8007822:	2300      	movs	r3, #0
 8007824:	e040      	b.n	80078a8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	4922      	ldr	r1, [pc, #136]	; (80078b4 <inc_lock+0x118>)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	011b      	lsls	r3, r3, #4
 8007830:	440b      	add	r3, r1
 8007832:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	689a      	ldr	r2, [r3, #8]
 8007838:	491e      	ldr	r1, [pc, #120]	; (80078b4 <inc_lock+0x118>)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	011b      	lsls	r3, r3, #4
 800783e:	440b      	add	r3, r1
 8007840:	3304      	adds	r3, #4
 8007842:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	695a      	ldr	r2, [r3, #20]
 8007848:	491a      	ldr	r1, [pc, #104]	; (80078b4 <inc_lock+0x118>)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	011b      	lsls	r3, r3, #4
 800784e:	440b      	add	r3, r1
 8007850:	3308      	adds	r3, #8
 8007852:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007854:	4a17      	ldr	r2, [pc, #92]	; (80078b4 <inc_lock+0x118>)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	011b      	lsls	r3, r3, #4
 800785a:	4413      	add	r3, r2
 800785c:	330c      	adds	r3, #12
 800785e:	2200      	movs	r2, #0
 8007860:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d009      	beq.n	800787c <inc_lock+0xe0>
 8007868:	4a12      	ldr	r2, [pc, #72]	; (80078b4 <inc_lock+0x118>)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	011b      	lsls	r3, r3, #4
 800786e:	4413      	add	r3, r2
 8007870:	330c      	adds	r3, #12
 8007872:	881b      	ldrh	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d001      	beq.n	800787c <inc_lock+0xe0>
 8007878:	2300      	movs	r3, #0
 800787a:	e015      	b.n	80078a8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d108      	bne.n	8007894 <inc_lock+0xf8>
 8007882:	4a0c      	ldr	r2, [pc, #48]	; (80078b4 <inc_lock+0x118>)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	011b      	lsls	r3, r3, #4
 8007888:	4413      	add	r3, r2
 800788a:	330c      	adds	r3, #12
 800788c:	881b      	ldrh	r3, [r3, #0]
 800788e:	3301      	adds	r3, #1
 8007890:	b29a      	uxth	r2, r3
 8007892:	e001      	b.n	8007898 <inc_lock+0xfc>
 8007894:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007898:	4906      	ldr	r1, [pc, #24]	; (80078b4 <inc_lock+0x118>)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	011b      	lsls	r3, r3, #4
 800789e:	440b      	add	r3, r1
 80078a0:	330c      	adds	r3, #12
 80078a2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	3301      	adds	r3, #1
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3714      	adds	r7, #20
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr
 80078b4:	20000660 	.word	0x20000660

080078b8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	3b01      	subs	r3, #1
 80078c4:	607b      	str	r3, [r7, #4]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d825      	bhi.n	8007918 <dec_lock+0x60>
		n = Files[i].ctr;
 80078cc:	4a17      	ldr	r2, [pc, #92]	; (800792c <dec_lock+0x74>)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	011b      	lsls	r3, r3, #4
 80078d2:	4413      	add	r3, r2
 80078d4:	330c      	adds	r3, #12
 80078d6:	881b      	ldrh	r3, [r3, #0]
 80078d8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80078da:	89fb      	ldrh	r3, [r7, #14]
 80078dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078e0:	d101      	bne.n	80078e6 <dec_lock+0x2e>
 80078e2:	2300      	movs	r3, #0
 80078e4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80078e6:	89fb      	ldrh	r3, [r7, #14]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d002      	beq.n	80078f2 <dec_lock+0x3a>
 80078ec:	89fb      	ldrh	r3, [r7, #14]
 80078ee:	3b01      	subs	r3, #1
 80078f0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80078f2:	4a0e      	ldr	r2, [pc, #56]	; (800792c <dec_lock+0x74>)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	011b      	lsls	r3, r3, #4
 80078f8:	4413      	add	r3, r2
 80078fa:	330c      	adds	r3, #12
 80078fc:	89fa      	ldrh	r2, [r7, #14]
 80078fe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007900:	89fb      	ldrh	r3, [r7, #14]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d105      	bne.n	8007912 <dec_lock+0x5a>
 8007906:	4a09      	ldr	r2, [pc, #36]	; (800792c <dec_lock+0x74>)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	011b      	lsls	r3, r3, #4
 800790c:	4413      	add	r3, r2
 800790e:	2200      	movs	r2, #0
 8007910:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007912:	2300      	movs	r3, #0
 8007914:	737b      	strb	r3, [r7, #13]
 8007916:	e001      	b.n	800791c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007918:	2302      	movs	r3, #2
 800791a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800791c:	7b7b      	ldrb	r3, [r7, #13]
}
 800791e:	4618      	mov	r0, r3
 8007920:	3714      	adds	r7, #20
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	20000660 	.word	0x20000660

08007930 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007938:	2300      	movs	r3, #0
 800793a:	60fb      	str	r3, [r7, #12]
 800793c:	e010      	b.n	8007960 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800793e:	4a0d      	ldr	r2, [pc, #52]	; (8007974 <clear_lock+0x44>)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	011b      	lsls	r3, r3, #4
 8007944:	4413      	add	r3, r2
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	429a      	cmp	r2, r3
 800794c:	d105      	bne.n	800795a <clear_lock+0x2a>
 800794e:	4a09      	ldr	r2, [pc, #36]	; (8007974 <clear_lock+0x44>)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	011b      	lsls	r3, r3, #4
 8007954:	4413      	add	r3, r2
 8007956:	2200      	movs	r2, #0
 8007958:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	3301      	adds	r3, #1
 800795e:	60fb      	str	r3, [r7, #12]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d9eb      	bls.n	800793e <clear_lock+0xe>
	}
}
 8007966:	bf00      	nop
 8007968:	bf00      	nop
 800796a:	3714      	adds	r7, #20
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr
 8007974:	20000660 	.word	0x20000660

08007978 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b086      	sub	sp, #24
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007980:	2300      	movs	r3, #0
 8007982:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	78db      	ldrb	r3, [r3, #3]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d034      	beq.n	80079f6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007990:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	7858      	ldrb	r0, [r3, #1]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800799c:	2301      	movs	r3, #1
 800799e:	697a      	ldr	r2, [r7, #20]
 80079a0:	f7ff fd0e 	bl	80073c0 <disk_write>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d002      	beq.n	80079b0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	73fb      	strb	r3, [r7, #15]
 80079ae:	e022      	b.n	80079f6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ba:	697a      	ldr	r2, [r7, #20]
 80079bc:	1ad2      	subs	r2, r2, r3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	69db      	ldr	r3, [r3, #28]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d217      	bcs.n	80079f6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	789b      	ldrb	r3, [r3, #2]
 80079ca:	613b      	str	r3, [r7, #16]
 80079cc:	e010      	b.n	80079f0 <sync_window+0x78>
					wsect += fs->fsize;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	69db      	ldr	r3, [r3, #28]
 80079d2:	697a      	ldr	r2, [r7, #20]
 80079d4:	4413      	add	r3, r2
 80079d6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	7858      	ldrb	r0, [r3, #1]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80079e2:	2301      	movs	r3, #1
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	f7ff fceb 	bl	80073c0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	3b01      	subs	r3, #1
 80079ee:	613b      	str	r3, [r7, #16]
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d8eb      	bhi.n	80079ce <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80079f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3718      	adds	r7, #24
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a12:	683a      	ldr	r2, [r7, #0]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d01b      	beq.n	8007a50 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f7ff ffad 	bl	8007978 <sync_window>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007a22:	7bfb      	ldrb	r3, [r7, #15]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d113      	bne.n	8007a50 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	7858      	ldrb	r0, [r3, #1]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007a32:	2301      	movs	r3, #1
 8007a34:	683a      	ldr	r2, [r7, #0]
 8007a36:	f7ff fca3 	bl	8007380 <disk_read>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d004      	beq.n	8007a4a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007a40:	f04f 33ff 	mov.w	r3, #4294967295
 8007a44:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	683a      	ldr	r2, [r7, #0]
 8007a4e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8007a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
	...

08007a5c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f7ff ff87 	bl	8007978 <sync_window>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007a6e:	7bfb      	ldrb	r3, [r7, #15]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d158      	bne.n	8007b26 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	2b03      	cmp	r3, #3
 8007a7a:	d148      	bne.n	8007b0e <sync_fs+0xb2>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	791b      	ldrb	r3, [r3, #4]
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d144      	bne.n	8007b0e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	3334      	adds	r3, #52	; 0x34
 8007a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7ff fd77 	bl	8007582 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	3334      	adds	r3, #52	; 0x34
 8007a98:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007a9c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7ff fd06 	bl	80074b2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	3334      	adds	r3, #52	; 0x34
 8007aaa:	4921      	ldr	r1, [pc, #132]	; (8007b30 <sync_fs+0xd4>)
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7ff fd1b 	bl	80074e8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	3334      	adds	r3, #52	; 0x34
 8007ab6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007aba:	491e      	ldr	r1, [pc, #120]	; (8007b34 <sync_fs+0xd8>)
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7ff fd13 	bl	80074e8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	3334      	adds	r3, #52	; 0x34
 8007ac6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	4610      	mov	r0, r2
 8007ad2:	f7ff fd09 	bl	80074e8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	3334      	adds	r3, #52	; 0x34
 8007ada:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	4610      	mov	r0, r2
 8007ae6:	f7ff fcff 	bl	80074e8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	1c5a      	adds	r2, r3, #1
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	7858      	ldrb	r0, [r3, #1]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b02:	2301      	movs	r3, #1
 8007b04:	f7ff fc5c 	bl	80073c0 <disk_write>
			fs->fsi_flag = 0;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	785b      	ldrb	r3, [r3, #1]
 8007b12:	2200      	movs	r2, #0
 8007b14:	2100      	movs	r1, #0
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7ff fc72 	bl	8007400 <disk_ioctl>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d001      	beq.n	8007b26 <sync_fs+0xca>
 8007b22:	2301      	movs	r3, #1
 8007b24:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	41615252 	.word	0x41615252
 8007b34:	61417272 	.word	0x61417272

08007b38 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	3b02      	subs	r3, #2
 8007b46:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	3b02      	subs	r3, #2
 8007b4e:	683a      	ldr	r2, [r7, #0]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d301      	bcc.n	8007b58 <clust2sect+0x20>
 8007b54:	2300      	movs	r3, #0
 8007b56:	e008      	b.n	8007b6a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	895b      	ldrh	r3, [r3, #10]
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	fb03 f202 	mul.w	r2, r3, r2
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b68:	4413      	add	r3, r2
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	370c      	adds	r7, #12
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b086      	sub	sp, #24
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d904      	bls.n	8007b96 <get_fat+0x20>
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	683a      	ldr	r2, [r7, #0]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d302      	bcc.n	8007b9c <get_fat+0x26>
		val = 1;	/* Internal error */
 8007b96:	2301      	movs	r3, #1
 8007b98:	617b      	str	r3, [r7, #20]
 8007b9a:	e08f      	b.n	8007cbc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007ba0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	2b03      	cmp	r3, #3
 8007ba8:	d062      	beq.n	8007c70 <get_fat+0xfa>
 8007baa:	2b03      	cmp	r3, #3
 8007bac:	dc7c      	bgt.n	8007ca8 <get_fat+0x132>
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d002      	beq.n	8007bb8 <get_fat+0x42>
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d042      	beq.n	8007c3c <get_fat+0xc6>
 8007bb6:	e077      	b.n	8007ca8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	60fb      	str	r3, [r7, #12]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	085b      	lsrs	r3, r3, #1
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	0a5b      	lsrs	r3, r3, #9
 8007bce:	4413      	add	r3, r2
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	6938      	ldr	r0, [r7, #16]
 8007bd4:	f7ff ff14 	bl	8007a00 <move_window>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d167      	bne.n	8007cae <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	1c5a      	adds	r2, r3, #1
 8007be2:	60fa      	str	r2, [r7, #12]
 8007be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	4413      	add	r3, r2
 8007bec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007bf0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	0a5b      	lsrs	r3, r3, #9
 8007bfa:	4413      	add	r3, r2
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	6938      	ldr	r0, [r7, #16]
 8007c00:	f7ff fefe 	bl	8007a00 <move_window>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d153      	bne.n	8007cb2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	4413      	add	r3, r2
 8007c14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c18:	021b      	lsls	r3, r3, #8
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	f003 0301 	and.w	r3, r3, #1
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d002      	beq.n	8007c32 <get_fat+0xbc>
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	091b      	lsrs	r3, r3, #4
 8007c30:	e002      	b.n	8007c38 <get_fat+0xc2>
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c38:	617b      	str	r3, [r7, #20]
			break;
 8007c3a:	e03f      	b.n	8007cbc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	0a1b      	lsrs	r3, r3, #8
 8007c44:	4413      	add	r3, r2
 8007c46:	4619      	mov	r1, r3
 8007c48:	6938      	ldr	r0, [r7, #16]
 8007c4a:	f7ff fed9 	bl	8007a00 <move_window>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d130      	bne.n	8007cb6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	005b      	lsls	r3, r3, #1
 8007c5e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007c62:	4413      	add	r3, r2
 8007c64:	4618      	mov	r0, r3
 8007c66:	f7ff fbe9 	bl	800743c <ld_word>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	617b      	str	r3, [r7, #20]
			break;
 8007c6e:	e025      	b.n	8007cbc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	09db      	lsrs	r3, r3, #7
 8007c78:	4413      	add	r3, r2
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6938      	ldr	r0, [r7, #16]
 8007c7e:	f7ff febf 	bl	8007a00 <move_window>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d118      	bne.n	8007cba <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007c96:	4413      	add	r3, r2
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7ff fbe7 	bl	800746c <ld_dword>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007ca4:	617b      	str	r3, [r7, #20]
			break;
 8007ca6:	e009      	b.n	8007cbc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007ca8:	2301      	movs	r3, #1
 8007caa:	617b      	str	r3, [r7, #20]
 8007cac:	e006      	b.n	8007cbc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007cae:	bf00      	nop
 8007cb0:	e004      	b.n	8007cbc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007cb2:	bf00      	nop
 8007cb4:	e002      	b.n	8007cbc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007cb6:	bf00      	nop
 8007cb8:	e000      	b.n	8007cbc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007cba:	bf00      	nop
		}
	}

	return val;
 8007cbc:	697b      	ldr	r3, [r7, #20]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3718      	adds	r7, #24
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007cc6:	b590      	push	{r4, r7, lr}
 8007cc8:	b089      	sub	sp, #36	; 0x24
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	60f8      	str	r0, [r7, #12]
 8007cce:	60b9      	str	r1, [r7, #8]
 8007cd0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007cd2:	2302      	movs	r3, #2
 8007cd4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	f240 80d2 	bls.w	8007e82 <put_fat+0x1bc>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	68ba      	ldr	r2, [r7, #8]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	f080 80cc 	bcs.w	8007e82 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	2b03      	cmp	r3, #3
 8007cf0:	f000 8096 	beq.w	8007e20 <put_fat+0x15a>
 8007cf4:	2b03      	cmp	r3, #3
 8007cf6:	f300 80cd 	bgt.w	8007e94 <put_fat+0x1ce>
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d002      	beq.n	8007d04 <put_fat+0x3e>
 8007cfe:	2b02      	cmp	r3, #2
 8007d00:	d06e      	beq.n	8007de0 <put_fat+0x11a>
 8007d02:	e0c7      	b.n	8007e94 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	61bb      	str	r3, [r7, #24]
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	085b      	lsrs	r3, r3, #1
 8007d0c:	69ba      	ldr	r2, [r7, #24]
 8007d0e:	4413      	add	r3, r2
 8007d10:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	0a5b      	lsrs	r3, r3, #9
 8007d1a:	4413      	add	r3, r2
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f7ff fe6e 	bl	8007a00 <move_window>
 8007d24:	4603      	mov	r3, r0
 8007d26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007d28:	7ffb      	ldrb	r3, [r7, #31]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f040 80ab 	bne.w	8007e86 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	1c59      	adds	r1, r3, #1
 8007d3a:	61b9      	str	r1, [r7, #24]
 8007d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d40:	4413      	add	r3, r2
 8007d42:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	f003 0301 	and.w	r3, r3, #1
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00d      	beq.n	8007d6a <put_fat+0xa4>
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	b25b      	sxtb	r3, r3
 8007d54:	f003 030f 	and.w	r3, r3, #15
 8007d58:	b25a      	sxtb	r2, r3
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	011b      	lsls	r3, r3, #4
 8007d60:	b25b      	sxtb	r3, r3
 8007d62:	4313      	orrs	r3, r2
 8007d64:	b25b      	sxtb	r3, r3
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	e001      	b.n	8007d6e <put_fat+0xa8>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2201      	movs	r2, #1
 8007d76:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	0a5b      	lsrs	r3, r3, #9
 8007d80:	4413      	add	r3, r2
 8007d82:	4619      	mov	r1, r3
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f7ff fe3b 	bl	8007a00 <move_window>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007d8e:	7ffb      	ldrb	r3, [r7, #31]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d17a      	bne.n	8007e8a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007da0:	4413      	add	r3, r2
 8007da2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	f003 0301 	and.w	r3, r3, #1
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d003      	beq.n	8007db6 <put_fat+0xf0>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	091b      	lsrs	r3, r3, #4
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	e00e      	b.n	8007dd4 <put_fat+0x10e>
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	b25b      	sxtb	r3, r3
 8007dbc:	f023 030f 	bic.w	r3, r3, #15
 8007dc0:	b25a      	sxtb	r2, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	0a1b      	lsrs	r3, r3, #8
 8007dc6:	b25b      	sxtb	r3, r3
 8007dc8:	f003 030f 	and.w	r3, r3, #15
 8007dcc:	b25b      	sxtb	r3, r3
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	b25b      	sxtb	r3, r3
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	697a      	ldr	r2, [r7, #20]
 8007dd6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	70da      	strb	r2, [r3, #3]
			break;
 8007dde:	e059      	b.n	8007e94 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	0a1b      	lsrs	r3, r3, #8
 8007de8:	4413      	add	r3, r2
 8007dea:	4619      	mov	r1, r3
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f7ff fe07 	bl	8007a00 <move_window>
 8007df2:	4603      	mov	r3, r0
 8007df4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007df6:	7ffb      	ldrb	r3, [r7, #31]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d148      	bne.n	8007e8e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	005b      	lsls	r3, r3, #1
 8007e06:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007e0a:	4413      	add	r3, r2
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	b292      	uxth	r2, r2
 8007e10:	4611      	mov	r1, r2
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7ff fb4d 	bl	80074b2 <st_word>
			fs->wflag = 1;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	70da      	strb	r2, [r3, #3]
			break;
 8007e1e:	e039      	b.n	8007e94 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	09db      	lsrs	r3, r3, #7
 8007e28:	4413      	add	r3, r2
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	68f8      	ldr	r0, [r7, #12]
 8007e2e:	f7ff fde7 	bl	8007a00 <move_window>
 8007e32:	4603      	mov	r3, r0
 8007e34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e36:	7ffb      	ldrb	r3, [r7, #31]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d12a      	bne.n	8007e92 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007e50:	4413      	add	r3, r2
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7ff fb0a 	bl	800746c <ld_dword>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007e5e:	4323      	orrs	r3, r4
 8007e60:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007e70:	4413      	add	r3, r2
 8007e72:	6879      	ldr	r1, [r7, #4]
 8007e74:	4618      	mov	r0, r3
 8007e76:	f7ff fb37 	bl	80074e8 <st_dword>
			fs->wflag = 1;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	70da      	strb	r2, [r3, #3]
			break;
 8007e80:	e008      	b.n	8007e94 <put_fat+0x1ce>
		}
	}
 8007e82:	bf00      	nop
 8007e84:	e006      	b.n	8007e94 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007e86:	bf00      	nop
 8007e88:	e004      	b.n	8007e94 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007e8a:	bf00      	nop
 8007e8c:	e002      	b.n	8007e94 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007e8e:	bf00      	nop
 8007e90:	e000      	b.n	8007e94 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007e92:	bf00      	nop
	return res;
 8007e94:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3724      	adds	r7, #36	; 0x24
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd90      	pop	{r4, r7, pc}

08007e9e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b088      	sub	sp, #32
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	60f8      	str	r0, [r7, #12]
 8007ea6:	60b9      	str	r1, [r7, #8]
 8007ea8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d904      	bls.n	8007ec4 <remove_chain+0x26>
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	699b      	ldr	r3, [r3, #24]
 8007ebe:	68ba      	ldr	r2, [r7, #8]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d301      	bcc.n	8007ec8 <remove_chain+0x2a>
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	e04b      	b.n	8007f60 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d00c      	beq.n	8007ee8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007ece:	f04f 32ff 	mov.w	r2, #4294967295
 8007ed2:	6879      	ldr	r1, [r7, #4]
 8007ed4:	69b8      	ldr	r0, [r7, #24]
 8007ed6:	f7ff fef6 	bl	8007cc6 <put_fat>
 8007eda:	4603      	mov	r3, r0
 8007edc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007ede:	7ffb      	ldrb	r3, [r7, #31]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d001      	beq.n	8007ee8 <remove_chain+0x4a>
 8007ee4:	7ffb      	ldrb	r3, [r7, #31]
 8007ee6:	e03b      	b.n	8007f60 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007ee8:	68b9      	ldr	r1, [r7, #8]
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	f7ff fe43 	bl	8007b76 <get_fat>
 8007ef0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d031      	beq.n	8007f5c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d101      	bne.n	8007f02 <remove_chain+0x64>
 8007efe:	2302      	movs	r3, #2
 8007f00:	e02e      	b.n	8007f60 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f08:	d101      	bne.n	8007f0e <remove_chain+0x70>
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e028      	b.n	8007f60 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007f0e:	2200      	movs	r2, #0
 8007f10:	68b9      	ldr	r1, [r7, #8]
 8007f12:	69b8      	ldr	r0, [r7, #24]
 8007f14:	f7ff fed7 	bl	8007cc6 <put_fat>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007f1c:	7ffb      	ldrb	r3, [r7, #31]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d001      	beq.n	8007f26 <remove_chain+0x88>
 8007f22:	7ffb      	ldrb	r3, [r7, #31]
 8007f24:	e01c      	b.n	8007f60 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	695a      	ldr	r2, [r3, #20]
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	699b      	ldr	r3, [r3, #24]
 8007f2e:	3b02      	subs	r3, #2
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d20b      	bcs.n	8007f4c <remove_chain+0xae>
			fs->free_clst++;
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	695b      	ldr	r3, [r3, #20]
 8007f38:	1c5a      	adds	r2, r3, #1
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	791b      	ldrb	r3, [r3, #4]
 8007f42:	f043 0301 	orr.w	r3, r3, #1
 8007f46:	b2da      	uxtb	r2, r3
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	699b      	ldr	r3, [r3, #24]
 8007f54:	68ba      	ldr	r2, [r7, #8]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d3c6      	bcc.n	8007ee8 <remove_chain+0x4a>
 8007f5a:	e000      	b.n	8007f5e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007f5c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3720      	adds	r7, #32
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b088      	sub	sp, #32
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d10d      	bne.n	8007f9a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d004      	beq.n	8007f94 <create_chain+0x2c>
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	699b      	ldr	r3, [r3, #24]
 8007f8e:	69ba      	ldr	r2, [r7, #24]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d31b      	bcc.n	8007fcc <create_chain+0x64>
 8007f94:	2301      	movs	r3, #1
 8007f96:	61bb      	str	r3, [r7, #24]
 8007f98:	e018      	b.n	8007fcc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007f9a:	6839      	ldr	r1, [r7, #0]
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f7ff fdea 	bl	8007b76 <get_fat>
 8007fa2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d801      	bhi.n	8007fae <create_chain+0x46>
 8007faa:	2301      	movs	r3, #1
 8007fac:	e070      	b.n	8008090 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fb4:	d101      	bne.n	8007fba <create_chain+0x52>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	e06a      	b.n	8008090 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	699b      	ldr	r3, [r3, #24]
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d201      	bcs.n	8007fc8 <create_chain+0x60>
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	e063      	b.n	8008090 <create_chain+0x128>
		scl = clst;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	699b      	ldr	r3, [r3, #24]
 8007fda:	69fa      	ldr	r2, [r7, #28]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d307      	bcc.n	8007ff0 <create_chain+0x88>
				ncl = 2;
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007fe4:	69fa      	ldr	r2, [r7, #28]
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d901      	bls.n	8007ff0 <create_chain+0x88>
 8007fec:	2300      	movs	r3, #0
 8007fee:	e04f      	b.n	8008090 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007ff0:	69f9      	ldr	r1, [r7, #28]
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f7ff fdbf 	bl	8007b76 <get_fat>
 8007ff8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d00e      	beq.n	800801e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d003      	beq.n	800800e <create_chain+0xa6>
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800800c:	d101      	bne.n	8008012 <create_chain+0xaa>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	e03e      	b.n	8008090 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008012:	69fa      	ldr	r2, [r7, #28]
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	429a      	cmp	r2, r3
 8008018:	d1da      	bne.n	8007fd0 <create_chain+0x68>
 800801a:	2300      	movs	r3, #0
 800801c:	e038      	b.n	8008090 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800801e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008020:	f04f 32ff 	mov.w	r2, #4294967295
 8008024:	69f9      	ldr	r1, [r7, #28]
 8008026:	6938      	ldr	r0, [r7, #16]
 8008028:	f7ff fe4d 	bl	8007cc6 <put_fat>
 800802c:	4603      	mov	r3, r0
 800802e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008030:	7dfb      	ldrb	r3, [r7, #23]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d109      	bne.n	800804a <create_chain+0xe2>
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d006      	beq.n	800804a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800803c:	69fa      	ldr	r2, [r7, #28]
 800803e:	6839      	ldr	r1, [r7, #0]
 8008040:	6938      	ldr	r0, [r7, #16]
 8008042:	f7ff fe40 	bl	8007cc6 <put_fat>
 8008046:	4603      	mov	r3, r0
 8008048:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800804a:	7dfb      	ldrb	r3, [r7, #23]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d116      	bne.n	800807e <create_chain+0x116>
		fs->last_clst = ncl;
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	69fa      	ldr	r2, [r7, #28]
 8008054:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	695a      	ldr	r2, [r3, #20]
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	699b      	ldr	r3, [r3, #24]
 800805e:	3b02      	subs	r3, #2
 8008060:	429a      	cmp	r2, r3
 8008062:	d804      	bhi.n	800806e <create_chain+0x106>
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	695b      	ldr	r3, [r3, #20]
 8008068:	1e5a      	subs	r2, r3, #1
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	791b      	ldrb	r3, [r3, #4]
 8008072:	f043 0301 	orr.w	r3, r3, #1
 8008076:	b2da      	uxtb	r2, r3
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	711a      	strb	r2, [r3, #4]
 800807c:	e007      	b.n	800808e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800807e:	7dfb      	ldrb	r3, [r7, #23]
 8008080:	2b01      	cmp	r3, #1
 8008082:	d102      	bne.n	800808a <create_chain+0x122>
 8008084:	f04f 33ff 	mov.w	r3, #4294967295
 8008088:	e000      	b.n	800808c <create_chain+0x124>
 800808a:	2301      	movs	r3, #1
 800808c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800808e:	69fb      	ldr	r3, [r7, #28]
}
 8008090:	4618      	mov	r0, r3
 8008092:	3720      	adds	r7, #32
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008098:	b480      	push	{r7}
 800809a:	b087      	sub	sp, #28
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ac:	3304      	adds	r3, #4
 80080ae:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	0a5b      	lsrs	r3, r3, #9
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	8952      	ldrh	r2, [r2, #10]
 80080b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80080bc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	1d1a      	adds	r2, r3, #4
 80080c2:	613a      	str	r2, [r7, #16]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d101      	bne.n	80080d2 <clmt_clust+0x3a>
 80080ce:	2300      	movs	r3, #0
 80080d0:	e010      	b.n	80080f4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80080d2:	697a      	ldr	r2, [r7, #20]
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d307      	bcc.n	80080ea <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80080da:	697a      	ldr	r2, [r7, #20]
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	1ad3      	subs	r3, r2, r3
 80080e0:	617b      	str	r3, [r7, #20]
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	3304      	adds	r3, #4
 80080e6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80080e8:	e7e9      	b.n	80080be <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80080ea:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	4413      	add	r3, r2
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	371c      	adds	r7, #28
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b086      	sub	sp, #24
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008116:	d204      	bcs.n	8008122 <dir_sdi+0x22>
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	f003 031f 	and.w	r3, r3, #31
 800811e:	2b00      	cmp	r3, #0
 8008120:	d001      	beq.n	8008126 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008122:	2302      	movs	r3, #2
 8008124:	e063      	b.n	80081ee <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	683a      	ldr	r2, [r7, #0]
 800812a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d106      	bne.n	8008146 <dir_sdi+0x46>
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	2b02      	cmp	r3, #2
 800813e:	d902      	bls.n	8008146 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008144:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d10c      	bne.n	8008166 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	095b      	lsrs	r3, r3, #5
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	8912      	ldrh	r2, [r2, #8]
 8008154:	4293      	cmp	r3, r2
 8008156:	d301      	bcc.n	800815c <dir_sdi+0x5c>
 8008158:	2302      	movs	r3, #2
 800815a:	e048      	b.n	80081ee <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	61da      	str	r2, [r3, #28]
 8008164:	e029      	b.n	80081ba <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	895b      	ldrh	r3, [r3, #10]
 800816a:	025b      	lsls	r3, r3, #9
 800816c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800816e:	e019      	b.n	80081a4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6979      	ldr	r1, [r7, #20]
 8008174:	4618      	mov	r0, r3
 8008176:	f7ff fcfe 	bl	8007b76 <get_fat>
 800817a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008182:	d101      	bne.n	8008188 <dir_sdi+0x88>
 8008184:	2301      	movs	r3, #1
 8008186:	e032      	b.n	80081ee <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	2b01      	cmp	r3, #1
 800818c:	d904      	bls.n	8008198 <dir_sdi+0x98>
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	697a      	ldr	r2, [r7, #20]
 8008194:	429a      	cmp	r2, r3
 8008196:	d301      	bcc.n	800819c <dir_sdi+0x9c>
 8008198:	2302      	movs	r3, #2
 800819a:	e028      	b.n	80081ee <dir_sdi+0xee>
			ofs -= csz;
 800819c:	683a      	ldr	r2, [r7, #0]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	1ad3      	subs	r3, r2, r3
 80081a2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80081a4:	683a      	ldr	r2, [r7, #0]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d2e1      	bcs.n	8008170 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80081ac:	6979      	ldr	r1, [r7, #20]
 80081ae:	6938      	ldr	r0, [r7, #16]
 80081b0:	f7ff fcc2 	bl	8007b38 <clust2sect>
 80081b4:	4602      	mov	r2, r0
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	697a      	ldr	r2, [r7, #20]
 80081be:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	69db      	ldr	r3, [r3, #28]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d101      	bne.n	80081cc <dir_sdi+0xcc>
 80081c8:	2302      	movs	r3, #2
 80081ca:	e010      	b.n	80081ee <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	69da      	ldr	r2, [r3, #28]
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	0a5b      	lsrs	r3, r3, #9
 80081d4:	441a      	add	r2, r3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081e6:	441a      	add	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3718      	adds	r7, #24
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b086      	sub	sp, #24
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
 80081fe:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	695b      	ldr	r3, [r3, #20]
 800820a:	3320      	adds	r3, #32
 800820c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	69db      	ldr	r3, [r3, #28]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d003      	beq.n	800821e <dir_next+0x28>
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800821c:	d301      	bcc.n	8008222 <dir_next+0x2c>
 800821e:	2304      	movs	r3, #4
 8008220:	e0aa      	b.n	8008378 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008228:	2b00      	cmp	r3, #0
 800822a:	f040 8098 	bne.w	800835e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	69db      	ldr	r3, [r3, #28]
 8008232:	1c5a      	adds	r2, r3, #1
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	699b      	ldr	r3, [r3, #24]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10b      	bne.n	8008258 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	095b      	lsrs	r3, r3, #5
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	8912      	ldrh	r2, [r2, #8]
 8008248:	4293      	cmp	r3, r2
 800824a:	f0c0 8088 	bcc.w	800835e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	61da      	str	r2, [r3, #28]
 8008254:	2304      	movs	r3, #4
 8008256:	e08f      	b.n	8008378 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	0a5b      	lsrs	r3, r3, #9
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	8952      	ldrh	r2, [r2, #10]
 8008260:	3a01      	subs	r2, #1
 8008262:	4013      	ands	r3, r2
 8008264:	2b00      	cmp	r3, #0
 8008266:	d17a      	bne.n	800835e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	699b      	ldr	r3, [r3, #24]
 800826e:	4619      	mov	r1, r3
 8008270:	4610      	mov	r0, r2
 8008272:	f7ff fc80 	bl	8007b76 <get_fat>
 8008276:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d801      	bhi.n	8008282 <dir_next+0x8c>
 800827e:	2302      	movs	r3, #2
 8008280:	e07a      	b.n	8008378 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008288:	d101      	bne.n	800828e <dir_next+0x98>
 800828a:	2301      	movs	r3, #1
 800828c:	e074      	b.n	8008378 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	699b      	ldr	r3, [r3, #24]
 8008292:	697a      	ldr	r2, [r7, #20]
 8008294:	429a      	cmp	r2, r3
 8008296:	d358      	bcc.n	800834a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d104      	bne.n	80082a8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	61da      	str	r2, [r3, #28]
 80082a4:	2304      	movs	r3, #4
 80082a6:	e067      	b.n	8008378 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	699b      	ldr	r3, [r3, #24]
 80082ae:	4619      	mov	r1, r3
 80082b0:	4610      	mov	r0, r2
 80082b2:	f7ff fe59 	bl	8007f68 <create_chain>
 80082b6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d101      	bne.n	80082c2 <dir_next+0xcc>
 80082be:	2307      	movs	r3, #7
 80082c0:	e05a      	b.n	8008378 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d101      	bne.n	80082cc <dir_next+0xd6>
 80082c8:	2302      	movs	r3, #2
 80082ca:	e055      	b.n	8008378 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082d2:	d101      	bne.n	80082d8 <dir_next+0xe2>
 80082d4:	2301      	movs	r3, #1
 80082d6:	e04f      	b.n	8008378 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f7ff fb4d 	bl	8007978 <sync_window>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d001      	beq.n	80082e8 <dir_next+0xf2>
 80082e4:	2301      	movs	r3, #1
 80082e6:	e047      	b.n	8008378 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	3334      	adds	r3, #52	; 0x34
 80082ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082f0:	2100      	movs	r1, #0
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7ff f945 	bl	8007582 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80082f8:	2300      	movs	r3, #0
 80082fa:	613b      	str	r3, [r7, #16]
 80082fc:	6979      	ldr	r1, [r7, #20]
 80082fe:	68f8      	ldr	r0, [r7, #12]
 8008300:	f7ff fc1a 	bl	8007b38 <clust2sect>
 8008304:	4602      	mov	r2, r0
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	631a      	str	r2, [r3, #48]	; 0x30
 800830a:	e012      	b.n	8008332 <dir_next+0x13c>
						fs->wflag = 1;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2201      	movs	r2, #1
 8008310:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f7ff fb30 	bl	8007978 <sync_window>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d001      	beq.n	8008322 <dir_next+0x12c>
 800831e:	2301      	movs	r3, #1
 8008320:	e02a      	b.n	8008378 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	3301      	adds	r3, #1
 8008326:	613b      	str	r3, [r7, #16]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800832c:	1c5a      	adds	r2, r3, #1
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	631a      	str	r2, [r3, #48]	; 0x30
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	895b      	ldrh	r3, [r3, #10]
 8008336:	461a      	mov	r2, r3
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	4293      	cmp	r3, r2
 800833c:	d3e6      	bcc.n	800830c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	1ad2      	subs	r2, r2, r3
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	697a      	ldr	r2, [r7, #20]
 800834e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008350:	6979      	ldr	r1, [r7, #20]
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f7ff fbf0 	bl	8007b38 <clust2sect>
 8008358:	4602      	mov	r2, r0
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	68ba      	ldr	r2, [r7, #8]
 8008362:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008370:	441a      	add	r2, r3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	3718      	adds	r7, #24
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b086      	sub	sp, #24
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008390:	2100      	movs	r1, #0
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f7ff feb4 	bl	8008100 <dir_sdi>
 8008398:	4603      	mov	r3, r0
 800839a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800839c:	7dfb      	ldrb	r3, [r7, #23]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d12b      	bne.n	80083fa <dir_alloc+0x7a>
		n = 0;
 80083a2:	2300      	movs	r3, #0
 80083a4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	69db      	ldr	r3, [r3, #28]
 80083aa:	4619      	mov	r1, r3
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f7ff fb27 	bl	8007a00 <move_window>
 80083b2:	4603      	mov	r3, r0
 80083b4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80083b6:	7dfb      	ldrb	r3, [r7, #23]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d11d      	bne.n	80083f8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a1b      	ldr	r3, [r3, #32]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	2be5      	cmp	r3, #229	; 0xe5
 80083c4:	d004      	beq.n	80083d0 <dir_alloc+0x50>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a1b      	ldr	r3, [r3, #32]
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d107      	bne.n	80083e0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	3301      	adds	r3, #1
 80083d4:	613b      	str	r3, [r7, #16]
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	429a      	cmp	r2, r3
 80083dc:	d102      	bne.n	80083e4 <dir_alloc+0x64>
 80083de:	e00c      	b.n	80083fa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80083e0:	2300      	movs	r3, #0
 80083e2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80083e4:	2101      	movs	r1, #1
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f7ff ff05 	bl	80081f6 <dir_next>
 80083ec:	4603      	mov	r3, r0
 80083ee:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80083f0:	7dfb      	ldrb	r3, [r7, #23]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d0d7      	beq.n	80083a6 <dir_alloc+0x26>
 80083f6:	e000      	b.n	80083fa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80083f8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80083fa:	7dfb      	ldrb	r3, [r7, #23]
 80083fc:	2b04      	cmp	r3, #4
 80083fe:	d101      	bne.n	8008404 <dir_alloc+0x84>
 8008400:	2307      	movs	r3, #7
 8008402:	75fb      	strb	r3, [r7, #23]
	return res;
 8008404:	7dfb      	ldrb	r3, [r7, #23]
}
 8008406:	4618      	mov	r0, r3
 8008408:	3718      	adds	r7, #24
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b084      	sub	sp, #16
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	331a      	adds	r3, #26
 800841c:	4618      	mov	r0, r3
 800841e:	f7ff f80d 	bl	800743c <ld_word>
 8008422:	4603      	mov	r3, r0
 8008424:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	2b03      	cmp	r3, #3
 800842c:	d109      	bne.n	8008442 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	3314      	adds	r3, #20
 8008432:	4618      	mov	r0, r3
 8008434:	f7ff f802 	bl	800743c <ld_word>
 8008438:	4603      	mov	r3, r0
 800843a:	041b      	lsls	r3, r3, #16
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	4313      	orrs	r3, r2
 8008440:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008442:	68fb      	ldr	r3, [r7, #12]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3710      	adds	r7, #16
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	331a      	adds	r3, #26
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	b292      	uxth	r2, r2
 8008460:	4611      	mov	r1, r2
 8008462:	4618      	mov	r0, r3
 8008464:	f7ff f825 	bl	80074b2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	2b03      	cmp	r3, #3
 800846e:	d109      	bne.n	8008484 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	f103 0214 	add.w	r2, r3, #20
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	0c1b      	lsrs	r3, r3, #16
 800847a:	b29b      	uxth	r3, r3
 800847c:	4619      	mov	r1, r3
 800847e:	4610      	mov	r0, r2
 8008480:	f7ff f817 	bl	80074b2 <st_word>
	}
}
 8008484:	bf00      	nop
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b086      	sub	sp, #24
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800849a:	2100      	movs	r1, #0
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f7ff fe2f 	bl	8008100 <dir_sdi>
 80084a2:	4603      	mov	r3, r0
 80084a4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80084a6:	7dfb      	ldrb	r3, [r7, #23]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d001      	beq.n	80084b0 <dir_find+0x24>
 80084ac:	7dfb      	ldrb	r3, [r7, #23]
 80084ae:	e03e      	b.n	800852e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	69db      	ldr	r3, [r3, #28]
 80084b4:	4619      	mov	r1, r3
 80084b6:	6938      	ldr	r0, [r7, #16]
 80084b8:	f7ff faa2 	bl	8007a00 <move_window>
 80084bc:	4603      	mov	r3, r0
 80084be:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80084c0:	7dfb      	ldrb	r3, [r7, #23]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d12f      	bne.n	8008526 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a1b      	ldr	r3, [r3, #32]
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80084ce:	7bfb      	ldrb	r3, [r7, #15]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d102      	bne.n	80084da <dir_find+0x4e>
 80084d4:	2304      	movs	r3, #4
 80084d6:	75fb      	strb	r3, [r7, #23]
 80084d8:	e028      	b.n	800852c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a1b      	ldr	r3, [r3, #32]
 80084de:	330b      	adds	r3, #11
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084e6:	b2da      	uxtb	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a1b      	ldr	r3, [r3, #32]
 80084f0:	330b      	adds	r3, #11
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	f003 0308 	and.w	r3, r3, #8
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d10a      	bne.n	8008512 <dir_find+0x86>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6a18      	ldr	r0, [r3, #32]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	3324      	adds	r3, #36	; 0x24
 8008504:	220b      	movs	r2, #11
 8008506:	4619      	mov	r1, r3
 8008508:	f7ff f856 	bl	80075b8 <mem_cmp>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00b      	beq.n	800852a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008512:	2100      	movs	r1, #0
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f7ff fe6e 	bl	80081f6 <dir_next>
 800851a:	4603      	mov	r3, r0
 800851c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800851e:	7dfb      	ldrb	r3, [r7, #23]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d0c5      	beq.n	80084b0 <dir_find+0x24>
 8008524:	e002      	b.n	800852c <dir_find+0xa0>
		if (res != FR_OK) break;
 8008526:	bf00      	nop
 8008528:	e000      	b.n	800852c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800852a:	bf00      	nop

	return res;
 800852c:	7dfb      	ldrb	r3, [r7, #23]
}
 800852e:	4618      	mov	r0, r3
 8008530:	3718      	adds	r7, #24
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b084      	sub	sp, #16
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008544:	2101      	movs	r1, #1
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f7ff ff1a 	bl	8008380 <dir_alloc>
 800854c:	4603      	mov	r3, r0
 800854e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008550:	7bfb      	ldrb	r3, [r7, #15]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d11c      	bne.n	8008590 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	69db      	ldr	r3, [r3, #28]
 800855a:	4619      	mov	r1, r3
 800855c:	68b8      	ldr	r0, [r7, #8]
 800855e:	f7ff fa4f 	bl	8007a00 <move_window>
 8008562:	4603      	mov	r3, r0
 8008564:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008566:	7bfb      	ldrb	r3, [r7, #15]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d111      	bne.n	8008590 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a1b      	ldr	r3, [r3, #32]
 8008570:	2220      	movs	r2, #32
 8008572:	2100      	movs	r1, #0
 8008574:	4618      	mov	r0, r3
 8008576:	f7ff f804 	bl	8007582 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a18      	ldr	r0, [r3, #32]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	3324      	adds	r3, #36	; 0x24
 8008582:	220b      	movs	r2, #11
 8008584:	4619      	mov	r1, r3
 8008586:	f7fe ffdb 	bl	8007540 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	2201      	movs	r2, #1
 800858e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008590:	7bfb      	ldrb	r3, [r7, #15]
}
 8008592:	4618      	mov	r0, r3
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
	...

0800859c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b088      	sub	sp, #32
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	60fb      	str	r3, [r7, #12]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	3324      	adds	r3, #36	; 0x24
 80085b0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80085b2:	220b      	movs	r2, #11
 80085b4:	2120      	movs	r1, #32
 80085b6:	68b8      	ldr	r0, [r7, #8]
 80085b8:	f7fe ffe3 	bl	8007582 <mem_set>
	si = i = 0; ni = 8;
 80085bc:	2300      	movs	r3, #0
 80085be:	613b      	str	r3, [r7, #16]
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	61fb      	str	r3, [r7, #28]
 80085c4:	2308      	movs	r3, #8
 80085c6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	1c5a      	adds	r2, r3, #1
 80085cc:	61fa      	str	r2, [r7, #28]
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	4413      	add	r3, r2
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80085d6:	7efb      	ldrb	r3, [r7, #27]
 80085d8:	2b20      	cmp	r3, #32
 80085da:	d94e      	bls.n	800867a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80085dc:	7efb      	ldrb	r3, [r7, #27]
 80085de:	2b2f      	cmp	r3, #47	; 0x2f
 80085e0:	d006      	beq.n	80085f0 <create_name+0x54>
 80085e2:	7efb      	ldrb	r3, [r7, #27]
 80085e4:	2b5c      	cmp	r3, #92	; 0x5c
 80085e6:	d110      	bne.n	800860a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80085e8:	e002      	b.n	80085f0 <create_name+0x54>
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	3301      	adds	r3, #1
 80085ee:	61fb      	str	r3, [r7, #28]
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	4413      	add	r3, r2
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	2b2f      	cmp	r3, #47	; 0x2f
 80085fa:	d0f6      	beq.n	80085ea <create_name+0x4e>
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	4413      	add	r3, r2
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	2b5c      	cmp	r3, #92	; 0x5c
 8008606:	d0f0      	beq.n	80085ea <create_name+0x4e>
			break;
 8008608:	e038      	b.n	800867c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800860a:	7efb      	ldrb	r3, [r7, #27]
 800860c:	2b2e      	cmp	r3, #46	; 0x2e
 800860e:	d003      	beq.n	8008618 <create_name+0x7c>
 8008610:	693a      	ldr	r2, [r7, #16]
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	429a      	cmp	r2, r3
 8008616:	d30c      	bcc.n	8008632 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	2b0b      	cmp	r3, #11
 800861c:	d002      	beq.n	8008624 <create_name+0x88>
 800861e:	7efb      	ldrb	r3, [r7, #27]
 8008620:	2b2e      	cmp	r3, #46	; 0x2e
 8008622:	d001      	beq.n	8008628 <create_name+0x8c>
 8008624:	2306      	movs	r3, #6
 8008626:	e044      	b.n	80086b2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008628:	2308      	movs	r3, #8
 800862a:	613b      	str	r3, [r7, #16]
 800862c:	230b      	movs	r3, #11
 800862e:	617b      	str	r3, [r7, #20]
			continue;
 8008630:	e022      	b.n	8008678 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008632:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008636:	2b00      	cmp	r3, #0
 8008638:	da04      	bge.n	8008644 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800863a:	7efb      	ldrb	r3, [r7, #27]
 800863c:	3b80      	subs	r3, #128	; 0x80
 800863e:	4a1f      	ldr	r2, [pc, #124]	; (80086bc <create_name+0x120>)
 8008640:	5cd3      	ldrb	r3, [r2, r3]
 8008642:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008644:	7efb      	ldrb	r3, [r7, #27]
 8008646:	4619      	mov	r1, r3
 8008648:	481d      	ldr	r0, [pc, #116]	; (80086c0 <create_name+0x124>)
 800864a:	f7fe ffdc 	bl	8007606 <chk_chr>
 800864e:	4603      	mov	r3, r0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d001      	beq.n	8008658 <create_name+0xbc>
 8008654:	2306      	movs	r3, #6
 8008656:	e02c      	b.n	80086b2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008658:	7efb      	ldrb	r3, [r7, #27]
 800865a:	2b60      	cmp	r3, #96	; 0x60
 800865c:	d905      	bls.n	800866a <create_name+0xce>
 800865e:	7efb      	ldrb	r3, [r7, #27]
 8008660:	2b7a      	cmp	r3, #122	; 0x7a
 8008662:	d802      	bhi.n	800866a <create_name+0xce>
 8008664:	7efb      	ldrb	r3, [r7, #27]
 8008666:	3b20      	subs	r3, #32
 8008668:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	1c5a      	adds	r2, r3, #1
 800866e:	613a      	str	r2, [r7, #16]
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	4413      	add	r3, r2
 8008674:	7efa      	ldrb	r2, [r7, #27]
 8008676:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008678:	e7a6      	b.n	80085c8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800867a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	441a      	add	r2, r3
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d101      	bne.n	8008690 <create_name+0xf4>
 800868c:	2306      	movs	r3, #6
 800868e:	e010      	b.n	80086b2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	2be5      	cmp	r3, #229	; 0xe5
 8008696:	d102      	bne.n	800869e <create_name+0x102>
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	2205      	movs	r2, #5
 800869c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800869e:	7efb      	ldrb	r3, [r7, #27]
 80086a0:	2b20      	cmp	r3, #32
 80086a2:	d801      	bhi.n	80086a8 <create_name+0x10c>
 80086a4:	2204      	movs	r2, #4
 80086a6:	e000      	b.n	80086aa <create_name+0x10e>
 80086a8:	2200      	movs	r2, #0
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	330b      	adds	r3, #11
 80086ae:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80086b0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3720      	adds	r7, #32
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	080137b0 	.word	0x080137b0
 80086c0:	080121d8 	.word	0x080121d8

080086c4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b086      	sub	sp, #24
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80086d8:	e002      	b.n	80086e0 <follow_path+0x1c>
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	3301      	adds	r3, #1
 80086de:	603b      	str	r3, [r7, #0]
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	2b2f      	cmp	r3, #47	; 0x2f
 80086e6:	d0f8      	beq.n	80086da <follow_path+0x16>
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	2b5c      	cmp	r3, #92	; 0x5c
 80086ee:	d0f4      	beq.n	80086da <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	2200      	movs	r2, #0
 80086f4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	2b1f      	cmp	r3, #31
 80086fc:	d80a      	bhi.n	8008714 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2280      	movs	r2, #128	; 0x80
 8008702:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008706:	2100      	movs	r1, #0
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f7ff fcf9 	bl	8008100 <dir_sdi>
 800870e:	4603      	mov	r3, r0
 8008710:	75fb      	strb	r3, [r7, #23]
 8008712:	e043      	b.n	800879c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008714:	463b      	mov	r3, r7
 8008716:	4619      	mov	r1, r3
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f7ff ff3f 	bl	800859c <create_name>
 800871e:	4603      	mov	r3, r0
 8008720:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008722:	7dfb      	ldrb	r3, [r7, #23]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d134      	bne.n	8008792 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f7ff feaf 	bl	800848c <dir_find>
 800872e:	4603      	mov	r3, r0
 8008730:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008738:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800873a:	7dfb      	ldrb	r3, [r7, #23]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00a      	beq.n	8008756 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008740:	7dfb      	ldrb	r3, [r7, #23]
 8008742:	2b04      	cmp	r3, #4
 8008744:	d127      	bne.n	8008796 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008746:	7afb      	ldrb	r3, [r7, #11]
 8008748:	f003 0304 	and.w	r3, r3, #4
 800874c:	2b00      	cmp	r3, #0
 800874e:	d122      	bne.n	8008796 <follow_path+0xd2>
 8008750:	2305      	movs	r3, #5
 8008752:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008754:	e01f      	b.n	8008796 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008756:	7afb      	ldrb	r3, [r7, #11]
 8008758:	f003 0304 	and.w	r3, r3, #4
 800875c:	2b00      	cmp	r3, #0
 800875e:	d11c      	bne.n	800879a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	799b      	ldrb	r3, [r3, #6]
 8008764:	f003 0310 	and.w	r3, r3, #16
 8008768:	2b00      	cmp	r3, #0
 800876a:	d102      	bne.n	8008772 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800876c:	2305      	movs	r3, #5
 800876e:	75fb      	strb	r3, [r7, #23]
 8008770:	e014      	b.n	800879c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	695b      	ldr	r3, [r3, #20]
 800877c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008780:	4413      	add	r3, r2
 8008782:	4619      	mov	r1, r3
 8008784:	68f8      	ldr	r0, [r7, #12]
 8008786:	f7ff fe42 	bl	800840e <ld_clust>
 800878a:	4602      	mov	r2, r0
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008790:	e7c0      	b.n	8008714 <follow_path+0x50>
			if (res != FR_OK) break;
 8008792:	bf00      	nop
 8008794:	e002      	b.n	800879c <follow_path+0xd8>
				break;
 8008796:	bf00      	nop
 8008798:	e000      	b.n	800879c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800879a:	bf00      	nop
			}
		}
	}

	return res;
 800879c:	7dfb      	ldrb	r3, [r7, #23]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3718      	adds	r7, #24
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80087a6:	b480      	push	{r7}
 80087a8:	b087      	sub	sp, #28
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80087ae:	f04f 33ff 	mov.w	r3, #4294967295
 80087b2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d031      	beq.n	8008820 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	617b      	str	r3, [r7, #20]
 80087c2:	e002      	b.n	80087ca <get_ldnumber+0x24>
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	3301      	adds	r3, #1
 80087c8:	617b      	str	r3, [r7, #20]
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	2b20      	cmp	r3, #32
 80087d0:	d903      	bls.n	80087da <get_ldnumber+0x34>
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	2b3a      	cmp	r3, #58	; 0x3a
 80087d8:	d1f4      	bne.n	80087c4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	2b3a      	cmp	r3, #58	; 0x3a
 80087e0:	d11c      	bne.n	800881c <get_ldnumber+0x76>
			tp = *path;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	1c5a      	adds	r2, r3, #1
 80087ec:	60fa      	str	r2, [r7, #12]
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	3b30      	subs	r3, #48	; 0x30
 80087f2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	2b09      	cmp	r3, #9
 80087f8:	d80e      	bhi.n	8008818 <get_ldnumber+0x72>
 80087fa:	68fa      	ldr	r2, [r7, #12]
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d10a      	bne.n	8008818 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d107      	bne.n	8008818 <get_ldnumber+0x72>
					vol = (int)i;
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	3301      	adds	r3, #1
 8008810:	617b      	str	r3, [r7, #20]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	697a      	ldr	r2, [r7, #20]
 8008816:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	e002      	b.n	8008822 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800881c:	2300      	movs	r3, #0
 800881e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008820:	693b      	ldr	r3, [r7, #16]
}
 8008822:	4618      	mov	r0, r3
 8008824:	371c      	adds	r7, #28
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr
	...

08008830 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	70da      	strb	r2, [r3, #3]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f04f 32ff 	mov.w	r2, #4294967295
 8008846:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008848:	6839      	ldr	r1, [r7, #0]
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f7ff f8d8 	bl	8007a00 <move_window>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d001      	beq.n	800885a <check_fs+0x2a>
 8008856:	2304      	movs	r3, #4
 8008858:	e038      	b.n	80088cc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	3334      	adds	r3, #52	; 0x34
 800885e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008862:	4618      	mov	r0, r3
 8008864:	f7fe fdea 	bl	800743c <ld_word>
 8008868:	4603      	mov	r3, r0
 800886a:	461a      	mov	r2, r3
 800886c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008870:	429a      	cmp	r2, r3
 8008872:	d001      	beq.n	8008878 <check_fs+0x48>
 8008874:	2303      	movs	r3, #3
 8008876:	e029      	b.n	80088cc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800887e:	2be9      	cmp	r3, #233	; 0xe9
 8008880:	d009      	beq.n	8008896 <check_fs+0x66>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008888:	2beb      	cmp	r3, #235	; 0xeb
 800888a:	d11e      	bne.n	80088ca <check_fs+0x9a>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008892:	2b90      	cmp	r3, #144	; 0x90
 8008894:	d119      	bne.n	80088ca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	3334      	adds	r3, #52	; 0x34
 800889a:	3336      	adds	r3, #54	; 0x36
 800889c:	4618      	mov	r0, r3
 800889e:	f7fe fde5 	bl	800746c <ld_dword>
 80088a2:	4603      	mov	r3, r0
 80088a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80088a8:	4a0a      	ldr	r2, [pc, #40]	; (80088d4 <check_fs+0xa4>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d101      	bne.n	80088b2 <check_fs+0x82>
 80088ae:	2300      	movs	r3, #0
 80088b0:	e00c      	b.n	80088cc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	3334      	adds	r3, #52	; 0x34
 80088b6:	3352      	adds	r3, #82	; 0x52
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7fe fdd7 	bl	800746c <ld_dword>
 80088be:	4603      	mov	r3, r0
 80088c0:	4a05      	ldr	r2, [pc, #20]	; (80088d8 <check_fs+0xa8>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d101      	bne.n	80088ca <check_fs+0x9a>
 80088c6:	2300      	movs	r3, #0
 80088c8:	e000      	b.n	80088cc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80088ca:	2302      	movs	r3, #2
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3708      	adds	r7, #8
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	00544146 	.word	0x00544146
 80088d8:	33544146 	.word	0x33544146

080088dc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b096      	sub	sp, #88	; 0x58
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	4613      	mov	r3, r2
 80088e8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	2200      	movs	r2, #0
 80088ee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f7ff ff58 	bl	80087a6 <get_ldnumber>
 80088f6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80088f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	da01      	bge.n	8008902 <find_volume+0x26>
 80088fe:	230b      	movs	r3, #11
 8008900:	e236      	b.n	8008d70 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008902:	4aac      	ldr	r2, [pc, #688]	; (8008bb4 <find_volume+0x2d8>)
 8008904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800890a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800890c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890e:	2b00      	cmp	r3, #0
 8008910:	d101      	bne.n	8008916 <find_volume+0x3a>
 8008912:	230c      	movs	r3, #12
 8008914:	e22c      	b.n	8008d70 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8008916:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008918:	f7fe fe90 	bl	800763c <lock_fs>
 800891c:	4603      	mov	r3, r0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d101      	bne.n	8008926 <find_volume+0x4a>
 8008922:	230f      	movs	r3, #15
 8008924:	e224      	b.n	8008d70 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800892a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800892c:	79fb      	ldrb	r3, [r7, #7]
 800892e:	f023 0301 	bic.w	r3, r3, #1
 8008932:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d01a      	beq.n	8008972 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800893c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893e:	785b      	ldrb	r3, [r3, #1]
 8008940:	4618      	mov	r0, r3
 8008942:	f7fe fcdd 	bl	8007300 <disk_status>
 8008946:	4603      	mov	r3, r0
 8008948:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800894c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008950:	f003 0301 	and.w	r3, r3, #1
 8008954:	2b00      	cmp	r3, #0
 8008956:	d10c      	bne.n	8008972 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008958:	79fb      	ldrb	r3, [r7, #7]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d007      	beq.n	800896e <find_volume+0x92>
 800895e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008962:	f003 0304 	and.w	r3, r3, #4
 8008966:	2b00      	cmp	r3, #0
 8008968:	d001      	beq.n	800896e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800896a:	230a      	movs	r3, #10
 800896c:	e200      	b.n	8008d70 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800896e:	2300      	movs	r3, #0
 8008970:	e1fe      	b.n	8008d70 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008974:	2200      	movs	r2, #0
 8008976:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800897a:	b2da      	uxtb	r2, r3
 800897c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800897e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008982:	785b      	ldrb	r3, [r3, #1]
 8008984:	4618      	mov	r0, r3
 8008986:	f7fe fcd5 	bl	8007334 <disk_initialize>
 800898a:	4603      	mov	r3, r0
 800898c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008990:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008994:	f003 0301 	and.w	r3, r3, #1
 8008998:	2b00      	cmp	r3, #0
 800899a:	d001      	beq.n	80089a0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800899c:	2303      	movs	r3, #3
 800899e:	e1e7      	b.n	8008d70 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80089a0:	79fb      	ldrb	r3, [r7, #7]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d007      	beq.n	80089b6 <find_volume+0xda>
 80089a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80089aa:	f003 0304 	and.w	r3, r3, #4
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80089b2:	230a      	movs	r3, #10
 80089b4:	e1dc      	b.n	8008d70 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80089b6:	2300      	movs	r3, #0
 80089b8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80089ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80089bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80089be:	f7ff ff37 	bl	8008830 <check_fs>
 80089c2:	4603      	mov	r3, r0
 80089c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80089c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d14b      	bne.n	8008a68 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80089d0:	2300      	movs	r3, #0
 80089d2:	643b      	str	r3, [r7, #64]	; 0x40
 80089d4:	e01f      	b.n	8008a16 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80089d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80089dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089de:	011b      	lsls	r3, r3, #4
 80089e0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80089e4:	4413      	add	r3, r2
 80089e6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80089e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ea:	3304      	adds	r3, #4
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d006      	beq.n	8008a00 <find_volume+0x124>
 80089f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f4:	3308      	adds	r3, #8
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7fe fd38 	bl	800746c <ld_dword>
 80089fc:	4602      	mov	r2, r0
 80089fe:	e000      	b.n	8008a02 <find_volume+0x126>
 8008a00:	2200      	movs	r2, #0
 8008a02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008a0a:	440b      	add	r3, r1
 8008a0c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a12:	3301      	adds	r3, #1
 8008a14:	643b      	str	r3, [r7, #64]	; 0x40
 8008a16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a18:	2b03      	cmp	r3, #3
 8008a1a:	d9dc      	bls.n	80089d6 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d002      	beq.n	8008a2c <find_volume+0x150>
 8008a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008a34:	4413      	add	r3, r2
 8008a36:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008a3a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d005      	beq.n	8008a4e <find_volume+0x172>
 8008a42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008a44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008a46:	f7ff fef3 	bl	8008830 <check_fs>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	e000      	b.n	8008a50 <find_volume+0x174>
 8008a4e:	2303      	movs	r3, #3
 8008a50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008a54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d905      	bls.n	8008a68 <find_volume+0x18c>
 8008a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a5e:	3301      	adds	r3, #1
 8008a60:	643b      	str	r3, [r7, #64]	; 0x40
 8008a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a64:	2b03      	cmp	r3, #3
 8008a66:	d9e1      	bls.n	8008a2c <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008a68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a6c:	2b04      	cmp	r3, #4
 8008a6e:	d101      	bne.n	8008a74 <find_volume+0x198>
 8008a70:	2301      	movs	r3, #1
 8008a72:	e17d      	b.n	8008d70 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008a74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d901      	bls.n	8008a80 <find_volume+0x1a4>
 8008a7c:	230d      	movs	r3, #13
 8008a7e:	e177      	b.n	8008d70 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a82:	3334      	adds	r3, #52	; 0x34
 8008a84:	330b      	adds	r3, #11
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7fe fcd8 	bl	800743c <ld_word>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a92:	d001      	beq.n	8008a98 <find_volume+0x1bc>
 8008a94:	230d      	movs	r3, #13
 8008a96:	e16b      	b.n	8008d70 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a9a:	3334      	adds	r3, #52	; 0x34
 8008a9c:	3316      	adds	r3, #22
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fe fccc 	bl	800743c <ld_word>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d106      	bne.n	8008abc <find_volume+0x1e0>
 8008aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab0:	3334      	adds	r3, #52	; 0x34
 8008ab2:	3324      	adds	r3, #36	; 0x24
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7fe fcd9 	bl	800746c <ld_dword>
 8008aba:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008abe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ac0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ace:	789b      	ldrb	r3, [r3, #2]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d005      	beq.n	8008ae0 <find_volume+0x204>
 8008ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad6:	789b      	ldrb	r3, [r3, #2]
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d001      	beq.n	8008ae0 <find_volume+0x204>
 8008adc:	230d      	movs	r3, #13
 8008ade:	e147      	b.n	8008d70 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae2:	789b      	ldrb	r3, [r3, #2]
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ae8:	fb02 f303 	mul.w	r3, r2, r3
 8008aec:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008af4:	b29a      	uxth	r2, r3
 8008af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afc:	895b      	ldrh	r3, [r3, #10]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d008      	beq.n	8008b14 <find_volume+0x238>
 8008b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b04:	895b      	ldrh	r3, [r3, #10]
 8008b06:	461a      	mov	r2, r3
 8008b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0a:	895b      	ldrh	r3, [r3, #10]
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	4013      	ands	r3, r2
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d001      	beq.n	8008b18 <find_volume+0x23c>
 8008b14:	230d      	movs	r3, #13
 8008b16:	e12b      	b.n	8008d70 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1a:	3334      	adds	r3, #52	; 0x34
 8008b1c:	3311      	adds	r3, #17
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7fe fc8c 	bl	800743c <ld_word>
 8008b24:	4603      	mov	r3, r0
 8008b26:	461a      	mov	r2, r3
 8008b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2e:	891b      	ldrh	r3, [r3, #8]
 8008b30:	f003 030f 	and.w	r3, r3, #15
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d001      	beq.n	8008b3e <find_volume+0x262>
 8008b3a:	230d      	movs	r3, #13
 8008b3c:	e118      	b.n	8008d70 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b40:	3334      	adds	r3, #52	; 0x34
 8008b42:	3313      	adds	r3, #19
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7fe fc79 	bl	800743c <ld_word>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008b4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d106      	bne.n	8008b62 <find_volume+0x286>
 8008b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b56:	3334      	adds	r3, #52	; 0x34
 8008b58:	3320      	adds	r3, #32
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7fe fc86 	bl	800746c <ld_dword>
 8008b60:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b64:	3334      	adds	r3, #52	; 0x34
 8008b66:	330e      	adds	r3, #14
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f7fe fc67 	bl	800743c <ld_word>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008b72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d101      	bne.n	8008b7c <find_volume+0x2a0>
 8008b78:	230d      	movs	r3, #13
 8008b7a:	e0f9      	b.n	8008d70 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008b7c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b80:	4413      	add	r3, r2
 8008b82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b84:	8912      	ldrh	r2, [r2, #8]
 8008b86:	0912      	lsrs	r2, r2, #4
 8008b88:	b292      	uxth	r2, r2
 8008b8a:	4413      	add	r3, r2
 8008b8c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008b8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d201      	bcs.n	8008b9a <find_volume+0x2be>
 8008b96:	230d      	movs	r3, #13
 8008b98:	e0ea      	b.n	8008d70 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008b9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9e:	1ad3      	subs	r3, r2, r3
 8008ba0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ba2:	8952      	ldrh	r2, [r2, #10]
 8008ba4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ba8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d103      	bne.n	8008bb8 <find_volume+0x2dc>
 8008bb0:	230d      	movs	r3, #13
 8008bb2:	e0dd      	b.n	8008d70 <find_volume+0x494>
 8008bb4:	20000658 	.word	0x20000658
		fmt = FS_FAT32;
 8008bb8:	2303      	movs	r3, #3
 8008bba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d802      	bhi.n	8008bce <find_volume+0x2f2>
 8008bc8:	2302      	movs	r3, #2
 8008bca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd0:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d802      	bhi.n	8008bde <find_volume+0x302>
 8008bd8:	2301      	movs	r3, #1
 8008bda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be0:	1c9a      	adds	r2, r3, #2
 8008be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be4:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008bea:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008bec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bf0:	441a      	add	r2, r3
 8008bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008bf6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfa:	441a      	add	r2, r3
 8008bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bfe:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8008c00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008c04:	2b03      	cmp	r3, #3
 8008c06:	d11e      	bne.n	8008c46 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0a:	3334      	adds	r3, #52	; 0x34
 8008c0c:	332a      	adds	r3, #42	; 0x2a
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7fe fc14 	bl	800743c <ld_word>
 8008c14:	4603      	mov	r3, r0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d001      	beq.n	8008c1e <find_volume+0x342>
 8008c1a:	230d      	movs	r3, #13
 8008c1c:	e0a8      	b.n	8008d70 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c20:	891b      	ldrh	r3, [r3, #8]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d001      	beq.n	8008c2a <find_volume+0x34e>
 8008c26:	230d      	movs	r3, #13
 8008c28:	e0a2      	b.n	8008d70 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2c:	3334      	adds	r3, #52	; 0x34
 8008c2e:	332c      	adds	r3, #44	; 0x2c
 8008c30:	4618      	mov	r0, r3
 8008c32:	f7fe fc1b 	bl	800746c <ld_dword>
 8008c36:	4602      	mov	r2, r0
 8008c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3e:	699b      	ldr	r3, [r3, #24]
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	647b      	str	r3, [r7, #68]	; 0x44
 8008c44:	e01f      	b.n	8008c86 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c48:	891b      	ldrh	r3, [r3, #8]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d101      	bne.n	8008c52 <find_volume+0x376>
 8008c4e:	230d      	movs	r3, #13
 8008c50:	e08e      	b.n	8008d70 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c58:	441a      	add	r2, r3
 8008c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c5c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008c5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	d103      	bne.n	8008c6e <find_volume+0x392>
 8008c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c68:	699b      	ldr	r3, [r3, #24]
 8008c6a:	005b      	lsls	r3, r3, #1
 8008c6c:	e00a      	b.n	8008c84 <find_volume+0x3a8>
 8008c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c70:	699a      	ldr	r2, [r3, #24]
 8008c72:	4613      	mov	r3, r2
 8008c74:	005b      	lsls	r3, r3, #1
 8008c76:	4413      	add	r3, r2
 8008c78:	085a      	lsrs	r2, r3, #1
 8008c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7c:	699b      	ldr	r3, [r3, #24]
 8008c7e:	f003 0301 	and.w	r3, r3, #1
 8008c82:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008c84:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c88:	69da      	ldr	r2, [r3, #28]
 8008c8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c8c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008c90:	0a5b      	lsrs	r3, r3, #9
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d201      	bcs.n	8008c9a <find_volume+0x3be>
 8008c96:	230d      	movs	r3, #13
 8008c98:	e06a      	b.n	8008d70 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008ca0:	615a      	str	r2, [r3, #20]
 8008ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca4:	695a      	ldr	r2, [r3, #20]
 8008ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cac:	2280      	movs	r2, #128	; 0x80
 8008cae:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008cb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008cb4:	2b03      	cmp	r3, #3
 8008cb6:	d149      	bne.n	8008d4c <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cba:	3334      	adds	r3, #52	; 0x34
 8008cbc:	3330      	adds	r3, #48	; 0x30
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7fe fbbc 	bl	800743c <ld_word>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d140      	bne.n	8008d4c <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ccc:	3301      	adds	r3, #1
 8008cce:	4619      	mov	r1, r3
 8008cd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008cd2:	f7fe fe95 	bl	8007a00 <move_window>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d137      	bne.n	8008d4c <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8008cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cde:	2200      	movs	r2, #0
 8008ce0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce4:	3334      	adds	r3, #52	; 0x34
 8008ce6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7fe fba6 	bl	800743c <ld_word>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d127      	bne.n	8008d4c <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cfe:	3334      	adds	r3, #52	; 0x34
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7fe fbb3 	bl	800746c <ld_dword>
 8008d06:	4603      	mov	r3, r0
 8008d08:	4a1b      	ldr	r2, [pc, #108]	; (8008d78 <find_volume+0x49c>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d11e      	bne.n	8008d4c <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d10:	3334      	adds	r3, #52	; 0x34
 8008d12:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7fe fba8 	bl	800746c <ld_dword>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	4a17      	ldr	r2, [pc, #92]	; (8008d7c <find_volume+0x4a0>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d113      	bne.n	8008d4c <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d26:	3334      	adds	r3, #52	; 0x34
 8008d28:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7fe fb9d 	bl	800746c <ld_dword>
 8008d32:	4602      	mov	r2, r0
 8008d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d36:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3a:	3334      	adds	r3, #52	; 0x34
 8008d3c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7fe fb93 	bl	800746c <ld_dword>
 8008d46:	4602      	mov	r2, r0
 8008d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008d52:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008d54:	4b0a      	ldr	r3, [pc, #40]	; (8008d80 <find_volume+0x4a4>)
 8008d56:	881b      	ldrh	r3, [r3, #0]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	b29a      	uxth	r2, r3
 8008d5c:	4b08      	ldr	r3, [pc, #32]	; (8008d80 <find_volume+0x4a4>)
 8008d5e:	801a      	strh	r2, [r3, #0]
 8008d60:	4b07      	ldr	r3, [pc, #28]	; (8008d80 <find_volume+0x4a4>)
 8008d62:	881a      	ldrh	r2, [r3, #0]
 8008d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d66:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008d68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008d6a:	f7fe fde1 	bl	8007930 <clear_lock>
#endif
	return FR_OK;
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3758      	adds	r7, #88	; 0x58
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	41615252 	.word	0x41615252
 8008d7c:	61417272 	.word	0x61417272
 8008d80:	2000065c 	.word	0x2000065c

08008d84 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008d8e:	2309      	movs	r3, #9
 8008d90:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d02e      	beq.n	8008df6 <validate+0x72>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d02a      	beq.n	8008df6 <validate+0x72>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d025      	beq.n	8008df6 <validate+0x72>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	889a      	ldrh	r2, [r3, #4]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	88db      	ldrh	r3, [r3, #6]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d11e      	bne.n	8008df6 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7fe fc3d 	bl	800763c <lock_fs>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d014      	beq.n	8008df2 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	785b      	ldrb	r3, [r3, #1]
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7fe fa96 	bl	8007300 <disk_status>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	f003 0301 	and.w	r3, r3, #1
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d102      	bne.n	8008de4 <validate+0x60>
				res = FR_OK;
 8008dde:	2300      	movs	r3, #0
 8008de0:	73fb      	strb	r3, [r7, #15]
 8008de2:	e008      	b.n	8008df6 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2100      	movs	r1, #0
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7fe fc3c 	bl	8007668 <unlock_fs>
 8008df0:	e001      	b.n	8008df6 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8008df2:	230f      	movs	r3, #15
 8008df4:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008df6:	7bfb      	ldrb	r3, [r7, #15]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d102      	bne.n	8008e02 <validate+0x7e>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	e000      	b.n	8008e04 <validate+0x80>
 8008e02:	2300      	movs	r3, #0
 8008e04:	683a      	ldr	r2, [r7, #0]
 8008e06:	6013      	str	r3, [r2, #0]
	return res;
 8008e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
	...

08008e14 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b088      	sub	sp, #32
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	4613      	mov	r3, r2
 8008e20:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008e26:	f107 0310 	add.w	r3, r7, #16
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7ff fcbb 	bl	80087a6 <get_ldnumber>
 8008e30:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008e32:	69fb      	ldr	r3, [r7, #28]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	da01      	bge.n	8008e3c <f_mount+0x28>
 8008e38:	230b      	movs	r3, #11
 8008e3a:	e048      	b.n	8008ece <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008e3c:	4a26      	ldr	r2, [pc, #152]	; (8008ed8 <f_mount+0xc4>)
 8008e3e:	69fb      	ldr	r3, [r7, #28]
 8008e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e44:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00f      	beq.n	8008e6c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008e4c:	69b8      	ldr	r0, [r7, #24]
 8008e4e:	f7fe fd6f 	bl	8007930 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	4618      	mov	r0, r3
 8008e58:	f000 fcd8 	bl	800980c <ff_del_syncobj>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d101      	bne.n	8008e66 <f_mount+0x52>
 8008e62:	2302      	movs	r3, #2
 8008e64:	e033      	b.n	8008ece <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00f      	beq.n	8008e92 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2200      	movs	r2, #0
 8008e76:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	b2da      	uxtb	r2, r3
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	330c      	adds	r3, #12
 8008e80:	4619      	mov	r1, r3
 8008e82:	4610      	mov	r0, r2
 8008e84:	f000 fca7 	bl	80097d6 <ff_cre_syncobj>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d101      	bne.n	8008e92 <f_mount+0x7e>
 8008e8e:	2302      	movs	r3, #2
 8008e90:	e01d      	b.n	8008ece <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	4910      	ldr	r1, [pc, #64]	; (8008ed8 <f_mount+0xc4>)
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d002      	beq.n	8008ea8 <f_mount+0x94>
 8008ea2:	79fb      	ldrb	r3, [r7, #7]
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d001      	beq.n	8008eac <f_mount+0x98>
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	e010      	b.n	8008ece <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008eac:	f107 010c 	add.w	r1, r7, #12
 8008eb0:	f107 0308 	add.w	r3, r7, #8
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7ff fd10 	bl	80088dc <find_volume>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	7dfa      	ldrb	r2, [r7, #23]
 8008ec4:	4611      	mov	r1, r2
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7fe fbce 	bl	8007668 <unlock_fs>
 8008ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3720      	adds	r7, #32
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	20000658 	.word	0x20000658

08008edc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b098      	sub	sp, #96	; 0x60
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d101      	bne.n	8008ef4 <f_open+0x18>
 8008ef0:	2309      	movs	r3, #9
 8008ef2:	e1b4      	b.n	800925e <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008ef4:	79fb      	ldrb	r3, [r7, #7]
 8008ef6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008efa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008efc:	79fa      	ldrb	r2, [r7, #7]
 8008efe:	f107 0110 	add.w	r1, r7, #16
 8008f02:	f107 0308 	add.w	r3, r7, #8
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7ff fce8 	bl	80088dc <find_volume>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008f12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	f040 8191 	bne.w	800923e <f_open+0x362>
		dj.obj.fs = fs;
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008f20:	68ba      	ldr	r2, [r7, #8]
 8008f22:	f107 0314 	add.w	r3, r7, #20
 8008f26:	4611      	mov	r1, r2
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7ff fbcb 	bl	80086c4 <follow_path>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008f34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d11a      	bne.n	8008f72 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008f3c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008f40:	b25b      	sxtb	r3, r3
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	da03      	bge.n	8008f4e <f_open+0x72>
				res = FR_INVALID_NAME;
 8008f46:	2306      	movs	r3, #6
 8008f48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008f4c:	e011      	b.n	8008f72 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008f4e:	79fb      	ldrb	r3, [r7, #7]
 8008f50:	f023 0301 	bic.w	r3, r3, #1
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	bf14      	ite	ne
 8008f58:	2301      	movne	r3, #1
 8008f5a:	2300      	moveq	r3, #0
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	461a      	mov	r2, r3
 8008f60:	f107 0314 	add.w	r3, r7, #20
 8008f64:	4611      	mov	r1, r2
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7fe fb9a 	bl	80076a0 <chk_lock>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008f72:	79fb      	ldrb	r3, [r7, #7]
 8008f74:	f003 031c 	and.w	r3, r3, #28
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d07f      	beq.n	800907c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008f7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d017      	beq.n	8008fb4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008f84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f88:	2b04      	cmp	r3, #4
 8008f8a:	d10e      	bne.n	8008faa <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008f8c:	f7fe fbe4 	bl	8007758 <enq_lock>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d006      	beq.n	8008fa4 <f_open+0xc8>
 8008f96:	f107 0314 	add.w	r3, r7, #20
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7ff facb 	bl	8008536 <dir_register>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	e000      	b.n	8008fa6 <f_open+0xca>
 8008fa4:	2312      	movs	r3, #18
 8008fa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008faa:	79fb      	ldrb	r3, [r7, #7]
 8008fac:	f043 0308 	orr.w	r3, r3, #8
 8008fb0:	71fb      	strb	r3, [r7, #7]
 8008fb2:	e010      	b.n	8008fd6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008fb4:	7ebb      	ldrb	r3, [r7, #26]
 8008fb6:	f003 0311 	and.w	r3, r3, #17
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d003      	beq.n	8008fc6 <f_open+0xea>
					res = FR_DENIED;
 8008fbe:	2307      	movs	r3, #7
 8008fc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008fc4:	e007      	b.n	8008fd6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008fc6:	79fb      	ldrb	r3, [r7, #7]
 8008fc8:	f003 0304 	and.w	r3, r3, #4
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d002      	beq.n	8008fd6 <f_open+0xfa>
 8008fd0:	2308      	movs	r3, #8
 8008fd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008fd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d168      	bne.n	80090b0 <f_open+0x1d4>
 8008fde:	79fb      	ldrb	r3, [r7, #7]
 8008fe0:	f003 0308 	and.w	r3, r3, #8
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d063      	beq.n	80090b0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008fe8:	f7fd fc4c 	bl	8006884 <get_fattime>
 8008fec:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ff0:	330e      	adds	r3, #14
 8008ff2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7fe fa77 	bl	80074e8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ffc:	3316      	adds	r3, #22
 8008ffe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009000:	4618      	mov	r0, r3
 8009002:	f7fe fa71 	bl	80074e8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009008:	330b      	adds	r3, #11
 800900a:	2220      	movs	r2, #32
 800900c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009012:	4611      	mov	r1, r2
 8009014:	4618      	mov	r0, r3
 8009016:	f7ff f9fa 	bl	800840e <ld_clust>
 800901a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009020:	2200      	movs	r2, #0
 8009022:	4618      	mov	r0, r3
 8009024:	f7ff fa12 	bl	800844c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800902a:	331c      	adds	r3, #28
 800902c:	2100      	movs	r1, #0
 800902e:	4618      	mov	r0, r3
 8009030:	f7fe fa5a 	bl	80074e8 <st_dword>
					fs->wflag = 1;
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	2201      	movs	r2, #1
 8009038:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800903a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800903c:	2b00      	cmp	r3, #0
 800903e:	d037      	beq.n	80090b0 <f_open+0x1d4>
						dw = fs->winsect;
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009044:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009046:	f107 0314 	add.w	r3, r7, #20
 800904a:	2200      	movs	r2, #0
 800904c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800904e:	4618      	mov	r0, r3
 8009050:	f7fe ff25 	bl	8007e9e <remove_chain>
 8009054:	4603      	mov	r3, r0
 8009056:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800905a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800905e:	2b00      	cmp	r3, #0
 8009060:	d126      	bne.n	80090b0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009066:	4618      	mov	r0, r3
 8009068:	f7fe fcca 	bl	8007a00 <move_window>
 800906c:	4603      	mov	r3, r0
 800906e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009076:	3a01      	subs	r2, #1
 8009078:	611a      	str	r2, [r3, #16]
 800907a:	e019      	b.n	80090b0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800907c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009080:	2b00      	cmp	r3, #0
 8009082:	d115      	bne.n	80090b0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009084:	7ebb      	ldrb	r3, [r7, #26]
 8009086:	f003 0310 	and.w	r3, r3, #16
 800908a:	2b00      	cmp	r3, #0
 800908c:	d003      	beq.n	8009096 <f_open+0x1ba>
					res = FR_NO_FILE;
 800908e:	2304      	movs	r3, #4
 8009090:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009094:	e00c      	b.n	80090b0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009096:	79fb      	ldrb	r3, [r7, #7]
 8009098:	f003 0302 	and.w	r3, r3, #2
 800909c:	2b00      	cmp	r3, #0
 800909e:	d007      	beq.n	80090b0 <f_open+0x1d4>
 80090a0:	7ebb      	ldrb	r3, [r7, #26]
 80090a2:	f003 0301 	and.w	r3, r3, #1
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d002      	beq.n	80090b0 <f_open+0x1d4>
						res = FR_DENIED;
 80090aa:	2307      	movs	r3, #7
 80090ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80090b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d128      	bne.n	800910a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80090b8:	79fb      	ldrb	r3, [r7, #7]
 80090ba:	f003 0308 	and.w	r3, r3, #8
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d003      	beq.n	80090ca <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80090c2:	79fb      	ldrb	r3, [r7, #7]
 80090c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090c8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80090d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80090d8:	79fb      	ldrb	r3, [r7, #7]
 80090da:	f023 0301 	bic.w	r3, r3, #1
 80090de:	2b00      	cmp	r3, #0
 80090e0:	bf14      	ite	ne
 80090e2:	2301      	movne	r3, #1
 80090e4:	2300      	moveq	r3, #0
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	461a      	mov	r2, r3
 80090ea:	f107 0314 	add.w	r3, r7, #20
 80090ee:	4611      	mov	r1, r2
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7fe fb53 	bl	800779c <inc_lock>
 80090f6:	4602      	mov	r2, r0
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d102      	bne.n	800910a <f_open+0x22e>
 8009104:	2302      	movs	r3, #2
 8009106:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800910a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800910e:	2b00      	cmp	r3, #0
 8009110:	f040 8095 	bne.w	800923e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009118:	4611      	mov	r1, r2
 800911a:	4618      	mov	r0, r3
 800911c:	f7ff f977 	bl	800840e <ld_clust>
 8009120:	4602      	mov	r2, r0
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009128:	331c      	adds	r3, #28
 800912a:	4618      	mov	r0, r3
 800912c:	f7fe f99e 	bl	800746c <ld_dword>
 8009130:	4602      	mov	r2, r0
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2200      	movs	r2, #0
 800913a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800913c:	693a      	ldr	r2, [r7, #16]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	88da      	ldrh	r2, [r3, #6]
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	79fa      	ldrb	r2, [r7, #7]
 800914e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2200      	movs	r2, #0
 8009154:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2200      	movs	r2, #0
 800915a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2200      	movs	r2, #0
 8009160:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	3330      	adds	r3, #48	; 0x30
 8009166:	f44f 7200 	mov.w	r2, #512	; 0x200
 800916a:	2100      	movs	r1, #0
 800916c:	4618      	mov	r0, r3
 800916e:	f7fe fa08 	bl	8007582 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009172:	79fb      	ldrb	r3, [r7, #7]
 8009174:	f003 0320 	and.w	r3, r3, #32
 8009178:	2b00      	cmp	r3, #0
 800917a:	d060      	beq.n	800923e <f_open+0x362>
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d05c      	beq.n	800923e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	68da      	ldr	r2, [r3, #12]
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	895b      	ldrh	r3, [r3, #10]
 8009190:	025b      	lsls	r3, r3, #9
 8009192:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	657b      	str	r3, [r7, #84]	; 0x54
 80091a0:	e016      	b.n	80091d0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7fe fce5 	bl	8007b76 <get_fat>
 80091ac:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80091ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d802      	bhi.n	80091ba <f_open+0x2de>
 80091b4:	2302      	movs	r3, #2
 80091b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80091ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80091bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c0:	d102      	bne.n	80091c8 <f_open+0x2ec>
 80091c2:	2301      	movs	r3, #1
 80091c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80091c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80091ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091cc:	1ad3      	subs	r3, r2, r3
 80091ce:	657b      	str	r3, [r7, #84]	; 0x54
 80091d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d103      	bne.n	80091e0 <f_open+0x304>
 80091d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80091da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091dc:	429a      	cmp	r2, r3
 80091de:	d8e0      	bhi.n	80091a2 <f_open+0x2c6>
				}
				fp->clust = clst;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80091e4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80091e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d127      	bne.n	800923e <f_open+0x362>
 80091ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d022      	beq.n	800923e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7fe fc9b 	bl	8007b38 <clust2sect>
 8009202:	6478      	str	r0, [r7, #68]	; 0x44
 8009204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009206:	2b00      	cmp	r3, #0
 8009208:	d103      	bne.n	8009212 <f_open+0x336>
						res = FR_INT_ERR;
 800920a:	2302      	movs	r3, #2
 800920c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009210:	e015      	b.n	800923e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009214:	0a5a      	lsrs	r2, r3, #9
 8009216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009218:	441a      	add	r2, r3
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	7858      	ldrb	r0, [r3, #1]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6a1a      	ldr	r2, [r3, #32]
 800922c:	2301      	movs	r3, #1
 800922e:	f7fe f8a7 	bl	8007380 <disk_read>
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d002      	beq.n	800923e <f_open+0x362>
 8009238:	2301      	movs	r3, #1
 800923a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800923e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009242:	2b00      	cmp	r3, #0
 8009244:	d002      	beq.n	800924c <f_open+0x370>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2200      	movs	r2, #0
 800924a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8009252:	4611      	mov	r1, r2
 8009254:	4618      	mov	r0, r3
 8009256:	f7fe fa07 	bl	8007668 <unlock_fs>
 800925a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800925e:	4618      	mov	r0, r3
 8009260:	3760      	adds	r7, #96	; 0x60
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b08c      	sub	sp, #48	; 0x30
 800926a:	af00      	add	r7, sp, #0
 800926c:	60f8      	str	r0, [r7, #12]
 800926e:	60b9      	str	r1, [r7, #8]
 8009270:	607a      	str	r2, [r7, #4]
 8009272:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	2200      	movs	r2, #0
 800927c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f107 0210 	add.w	r2, r7, #16
 8009284:	4611      	mov	r1, r2
 8009286:	4618      	mov	r0, r3
 8009288:	f7ff fd7c 	bl	8008d84 <validate>
 800928c:	4603      	mov	r3, r0
 800928e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009292:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009296:	2b00      	cmp	r3, #0
 8009298:	d107      	bne.n	80092aa <f_write+0x44>
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	7d5b      	ldrb	r3, [r3, #21]
 800929e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80092a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d009      	beq.n	80092be <f_write+0x58>
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80092b0:	4611      	mov	r1, r2
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7fe f9d8 	bl	8007668 <unlock_fs>
 80092b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092bc:	e173      	b.n	80095a6 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	7d1b      	ldrb	r3, [r3, #20]
 80092c2:	f003 0302 	and.w	r3, r3, #2
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d106      	bne.n	80092d8 <f_write+0x72>
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	2107      	movs	r1, #7
 80092ce:	4618      	mov	r0, r3
 80092d0:	f7fe f9ca 	bl	8007668 <unlock_fs>
 80092d4:	2307      	movs	r3, #7
 80092d6:	e166      	b.n	80095a6 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	699a      	ldr	r2, [r3, #24]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	441a      	add	r2, r3
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	699b      	ldr	r3, [r3, #24]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	f080 814b 	bcs.w	8009580 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	699b      	ldr	r3, [r3, #24]
 80092ee:	43db      	mvns	r3, r3
 80092f0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80092f2:	e145      	b.n	8009580 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	699b      	ldr	r3, [r3, #24]
 80092f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	f040 8101 	bne.w	8009504 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	699b      	ldr	r3, [r3, #24]
 8009306:	0a5b      	lsrs	r3, r3, #9
 8009308:	693a      	ldr	r2, [r7, #16]
 800930a:	8952      	ldrh	r2, [r2, #10]
 800930c:	3a01      	subs	r2, #1
 800930e:	4013      	ands	r3, r2
 8009310:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009312:	69bb      	ldr	r3, [r7, #24]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d14d      	bne.n	80093b4 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	699b      	ldr	r3, [r3, #24]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d10c      	bne.n	800933a <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009328:	2b00      	cmp	r3, #0
 800932a:	d11a      	bne.n	8009362 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2100      	movs	r1, #0
 8009330:	4618      	mov	r0, r3
 8009332:	f7fe fe19 	bl	8007f68 <create_chain>
 8009336:	62b8      	str	r0, [r7, #40]	; 0x28
 8009338:	e013      	b.n	8009362 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800933e:	2b00      	cmp	r3, #0
 8009340:	d007      	beq.n	8009352 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	699b      	ldr	r3, [r3, #24]
 8009346:	4619      	mov	r1, r3
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f7fe fea5 	bl	8008098 <clmt_clust>
 800934e:	62b8      	str	r0, [r7, #40]	; 0x28
 8009350:	e007      	b.n	8009362 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009352:	68fa      	ldr	r2, [r7, #12]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	69db      	ldr	r3, [r3, #28]
 8009358:	4619      	mov	r1, r3
 800935a:	4610      	mov	r0, r2
 800935c:	f7fe fe04 	bl	8007f68 <create_chain>
 8009360:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009364:	2b00      	cmp	r3, #0
 8009366:	f000 8110 	beq.w	800958a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800936a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800936c:	2b01      	cmp	r3, #1
 800936e:	d109      	bne.n	8009384 <f_write+0x11e>
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2202      	movs	r2, #2
 8009374:	755a      	strb	r2, [r3, #21]
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	2102      	movs	r1, #2
 800937a:	4618      	mov	r0, r3
 800937c:	f7fe f974 	bl	8007668 <unlock_fs>
 8009380:	2302      	movs	r3, #2
 8009382:	e110      	b.n	80095a6 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800938a:	d109      	bne.n	80093a0 <f_write+0x13a>
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2201      	movs	r2, #1
 8009390:	755a      	strb	r2, [r3, #21]
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	2101      	movs	r1, #1
 8009396:	4618      	mov	r0, r3
 8009398:	f7fe f966 	bl	8007668 <unlock_fs>
 800939c:	2301      	movs	r3, #1
 800939e:	e102      	b.n	80095a6 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093a4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d102      	bne.n	80093b4 <f_write+0x14e>
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093b2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	7d1b      	ldrb	r3, [r3, #20]
 80093b8:	b25b      	sxtb	r3, r3
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	da1d      	bge.n	80093fa <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	7858      	ldrb	r0, [r3, #1]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6a1a      	ldr	r2, [r3, #32]
 80093cc:	2301      	movs	r3, #1
 80093ce:	f7fd fff7 	bl	80073c0 <disk_write>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d009      	beq.n	80093ec <f_write+0x186>
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2201      	movs	r2, #1
 80093dc:	755a      	strb	r2, [r3, #21]
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	2101      	movs	r1, #1
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7fe f940 	bl	8007668 <unlock_fs>
 80093e8:	2301      	movs	r3, #1
 80093ea:	e0dc      	b.n	80095a6 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	7d1b      	ldrb	r3, [r3, #20]
 80093f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093f4:	b2da      	uxtb	r2, r3
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80093fa:	693a      	ldr	r2, [r7, #16]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	69db      	ldr	r3, [r3, #28]
 8009400:	4619      	mov	r1, r3
 8009402:	4610      	mov	r0, r2
 8009404:	f7fe fb98 	bl	8007b38 <clust2sect>
 8009408:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d109      	bne.n	8009424 <f_write+0x1be>
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2202      	movs	r2, #2
 8009414:	755a      	strb	r2, [r3, #21]
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	2102      	movs	r1, #2
 800941a:	4618      	mov	r0, r3
 800941c:	f7fe f924 	bl	8007668 <unlock_fs>
 8009420:	2302      	movs	r3, #2
 8009422:	e0c0      	b.n	80095a6 <f_write+0x340>
			sect += csect;
 8009424:	697a      	ldr	r2, [r7, #20]
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	4413      	add	r3, r2
 800942a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	0a5b      	lsrs	r3, r3, #9
 8009430:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009432:	6a3b      	ldr	r3, [r7, #32]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d041      	beq.n	80094bc <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009438:	69ba      	ldr	r2, [r7, #24]
 800943a:	6a3b      	ldr	r3, [r7, #32]
 800943c:	4413      	add	r3, r2
 800943e:	693a      	ldr	r2, [r7, #16]
 8009440:	8952      	ldrh	r2, [r2, #10]
 8009442:	4293      	cmp	r3, r2
 8009444:	d905      	bls.n	8009452 <f_write+0x1ec>
					cc = fs->csize - csect;
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	895b      	ldrh	r3, [r3, #10]
 800944a:	461a      	mov	r2, r3
 800944c:	69bb      	ldr	r3, [r7, #24]
 800944e:	1ad3      	subs	r3, r2, r3
 8009450:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	7858      	ldrb	r0, [r3, #1]
 8009456:	6a3b      	ldr	r3, [r7, #32]
 8009458:	697a      	ldr	r2, [r7, #20]
 800945a:	69f9      	ldr	r1, [r7, #28]
 800945c:	f7fd ffb0 	bl	80073c0 <disk_write>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d009      	beq.n	800947a <f_write+0x214>
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2201      	movs	r2, #1
 800946a:	755a      	strb	r2, [r3, #21]
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	2101      	movs	r1, #1
 8009470:	4618      	mov	r0, r3
 8009472:	f7fe f8f9 	bl	8007668 <unlock_fs>
 8009476:	2301      	movs	r3, #1
 8009478:	e095      	b.n	80095a6 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6a1a      	ldr	r2, [r3, #32]
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	1ad3      	subs	r3, r2, r3
 8009482:	6a3a      	ldr	r2, [r7, #32]
 8009484:	429a      	cmp	r2, r3
 8009486:	d915      	bls.n	80094b4 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	6a1a      	ldr	r2, [r3, #32]
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	1ad3      	subs	r3, r2, r3
 8009496:	025b      	lsls	r3, r3, #9
 8009498:	69fa      	ldr	r2, [r7, #28]
 800949a:	4413      	add	r3, r2
 800949c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094a0:	4619      	mov	r1, r3
 80094a2:	f7fe f84d 	bl	8007540 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	7d1b      	ldrb	r3, [r3, #20]
 80094aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094ae:	b2da      	uxtb	r2, r3
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80094b4:	6a3b      	ldr	r3, [r7, #32]
 80094b6:	025b      	lsls	r3, r3, #9
 80094b8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80094ba:	e044      	b.n	8009546 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	6a1b      	ldr	r3, [r3, #32]
 80094c0:	697a      	ldr	r2, [r7, #20]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d01b      	beq.n	80094fe <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	699a      	ldr	r2, [r3, #24]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d215      	bcs.n	80094fe <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	7858      	ldrb	r0, [r3, #1]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80094dc:	2301      	movs	r3, #1
 80094de:	697a      	ldr	r2, [r7, #20]
 80094e0:	f7fd ff4e 	bl	8007380 <disk_read>
 80094e4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d009      	beq.n	80094fe <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2201      	movs	r2, #1
 80094ee:	755a      	strb	r2, [r3, #21]
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	2101      	movs	r1, #1
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7fe f8b7 	bl	8007668 <unlock_fs>
 80094fa:	2301      	movs	r3, #1
 80094fc:	e053      	b.n	80095a6 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	697a      	ldr	r2, [r7, #20]
 8009502:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	699b      	ldr	r3, [r3, #24]
 8009508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800950c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009510:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	429a      	cmp	r2, r3
 8009518:	d901      	bls.n	800951e <f_write+0x2b8>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	699b      	ldr	r3, [r3, #24]
 8009528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800952c:	4413      	add	r3, r2
 800952e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009530:	69f9      	ldr	r1, [r7, #28]
 8009532:	4618      	mov	r0, r3
 8009534:	f7fe f804 	bl	8007540 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	7d1b      	ldrb	r3, [r3, #20]
 800953c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009540:	b2da      	uxtb	r2, r3
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009546:	69fa      	ldr	r2, [r7, #28]
 8009548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954a:	4413      	add	r3, r2
 800954c:	61fb      	str	r3, [r7, #28]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	699a      	ldr	r2, [r3, #24]
 8009552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009554:	441a      	add	r2, r3
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	619a      	str	r2, [r3, #24]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	68da      	ldr	r2, [r3, #12]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	699b      	ldr	r3, [r3, #24]
 8009562:	429a      	cmp	r2, r3
 8009564:	bf38      	it	cc
 8009566:	461a      	movcc	r2, r3
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	60da      	str	r2, [r3, #12]
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009572:	441a      	add	r2, r3
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	601a      	str	r2, [r3, #0]
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957c:	1ad3      	subs	r3, r2, r3
 800957e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2b00      	cmp	r3, #0
 8009584:	f47f aeb6 	bne.w	80092f4 <f_write+0x8e>
 8009588:	e000      	b.n	800958c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800958a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	7d1b      	ldrb	r3, [r3, #20]
 8009590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009594:	b2da      	uxtb	r2, r3
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	2100      	movs	r1, #0
 800959e:	4618      	mov	r0, r3
 80095a0:	f7fe f862 	bl	8007668 <unlock_fs>
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3730      	adds	r7, #48	; 0x30
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b086      	sub	sp, #24
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f107 0208 	add.w	r2, r7, #8
 80095bc:	4611      	mov	r1, r2
 80095be:	4618      	mov	r0, r3
 80095c0:	f7ff fbe0 	bl	8008d84 <validate>
 80095c4:	4603      	mov	r3, r0
 80095c6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80095c8:	7dfb      	ldrb	r3, [r7, #23]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d16d      	bne.n	80096aa <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	7d1b      	ldrb	r3, [r3, #20]
 80095d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d067      	beq.n	80096aa <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	7d1b      	ldrb	r3, [r3, #20]
 80095de:	b25b      	sxtb	r3, r3
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	da1a      	bge.n	800961a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	7858      	ldrb	r0, [r3, #1]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6a1a      	ldr	r2, [r3, #32]
 80095f2:	2301      	movs	r3, #1
 80095f4:	f7fd fee4 	bl	80073c0 <disk_write>
 80095f8:	4603      	mov	r3, r0
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d006      	beq.n	800960c <f_sync+0x5e>
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	2101      	movs	r1, #1
 8009602:	4618      	mov	r0, r3
 8009604:	f7fe f830 	bl	8007668 <unlock_fs>
 8009608:	2301      	movs	r3, #1
 800960a:	e055      	b.n	80096b8 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	7d1b      	ldrb	r3, [r3, #20]
 8009610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009614:	b2da      	uxtb	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800961a:	f7fd f933 	bl	8006884 <get_fattime>
 800961e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009620:	68ba      	ldr	r2, [r7, #8]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009626:	4619      	mov	r1, r3
 8009628:	4610      	mov	r0, r2
 800962a:	f7fe f9e9 	bl	8007a00 <move_window>
 800962e:	4603      	mov	r3, r0
 8009630:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009632:	7dfb      	ldrb	r3, [r7, #23]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d138      	bne.n	80096aa <f_sync+0xfc>
					dir = fp->dir_ptr;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800963c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	330b      	adds	r3, #11
 8009642:	781a      	ldrb	r2, [r3, #0]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	330b      	adds	r3, #11
 8009648:	f042 0220 	orr.w	r2, r2, #32
 800964c:	b2d2      	uxtb	r2, r2
 800964e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6818      	ldr	r0, [r3, #0]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	461a      	mov	r2, r3
 800965a:	68f9      	ldr	r1, [r7, #12]
 800965c:	f7fe fef6 	bl	800844c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f103 021c 	add.w	r2, r3, #28
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	68db      	ldr	r3, [r3, #12]
 800966a:	4619      	mov	r1, r3
 800966c:	4610      	mov	r0, r2
 800966e:	f7fd ff3b 	bl	80074e8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	3316      	adds	r3, #22
 8009676:	6939      	ldr	r1, [r7, #16]
 8009678:	4618      	mov	r0, r3
 800967a:	f7fd ff35 	bl	80074e8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	3312      	adds	r3, #18
 8009682:	2100      	movs	r1, #0
 8009684:	4618      	mov	r0, r3
 8009686:	f7fd ff14 	bl	80074b2 <st_word>
					fs->wflag = 1;
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	2201      	movs	r2, #1
 800968e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	4618      	mov	r0, r3
 8009694:	f7fe f9e2 	bl	8007a5c <sync_fs>
 8009698:	4603      	mov	r3, r0
 800969a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	7d1b      	ldrb	r3, [r3, #20]
 80096a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096a4:	b2da      	uxtb	r2, r3
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	7dfa      	ldrb	r2, [r7, #23]
 80096ae:	4611      	mov	r1, r2
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7fd ffd9 	bl	8007668 <unlock_fs>
 80096b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3718      	adds	r7, #24
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f7ff ff70 	bl	80095ae <f_sync>
 80096ce:	4603      	mov	r3, r0
 80096d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80096d2:	7bfb      	ldrb	r3, [r7, #15]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d11d      	bne.n	8009714 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f107 0208 	add.w	r2, r7, #8
 80096de:	4611      	mov	r1, r2
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7ff fb4f 	bl	8008d84 <validate>
 80096e6:	4603      	mov	r3, r0
 80096e8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80096ea:	7bfb      	ldrb	r3, [r7, #15]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d111      	bne.n	8009714 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	691b      	ldr	r3, [r3, #16]
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7fe f8df 	bl	80078b8 <dec_lock>
 80096fa:	4603      	mov	r3, r0
 80096fc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80096fe:	7bfb      	ldrb	r3, [r7, #15]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d102      	bne.n	800970a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	2100      	movs	r1, #0
 800970e:	4618      	mov	r0, r3
 8009710:	f7fd ffaa 	bl	8007668 <unlock_fs>
#endif
		}
	}
	return res;
 8009714:	7bfb      	ldrb	r3, [r7, #15]
}
 8009716:	4618      	mov	r0, r3
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
	...

08009720 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009720:	b480      	push	{r7}
 8009722:	b087      	sub	sp, #28
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	4613      	mov	r3, r2
 800972c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800972e:	2301      	movs	r3, #1
 8009730:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009732:	2300      	movs	r3, #0
 8009734:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009736:	4b1f      	ldr	r3, [pc, #124]	; (80097b4 <FATFS_LinkDriverEx+0x94>)
 8009738:	7a5b      	ldrb	r3, [r3, #9]
 800973a:	b2db      	uxtb	r3, r3
 800973c:	2b00      	cmp	r3, #0
 800973e:	d131      	bne.n	80097a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009740:	4b1c      	ldr	r3, [pc, #112]	; (80097b4 <FATFS_LinkDriverEx+0x94>)
 8009742:	7a5b      	ldrb	r3, [r3, #9]
 8009744:	b2db      	uxtb	r3, r3
 8009746:	461a      	mov	r2, r3
 8009748:	4b1a      	ldr	r3, [pc, #104]	; (80097b4 <FATFS_LinkDriverEx+0x94>)
 800974a:	2100      	movs	r1, #0
 800974c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800974e:	4b19      	ldr	r3, [pc, #100]	; (80097b4 <FATFS_LinkDriverEx+0x94>)
 8009750:	7a5b      	ldrb	r3, [r3, #9]
 8009752:	b2db      	uxtb	r3, r3
 8009754:	4a17      	ldr	r2, [pc, #92]	; (80097b4 <FATFS_LinkDriverEx+0x94>)
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	4413      	add	r3, r2
 800975a:	68fa      	ldr	r2, [r7, #12]
 800975c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800975e:	4b15      	ldr	r3, [pc, #84]	; (80097b4 <FATFS_LinkDriverEx+0x94>)
 8009760:	7a5b      	ldrb	r3, [r3, #9]
 8009762:	b2db      	uxtb	r3, r3
 8009764:	461a      	mov	r2, r3
 8009766:	4b13      	ldr	r3, [pc, #76]	; (80097b4 <FATFS_LinkDriverEx+0x94>)
 8009768:	4413      	add	r3, r2
 800976a:	79fa      	ldrb	r2, [r7, #7]
 800976c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800976e:	4b11      	ldr	r3, [pc, #68]	; (80097b4 <FATFS_LinkDriverEx+0x94>)
 8009770:	7a5b      	ldrb	r3, [r3, #9]
 8009772:	b2db      	uxtb	r3, r3
 8009774:	1c5a      	adds	r2, r3, #1
 8009776:	b2d1      	uxtb	r1, r2
 8009778:	4a0e      	ldr	r2, [pc, #56]	; (80097b4 <FATFS_LinkDriverEx+0x94>)
 800977a:	7251      	strb	r1, [r2, #9]
 800977c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800977e:	7dbb      	ldrb	r3, [r7, #22]
 8009780:	3330      	adds	r3, #48	; 0x30
 8009782:	b2da      	uxtb	r2, r3
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	3301      	adds	r3, #1
 800978c:	223a      	movs	r2, #58	; 0x3a
 800978e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	3302      	adds	r3, #2
 8009794:	222f      	movs	r2, #47	; 0x2f
 8009796:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	3303      	adds	r3, #3
 800979c:	2200      	movs	r2, #0
 800979e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80097a0:	2300      	movs	r3, #0
 80097a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80097a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	371c      	adds	r7, #28
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr
 80097b2:	bf00      	nop
 80097b4:	20000680 	.word	0x20000680

080097b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80097c2:	2200      	movs	r2, #0
 80097c4:	6839      	ldr	r1, [r7, #0]
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f7ff ffaa 	bl	8009720 <FATFS_LinkDriverEx>
 80097cc:	4603      	mov	r3, r0
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3708      	adds	r7, #8
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b084      	sub	sp, #16
 80097da:	af00      	add	r7, sp, #0
 80097dc:	4603      	mov	r3, r0
 80097de:	6039      	str	r1, [r7, #0]
 80097e0:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 80097e2:	2200      	movs	r2, #0
 80097e4:	2101      	movs	r1, #1
 80097e6:	2001      	movs	r0, #1
 80097e8:	f000 f977 	bl	8009ada <osSemaphoreNew>
 80097ec:	4602      	mov	r2, r0
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	bf14      	ite	ne
 80097fa:	2301      	movne	r3, #1
 80097fc:	2300      	moveq	r3, #0
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	60fb      	str	r3, [r7, #12]

    return ret;
 8009802:	68fb      	ldr	r3, [r7, #12]
}
 8009804:	4618      	mov	r0, r3
 8009806:	3710      	adds	r7, #16
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 fa7f 	bl	8009d18 <osSemaphoreDelete>
#endif
    return 1;
 800981a:	2301      	movs	r3, #1
}
 800981c:	4618      	mov	r0, r3
 800981e:	3708      	adds	r7, #8
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800982c:	2300      	movs	r3, #0
 800982e:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8009830:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 f9d9 	bl	8009bec <osSemaphoreAcquire>
 800983a:	4603      	mov	r3, r0
 800983c:	2b00      	cmp	r3, #0
 800983e:	d101      	bne.n	8009844 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8009840:	2301      	movs	r3, #1
 8009842:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009844:	68fb      	ldr	r3, [r7, #12]
}
 8009846:	4618      	mov	r0, r3
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800984e:	b580      	push	{r7, lr}
 8009850:	b082      	sub	sp, #8
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 fa1a 	bl	8009c90 <osSemaphoreRelease>
#endif
}
 800985c:	bf00      	nop
 800985e:	3708      	adds	r7, #8
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <__NVIC_SetPriority>:
{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	4603      	mov	r3, r0
 800986c:	6039      	str	r1, [r7, #0]
 800986e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009874:	2b00      	cmp	r3, #0
 8009876:	db0a      	blt.n	800988e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	b2da      	uxtb	r2, r3
 800987c:	490c      	ldr	r1, [pc, #48]	; (80098b0 <__NVIC_SetPriority+0x4c>)
 800987e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009882:	0112      	lsls	r2, r2, #4
 8009884:	b2d2      	uxtb	r2, r2
 8009886:	440b      	add	r3, r1
 8009888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800988c:	e00a      	b.n	80098a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	b2da      	uxtb	r2, r3
 8009892:	4908      	ldr	r1, [pc, #32]	; (80098b4 <__NVIC_SetPriority+0x50>)
 8009894:	79fb      	ldrb	r3, [r7, #7]
 8009896:	f003 030f 	and.w	r3, r3, #15
 800989a:	3b04      	subs	r3, #4
 800989c:	0112      	lsls	r2, r2, #4
 800989e:	b2d2      	uxtb	r2, r2
 80098a0:	440b      	add	r3, r1
 80098a2:	761a      	strb	r2, [r3, #24]
}
 80098a4:	bf00      	nop
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr
 80098b0:	e000e100 	.word	0xe000e100
 80098b4:	e000ed00 	.word	0xe000ed00

080098b8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80098b8:	b580      	push	{r7, lr}
 80098ba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80098bc:	4b05      	ldr	r3, [pc, #20]	; (80098d4 <SysTick_Handler+0x1c>)
 80098be:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80098c0:	f002 f962 	bl	800bb88 <xTaskGetSchedulerState>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d001      	beq.n	80098ce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80098ca:	f003 f845 	bl	800c958 <xPortSysTickHandler>
  }
}
 80098ce:	bf00      	nop
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	e000e010 	.word	0xe000e010

080098d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80098d8:	b580      	push	{r7, lr}
 80098da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80098dc:	2100      	movs	r1, #0
 80098de:	f06f 0004 	mvn.w	r0, #4
 80098e2:	f7ff ffbf 	bl	8009864 <__NVIC_SetPriority>
#endif
}
 80098e6:	bf00      	nop
 80098e8:	bd80      	pop	{r7, pc}
	...

080098ec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098f2:	f3ef 8305 	mrs	r3, IPSR
 80098f6:	603b      	str	r3, [r7, #0]
  return(result);
 80098f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d003      	beq.n	8009906 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80098fe:	f06f 0305 	mvn.w	r3, #5
 8009902:	607b      	str	r3, [r7, #4]
 8009904:	e00c      	b.n	8009920 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009906:	4b0a      	ldr	r3, [pc, #40]	; (8009930 <osKernelInitialize+0x44>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d105      	bne.n	800991a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800990e:	4b08      	ldr	r3, [pc, #32]	; (8009930 <osKernelInitialize+0x44>)
 8009910:	2201      	movs	r2, #1
 8009912:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009914:	2300      	movs	r3, #0
 8009916:	607b      	str	r3, [r7, #4]
 8009918:	e002      	b.n	8009920 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800991a:	f04f 33ff 	mov.w	r3, #4294967295
 800991e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009920:	687b      	ldr	r3, [r7, #4]
}
 8009922:	4618      	mov	r0, r3
 8009924:	370c      	adds	r7, #12
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop
 8009930:	2000068c 	.word	0x2000068c

08009934 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800993a:	f3ef 8305 	mrs	r3, IPSR
 800993e:	603b      	str	r3, [r7, #0]
  return(result);
 8009940:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009942:	2b00      	cmp	r3, #0
 8009944:	d003      	beq.n	800994e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009946:	f06f 0305 	mvn.w	r3, #5
 800994a:	607b      	str	r3, [r7, #4]
 800994c:	e010      	b.n	8009970 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800994e:	4b0b      	ldr	r3, [pc, #44]	; (800997c <osKernelStart+0x48>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2b01      	cmp	r3, #1
 8009954:	d109      	bne.n	800996a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009956:	f7ff ffbf 	bl	80098d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800995a:	4b08      	ldr	r3, [pc, #32]	; (800997c <osKernelStart+0x48>)
 800995c:	2202      	movs	r2, #2
 800995e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009960:	f001 fcca 	bl	800b2f8 <vTaskStartScheduler>
      stat = osOK;
 8009964:	2300      	movs	r3, #0
 8009966:	607b      	str	r3, [r7, #4]
 8009968:	e002      	b.n	8009970 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800996a:	f04f 33ff 	mov.w	r3, #4294967295
 800996e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009970:	687b      	ldr	r3, [r7, #4]
}
 8009972:	4618      	mov	r0, r3
 8009974:	3708      	adds	r7, #8
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	2000068c 	.word	0x2000068c

08009980 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009980:	b580      	push	{r7, lr}
 8009982:	b08e      	sub	sp, #56	; 0x38
 8009984:	af04      	add	r7, sp, #16
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800998c:	2300      	movs	r3, #0
 800998e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009990:	f3ef 8305 	mrs	r3, IPSR
 8009994:	617b      	str	r3, [r7, #20]
  return(result);
 8009996:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009998:	2b00      	cmp	r3, #0
 800999a:	d17e      	bne.n	8009a9a <osThreadNew+0x11a>
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d07b      	beq.n	8009a9a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80099a2:	2340      	movs	r3, #64	; 0x40
 80099a4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80099a6:	2318      	movs	r3, #24
 80099a8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80099aa:	2300      	movs	r3, #0
 80099ac:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80099ae:	f04f 33ff 	mov.w	r3, #4294967295
 80099b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d045      	beq.n	8009a46 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d002      	beq.n	80099c8 <osThreadNew+0x48>
        name = attr->name;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	699b      	ldr	r3, [r3, #24]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d002      	beq.n	80099d6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	699b      	ldr	r3, [r3, #24]
 80099d4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80099d6:	69fb      	ldr	r3, [r7, #28]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d008      	beq.n	80099ee <osThreadNew+0x6e>
 80099dc:	69fb      	ldr	r3, [r7, #28]
 80099de:	2b38      	cmp	r3, #56	; 0x38
 80099e0:	d805      	bhi.n	80099ee <osThreadNew+0x6e>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	f003 0301 	and.w	r3, r3, #1
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d001      	beq.n	80099f2 <osThreadNew+0x72>
        return (NULL);
 80099ee:	2300      	movs	r3, #0
 80099f0:	e054      	b.n	8009a9c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	695b      	ldr	r3, [r3, #20]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d003      	beq.n	8009a02 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	695b      	ldr	r3, [r3, #20]
 80099fe:	089b      	lsrs	r3, r3, #2
 8009a00:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	689b      	ldr	r3, [r3, #8]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00e      	beq.n	8009a28 <osThreadNew+0xa8>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	2b5b      	cmp	r3, #91	; 0x5b
 8009a10:	d90a      	bls.n	8009a28 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d006      	beq.n	8009a28 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	695b      	ldr	r3, [r3, #20]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d002      	beq.n	8009a28 <osThreadNew+0xa8>
        mem = 1;
 8009a22:	2301      	movs	r3, #1
 8009a24:	61bb      	str	r3, [r7, #24]
 8009a26:	e010      	b.n	8009a4a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d10c      	bne.n	8009a4a <osThreadNew+0xca>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d108      	bne.n	8009a4a <osThreadNew+0xca>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d104      	bne.n	8009a4a <osThreadNew+0xca>
          mem = 0;
 8009a40:	2300      	movs	r3, #0
 8009a42:	61bb      	str	r3, [r7, #24]
 8009a44:	e001      	b.n	8009a4a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009a46:	2300      	movs	r3, #0
 8009a48:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009a4a:	69bb      	ldr	r3, [r7, #24]
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d110      	bne.n	8009a72 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009a58:	9202      	str	r2, [sp, #8]
 8009a5a:	9301      	str	r3, [sp, #4]
 8009a5c:	69fb      	ldr	r3, [r7, #28]
 8009a5e:	9300      	str	r3, [sp, #0]
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	6a3a      	ldr	r2, [r7, #32]
 8009a64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a66:	68f8      	ldr	r0, [r7, #12]
 8009a68:	f001 fa70 	bl	800af4c <xTaskCreateStatic>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	613b      	str	r3, [r7, #16]
 8009a70:	e013      	b.n	8009a9a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009a72:	69bb      	ldr	r3, [r7, #24]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d110      	bne.n	8009a9a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009a78:	6a3b      	ldr	r3, [r7, #32]
 8009a7a:	b29a      	uxth	r2, r3
 8009a7c:	f107 0310 	add.w	r3, r7, #16
 8009a80:	9301      	str	r3, [sp, #4]
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a8a:	68f8      	ldr	r0, [r7, #12]
 8009a8c:	f001 fabb 	bl	800b006 <xTaskCreate>
 8009a90:	4603      	mov	r3, r0
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d001      	beq.n	8009a9a <osThreadNew+0x11a>
            hTask = NULL;
 8009a96:	2300      	movs	r3, #0
 8009a98:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009a9a:	693b      	ldr	r3, [r7, #16]
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3728      	adds	r7, #40	; 0x28
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009aac:	f3ef 8305 	mrs	r3, IPSR
 8009ab0:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ab2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d003      	beq.n	8009ac0 <osDelay+0x1c>
    stat = osErrorISR;
 8009ab8:	f06f 0305 	mvn.w	r3, #5
 8009abc:	60fb      	str	r3, [r7, #12]
 8009abe:	e007      	b.n	8009ad0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d002      	beq.n	8009ad0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f001 fbe0 	bl	800b290 <vTaskDelay>
    }
  }

  return (stat);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3710      	adds	r7, #16
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b08a      	sub	sp, #40	; 0x28
 8009ade:	af02      	add	r7, sp, #8
 8009ae0:	60f8      	str	r0, [r7, #12]
 8009ae2:	60b9      	str	r1, [r7, #8]
 8009ae4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009aea:	f3ef 8305 	mrs	r3, IPSR
 8009aee:	613b      	str	r3, [r7, #16]
  return(result);
 8009af0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d175      	bne.n	8009be2 <osSemaphoreNew+0x108>
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d072      	beq.n	8009be2 <osSemaphoreNew+0x108>
 8009afc:	68ba      	ldr	r2, [r7, #8]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d86e      	bhi.n	8009be2 <osSemaphoreNew+0x108>
    mem = -1;
 8009b04:	f04f 33ff 	mov.w	r3, #4294967295
 8009b08:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d015      	beq.n	8009b3c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	689b      	ldr	r3, [r3, #8]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d006      	beq.n	8009b26 <osSemaphoreNew+0x4c>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	2b4f      	cmp	r3, #79	; 0x4f
 8009b1e:	d902      	bls.n	8009b26 <osSemaphoreNew+0x4c>
        mem = 1;
 8009b20:	2301      	movs	r3, #1
 8009b22:	61bb      	str	r3, [r7, #24]
 8009b24:	e00c      	b.n	8009b40 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d108      	bne.n	8009b40 <osSemaphoreNew+0x66>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d104      	bne.n	8009b40 <osSemaphoreNew+0x66>
          mem = 0;
 8009b36:	2300      	movs	r3, #0
 8009b38:	61bb      	str	r3, [r7, #24]
 8009b3a:	e001      	b.n	8009b40 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b46:	d04c      	beq.n	8009be2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d128      	bne.n	8009ba0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009b4e:	69bb      	ldr	r3, [r7, #24]
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d10a      	bne.n	8009b6a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	2203      	movs	r2, #3
 8009b5a:	9200      	str	r2, [sp, #0]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	2100      	movs	r1, #0
 8009b60:	2001      	movs	r0, #1
 8009b62:	f000 fa4d 	bl	800a000 <xQueueGenericCreateStatic>
 8009b66:	61f8      	str	r0, [r7, #28]
 8009b68:	e005      	b.n	8009b76 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009b6a:	2203      	movs	r2, #3
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	2001      	movs	r0, #1
 8009b70:	f000 fabe 	bl	800a0f0 <xQueueGenericCreate>
 8009b74:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d022      	beq.n	8009bc2 <osSemaphoreNew+0xe8>
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d01f      	beq.n	8009bc2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009b82:	2300      	movs	r3, #0
 8009b84:	2200      	movs	r2, #0
 8009b86:	2100      	movs	r1, #0
 8009b88:	69f8      	ldr	r0, [r7, #28]
 8009b8a:	f000 fb79 	bl	800a280 <xQueueGenericSend>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d016      	beq.n	8009bc2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009b94:	69f8      	ldr	r0, [r7, #28]
 8009b96:	f001 f805 	bl	800aba4 <vQueueDelete>
            hSemaphore = NULL;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	61fb      	str	r3, [r7, #28]
 8009b9e:	e010      	b.n	8009bc2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009ba0:	69bb      	ldr	r3, [r7, #24]
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d108      	bne.n	8009bb8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	689b      	ldr	r3, [r3, #8]
 8009baa:	461a      	mov	r2, r3
 8009bac:	68b9      	ldr	r1, [r7, #8]
 8009bae:	68f8      	ldr	r0, [r7, #12]
 8009bb0:	f000 fafb 	bl	800a1aa <xQueueCreateCountingSemaphoreStatic>
 8009bb4:	61f8      	str	r0, [r7, #28]
 8009bb6:	e004      	b.n	8009bc2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009bb8:	68b9      	ldr	r1, [r7, #8]
 8009bba:	68f8      	ldr	r0, [r7, #12]
 8009bbc:	f000 fb2c 	bl	800a218 <xQueueCreateCountingSemaphore>
 8009bc0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d00c      	beq.n	8009be2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d003      	beq.n	8009bd6 <osSemaphoreNew+0xfc>
          name = attr->name;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	617b      	str	r3, [r7, #20]
 8009bd4:	e001      	b.n	8009bda <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009bda:	6979      	ldr	r1, [r7, #20]
 8009bdc:	69f8      	ldr	r0, [r7, #28]
 8009bde:	f001 f92d 	bl	800ae3c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009be2:	69fb      	ldr	r3, [r7, #28]
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3720      	adds	r7, #32
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b086      	sub	sp, #24
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d103      	bne.n	8009c0c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009c04:	f06f 0303 	mvn.w	r3, #3
 8009c08:	617b      	str	r3, [r7, #20]
 8009c0a:	e039      	b.n	8009c80 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c0c:	f3ef 8305 	mrs	r3, IPSR
 8009c10:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c12:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d022      	beq.n	8009c5e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d003      	beq.n	8009c26 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009c1e:	f06f 0303 	mvn.w	r3, #3
 8009c22:	617b      	str	r3, [r7, #20]
 8009c24:	e02c      	b.n	8009c80 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009c26:	2300      	movs	r3, #0
 8009c28:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009c2a:	f107 0308 	add.w	r3, r7, #8
 8009c2e:	461a      	mov	r2, r3
 8009c30:	2100      	movs	r1, #0
 8009c32:	6938      	ldr	r0, [r7, #16]
 8009c34:	f000 ff36 	bl	800aaa4 <xQueueReceiveFromISR>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d003      	beq.n	8009c46 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009c3e:	f06f 0302 	mvn.w	r3, #2
 8009c42:	617b      	str	r3, [r7, #20]
 8009c44:	e01c      	b.n	8009c80 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d019      	beq.n	8009c80 <osSemaphoreAcquire+0x94>
 8009c4c:	4b0f      	ldr	r3, [pc, #60]	; (8009c8c <osSemaphoreAcquire+0xa0>)
 8009c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c52:	601a      	str	r2, [r3, #0]
 8009c54:	f3bf 8f4f 	dsb	sy
 8009c58:	f3bf 8f6f 	isb	sy
 8009c5c:	e010      	b.n	8009c80 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009c5e:	6839      	ldr	r1, [r7, #0]
 8009c60:	6938      	ldr	r0, [r7, #16]
 8009c62:	f000 fe13 	bl	800a88c <xQueueSemaphoreTake>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d009      	beq.n	8009c80 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d003      	beq.n	8009c7a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009c72:	f06f 0301 	mvn.w	r3, #1
 8009c76:	617b      	str	r3, [r7, #20]
 8009c78:	e002      	b.n	8009c80 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009c7a:	f06f 0302 	mvn.w	r3, #2
 8009c7e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009c80:	697b      	ldr	r3, [r7, #20]
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3718      	adds	r7, #24
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	e000ed04 	.word	0xe000ed04

08009c90 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b086      	sub	sp, #24
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d103      	bne.n	8009cae <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009ca6:	f06f 0303 	mvn.w	r3, #3
 8009caa:	617b      	str	r3, [r7, #20]
 8009cac:	e02c      	b.n	8009d08 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cae:	f3ef 8305 	mrs	r3, IPSR
 8009cb2:	60fb      	str	r3, [r7, #12]
  return(result);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d01a      	beq.n	8009cf0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009cbe:	f107 0308 	add.w	r3, r7, #8
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	6938      	ldr	r0, [r7, #16]
 8009cc6:	f000 fc74 	bl	800a5b2 <xQueueGiveFromISR>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d003      	beq.n	8009cd8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009cd0:	f06f 0302 	mvn.w	r3, #2
 8009cd4:	617b      	str	r3, [r7, #20]
 8009cd6:	e017      	b.n	8009d08 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d014      	beq.n	8009d08 <osSemaphoreRelease+0x78>
 8009cde:	4b0d      	ldr	r3, [pc, #52]	; (8009d14 <osSemaphoreRelease+0x84>)
 8009ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ce4:	601a      	str	r2, [r3, #0]
 8009ce6:	f3bf 8f4f 	dsb	sy
 8009cea:	f3bf 8f6f 	isb	sy
 8009cee:	e00b      	b.n	8009d08 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	2100      	movs	r1, #0
 8009cf6:	6938      	ldr	r0, [r7, #16]
 8009cf8:	f000 fac2 	bl	800a280 <xQueueGenericSend>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d002      	beq.n	8009d08 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009d02:	f06f 0302 	mvn.w	r3, #2
 8009d06:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009d08:	697b      	ldr	r3, [r7, #20]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3718      	adds	r7, #24
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	e000ed04 	.word	0xe000ed04

08009d18 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b086      	sub	sp, #24
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d24:	f3ef 8305 	mrs	r3, IPSR
 8009d28:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d003      	beq.n	8009d38 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8009d30:	f06f 0305 	mvn.w	r3, #5
 8009d34:	617b      	str	r3, [r7, #20]
 8009d36:	e00e      	b.n	8009d56 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d103      	bne.n	8009d46 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8009d3e:	f06f 0303 	mvn.w	r3, #3
 8009d42:	617b      	str	r3, [r7, #20]
 8009d44:	e007      	b.n	8009d56 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8009d46:	6938      	ldr	r0, [r7, #16]
 8009d48:	f001 f8a2 	bl	800ae90 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8009d50:	6938      	ldr	r0, [r7, #16]
 8009d52:	f000 ff27 	bl	800aba4 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8009d56:	697b      	ldr	r3, [r7, #20]
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3718      	adds	r7, #24
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009d60:	b480      	push	{r7}
 8009d62:	b085      	sub	sp, #20
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	60b9      	str	r1, [r7, #8]
 8009d6a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	4a07      	ldr	r2, [pc, #28]	; (8009d8c <vApplicationGetIdleTaskMemory+0x2c>)
 8009d70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	4a06      	ldr	r2, [pc, #24]	; (8009d90 <vApplicationGetIdleTaskMemory+0x30>)
 8009d76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2240      	movs	r2, #64	; 0x40
 8009d7c:	601a      	str	r2, [r3, #0]
}
 8009d7e:	bf00      	nop
 8009d80:	3714      	adds	r7, #20
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr
 8009d8a:	bf00      	nop
 8009d8c:	20000690 	.word	0x20000690
 8009d90:	200006ec 	.word	0x200006ec

08009d94 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009d94:	b480      	push	{r7}
 8009d96:	b085      	sub	sp, #20
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	4a07      	ldr	r2, [pc, #28]	; (8009dc0 <vApplicationGetTimerTaskMemory+0x2c>)
 8009da4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	4a06      	ldr	r2, [pc, #24]	; (8009dc4 <vApplicationGetTimerTaskMemory+0x30>)
 8009daa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2280      	movs	r2, #128	; 0x80
 8009db0:	601a      	str	r2, [r3, #0]
}
 8009db2:	bf00      	nop
 8009db4:	3714      	adds	r7, #20
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop
 8009dc0:	200007ec 	.word	0x200007ec
 8009dc4:	20000848 	.word	0x20000848

08009dc8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f103 0208 	add.w	r2, r3, #8
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8009de0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f103 0208 	add.w	r2, r3, #8
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f103 0208 	add.w	r2, r3, #8
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009dfc:	bf00      	nop
 8009dfe:	370c      	adds	r7, #12
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr

08009e08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009e16:	bf00      	nop
 8009e18:	370c      	adds	r7, #12
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr

08009e22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e22:	b480      	push	{r7}
 8009e24:	b085      	sub	sp, #20
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
 8009e2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	68fa      	ldr	r2, [r7, #12]
 8009e36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	689a      	ldr	r2, [r3, #8]
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	683a      	ldr	r2, [r7, #0]
 8009e46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	683a      	ldr	r2, [r7, #0]
 8009e4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	1c5a      	adds	r2, r3, #1
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	601a      	str	r2, [r3, #0]
}
 8009e5e:	bf00      	nop
 8009e60:	3714      	adds	r7, #20
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr

08009e6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e6a:	b480      	push	{r7}
 8009e6c:	b085      	sub	sp, #20
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
 8009e72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e80:	d103      	bne.n	8009e8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	691b      	ldr	r3, [r3, #16]
 8009e86:	60fb      	str	r3, [r7, #12]
 8009e88:	e00c      	b.n	8009ea4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	3308      	adds	r3, #8
 8009e8e:	60fb      	str	r3, [r7, #12]
 8009e90:	e002      	b.n	8009e98 <vListInsert+0x2e>
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	60fb      	str	r3, [r7, #12]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	68ba      	ldr	r2, [r7, #8]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d2f6      	bcs.n	8009e92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	685a      	ldr	r2, [r3, #4]
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	683a      	ldr	r2, [r7, #0]
 8009eb2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	683a      	ldr	r2, [r7, #0]
 8009ebe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	1c5a      	adds	r2, r3, #1
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	601a      	str	r2, [r3, #0]
}
 8009ed0:	bf00      	nop
 8009ed2:	3714      	adds	r7, #20
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009edc:	b480      	push	{r7}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	691b      	ldr	r3, [r3, #16]
 8009ee8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	6892      	ldr	r2, [r2, #8]
 8009ef2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	6852      	ldr	r2, [r2, #4]
 8009efc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d103      	bne.n	8009f10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	689a      	ldr	r2, [r3, #8]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	1e5a      	subs	r2, r3, #1
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3714      	adds	r7, #20
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d10a      	bne.n	8009f5a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f48:	f383 8811 	msr	BASEPRI, r3
 8009f4c:	f3bf 8f6f 	isb	sy
 8009f50:	f3bf 8f4f 	dsb	sy
 8009f54:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009f56:	bf00      	nop
 8009f58:	e7fe      	b.n	8009f58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009f5a:	f002 fc6b 	bl	800c834 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f66:	68f9      	ldr	r1, [r7, #12]
 8009f68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f6a:	fb01 f303 	mul.w	r3, r1, r3
 8009f6e:	441a      	add	r2, r3
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2200      	movs	r2, #0
 8009f78:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681a      	ldr	r2, [r3, #0]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f8a:	3b01      	subs	r3, #1
 8009f8c:	68f9      	ldr	r1, [r7, #12]
 8009f8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f90:	fb01 f303 	mul.w	r3, r1, r3
 8009f94:	441a      	add	r2, r3
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	22ff      	movs	r2, #255	; 0xff
 8009f9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	22ff      	movs	r2, #255	; 0xff
 8009fa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d114      	bne.n	8009fda <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	691b      	ldr	r3, [r3, #16]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d01a      	beq.n	8009fee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	3310      	adds	r3, #16
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f001 fc25 	bl	800b80c <xTaskRemoveFromEventList>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d012      	beq.n	8009fee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009fc8:	4b0c      	ldr	r3, [pc, #48]	; (8009ffc <xQueueGenericReset+0xcc>)
 8009fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fce:	601a      	str	r2, [r3, #0]
 8009fd0:	f3bf 8f4f 	dsb	sy
 8009fd4:	f3bf 8f6f 	isb	sy
 8009fd8:	e009      	b.n	8009fee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	3310      	adds	r3, #16
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7ff fef2 	bl	8009dc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	3324      	adds	r3, #36	; 0x24
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f7ff feed 	bl	8009dc8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009fee:	f002 fc51 	bl	800c894 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009ff2:	2301      	movs	r3, #1
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}
 8009ffc:	e000ed04 	.word	0xe000ed04

0800a000 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a000:	b580      	push	{r7, lr}
 800a002:	b08e      	sub	sp, #56	; 0x38
 800a004:	af02      	add	r7, sp, #8
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	607a      	str	r2, [r7, #4]
 800a00c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d10a      	bne.n	800a02a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a018:	f383 8811 	msr	BASEPRI, r3
 800a01c:	f3bf 8f6f 	isb	sy
 800a020:	f3bf 8f4f 	dsb	sy
 800a024:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a026:	bf00      	nop
 800a028:	e7fe      	b.n	800a028 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d10a      	bne.n	800a046 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a034:	f383 8811 	msr	BASEPRI, r3
 800a038:	f3bf 8f6f 	isb	sy
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a042:	bf00      	nop
 800a044:	e7fe      	b.n	800a044 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d002      	beq.n	800a052 <xQueueGenericCreateStatic+0x52>
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d001      	beq.n	800a056 <xQueueGenericCreateStatic+0x56>
 800a052:	2301      	movs	r3, #1
 800a054:	e000      	b.n	800a058 <xQueueGenericCreateStatic+0x58>
 800a056:	2300      	movs	r3, #0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d10a      	bne.n	800a072 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a060:	f383 8811 	msr	BASEPRI, r3
 800a064:	f3bf 8f6f 	isb	sy
 800a068:	f3bf 8f4f 	dsb	sy
 800a06c:	623b      	str	r3, [r7, #32]
}
 800a06e:	bf00      	nop
 800a070:	e7fe      	b.n	800a070 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d102      	bne.n	800a07e <xQueueGenericCreateStatic+0x7e>
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d101      	bne.n	800a082 <xQueueGenericCreateStatic+0x82>
 800a07e:	2301      	movs	r3, #1
 800a080:	e000      	b.n	800a084 <xQueueGenericCreateStatic+0x84>
 800a082:	2300      	movs	r3, #0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d10a      	bne.n	800a09e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08c:	f383 8811 	msr	BASEPRI, r3
 800a090:	f3bf 8f6f 	isb	sy
 800a094:	f3bf 8f4f 	dsb	sy
 800a098:	61fb      	str	r3, [r7, #28]
}
 800a09a:	bf00      	nop
 800a09c:	e7fe      	b.n	800a09c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a09e:	2350      	movs	r3, #80	; 0x50
 800a0a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	2b50      	cmp	r3, #80	; 0x50
 800a0a6:	d00a      	beq.n	800a0be <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ac:	f383 8811 	msr	BASEPRI, r3
 800a0b0:	f3bf 8f6f 	isb	sy
 800a0b4:	f3bf 8f4f 	dsb	sy
 800a0b8:	61bb      	str	r3, [r7, #24]
}
 800a0ba:	bf00      	nop
 800a0bc:	e7fe      	b.n	800a0bc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a0be:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d00d      	beq.n	800a0e6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a0d2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d8:	9300      	str	r3, [sp, #0]
 800a0da:	4613      	mov	r3, r2
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	68b9      	ldr	r1, [r7, #8]
 800a0e0:	68f8      	ldr	r0, [r7, #12]
 800a0e2:	f000 f83f 	bl	800a164 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3730      	adds	r7, #48	; 0x30
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b08a      	sub	sp, #40	; 0x28
 800a0f4:	af02      	add	r7, sp, #8
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	60b9      	str	r1, [r7, #8]
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d10a      	bne.n	800a11a <xQueueGenericCreate+0x2a>
	__asm volatile
 800a104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a108:	f383 8811 	msr	BASEPRI, r3
 800a10c:	f3bf 8f6f 	isb	sy
 800a110:	f3bf 8f4f 	dsb	sy
 800a114:	613b      	str	r3, [r7, #16]
}
 800a116:	bf00      	nop
 800a118:	e7fe      	b.n	800a118 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	68ba      	ldr	r2, [r7, #8]
 800a11e:	fb02 f303 	mul.w	r3, r2, r3
 800a122:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a124:	69fb      	ldr	r3, [r7, #28]
 800a126:	3350      	adds	r3, #80	; 0x50
 800a128:	4618      	mov	r0, r3
 800a12a:	f002 fca5 	bl	800ca78 <pvPortMalloc>
 800a12e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a130:	69bb      	ldr	r3, [r7, #24]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d011      	beq.n	800a15a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a136:	69bb      	ldr	r3, [r7, #24]
 800a138:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	3350      	adds	r3, #80	; 0x50
 800a13e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a140:	69bb      	ldr	r3, [r7, #24]
 800a142:	2200      	movs	r2, #0
 800a144:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a148:	79fa      	ldrb	r2, [r7, #7]
 800a14a:	69bb      	ldr	r3, [r7, #24]
 800a14c:	9300      	str	r3, [sp, #0]
 800a14e:	4613      	mov	r3, r2
 800a150:	697a      	ldr	r2, [r7, #20]
 800a152:	68b9      	ldr	r1, [r7, #8]
 800a154:	68f8      	ldr	r0, [r7, #12]
 800a156:	f000 f805 	bl	800a164 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a15a:	69bb      	ldr	r3, [r7, #24]
	}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3720      	adds	r7, #32
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	60f8      	str	r0, [r7, #12]
 800a16c:	60b9      	str	r1, [r7, #8]
 800a16e:	607a      	str	r2, [r7, #4]
 800a170:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d103      	bne.n	800a180 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a178:	69bb      	ldr	r3, [r7, #24]
 800a17a:	69ba      	ldr	r2, [r7, #24]
 800a17c:	601a      	str	r2, [r3, #0]
 800a17e:	e002      	b.n	800a186 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a180:	69bb      	ldr	r3, [r7, #24]
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a186:	69bb      	ldr	r3, [r7, #24]
 800a188:	68fa      	ldr	r2, [r7, #12]
 800a18a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	68ba      	ldr	r2, [r7, #8]
 800a190:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a192:	2101      	movs	r1, #1
 800a194:	69b8      	ldr	r0, [r7, #24]
 800a196:	f7ff fecb 	bl	8009f30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	78fa      	ldrb	r2, [r7, #3]
 800a19e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a1a2:	bf00      	nop
 800a1a4:	3710      	adds	r7, #16
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}

0800a1aa <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b08a      	sub	sp, #40	; 0x28
 800a1ae:	af02      	add	r7, sp, #8
 800a1b0:	60f8      	str	r0, [r7, #12]
 800a1b2:	60b9      	str	r1, [r7, #8]
 800a1b4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d10a      	bne.n	800a1d2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c0:	f383 8811 	msr	BASEPRI, r3
 800a1c4:	f3bf 8f6f 	isb	sy
 800a1c8:	f3bf 8f4f 	dsb	sy
 800a1cc:	61bb      	str	r3, [r7, #24]
}
 800a1ce:	bf00      	nop
 800a1d0:	e7fe      	b.n	800a1d0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a1d2:	68ba      	ldr	r2, [r7, #8]
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d90a      	bls.n	800a1f0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1de:	f383 8811 	msr	BASEPRI, r3
 800a1e2:	f3bf 8f6f 	isb	sy
 800a1e6:	f3bf 8f4f 	dsb	sy
 800a1ea:	617b      	str	r3, [r7, #20]
}
 800a1ec:	bf00      	nop
 800a1ee:	e7fe      	b.n	800a1ee <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a1f0:	2302      	movs	r3, #2
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	2100      	movs	r1, #0
 800a1fa:	68f8      	ldr	r0, [r7, #12]
 800a1fc:	f7ff ff00 	bl	800a000 <xQueueGenericCreateStatic>
 800a200:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a202:	69fb      	ldr	r3, [r7, #28]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d002      	beq.n	800a20e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a208:	69fb      	ldr	r3, [r7, #28]
 800a20a:	68ba      	ldr	r2, [r7, #8]
 800a20c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a20e:	69fb      	ldr	r3, [r7, #28]
	}
 800a210:	4618      	mov	r0, r3
 800a212:	3720      	adds	r7, #32
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b086      	sub	sp, #24
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d10a      	bne.n	800a23e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a22c:	f383 8811 	msr	BASEPRI, r3
 800a230:	f3bf 8f6f 	isb	sy
 800a234:	f3bf 8f4f 	dsb	sy
 800a238:	613b      	str	r3, [r7, #16]
}
 800a23a:	bf00      	nop
 800a23c:	e7fe      	b.n	800a23c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a23e:	683a      	ldr	r2, [r7, #0]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	429a      	cmp	r2, r3
 800a244:	d90a      	bls.n	800a25c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24a:	f383 8811 	msr	BASEPRI, r3
 800a24e:	f3bf 8f6f 	isb	sy
 800a252:	f3bf 8f4f 	dsb	sy
 800a256:	60fb      	str	r3, [r7, #12]
}
 800a258:	bf00      	nop
 800a25a:	e7fe      	b.n	800a25a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a25c:	2202      	movs	r2, #2
 800a25e:	2100      	movs	r1, #0
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f7ff ff45 	bl	800a0f0 <xQueueGenericCreate>
 800a266:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d002      	beq.n	800a274 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	683a      	ldr	r2, [r7, #0]
 800a272:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a274:	697b      	ldr	r3, [r7, #20]
	}
 800a276:	4618      	mov	r0, r3
 800a278:	3718      	adds	r7, #24
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
	...

0800a280 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b08e      	sub	sp, #56	; 0x38
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	607a      	str	r2, [r7, #4]
 800a28c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a28e:	2300      	movs	r3, #0
 800a290:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d10a      	bne.n	800a2b2 <xQueueGenericSend+0x32>
	__asm volatile
 800a29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a0:	f383 8811 	msr	BASEPRI, r3
 800a2a4:	f3bf 8f6f 	isb	sy
 800a2a8:	f3bf 8f4f 	dsb	sy
 800a2ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a2ae:	bf00      	nop
 800a2b0:	e7fe      	b.n	800a2b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d103      	bne.n	800a2c0 <xQueueGenericSend+0x40>
 800a2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d101      	bne.n	800a2c4 <xQueueGenericSend+0x44>
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	e000      	b.n	800a2c6 <xQueueGenericSend+0x46>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d10a      	bne.n	800a2e0 <xQueueGenericSend+0x60>
	__asm volatile
 800a2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ce:	f383 8811 	msr	BASEPRI, r3
 800a2d2:	f3bf 8f6f 	isb	sy
 800a2d6:	f3bf 8f4f 	dsb	sy
 800a2da:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a2dc:	bf00      	nop
 800a2de:	e7fe      	b.n	800a2de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	2b02      	cmp	r3, #2
 800a2e4:	d103      	bne.n	800a2ee <xQueueGenericSend+0x6e>
 800a2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d101      	bne.n	800a2f2 <xQueueGenericSend+0x72>
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	e000      	b.n	800a2f4 <xQueueGenericSend+0x74>
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d10a      	bne.n	800a30e <xQueueGenericSend+0x8e>
	__asm volatile
 800a2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fc:	f383 8811 	msr	BASEPRI, r3
 800a300:	f3bf 8f6f 	isb	sy
 800a304:	f3bf 8f4f 	dsb	sy
 800a308:	623b      	str	r3, [r7, #32]
}
 800a30a:	bf00      	nop
 800a30c:	e7fe      	b.n	800a30c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a30e:	f001 fc3b 	bl	800bb88 <xTaskGetSchedulerState>
 800a312:	4603      	mov	r3, r0
 800a314:	2b00      	cmp	r3, #0
 800a316:	d102      	bne.n	800a31e <xQueueGenericSend+0x9e>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d101      	bne.n	800a322 <xQueueGenericSend+0xa2>
 800a31e:	2301      	movs	r3, #1
 800a320:	e000      	b.n	800a324 <xQueueGenericSend+0xa4>
 800a322:	2300      	movs	r3, #0
 800a324:	2b00      	cmp	r3, #0
 800a326:	d10a      	bne.n	800a33e <xQueueGenericSend+0xbe>
	__asm volatile
 800a328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32c:	f383 8811 	msr	BASEPRI, r3
 800a330:	f3bf 8f6f 	isb	sy
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	61fb      	str	r3, [r7, #28]
}
 800a33a:	bf00      	nop
 800a33c:	e7fe      	b.n	800a33c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a33e:	f002 fa79 	bl	800c834 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d302      	bcc.n	800a354 <xQueueGenericSend+0xd4>
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	2b02      	cmp	r3, #2
 800a352:	d129      	bne.n	800a3a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a354:	683a      	ldr	r2, [r7, #0]
 800a356:	68b9      	ldr	r1, [r7, #8]
 800a358:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a35a:	f000 fc5e 	bl	800ac1a <prvCopyDataToQueue>
 800a35e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a364:	2b00      	cmp	r3, #0
 800a366:	d010      	beq.n	800a38a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36a:	3324      	adds	r3, #36	; 0x24
 800a36c:	4618      	mov	r0, r3
 800a36e:	f001 fa4d 	bl	800b80c <xTaskRemoveFromEventList>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d013      	beq.n	800a3a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a378:	4b3f      	ldr	r3, [pc, #252]	; (800a478 <xQueueGenericSend+0x1f8>)
 800a37a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a37e:	601a      	str	r2, [r3, #0]
 800a380:	f3bf 8f4f 	dsb	sy
 800a384:	f3bf 8f6f 	isb	sy
 800a388:	e00a      	b.n	800a3a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d007      	beq.n	800a3a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a390:	4b39      	ldr	r3, [pc, #228]	; (800a478 <xQueueGenericSend+0x1f8>)
 800a392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a396:	601a      	str	r2, [r3, #0]
 800a398:	f3bf 8f4f 	dsb	sy
 800a39c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a3a0:	f002 fa78 	bl	800c894 <vPortExitCritical>
				return pdPASS;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	e063      	b.n	800a470 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d103      	bne.n	800a3b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a3ae:	f002 fa71 	bl	800c894 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	e05c      	b.n	800a470 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d106      	bne.n	800a3ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3bc:	f107 0314 	add.w	r3, r7, #20
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f001 fa87 	bl	800b8d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3ca:	f002 fa63 	bl	800c894 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a3ce:	f000 fff9 	bl	800b3c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3d2:	f002 fa2f 	bl	800c834 <vPortEnterCritical>
 800a3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3dc:	b25b      	sxtb	r3, r3
 800a3de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3e2:	d103      	bne.n	800a3ec <xQueueGenericSend+0x16c>
 800a3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3f2:	b25b      	sxtb	r3, r3
 800a3f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3f8:	d103      	bne.n	800a402 <xQueueGenericSend+0x182>
 800a3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a402:	f002 fa47 	bl	800c894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a406:	1d3a      	adds	r2, r7, #4
 800a408:	f107 0314 	add.w	r3, r7, #20
 800a40c:	4611      	mov	r1, r2
 800a40e:	4618      	mov	r0, r3
 800a410:	f001 fa76 	bl	800b900 <xTaskCheckForTimeOut>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d124      	bne.n	800a464 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a41a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a41c:	f000 fcf5 	bl	800ae0a <prvIsQueueFull>
 800a420:	4603      	mov	r3, r0
 800a422:	2b00      	cmp	r3, #0
 800a424:	d018      	beq.n	800a458 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a428:	3310      	adds	r3, #16
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	4611      	mov	r1, r2
 800a42e:	4618      	mov	r0, r3
 800a430:	f001 f99c 	bl	800b76c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a436:	f000 fc80 	bl	800ad3a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a43a:	f000 ffd1 	bl	800b3e0 <xTaskResumeAll>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	f47f af7c 	bne.w	800a33e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a446:	4b0c      	ldr	r3, [pc, #48]	; (800a478 <xQueueGenericSend+0x1f8>)
 800a448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a44c:	601a      	str	r2, [r3, #0]
 800a44e:	f3bf 8f4f 	dsb	sy
 800a452:	f3bf 8f6f 	isb	sy
 800a456:	e772      	b.n	800a33e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a458:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a45a:	f000 fc6e 	bl	800ad3a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a45e:	f000 ffbf 	bl	800b3e0 <xTaskResumeAll>
 800a462:	e76c      	b.n	800a33e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a464:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a466:	f000 fc68 	bl	800ad3a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a46a:	f000 ffb9 	bl	800b3e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a46e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a470:	4618      	mov	r0, r3
 800a472:	3738      	adds	r7, #56	; 0x38
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	e000ed04 	.word	0xe000ed04

0800a47c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b090      	sub	sp, #64	; 0x40
 800a480:	af00      	add	r7, sp, #0
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	607a      	str	r2, [r7, #4]
 800a488:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a490:	2b00      	cmp	r3, #0
 800a492:	d10a      	bne.n	800a4aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a498:	f383 8811 	msr	BASEPRI, r3
 800a49c:	f3bf 8f6f 	isb	sy
 800a4a0:	f3bf 8f4f 	dsb	sy
 800a4a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a4a6:	bf00      	nop
 800a4a8:	e7fe      	b.n	800a4a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d103      	bne.n	800a4b8 <xQueueGenericSendFromISR+0x3c>
 800a4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d101      	bne.n	800a4bc <xQueueGenericSendFromISR+0x40>
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e000      	b.n	800a4be <xQueueGenericSendFromISR+0x42>
 800a4bc:	2300      	movs	r3, #0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d10a      	bne.n	800a4d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c6:	f383 8811 	msr	BASEPRI, r3
 800a4ca:	f3bf 8f6f 	isb	sy
 800a4ce:	f3bf 8f4f 	dsb	sy
 800a4d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a4d4:	bf00      	nop
 800a4d6:	e7fe      	b.n	800a4d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	2b02      	cmp	r3, #2
 800a4dc:	d103      	bne.n	800a4e6 <xQueueGenericSendFromISR+0x6a>
 800a4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d101      	bne.n	800a4ea <xQueueGenericSendFromISR+0x6e>
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e000      	b.n	800a4ec <xQueueGenericSendFromISR+0x70>
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d10a      	bne.n	800a506 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f4:	f383 8811 	msr	BASEPRI, r3
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	623b      	str	r3, [r7, #32]
}
 800a502:	bf00      	nop
 800a504:	e7fe      	b.n	800a504 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a506:	f002 fa77 	bl	800c9f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a50a:	f3ef 8211 	mrs	r2, BASEPRI
 800a50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a512:	f383 8811 	msr	BASEPRI, r3
 800a516:	f3bf 8f6f 	isb	sy
 800a51a:	f3bf 8f4f 	dsb	sy
 800a51e:	61fa      	str	r2, [r7, #28]
 800a520:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a522:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a524:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a52e:	429a      	cmp	r2, r3
 800a530:	d302      	bcc.n	800a538 <xQueueGenericSendFromISR+0xbc>
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	2b02      	cmp	r3, #2
 800a536:	d12f      	bne.n	800a598 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a53a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a53e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a546:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a548:	683a      	ldr	r2, [r7, #0]
 800a54a:	68b9      	ldr	r1, [r7, #8]
 800a54c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a54e:	f000 fb64 	bl	800ac1a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a552:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a55a:	d112      	bne.n	800a582 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a560:	2b00      	cmp	r3, #0
 800a562:	d016      	beq.n	800a592 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a566:	3324      	adds	r3, #36	; 0x24
 800a568:	4618      	mov	r0, r3
 800a56a:	f001 f94f 	bl	800b80c <xTaskRemoveFromEventList>
 800a56e:	4603      	mov	r3, r0
 800a570:	2b00      	cmp	r3, #0
 800a572:	d00e      	beq.n	800a592 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00b      	beq.n	800a592 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2201      	movs	r2, #1
 800a57e:	601a      	str	r2, [r3, #0]
 800a580:	e007      	b.n	800a592 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a582:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a586:	3301      	adds	r3, #1
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	b25a      	sxtb	r2, r3
 800a58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a592:	2301      	movs	r3, #1
 800a594:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a596:	e001      	b.n	800a59c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a598:	2300      	movs	r3, #0
 800a59a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a59c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a59e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a5a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a5a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3740      	adds	r7, #64	; 0x40
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	b08e      	sub	sp, #56	; 0x38
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
 800a5ba:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d10a      	bne.n	800a5dc <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ca:	f383 8811 	msr	BASEPRI, r3
 800a5ce:	f3bf 8f6f 	isb	sy
 800a5d2:	f3bf 8f4f 	dsb	sy
 800a5d6:	623b      	str	r3, [r7, #32]
}
 800a5d8:	bf00      	nop
 800a5da:	e7fe      	b.n	800a5da <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d00a      	beq.n	800a5fa <xQueueGiveFromISR+0x48>
	__asm volatile
 800a5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e8:	f383 8811 	msr	BASEPRI, r3
 800a5ec:	f3bf 8f6f 	isb	sy
 800a5f0:	f3bf 8f4f 	dsb	sy
 800a5f4:	61fb      	str	r3, [r7, #28]
}
 800a5f6:	bf00      	nop
 800a5f8:	e7fe      	b.n	800a5f8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d103      	bne.n	800a60a <xQueueGiveFromISR+0x58>
 800a602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a604:	689b      	ldr	r3, [r3, #8]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d101      	bne.n	800a60e <xQueueGiveFromISR+0x5c>
 800a60a:	2301      	movs	r3, #1
 800a60c:	e000      	b.n	800a610 <xQueueGiveFromISR+0x5e>
 800a60e:	2300      	movs	r3, #0
 800a610:	2b00      	cmp	r3, #0
 800a612:	d10a      	bne.n	800a62a <xQueueGiveFromISR+0x78>
	__asm volatile
 800a614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a618:	f383 8811 	msr	BASEPRI, r3
 800a61c:	f3bf 8f6f 	isb	sy
 800a620:	f3bf 8f4f 	dsb	sy
 800a624:	61bb      	str	r3, [r7, #24]
}
 800a626:	bf00      	nop
 800a628:	e7fe      	b.n	800a628 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a62a:	f002 f9e5 	bl	800c9f8 <vPortValidateInterruptPriority>
	__asm volatile
 800a62e:	f3ef 8211 	mrs	r2, BASEPRI
 800a632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a636:	f383 8811 	msr	BASEPRI, r3
 800a63a:	f3bf 8f6f 	isb	sy
 800a63e:	f3bf 8f4f 	dsb	sy
 800a642:	617a      	str	r2, [r7, #20]
 800a644:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a646:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a648:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a64e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a654:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a656:	429a      	cmp	r2, r3
 800a658:	d22b      	bcs.n	800a6b2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a666:	1c5a      	adds	r2, r3, #1
 800a668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a66c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a670:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a674:	d112      	bne.n	800a69c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d016      	beq.n	800a6ac <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a680:	3324      	adds	r3, #36	; 0x24
 800a682:	4618      	mov	r0, r3
 800a684:	f001 f8c2 	bl	800b80c <xTaskRemoveFromEventList>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d00e      	beq.n	800a6ac <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d00b      	beq.n	800a6ac <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	2201      	movs	r2, #1
 800a698:	601a      	str	r2, [r3, #0]
 800a69a:	e007      	b.n	800a6ac <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a69c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	b25a      	sxtb	r2, r3
 800a6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	637b      	str	r3, [r7, #52]	; 0x34
 800a6b0:	e001      	b.n	800a6b6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	637b      	str	r3, [r7, #52]	; 0x34
 800a6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f383 8811 	msr	BASEPRI, r3
}
 800a6c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a6c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3738      	adds	r7, #56	; 0x38
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b08c      	sub	sp, #48	; 0x30
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d10a      	bne.n	800a6fc <xQueueReceive+0x30>
	__asm volatile
 800a6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ea:	f383 8811 	msr	BASEPRI, r3
 800a6ee:	f3bf 8f6f 	isb	sy
 800a6f2:	f3bf 8f4f 	dsb	sy
 800a6f6:	623b      	str	r3, [r7, #32]
}
 800a6f8:	bf00      	nop
 800a6fa:	e7fe      	b.n	800a6fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d103      	bne.n	800a70a <xQueueReceive+0x3e>
 800a702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a706:	2b00      	cmp	r3, #0
 800a708:	d101      	bne.n	800a70e <xQueueReceive+0x42>
 800a70a:	2301      	movs	r3, #1
 800a70c:	e000      	b.n	800a710 <xQueueReceive+0x44>
 800a70e:	2300      	movs	r3, #0
 800a710:	2b00      	cmp	r3, #0
 800a712:	d10a      	bne.n	800a72a <xQueueReceive+0x5e>
	__asm volatile
 800a714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a718:	f383 8811 	msr	BASEPRI, r3
 800a71c:	f3bf 8f6f 	isb	sy
 800a720:	f3bf 8f4f 	dsb	sy
 800a724:	61fb      	str	r3, [r7, #28]
}
 800a726:	bf00      	nop
 800a728:	e7fe      	b.n	800a728 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a72a:	f001 fa2d 	bl	800bb88 <xTaskGetSchedulerState>
 800a72e:	4603      	mov	r3, r0
 800a730:	2b00      	cmp	r3, #0
 800a732:	d102      	bne.n	800a73a <xQueueReceive+0x6e>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d101      	bne.n	800a73e <xQueueReceive+0x72>
 800a73a:	2301      	movs	r3, #1
 800a73c:	e000      	b.n	800a740 <xQueueReceive+0x74>
 800a73e:	2300      	movs	r3, #0
 800a740:	2b00      	cmp	r3, #0
 800a742:	d10a      	bne.n	800a75a <xQueueReceive+0x8e>
	__asm volatile
 800a744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a748:	f383 8811 	msr	BASEPRI, r3
 800a74c:	f3bf 8f6f 	isb	sy
 800a750:	f3bf 8f4f 	dsb	sy
 800a754:	61bb      	str	r3, [r7, #24]
}
 800a756:	bf00      	nop
 800a758:	e7fe      	b.n	800a758 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a75a:	f002 f86b 	bl	800c834 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a762:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a766:	2b00      	cmp	r3, #0
 800a768:	d01f      	beq.n	800a7aa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a76a:	68b9      	ldr	r1, [r7, #8]
 800a76c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a76e:	f000 fabe 	bl	800acee <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a774:	1e5a      	subs	r2, r3, #1
 800a776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a778:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a77c:	691b      	ldr	r3, [r3, #16]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d00f      	beq.n	800a7a2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a784:	3310      	adds	r3, #16
 800a786:	4618      	mov	r0, r3
 800a788:	f001 f840 	bl	800b80c <xTaskRemoveFromEventList>
 800a78c:	4603      	mov	r3, r0
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d007      	beq.n	800a7a2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a792:	4b3d      	ldr	r3, [pc, #244]	; (800a888 <xQueueReceive+0x1bc>)
 800a794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a798:	601a      	str	r2, [r3, #0]
 800a79a:	f3bf 8f4f 	dsb	sy
 800a79e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a7a2:	f002 f877 	bl	800c894 <vPortExitCritical>
				return pdPASS;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	e069      	b.n	800a87e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d103      	bne.n	800a7b8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a7b0:	f002 f870 	bl	800c894 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	e062      	b.n	800a87e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d106      	bne.n	800a7cc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a7be:	f107 0310 	add.w	r3, r7, #16
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f001 f886 	bl	800b8d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a7cc:	f002 f862 	bl	800c894 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a7d0:	f000 fdf8 	bl	800b3c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a7d4:	f002 f82e 	bl	800c834 <vPortEnterCritical>
 800a7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7de:	b25b      	sxtb	r3, r3
 800a7e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7e4:	d103      	bne.n	800a7ee <xQueueReceive+0x122>
 800a7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7f4:	b25b      	sxtb	r3, r3
 800a7f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7fa:	d103      	bne.n	800a804 <xQueueReceive+0x138>
 800a7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fe:	2200      	movs	r2, #0
 800a800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a804:	f002 f846 	bl	800c894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a808:	1d3a      	adds	r2, r7, #4
 800a80a:	f107 0310 	add.w	r3, r7, #16
 800a80e:	4611      	mov	r1, r2
 800a810:	4618      	mov	r0, r3
 800a812:	f001 f875 	bl	800b900 <xTaskCheckForTimeOut>
 800a816:	4603      	mov	r3, r0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d123      	bne.n	800a864 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a81c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a81e:	f000 fade 	bl	800adde <prvIsQueueEmpty>
 800a822:	4603      	mov	r3, r0
 800a824:	2b00      	cmp	r3, #0
 800a826:	d017      	beq.n	800a858 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82a:	3324      	adds	r3, #36	; 0x24
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	4611      	mov	r1, r2
 800a830:	4618      	mov	r0, r3
 800a832:	f000 ff9b 	bl	800b76c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a836:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a838:	f000 fa7f 	bl	800ad3a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a83c:	f000 fdd0 	bl	800b3e0 <xTaskResumeAll>
 800a840:	4603      	mov	r3, r0
 800a842:	2b00      	cmp	r3, #0
 800a844:	d189      	bne.n	800a75a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a846:	4b10      	ldr	r3, [pc, #64]	; (800a888 <xQueueReceive+0x1bc>)
 800a848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a84c:	601a      	str	r2, [r3, #0]
 800a84e:	f3bf 8f4f 	dsb	sy
 800a852:	f3bf 8f6f 	isb	sy
 800a856:	e780      	b.n	800a75a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a85a:	f000 fa6e 	bl	800ad3a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a85e:	f000 fdbf 	bl	800b3e0 <xTaskResumeAll>
 800a862:	e77a      	b.n	800a75a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a866:	f000 fa68 	bl	800ad3a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a86a:	f000 fdb9 	bl	800b3e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a86e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a870:	f000 fab5 	bl	800adde <prvIsQueueEmpty>
 800a874:	4603      	mov	r3, r0
 800a876:	2b00      	cmp	r3, #0
 800a878:	f43f af6f 	beq.w	800a75a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a87c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3730      	adds	r7, #48	; 0x30
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	e000ed04 	.word	0xe000ed04

0800a88c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b08e      	sub	sp, #56	; 0x38
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a896:	2300      	movs	r3, #0
 800a898:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d10a      	bne.n	800a8be <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ac:	f383 8811 	msr	BASEPRI, r3
 800a8b0:	f3bf 8f6f 	isb	sy
 800a8b4:	f3bf 8f4f 	dsb	sy
 800a8b8:	623b      	str	r3, [r7, #32]
}
 800a8ba:	bf00      	nop
 800a8bc:	e7fe      	b.n	800a8bc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d00a      	beq.n	800a8dc <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ca:	f383 8811 	msr	BASEPRI, r3
 800a8ce:	f3bf 8f6f 	isb	sy
 800a8d2:	f3bf 8f4f 	dsb	sy
 800a8d6:	61fb      	str	r3, [r7, #28]
}
 800a8d8:	bf00      	nop
 800a8da:	e7fe      	b.n	800a8da <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8dc:	f001 f954 	bl	800bb88 <xTaskGetSchedulerState>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d102      	bne.n	800a8ec <xQueueSemaphoreTake+0x60>
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d101      	bne.n	800a8f0 <xQueueSemaphoreTake+0x64>
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e000      	b.n	800a8f2 <xQueueSemaphoreTake+0x66>
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d10a      	bne.n	800a90c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8fa:	f383 8811 	msr	BASEPRI, r3
 800a8fe:	f3bf 8f6f 	isb	sy
 800a902:	f3bf 8f4f 	dsb	sy
 800a906:	61bb      	str	r3, [r7, #24]
}
 800a908:	bf00      	nop
 800a90a:	e7fe      	b.n	800a90a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a90c:	f001 ff92 	bl	800c834 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a914:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d024      	beq.n	800a966 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a91e:	1e5a      	subs	r2, r3, #1
 800a920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a922:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d104      	bne.n	800a936 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a92c:	f001 faa2 	bl	800be74 <pvTaskIncrementMutexHeldCount>
 800a930:	4602      	mov	r2, r0
 800a932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a934:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a938:	691b      	ldr	r3, [r3, #16]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d00f      	beq.n	800a95e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a940:	3310      	adds	r3, #16
 800a942:	4618      	mov	r0, r3
 800a944:	f000 ff62 	bl	800b80c <xTaskRemoveFromEventList>
 800a948:	4603      	mov	r3, r0
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d007      	beq.n	800a95e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a94e:	4b54      	ldr	r3, [pc, #336]	; (800aaa0 <xQueueSemaphoreTake+0x214>)
 800a950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a954:	601a      	str	r2, [r3, #0]
 800a956:	f3bf 8f4f 	dsb	sy
 800a95a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a95e:	f001 ff99 	bl	800c894 <vPortExitCritical>
				return pdPASS;
 800a962:	2301      	movs	r3, #1
 800a964:	e097      	b.n	800aa96 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d111      	bne.n	800a990 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d00a      	beq.n	800a988 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a976:	f383 8811 	msr	BASEPRI, r3
 800a97a:	f3bf 8f6f 	isb	sy
 800a97e:	f3bf 8f4f 	dsb	sy
 800a982:	617b      	str	r3, [r7, #20]
}
 800a984:	bf00      	nop
 800a986:	e7fe      	b.n	800a986 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a988:	f001 ff84 	bl	800c894 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a98c:	2300      	movs	r3, #0
 800a98e:	e082      	b.n	800aa96 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a992:	2b00      	cmp	r3, #0
 800a994:	d106      	bne.n	800a9a4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a996:	f107 030c 	add.w	r3, r7, #12
 800a99a:	4618      	mov	r0, r3
 800a99c:	f000 ff9a 	bl	800b8d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9a4:	f001 ff76 	bl	800c894 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9a8:	f000 fd0c 	bl	800b3c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9ac:	f001 ff42 	bl	800c834 <vPortEnterCritical>
 800a9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9b6:	b25b      	sxtb	r3, r3
 800a9b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9bc:	d103      	bne.n	800a9c6 <xQueueSemaphoreTake+0x13a>
 800a9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9cc:	b25b      	sxtb	r3, r3
 800a9ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9d2:	d103      	bne.n	800a9dc <xQueueSemaphoreTake+0x150>
 800a9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9dc:	f001 ff5a 	bl	800c894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9e0:	463a      	mov	r2, r7
 800a9e2:	f107 030c 	add.w	r3, r7, #12
 800a9e6:	4611      	mov	r1, r2
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f000 ff89 	bl	800b900 <xTaskCheckForTimeOut>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d132      	bne.n	800aa5a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9f6:	f000 f9f2 	bl	800adde <prvIsQueueEmpty>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d026      	beq.n	800aa4e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d109      	bne.n	800aa1c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800aa08:	f001 ff14 	bl	800c834 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aa0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa0e:	689b      	ldr	r3, [r3, #8]
 800aa10:	4618      	mov	r0, r3
 800aa12:	f001 f8d7 	bl	800bbc4 <xTaskPriorityInherit>
 800aa16:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800aa18:	f001 ff3c 	bl	800c894 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa1e:	3324      	adds	r3, #36	; 0x24
 800aa20:	683a      	ldr	r2, [r7, #0]
 800aa22:	4611      	mov	r1, r2
 800aa24:	4618      	mov	r0, r3
 800aa26:	f000 fea1 	bl	800b76c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa2c:	f000 f985 	bl	800ad3a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa30:	f000 fcd6 	bl	800b3e0 <xTaskResumeAll>
 800aa34:	4603      	mov	r3, r0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	f47f af68 	bne.w	800a90c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800aa3c:	4b18      	ldr	r3, [pc, #96]	; (800aaa0 <xQueueSemaphoreTake+0x214>)
 800aa3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa42:	601a      	str	r2, [r3, #0]
 800aa44:	f3bf 8f4f 	dsb	sy
 800aa48:	f3bf 8f6f 	isb	sy
 800aa4c:	e75e      	b.n	800a90c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800aa4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa50:	f000 f973 	bl	800ad3a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa54:	f000 fcc4 	bl	800b3e0 <xTaskResumeAll>
 800aa58:	e758      	b.n	800a90c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800aa5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa5c:	f000 f96d 	bl	800ad3a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa60:	f000 fcbe 	bl	800b3e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa66:	f000 f9ba 	bl	800adde <prvIsQueueEmpty>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	f43f af4d 	beq.w	800a90c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800aa72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d00d      	beq.n	800aa94 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800aa78:	f001 fedc 	bl	800c834 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800aa7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa7e:	f000 f8b4 	bl	800abea <prvGetDisinheritPriorityAfterTimeout>
 800aa82:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800aa84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa86:	689b      	ldr	r3, [r3, #8]
 800aa88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f001 f970 	bl	800bd70 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800aa90:	f001 ff00 	bl	800c894 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aa94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3738      	adds	r7, #56	; 0x38
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	e000ed04 	.word	0xe000ed04

0800aaa4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b08e      	sub	sp, #56	; 0x38
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	60b9      	str	r1, [r7, #8]
 800aaae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d10a      	bne.n	800aad0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800aaba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aabe:	f383 8811 	msr	BASEPRI, r3
 800aac2:	f3bf 8f6f 	isb	sy
 800aac6:	f3bf 8f4f 	dsb	sy
 800aaca:	623b      	str	r3, [r7, #32]
}
 800aacc:	bf00      	nop
 800aace:	e7fe      	b.n	800aace <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d103      	bne.n	800aade <xQueueReceiveFromISR+0x3a>
 800aad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d101      	bne.n	800aae2 <xQueueReceiveFromISR+0x3e>
 800aade:	2301      	movs	r3, #1
 800aae0:	e000      	b.n	800aae4 <xQueueReceiveFromISR+0x40>
 800aae2:	2300      	movs	r3, #0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d10a      	bne.n	800aafe <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800aae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaec:	f383 8811 	msr	BASEPRI, r3
 800aaf0:	f3bf 8f6f 	isb	sy
 800aaf4:	f3bf 8f4f 	dsb	sy
 800aaf8:	61fb      	str	r3, [r7, #28]
}
 800aafa:	bf00      	nop
 800aafc:	e7fe      	b.n	800aafc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aafe:	f001 ff7b 	bl	800c9f8 <vPortValidateInterruptPriority>
	__asm volatile
 800ab02:	f3ef 8211 	mrs	r2, BASEPRI
 800ab06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0a:	f383 8811 	msr	BASEPRI, r3
 800ab0e:	f3bf 8f6f 	isb	sy
 800ab12:	f3bf 8f4f 	dsb	sy
 800ab16:	61ba      	str	r2, [r7, #24]
 800ab18:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ab1a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab22:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d02f      	beq.n	800ab8a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ab2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab34:	68b9      	ldr	r1, [r7, #8]
 800ab36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab38:	f000 f8d9 	bl	800acee <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab3e:	1e5a      	subs	r2, r3, #1
 800ab40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab42:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ab44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab4c:	d112      	bne.n	800ab74 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab50:	691b      	ldr	r3, [r3, #16]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d016      	beq.n	800ab84 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab58:	3310      	adds	r3, #16
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f000 fe56 	bl	800b80c <xTaskRemoveFromEventList>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d00e      	beq.n	800ab84 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d00b      	beq.n	800ab84 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2201      	movs	r2, #1
 800ab70:	601a      	str	r2, [r3, #0]
 800ab72:	e007      	b.n	800ab84 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ab74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab78:	3301      	adds	r3, #1
 800ab7a:	b2db      	uxtb	r3, r3
 800ab7c:	b25a      	sxtb	r2, r3
 800ab7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ab84:	2301      	movs	r3, #1
 800ab86:	637b      	str	r3, [r7, #52]	; 0x34
 800ab88:	e001      	b.n	800ab8e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	637b      	str	r3, [r7, #52]	; 0x34
 800ab8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab90:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	f383 8811 	msr	BASEPRI, r3
}
 800ab98:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3738      	adds	r7, #56	; 0x38
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d10a      	bne.n	800abcc <vQueueDelete+0x28>
	__asm volatile
 800abb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abba:	f383 8811 	msr	BASEPRI, r3
 800abbe:	f3bf 8f6f 	isb	sy
 800abc2:	f3bf 8f4f 	dsb	sy
 800abc6:	60bb      	str	r3, [r7, #8]
}
 800abc8:	bf00      	nop
 800abca:	e7fe      	b.n	800abca <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800abcc:	68f8      	ldr	r0, [r7, #12]
 800abce:	f000 f95f 	bl	800ae90 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d102      	bne.n	800abe2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	f002 f817 	bl	800cc10 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800abe2:	bf00      	nop
 800abe4:	3710      	adds	r7, #16
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}

0800abea <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800abea:	b480      	push	{r7}
 800abec:	b085      	sub	sp, #20
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d006      	beq.n	800ac08 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ac04:	60fb      	str	r3, [r7, #12]
 800ac06:	e001      	b.n	800ac0c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
	}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3714      	adds	r7, #20
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr

0800ac1a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ac1a:	b580      	push	{r7, lr}
 800ac1c:	b086      	sub	sp, #24
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	60f8      	str	r0, [r7, #12]
 800ac22:	60b9      	str	r1, [r7, #8]
 800ac24:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ac26:	2300      	movs	r3, #0
 800ac28:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac2e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d10d      	bne.n	800ac54 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d14d      	bne.n	800acdc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	689b      	ldr	r3, [r3, #8]
 800ac44:	4618      	mov	r0, r3
 800ac46:	f001 f825 	bl	800bc94 <xTaskPriorityDisinherit>
 800ac4a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	609a      	str	r2, [r3, #8]
 800ac52:	e043      	b.n	800acdc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d119      	bne.n	800ac8e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	6858      	ldr	r0, [r3, #4]
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac62:	461a      	mov	r2, r3
 800ac64:	68b9      	ldr	r1, [r7, #8]
 800ac66:	f002 f92b 	bl	800cec0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	685a      	ldr	r2, [r3, #4]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac72:	441a      	add	r2, r3
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	685a      	ldr	r2, [r3, #4]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	689b      	ldr	r3, [r3, #8]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d32b      	bcc.n	800acdc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	605a      	str	r2, [r3, #4]
 800ac8c:	e026      	b.n	800acdc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	68d8      	ldr	r0, [r3, #12]
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac96:	461a      	mov	r2, r3
 800ac98:	68b9      	ldr	r1, [r7, #8]
 800ac9a:	f002 f911 	bl	800cec0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	68da      	ldr	r2, [r3, #12]
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aca6:	425b      	negs	r3, r3
 800aca8:	441a      	add	r2, r3
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	68da      	ldr	r2, [r3, #12]
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d207      	bcs.n	800acca <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	689a      	ldr	r2, [r3, #8]
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acc2:	425b      	negs	r3, r3
 800acc4:	441a      	add	r2, r3
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2b02      	cmp	r3, #2
 800acce:	d105      	bne.n	800acdc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d002      	beq.n	800acdc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	3b01      	subs	r3, #1
 800acda:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	1c5a      	adds	r2, r3, #1
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ace4:	697b      	ldr	r3, [r7, #20]
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3718      	adds	r7, #24
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}

0800acee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800acee:	b580      	push	{r7, lr}
 800acf0:	b082      	sub	sp, #8
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
 800acf6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d018      	beq.n	800ad32 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	68da      	ldr	r2, [r3, #12]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad08:	441a      	add	r2, r3
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	68da      	ldr	r2, [r3, #12]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	689b      	ldr	r3, [r3, #8]
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d303      	bcc.n	800ad22 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	68d9      	ldr	r1, [r3, #12]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	6838      	ldr	r0, [r7, #0]
 800ad2e:	f002 f8c7 	bl	800cec0 <memcpy>
	}
}
 800ad32:	bf00      	nop
 800ad34:	3708      	adds	r7, #8
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}

0800ad3a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ad3a:	b580      	push	{r7, lr}
 800ad3c:	b084      	sub	sp, #16
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ad42:	f001 fd77 	bl	800c834 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad4c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad4e:	e011      	b.n	800ad74 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d012      	beq.n	800ad7e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	3324      	adds	r3, #36	; 0x24
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f000 fd55 	bl	800b80c <xTaskRemoveFromEventList>
 800ad62:	4603      	mov	r3, r0
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d001      	beq.n	800ad6c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ad68:	f000 fe2c 	bl	800b9c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ad6c:	7bfb      	ldrb	r3, [r7, #15]
 800ad6e:	3b01      	subs	r3, #1
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	dce9      	bgt.n	800ad50 <prvUnlockQueue+0x16>
 800ad7c:	e000      	b.n	800ad80 <prvUnlockQueue+0x46>
					break;
 800ad7e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	22ff      	movs	r2, #255	; 0xff
 800ad84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ad88:	f001 fd84 	bl	800c894 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ad8c:	f001 fd52 	bl	800c834 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad96:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad98:	e011      	b.n	800adbe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	691b      	ldr	r3, [r3, #16]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d012      	beq.n	800adc8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	3310      	adds	r3, #16
 800ada6:	4618      	mov	r0, r3
 800ada8:	f000 fd30 	bl	800b80c <xTaskRemoveFromEventList>
 800adac:	4603      	mov	r3, r0
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d001      	beq.n	800adb6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800adb2:	f000 fe07 	bl	800b9c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800adb6:	7bbb      	ldrb	r3, [r7, #14]
 800adb8:	3b01      	subs	r3, #1
 800adba:	b2db      	uxtb	r3, r3
 800adbc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800adbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	dce9      	bgt.n	800ad9a <prvUnlockQueue+0x60>
 800adc6:	e000      	b.n	800adca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800adc8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	22ff      	movs	r2, #255	; 0xff
 800adce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800add2:	f001 fd5f 	bl	800c894 <vPortExitCritical>
}
 800add6:	bf00      	nop
 800add8:	3710      	adds	r7, #16
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}

0800adde <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800adde:	b580      	push	{r7, lr}
 800ade0:	b084      	sub	sp, #16
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ade6:	f001 fd25 	bl	800c834 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d102      	bne.n	800adf8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800adf2:	2301      	movs	r3, #1
 800adf4:	60fb      	str	r3, [r7, #12]
 800adf6:	e001      	b.n	800adfc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800adf8:	2300      	movs	r3, #0
 800adfa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800adfc:	f001 fd4a 	bl	800c894 <vPortExitCritical>

	return xReturn;
 800ae00:	68fb      	ldr	r3, [r7, #12]
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3710      	adds	r7, #16
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b084      	sub	sp, #16
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ae12:	f001 fd0f 	bl	800c834 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d102      	bne.n	800ae28 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ae22:	2301      	movs	r3, #1
 800ae24:	60fb      	str	r3, [r7, #12]
 800ae26:	e001      	b.n	800ae2c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae2c:	f001 fd32 	bl	800c894 <vPortExitCritical>

	return xReturn;
 800ae30:	68fb      	ldr	r3, [r7, #12]
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3710      	adds	r7, #16
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
	...

0800ae3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b085      	sub	sp, #20
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae46:	2300      	movs	r3, #0
 800ae48:	60fb      	str	r3, [r7, #12]
 800ae4a:	e014      	b.n	800ae76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ae4c:	4a0f      	ldr	r2, [pc, #60]	; (800ae8c <vQueueAddToRegistry+0x50>)
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d10b      	bne.n	800ae70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ae58:	490c      	ldr	r1, [pc, #48]	; (800ae8c <vQueueAddToRegistry+0x50>)
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	683a      	ldr	r2, [r7, #0]
 800ae5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ae62:	4a0a      	ldr	r2, [pc, #40]	; (800ae8c <vQueueAddToRegistry+0x50>)
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	00db      	lsls	r3, r3, #3
 800ae68:	4413      	add	r3, r2
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ae6e:	e006      	b.n	800ae7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	3301      	adds	r3, #1
 800ae74:	60fb      	str	r3, [r7, #12]
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2b07      	cmp	r3, #7
 800ae7a:	d9e7      	bls.n	800ae4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ae7c:	bf00      	nop
 800ae7e:	bf00      	nop
 800ae80:	3714      	adds	r7, #20
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr
 800ae8a:	bf00      	nop
 800ae8c:	20005984 	.word	0x20005984

0800ae90 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ae90:	b480      	push	{r7}
 800ae92:	b085      	sub	sp, #20
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae98:	2300      	movs	r3, #0
 800ae9a:	60fb      	str	r3, [r7, #12]
 800ae9c:	e016      	b.n	800aecc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ae9e:	4a10      	ldr	r2, [pc, #64]	; (800aee0 <vQueueUnregisterQueue+0x50>)
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	00db      	lsls	r3, r3, #3
 800aea4:	4413      	add	r3, r2
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	d10b      	bne.n	800aec6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800aeae:	4a0c      	ldr	r2, [pc, #48]	; (800aee0 <vQueueUnregisterQueue+0x50>)
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2100      	movs	r1, #0
 800aeb4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800aeb8:	4a09      	ldr	r2, [pc, #36]	; (800aee0 <vQueueUnregisterQueue+0x50>)
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	00db      	lsls	r3, r3, #3
 800aebe:	4413      	add	r3, r2
 800aec0:	2200      	movs	r2, #0
 800aec2:	605a      	str	r2, [r3, #4]
				break;
 800aec4:	e006      	b.n	800aed4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	3301      	adds	r3, #1
 800aeca:	60fb      	str	r3, [r7, #12]
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2b07      	cmp	r3, #7
 800aed0:	d9e5      	bls.n	800ae9e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800aed2:	bf00      	nop
 800aed4:	bf00      	nop
 800aed6:	3714      	adds	r7, #20
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr
 800aee0:	20005984 	.word	0x20005984

0800aee4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b086      	sub	sp, #24
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	60f8      	str	r0, [r7, #12]
 800aeec:	60b9      	str	r1, [r7, #8]
 800aeee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aef4:	f001 fc9e 	bl	800c834 <vPortEnterCritical>
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aefe:	b25b      	sxtb	r3, r3
 800af00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af04:	d103      	bne.n	800af0e <vQueueWaitForMessageRestricted+0x2a>
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	2200      	movs	r2, #0
 800af0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af14:	b25b      	sxtb	r3, r3
 800af16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af1a:	d103      	bne.n	800af24 <vQueueWaitForMessageRestricted+0x40>
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	2200      	movs	r2, #0
 800af20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af24:	f001 fcb6 	bl	800c894 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d106      	bne.n	800af3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	3324      	adds	r3, #36	; 0x24
 800af34:	687a      	ldr	r2, [r7, #4]
 800af36:	68b9      	ldr	r1, [r7, #8]
 800af38:	4618      	mov	r0, r3
 800af3a:	f000 fc3b 	bl	800b7b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800af3e:	6978      	ldr	r0, [r7, #20]
 800af40:	f7ff fefb 	bl	800ad3a <prvUnlockQueue>
	}
 800af44:	bf00      	nop
 800af46:	3718      	adds	r7, #24
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b08e      	sub	sp, #56	; 0x38
 800af50:	af04      	add	r7, sp, #16
 800af52:	60f8      	str	r0, [r7, #12]
 800af54:	60b9      	str	r1, [r7, #8]
 800af56:	607a      	str	r2, [r7, #4]
 800af58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800af5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d10a      	bne.n	800af76 <xTaskCreateStatic+0x2a>
	__asm volatile
 800af60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af64:	f383 8811 	msr	BASEPRI, r3
 800af68:	f3bf 8f6f 	isb	sy
 800af6c:	f3bf 8f4f 	dsb	sy
 800af70:	623b      	str	r3, [r7, #32]
}
 800af72:	bf00      	nop
 800af74:	e7fe      	b.n	800af74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800af76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d10a      	bne.n	800af92 <xTaskCreateStatic+0x46>
	__asm volatile
 800af7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af80:	f383 8811 	msr	BASEPRI, r3
 800af84:	f3bf 8f6f 	isb	sy
 800af88:	f3bf 8f4f 	dsb	sy
 800af8c:	61fb      	str	r3, [r7, #28]
}
 800af8e:	bf00      	nop
 800af90:	e7fe      	b.n	800af90 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800af92:	235c      	movs	r3, #92	; 0x5c
 800af94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	2b5c      	cmp	r3, #92	; 0x5c
 800af9a:	d00a      	beq.n	800afb2 <xTaskCreateStatic+0x66>
	__asm volatile
 800af9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa0:	f383 8811 	msr	BASEPRI, r3
 800afa4:	f3bf 8f6f 	isb	sy
 800afa8:	f3bf 8f4f 	dsb	sy
 800afac:	61bb      	str	r3, [r7, #24]
}
 800afae:	bf00      	nop
 800afb0:	e7fe      	b.n	800afb0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800afb2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800afb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d01e      	beq.n	800aff8 <xTaskCreateStatic+0xac>
 800afba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d01b      	beq.n	800aff8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800afc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800afc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800afc8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800afca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afcc:	2202      	movs	r2, #2
 800afce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800afd2:	2300      	movs	r3, #0
 800afd4:	9303      	str	r3, [sp, #12]
 800afd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd8:	9302      	str	r3, [sp, #8]
 800afda:	f107 0314 	add.w	r3, r7, #20
 800afde:	9301      	str	r3, [sp, #4]
 800afe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe2:	9300      	str	r3, [sp, #0]
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	68b9      	ldr	r1, [r7, #8]
 800afea:	68f8      	ldr	r0, [r7, #12]
 800afec:	f000 f850 	bl	800b090 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aff0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aff2:	f000 f8dd 	bl	800b1b0 <prvAddNewTaskToReadyList>
 800aff6:	e001      	b.n	800affc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800aff8:	2300      	movs	r3, #0
 800affa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800affc:	697b      	ldr	r3, [r7, #20]
	}
 800affe:	4618      	mov	r0, r3
 800b000:	3728      	adds	r7, #40	; 0x28
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}

0800b006 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b006:	b580      	push	{r7, lr}
 800b008:	b08c      	sub	sp, #48	; 0x30
 800b00a:	af04      	add	r7, sp, #16
 800b00c:	60f8      	str	r0, [r7, #12]
 800b00e:	60b9      	str	r1, [r7, #8]
 800b010:	603b      	str	r3, [r7, #0]
 800b012:	4613      	mov	r3, r2
 800b014:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b016:	88fb      	ldrh	r3, [r7, #6]
 800b018:	009b      	lsls	r3, r3, #2
 800b01a:	4618      	mov	r0, r3
 800b01c:	f001 fd2c 	bl	800ca78 <pvPortMalloc>
 800b020:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d00e      	beq.n	800b046 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b028:	205c      	movs	r0, #92	; 0x5c
 800b02a:	f001 fd25 	bl	800ca78 <pvPortMalloc>
 800b02e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b030:	69fb      	ldr	r3, [r7, #28]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d003      	beq.n	800b03e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b036:	69fb      	ldr	r3, [r7, #28]
 800b038:	697a      	ldr	r2, [r7, #20]
 800b03a:	631a      	str	r2, [r3, #48]	; 0x30
 800b03c:	e005      	b.n	800b04a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b03e:	6978      	ldr	r0, [r7, #20]
 800b040:	f001 fde6 	bl	800cc10 <vPortFree>
 800b044:	e001      	b.n	800b04a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b046:	2300      	movs	r3, #0
 800b048:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b04a:	69fb      	ldr	r3, [r7, #28]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d017      	beq.n	800b080 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b050:	69fb      	ldr	r3, [r7, #28]
 800b052:	2200      	movs	r2, #0
 800b054:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b058:	88fa      	ldrh	r2, [r7, #6]
 800b05a:	2300      	movs	r3, #0
 800b05c:	9303      	str	r3, [sp, #12]
 800b05e:	69fb      	ldr	r3, [r7, #28]
 800b060:	9302      	str	r3, [sp, #8]
 800b062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b064:	9301      	str	r3, [sp, #4]
 800b066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b068:	9300      	str	r3, [sp, #0]
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	68b9      	ldr	r1, [r7, #8]
 800b06e:	68f8      	ldr	r0, [r7, #12]
 800b070:	f000 f80e 	bl	800b090 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b074:	69f8      	ldr	r0, [r7, #28]
 800b076:	f000 f89b 	bl	800b1b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b07a:	2301      	movs	r3, #1
 800b07c:	61bb      	str	r3, [r7, #24]
 800b07e:	e002      	b.n	800b086 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b080:	f04f 33ff 	mov.w	r3, #4294967295
 800b084:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b086:	69bb      	ldr	r3, [r7, #24]
	}
 800b088:	4618      	mov	r0, r3
 800b08a:	3720      	adds	r7, #32
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b088      	sub	sp, #32
 800b094:	af00      	add	r7, sp, #0
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	60b9      	str	r1, [r7, #8]
 800b09a:	607a      	str	r2, [r7, #4]
 800b09c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	21a5      	movs	r1, #165	; 0xa5
 800b0aa:	f001 ff17 	bl	800cedc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b0b8:	3b01      	subs	r3, #1
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	4413      	add	r3, r2
 800b0be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b0c0:	69bb      	ldr	r3, [r7, #24]
 800b0c2:	f023 0307 	bic.w	r3, r3, #7
 800b0c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b0c8:	69bb      	ldr	r3, [r7, #24]
 800b0ca:	f003 0307 	and.w	r3, r3, #7
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d00a      	beq.n	800b0e8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d6:	f383 8811 	msr	BASEPRI, r3
 800b0da:	f3bf 8f6f 	isb	sy
 800b0de:	f3bf 8f4f 	dsb	sy
 800b0e2:	617b      	str	r3, [r7, #20]
}
 800b0e4:	bf00      	nop
 800b0e6:	e7fe      	b.n	800b0e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d01f      	beq.n	800b12e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	61fb      	str	r3, [r7, #28]
 800b0f2:	e012      	b.n	800b11a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b0f4:	68ba      	ldr	r2, [r7, #8]
 800b0f6:	69fb      	ldr	r3, [r7, #28]
 800b0f8:	4413      	add	r3, r2
 800b0fa:	7819      	ldrb	r1, [r3, #0]
 800b0fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0fe:	69fb      	ldr	r3, [r7, #28]
 800b100:	4413      	add	r3, r2
 800b102:	3334      	adds	r3, #52	; 0x34
 800b104:	460a      	mov	r2, r1
 800b106:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b108:	68ba      	ldr	r2, [r7, #8]
 800b10a:	69fb      	ldr	r3, [r7, #28]
 800b10c:	4413      	add	r3, r2
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d006      	beq.n	800b122 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	3301      	adds	r3, #1
 800b118:	61fb      	str	r3, [r7, #28]
 800b11a:	69fb      	ldr	r3, [r7, #28]
 800b11c:	2b0f      	cmp	r3, #15
 800b11e:	d9e9      	bls.n	800b0f4 <prvInitialiseNewTask+0x64>
 800b120:	e000      	b.n	800b124 <prvInitialiseNewTask+0x94>
			{
				break;
 800b122:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b126:	2200      	movs	r2, #0
 800b128:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b12c:	e003      	b.n	800b136 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b130:	2200      	movs	r2, #0
 800b132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b138:	2b37      	cmp	r3, #55	; 0x37
 800b13a:	d901      	bls.n	800b140 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b13c:	2337      	movs	r3, #55	; 0x37
 800b13e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b142:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b144:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b148:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b14a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b14e:	2200      	movs	r2, #0
 800b150:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b154:	3304      	adds	r3, #4
 800b156:	4618      	mov	r0, r3
 800b158:	f7fe fe56 	bl	8009e08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15e:	3318      	adds	r3, #24
 800b160:	4618      	mov	r0, r3
 800b162:	f7fe fe51 	bl	8009e08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b16a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b16e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b174:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b17a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17e:	2200      	movs	r2, #0
 800b180:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b184:	2200      	movs	r2, #0
 800b186:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b18a:	683a      	ldr	r2, [r7, #0]
 800b18c:	68f9      	ldr	r1, [r7, #12]
 800b18e:	69b8      	ldr	r0, [r7, #24]
 800b190:	f001 fa26 	bl	800c5e0 <pxPortInitialiseStack>
 800b194:	4602      	mov	r2, r0
 800b196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b198:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d002      	beq.n	800b1a6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1a6:	bf00      	nop
 800b1a8:	3720      	adds	r7, #32
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
	...

0800b1b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b082      	sub	sp, #8
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b1b8:	f001 fb3c 	bl	800c834 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b1bc:	4b2d      	ldr	r3, [pc, #180]	; (800b274 <prvAddNewTaskToReadyList+0xc4>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	4a2c      	ldr	r2, [pc, #176]	; (800b274 <prvAddNewTaskToReadyList+0xc4>)
 800b1c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b1c6:	4b2c      	ldr	r3, [pc, #176]	; (800b278 <prvAddNewTaskToReadyList+0xc8>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d109      	bne.n	800b1e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b1ce:	4a2a      	ldr	r2, [pc, #168]	; (800b278 <prvAddNewTaskToReadyList+0xc8>)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b1d4:	4b27      	ldr	r3, [pc, #156]	; (800b274 <prvAddNewTaskToReadyList+0xc4>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d110      	bne.n	800b1fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b1dc:	f000 fc16 	bl	800ba0c <prvInitialiseTaskLists>
 800b1e0:	e00d      	b.n	800b1fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b1e2:	4b26      	ldr	r3, [pc, #152]	; (800b27c <prvAddNewTaskToReadyList+0xcc>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d109      	bne.n	800b1fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b1ea:	4b23      	ldr	r3, [pc, #140]	; (800b278 <prvAddNewTaskToReadyList+0xc8>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d802      	bhi.n	800b1fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b1f8:	4a1f      	ldr	r2, [pc, #124]	; (800b278 <prvAddNewTaskToReadyList+0xc8>)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b1fe:	4b20      	ldr	r3, [pc, #128]	; (800b280 <prvAddNewTaskToReadyList+0xd0>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	3301      	adds	r3, #1
 800b204:	4a1e      	ldr	r2, [pc, #120]	; (800b280 <prvAddNewTaskToReadyList+0xd0>)
 800b206:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b208:	4b1d      	ldr	r3, [pc, #116]	; (800b280 <prvAddNewTaskToReadyList+0xd0>)
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b214:	4b1b      	ldr	r3, [pc, #108]	; (800b284 <prvAddNewTaskToReadyList+0xd4>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	429a      	cmp	r2, r3
 800b21a:	d903      	bls.n	800b224 <prvAddNewTaskToReadyList+0x74>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b220:	4a18      	ldr	r2, [pc, #96]	; (800b284 <prvAddNewTaskToReadyList+0xd4>)
 800b222:	6013      	str	r3, [r2, #0]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b228:	4613      	mov	r3, r2
 800b22a:	009b      	lsls	r3, r3, #2
 800b22c:	4413      	add	r3, r2
 800b22e:	009b      	lsls	r3, r3, #2
 800b230:	4a15      	ldr	r2, [pc, #84]	; (800b288 <prvAddNewTaskToReadyList+0xd8>)
 800b232:	441a      	add	r2, r3
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	3304      	adds	r3, #4
 800b238:	4619      	mov	r1, r3
 800b23a:	4610      	mov	r0, r2
 800b23c:	f7fe fdf1 	bl	8009e22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b240:	f001 fb28 	bl	800c894 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b244:	4b0d      	ldr	r3, [pc, #52]	; (800b27c <prvAddNewTaskToReadyList+0xcc>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d00e      	beq.n	800b26a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b24c:	4b0a      	ldr	r3, [pc, #40]	; (800b278 <prvAddNewTaskToReadyList+0xc8>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b256:	429a      	cmp	r2, r3
 800b258:	d207      	bcs.n	800b26a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b25a:	4b0c      	ldr	r3, [pc, #48]	; (800b28c <prvAddNewTaskToReadyList+0xdc>)
 800b25c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b260:	601a      	str	r2, [r3, #0]
 800b262:	f3bf 8f4f 	dsb	sy
 800b266:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b26a:	bf00      	nop
 800b26c:	3708      	adds	r7, #8
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	20000f1c 	.word	0x20000f1c
 800b278:	20000a48 	.word	0x20000a48
 800b27c:	20000f28 	.word	0x20000f28
 800b280:	20000f38 	.word	0x20000f38
 800b284:	20000f24 	.word	0x20000f24
 800b288:	20000a4c 	.word	0x20000a4c
 800b28c:	e000ed04 	.word	0xe000ed04

0800b290 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b298:	2300      	movs	r3, #0
 800b29a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d017      	beq.n	800b2d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b2a2:	4b13      	ldr	r3, [pc, #76]	; (800b2f0 <vTaskDelay+0x60>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d00a      	beq.n	800b2c0 <vTaskDelay+0x30>
	__asm volatile
 800b2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ae:	f383 8811 	msr	BASEPRI, r3
 800b2b2:	f3bf 8f6f 	isb	sy
 800b2b6:	f3bf 8f4f 	dsb	sy
 800b2ba:	60bb      	str	r3, [r7, #8]
}
 800b2bc:	bf00      	nop
 800b2be:	e7fe      	b.n	800b2be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b2c0:	f000 f880 	bl	800b3c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b2c4:	2100      	movs	r1, #0
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f000 fde8 	bl	800be9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b2cc:	f000 f888 	bl	800b3e0 <xTaskResumeAll>
 800b2d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d107      	bne.n	800b2e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b2d8:	4b06      	ldr	r3, [pc, #24]	; (800b2f4 <vTaskDelay+0x64>)
 800b2da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2de:	601a      	str	r2, [r3, #0]
 800b2e0:	f3bf 8f4f 	dsb	sy
 800b2e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b2e8:	bf00      	nop
 800b2ea:	3710      	adds	r7, #16
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}
 800b2f0:	20000f44 	.word	0x20000f44
 800b2f4:	e000ed04 	.word	0xe000ed04

0800b2f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b08a      	sub	sp, #40	; 0x28
 800b2fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b2fe:	2300      	movs	r3, #0
 800b300:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b302:	2300      	movs	r3, #0
 800b304:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b306:	463a      	mov	r2, r7
 800b308:	1d39      	adds	r1, r7, #4
 800b30a:	f107 0308 	add.w	r3, r7, #8
 800b30e:	4618      	mov	r0, r3
 800b310:	f7fe fd26 	bl	8009d60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b314:	6839      	ldr	r1, [r7, #0]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	68ba      	ldr	r2, [r7, #8]
 800b31a:	9202      	str	r2, [sp, #8]
 800b31c:	9301      	str	r3, [sp, #4]
 800b31e:	2300      	movs	r3, #0
 800b320:	9300      	str	r3, [sp, #0]
 800b322:	2300      	movs	r3, #0
 800b324:	460a      	mov	r2, r1
 800b326:	4921      	ldr	r1, [pc, #132]	; (800b3ac <vTaskStartScheduler+0xb4>)
 800b328:	4821      	ldr	r0, [pc, #132]	; (800b3b0 <vTaskStartScheduler+0xb8>)
 800b32a:	f7ff fe0f 	bl	800af4c <xTaskCreateStatic>
 800b32e:	4603      	mov	r3, r0
 800b330:	4a20      	ldr	r2, [pc, #128]	; (800b3b4 <vTaskStartScheduler+0xbc>)
 800b332:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b334:	4b1f      	ldr	r3, [pc, #124]	; (800b3b4 <vTaskStartScheduler+0xbc>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d002      	beq.n	800b342 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b33c:	2301      	movs	r3, #1
 800b33e:	617b      	str	r3, [r7, #20]
 800b340:	e001      	b.n	800b346 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b342:	2300      	movs	r3, #0
 800b344:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	2b01      	cmp	r3, #1
 800b34a:	d102      	bne.n	800b352 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b34c:	f000 fdfa 	bl	800bf44 <xTimerCreateTimerTask>
 800b350:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	2b01      	cmp	r3, #1
 800b356:	d116      	bne.n	800b386 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b35c:	f383 8811 	msr	BASEPRI, r3
 800b360:	f3bf 8f6f 	isb	sy
 800b364:	f3bf 8f4f 	dsb	sy
 800b368:	613b      	str	r3, [r7, #16]
}
 800b36a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b36c:	4b12      	ldr	r3, [pc, #72]	; (800b3b8 <vTaskStartScheduler+0xc0>)
 800b36e:	f04f 32ff 	mov.w	r2, #4294967295
 800b372:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b374:	4b11      	ldr	r3, [pc, #68]	; (800b3bc <vTaskStartScheduler+0xc4>)
 800b376:	2201      	movs	r2, #1
 800b378:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b37a:	4b11      	ldr	r3, [pc, #68]	; (800b3c0 <vTaskStartScheduler+0xc8>)
 800b37c:	2200      	movs	r2, #0
 800b37e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b380:	f001 f9b6 	bl	800c6f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b384:	e00e      	b.n	800b3a4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b38c:	d10a      	bne.n	800b3a4 <vTaskStartScheduler+0xac>
	__asm volatile
 800b38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b392:	f383 8811 	msr	BASEPRI, r3
 800b396:	f3bf 8f6f 	isb	sy
 800b39a:	f3bf 8f4f 	dsb	sy
 800b39e:	60fb      	str	r3, [r7, #12]
}
 800b3a0:	bf00      	nop
 800b3a2:	e7fe      	b.n	800b3a2 <vTaskStartScheduler+0xaa>
}
 800b3a4:	bf00      	nop
 800b3a6:	3718      	adds	r7, #24
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}
 800b3ac:	0801221c 	.word	0x0801221c
 800b3b0:	0800b9dd 	.word	0x0800b9dd
 800b3b4:	20000f40 	.word	0x20000f40
 800b3b8:	20000f3c 	.word	0x20000f3c
 800b3bc:	20000f28 	.word	0x20000f28
 800b3c0:	20000f20 	.word	0x20000f20

0800b3c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b3c8:	4b04      	ldr	r3, [pc, #16]	; (800b3dc <vTaskSuspendAll+0x18>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	4a03      	ldr	r2, [pc, #12]	; (800b3dc <vTaskSuspendAll+0x18>)
 800b3d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b3d2:	bf00      	nop
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr
 800b3dc:	20000f44 	.word	0x20000f44

0800b3e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b3ee:	4b42      	ldr	r3, [pc, #264]	; (800b4f8 <xTaskResumeAll+0x118>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d10a      	bne.n	800b40c <xTaskResumeAll+0x2c>
	__asm volatile
 800b3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3fa:	f383 8811 	msr	BASEPRI, r3
 800b3fe:	f3bf 8f6f 	isb	sy
 800b402:	f3bf 8f4f 	dsb	sy
 800b406:	603b      	str	r3, [r7, #0]
}
 800b408:	bf00      	nop
 800b40a:	e7fe      	b.n	800b40a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b40c:	f001 fa12 	bl	800c834 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b410:	4b39      	ldr	r3, [pc, #228]	; (800b4f8 <xTaskResumeAll+0x118>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	3b01      	subs	r3, #1
 800b416:	4a38      	ldr	r2, [pc, #224]	; (800b4f8 <xTaskResumeAll+0x118>)
 800b418:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b41a:	4b37      	ldr	r3, [pc, #220]	; (800b4f8 <xTaskResumeAll+0x118>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d162      	bne.n	800b4e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b422:	4b36      	ldr	r3, [pc, #216]	; (800b4fc <xTaskResumeAll+0x11c>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d05e      	beq.n	800b4e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b42a:	e02f      	b.n	800b48c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b42c:	4b34      	ldr	r3, [pc, #208]	; (800b500 <xTaskResumeAll+0x120>)
 800b42e:	68db      	ldr	r3, [r3, #12]
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	3318      	adds	r3, #24
 800b438:	4618      	mov	r0, r3
 800b43a:	f7fe fd4f 	bl	8009edc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	3304      	adds	r3, #4
 800b442:	4618      	mov	r0, r3
 800b444:	f7fe fd4a 	bl	8009edc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b44c:	4b2d      	ldr	r3, [pc, #180]	; (800b504 <xTaskResumeAll+0x124>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	429a      	cmp	r2, r3
 800b452:	d903      	bls.n	800b45c <xTaskResumeAll+0x7c>
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b458:	4a2a      	ldr	r2, [pc, #168]	; (800b504 <xTaskResumeAll+0x124>)
 800b45a:	6013      	str	r3, [r2, #0]
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b460:	4613      	mov	r3, r2
 800b462:	009b      	lsls	r3, r3, #2
 800b464:	4413      	add	r3, r2
 800b466:	009b      	lsls	r3, r3, #2
 800b468:	4a27      	ldr	r2, [pc, #156]	; (800b508 <xTaskResumeAll+0x128>)
 800b46a:	441a      	add	r2, r3
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	3304      	adds	r3, #4
 800b470:	4619      	mov	r1, r3
 800b472:	4610      	mov	r0, r2
 800b474:	f7fe fcd5 	bl	8009e22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b47c:	4b23      	ldr	r3, [pc, #140]	; (800b50c <xTaskResumeAll+0x12c>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b482:	429a      	cmp	r2, r3
 800b484:	d302      	bcc.n	800b48c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b486:	4b22      	ldr	r3, [pc, #136]	; (800b510 <xTaskResumeAll+0x130>)
 800b488:	2201      	movs	r2, #1
 800b48a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b48c:	4b1c      	ldr	r3, [pc, #112]	; (800b500 <xTaskResumeAll+0x120>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d1cb      	bne.n	800b42c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d001      	beq.n	800b49e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b49a:	f000 fb55 	bl	800bb48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b49e:	4b1d      	ldr	r3, [pc, #116]	; (800b514 <xTaskResumeAll+0x134>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d010      	beq.n	800b4cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b4aa:	f000 f847 	bl	800b53c <xTaskIncrementTick>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d002      	beq.n	800b4ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b4b4:	4b16      	ldr	r3, [pc, #88]	; (800b510 <xTaskResumeAll+0x130>)
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	3b01      	subs	r3, #1
 800b4be:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d1f1      	bne.n	800b4aa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b4c6:	4b13      	ldr	r3, [pc, #76]	; (800b514 <xTaskResumeAll+0x134>)
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b4cc:	4b10      	ldr	r3, [pc, #64]	; (800b510 <xTaskResumeAll+0x130>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d009      	beq.n	800b4e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b4d8:	4b0f      	ldr	r3, [pc, #60]	; (800b518 <xTaskResumeAll+0x138>)
 800b4da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4de:	601a      	str	r2, [r3, #0]
 800b4e0:	f3bf 8f4f 	dsb	sy
 800b4e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b4e8:	f001 f9d4 	bl	800c894 <vPortExitCritical>

	return xAlreadyYielded;
 800b4ec:	68bb      	ldr	r3, [r7, #8]
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3710      	adds	r7, #16
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	20000f44 	.word	0x20000f44
 800b4fc:	20000f1c 	.word	0x20000f1c
 800b500:	20000edc 	.word	0x20000edc
 800b504:	20000f24 	.word	0x20000f24
 800b508:	20000a4c 	.word	0x20000a4c
 800b50c:	20000a48 	.word	0x20000a48
 800b510:	20000f30 	.word	0x20000f30
 800b514:	20000f2c 	.word	0x20000f2c
 800b518:	e000ed04 	.word	0xe000ed04

0800b51c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b522:	4b05      	ldr	r3, [pc, #20]	; (800b538 <xTaskGetTickCount+0x1c>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b528:	687b      	ldr	r3, [r7, #4]
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	370c      	adds	r7, #12
 800b52e:	46bd      	mov	sp, r7
 800b530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b534:	4770      	bx	lr
 800b536:	bf00      	nop
 800b538:	20000f20 	.word	0x20000f20

0800b53c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b086      	sub	sp, #24
 800b540:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b542:	2300      	movs	r3, #0
 800b544:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b546:	4b4f      	ldr	r3, [pc, #316]	; (800b684 <xTaskIncrementTick+0x148>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	f040 808f 	bne.w	800b66e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b550:	4b4d      	ldr	r3, [pc, #308]	; (800b688 <xTaskIncrementTick+0x14c>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	3301      	adds	r3, #1
 800b556:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b558:	4a4b      	ldr	r2, [pc, #300]	; (800b688 <xTaskIncrementTick+0x14c>)
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d120      	bne.n	800b5a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b564:	4b49      	ldr	r3, [pc, #292]	; (800b68c <xTaskIncrementTick+0x150>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d00a      	beq.n	800b584 <xTaskIncrementTick+0x48>
	__asm volatile
 800b56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b572:	f383 8811 	msr	BASEPRI, r3
 800b576:	f3bf 8f6f 	isb	sy
 800b57a:	f3bf 8f4f 	dsb	sy
 800b57e:	603b      	str	r3, [r7, #0]
}
 800b580:	bf00      	nop
 800b582:	e7fe      	b.n	800b582 <xTaskIncrementTick+0x46>
 800b584:	4b41      	ldr	r3, [pc, #260]	; (800b68c <xTaskIncrementTick+0x150>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	60fb      	str	r3, [r7, #12]
 800b58a:	4b41      	ldr	r3, [pc, #260]	; (800b690 <xTaskIncrementTick+0x154>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4a3f      	ldr	r2, [pc, #252]	; (800b68c <xTaskIncrementTick+0x150>)
 800b590:	6013      	str	r3, [r2, #0]
 800b592:	4a3f      	ldr	r2, [pc, #252]	; (800b690 <xTaskIncrementTick+0x154>)
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	6013      	str	r3, [r2, #0]
 800b598:	4b3e      	ldr	r3, [pc, #248]	; (800b694 <xTaskIncrementTick+0x158>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	3301      	adds	r3, #1
 800b59e:	4a3d      	ldr	r2, [pc, #244]	; (800b694 <xTaskIncrementTick+0x158>)
 800b5a0:	6013      	str	r3, [r2, #0]
 800b5a2:	f000 fad1 	bl	800bb48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b5a6:	4b3c      	ldr	r3, [pc, #240]	; (800b698 <xTaskIncrementTick+0x15c>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	693a      	ldr	r2, [r7, #16]
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d349      	bcc.n	800b644 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5b0:	4b36      	ldr	r3, [pc, #216]	; (800b68c <xTaskIncrementTick+0x150>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d104      	bne.n	800b5c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5ba:	4b37      	ldr	r3, [pc, #220]	; (800b698 <xTaskIncrementTick+0x15c>)
 800b5bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b5c0:	601a      	str	r2, [r3, #0]
					break;
 800b5c2:	e03f      	b.n	800b644 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5c4:	4b31      	ldr	r3, [pc, #196]	; (800b68c <xTaskIncrementTick+0x150>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	68db      	ldr	r3, [r3, #12]
 800b5ca:	68db      	ldr	r3, [r3, #12]
 800b5cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b5d4:	693a      	ldr	r2, [r7, #16]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d203      	bcs.n	800b5e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b5dc:	4a2e      	ldr	r2, [pc, #184]	; (800b698 <xTaskIncrementTick+0x15c>)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b5e2:	e02f      	b.n	800b644 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	3304      	adds	r3, #4
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f7fe fc77 	bl	8009edc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d004      	beq.n	800b600 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	3318      	adds	r3, #24
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7fe fc6e 	bl	8009edc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b604:	4b25      	ldr	r3, [pc, #148]	; (800b69c <xTaskIncrementTick+0x160>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	429a      	cmp	r2, r3
 800b60a:	d903      	bls.n	800b614 <xTaskIncrementTick+0xd8>
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b610:	4a22      	ldr	r2, [pc, #136]	; (800b69c <xTaskIncrementTick+0x160>)
 800b612:	6013      	str	r3, [r2, #0]
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b618:	4613      	mov	r3, r2
 800b61a:	009b      	lsls	r3, r3, #2
 800b61c:	4413      	add	r3, r2
 800b61e:	009b      	lsls	r3, r3, #2
 800b620:	4a1f      	ldr	r2, [pc, #124]	; (800b6a0 <xTaskIncrementTick+0x164>)
 800b622:	441a      	add	r2, r3
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	3304      	adds	r3, #4
 800b628:	4619      	mov	r1, r3
 800b62a:	4610      	mov	r0, r2
 800b62c:	f7fe fbf9 	bl	8009e22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b634:	4b1b      	ldr	r3, [pc, #108]	; (800b6a4 <xTaskIncrementTick+0x168>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d3b8      	bcc.n	800b5b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b63e:	2301      	movs	r3, #1
 800b640:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b642:	e7b5      	b.n	800b5b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b644:	4b17      	ldr	r3, [pc, #92]	; (800b6a4 <xTaskIncrementTick+0x168>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b64a:	4915      	ldr	r1, [pc, #84]	; (800b6a0 <xTaskIncrementTick+0x164>)
 800b64c:	4613      	mov	r3, r2
 800b64e:	009b      	lsls	r3, r3, #2
 800b650:	4413      	add	r3, r2
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	440b      	add	r3, r1
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d901      	bls.n	800b660 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b65c:	2301      	movs	r3, #1
 800b65e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b660:	4b11      	ldr	r3, [pc, #68]	; (800b6a8 <xTaskIncrementTick+0x16c>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d007      	beq.n	800b678 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b668:	2301      	movs	r3, #1
 800b66a:	617b      	str	r3, [r7, #20]
 800b66c:	e004      	b.n	800b678 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b66e:	4b0f      	ldr	r3, [pc, #60]	; (800b6ac <xTaskIncrementTick+0x170>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	3301      	adds	r3, #1
 800b674:	4a0d      	ldr	r2, [pc, #52]	; (800b6ac <xTaskIncrementTick+0x170>)
 800b676:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b678:	697b      	ldr	r3, [r7, #20]
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3718      	adds	r7, #24
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
 800b682:	bf00      	nop
 800b684:	20000f44 	.word	0x20000f44
 800b688:	20000f20 	.word	0x20000f20
 800b68c:	20000ed4 	.word	0x20000ed4
 800b690:	20000ed8 	.word	0x20000ed8
 800b694:	20000f34 	.word	0x20000f34
 800b698:	20000f3c 	.word	0x20000f3c
 800b69c:	20000f24 	.word	0x20000f24
 800b6a0:	20000a4c 	.word	0x20000a4c
 800b6a4:	20000a48 	.word	0x20000a48
 800b6a8:	20000f30 	.word	0x20000f30
 800b6ac:	20000f2c 	.word	0x20000f2c

0800b6b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b085      	sub	sp, #20
 800b6b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b6b6:	4b28      	ldr	r3, [pc, #160]	; (800b758 <vTaskSwitchContext+0xa8>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d003      	beq.n	800b6c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b6be:	4b27      	ldr	r3, [pc, #156]	; (800b75c <vTaskSwitchContext+0xac>)
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b6c4:	e041      	b.n	800b74a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b6c6:	4b25      	ldr	r3, [pc, #148]	; (800b75c <vTaskSwitchContext+0xac>)
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6cc:	4b24      	ldr	r3, [pc, #144]	; (800b760 <vTaskSwitchContext+0xb0>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	60fb      	str	r3, [r7, #12]
 800b6d2:	e010      	b.n	800b6f6 <vTaskSwitchContext+0x46>
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d10a      	bne.n	800b6f0 <vTaskSwitchContext+0x40>
	__asm volatile
 800b6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6de:	f383 8811 	msr	BASEPRI, r3
 800b6e2:	f3bf 8f6f 	isb	sy
 800b6e6:	f3bf 8f4f 	dsb	sy
 800b6ea:	607b      	str	r3, [r7, #4]
}
 800b6ec:	bf00      	nop
 800b6ee:	e7fe      	b.n	800b6ee <vTaskSwitchContext+0x3e>
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	3b01      	subs	r3, #1
 800b6f4:	60fb      	str	r3, [r7, #12]
 800b6f6:	491b      	ldr	r1, [pc, #108]	; (800b764 <vTaskSwitchContext+0xb4>)
 800b6f8:	68fa      	ldr	r2, [r7, #12]
 800b6fa:	4613      	mov	r3, r2
 800b6fc:	009b      	lsls	r3, r3, #2
 800b6fe:	4413      	add	r3, r2
 800b700:	009b      	lsls	r3, r3, #2
 800b702:	440b      	add	r3, r1
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d0e4      	beq.n	800b6d4 <vTaskSwitchContext+0x24>
 800b70a:	68fa      	ldr	r2, [r7, #12]
 800b70c:	4613      	mov	r3, r2
 800b70e:	009b      	lsls	r3, r3, #2
 800b710:	4413      	add	r3, r2
 800b712:	009b      	lsls	r3, r3, #2
 800b714:	4a13      	ldr	r2, [pc, #76]	; (800b764 <vTaskSwitchContext+0xb4>)
 800b716:	4413      	add	r3, r2
 800b718:	60bb      	str	r3, [r7, #8]
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	685a      	ldr	r2, [r3, #4]
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	605a      	str	r2, [r3, #4]
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	685a      	ldr	r2, [r3, #4]
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	3308      	adds	r3, #8
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d104      	bne.n	800b73a <vTaskSwitchContext+0x8a>
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	685b      	ldr	r3, [r3, #4]
 800b734:	685a      	ldr	r2, [r3, #4]
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	605a      	str	r2, [r3, #4]
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	68db      	ldr	r3, [r3, #12]
 800b740:	4a09      	ldr	r2, [pc, #36]	; (800b768 <vTaskSwitchContext+0xb8>)
 800b742:	6013      	str	r3, [r2, #0]
 800b744:	4a06      	ldr	r2, [pc, #24]	; (800b760 <vTaskSwitchContext+0xb0>)
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	6013      	str	r3, [r2, #0]
}
 800b74a:	bf00      	nop
 800b74c:	3714      	adds	r7, #20
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr
 800b756:	bf00      	nop
 800b758:	20000f44 	.word	0x20000f44
 800b75c:	20000f30 	.word	0x20000f30
 800b760:	20000f24 	.word	0x20000f24
 800b764:	20000a4c 	.word	0x20000a4c
 800b768:	20000a48 	.word	0x20000a48

0800b76c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d10a      	bne.n	800b792 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b780:	f383 8811 	msr	BASEPRI, r3
 800b784:	f3bf 8f6f 	isb	sy
 800b788:	f3bf 8f4f 	dsb	sy
 800b78c:	60fb      	str	r3, [r7, #12]
}
 800b78e:	bf00      	nop
 800b790:	e7fe      	b.n	800b790 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b792:	4b07      	ldr	r3, [pc, #28]	; (800b7b0 <vTaskPlaceOnEventList+0x44>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	3318      	adds	r3, #24
 800b798:	4619      	mov	r1, r3
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f7fe fb65 	bl	8009e6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b7a0:	2101      	movs	r1, #1
 800b7a2:	6838      	ldr	r0, [r7, #0]
 800b7a4:	f000 fb7a 	bl	800be9c <prvAddCurrentTaskToDelayedList>
}
 800b7a8:	bf00      	nop
 800b7aa:	3710      	adds	r7, #16
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	20000a48 	.word	0x20000a48

0800b7b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b086      	sub	sp, #24
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	60b9      	str	r1, [r7, #8]
 800b7be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d10a      	bne.n	800b7dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ca:	f383 8811 	msr	BASEPRI, r3
 800b7ce:	f3bf 8f6f 	isb	sy
 800b7d2:	f3bf 8f4f 	dsb	sy
 800b7d6:	617b      	str	r3, [r7, #20]
}
 800b7d8:	bf00      	nop
 800b7da:	e7fe      	b.n	800b7da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b7dc:	4b0a      	ldr	r3, [pc, #40]	; (800b808 <vTaskPlaceOnEventListRestricted+0x54>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	3318      	adds	r3, #24
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	68f8      	ldr	r0, [r7, #12]
 800b7e6:	f7fe fb1c 	bl	8009e22 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d002      	beq.n	800b7f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b7f0:	f04f 33ff 	mov.w	r3, #4294967295
 800b7f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b7f6:	6879      	ldr	r1, [r7, #4]
 800b7f8:	68b8      	ldr	r0, [r7, #8]
 800b7fa:	f000 fb4f 	bl	800be9c <prvAddCurrentTaskToDelayedList>
	}
 800b7fe:	bf00      	nop
 800b800:	3718      	adds	r7, #24
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
 800b806:	bf00      	nop
 800b808:	20000a48 	.word	0x20000a48

0800b80c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b086      	sub	sp, #24
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	68db      	ldr	r3, [r3, #12]
 800b818:	68db      	ldr	r3, [r3, #12]
 800b81a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d10a      	bne.n	800b838 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b826:	f383 8811 	msr	BASEPRI, r3
 800b82a:	f3bf 8f6f 	isb	sy
 800b82e:	f3bf 8f4f 	dsb	sy
 800b832:	60fb      	str	r3, [r7, #12]
}
 800b834:	bf00      	nop
 800b836:	e7fe      	b.n	800b836 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	3318      	adds	r3, #24
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7fe fb4d 	bl	8009edc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b842:	4b1e      	ldr	r3, [pc, #120]	; (800b8bc <xTaskRemoveFromEventList+0xb0>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d11d      	bne.n	800b886 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	3304      	adds	r3, #4
 800b84e:	4618      	mov	r0, r3
 800b850:	f7fe fb44 	bl	8009edc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b858:	4b19      	ldr	r3, [pc, #100]	; (800b8c0 <xTaskRemoveFromEventList+0xb4>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d903      	bls.n	800b868 <xTaskRemoveFromEventList+0x5c>
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b864:	4a16      	ldr	r2, [pc, #88]	; (800b8c0 <xTaskRemoveFromEventList+0xb4>)
 800b866:	6013      	str	r3, [r2, #0]
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b86c:	4613      	mov	r3, r2
 800b86e:	009b      	lsls	r3, r3, #2
 800b870:	4413      	add	r3, r2
 800b872:	009b      	lsls	r3, r3, #2
 800b874:	4a13      	ldr	r2, [pc, #76]	; (800b8c4 <xTaskRemoveFromEventList+0xb8>)
 800b876:	441a      	add	r2, r3
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	3304      	adds	r3, #4
 800b87c:	4619      	mov	r1, r3
 800b87e:	4610      	mov	r0, r2
 800b880:	f7fe facf 	bl	8009e22 <vListInsertEnd>
 800b884:	e005      	b.n	800b892 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	3318      	adds	r3, #24
 800b88a:	4619      	mov	r1, r3
 800b88c:	480e      	ldr	r0, [pc, #56]	; (800b8c8 <xTaskRemoveFromEventList+0xbc>)
 800b88e:	f7fe fac8 	bl	8009e22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b896:	4b0d      	ldr	r3, [pc, #52]	; (800b8cc <xTaskRemoveFromEventList+0xc0>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d905      	bls.n	800b8ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b8a4:	4b0a      	ldr	r3, [pc, #40]	; (800b8d0 <xTaskRemoveFromEventList+0xc4>)
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	601a      	str	r2, [r3, #0]
 800b8aa:	e001      	b.n	800b8b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b8b0:	697b      	ldr	r3, [r7, #20]
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3718      	adds	r7, #24
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	20000f44 	.word	0x20000f44
 800b8c0:	20000f24 	.word	0x20000f24
 800b8c4:	20000a4c 	.word	0x20000a4c
 800b8c8:	20000edc 	.word	0x20000edc
 800b8cc:	20000a48 	.word	0x20000a48
 800b8d0:	20000f30 	.word	0x20000f30

0800b8d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b083      	sub	sp, #12
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b8dc:	4b06      	ldr	r3, [pc, #24]	; (800b8f8 <vTaskInternalSetTimeOutState+0x24>)
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b8e4:	4b05      	ldr	r3, [pc, #20]	; (800b8fc <vTaskInternalSetTimeOutState+0x28>)
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	605a      	str	r2, [r3, #4]
}
 800b8ec:	bf00      	nop
 800b8ee:	370c      	adds	r7, #12
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr
 800b8f8:	20000f34 	.word	0x20000f34
 800b8fc:	20000f20 	.word	0x20000f20

0800b900 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b088      	sub	sp, #32
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
 800b908:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d10a      	bne.n	800b926 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b914:	f383 8811 	msr	BASEPRI, r3
 800b918:	f3bf 8f6f 	isb	sy
 800b91c:	f3bf 8f4f 	dsb	sy
 800b920:	613b      	str	r3, [r7, #16]
}
 800b922:	bf00      	nop
 800b924:	e7fe      	b.n	800b924 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d10a      	bne.n	800b942 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b930:	f383 8811 	msr	BASEPRI, r3
 800b934:	f3bf 8f6f 	isb	sy
 800b938:	f3bf 8f4f 	dsb	sy
 800b93c:	60fb      	str	r3, [r7, #12]
}
 800b93e:	bf00      	nop
 800b940:	e7fe      	b.n	800b940 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b942:	f000 ff77 	bl	800c834 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b946:	4b1d      	ldr	r3, [pc, #116]	; (800b9bc <xTaskCheckForTimeOut+0xbc>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	685b      	ldr	r3, [r3, #4]
 800b950:	69ba      	ldr	r2, [r7, #24]
 800b952:	1ad3      	subs	r3, r2, r3
 800b954:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b95e:	d102      	bne.n	800b966 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b960:	2300      	movs	r3, #0
 800b962:	61fb      	str	r3, [r7, #28]
 800b964:	e023      	b.n	800b9ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	4b15      	ldr	r3, [pc, #84]	; (800b9c0 <xTaskCheckForTimeOut+0xc0>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	429a      	cmp	r2, r3
 800b970:	d007      	beq.n	800b982 <xTaskCheckForTimeOut+0x82>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	69ba      	ldr	r2, [r7, #24]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d302      	bcc.n	800b982 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b97c:	2301      	movs	r3, #1
 800b97e:	61fb      	str	r3, [r7, #28]
 800b980:	e015      	b.n	800b9ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	697a      	ldr	r2, [r7, #20]
 800b988:	429a      	cmp	r2, r3
 800b98a:	d20b      	bcs.n	800b9a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	681a      	ldr	r2, [r3, #0]
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	1ad2      	subs	r2, r2, r3
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f7ff ff9b 	bl	800b8d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	61fb      	str	r3, [r7, #28]
 800b9a2:	e004      	b.n	800b9ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b9ae:	f000 ff71 	bl	800c894 <vPortExitCritical>

	return xReturn;
 800b9b2:	69fb      	ldr	r3, [r7, #28]
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3720      	adds	r7, #32
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	20000f20 	.word	0x20000f20
 800b9c0:	20000f34 	.word	0x20000f34

0800b9c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b9c8:	4b03      	ldr	r3, [pc, #12]	; (800b9d8 <vTaskMissedYield+0x14>)
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	601a      	str	r2, [r3, #0]
}
 800b9ce:	bf00      	nop
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d6:	4770      	bx	lr
 800b9d8:	20000f30 	.word	0x20000f30

0800b9dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b082      	sub	sp, #8
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b9e4:	f000 f852 	bl	800ba8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b9e8:	4b06      	ldr	r3, [pc, #24]	; (800ba04 <prvIdleTask+0x28>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	2b01      	cmp	r3, #1
 800b9ee:	d9f9      	bls.n	800b9e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b9f0:	4b05      	ldr	r3, [pc, #20]	; (800ba08 <prvIdleTask+0x2c>)
 800b9f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9f6:	601a      	str	r2, [r3, #0]
 800b9f8:	f3bf 8f4f 	dsb	sy
 800b9fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ba00:	e7f0      	b.n	800b9e4 <prvIdleTask+0x8>
 800ba02:	bf00      	nop
 800ba04:	20000a4c 	.word	0x20000a4c
 800ba08:	e000ed04 	.word	0xe000ed04

0800ba0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b082      	sub	sp, #8
 800ba10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba12:	2300      	movs	r3, #0
 800ba14:	607b      	str	r3, [r7, #4]
 800ba16:	e00c      	b.n	800ba32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ba18:	687a      	ldr	r2, [r7, #4]
 800ba1a:	4613      	mov	r3, r2
 800ba1c:	009b      	lsls	r3, r3, #2
 800ba1e:	4413      	add	r3, r2
 800ba20:	009b      	lsls	r3, r3, #2
 800ba22:	4a12      	ldr	r2, [pc, #72]	; (800ba6c <prvInitialiseTaskLists+0x60>)
 800ba24:	4413      	add	r3, r2
 800ba26:	4618      	mov	r0, r3
 800ba28:	f7fe f9ce 	bl	8009dc8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	3301      	adds	r3, #1
 800ba30:	607b      	str	r3, [r7, #4]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2b37      	cmp	r3, #55	; 0x37
 800ba36:	d9ef      	bls.n	800ba18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ba38:	480d      	ldr	r0, [pc, #52]	; (800ba70 <prvInitialiseTaskLists+0x64>)
 800ba3a:	f7fe f9c5 	bl	8009dc8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ba3e:	480d      	ldr	r0, [pc, #52]	; (800ba74 <prvInitialiseTaskLists+0x68>)
 800ba40:	f7fe f9c2 	bl	8009dc8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ba44:	480c      	ldr	r0, [pc, #48]	; (800ba78 <prvInitialiseTaskLists+0x6c>)
 800ba46:	f7fe f9bf 	bl	8009dc8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ba4a:	480c      	ldr	r0, [pc, #48]	; (800ba7c <prvInitialiseTaskLists+0x70>)
 800ba4c:	f7fe f9bc 	bl	8009dc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ba50:	480b      	ldr	r0, [pc, #44]	; (800ba80 <prvInitialiseTaskLists+0x74>)
 800ba52:	f7fe f9b9 	bl	8009dc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ba56:	4b0b      	ldr	r3, [pc, #44]	; (800ba84 <prvInitialiseTaskLists+0x78>)
 800ba58:	4a05      	ldr	r2, [pc, #20]	; (800ba70 <prvInitialiseTaskLists+0x64>)
 800ba5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ba5c:	4b0a      	ldr	r3, [pc, #40]	; (800ba88 <prvInitialiseTaskLists+0x7c>)
 800ba5e:	4a05      	ldr	r2, [pc, #20]	; (800ba74 <prvInitialiseTaskLists+0x68>)
 800ba60:	601a      	str	r2, [r3, #0]
}
 800ba62:	bf00      	nop
 800ba64:	3708      	adds	r7, #8
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}
 800ba6a:	bf00      	nop
 800ba6c:	20000a4c 	.word	0x20000a4c
 800ba70:	20000eac 	.word	0x20000eac
 800ba74:	20000ec0 	.word	0x20000ec0
 800ba78:	20000edc 	.word	0x20000edc
 800ba7c:	20000ef0 	.word	0x20000ef0
 800ba80:	20000f08 	.word	0x20000f08
 800ba84:	20000ed4 	.word	0x20000ed4
 800ba88:	20000ed8 	.word	0x20000ed8

0800ba8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b082      	sub	sp, #8
 800ba90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba92:	e019      	b.n	800bac8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ba94:	f000 fece 	bl	800c834 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba98:	4b10      	ldr	r3, [pc, #64]	; (800badc <prvCheckTasksWaitingTermination+0x50>)
 800ba9a:	68db      	ldr	r3, [r3, #12]
 800ba9c:	68db      	ldr	r3, [r3, #12]
 800ba9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	3304      	adds	r3, #4
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7fe fa19 	bl	8009edc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800baaa:	4b0d      	ldr	r3, [pc, #52]	; (800bae0 <prvCheckTasksWaitingTermination+0x54>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	3b01      	subs	r3, #1
 800bab0:	4a0b      	ldr	r2, [pc, #44]	; (800bae0 <prvCheckTasksWaitingTermination+0x54>)
 800bab2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bab4:	4b0b      	ldr	r3, [pc, #44]	; (800bae4 <prvCheckTasksWaitingTermination+0x58>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	3b01      	subs	r3, #1
 800baba:	4a0a      	ldr	r2, [pc, #40]	; (800bae4 <prvCheckTasksWaitingTermination+0x58>)
 800babc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800babe:	f000 fee9 	bl	800c894 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f000 f810 	bl	800bae8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bac8:	4b06      	ldr	r3, [pc, #24]	; (800bae4 <prvCheckTasksWaitingTermination+0x58>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d1e1      	bne.n	800ba94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bad0:	bf00      	nop
 800bad2:	bf00      	nop
 800bad4:	3708      	adds	r7, #8
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}
 800bada:	bf00      	nop
 800badc:	20000ef0 	.word	0x20000ef0
 800bae0:	20000f1c 	.word	0x20000f1c
 800bae4:	20000f04 	.word	0x20000f04

0800bae8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d108      	bne.n	800bb0c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bafe:	4618      	mov	r0, r3
 800bb00:	f001 f886 	bl	800cc10 <vPortFree>
				vPortFree( pxTCB );
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f001 f883 	bl	800cc10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bb0a:	e018      	b.n	800bb3e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bb12:	2b01      	cmp	r3, #1
 800bb14:	d103      	bne.n	800bb1e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f001 f87a 	bl	800cc10 <vPortFree>
	}
 800bb1c:	e00f      	b.n	800bb3e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bb24:	2b02      	cmp	r3, #2
 800bb26:	d00a      	beq.n	800bb3e <prvDeleteTCB+0x56>
	__asm volatile
 800bb28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb2c:	f383 8811 	msr	BASEPRI, r3
 800bb30:	f3bf 8f6f 	isb	sy
 800bb34:	f3bf 8f4f 	dsb	sy
 800bb38:	60fb      	str	r3, [r7, #12]
}
 800bb3a:	bf00      	nop
 800bb3c:	e7fe      	b.n	800bb3c <prvDeleteTCB+0x54>
	}
 800bb3e:	bf00      	nop
 800bb40:	3710      	adds	r7, #16
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
	...

0800bb48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b083      	sub	sp, #12
 800bb4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb4e:	4b0c      	ldr	r3, [pc, #48]	; (800bb80 <prvResetNextTaskUnblockTime+0x38>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d104      	bne.n	800bb62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bb58:	4b0a      	ldr	r3, [pc, #40]	; (800bb84 <prvResetNextTaskUnblockTime+0x3c>)
 800bb5a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bb60:	e008      	b.n	800bb74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb62:	4b07      	ldr	r3, [pc, #28]	; (800bb80 <prvResetNextTaskUnblockTime+0x38>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	68db      	ldr	r3, [r3, #12]
 800bb68:	68db      	ldr	r3, [r3, #12]
 800bb6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	4a04      	ldr	r2, [pc, #16]	; (800bb84 <prvResetNextTaskUnblockTime+0x3c>)
 800bb72:	6013      	str	r3, [r2, #0]
}
 800bb74:	bf00      	nop
 800bb76:	370c      	adds	r7, #12
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7e:	4770      	bx	lr
 800bb80:	20000ed4 	.word	0x20000ed4
 800bb84:	20000f3c 	.word	0x20000f3c

0800bb88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bb88:	b480      	push	{r7}
 800bb8a:	b083      	sub	sp, #12
 800bb8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bb8e:	4b0b      	ldr	r3, [pc, #44]	; (800bbbc <xTaskGetSchedulerState+0x34>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d102      	bne.n	800bb9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bb96:	2301      	movs	r3, #1
 800bb98:	607b      	str	r3, [r7, #4]
 800bb9a:	e008      	b.n	800bbae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb9c:	4b08      	ldr	r3, [pc, #32]	; (800bbc0 <xTaskGetSchedulerState+0x38>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d102      	bne.n	800bbaa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bba4:	2302      	movs	r3, #2
 800bba6:	607b      	str	r3, [r7, #4]
 800bba8:	e001      	b.n	800bbae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bbae:	687b      	ldr	r3, [r7, #4]
	}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	370c      	adds	r7, #12
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr
 800bbbc:	20000f28 	.word	0x20000f28
 800bbc0:	20000f44 	.word	0x20000f44

0800bbc4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d051      	beq.n	800bc7e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbde:	4b2a      	ldr	r3, [pc, #168]	; (800bc88 <xTaskPriorityInherit+0xc4>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d241      	bcs.n	800bc6c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	699b      	ldr	r3, [r3, #24]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	db06      	blt.n	800bbfe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbf0:	4b25      	ldr	r3, [pc, #148]	; (800bc88 <xTaskPriorityInherit+0xc4>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	6959      	ldr	r1, [r3, #20]
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc06:	4613      	mov	r3, r2
 800bc08:	009b      	lsls	r3, r3, #2
 800bc0a:	4413      	add	r3, r2
 800bc0c:	009b      	lsls	r3, r3, #2
 800bc0e:	4a1f      	ldr	r2, [pc, #124]	; (800bc8c <xTaskPriorityInherit+0xc8>)
 800bc10:	4413      	add	r3, r2
 800bc12:	4299      	cmp	r1, r3
 800bc14:	d122      	bne.n	800bc5c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	3304      	adds	r3, #4
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f7fe f95e 	bl	8009edc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bc20:	4b19      	ldr	r3, [pc, #100]	; (800bc88 <xTaskPriorityInherit+0xc4>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc2e:	4b18      	ldr	r3, [pc, #96]	; (800bc90 <xTaskPriorityInherit+0xcc>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d903      	bls.n	800bc3e <xTaskPriorityInherit+0x7a>
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc3a:	4a15      	ldr	r2, [pc, #84]	; (800bc90 <xTaskPriorityInherit+0xcc>)
 800bc3c:	6013      	str	r3, [r2, #0]
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc42:	4613      	mov	r3, r2
 800bc44:	009b      	lsls	r3, r3, #2
 800bc46:	4413      	add	r3, r2
 800bc48:	009b      	lsls	r3, r3, #2
 800bc4a:	4a10      	ldr	r2, [pc, #64]	; (800bc8c <xTaskPriorityInherit+0xc8>)
 800bc4c:	441a      	add	r2, r3
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	3304      	adds	r3, #4
 800bc52:	4619      	mov	r1, r3
 800bc54:	4610      	mov	r0, r2
 800bc56:	f7fe f8e4 	bl	8009e22 <vListInsertEnd>
 800bc5a:	e004      	b.n	800bc66 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bc5c:	4b0a      	ldr	r3, [pc, #40]	; (800bc88 <xTaskPriorityInherit+0xc4>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bc66:	2301      	movs	r3, #1
 800bc68:	60fb      	str	r3, [r7, #12]
 800bc6a:	e008      	b.n	800bc7e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bc70:	4b05      	ldr	r3, [pc, #20]	; (800bc88 <xTaskPriorityInherit+0xc4>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d201      	bcs.n	800bc7e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
	}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3710      	adds	r7, #16
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}
 800bc88:	20000a48 	.word	0x20000a48
 800bc8c:	20000a4c 	.word	0x20000a4c
 800bc90:	20000f24 	.word	0x20000f24

0800bc94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b086      	sub	sp, #24
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bca0:	2300      	movs	r3, #0
 800bca2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d056      	beq.n	800bd58 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bcaa:	4b2e      	ldr	r3, [pc, #184]	; (800bd64 <xTaskPriorityDisinherit+0xd0>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	693a      	ldr	r2, [r7, #16]
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d00a      	beq.n	800bcca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bcb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb8:	f383 8811 	msr	BASEPRI, r3
 800bcbc:	f3bf 8f6f 	isb	sy
 800bcc0:	f3bf 8f4f 	dsb	sy
 800bcc4:	60fb      	str	r3, [r7, #12]
}
 800bcc6:	bf00      	nop
 800bcc8:	e7fe      	b.n	800bcc8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d10a      	bne.n	800bce8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bcd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd6:	f383 8811 	msr	BASEPRI, r3
 800bcda:	f3bf 8f6f 	isb	sy
 800bcde:	f3bf 8f4f 	dsb	sy
 800bce2:	60bb      	str	r3, [r7, #8]
}
 800bce4:	bf00      	nop
 800bce6:	e7fe      	b.n	800bce6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcec:	1e5a      	subs	r2, r3, #1
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d02c      	beq.n	800bd58 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d128      	bne.n	800bd58 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	3304      	adds	r3, #4
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7fe f8e6 	bl	8009edc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd1c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd28:	4b0f      	ldr	r3, [pc, #60]	; (800bd68 <xTaskPriorityDisinherit+0xd4>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d903      	bls.n	800bd38 <xTaskPriorityDisinherit+0xa4>
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd34:	4a0c      	ldr	r2, [pc, #48]	; (800bd68 <xTaskPriorityDisinherit+0xd4>)
 800bd36:	6013      	str	r3, [r2, #0]
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd3c:	4613      	mov	r3, r2
 800bd3e:	009b      	lsls	r3, r3, #2
 800bd40:	4413      	add	r3, r2
 800bd42:	009b      	lsls	r3, r3, #2
 800bd44:	4a09      	ldr	r2, [pc, #36]	; (800bd6c <xTaskPriorityDisinherit+0xd8>)
 800bd46:	441a      	add	r2, r3
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	3304      	adds	r3, #4
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	4610      	mov	r0, r2
 800bd50:	f7fe f867 	bl	8009e22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bd54:	2301      	movs	r3, #1
 800bd56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bd58:	697b      	ldr	r3, [r7, #20]
	}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3718      	adds	r7, #24
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	20000a48 	.word	0x20000a48
 800bd68:	20000f24 	.word	0x20000f24
 800bd6c:	20000a4c 	.word	0x20000a4c

0800bd70 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b088      	sub	sp, #32
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bd7e:	2301      	movs	r3, #1
 800bd80:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d06a      	beq.n	800be5e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bd88:	69bb      	ldr	r3, [r7, #24]
 800bd8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d10a      	bne.n	800bda6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800bd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd94:	f383 8811 	msr	BASEPRI, r3
 800bd98:	f3bf 8f6f 	isb	sy
 800bd9c:	f3bf 8f4f 	dsb	sy
 800bda0:	60fb      	str	r3, [r7, #12]
}
 800bda2:	bf00      	nop
 800bda4:	e7fe      	b.n	800bda4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bda6:	69bb      	ldr	r3, [r7, #24]
 800bda8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdaa:	683a      	ldr	r2, [r7, #0]
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d902      	bls.n	800bdb6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	61fb      	str	r3, [r7, #28]
 800bdb4:	e002      	b.n	800bdbc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bdb6:	69bb      	ldr	r3, [r7, #24]
 800bdb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdba:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bdbc:	69bb      	ldr	r3, [r7, #24]
 800bdbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc0:	69fa      	ldr	r2, [r7, #28]
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d04b      	beq.n	800be5e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bdc6:	69bb      	ldr	r3, [r7, #24]
 800bdc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdca:	697a      	ldr	r2, [r7, #20]
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d146      	bne.n	800be5e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bdd0:	4b25      	ldr	r3, [pc, #148]	; (800be68 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	69ba      	ldr	r2, [r7, #24]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d10a      	bne.n	800bdf0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800bdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdde:	f383 8811 	msr	BASEPRI, r3
 800bde2:	f3bf 8f6f 	isb	sy
 800bde6:	f3bf 8f4f 	dsb	sy
 800bdea:	60bb      	str	r3, [r7, #8]
}
 800bdec:	bf00      	nop
 800bdee:	e7fe      	b.n	800bdee <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bdf0:	69bb      	ldr	r3, [r7, #24]
 800bdf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bdf6:	69bb      	ldr	r3, [r7, #24]
 800bdf8:	69fa      	ldr	r2, [r7, #28]
 800bdfa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bdfc:	69bb      	ldr	r3, [r7, #24]
 800bdfe:	699b      	ldr	r3, [r3, #24]
 800be00:	2b00      	cmp	r3, #0
 800be02:	db04      	blt.n	800be0e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be04:	69fb      	ldr	r3, [r7, #28]
 800be06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800be0a:	69bb      	ldr	r3, [r7, #24]
 800be0c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800be0e:	69bb      	ldr	r3, [r7, #24]
 800be10:	6959      	ldr	r1, [r3, #20]
 800be12:	693a      	ldr	r2, [r7, #16]
 800be14:	4613      	mov	r3, r2
 800be16:	009b      	lsls	r3, r3, #2
 800be18:	4413      	add	r3, r2
 800be1a:	009b      	lsls	r3, r3, #2
 800be1c:	4a13      	ldr	r2, [pc, #76]	; (800be6c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800be1e:	4413      	add	r3, r2
 800be20:	4299      	cmp	r1, r3
 800be22:	d11c      	bne.n	800be5e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be24:	69bb      	ldr	r3, [r7, #24]
 800be26:	3304      	adds	r3, #4
 800be28:	4618      	mov	r0, r3
 800be2a:	f7fe f857 	bl	8009edc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800be2e:	69bb      	ldr	r3, [r7, #24]
 800be30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be32:	4b0f      	ldr	r3, [pc, #60]	; (800be70 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	429a      	cmp	r2, r3
 800be38:	d903      	bls.n	800be42 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800be3a:	69bb      	ldr	r3, [r7, #24]
 800be3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be3e:	4a0c      	ldr	r2, [pc, #48]	; (800be70 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800be40:	6013      	str	r3, [r2, #0]
 800be42:	69bb      	ldr	r3, [r7, #24]
 800be44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be46:	4613      	mov	r3, r2
 800be48:	009b      	lsls	r3, r3, #2
 800be4a:	4413      	add	r3, r2
 800be4c:	009b      	lsls	r3, r3, #2
 800be4e:	4a07      	ldr	r2, [pc, #28]	; (800be6c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800be50:	441a      	add	r2, r3
 800be52:	69bb      	ldr	r3, [r7, #24]
 800be54:	3304      	adds	r3, #4
 800be56:	4619      	mov	r1, r3
 800be58:	4610      	mov	r0, r2
 800be5a:	f7fd ffe2 	bl	8009e22 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800be5e:	bf00      	nop
 800be60:	3720      	adds	r7, #32
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
 800be66:	bf00      	nop
 800be68:	20000a48 	.word	0x20000a48
 800be6c:	20000a4c 	.word	0x20000a4c
 800be70:	20000f24 	.word	0x20000f24

0800be74 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800be74:	b480      	push	{r7}
 800be76:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800be78:	4b07      	ldr	r3, [pc, #28]	; (800be98 <pvTaskIncrementMutexHeldCount+0x24>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d004      	beq.n	800be8a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800be80:	4b05      	ldr	r3, [pc, #20]	; (800be98 <pvTaskIncrementMutexHeldCount+0x24>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800be86:	3201      	adds	r2, #1
 800be88:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800be8a:	4b03      	ldr	r3, [pc, #12]	; (800be98 <pvTaskIncrementMutexHeldCount+0x24>)
 800be8c:	681b      	ldr	r3, [r3, #0]
	}
 800be8e:	4618      	mov	r0, r3
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr
 800be98:	20000a48 	.word	0x20000a48

0800be9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bea6:	4b21      	ldr	r3, [pc, #132]	; (800bf2c <prvAddCurrentTaskToDelayedList+0x90>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800beac:	4b20      	ldr	r3, [pc, #128]	; (800bf30 <prvAddCurrentTaskToDelayedList+0x94>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	3304      	adds	r3, #4
 800beb2:	4618      	mov	r0, r3
 800beb4:	f7fe f812 	bl	8009edc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bebe:	d10a      	bne.n	800bed6 <prvAddCurrentTaskToDelayedList+0x3a>
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d007      	beq.n	800bed6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bec6:	4b1a      	ldr	r3, [pc, #104]	; (800bf30 <prvAddCurrentTaskToDelayedList+0x94>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	3304      	adds	r3, #4
 800becc:	4619      	mov	r1, r3
 800bece:	4819      	ldr	r0, [pc, #100]	; (800bf34 <prvAddCurrentTaskToDelayedList+0x98>)
 800bed0:	f7fd ffa7 	bl	8009e22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bed4:	e026      	b.n	800bf24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bed6:	68fa      	ldr	r2, [r7, #12]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	4413      	add	r3, r2
 800bedc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bede:	4b14      	ldr	r3, [pc, #80]	; (800bf30 <prvAddCurrentTaskToDelayedList+0x94>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	68ba      	ldr	r2, [r7, #8]
 800bee4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bee6:	68ba      	ldr	r2, [r7, #8]
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	429a      	cmp	r2, r3
 800beec:	d209      	bcs.n	800bf02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800beee:	4b12      	ldr	r3, [pc, #72]	; (800bf38 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bef0:	681a      	ldr	r2, [r3, #0]
 800bef2:	4b0f      	ldr	r3, [pc, #60]	; (800bf30 <prvAddCurrentTaskToDelayedList+0x94>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	3304      	adds	r3, #4
 800bef8:	4619      	mov	r1, r3
 800befa:	4610      	mov	r0, r2
 800befc:	f7fd ffb5 	bl	8009e6a <vListInsert>
}
 800bf00:	e010      	b.n	800bf24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf02:	4b0e      	ldr	r3, [pc, #56]	; (800bf3c <prvAddCurrentTaskToDelayedList+0xa0>)
 800bf04:	681a      	ldr	r2, [r3, #0]
 800bf06:	4b0a      	ldr	r3, [pc, #40]	; (800bf30 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	3304      	adds	r3, #4
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	4610      	mov	r0, r2
 800bf10:	f7fd ffab 	bl	8009e6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bf14:	4b0a      	ldr	r3, [pc, #40]	; (800bf40 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	68ba      	ldr	r2, [r7, #8]
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d202      	bcs.n	800bf24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bf1e:	4a08      	ldr	r2, [pc, #32]	; (800bf40 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	6013      	str	r3, [r2, #0]
}
 800bf24:	bf00      	nop
 800bf26:	3710      	adds	r7, #16
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}
 800bf2c:	20000f20 	.word	0x20000f20
 800bf30:	20000a48 	.word	0x20000a48
 800bf34:	20000f08 	.word	0x20000f08
 800bf38:	20000ed8 	.word	0x20000ed8
 800bf3c:	20000ed4 	.word	0x20000ed4
 800bf40:	20000f3c 	.word	0x20000f3c

0800bf44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b08a      	sub	sp, #40	; 0x28
 800bf48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bf4e:	f000 fb07 	bl	800c560 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bf52:	4b1c      	ldr	r3, [pc, #112]	; (800bfc4 <xTimerCreateTimerTask+0x80>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d021      	beq.n	800bf9e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bf62:	1d3a      	adds	r2, r7, #4
 800bf64:	f107 0108 	add.w	r1, r7, #8
 800bf68:	f107 030c 	add.w	r3, r7, #12
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7fd ff11 	bl	8009d94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bf72:	6879      	ldr	r1, [r7, #4]
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	68fa      	ldr	r2, [r7, #12]
 800bf78:	9202      	str	r2, [sp, #8]
 800bf7a:	9301      	str	r3, [sp, #4]
 800bf7c:	2302      	movs	r3, #2
 800bf7e:	9300      	str	r3, [sp, #0]
 800bf80:	2300      	movs	r3, #0
 800bf82:	460a      	mov	r2, r1
 800bf84:	4910      	ldr	r1, [pc, #64]	; (800bfc8 <xTimerCreateTimerTask+0x84>)
 800bf86:	4811      	ldr	r0, [pc, #68]	; (800bfcc <xTimerCreateTimerTask+0x88>)
 800bf88:	f7fe ffe0 	bl	800af4c <xTaskCreateStatic>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	4a10      	ldr	r2, [pc, #64]	; (800bfd0 <xTimerCreateTimerTask+0x8c>)
 800bf90:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bf92:	4b0f      	ldr	r3, [pc, #60]	; (800bfd0 <xTimerCreateTimerTask+0x8c>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d001      	beq.n	800bf9e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d10a      	bne.n	800bfba <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bfa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa8:	f383 8811 	msr	BASEPRI, r3
 800bfac:	f3bf 8f6f 	isb	sy
 800bfb0:	f3bf 8f4f 	dsb	sy
 800bfb4:	613b      	str	r3, [r7, #16]
}
 800bfb6:	bf00      	nop
 800bfb8:	e7fe      	b.n	800bfb8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bfba:	697b      	ldr	r3, [r7, #20]
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3718      	adds	r7, #24
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}
 800bfc4:	20000f78 	.word	0x20000f78
 800bfc8:	08012224 	.word	0x08012224
 800bfcc:	0800c109 	.word	0x0800c109
 800bfd0:	20000f7c 	.word	0x20000f7c

0800bfd4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b08a      	sub	sp, #40	; 0x28
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	60f8      	str	r0, [r7, #12]
 800bfdc:	60b9      	str	r1, [r7, #8]
 800bfde:	607a      	str	r2, [r7, #4]
 800bfe0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d10a      	bne.n	800c002 <xTimerGenericCommand+0x2e>
	__asm volatile
 800bfec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff0:	f383 8811 	msr	BASEPRI, r3
 800bff4:	f3bf 8f6f 	isb	sy
 800bff8:	f3bf 8f4f 	dsb	sy
 800bffc:	623b      	str	r3, [r7, #32]
}
 800bffe:	bf00      	nop
 800c000:	e7fe      	b.n	800c000 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c002:	4b1a      	ldr	r3, [pc, #104]	; (800c06c <xTimerGenericCommand+0x98>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d02a      	beq.n	800c060 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	2b05      	cmp	r3, #5
 800c01a:	dc18      	bgt.n	800c04e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c01c:	f7ff fdb4 	bl	800bb88 <xTaskGetSchedulerState>
 800c020:	4603      	mov	r3, r0
 800c022:	2b02      	cmp	r3, #2
 800c024:	d109      	bne.n	800c03a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c026:	4b11      	ldr	r3, [pc, #68]	; (800c06c <xTimerGenericCommand+0x98>)
 800c028:	6818      	ldr	r0, [r3, #0]
 800c02a:	f107 0110 	add.w	r1, r7, #16
 800c02e:	2300      	movs	r3, #0
 800c030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c032:	f7fe f925 	bl	800a280 <xQueueGenericSend>
 800c036:	6278      	str	r0, [r7, #36]	; 0x24
 800c038:	e012      	b.n	800c060 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c03a:	4b0c      	ldr	r3, [pc, #48]	; (800c06c <xTimerGenericCommand+0x98>)
 800c03c:	6818      	ldr	r0, [r3, #0]
 800c03e:	f107 0110 	add.w	r1, r7, #16
 800c042:	2300      	movs	r3, #0
 800c044:	2200      	movs	r2, #0
 800c046:	f7fe f91b 	bl	800a280 <xQueueGenericSend>
 800c04a:	6278      	str	r0, [r7, #36]	; 0x24
 800c04c:	e008      	b.n	800c060 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c04e:	4b07      	ldr	r3, [pc, #28]	; (800c06c <xTimerGenericCommand+0x98>)
 800c050:	6818      	ldr	r0, [r3, #0]
 800c052:	f107 0110 	add.w	r1, r7, #16
 800c056:	2300      	movs	r3, #0
 800c058:	683a      	ldr	r2, [r7, #0]
 800c05a:	f7fe fa0f 	bl	800a47c <xQueueGenericSendFromISR>
 800c05e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c062:	4618      	mov	r0, r3
 800c064:	3728      	adds	r7, #40	; 0x28
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
 800c06a:	bf00      	nop
 800c06c:	20000f78 	.word	0x20000f78

0800c070 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b088      	sub	sp, #32
 800c074:	af02      	add	r7, sp, #8
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c07a:	4b22      	ldr	r3, [pc, #136]	; (800c104 <prvProcessExpiredTimer+0x94>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	68db      	ldr	r3, [r3, #12]
 800c080:	68db      	ldr	r3, [r3, #12]
 800c082:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	3304      	adds	r3, #4
 800c088:	4618      	mov	r0, r3
 800c08a:	f7fd ff27 	bl	8009edc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c094:	f003 0304 	and.w	r3, r3, #4
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d022      	beq.n	800c0e2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	699a      	ldr	r2, [r3, #24]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	18d1      	adds	r1, r2, r3
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	683a      	ldr	r2, [r7, #0]
 800c0a8:	6978      	ldr	r0, [r7, #20]
 800c0aa:	f000 f8d1 	bl	800c250 <prvInsertTimerInActiveList>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d01f      	beq.n	800c0f4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	9300      	str	r3, [sp, #0]
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	687a      	ldr	r2, [r7, #4]
 800c0bc:	2100      	movs	r1, #0
 800c0be:	6978      	ldr	r0, [r7, #20]
 800c0c0:	f7ff ff88 	bl	800bfd4 <xTimerGenericCommand>
 800c0c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d113      	bne.n	800c0f4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d0:	f383 8811 	msr	BASEPRI, r3
 800c0d4:	f3bf 8f6f 	isb	sy
 800c0d8:	f3bf 8f4f 	dsb	sy
 800c0dc:	60fb      	str	r3, [r7, #12]
}
 800c0de:	bf00      	nop
 800c0e0:	e7fe      	b.n	800c0e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0e8:	f023 0301 	bic.w	r3, r3, #1
 800c0ec:	b2da      	uxtb	r2, r3
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	6a1b      	ldr	r3, [r3, #32]
 800c0f8:	6978      	ldr	r0, [r7, #20]
 800c0fa:	4798      	blx	r3
}
 800c0fc:	bf00      	nop
 800c0fe:	3718      	adds	r7, #24
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}
 800c104:	20000f70 	.word	0x20000f70

0800c108 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b084      	sub	sp, #16
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c110:	f107 0308 	add.w	r3, r7, #8
 800c114:	4618      	mov	r0, r3
 800c116:	f000 f857 	bl	800c1c8 <prvGetNextExpireTime>
 800c11a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	4619      	mov	r1, r3
 800c120:	68f8      	ldr	r0, [r7, #12]
 800c122:	f000 f803 	bl	800c12c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c126:	f000 f8d5 	bl	800c2d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c12a:	e7f1      	b.n	800c110 <prvTimerTask+0x8>

0800c12c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b084      	sub	sp, #16
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c136:	f7ff f945 	bl	800b3c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c13a:	f107 0308 	add.w	r3, r7, #8
 800c13e:	4618      	mov	r0, r3
 800c140:	f000 f866 	bl	800c210 <prvSampleTimeNow>
 800c144:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d130      	bne.n	800c1ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d10a      	bne.n	800c168 <prvProcessTimerOrBlockTask+0x3c>
 800c152:	687a      	ldr	r2, [r7, #4]
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	429a      	cmp	r2, r3
 800c158:	d806      	bhi.n	800c168 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c15a:	f7ff f941 	bl	800b3e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c15e:	68f9      	ldr	r1, [r7, #12]
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f7ff ff85 	bl	800c070 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c166:	e024      	b.n	800c1b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d008      	beq.n	800c180 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c16e:	4b13      	ldr	r3, [pc, #76]	; (800c1bc <prvProcessTimerOrBlockTask+0x90>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d101      	bne.n	800c17c <prvProcessTimerOrBlockTask+0x50>
 800c178:	2301      	movs	r3, #1
 800c17a:	e000      	b.n	800c17e <prvProcessTimerOrBlockTask+0x52>
 800c17c:	2300      	movs	r3, #0
 800c17e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c180:	4b0f      	ldr	r3, [pc, #60]	; (800c1c0 <prvProcessTimerOrBlockTask+0x94>)
 800c182:	6818      	ldr	r0, [r3, #0]
 800c184:	687a      	ldr	r2, [r7, #4]
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	1ad3      	subs	r3, r2, r3
 800c18a:	683a      	ldr	r2, [r7, #0]
 800c18c:	4619      	mov	r1, r3
 800c18e:	f7fe fea9 	bl	800aee4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c192:	f7ff f925 	bl	800b3e0 <xTaskResumeAll>
 800c196:	4603      	mov	r3, r0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d10a      	bne.n	800c1b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c19c:	4b09      	ldr	r3, [pc, #36]	; (800c1c4 <prvProcessTimerOrBlockTask+0x98>)
 800c19e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1a2:	601a      	str	r2, [r3, #0]
 800c1a4:	f3bf 8f4f 	dsb	sy
 800c1a8:	f3bf 8f6f 	isb	sy
}
 800c1ac:	e001      	b.n	800c1b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c1ae:	f7ff f917 	bl	800b3e0 <xTaskResumeAll>
}
 800c1b2:	bf00      	nop
 800c1b4:	3710      	adds	r7, #16
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	20000f74 	.word	0x20000f74
 800c1c0:	20000f78 	.word	0x20000f78
 800c1c4:	e000ed04 	.word	0xe000ed04

0800c1c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b085      	sub	sp, #20
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c1d0:	4b0e      	ldr	r3, [pc, #56]	; (800c20c <prvGetNextExpireTime+0x44>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d101      	bne.n	800c1de <prvGetNextExpireTime+0x16>
 800c1da:	2201      	movs	r2, #1
 800c1dc:	e000      	b.n	800c1e0 <prvGetNextExpireTime+0x18>
 800c1de:	2200      	movs	r2, #0
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d105      	bne.n	800c1f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c1ec:	4b07      	ldr	r3, [pc, #28]	; (800c20c <prvGetNextExpireTime+0x44>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	68db      	ldr	r3, [r3, #12]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	60fb      	str	r3, [r7, #12]
 800c1f6:	e001      	b.n	800c1fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3714      	adds	r7, #20
 800c202:	46bd      	mov	sp, r7
 800c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c208:	4770      	bx	lr
 800c20a:	bf00      	nop
 800c20c:	20000f70 	.word	0x20000f70

0800c210 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b084      	sub	sp, #16
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c218:	f7ff f980 	bl	800b51c <xTaskGetTickCount>
 800c21c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c21e:	4b0b      	ldr	r3, [pc, #44]	; (800c24c <prvSampleTimeNow+0x3c>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	68fa      	ldr	r2, [r7, #12]
 800c224:	429a      	cmp	r2, r3
 800c226:	d205      	bcs.n	800c234 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c228:	f000 f936 	bl	800c498 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2201      	movs	r2, #1
 800c230:	601a      	str	r2, [r3, #0]
 800c232:	e002      	b.n	800c23a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2200      	movs	r2, #0
 800c238:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c23a:	4a04      	ldr	r2, [pc, #16]	; (800c24c <prvSampleTimeNow+0x3c>)
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c240:	68fb      	ldr	r3, [r7, #12]
}
 800c242:	4618      	mov	r0, r3
 800c244:	3710      	adds	r7, #16
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
 800c24a:	bf00      	nop
 800c24c:	20000f80 	.word	0x20000f80

0800c250 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b086      	sub	sp, #24
 800c254:	af00      	add	r7, sp, #0
 800c256:	60f8      	str	r0, [r7, #12]
 800c258:	60b9      	str	r1, [r7, #8]
 800c25a:	607a      	str	r2, [r7, #4]
 800c25c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c25e:	2300      	movs	r3, #0
 800c260:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	68ba      	ldr	r2, [r7, #8]
 800c266:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	68fa      	ldr	r2, [r7, #12]
 800c26c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c26e:	68ba      	ldr	r2, [r7, #8]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	429a      	cmp	r2, r3
 800c274:	d812      	bhi.n	800c29c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	1ad2      	subs	r2, r2, r3
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	699b      	ldr	r3, [r3, #24]
 800c280:	429a      	cmp	r2, r3
 800c282:	d302      	bcc.n	800c28a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c284:	2301      	movs	r3, #1
 800c286:	617b      	str	r3, [r7, #20]
 800c288:	e01b      	b.n	800c2c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c28a:	4b10      	ldr	r3, [pc, #64]	; (800c2cc <prvInsertTimerInActiveList+0x7c>)
 800c28c:	681a      	ldr	r2, [r3, #0]
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	3304      	adds	r3, #4
 800c292:	4619      	mov	r1, r3
 800c294:	4610      	mov	r0, r2
 800c296:	f7fd fde8 	bl	8009e6a <vListInsert>
 800c29a:	e012      	b.n	800c2c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c29c:	687a      	ldr	r2, [r7, #4]
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d206      	bcs.n	800c2b2 <prvInsertTimerInActiveList+0x62>
 800c2a4:	68ba      	ldr	r2, [r7, #8]
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d302      	bcc.n	800c2b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	617b      	str	r3, [r7, #20]
 800c2b0:	e007      	b.n	800c2c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c2b2:	4b07      	ldr	r3, [pc, #28]	; (800c2d0 <prvInsertTimerInActiveList+0x80>)
 800c2b4:	681a      	ldr	r2, [r3, #0]
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	3304      	adds	r3, #4
 800c2ba:	4619      	mov	r1, r3
 800c2bc:	4610      	mov	r0, r2
 800c2be:	f7fd fdd4 	bl	8009e6a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c2c2:	697b      	ldr	r3, [r7, #20]
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3718      	adds	r7, #24
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}
 800c2cc:	20000f74 	.word	0x20000f74
 800c2d0:	20000f70 	.word	0x20000f70

0800c2d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b08e      	sub	sp, #56	; 0x38
 800c2d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c2da:	e0ca      	b.n	800c472 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	da18      	bge.n	800c314 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c2e2:	1d3b      	adds	r3, r7, #4
 800c2e4:	3304      	adds	r3, #4
 800c2e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d10a      	bne.n	800c304 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f2:	f383 8811 	msr	BASEPRI, r3
 800c2f6:	f3bf 8f6f 	isb	sy
 800c2fa:	f3bf 8f4f 	dsb	sy
 800c2fe:	61fb      	str	r3, [r7, #28]
}
 800c300:	bf00      	nop
 800c302:	e7fe      	b.n	800c302 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c30a:	6850      	ldr	r0, [r2, #4]
 800c30c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c30e:	6892      	ldr	r2, [r2, #8]
 800c310:	4611      	mov	r1, r2
 800c312:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2b00      	cmp	r3, #0
 800c318:	f2c0 80aa 	blt.w	800c470 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c322:	695b      	ldr	r3, [r3, #20]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d004      	beq.n	800c332 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c32a:	3304      	adds	r3, #4
 800c32c:	4618      	mov	r0, r3
 800c32e:	f7fd fdd5 	bl	8009edc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c332:	463b      	mov	r3, r7
 800c334:	4618      	mov	r0, r3
 800c336:	f7ff ff6b 	bl	800c210 <prvSampleTimeNow>
 800c33a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2b09      	cmp	r3, #9
 800c340:	f200 8097 	bhi.w	800c472 <prvProcessReceivedCommands+0x19e>
 800c344:	a201      	add	r2, pc, #4	; (adr r2, 800c34c <prvProcessReceivedCommands+0x78>)
 800c346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c34a:	bf00      	nop
 800c34c:	0800c375 	.word	0x0800c375
 800c350:	0800c375 	.word	0x0800c375
 800c354:	0800c375 	.word	0x0800c375
 800c358:	0800c3e9 	.word	0x0800c3e9
 800c35c:	0800c3fd 	.word	0x0800c3fd
 800c360:	0800c447 	.word	0x0800c447
 800c364:	0800c375 	.word	0x0800c375
 800c368:	0800c375 	.word	0x0800c375
 800c36c:	0800c3e9 	.word	0x0800c3e9
 800c370:	0800c3fd 	.word	0x0800c3fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c376:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c37a:	f043 0301 	orr.w	r3, r3, #1
 800c37e:	b2da      	uxtb	r2, r3
 800c380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c382:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c386:	68ba      	ldr	r2, [r7, #8]
 800c388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c38a:	699b      	ldr	r3, [r3, #24]
 800c38c:	18d1      	adds	r1, r2, r3
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c392:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c394:	f7ff ff5c 	bl	800c250 <prvInsertTimerInActiveList>
 800c398:	4603      	mov	r3, r0
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d069      	beq.n	800c472 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a0:	6a1b      	ldr	r3, [r3, #32]
 800c3a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3ac:	f003 0304 	and.w	r3, r3, #4
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d05e      	beq.n	800c472 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c3b4:	68ba      	ldr	r2, [r7, #8]
 800c3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b8:	699b      	ldr	r3, [r3, #24]
 800c3ba:	441a      	add	r2, r3
 800c3bc:	2300      	movs	r3, #0
 800c3be:	9300      	str	r3, [sp, #0]
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	2100      	movs	r1, #0
 800c3c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3c6:	f7ff fe05 	bl	800bfd4 <xTimerGenericCommand>
 800c3ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c3cc:	6a3b      	ldr	r3, [r7, #32]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d14f      	bne.n	800c472 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d6:	f383 8811 	msr	BASEPRI, r3
 800c3da:	f3bf 8f6f 	isb	sy
 800c3de:	f3bf 8f4f 	dsb	sy
 800c3e2:	61bb      	str	r3, [r7, #24]
}
 800c3e4:	bf00      	nop
 800c3e6:	e7fe      	b.n	800c3e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3ee:	f023 0301 	bic.w	r3, r3, #1
 800c3f2:	b2da      	uxtb	r2, r3
 800c3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c3fa:	e03a      	b.n	800c472 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c402:	f043 0301 	orr.w	r3, r3, #1
 800c406:	b2da      	uxtb	r2, r3
 800c408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c40a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c40e:	68ba      	ldr	r2, [r7, #8]
 800c410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c412:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c416:	699b      	ldr	r3, [r3, #24]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d10a      	bne.n	800c432 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c420:	f383 8811 	msr	BASEPRI, r3
 800c424:	f3bf 8f6f 	isb	sy
 800c428:	f3bf 8f4f 	dsb	sy
 800c42c:	617b      	str	r3, [r7, #20]
}
 800c42e:	bf00      	nop
 800c430:	e7fe      	b.n	800c430 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c434:	699a      	ldr	r2, [r3, #24]
 800c436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c438:	18d1      	adds	r1, r2, r3
 800c43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c43c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c43e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c440:	f7ff ff06 	bl	800c250 <prvInsertTimerInActiveList>
					break;
 800c444:	e015      	b.n	800c472 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c448:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c44c:	f003 0302 	and.w	r3, r3, #2
 800c450:	2b00      	cmp	r3, #0
 800c452:	d103      	bne.n	800c45c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c456:	f000 fbdb 	bl	800cc10 <vPortFree>
 800c45a:	e00a      	b.n	800c472 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c45e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c462:	f023 0301 	bic.w	r3, r3, #1
 800c466:	b2da      	uxtb	r2, r3
 800c468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c46a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c46e:	e000      	b.n	800c472 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c470:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c472:	4b08      	ldr	r3, [pc, #32]	; (800c494 <prvProcessReceivedCommands+0x1c0>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	1d39      	adds	r1, r7, #4
 800c478:	2200      	movs	r2, #0
 800c47a:	4618      	mov	r0, r3
 800c47c:	f7fe f926 	bl	800a6cc <xQueueReceive>
 800c480:	4603      	mov	r3, r0
 800c482:	2b00      	cmp	r3, #0
 800c484:	f47f af2a 	bne.w	800c2dc <prvProcessReceivedCommands+0x8>
	}
}
 800c488:	bf00      	nop
 800c48a:	bf00      	nop
 800c48c:	3730      	adds	r7, #48	; 0x30
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
 800c492:	bf00      	nop
 800c494:	20000f78 	.word	0x20000f78

0800c498 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b088      	sub	sp, #32
 800c49c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c49e:	e048      	b.n	800c532 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c4a0:	4b2d      	ldr	r3, [pc, #180]	; (800c558 <prvSwitchTimerLists+0xc0>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	68db      	ldr	r3, [r3, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4aa:	4b2b      	ldr	r3, [pc, #172]	; (800c558 <prvSwitchTimerLists+0xc0>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	68db      	ldr	r3, [r3, #12]
 800c4b0:	68db      	ldr	r3, [r3, #12]
 800c4b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	3304      	adds	r3, #4
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f7fd fd0f 	bl	8009edc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	6a1b      	ldr	r3, [r3, #32]
 800c4c2:	68f8      	ldr	r0, [r7, #12]
 800c4c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4cc:	f003 0304 	and.w	r3, r3, #4
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d02e      	beq.n	800c532 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	699b      	ldr	r3, [r3, #24]
 800c4d8:	693a      	ldr	r2, [r7, #16]
 800c4da:	4413      	add	r3, r2
 800c4dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c4de:	68ba      	ldr	r2, [r7, #8]
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	429a      	cmp	r2, r3
 800c4e4:	d90e      	bls.n	800c504 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	68ba      	ldr	r2, [r7, #8]
 800c4ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	68fa      	ldr	r2, [r7, #12]
 800c4f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c4f2:	4b19      	ldr	r3, [pc, #100]	; (800c558 <prvSwitchTimerLists+0xc0>)
 800c4f4:	681a      	ldr	r2, [r3, #0]
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	3304      	adds	r3, #4
 800c4fa:	4619      	mov	r1, r3
 800c4fc:	4610      	mov	r0, r2
 800c4fe:	f7fd fcb4 	bl	8009e6a <vListInsert>
 800c502:	e016      	b.n	800c532 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c504:	2300      	movs	r3, #0
 800c506:	9300      	str	r3, [sp, #0]
 800c508:	2300      	movs	r3, #0
 800c50a:	693a      	ldr	r2, [r7, #16]
 800c50c:	2100      	movs	r1, #0
 800c50e:	68f8      	ldr	r0, [r7, #12]
 800c510:	f7ff fd60 	bl	800bfd4 <xTimerGenericCommand>
 800c514:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d10a      	bne.n	800c532 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c520:	f383 8811 	msr	BASEPRI, r3
 800c524:	f3bf 8f6f 	isb	sy
 800c528:	f3bf 8f4f 	dsb	sy
 800c52c:	603b      	str	r3, [r7, #0]
}
 800c52e:	bf00      	nop
 800c530:	e7fe      	b.n	800c530 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c532:	4b09      	ldr	r3, [pc, #36]	; (800c558 <prvSwitchTimerLists+0xc0>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d1b1      	bne.n	800c4a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c53c:	4b06      	ldr	r3, [pc, #24]	; (800c558 <prvSwitchTimerLists+0xc0>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c542:	4b06      	ldr	r3, [pc, #24]	; (800c55c <prvSwitchTimerLists+0xc4>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	4a04      	ldr	r2, [pc, #16]	; (800c558 <prvSwitchTimerLists+0xc0>)
 800c548:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c54a:	4a04      	ldr	r2, [pc, #16]	; (800c55c <prvSwitchTimerLists+0xc4>)
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	6013      	str	r3, [r2, #0]
}
 800c550:	bf00      	nop
 800c552:	3718      	adds	r7, #24
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}
 800c558:	20000f70 	.word	0x20000f70
 800c55c:	20000f74 	.word	0x20000f74

0800c560 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c566:	f000 f965 	bl	800c834 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c56a:	4b15      	ldr	r3, [pc, #84]	; (800c5c0 <prvCheckForValidListAndQueue+0x60>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d120      	bne.n	800c5b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c572:	4814      	ldr	r0, [pc, #80]	; (800c5c4 <prvCheckForValidListAndQueue+0x64>)
 800c574:	f7fd fc28 	bl	8009dc8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c578:	4813      	ldr	r0, [pc, #76]	; (800c5c8 <prvCheckForValidListAndQueue+0x68>)
 800c57a:	f7fd fc25 	bl	8009dc8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c57e:	4b13      	ldr	r3, [pc, #76]	; (800c5cc <prvCheckForValidListAndQueue+0x6c>)
 800c580:	4a10      	ldr	r2, [pc, #64]	; (800c5c4 <prvCheckForValidListAndQueue+0x64>)
 800c582:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c584:	4b12      	ldr	r3, [pc, #72]	; (800c5d0 <prvCheckForValidListAndQueue+0x70>)
 800c586:	4a10      	ldr	r2, [pc, #64]	; (800c5c8 <prvCheckForValidListAndQueue+0x68>)
 800c588:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c58a:	2300      	movs	r3, #0
 800c58c:	9300      	str	r3, [sp, #0]
 800c58e:	4b11      	ldr	r3, [pc, #68]	; (800c5d4 <prvCheckForValidListAndQueue+0x74>)
 800c590:	4a11      	ldr	r2, [pc, #68]	; (800c5d8 <prvCheckForValidListAndQueue+0x78>)
 800c592:	2110      	movs	r1, #16
 800c594:	200a      	movs	r0, #10
 800c596:	f7fd fd33 	bl	800a000 <xQueueGenericCreateStatic>
 800c59a:	4603      	mov	r3, r0
 800c59c:	4a08      	ldr	r2, [pc, #32]	; (800c5c0 <prvCheckForValidListAndQueue+0x60>)
 800c59e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c5a0:	4b07      	ldr	r3, [pc, #28]	; (800c5c0 <prvCheckForValidListAndQueue+0x60>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d005      	beq.n	800c5b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c5a8:	4b05      	ldr	r3, [pc, #20]	; (800c5c0 <prvCheckForValidListAndQueue+0x60>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	490b      	ldr	r1, [pc, #44]	; (800c5dc <prvCheckForValidListAndQueue+0x7c>)
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7fe fc44 	bl	800ae3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c5b4:	f000 f96e 	bl	800c894 <vPortExitCritical>
}
 800c5b8:	bf00      	nop
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	20000f78 	.word	0x20000f78
 800c5c4:	20000f48 	.word	0x20000f48
 800c5c8:	20000f5c 	.word	0x20000f5c
 800c5cc:	20000f70 	.word	0x20000f70
 800c5d0:	20000f74 	.word	0x20000f74
 800c5d4:	20001024 	.word	0x20001024
 800c5d8:	20000f84 	.word	0x20000f84
 800c5dc:	0801222c 	.word	0x0801222c

0800c5e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b085      	sub	sp, #20
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	60f8      	str	r0, [r7, #12]
 800c5e8:	60b9      	str	r1, [r7, #8]
 800c5ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	3b04      	subs	r3, #4
 800c5f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c5f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	3b04      	subs	r3, #4
 800c5fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	f023 0201 	bic.w	r2, r3, #1
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	3b04      	subs	r3, #4
 800c60e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c610:	4a0c      	ldr	r2, [pc, #48]	; (800c644 <pxPortInitialiseStack+0x64>)
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	3b14      	subs	r3, #20
 800c61a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c61c:	687a      	ldr	r2, [r7, #4]
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	3b04      	subs	r3, #4
 800c626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	f06f 0202 	mvn.w	r2, #2
 800c62e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	3b20      	subs	r3, #32
 800c634:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c636:	68fb      	ldr	r3, [r7, #12]
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3714      	adds	r7, #20
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr
 800c644:	0800c649 	.word	0x0800c649

0800c648 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c648:	b480      	push	{r7}
 800c64a:	b085      	sub	sp, #20
 800c64c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c64e:	2300      	movs	r3, #0
 800c650:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c652:	4b12      	ldr	r3, [pc, #72]	; (800c69c <prvTaskExitError+0x54>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c65a:	d00a      	beq.n	800c672 <prvTaskExitError+0x2a>
	__asm volatile
 800c65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c660:	f383 8811 	msr	BASEPRI, r3
 800c664:	f3bf 8f6f 	isb	sy
 800c668:	f3bf 8f4f 	dsb	sy
 800c66c:	60fb      	str	r3, [r7, #12]
}
 800c66e:	bf00      	nop
 800c670:	e7fe      	b.n	800c670 <prvTaskExitError+0x28>
	__asm volatile
 800c672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c676:	f383 8811 	msr	BASEPRI, r3
 800c67a:	f3bf 8f6f 	isb	sy
 800c67e:	f3bf 8f4f 	dsb	sy
 800c682:	60bb      	str	r3, [r7, #8]
}
 800c684:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c686:	bf00      	nop
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d0fc      	beq.n	800c688 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c68e:	bf00      	nop
 800c690:	bf00      	nop
 800c692:	3714      	adds	r7, #20
 800c694:	46bd      	mov	sp, r7
 800c696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69a:	4770      	bx	lr
 800c69c:	20000034 	.word	0x20000034

0800c6a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c6a0:	4b07      	ldr	r3, [pc, #28]	; (800c6c0 <pxCurrentTCBConst2>)
 800c6a2:	6819      	ldr	r1, [r3, #0]
 800c6a4:	6808      	ldr	r0, [r1, #0]
 800c6a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6aa:	f380 8809 	msr	PSP, r0
 800c6ae:	f3bf 8f6f 	isb	sy
 800c6b2:	f04f 0000 	mov.w	r0, #0
 800c6b6:	f380 8811 	msr	BASEPRI, r0
 800c6ba:	4770      	bx	lr
 800c6bc:	f3af 8000 	nop.w

0800c6c0 <pxCurrentTCBConst2>:
 800c6c0:	20000a48 	.word	0x20000a48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c6c4:	bf00      	nop
 800c6c6:	bf00      	nop

0800c6c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c6c8:	4808      	ldr	r0, [pc, #32]	; (800c6ec <prvPortStartFirstTask+0x24>)
 800c6ca:	6800      	ldr	r0, [r0, #0]
 800c6cc:	6800      	ldr	r0, [r0, #0]
 800c6ce:	f380 8808 	msr	MSP, r0
 800c6d2:	f04f 0000 	mov.w	r0, #0
 800c6d6:	f380 8814 	msr	CONTROL, r0
 800c6da:	b662      	cpsie	i
 800c6dc:	b661      	cpsie	f
 800c6de:	f3bf 8f4f 	dsb	sy
 800c6e2:	f3bf 8f6f 	isb	sy
 800c6e6:	df00      	svc	0
 800c6e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c6ea:	bf00      	nop
 800c6ec:	e000ed08 	.word	0xe000ed08

0800c6f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b086      	sub	sp, #24
 800c6f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c6f6:	4b46      	ldr	r3, [pc, #280]	; (800c810 <xPortStartScheduler+0x120>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	4a46      	ldr	r2, [pc, #280]	; (800c814 <xPortStartScheduler+0x124>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d10a      	bne.n	800c716 <xPortStartScheduler+0x26>
	__asm volatile
 800c700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c704:	f383 8811 	msr	BASEPRI, r3
 800c708:	f3bf 8f6f 	isb	sy
 800c70c:	f3bf 8f4f 	dsb	sy
 800c710:	613b      	str	r3, [r7, #16]
}
 800c712:	bf00      	nop
 800c714:	e7fe      	b.n	800c714 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c716:	4b3e      	ldr	r3, [pc, #248]	; (800c810 <xPortStartScheduler+0x120>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4a3f      	ldr	r2, [pc, #252]	; (800c818 <xPortStartScheduler+0x128>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d10a      	bne.n	800c736 <xPortStartScheduler+0x46>
	__asm volatile
 800c720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c724:	f383 8811 	msr	BASEPRI, r3
 800c728:	f3bf 8f6f 	isb	sy
 800c72c:	f3bf 8f4f 	dsb	sy
 800c730:	60fb      	str	r3, [r7, #12]
}
 800c732:	bf00      	nop
 800c734:	e7fe      	b.n	800c734 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c736:	4b39      	ldr	r3, [pc, #228]	; (800c81c <xPortStartScheduler+0x12c>)
 800c738:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	b2db      	uxtb	r3, r3
 800c740:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	22ff      	movs	r2, #255	; 0xff
 800c746:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	b2db      	uxtb	r3, r3
 800c74e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c750:	78fb      	ldrb	r3, [r7, #3]
 800c752:	b2db      	uxtb	r3, r3
 800c754:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c758:	b2da      	uxtb	r2, r3
 800c75a:	4b31      	ldr	r3, [pc, #196]	; (800c820 <xPortStartScheduler+0x130>)
 800c75c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c75e:	4b31      	ldr	r3, [pc, #196]	; (800c824 <xPortStartScheduler+0x134>)
 800c760:	2207      	movs	r2, #7
 800c762:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c764:	e009      	b.n	800c77a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c766:	4b2f      	ldr	r3, [pc, #188]	; (800c824 <xPortStartScheduler+0x134>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	3b01      	subs	r3, #1
 800c76c:	4a2d      	ldr	r2, [pc, #180]	; (800c824 <xPortStartScheduler+0x134>)
 800c76e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c770:	78fb      	ldrb	r3, [r7, #3]
 800c772:	b2db      	uxtb	r3, r3
 800c774:	005b      	lsls	r3, r3, #1
 800c776:	b2db      	uxtb	r3, r3
 800c778:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c77a:	78fb      	ldrb	r3, [r7, #3]
 800c77c:	b2db      	uxtb	r3, r3
 800c77e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c782:	2b80      	cmp	r3, #128	; 0x80
 800c784:	d0ef      	beq.n	800c766 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c786:	4b27      	ldr	r3, [pc, #156]	; (800c824 <xPortStartScheduler+0x134>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f1c3 0307 	rsb	r3, r3, #7
 800c78e:	2b04      	cmp	r3, #4
 800c790:	d00a      	beq.n	800c7a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c796:	f383 8811 	msr	BASEPRI, r3
 800c79a:	f3bf 8f6f 	isb	sy
 800c79e:	f3bf 8f4f 	dsb	sy
 800c7a2:	60bb      	str	r3, [r7, #8]
}
 800c7a4:	bf00      	nop
 800c7a6:	e7fe      	b.n	800c7a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c7a8:	4b1e      	ldr	r3, [pc, #120]	; (800c824 <xPortStartScheduler+0x134>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	021b      	lsls	r3, r3, #8
 800c7ae:	4a1d      	ldr	r2, [pc, #116]	; (800c824 <xPortStartScheduler+0x134>)
 800c7b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c7b2:	4b1c      	ldr	r3, [pc, #112]	; (800c824 <xPortStartScheduler+0x134>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c7ba:	4a1a      	ldr	r2, [pc, #104]	; (800c824 <xPortStartScheduler+0x134>)
 800c7bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	b2da      	uxtb	r2, r3
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c7c6:	4b18      	ldr	r3, [pc, #96]	; (800c828 <xPortStartScheduler+0x138>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	4a17      	ldr	r2, [pc, #92]	; (800c828 <xPortStartScheduler+0x138>)
 800c7cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c7d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c7d2:	4b15      	ldr	r3, [pc, #84]	; (800c828 <xPortStartScheduler+0x138>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	4a14      	ldr	r2, [pc, #80]	; (800c828 <xPortStartScheduler+0x138>)
 800c7d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c7dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c7de:	f000 f8dd 	bl	800c99c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c7e2:	4b12      	ldr	r3, [pc, #72]	; (800c82c <xPortStartScheduler+0x13c>)
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c7e8:	f000 f8fc 	bl	800c9e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c7ec:	4b10      	ldr	r3, [pc, #64]	; (800c830 <xPortStartScheduler+0x140>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a0f      	ldr	r2, [pc, #60]	; (800c830 <xPortStartScheduler+0x140>)
 800c7f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c7f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c7f8:	f7ff ff66 	bl	800c6c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c7fc:	f7fe ff58 	bl	800b6b0 <vTaskSwitchContext>
	prvTaskExitError();
 800c800:	f7ff ff22 	bl	800c648 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c804:	2300      	movs	r3, #0
}
 800c806:	4618      	mov	r0, r3
 800c808:	3718      	adds	r7, #24
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop
 800c810:	e000ed00 	.word	0xe000ed00
 800c814:	410fc271 	.word	0x410fc271
 800c818:	410fc270 	.word	0x410fc270
 800c81c:	e000e400 	.word	0xe000e400
 800c820:	20001074 	.word	0x20001074
 800c824:	20001078 	.word	0x20001078
 800c828:	e000ed20 	.word	0xe000ed20
 800c82c:	20000034 	.word	0x20000034
 800c830:	e000ef34 	.word	0xe000ef34

0800c834 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c834:	b480      	push	{r7}
 800c836:	b083      	sub	sp, #12
 800c838:	af00      	add	r7, sp, #0
	__asm volatile
 800c83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c83e:	f383 8811 	msr	BASEPRI, r3
 800c842:	f3bf 8f6f 	isb	sy
 800c846:	f3bf 8f4f 	dsb	sy
 800c84a:	607b      	str	r3, [r7, #4]
}
 800c84c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c84e:	4b0f      	ldr	r3, [pc, #60]	; (800c88c <vPortEnterCritical+0x58>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	3301      	adds	r3, #1
 800c854:	4a0d      	ldr	r2, [pc, #52]	; (800c88c <vPortEnterCritical+0x58>)
 800c856:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c858:	4b0c      	ldr	r3, [pc, #48]	; (800c88c <vPortEnterCritical+0x58>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	2b01      	cmp	r3, #1
 800c85e:	d10f      	bne.n	800c880 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c860:	4b0b      	ldr	r3, [pc, #44]	; (800c890 <vPortEnterCritical+0x5c>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	b2db      	uxtb	r3, r3
 800c866:	2b00      	cmp	r3, #0
 800c868:	d00a      	beq.n	800c880 <vPortEnterCritical+0x4c>
	__asm volatile
 800c86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c86e:	f383 8811 	msr	BASEPRI, r3
 800c872:	f3bf 8f6f 	isb	sy
 800c876:	f3bf 8f4f 	dsb	sy
 800c87a:	603b      	str	r3, [r7, #0]
}
 800c87c:	bf00      	nop
 800c87e:	e7fe      	b.n	800c87e <vPortEnterCritical+0x4a>
	}
}
 800c880:	bf00      	nop
 800c882:	370c      	adds	r7, #12
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr
 800c88c:	20000034 	.word	0x20000034
 800c890:	e000ed04 	.word	0xe000ed04

0800c894 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c894:	b480      	push	{r7}
 800c896:	b083      	sub	sp, #12
 800c898:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c89a:	4b12      	ldr	r3, [pc, #72]	; (800c8e4 <vPortExitCritical+0x50>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d10a      	bne.n	800c8b8 <vPortExitCritical+0x24>
	__asm volatile
 800c8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a6:	f383 8811 	msr	BASEPRI, r3
 800c8aa:	f3bf 8f6f 	isb	sy
 800c8ae:	f3bf 8f4f 	dsb	sy
 800c8b2:	607b      	str	r3, [r7, #4]
}
 800c8b4:	bf00      	nop
 800c8b6:	e7fe      	b.n	800c8b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c8b8:	4b0a      	ldr	r3, [pc, #40]	; (800c8e4 <vPortExitCritical+0x50>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	3b01      	subs	r3, #1
 800c8be:	4a09      	ldr	r2, [pc, #36]	; (800c8e4 <vPortExitCritical+0x50>)
 800c8c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c8c2:	4b08      	ldr	r3, [pc, #32]	; (800c8e4 <vPortExitCritical+0x50>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d105      	bne.n	800c8d6 <vPortExitCritical+0x42>
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	f383 8811 	msr	BASEPRI, r3
}
 800c8d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c8d6:	bf00      	nop
 800c8d8:	370c      	adds	r7, #12
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e0:	4770      	bx	lr
 800c8e2:	bf00      	nop
 800c8e4:	20000034 	.word	0x20000034
	...

0800c8f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c8f0:	f3ef 8009 	mrs	r0, PSP
 800c8f4:	f3bf 8f6f 	isb	sy
 800c8f8:	4b15      	ldr	r3, [pc, #84]	; (800c950 <pxCurrentTCBConst>)
 800c8fa:	681a      	ldr	r2, [r3, #0]
 800c8fc:	f01e 0f10 	tst.w	lr, #16
 800c900:	bf08      	it	eq
 800c902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c90a:	6010      	str	r0, [r2, #0]
 800c90c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c910:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c914:	f380 8811 	msr	BASEPRI, r0
 800c918:	f3bf 8f4f 	dsb	sy
 800c91c:	f3bf 8f6f 	isb	sy
 800c920:	f7fe fec6 	bl	800b6b0 <vTaskSwitchContext>
 800c924:	f04f 0000 	mov.w	r0, #0
 800c928:	f380 8811 	msr	BASEPRI, r0
 800c92c:	bc09      	pop	{r0, r3}
 800c92e:	6819      	ldr	r1, [r3, #0]
 800c930:	6808      	ldr	r0, [r1, #0]
 800c932:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c936:	f01e 0f10 	tst.w	lr, #16
 800c93a:	bf08      	it	eq
 800c93c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c940:	f380 8809 	msr	PSP, r0
 800c944:	f3bf 8f6f 	isb	sy
 800c948:	4770      	bx	lr
 800c94a:	bf00      	nop
 800c94c:	f3af 8000 	nop.w

0800c950 <pxCurrentTCBConst>:
 800c950:	20000a48 	.word	0x20000a48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c954:	bf00      	nop
 800c956:	bf00      	nop

0800c958 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b082      	sub	sp, #8
 800c95c:	af00      	add	r7, sp, #0
	__asm volatile
 800c95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c962:	f383 8811 	msr	BASEPRI, r3
 800c966:	f3bf 8f6f 	isb	sy
 800c96a:	f3bf 8f4f 	dsb	sy
 800c96e:	607b      	str	r3, [r7, #4]
}
 800c970:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c972:	f7fe fde3 	bl	800b53c <xTaskIncrementTick>
 800c976:	4603      	mov	r3, r0
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d003      	beq.n	800c984 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c97c:	4b06      	ldr	r3, [pc, #24]	; (800c998 <xPortSysTickHandler+0x40>)
 800c97e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c982:	601a      	str	r2, [r3, #0]
 800c984:	2300      	movs	r3, #0
 800c986:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	f383 8811 	msr	BASEPRI, r3
}
 800c98e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c990:	bf00      	nop
 800c992:	3708      	adds	r7, #8
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}
 800c998:	e000ed04 	.word	0xe000ed04

0800c99c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c99c:	b480      	push	{r7}
 800c99e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c9a0:	4b0b      	ldr	r3, [pc, #44]	; (800c9d0 <vPortSetupTimerInterrupt+0x34>)
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c9a6:	4b0b      	ldr	r3, [pc, #44]	; (800c9d4 <vPortSetupTimerInterrupt+0x38>)
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c9ac:	4b0a      	ldr	r3, [pc, #40]	; (800c9d8 <vPortSetupTimerInterrupt+0x3c>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4a0a      	ldr	r2, [pc, #40]	; (800c9dc <vPortSetupTimerInterrupt+0x40>)
 800c9b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c9b6:	099b      	lsrs	r3, r3, #6
 800c9b8:	4a09      	ldr	r2, [pc, #36]	; (800c9e0 <vPortSetupTimerInterrupt+0x44>)
 800c9ba:	3b01      	subs	r3, #1
 800c9bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c9be:	4b04      	ldr	r3, [pc, #16]	; (800c9d0 <vPortSetupTimerInterrupt+0x34>)
 800c9c0:	2207      	movs	r2, #7
 800c9c2:	601a      	str	r2, [r3, #0]
}
 800c9c4:	bf00      	nop
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9cc:	4770      	bx	lr
 800c9ce:	bf00      	nop
 800c9d0:	e000e010 	.word	0xe000e010
 800c9d4:	e000e018 	.word	0xe000e018
 800c9d8:	20000010 	.word	0x20000010
 800c9dc:	10624dd3 	.word	0x10624dd3
 800c9e0:	e000e014 	.word	0xe000e014

0800c9e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c9e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c9f4 <vPortEnableVFP+0x10>
 800c9e8:	6801      	ldr	r1, [r0, #0]
 800c9ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c9ee:	6001      	str	r1, [r0, #0]
 800c9f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c9f2:	bf00      	nop
 800c9f4:	e000ed88 	.word	0xe000ed88

0800c9f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b085      	sub	sp, #20
 800c9fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c9fe:	f3ef 8305 	mrs	r3, IPSR
 800ca02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	2b0f      	cmp	r3, #15
 800ca08:	d914      	bls.n	800ca34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ca0a:	4a17      	ldr	r2, [pc, #92]	; (800ca68 <vPortValidateInterruptPriority+0x70>)
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	4413      	add	r3, r2
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ca14:	4b15      	ldr	r3, [pc, #84]	; (800ca6c <vPortValidateInterruptPriority+0x74>)
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	7afa      	ldrb	r2, [r7, #11]
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	d20a      	bcs.n	800ca34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ca1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca22:	f383 8811 	msr	BASEPRI, r3
 800ca26:	f3bf 8f6f 	isb	sy
 800ca2a:	f3bf 8f4f 	dsb	sy
 800ca2e:	607b      	str	r3, [r7, #4]
}
 800ca30:	bf00      	nop
 800ca32:	e7fe      	b.n	800ca32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ca34:	4b0e      	ldr	r3, [pc, #56]	; (800ca70 <vPortValidateInterruptPriority+0x78>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ca3c:	4b0d      	ldr	r3, [pc, #52]	; (800ca74 <vPortValidateInterruptPriority+0x7c>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d90a      	bls.n	800ca5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ca44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca48:	f383 8811 	msr	BASEPRI, r3
 800ca4c:	f3bf 8f6f 	isb	sy
 800ca50:	f3bf 8f4f 	dsb	sy
 800ca54:	603b      	str	r3, [r7, #0]
}
 800ca56:	bf00      	nop
 800ca58:	e7fe      	b.n	800ca58 <vPortValidateInterruptPriority+0x60>
	}
 800ca5a:	bf00      	nop
 800ca5c:	3714      	adds	r7, #20
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca64:	4770      	bx	lr
 800ca66:	bf00      	nop
 800ca68:	e000e3f0 	.word	0xe000e3f0
 800ca6c:	20001074 	.word	0x20001074
 800ca70:	e000ed0c 	.word	0xe000ed0c
 800ca74:	20001078 	.word	0x20001078

0800ca78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b08a      	sub	sp, #40	; 0x28
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ca80:	2300      	movs	r3, #0
 800ca82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ca84:	f7fe fc9e 	bl	800b3c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ca88:	4b5b      	ldr	r3, [pc, #364]	; (800cbf8 <pvPortMalloc+0x180>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d101      	bne.n	800ca94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ca90:	f000 f920 	bl	800ccd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ca94:	4b59      	ldr	r3, [pc, #356]	; (800cbfc <pvPortMalloc+0x184>)
 800ca96:	681a      	ldr	r2, [r3, #0]
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	4013      	ands	r3, r2
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	f040 8093 	bne.w	800cbc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d01d      	beq.n	800cae4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800caa8:	2208      	movs	r2, #8
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	4413      	add	r3, r2
 800caae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f003 0307 	and.w	r3, r3, #7
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d014      	beq.n	800cae4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f023 0307 	bic.w	r3, r3, #7
 800cac0:	3308      	adds	r3, #8
 800cac2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f003 0307 	and.w	r3, r3, #7
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d00a      	beq.n	800cae4 <pvPortMalloc+0x6c>
	__asm volatile
 800cace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad2:	f383 8811 	msr	BASEPRI, r3
 800cad6:	f3bf 8f6f 	isb	sy
 800cada:	f3bf 8f4f 	dsb	sy
 800cade:	617b      	str	r3, [r7, #20]
}
 800cae0:	bf00      	nop
 800cae2:	e7fe      	b.n	800cae2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d06e      	beq.n	800cbc8 <pvPortMalloc+0x150>
 800caea:	4b45      	ldr	r3, [pc, #276]	; (800cc00 <pvPortMalloc+0x188>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	687a      	ldr	r2, [r7, #4]
 800caf0:	429a      	cmp	r2, r3
 800caf2:	d869      	bhi.n	800cbc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800caf4:	4b43      	ldr	r3, [pc, #268]	; (800cc04 <pvPortMalloc+0x18c>)
 800caf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800caf8:	4b42      	ldr	r3, [pc, #264]	; (800cc04 <pvPortMalloc+0x18c>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cafe:	e004      	b.n	800cb0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	687a      	ldr	r2, [r7, #4]
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d903      	bls.n	800cb1c <pvPortMalloc+0xa4>
 800cb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d1f1      	bne.n	800cb00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cb1c:	4b36      	ldr	r3, [pc, #216]	; (800cbf8 <pvPortMalloc+0x180>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d050      	beq.n	800cbc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cb26:	6a3b      	ldr	r3, [r7, #32]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	2208      	movs	r2, #8
 800cb2c:	4413      	add	r3, r2
 800cb2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb32:	681a      	ldr	r2, [r3, #0]
 800cb34:	6a3b      	ldr	r3, [r7, #32]
 800cb36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3a:	685a      	ldr	r2, [r3, #4]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	1ad2      	subs	r2, r2, r3
 800cb40:	2308      	movs	r3, #8
 800cb42:	005b      	lsls	r3, r3, #1
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d91f      	bls.n	800cb88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cb48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	4413      	add	r3, r2
 800cb4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb50:	69bb      	ldr	r3, [r7, #24]
 800cb52:	f003 0307 	and.w	r3, r3, #7
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d00a      	beq.n	800cb70 <pvPortMalloc+0xf8>
	__asm volatile
 800cb5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb5e:	f383 8811 	msr	BASEPRI, r3
 800cb62:	f3bf 8f6f 	isb	sy
 800cb66:	f3bf 8f4f 	dsb	sy
 800cb6a:	613b      	str	r3, [r7, #16]
}
 800cb6c:	bf00      	nop
 800cb6e:	e7fe      	b.n	800cb6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb72:	685a      	ldr	r2, [r3, #4]
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	1ad2      	subs	r2, r2, r3
 800cb78:	69bb      	ldr	r3, [r7, #24]
 800cb7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7e:	687a      	ldr	r2, [r7, #4]
 800cb80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cb82:	69b8      	ldr	r0, [r7, #24]
 800cb84:	f000 f908 	bl	800cd98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cb88:	4b1d      	ldr	r3, [pc, #116]	; (800cc00 <pvPortMalloc+0x188>)
 800cb8a:	681a      	ldr	r2, [r3, #0]
 800cb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	1ad3      	subs	r3, r2, r3
 800cb92:	4a1b      	ldr	r2, [pc, #108]	; (800cc00 <pvPortMalloc+0x188>)
 800cb94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cb96:	4b1a      	ldr	r3, [pc, #104]	; (800cc00 <pvPortMalloc+0x188>)
 800cb98:	681a      	ldr	r2, [r3, #0]
 800cb9a:	4b1b      	ldr	r3, [pc, #108]	; (800cc08 <pvPortMalloc+0x190>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	d203      	bcs.n	800cbaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cba2:	4b17      	ldr	r3, [pc, #92]	; (800cc00 <pvPortMalloc+0x188>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	4a18      	ldr	r2, [pc, #96]	; (800cc08 <pvPortMalloc+0x190>)
 800cba8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cbaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbac:	685a      	ldr	r2, [r3, #4]
 800cbae:	4b13      	ldr	r3, [pc, #76]	; (800cbfc <pvPortMalloc+0x184>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	431a      	orrs	r2, r3
 800cbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbba:	2200      	movs	r2, #0
 800cbbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cbbe:	4b13      	ldr	r3, [pc, #76]	; (800cc0c <pvPortMalloc+0x194>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	3301      	adds	r3, #1
 800cbc4:	4a11      	ldr	r2, [pc, #68]	; (800cc0c <pvPortMalloc+0x194>)
 800cbc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cbc8:	f7fe fc0a 	bl	800b3e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cbcc:	69fb      	ldr	r3, [r7, #28]
 800cbce:	f003 0307 	and.w	r3, r3, #7
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d00a      	beq.n	800cbec <pvPortMalloc+0x174>
	__asm volatile
 800cbd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbda:	f383 8811 	msr	BASEPRI, r3
 800cbde:	f3bf 8f6f 	isb	sy
 800cbe2:	f3bf 8f4f 	dsb	sy
 800cbe6:	60fb      	str	r3, [r7, #12]
}
 800cbe8:	bf00      	nop
 800cbea:	e7fe      	b.n	800cbea <pvPortMalloc+0x172>
	return pvReturn;
 800cbec:	69fb      	ldr	r3, [r7, #28]
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3728      	adds	r7, #40	; 0x28
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	bf00      	nop
 800cbf8:	20004c84 	.word	0x20004c84
 800cbfc:	20004c98 	.word	0x20004c98
 800cc00:	20004c88 	.word	0x20004c88
 800cc04:	20004c7c 	.word	0x20004c7c
 800cc08:	20004c8c 	.word	0x20004c8c
 800cc0c:	20004c90 	.word	0x20004c90

0800cc10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b086      	sub	sp, #24
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d04d      	beq.n	800ccbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cc22:	2308      	movs	r3, #8
 800cc24:	425b      	negs	r3, r3
 800cc26:	697a      	ldr	r2, [r7, #20]
 800cc28:	4413      	add	r3, r2
 800cc2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cc2c:	697b      	ldr	r3, [r7, #20]
 800cc2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	685a      	ldr	r2, [r3, #4]
 800cc34:	4b24      	ldr	r3, [pc, #144]	; (800ccc8 <vPortFree+0xb8>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	4013      	ands	r3, r2
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d10a      	bne.n	800cc54 <vPortFree+0x44>
	__asm volatile
 800cc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc42:	f383 8811 	msr	BASEPRI, r3
 800cc46:	f3bf 8f6f 	isb	sy
 800cc4a:	f3bf 8f4f 	dsb	sy
 800cc4e:	60fb      	str	r3, [r7, #12]
}
 800cc50:	bf00      	nop
 800cc52:	e7fe      	b.n	800cc52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d00a      	beq.n	800cc72 <vPortFree+0x62>
	__asm volatile
 800cc5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc60:	f383 8811 	msr	BASEPRI, r3
 800cc64:	f3bf 8f6f 	isb	sy
 800cc68:	f3bf 8f4f 	dsb	sy
 800cc6c:	60bb      	str	r3, [r7, #8]
}
 800cc6e:	bf00      	nop
 800cc70:	e7fe      	b.n	800cc70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	685a      	ldr	r2, [r3, #4]
 800cc76:	4b14      	ldr	r3, [pc, #80]	; (800ccc8 <vPortFree+0xb8>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	4013      	ands	r3, r2
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d01e      	beq.n	800ccbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d11a      	bne.n	800ccbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	685a      	ldr	r2, [r3, #4]
 800cc8c:	4b0e      	ldr	r3, [pc, #56]	; (800ccc8 <vPortFree+0xb8>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	43db      	mvns	r3, r3
 800cc92:	401a      	ands	r2, r3
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cc98:	f7fe fb94 	bl	800b3c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cc9c:	693b      	ldr	r3, [r7, #16]
 800cc9e:	685a      	ldr	r2, [r3, #4]
 800cca0:	4b0a      	ldr	r3, [pc, #40]	; (800cccc <vPortFree+0xbc>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	4413      	add	r3, r2
 800cca6:	4a09      	ldr	r2, [pc, #36]	; (800cccc <vPortFree+0xbc>)
 800cca8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ccaa:	6938      	ldr	r0, [r7, #16]
 800ccac:	f000 f874 	bl	800cd98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ccb0:	4b07      	ldr	r3, [pc, #28]	; (800ccd0 <vPortFree+0xc0>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	3301      	adds	r3, #1
 800ccb6:	4a06      	ldr	r2, [pc, #24]	; (800ccd0 <vPortFree+0xc0>)
 800ccb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ccba:	f7fe fb91 	bl	800b3e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ccbe:	bf00      	nop
 800ccc0:	3718      	adds	r7, #24
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
 800ccc6:	bf00      	nop
 800ccc8:	20004c98 	.word	0x20004c98
 800cccc:	20004c88 	.word	0x20004c88
 800ccd0:	20004c94 	.word	0x20004c94

0800ccd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b085      	sub	sp, #20
 800ccd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ccda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ccde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cce0:	4b27      	ldr	r3, [pc, #156]	; (800cd80 <prvHeapInit+0xac>)
 800cce2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	f003 0307 	and.w	r3, r3, #7
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d00c      	beq.n	800cd08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	3307      	adds	r3, #7
 800ccf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	f023 0307 	bic.w	r3, r3, #7
 800ccfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ccfc:	68ba      	ldr	r2, [r7, #8]
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	1ad3      	subs	r3, r2, r3
 800cd02:	4a1f      	ldr	r2, [pc, #124]	; (800cd80 <prvHeapInit+0xac>)
 800cd04:	4413      	add	r3, r2
 800cd06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cd0c:	4a1d      	ldr	r2, [pc, #116]	; (800cd84 <prvHeapInit+0xb0>)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cd12:	4b1c      	ldr	r3, [pc, #112]	; (800cd84 <prvHeapInit+0xb0>)
 800cd14:	2200      	movs	r2, #0
 800cd16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	68ba      	ldr	r2, [r7, #8]
 800cd1c:	4413      	add	r3, r2
 800cd1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cd20:	2208      	movs	r2, #8
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	1a9b      	subs	r3, r3, r2
 800cd26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	f023 0307 	bic.w	r3, r3, #7
 800cd2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	4a15      	ldr	r2, [pc, #84]	; (800cd88 <prvHeapInit+0xb4>)
 800cd34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cd36:	4b14      	ldr	r3, [pc, #80]	; (800cd88 <prvHeapInit+0xb4>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cd3e:	4b12      	ldr	r3, [pc, #72]	; (800cd88 <prvHeapInit+0xb4>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	2200      	movs	r2, #0
 800cd44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	68fa      	ldr	r2, [r7, #12]
 800cd4e:	1ad2      	subs	r2, r2, r3
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cd54:	4b0c      	ldr	r3, [pc, #48]	; (800cd88 <prvHeapInit+0xb4>)
 800cd56:	681a      	ldr	r2, [r3, #0]
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	685b      	ldr	r3, [r3, #4]
 800cd60:	4a0a      	ldr	r2, [pc, #40]	; (800cd8c <prvHeapInit+0xb8>)
 800cd62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	685b      	ldr	r3, [r3, #4]
 800cd68:	4a09      	ldr	r2, [pc, #36]	; (800cd90 <prvHeapInit+0xbc>)
 800cd6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cd6c:	4b09      	ldr	r3, [pc, #36]	; (800cd94 <prvHeapInit+0xc0>)
 800cd6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cd72:	601a      	str	r2, [r3, #0]
}
 800cd74:	bf00      	nop
 800cd76:	3714      	adds	r7, #20
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7e:	4770      	bx	lr
 800cd80:	2000107c 	.word	0x2000107c
 800cd84:	20004c7c 	.word	0x20004c7c
 800cd88:	20004c84 	.word	0x20004c84
 800cd8c:	20004c8c 	.word	0x20004c8c
 800cd90:	20004c88 	.word	0x20004c88
 800cd94:	20004c98 	.word	0x20004c98

0800cd98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b085      	sub	sp, #20
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cda0:	4b28      	ldr	r3, [pc, #160]	; (800ce44 <prvInsertBlockIntoFreeList+0xac>)
 800cda2:	60fb      	str	r3, [r7, #12]
 800cda4:	e002      	b.n	800cdac <prvInsertBlockIntoFreeList+0x14>
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	60fb      	str	r3, [r7, #12]
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	429a      	cmp	r2, r3
 800cdb4:	d8f7      	bhi.n	800cda6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	685b      	ldr	r3, [r3, #4]
 800cdbe:	68ba      	ldr	r2, [r7, #8]
 800cdc0:	4413      	add	r3, r2
 800cdc2:	687a      	ldr	r2, [r7, #4]
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d108      	bne.n	800cdda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	685a      	ldr	r2, [r3, #4]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	441a      	add	r2, r3
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	68ba      	ldr	r2, [r7, #8]
 800cde4:	441a      	add	r2, r3
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	429a      	cmp	r2, r3
 800cdec:	d118      	bne.n	800ce20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	681a      	ldr	r2, [r3, #0]
 800cdf2:	4b15      	ldr	r3, [pc, #84]	; (800ce48 <prvInsertBlockIntoFreeList+0xb0>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	429a      	cmp	r2, r3
 800cdf8:	d00d      	beq.n	800ce16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	685a      	ldr	r2, [r3, #4]
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	685b      	ldr	r3, [r3, #4]
 800ce04:	441a      	add	r2, r3
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	681a      	ldr	r2, [r3, #0]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	601a      	str	r2, [r3, #0]
 800ce14:	e008      	b.n	800ce28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ce16:	4b0c      	ldr	r3, [pc, #48]	; (800ce48 <prvInsertBlockIntoFreeList+0xb0>)
 800ce18:	681a      	ldr	r2, [r3, #0]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	601a      	str	r2, [r3, #0]
 800ce1e:	e003      	b.n	800ce28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	681a      	ldr	r2, [r3, #0]
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ce28:	68fa      	ldr	r2, [r7, #12]
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d002      	beq.n	800ce36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	687a      	ldr	r2, [r7, #4]
 800ce34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce36:	bf00      	nop
 800ce38:	3714      	adds	r7, #20
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce40:	4770      	bx	lr
 800ce42:	bf00      	nop
 800ce44:	20004c7c 	.word	0x20004c7c
 800ce48:	20004c84 	.word	0x20004c84

0800ce4c <__errno>:
 800ce4c:	4b01      	ldr	r3, [pc, #4]	; (800ce54 <__errno+0x8>)
 800ce4e:	6818      	ldr	r0, [r3, #0]
 800ce50:	4770      	bx	lr
 800ce52:	bf00      	nop
 800ce54:	20000038 	.word	0x20000038

0800ce58 <__libc_init_array>:
 800ce58:	b570      	push	{r4, r5, r6, lr}
 800ce5a:	4d0d      	ldr	r5, [pc, #52]	; (800ce90 <__libc_init_array+0x38>)
 800ce5c:	4c0d      	ldr	r4, [pc, #52]	; (800ce94 <__libc_init_array+0x3c>)
 800ce5e:	1b64      	subs	r4, r4, r5
 800ce60:	10a4      	asrs	r4, r4, #2
 800ce62:	2600      	movs	r6, #0
 800ce64:	42a6      	cmp	r6, r4
 800ce66:	d109      	bne.n	800ce7c <__libc_init_array+0x24>
 800ce68:	4d0b      	ldr	r5, [pc, #44]	; (800ce98 <__libc_init_array+0x40>)
 800ce6a:	4c0c      	ldr	r4, [pc, #48]	; (800ce9c <__libc_init_array+0x44>)
 800ce6c:	f005 f88a 	bl	8011f84 <_init>
 800ce70:	1b64      	subs	r4, r4, r5
 800ce72:	10a4      	asrs	r4, r4, #2
 800ce74:	2600      	movs	r6, #0
 800ce76:	42a6      	cmp	r6, r4
 800ce78:	d105      	bne.n	800ce86 <__libc_init_array+0x2e>
 800ce7a:	bd70      	pop	{r4, r5, r6, pc}
 800ce7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce80:	4798      	blx	r3
 800ce82:	3601      	adds	r6, #1
 800ce84:	e7ee      	b.n	800ce64 <__libc_init_array+0xc>
 800ce86:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce8a:	4798      	blx	r3
 800ce8c:	3601      	adds	r6, #1
 800ce8e:	e7f2      	b.n	800ce76 <__libc_init_array+0x1e>
 800ce90:	08013d04 	.word	0x08013d04
 800ce94:	08013d04 	.word	0x08013d04
 800ce98:	08013d04 	.word	0x08013d04
 800ce9c:	08013d08 	.word	0x08013d08

0800cea0 <malloc>:
 800cea0:	4b02      	ldr	r3, [pc, #8]	; (800ceac <malloc+0xc>)
 800cea2:	4601      	mov	r1, r0
 800cea4:	6818      	ldr	r0, [r3, #0]
 800cea6:	f000 b871 	b.w	800cf8c <_malloc_r>
 800ceaa:	bf00      	nop
 800ceac:	20000038 	.word	0x20000038

0800ceb0 <free>:
 800ceb0:	4b02      	ldr	r3, [pc, #8]	; (800cebc <free+0xc>)
 800ceb2:	4601      	mov	r1, r0
 800ceb4:	6818      	ldr	r0, [r3, #0]
 800ceb6:	f000 b819 	b.w	800ceec <_free_r>
 800ceba:	bf00      	nop
 800cebc:	20000038 	.word	0x20000038

0800cec0 <memcpy>:
 800cec0:	440a      	add	r2, r1
 800cec2:	4291      	cmp	r1, r2
 800cec4:	f100 33ff 	add.w	r3, r0, #4294967295
 800cec8:	d100      	bne.n	800cecc <memcpy+0xc>
 800ceca:	4770      	bx	lr
 800cecc:	b510      	push	{r4, lr}
 800cece:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ced2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ced6:	4291      	cmp	r1, r2
 800ced8:	d1f9      	bne.n	800cece <memcpy+0xe>
 800ceda:	bd10      	pop	{r4, pc}

0800cedc <memset>:
 800cedc:	4402      	add	r2, r0
 800cede:	4603      	mov	r3, r0
 800cee0:	4293      	cmp	r3, r2
 800cee2:	d100      	bne.n	800cee6 <memset+0xa>
 800cee4:	4770      	bx	lr
 800cee6:	f803 1b01 	strb.w	r1, [r3], #1
 800ceea:	e7f9      	b.n	800cee0 <memset+0x4>

0800ceec <_free_r>:
 800ceec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ceee:	2900      	cmp	r1, #0
 800cef0:	d048      	beq.n	800cf84 <_free_r+0x98>
 800cef2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cef6:	9001      	str	r0, [sp, #4]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	f1a1 0404 	sub.w	r4, r1, #4
 800cefe:	bfb8      	it	lt
 800cf00:	18e4      	addlt	r4, r4, r3
 800cf02:	f003 f8b5 	bl	8010070 <__malloc_lock>
 800cf06:	4a20      	ldr	r2, [pc, #128]	; (800cf88 <_free_r+0x9c>)
 800cf08:	9801      	ldr	r0, [sp, #4]
 800cf0a:	6813      	ldr	r3, [r2, #0]
 800cf0c:	4615      	mov	r5, r2
 800cf0e:	b933      	cbnz	r3, 800cf1e <_free_r+0x32>
 800cf10:	6063      	str	r3, [r4, #4]
 800cf12:	6014      	str	r4, [r2, #0]
 800cf14:	b003      	add	sp, #12
 800cf16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf1a:	f003 b8af 	b.w	801007c <__malloc_unlock>
 800cf1e:	42a3      	cmp	r3, r4
 800cf20:	d90b      	bls.n	800cf3a <_free_r+0x4e>
 800cf22:	6821      	ldr	r1, [r4, #0]
 800cf24:	1862      	adds	r2, r4, r1
 800cf26:	4293      	cmp	r3, r2
 800cf28:	bf04      	itt	eq
 800cf2a:	681a      	ldreq	r2, [r3, #0]
 800cf2c:	685b      	ldreq	r3, [r3, #4]
 800cf2e:	6063      	str	r3, [r4, #4]
 800cf30:	bf04      	itt	eq
 800cf32:	1852      	addeq	r2, r2, r1
 800cf34:	6022      	streq	r2, [r4, #0]
 800cf36:	602c      	str	r4, [r5, #0]
 800cf38:	e7ec      	b.n	800cf14 <_free_r+0x28>
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	685b      	ldr	r3, [r3, #4]
 800cf3e:	b10b      	cbz	r3, 800cf44 <_free_r+0x58>
 800cf40:	42a3      	cmp	r3, r4
 800cf42:	d9fa      	bls.n	800cf3a <_free_r+0x4e>
 800cf44:	6811      	ldr	r1, [r2, #0]
 800cf46:	1855      	adds	r5, r2, r1
 800cf48:	42a5      	cmp	r5, r4
 800cf4a:	d10b      	bne.n	800cf64 <_free_r+0x78>
 800cf4c:	6824      	ldr	r4, [r4, #0]
 800cf4e:	4421      	add	r1, r4
 800cf50:	1854      	adds	r4, r2, r1
 800cf52:	42a3      	cmp	r3, r4
 800cf54:	6011      	str	r1, [r2, #0]
 800cf56:	d1dd      	bne.n	800cf14 <_free_r+0x28>
 800cf58:	681c      	ldr	r4, [r3, #0]
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	6053      	str	r3, [r2, #4]
 800cf5e:	4421      	add	r1, r4
 800cf60:	6011      	str	r1, [r2, #0]
 800cf62:	e7d7      	b.n	800cf14 <_free_r+0x28>
 800cf64:	d902      	bls.n	800cf6c <_free_r+0x80>
 800cf66:	230c      	movs	r3, #12
 800cf68:	6003      	str	r3, [r0, #0]
 800cf6a:	e7d3      	b.n	800cf14 <_free_r+0x28>
 800cf6c:	6825      	ldr	r5, [r4, #0]
 800cf6e:	1961      	adds	r1, r4, r5
 800cf70:	428b      	cmp	r3, r1
 800cf72:	bf04      	itt	eq
 800cf74:	6819      	ldreq	r1, [r3, #0]
 800cf76:	685b      	ldreq	r3, [r3, #4]
 800cf78:	6063      	str	r3, [r4, #4]
 800cf7a:	bf04      	itt	eq
 800cf7c:	1949      	addeq	r1, r1, r5
 800cf7e:	6021      	streq	r1, [r4, #0]
 800cf80:	6054      	str	r4, [r2, #4]
 800cf82:	e7c7      	b.n	800cf14 <_free_r+0x28>
 800cf84:	b003      	add	sp, #12
 800cf86:	bd30      	pop	{r4, r5, pc}
 800cf88:	20004c9c 	.word	0x20004c9c

0800cf8c <_malloc_r>:
 800cf8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf8e:	1ccd      	adds	r5, r1, #3
 800cf90:	f025 0503 	bic.w	r5, r5, #3
 800cf94:	3508      	adds	r5, #8
 800cf96:	2d0c      	cmp	r5, #12
 800cf98:	bf38      	it	cc
 800cf9a:	250c      	movcc	r5, #12
 800cf9c:	2d00      	cmp	r5, #0
 800cf9e:	4606      	mov	r6, r0
 800cfa0:	db01      	blt.n	800cfa6 <_malloc_r+0x1a>
 800cfa2:	42a9      	cmp	r1, r5
 800cfa4:	d903      	bls.n	800cfae <_malloc_r+0x22>
 800cfa6:	230c      	movs	r3, #12
 800cfa8:	6033      	str	r3, [r6, #0]
 800cfaa:	2000      	movs	r0, #0
 800cfac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfae:	f003 f85f 	bl	8010070 <__malloc_lock>
 800cfb2:	4921      	ldr	r1, [pc, #132]	; (800d038 <_malloc_r+0xac>)
 800cfb4:	680a      	ldr	r2, [r1, #0]
 800cfb6:	4614      	mov	r4, r2
 800cfb8:	b99c      	cbnz	r4, 800cfe2 <_malloc_r+0x56>
 800cfba:	4f20      	ldr	r7, [pc, #128]	; (800d03c <_malloc_r+0xb0>)
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	b923      	cbnz	r3, 800cfca <_malloc_r+0x3e>
 800cfc0:	4621      	mov	r1, r4
 800cfc2:	4630      	mov	r0, r6
 800cfc4:	f000 feb6 	bl	800dd34 <_sbrk_r>
 800cfc8:	6038      	str	r0, [r7, #0]
 800cfca:	4629      	mov	r1, r5
 800cfcc:	4630      	mov	r0, r6
 800cfce:	f000 feb1 	bl	800dd34 <_sbrk_r>
 800cfd2:	1c43      	adds	r3, r0, #1
 800cfd4:	d123      	bne.n	800d01e <_malloc_r+0x92>
 800cfd6:	230c      	movs	r3, #12
 800cfd8:	6033      	str	r3, [r6, #0]
 800cfda:	4630      	mov	r0, r6
 800cfdc:	f003 f84e 	bl	801007c <__malloc_unlock>
 800cfe0:	e7e3      	b.n	800cfaa <_malloc_r+0x1e>
 800cfe2:	6823      	ldr	r3, [r4, #0]
 800cfe4:	1b5b      	subs	r3, r3, r5
 800cfe6:	d417      	bmi.n	800d018 <_malloc_r+0x8c>
 800cfe8:	2b0b      	cmp	r3, #11
 800cfea:	d903      	bls.n	800cff4 <_malloc_r+0x68>
 800cfec:	6023      	str	r3, [r4, #0]
 800cfee:	441c      	add	r4, r3
 800cff0:	6025      	str	r5, [r4, #0]
 800cff2:	e004      	b.n	800cffe <_malloc_r+0x72>
 800cff4:	6863      	ldr	r3, [r4, #4]
 800cff6:	42a2      	cmp	r2, r4
 800cff8:	bf0c      	ite	eq
 800cffa:	600b      	streq	r3, [r1, #0]
 800cffc:	6053      	strne	r3, [r2, #4]
 800cffe:	4630      	mov	r0, r6
 800d000:	f003 f83c 	bl	801007c <__malloc_unlock>
 800d004:	f104 000b 	add.w	r0, r4, #11
 800d008:	1d23      	adds	r3, r4, #4
 800d00a:	f020 0007 	bic.w	r0, r0, #7
 800d00e:	1ac2      	subs	r2, r0, r3
 800d010:	d0cc      	beq.n	800cfac <_malloc_r+0x20>
 800d012:	1a1b      	subs	r3, r3, r0
 800d014:	50a3      	str	r3, [r4, r2]
 800d016:	e7c9      	b.n	800cfac <_malloc_r+0x20>
 800d018:	4622      	mov	r2, r4
 800d01a:	6864      	ldr	r4, [r4, #4]
 800d01c:	e7cc      	b.n	800cfb8 <_malloc_r+0x2c>
 800d01e:	1cc4      	adds	r4, r0, #3
 800d020:	f024 0403 	bic.w	r4, r4, #3
 800d024:	42a0      	cmp	r0, r4
 800d026:	d0e3      	beq.n	800cff0 <_malloc_r+0x64>
 800d028:	1a21      	subs	r1, r4, r0
 800d02a:	4630      	mov	r0, r6
 800d02c:	f000 fe82 	bl	800dd34 <_sbrk_r>
 800d030:	3001      	adds	r0, #1
 800d032:	d1dd      	bne.n	800cff0 <_malloc_r+0x64>
 800d034:	e7cf      	b.n	800cfd6 <_malloc_r+0x4a>
 800d036:	bf00      	nop
 800d038:	20004c9c 	.word	0x20004c9c
 800d03c:	20004ca0 	.word	0x20004ca0

0800d040 <__cvt>:
 800d040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d044:	ec55 4b10 	vmov	r4, r5, d0
 800d048:	2d00      	cmp	r5, #0
 800d04a:	460e      	mov	r6, r1
 800d04c:	4619      	mov	r1, r3
 800d04e:	462b      	mov	r3, r5
 800d050:	bfbb      	ittet	lt
 800d052:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d056:	461d      	movlt	r5, r3
 800d058:	2300      	movge	r3, #0
 800d05a:	232d      	movlt	r3, #45	; 0x2d
 800d05c:	700b      	strb	r3, [r1, #0]
 800d05e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d060:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d064:	4691      	mov	r9, r2
 800d066:	f023 0820 	bic.w	r8, r3, #32
 800d06a:	bfbc      	itt	lt
 800d06c:	4622      	movlt	r2, r4
 800d06e:	4614      	movlt	r4, r2
 800d070:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d074:	d005      	beq.n	800d082 <__cvt+0x42>
 800d076:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d07a:	d100      	bne.n	800d07e <__cvt+0x3e>
 800d07c:	3601      	adds	r6, #1
 800d07e:	2102      	movs	r1, #2
 800d080:	e000      	b.n	800d084 <__cvt+0x44>
 800d082:	2103      	movs	r1, #3
 800d084:	ab03      	add	r3, sp, #12
 800d086:	9301      	str	r3, [sp, #4]
 800d088:	ab02      	add	r3, sp, #8
 800d08a:	9300      	str	r3, [sp, #0]
 800d08c:	ec45 4b10 	vmov	d0, r4, r5
 800d090:	4653      	mov	r3, sl
 800d092:	4632      	mov	r2, r6
 800d094:	f001 fe68 	bl	800ed68 <_dtoa_r>
 800d098:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d09c:	4607      	mov	r7, r0
 800d09e:	d102      	bne.n	800d0a6 <__cvt+0x66>
 800d0a0:	f019 0f01 	tst.w	r9, #1
 800d0a4:	d022      	beq.n	800d0ec <__cvt+0xac>
 800d0a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d0aa:	eb07 0906 	add.w	r9, r7, r6
 800d0ae:	d110      	bne.n	800d0d2 <__cvt+0x92>
 800d0b0:	783b      	ldrb	r3, [r7, #0]
 800d0b2:	2b30      	cmp	r3, #48	; 0x30
 800d0b4:	d10a      	bne.n	800d0cc <__cvt+0x8c>
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	4620      	mov	r0, r4
 800d0bc:	4629      	mov	r1, r5
 800d0be:	f7f3 fd0b 	bl	8000ad8 <__aeabi_dcmpeq>
 800d0c2:	b918      	cbnz	r0, 800d0cc <__cvt+0x8c>
 800d0c4:	f1c6 0601 	rsb	r6, r6, #1
 800d0c8:	f8ca 6000 	str.w	r6, [sl]
 800d0cc:	f8da 3000 	ldr.w	r3, [sl]
 800d0d0:	4499      	add	r9, r3
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	4620      	mov	r0, r4
 800d0d8:	4629      	mov	r1, r5
 800d0da:	f7f3 fcfd 	bl	8000ad8 <__aeabi_dcmpeq>
 800d0de:	b108      	cbz	r0, 800d0e4 <__cvt+0xa4>
 800d0e0:	f8cd 900c 	str.w	r9, [sp, #12]
 800d0e4:	2230      	movs	r2, #48	; 0x30
 800d0e6:	9b03      	ldr	r3, [sp, #12]
 800d0e8:	454b      	cmp	r3, r9
 800d0ea:	d307      	bcc.n	800d0fc <__cvt+0xbc>
 800d0ec:	9b03      	ldr	r3, [sp, #12]
 800d0ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d0f0:	1bdb      	subs	r3, r3, r7
 800d0f2:	4638      	mov	r0, r7
 800d0f4:	6013      	str	r3, [r2, #0]
 800d0f6:	b004      	add	sp, #16
 800d0f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0fc:	1c59      	adds	r1, r3, #1
 800d0fe:	9103      	str	r1, [sp, #12]
 800d100:	701a      	strb	r2, [r3, #0]
 800d102:	e7f0      	b.n	800d0e6 <__cvt+0xa6>

0800d104 <__exponent>:
 800d104:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d106:	4603      	mov	r3, r0
 800d108:	2900      	cmp	r1, #0
 800d10a:	bfb8      	it	lt
 800d10c:	4249      	neglt	r1, r1
 800d10e:	f803 2b02 	strb.w	r2, [r3], #2
 800d112:	bfb4      	ite	lt
 800d114:	222d      	movlt	r2, #45	; 0x2d
 800d116:	222b      	movge	r2, #43	; 0x2b
 800d118:	2909      	cmp	r1, #9
 800d11a:	7042      	strb	r2, [r0, #1]
 800d11c:	dd2a      	ble.n	800d174 <__exponent+0x70>
 800d11e:	f10d 0407 	add.w	r4, sp, #7
 800d122:	46a4      	mov	ip, r4
 800d124:	270a      	movs	r7, #10
 800d126:	46a6      	mov	lr, r4
 800d128:	460a      	mov	r2, r1
 800d12a:	fb91 f6f7 	sdiv	r6, r1, r7
 800d12e:	fb07 1516 	mls	r5, r7, r6, r1
 800d132:	3530      	adds	r5, #48	; 0x30
 800d134:	2a63      	cmp	r2, #99	; 0x63
 800d136:	f104 34ff 	add.w	r4, r4, #4294967295
 800d13a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d13e:	4631      	mov	r1, r6
 800d140:	dcf1      	bgt.n	800d126 <__exponent+0x22>
 800d142:	3130      	adds	r1, #48	; 0x30
 800d144:	f1ae 0502 	sub.w	r5, lr, #2
 800d148:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d14c:	1c44      	adds	r4, r0, #1
 800d14e:	4629      	mov	r1, r5
 800d150:	4561      	cmp	r1, ip
 800d152:	d30a      	bcc.n	800d16a <__exponent+0x66>
 800d154:	f10d 0209 	add.w	r2, sp, #9
 800d158:	eba2 020e 	sub.w	r2, r2, lr
 800d15c:	4565      	cmp	r5, ip
 800d15e:	bf88      	it	hi
 800d160:	2200      	movhi	r2, #0
 800d162:	4413      	add	r3, r2
 800d164:	1a18      	subs	r0, r3, r0
 800d166:	b003      	add	sp, #12
 800d168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d16a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d16e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d172:	e7ed      	b.n	800d150 <__exponent+0x4c>
 800d174:	2330      	movs	r3, #48	; 0x30
 800d176:	3130      	adds	r1, #48	; 0x30
 800d178:	7083      	strb	r3, [r0, #2]
 800d17a:	70c1      	strb	r1, [r0, #3]
 800d17c:	1d03      	adds	r3, r0, #4
 800d17e:	e7f1      	b.n	800d164 <__exponent+0x60>

0800d180 <_printf_float>:
 800d180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d184:	ed2d 8b02 	vpush	{d8}
 800d188:	b08d      	sub	sp, #52	; 0x34
 800d18a:	460c      	mov	r4, r1
 800d18c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d190:	4616      	mov	r6, r2
 800d192:	461f      	mov	r7, r3
 800d194:	4605      	mov	r5, r0
 800d196:	f002 ff43 	bl	8010020 <_localeconv_r>
 800d19a:	f8d0 a000 	ldr.w	sl, [r0]
 800d19e:	4650      	mov	r0, sl
 800d1a0:	f7f3 f81e 	bl	80001e0 <strlen>
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	930a      	str	r3, [sp, #40]	; 0x28
 800d1a8:	6823      	ldr	r3, [r4, #0]
 800d1aa:	9305      	str	r3, [sp, #20]
 800d1ac:	f8d8 3000 	ldr.w	r3, [r8]
 800d1b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d1b4:	3307      	adds	r3, #7
 800d1b6:	f023 0307 	bic.w	r3, r3, #7
 800d1ba:	f103 0208 	add.w	r2, r3, #8
 800d1be:	f8c8 2000 	str.w	r2, [r8]
 800d1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d1ca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d1ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d1d2:	9307      	str	r3, [sp, #28]
 800d1d4:	f8cd 8018 	str.w	r8, [sp, #24]
 800d1d8:	ee08 0a10 	vmov	s16, r0
 800d1dc:	4b9f      	ldr	r3, [pc, #636]	; (800d45c <_printf_float+0x2dc>)
 800d1de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d1e2:	f04f 32ff 	mov.w	r2, #4294967295
 800d1e6:	f7f3 fca9 	bl	8000b3c <__aeabi_dcmpun>
 800d1ea:	bb88      	cbnz	r0, 800d250 <_printf_float+0xd0>
 800d1ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d1f0:	4b9a      	ldr	r3, [pc, #616]	; (800d45c <_printf_float+0x2dc>)
 800d1f2:	f04f 32ff 	mov.w	r2, #4294967295
 800d1f6:	f7f3 fc83 	bl	8000b00 <__aeabi_dcmple>
 800d1fa:	bb48      	cbnz	r0, 800d250 <_printf_float+0xd0>
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	2300      	movs	r3, #0
 800d200:	4640      	mov	r0, r8
 800d202:	4649      	mov	r1, r9
 800d204:	f7f3 fc72 	bl	8000aec <__aeabi_dcmplt>
 800d208:	b110      	cbz	r0, 800d210 <_printf_float+0x90>
 800d20a:	232d      	movs	r3, #45	; 0x2d
 800d20c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d210:	4b93      	ldr	r3, [pc, #588]	; (800d460 <_printf_float+0x2e0>)
 800d212:	4894      	ldr	r0, [pc, #592]	; (800d464 <_printf_float+0x2e4>)
 800d214:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d218:	bf94      	ite	ls
 800d21a:	4698      	movls	r8, r3
 800d21c:	4680      	movhi	r8, r0
 800d21e:	2303      	movs	r3, #3
 800d220:	6123      	str	r3, [r4, #16]
 800d222:	9b05      	ldr	r3, [sp, #20]
 800d224:	f023 0204 	bic.w	r2, r3, #4
 800d228:	6022      	str	r2, [r4, #0]
 800d22a:	f04f 0900 	mov.w	r9, #0
 800d22e:	9700      	str	r7, [sp, #0]
 800d230:	4633      	mov	r3, r6
 800d232:	aa0b      	add	r2, sp, #44	; 0x2c
 800d234:	4621      	mov	r1, r4
 800d236:	4628      	mov	r0, r5
 800d238:	f000 f9d8 	bl	800d5ec <_printf_common>
 800d23c:	3001      	adds	r0, #1
 800d23e:	f040 8090 	bne.w	800d362 <_printf_float+0x1e2>
 800d242:	f04f 30ff 	mov.w	r0, #4294967295
 800d246:	b00d      	add	sp, #52	; 0x34
 800d248:	ecbd 8b02 	vpop	{d8}
 800d24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d250:	4642      	mov	r2, r8
 800d252:	464b      	mov	r3, r9
 800d254:	4640      	mov	r0, r8
 800d256:	4649      	mov	r1, r9
 800d258:	f7f3 fc70 	bl	8000b3c <__aeabi_dcmpun>
 800d25c:	b140      	cbz	r0, 800d270 <_printf_float+0xf0>
 800d25e:	464b      	mov	r3, r9
 800d260:	2b00      	cmp	r3, #0
 800d262:	bfbc      	itt	lt
 800d264:	232d      	movlt	r3, #45	; 0x2d
 800d266:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d26a:	487f      	ldr	r0, [pc, #508]	; (800d468 <_printf_float+0x2e8>)
 800d26c:	4b7f      	ldr	r3, [pc, #508]	; (800d46c <_printf_float+0x2ec>)
 800d26e:	e7d1      	b.n	800d214 <_printf_float+0x94>
 800d270:	6863      	ldr	r3, [r4, #4]
 800d272:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d276:	9206      	str	r2, [sp, #24]
 800d278:	1c5a      	adds	r2, r3, #1
 800d27a:	d13f      	bne.n	800d2fc <_printf_float+0x17c>
 800d27c:	2306      	movs	r3, #6
 800d27e:	6063      	str	r3, [r4, #4]
 800d280:	9b05      	ldr	r3, [sp, #20]
 800d282:	6861      	ldr	r1, [r4, #4]
 800d284:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d288:	2300      	movs	r3, #0
 800d28a:	9303      	str	r3, [sp, #12]
 800d28c:	ab0a      	add	r3, sp, #40	; 0x28
 800d28e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d292:	ab09      	add	r3, sp, #36	; 0x24
 800d294:	ec49 8b10 	vmov	d0, r8, r9
 800d298:	9300      	str	r3, [sp, #0]
 800d29a:	6022      	str	r2, [r4, #0]
 800d29c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d2a0:	4628      	mov	r0, r5
 800d2a2:	f7ff fecd 	bl	800d040 <__cvt>
 800d2a6:	9b06      	ldr	r3, [sp, #24]
 800d2a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d2aa:	2b47      	cmp	r3, #71	; 0x47
 800d2ac:	4680      	mov	r8, r0
 800d2ae:	d108      	bne.n	800d2c2 <_printf_float+0x142>
 800d2b0:	1cc8      	adds	r0, r1, #3
 800d2b2:	db02      	blt.n	800d2ba <_printf_float+0x13a>
 800d2b4:	6863      	ldr	r3, [r4, #4]
 800d2b6:	4299      	cmp	r1, r3
 800d2b8:	dd41      	ble.n	800d33e <_printf_float+0x1be>
 800d2ba:	f1ab 0b02 	sub.w	fp, fp, #2
 800d2be:	fa5f fb8b 	uxtb.w	fp, fp
 800d2c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d2c6:	d820      	bhi.n	800d30a <_printf_float+0x18a>
 800d2c8:	3901      	subs	r1, #1
 800d2ca:	465a      	mov	r2, fp
 800d2cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d2d0:	9109      	str	r1, [sp, #36]	; 0x24
 800d2d2:	f7ff ff17 	bl	800d104 <__exponent>
 800d2d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d2d8:	1813      	adds	r3, r2, r0
 800d2da:	2a01      	cmp	r2, #1
 800d2dc:	4681      	mov	r9, r0
 800d2de:	6123      	str	r3, [r4, #16]
 800d2e0:	dc02      	bgt.n	800d2e8 <_printf_float+0x168>
 800d2e2:	6822      	ldr	r2, [r4, #0]
 800d2e4:	07d2      	lsls	r2, r2, #31
 800d2e6:	d501      	bpl.n	800d2ec <_printf_float+0x16c>
 800d2e8:	3301      	adds	r3, #1
 800d2ea:	6123      	str	r3, [r4, #16]
 800d2ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d09c      	beq.n	800d22e <_printf_float+0xae>
 800d2f4:	232d      	movs	r3, #45	; 0x2d
 800d2f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2fa:	e798      	b.n	800d22e <_printf_float+0xae>
 800d2fc:	9a06      	ldr	r2, [sp, #24]
 800d2fe:	2a47      	cmp	r2, #71	; 0x47
 800d300:	d1be      	bne.n	800d280 <_printf_float+0x100>
 800d302:	2b00      	cmp	r3, #0
 800d304:	d1bc      	bne.n	800d280 <_printf_float+0x100>
 800d306:	2301      	movs	r3, #1
 800d308:	e7b9      	b.n	800d27e <_printf_float+0xfe>
 800d30a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d30e:	d118      	bne.n	800d342 <_printf_float+0x1c2>
 800d310:	2900      	cmp	r1, #0
 800d312:	6863      	ldr	r3, [r4, #4]
 800d314:	dd0b      	ble.n	800d32e <_printf_float+0x1ae>
 800d316:	6121      	str	r1, [r4, #16]
 800d318:	b913      	cbnz	r3, 800d320 <_printf_float+0x1a0>
 800d31a:	6822      	ldr	r2, [r4, #0]
 800d31c:	07d0      	lsls	r0, r2, #31
 800d31e:	d502      	bpl.n	800d326 <_printf_float+0x1a6>
 800d320:	3301      	adds	r3, #1
 800d322:	440b      	add	r3, r1
 800d324:	6123      	str	r3, [r4, #16]
 800d326:	65a1      	str	r1, [r4, #88]	; 0x58
 800d328:	f04f 0900 	mov.w	r9, #0
 800d32c:	e7de      	b.n	800d2ec <_printf_float+0x16c>
 800d32e:	b913      	cbnz	r3, 800d336 <_printf_float+0x1b6>
 800d330:	6822      	ldr	r2, [r4, #0]
 800d332:	07d2      	lsls	r2, r2, #31
 800d334:	d501      	bpl.n	800d33a <_printf_float+0x1ba>
 800d336:	3302      	adds	r3, #2
 800d338:	e7f4      	b.n	800d324 <_printf_float+0x1a4>
 800d33a:	2301      	movs	r3, #1
 800d33c:	e7f2      	b.n	800d324 <_printf_float+0x1a4>
 800d33e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d344:	4299      	cmp	r1, r3
 800d346:	db05      	blt.n	800d354 <_printf_float+0x1d4>
 800d348:	6823      	ldr	r3, [r4, #0]
 800d34a:	6121      	str	r1, [r4, #16]
 800d34c:	07d8      	lsls	r0, r3, #31
 800d34e:	d5ea      	bpl.n	800d326 <_printf_float+0x1a6>
 800d350:	1c4b      	adds	r3, r1, #1
 800d352:	e7e7      	b.n	800d324 <_printf_float+0x1a4>
 800d354:	2900      	cmp	r1, #0
 800d356:	bfd4      	ite	le
 800d358:	f1c1 0202 	rsble	r2, r1, #2
 800d35c:	2201      	movgt	r2, #1
 800d35e:	4413      	add	r3, r2
 800d360:	e7e0      	b.n	800d324 <_printf_float+0x1a4>
 800d362:	6823      	ldr	r3, [r4, #0]
 800d364:	055a      	lsls	r2, r3, #21
 800d366:	d407      	bmi.n	800d378 <_printf_float+0x1f8>
 800d368:	6923      	ldr	r3, [r4, #16]
 800d36a:	4642      	mov	r2, r8
 800d36c:	4631      	mov	r1, r6
 800d36e:	4628      	mov	r0, r5
 800d370:	47b8      	blx	r7
 800d372:	3001      	adds	r0, #1
 800d374:	d12c      	bne.n	800d3d0 <_printf_float+0x250>
 800d376:	e764      	b.n	800d242 <_printf_float+0xc2>
 800d378:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d37c:	f240 80e0 	bls.w	800d540 <_printf_float+0x3c0>
 800d380:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d384:	2200      	movs	r2, #0
 800d386:	2300      	movs	r3, #0
 800d388:	f7f3 fba6 	bl	8000ad8 <__aeabi_dcmpeq>
 800d38c:	2800      	cmp	r0, #0
 800d38e:	d034      	beq.n	800d3fa <_printf_float+0x27a>
 800d390:	4a37      	ldr	r2, [pc, #220]	; (800d470 <_printf_float+0x2f0>)
 800d392:	2301      	movs	r3, #1
 800d394:	4631      	mov	r1, r6
 800d396:	4628      	mov	r0, r5
 800d398:	47b8      	blx	r7
 800d39a:	3001      	adds	r0, #1
 800d39c:	f43f af51 	beq.w	800d242 <_printf_float+0xc2>
 800d3a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d3a4:	429a      	cmp	r2, r3
 800d3a6:	db02      	blt.n	800d3ae <_printf_float+0x22e>
 800d3a8:	6823      	ldr	r3, [r4, #0]
 800d3aa:	07d8      	lsls	r0, r3, #31
 800d3ac:	d510      	bpl.n	800d3d0 <_printf_float+0x250>
 800d3ae:	ee18 3a10 	vmov	r3, s16
 800d3b2:	4652      	mov	r2, sl
 800d3b4:	4631      	mov	r1, r6
 800d3b6:	4628      	mov	r0, r5
 800d3b8:	47b8      	blx	r7
 800d3ba:	3001      	adds	r0, #1
 800d3bc:	f43f af41 	beq.w	800d242 <_printf_float+0xc2>
 800d3c0:	f04f 0800 	mov.w	r8, #0
 800d3c4:	f104 091a 	add.w	r9, r4, #26
 800d3c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3ca:	3b01      	subs	r3, #1
 800d3cc:	4543      	cmp	r3, r8
 800d3ce:	dc09      	bgt.n	800d3e4 <_printf_float+0x264>
 800d3d0:	6823      	ldr	r3, [r4, #0]
 800d3d2:	079b      	lsls	r3, r3, #30
 800d3d4:	f100 8105 	bmi.w	800d5e2 <_printf_float+0x462>
 800d3d8:	68e0      	ldr	r0, [r4, #12]
 800d3da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3dc:	4298      	cmp	r0, r3
 800d3de:	bfb8      	it	lt
 800d3e0:	4618      	movlt	r0, r3
 800d3e2:	e730      	b.n	800d246 <_printf_float+0xc6>
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	464a      	mov	r2, r9
 800d3e8:	4631      	mov	r1, r6
 800d3ea:	4628      	mov	r0, r5
 800d3ec:	47b8      	blx	r7
 800d3ee:	3001      	adds	r0, #1
 800d3f0:	f43f af27 	beq.w	800d242 <_printf_float+0xc2>
 800d3f4:	f108 0801 	add.w	r8, r8, #1
 800d3f8:	e7e6      	b.n	800d3c8 <_printf_float+0x248>
 800d3fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	dc39      	bgt.n	800d474 <_printf_float+0x2f4>
 800d400:	4a1b      	ldr	r2, [pc, #108]	; (800d470 <_printf_float+0x2f0>)
 800d402:	2301      	movs	r3, #1
 800d404:	4631      	mov	r1, r6
 800d406:	4628      	mov	r0, r5
 800d408:	47b8      	blx	r7
 800d40a:	3001      	adds	r0, #1
 800d40c:	f43f af19 	beq.w	800d242 <_printf_float+0xc2>
 800d410:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d414:	4313      	orrs	r3, r2
 800d416:	d102      	bne.n	800d41e <_printf_float+0x29e>
 800d418:	6823      	ldr	r3, [r4, #0]
 800d41a:	07d9      	lsls	r1, r3, #31
 800d41c:	d5d8      	bpl.n	800d3d0 <_printf_float+0x250>
 800d41e:	ee18 3a10 	vmov	r3, s16
 800d422:	4652      	mov	r2, sl
 800d424:	4631      	mov	r1, r6
 800d426:	4628      	mov	r0, r5
 800d428:	47b8      	blx	r7
 800d42a:	3001      	adds	r0, #1
 800d42c:	f43f af09 	beq.w	800d242 <_printf_float+0xc2>
 800d430:	f04f 0900 	mov.w	r9, #0
 800d434:	f104 0a1a 	add.w	sl, r4, #26
 800d438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d43a:	425b      	negs	r3, r3
 800d43c:	454b      	cmp	r3, r9
 800d43e:	dc01      	bgt.n	800d444 <_printf_float+0x2c4>
 800d440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d442:	e792      	b.n	800d36a <_printf_float+0x1ea>
 800d444:	2301      	movs	r3, #1
 800d446:	4652      	mov	r2, sl
 800d448:	4631      	mov	r1, r6
 800d44a:	4628      	mov	r0, r5
 800d44c:	47b8      	blx	r7
 800d44e:	3001      	adds	r0, #1
 800d450:	f43f aef7 	beq.w	800d242 <_printf_float+0xc2>
 800d454:	f109 0901 	add.w	r9, r9, #1
 800d458:	e7ee      	b.n	800d438 <_printf_float+0x2b8>
 800d45a:	bf00      	nop
 800d45c:	7fefffff 	.word	0x7fefffff
 800d460:	08013834 	.word	0x08013834
 800d464:	08013838 	.word	0x08013838
 800d468:	08013840 	.word	0x08013840
 800d46c:	0801383c 	.word	0x0801383c
 800d470:	08013c49 	.word	0x08013c49
 800d474:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d476:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d478:	429a      	cmp	r2, r3
 800d47a:	bfa8      	it	ge
 800d47c:	461a      	movge	r2, r3
 800d47e:	2a00      	cmp	r2, #0
 800d480:	4691      	mov	r9, r2
 800d482:	dc37      	bgt.n	800d4f4 <_printf_float+0x374>
 800d484:	f04f 0b00 	mov.w	fp, #0
 800d488:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d48c:	f104 021a 	add.w	r2, r4, #26
 800d490:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d492:	9305      	str	r3, [sp, #20]
 800d494:	eba3 0309 	sub.w	r3, r3, r9
 800d498:	455b      	cmp	r3, fp
 800d49a:	dc33      	bgt.n	800d504 <_printf_float+0x384>
 800d49c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	db3b      	blt.n	800d51c <_printf_float+0x39c>
 800d4a4:	6823      	ldr	r3, [r4, #0]
 800d4a6:	07da      	lsls	r2, r3, #31
 800d4a8:	d438      	bmi.n	800d51c <_printf_float+0x39c>
 800d4aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d4ac:	9b05      	ldr	r3, [sp, #20]
 800d4ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d4b0:	1ad3      	subs	r3, r2, r3
 800d4b2:	eba2 0901 	sub.w	r9, r2, r1
 800d4b6:	4599      	cmp	r9, r3
 800d4b8:	bfa8      	it	ge
 800d4ba:	4699      	movge	r9, r3
 800d4bc:	f1b9 0f00 	cmp.w	r9, #0
 800d4c0:	dc35      	bgt.n	800d52e <_printf_float+0x3ae>
 800d4c2:	f04f 0800 	mov.w	r8, #0
 800d4c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d4ca:	f104 0a1a 	add.w	sl, r4, #26
 800d4ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d4d2:	1a9b      	subs	r3, r3, r2
 800d4d4:	eba3 0309 	sub.w	r3, r3, r9
 800d4d8:	4543      	cmp	r3, r8
 800d4da:	f77f af79 	ble.w	800d3d0 <_printf_float+0x250>
 800d4de:	2301      	movs	r3, #1
 800d4e0:	4652      	mov	r2, sl
 800d4e2:	4631      	mov	r1, r6
 800d4e4:	4628      	mov	r0, r5
 800d4e6:	47b8      	blx	r7
 800d4e8:	3001      	adds	r0, #1
 800d4ea:	f43f aeaa 	beq.w	800d242 <_printf_float+0xc2>
 800d4ee:	f108 0801 	add.w	r8, r8, #1
 800d4f2:	e7ec      	b.n	800d4ce <_printf_float+0x34e>
 800d4f4:	4613      	mov	r3, r2
 800d4f6:	4631      	mov	r1, r6
 800d4f8:	4642      	mov	r2, r8
 800d4fa:	4628      	mov	r0, r5
 800d4fc:	47b8      	blx	r7
 800d4fe:	3001      	adds	r0, #1
 800d500:	d1c0      	bne.n	800d484 <_printf_float+0x304>
 800d502:	e69e      	b.n	800d242 <_printf_float+0xc2>
 800d504:	2301      	movs	r3, #1
 800d506:	4631      	mov	r1, r6
 800d508:	4628      	mov	r0, r5
 800d50a:	9205      	str	r2, [sp, #20]
 800d50c:	47b8      	blx	r7
 800d50e:	3001      	adds	r0, #1
 800d510:	f43f ae97 	beq.w	800d242 <_printf_float+0xc2>
 800d514:	9a05      	ldr	r2, [sp, #20]
 800d516:	f10b 0b01 	add.w	fp, fp, #1
 800d51a:	e7b9      	b.n	800d490 <_printf_float+0x310>
 800d51c:	ee18 3a10 	vmov	r3, s16
 800d520:	4652      	mov	r2, sl
 800d522:	4631      	mov	r1, r6
 800d524:	4628      	mov	r0, r5
 800d526:	47b8      	blx	r7
 800d528:	3001      	adds	r0, #1
 800d52a:	d1be      	bne.n	800d4aa <_printf_float+0x32a>
 800d52c:	e689      	b.n	800d242 <_printf_float+0xc2>
 800d52e:	9a05      	ldr	r2, [sp, #20]
 800d530:	464b      	mov	r3, r9
 800d532:	4442      	add	r2, r8
 800d534:	4631      	mov	r1, r6
 800d536:	4628      	mov	r0, r5
 800d538:	47b8      	blx	r7
 800d53a:	3001      	adds	r0, #1
 800d53c:	d1c1      	bne.n	800d4c2 <_printf_float+0x342>
 800d53e:	e680      	b.n	800d242 <_printf_float+0xc2>
 800d540:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d542:	2a01      	cmp	r2, #1
 800d544:	dc01      	bgt.n	800d54a <_printf_float+0x3ca>
 800d546:	07db      	lsls	r3, r3, #31
 800d548:	d538      	bpl.n	800d5bc <_printf_float+0x43c>
 800d54a:	2301      	movs	r3, #1
 800d54c:	4642      	mov	r2, r8
 800d54e:	4631      	mov	r1, r6
 800d550:	4628      	mov	r0, r5
 800d552:	47b8      	blx	r7
 800d554:	3001      	adds	r0, #1
 800d556:	f43f ae74 	beq.w	800d242 <_printf_float+0xc2>
 800d55a:	ee18 3a10 	vmov	r3, s16
 800d55e:	4652      	mov	r2, sl
 800d560:	4631      	mov	r1, r6
 800d562:	4628      	mov	r0, r5
 800d564:	47b8      	blx	r7
 800d566:	3001      	adds	r0, #1
 800d568:	f43f ae6b 	beq.w	800d242 <_printf_float+0xc2>
 800d56c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d570:	2200      	movs	r2, #0
 800d572:	2300      	movs	r3, #0
 800d574:	f7f3 fab0 	bl	8000ad8 <__aeabi_dcmpeq>
 800d578:	b9d8      	cbnz	r0, 800d5b2 <_printf_float+0x432>
 800d57a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d57c:	f108 0201 	add.w	r2, r8, #1
 800d580:	3b01      	subs	r3, #1
 800d582:	4631      	mov	r1, r6
 800d584:	4628      	mov	r0, r5
 800d586:	47b8      	blx	r7
 800d588:	3001      	adds	r0, #1
 800d58a:	d10e      	bne.n	800d5aa <_printf_float+0x42a>
 800d58c:	e659      	b.n	800d242 <_printf_float+0xc2>
 800d58e:	2301      	movs	r3, #1
 800d590:	4652      	mov	r2, sl
 800d592:	4631      	mov	r1, r6
 800d594:	4628      	mov	r0, r5
 800d596:	47b8      	blx	r7
 800d598:	3001      	adds	r0, #1
 800d59a:	f43f ae52 	beq.w	800d242 <_printf_float+0xc2>
 800d59e:	f108 0801 	add.w	r8, r8, #1
 800d5a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5a4:	3b01      	subs	r3, #1
 800d5a6:	4543      	cmp	r3, r8
 800d5a8:	dcf1      	bgt.n	800d58e <_printf_float+0x40e>
 800d5aa:	464b      	mov	r3, r9
 800d5ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d5b0:	e6dc      	b.n	800d36c <_printf_float+0x1ec>
 800d5b2:	f04f 0800 	mov.w	r8, #0
 800d5b6:	f104 0a1a 	add.w	sl, r4, #26
 800d5ba:	e7f2      	b.n	800d5a2 <_printf_float+0x422>
 800d5bc:	2301      	movs	r3, #1
 800d5be:	4642      	mov	r2, r8
 800d5c0:	e7df      	b.n	800d582 <_printf_float+0x402>
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	464a      	mov	r2, r9
 800d5c6:	4631      	mov	r1, r6
 800d5c8:	4628      	mov	r0, r5
 800d5ca:	47b8      	blx	r7
 800d5cc:	3001      	adds	r0, #1
 800d5ce:	f43f ae38 	beq.w	800d242 <_printf_float+0xc2>
 800d5d2:	f108 0801 	add.w	r8, r8, #1
 800d5d6:	68e3      	ldr	r3, [r4, #12]
 800d5d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d5da:	1a5b      	subs	r3, r3, r1
 800d5dc:	4543      	cmp	r3, r8
 800d5de:	dcf0      	bgt.n	800d5c2 <_printf_float+0x442>
 800d5e0:	e6fa      	b.n	800d3d8 <_printf_float+0x258>
 800d5e2:	f04f 0800 	mov.w	r8, #0
 800d5e6:	f104 0919 	add.w	r9, r4, #25
 800d5ea:	e7f4      	b.n	800d5d6 <_printf_float+0x456>

0800d5ec <_printf_common>:
 800d5ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5f0:	4616      	mov	r6, r2
 800d5f2:	4699      	mov	r9, r3
 800d5f4:	688a      	ldr	r2, [r1, #8]
 800d5f6:	690b      	ldr	r3, [r1, #16]
 800d5f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d5fc:	4293      	cmp	r3, r2
 800d5fe:	bfb8      	it	lt
 800d600:	4613      	movlt	r3, r2
 800d602:	6033      	str	r3, [r6, #0]
 800d604:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d608:	4607      	mov	r7, r0
 800d60a:	460c      	mov	r4, r1
 800d60c:	b10a      	cbz	r2, 800d612 <_printf_common+0x26>
 800d60e:	3301      	adds	r3, #1
 800d610:	6033      	str	r3, [r6, #0]
 800d612:	6823      	ldr	r3, [r4, #0]
 800d614:	0699      	lsls	r1, r3, #26
 800d616:	bf42      	ittt	mi
 800d618:	6833      	ldrmi	r3, [r6, #0]
 800d61a:	3302      	addmi	r3, #2
 800d61c:	6033      	strmi	r3, [r6, #0]
 800d61e:	6825      	ldr	r5, [r4, #0]
 800d620:	f015 0506 	ands.w	r5, r5, #6
 800d624:	d106      	bne.n	800d634 <_printf_common+0x48>
 800d626:	f104 0a19 	add.w	sl, r4, #25
 800d62a:	68e3      	ldr	r3, [r4, #12]
 800d62c:	6832      	ldr	r2, [r6, #0]
 800d62e:	1a9b      	subs	r3, r3, r2
 800d630:	42ab      	cmp	r3, r5
 800d632:	dc26      	bgt.n	800d682 <_printf_common+0x96>
 800d634:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d638:	1e13      	subs	r3, r2, #0
 800d63a:	6822      	ldr	r2, [r4, #0]
 800d63c:	bf18      	it	ne
 800d63e:	2301      	movne	r3, #1
 800d640:	0692      	lsls	r2, r2, #26
 800d642:	d42b      	bmi.n	800d69c <_printf_common+0xb0>
 800d644:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d648:	4649      	mov	r1, r9
 800d64a:	4638      	mov	r0, r7
 800d64c:	47c0      	blx	r8
 800d64e:	3001      	adds	r0, #1
 800d650:	d01e      	beq.n	800d690 <_printf_common+0xa4>
 800d652:	6823      	ldr	r3, [r4, #0]
 800d654:	68e5      	ldr	r5, [r4, #12]
 800d656:	6832      	ldr	r2, [r6, #0]
 800d658:	f003 0306 	and.w	r3, r3, #6
 800d65c:	2b04      	cmp	r3, #4
 800d65e:	bf08      	it	eq
 800d660:	1aad      	subeq	r5, r5, r2
 800d662:	68a3      	ldr	r3, [r4, #8]
 800d664:	6922      	ldr	r2, [r4, #16]
 800d666:	bf0c      	ite	eq
 800d668:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d66c:	2500      	movne	r5, #0
 800d66e:	4293      	cmp	r3, r2
 800d670:	bfc4      	itt	gt
 800d672:	1a9b      	subgt	r3, r3, r2
 800d674:	18ed      	addgt	r5, r5, r3
 800d676:	2600      	movs	r6, #0
 800d678:	341a      	adds	r4, #26
 800d67a:	42b5      	cmp	r5, r6
 800d67c:	d11a      	bne.n	800d6b4 <_printf_common+0xc8>
 800d67e:	2000      	movs	r0, #0
 800d680:	e008      	b.n	800d694 <_printf_common+0xa8>
 800d682:	2301      	movs	r3, #1
 800d684:	4652      	mov	r2, sl
 800d686:	4649      	mov	r1, r9
 800d688:	4638      	mov	r0, r7
 800d68a:	47c0      	blx	r8
 800d68c:	3001      	adds	r0, #1
 800d68e:	d103      	bne.n	800d698 <_printf_common+0xac>
 800d690:	f04f 30ff 	mov.w	r0, #4294967295
 800d694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d698:	3501      	adds	r5, #1
 800d69a:	e7c6      	b.n	800d62a <_printf_common+0x3e>
 800d69c:	18e1      	adds	r1, r4, r3
 800d69e:	1c5a      	adds	r2, r3, #1
 800d6a0:	2030      	movs	r0, #48	; 0x30
 800d6a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d6a6:	4422      	add	r2, r4
 800d6a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d6ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d6b0:	3302      	adds	r3, #2
 800d6b2:	e7c7      	b.n	800d644 <_printf_common+0x58>
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	4622      	mov	r2, r4
 800d6b8:	4649      	mov	r1, r9
 800d6ba:	4638      	mov	r0, r7
 800d6bc:	47c0      	blx	r8
 800d6be:	3001      	adds	r0, #1
 800d6c0:	d0e6      	beq.n	800d690 <_printf_common+0xa4>
 800d6c2:	3601      	adds	r6, #1
 800d6c4:	e7d9      	b.n	800d67a <_printf_common+0x8e>
	...

0800d6c8 <_printf_i>:
 800d6c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d6cc:	460c      	mov	r4, r1
 800d6ce:	4691      	mov	r9, r2
 800d6d0:	7e27      	ldrb	r7, [r4, #24]
 800d6d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d6d4:	2f78      	cmp	r7, #120	; 0x78
 800d6d6:	4680      	mov	r8, r0
 800d6d8:	469a      	mov	sl, r3
 800d6da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d6de:	d807      	bhi.n	800d6f0 <_printf_i+0x28>
 800d6e0:	2f62      	cmp	r7, #98	; 0x62
 800d6e2:	d80a      	bhi.n	800d6fa <_printf_i+0x32>
 800d6e4:	2f00      	cmp	r7, #0
 800d6e6:	f000 80d8 	beq.w	800d89a <_printf_i+0x1d2>
 800d6ea:	2f58      	cmp	r7, #88	; 0x58
 800d6ec:	f000 80a3 	beq.w	800d836 <_printf_i+0x16e>
 800d6f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d6f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d6f8:	e03a      	b.n	800d770 <_printf_i+0xa8>
 800d6fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d6fe:	2b15      	cmp	r3, #21
 800d700:	d8f6      	bhi.n	800d6f0 <_printf_i+0x28>
 800d702:	a001      	add	r0, pc, #4	; (adr r0, 800d708 <_printf_i+0x40>)
 800d704:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d708:	0800d761 	.word	0x0800d761
 800d70c:	0800d775 	.word	0x0800d775
 800d710:	0800d6f1 	.word	0x0800d6f1
 800d714:	0800d6f1 	.word	0x0800d6f1
 800d718:	0800d6f1 	.word	0x0800d6f1
 800d71c:	0800d6f1 	.word	0x0800d6f1
 800d720:	0800d775 	.word	0x0800d775
 800d724:	0800d6f1 	.word	0x0800d6f1
 800d728:	0800d6f1 	.word	0x0800d6f1
 800d72c:	0800d6f1 	.word	0x0800d6f1
 800d730:	0800d6f1 	.word	0x0800d6f1
 800d734:	0800d881 	.word	0x0800d881
 800d738:	0800d7a5 	.word	0x0800d7a5
 800d73c:	0800d863 	.word	0x0800d863
 800d740:	0800d6f1 	.word	0x0800d6f1
 800d744:	0800d6f1 	.word	0x0800d6f1
 800d748:	0800d8a3 	.word	0x0800d8a3
 800d74c:	0800d6f1 	.word	0x0800d6f1
 800d750:	0800d7a5 	.word	0x0800d7a5
 800d754:	0800d6f1 	.word	0x0800d6f1
 800d758:	0800d6f1 	.word	0x0800d6f1
 800d75c:	0800d86b 	.word	0x0800d86b
 800d760:	680b      	ldr	r3, [r1, #0]
 800d762:	1d1a      	adds	r2, r3, #4
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	600a      	str	r2, [r1, #0]
 800d768:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d76c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d770:	2301      	movs	r3, #1
 800d772:	e0a3      	b.n	800d8bc <_printf_i+0x1f4>
 800d774:	6825      	ldr	r5, [r4, #0]
 800d776:	6808      	ldr	r0, [r1, #0]
 800d778:	062e      	lsls	r6, r5, #24
 800d77a:	f100 0304 	add.w	r3, r0, #4
 800d77e:	d50a      	bpl.n	800d796 <_printf_i+0xce>
 800d780:	6805      	ldr	r5, [r0, #0]
 800d782:	600b      	str	r3, [r1, #0]
 800d784:	2d00      	cmp	r5, #0
 800d786:	da03      	bge.n	800d790 <_printf_i+0xc8>
 800d788:	232d      	movs	r3, #45	; 0x2d
 800d78a:	426d      	negs	r5, r5
 800d78c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d790:	485e      	ldr	r0, [pc, #376]	; (800d90c <_printf_i+0x244>)
 800d792:	230a      	movs	r3, #10
 800d794:	e019      	b.n	800d7ca <_printf_i+0x102>
 800d796:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d79a:	6805      	ldr	r5, [r0, #0]
 800d79c:	600b      	str	r3, [r1, #0]
 800d79e:	bf18      	it	ne
 800d7a0:	b22d      	sxthne	r5, r5
 800d7a2:	e7ef      	b.n	800d784 <_printf_i+0xbc>
 800d7a4:	680b      	ldr	r3, [r1, #0]
 800d7a6:	6825      	ldr	r5, [r4, #0]
 800d7a8:	1d18      	adds	r0, r3, #4
 800d7aa:	6008      	str	r0, [r1, #0]
 800d7ac:	0628      	lsls	r0, r5, #24
 800d7ae:	d501      	bpl.n	800d7b4 <_printf_i+0xec>
 800d7b0:	681d      	ldr	r5, [r3, #0]
 800d7b2:	e002      	b.n	800d7ba <_printf_i+0xf2>
 800d7b4:	0669      	lsls	r1, r5, #25
 800d7b6:	d5fb      	bpl.n	800d7b0 <_printf_i+0xe8>
 800d7b8:	881d      	ldrh	r5, [r3, #0]
 800d7ba:	4854      	ldr	r0, [pc, #336]	; (800d90c <_printf_i+0x244>)
 800d7bc:	2f6f      	cmp	r7, #111	; 0x6f
 800d7be:	bf0c      	ite	eq
 800d7c0:	2308      	moveq	r3, #8
 800d7c2:	230a      	movne	r3, #10
 800d7c4:	2100      	movs	r1, #0
 800d7c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d7ca:	6866      	ldr	r6, [r4, #4]
 800d7cc:	60a6      	str	r6, [r4, #8]
 800d7ce:	2e00      	cmp	r6, #0
 800d7d0:	bfa2      	ittt	ge
 800d7d2:	6821      	ldrge	r1, [r4, #0]
 800d7d4:	f021 0104 	bicge.w	r1, r1, #4
 800d7d8:	6021      	strge	r1, [r4, #0]
 800d7da:	b90d      	cbnz	r5, 800d7e0 <_printf_i+0x118>
 800d7dc:	2e00      	cmp	r6, #0
 800d7de:	d04d      	beq.n	800d87c <_printf_i+0x1b4>
 800d7e0:	4616      	mov	r6, r2
 800d7e2:	fbb5 f1f3 	udiv	r1, r5, r3
 800d7e6:	fb03 5711 	mls	r7, r3, r1, r5
 800d7ea:	5dc7      	ldrb	r7, [r0, r7]
 800d7ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d7f0:	462f      	mov	r7, r5
 800d7f2:	42bb      	cmp	r3, r7
 800d7f4:	460d      	mov	r5, r1
 800d7f6:	d9f4      	bls.n	800d7e2 <_printf_i+0x11a>
 800d7f8:	2b08      	cmp	r3, #8
 800d7fa:	d10b      	bne.n	800d814 <_printf_i+0x14c>
 800d7fc:	6823      	ldr	r3, [r4, #0]
 800d7fe:	07df      	lsls	r7, r3, #31
 800d800:	d508      	bpl.n	800d814 <_printf_i+0x14c>
 800d802:	6923      	ldr	r3, [r4, #16]
 800d804:	6861      	ldr	r1, [r4, #4]
 800d806:	4299      	cmp	r1, r3
 800d808:	bfde      	ittt	le
 800d80a:	2330      	movle	r3, #48	; 0x30
 800d80c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d810:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d814:	1b92      	subs	r2, r2, r6
 800d816:	6122      	str	r2, [r4, #16]
 800d818:	f8cd a000 	str.w	sl, [sp]
 800d81c:	464b      	mov	r3, r9
 800d81e:	aa03      	add	r2, sp, #12
 800d820:	4621      	mov	r1, r4
 800d822:	4640      	mov	r0, r8
 800d824:	f7ff fee2 	bl	800d5ec <_printf_common>
 800d828:	3001      	adds	r0, #1
 800d82a:	d14c      	bne.n	800d8c6 <_printf_i+0x1fe>
 800d82c:	f04f 30ff 	mov.w	r0, #4294967295
 800d830:	b004      	add	sp, #16
 800d832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d836:	4835      	ldr	r0, [pc, #212]	; (800d90c <_printf_i+0x244>)
 800d838:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d83c:	6823      	ldr	r3, [r4, #0]
 800d83e:	680e      	ldr	r6, [r1, #0]
 800d840:	061f      	lsls	r7, r3, #24
 800d842:	f856 5b04 	ldr.w	r5, [r6], #4
 800d846:	600e      	str	r6, [r1, #0]
 800d848:	d514      	bpl.n	800d874 <_printf_i+0x1ac>
 800d84a:	07d9      	lsls	r1, r3, #31
 800d84c:	bf44      	itt	mi
 800d84e:	f043 0320 	orrmi.w	r3, r3, #32
 800d852:	6023      	strmi	r3, [r4, #0]
 800d854:	b91d      	cbnz	r5, 800d85e <_printf_i+0x196>
 800d856:	6823      	ldr	r3, [r4, #0]
 800d858:	f023 0320 	bic.w	r3, r3, #32
 800d85c:	6023      	str	r3, [r4, #0]
 800d85e:	2310      	movs	r3, #16
 800d860:	e7b0      	b.n	800d7c4 <_printf_i+0xfc>
 800d862:	6823      	ldr	r3, [r4, #0]
 800d864:	f043 0320 	orr.w	r3, r3, #32
 800d868:	6023      	str	r3, [r4, #0]
 800d86a:	2378      	movs	r3, #120	; 0x78
 800d86c:	4828      	ldr	r0, [pc, #160]	; (800d910 <_printf_i+0x248>)
 800d86e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d872:	e7e3      	b.n	800d83c <_printf_i+0x174>
 800d874:	065e      	lsls	r6, r3, #25
 800d876:	bf48      	it	mi
 800d878:	b2ad      	uxthmi	r5, r5
 800d87a:	e7e6      	b.n	800d84a <_printf_i+0x182>
 800d87c:	4616      	mov	r6, r2
 800d87e:	e7bb      	b.n	800d7f8 <_printf_i+0x130>
 800d880:	680b      	ldr	r3, [r1, #0]
 800d882:	6826      	ldr	r6, [r4, #0]
 800d884:	6960      	ldr	r0, [r4, #20]
 800d886:	1d1d      	adds	r5, r3, #4
 800d888:	600d      	str	r5, [r1, #0]
 800d88a:	0635      	lsls	r5, r6, #24
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	d501      	bpl.n	800d894 <_printf_i+0x1cc>
 800d890:	6018      	str	r0, [r3, #0]
 800d892:	e002      	b.n	800d89a <_printf_i+0x1d2>
 800d894:	0671      	lsls	r1, r6, #25
 800d896:	d5fb      	bpl.n	800d890 <_printf_i+0x1c8>
 800d898:	8018      	strh	r0, [r3, #0]
 800d89a:	2300      	movs	r3, #0
 800d89c:	6123      	str	r3, [r4, #16]
 800d89e:	4616      	mov	r6, r2
 800d8a0:	e7ba      	b.n	800d818 <_printf_i+0x150>
 800d8a2:	680b      	ldr	r3, [r1, #0]
 800d8a4:	1d1a      	adds	r2, r3, #4
 800d8a6:	600a      	str	r2, [r1, #0]
 800d8a8:	681e      	ldr	r6, [r3, #0]
 800d8aa:	6862      	ldr	r2, [r4, #4]
 800d8ac:	2100      	movs	r1, #0
 800d8ae:	4630      	mov	r0, r6
 800d8b0:	f7f2 fc9e 	bl	80001f0 <memchr>
 800d8b4:	b108      	cbz	r0, 800d8ba <_printf_i+0x1f2>
 800d8b6:	1b80      	subs	r0, r0, r6
 800d8b8:	6060      	str	r0, [r4, #4]
 800d8ba:	6863      	ldr	r3, [r4, #4]
 800d8bc:	6123      	str	r3, [r4, #16]
 800d8be:	2300      	movs	r3, #0
 800d8c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8c4:	e7a8      	b.n	800d818 <_printf_i+0x150>
 800d8c6:	6923      	ldr	r3, [r4, #16]
 800d8c8:	4632      	mov	r2, r6
 800d8ca:	4649      	mov	r1, r9
 800d8cc:	4640      	mov	r0, r8
 800d8ce:	47d0      	blx	sl
 800d8d0:	3001      	adds	r0, #1
 800d8d2:	d0ab      	beq.n	800d82c <_printf_i+0x164>
 800d8d4:	6823      	ldr	r3, [r4, #0]
 800d8d6:	079b      	lsls	r3, r3, #30
 800d8d8:	d413      	bmi.n	800d902 <_printf_i+0x23a>
 800d8da:	68e0      	ldr	r0, [r4, #12]
 800d8dc:	9b03      	ldr	r3, [sp, #12]
 800d8de:	4298      	cmp	r0, r3
 800d8e0:	bfb8      	it	lt
 800d8e2:	4618      	movlt	r0, r3
 800d8e4:	e7a4      	b.n	800d830 <_printf_i+0x168>
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	4632      	mov	r2, r6
 800d8ea:	4649      	mov	r1, r9
 800d8ec:	4640      	mov	r0, r8
 800d8ee:	47d0      	blx	sl
 800d8f0:	3001      	adds	r0, #1
 800d8f2:	d09b      	beq.n	800d82c <_printf_i+0x164>
 800d8f4:	3501      	adds	r5, #1
 800d8f6:	68e3      	ldr	r3, [r4, #12]
 800d8f8:	9903      	ldr	r1, [sp, #12]
 800d8fa:	1a5b      	subs	r3, r3, r1
 800d8fc:	42ab      	cmp	r3, r5
 800d8fe:	dcf2      	bgt.n	800d8e6 <_printf_i+0x21e>
 800d900:	e7eb      	b.n	800d8da <_printf_i+0x212>
 800d902:	2500      	movs	r5, #0
 800d904:	f104 0619 	add.w	r6, r4, #25
 800d908:	e7f5      	b.n	800d8f6 <_printf_i+0x22e>
 800d90a:	bf00      	nop
 800d90c:	08013844 	.word	0x08013844
 800d910:	08013855 	.word	0x08013855

0800d914 <_scanf_float>:
 800d914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d918:	b087      	sub	sp, #28
 800d91a:	4617      	mov	r7, r2
 800d91c:	9303      	str	r3, [sp, #12]
 800d91e:	688b      	ldr	r3, [r1, #8]
 800d920:	1e5a      	subs	r2, r3, #1
 800d922:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d926:	bf83      	ittte	hi
 800d928:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d92c:	195b      	addhi	r3, r3, r5
 800d92e:	9302      	strhi	r3, [sp, #8]
 800d930:	2300      	movls	r3, #0
 800d932:	bf86      	itte	hi
 800d934:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d938:	608b      	strhi	r3, [r1, #8]
 800d93a:	9302      	strls	r3, [sp, #8]
 800d93c:	680b      	ldr	r3, [r1, #0]
 800d93e:	468b      	mov	fp, r1
 800d940:	2500      	movs	r5, #0
 800d942:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d946:	f84b 3b1c 	str.w	r3, [fp], #28
 800d94a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d94e:	4680      	mov	r8, r0
 800d950:	460c      	mov	r4, r1
 800d952:	465e      	mov	r6, fp
 800d954:	46aa      	mov	sl, r5
 800d956:	46a9      	mov	r9, r5
 800d958:	9501      	str	r5, [sp, #4]
 800d95a:	68a2      	ldr	r2, [r4, #8]
 800d95c:	b152      	cbz	r2, 800d974 <_scanf_float+0x60>
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	781b      	ldrb	r3, [r3, #0]
 800d962:	2b4e      	cmp	r3, #78	; 0x4e
 800d964:	d864      	bhi.n	800da30 <_scanf_float+0x11c>
 800d966:	2b40      	cmp	r3, #64	; 0x40
 800d968:	d83c      	bhi.n	800d9e4 <_scanf_float+0xd0>
 800d96a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800d96e:	b2c8      	uxtb	r0, r1
 800d970:	280e      	cmp	r0, #14
 800d972:	d93a      	bls.n	800d9ea <_scanf_float+0xd6>
 800d974:	f1b9 0f00 	cmp.w	r9, #0
 800d978:	d003      	beq.n	800d982 <_scanf_float+0x6e>
 800d97a:	6823      	ldr	r3, [r4, #0]
 800d97c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d980:	6023      	str	r3, [r4, #0]
 800d982:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d986:	f1ba 0f01 	cmp.w	sl, #1
 800d98a:	f200 8113 	bhi.w	800dbb4 <_scanf_float+0x2a0>
 800d98e:	455e      	cmp	r6, fp
 800d990:	f200 8105 	bhi.w	800db9e <_scanf_float+0x28a>
 800d994:	2501      	movs	r5, #1
 800d996:	4628      	mov	r0, r5
 800d998:	b007      	add	sp, #28
 800d99a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d99e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800d9a2:	2a0d      	cmp	r2, #13
 800d9a4:	d8e6      	bhi.n	800d974 <_scanf_float+0x60>
 800d9a6:	a101      	add	r1, pc, #4	; (adr r1, 800d9ac <_scanf_float+0x98>)
 800d9a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d9ac:	0800daeb 	.word	0x0800daeb
 800d9b0:	0800d975 	.word	0x0800d975
 800d9b4:	0800d975 	.word	0x0800d975
 800d9b8:	0800d975 	.word	0x0800d975
 800d9bc:	0800db4b 	.word	0x0800db4b
 800d9c0:	0800db23 	.word	0x0800db23
 800d9c4:	0800d975 	.word	0x0800d975
 800d9c8:	0800d975 	.word	0x0800d975
 800d9cc:	0800daf9 	.word	0x0800daf9
 800d9d0:	0800d975 	.word	0x0800d975
 800d9d4:	0800d975 	.word	0x0800d975
 800d9d8:	0800d975 	.word	0x0800d975
 800d9dc:	0800d975 	.word	0x0800d975
 800d9e0:	0800dab1 	.word	0x0800dab1
 800d9e4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d9e8:	e7db      	b.n	800d9a2 <_scanf_float+0x8e>
 800d9ea:	290e      	cmp	r1, #14
 800d9ec:	d8c2      	bhi.n	800d974 <_scanf_float+0x60>
 800d9ee:	a001      	add	r0, pc, #4	; (adr r0, 800d9f4 <_scanf_float+0xe0>)
 800d9f0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d9f4:	0800daa3 	.word	0x0800daa3
 800d9f8:	0800d975 	.word	0x0800d975
 800d9fc:	0800daa3 	.word	0x0800daa3
 800da00:	0800db37 	.word	0x0800db37
 800da04:	0800d975 	.word	0x0800d975
 800da08:	0800da51 	.word	0x0800da51
 800da0c:	0800da8d 	.word	0x0800da8d
 800da10:	0800da8d 	.word	0x0800da8d
 800da14:	0800da8d 	.word	0x0800da8d
 800da18:	0800da8d 	.word	0x0800da8d
 800da1c:	0800da8d 	.word	0x0800da8d
 800da20:	0800da8d 	.word	0x0800da8d
 800da24:	0800da8d 	.word	0x0800da8d
 800da28:	0800da8d 	.word	0x0800da8d
 800da2c:	0800da8d 	.word	0x0800da8d
 800da30:	2b6e      	cmp	r3, #110	; 0x6e
 800da32:	d809      	bhi.n	800da48 <_scanf_float+0x134>
 800da34:	2b60      	cmp	r3, #96	; 0x60
 800da36:	d8b2      	bhi.n	800d99e <_scanf_float+0x8a>
 800da38:	2b54      	cmp	r3, #84	; 0x54
 800da3a:	d077      	beq.n	800db2c <_scanf_float+0x218>
 800da3c:	2b59      	cmp	r3, #89	; 0x59
 800da3e:	d199      	bne.n	800d974 <_scanf_float+0x60>
 800da40:	2d07      	cmp	r5, #7
 800da42:	d197      	bne.n	800d974 <_scanf_float+0x60>
 800da44:	2508      	movs	r5, #8
 800da46:	e029      	b.n	800da9c <_scanf_float+0x188>
 800da48:	2b74      	cmp	r3, #116	; 0x74
 800da4a:	d06f      	beq.n	800db2c <_scanf_float+0x218>
 800da4c:	2b79      	cmp	r3, #121	; 0x79
 800da4e:	e7f6      	b.n	800da3e <_scanf_float+0x12a>
 800da50:	6821      	ldr	r1, [r4, #0]
 800da52:	05c8      	lsls	r0, r1, #23
 800da54:	d51a      	bpl.n	800da8c <_scanf_float+0x178>
 800da56:	9b02      	ldr	r3, [sp, #8]
 800da58:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800da5c:	6021      	str	r1, [r4, #0]
 800da5e:	f109 0901 	add.w	r9, r9, #1
 800da62:	b11b      	cbz	r3, 800da6c <_scanf_float+0x158>
 800da64:	3b01      	subs	r3, #1
 800da66:	3201      	adds	r2, #1
 800da68:	9302      	str	r3, [sp, #8]
 800da6a:	60a2      	str	r2, [r4, #8]
 800da6c:	68a3      	ldr	r3, [r4, #8]
 800da6e:	3b01      	subs	r3, #1
 800da70:	60a3      	str	r3, [r4, #8]
 800da72:	6923      	ldr	r3, [r4, #16]
 800da74:	3301      	adds	r3, #1
 800da76:	6123      	str	r3, [r4, #16]
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	3b01      	subs	r3, #1
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	607b      	str	r3, [r7, #4]
 800da80:	f340 8084 	ble.w	800db8c <_scanf_float+0x278>
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	3301      	adds	r3, #1
 800da88:	603b      	str	r3, [r7, #0]
 800da8a:	e766      	b.n	800d95a <_scanf_float+0x46>
 800da8c:	eb1a 0f05 	cmn.w	sl, r5
 800da90:	f47f af70 	bne.w	800d974 <_scanf_float+0x60>
 800da94:	6822      	ldr	r2, [r4, #0]
 800da96:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800da9a:	6022      	str	r2, [r4, #0]
 800da9c:	f806 3b01 	strb.w	r3, [r6], #1
 800daa0:	e7e4      	b.n	800da6c <_scanf_float+0x158>
 800daa2:	6822      	ldr	r2, [r4, #0]
 800daa4:	0610      	lsls	r0, r2, #24
 800daa6:	f57f af65 	bpl.w	800d974 <_scanf_float+0x60>
 800daaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800daae:	e7f4      	b.n	800da9a <_scanf_float+0x186>
 800dab0:	f1ba 0f00 	cmp.w	sl, #0
 800dab4:	d10e      	bne.n	800dad4 <_scanf_float+0x1c0>
 800dab6:	f1b9 0f00 	cmp.w	r9, #0
 800daba:	d10e      	bne.n	800dada <_scanf_float+0x1c6>
 800dabc:	6822      	ldr	r2, [r4, #0]
 800dabe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800dac2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800dac6:	d108      	bne.n	800dada <_scanf_float+0x1c6>
 800dac8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dacc:	6022      	str	r2, [r4, #0]
 800dace:	f04f 0a01 	mov.w	sl, #1
 800dad2:	e7e3      	b.n	800da9c <_scanf_float+0x188>
 800dad4:	f1ba 0f02 	cmp.w	sl, #2
 800dad8:	d055      	beq.n	800db86 <_scanf_float+0x272>
 800dada:	2d01      	cmp	r5, #1
 800dadc:	d002      	beq.n	800dae4 <_scanf_float+0x1d0>
 800dade:	2d04      	cmp	r5, #4
 800dae0:	f47f af48 	bne.w	800d974 <_scanf_float+0x60>
 800dae4:	3501      	adds	r5, #1
 800dae6:	b2ed      	uxtb	r5, r5
 800dae8:	e7d8      	b.n	800da9c <_scanf_float+0x188>
 800daea:	f1ba 0f01 	cmp.w	sl, #1
 800daee:	f47f af41 	bne.w	800d974 <_scanf_float+0x60>
 800daf2:	f04f 0a02 	mov.w	sl, #2
 800daf6:	e7d1      	b.n	800da9c <_scanf_float+0x188>
 800daf8:	b97d      	cbnz	r5, 800db1a <_scanf_float+0x206>
 800dafa:	f1b9 0f00 	cmp.w	r9, #0
 800dafe:	f47f af3c 	bne.w	800d97a <_scanf_float+0x66>
 800db02:	6822      	ldr	r2, [r4, #0]
 800db04:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800db08:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800db0c:	f47f af39 	bne.w	800d982 <_scanf_float+0x6e>
 800db10:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800db14:	6022      	str	r2, [r4, #0]
 800db16:	2501      	movs	r5, #1
 800db18:	e7c0      	b.n	800da9c <_scanf_float+0x188>
 800db1a:	2d03      	cmp	r5, #3
 800db1c:	d0e2      	beq.n	800dae4 <_scanf_float+0x1d0>
 800db1e:	2d05      	cmp	r5, #5
 800db20:	e7de      	b.n	800dae0 <_scanf_float+0x1cc>
 800db22:	2d02      	cmp	r5, #2
 800db24:	f47f af26 	bne.w	800d974 <_scanf_float+0x60>
 800db28:	2503      	movs	r5, #3
 800db2a:	e7b7      	b.n	800da9c <_scanf_float+0x188>
 800db2c:	2d06      	cmp	r5, #6
 800db2e:	f47f af21 	bne.w	800d974 <_scanf_float+0x60>
 800db32:	2507      	movs	r5, #7
 800db34:	e7b2      	b.n	800da9c <_scanf_float+0x188>
 800db36:	6822      	ldr	r2, [r4, #0]
 800db38:	0591      	lsls	r1, r2, #22
 800db3a:	f57f af1b 	bpl.w	800d974 <_scanf_float+0x60>
 800db3e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800db42:	6022      	str	r2, [r4, #0]
 800db44:	f8cd 9004 	str.w	r9, [sp, #4]
 800db48:	e7a8      	b.n	800da9c <_scanf_float+0x188>
 800db4a:	6822      	ldr	r2, [r4, #0]
 800db4c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800db50:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800db54:	d006      	beq.n	800db64 <_scanf_float+0x250>
 800db56:	0550      	lsls	r0, r2, #21
 800db58:	f57f af0c 	bpl.w	800d974 <_scanf_float+0x60>
 800db5c:	f1b9 0f00 	cmp.w	r9, #0
 800db60:	f43f af0f 	beq.w	800d982 <_scanf_float+0x6e>
 800db64:	0591      	lsls	r1, r2, #22
 800db66:	bf58      	it	pl
 800db68:	9901      	ldrpl	r1, [sp, #4]
 800db6a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800db6e:	bf58      	it	pl
 800db70:	eba9 0101 	subpl.w	r1, r9, r1
 800db74:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800db78:	bf58      	it	pl
 800db7a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800db7e:	6022      	str	r2, [r4, #0]
 800db80:	f04f 0900 	mov.w	r9, #0
 800db84:	e78a      	b.n	800da9c <_scanf_float+0x188>
 800db86:	f04f 0a03 	mov.w	sl, #3
 800db8a:	e787      	b.n	800da9c <_scanf_float+0x188>
 800db8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800db90:	4639      	mov	r1, r7
 800db92:	4640      	mov	r0, r8
 800db94:	4798      	blx	r3
 800db96:	2800      	cmp	r0, #0
 800db98:	f43f aedf 	beq.w	800d95a <_scanf_float+0x46>
 800db9c:	e6ea      	b.n	800d974 <_scanf_float+0x60>
 800db9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dba2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dba6:	463a      	mov	r2, r7
 800dba8:	4640      	mov	r0, r8
 800dbaa:	4798      	blx	r3
 800dbac:	6923      	ldr	r3, [r4, #16]
 800dbae:	3b01      	subs	r3, #1
 800dbb0:	6123      	str	r3, [r4, #16]
 800dbb2:	e6ec      	b.n	800d98e <_scanf_float+0x7a>
 800dbb4:	1e6b      	subs	r3, r5, #1
 800dbb6:	2b06      	cmp	r3, #6
 800dbb8:	d825      	bhi.n	800dc06 <_scanf_float+0x2f2>
 800dbba:	2d02      	cmp	r5, #2
 800dbbc:	d836      	bhi.n	800dc2c <_scanf_float+0x318>
 800dbbe:	455e      	cmp	r6, fp
 800dbc0:	f67f aee8 	bls.w	800d994 <_scanf_float+0x80>
 800dbc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dbc8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dbcc:	463a      	mov	r2, r7
 800dbce:	4640      	mov	r0, r8
 800dbd0:	4798      	blx	r3
 800dbd2:	6923      	ldr	r3, [r4, #16]
 800dbd4:	3b01      	subs	r3, #1
 800dbd6:	6123      	str	r3, [r4, #16]
 800dbd8:	e7f1      	b.n	800dbbe <_scanf_float+0x2aa>
 800dbda:	9802      	ldr	r0, [sp, #8]
 800dbdc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dbe0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800dbe4:	9002      	str	r0, [sp, #8]
 800dbe6:	463a      	mov	r2, r7
 800dbe8:	4640      	mov	r0, r8
 800dbea:	4798      	blx	r3
 800dbec:	6923      	ldr	r3, [r4, #16]
 800dbee:	3b01      	subs	r3, #1
 800dbf0:	6123      	str	r3, [r4, #16]
 800dbf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dbf6:	fa5f fa8a 	uxtb.w	sl, sl
 800dbfa:	f1ba 0f02 	cmp.w	sl, #2
 800dbfe:	d1ec      	bne.n	800dbda <_scanf_float+0x2c6>
 800dc00:	3d03      	subs	r5, #3
 800dc02:	b2ed      	uxtb	r5, r5
 800dc04:	1b76      	subs	r6, r6, r5
 800dc06:	6823      	ldr	r3, [r4, #0]
 800dc08:	05da      	lsls	r2, r3, #23
 800dc0a:	d52f      	bpl.n	800dc6c <_scanf_float+0x358>
 800dc0c:	055b      	lsls	r3, r3, #21
 800dc0e:	d510      	bpl.n	800dc32 <_scanf_float+0x31e>
 800dc10:	455e      	cmp	r6, fp
 800dc12:	f67f aebf 	bls.w	800d994 <_scanf_float+0x80>
 800dc16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dc1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dc1e:	463a      	mov	r2, r7
 800dc20:	4640      	mov	r0, r8
 800dc22:	4798      	blx	r3
 800dc24:	6923      	ldr	r3, [r4, #16]
 800dc26:	3b01      	subs	r3, #1
 800dc28:	6123      	str	r3, [r4, #16]
 800dc2a:	e7f1      	b.n	800dc10 <_scanf_float+0x2fc>
 800dc2c:	46aa      	mov	sl, r5
 800dc2e:	9602      	str	r6, [sp, #8]
 800dc30:	e7df      	b.n	800dbf2 <_scanf_float+0x2de>
 800dc32:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800dc36:	6923      	ldr	r3, [r4, #16]
 800dc38:	2965      	cmp	r1, #101	; 0x65
 800dc3a:	f103 33ff 	add.w	r3, r3, #4294967295
 800dc3e:	f106 35ff 	add.w	r5, r6, #4294967295
 800dc42:	6123      	str	r3, [r4, #16]
 800dc44:	d00c      	beq.n	800dc60 <_scanf_float+0x34c>
 800dc46:	2945      	cmp	r1, #69	; 0x45
 800dc48:	d00a      	beq.n	800dc60 <_scanf_float+0x34c>
 800dc4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dc4e:	463a      	mov	r2, r7
 800dc50:	4640      	mov	r0, r8
 800dc52:	4798      	blx	r3
 800dc54:	6923      	ldr	r3, [r4, #16]
 800dc56:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800dc5a:	3b01      	subs	r3, #1
 800dc5c:	1eb5      	subs	r5, r6, #2
 800dc5e:	6123      	str	r3, [r4, #16]
 800dc60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dc64:	463a      	mov	r2, r7
 800dc66:	4640      	mov	r0, r8
 800dc68:	4798      	blx	r3
 800dc6a:	462e      	mov	r6, r5
 800dc6c:	6825      	ldr	r5, [r4, #0]
 800dc6e:	f015 0510 	ands.w	r5, r5, #16
 800dc72:	d158      	bne.n	800dd26 <_scanf_float+0x412>
 800dc74:	7035      	strb	r5, [r6, #0]
 800dc76:	6823      	ldr	r3, [r4, #0]
 800dc78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800dc7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dc80:	d11c      	bne.n	800dcbc <_scanf_float+0x3a8>
 800dc82:	9b01      	ldr	r3, [sp, #4]
 800dc84:	454b      	cmp	r3, r9
 800dc86:	eba3 0209 	sub.w	r2, r3, r9
 800dc8a:	d124      	bne.n	800dcd6 <_scanf_float+0x3c2>
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	4659      	mov	r1, fp
 800dc90:	4640      	mov	r0, r8
 800dc92:	f000 ff2f 	bl	800eaf4 <_strtod_r>
 800dc96:	9b03      	ldr	r3, [sp, #12]
 800dc98:	6821      	ldr	r1, [r4, #0]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	f011 0f02 	tst.w	r1, #2
 800dca0:	ec57 6b10 	vmov	r6, r7, d0
 800dca4:	f103 0204 	add.w	r2, r3, #4
 800dca8:	d020      	beq.n	800dcec <_scanf_float+0x3d8>
 800dcaa:	9903      	ldr	r1, [sp, #12]
 800dcac:	600a      	str	r2, [r1, #0]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	e9c3 6700 	strd	r6, r7, [r3]
 800dcb4:	68e3      	ldr	r3, [r4, #12]
 800dcb6:	3301      	adds	r3, #1
 800dcb8:	60e3      	str	r3, [r4, #12]
 800dcba:	e66c      	b.n	800d996 <_scanf_float+0x82>
 800dcbc:	9b04      	ldr	r3, [sp, #16]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d0e4      	beq.n	800dc8c <_scanf_float+0x378>
 800dcc2:	9905      	ldr	r1, [sp, #20]
 800dcc4:	230a      	movs	r3, #10
 800dcc6:	462a      	mov	r2, r5
 800dcc8:	3101      	adds	r1, #1
 800dcca:	4640      	mov	r0, r8
 800dccc:	f000 ff9c 	bl	800ec08 <_strtol_r>
 800dcd0:	9b04      	ldr	r3, [sp, #16]
 800dcd2:	9e05      	ldr	r6, [sp, #20]
 800dcd4:	1ac2      	subs	r2, r0, r3
 800dcd6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800dcda:	429e      	cmp	r6, r3
 800dcdc:	bf28      	it	cs
 800dcde:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800dce2:	4912      	ldr	r1, [pc, #72]	; (800dd2c <_scanf_float+0x418>)
 800dce4:	4630      	mov	r0, r6
 800dce6:	f000 f83b 	bl	800dd60 <siprintf>
 800dcea:	e7cf      	b.n	800dc8c <_scanf_float+0x378>
 800dcec:	f011 0f04 	tst.w	r1, #4
 800dcf0:	9903      	ldr	r1, [sp, #12]
 800dcf2:	600a      	str	r2, [r1, #0]
 800dcf4:	d1db      	bne.n	800dcae <_scanf_float+0x39a>
 800dcf6:	f8d3 8000 	ldr.w	r8, [r3]
 800dcfa:	ee10 2a10 	vmov	r2, s0
 800dcfe:	ee10 0a10 	vmov	r0, s0
 800dd02:	463b      	mov	r3, r7
 800dd04:	4639      	mov	r1, r7
 800dd06:	f7f2 ff19 	bl	8000b3c <__aeabi_dcmpun>
 800dd0a:	b128      	cbz	r0, 800dd18 <_scanf_float+0x404>
 800dd0c:	4808      	ldr	r0, [pc, #32]	; (800dd30 <_scanf_float+0x41c>)
 800dd0e:	f000 f821 	bl	800dd54 <nanf>
 800dd12:	ed88 0a00 	vstr	s0, [r8]
 800dd16:	e7cd      	b.n	800dcb4 <_scanf_float+0x3a0>
 800dd18:	4630      	mov	r0, r6
 800dd1a:	4639      	mov	r1, r7
 800dd1c:	f7f2 ff6c 	bl	8000bf8 <__aeabi_d2f>
 800dd20:	f8c8 0000 	str.w	r0, [r8]
 800dd24:	e7c6      	b.n	800dcb4 <_scanf_float+0x3a0>
 800dd26:	2500      	movs	r5, #0
 800dd28:	e635      	b.n	800d996 <_scanf_float+0x82>
 800dd2a:	bf00      	nop
 800dd2c:	08013866 	.word	0x08013866
 800dd30:	08013c9b 	.word	0x08013c9b

0800dd34 <_sbrk_r>:
 800dd34:	b538      	push	{r3, r4, r5, lr}
 800dd36:	4d06      	ldr	r5, [pc, #24]	; (800dd50 <_sbrk_r+0x1c>)
 800dd38:	2300      	movs	r3, #0
 800dd3a:	4604      	mov	r4, r0
 800dd3c:	4608      	mov	r0, r1
 800dd3e:	602b      	str	r3, [r5, #0]
 800dd40:	f7f4 ffb0 	bl	8002ca4 <_sbrk>
 800dd44:	1c43      	adds	r3, r0, #1
 800dd46:	d102      	bne.n	800dd4e <_sbrk_r+0x1a>
 800dd48:	682b      	ldr	r3, [r5, #0]
 800dd4a:	b103      	cbz	r3, 800dd4e <_sbrk_r+0x1a>
 800dd4c:	6023      	str	r3, [r4, #0]
 800dd4e:	bd38      	pop	{r3, r4, r5, pc}
 800dd50:	200059c4 	.word	0x200059c4

0800dd54 <nanf>:
 800dd54:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800dd5c <nanf+0x8>
 800dd58:	4770      	bx	lr
 800dd5a:	bf00      	nop
 800dd5c:	7fc00000 	.word	0x7fc00000

0800dd60 <siprintf>:
 800dd60:	b40e      	push	{r1, r2, r3}
 800dd62:	b500      	push	{lr}
 800dd64:	b09c      	sub	sp, #112	; 0x70
 800dd66:	ab1d      	add	r3, sp, #116	; 0x74
 800dd68:	9002      	str	r0, [sp, #8]
 800dd6a:	9006      	str	r0, [sp, #24]
 800dd6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dd70:	4809      	ldr	r0, [pc, #36]	; (800dd98 <siprintf+0x38>)
 800dd72:	9107      	str	r1, [sp, #28]
 800dd74:	9104      	str	r1, [sp, #16]
 800dd76:	4909      	ldr	r1, [pc, #36]	; (800dd9c <siprintf+0x3c>)
 800dd78:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd7c:	9105      	str	r1, [sp, #20]
 800dd7e:	6800      	ldr	r0, [r0, #0]
 800dd80:	9301      	str	r3, [sp, #4]
 800dd82:	a902      	add	r1, sp, #8
 800dd84:	f002 fea6 	bl	8010ad4 <_svfiprintf_r>
 800dd88:	9b02      	ldr	r3, [sp, #8]
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	701a      	strb	r2, [r3, #0]
 800dd8e:	b01c      	add	sp, #112	; 0x70
 800dd90:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd94:	b003      	add	sp, #12
 800dd96:	4770      	bx	lr
 800dd98:	20000038 	.word	0x20000038
 800dd9c:	ffff0208 	.word	0xffff0208

0800dda0 <siscanf>:
 800dda0:	b40e      	push	{r1, r2, r3}
 800dda2:	b510      	push	{r4, lr}
 800dda4:	b09f      	sub	sp, #124	; 0x7c
 800dda6:	ac21      	add	r4, sp, #132	; 0x84
 800dda8:	f44f 7101 	mov.w	r1, #516	; 0x204
 800ddac:	f854 2b04 	ldr.w	r2, [r4], #4
 800ddb0:	9201      	str	r2, [sp, #4]
 800ddb2:	f8ad 101c 	strh.w	r1, [sp, #28]
 800ddb6:	9004      	str	r0, [sp, #16]
 800ddb8:	9008      	str	r0, [sp, #32]
 800ddba:	f7f2 fa11 	bl	80001e0 <strlen>
 800ddbe:	4b0c      	ldr	r3, [pc, #48]	; (800ddf0 <siscanf+0x50>)
 800ddc0:	9005      	str	r0, [sp, #20]
 800ddc2:	9009      	str	r0, [sp, #36]	; 0x24
 800ddc4:	930d      	str	r3, [sp, #52]	; 0x34
 800ddc6:	480b      	ldr	r0, [pc, #44]	; (800ddf4 <siscanf+0x54>)
 800ddc8:	9a01      	ldr	r2, [sp, #4]
 800ddca:	6800      	ldr	r0, [r0, #0]
 800ddcc:	9403      	str	r4, [sp, #12]
 800ddce:	2300      	movs	r3, #0
 800ddd0:	9311      	str	r3, [sp, #68]	; 0x44
 800ddd2:	9316      	str	r3, [sp, #88]	; 0x58
 800ddd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ddd8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800dddc:	a904      	add	r1, sp, #16
 800ddde:	4623      	mov	r3, r4
 800dde0:	f002 ffd2 	bl	8010d88 <__ssvfiscanf_r>
 800dde4:	b01f      	add	sp, #124	; 0x7c
 800dde6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddea:	b003      	add	sp, #12
 800ddec:	4770      	bx	lr
 800ddee:	bf00      	nop
 800ddf0:	0800de1b 	.word	0x0800de1b
 800ddf4:	20000038 	.word	0x20000038

0800ddf8 <__sread>:
 800ddf8:	b510      	push	{r4, lr}
 800ddfa:	460c      	mov	r4, r1
 800ddfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de00:	f003 fa86 	bl	8011310 <_read_r>
 800de04:	2800      	cmp	r0, #0
 800de06:	bfab      	itete	ge
 800de08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800de0a:	89a3      	ldrhlt	r3, [r4, #12]
 800de0c:	181b      	addge	r3, r3, r0
 800de0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800de12:	bfac      	ite	ge
 800de14:	6563      	strge	r3, [r4, #84]	; 0x54
 800de16:	81a3      	strhlt	r3, [r4, #12]
 800de18:	bd10      	pop	{r4, pc}

0800de1a <__seofread>:
 800de1a:	2000      	movs	r0, #0
 800de1c:	4770      	bx	lr

0800de1e <__swrite>:
 800de1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de22:	461f      	mov	r7, r3
 800de24:	898b      	ldrh	r3, [r1, #12]
 800de26:	05db      	lsls	r3, r3, #23
 800de28:	4605      	mov	r5, r0
 800de2a:	460c      	mov	r4, r1
 800de2c:	4616      	mov	r6, r2
 800de2e:	d505      	bpl.n	800de3c <__swrite+0x1e>
 800de30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de34:	2302      	movs	r3, #2
 800de36:	2200      	movs	r2, #0
 800de38:	f002 f8f6 	bl	8010028 <_lseek_r>
 800de3c:	89a3      	ldrh	r3, [r4, #12]
 800de3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800de46:	81a3      	strh	r3, [r4, #12]
 800de48:	4632      	mov	r2, r6
 800de4a:	463b      	mov	r3, r7
 800de4c:	4628      	mov	r0, r5
 800de4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de52:	f000 bedb 	b.w	800ec0c <_write_r>

0800de56 <__sseek>:
 800de56:	b510      	push	{r4, lr}
 800de58:	460c      	mov	r4, r1
 800de5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de5e:	f002 f8e3 	bl	8010028 <_lseek_r>
 800de62:	1c43      	adds	r3, r0, #1
 800de64:	89a3      	ldrh	r3, [r4, #12]
 800de66:	bf15      	itete	ne
 800de68:	6560      	strne	r0, [r4, #84]	; 0x54
 800de6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800de6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800de72:	81a3      	strheq	r3, [r4, #12]
 800de74:	bf18      	it	ne
 800de76:	81a3      	strhne	r3, [r4, #12]
 800de78:	bd10      	pop	{r4, pc}

0800de7a <__sclose>:
 800de7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de7e:	f000 bed7 	b.w	800ec30 <_close_r>

0800de82 <strncmp>:
 800de82:	b510      	push	{r4, lr}
 800de84:	b16a      	cbz	r2, 800dea2 <strncmp+0x20>
 800de86:	3901      	subs	r1, #1
 800de88:	1884      	adds	r4, r0, r2
 800de8a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800de8e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800de92:	4293      	cmp	r3, r2
 800de94:	d103      	bne.n	800de9e <strncmp+0x1c>
 800de96:	42a0      	cmp	r0, r4
 800de98:	d001      	beq.n	800de9e <strncmp+0x1c>
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d1f5      	bne.n	800de8a <strncmp+0x8>
 800de9e:	1a98      	subs	r0, r3, r2
 800dea0:	bd10      	pop	{r4, pc}
 800dea2:	4610      	mov	r0, r2
 800dea4:	e7fc      	b.n	800dea0 <strncmp+0x1e>

0800dea6 <sulp>:
 800dea6:	b570      	push	{r4, r5, r6, lr}
 800dea8:	4604      	mov	r4, r0
 800deaa:	460d      	mov	r5, r1
 800deac:	ec45 4b10 	vmov	d0, r4, r5
 800deb0:	4616      	mov	r6, r2
 800deb2:	f002 fc55 	bl	8010760 <__ulp>
 800deb6:	ec51 0b10 	vmov	r0, r1, d0
 800deba:	b17e      	cbz	r6, 800dedc <sulp+0x36>
 800debc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800dec0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	dd09      	ble.n	800dedc <sulp+0x36>
 800dec8:	051b      	lsls	r3, r3, #20
 800deca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800dece:	2400      	movs	r4, #0
 800ded0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ded4:	4622      	mov	r2, r4
 800ded6:	462b      	mov	r3, r5
 800ded8:	f7f2 fb96 	bl	8000608 <__aeabi_dmul>
 800dedc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dee0 <_strtod_l>:
 800dee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dee4:	b0a3      	sub	sp, #140	; 0x8c
 800dee6:	461f      	mov	r7, r3
 800dee8:	2300      	movs	r3, #0
 800deea:	931e      	str	r3, [sp, #120]	; 0x78
 800deec:	4ba4      	ldr	r3, [pc, #656]	; (800e180 <_strtod_l+0x2a0>)
 800deee:	9219      	str	r2, [sp, #100]	; 0x64
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	9307      	str	r3, [sp, #28]
 800def4:	4604      	mov	r4, r0
 800def6:	4618      	mov	r0, r3
 800def8:	4688      	mov	r8, r1
 800defa:	f7f2 f971 	bl	80001e0 <strlen>
 800defe:	f04f 0a00 	mov.w	sl, #0
 800df02:	4605      	mov	r5, r0
 800df04:	f04f 0b00 	mov.w	fp, #0
 800df08:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800df0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800df0e:	781a      	ldrb	r2, [r3, #0]
 800df10:	2a2b      	cmp	r2, #43	; 0x2b
 800df12:	d04c      	beq.n	800dfae <_strtod_l+0xce>
 800df14:	d839      	bhi.n	800df8a <_strtod_l+0xaa>
 800df16:	2a0d      	cmp	r2, #13
 800df18:	d832      	bhi.n	800df80 <_strtod_l+0xa0>
 800df1a:	2a08      	cmp	r2, #8
 800df1c:	d832      	bhi.n	800df84 <_strtod_l+0xa4>
 800df1e:	2a00      	cmp	r2, #0
 800df20:	d03c      	beq.n	800df9c <_strtod_l+0xbc>
 800df22:	2300      	movs	r3, #0
 800df24:	930e      	str	r3, [sp, #56]	; 0x38
 800df26:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800df28:	7833      	ldrb	r3, [r6, #0]
 800df2a:	2b30      	cmp	r3, #48	; 0x30
 800df2c:	f040 80b4 	bne.w	800e098 <_strtod_l+0x1b8>
 800df30:	7873      	ldrb	r3, [r6, #1]
 800df32:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800df36:	2b58      	cmp	r3, #88	; 0x58
 800df38:	d16c      	bne.n	800e014 <_strtod_l+0x134>
 800df3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df3c:	9301      	str	r3, [sp, #4]
 800df3e:	ab1e      	add	r3, sp, #120	; 0x78
 800df40:	9702      	str	r7, [sp, #8]
 800df42:	9300      	str	r3, [sp, #0]
 800df44:	4a8f      	ldr	r2, [pc, #572]	; (800e184 <_strtod_l+0x2a4>)
 800df46:	ab1f      	add	r3, sp, #124	; 0x7c
 800df48:	a91d      	add	r1, sp, #116	; 0x74
 800df4a:	4620      	mov	r0, r4
 800df4c:	f001 fd60 	bl	800fa10 <__gethex>
 800df50:	f010 0707 	ands.w	r7, r0, #7
 800df54:	4605      	mov	r5, r0
 800df56:	d005      	beq.n	800df64 <_strtod_l+0x84>
 800df58:	2f06      	cmp	r7, #6
 800df5a:	d12a      	bne.n	800dfb2 <_strtod_l+0xd2>
 800df5c:	3601      	adds	r6, #1
 800df5e:	2300      	movs	r3, #0
 800df60:	961d      	str	r6, [sp, #116]	; 0x74
 800df62:	930e      	str	r3, [sp, #56]	; 0x38
 800df64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800df66:	2b00      	cmp	r3, #0
 800df68:	f040 8596 	bne.w	800ea98 <_strtod_l+0xbb8>
 800df6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df6e:	b1db      	cbz	r3, 800dfa8 <_strtod_l+0xc8>
 800df70:	4652      	mov	r2, sl
 800df72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800df76:	ec43 2b10 	vmov	d0, r2, r3
 800df7a:	b023      	add	sp, #140	; 0x8c
 800df7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df80:	2a20      	cmp	r2, #32
 800df82:	d1ce      	bne.n	800df22 <_strtod_l+0x42>
 800df84:	3301      	adds	r3, #1
 800df86:	931d      	str	r3, [sp, #116]	; 0x74
 800df88:	e7c0      	b.n	800df0c <_strtod_l+0x2c>
 800df8a:	2a2d      	cmp	r2, #45	; 0x2d
 800df8c:	d1c9      	bne.n	800df22 <_strtod_l+0x42>
 800df8e:	2201      	movs	r2, #1
 800df90:	920e      	str	r2, [sp, #56]	; 0x38
 800df92:	1c5a      	adds	r2, r3, #1
 800df94:	921d      	str	r2, [sp, #116]	; 0x74
 800df96:	785b      	ldrb	r3, [r3, #1]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d1c4      	bne.n	800df26 <_strtod_l+0x46>
 800df9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800df9e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	f040 8576 	bne.w	800ea94 <_strtod_l+0xbb4>
 800dfa8:	4652      	mov	r2, sl
 800dfaa:	465b      	mov	r3, fp
 800dfac:	e7e3      	b.n	800df76 <_strtod_l+0x96>
 800dfae:	2200      	movs	r2, #0
 800dfb0:	e7ee      	b.n	800df90 <_strtod_l+0xb0>
 800dfb2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800dfb4:	b13a      	cbz	r2, 800dfc6 <_strtod_l+0xe6>
 800dfb6:	2135      	movs	r1, #53	; 0x35
 800dfb8:	a820      	add	r0, sp, #128	; 0x80
 800dfba:	f002 fcdc 	bl	8010976 <__copybits>
 800dfbe:	991e      	ldr	r1, [sp, #120]	; 0x78
 800dfc0:	4620      	mov	r0, r4
 800dfc2:	f002 f8a1 	bl	8010108 <_Bfree>
 800dfc6:	3f01      	subs	r7, #1
 800dfc8:	2f05      	cmp	r7, #5
 800dfca:	d807      	bhi.n	800dfdc <_strtod_l+0xfc>
 800dfcc:	e8df f007 	tbb	[pc, r7]
 800dfd0:	1d180b0e 	.word	0x1d180b0e
 800dfd4:	030e      	.short	0x030e
 800dfd6:	f04f 0b00 	mov.w	fp, #0
 800dfda:	46da      	mov	sl, fp
 800dfdc:	0728      	lsls	r0, r5, #28
 800dfde:	d5c1      	bpl.n	800df64 <_strtod_l+0x84>
 800dfe0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800dfe4:	e7be      	b.n	800df64 <_strtod_l+0x84>
 800dfe6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800dfea:	e7f7      	b.n	800dfdc <_strtod_l+0xfc>
 800dfec:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800dff0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800dff2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800dff6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800dffa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800dffe:	e7ed      	b.n	800dfdc <_strtod_l+0xfc>
 800e000:	f8df b184 	ldr.w	fp, [pc, #388]	; 800e188 <_strtod_l+0x2a8>
 800e004:	f04f 0a00 	mov.w	sl, #0
 800e008:	e7e8      	b.n	800dfdc <_strtod_l+0xfc>
 800e00a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e00e:	f04f 3aff 	mov.w	sl, #4294967295
 800e012:	e7e3      	b.n	800dfdc <_strtod_l+0xfc>
 800e014:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e016:	1c5a      	adds	r2, r3, #1
 800e018:	921d      	str	r2, [sp, #116]	; 0x74
 800e01a:	785b      	ldrb	r3, [r3, #1]
 800e01c:	2b30      	cmp	r3, #48	; 0x30
 800e01e:	d0f9      	beq.n	800e014 <_strtod_l+0x134>
 800e020:	2b00      	cmp	r3, #0
 800e022:	d09f      	beq.n	800df64 <_strtod_l+0x84>
 800e024:	2301      	movs	r3, #1
 800e026:	f04f 0900 	mov.w	r9, #0
 800e02a:	9304      	str	r3, [sp, #16]
 800e02c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e02e:	930a      	str	r3, [sp, #40]	; 0x28
 800e030:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e034:	464f      	mov	r7, r9
 800e036:	220a      	movs	r2, #10
 800e038:	981d      	ldr	r0, [sp, #116]	; 0x74
 800e03a:	7806      	ldrb	r6, [r0, #0]
 800e03c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e040:	b2d9      	uxtb	r1, r3
 800e042:	2909      	cmp	r1, #9
 800e044:	d92a      	bls.n	800e09c <_strtod_l+0x1bc>
 800e046:	9907      	ldr	r1, [sp, #28]
 800e048:	462a      	mov	r2, r5
 800e04a:	f7ff ff1a 	bl	800de82 <strncmp>
 800e04e:	b398      	cbz	r0, 800e0b8 <_strtod_l+0x1d8>
 800e050:	2000      	movs	r0, #0
 800e052:	4633      	mov	r3, r6
 800e054:	463d      	mov	r5, r7
 800e056:	9007      	str	r0, [sp, #28]
 800e058:	4602      	mov	r2, r0
 800e05a:	2b65      	cmp	r3, #101	; 0x65
 800e05c:	d001      	beq.n	800e062 <_strtod_l+0x182>
 800e05e:	2b45      	cmp	r3, #69	; 0x45
 800e060:	d118      	bne.n	800e094 <_strtod_l+0x1b4>
 800e062:	b91d      	cbnz	r5, 800e06c <_strtod_l+0x18c>
 800e064:	9b04      	ldr	r3, [sp, #16]
 800e066:	4303      	orrs	r3, r0
 800e068:	d098      	beq.n	800df9c <_strtod_l+0xbc>
 800e06a:	2500      	movs	r5, #0
 800e06c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800e070:	f108 0301 	add.w	r3, r8, #1
 800e074:	931d      	str	r3, [sp, #116]	; 0x74
 800e076:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e07a:	2b2b      	cmp	r3, #43	; 0x2b
 800e07c:	d075      	beq.n	800e16a <_strtod_l+0x28a>
 800e07e:	2b2d      	cmp	r3, #45	; 0x2d
 800e080:	d07b      	beq.n	800e17a <_strtod_l+0x29a>
 800e082:	f04f 0c00 	mov.w	ip, #0
 800e086:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e08a:	2909      	cmp	r1, #9
 800e08c:	f240 8082 	bls.w	800e194 <_strtod_l+0x2b4>
 800e090:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e094:	2600      	movs	r6, #0
 800e096:	e09d      	b.n	800e1d4 <_strtod_l+0x2f4>
 800e098:	2300      	movs	r3, #0
 800e09a:	e7c4      	b.n	800e026 <_strtod_l+0x146>
 800e09c:	2f08      	cmp	r7, #8
 800e09e:	bfd8      	it	le
 800e0a0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e0a2:	f100 0001 	add.w	r0, r0, #1
 800e0a6:	bfda      	itte	le
 800e0a8:	fb02 3301 	mlale	r3, r2, r1, r3
 800e0ac:	9309      	strle	r3, [sp, #36]	; 0x24
 800e0ae:	fb02 3909 	mlagt	r9, r2, r9, r3
 800e0b2:	3701      	adds	r7, #1
 800e0b4:	901d      	str	r0, [sp, #116]	; 0x74
 800e0b6:	e7bf      	b.n	800e038 <_strtod_l+0x158>
 800e0b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e0ba:	195a      	adds	r2, r3, r5
 800e0bc:	921d      	str	r2, [sp, #116]	; 0x74
 800e0be:	5d5b      	ldrb	r3, [r3, r5]
 800e0c0:	2f00      	cmp	r7, #0
 800e0c2:	d037      	beq.n	800e134 <_strtod_l+0x254>
 800e0c4:	9007      	str	r0, [sp, #28]
 800e0c6:	463d      	mov	r5, r7
 800e0c8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800e0cc:	2a09      	cmp	r2, #9
 800e0ce:	d912      	bls.n	800e0f6 <_strtod_l+0x216>
 800e0d0:	2201      	movs	r2, #1
 800e0d2:	e7c2      	b.n	800e05a <_strtod_l+0x17a>
 800e0d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e0d6:	1c5a      	adds	r2, r3, #1
 800e0d8:	921d      	str	r2, [sp, #116]	; 0x74
 800e0da:	785b      	ldrb	r3, [r3, #1]
 800e0dc:	3001      	adds	r0, #1
 800e0de:	2b30      	cmp	r3, #48	; 0x30
 800e0e0:	d0f8      	beq.n	800e0d4 <_strtod_l+0x1f4>
 800e0e2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e0e6:	2a08      	cmp	r2, #8
 800e0e8:	f200 84db 	bhi.w	800eaa2 <_strtod_l+0xbc2>
 800e0ec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e0ee:	9007      	str	r0, [sp, #28]
 800e0f0:	2000      	movs	r0, #0
 800e0f2:	920a      	str	r2, [sp, #40]	; 0x28
 800e0f4:	4605      	mov	r5, r0
 800e0f6:	3b30      	subs	r3, #48	; 0x30
 800e0f8:	f100 0201 	add.w	r2, r0, #1
 800e0fc:	d014      	beq.n	800e128 <_strtod_l+0x248>
 800e0fe:	9907      	ldr	r1, [sp, #28]
 800e100:	4411      	add	r1, r2
 800e102:	9107      	str	r1, [sp, #28]
 800e104:	462a      	mov	r2, r5
 800e106:	eb00 0e05 	add.w	lr, r0, r5
 800e10a:	210a      	movs	r1, #10
 800e10c:	4572      	cmp	r2, lr
 800e10e:	d113      	bne.n	800e138 <_strtod_l+0x258>
 800e110:	182a      	adds	r2, r5, r0
 800e112:	2a08      	cmp	r2, #8
 800e114:	f105 0501 	add.w	r5, r5, #1
 800e118:	4405      	add	r5, r0
 800e11a:	dc1c      	bgt.n	800e156 <_strtod_l+0x276>
 800e11c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e11e:	220a      	movs	r2, #10
 800e120:	fb02 3301 	mla	r3, r2, r1, r3
 800e124:	9309      	str	r3, [sp, #36]	; 0x24
 800e126:	2200      	movs	r2, #0
 800e128:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e12a:	1c59      	adds	r1, r3, #1
 800e12c:	911d      	str	r1, [sp, #116]	; 0x74
 800e12e:	785b      	ldrb	r3, [r3, #1]
 800e130:	4610      	mov	r0, r2
 800e132:	e7c9      	b.n	800e0c8 <_strtod_l+0x1e8>
 800e134:	4638      	mov	r0, r7
 800e136:	e7d2      	b.n	800e0de <_strtod_l+0x1fe>
 800e138:	2a08      	cmp	r2, #8
 800e13a:	dc04      	bgt.n	800e146 <_strtod_l+0x266>
 800e13c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e13e:	434e      	muls	r6, r1
 800e140:	9609      	str	r6, [sp, #36]	; 0x24
 800e142:	3201      	adds	r2, #1
 800e144:	e7e2      	b.n	800e10c <_strtod_l+0x22c>
 800e146:	f102 0c01 	add.w	ip, r2, #1
 800e14a:	f1bc 0f10 	cmp.w	ip, #16
 800e14e:	bfd8      	it	le
 800e150:	fb01 f909 	mulle.w	r9, r1, r9
 800e154:	e7f5      	b.n	800e142 <_strtod_l+0x262>
 800e156:	2d10      	cmp	r5, #16
 800e158:	bfdc      	itt	le
 800e15a:	220a      	movle	r2, #10
 800e15c:	fb02 3909 	mlale	r9, r2, r9, r3
 800e160:	e7e1      	b.n	800e126 <_strtod_l+0x246>
 800e162:	2300      	movs	r3, #0
 800e164:	9307      	str	r3, [sp, #28]
 800e166:	2201      	movs	r2, #1
 800e168:	e77c      	b.n	800e064 <_strtod_l+0x184>
 800e16a:	f04f 0c00 	mov.w	ip, #0
 800e16e:	f108 0302 	add.w	r3, r8, #2
 800e172:	931d      	str	r3, [sp, #116]	; 0x74
 800e174:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e178:	e785      	b.n	800e086 <_strtod_l+0x1a6>
 800e17a:	f04f 0c01 	mov.w	ip, #1
 800e17e:	e7f6      	b.n	800e16e <_strtod_l+0x28e>
 800e180:	08013ac0 	.word	0x08013ac0
 800e184:	0801386c 	.word	0x0801386c
 800e188:	7ff00000 	.word	0x7ff00000
 800e18c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e18e:	1c59      	adds	r1, r3, #1
 800e190:	911d      	str	r1, [sp, #116]	; 0x74
 800e192:	785b      	ldrb	r3, [r3, #1]
 800e194:	2b30      	cmp	r3, #48	; 0x30
 800e196:	d0f9      	beq.n	800e18c <_strtod_l+0x2ac>
 800e198:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800e19c:	2908      	cmp	r1, #8
 800e19e:	f63f af79 	bhi.w	800e094 <_strtod_l+0x1b4>
 800e1a2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800e1a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e1a8:	9308      	str	r3, [sp, #32]
 800e1aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e1ac:	1c59      	adds	r1, r3, #1
 800e1ae:	911d      	str	r1, [sp, #116]	; 0x74
 800e1b0:	785b      	ldrb	r3, [r3, #1]
 800e1b2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800e1b6:	2e09      	cmp	r6, #9
 800e1b8:	d937      	bls.n	800e22a <_strtod_l+0x34a>
 800e1ba:	9e08      	ldr	r6, [sp, #32]
 800e1bc:	1b89      	subs	r1, r1, r6
 800e1be:	2908      	cmp	r1, #8
 800e1c0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e1c4:	dc02      	bgt.n	800e1cc <_strtod_l+0x2ec>
 800e1c6:	4576      	cmp	r6, lr
 800e1c8:	bfa8      	it	ge
 800e1ca:	4676      	movge	r6, lr
 800e1cc:	f1bc 0f00 	cmp.w	ip, #0
 800e1d0:	d000      	beq.n	800e1d4 <_strtod_l+0x2f4>
 800e1d2:	4276      	negs	r6, r6
 800e1d4:	2d00      	cmp	r5, #0
 800e1d6:	d14f      	bne.n	800e278 <_strtod_l+0x398>
 800e1d8:	9904      	ldr	r1, [sp, #16]
 800e1da:	4301      	orrs	r1, r0
 800e1dc:	f47f aec2 	bne.w	800df64 <_strtod_l+0x84>
 800e1e0:	2a00      	cmp	r2, #0
 800e1e2:	f47f aedb 	bne.w	800df9c <_strtod_l+0xbc>
 800e1e6:	2b69      	cmp	r3, #105	; 0x69
 800e1e8:	d027      	beq.n	800e23a <_strtod_l+0x35a>
 800e1ea:	dc24      	bgt.n	800e236 <_strtod_l+0x356>
 800e1ec:	2b49      	cmp	r3, #73	; 0x49
 800e1ee:	d024      	beq.n	800e23a <_strtod_l+0x35a>
 800e1f0:	2b4e      	cmp	r3, #78	; 0x4e
 800e1f2:	f47f aed3 	bne.w	800df9c <_strtod_l+0xbc>
 800e1f6:	499e      	ldr	r1, [pc, #632]	; (800e470 <_strtod_l+0x590>)
 800e1f8:	a81d      	add	r0, sp, #116	; 0x74
 800e1fa:	f001 fe61 	bl	800fec0 <__match>
 800e1fe:	2800      	cmp	r0, #0
 800e200:	f43f aecc 	beq.w	800df9c <_strtod_l+0xbc>
 800e204:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e206:	781b      	ldrb	r3, [r3, #0]
 800e208:	2b28      	cmp	r3, #40	; 0x28
 800e20a:	d12d      	bne.n	800e268 <_strtod_l+0x388>
 800e20c:	4999      	ldr	r1, [pc, #612]	; (800e474 <_strtod_l+0x594>)
 800e20e:	aa20      	add	r2, sp, #128	; 0x80
 800e210:	a81d      	add	r0, sp, #116	; 0x74
 800e212:	f001 fe69 	bl	800fee8 <__hexnan>
 800e216:	2805      	cmp	r0, #5
 800e218:	d126      	bne.n	800e268 <_strtod_l+0x388>
 800e21a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e21c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800e220:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e224:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e228:	e69c      	b.n	800df64 <_strtod_l+0x84>
 800e22a:	210a      	movs	r1, #10
 800e22c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800e230:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e234:	e7b9      	b.n	800e1aa <_strtod_l+0x2ca>
 800e236:	2b6e      	cmp	r3, #110	; 0x6e
 800e238:	e7db      	b.n	800e1f2 <_strtod_l+0x312>
 800e23a:	498f      	ldr	r1, [pc, #572]	; (800e478 <_strtod_l+0x598>)
 800e23c:	a81d      	add	r0, sp, #116	; 0x74
 800e23e:	f001 fe3f 	bl	800fec0 <__match>
 800e242:	2800      	cmp	r0, #0
 800e244:	f43f aeaa 	beq.w	800df9c <_strtod_l+0xbc>
 800e248:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e24a:	498c      	ldr	r1, [pc, #560]	; (800e47c <_strtod_l+0x59c>)
 800e24c:	3b01      	subs	r3, #1
 800e24e:	a81d      	add	r0, sp, #116	; 0x74
 800e250:	931d      	str	r3, [sp, #116]	; 0x74
 800e252:	f001 fe35 	bl	800fec0 <__match>
 800e256:	b910      	cbnz	r0, 800e25e <_strtod_l+0x37e>
 800e258:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e25a:	3301      	adds	r3, #1
 800e25c:	931d      	str	r3, [sp, #116]	; 0x74
 800e25e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800e48c <_strtod_l+0x5ac>
 800e262:	f04f 0a00 	mov.w	sl, #0
 800e266:	e67d      	b.n	800df64 <_strtod_l+0x84>
 800e268:	4885      	ldr	r0, [pc, #532]	; (800e480 <_strtod_l+0x5a0>)
 800e26a:	f003 f865 	bl	8011338 <nan>
 800e26e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e272:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e276:	e675      	b.n	800df64 <_strtod_l+0x84>
 800e278:	9b07      	ldr	r3, [sp, #28]
 800e27a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e27c:	1af3      	subs	r3, r6, r3
 800e27e:	2f00      	cmp	r7, #0
 800e280:	bf08      	it	eq
 800e282:	462f      	moveq	r7, r5
 800e284:	2d10      	cmp	r5, #16
 800e286:	9308      	str	r3, [sp, #32]
 800e288:	46a8      	mov	r8, r5
 800e28a:	bfa8      	it	ge
 800e28c:	f04f 0810 	movge.w	r8, #16
 800e290:	f7f2 f940 	bl	8000514 <__aeabi_ui2d>
 800e294:	2d09      	cmp	r5, #9
 800e296:	4682      	mov	sl, r0
 800e298:	468b      	mov	fp, r1
 800e29a:	dd13      	ble.n	800e2c4 <_strtod_l+0x3e4>
 800e29c:	4b79      	ldr	r3, [pc, #484]	; (800e484 <_strtod_l+0x5a4>)
 800e29e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e2a2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e2a6:	f7f2 f9af 	bl	8000608 <__aeabi_dmul>
 800e2aa:	4682      	mov	sl, r0
 800e2ac:	4648      	mov	r0, r9
 800e2ae:	468b      	mov	fp, r1
 800e2b0:	f7f2 f930 	bl	8000514 <__aeabi_ui2d>
 800e2b4:	4602      	mov	r2, r0
 800e2b6:	460b      	mov	r3, r1
 800e2b8:	4650      	mov	r0, sl
 800e2ba:	4659      	mov	r1, fp
 800e2bc:	f7f1 ffee 	bl	800029c <__adddf3>
 800e2c0:	4682      	mov	sl, r0
 800e2c2:	468b      	mov	fp, r1
 800e2c4:	2d0f      	cmp	r5, #15
 800e2c6:	dc38      	bgt.n	800e33a <_strtod_l+0x45a>
 800e2c8:	9b08      	ldr	r3, [sp, #32]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	f43f ae4a 	beq.w	800df64 <_strtod_l+0x84>
 800e2d0:	dd24      	ble.n	800e31c <_strtod_l+0x43c>
 800e2d2:	2b16      	cmp	r3, #22
 800e2d4:	dc0b      	bgt.n	800e2ee <_strtod_l+0x40e>
 800e2d6:	4d6b      	ldr	r5, [pc, #428]	; (800e484 <_strtod_l+0x5a4>)
 800e2d8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800e2dc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e2e0:	4652      	mov	r2, sl
 800e2e2:	465b      	mov	r3, fp
 800e2e4:	f7f2 f990 	bl	8000608 <__aeabi_dmul>
 800e2e8:	4682      	mov	sl, r0
 800e2ea:	468b      	mov	fp, r1
 800e2ec:	e63a      	b.n	800df64 <_strtod_l+0x84>
 800e2ee:	9a08      	ldr	r2, [sp, #32]
 800e2f0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800e2f4:	4293      	cmp	r3, r2
 800e2f6:	db20      	blt.n	800e33a <_strtod_l+0x45a>
 800e2f8:	4c62      	ldr	r4, [pc, #392]	; (800e484 <_strtod_l+0x5a4>)
 800e2fa:	f1c5 050f 	rsb	r5, r5, #15
 800e2fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e302:	4652      	mov	r2, sl
 800e304:	465b      	mov	r3, fp
 800e306:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e30a:	f7f2 f97d 	bl	8000608 <__aeabi_dmul>
 800e30e:	9b08      	ldr	r3, [sp, #32]
 800e310:	1b5d      	subs	r5, r3, r5
 800e312:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e316:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e31a:	e7e3      	b.n	800e2e4 <_strtod_l+0x404>
 800e31c:	9b08      	ldr	r3, [sp, #32]
 800e31e:	3316      	adds	r3, #22
 800e320:	db0b      	blt.n	800e33a <_strtod_l+0x45a>
 800e322:	9b07      	ldr	r3, [sp, #28]
 800e324:	4a57      	ldr	r2, [pc, #348]	; (800e484 <_strtod_l+0x5a4>)
 800e326:	1b9e      	subs	r6, r3, r6
 800e328:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800e32c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e330:	4650      	mov	r0, sl
 800e332:	4659      	mov	r1, fp
 800e334:	f7f2 fa92 	bl	800085c <__aeabi_ddiv>
 800e338:	e7d6      	b.n	800e2e8 <_strtod_l+0x408>
 800e33a:	9b08      	ldr	r3, [sp, #32]
 800e33c:	eba5 0808 	sub.w	r8, r5, r8
 800e340:	4498      	add	r8, r3
 800e342:	f1b8 0f00 	cmp.w	r8, #0
 800e346:	dd71      	ble.n	800e42c <_strtod_l+0x54c>
 800e348:	f018 030f 	ands.w	r3, r8, #15
 800e34c:	d00a      	beq.n	800e364 <_strtod_l+0x484>
 800e34e:	494d      	ldr	r1, [pc, #308]	; (800e484 <_strtod_l+0x5a4>)
 800e350:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e354:	4652      	mov	r2, sl
 800e356:	465b      	mov	r3, fp
 800e358:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e35c:	f7f2 f954 	bl	8000608 <__aeabi_dmul>
 800e360:	4682      	mov	sl, r0
 800e362:	468b      	mov	fp, r1
 800e364:	f038 080f 	bics.w	r8, r8, #15
 800e368:	d04d      	beq.n	800e406 <_strtod_l+0x526>
 800e36a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e36e:	dd22      	ble.n	800e3b6 <_strtod_l+0x4d6>
 800e370:	2500      	movs	r5, #0
 800e372:	462e      	mov	r6, r5
 800e374:	9509      	str	r5, [sp, #36]	; 0x24
 800e376:	9507      	str	r5, [sp, #28]
 800e378:	2322      	movs	r3, #34	; 0x22
 800e37a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800e48c <_strtod_l+0x5ac>
 800e37e:	6023      	str	r3, [r4, #0]
 800e380:	f04f 0a00 	mov.w	sl, #0
 800e384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e386:	2b00      	cmp	r3, #0
 800e388:	f43f adec 	beq.w	800df64 <_strtod_l+0x84>
 800e38c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e38e:	4620      	mov	r0, r4
 800e390:	f001 feba 	bl	8010108 <_Bfree>
 800e394:	9907      	ldr	r1, [sp, #28]
 800e396:	4620      	mov	r0, r4
 800e398:	f001 feb6 	bl	8010108 <_Bfree>
 800e39c:	4631      	mov	r1, r6
 800e39e:	4620      	mov	r0, r4
 800e3a0:	f001 feb2 	bl	8010108 <_Bfree>
 800e3a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e3a6:	4620      	mov	r0, r4
 800e3a8:	f001 feae 	bl	8010108 <_Bfree>
 800e3ac:	4629      	mov	r1, r5
 800e3ae:	4620      	mov	r0, r4
 800e3b0:	f001 feaa 	bl	8010108 <_Bfree>
 800e3b4:	e5d6      	b.n	800df64 <_strtod_l+0x84>
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e3bc:	4650      	mov	r0, sl
 800e3be:	4659      	mov	r1, fp
 800e3c0:	4699      	mov	r9, r3
 800e3c2:	f1b8 0f01 	cmp.w	r8, #1
 800e3c6:	dc21      	bgt.n	800e40c <_strtod_l+0x52c>
 800e3c8:	b10b      	cbz	r3, 800e3ce <_strtod_l+0x4ee>
 800e3ca:	4682      	mov	sl, r0
 800e3cc:	468b      	mov	fp, r1
 800e3ce:	4b2e      	ldr	r3, [pc, #184]	; (800e488 <_strtod_l+0x5a8>)
 800e3d0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e3d4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e3d8:	4652      	mov	r2, sl
 800e3da:	465b      	mov	r3, fp
 800e3dc:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e3e0:	f7f2 f912 	bl	8000608 <__aeabi_dmul>
 800e3e4:	4b29      	ldr	r3, [pc, #164]	; (800e48c <_strtod_l+0x5ac>)
 800e3e6:	460a      	mov	r2, r1
 800e3e8:	400b      	ands	r3, r1
 800e3ea:	4929      	ldr	r1, [pc, #164]	; (800e490 <_strtod_l+0x5b0>)
 800e3ec:	428b      	cmp	r3, r1
 800e3ee:	4682      	mov	sl, r0
 800e3f0:	d8be      	bhi.n	800e370 <_strtod_l+0x490>
 800e3f2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e3f6:	428b      	cmp	r3, r1
 800e3f8:	bf86      	itte	hi
 800e3fa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800e494 <_strtod_l+0x5b4>
 800e3fe:	f04f 3aff 	movhi.w	sl, #4294967295
 800e402:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e406:	2300      	movs	r3, #0
 800e408:	9304      	str	r3, [sp, #16]
 800e40a:	e081      	b.n	800e510 <_strtod_l+0x630>
 800e40c:	f018 0f01 	tst.w	r8, #1
 800e410:	d007      	beq.n	800e422 <_strtod_l+0x542>
 800e412:	4b1d      	ldr	r3, [pc, #116]	; (800e488 <_strtod_l+0x5a8>)
 800e414:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800e418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e41c:	f7f2 f8f4 	bl	8000608 <__aeabi_dmul>
 800e420:	2301      	movs	r3, #1
 800e422:	f109 0901 	add.w	r9, r9, #1
 800e426:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e42a:	e7ca      	b.n	800e3c2 <_strtod_l+0x4e2>
 800e42c:	d0eb      	beq.n	800e406 <_strtod_l+0x526>
 800e42e:	f1c8 0800 	rsb	r8, r8, #0
 800e432:	f018 020f 	ands.w	r2, r8, #15
 800e436:	d00a      	beq.n	800e44e <_strtod_l+0x56e>
 800e438:	4b12      	ldr	r3, [pc, #72]	; (800e484 <_strtod_l+0x5a4>)
 800e43a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e43e:	4650      	mov	r0, sl
 800e440:	4659      	mov	r1, fp
 800e442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e446:	f7f2 fa09 	bl	800085c <__aeabi_ddiv>
 800e44a:	4682      	mov	sl, r0
 800e44c:	468b      	mov	fp, r1
 800e44e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e452:	d0d8      	beq.n	800e406 <_strtod_l+0x526>
 800e454:	f1b8 0f1f 	cmp.w	r8, #31
 800e458:	dd1e      	ble.n	800e498 <_strtod_l+0x5b8>
 800e45a:	2500      	movs	r5, #0
 800e45c:	462e      	mov	r6, r5
 800e45e:	9509      	str	r5, [sp, #36]	; 0x24
 800e460:	9507      	str	r5, [sp, #28]
 800e462:	2322      	movs	r3, #34	; 0x22
 800e464:	f04f 0a00 	mov.w	sl, #0
 800e468:	f04f 0b00 	mov.w	fp, #0
 800e46c:	6023      	str	r3, [r4, #0]
 800e46e:	e789      	b.n	800e384 <_strtod_l+0x4a4>
 800e470:	08013841 	.word	0x08013841
 800e474:	08013880 	.word	0x08013880
 800e478:	08013839 	.word	0x08013839
 800e47c:	080139c4 	.word	0x080139c4
 800e480:	08013c9b 	.word	0x08013c9b
 800e484:	08013b60 	.word	0x08013b60
 800e488:	08013b38 	.word	0x08013b38
 800e48c:	7ff00000 	.word	0x7ff00000
 800e490:	7ca00000 	.word	0x7ca00000
 800e494:	7fefffff 	.word	0x7fefffff
 800e498:	f018 0310 	ands.w	r3, r8, #16
 800e49c:	bf18      	it	ne
 800e49e:	236a      	movne	r3, #106	; 0x6a
 800e4a0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800e858 <_strtod_l+0x978>
 800e4a4:	9304      	str	r3, [sp, #16]
 800e4a6:	4650      	mov	r0, sl
 800e4a8:	4659      	mov	r1, fp
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	f018 0f01 	tst.w	r8, #1
 800e4b0:	d004      	beq.n	800e4bc <_strtod_l+0x5dc>
 800e4b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e4b6:	f7f2 f8a7 	bl	8000608 <__aeabi_dmul>
 800e4ba:	2301      	movs	r3, #1
 800e4bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800e4c0:	f109 0908 	add.w	r9, r9, #8
 800e4c4:	d1f2      	bne.n	800e4ac <_strtod_l+0x5cc>
 800e4c6:	b10b      	cbz	r3, 800e4cc <_strtod_l+0x5ec>
 800e4c8:	4682      	mov	sl, r0
 800e4ca:	468b      	mov	fp, r1
 800e4cc:	9b04      	ldr	r3, [sp, #16]
 800e4ce:	b1bb      	cbz	r3, 800e500 <_strtod_l+0x620>
 800e4d0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800e4d4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	4659      	mov	r1, fp
 800e4dc:	dd10      	ble.n	800e500 <_strtod_l+0x620>
 800e4de:	2b1f      	cmp	r3, #31
 800e4e0:	f340 8128 	ble.w	800e734 <_strtod_l+0x854>
 800e4e4:	2b34      	cmp	r3, #52	; 0x34
 800e4e6:	bfde      	ittt	le
 800e4e8:	3b20      	suble	r3, #32
 800e4ea:	f04f 32ff 	movle.w	r2, #4294967295
 800e4ee:	fa02 f303 	lslle.w	r3, r2, r3
 800e4f2:	f04f 0a00 	mov.w	sl, #0
 800e4f6:	bfcc      	ite	gt
 800e4f8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e4fc:	ea03 0b01 	andle.w	fp, r3, r1
 800e500:	2200      	movs	r2, #0
 800e502:	2300      	movs	r3, #0
 800e504:	4650      	mov	r0, sl
 800e506:	4659      	mov	r1, fp
 800e508:	f7f2 fae6 	bl	8000ad8 <__aeabi_dcmpeq>
 800e50c:	2800      	cmp	r0, #0
 800e50e:	d1a4      	bne.n	800e45a <_strtod_l+0x57a>
 800e510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e512:	9300      	str	r3, [sp, #0]
 800e514:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e516:	462b      	mov	r3, r5
 800e518:	463a      	mov	r2, r7
 800e51a:	4620      	mov	r0, r4
 800e51c:	f001 fe60 	bl	80101e0 <__s2b>
 800e520:	9009      	str	r0, [sp, #36]	; 0x24
 800e522:	2800      	cmp	r0, #0
 800e524:	f43f af24 	beq.w	800e370 <_strtod_l+0x490>
 800e528:	9b07      	ldr	r3, [sp, #28]
 800e52a:	1b9e      	subs	r6, r3, r6
 800e52c:	9b08      	ldr	r3, [sp, #32]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	bfb4      	ite	lt
 800e532:	4633      	movlt	r3, r6
 800e534:	2300      	movge	r3, #0
 800e536:	9310      	str	r3, [sp, #64]	; 0x40
 800e538:	9b08      	ldr	r3, [sp, #32]
 800e53a:	2500      	movs	r5, #0
 800e53c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e540:	9318      	str	r3, [sp, #96]	; 0x60
 800e542:	462e      	mov	r6, r5
 800e544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e546:	4620      	mov	r0, r4
 800e548:	6859      	ldr	r1, [r3, #4]
 800e54a:	f001 fd9d 	bl	8010088 <_Balloc>
 800e54e:	9007      	str	r0, [sp, #28]
 800e550:	2800      	cmp	r0, #0
 800e552:	f43f af11 	beq.w	800e378 <_strtod_l+0x498>
 800e556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e558:	691a      	ldr	r2, [r3, #16]
 800e55a:	3202      	adds	r2, #2
 800e55c:	f103 010c 	add.w	r1, r3, #12
 800e560:	0092      	lsls	r2, r2, #2
 800e562:	300c      	adds	r0, #12
 800e564:	f7fe fcac 	bl	800cec0 <memcpy>
 800e568:	ec4b ab10 	vmov	d0, sl, fp
 800e56c:	aa20      	add	r2, sp, #128	; 0x80
 800e56e:	a91f      	add	r1, sp, #124	; 0x7c
 800e570:	4620      	mov	r0, r4
 800e572:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800e576:	f002 f96f 	bl	8010858 <__d2b>
 800e57a:	901e      	str	r0, [sp, #120]	; 0x78
 800e57c:	2800      	cmp	r0, #0
 800e57e:	f43f aefb 	beq.w	800e378 <_strtod_l+0x498>
 800e582:	2101      	movs	r1, #1
 800e584:	4620      	mov	r0, r4
 800e586:	f001 fec5 	bl	8010314 <__i2b>
 800e58a:	4606      	mov	r6, r0
 800e58c:	2800      	cmp	r0, #0
 800e58e:	f43f aef3 	beq.w	800e378 <_strtod_l+0x498>
 800e592:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e594:	9904      	ldr	r1, [sp, #16]
 800e596:	2b00      	cmp	r3, #0
 800e598:	bfab      	itete	ge
 800e59a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800e59c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800e59e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800e5a0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800e5a4:	bfac      	ite	ge
 800e5a6:	eb03 0902 	addge.w	r9, r3, r2
 800e5aa:	1ad7      	sublt	r7, r2, r3
 800e5ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e5ae:	eba3 0801 	sub.w	r8, r3, r1
 800e5b2:	4490      	add	r8, r2
 800e5b4:	4ba3      	ldr	r3, [pc, #652]	; (800e844 <_strtod_l+0x964>)
 800e5b6:	f108 38ff 	add.w	r8, r8, #4294967295
 800e5ba:	4598      	cmp	r8, r3
 800e5bc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e5c0:	f280 80cc 	bge.w	800e75c <_strtod_l+0x87c>
 800e5c4:	eba3 0308 	sub.w	r3, r3, r8
 800e5c8:	2b1f      	cmp	r3, #31
 800e5ca:	eba2 0203 	sub.w	r2, r2, r3
 800e5ce:	f04f 0101 	mov.w	r1, #1
 800e5d2:	f300 80b6 	bgt.w	800e742 <_strtod_l+0x862>
 800e5d6:	fa01 f303 	lsl.w	r3, r1, r3
 800e5da:	9311      	str	r3, [sp, #68]	; 0x44
 800e5dc:	2300      	movs	r3, #0
 800e5de:	930c      	str	r3, [sp, #48]	; 0x30
 800e5e0:	eb09 0802 	add.w	r8, r9, r2
 800e5e4:	9b04      	ldr	r3, [sp, #16]
 800e5e6:	45c1      	cmp	r9, r8
 800e5e8:	4417      	add	r7, r2
 800e5ea:	441f      	add	r7, r3
 800e5ec:	464b      	mov	r3, r9
 800e5ee:	bfa8      	it	ge
 800e5f0:	4643      	movge	r3, r8
 800e5f2:	42bb      	cmp	r3, r7
 800e5f4:	bfa8      	it	ge
 800e5f6:	463b      	movge	r3, r7
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	bfc2      	ittt	gt
 800e5fc:	eba8 0803 	subgt.w	r8, r8, r3
 800e600:	1aff      	subgt	r7, r7, r3
 800e602:	eba9 0903 	subgt.w	r9, r9, r3
 800e606:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e608:	2b00      	cmp	r3, #0
 800e60a:	dd17      	ble.n	800e63c <_strtod_l+0x75c>
 800e60c:	4631      	mov	r1, r6
 800e60e:	461a      	mov	r2, r3
 800e610:	4620      	mov	r0, r4
 800e612:	f001 ff3b 	bl	801048c <__pow5mult>
 800e616:	4606      	mov	r6, r0
 800e618:	2800      	cmp	r0, #0
 800e61a:	f43f aead 	beq.w	800e378 <_strtod_l+0x498>
 800e61e:	4601      	mov	r1, r0
 800e620:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e622:	4620      	mov	r0, r4
 800e624:	f001 fe8c 	bl	8010340 <__multiply>
 800e628:	900f      	str	r0, [sp, #60]	; 0x3c
 800e62a:	2800      	cmp	r0, #0
 800e62c:	f43f aea4 	beq.w	800e378 <_strtod_l+0x498>
 800e630:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e632:	4620      	mov	r0, r4
 800e634:	f001 fd68 	bl	8010108 <_Bfree>
 800e638:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e63a:	931e      	str	r3, [sp, #120]	; 0x78
 800e63c:	f1b8 0f00 	cmp.w	r8, #0
 800e640:	f300 8091 	bgt.w	800e766 <_strtod_l+0x886>
 800e644:	9b08      	ldr	r3, [sp, #32]
 800e646:	2b00      	cmp	r3, #0
 800e648:	dd08      	ble.n	800e65c <_strtod_l+0x77c>
 800e64a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e64c:	9907      	ldr	r1, [sp, #28]
 800e64e:	4620      	mov	r0, r4
 800e650:	f001 ff1c 	bl	801048c <__pow5mult>
 800e654:	9007      	str	r0, [sp, #28]
 800e656:	2800      	cmp	r0, #0
 800e658:	f43f ae8e 	beq.w	800e378 <_strtod_l+0x498>
 800e65c:	2f00      	cmp	r7, #0
 800e65e:	dd08      	ble.n	800e672 <_strtod_l+0x792>
 800e660:	9907      	ldr	r1, [sp, #28]
 800e662:	463a      	mov	r2, r7
 800e664:	4620      	mov	r0, r4
 800e666:	f001 ff6b 	bl	8010540 <__lshift>
 800e66a:	9007      	str	r0, [sp, #28]
 800e66c:	2800      	cmp	r0, #0
 800e66e:	f43f ae83 	beq.w	800e378 <_strtod_l+0x498>
 800e672:	f1b9 0f00 	cmp.w	r9, #0
 800e676:	dd08      	ble.n	800e68a <_strtod_l+0x7aa>
 800e678:	4631      	mov	r1, r6
 800e67a:	464a      	mov	r2, r9
 800e67c:	4620      	mov	r0, r4
 800e67e:	f001 ff5f 	bl	8010540 <__lshift>
 800e682:	4606      	mov	r6, r0
 800e684:	2800      	cmp	r0, #0
 800e686:	f43f ae77 	beq.w	800e378 <_strtod_l+0x498>
 800e68a:	9a07      	ldr	r2, [sp, #28]
 800e68c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e68e:	4620      	mov	r0, r4
 800e690:	f001 ffde 	bl	8010650 <__mdiff>
 800e694:	4605      	mov	r5, r0
 800e696:	2800      	cmp	r0, #0
 800e698:	f43f ae6e 	beq.w	800e378 <_strtod_l+0x498>
 800e69c:	68c3      	ldr	r3, [r0, #12]
 800e69e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	60c3      	str	r3, [r0, #12]
 800e6a4:	4631      	mov	r1, r6
 800e6a6:	f001 ffb7 	bl	8010618 <__mcmp>
 800e6aa:	2800      	cmp	r0, #0
 800e6ac:	da65      	bge.n	800e77a <_strtod_l+0x89a>
 800e6ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e6b0:	ea53 030a 	orrs.w	r3, r3, sl
 800e6b4:	f040 8087 	bne.w	800e7c6 <_strtod_l+0x8e6>
 800e6b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	f040 8082 	bne.w	800e7c6 <_strtod_l+0x8e6>
 800e6c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e6c6:	0d1b      	lsrs	r3, r3, #20
 800e6c8:	051b      	lsls	r3, r3, #20
 800e6ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e6ce:	d97a      	bls.n	800e7c6 <_strtod_l+0x8e6>
 800e6d0:	696b      	ldr	r3, [r5, #20]
 800e6d2:	b913      	cbnz	r3, 800e6da <_strtod_l+0x7fa>
 800e6d4:	692b      	ldr	r3, [r5, #16]
 800e6d6:	2b01      	cmp	r3, #1
 800e6d8:	dd75      	ble.n	800e7c6 <_strtod_l+0x8e6>
 800e6da:	4629      	mov	r1, r5
 800e6dc:	2201      	movs	r2, #1
 800e6de:	4620      	mov	r0, r4
 800e6e0:	f001 ff2e 	bl	8010540 <__lshift>
 800e6e4:	4631      	mov	r1, r6
 800e6e6:	4605      	mov	r5, r0
 800e6e8:	f001 ff96 	bl	8010618 <__mcmp>
 800e6ec:	2800      	cmp	r0, #0
 800e6ee:	dd6a      	ble.n	800e7c6 <_strtod_l+0x8e6>
 800e6f0:	9904      	ldr	r1, [sp, #16]
 800e6f2:	4a55      	ldr	r2, [pc, #340]	; (800e848 <_strtod_l+0x968>)
 800e6f4:	465b      	mov	r3, fp
 800e6f6:	2900      	cmp	r1, #0
 800e6f8:	f000 8085 	beq.w	800e806 <_strtod_l+0x926>
 800e6fc:	ea02 010b 	and.w	r1, r2, fp
 800e700:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e704:	dc7f      	bgt.n	800e806 <_strtod_l+0x926>
 800e706:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e70a:	f77f aeaa 	ble.w	800e462 <_strtod_l+0x582>
 800e70e:	4a4f      	ldr	r2, [pc, #316]	; (800e84c <_strtod_l+0x96c>)
 800e710:	2300      	movs	r3, #0
 800e712:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800e716:	4650      	mov	r0, sl
 800e718:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800e71c:	4659      	mov	r1, fp
 800e71e:	f7f1 ff73 	bl	8000608 <__aeabi_dmul>
 800e722:	460b      	mov	r3, r1
 800e724:	4303      	orrs	r3, r0
 800e726:	bf08      	it	eq
 800e728:	2322      	moveq	r3, #34	; 0x22
 800e72a:	4682      	mov	sl, r0
 800e72c:	468b      	mov	fp, r1
 800e72e:	bf08      	it	eq
 800e730:	6023      	streq	r3, [r4, #0]
 800e732:	e62b      	b.n	800e38c <_strtod_l+0x4ac>
 800e734:	f04f 32ff 	mov.w	r2, #4294967295
 800e738:	fa02 f303 	lsl.w	r3, r2, r3
 800e73c:	ea03 0a0a 	and.w	sl, r3, sl
 800e740:	e6de      	b.n	800e500 <_strtod_l+0x620>
 800e742:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800e746:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800e74a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800e74e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800e752:	fa01 f308 	lsl.w	r3, r1, r8
 800e756:	930c      	str	r3, [sp, #48]	; 0x30
 800e758:	9111      	str	r1, [sp, #68]	; 0x44
 800e75a:	e741      	b.n	800e5e0 <_strtod_l+0x700>
 800e75c:	2300      	movs	r3, #0
 800e75e:	930c      	str	r3, [sp, #48]	; 0x30
 800e760:	2301      	movs	r3, #1
 800e762:	9311      	str	r3, [sp, #68]	; 0x44
 800e764:	e73c      	b.n	800e5e0 <_strtod_l+0x700>
 800e766:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e768:	4642      	mov	r2, r8
 800e76a:	4620      	mov	r0, r4
 800e76c:	f001 fee8 	bl	8010540 <__lshift>
 800e770:	901e      	str	r0, [sp, #120]	; 0x78
 800e772:	2800      	cmp	r0, #0
 800e774:	f47f af66 	bne.w	800e644 <_strtod_l+0x764>
 800e778:	e5fe      	b.n	800e378 <_strtod_l+0x498>
 800e77a:	465f      	mov	r7, fp
 800e77c:	d16e      	bne.n	800e85c <_strtod_l+0x97c>
 800e77e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e780:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e784:	b342      	cbz	r2, 800e7d8 <_strtod_l+0x8f8>
 800e786:	4a32      	ldr	r2, [pc, #200]	; (800e850 <_strtod_l+0x970>)
 800e788:	4293      	cmp	r3, r2
 800e78a:	d128      	bne.n	800e7de <_strtod_l+0x8fe>
 800e78c:	9b04      	ldr	r3, [sp, #16]
 800e78e:	4650      	mov	r0, sl
 800e790:	b1eb      	cbz	r3, 800e7ce <_strtod_l+0x8ee>
 800e792:	4a2d      	ldr	r2, [pc, #180]	; (800e848 <_strtod_l+0x968>)
 800e794:	403a      	ands	r2, r7
 800e796:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800e79a:	f04f 31ff 	mov.w	r1, #4294967295
 800e79e:	d819      	bhi.n	800e7d4 <_strtod_l+0x8f4>
 800e7a0:	0d12      	lsrs	r2, r2, #20
 800e7a2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e7a6:	fa01 f303 	lsl.w	r3, r1, r3
 800e7aa:	4298      	cmp	r0, r3
 800e7ac:	d117      	bne.n	800e7de <_strtod_l+0x8fe>
 800e7ae:	4b29      	ldr	r3, [pc, #164]	; (800e854 <_strtod_l+0x974>)
 800e7b0:	429f      	cmp	r7, r3
 800e7b2:	d102      	bne.n	800e7ba <_strtod_l+0x8da>
 800e7b4:	3001      	adds	r0, #1
 800e7b6:	f43f addf 	beq.w	800e378 <_strtod_l+0x498>
 800e7ba:	4b23      	ldr	r3, [pc, #140]	; (800e848 <_strtod_l+0x968>)
 800e7bc:	403b      	ands	r3, r7
 800e7be:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800e7c2:	f04f 0a00 	mov.w	sl, #0
 800e7c6:	9b04      	ldr	r3, [sp, #16]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d1a0      	bne.n	800e70e <_strtod_l+0x82e>
 800e7cc:	e5de      	b.n	800e38c <_strtod_l+0x4ac>
 800e7ce:	f04f 33ff 	mov.w	r3, #4294967295
 800e7d2:	e7ea      	b.n	800e7aa <_strtod_l+0x8ca>
 800e7d4:	460b      	mov	r3, r1
 800e7d6:	e7e8      	b.n	800e7aa <_strtod_l+0x8ca>
 800e7d8:	ea53 030a 	orrs.w	r3, r3, sl
 800e7dc:	d088      	beq.n	800e6f0 <_strtod_l+0x810>
 800e7de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e7e0:	b1db      	cbz	r3, 800e81a <_strtod_l+0x93a>
 800e7e2:	423b      	tst	r3, r7
 800e7e4:	d0ef      	beq.n	800e7c6 <_strtod_l+0x8e6>
 800e7e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e7e8:	9a04      	ldr	r2, [sp, #16]
 800e7ea:	4650      	mov	r0, sl
 800e7ec:	4659      	mov	r1, fp
 800e7ee:	b1c3      	cbz	r3, 800e822 <_strtod_l+0x942>
 800e7f0:	f7ff fb59 	bl	800dea6 <sulp>
 800e7f4:	4602      	mov	r2, r0
 800e7f6:	460b      	mov	r3, r1
 800e7f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e7fc:	f7f1 fd4e 	bl	800029c <__adddf3>
 800e800:	4682      	mov	sl, r0
 800e802:	468b      	mov	fp, r1
 800e804:	e7df      	b.n	800e7c6 <_strtod_l+0x8e6>
 800e806:	4013      	ands	r3, r2
 800e808:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e80c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e810:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e814:	f04f 3aff 	mov.w	sl, #4294967295
 800e818:	e7d5      	b.n	800e7c6 <_strtod_l+0x8e6>
 800e81a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e81c:	ea13 0f0a 	tst.w	r3, sl
 800e820:	e7e0      	b.n	800e7e4 <_strtod_l+0x904>
 800e822:	f7ff fb40 	bl	800dea6 <sulp>
 800e826:	4602      	mov	r2, r0
 800e828:	460b      	mov	r3, r1
 800e82a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e82e:	f7f1 fd33 	bl	8000298 <__aeabi_dsub>
 800e832:	2200      	movs	r2, #0
 800e834:	2300      	movs	r3, #0
 800e836:	4682      	mov	sl, r0
 800e838:	468b      	mov	fp, r1
 800e83a:	f7f2 f94d 	bl	8000ad8 <__aeabi_dcmpeq>
 800e83e:	2800      	cmp	r0, #0
 800e840:	d0c1      	beq.n	800e7c6 <_strtod_l+0x8e6>
 800e842:	e60e      	b.n	800e462 <_strtod_l+0x582>
 800e844:	fffffc02 	.word	0xfffffc02
 800e848:	7ff00000 	.word	0x7ff00000
 800e84c:	39500000 	.word	0x39500000
 800e850:	000fffff 	.word	0x000fffff
 800e854:	7fefffff 	.word	0x7fefffff
 800e858:	08013898 	.word	0x08013898
 800e85c:	4631      	mov	r1, r6
 800e85e:	4628      	mov	r0, r5
 800e860:	f002 f856 	bl	8010910 <__ratio>
 800e864:	ec59 8b10 	vmov	r8, r9, d0
 800e868:	ee10 0a10 	vmov	r0, s0
 800e86c:	2200      	movs	r2, #0
 800e86e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e872:	4649      	mov	r1, r9
 800e874:	f7f2 f944 	bl	8000b00 <__aeabi_dcmple>
 800e878:	2800      	cmp	r0, #0
 800e87a:	d07c      	beq.n	800e976 <_strtod_l+0xa96>
 800e87c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d04c      	beq.n	800e91c <_strtod_l+0xa3c>
 800e882:	4b95      	ldr	r3, [pc, #596]	; (800ead8 <_strtod_l+0xbf8>)
 800e884:	2200      	movs	r2, #0
 800e886:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e88a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ead8 <_strtod_l+0xbf8>
 800e88e:	f04f 0800 	mov.w	r8, #0
 800e892:	4b92      	ldr	r3, [pc, #584]	; (800eadc <_strtod_l+0xbfc>)
 800e894:	403b      	ands	r3, r7
 800e896:	9311      	str	r3, [sp, #68]	; 0x44
 800e898:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e89a:	4b91      	ldr	r3, [pc, #580]	; (800eae0 <_strtod_l+0xc00>)
 800e89c:	429a      	cmp	r2, r3
 800e89e:	f040 80b2 	bne.w	800ea06 <_strtod_l+0xb26>
 800e8a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e8a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e8aa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800e8ae:	ec4b ab10 	vmov	d0, sl, fp
 800e8b2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800e8b6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e8ba:	f001 ff51 	bl	8010760 <__ulp>
 800e8be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e8c2:	ec53 2b10 	vmov	r2, r3, d0
 800e8c6:	f7f1 fe9f 	bl	8000608 <__aeabi_dmul>
 800e8ca:	4652      	mov	r2, sl
 800e8cc:	465b      	mov	r3, fp
 800e8ce:	f7f1 fce5 	bl	800029c <__adddf3>
 800e8d2:	460b      	mov	r3, r1
 800e8d4:	4981      	ldr	r1, [pc, #516]	; (800eadc <_strtod_l+0xbfc>)
 800e8d6:	4a83      	ldr	r2, [pc, #524]	; (800eae4 <_strtod_l+0xc04>)
 800e8d8:	4019      	ands	r1, r3
 800e8da:	4291      	cmp	r1, r2
 800e8dc:	4682      	mov	sl, r0
 800e8de:	d95e      	bls.n	800e99e <_strtod_l+0xabe>
 800e8e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e8e2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e8e6:	4293      	cmp	r3, r2
 800e8e8:	d103      	bne.n	800e8f2 <_strtod_l+0xa12>
 800e8ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8ec:	3301      	adds	r3, #1
 800e8ee:	f43f ad43 	beq.w	800e378 <_strtod_l+0x498>
 800e8f2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800eaf0 <_strtod_l+0xc10>
 800e8f6:	f04f 3aff 	mov.w	sl, #4294967295
 800e8fa:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e8fc:	4620      	mov	r0, r4
 800e8fe:	f001 fc03 	bl	8010108 <_Bfree>
 800e902:	9907      	ldr	r1, [sp, #28]
 800e904:	4620      	mov	r0, r4
 800e906:	f001 fbff 	bl	8010108 <_Bfree>
 800e90a:	4631      	mov	r1, r6
 800e90c:	4620      	mov	r0, r4
 800e90e:	f001 fbfb 	bl	8010108 <_Bfree>
 800e912:	4629      	mov	r1, r5
 800e914:	4620      	mov	r0, r4
 800e916:	f001 fbf7 	bl	8010108 <_Bfree>
 800e91a:	e613      	b.n	800e544 <_strtod_l+0x664>
 800e91c:	f1ba 0f00 	cmp.w	sl, #0
 800e920:	d11b      	bne.n	800e95a <_strtod_l+0xa7a>
 800e922:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e926:	b9f3      	cbnz	r3, 800e966 <_strtod_l+0xa86>
 800e928:	4b6b      	ldr	r3, [pc, #428]	; (800ead8 <_strtod_l+0xbf8>)
 800e92a:	2200      	movs	r2, #0
 800e92c:	4640      	mov	r0, r8
 800e92e:	4649      	mov	r1, r9
 800e930:	f7f2 f8dc 	bl	8000aec <__aeabi_dcmplt>
 800e934:	b9d0      	cbnz	r0, 800e96c <_strtod_l+0xa8c>
 800e936:	4640      	mov	r0, r8
 800e938:	4649      	mov	r1, r9
 800e93a:	4b6b      	ldr	r3, [pc, #428]	; (800eae8 <_strtod_l+0xc08>)
 800e93c:	2200      	movs	r2, #0
 800e93e:	f7f1 fe63 	bl	8000608 <__aeabi_dmul>
 800e942:	4680      	mov	r8, r0
 800e944:	4689      	mov	r9, r1
 800e946:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e94a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800e94e:	931b      	str	r3, [sp, #108]	; 0x6c
 800e950:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800e954:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e958:	e79b      	b.n	800e892 <_strtod_l+0x9b2>
 800e95a:	f1ba 0f01 	cmp.w	sl, #1
 800e95e:	d102      	bne.n	800e966 <_strtod_l+0xa86>
 800e960:	2f00      	cmp	r7, #0
 800e962:	f43f ad7e 	beq.w	800e462 <_strtod_l+0x582>
 800e966:	4b61      	ldr	r3, [pc, #388]	; (800eaec <_strtod_l+0xc0c>)
 800e968:	2200      	movs	r2, #0
 800e96a:	e78c      	b.n	800e886 <_strtod_l+0x9a6>
 800e96c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800eae8 <_strtod_l+0xc08>
 800e970:	f04f 0800 	mov.w	r8, #0
 800e974:	e7e7      	b.n	800e946 <_strtod_l+0xa66>
 800e976:	4b5c      	ldr	r3, [pc, #368]	; (800eae8 <_strtod_l+0xc08>)
 800e978:	4640      	mov	r0, r8
 800e97a:	4649      	mov	r1, r9
 800e97c:	2200      	movs	r2, #0
 800e97e:	f7f1 fe43 	bl	8000608 <__aeabi_dmul>
 800e982:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e984:	4680      	mov	r8, r0
 800e986:	4689      	mov	r9, r1
 800e988:	b933      	cbnz	r3, 800e998 <_strtod_l+0xab8>
 800e98a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e98e:	9012      	str	r0, [sp, #72]	; 0x48
 800e990:	9313      	str	r3, [sp, #76]	; 0x4c
 800e992:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800e996:	e7dd      	b.n	800e954 <_strtod_l+0xa74>
 800e998:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800e99c:	e7f9      	b.n	800e992 <_strtod_l+0xab2>
 800e99e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e9a2:	9b04      	ldr	r3, [sp, #16]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d1a8      	bne.n	800e8fa <_strtod_l+0xa1a>
 800e9a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e9ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e9ae:	0d1b      	lsrs	r3, r3, #20
 800e9b0:	051b      	lsls	r3, r3, #20
 800e9b2:	429a      	cmp	r2, r3
 800e9b4:	d1a1      	bne.n	800e8fa <_strtod_l+0xa1a>
 800e9b6:	4640      	mov	r0, r8
 800e9b8:	4649      	mov	r1, r9
 800e9ba:	f7f2 f985 	bl	8000cc8 <__aeabi_d2lz>
 800e9be:	f7f1 fdf5 	bl	80005ac <__aeabi_l2d>
 800e9c2:	4602      	mov	r2, r0
 800e9c4:	460b      	mov	r3, r1
 800e9c6:	4640      	mov	r0, r8
 800e9c8:	4649      	mov	r1, r9
 800e9ca:	f7f1 fc65 	bl	8000298 <__aeabi_dsub>
 800e9ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e9d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e9d4:	ea43 030a 	orr.w	r3, r3, sl
 800e9d8:	4313      	orrs	r3, r2
 800e9da:	4680      	mov	r8, r0
 800e9dc:	4689      	mov	r9, r1
 800e9de:	d053      	beq.n	800ea88 <_strtod_l+0xba8>
 800e9e0:	a335      	add	r3, pc, #212	; (adr r3, 800eab8 <_strtod_l+0xbd8>)
 800e9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e6:	f7f2 f881 	bl	8000aec <__aeabi_dcmplt>
 800e9ea:	2800      	cmp	r0, #0
 800e9ec:	f47f acce 	bne.w	800e38c <_strtod_l+0x4ac>
 800e9f0:	a333      	add	r3, pc, #204	; (adr r3, 800eac0 <_strtod_l+0xbe0>)
 800e9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9f6:	4640      	mov	r0, r8
 800e9f8:	4649      	mov	r1, r9
 800e9fa:	f7f2 f895 	bl	8000b28 <__aeabi_dcmpgt>
 800e9fe:	2800      	cmp	r0, #0
 800ea00:	f43f af7b 	beq.w	800e8fa <_strtod_l+0xa1a>
 800ea04:	e4c2      	b.n	800e38c <_strtod_l+0x4ac>
 800ea06:	9b04      	ldr	r3, [sp, #16]
 800ea08:	b333      	cbz	r3, 800ea58 <_strtod_l+0xb78>
 800ea0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ea0c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ea10:	d822      	bhi.n	800ea58 <_strtod_l+0xb78>
 800ea12:	a32d      	add	r3, pc, #180	; (adr r3, 800eac8 <_strtod_l+0xbe8>)
 800ea14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea18:	4640      	mov	r0, r8
 800ea1a:	4649      	mov	r1, r9
 800ea1c:	f7f2 f870 	bl	8000b00 <__aeabi_dcmple>
 800ea20:	b1a0      	cbz	r0, 800ea4c <_strtod_l+0xb6c>
 800ea22:	4649      	mov	r1, r9
 800ea24:	4640      	mov	r0, r8
 800ea26:	f7f2 f8c7 	bl	8000bb8 <__aeabi_d2uiz>
 800ea2a:	2801      	cmp	r0, #1
 800ea2c:	bf38      	it	cc
 800ea2e:	2001      	movcc	r0, #1
 800ea30:	f7f1 fd70 	bl	8000514 <__aeabi_ui2d>
 800ea34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea36:	4680      	mov	r8, r0
 800ea38:	4689      	mov	r9, r1
 800ea3a:	bb13      	cbnz	r3, 800ea82 <_strtod_l+0xba2>
 800ea3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ea40:	9014      	str	r0, [sp, #80]	; 0x50
 800ea42:	9315      	str	r3, [sp, #84]	; 0x54
 800ea44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ea48:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ea4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ea50:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ea54:	1a9b      	subs	r3, r3, r2
 800ea56:	930d      	str	r3, [sp, #52]	; 0x34
 800ea58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ea5c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ea60:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ea64:	f001 fe7c 	bl	8010760 <__ulp>
 800ea68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ea6c:	ec53 2b10 	vmov	r2, r3, d0
 800ea70:	f7f1 fdca 	bl	8000608 <__aeabi_dmul>
 800ea74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ea78:	f7f1 fc10 	bl	800029c <__adddf3>
 800ea7c:	4682      	mov	sl, r0
 800ea7e:	468b      	mov	fp, r1
 800ea80:	e78f      	b.n	800e9a2 <_strtod_l+0xac2>
 800ea82:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800ea86:	e7dd      	b.n	800ea44 <_strtod_l+0xb64>
 800ea88:	a311      	add	r3, pc, #68	; (adr r3, 800ead0 <_strtod_l+0xbf0>)
 800ea8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea8e:	f7f2 f82d 	bl	8000aec <__aeabi_dcmplt>
 800ea92:	e7b4      	b.n	800e9fe <_strtod_l+0xb1e>
 800ea94:	2300      	movs	r3, #0
 800ea96:	930e      	str	r3, [sp, #56]	; 0x38
 800ea98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ea9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ea9c:	6013      	str	r3, [r2, #0]
 800ea9e:	f7ff ba65 	b.w	800df6c <_strtod_l+0x8c>
 800eaa2:	2b65      	cmp	r3, #101	; 0x65
 800eaa4:	f43f ab5d 	beq.w	800e162 <_strtod_l+0x282>
 800eaa8:	2b45      	cmp	r3, #69	; 0x45
 800eaaa:	f43f ab5a 	beq.w	800e162 <_strtod_l+0x282>
 800eaae:	2201      	movs	r2, #1
 800eab0:	f7ff bb92 	b.w	800e1d8 <_strtod_l+0x2f8>
 800eab4:	f3af 8000 	nop.w
 800eab8:	94a03595 	.word	0x94a03595
 800eabc:	3fdfffff 	.word	0x3fdfffff
 800eac0:	35afe535 	.word	0x35afe535
 800eac4:	3fe00000 	.word	0x3fe00000
 800eac8:	ffc00000 	.word	0xffc00000
 800eacc:	41dfffff 	.word	0x41dfffff
 800ead0:	94a03595 	.word	0x94a03595
 800ead4:	3fcfffff 	.word	0x3fcfffff
 800ead8:	3ff00000 	.word	0x3ff00000
 800eadc:	7ff00000 	.word	0x7ff00000
 800eae0:	7fe00000 	.word	0x7fe00000
 800eae4:	7c9fffff 	.word	0x7c9fffff
 800eae8:	3fe00000 	.word	0x3fe00000
 800eaec:	bff00000 	.word	0xbff00000
 800eaf0:	7fefffff 	.word	0x7fefffff

0800eaf4 <_strtod_r>:
 800eaf4:	4b01      	ldr	r3, [pc, #4]	; (800eafc <_strtod_r+0x8>)
 800eaf6:	f7ff b9f3 	b.w	800dee0 <_strtod_l>
 800eafa:	bf00      	nop
 800eafc:	200000a0 	.word	0x200000a0

0800eb00 <_strtol_l.isra.0>:
 800eb00:	2b01      	cmp	r3, #1
 800eb02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb06:	d001      	beq.n	800eb0c <_strtol_l.isra.0+0xc>
 800eb08:	2b24      	cmp	r3, #36	; 0x24
 800eb0a:	d906      	bls.n	800eb1a <_strtol_l.isra.0+0x1a>
 800eb0c:	f7fe f99e 	bl	800ce4c <__errno>
 800eb10:	2316      	movs	r3, #22
 800eb12:	6003      	str	r3, [r0, #0]
 800eb14:	2000      	movs	r0, #0
 800eb16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb1a:	4f3a      	ldr	r7, [pc, #232]	; (800ec04 <_strtol_l.isra.0+0x104>)
 800eb1c:	468e      	mov	lr, r1
 800eb1e:	4676      	mov	r6, lr
 800eb20:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800eb24:	5de5      	ldrb	r5, [r4, r7]
 800eb26:	f015 0508 	ands.w	r5, r5, #8
 800eb2a:	d1f8      	bne.n	800eb1e <_strtol_l.isra.0+0x1e>
 800eb2c:	2c2d      	cmp	r4, #45	; 0x2d
 800eb2e:	d134      	bne.n	800eb9a <_strtol_l.isra.0+0x9a>
 800eb30:	f89e 4000 	ldrb.w	r4, [lr]
 800eb34:	f04f 0801 	mov.w	r8, #1
 800eb38:	f106 0e02 	add.w	lr, r6, #2
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d05c      	beq.n	800ebfa <_strtol_l.isra.0+0xfa>
 800eb40:	2b10      	cmp	r3, #16
 800eb42:	d10c      	bne.n	800eb5e <_strtol_l.isra.0+0x5e>
 800eb44:	2c30      	cmp	r4, #48	; 0x30
 800eb46:	d10a      	bne.n	800eb5e <_strtol_l.isra.0+0x5e>
 800eb48:	f89e 4000 	ldrb.w	r4, [lr]
 800eb4c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800eb50:	2c58      	cmp	r4, #88	; 0x58
 800eb52:	d14d      	bne.n	800ebf0 <_strtol_l.isra.0+0xf0>
 800eb54:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800eb58:	2310      	movs	r3, #16
 800eb5a:	f10e 0e02 	add.w	lr, lr, #2
 800eb5e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800eb62:	f10c 3cff 	add.w	ip, ip, #4294967295
 800eb66:	2600      	movs	r6, #0
 800eb68:	fbbc f9f3 	udiv	r9, ip, r3
 800eb6c:	4635      	mov	r5, r6
 800eb6e:	fb03 ca19 	mls	sl, r3, r9, ip
 800eb72:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800eb76:	2f09      	cmp	r7, #9
 800eb78:	d818      	bhi.n	800ebac <_strtol_l.isra.0+0xac>
 800eb7a:	463c      	mov	r4, r7
 800eb7c:	42a3      	cmp	r3, r4
 800eb7e:	dd24      	ble.n	800ebca <_strtol_l.isra.0+0xca>
 800eb80:	2e00      	cmp	r6, #0
 800eb82:	db1f      	blt.n	800ebc4 <_strtol_l.isra.0+0xc4>
 800eb84:	45a9      	cmp	r9, r5
 800eb86:	d31d      	bcc.n	800ebc4 <_strtol_l.isra.0+0xc4>
 800eb88:	d101      	bne.n	800eb8e <_strtol_l.isra.0+0x8e>
 800eb8a:	45a2      	cmp	sl, r4
 800eb8c:	db1a      	blt.n	800ebc4 <_strtol_l.isra.0+0xc4>
 800eb8e:	fb05 4503 	mla	r5, r5, r3, r4
 800eb92:	2601      	movs	r6, #1
 800eb94:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800eb98:	e7eb      	b.n	800eb72 <_strtol_l.isra.0+0x72>
 800eb9a:	2c2b      	cmp	r4, #43	; 0x2b
 800eb9c:	bf08      	it	eq
 800eb9e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800eba2:	46a8      	mov	r8, r5
 800eba4:	bf08      	it	eq
 800eba6:	f106 0e02 	addeq.w	lr, r6, #2
 800ebaa:	e7c7      	b.n	800eb3c <_strtol_l.isra.0+0x3c>
 800ebac:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800ebb0:	2f19      	cmp	r7, #25
 800ebb2:	d801      	bhi.n	800ebb8 <_strtol_l.isra.0+0xb8>
 800ebb4:	3c37      	subs	r4, #55	; 0x37
 800ebb6:	e7e1      	b.n	800eb7c <_strtol_l.isra.0+0x7c>
 800ebb8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800ebbc:	2f19      	cmp	r7, #25
 800ebbe:	d804      	bhi.n	800ebca <_strtol_l.isra.0+0xca>
 800ebc0:	3c57      	subs	r4, #87	; 0x57
 800ebc2:	e7db      	b.n	800eb7c <_strtol_l.isra.0+0x7c>
 800ebc4:	f04f 36ff 	mov.w	r6, #4294967295
 800ebc8:	e7e4      	b.n	800eb94 <_strtol_l.isra.0+0x94>
 800ebca:	2e00      	cmp	r6, #0
 800ebcc:	da05      	bge.n	800ebda <_strtol_l.isra.0+0xda>
 800ebce:	2322      	movs	r3, #34	; 0x22
 800ebd0:	6003      	str	r3, [r0, #0]
 800ebd2:	4665      	mov	r5, ip
 800ebd4:	b942      	cbnz	r2, 800ebe8 <_strtol_l.isra.0+0xe8>
 800ebd6:	4628      	mov	r0, r5
 800ebd8:	e79d      	b.n	800eb16 <_strtol_l.isra.0+0x16>
 800ebda:	f1b8 0f00 	cmp.w	r8, #0
 800ebde:	d000      	beq.n	800ebe2 <_strtol_l.isra.0+0xe2>
 800ebe0:	426d      	negs	r5, r5
 800ebe2:	2a00      	cmp	r2, #0
 800ebe4:	d0f7      	beq.n	800ebd6 <_strtol_l.isra.0+0xd6>
 800ebe6:	b10e      	cbz	r6, 800ebec <_strtol_l.isra.0+0xec>
 800ebe8:	f10e 31ff 	add.w	r1, lr, #4294967295
 800ebec:	6011      	str	r1, [r2, #0]
 800ebee:	e7f2      	b.n	800ebd6 <_strtol_l.isra.0+0xd6>
 800ebf0:	2430      	movs	r4, #48	; 0x30
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d1b3      	bne.n	800eb5e <_strtol_l.isra.0+0x5e>
 800ebf6:	2308      	movs	r3, #8
 800ebf8:	e7b1      	b.n	800eb5e <_strtol_l.isra.0+0x5e>
 800ebfa:	2c30      	cmp	r4, #48	; 0x30
 800ebfc:	d0a4      	beq.n	800eb48 <_strtol_l.isra.0+0x48>
 800ebfe:	230a      	movs	r3, #10
 800ec00:	e7ad      	b.n	800eb5e <_strtol_l.isra.0+0x5e>
 800ec02:	bf00      	nop
 800ec04:	080138c1 	.word	0x080138c1

0800ec08 <_strtol_r>:
 800ec08:	f7ff bf7a 	b.w	800eb00 <_strtol_l.isra.0>

0800ec0c <_write_r>:
 800ec0c:	b538      	push	{r3, r4, r5, lr}
 800ec0e:	4d07      	ldr	r5, [pc, #28]	; (800ec2c <_write_r+0x20>)
 800ec10:	4604      	mov	r4, r0
 800ec12:	4608      	mov	r0, r1
 800ec14:	4611      	mov	r1, r2
 800ec16:	2200      	movs	r2, #0
 800ec18:	602a      	str	r2, [r5, #0]
 800ec1a:	461a      	mov	r2, r3
 800ec1c:	f7f3 fff1 	bl	8002c02 <_write>
 800ec20:	1c43      	adds	r3, r0, #1
 800ec22:	d102      	bne.n	800ec2a <_write_r+0x1e>
 800ec24:	682b      	ldr	r3, [r5, #0]
 800ec26:	b103      	cbz	r3, 800ec2a <_write_r+0x1e>
 800ec28:	6023      	str	r3, [r4, #0]
 800ec2a:	bd38      	pop	{r3, r4, r5, pc}
 800ec2c:	200059c4 	.word	0x200059c4

0800ec30 <_close_r>:
 800ec30:	b538      	push	{r3, r4, r5, lr}
 800ec32:	4d06      	ldr	r5, [pc, #24]	; (800ec4c <_close_r+0x1c>)
 800ec34:	2300      	movs	r3, #0
 800ec36:	4604      	mov	r4, r0
 800ec38:	4608      	mov	r0, r1
 800ec3a:	602b      	str	r3, [r5, #0]
 800ec3c:	f7f3 fffd 	bl	8002c3a <_close>
 800ec40:	1c43      	adds	r3, r0, #1
 800ec42:	d102      	bne.n	800ec4a <_close_r+0x1a>
 800ec44:	682b      	ldr	r3, [r5, #0]
 800ec46:	b103      	cbz	r3, 800ec4a <_close_r+0x1a>
 800ec48:	6023      	str	r3, [r4, #0]
 800ec4a:	bd38      	pop	{r3, r4, r5, pc}
 800ec4c:	200059c4 	.word	0x200059c4

0800ec50 <quorem>:
 800ec50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec54:	6903      	ldr	r3, [r0, #16]
 800ec56:	690c      	ldr	r4, [r1, #16]
 800ec58:	42a3      	cmp	r3, r4
 800ec5a:	4607      	mov	r7, r0
 800ec5c:	f2c0 8081 	blt.w	800ed62 <quorem+0x112>
 800ec60:	3c01      	subs	r4, #1
 800ec62:	f101 0814 	add.w	r8, r1, #20
 800ec66:	f100 0514 	add.w	r5, r0, #20
 800ec6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ec6e:	9301      	str	r3, [sp, #4]
 800ec70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ec74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ec78:	3301      	adds	r3, #1
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ec80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ec84:	fbb2 f6f3 	udiv	r6, r2, r3
 800ec88:	d331      	bcc.n	800ecee <quorem+0x9e>
 800ec8a:	f04f 0e00 	mov.w	lr, #0
 800ec8e:	4640      	mov	r0, r8
 800ec90:	46ac      	mov	ip, r5
 800ec92:	46f2      	mov	sl, lr
 800ec94:	f850 2b04 	ldr.w	r2, [r0], #4
 800ec98:	b293      	uxth	r3, r2
 800ec9a:	fb06 e303 	mla	r3, r6, r3, lr
 800ec9e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800eca2:	b29b      	uxth	r3, r3
 800eca4:	ebaa 0303 	sub.w	r3, sl, r3
 800eca8:	0c12      	lsrs	r2, r2, #16
 800ecaa:	f8dc a000 	ldr.w	sl, [ip]
 800ecae:	fb06 e202 	mla	r2, r6, r2, lr
 800ecb2:	fa13 f38a 	uxtah	r3, r3, sl
 800ecb6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ecba:	fa1f fa82 	uxth.w	sl, r2
 800ecbe:	f8dc 2000 	ldr.w	r2, [ip]
 800ecc2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ecc6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ecca:	b29b      	uxth	r3, r3
 800eccc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ecd0:	4581      	cmp	r9, r0
 800ecd2:	f84c 3b04 	str.w	r3, [ip], #4
 800ecd6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ecda:	d2db      	bcs.n	800ec94 <quorem+0x44>
 800ecdc:	f855 300b 	ldr.w	r3, [r5, fp]
 800ece0:	b92b      	cbnz	r3, 800ecee <quorem+0x9e>
 800ece2:	9b01      	ldr	r3, [sp, #4]
 800ece4:	3b04      	subs	r3, #4
 800ece6:	429d      	cmp	r5, r3
 800ece8:	461a      	mov	r2, r3
 800ecea:	d32e      	bcc.n	800ed4a <quorem+0xfa>
 800ecec:	613c      	str	r4, [r7, #16]
 800ecee:	4638      	mov	r0, r7
 800ecf0:	f001 fc92 	bl	8010618 <__mcmp>
 800ecf4:	2800      	cmp	r0, #0
 800ecf6:	db24      	blt.n	800ed42 <quorem+0xf2>
 800ecf8:	3601      	adds	r6, #1
 800ecfa:	4628      	mov	r0, r5
 800ecfc:	f04f 0c00 	mov.w	ip, #0
 800ed00:	f858 2b04 	ldr.w	r2, [r8], #4
 800ed04:	f8d0 e000 	ldr.w	lr, [r0]
 800ed08:	b293      	uxth	r3, r2
 800ed0a:	ebac 0303 	sub.w	r3, ip, r3
 800ed0e:	0c12      	lsrs	r2, r2, #16
 800ed10:	fa13 f38e 	uxtah	r3, r3, lr
 800ed14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ed18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ed1c:	b29b      	uxth	r3, r3
 800ed1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ed22:	45c1      	cmp	r9, r8
 800ed24:	f840 3b04 	str.w	r3, [r0], #4
 800ed28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ed2c:	d2e8      	bcs.n	800ed00 <quorem+0xb0>
 800ed2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ed32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ed36:	b922      	cbnz	r2, 800ed42 <quorem+0xf2>
 800ed38:	3b04      	subs	r3, #4
 800ed3a:	429d      	cmp	r5, r3
 800ed3c:	461a      	mov	r2, r3
 800ed3e:	d30a      	bcc.n	800ed56 <quorem+0x106>
 800ed40:	613c      	str	r4, [r7, #16]
 800ed42:	4630      	mov	r0, r6
 800ed44:	b003      	add	sp, #12
 800ed46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed4a:	6812      	ldr	r2, [r2, #0]
 800ed4c:	3b04      	subs	r3, #4
 800ed4e:	2a00      	cmp	r2, #0
 800ed50:	d1cc      	bne.n	800ecec <quorem+0x9c>
 800ed52:	3c01      	subs	r4, #1
 800ed54:	e7c7      	b.n	800ece6 <quorem+0x96>
 800ed56:	6812      	ldr	r2, [r2, #0]
 800ed58:	3b04      	subs	r3, #4
 800ed5a:	2a00      	cmp	r2, #0
 800ed5c:	d1f0      	bne.n	800ed40 <quorem+0xf0>
 800ed5e:	3c01      	subs	r4, #1
 800ed60:	e7eb      	b.n	800ed3a <quorem+0xea>
 800ed62:	2000      	movs	r0, #0
 800ed64:	e7ee      	b.n	800ed44 <quorem+0xf4>
	...

0800ed68 <_dtoa_r>:
 800ed68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed6c:	ed2d 8b02 	vpush	{d8}
 800ed70:	ec57 6b10 	vmov	r6, r7, d0
 800ed74:	b095      	sub	sp, #84	; 0x54
 800ed76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ed78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ed7c:	9105      	str	r1, [sp, #20]
 800ed7e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ed82:	4604      	mov	r4, r0
 800ed84:	9209      	str	r2, [sp, #36]	; 0x24
 800ed86:	930f      	str	r3, [sp, #60]	; 0x3c
 800ed88:	b975      	cbnz	r5, 800eda8 <_dtoa_r+0x40>
 800ed8a:	2010      	movs	r0, #16
 800ed8c:	f7fe f888 	bl	800cea0 <malloc>
 800ed90:	4602      	mov	r2, r0
 800ed92:	6260      	str	r0, [r4, #36]	; 0x24
 800ed94:	b920      	cbnz	r0, 800eda0 <_dtoa_r+0x38>
 800ed96:	4bb2      	ldr	r3, [pc, #712]	; (800f060 <_dtoa_r+0x2f8>)
 800ed98:	21ea      	movs	r1, #234	; 0xea
 800ed9a:	48b2      	ldr	r0, [pc, #712]	; (800f064 <_dtoa_r+0x2fc>)
 800ed9c:	f002 fbd4 	bl	8011548 <__assert_func>
 800eda0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800eda4:	6005      	str	r5, [r0, #0]
 800eda6:	60c5      	str	r5, [r0, #12]
 800eda8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800edaa:	6819      	ldr	r1, [r3, #0]
 800edac:	b151      	cbz	r1, 800edc4 <_dtoa_r+0x5c>
 800edae:	685a      	ldr	r2, [r3, #4]
 800edb0:	604a      	str	r2, [r1, #4]
 800edb2:	2301      	movs	r3, #1
 800edb4:	4093      	lsls	r3, r2
 800edb6:	608b      	str	r3, [r1, #8]
 800edb8:	4620      	mov	r0, r4
 800edba:	f001 f9a5 	bl	8010108 <_Bfree>
 800edbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800edc0:	2200      	movs	r2, #0
 800edc2:	601a      	str	r2, [r3, #0]
 800edc4:	1e3b      	subs	r3, r7, #0
 800edc6:	bfb9      	ittee	lt
 800edc8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800edcc:	9303      	strlt	r3, [sp, #12]
 800edce:	2300      	movge	r3, #0
 800edd0:	f8c8 3000 	strge.w	r3, [r8]
 800edd4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800edd8:	4ba3      	ldr	r3, [pc, #652]	; (800f068 <_dtoa_r+0x300>)
 800edda:	bfbc      	itt	lt
 800eddc:	2201      	movlt	r2, #1
 800edde:	f8c8 2000 	strlt.w	r2, [r8]
 800ede2:	ea33 0309 	bics.w	r3, r3, r9
 800ede6:	d11b      	bne.n	800ee20 <_dtoa_r+0xb8>
 800ede8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800edea:	f242 730f 	movw	r3, #9999	; 0x270f
 800edee:	6013      	str	r3, [r2, #0]
 800edf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800edf4:	4333      	orrs	r3, r6
 800edf6:	f000 857a 	beq.w	800f8ee <_dtoa_r+0xb86>
 800edfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800edfc:	b963      	cbnz	r3, 800ee18 <_dtoa_r+0xb0>
 800edfe:	4b9b      	ldr	r3, [pc, #620]	; (800f06c <_dtoa_r+0x304>)
 800ee00:	e024      	b.n	800ee4c <_dtoa_r+0xe4>
 800ee02:	4b9b      	ldr	r3, [pc, #620]	; (800f070 <_dtoa_r+0x308>)
 800ee04:	9300      	str	r3, [sp, #0]
 800ee06:	3308      	adds	r3, #8
 800ee08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ee0a:	6013      	str	r3, [r2, #0]
 800ee0c:	9800      	ldr	r0, [sp, #0]
 800ee0e:	b015      	add	sp, #84	; 0x54
 800ee10:	ecbd 8b02 	vpop	{d8}
 800ee14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee18:	4b94      	ldr	r3, [pc, #592]	; (800f06c <_dtoa_r+0x304>)
 800ee1a:	9300      	str	r3, [sp, #0]
 800ee1c:	3303      	adds	r3, #3
 800ee1e:	e7f3      	b.n	800ee08 <_dtoa_r+0xa0>
 800ee20:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ee24:	2200      	movs	r2, #0
 800ee26:	ec51 0b17 	vmov	r0, r1, d7
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ee30:	f7f1 fe52 	bl	8000ad8 <__aeabi_dcmpeq>
 800ee34:	4680      	mov	r8, r0
 800ee36:	b158      	cbz	r0, 800ee50 <_dtoa_r+0xe8>
 800ee38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ee3a:	2301      	movs	r3, #1
 800ee3c:	6013      	str	r3, [r2, #0]
 800ee3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	f000 8551 	beq.w	800f8e8 <_dtoa_r+0xb80>
 800ee46:	488b      	ldr	r0, [pc, #556]	; (800f074 <_dtoa_r+0x30c>)
 800ee48:	6018      	str	r0, [r3, #0]
 800ee4a:	1e43      	subs	r3, r0, #1
 800ee4c:	9300      	str	r3, [sp, #0]
 800ee4e:	e7dd      	b.n	800ee0c <_dtoa_r+0xa4>
 800ee50:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ee54:	aa12      	add	r2, sp, #72	; 0x48
 800ee56:	a913      	add	r1, sp, #76	; 0x4c
 800ee58:	4620      	mov	r0, r4
 800ee5a:	f001 fcfd 	bl	8010858 <__d2b>
 800ee5e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ee62:	4683      	mov	fp, r0
 800ee64:	2d00      	cmp	r5, #0
 800ee66:	d07c      	beq.n	800ef62 <_dtoa_r+0x1fa>
 800ee68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee6a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800ee6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ee72:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800ee76:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ee7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ee7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ee82:	4b7d      	ldr	r3, [pc, #500]	; (800f078 <_dtoa_r+0x310>)
 800ee84:	2200      	movs	r2, #0
 800ee86:	4630      	mov	r0, r6
 800ee88:	4639      	mov	r1, r7
 800ee8a:	f7f1 fa05 	bl	8000298 <__aeabi_dsub>
 800ee8e:	a36e      	add	r3, pc, #440	; (adr r3, 800f048 <_dtoa_r+0x2e0>)
 800ee90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee94:	f7f1 fbb8 	bl	8000608 <__aeabi_dmul>
 800ee98:	a36d      	add	r3, pc, #436	; (adr r3, 800f050 <_dtoa_r+0x2e8>)
 800ee9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee9e:	f7f1 f9fd 	bl	800029c <__adddf3>
 800eea2:	4606      	mov	r6, r0
 800eea4:	4628      	mov	r0, r5
 800eea6:	460f      	mov	r7, r1
 800eea8:	f7f1 fb44 	bl	8000534 <__aeabi_i2d>
 800eeac:	a36a      	add	r3, pc, #424	; (adr r3, 800f058 <_dtoa_r+0x2f0>)
 800eeae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeb2:	f7f1 fba9 	bl	8000608 <__aeabi_dmul>
 800eeb6:	4602      	mov	r2, r0
 800eeb8:	460b      	mov	r3, r1
 800eeba:	4630      	mov	r0, r6
 800eebc:	4639      	mov	r1, r7
 800eebe:	f7f1 f9ed 	bl	800029c <__adddf3>
 800eec2:	4606      	mov	r6, r0
 800eec4:	460f      	mov	r7, r1
 800eec6:	f7f1 fe4f 	bl	8000b68 <__aeabi_d2iz>
 800eeca:	2200      	movs	r2, #0
 800eecc:	4682      	mov	sl, r0
 800eece:	2300      	movs	r3, #0
 800eed0:	4630      	mov	r0, r6
 800eed2:	4639      	mov	r1, r7
 800eed4:	f7f1 fe0a 	bl	8000aec <__aeabi_dcmplt>
 800eed8:	b148      	cbz	r0, 800eeee <_dtoa_r+0x186>
 800eeda:	4650      	mov	r0, sl
 800eedc:	f7f1 fb2a 	bl	8000534 <__aeabi_i2d>
 800eee0:	4632      	mov	r2, r6
 800eee2:	463b      	mov	r3, r7
 800eee4:	f7f1 fdf8 	bl	8000ad8 <__aeabi_dcmpeq>
 800eee8:	b908      	cbnz	r0, 800eeee <_dtoa_r+0x186>
 800eeea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eeee:	f1ba 0f16 	cmp.w	sl, #22
 800eef2:	d854      	bhi.n	800ef9e <_dtoa_r+0x236>
 800eef4:	4b61      	ldr	r3, [pc, #388]	; (800f07c <_dtoa_r+0x314>)
 800eef6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800eefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eefe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ef02:	f7f1 fdf3 	bl	8000aec <__aeabi_dcmplt>
 800ef06:	2800      	cmp	r0, #0
 800ef08:	d04b      	beq.n	800efa2 <_dtoa_r+0x23a>
 800ef0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ef0e:	2300      	movs	r3, #0
 800ef10:	930e      	str	r3, [sp, #56]	; 0x38
 800ef12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ef14:	1b5d      	subs	r5, r3, r5
 800ef16:	1e6b      	subs	r3, r5, #1
 800ef18:	9304      	str	r3, [sp, #16]
 800ef1a:	bf43      	ittte	mi
 800ef1c:	2300      	movmi	r3, #0
 800ef1e:	f1c5 0801 	rsbmi	r8, r5, #1
 800ef22:	9304      	strmi	r3, [sp, #16]
 800ef24:	f04f 0800 	movpl.w	r8, #0
 800ef28:	f1ba 0f00 	cmp.w	sl, #0
 800ef2c:	db3b      	blt.n	800efa6 <_dtoa_r+0x23e>
 800ef2e:	9b04      	ldr	r3, [sp, #16]
 800ef30:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ef34:	4453      	add	r3, sl
 800ef36:	9304      	str	r3, [sp, #16]
 800ef38:	2300      	movs	r3, #0
 800ef3a:	9306      	str	r3, [sp, #24]
 800ef3c:	9b05      	ldr	r3, [sp, #20]
 800ef3e:	2b09      	cmp	r3, #9
 800ef40:	d869      	bhi.n	800f016 <_dtoa_r+0x2ae>
 800ef42:	2b05      	cmp	r3, #5
 800ef44:	bfc4      	itt	gt
 800ef46:	3b04      	subgt	r3, #4
 800ef48:	9305      	strgt	r3, [sp, #20]
 800ef4a:	9b05      	ldr	r3, [sp, #20]
 800ef4c:	f1a3 0302 	sub.w	r3, r3, #2
 800ef50:	bfcc      	ite	gt
 800ef52:	2500      	movgt	r5, #0
 800ef54:	2501      	movle	r5, #1
 800ef56:	2b03      	cmp	r3, #3
 800ef58:	d869      	bhi.n	800f02e <_dtoa_r+0x2c6>
 800ef5a:	e8df f003 	tbb	[pc, r3]
 800ef5e:	4e2c      	.short	0x4e2c
 800ef60:	5a4c      	.short	0x5a4c
 800ef62:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800ef66:	441d      	add	r5, r3
 800ef68:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ef6c:	2b20      	cmp	r3, #32
 800ef6e:	bfc1      	itttt	gt
 800ef70:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ef74:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ef78:	fa09 f303 	lslgt.w	r3, r9, r3
 800ef7c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ef80:	bfda      	itte	le
 800ef82:	f1c3 0320 	rsble	r3, r3, #32
 800ef86:	fa06 f003 	lslle.w	r0, r6, r3
 800ef8a:	4318      	orrgt	r0, r3
 800ef8c:	f7f1 fac2 	bl	8000514 <__aeabi_ui2d>
 800ef90:	2301      	movs	r3, #1
 800ef92:	4606      	mov	r6, r0
 800ef94:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ef98:	3d01      	subs	r5, #1
 800ef9a:	9310      	str	r3, [sp, #64]	; 0x40
 800ef9c:	e771      	b.n	800ee82 <_dtoa_r+0x11a>
 800ef9e:	2301      	movs	r3, #1
 800efa0:	e7b6      	b.n	800ef10 <_dtoa_r+0x1a8>
 800efa2:	900e      	str	r0, [sp, #56]	; 0x38
 800efa4:	e7b5      	b.n	800ef12 <_dtoa_r+0x1aa>
 800efa6:	f1ca 0300 	rsb	r3, sl, #0
 800efaa:	9306      	str	r3, [sp, #24]
 800efac:	2300      	movs	r3, #0
 800efae:	eba8 080a 	sub.w	r8, r8, sl
 800efb2:	930d      	str	r3, [sp, #52]	; 0x34
 800efb4:	e7c2      	b.n	800ef3c <_dtoa_r+0x1d4>
 800efb6:	2300      	movs	r3, #0
 800efb8:	9308      	str	r3, [sp, #32]
 800efba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	dc39      	bgt.n	800f034 <_dtoa_r+0x2cc>
 800efc0:	f04f 0901 	mov.w	r9, #1
 800efc4:	f8cd 9004 	str.w	r9, [sp, #4]
 800efc8:	464b      	mov	r3, r9
 800efca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800efce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800efd0:	2200      	movs	r2, #0
 800efd2:	6042      	str	r2, [r0, #4]
 800efd4:	2204      	movs	r2, #4
 800efd6:	f102 0614 	add.w	r6, r2, #20
 800efda:	429e      	cmp	r6, r3
 800efdc:	6841      	ldr	r1, [r0, #4]
 800efde:	d92f      	bls.n	800f040 <_dtoa_r+0x2d8>
 800efe0:	4620      	mov	r0, r4
 800efe2:	f001 f851 	bl	8010088 <_Balloc>
 800efe6:	9000      	str	r0, [sp, #0]
 800efe8:	2800      	cmp	r0, #0
 800efea:	d14b      	bne.n	800f084 <_dtoa_r+0x31c>
 800efec:	4b24      	ldr	r3, [pc, #144]	; (800f080 <_dtoa_r+0x318>)
 800efee:	4602      	mov	r2, r0
 800eff0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800eff4:	e6d1      	b.n	800ed9a <_dtoa_r+0x32>
 800eff6:	2301      	movs	r3, #1
 800eff8:	e7de      	b.n	800efb8 <_dtoa_r+0x250>
 800effa:	2300      	movs	r3, #0
 800effc:	9308      	str	r3, [sp, #32]
 800effe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f000:	eb0a 0903 	add.w	r9, sl, r3
 800f004:	f109 0301 	add.w	r3, r9, #1
 800f008:	2b01      	cmp	r3, #1
 800f00a:	9301      	str	r3, [sp, #4]
 800f00c:	bfb8      	it	lt
 800f00e:	2301      	movlt	r3, #1
 800f010:	e7dd      	b.n	800efce <_dtoa_r+0x266>
 800f012:	2301      	movs	r3, #1
 800f014:	e7f2      	b.n	800effc <_dtoa_r+0x294>
 800f016:	2501      	movs	r5, #1
 800f018:	2300      	movs	r3, #0
 800f01a:	9305      	str	r3, [sp, #20]
 800f01c:	9508      	str	r5, [sp, #32]
 800f01e:	f04f 39ff 	mov.w	r9, #4294967295
 800f022:	2200      	movs	r2, #0
 800f024:	f8cd 9004 	str.w	r9, [sp, #4]
 800f028:	2312      	movs	r3, #18
 800f02a:	9209      	str	r2, [sp, #36]	; 0x24
 800f02c:	e7cf      	b.n	800efce <_dtoa_r+0x266>
 800f02e:	2301      	movs	r3, #1
 800f030:	9308      	str	r3, [sp, #32]
 800f032:	e7f4      	b.n	800f01e <_dtoa_r+0x2b6>
 800f034:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f038:	f8cd 9004 	str.w	r9, [sp, #4]
 800f03c:	464b      	mov	r3, r9
 800f03e:	e7c6      	b.n	800efce <_dtoa_r+0x266>
 800f040:	3101      	adds	r1, #1
 800f042:	6041      	str	r1, [r0, #4]
 800f044:	0052      	lsls	r2, r2, #1
 800f046:	e7c6      	b.n	800efd6 <_dtoa_r+0x26e>
 800f048:	636f4361 	.word	0x636f4361
 800f04c:	3fd287a7 	.word	0x3fd287a7
 800f050:	8b60c8b3 	.word	0x8b60c8b3
 800f054:	3fc68a28 	.word	0x3fc68a28
 800f058:	509f79fb 	.word	0x509f79fb
 800f05c:	3fd34413 	.word	0x3fd34413
 800f060:	080139ce 	.word	0x080139ce
 800f064:	080139e5 	.word	0x080139e5
 800f068:	7ff00000 	.word	0x7ff00000
 800f06c:	080139ca 	.word	0x080139ca
 800f070:	080139c1 	.word	0x080139c1
 800f074:	08013c4a 	.word	0x08013c4a
 800f078:	3ff80000 	.word	0x3ff80000
 800f07c:	08013b60 	.word	0x08013b60
 800f080:	08013a44 	.word	0x08013a44
 800f084:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f086:	9a00      	ldr	r2, [sp, #0]
 800f088:	601a      	str	r2, [r3, #0]
 800f08a:	9b01      	ldr	r3, [sp, #4]
 800f08c:	2b0e      	cmp	r3, #14
 800f08e:	f200 80ad 	bhi.w	800f1ec <_dtoa_r+0x484>
 800f092:	2d00      	cmp	r5, #0
 800f094:	f000 80aa 	beq.w	800f1ec <_dtoa_r+0x484>
 800f098:	f1ba 0f00 	cmp.w	sl, #0
 800f09c:	dd36      	ble.n	800f10c <_dtoa_r+0x3a4>
 800f09e:	4ac3      	ldr	r2, [pc, #780]	; (800f3ac <_dtoa_r+0x644>)
 800f0a0:	f00a 030f 	and.w	r3, sl, #15
 800f0a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f0a8:	ed93 7b00 	vldr	d7, [r3]
 800f0ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f0b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800f0b4:	eeb0 8a47 	vmov.f32	s16, s14
 800f0b8:	eef0 8a67 	vmov.f32	s17, s15
 800f0bc:	d016      	beq.n	800f0ec <_dtoa_r+0x384>
 800f0be:	4bbc      	ldr	r3, [pc, #752]	; (800f3b0 <_dtoa_r+0x648>)
 800f0c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f0c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f0c8:	f7f1 fbc8 	bl	800085c <__aeabi_ddiv>
 800f0cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f0d0:	f007 070f 	and.w	r7, r7, #15
 800f0d4:	2503      	movs	r5, #3
 800f0d6:	4eb6      	ldr	r6, [pc, #728]	; (800f3b0 <_dtoa_r+0x648>)
 800f0d8:	b957      	cbnz	r7, 800f0f0 <_dtoa_r+0x388>
 800f0da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f0de:	ec53 2b18 	vmov	r2, r3, d8
 800f0e2:	f7f1 fbbb 	bl	800085c <__aeabi_ddiv>
 800f0e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f0ea:	e029      	b.n	800f140 <_dtoa_r+0x3d8>
 800f0ec:	2502      	movs	r5, #2
 800f0ee:	e7f2      	b.n	800f0d6 <_dtoa_r+0x36e>
 800f0f0:	07f9      	lsls	r1, r7, #31
 800f0f2:	d508      	bpl.n	800f106 <_dtoa_r+0x39e>
 800f0f4:	ec51 0b18 	vmov	r0, r1, d8
 800f0f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f0fc:	f7f1 fa84 	bl	8000608 <__aeabi_dmul>
 800f100:	ec41 0b18 	vmov	d8, r0, r1
 800f104:	3501      	adds	r5, #1
 800f106:	107f      	asrs	r7, r7, #1
 800f108:	3608      	adds	r6, #8
 800f10a:	e7e5      	b.n	800f0d8 <_dtoa_r+0x370>
 800f10c:	f000 80a6 	beq.w	800f25c <_dtoa_r+0x4f4>
 800f110:	f1ca 0600 	rsb	r6, sl, #0
 800f114:	4ba5      	ldr	r3, [pc, #660]	; (800f3ac <_dtoa_r+0x644>)
 800f116:	4fa6      	ldr	r7, [pc, #664]	; (800f3b0 <_dtoa_r+0x648>)
 800f118:	f006 020f 	and.w	r2, r6, #15
 800f11c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f124:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f128:	f7f1 fa6e 	bl	8000608 <__aeabi_dmul>
 800f12c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f130:	1136      	asrs	r6, r6, #4
 800f132:	2300      	movs	r3, #0
 800f134:	2502      	movs	r5, #2
 800f136:	2e00      	cmp	r6, #0
 800f138:	f040 8085 	bne.w	800f246 <_dtoa_r+0x4de>
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d1d2      	bne.n	800f0e6 <_dtoa_r+0x37e>
 800f140:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f142:	2b00      	cmp	r3, #0
 800f144:	f000 808c 	beq.w	800f260 <_dtoa_r+0x4f8>
 800f148:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f14c:	4b99      	ldr	r3, [pc, #612]	; (800f3b4 <_dtoa_r+0x64c>)
 800f14e:	2200      	movs	r2, #0
 800f150:	4630      	mov	r0, r6
 800f152:	4639      	mov	r1, r7
 800f154:	f7f1 fcca 	bl	8000aec <__aeabi_dcmplt>
 800f158:	2800      	cmp	r0, #0
 800f15a:	f000 8081 	beq.w	800f260 <_dtoa_r+0x4f8>
 800f15e:	9b01      	ldr	r3, [sp, #4]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d07d      	beq.n	800f260 <_dtoa_r+0x4f8>
 800f164:	f1b9 0f00 	cmp.w	r9, #0
 800f168:	dd3c      	ble.n	800f1e4 <_dtoa_r+0x47c>
 800f16a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f16e:	9307      	str	r3, [sp, #28]
 800f170:	2200      	movs	r2, #0
 800f172:	4b91      	ldr	r3, [pc, #580]	; (800f3b8 <_dtoa_r+0x650>)
 800f174:	4630      	mov	r0, r6
 800f176:	4639      	mov	r1, r7
 800f178:	f7f1 fa46 	bl	8000608 <__aeabi_dmul>
 800f17c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f180:	3501      	adds	r5, #1
 800f182:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f186:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f18a:	4628      	mov	r0, r5
 800f18c:	f7f1 f9d2 	bl	8000534 <__aeabi_i2d>
 800f190:	4632      	mov	r2, r6
 800f192:	463b      	mov	r3, r7
 800f194:	f7f1 fa38 	bl	8000608 <__aeabi_dmul>
 800f198:	4b88      	ldr	r3, [pc, #544]	; (800f3bc <_dtoa_r+0x654>)
 800f19a:	2200      	movs	r2, #0
 800f19c:	f7f1 f87e 	bl	800029c <__adddf3>
 800f1a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f1a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f1a8:	9303      	str	r3, [sp, #12]
 800f1aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d15c      	bne.n	800f26a <_dtoa_r+0x502>
 800f1b0:	4b83      	ldr	r3, [pc, #524]	; (800f3c0 <_dtoa_r+0x658>)
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	4630      	mov	r0, r6
 800f1b6:	4639      	mov	r1, r7
 800f1b8:	f7f1 f86e 	bl	8000298 <__aeabi_dsub>
 800f1bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f1c0:	4606      	mov	r6, r0
 800f1c2:	460f      	mov	r7, r1
 800f1c4:	f7f1 fcb0 	bl	8000b28 <__aeabi_dcmpgt>
 800f1c8:	2800      	cmp	r0, #0
 800f1ca:	f040 8296 	bne.w	800f6fa <_dtoa_r+0x992>
 800f1ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f1d2:	4630      	mov	r0, r6
 800f1d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f1d8:	4639      	mov	r1, r7
 800f1da:	f7f1 fc87 	bl	8000aec <__aeabi_dcmplt>
 800f1de:	2800      	cmp	r0, #0
 800f1e0:	f040 8288 	bne.w	800f6f4 <_dtoa_r+0x98c>
 800f1e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f1e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f1ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	f2c0 8158 	blt.w	800f4a4 <_dtoa_r+0x73c>
 800f1f4:	f1ba 0f0e 	cmp.w	sl, #14
 800f1f8:	f300 8154 	bgt.w	800f4a4 <_dtoa_r+0x73c>
 800f1fc:	4b6b      	ldr	r3, [pc, #428]	; (800f3ac <_dtoa_r+0x644>)
 800f1fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f202:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f208:	2b00      	cmp	r3, #0
 800f20a:	f280 80e3 	bge.w	800f3d4 <_dtoa_r+0x66c>
 800f20e:	9b01      	ldr	r3, [sp, #4]
 800f210:	2b00      	cmp	r3, #0
 800f212:	f300 80df 	bgt.w	800f3d4 <_dtoa_r+0x66c>
 800f216:	f040 826d 	bne.w	800f6f4 <_dtoa_r+0x98c>
 800f21a:	4b69      	ldr	r3, [pc, #420]	; (800f3c0 <_dtoa_r+0x658>)
 800f21c:	2200      	movs	r2, #0
 800f21e:	4640      	mov	r0, r8
 800f220:	4649      	mov	r1, r9
 800f222:	f7f1 f9f1 	bl	8000608 <__aeabi_dmul>
 800f226:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f22a:	f7f1 fc73 	bl	8000b14 <__aeabi_dcmpge>
 800f22e:	9e01      	ldr	r6, [sp, #4]
 800f230:	4637      	mov	r7, r6
 800f232:	2800      	cmp	r0, #0
 800f234:	f040 8243 	bne.w	800f6be <_dtoa_r+0x956>
 800f238:	9d00      	ldr	r5, [sp, #0]
 800f23a:	2331      	movs	r3, #49	; 0x31
 800f23c:	f805 3b01 	strb.w	r3, [r5], #1
 800f240:	f10a 0a01 	add.w	sl, sl, #1
 800f244:	e23f      	b.n	800f6c6 <_dtoa_r+0x95e>
 800f246:	07f2      	lsls	r2, r6, #31
 800f248:	d505      	bpl.n	800f256 <_dtoa_r+0x4ee>
 800f24a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f24e:	f7f1 f9db 	bl	8000608 <__aeabi_dmul>
 800f252:	3501      	adds	r5, #1
 800f254:	2301      	movs	r3, #1
 800f256:	1076      	asrs	r6, r6, #1
 800f258:	3708      	adds	r7, #8
 800f25a:	e76c      	b.n	800f136 <_dtoa_r+0x3ce>
 800f25c:	2502      	movs	r5, #2
 800f25e:	e76f      	b.n	800f140 <_dtoa_r+0x3d8>
 800f260:	9b01      	ldr	r3, [sp, #4]
 800f262:	f8cd a01c 	str.w	sl, [sp, #28]
 800f266:	930c      	str	r3, [sp, #48]	; 0x30
 800f268:	e78d      	b.n	800f186 <_dtoa_r+0x41e>
 800f26a:	9900      	ldr	r1, [sp, #0]
 800f26c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f26e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f270:	4b4e      	ldr	r3, [pc, #312]	; (800f3ac <_dtoa_r+0x644>)
 800f272:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f276:	4401      	add	r1, r0
 800f278:	9102      	str	r1, [sp, #8]
 800f27a:	9908      	ldr	r1, [sp, #32]
 800f27c:	eeb0 8a47 	vmov.f32	s16, s14
 800f280:	eef0 8a67 	vmov.f32	s17, s15
 800f284:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f288:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f28c:	2900      	cmp	r1, #0
 800f28e:	d045      	beq.n	800f31c <_dtoa_r+0x5b4>
 800f290:	494c      	ldr	r1, [pc, #304]	; (800f3c4 <_dtoa_r+0x65c>)
 800f292:	2000      	movs	r0, #0
 800f294:	f7f1 fae2 	bl	800085c <__aeabi_ddiv>
 800f298:	ec53 2b18 	vmov	r2, r3, d8
 800f29c:	f7f0 fffc 	bl	8000298 <__aeabi_dsub>
 800f2a0:	9d00      	ldr	r5, [sp, #0]
 800f2a2:	ec41 0b18 	vmov	d8, r0, r1
 800f2a6:	4639      	mov	r1, r7
 800f2a8:	4630      	mov	r0, r6
 800f2aa:	f7f1 fc5d 	bl	8000b68 <__aeabi_d2iz>
 800f2ae:	900c      	str	r0, [sp, #48]	; 0x30
 800f2b0:	f7f1 f940 	bl	8000534 <__aeabi_i2d>
 800f2b4:	4602      	mov	r2, r0
 800f2b6:	460b      	mov	r3, r1
 800f2b8:	4630      	mov	r0, r6
 800f2ba:	4639      	mov	r1, r7
 800f2bc:	f7f0 ffec 	bl	8000298 <__aeabi_dsub>
 800f2c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f2c2:	3330      	adds	r3, #48	; 0x30
 800f2c4:	f805 3b01 	strb.w	r3, [r5], #1
 800f2c8:	ec53 2b18 	vmov	r2, r3, d8
 800f2cc:	4606      	mov	r6, r0
 800f2ce:	460f      	mov	r7, r1
 800f2d0:	f7f1 fc0c 	bl	8000aec <__aeabi_dcmplt>
 800f2d4:	2800      	cmp	r0, #0
 800f2d6:	d165      	bne.n	800f3a4 <_dtoa_r+0x63c>
 800f2d8:	4632      	mov	r2, r6
 800f2da:	463b      	mov	r3, r7
 800f2dc:	4935      	ldr	r1, [pc, #212]	; (800f3b4 <_dtoa_r+0x64c>)
 800f2de:	2000      	movs	r0, #0
 800f2e0:	f7f0 ffda 	bl	8000298 <__aeabi_dsub>
 800f2e4:	ec53 2b18 	vmov	r2, r3, d8
 800f2e8:	f7f1 fc00 	bl	8000aec <__aeabi_dcmplt>
 800f2ec:	2800      	cmp	r0, #0
 800f2ee:	f040 80b9 	bne.w	800f464 <_dtoa_r+0x6fc>
 800f2f2:	9b02      	ldr	r3, [sp, #8]
 800f2f4:	429d      	cmp	r5, r3
 800f2f6:	f43f af75 	beq.w	800f1e4 <_dtoa_r+0x47c>
 800f2fa:	4b2f      	ldr	r3, [pc, #188]	; (800f3b8 <_dtoa_r+0x650>)
 800f2fc:	ec51 0b18 	vmov	r0, r1, d8
 800f300:	2200      	movs	r2, #0
 800f302:	f7f1 f981 	bl	8000608 <__aeabi_dmul>
 800f306:	4b2c      	ldr	r3, [pc, #176]	; (800f3b8 <_dtoa_r+0x650>)
 800f308:	ec41 0b18 	vmov	d8, r0, r1
 800f30c:	2200      	movs	r2, #0
 800f30e:	4630      	mov	r0, r6
 800f310:	4639      	mov	r1, r7
 800f312:	f7f1 f979 	bl	8000608 <__aeabi_dmul>
 800f316:	4606      	mov	r6, r0
 800f318:	460f      	mov	r7, r1
 800f31a:	e7c4      	b.n	800f2a6 <_dtoa_r+0x53e>
 800f31c:	ec51 0b17 	vmov	r0, r1, d7
 800f320:	f7f1 f972 	bl	8000608 <__aeabi_dmul>
 800f324:	9b02      	ldr	r3, [sp, #8]
 800f326:	9d00      	ldr	r5, [sp, #0]
 800f328:	930c      	str	r3, [sp, #48]	; 0x30
 800f32a:	ec41 0b18 	vmov	d8, r0, r1
 800f32e:	4639      	mov	r1, r7
 800f330:	4630      	mov	r0, r6
 800f332:	f7f1 fc19 	bl	8000b68 <__aeabi_d2iz>
 800f336:	9011      	str	r0, [sp, #68]	; 0x44
 800f338:	f7f1 f8fc 	bl	8000534 <__aeabi_i2d>
 800f33c:	4602      	mov	r2, r0
 800f33e:	460b      	mov	r3, r1
 800f340:	4630      	mov	r0, r6
 800f342:	4639      	mov	r1, r7
 800f344:	f7f0 ffa8 	bl	8000298 <__aeabi_dsub>
 800f348:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f34a:	3330      	adds	r3, #48	; 0x30
 800f34c:	f805 3b01 	strb.w	r3, [r5], #1
 800f350:	9b02      	ldr	r3, [sp, #8]
 800f352:	429d      	cmp	r5, r3
 800f354:	4606      	mov	r6, r0
 800f356:	460f      	mov	r7, r1
 800f358:	f04f 0200 	mov.w	r2, #0
 800f35c:	d134      	bne.n	800f3c8 <_dtoa_r+0x660>
 800f35e:	4b19      	ldr	r3, [pc, #100]	; (800f3c4 <_dtoa_r+0x65c>)
 800f360:	ec51 0b18 	vmov	r0, r1, d8
 800f364:	f7f0 ff9a 	bl	800029c <__adddf3>
 800f368:	4602      	mov	r2, r0
 800f36a:	460b      	mov	r3, r1
 800f36c:	4630      	mov	r0, r6
 800f36e:	4639      	mov	r1, r7
 800f370:	f7f1 fbda 	bl	8000b28 <__aeabi_dcmpgt>
 800f374:	2800      	cmp	r0, #0
 800f376:	d175      	bne.n	800f464 <_dtoa_r+0x6fc>
 800f378:	ec53 2b18 	vmov	r2, r3, d8
 800f37c:	4911      	ldr	r1, [pc, #68]	; (800f3c4 <_dtoa_r+0x65c>)
 800f37e:	2000      	movs	r0, #0
 800f380:	f7f0 ff8a 	bl	8000298 <__aeabi_dsub>
 800f384:	4602      	mov	r2, r0
 800f386:	460b      	mov	r3, r1
 800f388:	4630      	mov	r0, r6
 800f38a:	4639      	mov	r1, r7
 800f38c:	f7f1 fbae 	bl	8000aec <__aeabi_dcmplt>
 800f390:	2800      	cmp	r0, #0
 800f392:	f43f af27 	beq.w	800f1e4 <_dtoa_r+0x47c>
 800f396:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f398:	1e6b      	subs	r3, r5, #1
 800f39a:	930c      	str	r3, [sp, #48]	; 0x30
 800f39c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f3a0:	2b30      	cmp	r3, #48	; 0x30
 800f3a2:	d0f8      	beq.n	800f396 <_dtoa_r+0x62e>
 800f3a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f3a8:	e04a      	b.n	800f440 <_dtoa_r+0x6d8>
 800f3aa:	bf00      	nop
 800f3ac:	08013b60 	.word	0x08013b60
 800f3b0:	08013b38 	.word	0x08013b38
 800f3b4:	3ff00000 	.word	0x3ff00000
 800f3b8:	40240000 	.word	0x40240000
 800f3bc:	401c0000 	.word	0x401c0000
 800f3c0:	40140000 	.word	0x40140000
 800f3c4:	3fe00000 	.word	0x3fe00000
 800f3c8:	4baf      	ldr	r3, [pc, #700]	; (800f688 <_dtoa_r+0x920>)
 800f3ca:	f7f1 f91d 	bl	8000608 <__aeabi_dmul>
 800f3ce:	4606      	mov	r6, r0
 800f3d0:	460f      	mov	r7, r1
 800f3d2:	e7ac      	b.n	800f32e <_dtoa_r+0x5c6>
 800f3d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f3d8:	9d00      	ldr	r5, [sp, #0]
 800f3da:	4642      	mov	r2, r8
 800f3dc:	464b      	mov	r3, r9
 800f3de:	4630      	mov	r0, r6
 800f3e0:	4639      	mov	r1, r7
 800f3e2:	f7f1 fa3b 	bl	800085c <__aeabi_ddiv>
 800f3e6:	f7f1 fbbf 	bl	8000b68 <__aeabi_d2iz>
 800f3ea:	9002      	str	r0, [sp, #8]
 800f3ec:	f7f1 f8a2 	bl	8000534 <__aeabi_i2d>
 800f3f0:	4642      	mov	r2, r8
 800f3f2:	464b      	mov	r3, r9
 800f3f4:	f7f1 f908 	bl	8000608 <__aeabi_dmul>
 800f3f8:	4602      	mov	r2, r0
 800f3fa:	460b      	mov	r3, r1
 800f3fc:	4630      	mov	r0, r6
 800f3fe:	4639      	mov	r1, r7
 800f400:	f7f0 ff4a 	bl	8000298 <__aeabi_dsub>
 800f404:	9e02      	ldr	r6, [sp, #8]
 800f406:	9f01      	ldr	r7, [sp, #4]
 800f408:	3630      	adds	r6, #48	; 0x30
 800f40a:	f805 6b01 	strb.w	r6, [r5], #1
 800f40e:	9e00      	ldr	r6, [sp, #0]
 800f410:	1bae      	subs	r6, r5, r6
 800f412:	42b7      	cmp	r7, r6
 800f414:	4602      	mov	r2, r0
 800f416:	460b      	mov	r3, r1
 800f418:	d137      	bne.n	800f48a <_dtoa_r+0x722>
 800f41a:	f7f0 ff3f 	bl	800029c <__adddf3>
 800f41e:	4642      	mov	r2, r8
 800f420:	464b      	mov	r3, r9
 800f422:	4606      	mov	r6, r0
 800f424:	460f      	mov	r7, r1
 800f426:	f7f1 fb7f 	bl	8000b28 <__aeabi_dcmpgt>
 800f42a:	b9c8      	cbnz	r0, 800f460 <_dtoa_r+0x6f8>
 800f42c:	4642      	mov	r2, r8
 800f42e:	464b      	mov	r3, r9
 800f430:	4630      	mov	r0, r6
 800f432:	4639      	mov	r1, r7
 800f434:	f7f1 fb50 	bl	8000ad8 <__aeabi_dcmpeq>
 800f438:	b110      	cbz	r0, 800f440 <_dtoa_r+0x6d8>
 800f43a:	9b02      	ldr	r3, [sp, #8]
 800f43c:	07d9      	lsls	r1, r3, #31
 800f43e:	d40f      	bmi.n	800f460 <_dtoa_r+0x6f8>
 800f440:	4620      	mov	r0, r4
 800f442:	4659      	mov	r1, fp
 800f444:	f000 fe60 	bl	8010108 <_Bfree>
 800f448:	2300      	movs	r3, #0
 800f44a:	702b      	strb	r3, [r5, #0]
 800f44c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f44e:	f10a 0001 	add.w	r0, sl, #1
 800f452:	6018      	str	r0, [r3, #0]
 800f454:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f456:	2b00      	cmp	r3, #0
 800f458:	f43f acd8 	beq.w	800ee0c <_dtoa_r+0xa4>
 800f45c:	601d      	str	r5, [r3, #0]
 800f45e:	e4d5      	b.n	800ee0c <_dtoa_r+0xa4>
 800f460:	f8cd a01c 	str.w	sl, [sp, #28]
 800f464:	462b      	mov	r3, r5
 800f466:	461d      	mov	r5, r3
 800f468:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f46c:	2a39      	cmp	r2, #57	; 0x39
 800f46e:	d108      	bne.n	800f482 <_dtoa_r+0x71a>
 800f470:	9a00      	ldr	r2, [sp, #0]
 800f472:	429a      	cmp	r2, r3
 800f474:	d1f7      	bne.n	800f466 <_dtoa_r+0x6fe>
 800f476:	9a07      	ldr	r2, [sp, #28]
 800f478:	9900      	ldr	r1, [sp, #0]
 800f47a:	3201      	adds	r2, #1
 800f47c:	9207      	str	r2, [sp, #28]
 800f47e:	2230      	movs	r2, #48	; 0x30
 800f480:	700a      	strb	r2, [r1, #0]
 800f482:	781a      	ldrb	r2, [r3, #0]
 800f484:	3201      	adds	r2, #1
 800f486:	701a      	strb	r2, [r3, #0]
 800f488:	e78c      	b.n	800f3a4 <_dtoa_r+0x63c>
 800f48a:	4b7f      	ldr	r3, [pc, #508]	; (800f688 <_dtoa_r+0x920>)
 800f48c:	2200      	movs	r2, #0
 800f48e:	f7f1 f8bb 	bl	8000608 <__aeabi_dmul>
 800f492:	2200      	movs	r2, #0
 800f494:	2300      	movs	r3, #0
 800f496:	4606      	mov	r6, r0
 800f498:	460f      	mov	r7, r1
 800f49a:	f7f1 fb1d 	bl	8000ad8 <__aeabi_dcmpeq>
 800f49e:	2800      	cmp	r0, #0
 800f4a0:	d09b      	beq.n	800f3da <_dtoa_r+0x672>
 800f4a2:	e7cd      	b.n	800f440 <_dtoa_r+0x6d8>
 800f4a4:	9a08      	ldr	r2, [sp, #32]
 800f4a6:	2a00      	cmp	r2, #0
 800f4a8:	f000 80c4 	beq.w	800f634 <_dtoa_r+0x8cc>
 800f4ac:	9a05      	ldr	r2, [sp, #20]
 800f4ae:	2a01      	cmp	r2, #1
 800f4b0:	f300 80a8 	bgt.w	800f604 <_dtoa_r+0x89c>
 800f4b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f4b6:	2a00      	cmp	r2, #0
 800f4b8:	f000 80a0 	beq.w	800f5fc <_dtoa_r+0x894>
 800f4bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f4c0:	9e06      	ldr	r6, [sp, #24]
 800f4c2:	4645      	mov	r5, r8
 800f4c4:	9a04      	ldr	r2, [sp, #16]
 800f4c6:	2101      	movs	r1, #1
 800f4c8:	441a      	add	r2, r3
 800f4ca:	4620      	mov	r0, r4
 800f4cc:	4498      	add	r8, r3
 800f4ce:	9204      	str	r2, [sp, #16]
 800f4d0:	f000 ff20 	bl	8010314 <__i2b>
 800f4d4:	4607      	mov	r7, r0
 800f4d6:	2d00      	cmp	r5, #0
 800f4d8:	dd0b      	ble.n	800f4f2 <_dtoa_r+0x78a>
 800f4da:	9b04      	ldr	r3, [sp, #16]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	dd08      	ble.n	800f4f2 <_dtoa_r+0x78a>
 800f4e0:	42ab      	cmp	r3, r5
 800f4e2:	9a04      	ldr	r2, [sp, #16]
 800f4e4:	bfa8      	it	ge
 800f4e6:	462b      	movge	r3, r5
 800f4e8:	eba8 0803 	sub.w	r8, r8, r3
 800f4ec:	1aed      	subs	r5, r5, r3
 800f4ee:	1ad3      	subs	r3, r2, r3
 800f4f0:	9304      	str	r3, [sp, #16]
 800f4f2:	9b06      	ldr	r3, [sp, #24]
 800f4f4:	b1fb      	cbz	r3, 800f536 <_dtoa_r+0x7ce>
 800f4f6:	9b08      	ldr	r3, [sp, #32]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	f000 809f 	beq.w	800f63c <_dtoa_r+0x8d4>
 800f4fe:	2e00      	cmp	r6, #0
 800f500:	dd11      	ble.n	800f526 <_dtoa_r+0x7be>
 800f502:	4639      	mov	r1, r7
 800f504:	4632      	mov	r2, r6
 800f506:	4620      	mov	r0, r4
 800f508:	f000 ffc0 	bl	801048c <__pow5mult>
 800f50c:	465a      	mov	r2, fp
 800f50e:	4601      	mov	r1, r0
 800f510:	4607      	mov	r7, r0
 800f512:	4620      	mov	r0, r4
 800f514:	f000 ff14 	bl	8010340 <__multiply>
 800f518:	4659      	mov	r1, fp
 800f51a:	9007      	str	r0, [sp, #28]
 800f51c:	4620      	mov	r0, r4
 800f51e:	f000 fdf3 	bl	8010108 <_Bfree>
 800f522:	9b07      	ldr	r3, [sp, #28]
 800f524:	469b      	mov	fp, r3
 800f526:	9b06      	ldr	r3, [sp, #24]
 800f528:	1b9a      	subs	r2, r3, r6
 800f52a:	d004      	beq.n	800f536 <_dtoa_r+0x7ce>
 800f52c:	4659      	mov	r1, fp
 800f52e:	4620      	mov	r0, r4
 800f530:	f000 ffac 	bl	801048c <__pow5mult>
 800f534:	4683      	mov	fp, r0
 800f536:	2101      	movs	r1, #1
 800f538:	4620      	mov	r0, r4
 800f53a:	f000 feeb 	bl	8010314 <__i2b>
 800f53e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f540:	2b00      	cmp	r3, #0
 800f542:	4606      	mov	r6, r0
 800f544:	dd7c      	ble.n	800f640 <_dtoa_r+0x8d8>
 800f546:	461a      	mov	r2, r3
 800f548:	4601      	mov	r1, r0
 800f54a:	4620      	mov	r0, r4
 800f54c:	f000 ff9e 	bl	801048c <__pow5mult>
 800f550:	9b05      	ldr	r3, [sp, #20]
 800f552:	2b01      	cmp	r3, #1
 800f554:	4606      	mov	r6, r0
 800f556:	dd76      	ble.n	800f646 <_dtoa_r+0x8de>
 800f558:	2300      	movs	r3, #0
 800f55a:	9306      	str	r3, [sp, #24]
 800f55c:	6933      	ldr	r3, [r6, #16]
 800f55e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f562:	6918      	ldr	r0, [r3, #16]
 800f564:	f000 fe86 	bl	8010274 <__hi0bits>
 800f568:	f1c0 0020 	rsb	r0, r0, #32
 800f56c:	9b04      	ldr	r3, [sp, #16]
 800f56e:	4418      	add	r0, r3
 800f570:	f010 001f 	ands.w	r0, r0, #31
 800f574:	f000 8086 	beq.w	800f684 <_dtoa_r+0x91c>
 800f578:	f1c0 0320 	rsb	r3, r0, #32
 800f57c:	2b04      	cmp	r3, #4
 800f57e:	dd7f      	ble.n	800f680 <_dtoa_r+0x918>
 800f580:	f1c0 001c 	rsb	r0, r0, #28
 800f584:	9b04      	ldr	r3, [sp, #16]
 800f586:	4403      	add	r3, r0
 800f588:	4480      	add	r8, r0
 800f58a:	4405      	add	r5, r0
 800f58c:	9304      	str	r3, [sp, #16]
 800f58e:	f1b8 0f00 	cmp.w	r8, #0
 800f592:	dd05      	ble.n	800f5a0 <_dtoa_r+0x838>
 800f594:	4659      	mov	r1, fp
 800f596:	4642      	mov	r2, r8
 800f598:	4620      	mov	r0, r4
 800f59a:	f000 ffd1 	bl	8010540 <__lshift>
 800f59e:	4683      	mov	fp, r0
 800f5a0:	9b04      	ldr	r3, [sp, #16]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	dd05      	ble.n	800f5b2 <_dtoa_r+0x84a>
 800f5a6:	4631      	mov	r1, r6
 800f5a8:	461a      	mov	r2, r3
 800f5aa:	4620      	mov	r0, r4
 800f5ac:	f000 ffc8 	bl	8010540 <__lshift>
 800f5b0:	4606      	mov	r6, r0
 800f5b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d069      	beq.n	800f68c <_dtoa_r+0x924>
 800f5b8:	4631      	mov	r1, r6
 800f5ba:	4658      	mov	r0, fp
 800f5bc:	f001 f82c 	bl	8010618 <__mcmp>
 800f5c0:	2800      	cmp	r0, #0
 800f5c2:	da63      	bge.n	800f68c <_dtoa_r+0x924>
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	4659      	mov	r1, fp
 800f5c8:	220a      	movs	r2, #10
 800f5ca:	4620      	mov	r0, r4
 800f5cc:	f000 fdbe 	bl	801014c <__multadd>
 800f5d0:	9b08      	ldr	r3, [sp, #32]
 800f5d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f5d6:	4683      	mov	fp, r0
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	f000 818f 	beq.w	800f8fc <_dtoa_r+0xb94>
 800f5de:	4639      	mov	r1, r7
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	220a      	movs	r2, #10
 800f5e4:	4620      	mov	r0, r4
 800f5e6:	f000 fdb1 	bl	801014c <__multadd>
 800f5ea:	f1b9 0f00 	cmp.w	r9, #0
 800f5ee:	4607      	mov	r7, r0
 800f5f0:	f300 808e 	bgt.w	800f710 <_dtoa_r+0x9a8>
 800f5f4:	9b05      	ldr	r3, [sp, #20]
 800f5f6:	2b02      	cmp	r3, #2
 800f5f8:	dc50      	bgt.n	800f69c <_dtoa_r+0x934>
 800f5fa:	e089      	b.n	800f710 <_dtoa_r+0x9a8>
 800f5fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f5fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f602:	e75d      	b.n	800f4c0 <_dtoa_r+0x758>
 800f604:	9b01      	ldr	r3, [sp, #4]
 800f606:	1e5e      	subs	r6, r3, #1
 800f608:	9b06      	ldr	r3, [sp, #24]
 800f60a:	42b3      	cmp	r3, r6
 800f60c:	bfbf      	itttt	lt
 800f60e:	9b06      	ldrlt	r3, [sp, #24]
 800f610:	9606      	strlt	r6, [sp, #24]
 800f612:	1af2      	sublt	r2, r6, r3
 800f614:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800f616:	bfb6      	itet	lt
 800f618:	189b      	addlt	r3, r3, r2
 800f61a:	1b9e      	subge	r6, r3, r6
 800f61c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800f61e:	9b01      	ldr	r3, [sp, #4]
 800f620:	bfb8      	it	lt
 800f622:	2600      	movlt	r6, #0
 800f624:	2b00      	cmp	r3, #0
 800f626:	bfb5      	itete	lt
 800f628:	eba8 0503 	sublt.w	r5, r8, r3
 800f62c:	9b01      	ldrge	r3, [sp, #4]
 800f62e:	2300      	movlt	r3, #0
 800f630:	4645      	movge	r5, r8
 800f632:	e747      	b.n	800f4c4 <_dtoa_r+0x75c>
 800f634:	9e06      	ldr	r6, [sp, #24]
 800f636:	9f08      	ldr	r7, [sp, #32]
 800f638:	4645      	mov	r5, r8
 800f63a:	e74c      	b.n	800f4d6 <_dtoa_r+0x76e>
 800f63c:	9a06      	ldr	r2, [sp, #24]
 800f63e:	e775      	b.n	800f52c <_dtoa_r+0x7c4>
 800f640:	9b05      	ldr	r3, [sp, #20]
 800f642:	2b01      	cmp	r3, #1
 800f644:	dc18      	bgt.n	800f678 <_dtoa_r+0x910>
 800f646:	9b02      	ldr	r3, [sp, #8]
 800f648:	b9b3      	cbnz	r3, 800f678 <_dtoa_r+0x910>
 800f64a:	9b03      	ldr	r3, [sp, #12]
 800f64c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f650:	b9a3      	cbnz	r3, 800f67c <_dtoa_r+0x914>
 800f652:	9b03      	ldr	r3, [sp, #12]
 800f654:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f658:	0d1b      	lsrs	r3, r3, #20
 800f65a:	051b      	lsls	r3, r3, #20
 800f65c:	b12b      	cbz	r3, 800f66a <_dtoa_r+0x902>
 800f65e:	9b04      	ldr	r3, [sp, #16]
 800f660:	3301      	adds	r3, #1
 800f662:	9304      	str	r3, [sp, #16]
 800f664:	f108 0801 	add.w	r8, r8, #1
 800f668:	2301      	movs	r3, #1
 800f66a:	9306      	str	r3, [sp, #24]
 800f66c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f66e:	2b00      	cmp	r3, #0
 800f670:	f47f af74 	bne.w	800f55c <_dtoa_r+0x7f4>
 800f674:	2001      	movs	r0, #1
 800f676:	e779      	b.n	800f56c <_dtoa_r+0x804>
 800f678:	2300      	movs	r3, #0
 800f67a:	e7f6      	b.n	800f66a <_dtoa_r+0x902>
 800f67c:	9b02      	ldr	r3, [sp, #8]
 800f67e:	e7f4      	b.n	800f66a <_dtoa_r+0x902>
 800f680:	d085      	beq.n	800f58e <_dtoa_r+0x826>
 800f682:	4618      	mov	r0, r3
 800f684:	301c      	adds	r0, #28
 800f686:	e77d      	b.n	800f584 <_dtoa_r+0x81c>
 800f688:	40240000 	.word	0x40240000
 800f68c:	9b01      	ldr	r3, [sp, #4]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	dc38      	bgt.n	800f704 <_dtoa_r+0x99c>
 800f692:	9b05      	ldr	r3, [sp, #20]
 800f694:	2b02      	cmp	r3, #2
 800f696:	dd35      	ble.n	800f704 <_dtoa_r+0x99c>
 800f698:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f69c:	f1b9 0f00 	cmp.w	r9, #0
 800f6a0:	d10d      	bne.n	800f6be <_dtoa_r+0x956>
 800f6a2:	4631      	mov	r1, r6
 800f6a4:	464b      	mov	r3, r9
 800f6a6:	2205      	movs	r2, #5
 800f6a8:	4620      	mov	r0, r4
 800f6aa:	f000 fd4f 	bl	801014c <__multadd>
 800f6ae:	4601      	mov	r1, r0
 800f6b0:	4606      	mov	r6, r0
 800f6b2:	4658      	mov	r0, fp
 800f6b4:	f000 ffb0 	bl	8010618 <__mcmp>
 800f6b8:	2800      	cmp	r0, #0
 800f6ba:	f73f adbd 	bgt.w	800f238 <_dtoa_r+0x4d0>
 800f6be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6c0:	9d00      	ldr	r5, [sp, #0]
 800f6c2:	ea6f 0a03 	mvn.w	sl, r3
 800f6c6:	f04f 0800 	mov.w	r8, #0
 800f6ca:	4631      	mov	r1, r6
 800f6cc:	4620      	mov	r0, r4
 800f6ce:	f000 fd1b 	bl	8010108 <_Bfree>
 800f6d2:	2f00      	cmp	r7, #0
 800f6d4:	f43f aeb4 	beq.w	800f440 <_dtoa_r+0x6d8>
 800f6d8:	f1b8 0f00 	cmp.w	r8, #0
 800f6dc:	d005      	beq.n	800f6ea <_dtoa_r+0x982>
 800f6de:	45b8      	cmp	r8, r7
 800f6e0:	d003      	beq.n	800f6ea <_dtoa_r+0x982>
 800f6e2:	4641      	mov	r1, r8
 800f6e4:	4620      	mov	r0, r4
 800f6e6:	f000 fd0f 	bl	8010108 <_Bfree>
 800f6ea:	4639      	mov	r1, r7
 800f6ec:	4620      	mov	r0, r4
 800f6ee:	f000 fd0b 	bl	8010108 <_Bfree>
 800f6f2:	e6a5      	b.n	800f440 <_dtoa_r+0x6d8>
 800f6f4:	2600      	movs	r6, #0
 800f6f6:	4637      	mov	r7, r6
 800f6f8:	e7e1      	b.n	800f6be <_dtoa_r+0x956>
 800f6fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f6fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f700:	4637      	mov	r7, r6
 800f702:	e599      	b.n	800f238 <_dtoa_r+0x4d0>
 800f704:	9b08      	ldr	r3, [sp, #32]
 800f706:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	f000 80fd 	beq.w	800f90a <_dtoa_r+0xba2>
 800f710:	2d00      	cmp	r5, #0
 800f712:	dd05      	ble.n	800f720 <_dtoa_r+0x9b8>
 800f714:	4639      	mov	r1, r7
 800f716:	462a      	mov	r2, r5
 800f718:	4620      	mov	r0, r4
 800f71a:	f000 ff11 	bl	8010540 <__lshift>
 800f71e:	4607      	mov	r7, r0
 800f720:	9b06      	ldr	r3, [sp, #24]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d05c      	beq.n	800f7e0 <_dtoa_r+0xa78>
 800f726:	6879      	ldr	r1, [r7, #4]
 800f728:	4620      	mov	r0, r4
 800f72a:	f000 fcad 	bl	8010088 <_Balloc>
 800f72e:	4605      	mov	r5, r0
 800f730:	b928      	cbnz	r0, 800f73e <_dtoa_r+0x9d6>
 800f732:	4b80      	ldr	r3, [pc, #512]	; (800f934 <_dtoa_r+0xbcc>)
 800f734:	4602      	mov	r2, r0
 800f736:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f73a:	f7ff bb2e 	b.w	800ed9a <_dtoa_r+0x32>
 800f73e:	693a      	ldr	r2, [r7, #16]
 800f740:	3202      	adds	r2, #2
 800f742:	0092      	lsls	r2, r2, #2
 800f744:	f107 010c 	add.w	r1, r7, #12
 800f748:	300c      	adds	r0, #12
 800f74a:	f7fd fbb9 	bl	800cec0 <memcpy>
 800f74e:	2201      	movs	r2, #1
 800f750:	4629      	mov	r1, r5
 800f752:	4620      	mov	r0, r4
 800f754:	f000 fef4 	bl	8010540 <__lshift>
 800f758:	9b00      	ldr	r3, [sp, #0]
 800f75a:	3301      	adds	r3, #1
 800f75c:	9301      	str	r3, [sp, #4]
 800f75e:	9b00      	ldr	r3, [sp, #0]
 800f760:	444b      	add	r3, r9
 800f762:	9307      	str	r3, [sp, #28]
 800f764:	9b02      	ldr	r3, [sp, #8]
 800f766:	f003 0301 	and.w	r3, r3, #1
 800f76a:	46b8      	mov	r8, r7
 800f76c:	9306      	str	r3, [sp, #24]
 800f76e:	4607      	mov	r7, r0
 800f770:	9b01      	ldr	r3, [sp, #4]
 800f772:	4631      	mov	r1, r6
 800f774:	3b01      	subs	r3, #1
 800f776:	4658      	mov	r0, fp
 800f778:	9302      	str	r3, [sp, #8]
 800f77a:	f7ff fa69 	bl	800ec50 <quorem>
 800f77e:	4603      	mov	r3, r0
 800f780:	3330      	adds	r3, #48	; 0x30
 800f782:	9004      	str	r0, [sp, #16]
 800f784:	4641      	mov	r1, r8
 800f786:	4658      	mov	r0, fp
 800f788:	9308      	str	r3, [sp, #32]
 800f78a:	f000 ff45 	bl	8010618 <__mcmp>
 800f78e:	463a      	mov	r2, r7
 800f790:	4681      	mov	r9, r0
 800f792:	4631      	mov	r1, r6
 800f794:	4620      	mov	r0, r4
 800f796:	f000 ff5b 	bl	8010650 <__mdiff>
 800f79a:	68c2      	ldr	r2, [r0, #12]
 800f79c:	9b08      	ldr	r3, [sp, #32]
 800f79e:	4605      	mov	r5, r0
 800f7a0:	bb02      	cbnz	r2, 800f7e4 <_dtoa_r+0xa7c>
 800f7a2:	4601      	mov	r1, r0
 800f7a4:	4658      	mov	r0, fp
 800f7a6:	f000 ff37 	bl	8010618 <__mcmp>
 800f7aa:	9b08      	ldr	r3, [sp, #32]
 800f7ac:	4602      	mov	r2, r0
 800f7ae:	4629      	mov	r1, r5
 800f7b0:	4620      	mov	r0, r4
 800f7b2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800f7b6:	f000 fca7 	bl	8010108 <_Bfree>
 800f7ba:	9b05      	ldr	r3, [sp, #20]
 800f7bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f7be:	9d01      	ldr	r5, [sp, #4]
 800f7c0:	ea43 0102 	orr.w	r1, r3, r2
 800f7c4:	9b06      	ldr	r3, [sp, #24]
 800f7c6:	430b      	orrs	r3, r1
 800f7c8:	9b08      	ldr	r3, [sp, #32]
 800f7ca:	d10d      	bne.n	800f7e8 <_dtoa_r+0xa80>
 800f7cc:	2b39      	cmp	r3, #57	; 0x39
 800f7ce:	d029      	beq.n	800f824 <_dtoa_r+0xabc>
 800f7d0:	f1b9 0f00 	cmp.w	r9, #0
 800f7d4:	dd01      	ble.n	800f7da <_dtoa_r+0xa72>
 800f7d6:	9b04      	ldr	r3, [sp, #16]
 800f7d8:	3331      	adds	r3, #49	; 0x31
 800f7da:	9a02      	ldr	r2, [sp, #8]
 800f7dc:	7013      	strb	r3, [r2, #0]
 800f7de:	e774      	b.n	800f6ca <_dtoa_r+0x962>
 800f7e0:	4638      	mov	r0, r7
 800f7e2:	e7b9      	b.n	800f758 <_dtoa_r+0x9f0>
 800f7e4:	2201      	movs	r2, #1
 800f7e6:	e7e2      	b.n	800f7ae <_dtoa_r+0xa46>
 800f7e8:	f1b9 0f00 	cmp.w	r9, #0
 800f7ec:	db06      	blt.n	800f7fc <_dtoa_r+0xa94>
 800f7ee:	9905      	ldr	r1, [sp, #20]
 800f7f0:	ea41 0909 	orr.w	r9, r1, r9
 800f7f4:	9906      	ldr	r1, [sp, #24]
 800f7f6:	ea59 0101 	orrs.w	r1, r9, r1
 800f7fa:	d120      	bne.n	800f83e <_dtoa_r+0xad6>
 800f7fc:	2a00      	cmp	r2, #0
 800f7fe:	ddec      	ble.n	800f7da <_dtoa_r+0xa72>
 800f800:	4659      	mov	r1, fp
 800f802:	2201      	movs	r2, #1
 800f804:	4620      	mov	r0, r4
 800f806:	9301      	str	r3, [sp, #4]
 800f808:	f000 fe9a 	bl	8010540 <__lshift>
 800f80c:	4631      	mov	r1, r6
 800f80e:	4683      	mov	fp, r0
 800f810:	f000 ff02 	bl	8010618 <__mcmp>
 800f814:	2800      	cmp	r0, #0
 800f816:	9b01      	ldr	r3, [sp, #4]
 800f818:	dc02      	bgt.n	800f820 <_dtoa_r+0xab8>
 800f81a:	d1de      	bne.n	800f7da <_dtoa_r+0xa72>
 800f81c:	07da      	lsls	r2, r3, #31
 800f81e:	d5dc      	bpl.n	800f7da <_dtoa_r+0xa72>
 800f820:	2b39      	cmp	r3, #57	; 0x39
 800f822:	d1d8      	bne.n	800f7d6 <_dtoa_r+0xa6e>
 800f824:	9a02      	ldr	r2, [sp, #8]
 800f826:	2339      	movs	r3, #57	; 0x39
 800f828:	7013      	strb	r3, [r2, #0]
 800f82a:	462b      	mov	r3, r5
 800f82c:	461d      	mov	r5, r3
 800f82e:	3b01      	subs	r3, #1
 800f830:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f834:	2a39      	cmp	r2, #57	; 0x39
 800f836:	d050      	beq.n	800f8da <_dtoa_r+0xb72>
 800f838:	3201      	adds	r2, #1
 800f83a:	701a      	strb	r2, [r3, #0]
 800f83c:	e745      	b.n	800f6ca <_dtoa_r+0x962>
 800f83e:	2a00      	cmp	r2, #0
 800f840:	dd03      	ble.n	800f84a <_dtoa_r+0xae2>
 800f842:	2b39      	cmp	r3, #57	; 0x39
 800f844:	d0ee      	beq.n	800f824 <_dtoa_r+0xabc>
 800f846:	3301      	adds	r3, #1
 800f848:	e7c7      	b.n	800f7da <_dtoa_r+0xa72>
 800f84a:	9a01      	ldr	r2, [sp, #4]
 800f84c:	9907      	ldr	r1, [sp, #28]
 800f84e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f852:	428a      	cmp	r2, r1
 800f854:	d02a      	beq.n	800f8ac <_dtoa_r+0xb44>
 800f856:	4659      	mov	r1, fp
 800f858:	2300      	movs	r3, #0
 800f85a:	220a      	movs	r2, #10
 800f85c:	4620      	mov	r0, r4
 800f85e:	f000 fc75 	bl	801014c <__multadd>
 800f862:	45b8      	cmp	r8, r7
 800f864:	4683      	mov	fp, r0
 800f866:	f04f 0300 	mov.w	r3, #0
 800f86a:	f04f 020a 	mov.w	r2, #10
 800f86e:	4641      	mov	r1, r8
 800f870:	4620      	mov	r0, r4
 800f872:	d107      	bne.n	800f884 <_dtoa_r+0xb1c>
 800f874:	f000 fc6a 	bl	801014c <__multadd>
 800f878:	4680      	mov	r8, r0
 800f87a:	4607      	mov	r7, r0
 800f87c:	9b01      	ldr	r3, [sp, #4]
 800f87e:	3301      	adds	r3, #1
 800f880:	9301      	str	r3, [sp, #4]
 800f882:	e775      	b.n	800f770 <_dtoa_r+0xa08>
 800f884:	f000 fc62 	bl	801014c <__multadd>
 800f888:	4639      	mov	r1, r7
 800f88a:	4680      	mov	r8, r0
 800f88c:	2300      	movs	r3, #0
 800f88e:	220a      	movs	r2, #10
 800f890:	4620      	mov	r0, r4
 800f892:	f000 fc5b 	bl	801014c <__multadd>
 800f896:	4607      	mov	r7, r0
 800f898:	e7f0      	b.n	800f87c <_dtoa_r+0xb14>
 800f89a:	f1b9 0f00 	cmp.w	r9, #0
 800f89e:	9a00      	ldr	r2, [sp, #0]
 800f8a0:	bfcc      	ite	gt
 800f8a2:	464d      	movgt	r5, r9
 800f8a4:	2501      	movle	r5, #1
 800f8a6:	4415      	add	r5, r2
 800f8a8:	f04f 0800 	mov.w	r8, #0
 800f8ac:	4659      	mov	r1, fp
 800f8ae:	2201      	movs	r2, #1
 800f8b0:	4620      	mov	r0, r4
 800f8b2:	9301      	str	r3, [sp, #4]
 800f8b4:	f000 fe44 	bl	8010540 <__lshift>
 800f8b8:	4631      	mov	r1, r6
 800f8ba:	4683      	mov	fp, r0
 800f8bc:	f000 feac 	bl	8010618 <__mcmp>
 800f8c0:	2800      	cmp	r0, #0
 800f8c2:	dcb2      	bgt.n	800f82a <_dtoa_r+0xac2>
 800f8c4:	d102      	bne.n	800f8cc <_dtoa_r+0xb64>
 800f8c6:	9b01      	ldr	r3, [sp, #4]
 800f8c8:	07db      	lsls	r3, r3, #31
 800f8ca:	d4ae      	bmi.n	800f82a <_dtoa_r+0xac2>
 800f8cc:	462b      	mov	r3, r5
 800f8ce:	461d      	mov	r5, r3
 800f8d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f8d4:	2a30      	cmp	r2, #48	; 0x30
 800f8d6:	d0fa      	beq.n	800f8ce <_dtoa_r+0xb66>
 800f8d8:	e6f7      	b.n	800f6ca <_dtoa_r+0x962>
 800f8da:	9a00      	ldr	r2, [sp, #0]
 800f8dc:	429a      	cmp	r2, r3
 800f8de:	d1a5      	bne.n	800f82c <_dtoa_r+0xac4>
 800f8e0:	f10a 0a01 	add.w	sl, sl, #1
 800f8e4:	2331      	movs	r3, #49	; 0x31
 800f8e6:	e779      	b.n	800f7dc <_dtoa_r+0xa74>
 800f8e8:	4b13      	ldr	r3, [pc, #76]	; (800f938 <_dtoa_r+0xbd0>)
 800f8ea:	f7ff baaf 	b.w	800ee4c <_dtoa_r+0xe4>
 800f8ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	f47f aa86 	bne.w	800ee02 <_dtoa_r+0x9a>
 800f8f6:	4b11      	ldr	r3, [pc, #68]	; (800f93c <_dtoa_r+0xbd4>)
 800f8f8:	f7ff baa8 	b.w	800ee4c <_dtoa_r+0xe4>
 800f8fc:	f1b9 0f00 	cmp.w	r9, #0
 800f900:	dc03      	bgt.n	800f90a <_dtoa_r+0xba2>
 800f902:	9b05      	ldr	r3, [sp, #20]
 800f904:	2b02      	cmp	r3, #2
 800f906:	f73f aec9 	bgt.w	800f69c <_dtoa_r+0x934>
 800f90a:	9d00      	ldr	r5, [sp, #0]
 800f90c:	4631      	mov	r1, r6
 800f90e:	4658      	mov	r0, fp
 800f910:	f7ff f99e 	bl	800ec50 <quorem>
 800f914:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f918:	f805 3b01 	strb.w	r3, [r5], #1
 800f91c:	9a00      	ldr	r2, [sp, #0]
 800f91e:	1aaa      	subs	r2, r5, r2
 800f920:	4591      	cmp	r9, r2
 800f922:	ddba      	ble.n	800f89a <_dtoa_r+0xb32>
 800f924:	4659      	mov	r1, fp
 800f926:	2300      	movs	r3, #0
 800f928:	220a      	movs	r2, #10
 800f92a:	4620      	mov	r0, r4
 800f92c:	f000 fc0e 	bl	801014c <__multadd>
 800f930:	4683      	mov	fp, r0
 800f932:	e7eb      	b.n	800f90c <_dtoa_r+0xba4>
 800f934:	08013a44 	.word	0x08013a44
 800f938:	08013c49 	.word	0x08013c49
 800f93c:	080139c1 	.word	0x080139c1

0800f940 <rshift>:
 800f940:	6903      	ldr	r3, [r0, #16]
 800f942:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f946:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f94a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f94e:	f100 0414 	add.w	r4, r0, #20
 800f952:	dd45      	ble.n	800f9e0 <rshift+0xa0>
 800f954:	f011 011f 	ands.w	r1, r1, #31
 800f958:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f95c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f960:	d10c      	bne.n	800f97c <rshift+0x3c>
 800f962:	f100 0710 	add.w	r7, r0, #16
 800f966:	4629      	mov	r1, r5
 800f968:	42b1      	cmp	r1, r6
 800f96a:	d334      	bcc.n	800f9d6 <rshift+0x96>
 800f96c:	1a9b      	subs	r3, r3, r2
 800f96e:	009b      	lsls	r3, r3, #2
 800f970:	1eea      	subs	r2, r5, #3
 800f972:	4296      	cmp	r6, r2
 800f974:	bf38      	it	cc
 800f976:	2300      	movcc	r3, #0
 800f978:	4423      	add	r3, r4
 800f97a:	e015      	b.n	800f9a8 <rshift+0x68>
 800f97c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f980:	f1c1 0820 	rsb	r8, r1, #32
 800f984:	40cf      	lsrs	r7, r1
 800f986:	f105 0e04 	add.w	lr, r5, #4
 800f98a:	46a1      	mov	r9, r4
 800f98c:	4576      	cmp	r6, lr
 800f98e:	46f4      	mov	ip, lr
 800f990:	d815      	bhi.n	800f9be <rshift+0x7e>
 800f992:	1a9b      	subs	r3, r3, r2
 800f994:	009a      	lsls	r2, r3, #2
 800f996:	3a04      	subs	r2, #4
 800f998:	3501      	adds	r5, #1
 800f99a:	42ae      	cmp	r6, r5
 800f99c:	bf38      	it	cc
 800f99e:	2200      	movcc	r2, #0
 800f9a0:	18a3      	adds	r3, r4, r2
 800f9a2:	50a7      	str	r7, [r4, r2]
 800f9a4:	b107      	cbz	r7, 800f9a8 <rshift+0x68>
 800f9a6:	3304      	adds	r3, #4
 800f9a8:	1b1a      	subs	r2, r3, r4
 800f9aa:	42a3      	cmp	r3, r4
 800f9ac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f9b0:	bf08      	it	eq
 800f9b2:	2300      	moveq	r3, #0
 800f9b4:	6102      	str	r2, [r0, #16]
 800f9b6:	bf08      	it	eq
 800f9b8:	6143      	streq	r3, [r0, #20]
 800f9ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9be:	f8dc c000 	ldr.w	ip, [ip]
 800f9c2:	fa0c fc08 	lsl.w	ip, ip, r8
 800f9c6:	ea4c 0707 	orr.w	r7, ip, r7
 800f9ca:	f849 7b04 	str.w	r7, [r9], #4
 800f9ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f9d2:	40cf      	lsrs	r7, r1
 800f9d4:	e7da      	b.n	800f98c <rshift+0x4c>
 800f9d6:	f851 cb04 	ldr.w	ip, [r1], #4
 800f9da:	f847 cf04 	str.w	ip, [r7, #4]!
 800f9de:	e7c3      	b.n	800f968 <rshift+0x28>
 800f9e0:	4623      	mov	r3, r4
 800f9e2:	e7e1      	b.n	800f9a8 <rshift+0x68>

0800f9e4 <__hexdig_fun>:
 800f9e4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f9e8:	2b09      	cmp	r3, #9
 800f9ea:	d802      	bhi.n	800f9f2 <__hexdig_fun+0xe>
 800f9ec:	3820      	subs	r0, #32
 800f9ee:	b2c0      	uxtb	r0, r0
 800f9f0:	4770      	bx	lr
 800f9f2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f9f6:	2b05      	cmp	r3, #5
 800f9f8:	d801      	bhi.n	800f9fe <__hexdig_fun+0x1a>
 800f9fa:	3847      	subs	r0, #71	; 0x47
 800f9fc:	e7f7      	b.n	800f9ee <__hexdig_fun+0xa>
 800f9fe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fa02:	2b05      	cmp	r3, #5
 800fa04:	d801      	bhi.n	800fa0a <__hexdig_fun+0x26>
 800fa06:	3827      	subs	r0, #39	; 0x27
 800fa08:	e7f1      	b.n	800f9ee <__hexdig_fun+0xa>
 800fa0a:	2000      	movs	r0, #0
 800fa0c:	4770      	bx	lr
	...

0800fa10 <__gethex>:
 800fa10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa14:	ed2d 8b02 	vpush	{d8}
 800fa18:	b089      	sub	sp, #36	; 0x24
 800fa1a:	ee08 0a10 	vmov	s16, r0
 800fa1e:	9304      	str	r3, [sp, #16]
 800fa20:	4bbc      	ldr	r3, [pc, #752]	; (800fd14 <__gethex+0x304>)
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	9301      	str	r3, [sp, #4]
 800fa26:	4618      	mov	r0, r3
 800fa28:	468b      	mov	fp, r1
 800fa2a:	4690      	mov	r8, r2
 800fa2c:	f7f0 fbd8 	bl	80001e0 <strlen>
 800fa30:	9b01      	ldr	r3, [sp, #4]
 800fa32:	f8db 2000 	ldr.w	r2, [fp]
 800fa36:	4403      	add	r3, r0
 800fa38:	4682      	mov	sl, r0
 800fa3a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800fa3e:	9305      	str	r3, [sp, #20]
 800fa40:	1c93      	adds	r3, r2, #2
 800fa42:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fa46:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fa4a:	32fe      	adds	r2, #254	; 0xfe
 800fa4c:	18d1      	adds	r1, r2, r3
 800fa4e:	461f      	mov	r7, r3
 800fa50:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fa54:	9100      	str	r1, [sp, #0]
 800fa56:	2830      	cmp	r0, #48	; 0x30
 800fa58:	d0f8      	beq.n	800fa4c <__gethex+0x3c>
 800fa5a:	f7ff ffc3 	bl	800f9e4 <__hexdig_fun>
 800fa5e:	4604      	mov	r4, r0
 800fa60:	2800      	cmp	r0, #0
 800fa62:	d13a      	bne.n	800fada <__gethex+0xca>
 800fa64:	9901      	ldr	r1, [sp, #4]
 800fa66:	4652      	mov	r2, sl
 800fa68:	4638      	mov	r0, r7
 800fa6a:	f7fe fa0a 	bl	800de82 <strncmp>
 800fa6e:	4605      	mov	r5, r0
 800fa70:	2800      	cmp	r0, #0
 800fa72:	d168      	bne.n	800fb46 <__gethex+0x136>
 800fa74:	f817 000a 	ldrb.w	r0, [r7, sl]
 800fa78:	eb07 060a 	add.w	r6, r7, sl
 800fa7c:	f7ff ffb2 	bl	800f9e4 <__hexdig_fun>
 800fa80:	2800      	cmp	r0, #0
 800fa82:	d062      	beq.n	800fb4a <__gethex+0x13a>
 800fa84:	4633      	mov	r3, r6
 800fa86:	7818      	ldrb	r0, [r3, #0]
 800fa88:	2830      	cmp	r0, #48	; 0x30
 800fa8a:	461f      	mov	r7, r3
 800fa8c:	f103 0301 	add.w	r3, r3, #1
 800fa90:	d0f9      	beq.n	800fa86 <__gethex+0x76>
 800fa92:	f7ff ffa7 	bl	800f9e4 <__hexdig_fun>
 800fa96:	2301      	movs	r3, #1
 800fa98:	fab0 f480 	clz	r4, r0
 800fa9c:	0964      	lsrs	r4, r4, #5
 800fa9e:	4635      	mov	r5, r6
 800faa0:	9300      	str	r3, [sp, #0]
 800faa2:	463a      	mov	r2, r7
 800faa4:	4616      	mov	r6, r2
 800faa6:	3201      	adds	r2, #1
 800faa8:	7830      	ldrb	r0, [r6, #0]
 800faaa:	f7ff ff9b 	bl	800f9e4 <__hexdig_fun>
 800faae:	2800      	cmp	r0, #0
 800fab0:	d1f8      	bne.n	800faa4 <__gethex+0x94>
 800fab2:	9901      	ldr	r1, [sp, #4]
 800fab4:	4652      	mov	r2, sl
 800fab6:	4630      	mov	r0, r6
 800fab8:	f7fe f9e3 	bl	800de82 <strncmp>
 800fabc:	b980      	cbnz	r0, 800fae0 <__gethex+0xd0>
 800fabe:	b94d      	cbnz	r5, 800fad4 <__gethex+0xc4>
 800fac0:	eb06 050a 	add.w	r5, r6, sl
 800fac4:	462a      	mov	r2, r5
 800fac6:	4616      	mov	r6, r2
 800fac8:	3201      	adds	r2, #1
 800faca:	7830      	ldrb	r0, [r6, #0]
 800facc:	f7ff ff8a 	bl	800f9e4 <__hexdig_fun>
 800fad0:	2800      	cmp	r0, #0
 800fad2:	d1f8      	bne.n	800fac6 <__gethex+0xb6>
 800fad4:	1bad      	subs	r5, r5, r6
 800fad6:	00ad      	lsls	r5, r5, #2
 800fad8:	e004      	b.n	800fae4 <__gethex+0xd4>
 800fada:	2400      	movs	r4, #0
 800fadc:	4625      	mov	r5, r4
 800fade:	e7e0      	b.n	800faa2 <__gethex+0x92>
 800fae0:	2d00      	cmp	r5, #0
 800fae2:	d1f7      	bne.n	800fad4 <__gethex+0xc4>
 800fae4:	7833      	ldrb	r3, [r6, #0]
 800fae6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800faea:	2b50      	cmp	r3, #80	; 0x50
 800faec:	d13b      	bne.n	800fb66 <__gethex+0x156>
 800faee:	7873      	ldrb	r3, [r6, #1]
 800faf0:	2b2b      	cmp	r3, #43	; 0x2b
 800faf2:	d02c      	beq.n	800fb4e <__gethex+0x13e>
 800faf4:	2b2d      	cmp	r3, #45	; 0x2d
 800faf6:	d02e      	beq.n	800fb56 <__gethex+0x146>
 800faf8:	1c71      	adds	r1, r6, #1
 800fafa:	f04f 0900 	mov.w	r9, #0
 800fafe:	7808      	ldrb	r0, [r1, #0]
 800fb00:	f7ff ff70 	bl	800f9e4 <__hexdig_fun>
 800fb04:	1e43      	subs	r3, r0, #1
 800fb06:	b2db      	uxtb	r3, r3
 800fb08:	2b18      	cmp	r3, #24
 800fb0a:	d82c      	bhi.n	800fb66 <__gethex+0x156>
 800fb0c:	f1a0 0210 	sub.w	r2, r0, #16
 800fb10:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fb14:	f7ff ff66 	bl	800f9e4 <__hexdig_fun>
 800fb18:	1e43      	subs	r3, r0, #1
 800fb1a:	b2db      	uxtb	r3, r3
 800fb1c:	2b18      	cmp	r3, #24
 800fb1e:	d91d      	bls.n	800fb5c <__gethex+0x14c>
 800fb20:	f1b9 0f00 	cmp.w	r9, #0
 800fb24:	d000      	beq.n	800fb28 <__gethex+0x118>
 800fb26:	4252      	negs	r2, r2
 800fb28:	4415      	add	r5, r2
 800fb2a:	f8cb 1000 	str.w	r1, [fp]
 800fb2e:	b1e4      	cbz	r4, 800fb6a <__gethex+0x15a>
 800fb30:	9b00      	ldr	r3, [sp, #0]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	bf14      	ite	ne
 800fb36:	2700      	movne	r7, #0
 800fb38:	2706      	moveq	r7, #6
 800fb3a:	4638      	mov	r0, r7
 800fb3c:	b009      	add	sp, #36	; 0x24
 800fb3e:	ecbd 8b02 	vpop	{d8}
 800fb42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb46:	463e      	mov	r6, r7
 800fb48:	4625      	mov	r5, r4
 800fb4a:	2401      	movs	r4, #1
 800fb4c:	e7ca      	b.n	800fae4 <__gethex+0xd4>
 800fb4e:	f04f 0900 	mov.w	r9, #0
 800fb52:	1cb1      	adds	r1, r6, #2
 800fb54:	e7d3      	b.n	800fafe <__gethex+0xee>
 800fb56:	f04f 0901 	mov.w	r9, #1
 800fb5a:	e7fa      	b.n	800fb52 <__gethex+0x142>
 800fb5c:	230a      	movs	r3, #10
 800fb5e:	fb03 0202 	mla	r2, r3, r2, r0
 800fb62:	3a10      	subs	r2, #16
 800fb64:	e7d4      	b.n	800fb10 <__gethex+0x100>
 800fb66:	4631      	mov	r1, r6
 800fb68:	e7df      	b.n	800fb2a <__gethex+0x11a>
 800fb6a:	1bf3      	subs	r3, r6, r7
 800fb6c:	3b01      	subs	r3, #1
 800fb6e:	4621      	mov	r1, r4
 800fb70:	2b07      	cmp	r3, #7
 800fb72:	dc0b      	bgt.n	800fb8c <__gethex+0x17c>
 800fb74:	ee18 0a10 	vmov	r0, s16
 800fb78:	f000 fa86 	bl	8010088 <_Balloc>
 800fb7c:	4604      	mov	r4, r0
 800fb7e:	b940      	cbnz	r0, 800fb92 <__gethex+0x182>
 800fb80:	4b65      	ldr	r3, [pc, #404]	; (800fd18 <__gethex+0x308>)
 800fb82:	4602      	mov	r2, r0
 800fb84:	21de      	movs	r1, #222	; 0xde
 800fb86:	4865      	ldr	r0, [pc, #404]	; (800fd1c <__gethex+0x30c>)
 800fb88:	f001 fcde 	bl	8011548 <__assert_func>
 800fb8c:	3101      	adds	r1, #1
 800fb8e:	105b      	asrs	r3, r3, #1
 800fb90:	e7ee      	b.n	800fb70 <__gethex+0x160>
 800fb92:	f100 0914 	add.w	r9, r0, #20
 800fb96:	f04f 0b00 	mov.w	fp, #0
 800fb9a:	f1ca 0301 	rsb	r3, sl, #1
 800fb9e:	f8cd 9008 	str.w	r9, [sp, #8]
 800fba2:	f8cd b000 	str.w	fp, [sp]
 800fba6:	9306      	str	r3, [sp, #24]
 800fba8:	42b7      	cmp	r7, r6
 800fbaa:	d340      	bcc.n	800fc2e <__gethex+0x21e>
 800fbac:	9802      	ldr	r0, [sp, #8]
 800fbae:	9b00      	ldr	r3, [sp, #0]
 800fbb0:	f840 3b04 	str.w	r3, [r0], #4
 800fbb4:	eba0 0009 	sub.w	r0, r0, r9
 800fbb8:	1080      	asrs	r0, r0, #2
 800fbba:	0146      	lsls	r6, r0, #5
 800fbbc:	6120      	str	r0, [r4, #16]
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	f000 fb58 	bl	8010274 <__hi0bits>
 800fbc4:	1a30      	subs	r0, r6, r0
 800fbc6:	f8d8 6000 	ldr.w	r6, [r8]
 800fbca:	42b0      	cmp	r0, r6
 800fbcc:	dd63      	ble.n	800fc96 <__gethex+0x286>
 800fbce:	1b87      	subs	r7, r0, r6
 800fbd0:	4639      	mov	r1, r7
 800fbd2:	4620      	mov	r0, r4
 800fbd4:	f000 fef2 	bl	80109bc <__any_on>
 800fbd8:	4682      	mov	sl, r0
 800fbda:	b1a8      	cbz	r0, 800fc08 <__gethex+0x1f8>
 800fbdc:	1e7b      	subs	r3, r7, #1
 800fbde:	1159      	asrs	r1, r3, #5
 800fbe0:	f003 021f 	and.w	r2, r3, #31
 800fbe4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800fbe8:	f04f 0a01 	mov.w	sl, #1
 800fbec:	fa0a f202 	lsl.w	r2, sl, r2
 800fbf0:	420a      	tst	r2, r1
 800fbf2:	d009      	beq.n	800fc08 <__gethex+0x1f8>
 800fbf4:	4553      	cmp	r3, sl
 800fbf6:	dd05      	ble.n	800fc04 <__gethex+0x1f4>
 800fbf8:	1eb9      	subs	r1, r7, #2
 800fbfa:	4620      	mov	r0, r4
 800fbfc:	f000 fede 	bl	80109bc <__any_on>
 800fc00:	2800      	cmp	r0, #0
 800fc02:	d145      	bne.n	800fc90 <__gethex+0x280>
 800fc04:	f04f 0a02 	mov.w	sl, #2
 800fc08:	4639      	mov	r1, r7
 800fc0a:	4620      	mov	r0, r4
 800fc0c:	f7ff fe98 	bl	800f940 <rshift>
 800fc10:	443d      	add	r5, r7
 800fc12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fc16:	42ab      	cmp	r3, r5
 800fc18:	da4c      	bge.n	800fcb4 <__gethex+0x2a4>
 800fc1a:	ee18 0a10 	vmov	r0, s16
 800fc1e:	4621      	mov	r1, r4
 800fc20:	f000 fa72 	bl	8010108 <_Bfree>
 800fc24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fc26:	2300      	movs	r3, #0
 800fc28:	6013      	str	r3, [r2, #0]
 800fc2a:	27a3      	movs	r7, #163	; 0xa3
 800fc2c:	e785      	b.n	800fb3a <__gethex+0x12a>
 800fc2e:	1e73      	subs	r3, r6, #1
 800fc30:	9a05      	ldr	r2, [sp, #20]
 800fc32:	9303      	str	r3, [sp, #12]
 800fc34:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fc38:	4293      	cmp	r3, r2
 800fc3a:	d019      	beq.n	800fc70 <__gethex+0x260>
 800fc3c:	f1bb 0f20 	cmp.w	fp, #32
 800fc40:	d107      	bne.n	800fc52 <__gethex+0x242>
 800fc42:	9b02      	ldr	r3, [sp, #8]
 800fc44:	9a00      	ldr	r2, [sp, #0]
 800fc46:	f843 2b04 	str.w	r2, [r3], #4
 800fc4a:	9302      	str	r3, [sp, #8]
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	9300      	str	r3, [sp, #0]
 800fc50:	469b      	mov	fp, r3
 800fc52:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800fc56:	f7ff fec5 	bl	800f9e4 <__hexdig_fun>
 800fc5a:	9b00      	ldr	r3, [sp, #0]
 800fc5c:	f000 000f 	and.w	r0, r0, #15
 800fc60:	fa00 f00b 	lsl.w	r0, r0, fp
 800fc64:	4303      	orrs	r3, r0
 800fc66:	9300      	str	r3, [sp, #0]
 800fc68:	f10b 0b04 	add.w	fp, fp, #4
 800fc6c:	9b03      	ldr	r3, [sp, #12]
 800fc6e:	e00d      	b.n	800fc8c <__gethex+0x27c>
 800fc70:	9b03      	ldr	r3, [sp, #12]
 800fc72:	9a06      	ldr	r2, [sp, #24]
 800fc74:	4413      	add	r3, r2
 800fc76:	42bb      	cmp	r3, r7
 800fc78:	d3e0      	bcc.n	800fc3c <__gethex+0x22c>
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	9901      	ldr	r1, [sp, #4]
 800fc7e:	9307      	str	r3, [sp, #28]
 800fc80:	4652      	mov	r2, sl
 800fc82:	f7fe f8fe 	bl	800de82 <strncmp>
 800fc86:	9b07      	ldr	r3, [sp, #28]
 800fc88:	2800      	cmp	r0, #0
 800fc8a:	d1d7      	bne.n	800fc3c <__gethex+0x22c>
 800fc8c:	461e      	mov	r6, r3
 800fc8e:	e78b      	b.n	800fba8 <__gethex+0x198>
 800fc90:	f04f 0a03 	mov.w	sl, #3
 800fc94:	e7b8      	b.n	800fc08 <__gethex+0x1f8>
 800fc96:	da0a      	bge.n	800fcae <__gethex+0x29e>
 800fc98:	1a37      	subs	r7, r6, r0
 800fc9a:	4621      	mov	r1, r4
 800fc9c:	ee18 0a10 	vmov	r0, s16
 800fca0:	463a      	mov	r2, r7
 800fca2:	f000 fc4d 	bl	8010540 <__lshift>
 800fca6:	1bed      	subs	r5, r5, r7
 800fca8:	4604      	mov	r4, r0
 800fcaa:	f100 0914 	add.w	r9, r0, #20
 800fcae:	f04f 0a00 	mov.w	sl, #0
 800fcb2:	e7ae      	b.n	800fc12 <__gethex+0x202>
 800fcb4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800fcb8:	42a8      	cmp	r0, r5
 800fcba:	dd72      	ble.n	800fda2 <__gethex+0x392>
 800fcbc:	1b45      	subs	r5, r0, r5
 800fcbe:	42ae      	cmp	r6, r5
 800fcc0:	dc36      	bgt.n	800fd30 <__gethex+0x320>
 800fcc2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fcc6:	2b02      	cmp	r3, #2
 800fcc8:	d02a      	beq.n	800fd20 <__gethex+0x310>
 800fcca:	2b03      	cmp	r3, #3
 800fccc:	d02c      	beq.n	800fd28 <__gethex+0x318>
 800fcce:	2b01      	cmp	r3, #1
 800fcd0:	d115      	bne.n	800fcfe <__gethex+0x2ee>
 800fcd2:	42ae      	cmp	r6, r5
 800fcd4:	d113      	bne.n	800fcfe <__gethex+0x2ee>
 800fcd6:	2e01      	cmp	r6, #1
 800fcd8:	d10b      	bne.n	800fcf2 <__gethex+0x2e2>
 800fcda:	9a04      	ldr	r2, [sp, #16]
 800fcdc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fce0:	6013      	str	r3, [r2, #0]
 800fce2:	2301      	movs	r3, #1
 800fce4:	6123      	str	r3, [r4, #16]
 800fce6:	f8c9 3000 	str.w	r3, [r9]
 800fcea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fcec:	2762      	movs	r7, #98	; 0x62
 800fcee:	601c      	str	r4, [r3, #0]
 800fcf0:	e723      	b.n	800fb3a <__gethex+0x12a>
 800fcf2:	1e71      	subs	r1, r6, #1
 800fcf4:	4620      	mov	r0, r4
 800fcf6:	f000 fe61 	bl	80109bc <__any_on>
 800fcfa:	2800      	cmp	r0, #0
 800fcfc:	d1ed      	bne.n	800fcda <__gethex+0x2ca>
 800fcfe:	ee18 0a10 	vmov	r0, s16
 800fd02:	4621      	mov	r1, r4
 800fd04:	f000 fa00 	bl	8010108 <_Bfree>
 800fd08:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	6013      	str	r3, [r2, #0]
 800fd0e:	2750      	movs	r7, #80	; 0x50
 800fd10:	e713      	b.n	800fb3a <__gethex+0x12a>
 800fd12:	bf00      	nop
 800fd14:	08013ac0 	.word	0x08013ac0
 800fd18:	08013a44 	.word	0x08013a44
 800fd1c:	08013a55 	.word	0x08013a55
 800fd20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d1eb      	bne.n	800fcfe <__gethex+0x2ee>
 800fd26:	e7d8      	b.n	800fcda <__gethex+0x2ca>
 800fd28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d1d5      	bne.n	800fcda <__gethex+0x2ca>
 800fd2e:	e7e6      	b.n	800fcfe <__gethex+0x2ee>
 800fd30:	1e6f      	subs	r7, r5, #1
 800fd32:	f1ba 0f00 	cmp.w	sl, #0
 800fd36:	d131      	bne.n	800fd9c <__gethex+0x38c>
 800fd38:	b127      	cbz	r7, 800fd44 <__gethex+0x334>
 800fd3a:	4639      	mov	r1, r7
 800fd3c:	4620      	mov	r0, r4
 800fd3e:	f000 fe3d 	bl	80109bc <__any_on>
 800fd42:	4682      	mov	sl, r0
 800fd44:	117b      	asrs	r3, r7, #5
 800fd46:	2101      	movs	r1, #1
 800fd48:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800fd4c:	f007 071f 	and.w	r7, r7, #31
 800fd50:	fa01 f707 	lsl.w	r7, r1, r7
 800fd54:	421f      	tst	r7, r3
 800fd56:	4629      	mov	r1, r5
 800fd58:	4620      	mov	r0, r4
 800fd5a:	bf18      	it	ne
 800fd5c:	f04a 0a02 	orrne.w	sl, sl, #2
 800fd60:	1b76      	subs	r6, r6, r5
 800fd62:	f7ff fded 	bl	800f940 <rshift>
 800fd66:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fd6a:	2702      	movs	r7, #2
 800fd6c:	f1ba 0f00 	cmp.w	sl, #0
 800fd70:	d048      	beq.n	800fe04 <__gethex+0x3f4>
 800fd72:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fd76:	2b02      	cmp	r3, #2
 800fd78:	d015      	beq.n	800fda6 <__gethex+0x396>
 800fd7a:	2b03      	cmp	r3, #3
 800fd7c:	d017      	beq.n	800fdae <__gethex+0x39e>
 800fd7e:	2b01      	cmp	r3, #1
 800fd80:	d109      	bne.n	800fd96 <__gethex+0x386>
 800fd82:	f01a 0f02 	tst.w	sl, #2
 800fd86:	d006      	beq.n	800fd96 <__gethex+0x386>
 800fd88:	f8d9 0000 	ldr.w	r0, [r9]
 800fd8c:	ea4a 0a00 	orr.w	sl, sl, r0
 800fd90:	f01a 0f01 	tst.w	sl, #1
 800fd94:	d10e      	bne.n	800fdb4 <__gethex+0x3a4>
 800fd96:	f047 0710 	orr.w	r7, r7, #16
 800fd9a:	e033      	b.n	800fe04 <__gethex+0x3f4>
 800fd9c:	f04f 0a01 	mov.w	sl, #1
 800fda0:	e7d0      	b.n	800fd44 <__gethex+0x334>
 800fda2:	2701      	movs	r7, #1
 800fda4:	e7e2      	b.n	800fd6c <__gethex+0x35c>
 800fda6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fda8:	f1c3 0301 	rsb	r3, r3, #1
 800fdac:	9315      	str	r3, [sp, #84]	; 0x54
 800fdae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d0f0      	beq.n	800fd96 <__gethex+0x386>
 800fdb4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fdb8:	f104 0314 	add.w	r3, r4, #20
 800fdbc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fdc0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fdc4:	f04f 0c00 	mov.w	ip, #0
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdce:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fdd2:	d01c      	beq.n	800fe0e <__gethex+0x3fe>
 800fdd4:	3201      	adds	r2, #1
 800fdd6:	6002      	str	r2, [r0, #0]
 800fdd8:	2f02      	cmp	r7, #2
 800fdda:	f104 0314 	add.w	r3, r4, #20
 800fdde:	d13f      	bne.n	800fe60 <__gethex+0x450>
 800fde0:	f8d8 2000 	ldr.w	r2, [r8]
 800fde4:	3a01      	subs	r2, #1
 800fde6:	42b2      	cmp	r2, r6
 800fde8:	d10a      	bne.n	800fe00 <__gethex+0x3f0>
 800fdea:	1171      	asrs	r1, r6, #5
 800fdec:	2201      	movs	r2, #1
 800fdee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fdf2:	f006 061f 	and.w	r6, r6, #31
 800fdf6:	fa02 f606 	lsl.w	r6, r2, r6
 800fdfa:	421e      	tst	r6, r3
 800fdfc:	bf18      	it	ne
 800fdfe:	4617      	movne	r7, r2
 800fe00:	f047 0720 	orr.w	r7, r7, #32
 800fe04:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fe06:	601c      	str	r4, [r3, #0]
 800fe08:	9b04      	ldr	r3, [sp, #16]
 800fe0a:	601d      	str	r5, [r3, #0]
 800fe0c:	e695      	b.n	800fb3a <__gethex+0x12a>
 800fe0e:	4299      	cmp	r1, r3
 800fe10:	f843 cc04 	str.w	ip, [r3, #-4]
 800fe14:	d8d8      	bhi.n	800fdc8 <__gethex+0x3b8>
 800fe16:	68a3      	ldr	r3, [r4, #8]
 800fe18:	459b      	cmp	fp, r3
 800fe1a:	db19      	blt.n	800fe50 <__gethex+0x440>
 800fe1c:	6861      	ldr	r1, [r4, #4]
 800fe1e:	ee18 0a10 	vmov	r0, s16
 800fe22:	3101      	adds	r1, #1
 800fe24:	f000 f930 	bl	8010088 <_Balloc>
 800fe28:	4681      	mov	r9, r0
 800fe2a:	b918      	cbnz	r0, 800fe34 <__gethex+0x424>
 800fe2c:	4b1a      	ldr	r3, [pc, #104]	; (800fe98 <__gethex+0x488>)
 800fe2e:	4602      	mov	r2, r0
 800fe30:	2184      	movs	r1, #132	; 0x84
 800fe32:	e6a8      	b.n	800fb86 <__gethex+0x176>
 800fe34:	6922      	ldr	r2, [r4, #16]
 800fe36:	3202      	adds	r2, #2
 800fe38:	f104 010c 	add.w	r1, r4, #12
 800fe3c:	0092      	lsls	r2, r2, #2
 800fe3e:	300c      	adds	r0, #12
 800fe40:	f7fd f83e 	bl	800cec0 <memcpy>
 800fe44:	4621      	mov	r1, r4
 800fe46:	ee18 0a10 	vmov	r0, s16
 800fe4a:	f000 f95d 	bl	8010108 <_Bfree>
 800fe4e:	464c      	mov	r4, r9
 800fe50:	6923      	ldr	r3, [r4, #16]
 800fe52:	1c5a      	adds	r2, r3, #1
 800fe54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fe58:	6122      	str	r2, [r4, #16]
 800fe5a:	2201      	movs	r2, #1
 800fe5c:	615a      	str	r2, [r3, #20]
 800fe5e:	e7bb      	b.n	800fdd8 <__gethex+0x3c8>
 800fe60:	6922      	ldr	r2, [r4, #16]
 800fe62:	455a      	cmp	r2, fp
 800fe64:	dd0b      	ble.n	800fe7e <__gethex+0x46e>
 800fe66:	2101      	movs	r1, #1
 800fe68:	4620      	mov	r0, r4
 800fe6a:	f7ff fd69 	bl	800f940 <rshift>
 800fe6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fe72:	3501      	adds	r5, #1
 800fe74:	42ab      	cmp	r3, r5
 800fe76:	f6ff aed0 	blt.w	800fc1a <__gethex+0x20a>
 800fe7a:	2701      	movs	r7, #1
 800fe7c:	e7c0      	b.n	800fe00 <__gethex+0x3f0>
 800fe7e:	f016 061f 	ands.w	r6, r6, #31
 800fe82:	d0fa      	beq.n	800fe7a <__gethex+0x46a>
 800fe84:	449a      	add	sl, r3
 800fe86:	f1c6 0620 	rsb	r6, r6, #32
 800fe8a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800fe8e:	f000 f9f1 	bl	8010274 <__hi0bits>
 800fe92:	42b0      	cmp	r0, r6
 800fe94:	dbe7      	blt.n	800fe66 <__gethex+0x456>
 800fe96:	e7f0      	b.n	800fe7a <__gethex+0x46a>
 800fe98:	08013a44 	.word	0x08013a44

0800fe9c <L_shift>:
 800fe9c:	f1c2 0208 	rsb	r2, r2, #8
 800fea0:	0092      	lsls	r2, r2, #2
 800fea2:	b570      	push	{r4, r5, r6, lr}
 800fea4:	f1c2 0620 	rsb	r6, r2, #32
 800fea8:	6843      	ldr	r3, [r0, #4]
 800feaa:	6804      	ldr	r4, [r0, #0]
 800feac:	fa03 f506 	lsl.w	r5, r3, r6
 800feb0:	432c      	orrs	r4, r5
 800feb2:	40d3      	lsrs	r3, r2
 800feb4:	6004      	str	r4, [r0, #0]
 800feb6:	f840 3f04 	str.w	r3, [r0, #4]!
 800feba:	4288      	cmp	r0, r1
 800febc:	d3f4      	bcc.n	800fea8 <L_shift+0xc>
 800febe:	bd70      	pop	{r4, r5, r6, pc}

0800fec0 <__match>:
 800fec0:	b530      	push	{r4, r5, lr}
 800fec2:	6803      	ldr	r3, [r0, #0]
 800fec4:	3301      	adds	r3, #1
 800fec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800feca:	b914      	cbnz	r4, 800fed2 <__match+0x12>
 800fecc:	6003      	str	r3, [r0, #0]
 800fece:	2001      	movs	r0, #1
 800fed0:	bd30      	pop	{r4, r5, pc}
 800fed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fed6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800feda:	2d19      	cmp	r5, #25
 800fedc:	bf98      	it	ls
 800fede:	3220      	addls	r2, #32
 800fee0:	42a2      	cmp	r2, r4
 800fee2:	d0f0      	beq.n	800fec6 <__match+0x6>
 800fee4:	2000      	movs	r0, #0
 800fee6:	e7f3      	b.n	800fed0 <__match+0x10>

0800fee8 <__hexnan>:
 800fee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feec:	680b      	ldr	r3, [r1, #0]
 800feee:	6801      	ldr	r1, [r0, #0]
 800fef0:	115e      	asrs	r6, r3, #5
 800fef2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fef6:	f013 031f 	ands.w	r3, r3, #31
 800fefa:	b087      	sub	sp, #28
 800fefc:	bf18      	it	ne
 800fefe:	3604      	addne	r6, #4
 800ff00:	2500      	movs	r5, #0
 800ff02:	1f37      	subs	r7, r6, #4
 800ff04:	4682      	mov	sl, r0
 800ff06:	4690      	mov	r8, r2
 800ff08:	9301      	str	r3, [sp, #4]
 800ff0a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ff0e:	46b9      	mov	r9, r7
 800ff10:	463c      	mov	r4, r7
 800ff12:	9502      	str	r5, [sp, #8]
 800ff14:	46ab      	mov	fp, r5
 800ff16:	784a      	ldrb	r2, [r1, #1]
 800ff18:	1c4b      	adds	r3, r1, #1
 800ff1a:	9303      	str	r3, [sp, #12]
 800ff1c:	b342      	cbz	r2, 800ff70 <__hexnan+0x88>
 800ff1e:	4610      	mov	r0, r2
 800ff20:	9105      	str	r1, [sp, #20]
 800ff22:	9204      	str	r2, [sp, #16]
 800ff24:	f7ff fd5e 	bl	800f9e4 <__hexdig_fun>
 800ff28:	2800      	cmp	r0, #0
 800ff2a:	d14f      	bne.n	800ffcc <__hexnan+0xe4>
 800ff2c:	9a04      	ldr	r2, [sp, #16]
 800ff2e:	9905      	ldr	r1, [sp, #20]
 800ff30:	2a20      	cmp	r2, #32
 800ff32:	d818      	bhi.n	800ff66 <__hexnan+0x7e>
 800ff34:	9b02      	ldr	r3, [sp, #8]
 800ff36:	459b      	cmp	fp, r3
 800ff38:	dd13      	ble.n	800ff62 <__hexnan+0x7a>
 800ff3a:	454c      	cmp	r4, r9
 800ff3c:	d206      	bcs.n	800ff4c <__hexnan+0x64>
 800ff3e:	2d07      	cmp	r5, #7
 800ff40:	dc04      	bgt.n	800ff4c <__hexnan+0x64>
 800ff42:	462a      	mov	r2, r5
 800ff44:	4649      	mov	r1, r9
 800ff46:	4620      	mov	r0, r4
 800ff48:	f7ff ffa8 	bl	800fe9c <L_shift>
 800ff4c:	4544      	cmp	r4, r8
 800ff4e:	d950      	bls.n	800fff2 <__hexnan+0x10a>
 800ff50:	2300      	movs	r3, #0
 800ff52:	f1a4 0904 	sub.w	r9, r4, #4
 800ff56:	f844 3c04 	str.w	r3, [r4, #-4]
 800ff5a:	f8cd b008 	str.w	fp, [sp, #8]
 800ff5e:	464c      	mov	r4, r9
 800ff60:	461d      	mov	r5, r3
 800ff62:	9903      	ldr	r1, [sp, #12]
 800ff64:	e7d7      	b.n	800ff16 <__hexnan+0x2e>
 800ff66:	2a29      	cmp	r2, #41	; 0x29
 800ff68:	d156      	bne.n	8010018 <__hexnan+0x130>
 800ff6a:	3102      	adds	r1, #2
 800ff6c:	f8ca 1000 	str.w	r1, [sl]
 800ff70:	f1bb 0f00 	cmp.w	fp, #0
 800ff74:	d050      	beq.n	8010018 <__hexnan+0x130>
 800ff76:	454c      	cmp	r4, r9
 800ff78:	d206      	bcs.n	800ff88 <__hexnan+0xa0>
 800ff7a:	2d07      	cmp	r5, #7
 800ff7c:	dc04      	bgt.n	800ff88 <__hexnan+0xa0>
 800ff7e:	462a      	mov	r2, r5
 800ff80:	4649      	mov	r1, r9
 800ff82:	4620      	mov	r0, r4
 800ff84:	f7ff ff8a 	bl	800fe9c <L_shift>
 800ff88:	4544      	cmp	r4, r8
 800ff8a:	d934      	bls.n	800fff6 <__hexnan+0x10e>
 800ff8c:	f1a8 0204 	sub.w	r2, r8, #4
 800ff90:	4623      	mov	r3, r4
 800ff92:	f853 1b04 	ldr.w	r1, [r3], #4
 800ff96:	f842 1f04 	str.w	r1, [r2, #4]!
 800ff9a:	429f      	cmp	r7, r3
 800ff9c:	d2f9      	bcs.n	800ff92 <__hexnan+0xaa>
 800ff9e:	1b3b      	subs	r3, r7, r4
 800ffa0:	f023 0303 	bic.w	r3, r3, #3
 800ffa4:	3304      	adds	r3, #4
 800ffa6:	3401      	adds	r4, #1
 800ffa8:	3e03      	subs	r6, #3
 800ffaa:	42b4      	cmp	r4, r6
 800ffac:	bf88      	it	hi
 800ffae:	2304      	movhi	r3, #4
 800ffb0:	4443      	add	r3, r8
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	f843 2b04 	str.w	r2, [r3], #4
 800ffb8:	429f      	cmp	r7, r3
 800ffba:	d2fb      	bcs.n	800ffb4 <__hexnan+0xcc>
 800ffbc:	683b      	ldr	r3, [r7, #0]
 800ffbe:	b91b      	cbnz	r3, 800ffc8 <__hexnan+0xe0>
 800ffc0:	4547      	cmp	r7, r8
 800ffc2:	d127      	bne.n	8010014 <__hexnan+0x12c>
 800ffc4:	2301      	movs	r3, #1
 800ffc6:	603b      	str	r3, [r7, #0]
 800ffc8:	2005      	movs	r0, #5
 800ffca:	e026      	b.n	801001a <__hexnan+0x132>
 800ffcc:	3501      	adds	r5, #1
 800ffce:	2d08      	cmp	r5, #8
 800ffd0:	f10b 0b01 	add.w	fp, fp, #1
 800ffd4:	dd06      	ble.n	800ffe4 <__hexnan+0xfc>
 800ffd6:	4544      	cmp	r4, r8
 800ffd8:	d9c3      	bls.n	800ff62 <__hexnan+0x7a>
 800ffda:	2300      	movs	r3, #0
 800ffdc:	f844 3c04 	str.w	r3, [r4, #-4]
 800ffe0:	2501      	movs	r5, #1
 800ffe2:	3c04      	subs	r4, #4
 800ffe4:	6822      	ldr	r2, [r4, #0]
 800ffe6:	f000 000f 	and.w	r0, r0, #15
 800ffea:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ffee:	6022      	str	r2, [r4, #0]
 800fff0:	e7b7      	b.n	800ff62 <__hexnan+0x7a>
 800fff2:	2508      	movs	r5, #8
 800fff4:	e7b5      	b.n	800ff62 <__hexnan+0x7a>
 800fff6:	9b01      	ldr	r3, [sp, #4]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d0df      	beq.n	800ffbc <__hexnan+0xd4>
 800fffc:	f04f 32ff 	mov.w	r2, #4294967295
 8010000:	f1c3 0320 	rsb	r3, r3, #32
 8010004:	fa22 f303 	lsr.w	r3, r2, r3
 8010008:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801000c:	401a      	ands	r2, r3
 801000e:	f846 2c04 	str.w	r2, [r6, #-4]
 8010012:	e7d3      	b.n	800ffbc <__hexnan+0xd4>
 8010014:	3f04      	subs	r7, #4
 8010016:	e7d1      	b.n	800ffbc <__hexnan+0xd4>
 8010018:	2004      	movs	r0, #4
 801001a:	b007      	add	sp, #28
 801001c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010020 <_localeconv_r>:
 8010020:	4800      	ldr	r0, [pc, #0]	; (8010024 <_localeconv_r+0x4>)
 8010022:	4770      	bx	lr
 8010024:	20000190 	.word	0x20000190

08010028 <_lseek_r>:
 8010028:	b538      	push	{r3, r4, r5, lr}
 801002a:	4d07      	ldr	r5, [pc, #28]	; (8010048 <_lseek_r+0x20>)
 801002c:	4604      	mov	r4, r0
 801002e:	4608      	mov	r0, r1
 8010030:	4611      	mov	r1, r2
 8010032:	2200      	movs	r2, #0
 8010034:	602a      	str	r2, [r5, #0]
 8010036:	461a      	mov	r2, r3
 8010038:	f7f2 fe26 	bl	8002c88 <_lseek>
 801003c:	1c43      	adds	r3, r0, #1
 801003e:	d102      	bne.n	8010046 <_lseek_r+0x1e>
 8010040:	682b      	ldr	r3, [r5, #0]
 8010042:	b103      	cbz	r3, 8010046 <_lseek_r+0x1e>
 8010044:	6023      	str	r3, [r4, #0]
 8010046:	bd38      	pop	{r3, r4, r5, pc}
 8010048:	200059c4 	.word	0x200059c4

0801004c <__ascii_mbtowc>:
 801004c:	b082      	sub	sp, #8
 801004e:	b901      	cbnz	r1, 8010052 <__ascii_mbtowc+0x6>
 8010050:	a901      	add	r1, sp, #4
 8010052:	b142      	cbz	r2, 8010066 <__ascii_mbtowc+0x1a>
 8010054:	b14b      	cbz	r3, 801006a <__ascii_mbtowc+0x1e>
 8010056:	7813      	ldrb	r3, [r2, #0]
 8010058:	600b      	str	r3, [r1, #0]
 801005a:	7812      	ldrb	r2, [r2, #0]
 801005c:	1e10      	subs	r0, r2, #0
 801005e:	bf18      	it	ne
 8010060:	2001      	movne	r0, #1
 8010062:	b002      	add	sp, #8
 8010064:	4770      	bx	lr
 8010066:	4610      	mov	r0, r2
 8010068:	e7fb      	b.n	8010062 <__ascii_mbtowc+0x16>
 801006a:	f06f 0001 	mvn.w	r0, #1
 801006e:	e7f8      	b.n	8010062 <__ascii_mbtowc+0x16>

08010070 <__malloc_lock>:
 8010070:	4801      	ldr	r0, [pc, #4]	; (8010078 <__malloc_lock+0x8>)
 8010072:	f001 bc51 	b.w	8011918 <__retarget_lock_acquire_recursive>
 8010076:	bf00      	nop
 8010078:	200059cc 	.word	0x200059cc

0801007c <__malloc_unlock>:
 801007c:	4801      	ldr	r0, [pc, #4]	; (8010084 <__malloc_unlock+0x8>)
 801007e:	f001 bc4c 	b.w	801191a <__retarget_lock_release_recursive>
 8010082:	bf00      	nop
 8010084:	200059cc 	.word	0x200059cc

08010088 <_Balloc>:
 8010088:	b570      	push	{r4, r5, r6, lr}
 801008a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801008c:	4604      	mov	r4, r0
 801008e:	460d      	mov	r5, r1
 8010090:	b976      	cbnz	r6, 80100b0 <_Balloc+0x28>
 8010092:	2010      	movs	r0, #16
 8010094:	f7fc ff04 	bl	800cea0 <malloc>
 8010098:	4602      	mov	r2, r0
 801009a:	6260      	str	r0, [r4, #36]	; 0x24
 801009c:	b920      	cbnz	r0, 80100a8 <_Balloc+0x20>
 801009e:	4b18      	ldr	r3, [pc, #96]	; (8010100 <_Balloc+0x78>)
 80100a0:	4818      	ldr	r0, [pc, #96]	; (8010104 <_Balloc+0x7c>)
 80100a2:	2166      	movs	r1, #102	; 0x66
 80100a4:	f001 fa50 	bl	8011548 <__assert_func>
 80100a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80100ac:	6006      	str	r6, [r0, #0]
 80100ae:	60c6      	str	r6, [r0, #12]
 80100b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80100b2:	68f3      	ldr	r3, [r6, #12]
 80100b4:	b183      	cbz	r3, 80100d8 <_Balloc+0x50>
 80100b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80100b8:	68db      	ldr	r3, [r3, #12]
 80100ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80100be:	b9b8      	cbnz	r0, 80100f0 <_Balloc+0x68>
 80100c0:	2101      	movs	r1, #1
 80100c2:	fa01 f605 	lsl.w	r6, r1, r5
 80100c6:	1d72      	adds	r2, r6, #5
 80100c8:	0092      	lsls	r2, r2, #2
 80100ca:	4620      	mov	r0, r4
 80100cc:	f000 fc97 	bl	80109fe <_calloc_r>
 80100d0:	b160      	cbz	r0, 80100ec <_Balloc+0x64>
 80100d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80100d6:	e00e      	b.n	80100f6 <_Balloc+0x6e>
 80100d8:	2221      	movs	r2, #33	; 0x21
 80100da:	2104      	movs	r1, #4
 80100dc:	4620      	mov	r0, r4
 80100de:	f000 fc8e 	bl	80109fe <_calloc_r>
 80100e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80100e4:	60f0      	str	r0, [r6, #12]
 80100e6:	68db      	ldr	r3, [r3, #12]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d1e4      	bne.n	80100b6 <_Balloc+0x2e>
 80100ec:	2000      	movs	r0, #0
 80100ee:	bd70      	pop	{r4, r5, r6, pc}
 80100f0:	6802      	ldr	r2, [r0, #0]
 80100f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80100f6:	2300      	movs	r3, #0
 80100f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80100fc:	e7f7      	b.n	80100ee <_Balloc+0x66>
 80100fe:	bf00      	nop
 8010100:	080139ce 	.word	0x080139ce
 8010104:	08013ad4 	.word	0x08013ad4

08010108 <_Bfree>:
 8010108:	b570      	push	{r4, r5, r6, lr}
 801010a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801010c:	4605      	mov	r5, r0
 801010e:	460c      	mov	r4, r1
 8010110:	b976      	cbnz	r6, 8010130 <_Bfree+0x28>
 8010112:	2010      	movs	r0, #16
 8010114:	f7fc fec4 	bl	800cea0 <malloc>
 8010118:	4602      	mov	r2, r0
 801011a:	6268      	str	r0, [r5, #36]	; 0x24
 801011c:	b920      	cbnz	r0, 8010128 <_Bfree+0x20>
 801011e:	4b09      	ldr	r3, [pc, #36]	; (8010144 <_Bfree+0x3c>)
 8010120:	4809      	ldr	r0, [pc, #36]	; (8010148 <_Bfree+0x40>)
 8010122:	218a      	movs	r1, #138	; 0x8a
 8010124:	f001 fa10 	bl	8011548 <__assert_func>
 8010128:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801012c:	6006      	str	r6, [r0, #0]
 801012e:	60c6      	str	r6, [r0, #12]
 8010130:	b13c      	cbz	r4, 8010142 <_Bfree+0x3a>
 8010132:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010134:	6862      	ldr	r2, [r4, #4]
 8010136:	68db      	ldr	r3, [r3, #12]
 8010138:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801013c:	6021      	str	r1, [r4, #0]
 801013e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010142:	bd70      	pop	{r4, r5, r6, pc}
 8010144:	080139ce 	.word	0x080139ce
 8010148:	08013ad4 	.word	0x08013ad4

0801014c <__multadd>:
 801014c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010150:	690e      	ldr	r6, [r1, #16]
 8010152:	4607      	mov	r7, r0
 8010154:	4698      	mov	r8, r3
 8010156:	460c      	mov	r4, r1
 8010158:	f101 0014 	add.w	r0, r1, #20
 801015c:	2300      	movs	r3, #0
 801015e:	6805      	ldr	r5, [r0, #0]
 8010160:	b2a9      	uxth	r1, r5
 8010162:	fb02 8101 	mla	r1, r2, r1, r8
 8010166:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801016a:	0c2d      	lsrs	r5, r5, #16
 801016c:	fb02 c505 	mla	r5, r2, r5, ip
 8010170:	b289      	uxth	r1, r1
 8010172:	3301      	adds	r3, #1
 8010174:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8010178:	429e      	cmp	r6, r3
 801017a:	f840 1b04 	str.w	r1, [r0], #4
 801017e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8010182:	dcec      	bgt.n	801015e <__multadd+0x12>
 8010184:	f1b8 0f00 	cmp.w	r8, #0
 8010188:	d022      	beq.n	80101d0 <__multadd+0x84>
 801018a:	68a3      	ldr	r3, [r4, #8]
 801018c:	42b3      	cmp	r3, r6
 801018e:	dc19      	bgt.n	80101c4 <__multadd+0x78>
 8010190:	6861      	ldr	r1, [r4, #4]
 8010192:	4638      	mov	r0, r7
 8010194:	3101      	adds	r1, #1
 8010196:	f7ff ff77 	bl	8010088 <_Balloc>
 801019a:	4605      	mov	r5, r0
 801019c:	b928      	cbnz	r0, 80101aa <__multadd+0x5e>
 801019e:	4602      	mov	r2, r0
 80101a0:	4b0d      	ldr	r3, [pc, #52]	; (80101d8 <__multadd+0x8c>)
 80101a2:	480e      	ldr	r0, [pc, #56]	; (80101dc <__multadd+0x90>)
 80101a4:	21b5      	movs	r1, #181	; 0xb5
 80101a6:	f001 f9cf 	bl	8011548 <__assert_func>
 80101aa:	6922      	ldr	r2, [r4, #16]
 80101ac:	3202      	adds	r2, #2
 80101ae:	f104 010c 	add.w	r1, r4, #12
 80101b2:	0092      	lsls	r2, r2, #2
 80101b4:	300c      	adds	r0, #12
 80101b6:	f7fc fe83 	bl	800cec0 <memcpy>
 80101ba:	4621      	mov	r1, r4
 80101bc:	4638      	mov	r0, r7
 80101be:	f7ff ffa3 	bl	8010108 <_Bfree>
 80101c2:	462c      	mov	r4, r5
 80101c4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80101c8:	3601      	adds	r6, #1
 80101ca:	f8c3 8014 	str.w	r8, [r3, #20]
 80101ce:	6126      	str	r6, [r4, #16]
 80101d0:	4620      	mov	r0, r4
 80101d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101d6:	bf00      	nop
 80101d8:	08013a44 	.word	0x08013a44
 80101dc:	08013ad4 	.word	0x08013ad4

080101e0 <__s2b>:
 80101e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101e4:	460c      	mov	r4, r1
 80101e6:	4615      	mov	r5, r2
 80101e8:	461f      	mov	r7, r3
 80101ea:	2209      	movs	r2, #9
 80101ec:	3308      	adds	r3, #8
 80101ee:	4606      	mov	r6, r0
 80101f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80101f4:	2100      	movs	r1, #0
 80101f6:	2201      	movs	r2, #1
 80101f8:	429a      	cmp	r2, r3
 80101fa:	db09      	blt.n	8010210 <__s2b+0x30>
 80101fc:	4630      	mov	r0, r6
 80101fe:	f7ff ff43 	bl	8010088 <_Balloc>
 8010202:	b940      	cbnz	r0, 8010216 <__s2b+0x36>
 8010204:	4602      	mov	r2, r0
 8010206:	4b19      	ldr	r3, [pc, #100]	; (801026c <__s2b+0x8c>)
 8010208:	4819      	ldr	r0, [pc, #100]	; (8010270 <__s2b+0x90>)
 801020a:	21ce      	movs	r1, #206	; 0xce
 801020c:	f001 f99c 	bl	8011548 <__assert_func>
 8010210:	0052      	lsls	r2, r2, #1
 8010212:	3101      	adds	r1, #1
 8010214:	e7f0      	b.n	80101f8 <__s2b+0x18>
 8010216:	9b08      	ldr	r3, [sp, #32]
 8010218:	6143      	str	r3, [r0, #20]
 801021a:	2d09      	cmp	r5, #9
 801021c:	f04f 0301 	mov.w	r3, #1
 8010220:	6103      	str	r3, [r0, #16]
 8010222:	dd16      	ble.n	8010252 <__s2b+0x72>
 8010224:	f104 0909 	add.w	r9, r4, #9
 8010228:	46c8      	mov	r8, r9
 801022a:	442c      	add	r4, r5
 801022c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010230:	4601      	mov	r1, r0
 8010232:	3b30      	subs	r3, #48	; 0x30
 8010234:	220a      	movs	r2, #10
 8010236:	4630      	mov	r0, r6
 8010238:	f7ff ff88 	bl	801014c <__multadd>
 801023c:	45a0      	cmp	r8, r4
 801023e:	d1f5      	bne.n	801022c <__s2b+0x4c>
 8010240:	f1a5 0408 	sub.w	r4, r5, #8
 8010244:	444c      	add	r4, r9
 8010246:	1b2d      	subs	r5, r5, r4
 8010248:	1963      	adds	r3, r4, r5
 801024a:	42bb      	cmp	r3, r7
 801024c:	db04      	blt.n	8010258 <__s2b+0x78>
 801024e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010252:	340a      	adds	r4, #10
 8010254:	2509      	movs	r5, #9
 8010256:	e7f6      	b.n	8010246 <__s2b+0x66>
 8010258:	f814 3b01 	ldrb.w	r3, [r4], #1
 801025c:	4601      	mov	r1, r0
 801025e:	3b30      	subs	r3, #48	; 0x30
 8010260:	220a      	movs	r2, #10
 8010262:	4630      	mov	r0, r6
 8010264:	f7ff ff72 	bl	801014c <__multadd>
 8010268:	e7ee      	b.n	8010248 <__s2b+0x68>
 801026a:	bf00      	nop
 801026c:	08013a44 	.word	0x08013a44
 8010270:	08013ad4 	.word	0x08013ad4

08010274 <__hi0bits>:
 8010274:	0c03      	lsrs	r3, r0, #16
 8010276:	041b      	lsls	r3, r3, #16
 8010278:	b9d3      	cbnz	r3, 80102b0 <__hi0bits+0x3c>
 801027a:	0400      	lsls	r0, r0, #16
 801027c:	2310      	movs	r3, #16
 801027e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010282:	bf04      	itt	eq
 8010284:	0200      	lsleq	r0, r0, #8
 8010286:	3308      	addeq	r3, #8
 8010288:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801028c:	bf04      	itt	eq
 801028e:	0100      	lsleq	r0, r0, #4
 8010290:	3304      	addeq	r3, #4
 8010292:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010296:	bf04      	itt	eq
 8010298:	0080      	lsleq	r0, r0, #2
 801029a:	3302      	addeq	r3, #2
 801029c:	2800      	cmp	r0, #0
 801029e:	db05      	blt.n	80102ac <__hi0bits+0x38>
 80102a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80102a4:	f103 0301 	add.w	r3, r3, #1
 80102a8:	bf08      	it	eq
 80102aa:	2320      	moveq	r3, #32
 80102ac:	4618      	mov	r0, r3
 80102ae:	4770      	bx	lr
 80102b0:	2300      	movs	r3, #0
 80102b2:	e7e4      	b.n	801027e <__hi0bits+0xa>

080102b4 <__lo0bits>:
 80102b4:	6803      	ldr	r3, [r0, #0]
 80102b6:	f013 0207 	ands.w	r2, r3, #7
 80102ba:	4601      	mov	r1, r0
 80102bc:	d00b      	beq.n	80102d6 <__lo0bits+0x22>
 80102be:	07da      	lsls	r2, r3, #31
 80102c0:	d424      	bmi.n	801030c <__lo0bits+0x58>
 80102c2:	0798      	lsls	r0, r3, #30
 80102c4:	bf49      	itett	mi
 80102c6:	085b      	lsrmi	r3, r3, #1
 80102c8:	089b      	lsrpl	r3, r3, #2
 80102ca:	2001      	movmi	r0, #1
 80102cc:	600b      	strmi	r3, [r1, #0]
 80102ce:	bf5c      	itt	pl
 80102d0:	600b      	strpl	r3, [r1, #0]
 80102d2:	2002      	movpl	r0, #2
 80102d4:	4770      	bx	lr
 80102d6:	b298      	uxth	r0, r3
 80102d8:	b9b0      	cbnz	r0, 8010308 <__lo0bits+0x54>
 80102da:	0c1b      	lsrs	r3, r3, #16
 80102dc:	2010      	movs	r0, #16
 80102de:	f013 0fff 	tst.w	r3, #255	; 0xff
 80102e2:	bf04      	itt	eq
 80102e4:	0a1b      	lsreq	r3, r3, #8
 80102e6:	3008      	addeq	r0, #8
 80102e8:	071a      	lsls	r2, r3, #28
 80102ea:	bf04      	itt	eq
 80102ec:	091b      	lsreq	r3, r3, #4
 80102ee:	3004      	addeq	r0, #4
 80102f0:	079a      	lsls	r2, r3, #30
 80102f2:	bf04      	itt	eq
 80102f4:	089b      	lsreq	r3, r3, #2
 80102f6:	3002      	addeq	r0, #2
 80102f8:	07da      	lsls	r2, r3, #31
 80102fa:	d403      	bmi.n	8010304 <__lo0bits+0x50>
 80102fc:	085b      	lsrs	r3, r3, #1
 80102fe:	f100 0001 	add.w	r0, r0, #1
 8010302:	d005      	beq.n	8010310 <__lo0bits+0x5c>
 8010304:	600b      	str	r3, [r1, #0]
 8010306:	4770      	bx	lr
 8010308:	4610      	mov	r0, r2
 801030a:	e7e8      	b.n	80102de <__lo0bits+0x2a>
 801030c:	2000      	movs	r0, #0
 801030e:	4770      	bx	lr
 8010310:	2020      	movs	r0, #32
 8010312:	4770      	bx	lr

08010314 <__i2b>:
 8010314:	b510      	push	{r4, lr}
 8010316:	460c      	mov	r4, r1
 8010318:	2101      	movs	r1, #1
 801031a:	f7ff feb5 	bl	8010088 <_Balloc>
 801031e:	4602      	mov	r2, r0
 8010320:	b928      	cbnz	r0, 801032e <__i2b+0x1a>
 8010322:	4b05      	ldr	r3, [pc, #20]	; (8010338 <__i2b+0x24>)
 8010324:	4805      	ldr	r0, [pc, #20]	; (801033c <__i2b+0x28>)
 8010326:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801032a:	f001 f90d 	bl	8011548 <__assert_func>
 801032e:	2301      	movs	r3, #1
 8010330:	6144      	str	r4, [r0, #20]
 8010332:	6103      	str	r3, [r0, #16]
 8010334:	bd10      	pop	{r4, pc}
 8010336:	bf00      	nop
 8010338:	08013a44 	.word	0x08013a44
 801033c:	08013ad4 	.word	0x08013ad4

08010340 <__multiply>:
 8010340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010344:	4614      	mov	r4, r2
 8010346:	690a      	ldr	r2, [r1, #16]
 8010348:	6923      	ldr	r3, [r4, #16]
 801034a:	429a      	cmp	r2, r3
 801034c:	bfb8      	it	lt
 801034e:	460b      	movlt	r3, r1
 8010350:	460d      	mov	r5, r1
 8010352:	bfbc      	itt	lt
 8010354:	4625      	movlt	r5, r4
 8010356:	461c      	movlt	r4, r3
 8010358:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801035c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010360:	68ab      	ldr	r3, [r5, #8]
 8010362:	6869      	ldr	r1, [r5, #4]
 8010364:	eb0a 0709 	add.w	r7, sl, r9
 8010368:	42bb      	cmp	r3, r7
 801036a:	b085      	sub	sp, #20
 801036c:	bfb8      	it	lt
 801036e:	3101      	addlt	r1, #1
 8010370:	f7ff fe8a 	bl	8010088 <_Balloc>
 8010374:	b930      	cbnz	r0, 8010384 <__multiply+0x44>
 8010376:	4602      	mov	r2, r0
 8010378:	4b42      	ldr	r3, [pc, #264]	; (8010484 <__multiply+0x144>)
 801037a:	4843      	ldr	r0, [pc, #268]	; (8010488 <__multiply+0x148>)
 801037c:	f240 115d 	movw	r1, #349	; 0x15d
 8010380:	f001 f8e2 	bl	8011548 <__assert_func>
 8010384:	f100 0614 	add.w	r6, r0, #20
 8010388:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801038c:	4633      	mov	r3, r6
 801038e:	2200      	movs	r2, #0
 8010390:	4543      	cmp	r3, r8
 8010392:	d31e      	bcc.n	80103d2 <__multiply+0x92>
 8010394:	f105 0c14 	add.w	ip, r5, #20
 8010398:	f104 0314 	add.w	r3, r4, #20
 801039c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80103a0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80103a4:	9202      	str	r2, [sp, #8]
 80103a6:	ebac 0205 	sub.w	r2, ip, r5
 80103aa:	3a15      	subs	r2, #21
 80103ac:	f022 0203 	bic.w	r2, r2, #3
 80103b0:	3204      	adds	r2, #4
 80103b2:	f105 0115 	add.w	r1, r5, #21
 80103b6:	458c      	cmp	ip, r1
 80103b8:	bf38      	it	cc
 80103ba:	2204      	movcc	r2, #4
 80103bc:	9201      	str	r2, [sp, #4]
 80103be:	9a02      	ldr	r2, [sp, #8]
 80103c0:	9303      	str	r3, [sp, #12]
 80103c2:	429a      	cmp	r2, r3
 80103c4:	d808      	bhi.n	80103d8 <__multiply+0x98>
 80103c6:	2f00      	cmp	r7, #0
 80103c8:	dc55      	bgt.n	8010476 <__multiply+0x136>
 80103ca:	6107      	str	r7, [r0, #16]
 80103cc:	b005      	add	sp, #20
 80103ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103d2:	f843 2b04 	str.w	r2, [r3], #4
 80103d6:	e7db      	b.n	8010390 <__multiply+0x50>
 80103d8:	f8b3 a000 	ldrh.w	sl, [r3]
 80103dc:	f1ba 0f00 	cmp.w	sl, #0
 80103e0:	d020      	beq.n	8010424 <__multiply+0xe4>
 80103e2:	f105 0e14 	add.w	lr, r5, #20
 80103e6:	46b1      	mov	r9, r6
 80103e8:	2200      	movs	r2, #0
 80103ea:	f85e 4b04 	ldr.w	r4, [lr], #4
 80103ee:	f8d9 b000 	ldr.w	fp, [r9]
 80103f2:	b2a1      	uxth	r1, r4
 80103f4:	fa1f fb8b 	uxth.w	fp, fp
 80103f8:	fb0a b101 	mla	r1, sl, r1, fp
 80103fc:	4411      	add	r1, r2
 80103fe:	f8d9 2000 	ldr.w	r2, [r9]
 8010402:	0c24      	lsrs	r4, r4, #16
 8010404:	0c12      	lsrs	r2, r2, #16
 8010406:	fb0a 2404 	mla	r4, sl, r4, r2
 801040a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801040e:	b289      	uxth	r1, r1
 8010410:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010414:	45f4      	cmp	ip, lr
 8010416:	f849 1b04 	str.w	r1, [r9], #4
 801041a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801041e:	d8e4      	bhi.n	80103ea <__multiply+0xaa>
 8010420:	9901      	ldr	r1, [sp, #4]
 8010422:	5072      	str	r2, [r6, r1]
 8010424:	9a03      	ldr	r2, [sp, #12]
 8010426:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801042a:	3304      	adds	r3, #4
 801042c:	f1b9 0f00 	cmp.w	r9, #0
 8010430:	d01f      	beq.n	8010472 <__multiply+0x132>
 8010432:	6834      	ldr	r4, [r6, #0]
 8010434:	f105 0114 	add.w	r1, r5, #20
 8010438:	46b6      	mov	lr, r6
 801043a:	f04f 0a00 	mov.w	sl, #0
 801043e:	880a      	ldrh	r2, [r1, #0]
 8010440:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010444:	fb09 b202 	mla	r2, r9, r2, fp
 8010448:	4492      	add	sl, r2
 801044a:	b2a4      	uxth	r4, r4
 801044c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8010450:	f84e 4b04 	str.w	r4, [lr], #4
 8010454:	f851 4b04 	ldr.w	r4, [r1], #4
 8010458:	f8be 2000 	ldrh.w	r2, [lr]
 801045c:	0c24      	lsrs	r4, r4, #16
 801045e:	fb09 2404 	mla	r4, r9, r4, r2
 8010462:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8010466:	458c      	cmp	ip, r1
 8010468:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801046c:	d8e7      	bhi.n	801043e <__multiply+0xfe>
 801046e:	9a01      	ldr	r2, [sp, #4]
 8010470:	50b4      	str	r4, [r6, r2]
 8010472:	3604      	adds	r6, #4
 8010474:	e7a3      	b.n	80103be <__multiply+0x7e>
 8010476:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801047a:	2b00      	cmp	r3, #0
 801047c:	d1a5      	bne.n	80103ca <__multiply+0x8a>
 801047e:	3f01      	subs	r7, #1
 8010480:	e7a1      	b.n	80103c6 <__multiply+0x86>
 8010482:	bf00      	nop
 8010484:	08013a44 	.word	0x08013a44
 8010488:	08013ad4 	.word	0x08013ad4

0801048c <__pow5mult>:
 801048c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010490:	4615      	mov	r5, r2
 8010492:	f012 0203 	ands.w	r2, r2, #3
 8010496:	4606      	mov	r6, r0
 8010498:	460f      	mov	r7, r1
 801049a:	d007      	beq.n	80104ac <__pow5mult+0x20>
 801049c:	4c25      	ldr	r4, [pc, #148]	; (8010534 <__pow5mult+0xa8>)
 801049e:	3a01      	subs	r2, #1
 80104a0:	2300      	movs	r3, #0
 80104a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80104a6:	f7ff fe51 	bl	801014c <__multadd>
 80104aa:	4607      	mov	r7, r0
 80104ac:	10ad      	asrs	r5, r5, #2
 80104ae:	d03d      	beq.n	801052c <__pow5mult+0xa0>
 80104b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80104b2:	b97c      	cbnz	r4, 80104d4 <__pow5mult+0x48>
 80104b4:	2010      	movs	r0, #16
 80104b6:	f7fc fcf3 	bl	800cea0 <malloc>
 80104ba:	4602      	mov	r2, r0
 80104bc:	6270      	str	r0, [r6, #36]	; 0x24
 80104be:	b928      	cbnz	r0, 80104cc <__pow5mult+0x40>
 80104c0:	4b1d      	ldr	r3, [pc, #116]	; (8010538 <__pow5mult+0xac>)
 80104c2:	481e      	ldr	r0, [pc, #120]	; (801053c <__pow5mult+0xb0>)
 80104c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80104c8:	f001 f83e 	bl	8011548 <__assert_func>
 80104cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80104d0:	6004      	str	r4, [r0, #0]
 80104d2:	60c4      	str	r4, [r0, #12]
 80104d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80104d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80104dc:	b94c      	cbnz	r4, 80104f2 <__pow5mult+0x66>
 80104de:	f240 2171 	movw	r1, #625	; 0x271
 80104e2:	4630      	mov	r0, r6
 80104e4:	f7ff ff16 	bl	8010314 <__i2b>
 80104e8:	2300      	movs	r3, #0
 80104ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80104ee:	4604      	mov	r4, r0
 80104f0:	6003      	str	r3, [r0, #0]
 80104f2:	f04f 0900 	mov.w	r9, #0
 80104f6:	07eb      	lsls	r3, r5, #31
 80104f8:	d50a      	bpl.n	8010510 <__pow5mult+0x84>
 80104fa:	4639      	mov	r1, r7
 80104fc:	4622      	mov	r2, r4
 80104fe:	4630      	mov	r0, r6
 8010500:	f7ff ff1e 	bl	8010340 <__multiply>
 8010504:	4639      	mov	r1, r7
 8010506:	4680      	mov	r8, r0
 8010508:	4630      	mov	r0, r6
 801050a:	f7ff fdfd 	bl	8010108 <_Bfree>
 801050e:	4647      	mov	r7, r8
 8010510:	106d      	asrs	r5, r5, #1
 8010512:	d00b      	beq.n	801052c <__pow5mult+0xa0>
 8010514:	6820      	ldr	r0, [r4, #0]
 8010516:	b938      	cbnz	r0, 8010528 <__pow5mult+0x9c>
 8010518:	4622      	mov	r2, r4
 801051a:	4621      	mov	r1, r4
 801051c:	4630      	mov	r0, r6
 801051e:	f7ff ff0f 	bl	8010340 <__multiply>
 8010522:	6020      	str	r0, [r4, #0]
 8010524:	f8c0 9000 	str.w	r9, [r0]
 8010528:	4604      	mov	r4, r0
 801052a:	e7e4      	b.n	80104f6 <__pow5mult+0x6a>
 801052c:	4638      	mov	r0, r7
 801052e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010532:	bf00      	nop
 8010534:	08013c28 	.word	0x08013c28
 8010538:	080139ce 	.word	0x080139ce
 801053c:	08013ad4 	.word	0x08013ad4

08010540 <__lshift>:
 8010540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010544:	460c      	mov	r4, r1
 8010546:	6849      	ldr	r1, [r1, #4]
 8010548:	6923      	ldr	r3, [r4, #16]
 801054a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801054e:	68a3      	ldr	r3, [r4, #8]
 8010550:	4607      	mov	r7, r0
 8010552:	4691      	mov	r9, r2
 8010554:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010558:	f108 0601 	add.w	r6, r8, #1
 801055c:	42b3      	cmp	r3, r6
 801055e:	db0b      	blt.n	8010578 <__lshift+0x38>
 8010560:	4638      	mov	r0, r7
 8010562:	f7ff fd91 	bl	8010088 <_Balloc>
 8010566:	4605      	mov	r5, r0
 8010568:	b948      	cbnz	r0, 801057e <__lshift+0x3e>
 801056a:	4602      	mov	r2, r0
 801056c:	4b28      	ldr	r3, [pc, #160]	; (8010610 <__lshift+0xd0>)
 801056e:	4829      	ldr	r0, [pc, #164]	; (8010614 <__lshift+0xd4>)
 8010570:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010574:	f000 ffe8 	bl	8011548 <__assert_func>
 8010578:	3101      	adds	r1, #1
 801057a:	005b      	lsls	r3, r3, #1
 801057c:	e7ee      	b.n	801055c <__lshift+0x1c>
 801057e:	2300      	movs	r3, #0
 8010580:	f100 0114 	add.w	r1, r0, #20
 8010584:	f100 0210 	add.w	r2, r0, #16
 8010588:	4618      	mov	r0, r3
 801058a:	4553      	cmp	r3, sl
 801058c:	db33      	blt.n	80105f6 <__lshift+0xb6>
 801058e:	6920      	ldr	r0, [r4, #16]
 8010590:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010594:	f104 0314 	add.w	r3, r4, #20
 8010598:	f019 091f 	ands.w	r9, r9, #31
 801059c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80105a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80105a4:	d02b      	beq.n	80105fe <__lshift+0xbe>
 80105a6:	f1c9 0e20 	rsb	lr, r9, #32
 80105aa:	468a      	mov	sl, r1
 80105ac:	2200      	movs	r2, #0
 80105ae:	6818      	ldr	r0, [r3, #0]
 80105b0:	fa00 f009 	lsl.w	r0, r0, r9
 80105b4:	4302      	orrs	r2, r0
 80105b6:	f84a 2b04 	str.w	r2, [sl], #4
 80105ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80105be:	459c      	cmp	ip, r3
 80105c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80105c4:	d8f3      	bhi.n	80105ae <__lshift+0x6e>
 80105c6:	ebac 0304 	sub.w	r3, ip, r4
 80105ca:	3b15      	subs	r3, #21
 80105cc:	f023 0303 	bic.w	r3, r3, #3
 80105d0:	3304      	adds	r3, #4
 80105d2:	f104 0015 	add.w	r0, r4, #21
 80105d6:	4584      	cmp	ip, r0
 80105d8:	bf38      	it	cc
 80105da:	2304      	movcc	r3, #4
 80105dc:	50ca      	str	r2, [r1, r3]
 80105de:	b10a      	cbz	r2, 80105e4 <__lshift+0xa4>
 80105e0:	f108 0602 	add.w	r6, r8, #2
 80105e4:	3e01      	subs	r6, #1
 80105e6:	4638      	mov	r0, r7
 80105e8:	612e      	str	r6, [r5, #16]
 80105ea:	4621      	mov	r1, r4
 80105ec:	f7ff fd8c 	bl	8010108 <_Bfree>
 80105f0:	4628      	mov	r0, r5
 80105f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80105fa:	3301      	adds	r3, #1
 80105fc:	e7c5      	b.n	801058a <__lshift+0x4a>
 80105fe:	3904      	subs	r1, #4
 8010600:	f853 2b04 	ldr.w	r2, [r3], #4
 8010604:	f841 2f04 	str.w	r2, [r1, #4]!
 8010608:	459c      	cmp	ip, r3
 801060a:	d8f9      	bhi.n	8010600 <__lshift+0xc0>
 801060c:	e7ea      	b.n	80105e4 <__lshift+0xa4>
 801060e:	bf00      	nop
 8010610:	08013a44 	.word	0x08013a44
 8010614:	08013ad4 	.word	0x08013ad4

08010618 <__mcmp>:
 8010618:	b530      	push	{r4, r5, lr}
 801061a:	6902      	ldr	r2, [r0, #16]
 801061c:	690c      	ldr	r4, [r1, #16]
 801061e:	1b12      	subs	r2, r2, r4
 8010620:	d10e      	bne.n	8010640 <__mcmp+0x28>
 8010622:	f100 0314 	add.w	r3, r0, #20
 8010626:	3114      	adds	r1, #20
 8010628:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801062c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010630:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010634:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010638:	42a5      	cmp	r5, r4
 801063a:	d003      	beq.n	8010644 <__mcmp+0x2c>
 801063c:	d305      	bcc.n	801064a <__mcmp+0x32>
 801063e:	2201      	movs	r2, #1
 8010640:	4610      	mov	r0, r2
 8010642:	bd30      	pop	{r4, r5, pc}
 8010644:	4283      	cmp	r3, r0
 8010646:	d3f3      	bcc.n	8010630 <__mcmp+0x18>
 8010648:	e7fa      	b.n	8010640 <__mcmp+0x28>
 801064a:	f04f 32ff 	mov.w	r2, #4294967295
 801064e:	e7f7      	b.n	8010640 <__mcmp+0x28>

08010650 <__mdiff>:
 8010650:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010654:	460c      	mov	r4, r1
 8010656:	4606      	mov	r6, r0
 8010658:	4611      	mov	r1, r2
 801065a:	4620      	mov	r0, r4
 801065c:	4617      	mov	r7, r2
 801065e:	f7ff ffdb 	bl	8010618 <__mcmp>
 8010662:	1e05      	subs	r5, r0, #0
 8010664:	d110      	bne.n	8010688 <__mdiff+0x38>
 8010666:	4629      	mov	r1, r5
 8010668:	4630      	mov	r0, r6
 801066a:	f7ff fd0d 	bl	8010088 <_Balloc>
 801066e:	b930      	cbnz	r0, 801067e <__mdiff+0x2e>
 8010670:	4b39      	ldr	r3, [pc, #228]	; (8010758 <__mdiff+0x108>)
 8010672:	4602      	mov	r2, r0
 8010674:	f240 2132 	movw	r1, #562	; 0x232
 8010678:	4838      	ldr	r0, [pc, #224]	; (801075c <__mdiff+0x10c>)
 801067a:	f000 ff65 	bl	8011548 <__assert_func>
 801067e:	2301      	movs	r3, #1
 8010680:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010684:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010688:	bfa4      	itt	ge
 801068a:	463b      	movge	r3, r7
 801068c:	4627      	movge	r7, r4
 801068e:	4630      	mov	r0, r6
 8010690:	6879      	ldr	r1, [r7, #4]
 8010692:	bfa6      	itte	ge
 8010694:	461c      	movge	r4, r3
 8010696:	2500      	movge	r5, #0
 8010698:	2501      	movlt	r5, #1
 801069a:	f7ff fcf5 	bl	8010088 <_Balloc>
 801069e:	b920      	cbnz	r0, 80106aa <__mdiff+0x5a>
 80106a0:	4b2d      	ldr	r3, [pc, #180]	; (8010758 <__mdiff+0x108>)
 80106a2:	4602      	mov	r2, r0
 80106a4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80106a8:	e7e6      	b.n	8010678 <__mdiff+0x28>
 80106aa:	693e      	ldr	r6, [r7, #16]
 80106ac:	60c5      	str	r5, [r0, #12]
 80106ae:	6925      	ldr	r5, [r4, #16]
 80106b0:	f107 0114 	add.w	r1, r7, #20
 80106b4:	f104 0914 	add.w	r9, r4, #20
 80106b8:	f100 0e14 	add.w	lr, r0, #20
 80106bc:	f107 0210 	add.w	r2, r7, #16
 80106c0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80106c4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80106c8:	46f2      	mov	sl, lr
 80106ca:	2700      	movs	r7, #0
 80106cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80106d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80106d4:	fa1f f883 	uxth.w	r8, r3
 80106d8:	fa17 f78b 	uxtah	r7, r7, fp
 80106dc:	0c1b      	lsrs	r3, r3, #16
 80106de:	eba7 0808 	sub.w	r8, r7, r8
 80106e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80106e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80106ea:	fa1f f888 	uxth.w	r8, r8
 80106ee:	141f      	asrs	r7, r3, #16
 80106f0:	454d      	cmp	r5, r9
 80106f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80106f6:	f84a 3b04 	str.w	r3, [sl], #4
 80106fa:	d8e7      	bhi.n	80106cc <__mdiff+0x7c>
 80106fc:	1b2b      	subs	r3, r5, r4
 80106fe:	3b15      	subs	r3, #21
 8010700:	f023 0303 	bic.w	r3, r3, #3
 8010704:	3304      	adds	r3, #4
 8010706:	3415      	adds	r4, #21
 8010708:	42a5      	cmp	r5, r4
 801070a:	bf38      	it	cc
 801070c:	2304      	movcc	r3, #4
 801070e:	4419      	add	r1, r3
 8010710:	4473      	add	r3, lr
 8010712:	469e      	mov	lr, r3
 8010714:	460d      	mov	r5, r1
 8010716:	4565      	cmp	r5, ip
 8010718:	d30e      	bcc.n	8010738 <__mdiff+0xe8>
 801071a:	f10c 0203 	add.w	r2, ip, #3
 801071e:	1a52      	subs	r2, r2, r1
 8010720:	f022 0203 	bic.w	r2, r2, #3
 8010724:	3903      	subs	r1, #3
 8010726:	458c      	cmp	ip, r1
 8010728:	bf38      	it	cc
 801072a:	2200      	movcc	r2, #0
 801072c:	441a      	add	r2, r3
 801072e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010732:	b17b      	cbz	r3, 8010754 <__mdiff+0x104>
 8010734:	6106      	str	r6, [r0, #16]
 8010736:	e7a5      	b.n	8010684 <__mdiff+0x34>
 8010738:	f855 8b04 	ldr.w	r8, [r5], #4
 801073c:	fa17 f488 	uxtah	r4, r7, r8
 8010740:	1422      	asrs	r2, r4, #16
 8010742:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8010746:	b2a4      	uxth	r4, r4
 8010748:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801074c:	f84e 4b04 	str.w	r4, [lr], #4
 8010750:	1417      	asrs	r7, r2, #16
 8010752:	e7e0      	b.n	8010716 <__mdiff+0xc6>
 8010754:	3e01      	subs	r6, #1
 8010756:	e7ea      	b.n	801072e <__mdiff+0xde>
 8010758:	08013a44 	.word	0x08013a44
 801075c:	08013ad4 	.word	0x08013ad4

08010760 <__ulp>:
 8010760:	b082      	sub	sp, #8
 8010762:	ed8d 0b00 	vstr	d0, [sp]
 8010766:	9b01      	ldr	r3, [sp, #4]
 8010768:	4912      	ldr	r1, [pc, #72]	; (80107b4 <__ulp+0x54>)
 801076a:	4019      	ands	r1, r3
 801076c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010770:	2900      	cmp	r1, #0
 8010772:	dd05      	ble.n	8010780 <__ulp+0x20>
 8010774:	2200      	movs	r2, #0
 8010776:	460b      	mov	r3, r1
 8010778:	ec43 2b10 	vmov	d0, r2, r3
 801077c:	b002      	add	sp, #8
 801077e:	4770      	bx	lr
 8010780:	4249      	negs	r1, r1
 8010782:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010786:	ea4f 5021 	mov.w	r0, r1, asr #20
 801078a:	f04f 0200 	mov.w	r2, #0
 801078e:	f04f 0300 	mov.w	r3, #0
 8010792:	da04      	bge.n	801079e <__ulp+0x3e>
 8010794:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010798:	fa41 f300 	asr.w	r3, r1, r0
 801079c:	e7ec      	b.n	8010778 <__ulp+0x18>
 801079e:	f1a0 0114 	sub.w	r1, r0, #20
 80107a2:	291e      	cmp	r1, #30
 80107a4:	bfda      	itte	le
 80107a6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80107aa:	fa20 f101 	lsrle.w	r1, r0, r1
 80107ae:	2101      	movgt	r1, #1
 80107b0:	460a      	mov	r2, r1
 80107b2:	e7e1      	b.n	8010778 <__ulp+0x18>
 80107b4:	7ff00000 	.word	0x7ff00000

080107b8 <__b2d>:
 80107b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107ba:	6905      	ldr	r5, [r0, #16]
 80107bc:	f100 0714 	add.w	r7, r0, #20
 80107c0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80107c4:	1f2e      	subs	r6, r5, #4
 80107c6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80107ca:	4620      	mov	r0, r4
 80107cc:	f7ff fd52 	bl	8010274 <__hi0bits>
 80107d0:	f1c0 0320 	rsb	r3, r0, #32
 80107d4:	280a      	cmp	r0, #10
 80107d6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010854 <__b2d+0x9c>
 80107da:	600b      	str	r3, [r1, #0]
 80107dc:	dc14      	bgt.n	8010808 <__b2d+0x50>
 80107de:	f1c0 0e0b 	rsb	lr, r0, #11
 80107e2:	fa24 f10e 	lsr.w	r1, r4, lr
 80107e6:	42b7      	cmp	r7, r6
 80107e8:	ea41 030c 	orr.w	r3, r1, ip
 80107ec:	bf34      	ite	cc
 80107ee:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80107f2:	2100      	movcs	r1, #0
 80107f4:	3015      	adds	r0, #21
 80107f6:	fa04 f000 	lsl.w	r0, r4, r0
 80107fa:	fa21 f10e 	lsr.w	r1, r1, lr
 80107fe:	ea40 0201 	orr.w	r2, r0, r1
 8010802:	ec43 2b10 	vmov	d0, r2, r3
 8010806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010808:	42b7      	cmp	r7, r6
 801080a:	bf3a      	itte	cc
 801080c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010810:	f1a5 0608 	subcc.w	r6, r5, #8
 8010814:	2100      	movcs	r1, #0
 8010816:	380b      	subs	r0, #11
 8010818:	d017      	beq.n	801084a <__b2d+0x92>
 801081a:	f1c0 0c20 	rsb	ip, r0, #32
 801081e:	fa04 f500 	lsl.w	r5, r4, r0
 8010822:	42be      	cmp	r6, r7
 8010824:	fa21 f40c 	lsr.w	r4, r1, ip
 8010828:	ea45 0504 	orr.w	r5, r5, r4
 801082c:	bf8c      	ite	hi
 801082e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010832:	2400      	movls	r4, #0
 8010834:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010838:	fa01 f000 	lsl.w	r0, r1, r0
 801083c:	fa24 f40c 	lsr.w	r4, r4, ip
 8010840:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010844:	ea40 0204 	orr.w	r2, r0, r4
 8010848:	e7db      	b.n	8010802 <__b2d+0x4a>
 801084a:	ea44 030c 	orr.w	r3, r4, ip
 801084e:	460a      	mov	r2, r1
 8010850:	e7d7      	b.n	8010802 <__b2d+0x4a>
 8010852:	bf00      	nop
 8010854:	3ff00000 	.word	0x3ff00000

08010858 <__d2b>:
 8010858:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801085c:	4689      	mov	r9, r1
 801085e:	2101      	movs	r1, #1
 8010860:	ec57 6b10 	vmov	r6, r7, d0
 8010864:	4690      	mov	r8, r2
 8010866:	f7ff fc0f 	bl	8010088 <_Balloc>
 801086a:	4604      	mov	r4, r0
 801086c:	b930      	cbnz	r0, 801087c <__d2b+0x24>
 801086e:	4602      	mov	r2, r0
 8010870:	4b25      	ldr	r3, [pc, #148]	; (8010908 <__d2b+0xb0>)
 8010872:	4826      	ldr	r0, [pc, #152]	; (801090c <__d2b+0xb4>)
 8010874:	f240 310a 	movw	r1, #778	; 0x30a
 8010878:	f000 fe66 	bl	8011548 <__assert_func>
 801087c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010880:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010884:	bb35      	cbnz	r5, 80108d4 <__d2b+0x7c>
 8010886:	2e00      	cmp	r6, #0
 8010888:	9301      	str	r3, [sp, #4]
 801088a:	d028      	beq.n	80108de <__d2b+0x86>
 801088c:	4668      	mov	r0, sp
 801088e:	9600      	str	r6, [sp, #0]
 8010890:	f7ff fd10 	bl	80102b4 <__lo0bits>
 8010894:	9900      	ldr	r1, [sp, #0]
 8010896:	b300      	cbz	r0, 80108da <__d2b+0x82>
 8010898:	9a01      	ldr	r2, [sp, #4]
 801089a:	f1c0 0320 	rsb	r3, r0, #32
 801089e:	fa02 f303 	lsl.w	r3, r2, r3
 80108a2:	430b      	orrs	r3, r1
 80108a4:	40c2      	lsrs	r2, r0
 80108a6:	6163      	str	r3, [r4, #20]
 80108a8:	9201      	str	r2, [sp, #4]
 80108aa:	9b01      	ldr	r3, [sp, #4]
 80108ac:	61a3      	str	r3, [r4, #24]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	bf14      	ite	ne
 80108b2:	2202      	movne	r2, #2
 80108b4:	2201      	moveq	r2, #1
 80108b6:	6122      	str	r2, [r4, #16]
 80108b8:	b1d5      	cbz	r5, 80108f0 <__d2b+0x98>
 80108ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80108be:	4405      	add	r5, r0
 80108c0:	f8c9 5000 	str.w	r5, [r9]
 80108c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80108c8:	f8c8 0000 	str.w	r0, [r8]
 80108cc:	4620      	mov	r0, r4
 80108ce:	b003      	add	sp, #12
 80108d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80108d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80108d8:	e7d5      	b.n	8010886 <__d2b+0x2e>
 80108da:	6161      	str	r1, [r4, #20]
 80108dc:	e7e5      	b.n	80108aa <__d2b+0x52>
 80108de:	a801      	add	r0, sp, #4
 80108e0:	f7ff fce8 	bl	80102b4 <__lo0bits>
 80108e4:	9b01      	ldr	r3, [sp, #4]
 80108e6:	6163      	str	r3, [r4, #20]
 80108e8:	2201      	movs	r2, #1
 80108ea:	6122      	str	r2, [r4, #16]
 80108ec:	3020      	adds	r0, #32
 80108ee:	e7e3      	b.n	80108b8 <__d2b+0x60>
 80108f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80108f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80108f8:	f8c9 0000 	str.w	r0, [r9]
 80108fc:	6918      	ldr	r0, [r3, #16]
 80108fe:	f7ff fcb9 	bl	8010274 <__hi0bits>
 8010902:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010906:	e7df      	b.n	80108c8 <__d2b+0x70>
 8010908:	08013a44 	.word	0x08013a44
 801090c:	08013ad4 	.word	0x08013ad4

08010910 <__ratio>:
 8010910:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010914:	4688      	mov	r8, r1
 8010916:	4669      	mov	r1, sp
 8010918:	4681      	mov	r9, r0
 801091a:	f7ff ff4d 	bl	80107b8 <__b2d>
 801091e:	a901      	add	r1, sp, #4
 8010920:	4640      	mov	r0, r8
 8010922:	ec55 4b10 	vmov	r4, r5, d0
 8010926:	f7ff ff47 	bl	80107b8 <__b2d>
 801092a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801092e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010932:	eba3 0c02 	sub.w	ip, r3, r2
 8010936:	e9dd 3200 	ldrd	r3, r2, [sp]
 801093a:	1a9b      	subs	r3, r3, r2
 801093c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010940:	ec51 0b10 	vmov	r0, r1, d0
 8010944:	2b00      	cmp	r3, #0
 8010946:	bfd6      	itet	le
 8010948:	460a      	movle	r2, r1
 801094a:	462a      	movgt	r2, r5
 801094c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010950:	468b      	mov	fp, r1
 8010952:	462f      	mov	r7, r5
 8010954:	bfd4      	ite	le
 8010956:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801095a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801095e:	4620      	mov	r0, r4
 8010960:	ee10 2a10 	vmov	r2, s0
 8010964:	465b      	mov	r3, fp
 8010966:	4639      	mov	r1, r7
 8010968:	f7ef ff78 	bl	800085c <__aeabi_ddiv>
 801096c:	ec41 0b10 	vmov	d0, r0, r1
 8010970:	b003      	add	sp, #12
 8010972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010976 <__copybits>:
 8010976:	3901      	subs	r1, #1
 8010978:	b570      	push	{r4, r5, r6, lr}
 801097a:	1149      	asrs	r1, r1, #5
 801097c:	6914      	ldr	r4, [r2, #16]
 801097e:	3101      	adds	r1, #1
 8010980:	f102 0314 	add.w	r3, r2, #20
 8010984:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010988:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801098c:	1f05      	subs	r5, r0, #4
 801098e:	42a3      	cmp	r3, r4
 8010990:	d30c      	bcc.n	80109ac <__copybits+0x36>
 8010992:	1aa3      	subs	r3, r4, r2
 8010994:	3b11      	subs	r3, #17
 8010996:	f023 0303 	bic.w	r3, r3, #3
 801099a:	3211      	adds	r2, #17
 801099c:	42a2      	cmp	r2, r4
 801099e:	bf88      	it	hi
 80109a0:	2300      	movhi	r3, #0
 80109a2:	4418      	add	r0, r3
 80109a4:	2300      	movs	r3, #0
 80109a6:	4288      	cmp	r0, r1
 80109a8:	d305      	bcc.n	80109b6 <__copybits+0x40>
 80109aa:	bd70      	pop	{r4, r5, r6, pc}
 80109ac:	f853 6b04 	ldr.w	r6, [r3], #4
 80109b0:	f845 6f04 	str.w	r6, [r5, #4]!
 80109b4:	e7eb      	b.n	801098e <__copybits+0x18>
 80109b6:	f840 3b04 	str.w	r3, [r0], #4
 80109ba:	e7f4      	b.n	80109a6 <__copybits+0x30>

080109bc <__any_on>:
 80109bc:	f100 0214 	add.w	r2, r0, #20
 80109c0:	6900      	ldr	r0, [r0, #16]
 80109c2:	114b      	asrs	r3, r1, #5
 80109c4:	4298      	cmp	r0, r3
 80109c6:	b510      	push	{r4, lr}
 80109c8:	db11      	blt.n	80109ee <__any_on+0x32>
 80109ca:	dd0a      	ble.n	80109e2 <__any_on+0x26>
 80109cc:	f011 011f 	ands.w	r1, r1, #31
 80109d0:	d007      	beq.n	80109e2 <__any_on+0x26>
 80109d2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80109d6:	fa24 f001 	lsr.w	r0, r4, r1
 80109da:	fa00 f101 	lsl.w	r1, r0, r1
 80109de:	428c      	cmp	r4, r1
 80109e0:	d10b      	bne.n	80109fa <__any_on+0x3e>
 80109e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80109e6:	4293      	cmp	r3, r2
 80109e8:	d803      	bhi.n	80109f2 <__any_on+0x36>
 80109ea:	2000      	movs	r0, #0
 80109ec:	bd10      	pop	{r4, pc}
 80109ee:	4603      	mov	r3, r0
 80109f0:	e7f7      	b.n	80109e2 <__any_on+0x26>
 80109f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80109f6:	2900      	cmp	r1, #0
 80109f8:	d0f5      	beq.n	80109e6 <__any_on+0x2a>
 80109fa:	2001      	movs	r0, #1
 80109fc:	e7f6      	b.n	80109ec <__any_on+0x30>

080109fe <_calloc_r>:
 80109fe:	b513      	push	{r0, r1, r4, lr}
 8010a00:	434a      	muls	r2, r1
 8010a02:	4611      	mov	r1, r2
 8010a04:	9201      	str	r2, [sp, #4]
 8010a06:	f7fc fac1 	bl	800cf8c <_malloc_r>
 8010a0a:	4604      	mov	r4, r0
 8010a0c:	b118      	cbz	r0, 8010a16 <_calloc_r+0x18>
 8010a0e:	9a01      	ldr	r2, [sp, #4]
 8010a10:	2100      	movs	r1, #0
 8010a12:	f7fc fa63 	bl	800cedc <memset>
 8010a16:	4620      	mov	r0, r4
 8010a18:	b002      	add	sp, #8
 8010a1a:	bd10      	pop	{r4, pc}

08010a1c <__ssputs_r>:
 8010a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a20:	688e      	ldr	r6, [r1, #8]
 8010a22:	429e      	cmp	r6, r3
 8010a24:	4682      	mov	sl, r0
 8010a26:	460c      	mov	r4, r1
 8010a28:	4690      	mov	r8, r2
 8010a2a:	461f      	mov	r7, r3
 8010a2c:	d838      	bhi.n	8010aa0 <__ssputs_r+0x84>
 8010a2e:	898a      	ldrh	r2, [r1, #12]
 8010a30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010a34:	d032      	beq.n	8010a9c <__ssputs_r+0x80>
 8010a36:	6825      	ldr	r5, [r4, #0]
 8010a38:	6909      	ldr	r1, [r1, #16]
 8010a3a:	eba5 0901 	sub.w	r9, r5, r1
 8010a3e:	6965      	ldr	r5, [r4, #20]
 8010a40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010a44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010a48:	3301      	adds	r3, #1
 8010a4a:	444b      	add	r3, r9
 8010a4c:	106d      	asrs	r5, r5, #1
 8010a4e:	429d      	cmp	r5, r3
 8010a50:	bf38      	it	cc
 8010a52:	461d      	movcc	r5, r3
 8010a54:	0553      	lsls	r3, r2, #21
 8010a56:	d531      	bpl.n	8010abc <__ssputs_r+0xa0>
 8010a58:	4629      	mov	r1, r5
 8010a5a:	f7fc fa97 	bl	800cf8c <_malloc_r>
 8010a5e:	4606      	mov	r6, r0
 8010a60:	b950      	cbnz	r0, 8010a78 <__ssputs_r+0x5c>
 8010a62:	230c      	movs	r3, #12
 8010a64:	f8ca 3000 	str.w	r3, [sl]
 8010a68:	89a3      	ldrh	r3, [r4, #12]
 8010a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a6e:	81a3      	strh	r3, [r4, #12]
 8010a70:	f04f 30ff 	mov.w	r0, #4294967295
 8010a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a78:	6921      	ldr	r1, [r4, #16]
 8010a7a:	464a      	mov	r2, r9
 8010a7c:	f7fc fa20 	bl	800cec0 <memcpy>
 8010a80:	89a3      	ldrh	r3, [r4, #12]
 8010a82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a8a:	81a3      	strh	r3, [r4, #12]
 8010a8c:	6126      	str	r6, [r4, #16]
 8010a8e:	6165      	str	r5, [r4, #20]
 8010a90:	444e      	add	r6, r9
 8010a92:	eba5 0509 	sub.w	r5, r5, r9
 8010a96:	6026      	str	r6, [r4, #0]
 8010a98:	60a5      	str	r5, [r4, #8]
 8010a9a:	463e      	mov	r6, r7
 8010a9c:	42be      	cmp	r6, r7
 8010a9e:	d900      	bls.n	8010aa2 <__ssputs_r+0x86>
 8010aa0:	463e      	mov	r6, r7
 8010aa2:	4632      	mov	r2, r6
 8010aa4:	6820      	ldr	r0, [r4, #0]
 8010aa6:	4641      	mov	r1, r8
 8010aa8:	f000 ff38 	bl	801191c <memmove>
 8010aac:	68a3      	ldr	r3, [r4, #8]
 8010aae:	6822      	ldr	r2, [r4, #0]
 8010ab0:	1b9b      	subs	r3, r3, r6
 8010ab2:	4432      	add	r2, r6
 8010ab4:	60a3      	str	r3, [r4, #8]
 8010ab6:	6022      	str	r2, [r4, #0]
 8010ab8:	2000      	movs	r0, #0
 8010aba:	e7db      	b.n	8010a74 <__ssputs_r+0x58>
 8010abc:	462a      	mov	r2, r5
 8010abe:	f000 ff47 	bl	8011950 <_realloc_r>
 8010ac2:	4606      	mov	r6, r0
 8010ac4:	2800      	cmp	r0, #0
 8010ac6:	d1e1      	bne.n	8010a8c <__ssputs_r+0x70>
 8010ac8:	6921      	ldr	r1, [r4, #16]
 8010aca:	4650      	mov	r0, sl
 8010acc:	f7fc fa0e 	bl	800ceec <_free_r>
 8010ad0:	e7c7      	b.n	8010a62 <__ssputs_r+0x46>
	...

08010ad4 <_svfiprintf_r>:
 8010ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ad8:	4698      	mov	r8, r3
 8010ada:	898b      	ldrh	r3, [r1, #12]
 8010adc:	061b      	lsls	r3, r3, #24
 8010ade:	b09d      	sub	sp, #116	; 0x74
 8010ae0:	4607      	mov	r7, r0
 8010ae2:	460d      	mov	r5, r1
 8010ae4:	4614      	mov	r4, r2
 8010ae6:	d50e      	bpl.n	8010b06 <_svfiprintf_r+0x32>
 8010ae8:	690b      	ldr	r3, [r1, #16]
 8010aea:	b963      	cbnz	r3, 8010b06 <_svfiprintf_r+0x32>
 8010aec:	2140      	movs	r1, #64	; 0x40
 8010aee:	f7fc fa4d 	bl	800cf8c <_malloc_r>
 8010af2:	6028      	str	r0, [r5, #0]
 8010af4:	6128      	str	r0, [r5, #16]
 8010af6:	b920      	cbnz	r0, 8010b02 <_svfiprintf_r+0x2e>
 8010af8:	230c      	movs	r3, #12
 8010afa:	603b      	str	r3, [r7, #0]
 8010afc:	f04f 30ff 	mov.w	r0, #4294967295
 8010b00:	e0d1      	b.n	8010ca6 <_svfiprintf_r+0x1d2>
 8010b02:	2340      	movs	r3, #64	; 0x40
 8010b04:	616b      	str	r3, [r5, #20]
 8010b06:	2300      	movs	r3, #0
 8010b08:	9309      	str	r3, [sp, #36]	; 0x24
 8010b0a:	2320      	movs	r3, #32
 8010b0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010b10:	f8cd 800c 	str.w	r8, [sp, #12]
 8010b14:	2330      	movs	r3, #48	; 0x30
 8010b16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010cc0 <_svfiprintf_r+0x1ec>
 8010b1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010b1e:	f04f 0901 	mov.w	r9, #1
 8010b22:	4623      	mov	r3, r4
 8010b24:	469a      	mov	sl, r3
 8010b26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b2a:	b10a      	cbz	r2, 8010b30 <_svfiprintf_r+0x5c>
 8010b2c:	2a25      	cmp	r2, #37	; 0x25
 8010b2e:	d1f9      	bne.n	8010b24 <_svfiprintf_r+0x50>
 8010b30:	ebba 0b04 	subs.w	fp, sl, r4
 8010b34:	d00b      	beq.n	8010b4e <_svfiprintf_r+0x7a>
 8010b36:	465b      	mov	r3, fp
 8010b38:	4622      	mov	r2, r4
 8010b3a:	4629      	mov	r1, r5
 8010b3c:	4638      	mov	r0, r7
 8010b3e:	f7ff ff6d 	bl	8010a1c <__ssputs_r>
 8010b42:	3001      	adds	r0, #1
 8010b44:	f000 80aa 	beq.w	8010c9c <_svfiprintf_r+0x1c8>
 8010b48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b4a:	445a      	add	r2, fp
 8010b4c:	9209      	str	r2, [sp, #36]	; 0x24
 8010b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	f000 80a2 	beq.w	8010c9c <_svfiprintf_r+0x1c8>
 8010b58:	2300      	movs	r3, #0
 8010b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8010b5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b62:	f10a 0a01 	add.w	sl, sl, #1
 8010b66:	9304      	str	r3, [sp, #16]
 8010b68:	9307      	str	r3, [sp, #28]
 8010b6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010b6e:	931a      	str	r3, [sp, #104]	; 0x68
 8010b70:	4654      	mov	r4, sl
 8010b72:	2205      	movs	r2, #5
 8010b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b78:	4851      	ldr	r0, [pc, #324]	; (8010cc0 <_svfiprintf_r+0x1ec>)
 8010b7a:	f7ef fb39 	bl	80001f0 <memchr>
 8010b7e:	9a04      	ldr	r2, [sp, #16]
 8010b80:	b9d8      	cbnz	r0, 8010bba <_svfiprintf_r+0xe6>
 8010b82:	06d0      	lsls	r0, r2, #27
 8010b84:	bf44      	itt	mi
 8010b86:	2320      	movmi	r3, #32
 8010b88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b8c:	0711      	lsls	r1, r2, #28
 8010b8e:	bf44      	itt	mi
 8010b90:	232b      	movmi	r3, #43	; 0x2b
 8010b92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b96:	f89a 3000 	ldrb.w	r3, [sl]
 8010b9a:	2b2a      	cmp	r3, #42	; 0x2a
 8010b9c:	d015      	beq.n	8010bca <_svfiprintf_r+0xf6>
 8010b9e:	9a07      	ldr	r2, [sp, #28]
 8010ba0:	4654      	mov	r4, sl
 8010ba2:	2000      	movs	r0, #0
 8010ba4:	f04f 0c0a 	mov.w	ip, #10
 8010ba8:	4621      	mov	r1, r4
 8010baa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010bae:	3b30      	subs	r3, #48	; 0x30
 8010bb0:	2b09      	cmp	r3, #9
 8010bb2:	d94e      	bls.n	8010c52 <_svfiprintf_r+0x17e>
 8010bb4:	b1b0      	cbz	r0, 8010be4 <_svfiprintf_r+0x110>
 8010bb6:	9207      	str	r2, [sp, #28]
 8010bb8:	e014      	b.n	8010be4 <_svfiprintf_r+0x110>
 8010bba:	eba0 0308 	sub.w	r3, r0, r8
 8010bbe:	fa09 f303 	lsl.w	r3, r9, r3
 8010bc2:	4313      	orrs	r3, r2
 8010bc4:	9304      	str	r3, [sp, #16]
 8010bc6:	46a2      	mov	sl, r4
 8010bc8:	e7d2      	b.n	8010b70 <_svfiprintf_r+0x9c>
 8010bca:	9b03      	ldr	r3, [sp, #12]
 8010bcc:	1d19      	adds	r1, r3, #4
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	9103      	str	r1, [sp, #12]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	bfbb      	ittet	lt
 8010bd6:	425b      	neglt	r3, r3
 8010bd8:	f042 0202 	orrlt.w	r2, r2, #2
 8010bdc:	9307      	strge	r3, [sp, #28]
 8010bde:	9307      	strlt	r3, [sp, #28]
 8010be0:	bfb8      	it	lt
 8010be2:	9204      	strlt	r2, [sp, #16]
 8010be4:	7823      	ldrb	r3, [r4, #0]
 8010be6:	2b2e      	cmp	r3, #46	; 0x2e
 8010be8:	d10c      	bne.n	8010c04 <_svfiprintf_r+0x130>
 8010bea:	7863      	ldrb	r3, [r4, #1]
 8010bec:	2b2a      	cmp	r3, #42	; 0x2a
 8010bee:	d135      	bne.n	8010c5c <_svfiprintf_r+0x188>
 8010bf0:	9b03      	ldr	r3, [sp, #12]
 8010bf2:	1d1a      	adds	r2, r3, #4
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	9203      	str	r2, [sp, #12]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	bfb8      	it	lt
 8010bfc:	f04f 33ff 	movlt.w	r3, #4294967295
 8010c00:	3402      	adds	r4, #2
 8010c02:	9305      	str	r3, [sp, #20]
 8010c04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010cd0 <_svfiprintf_r+0x1fc>
 8010c08:	7821      	ldrb	r1, [r4, #0]
 8010c0a:	2203      	movs	r2, #3
 8010c0c:	4650      	mov	r0, sl
 8010c0e:	f7ef faef 	bl	80001f0 <memchr>
 8010c12:	b140      	cbz	r0, 8010c26 <_svfiprintf_r+0x152>
 8010c14:	2340      	movs	r3, #64	; 0x40
 8010c16:	eba0 000a 	sub.w	r0, r0, sl
 8010c1a:	fa03 f000 	lsl.w	r0, r3, r0
 8010c1e:	9b04      	ldr	r3, [sp, #16]
 8010c20:	4303      	orrs	r3, r0
 8010c22:	3401      	adds	r4, #1
 8010c24:	9304      	str	r3, [sp, #16]
 8010c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c2a:	4826      	ldr	r0, [pc, #152]	; (8010cc4 <_svfiprintf_r+0x1f0>)
 8010c2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010c30:	2206      	movs	r2, #6
 8010c32:	f7ef fadd 	bl	80001f0 <memchr>
 8010c36:	2800      	cmp	r0, #0
 8010c38:	d038      	beq.n	8010cac <_svfiprintf_r+0x1d8>
 8010c3a:	4b23      	ldr	r3, [pc, #140]	; (8010cc8 <_svfiprintf_r+0x1f4>)
 8010c3c:	bb1b      	cbnz	r3, 8010c86 <_svfiprintf_r+0x1b2>
 8010c3e:	9b03      	ldr	r3, [sp, #12]
 8010c40:	3307      	adds	r3, #7
 8010c42:	f023 0307 	bic.w	r3, r3, #7
 8010c46:	3308      	adds	r3, #8
 8010c48:	9303      	str	r3, [sp, #12]
 8010c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c4c:	4433      	add	r3, r6
 8010c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8010c50:	e767      	b.n	8010b22 <_svfiprintf_r+0x4e>
 8010c52:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c56:	460c      	mov	r4, r1
 8010c58:	2001      	movs	r0, #1
 8010c5a:	e7a5      	b.n	8010ba8 <_svfiprintf_r+0xd4>
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	3401      	adds	r4, #1
 8010c60:	9305      	str	r3, [sp, #20]
 8010c62:	4619      	mov	r1, r3
 8010c64:	f04f 0c0a 	mov.w	ip, #10
 8010c68:	4620      	mov	r0, r4
 8010c6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c6e:	3a30      	subs	r2, #48	; 0x30
 8010c70:	2a09      	cmp	r2, #9
 8010c72:	d903      	bls.n	8010c7c <_svfiprintf_r+0x1a8>
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d0c5      	beq.n	8010c04 <_svfiprintf_r+0x130>
 8010c78:	9105      	str	r1, [sp, #20]
 8010c7a:	e7c3      	b.n	8010c04 <_svfiprintf_r+0x130>
 8010c7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c80:	4604      	mov	r4, r0
 8010c82:	2301      	movs	r3, #1
 8010c84:	e7f0      	b.n	8010c68 <_svfiprintf_r+0x194>
 8010c86:	ab03      	add	r3, sp, #12
 8010c88:	9300      	str	r3, [sp, #0]
 8010c8a:	462a      	mov	r2, r5
 8010c8c:	4b0f      	ldr	r3, [pc, #60]	; (8010ccc <_svfiprintf_r+0x1f8>)
 8010c8e:	a904      	add	r1, sp, #16
 8010c90:	4638      	mov	r0, r7
 8010c92:	f7fc fa75 	bl	800d180 <_printf_float>
 8010c96:	1c42      	adds	r2, r0, #1
 8010c98:	4606      	mov	r6, r0
 8010c9a:	d1d6      	bne.n	8010c4a <_svfiprintf_r+0x176>
 8010c9c:	89ab      	ldrh	r3, [r5, #12]
 8010c9e:	065b      	lsls	r3, r3, #25
 8010ca0:	f53f af2c 	bmi.w	8010afc <_svfiprintf_r+0x28>
 8010ca4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010ca6:	b01d      	add	sp, #116	; 0x74
 8010ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cac:	ab03      	add	r3, sp, #12
 8010cae:	9300      	str	r3, [sp, #0]
 8010cb0:	462a      	mov	r2, r5
 8010cb2:	4b06      	ldr	r3, [pc, #24]	; (8010ccc <_svfiprintf_r+0x1f8>)
 8010cb4:	a904      	add	r1, sp, #16
 8010cb6:	4638      	mov	r0, r7
 8010cb8:	f7fc fd06 	bl	800d6c8 <_printf_i>
 8010cbc:	e7eb      	b.n	8010c96 <_svfiprintf_r+0x1c2>
 8010cbe:	bf00      	nop
 8010cc0:	08013c34 	.word	0x08013c34
 8010cc4:	08013c3e 	.word	0x08013c3e
 8010cc8:	0800d181 	.word	0x0800d181
 8010ccc:	08010a1d 	.word	0x08010a1d
 8010cd0:	08013c3a 	.word	0x08013c3a

08010cd4 <_sungetc_r>:
 8010cd4:	b538      	push	{r3, r4, r5, lr}
 8010cd6:	1c4b      	adds	r3, r1, #1
 8010cd8:	4614      	mov	r4, r2
 8010cda:	d103      	bne.n	8010ce4 <_sungetc_r+0x10>
 8010cdc:	f04f 35ff 	mov.w	r5, #4294967295
 8010ce0:	4628      	mov	r0, r5
 8010ce2:	bd38      	pop	{r3, r4, r5, pc}
 8010ce4:	8993      	ldrh	r3, [r2, #12]
 8010ce6:	f023 0320 	bic.w	r3, r3, #32
 8010cea:	8193      	strh	r3, [r2, #12]
 8010cec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010cee:	6852      	ldr	r2, [r2, #4]
 8010cf0:	b2cd      	uxtb	r5, r1
 8010cf2:	b18b      	cbz	r3, 8010d18 <_sungetc_r+0x44>
 8010cf4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010cf6:	4293      	cmp	r3, r2
 8010cf8:	dd08      	ble.n	8010d0c <_sungetc_r+0x38>
 8010cfa:	6823      	ldr	r3, [r4, #0]
 8010cfc:	1e5a      	subs	r2, r3, #1
 8010cfe:	6022      	str	r2, [r4, #0]
 8010d00:	f803 5c01 	strb.w	r5, [r3, #-1]
 8010d04:	6863      	ldr	r3, [r4, #4]
 8010d06:	3301      	adds	r3, #1
 8010d08:	6063      	str	r3, [r4, #4]
 8010d0a:	e7e9      	b.n	8010ce0 <_sungetc_r+0xc>
 8010d0c:	4621      	mov	r1, r4
 8010d0e:	f000 fbd3 	bl	80114b8 <__submore>
 8010d12:	2800      	cmp	r0, #0
 8010d14:	d0f1      	beq.n	8010cfa <_sungetc_r+0x26>
 8010d16:	e7e1      	b.n	8010cdc <_sungetc_r+0x8>
 8010d18:	6921      	ldr	r1, [r4, #16]
 8010d1a:	6823      	ldr	r3, [r4, #0]
 8010d1c:	b151      	cbz	r1, 8010d34 <_sungetc_r+0x60>
 8010d1e:	4299      	cmp	r1, r3
 8010d20:	d208      	bcs.n	8010d34 <_sungetc_r+0x60>
 8010d22:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8010d26:	42a9      	cmp	r1, r5
 8010d28:	d104      	bne.n	8010d34 <_sungetc_r+0x60>
 8010d2a:	3b01      	subs	r3, #1
 8010d2c:	3201      	adds	r2, #1
 8010d2e:	6023      	str	r3, [r4, #0]
 8010d30:	6062      	str	r2, [r4, #4]
 8010d32:	e7d5      	b.n	8010ce0 <_sungetc_r+0xc>
 8010d34:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8010d38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010d3c:	6363      	str	r3, [r4, #52]	; 0x34
 8010d3e:	2303      	movs	r3, #3
 8010d40:	63a3      	str	r3, [r4, #56]	; 0x38
 8010d42:	4623      	mov	r3, r4
 8010d44:	f803 5f46 	strb.w	r5, [r3, #70]!
 8010d48:	6023      	str	r3, [r4, #0]
 8010d4a:	2301      	movs	r3, #1
 8010d4c:	e7dc      	b.n	8010d08 <_sungetc_r+0x34>

08010d4e <__ssrefill_r>:
 8010d4e:	b510      	push	{r4, lr}
 8010d50:	460c      	mov	r4, r1
 8010d52:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010d54:	b169      	cbz	r1, 8010d72 <__ssrefill_r+0x24>
 8010d56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010d5a:	4299      	cmp	r1, r3
 8010d5c:	d001      	beq.n	8010d62 <__ssrefill_r+0x14>
 8010d5e:	f7fc f8c5 	bl	800ceec <_free_r>
 8010d62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010d64:	6063      	str	r3, [r4, #4]
 8010d66:	2000      	movs	r0, #0
 8010d68:	6360      	str	r0, [r4, #52]	; 0x34
 8010d6a:	b113      	cbz	r3, 8010d72 <__ssrefill_r+0x24>
 8010d6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010d6e:	6023      	str	r3, [r4, #0]
 8010d70:	bd10      	pop	{r4, pc}
 8010d72:	6923      	ldr	r3, [r4, #16]
 8010d74:	6023      	str	r3, [r4, #0]
 8010d76:	2300      	movs	r3, #0
 8010d78:	6063      	str	r3, [r4, #4]
 8010d7a:	89a3      	ldrh	r3, [r4, #12]
 8010d7c:	f043 0320 	orr.w	r3, r3, #32
 8010d80:	81a3      	strh	r3, [r4, #12]
 8010d82:	f04f 30ff 	mov.w	r0, #4294967295
 8010d86:	e7f3      	b.n	8010d70 <__ssrefill_r+0x22>

08010d88 <__ssvfiscanf_r>:
 8010d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d8c:	460c      	mov	r4, r1
 8010d8e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8010d92:	2100      	movs	r1, #0
 8010d94:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8010d98:	49b2      	ldr	r1, [pc, #712]	; (8011064 <__ssvfiscanf_r+0x2dc>)
 8010d9a:	91a0      	str	r1, [sp, #640]	; 0x280
 8010d9c:	f10d 0804 	add.w	r8, sp, #4
 8010da0:	49b1      	ldr	r1, [pc, #708]	; (8011068 <__ssvfiscanf_r+0x2e0>)
 8010da2:	4fb2      	ldr	r7, [pc, #712]	; (801106c <__ssvfiscanf_r+0x2e4>)
 8010da4:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8011070 <__ssvfiscanf_r+0x2e8>
 8010da8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8010dac:	4606      	mov	r6, r0
 8010dae:	91a1      	str	r1, [sp, #644]	; 0x284
 8010db0:	9300      	str	r3, [sp, #0]
 8010db2:	f892 a000 	ldrb.w	sl, [r2]
 8010db6:	f1ba 0f00 	cmp.w	sl, #0
 8010dba:	f000 8151 	beq.w	8011060 <__ssvfiscanf_r+0x2d8>
 8010dbe:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8010dc2:	f013 0308 	ands.w	r3, r3, #8
 8010dc6:	f102 0501 	add.w	r5, r2, #1
 8010dca:	d019      	beq.n	8010e00 <__ssvfiscanf_r+0x78>
 8010dcc:	6863      	ldr	r3, [r4, #4]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	dd0f      	ble.n	8010df2 <__ssvfiscanf_r+0x6a>
 8010dd2:	6823      	ldr	r3, [r4, #0]
 8010dd4:	781a      	ldrb	r2, [r3, #0]
 8010dd6:	5cba      	ldrb	r2, [r7, r2]
 8010dd8:	0712      	lsls	r2, r2, #28
 8010dda:	d401      	bmi.n	8010de0 <__ssvfiscanf_r+0x58>
 8010ddc:	462a      	mov	r2, r5
 8010dde:	e7e8      	b.n	8010db2 <__ssvfiscanf_r+0x2a>
 8010de0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010de2:	3201      	adds	r2, #1
 8010de4:	9245      	str	r2, [sp, #276]	; 0x114
 8010de6:	6862      	ldr	r2, [r4, #4]
 8010de8:	3301      	adds	r3, #1
 8010dea:	3a01      	subs	r2, #1
 8010dec:	6062      	str	r2, [r4, #4]
 8010dee:	6023      	str	r3, [r4, #0]
 8010df0:	e7ec      	b.n	8010dcc <__ssvfiscanf_r+0x44>
 8010df2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010df4:	4621      	mov	r1, r4
 8010df6:	4630      	mov	r0, r6
 8010df8:	4798      	blx	r3
 8010dfa:	2800      	cmp	r0, #0
 8010dfc:	d0e9      	beq.n	8010dd2 <__ssvfiscanf_r+0x4a>
 8010dfe:	e7ed      	b.n	8010ddc <__ssvfiscanf_r+0x54>
 8010e00:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8010e04:	f040 8083 	bne.w	8010f0e <__ssvfiscanf_r+0x186>
 8010e08:	9341      	str	r3, [sp, #260]	; 0x104
 8010e0a:	9343      	str	r3, [sp, #268]	; 0x10c
 8010e0c:	7853      	ldrb	r3, [r2, #1]
 8010e0e:	2b2a      	cmp	r3, #42	; 0x2a
 8010e10:	bf02      	ittt	eq
 8010e12:	2310      	moveq	r3, #16
 8010e14:	1c95      	addeq	r5, r2, #2
 8010e16:	9341      	streq	r3, [sp, #260]	; 0x104
 8010e18:	220a      	movs	r2, #10
 8010e1a:	46ab      	mov	fp, r5
 8010e1c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8010e20:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8010e24:	2b09      	cmp	r3, #9
 8010e26:	d91d      	bls.n	8010e64 <__ssvfiscanf_r+0xdc>
 8010e28:	4891      	ldr	r0, [pc, #580]	; (8011070 <__ssvfiscanf_r+0x2e8>)
 8010e2a:	2203      	movs	r2, #3
 8010e2c:	f7ef f9e0 	bl	80001f0 <memchr>
 8010e30:	b140      	cbz	r0, 8010e44 <__ssvfiscanf_r+0xbc>
 8010e32:	2301      	movs	r3, #1
 8010e34:	eba0 0009 	sub.w	r0, r0, r9
 8010e38:	fa03 f000 	lsl.w	r0, r3, r0
 8010e3c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010e3e:	4318      	orrs	r0, r3
 8010e40:	9041      	str	r0, [sp, #260]	; 0x104
 8010e42:	465d      	mov	r5, fp
 8010e44:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010e48:	2b78      	cmp	r3, #120	; 0x78
 8010e4a:	d806      	bhi.n	8010e5a <__ssvfiscanf_r+0xd2>
 8010e4c:	2b57      	cmp	r3, #87	; 0x57
 8010e4e:	d810      	bhi.n	8010e72 <__ssvfiscanf_r+0xea>
 8010e50:	2b25      	cmp	r3, #37	; 0x25
 8010e52:	d05c      	beq.n	8010f0e <__ssvfiscanf_r+0x186>
 8010e54:	d856      	bhi.n	8010f04 <__ssvfiscanf_r+0x17c>
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d074      	beq.n	8010f44 <__ssvfiscanf_r+0x1bc>
 8010e5a:	2303      	movs	r3, #3
 8010e5c:	9347      	str	r3, [sp, #284]	; 0x11c
 8010e5e:	230a      	movs	r3, #10
 8010e60:	9342      	str	r3, [sp, #264]	; 0x108
 8010e62:	e081      	b.n	8010f68 <__ssvfiscanf_r+0x1e0>
 8010e64:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8010e66:	fb02 1303 	mla	r3, r2, r3, r1
 8010e6a:	3b30      	subs	r3, #48	; 0x30
 8010e6c:	9343      	str	r3, [sp, #268]	; 0x10c
 8010e6e:	465d      	mov	r5, fp
 8010e70:	e7d3      	b.n	8010e1a <__ssvfiscanf_r+0x92>
 8010e72:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8010e76:	2a20      	cmp	r2, #32
 8010e78:	d8ef      	bhi.n	8010e5a <__ssvfiscanf_r+0xd2>
 8010e7a:	a101      	add	r1, pc, #4	; (adr r1, 8010e80 <__ssvfiscanf_r+0xf8>)
 8010e7c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010e80:	08010f53 	.word	0x08010f53
 8010e84:	08010e5b 	.word	0x08010e5b
 8010e88:	08010e5b 	.word	0x08010e5b
 8010e8c:	08010fb1 	.word	0x08010fb1
 8010e90:	08010e5b 	.word	0x08010e5b
 8010e94:	08010e5b 	.word	0x08010e5b
 8010e98:	08010e5b 	.word	0x08010e5b
 8010e9c:	08010e5b 	.word	0x08010e5b
 8010ea0:	08010e5b 	.word	0x08010e5b
 8010ea4:	08010e5b 	.word	0x08010e5b
 8010ea8:	08010e5b 	.word	0x08010e5b
 8010eac:	08010fc7 	.word	0x08010fc7
 8010eb0:	08010f9d 	.word	0x08010f9d
 8010eb4:	08010f0b 	.word	0x08010f0b
 8010eb8:	08010f0b 	.word	0x08010f0b
 8010ebc:	08010f0b 	.word	0x08010f0b
 8010ec0:	08010e5b 	.word	0x08010e5b
 8010ec4:	08010fa1 	.word	0x08010fa1
 8010ec8:	08010e5b 	.word	0x08010e5b
 8010ecc:	08010e5b 	.word	0x08010e5b
 8010ed0:	08010e5b 	.word	0x08010e5b
 8010ed4:	08010e5b 	.word	0x08010e5b
 8010ed8:	08010fd7 	.word	0x08010fd7
 8010edc:	08010fa9 	.word	0x08010fa9
 8010ee0:	08010f4b 	.word	0x08010f4b
 8010ee4:	08010e5b 	.word	0x08010e5b
 8010ee8:	08010e5b 	.word	0x08010e5b
 8010eec:	08010fd3 	.word	0x08010fd3
 8010ef0:	08010e5b 	.word	0x08010e5b
 8010ef4:	08010f9d 	.word	0x08010f9d
 8010ef8:	08010e5b 	.word	0x08010e5b
 8010efc:	08010e5b 	.word	0x08010e5b
 8010f00:	08010f53 	.word	0x08010f53
 8010f04:	3b45      	subs	r3, #69	; 0x45
 8010f06:	2b02      	cmp	r3, #2
 8010f08:	d8a7      	bhi.n	8010e5a <__ssvfiscanf_r+0xd2>
 8010f0a:	2305      	movs	r3, #5
 8010f0c:	e02b      	b.n	8010f66 <__ssvfiscanf_r+0x1de>
 8010f0e:	6863      	ldr	r3, [r4, #4]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	dd0d      	ble.n	8010f30 <__ssvfiscanf_r+0x1a8>
 8010f14:	6823      	ldr	r3, [r4, #0]
 8010f16:	781a      	ldrb	r2, [r3, #0]
 8010f18:	4552      	cmp	r2, sl
 8010f1a:	f040 80a1 	bne.w	8011060 <__ssvfiscanf_r+0x2d8>
 8010f1e:	3301      	adds	r3, #1
 8010f20:	6862      	ldr	r2, [r4, #4]
 8010f22:	6023      	str	r3, [r4, #0]
 8010f24:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8010f26:	3a01      	subs	r2, #1
 8010f28:	3301      	adds	r3, #1
 8010f2a:	6062      	str	r2, [r4, #4]
 8010f2c:	9345      	str	r3, [sp, #276]	; 0x114
 8010f2e:	e755      	b.n	8010ddc <__ssvfiscanf_r+0x54>
 8010f30:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010f32:	4621      	mov	r1, r4
 8010f34:	4630      	mov	r0, r6
 8010f36:	4798      	blx	r3
 8010f38:	2800      	cmp	r0, #0
 8010f3a:	d0eb      	beq.n	8010f14 <__ssvfiscanf_r+0x18c>
 8010f3c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010f3e:	2800      	cmp	r0, #0
 8010f40:	f040 8084 	bne.w	801104c <__ssvfiscanf_r+0x2c4>
 8010f44:	f04f 30ff 	mov.w	r0, #4294967295
 8010f48:	e086      	b.n	8011058 <__ssvfiscanf_r+0x2d0>
 8010f4a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010f4c:	f042 0220 	orr.w	r2, r2, #32
 8010f50:	9241      	str	r2, [sp, #260]	; 0x104
 8010f52:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010f58:	9241      	str	r2, [sp, #260]	; 0x104
 8010f5a:	2210      	movs	r2, #16
 8010f5c:	2b6f      	cmp	r3, #111	; 0x6f
 8010f5e:	9242      	str	r2, [sp, #264]	; 0x108
 8010f60:	bf34      	ite	cc
 8010f62:	2303      	movcc	r3, #3
 8010f64:	2304      	movcs	r3, #4
 8010f66:	9347      	str	r3, [sp, #284]	; 0x11c
 8010f68:	6863      	ldr	r3, [r4, #4]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	dd41      	ble.n	8010ff2 <__ssvfiscanf_r+0x26a>
 8010f6e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010f70:	0659      	lsls	r1, r3, #25
 8010f72:	d404      	bmi.n	8010f7e <__ssvfiscanf_r+0x1f6>
 8010f74:	6823      	ldr	r3, [r4, #0]
 8010f76:	781a      	ldrb	r2, [r3, #0]
 8010f78:	5cba      	ldrb	r2, [r7, r2]
 8010f7a:	0712      	lsls	r2, r2, #28
 8010f7c:	d440      	bmi.n	8011000 <__ssvfiscanf_r+0x278>
 8010f7e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8010f80:	2b02      	cmp	r3, #2
 8010f82:	dc4f      	bgt.n	8011024 <__ssvfiscanf_r+0x29c>
 8010f84:	466b      	mov	r3, sp
 8010f86:	4622      	mov	r2, r4
 8010f88:	a941      	add	r1, sp, #260	; 0x104
 8010f8a:	4630      	mov	r0, r6
 8010f8c:	f000 f874 	bl	8011078 <_scanf_chars>
 8010f90:	2801      	cmp	r0, #1
 8010f92:	d065      	beq.n	8011060 <__ssvfiscanf_r+0x2d8>
 8010f94:	2802      	cmp	r0, #2
 8010f96:	f47f af21 	bne.w	8010ddc <__ssvfiscanf_r+0x54>
 8010f9a:	e7cf      	b.n	8010f3c <__ssvfiscanf_r+0x1b4>
 8010f9c:	220a      	movs	r2, #10
 8010f9e:	e7dd      	b.n	8010f5c <__ssvfiscanf_r+0x1d4>
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	9342      	str	r3, [sp, #264]	; 0x108
 8010fa4:	2303      	movs	r3, #3
 8010fa6:	e7de      	b.n	8010f66 <__ssvfiscanf_r+0x1de>
 8010fa8:	2308      	movs	r3, #8
 8010faa:	9342      	str	r3, [sp, #264]	; 0x108
 8010fac:	2304      	movs	r3, #4
 8010fae:	e7da      	b.n	8010f66 <__ssvfiscanf_r+0x1de>
 8010fb0:	4629      	mov	r1, r5
 8010fb2:	4640      	mov	r0, r8
 8010fb4:	f000 f9c8 	bl	8011348 <__sccl>
 8010fb8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010fbe:	9341      	str	r3, [sp, #260]	; 0x104
 8010fc0:	4605      	mov	r5, r0
 8010fc2:	2301      	movs	r3, #1
 8010fc4:	e7cf      	b.n	8010f66 <__ssvfiscanf_r+0x1de>
 8010fc6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010fcc:	9341      	str	r3, [sp, #260]	; 0x104
 8010fce:	2300      	movs	r3, #0
 8010fd0:	e7c9      	b.n	8010f66 <__ssvfiscanf_r+0x1de>
 8010fd2:	2302      	movs	r3, #2
 8010fd4:	e7c7      	b.n	8010f66 <__ssvfiscanf_r+0x1de>
 8010fd6:	9841      	ldr	r0, [sp, #260]	; 0x104
 8010fd8:	06c3      	lsls	r3, r0, #27
 8010fda:	f53f aeff 	bmi.w	8010ddc <__ssvfiscanf_r+0x54>
 8010fde:	9b00      	ldr	r3, [sp, #0]
 8010fe0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010fe2:	1d19      	adds	r1, r3, #4
 8010fe4:	9100      	str	r1, [sp, #0]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	07c0      	lsls	r0, r0, #31
 8010fea:	bf4c      	ite	mi
 8010fec:	801a      	strhmi	r2, [r3, #0]
 8010fee:	601a      	strpl	r2, [r3, #0]
 8010ff0:	e6f4      	b.n	8010ddc <__ssvfiscanf_r+0x54>
 8010ff2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010ff4:	4621      	mov	r1, r4
 8010ff6:	4630      	mov	r0, r6
 8010ff8:	4798      	blx	r3
 8010ffa:	2800      	cmp	r0, #0
 8010ffc:	d0b7      	beq.n	8010f6e <__ssvfiscanf_r+0x1e6>
 8010ffe:	e79d      	b.n	8010f3c <__ssvfiscanf_r+0x1b4>
 8011000:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011002:	3201      	adds	r2, #1
 8011004:	9245      	str	r2, [sp, #276]	; 0x114
 8011006:	6862      	ldr	r2, [r4, #4]
 8011008:	3a01      	subs	r2, #1
 801100a:	2a00      	cmp	r2, #0
 801100c:	6062      	str	r2, [r4, #4]
 801100e:	dd02      	ble.n	8011016 <__ssvfiscanf_r+0x28e>
 8011010:	3301      	adds	r3, #1
 8011012:	6023      	str	r3, [r4, #0]
 8011014:	e7ae      	b.n	8010f74 <__ssvfiscanf_r+0x1ec>
 8011016:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011018:	4621      	mov	r1, r4
 801101a:	4630      	mov	r0, r6
 801101c:	4798      	blx	r3
 801101e:	2800      	cmp	r0, #0
 8011020:	d0a8      	beq.n	8010f74 <__ssvfiscanf_r+0x1ec>
 8011022:	e78b      	b.n	8010f3c <__ssvfiscanf_r+0x1b4>
 8011024:	2b04      	cmp	r3, #4
 8011026:	dc06      	bgt.n	8011036 <__ssvfiscanf_r+0x2ae>
 8011028:	466b      	mov	r3, sp
 801102a:	4622      	mov	r2, r4
 801102c:	a941      	add	r1, sp, #260	; 0x104
 801102e:	4630      	mov	r0, r6
 8011030:	f000 f87a 	bl	8011128 <_scanf_i>
 8011034:	e7ac      	b.n	8010f90 <__ssvfiscanf_r+0x208>
 8011036:	4b0f      	ldr	r3, [pc, #60]	; (8011074 <__ssvfiscanf_r+0x2ec>)
 8011038:	2b00      	cmp	r3, #0
 801103a:	f43f aecf 	beq.w	8010ddc <__ssvfiscanf_r+0x54>
 801103e:	466b      	mov	r3, sp
 8011040:	4622      	mov	r2, r4
 8011042:	a941      	add	r1, sp, #260	; 0x104
 8011044:	4630      	mov	r0, r6
 8011046:	f7fc fc65 	bl	800d914 <_scanf_float>
 801104a:	e7a1      	b.n	8010f90 <__ssvfiscanf_r+0x208>
 801104c:	89a3      	ldrh	r3, [r4, #12]
 801104e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011052:	bf18      	it	ne
 8011054:	f04f 30ff 	movne.w	r0, #4294967295
 8011058:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801105c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011060:	9844      	ldr	r0, [sp, #272]	; 0x110
 8011062:	e7f9      	b.n	8011058 <__ssvfiscanf_r+0x2d0>
 8011064:	08010cd5 	.word	0x08010cd5
 8011068:	08010d4f 	.word	0x08010d4f
 801106c:	080138c1 	.word	0x080138c1
 8011070:	08013c3a 	.word	0x08013c3a
 8011074:	0800d915 	.word	0x0800d915

08011078 <_scanf_chars>:
 8011078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801107c:	4615      	mov	r5, r2
 801107e:	688a      	ldr	r2, [r1, #8]
 8011080:	4680      	mov	r8, r0
 8011082:	460c      	mov	r4, r1
 8011084:	b932      	cbnz	r2, 8011094 <_scanf_chars+0x1c>
 8011086:	698a      	ldr	r2, [r1, #24]
 8011088:	2a00      	cmp	r2, #0
 801108a:	bf0c      	ite	eq
 801108c:	2201      	moveq	r2, #1
 801108e:	f04f 32ff 	movne.w	r2, #4294967295
 8011092:	608a      	str	r2, [r1, #8]
 8011094:	6822      	ldr	r2, [r4, #0]
 8011096:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8011124 <_scanf_chars+0xac>
 801109a:	06d1      	lsls	r1, r2, #27
 801109c:	bf5f      	itttt	pl
 801109e:	681a      	ldrpl	r2, [r3, #0]
 80110a0:	1d11      	addpl	r1, r2, #4
 80110a2:	6019      	strpl	r1, [r3, #0]
 80110a4:	6816      	ldrpl	r6, [r2, #0]
 80110a6:	2700      	movs	r7, #0
 80110a8:	69a0      	ldr	r0, [r4, #24]
 80110aa:	b188      	cbz	r0, 80110d0 <_scanf_chars+0x58>
 80110ac:	2801      	cmp	r0, #1
 80110ae:	d107      	bne.n	80110c0 <_scanf_chars+0x48>
 80110b0:	682b      	ldr	r3, [r5, #0]
 80110b2:	781a      	ldrb	r2, [r3, #0]
 80110b4:	6963      	ldr	r3, [r4, #20]
 80110b6:	5c9b      	ldrb	r3, [r3, r2]
 80110b8:	b953      	cbnz	r3, 80110d0 <_scanf_chars+0x58>
 80110ba:	bb27      	cbnz	r7, 8011106 <_scanf_chars+0x8e>
 80110bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110c0:	2802      	cmp	r0, #2
 80110c2:	d120      	bne.n	8011106 <_scanf_chars+0x8e>
 80110c4:	682b      	ldr	r3, [r5, #0]
 80110c6:	781b      	ldrb	r3, [r3, #0]
 80110c8:	f813 3009 	ldrb.w	r3, [r3, r9]
 80110cc:	071b      	lsls	r3, r3, #28
 80110ce:	d41a      	bmi.n	8011106 <_scanf_chars+0x8e>
 80110d0:	6823      	ldr	r3, [r4, #0]
 80110d2:	06da      	lsls	r2, r3, #27
 80110d4:	bf5e      	ittt	pl
 80110d6:	682b      	ldrpl	r3, [r5, #0]
 80110d8:	781b      	ldrbpl	r3, [r3, #0]
 80110da:	f806 3b01 	strbpl.w	r3, [r6], #1
 80110de:	682a      	ldr	r2, [r5, #0]
 80110e0:	686b      	ldr	r3, [r5, #4]
 80110e2:	3201      	adds	r2, #1
 80110e4:	602a      	str	r2, [r5, #0]
 80110e6:	68a2      	ldr	r2, [r4, #8]
 80110e8:	3b01      	subs	r3, #1
 80110ea:	3a01      	subs	r2, #1
 80110ec:	606b      	str	r3, [r5, #4]
 80110ee:	3701      	adds	r7, #1
 80110f0:	60a2      	str	r2, [r4, #8]
 80110f2:	b142      	cbz	r2, 8011106 <_scanf_chars+0x8e>
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	dcd7      	bgt.n	80110a8 <_scanf_chars+0x30>
 80110f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80110fc:	4629      	mov	r1, r5
 80110fe:	4640      	mov	r0, r8
 8011100:	4798      	blx	r3
 8011102:	2800      	cmp	r0, #0
 8011104:	d0d0      	beq.n	80110a8 <_scanf_chars+0x30>
 8011106:	6823      	ldr	r3, [r4, #0]
 8011108:	f013 0310 	ands.w	r3, r3, #16
 801110c:	d105      	bne.n	801111a <_scanf_chars+0xa2>
 801110e:	68e2      	ldr	r2, [r4, #12]
 8011110:	3201      	adds	r2, #1
 8011112:	60e2      	str	r2, [r4, #12]
 8011114:	69a2      	ldr	r2, [r4, #24]
 8011116:	b102      	cbz	r2, 801111a <_scanf_chars+0xa2>
 8011118:	7033      	strb	r3, [r6, #0]
 801111a:	6923      	ldr	r3, [r4, #16]
 801111c:	441f      	add	r7, r3
 801111e:	6127      	str	r7, [r4, #16]
 8011120:	2000      	movs	r0, #0
 8011122:	e7cb      	b.n	80110bc <_scanf_chars+0x44>
 8011124:	080138c1 	.word	0x080138c1

08011128 <_scanf_i>:
 8011128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801112c:	4698      	mov	r8, r3
 801112e:	4b74      	ldr	r3, [pc, #464]	; (8011300 <_scanf_i+0x1d8>)
 8011130:	460c      	mov	r4, r1
 8011132:	4682      	mov	sl, r0
 8011134:	4616      	mov	r6, r2
 8011136:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801113a:	b087      	sub	sp, #28
 801113c:	ab03      	add	r3, sp, #12
 801113e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011142:	4b70      	ldr	r3, [pc, #448]	; (8011304 <_scanf_i+0x1dc>)
 8011144:	69a1      	ldr	r1, [r4, #24]
 8011146:	4a70      	ldr	r2, [pc, #448]	; (8011308 <_scanf_i+0x1e0>)
 8011148:	2903      	cmp	r1, #3
 801114a:	bf18      	it	ne
 801114c:	461a      	movne	r2, r3
 801114e:	68a3      	ldr	r3, [r4, #8]
 8011150:	9201      	str	r2, [sp, #4]
 8011152:	1e5a      	subs	r2, r3, #1
 8011154:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011158:	bf88      	it	hi
 801115a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801115e:	4627      	mov	r7, r4
 8011160:	bf82      	ittt	hi
 8011162:	eb03 0905 	addhi.w	r9, r3, r5
 8011166:	f240 135d 	movwhi	r3, #349	; 0x15d
 801116a:	60a3      	strhi	r3, [r4, #8]
 801116c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8011170:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8011174:	bf98      	it	ls
 8011176:	f04f 0900 	movls.w	r9, #0
 801117a:	6023      	str	r3, [r4, #0]
 801117c:	463d      	mov	r5, r7
 801117e:	f04f 0b00 	mov.w	fp, #0
 8011182:	6831      	ldr	r1, [r6, #0]
 8011184:	ab03      	add	r3, sp, #12
 8011186:	7809      	ldrb	r1, [r1, #0]
 8011188:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801118c:	2202      	movs	r2, #2
 801118e:	f7ef f82f 	bl	80001f0 <memchr>
 8011192:	b328      	cbz	r0, 80111e0 <_scanf_i+0xb8>
 8011194:	f1bb 0f01 	cmp.w	fp, #1
 8011198:	d159      	bne.n	801124e <_scanf_i+0x126>
 801119a:	6862      	ldr	r2, [r4, #4]
 801119c:	b92a      	cbnz	r2, 80111aa <_scanf_i+0x82>
 801119e:	6822      	ldr	r2, [r4, #0]
 80111a0:	2308      	movs	r3, #8
 80111a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80111a6:	6063      	str	r3, [r4, #4]
 80111a8:	6022      	str	r2, [r4, #0]
 80111aa:	6822      	ldr	r2, [r4, #0]
 80111ac:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80111b0:	6022      	str	r2, [r4, #0]
 80111b2:	68a2      	ldr	r2, [r4, #8]
 80111b4:	1e51      	subs	r1, r2, #1
 80111b6:	60a1      	str	r1, [r4, #8]
 80111b8:	b192      	cbz	r2, 80111e0 <_scanf_i+0xb8>
 80111ba:	6832      	ldr	r2, [r6, #0]
 80111bc:	1c51      	adds	r1, r2, #1
 80111be:	6031      	str	r1, [r6, #0]
 80111c0:	7812      	ldrb	r2, [r2, #0]
 80111c2:	f805 2b01 	strb.w	r2, [r5], #1
 80111c6:	6872      	ldr	r2, [r6, #4]
 80111c8:	3a01      	subs	r2, #1
 80111ca:	2a00      	cmp	r2, #0
 80111cc:	6072      	str	r2, [r6, #4]
 80111ce:	dc07      	bgt.n	80111e0 <_scanf_i+0xb8>
 80111d0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80111d4:	4631      	mov	r1, r6
 80111d6:	4650      	mov	r0, sl
 80111d8:	4790      	blx	r2
 80111da:	2800      	cmp	r0, #0
 80111dc:	f040 8085 	bne.w	80112ea <_scanf_i+0x1c2>
 80111e0:	f10b 0b01 	add.w	fp, fp, #1
 80111e4:	f1bb 0f03 	cmp.w	fp, #3
 80111e8:	d1cb      	bne.n	8011182 <_scanf_i+0x5a>
 80111ea:	6863      	ldr	r3, [r4, #4]
 80111ec:	b90b      	cbnz	r3, 80111f2 <_scanf_i+0xca>
 80111ee:	230a      	movs	r3, #10
 80111f0:	6063      	str	r3, [r4, #4]
 80111f2:	6863      	ldr	r3, [r4, #4]
 80111f4:	4945      	ldr	r1, [pc, #276]	; (801130c <_scanf_i+0x1e4>)
 80111f6:	6960      	ldr	r0, [r4, #20]
 80111f8:	1ac9      	subs	r1, r1, r3
 80111fa:	f000 f8a5 	bl	8011348 <__sccl>
 80111fe:	f04f 0b00 	mov.w	fp, #0
 8011202:	68a3      	ldr	r3, [r4, #8]
 8011204:	6822      	ldr	r2, [r4, #0]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d03d      	beq.n	8011286 <_scanf_i+0x15e>
 801120a:	6831      	ldr	r1, [r6, #0]
 801120c:	6960      	ldr	r0, [r4, #20]
 801120e:	f891 c000 	ldrb.w	ip, [r1]
 8011212:	f810 000c 	ldrb.w	r0, [r0, ip]
 8011216:	2800      	cmp	r0, #0
 8011218:	d035      	beq.n	8011286 <_scanf_i+0x15e>
 801121a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801121e:	d124      	bne.n	801126a <_scanf_i+0x142>
 8011220:	0510      	lsls	r0, r2, #20
 8011222:	d522      	bpl.n	801126a <_scanf_i+0x142>
 8011224:	f10b 0b01 	add.w	fp, fp, #1
 8011228:	f1b9 0f00 	cmp.w	r9, #0
 801122c:	d003      	beq.n	8011236 <_scanf_i+0x10e>
 801122e:	3301      	adds	r3, #1
 8011230:	f109 39ff 	add.w	r9, r9, #4294967295
 8011234:	60a3      	str	r3, [r4, #8]
 8011236:	6873      	ldr	r3, [r6, #4]
 8011238:	3b01      	subs	r3, #1
 801123a:	2b00      	cmp	r3, #0
 801123c:	6073      	str	r3, [r6, #4]
 801123e:	dd1b      	ble.n	8011278 <_scanf_i+0x150>
 8011240:	6833      	ldr	r3, [r6, #0]
 8011242:	3301      	adds	r3, #1
 8011244:	6033      	str	r3, [r6, #0]
 8011246:	68a3      	ldr	r3, [r4, #8]
 8011248:	3b01      	subs	r3, #1
 801124a:	60a3      	str	r3, [r4, #8]
 801124c:	e7d9      	b.n	8011202 <_scanf_i+0xda>
 801124e:	f1bb 0f02 	cmp.w	fp, #2
 8011252:	d1ae      	bne.n	80111b2 <_scanf_i+0x8a>
 8011254:	6822      	ldr	r2, [r4, #0]
 8011256:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801125a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801125e:	d1bf      	bne.n	80111e0 <_scanf_i+0xb8>
 8011260:	2310      	movs	r3, #16
 8011262:	6063      	str	r3, [r4, #4]
 8011264:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011268:	e7a2      	b.n	80111b0 <_scanf_i+0x88>
 801126a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801126e:	6022      	str	r2, [r4, #0]
 8011270:	780b      	ldrb	r3, [r1, #0]
 8011272:	f805 3b01 	strb.w	r3, [r5], #1
 8011276:	e7de      	b.n	8011236 <_scanf_i+0x10e>
 8011278:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801127c:	4631      	mov	r1, r6
 801127e:	4650      	mov	r0, sl
 8011280:	4798      	blx	r3
 8011282:	2800      	cmp	r0, #0
 8011284:	d0df      	beq.n	8011246 <_scanf_i+0x11e>
 8011286:	6823      	ldr	r3, [r4, #0]
 8011288:	05d9      	lsls	r1, r3, #23
 801128a:	d50d      	bpl.n	80112a8 <_scanf_i+0x180>
 801128c:	42bd      	cmp	r5, r7
 801128e:	d909      	bls.n	80112a4 <_scanf_i+0x17c>
 8011290:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011294:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011298:	4632      	mov	r2, r6
 801129a:	4650      	mov	r0, sl
 801129c:	4798      	blx	r3
 801129e:	f105 39ff 	add.w	r9, r5, #4294967295
 80112a2:	464d      	mov	r5, r9
 80112a4:	42bd      	cmp	r5, r7
 80112a6:	d028      	beq.n	80112fa <_scanf_i+0x1d2>
 80112a8:	6822      	ldr	r2, [r4, #0]
 80112aa:	f012 0210 	ands.w	r2, r2, #16
 80112ae:	d113      	bne.n	80112d8 <_scanf_i+0x1b0>
 80112b0:	702a      	strb	r2, [r5, #0]
 80112b2:	6863      	ldr	r3, [r4, #4]
 80112b4:	9e01      	ldr	r6, [sp, #4]
 80112b6:	4639      	mov	r1, r7
 80112b8:	4650      	mov	r0, sl
 80112ba:	47b0      	blx	r6
 80112bc:	f8d8 3000 	ldr.w	r3, [r8]
 80112c0:	6821      	ldr	r1, [r4, #0]
 80112c2:	1d1a      	adds	r2, r3, #4
 80112c4:	f8c8 2000 	str.w	r2, [r8]
 80112c8:	f011 0f20 	tst.w	r1, #32
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	d00f      	beq.n	80112f0 <_scanf_i+0x1c8>
 80112d0:	6018      	str	r0, [r3, #0]
 80112d2:	68e3      	ldr	r3, [r4, #12]
 80112d4:	3301      	adds	r3, #1
 80112d6:	60e3      	str	r3, [r4, #12]
 80112d8:	1bed      	subs	r5, r5, r7
 80112da:	44ab      	add	fp, r5
 80112dc:	6925      	ldr	r5, [r4, #16]
 80112de:	445d      	add	r5, fp
 80112e0:	6125      	str	r5, [r4, #16]
 80112e2:	2000      	movs	r0, #0
 80112e4:	b007      	add	sp, #28
 80112e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112ea:	f04f 0b00 	mov.w	fp, #0
 80112ee:	e7ca      	b.n	8011286 <_scanf_i+0x15e>
 80112f0:	07ca      	lsls	r2, r1, #31
 80112f2:	bf4c      	ite	mi
 80112f4:	8018      	strhmi	r0, [r3, #0]
 80112f6:	6018      	strpl	r0, [r3, #0]
 80112f8:	e7eb      	b.n	80112d2 <_scanf_i+0x1aa>
 80112fa:	2001      	movs	r0, #1
 80112fc:	e7f2      	b.n	80112e4 <_scanf_i+0x1bc>
 80112fe:	bf00      	nop
 8011300:	08012234 	.word	0x08012234
 8011304:	080114b5 	.word	0x080114b5
 8011308:	0800ec09 	.word	0x0800ec09
 801130c:	08013c5e 	.word	0x08013c5e

08011310 <_read_r>:
 8011310:	b538      	push	{r3, r4, r5, lr}
 8011312:	4d07      	ldr	r5, [pc, #28]	; (8011330 <_read_r+0x20>)
 8011314:	4604      	mov	r4, r0
 8011316:	4608      	mov	r0, r1
 8011318:	4611      	mov	r1, r2
 801131a:	2200      	movs	r2, #0
 801131c:	602a      	str	r2, [r5, #0]
 801131e:	461a      	mov	r2, r3
 8011320:	f7f1 fc52 	bl	8002bc8 <_read>
 8011324:	1c43      	adds	r3, r0, #1
 8011326:	d102      	bne.n	801132e <_read_r+0x1e>
 8011328:	682b      	ldr	r3, [r5, #0]
 801132a:	b103      	cbz	r3, 801132e <_read_r+0x1e>
 801132c:	6023      	str	r3, [r4, #0]
 801132e:	bd38      	pop	{r3, r4, r5, pc}
 8011330:	200059c4 	.word	0x200059c4
 8011334:	00000000 	.word	0x00000000

08011338 <nan>:
 8011338:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011340 <nan+0x8>
 801133c:	4770      	bx	lr
 801133e:	bf00      	nop
 8011340:	00000000 	.word	0x00000000
 8011344:	7ff80000 	.word	0x7ff80000

08011348 <__sccl>:
 8011348:	b570      	push	{r4, r5, r6, lr}
 801134a:	780b      	ldrb	r3, [r1, #0]
 801134c:	4604      	mov	r4, r0
 801134e:	2b5e      	cmp	r3, #94	; 0x5e
 8011350:	bf0b      	itete	eq
 8011352:	784b      	ldrbeq	r3, [r1, #1]
 8011354:	1c48      	addne	r0, r1, #1
 8011356:	1c88      	addeq	r0, r1, #2
 8011358:	2200      	movne	r2, #0
 801135a:	bf08      	it	eq
 801135c:	2201      	moveq	r2, #1
 801135e:	1e61      	subs	r1, r4, #1
 8011360:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8011364:	f801 2f01 	strb.w	r2, [r1, #1]!
 8011368:	42a9      	cmp	r1, r5
 801136a:	d1fb      	bne.n	8011364 <__sccl+0x1c>
 801136c:	b90b      	cbnz	r3, 8011372 <__sccl+0x2a>
 801136e:	3801      	subs	r0, #1
 8011370:	bd70      	pop	{r4, r5, r6, pc}
 8011372:	f082 0101 	eor.w	r1, r2, #1
 8011376:	54e1      	strb	r1, [r4, r3]
 8011378:	1c42      	adds	r2, r0, #1
 801137a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801137e:	2d2d      	cmp	r5, #45	; 0x2d
 8011380:	f102 36ff 	add.w	r6, r2, #4294967295
 8011384:	4610      	mov	r0, r2
 8011386:	d006      	beq.n	8011396 <__sccl+0x4e>
 8011388:	2d5d      	cmp	r5, #93	; 0x5d
 801138a:	d0f1      	beq.n	8011370 <__sccl+0x28>
 801138c:	b90d      	cbnz	r5, 8011392 <__sccl+0x4a>
 801138e:	4630      	mov	r0, r6
 8011390:	e7ee      	b.n	8011370 <__sccl+0x28>
 8011392:	462b      	mov	r3, r5
 8011394:	e7ef      	b.n	8011376 <__sccl+0x2e>
 8011396:	7816      	ldrb	r6, [r2, #0]
 8011398:	2e5d      	cmp	r6, #93	; 0x5d
 801139a:	d0fa      	beq.n	8011392 <__sccl+0x4a>
 801139c:	42b3      	cmp	r3, r6
 801139e:	dcf8      	bgt.n	8011392 <__sccl+0x4a>
 80113a0:	4618      	mov	r0, r3
 80113a2:	3001      	adds	r0, #1
 80113a4:	4286      	cmp	r6, r0
 80113a6:	5421      	strb	r1, [r4, r0]
 80113a8:	dcfb      	bgt.n	80113a2 <__sccl+0x5a>
 80113aa:	43d8      	mvns	r0, r3
 80113ac:	4430      	add	r0, r6
 80113ae:	1c5d      	adds	r5, r3, #1
 80113b0:	42b3      	cmp	r3, r6
 80113b2:	bfa8      	it	ge
 80113b4:	2000      	movge	r0, #0
 80113b6:	182b      	adds	r3, r5, r0
 80113b8:	3202      	adds	r2, #2
 80113ba:	e7de      	b.n	801137a <__sccl+0x32>

080113bc <_strtoul_l.isra.0>:
 80113bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80113c0:	4e3b      	ldr	r6, [pc, #236]	; (80114b0 <_strtoul_l.isra.0+0xf4>)
 80113c2:	4686      	mov	lr, r0
 80113c4:	468c      	mov	ip, r1
 80113c6:	4660      	mov	r0, ip
 80113c8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80113cc:	5da5      	ldrb	r5, [r4, r6]
 80113ce:	f015 0508 	ands.w	r5, r5, #8
 80113d2:	d1f8      	bne.n	80113c6 <_strtoul_l.isra.0+0xa>
 80113d4:	2c2d      	cmp	r4, #45	; 0x2d
 80113d6:	d134      	bne.n	8011442 <_strtoul_l.isra.0+0x86>
 80113d8:	f89c 4000 	ldrb.w	r4, [ip]
 80113dc:	f04f 0801 	mov.w	r8, #1
 80113e0:	f100 0c02 	add.w	ip, r0, #2
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d05e      	beq.n	80114a6 <_strtoul_l.isra.0+0xea>
 80113e8:	2b10      	cmp	r3, #16
 80113ea:	d10c      	bne.n	8011406 <_strtoul_l.isra.0+0x4a>
 80113ec:	2c30      	cmp	r4, #48	; 0x30
 80113ee:	d10a      	bne.n	8011406 <_strtoul_l.isra.0+0x4a>
 80113f0:	f89c 0000 	ldrb.w	r0, [ip]
 80113f4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80113f8:	2858      	cmp	r0, #88	; 0x58
 80113fa:	d14f      	bne.n	801149c <_strtoul_l.isra.0+0xe0>
 80113fc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8011400:	2310      	movs	r3, #16
 8011402:	f10c 0c02 	add.w	ip, ip, #2
 8011406:	f04f 37ff 	mov.w	r7, #4294967295
 801140a:	2500      	movs	r5, #0
 801140c:	fbb7 f7f3 	udiv	r7, r7, r3
 8011410:	fb03 f907 	mul.w	r9, r3, r7
 8011414:	ea6f 0909 	mvn.w	r9, r9
 8011418:	4628      	mov	r0, r5
 801141a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801141e:	2e09      	cmp	r6, #9
 8011420:	d818      	bhi.n	8011454 <_strtoul_l.isra.0+0x98>
 8011422:	4634      	mov	r4, r6
 8011424:	42a3      	cmp	r3, r4
 8011426:	dd24      	ble.n	8011472 <_strtoul_l.isra.0+0xb6>
 8011428:	2d00      	cmp	r5, #0
 801142a:	db1f      	blt.n	801146c <_strtoul_l.isra.0+0xb0>
 801142c:	4287      	cmp	r7, r0
 801142e:	d31d      	bcc.n	801146c <_strtoul_l.isra.0+0xb0>
 8011430:	d101      	bne.n	8011436 <_strtoul_l.isra.0+0x7a>
 8011432:	45a1      	cmp	r9, r4
 8011434:	db1a      	blt.n	801146c <_strtoul_l.isra.0+0xb0>
 8011436:	fb00 4003 	mla	r0, r0, r3, r4
 801143a:	2501      	movs	r5, #1
 801143c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8011440:	e7eb      	b.n	801141a <_strtoul_l.isra.0+0x5e>
 8011442:	2c2b      	cmp	r4, #43	; 0x2b
 8011444:	bf08      	it	eq
 8011446:	f89c 4000 	ldrbeq.w	r4, [ip]
 801144a:	46a8      	mov	r8, r5
 801144c:	bf08      	it	eq
 801144e:	f100 0c02 	addeq.w	ip, r0, #2
 8011452:	e7c7      	b.n	80113e4 <_strtoul_l.isra.0+0x28>
 8011454:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8011458:	2e19      	cmp	r6, #25
 801145a:	d801      	bhi.n	8011460 <_strtoul_l.isra.0+0xa4>
 801145c:	3c37      	subs	r4, #55	; 0x37
 801145e:	e7e1      	b.n	8011424 <_strtoul_l.isra.0+0x68>
 8011460:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8011464:	2e19      	cmp	r6, #25
 8011466:	d804      	bhi.n	8011472 <_strtoul_l.isra.0+0xb6>
 8011468:	3c57      	subs	r4, #87	; 0x57
 801146a:	e7db      	b.n	8011424 <_strtoul_l.isra.0+0x68>
 801146c:	f04f 35ff 	mov.w	r5, #4294967295
 8011470:	e7e4      	b.n	801143c <_strtoul_l.isra.0+0x80>
 8011472:	2d00      	cmp	r5, #0
 8011474:	da07      	bge.n	8011486 <_strtoul_l.isra.0+0xca>
 8011476:	2322      	movs	r3, #34	; 0x22
 8011478:	f8ce 3000 	str.w	r3, [lr]
 801147c:	f04f 30ff 	mov.w	r0, #4294967295
 8011480:	b942      	cbnz	r2, 8011494 <_strtoul_l.isra.0+0xd8>
 8011482:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011486:	f1b8 0f00 	cmp.w	r8, #0
 801148a:	d000      	beq.n	801148e <_strtoul_l.isra.0+0xd2>
 801148c:	4240      	negs	r0, r0
 801148e:	2a00      	cmp	r2, #0
 8011490:	d0f7      	beq.n	8011482 <_strtoul_l.isra.0+0xc6>
 8011492:	b10d      	cbz	r5, 8011498 <_strtoul_l.isra.0+0xdc>
 8011494:	f10c 31ff 	add.w	r1, ip, #4294967295
 8011498:	6011      	str	r1, [r2, #0]
 801149a:	e7f2      	b.n	8011482 <_strtoul_l.isra.0+0xc6>
 801149c:	2430      	movs	r4, #48	; 0x30
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d1b1      	bne.n	8011406 <_strtoul_l.isra.0+0x4a>
 80114a2:	2308      	movs	r3, #8
 80114a4:	e7af      	b.n	8011406 <_strtoul_l.isra.0+0x4a>
 80114a6:	2c30      	cmp	r4, #48	; 0x30
 80114a8:	d0a2      	beq.n	80113f0 <_strtoul_l.isra.0+0x34>
 80114aa:	230a      	movs	r3, #10
 80114ac:	e7ab      	b.n	8011406 <_strtoul_l.isra.0+0x4a>
 80114ae:	bf00      	nop
 80114b0:	080138c1 	.word	0x080138c1

080114b4 <_strtoul_r>:
 80114b4:	f7ff bf82 	b.w	80113bc <_strtoul_l.isra.0>

080114b8 <__submore>:
 80114b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114bc:	460c      	mov	r4, r1
 80114be:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80114c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80114c4:	4299      	cmp	r1, r3
 80114c6:	d11d      	bne.n	8011504 <__submore+0x4c>
 80114c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80114cc:	f7fb fd5e 	bl	800cf8c <_malloc_r>
 80114d0:	b918      	cbnz	r0, 80114da <__submore+0x22>
 80114d2:	f04f 30ff 	mov.w	r0, #4294967295
 80114d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80114de:	63a3      	str	r3, [r4, #56]	; 0x38
 80114e0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80114e4:	6360      	str	r0, [r4, #52]	; 0x34
 80114e6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80114ea:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80114ee:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80114f2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80114f6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80114fa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80114fe:	6020      	str	r0, [r4, #0]
 8011500:	2000      	movs	r0, #0
 8011502:	e7e8      	b.n	80114d6 <__submore+0x1e>
 8011504:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8011506:	0077      	lsls	r7, r6, #1
 8011508:	463a      	mov	r2, r7
 801150a:	f000 fa21 	bl	8011950 <_realloc_r>
 801150e:	4605      	mov	r5, r0
 8011510:	2800      	cmp	r0, #0
 8011512:	d0de      	beq.n	80114d2 <__submore+0x1a>
 8011514:	eb00 0806 	add.w	r8, r0, r6
 8011518:	4601      	mov	r1, r0
 801151a:	4632      	mov	r2, r6
 801151c:	4640      	mov	r0, r8
 801151e:	f7fb fccf 	bl	800cec0 <memcpy>
 8011522:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8011526:	f8c4 8000 	str.w	r8, [r4]
 801152a:	e7e9      	b.n	8011500 <__submore+0x48>

0801152c <__ascii_wctomb>:
 801152c:	b149      	cbz	r1, 8011542 <__ascii_wctomb+0x16>
 801152e:	2aff      	cmp	r2, #255	; 0xff
 8011530:	bf85      	ittet	hi
 8011532:	238a      	movhi	r3, #138	; 0x8a
 8011534:	6003      	strhi	r3, [r0, #0]
 8011536:	700a      	strbls	r2, [r1, #0]
 8011538:	f04f 30ff 	movhi.w	r0, #4294967295
 801153c:	bf98      	it	ls
 801153e:	2001      	movls	r0, #1
 8011540:	4770      	bx	lr
 8011542:	4608      	mov	r0, r1
 8011544:	4770      	bx	lr
	...

08011548 <__assert_func>:
 8011548:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801154a:	4614      	mov	r4, r2
 801154c:	461a      	mov	r2, r3
 801154e:	4b09      	ldr	r3, [pc, #36]	; (8011574 <__assert_func+0x2c>)
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	4605      	mov	r5, r0
 8011554:	68d8      	ldr	r0, [r3, #12]
 8011556:	b14c      	cbz	r4, 801156c <__assert_func+0x24>
 8011558:	4b07      	ldr	r3, [pc, #28]	; (8011578 <__assert_func+0x30>)
 801155a:	9100      	str	r1, [sp, #0]
 801155c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011560:	4906      	ldr	r1, [pc, #24]	; (801157c <__assert_func+0x34>)
 8011562:	462b      	mov	r3, r5
 8011564:	f000 f9a6 	bl	80118b4 <fiprintf>
 8011568:	f000 fc32 	bl	8011dd0 <abort>
 801156c:	4b04      	ldr	r3, [pc, #16]	; (8011580 <__assert_func+0x38>)
 801156e:	461c      	mov	r4, r3
 8011570:	e7f3      	b.n	801155a <__assert_func+0x12>
 8011572:	bf00      	nop
 8011574:	20000038 	.word	0x20000038
 8011578:	08013c60 	.word	0x08013c60
 801157c:	08013c6d 	.word	0x08013c6d
 8011580:	08013c9b 	.word	0x08013c9b

08011584 <__sflush_r>:
 8011584:	898a      	ldrh	r2, [r1, #12]
 8011586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801158a:	4605      	mov	r5, r0
 801158c:	0710      	lsls	r0, r2, #28
 801158e:	460c      	mov	r4, r1
 8011590:	d458      	bmi.n	8011644 <__sflush_r+0xc0>
 8011592:	684b      	ldr	r3, [r1, #4]
 8011594:	2b00      	cmp	r3, #0
 8011596:	dc05      	bgt.n	80115a4 <__sflush_r+0x20>
 8011598:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801159a:	2b00      	cmp	r3, #0
 801159c:	dc02      	bgt.n	80115a4 <__sflush_r+0x20>
 801159e:	2000      	movs	r0, #0
 80115a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80115a6:	2e00      	cmp	r6, #0
 80115a8:	d0f9      	beq.n	801159e <__sflush_r+0x1a>
 80115aa:	2300      	movs	r3, #0
 80115ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80115b0:	682f      	ldr	r7, [r5, #0]
 80115b2:	602b      	str	r3, [r5, #0]
 80115b4:	d032      	beq.n	801161c <__sflush_r+0x98>
 80115b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80115b8:	89a3      	ldrh	r3, [r4, #12]
 80115ba:	075a      	lsls	r2, r3, #29
 80115bc:	d505      	bpl.n	80115ca <__sflush_r+0x46>
 80115be:	6863      	ldr	r3, [r4, #4]
 80115c0:	1ac0      	subs	r0, r0, r3
 80115c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80115c4:	b10b      	cbz	r3, 80115ca <__sflush_r+0x46>
 80115c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80115c8:	1ac0      	subs	r0, r0, r3
 80115ca:	2300      	movs	r3, #0
 80115cc:	4602      	mov	r2, r0
 80115ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80115d0:	6a21      	ldr	r1, [r4, #32]
 80115d2:	4628      	mov	r0, r5
 80115d4:	47b0      	blx	r6
 80115d6:	1c43      	adds	r3, r0, #1
 80115d8:	89a3      	ldrh	r3, [r4, #12]
 80115da:	d106      	bne.n	80115ea <__sflush_r+0x66>
 80115dc:	6829      	ldr	r1, [r5, #0]
 80115de:	291d      	cmp	r1, #29
 80115e0:	d82c      	bhi.n	801163c <__sflush_r+0xb8>
 80115e2:	4a2a      	ldr	r2, [pc, #168]	; (801168c <__sflush_r+0x108>)
 80115e4:	40ca      	lsrs	r2, r1
 80115e6:	07d6      	lsls	r6, r2, #31
 80115e8:	d528      	bpl.n	801163c <__sflush_r+0xb8>
 80115ea:	2200      	movs	r2, #0
 80115ec:	6062      	str	r2, [r4, #4]
 80115ee:	04d9      	lsls	r1, r3, #19
 80115f0:	6922      	ldr	r2, [r4, #16]
 80115f2:	6022      	str	r2, [r4, #0]
 80115f4:	d504      	bpl.n	8011600 <__sflush_r+0x7c>
 80115f6:	1c42      	adds	r2, r0, #1
 80115f8:	d101      	bne.n	80115fe <__sflush_r+0x7a>
 80115fa:	682b      	ldr	r3, [r5, #0]
 80115fc:	b903      	cbnz	r3, 8011600 <__sflush_r+0x7c>
 80115fe:	6560      	str	r0, [r4, #84]	; 0x54
 8011600:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011602:	602f      	str	r7, [r5, #0]
 8011604:	2900      	cmp	r1, #0
 8011606:	d0ca      	beq.n	801159e <__sflush_r+0x1a>
 8011608:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801160c:	4299      	cmp	r1, r3
 801160e:	d002      	beq.n	8011616 <__sflush_r+0x92>
 8011610:	4628      	mov	r0, r5
 8011612:	f7fb fc6b 	bl	800ceec <_free_r>
 8011616:	2000      	movs	r0, #0
 8011618:	6360      	str	r0, [r4, #52]	; 0x34
 801161a:	e7c1      	b.n	80115a0 <__sflush_r+0x1c>
 801161c:	6a21      	ldr	r1, [r4, #32]
 801161e:	2301      	movs	r3, #1
 8011620:	4628      	mov	r0, r5
 8011622:	47b0      	blx	r6
 8011624:	1c41      	adds	r1, r0, #1
 8011626:	d1c7      	bne.n	80115b8 <__sflush_r+0x34>
 8011628:	682b      	ldr	r3, [r5, #0]
 801162a:	2b00      	cmp	r3, #0
 801162c:	d0c4      	beq.n	80115b8 <__sflush_r+0x34>
 801162e:	2b1d      	cmp	r3, #29
 8011630:	d001      	beq.n	8011636 <__sflush_r+0xb2>
 8011632:	2b16      	cmp	r3, #22
 8011634:	d101      	bne.n	801163a <__sflush_r+0xb6>
 8011636:	602f      	str	r7, [r5, #0]
 8011638:	e7b1      	b.n	801159e <__sflush_r+0x1a>
 801163a:	89a3      	ldrh	r3, [r4, #12]
 801163c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011640:	81a3      	strh	r3, [r4, #12]
 8011642:	e7ad      	b.n	80115a0 <__sflush_r+0x1c>
 8011644:	690f      	ldr	r7, [r1, #16]
 8011646:	2f00      	cmp	r7, #0
 8011648:	d0a9      	beq.n	801159e <__sflush_r+0x1a>
 801164a:	0793      	lsls	r3, r2, #30
 801164c:	680e      	ldr	r6, [r1, #0]
 801164e:	bf08      	it	eq
 8011650:	694b      	ldreq	r3, [r1, #20]
 8011652:	600f      	str	r7, [r1, #0]
 8011654:	bf18      	it	ne
 8011656:	2300      	movne	r3, #0
 8011658:	eba6 0807 	sub.w	r8, r6, r7
 801165c:	608b      	str	r3, [r1, #8]
 801165e:	f1b8 0f00 	cmp.w	r8, #0
 8011662:	dd9c      	ble.n	801159e <__sflush_r+0x1a>
 8011664:	6a21      	ldr	r1, [r4, #32]
 8011666:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011668:	4643      	mov	r3, r8
 801166a:	463a      	mov	r2, r7
 801166c:	4628      	mov	r0, r5
 801166e:	47b0      	blx	r6
 8011670:	2800      	cmp	r0, #0
 8011672:	dc06      	bgt.n	8011682 <__sflush_r+0xfe>
 8011674:	89a3      	ldrh	r3, [r4, #12]
 8011676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801167a:	81a3      	strh	r3, [r4, #12]
 801167c:	f04f 30ff 	mov.w	r0, #4294967295
 8011680:	e78e      	b.n	80115a0 <__sflush_r+0x1c>
 8011682:	4407      	add	r7, r0
 8011684:	eba8 0800 	sub.w	r8, r8, r0
 8011688:	e7e9      	b.n	801165e <__sflush_r+0xda>
 801168a:	bf00      	nop
 801168c:	20400001 	.word	0x20400001

08011690 <_fflush_r>:
 8011690:	b538      	push	{r3, r4, r5, lr}
 8011692:	690b      	ldr	r3, [r1, #16]
 8011694:	4605      	mov	r5, r0
 8011696:	460c      	mov	r4, r1
 8011698:	b913      	cbnz	r3, 80116a0 <_fflush_r+0x10>
 801169a:	2500      	movs	r5, #0
 801169c:	4628      	mov	r0, r5
 801169e:	bd38      	pop	{r3, r4, r5, pc}
 80116a0:	b118      	cbz	r0, 80116aa <_fflush_r+0x1a>
 80116a2:	6983      	ldr	r3, [r0, #24]
 80116a4:	b90b      	cbnz	r3, 80116aa <_fflush_r+0x1a>
 80116a6:	f000 f887 	bl	80117b8 <__sinit>
 80116aa:	4b14      	ldr	r3, [pc, #80]	; (80116fc <_fflush_r+0x6c>)
 80116ac:	429c      	cmp	r4, r3
 80116ae:	d11b      	bne.n	80116e8 <_fflush_r+0x58>
 80116b0:	686c      	ldr	r4, [r5, #4]
 80116b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d0ef      	beq.n	801169a <_fflush_r+0xa>
 80116ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80116bc:	07d0      	lsls	r0, r2, #31
 80116be:	d404      	bmi.n	80116ca <_fflush_r+0x3a>
 80116c0:	0599      	lsls	r1, r3, #22
 80116c2:	d402      	bmi.n	80116ca <_fflush_r+0x3a>
 80116c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80116c6:	f000 f927 	bl	8011918 <__retarget_lock_acquire_recursive>
 80116ca:	4628      	mov	r0, r5
 80116cc:	4621      	mov	r1, r4
 80116ce:	f7ff ff59 	bl	8011584 <__sflush_r>
 80116d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80116d4:	07da      	lsls	r2, r3, #31
 80116d6:	4605      	mov	r5, r0
 80116d8:	d4e0      	bmi.n	801169c <_fflush_r+0xc>
 80116da:	89a3      	ldrh	r3, [r4, #12]
 80116dc:	059b      	lsls	r3, r3, #22
 80116de:	d4dd      	bmi.n	801169c <_fflush_r+0xc>
 80116e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80116e2:	f000 f91a 	bl	801191a <__retarget_lock_release_recursive>
 80116e6:	e7d9      	b.n	801169c <_fflush_r+0xc>
 80116e8:	4b05      	ldr	r3, [pc, #20]	; (8011700 <_fflush_r+0x70>)
 80116ea:	429c      	cmp	r4, r3
 80116ec:	d101      	bne.n	80116f2 <_fflush_r+0x62>
 80116ee:	68ac      	ldr	r4, [r5, #8]
 80116f0:	e7df      	b.n	80116b2 <_fflush_r+0x22>
 80116f2:	4b04      	ldr	r3, [pc, #16]	; (8011704 <_fflush_r+0x74>)
 80116f4:	429c      	cmp	r4, r3
 80116f6:	bf08      	it	eq
 80116f8:	68ec      	ldreq	r4, [r5, #12]
 80116fa:	e7da      	b.n	80116b2 <_fflush_r+0x22>
 80116fc:	08013cbc 	.word	0x08013cbc
 8011700:	08013cdc 	.word	0x08013cdc
 8011704:	08013c9c 	.word	0x08013c9c

08011708 <std>:
 8011708:	2300      	movs	r3, #0
 801170a:	b510      	push	{r4, lr}
 801170c:	4604      	mov	r4, r0
 801170e:	e9c0 3300 	strd	r3, r3, [r0]
 8011712:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011716:	6083      	str	r3, [r0, #8]
 8011718:	8181      	strh	r1, [r0, #12]
 801171a:	6643      	str	r3, [r0, #100]	; 0x64
 801171c:	81c2      	strh	r2, [r0, #14]
 801171e:	6183      	str	r3, [r0, #24]
 8011720:	4619      	mov	r1, r3
 8011722:	2208      	movs	r2, #8
 8011724:	305c      	adds	r0, #92	; 0x5c
 8011726:	f7fb fbd9 	bl	800cedc <memset>
 801172a:	4b05      	ldr	r3, [pc, #20]	; (8011740 <std+0x38>)
 801172c:	6263      	str	r3, [r4, #36]	; 0x24
 801172e:	4b05      	ldr	r3, [pc, #20]	; (8011744 <std+0x3c>)
 8011730:	62a3      	str	r3, [r4, #40]	; 0x28
 8011732:	4b05      	ldr	r3, [pc, #20]	; (8011748 <std+0x40>)
 8011734:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011736:	4b05      	ldr	r3, [pc, #20]	; (801174c <std+0x44>)
 8011738:	6224      	str	r4, [r4, #32]
 801173a:	6323      	str	r3, [r4, #48]	; 0x30
 801173c:	bd10      	pop	{r4, pc}
 801173e:	bf00      	nop
 8011740:	0800ddf9 	.word	0x0800ddf9
 8011744:	0800de1f 	.word	0x0800de1f
 8011748:	0800de57 	.word	0x0800de57
 801174c:	0800de7b 	.word	0x0800de7b

08011750 <_cleanup_r>:
 8011750:	4901      	ldr	r1, [pc, #4]	; (8011758 <_cleanup_r+0x8>)
 8011752:	f000 b8c1 	b.w	80118d8 <_fwalk_reent>
 8011756:	bf00      	nop
 8011758:	08011691 	.word	0x08011691

0801175c <__sfmoreglue>:
 801175c:	b570      	push	{r4, r5, r6, lr}
 801175e:	1e4a      	subs	r2, r1, #1
 8011760:	2568      	movs	r5, #104	; 0x68
 8011762:	4355      	muls	r5, r2
 8011764:	460e      	mov	r6, r1
 8011766:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801176a:	f7fb fc0f 	bl	800cf8c <_malloc_r>
 801176e:	4604      	mov	r4, r0
 8011770:	b140      	cbz	r0, 8011784 <__sfmoreglue+0x28>
 8011772:	2100      	movs	r1, #0
 8011774:	e9c0 1600 	strd	r1, r6, [r0]
 8011778:	300c      	adds	r0, #12
 801177a:	60a0      	str	r0, [r4, #8]
 801177c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011780:	f7fb fbac 	bl	800cedc <memset>
 8011784:	4620      	mov	r0, r4
 8011786:	bd70      	pop	{r4, r5, r6, pc}

08011788 <__sfp_lock_acquire>:
 8011788:	4801      	ldr	r0, [pc, #4]	; (8011790 <__sfp_lock_acquire+0x8>)
 801178a:	f000 b8c5 	b.w	8011918 <__retarget_lock_acquire_recursive>
 801178e:	bf00      	nop
 8011790:	200059d0 	.word	0x200059d0

08011794 <__sfp_lock_release>:
 8011794:	4801      	ldr	r0, [pc, #4]	; (801179c <__sfp_lock_release+0x8>)
 8011796:	f000 b8c0 	b.w	801191a <__retarget_lock_release_recursive>
 801179a:	bf00      	nop
 801179c:	200059d0 	.word	0x200059d0

080117a0 <__sinit_lock_acquire>:
 80117a0:	4801      	ldr	r0, [pc, #4]	; (80117a8 <__sinit_lock_acquire+0x8>)
 80117a2:	f000 b8b9 	b.w	8011918 <__retarget_lock_acquire_recursive>
 80117a6:	bf00      	nop
 80117a8:	200059cb 	.word	0x200059cb

080117ac <__sinit_lock_release>:
 80117ac:	4801      	ldr	r0, [pc, #4]	; (80117b4 <__sinit_lock_release+0x8>)
 80117ae:	f000 b8b4 	b.w	801191a <__retarget_lock_release_recursive>
 80117b2:	bf00      	nop
 80117b4:	200059cb 	.word	0x200059cb

080117b8 <__sinit>:
 80117b8:	b510      	push	{r4, lr}
 80117ba:	4604      	mov	r4, r0
 80117bc:	f7ff fff0 	bl	80117a0 <__sinit_lock_acquire>
 80117c0:	69a3      	ldr	r3, [r4, #24]
 80117c2:	b11b      	cbz	r3, 80117cc <__sinit+0x14>
 80117c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117c8:	f7ff bff0 	b.w	80117ac <__sinit_lock_release>
 80117cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80117d0:	6523      	str	r3, [r4, #80]	; 0x50
 80117d2:	4b13      	ldr	r3, [pc, #76]	; (8011820 <__sinit+0x68>)
 80117d4:	4a13      	ldr	r2, [pc, #76]	; (8011824 <__sinit+0x6c>)
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80117da:	42a3      	cmp	r3, r4
 80117dc:	bf04      	itt	eq
 80117de:	2301      	moveq	r3, #1
 80117e0:	61a3      	streq	r3, [r4, #24]
 80117e2:	4620      	mov	r0, r4
 80117e4:	f000 f820 	bl	8011828 <__sfp>
 80117e8:	6060      	str	r0, [r4, #4]
 80117ea:	4620      	mov	r0, r4
 80117ec:	f000 f81c 	bl	8011828 <__sfp>
 80117f0:	60a0      	str	r0, [r4, #8]
 80117f2:	4620      	mov	r0, r4
 80117f4:	f000 f818 	bl	8011828 <__sfp>
 80117f8:	2200      	movs	r2, #0
 80117fa:	60e0      	str	r0, [r4, #12]
 80117fc:	2104      	movs	r1, #4
 80117fe:	6860      	ldr	r0, [r4, #4]
 8011800:	f7ff ff82 	bl	8011708 <std>
 8011804:	68a0      	ldr	r0, [r4, #8]
 8011806:	2201      	movs	r2, #1
 8011808:	2109      	movs	r1, #9
 801180a:	f7ff ff7d 	bl	8011708 <std>
 801180e:	68e0      	ldr	r0, [r4, #12]
 8011810:	2202      	movs	r2, #2
 8011812:	2112      	movs	r1, #18
 8011814:	f7ff ff78 	bl	8011708 <std>
 8011818:	2301      	movs	r3, #1
 801181a:	61a3      	str	r3, [r4, #24]
 801181c:	e7d2      	b.n	80117c4 <__sinit+0xc>
 801181e:	bf00      	nop
 8011820:	08013830 	.word	0x08013830
 8011824:	08011751 	.word	0x08011751

08011828 <__sfp>:
 8011828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801182a:	4607      	mov	r7, r0
 801182c:	f7ff ffac 	bl	8011788 <__sfp_lock_acquire>
 8011830:	4b1e      	ldr	r3, [pc, #120]	; (80118ac <__sfp+0x84>)
 8011832:	681e      	ldr	r6, [r3, #0]
 8011834:	69b3      	ldr	r3, [r6, #24]
 8011836:	b913      	cbnz	r3, 801183e <__sfp+0x16>
 8011838:	4630      	mov	r0, r6
 801183a:	f7ff ffbd 	bl	80117b8 <__sinit>
 801183e:	3648      	adds	r6, #72	; 0x48
 8011840:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011844:	3b01      	subs	r3, #1
 8011846:	d503      	bpl.n	8011850 <__sfp+0x28>
 8011848:	6833      	ldr	r3, [r6, #0]
 801184a:	b30b      	cbz	r3, 8011890 <__sfp+0x68>
 801184c:	6836      	ldr	r6, [r6, #0]
 801184e:	e7f7      	b.n	8011840 <__sfp+0x18>
 8011850:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011854:	b9d5      	cbnz	r5, 801188c <__sfp+0x64>
 8011856:	4b16      	ldr	r3, [pc, #88]	; (80118b0 <__sfp+0x88>)
 8011858:	60e3      	str	r3, [r4, #12]
 801185a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801185e:	6665      	str	r5, [r4, #100]	; 0x64
 8011860:	f000 f859 	bl	8011916 <__retarget_lock_init_recursive>
 8011864:	f7ff ff96 	bl	8011794 <__sfp_lock_release>
 8011868:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801186c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011870:	6025      	str	r5, [r4, #0]
 8011872:	61a5      	str	r5, [r4, #24]
 8011874:	2208      	movs	r2, #8
 8011876:	4629      	mov	r1, r5
 8011878:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801187c:	f7fb fb2e 	bl	800cedc <memset>
 8011880:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011884:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011888:	4620      	mov	r0, r4
 801188a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801188c:	3468      	adds	r4, #104	; 0x68
 801188e:	e7d9      	b.n	8011844 <__sfp+0x1c>
 8011890:	2104      	movs	r1, #4
 8011892:	4638      	mov	r0, r7
 8011894:	f7ff ff62 	bl	801175c <__sfmoreglue>
 8011898:	4604      	mov	r4, r0
 801189a:	6030      	str	r0, [r6, #0]
 801189c:	2800      	cmp	r0, #0
 801189e:	d1d5      	bne.n	801184c <__sfp+0x24>
 80118a0:	f7ff ff78 	bl	8011794 <__sfp_lock_release>
 80118a4:	230c      	movs	r3, #12
 80118a6:	603b      	str	r3, [r7, #0]
 80118a8:	e7ee      	b.n	8011888 <__sfp+0x60>
 80118aa:	bf00      	nop
 80118ac:	08013830 	.word	0x08013830
 80118b0:	ffff0001 	.word	0xffff0001

080118b4 <fiprintf>:
 80118b4:	b40e      	push	{r1, r2, r3}
 80118b6:	b503      	push	{r0, r1, lr}
 80118b8:	4601      	mov	r1, r0
 80118ba:	ab03      	add	r3, sp, #12
 80118bc:	4805      	ldr	r0, [pc, #20]	; (80118d4 <fiprintf+0x20>)
 80118be:	f853 2b04 	ldr.w	r2, [r3], #4
 80118c2:	6800      	ldr	r0, [r0, #0]
 80118c4:	9301      	str	r3, [sp, #4]
 80118c6:	f000 f893 	bl	80119f0 <_vfiprintf_r>
 80118ca:	b002      	add	sp, #8
 80118cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80118d0:	b003      	add	sp, #12
 80118d2:	4770      	bx	lr
 80118d4:	20000038 	.word	0x20000038

080118d8 <_fwalk_reent>:
 80118d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118dc:	4606      	mov	r6, r0
 80118de:	4688      	mov	r8, r1
 80118e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80118e4:	2700      	movs	r7, #0
 80118e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80118ea:	f1b9 0901 	subs.w	r9, r9, #1
 80118ee:	d505      	bpl.n	80118fc <_fwalk_reent+0x24>
 80118f0:	6824      	ldr	r4, [r4, #0]
 80118f2:	2c00      	cmp	r4, #0
 80118f4:	d1f7      	bne.n	80118e6 <_fwalk_reent+0xe>
 80118f6:	4638      	mov	r0, r7
 80118f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118fc:	89ab      	ldrh	r3, [r5, #12]
 80118fe:	2b01      	cmp	r3, #1
 8011900:	d907      	bls.n	8011912 <_fwalk_reent+0x3a>
 8011902:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011906:	3301      	adds	r3, #1
 8011908:	d003      	beq.n	8011912 <_fwalk_reent+0x3a>
 801190a:	4629      	mov	r1, r5
 801190c:	4630      	mov	r0, r6
 801190e:	47c0      	blx	r8
 8011910:	4307      	orrs	r7, r0
 8011912:	3568      	adds	r5, #104	; 0x68
 8011914:	e7e9      	b.n	80118ea <_fwalk_reent+0x12>

08011916 <__retarget_lock_init_recursive>:
 8011916:	4770      	bx	lr

08011918 <__retarget_lock_acquire_recursive>:
 8011918:	4770      	bx	lr

0801191a <__retarget_lock_release_recursive>:
 801191a:	4770      	bx	lr

0801191c <memmove>:
 801191c:	4288      	cmp	r0, r1
 801191e:	b510      	push	{r4, lr}
 8011920:	eb01 0402 	add.w	r4, r1, r2
 8011924:	d902      	bls.n	801192c <memmove+0x10>
 8011926:	4284      	cmp	r4, r0
 8011928:	4623      	mov	r3, r4
 801192a:	d807      	bhi.n	801193c <memmove+0x20>
 801192c:	1e43      	subs	r3, r0, #1
 801192e:	42a1      	cmp	r1, r4
 8011930:	d008      	beq.n	8011944 <memmove+0x28>
 8011932:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011936:	f803 2f01 	strb.w	r2, [r3, #1]!
 801193a:	e7f8      	b.n	801192e <memmove+0x12>
 801193c:	4402      	add	r2, r0
 801193e:	4601      	mov	r1, r0
 8011940:	428a      	cmp	r2, r1
 8011942:	d100      	bne.n	8011946 <memmove+0x2a>
 8011944:	bd10      	pop	{r4, pc}
 8011946:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801194a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801194e:	e7f7      	b.n	8011940 <memmove+0x24>

08011950 <_realloc_r>:
 8011950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011952:	4607      	mov	r7, r0
 8011954:	4614      	mov	r4, r2
 8011956:	460e      	mov	r6, r1
 8011958:	b921      	cbnz	r1, 8011964 <_realloc_r+0x14>
 801195a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801195e:	4611      	mov	r1, r2
 8011960:	f7fb bb14 	b.w	800cf8c <_malloc_r>
 8011964:	b922      	cbnz	r2, 8011970 <_realloc_r+0x20>
 8011966:	f7fb fac1 	bl	800ceec <_free_r>
 801196a:	4625      	mov	r5, r4
 801196c:	4628      	mov	r0, r5
 801196e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011970:	f000 fa9a 	bl	8011ea8 <_malloc_usable_size_r>
 8011974:	42a0      	cmp	r0, r4
 8011976:	d20f      	bcs.n	8011998 <_realloc_r+0x48>
 8011978:	4621      	mov	r1, r4
 801197a:	4638      	mov	r0, r7
 801197c:	f7fb fb06 	bl	800cf8c <_malloc_r>
 8011980:	4605      	mov	r5, r0
 8011982:	2800      	cmp	r0, #0
 8011984:	d0f2      	beq.n	801196c <_realloc_r+0x1c>
 8011986:	4631      	mov	r1, r6
 8011988:	4622      	mov	r2, r4
 801198a:	f7fb fa99 	bl	800cec0 <memcpy>
 801198e:	4631      	mov	r1, r6
 8011990:	4638      	mov	r0, r7
 8011992:	f7fb faab 	bl	800ceec <_free_r>
 8011996:	e7e9      	b.n	801196c <_realloc_r+0x1c>
 8011998:	4635      	mov	r5, r6
 801199a:	e7e7      	b.n	801196c <_realloc_r+0x1c>

0801199c <__sfputc_r>:
 801199c:	6893      	ldr	r3, [r2, #8]
 801199e:	3b01      	subs	r3, #1
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	b410      	push	{r4}
 80119a4:	6093      	str	r3, [r2, #8]
 80119a6:	da08      	bge.n	80119ba <__sfputc_r+0x1e>
 80119a8:	6994      	ldr	r4, [r2, #24]
 80119aa:	42a3      	cmp	r3, r4
 80119ac:	db01      	blt.n	80119b2 <__sfputc_r+0x16>
 80119ae:	290a      	cmp	r1, #10
 80119b0:	d103      	bne.n	80119ba <__sfputc_r+0x1e>
 80119b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119b6:	f000 b94b 	b.w	8011c50 <__swbuf_r>
 80119ba:	6813      	ldr	r3, [r2, #0]
 80119bc:	1c58      	adds	r0, r3, #1
 80119be:	6010      	str	r0, [r2, #0]
 80119c0:	7019      	strb	r1, [r3, #0]
 80119c2:	4608      	mov	r0, r1
 80119c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119c8:	4770      	bx	lr

080119ca <__sfputs_r>:
 80119ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119cc:	4606      	mov	r6, r0
 80119ce:	460f      	mov	r7, r1
 80119d0:	4614      	mov	r4, r2
 80119d2:	18d5      	adds	r5, r2, r3
 80119d4:	42ac      	cmp	r4, r5
 80119d6:	d101      	bne.n	80119dc <__sfputs_r+0x12>
 80119d8:	2000      	movs	r0, #0
 80119da:	e007      	b.n	80119ec <__sfputs_r+0x22>
 80119dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119e0:	463a      	mov	r2, r7
 80119e2:	4630      	mov	r0, r6
 80119e4:	f7ff ffda 	bl	801199c <__sfputc_r>
 80119e8:	1c43      	adds	r3, r0, #1
 80119ea:	d1f3      	bne.n	80119d4 <__sfputs_r+0xa>
 80119ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080119f0 <_vfiprintf_r>:
 80119f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119f4:	460d      	mov	r5, r1
 80119f6:	b09d      	sub	sp, #116	; 0x74
 80119f8:	4614      	mov	r4, r2
 80119fa:	4698      	mov	r8, r3
 80119fc:	4606      	mov	r6, r0
 80119fe:	b118      	cbz	r0, 8011a08 <_vfiprintf_r+0x18>
 8011a00:	6983      	ldr	r3, [r0, #24]
 8011a02:	b90b      	cbnz	r3, 8011a08 <_vfiprintf_r+0x18>
 8011a04:	f7ff fed8 	bl	80117b8 <__sinit>
 8011a08:	4b89      	ldr	r3, [pc, #548]	; (8011c30 <_vfiprintf_r+0x240>)
 8011a0a:	429d      	cmp	r5, r3
 8011a0c:	d11b      	bne.n	8011a46 <_vfiprintf_r+0x56>
 8011a0e:	6875      	ldr	r5, [r6, #4]
 8011a10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011a12:	07d9      	lsls	r1, r3, #31
 8011a14:	d405      	bmi.n	8011a22 <_vfiprintf_r+0x32>
 8011a16:	89ab      	ldrh	r3, [r5, #12]
 8011a18:	059a      	lsls	r2, r3, #22
 8011a1a:	d402      	bmi.n	8011a22 <_vfiprintf_r+0x32>
 8011a1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011a1e:	f7ff ff7b 	bl	8011918 <__retarget_lock_acquire_recursive>
 8011a22:	89ab      	ldrh	r3, [r5, #12]
 8011a24:	071b      	lsls	r3, r3, #28
 8011a26:	d501      	bpl.n	8011a2c <_vfiprintf_r+0x3c>
 8011a28:	692b      	ldr	r3, [r5, #16]
 8011a2a:	b9eb      	cbnz	r3, 8011a68 <_vfiprintf_r+0x78>
 8011a2c:	4629      	mov	r1, r5
 8011a2e:	4630      	mov	r0, r6
 8011a30:	f000 f960 	bl	8011cf4 <__swsetup_r>
 8011a34:	b1c0      	cbz	r0, 8011a68 <_vfiprintf_r+0x78>
 8011a36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011a38:	07dc      	lsls	r4, r3, #31
 8011a3a:	d50e      	bpl.n	8011a5a <_vfiprintf_r+0x6a>
 8011a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8011a40:	b01d      	add	sp, #116	; 0x74
 8011a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a46:	4b7b      	ldr	r3, [pc, #492]	; (8011c34 <_vfiprintf_r+0x244>)
 8011a48:	429d      	cmp	r5, r3
 8011a4a:	d101      	bne.n	8011a50 <_vfiprintf_r+0x60>
 8011a4c:	68b5      	ldr	r5, [r6, #8]
 8011a4e:	e7df      	b.n	8011a10 <_vfiprintf_r+0x20>
 8011a50:	4b79      	ldr	r3, [pc, #484]	; (8011c38 <_vfiprintf_r+0x248>)
 8011a52:	429d      	cmp	r5, r3
 8011a54:	bf08      	it	eq
 8011a56:	68f5      	ldreq	r5, [r6, #12]
 8011a58:	e7da      	b.n	8011a10 <_vfiprintf_r+0x20>
 8011a5a:	89ab      	ldrh	r3, [r5, #12]
 8011a5c:	0598      	lsls	r0, r3, #22
 8011a5e:	d4ed      	bmi.n	8011a3c <_vfiprintf_r+0x4c>
 8011a60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011a62:	f7ff ff5a 	bl	801191a <__retarget_lock_release_recursive>
 8011a66:	e7e9      	b.n	8011a3c <_vfiprintf_r+0x4c>
 8011a68:	2300      	movs	r3, #0
 8011a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8011a6c:	2320      	movs	r3, #32
 8011a6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011a72:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a76:	2330      	movs	r3, #48	; 0x30
 8011a78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011c3c <_vfiprintf_r+0x24c>
 8011a7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011a80:	f04f 0901 	mov.w	r9, #1
 8011a84:	4623      	mov	r3, r4
 8011a86:	469a      	mov	sl, r3
 8011a88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a8c:	b10a      	cbz	r2, 8011a92 <_vfiprintf_r+0xa2>
 8011a8e:	2a25      	cmp	r2, #37	; 0x25
 8011a90:	d1f9      	bne.n	8011a86 <_vfiprintf_r+0x96>
 8011a92:	ebba 0b04 	subs.w	fp, sl, r4
 8011a96:	d00b      	beq.n	8011ab0 <_vfiprintf_r+0xc0>
 8011a98:	465b      	mov	r3, fp
 8011a9a:	4622      	mov	r2, r4
 8011a9c:	4629      	mov	r1, r5
 8011a9e:	4630      	mov	r0, r6
 8011aa0:	f7ff ff93 	bl	80119ca <__sfputs_r>
 8011aa4:	3001      	adds	r0, #1
 8011aa6:	f000 80aa 	beq.w	8011bfe <_vfiprintf_r+0x20e>
 8011aaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011aac:	445a      	add	r2, fp
 8011aae:	9209      	str	r2, [sp, #36]	; 0x24
 8011ab0:	f89a 3000 	ldrb.w	r3, [sl]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	f000 80a2 	beq.w	8011bfe <_vfiprintf_r+0x20e>
 8011aba:	2300      	movs	r3, #0
 8011abc:	f04f 32ff 	mov.w	r2, #4294967295
 8011ac0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ac4:	f10a 0a01 	add.w	sl, sl, #1
 8011ac8:	9304      	str	r3, [sp, #16]
 8011aca:	9307      	str	r3, [sp, #28]
 8011acc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011ad0:	931a      	str	r3, [sp, #104]	; 0x68
 8011ad2:	4654      	mov	r4, sl
 8011ad4:	2205      	movs	r2, #5
 8011ad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ada:	4858      	ldr	r0, [pc, #352]	; (8011c3c <_vfiprintf_r+0x24c>)
 8011adc:	f7ee fb88 	bl	80001f0 <memchr>
 8011ae0:	9a04      	ldr	r2, [sp, #16]
 8011ae2:	b9d8      	cbnz	r0, 8011b1c <_vfiprintf_r+0x12c>
 8011ae4:	06d1      	lsls	r1, r2, #27
 8011ae6:	bf44      	itt	mi
 8011ae8:	2320      	movmi	r3, #32
 8011aea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011aee:	0713      	lsls	r3, r2, #28
 8011af0:	bf44      	itt	mi
 8011af2:	232b      	movmi	r3, #43	; 0x2b
 8011af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011af8:	f89a 3000 	ldrb.w	r3, [sl]
 8011afc:	2b2a      	cmp	r3, #42	; 0x2a
 8011afe:	d015      	beq.n	8011b2c <_vfiprintf_r+0x13c>
 8011b00:	9a07      	ldr	r2, [sp, #28]
 8011b02:	4654      	mov	r4, sl
 8011b04:	2000      	movs	r0, #0
 8011b06:	f04f 0c0a 	mov.w	ip, #10
 8011b0a:	4621      	mov	r1, r4
 8011b0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011b10:	3b30      	subs	r3, #48	; 0x30
 8011b12:	2b09      	cmp	r3, #9
 8011b14:	d94e      	bls.n	8011bb4 <_vfiprintf_r+0x1c4>
 8011b16:	b1b0      	cbz	r0, 8011b46 <_vfiprintf_r+0x156>
 8011b18:	9207      	str	r2, [sp, #28]
 8011b1a:	e014      	b.n	8011b46 <_vfiprintf_r+0x156>
 8011b1c:	eba0 0308 	sub.w	r3, r0, r8
 8011b20:	fa09 f303 	lsl.w	r3, r9, r3
 8011b24:	4313      	orrs	r3, r2
 8011b26:	9304      	str	r3, [sp, #16]
 8011b28:	46a2      	mov	sl, r4
 8011b2a:	e7d2      	b.n	8011ad2 <_vfiprintf_r+0xe2>
 8011b2c:	9b03      	ldr	r3, [sp, #12]
 8011b2e:	1d19      	adds	r1, r3, #4
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	9103      	str	r1, [sp, #12]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	bfbb      	ittet	lt
 8011b38:	425b      	neglt	r3, r3
 8011b3a:	f042 0202 	orrlt.w	r2, r2, #2
 8011b3e:	9307      	strge	r3, [sp, #28]
 8011b40:	9307      	strlt	r3, [sp, #28]
 8011b42:	bfb8      	it	lt
 8011b44:	9204      	strlt	r2, [sp, #16]
 8011b46:	7823      	ldrb	r3, [r4, #0]
 8011b48:	2b2e      	cmp	r3, #46	; 0x2e
 8011b4a:	d10c      	bne.n	8011b66 <_vfiprintf_r+0x176>
 8011b4c:	7863      	ldrb	r3, [r4, #1]
 8011b4e:	2b2a      	cmp	r3, #42	; 0x2a
 8011b50:	d135      	bne.n	8011bbe <_vfiprintf_r+0x1ce>
 8011b52:	9b03      	ldr	r3, [sp, #12]
 8011b54:	1d1a      	adds	r2, r3, #4
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	9203      	str	r2, [sp, #12]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	bfb8      	it	lt
 8011b5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8011b62:	3402      	adds	r4, #2
 8011b64:	9305      	str	r3, [sp, #20]
 8011b66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011c4c <_vfiprintf_r+0x25c>
 8011b6a:	7821      	ldrb	r1, [r4, #0]
 8011b6c:	2203      	movs	r2, #3
 8011b6e:	4650      	mov	r0, sl
 8011b70:	f7ee fb3e 	bl	80001f0 <memchr>
 8011b74:	b140      	cbz	r0, 8011b88 <_vfiprintf_r+0x198>
 8011b76:	2340      	movs	r3, #64	; 0x40
 8011b78:	eba0 000a 	sub.w	r0, r0, sl
 8011b7c:	fa03 f000 	lsl.w	r0, r3, r0
 8011b80:	9b04      	ldr	r3, [sp, #16]
 8011b82:	4303      	orrs	r3, r0
 8011b84:	3401      	adds	r4, #1
 8011b86:	9304      	str	r3, [sp, #16]
 8011b88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b8c:	482c      	ldr	r0, [pc, #176]	; (8011c40 <_vfiprintf_r+0x250>)
 8011b8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011b92:	2206      	movs	r2, #6
 8011b94:	f7ee fb2c 	bl	80001f0 <memchr>
 8011b98:	2800      	cmp	r0, #0
 8011b9a:	d03f      	beq.n	8011c1c <_vfiprintf_r+0x22c>
 8011b9c:	4b29      	ldr	r3, [pc, #164]	; (8011c44 <_vfiprintf_r+0x254>)
 8011b9e:	bb1b      	cbnz	r3, 8011be8 <_vfiprintf_r+0x1f8>
 8011ba0:	9b03      	ldr	r3, [sp, #12]
 8011ba2:	3307      	adds	r3, #7
 8011ba4:	f023 0307 	bic.w	r3, r3, #7
 8011ba8:	3308      	adds	r3, #8
 8011baa:	9303      	str	r3, [sp, #12]
 8011bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bae:	443b      	add	r3, r7
 8011bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8011bb2:	e767      	b.n	8011a84 <_vfiprintf_r+0x94>
 8011bb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8011bb8:	460c      	mov	r4, r1
 8011bba:	2001      	movs	r0, #1
 8011bbc:	e7a5      	b.n	8011b0a <_vfiprintf_r+0x11a>
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	3401      	adds	r4, #1
 8011bc2:	9305      	str	r3, [sp, #20]
 8011bc4:	4619      	mov	r1, r3
 8011bc6:	f04f 0c0a 	mov.w	ip, #10
 8011bca:	4620      	mov	r0, r4
 8011bcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011bd0:	3a30      	subs	r2, #48	; 0x30
 8011bd2:	2a09      	cmp	r2, #9
 8011bd4:	d903      	bls.n	8011bde <_vfiprintf_r+0x1ee>
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d0c5      	beq.n	8011b66 <_vfiprintf_r+0x176>
 8011bda:	9105      	str	r1, [sp, #20]
 8011bdc:	e7c3      	b.n	8011b66 <_vfiprintf_r+0x176>
 8011bde:	fb0c 2101 	mla	r1, ip, r1, r2
 8011be2:	4604      	mov	r4, r0
 8011be4:	2301      	movs	r3, #1
 8011be6:	e7f0      	b.n	8011bca <_vfiprintf_r+0x1da>
 8011be8:	ab03      	add	r3, sp, #12
 8011bea:	9300      	str	r3, [sp, #0]
 8011bec:	462a      	mov	r2, r5
 8011bee:	4b16      	ldr	r3, [pc, #88]	; (8011c48 <_vfiprintf_r+0x258>)
 8011bf0:	a904      	add	r1, sp, #16
 8011bf2:	4630      	mov	r0, r6
 8011bf4:	f7fb fac4 	bl	800d180 <_printf_float>
 8011bf8:	4607      	mov	r7, r0
 8011bfa:	1c78      	adds	r0, r7, #1
 8011bfc:	d1d6      	bne.n	8011bac <_vfiprintf_r+0x1bc>
 8011bfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011c00:	07d9      	lsls	r1, r3, #31
 8011c02:	d405      	bmi.n	8011c10 <_vfiprintf_r+0x220>
 8011c04:	89ab      	ldrh	r3, [r5, #12]
 8011c06:	059a      	lsls	r2, r3, #22
 8011c08:	d402      	bmi.n	8011c10 <_vfiprintf_r+0x220>
 8011c0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011c0c:	f7ff fe85 	bl	801191a <__retarget_lock_release_recursive>
 8011c10:	89ab      	ldrh	r3, [r5, #12]
 8011c12:	065b      	lsls	r3, r3, #25
 8011c14:	f53f af12 	bmi.w	8011a3c <_vfiprintf_r+0x4c>
 8011c18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011c1a:	e711      	b.n	8011a40 <_vfiprintf_r+0x50>
 8011c1c:	ab03      	add	r3, sp, #12
 8011c1e:	9300      	str	r3, [sp, #0]
 8011c20:	462a      	mov	r2, r5
 8011c22:	4b09      	ldr	r3, [pc, #36]	; (8011c48 <_vfiprintf_r+0x258>)
 8011c24:	a904      	add	r1, sp, #16
 8011c26:	4630      	mov	r0, r6
 8011c28:	f7fb fd4e 	bl	800d6c8 <_printf_i>
 8011c2c:	e7e4      	b.n	8011bf8 <_vfiprintf_r+0x208>
 8011c2e:	bf00      	nop
 8011c30:	08013cbc 	.word	0x08013cbc
 8011c34:	08013cdc 	.word	0x08013cdc
 8011c38:	08013c9c 	.word	0x08013c9c
 8011c3c:	08013c34 	.word	0x08013c34
 8011c40:	08013c3e 	.word	0x08013c3e
 8011c44:	0800d181 	.word	0x0800d181
 8011c48:	080119cb 	.word	0x080119cb
 8011c4c:	08013c3a 	.word	0x08013c3a

08011c50 <__swbuf_r>:
 8011c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c52:	460e      	mov	r6, r1
 8011c54:	4614      	mov	r4, r2
 8011c56:	4605      	mov	r5, r0
 8011c58:	b118      	cbz	r0, 8011c62 <__swbuf_r+0x12>
 8011c5a:	6983      	ldr	r3, [r0, #24]
 8011c5c:	b90b      	cbnz	r3, 8011c62 <__swbuf_r+0x12>
 8011c5e:	f7ff fdab 	bl	80117b8 <__sinit>
 8011c62:	4b21      	ldr	r3, [pc, #132]	; (8011ce8 <__swbuf_r+0x98>)
 8011c64:	429c      	cmp	r4, r3
 8011c66:	d12b      	bne.n	8011cc0 <__swbuf_r+0x70>
 8011c68:	686c      	ldr	r4, [r5, #4]
 8011c6a:	69a3      	ldr	r3, [r4, #24]
 8011c6c:	60a3      	str	r3, [r4, #8]
 8011c6e:	89a3      	ldrh	r3, [r4, #12]
 8011c70:	071a      	lsls	r2, r3, #28
 8011c72:	d52f      	bpl.n	8011cd4 <__swbuf_r+0x84>
 8011c74:	6923      	ldr	r3, [r4, #16]
 8011c76:	b36b      	cbz	r3, 8011cd4 <__swbuf_r+0x84>
 8011c78:	6923      	ldr	r3, [r4, #16]
 8011c7a:	6820      	ldr	r0, [r4, #0]
 8011c7c:	1ac0      	subs	r0, r0, r3
 8011c7e:	6963      	ldr	r3, [r4, #20]
 8011c80:	b2f6      	uxtb	r6, r6
 8011c82:	4283      	cmp	r3, r0
 8011c84:	4637      	mov	r7, r6
 8011c86:	dc04      	bgt.n	8011c92 <__swbuf_r+0x42>
 8011c88:	4621      	mov	r1, r4
 8011c8a:	4628      	mov	r0, r5
 8011c8c:	f7ff fd00 	bl	8011690 <_fflush_r>
 8011c90:	bb30      	cbnz	r0, 8011ce0 <__swbuf_r+0x90>
 8011c92:	68a3      	ldr	r3, [r4, #8]
 8011c94:	3b01      	subs	r3, #1
 8011c96:	60a3      	str	r3, [r4, #8]
 8011c98:	6823      	ldr	r3, [r4, #0]
 8011c9a:	1c5a      	adds	r2, r3, #1
 8011c9c:	6022      	str	r2, [r4, #0]
 8011c9e:	701e      	strb	r6, [r3, #0]
 8011ca0:	6963      	ldr	r3, [r4, #20]
 8011ca2:	3001      	adds	r0, #1
 8011ca4:	4283      	cmp	r3, r0
 8011ca6:	d004      	beq.n	8011cb2 <__swbuf_r+0x62>
 8011ca8:	89a3      	ldrh	r3, [r4, #12]
 8011caa:	07db      	lsls	r3, r3, #31
 8011cac:	d506      	bpl.n	8011cbc <__swbuf_r+0x6c>
 8011cae:	2e0a      	cmp	r6, #10
 8011cb0:	d104      	bne.n	8011cbc <__swbuf_r+0x6c>
 8011cb2:	4621      	mov	r1, r4
 8011cb4:	4628      	mov	r0, r5
 8011cb6:	f7ff fceb 	bl	8011690 <_fflush_r>
 8011cba:	b988      	cbnz	r0, 8011ce0 <__swbuf_r+0x90>
 8011cbc:	4638      	mov	r0, r7
 8011cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cc0:	4b0a      	ldr	r3, [pc, #40]	; (8011cec <__swbuf_r+0x9c>)
 8011cc2:	429c      	cmp	r4, r3
 8011cc4:	d101      	bne.n	8011cca <__swbuf_r+0x7a>
 8011cc6:	68ac      	ldr	r4, [r5, #8]
 8011cc8:	e7cf      	b.n	8011c6a <__swbuf_r+0x1a>
 8011cca:	4b09      	ldr	r3, [pc, #36]	; (8011cf0 <__swbuf_r+0xa0>)
 8011ccc:	429c      	cmp	r4, r3
 8011cce:	bf08      	it	eq
 8011cd0:	68ec      	ldreq	r4, [r5, #12]
 8011cd2:	e7ca      	b.n	8011c6a <__swbuf_r+0x1a>
 8011cd4:	4621      	mov	r1, r4
 8011cd6:	4628      	mov	r0, r5
 8011cd8:	f000 f80c 	bl	8011cf4 <__swsetup_r>
 8011cdc:	2800      	cmp	r0, #0
 8011cde:	d0cb      	beq.n	8011c78 <__swbuf_r+0x28>
 8011ce0:	f04f 37ff 	mov.w	r7, #4294967295
 8011ce4:	e7ea      	b.n	8011cbc <__swbuf_r+0x6c>
 8011ce6:	bf00      	nop
 8011ce8:	08013cbc 	.word	0x08013cbc
 8011cec:	08013cdc 	.word	0x08013cdc
 8011cf0:	08013c9c 	.word	0x08013c9c

08011cf4 <__swsetup_r>:
 8011cf4:	4b32      	ldr	r3, [pc, #200]	; (8011dc0 <__swsetup_r+0xcc>)
 8011cf6:	b570      	push	{r4, r5, r6, lr}
 8011cf8:	681d      	ldr	r5, [r3, #0]
 8011cfa:	4606      	mov	r6, r0
 8011cfc:	460c      	mov	r4, r1
 8011cfe:	b125      	cbz	r5, 8011d0a <__swsetup_r+0x16>
 8011d00:	69ab      	ldr	r3, [r5, #24]
 8011d02:	b913      	cbnz	r3, 8011d0a <__swsetup_r+0x16>
 8011d04:	4628      	mov	r0, r5
 8011d06:	f7ff fd57 	bl	80117b8 <__sinit>
 8011d0a:	4b2e      	ldr	r3, [pc, #184]	; (8011dc4 <__swsetup_r+0xd0>)
 8011d0c:	429c      	cmp	r4, r3
 8011d0e:	d10f      	bne.n	8011d30 <__swsetup_r+0x3c>
 8011d10:	686c      	ldr	r4, [r5, #4]
 8011d12:	89a3      	ldrh	r3, [r4, #12]
 8011d14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011d18:	0719      	lsls	r1, r3, #28
 8011d1a:	d42c      	bmi.n	8011d76 <__swsetup_r+0x82>
 8011d1c:	06dd      	lsls	r5, r3, #27
 8011d1e:	d411      	bmi.n	8011d44 <__swsetup_r+0x50>
 8011d20:	2309      	movs	r3, #9
 8011d22:	6033      	str	r3, [r6, #0]
 8011d24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011d28:	81a3      	strh	r3, [r4, #12]
 8011d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8011d2e:	e03e      	b.n	8011dae <__swsetup_r+0xba>
 8011d30:	4b25      	ldr	r3, [pc, #148]	; (8011dc8 <__swsetup_r+0xd4>)
 8011d32:	429c      	cmp	r4, r3
 8011d34:	d101      	bne.n	8011d3a <__swsetup_r+0x46>
 8011d36:	68ac      	ldr	r4, [r5, #8]
 8011d38:	e7eb      	b.n	8011d12 <__swsetup_r+0x1e>
 8011d3a:	4b24      	ldr	r3, [pc, #144]	; (8011dcc <__swsetup_r+0xd8>)
 8011d3c:	429c      	cmp	r4, r3
 8011d3e:	bf08      	it	eq
 8011d40:	68ec      	ldreq	r4, [r5, #12]
 8011d42:	e7e6      	b.n	8011d12 <__swsetup_r+0x1e>
 8011d44:	0758      	lsls	r0, r3, #29
 8011d46:	d512      	bpl.n	8011d6e <__swsetup_r+0x7a>
 8011d48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d4a:	b141      	cbz	r1, 8011d5e <__swsetup_r+0x6a>
 8011d4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011d50:	4299      	cmp	r1, r3
 8011d52:	d002      	beq.n	8011d5a <__swsetup_r+0x66>
 8011d54:	4630      	mov	r0, r6
 8011d56:	f7fb f8c9 	bl	800ceec <_free_r>
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	6363      	str	r3, [r4, #52]	; 0x34
 8011d5e:	89a3      	ldrh	r3, [r4, #12]
 8011d60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011d64:	81a3      	strh	r3, [r4, #12]
 8011d66:	2300      	movs	r3, #0
 8011d68:	6063      	str	r3, [r4, #4]
 8011d6a:	6923      	ldr	r3, [r4, #16]
 8011d6c:	6023      	str	r3, [r4, #0]
 8011d6e:	89a3      	ldrh	r3, [r4, #12]
 8011d70:	f043 0308 	orr.w	r3, r3, #8
 8011d74:	81a3      	strh	r3, [r4, #12]
 8011d76:	6923      	ldr	r3, [r4, #16]
 8011d78:	b94b      	cbnz	r3, 8011d8e <__swsetup_r+0x9a>
 8011d7a:	89a3      	ldrh	r3, [r4, #12]
 8011d7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011d84:	d003      	beq.n	8011d8e <__swsetup_r+0x9a>
 8011d86:	4621      	mov	r1, r4
 8011d88:	4630      	mov	r0, r6
 8011d8a:	f000 f84d 	bl	8011e28 <__smakebuf_r>
 8011d8e:	89a0      	ldrh	r0, [r4, #12]
 8011d90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011d94:	f010 0301 	ands.w	r3, r0, #1
 8011d98:	d00a      	beq.n	8011db0 <__swsetup_r+0xbc>
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	60a3      	str	r3, [r4, #8]
 8011d9e:	6963      	ldr	r3, [r4, #20]
 8011da0:	425b      	negs	r3, r3
 8011da2:	61a3      	str	r3, [r4, #24]
 8011da4:	6923      	ldr	r3, [r4, #16]
 8011da6:	b943      	cbnz	r3, 8011dba <__swsetup_r+0xc6>
 8011da8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011dac:	d1ba      	bne.n	8011d24 <__swsetup_r+0x30>
 8011dae:	bd70      	pop	{r4, r5, r6, pc}
 8011db0:	0781      	lsls	r1, r0, #30
 8011db2:	bf58      	it	pl
 8011db4:	6963      	ldrpl	r3, [r4, #20]
 8011db6:	60a3      	str	r3, [r4, #8]
 8011db8:	e7f4      	b.n	8011da4 <__swsetup_r+0xb0>
 8011dba:	2000      	movs	r0, #0
 8011dbc:	e7f7      	b.n	8011dae <__swsetup_r+0xba>
 8011dbe:	bf00      	nop
 8011dc0:	20000038 	.word	0x20000038
 8011dc4:	08013cbc 	.word	0x08013cbc
 8011dc8:	08013cdc 	.word	0x08013cdc
 8011dcc:	08013c9c 	.word	0x08013c9c

08011dd0 <abort>:
 8011dd0:	b508      	push	{r3, lr}
 8011dd2:	2006      	movs	r0, #6
 8011dd4:	f000 f898 	bl	8011f08 <raise>
 8011dd8:	2001      	movs	r0, #1
 8011dda:	f7f0 feeb 	bl	8002bb4 <_exit>

08011dde <__swhatbuf_r>:
 8011dde:	b570      	push	{r4, r5, r6, lr}
 8011de0:	460e      	mov	r6, r1
 8011de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011de6:	2900      	cmp	r1, #0
 8011de8:	b096      	sub	sp, #88	; 0x58
 8011dea:	4614      	mov	r4, r2
 8011dec:	461d      	mov	r5, r3
 8011dee:	da07      	bge.n	8011e00 <__swhatbuf_r+0x22>
 8011df0:	2300      	movs	r3, #0
 8011df2:	602b      	str	r3, [r5, #0]
 8011df4:	89b3      	ldrh	r3, [r6, #12]
 8011df6:	061a      	lsls	r2, r3, #24
 8011df8:	d410      	bmi.n	8011e1c <__swhatbuf_r+0x3e>
 8011dfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011dfe:	e00e      	b.n	8011e1e <__swhatbuf_r+0x40>
 8011e00:	466a      	mov	r2, sp
 8011e02:	f000 f89d 	bl	8011f40 <_fstat_r>
 8011e06:	2800      	cmp	r0, #0
 8011e08:	dbf2      	blt.n	8011df0 <__swhatbuf_r+0x12>
 8011e0a:	9a01      	ldr	r2, [sp, #4]
 8011e0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011e10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011e14:	425a      	negs	r2, r3
 8011e16:	415a      	adcs	r2, r3
 8011e18:	602a      	str	r2, [r5, #0]
 8011e1a:	e7ee      	b.n	8011dfa <__swhatbuf_r+0x1c>
 8011e1c:	2340      	movs	r3, #64	; 0x40
 8011e1e:	2000      	movs	r0, #0
 8011e20:	6023      	str	r3, [r4, #0]
 8011e22:	b016      	add	sp, #88	; 0x58
 8011e24:	bd70      	pop	{r4, r5, r6, pc}
	...

08011e28 <__smakebuf_r>:
 8011e28:	898b      	ldrh	r3, [r1, #12]
 8011e2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011e2c:	079d      	lsls	r5, r3, #30
 8011e2e:	4606      	mov	r6, r0
 8011e30:	460c      	mov	r4, r1
 8011e32:	d507      	bpl.n	8011e44 <__smakebuf_r+0x1c>
 8011e34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011e38:	6023      	str	r3, [r4, #0]
 8011e3a:	6123      	str	r3, [r4, #16]
 8011e3c:	2301      	movs	r3, #1
 8011e3e:	6163      	str	r3, [r4, #20]
 8011e40:	b002      	add	sp, #8
 8011e42:	bd70      	pop	{r4, r5, r6, pc}
 8011e44:	ab01      	add	r3, sp, #4
 8011e46:	466a      	mov	r2, sp
 8011e48:	f7ff ffc9 	bl	8011dde <__swhatbuf_r>
 8011e4c:	9900      	ldr	r1, [sp, #0]
 8011e4e:	4605      	mov	r5, r0
 8011e50:	4630      	mov	r0, r6
 8011e52:	f7fb f89b 	bl	800cf8c <_malloc_r>
 8011e56:	b948      	cbnz	r0, 8011e6c <__smakebuf_r+0x44>
 8011e58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e5c:	059a      	lsls	r2, r3, #22
 8011e5e:	d4ef      	bmi.n	8011e40 <__smakebuf_r+0x18>
 8011e60:	f023 0303 	bic.w	r3, r3, #3
 8011e64:	f043 0302 	orr.w	r3, r3, #2
 8011e68:	81a3      	strh	r3, [r4, #12]
 8011e6a:	e7e3      	b.n	8011e34 <__smakebuf_r+0xc>
 8011e6c:	4b0d      	ldr	r3, [pc, #52]	; (8011ea4 <__smakebuf_r+0x7c>)
 8011e6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011e70:	89a3      	ldrh	r3, [r4, #12]
 8011e72:	6020      	str	r0, [r4, #0]
 8011e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e78:	81a3      	strh	r3, [r4, #12]
 8011e7a:	9b00      	ldr	r3, [sp, #0]
 8011e7c:	6163      	str	r3, [r4, #20]
 8011e7e:	9b01      	ldr	r3, [sp, #4]
 8011e80:	6120      	str	r0, [r4, #16]
 8011e82:	b15b      	cbz	r3, 8011e9c <__smakebuf_r+0x74>
 8011e84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e88:	4630      	mov	r0, r6
 8011e8a:	f000 f86b 	bl	8011f64 <_isatty_r>
 8011e8e:	b128      	cbz	r0, 8011e9c <__smakebuf_r+0x74>
 8011e90:	89a3      	ldrh	r3, [r4, #12]
 8011e92:	f023 0303 	bic.w	r3, r3, #3
 8011e96:	f043 0301 	orr.w	r3, r3, #1
 8011e9a:	81a3      	strh	r3, [r4, #12]
 8011e9c:	89a0      	ldrh	r0, [r4, #12]
 8011e9e:	4305      	orrs	r5, r0
 8011ea0:	81a5      	strh	r5, [r4, #12]
 8011ea2:	e7cd      	b.n	8011e40 <__smakebuf_r+0x18>
 8011ea4:	08011751 	.word	0x08011751

08011ea8 <_malloc_usable_size_r>:
 8011ea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011eac:	1f18      	subs	r0, r3, #4
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	bfbc      	itt	lt
 8011eb2:	580b      	ldrlt	r3, [r1, r0]
 8011eb4:	18c0      	addlt	r0, r0, r3
 8011eb6:	4770      	bx	lr

08011eb8 <_raise_r>:
 8011eb8:	291f      	cmp	r1, #31
 8011eba:	b538      	push	{r3, r4, r5, lr}
 8011ebc:	4604      	mov	r4, r0
 8011ebe:	460d      	mov	r5, r1
 8011ec0:	d904      	bls.n	8011ecc <_raise_r+0x14>
 8011ec2:	2316      	movs	r3, #22
 8011ec4:	6003      	str	r3, [r0, #0]
 8011ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8011eca:	bd38      	pop	{r3, r4, r5, pc}
 8011ecc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011ece:	b112      	cbz	r2, 8011ed6 <_raise_r+0x1e>
 8011ed0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011ed4:	b94b      	cbnz	r3, 8011eea <_raise_r+0x32>
 8011ed6:	4620      	mov	r0, r4
 8011ed8:	f000 f830 	bl	8011f3c <_getpid_r>
 8011edc:	462a      	mov	r2, r5
 8011ede:	4601      	mov	r1, r0
 8011ee0:	4620      	mov	r0, r4
 8011ee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ee6:	f000 b817 	b.w	8011f18 <_kill_r>
 8011eea:	2b01      	cmp	r3, #1
 8011eec:	d00a      	beq.n	8011f04 <_raise_r+0x4c>
 8011eee:	1c59      	adds	r1, r3, #1
 8011ef0:	d103      	bne.n	8011efa <_raise_r+0x42>
 8011ef2:	2316      	movs	r3, #22
 8011ef4:	6003      	str	r3, [r0, #0]
 8011ef6:	2001      	movs	r0, #1
 8011ef8:	e7e7      	b.n	8011eca <_raise_r+0x12>
 8011efa:	2400      	movs	r4, #0
 8011efc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011f00:	4628      	mov	r0, r5
 8011f02:	4798      	blx	r3
 8011f04:	2000      	movs	r0, #0
 8011f06:	e7e0      	b.n	8011eca <_raise_r+0x12>

08011f08 <raise>:
 8011f08:	4b02      	ldr	r3, [pc, #8]	; (8011f14 <raise+0xc>)
 8011f0a:	4601      	mov	r1, r0
 8011f0c:	6818      	ldr	r0, [r3, #0]
 8011f0e:	f7ff bfd3 	b.w	8011eb8 <_raise_r>
 8011f12:	bf00      	nop
 8011f14:	20000038 	.word	0x20000038

08011f18 <_kill_r>:
 8011f18:	b538      	push	{r3, r4, r5, lr}
 8011f1a:	4d07      	ldr	r5, [pc, #28]	; (8011f38 <_kill_r+0x20>)
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	4604      	mov	r4, r0
 8011f20:	4608      	mov	r0, r1
 8011f22:	4611      	mov	r1, r2
 8011f24:	602b      	str	r3, [r5, #0]
 8011f26:	f7f0 fe35 	bl	8002b94 <_kill>
 8011f2a:	1c43      	adds	r3, r0, #1
 8011f2c:	d102      	bne.n	8011f34 <_kill_r+0x1c>
 8011f2e:	682b      	ldr	r3, [r5, #0]
 8011f30:	b103      	cbz	r3, 8011f34 <_kill_r+0x1c>
 8011f32:	6023      	str	r3, [r4, #0]
 8011f34:	bd38      	pop	{r3, r4, r5, pc}
 8011f36:	bf00      	nop
 8011f38:	200059c4 	.word	0x200059c4

08011f3c <_getpid_r>:
 8011f3c:	f7f0 be22 	b.w	8002b84 <_getpid>

08011f40 <_fstat_r>:
 8011f40:	b538      	push	{r3, r4, r5, lr}
 8011f42:	4d07      	ldr	r5, [pc, #28]	; (8011f60 <_fstat_r+0x20>)
 8011f44:	2300      	movs	r3, #0
 8011f46:	4604      	mov	r4, r0
 8011f48:	4608      	mov	r0, r1
 8011f4a:	4611      	mov	r1, r2
 8011f4c:	602b      	str	r3, [r5, #0]
 8011f4e:	f7f0 fe80 	bl	8002c52 <_fstat>
 8011f52:	1c43      	adds	r3, r0, #1
 8011f54:	d102      	bne.n	8011f5c <_fstat_r+0x1c>
 8011f56:	682b      	ldr	r3, [r5, #0]
 8011f58:	b103      	cbz	r3, 8011f5c <_fstat_r+0x1c>
 8011f5a:	6023      	str	r3, [r4, #0]
 8011f5c:	bd38      	pop	{r3, r4, r5, pc}
 8011f5e:	bf00      	nop
 8011f60:	200059c4 	.word	0x200059c4

08011f64 <_isatty_r>:
 8011f64:	b538      	push	{r3, r4, r5, lr}
 8011f66:	4d06      	ldr	r5, [pc, #24]	; (8011f80 <_isatty_r+0x1c>)
 8011f68:	2300      	movs	r3, #0
 8011f6a:	4604      	mov	r4, r0
 8011f6c:	4608      	mov	r0, r1
 8011f6e:	602b      	str	r3, [r5, #0]
 8011f70:	f7f0 fe7f 	bl	8002c72 <_isatty>
 8011f74:	1c43      	adds	r3, r0, #1
 8011f76:	d102      	bne.n	8011f7e <_isatty_r+0x1a>
 8011f78:	682b      	ldr	r3, [r5, #0]
 8011f7a:	b103      	cbz	r3, 8011f7e <_isatty_r+0x1a>
 8011f7c:	6023      	str	r3, [r4, #0]
 8011f7e:	bd38      	pop	{r3, r4, r5, pc}
 8011f80:	200059c4 	.word	0x200059c4

08011f84 <_init>:
 8011f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f86:	bf00      	nop
 8011f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f8a:	bc08      	pop	{r3}
 8011f8c:	469e      	mov	lr, r3
 8011f8e:	4770      	bx	lr

08011f90 <_fini>:
 8011f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f92:	bf00      	nop
 8011f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f96:	bc08      	pop	{r3}
 8011f98:	469e      	mov	lr, r3
 8011f9a:	4770      	bx	lr
