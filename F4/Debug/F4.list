
F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014f30  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f6c  080150d0  080150d0  000250d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801703c  0801703c  00030210  2**0
                  CONTENTS
  4 .ARM          00000008  0801703c  0801703c  0002703c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017044  08017044  00030210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08017044  08017044  00027044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0801704c  0801704c  0002704c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08017054  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005918  20000210  08017264  00030210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005b28  08017264  00035b28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 12 .debug_info   000598f1  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000086ae  00000000  00000000  00089b31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002e88  00000000  00000000  000921e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002bd8  00000000  00000000  00095068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024b23  00000000  00000000  00097c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003375b  00000000  00000000  000bc763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4f42  00000000  00000000  000efebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b4e00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f1cc  00000000  00000000  001b4e54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000210 	.word	0x20000210
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080150b8 	.word	0x080150b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000214 	.word	0x20000214
 80001dc:	080150b8 	.word	0x080150b8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <getActivity>:

Activity_T CurrentActivity;
extern GPS_t GPS;

void getActivity()
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

		if(0 < GPS.speed_km && GPS.speed_km < 2.5)
 8001000:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <getActivity+0xa4>)
 8001002:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001006:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800100a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100e:	dd0d      	ble.n	800102c <getActivity+0x30>
 8001010:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <getActivity+0xa4>)
 8001012:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001016:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800101a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800101e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001022:	d503      	bpl.n	800102c <getActivity+0x30>
		{
			CurrentActivity.currentActivity = noMovement;	//nomovement
 8001024:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <getActivity+0xa8>)
 8001026:	2201      	movs	r2, #1
 8001028:	721a      	strb	r2, [r3, #8]
 800102a:	e033      	b.n	8001094 <getActivity+0x98>
		}
		else if(GPS.speed_km >= 2.5 && GPS.speed_km < 7.0)
 800102c:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <getActivity+0xa4>)
 800102e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001032:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8001036:	eef4 7ac7 	vcmpe.f32	s15, s14
 800103a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103e:	db0d      	blt.n	800105c <getActivity+0x60>
 8001040:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <getActivity+0xa4>)
 8001042:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001046:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800104a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800104e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001052:	d503      	bpl.n	800105c <getActivity+0x60>
		{
			CurrentActivity.currentActivity = walking;	//walking
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <getActivity+0xa8>)
 8001056:	2202      	movs	r2, #2
 8001058:	721a      	strb	r2, [r3, #8]
 800105a:	e01b      	b.n	8001094 <getActivity+0x98>
		}
		else if(GPS.speed_km >= 7.0 && GPS.speed_km < 15.0)
 800105c:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <getActivity+0xa4>)
 800105e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001062:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8001066:	eef4 7ac7 	vcmpe.f32	s15, s14
 800106a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800106e:	db0d      	blt.n	800108c <getActivity+0x90>
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <getActivity+0xa4>)
 8001072:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001076:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800107a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800107e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001082:	d503      	bpl.n	800108c <getActivity+0x90>
		{
			CurrentActivity.currentActivity = running;
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <getActivity+0xa8>)
 8001086:	2203      	movs	r2, #3
 8001088:	721a      	strb	r2, [r3, #8]
 800108a:	e003      	b.n	8001094 <getActivity+0x98>
		}
		else
		{
			CurrentActivity.currentActivity =  unknown;
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <getActivity+0xa8>)
 800108e:	2200      	movs	r2, #0
 8001090:	721a      	strb	r2, [r3, #8]
		}

}
 8001092:	bf00      	nop
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20004dcc 	.word	0x20004dcc
 80010a4:	20004d60 	.word	0x20004d60

080010a8 <activityToString>:

char* activityToString(uint8_t activity)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
	char* string = "";
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <activityToString+0x48>)
 80010b4:	60fb      	str	r3, [r7, #12]

	switch (activity) {
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2b03      	cmp	r3, #3
 80010ba:	d00c      	beq.n	80010d6 <activityToString+0x2e>
 80010bc:	2b03      	cmp	r3, #3
 80010be:	dc0d      	bgt.n	80010dc <activityToString+0x34>
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d002      	beq.n	80010ca <activityToString+0x22>
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d003      	beq.n	80010d0 <activityToString+0x28>
 80010c8:	e008      	b.n	80010dc <activityToString+0x34>
		case noMovement:
			string = "Geen beweging";
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <activityToString+0x4c>)
 80010cc:	60fb      	str	r3, [r7, #12]
			break;
 80010ce:	e008      	b.n	80010e2 <activityToString+0x3a>
		case walking:
			string = "Wandelen";
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <activityToString+0x50>)
 80010d2:	60fb      	str	r3, [r7, #12]
			break;
 80010d4:	e005      	b.n	80010e2 <activityToString+0x3a>
		case running:
			string = "Hardlopen";
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <activityToString+0x54>)
 80010d8:	60fb      	str	r3, [r7, #12]
			break;
 80010da:	e002      	b.n	80010e2 <activityToString+0x3a>
		default:
			string = "onbekend";
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <activityToString+0x58>)
 80010de:	60fb      	str	r3, [r7, #12]
			break;
 80010e0:	bf00      	nop
	}
	return string;
 80010e2:	68fb      	ldr	r3, [r7, #12]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	080150d0 	.word	0x080150d0
 80010f4:	080150d4 	.word	0x080150d4
 80010f8:	080150e4 	.word	0x080150e4
 80010fc:	080150f0 	.word	0x080150f0
 8001100:	080150fc 	.word	0x080150fc

08001104 <CalculateActivityAverage>:

void CalculateActivityAverage(uint8_t lastActiveMinute)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
	switch (lastActiveMinute) {
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b03      	cmp	r3, #3
 8001112:	d014      	beq.n	800113e <CalculateActivityAverage+0x3a>
 8001114:	2b03      	cmp	r3, #3
 8001116:	dc19      	bgt.n	800114c <CalculateActivityAverage+0x48>
 8001118:	2b01      	cmp	r3, #1
 800111a:	d002      	beq.n	8001122 <CalculateActivityAverage+0x1e>
 800111c:	2b02      	cmp	r3, #2
 800111e:	d007      	beq.n	8001130 <CalculateActivityAverage+0x2c>
 8001120:	e014      	b.n	800114c <CalculateActivityAverage+0x48>
		case noMovement:
			CurrentActivity.activityTotal[noMovement]++;
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <CalculateActivityAverage+0x64>)
 8001124:	791b      	ldrb	r3, [r3, #4]
 8001126:	3301      	adds	r3, #1
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <CalculateActivityAverage+0x64>)
 800112c:	711a      	strb	r2, [r3, #4]
			break;
 800112e:	e014      	b.n	800115a <CalculateActivityAverage+0x56>
		case walking:
			CurrentActivity.activityTotal[walking]++;
 8001130:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <CalculateActivityAverage+0x64>)
 8001132:	795b      	ldrb	r3, [r3, #5]
 8001134:	3301      	adds	r3, #1
 8001136:	b2da      	uxtb	r2, r3
 8001138:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <CalculateActivityAverage+0x64>)
 800113a:	715a      	strb	r2, [r3, #5]
			break;
 800113c:	e00d      	b.n	800115a <CalculateActivityAverage+0x56>
		case running:
			CurrentActivity.activityTotal[running]++;
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <CalculateActivityAverage+0x64>)
 8001140:	799b      	ldrb	r3, [r3, #6]
 8001142:	3301      	adds	r3, #1
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <CalculateActivityAverage+0x64>)
 8001148:	719a      	strb	r2, [r3, #6]
			break;
 800114a:	e006      	b.n	800115a <CalculateActivityAverage+0x56>
		default:
			CurrentActivity.activityTotal[unknown]++;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <CalculateActivityAverage+0x64>)
 800114e:	78db      	ldrb	r3, [r3, #3]
 8001150:	3301      	adds	r3, #1
 8001152:	b2da      	uxtb	r2, r3
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <CalculateActivityAverage+0x64>)
 8001156:	70da      	strb	r2, [r3, #3]
			break;
 8001158:	bf00      	nop
	}
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	20004d60 	.word	0x20004d60

0800116c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001172:	463b      	mov	r3, r7
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800117e:	4b21      	ldr	r3, [pc, #132]	; (8001204 <MX_ADC1_Init+0x98>)
 8001180:	4a21      	ldr	r2, [pc, #132]	; (8001208 <MX_ADC1_Init+0x9c>)
 8001182:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001184:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <MX_ADC1_Init+0x98>)
 8001186:	2200      	movs	r2, #0
 8001188:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800118a:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <MX_ADC1_Init+0x98>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001190:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <MX_ADC1_Init+0x98>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001196:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <MX_ADC1_Init+0x98>)
 8001198:	2200      	movs	r2, #0
 800119a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800119c:	4b19      	ldr	r3, [pc, #100]	; (8001204 <MX_ADC1_Init+0x98>)
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011a4:	4b17      	ldr	r3, [pc, #92]	; (8001204 <MX_ADC1_Init+0x98>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011aa:	4b16      	ldr	r3, [pc, #88]	; (8001204 <MX_ADC1_Init+0x98>)
 80011ac:	4a17      	ldr	r2, [pc, #92]	; (800120c <MX_ADC1_Init+0xa0>)
 80011ae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <MX_ADC1_Init+0x98>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <MX_ADC1_Init+0x98>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <MX_ADC1_Init+0x98>)
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <MX_ADC1_Init+0x98>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011ca:	480e      	ldr	r0, [pc, #56]	; (8001204 <MX_ADC1_Init+0x98>)
 80011cc:	f001 ffb8 	bl	8003140 <HAL_ADC_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80011d6:	f001 f84b 	bl	8002270 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011da:	2301      	movs	r3, #1
 80011dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011de:	2301      	movs	r3, #1
 80011e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e6:	463b      	mov	r3, r7
 80011e8:	4619      	mov	r1, r3
 80011ea:	4806      	ldr	r0, [pc, #24]	; (8001204 <MX_ADC1_Init+0x98>)
 80011ec:	f002 fa0c 	bl	8003608 <HAL_ADC_ConfigChannel>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80011f6:	f001 f83b 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20004d6c 	.word	0x20004d6c
 8001208:	40012000 	.word	0x40012000
 800120c:	0f000001 	.word	0x0f000001

08001210 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a17      	ldr	r2, [pc, #92]	; (800128c <HAL_ADC_MspInit+0x7c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d127      	bne.n	8001282 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	4b16      	ldr	r3, [pc, #88]	; (8001290 <HAL_ADC_MspInit+0x80>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	4a15      	ldr	r2, [pc, #84]	; (8001290 <HAL_ADC_MspInit+0x80>)
 800123c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001240:	6453      	str	r3, [r2, #68]	; 0x44
 8001242:	4b13      	ldr	r3, [pc, #76]	; (8001290 <HAL_ADC_MspInit+0x80>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <HAL_ADC_MspInit+0x80>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a0e      	ldr	r2, [pc, #56]	; (8001290 <HAL_ADC_MspInit+0x80>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <HAL_ADC_MspInit+0x80>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_Pin;
 800126a:	2302      	movs	r3, #2
 800126c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800126e:	2303      	movs	r3, #3
 8001270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_GPIO_Port, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	4805      	ldr	r0, [pc, #20]	; (8001294 <HAL_ADC_MspInit+0x84>)
 800127e:	f002 fd5f 	bl	8003d40 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001282:	bf00      	nop
 8001284:	3728      	adds	r7, #40	; 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40012000 	.word	0x40012000
 8001290:	40023800 	.word	0x40023800
 8001294:	40020000 	.word	0x40020000

08001298 <HAL_ADC_ConvCpltCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	ADCValue = HAL_ADC_GetValue(&hadc1);
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <HAL_ADC_ConvCpltCallback+0x20>)
 80012a2:	f002 f990 	bl	80035c6 <HAL_ADC_GetValue>
 80012a6:	4603      	mov	r3, r0
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	4b04      	ldr	r3, [pc, #16]	; (80012bc <HAL_ADC_ConvCpltCallback+0x24>)
 80012ac:	801a      	strh	r2, [r3, #0]
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20004d6c 	.word	0x20004d6c
 80012bc:	2000022c 	.word	0x2000022c

080012c0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80012c4:	4a18      	ldr	r2, [pc, #96]	; (8001328 <MX_FREERTOS_Init+0x68>)
 80012c6:	2100      	movs	r1, #0
 80012c8:	4818      	ldr	r0, [pc, #96]	; (800132c <MX_FREERTOS_Init+0x6c>)
 80012ca:	f008 fc9b 	bl	8009c04 <osThreadNew>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4a17      	ldr	r2, [pc, #92]	; (8001330 <MX_FREERTOS_Init+0x70>)
 80012d2:	6013      	str	r3, [r2, #0]

  /* creation of DrawOnOledTask */
  DrawOnOledTaskHandle = osThreadNew(StartDrawing, NULL, &DrawOnOledTask_attributes);
 80012d4:	4a17      	ldr	r2, [pc, #92]	; (8001334 <MX_FREERTOS_Init+0x74>)
 80012d6:	2100      	movs	r1, #0
 80012d8:	4817      	ldr	r0, [pc, #92]	; (8001338 <MX_FREERTOS_Init+0x78>)
 80012da:	f008 fc93 	bl	8009c04 <osThreadNew>
 80012de:	4603      	mov	r3, r0
 80012e0:	4a16      	ldr	r2, [pc, #88]	; (800133c <MX_FREERTOS_Init+0x7c>)
 80012e2:	6013      	str	r3, [r2, #0]

  /* creation of ActivityTask */
  ActivityTaskHandle = osThreadNew(StartActivityTask, NULL, &ActivityTask_attributes);
 80012e4:	4a16      	ldr	r2, [pc, #88]	; (8001340 <MX_FREERTOS_Init+0x80>)
 80012e6:	2100      	movs	r1, #0
 80012e8:	4816      	ldr	r0, [pc, #88]	; (8001344 <MX_FREERTOS_Init+0x84>)
 80012ea:	f008 fc8b 	bl	8009c04 <osThreadNew>
 80012ee:	4603      	mov	r3, r0
 80012f0:	4a15      	ldr	r2, [pc, #84]	; (8001348 <MX_FREERTOS_Init+0x88>)
 80012f2:	6013      	str	r3, [r2, #0]

  /* creation of readBattery */
  readBatteryHandle = osThreadNew(StartReadBattery, NULL, &readBattery_attributes);
 80012f4:	4a15      	ldr	r2, [pc, #84]	; (800134c <MX_FREERTOS_Init+0x8c>)
 80012f6:	2100      	movs	r1, #0
 80012f8:	4815      	ldr	r0, [pc, #84]	; (8001350 <MX_FREERTOS_Init+0x90>)
 80012fa:	f008 fc83 	bl	8009c04 <osThreadNew>
 80012fe:	4603      	mov	r3, r0
 8001300:	4a14      	ldr	r2, [pc, #80]	; (8001354 <MX_FREERTOS_Init+0x94>)
 8001302:	6013      	str	r3, [r2, #0]

  /* creation of rSendTask */
  rSendTaskHandle = osThreadNew(StartRadioSendTask, NULL, &rSendTask_attributes);
 8001304:	4a14      	ldr	r2, [pc, #80]	; (8001358 <MX_FREERTOS_Init+0x98>)
 8001306:	2100      	movs	r1, #0
 8001308:	4814      	ldr	r0, [pc, #80]	; (800135c <MX_FREERTOS_Init+0x9c>)
 800130a:	f008 fc7b 	bl	8009c04 <osThreadNew>
 800130e:	4603      	mov	r3, r0
 8001310:	4a13      	ldr	r2, [pc, #76]	; (8001360 <MX_FREERTOS_Init+0xa0>)
 8001312:	6013      	str	r3, [r2, #0]

  /* creation of rReceiveTask */
  rReceiveTaskHandle = osThreadNew(StartRadioReceiveTask, NULL, &rReceiveTask_attributes);
 8001314:	4a13      	ldr	r2, [pc, #76]	; (8001364 <MX_FREERTOS_Init+0xa4>)
 8001316:	2100      	movs	r1, #0
 8001318:	4813      	ldr	r0, [pc, #76]	; (8001368 <MX_FREERTOS_Init+0xa8>)
 800131a:	f008 fc73 	bl	8009c04 <osThreadNew>
 800131e:	4603      	mov	r3, r0
 8001320:	4a12      	ldr	r2, [pc, #72]	; (800136c <MX_FREERTOS_Init+0xac>)
 8001322:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	0801692c 	.word	0x0801692c
 800132c:	08001371 	.word	0x08001371
 8001330:	20004db8 	.word	0x20004db8
 8001334:	08016950 	.word	0x08016950
 8001338:	08001381 	.word	0x08001381
 800133c:	20004dc0 	.word	0x20004dc0
 8001340:	08016974 	.word	0x08016974
 8001344:	080014f1 	.word	0x080014f1
 8001348:	20004dbc 	.word	0x20004dbc
 800134c:	08016998 	.word	0x08016998
 8001350:	08001771 	.word	0x08001771
 8001354:	20004dc4 	.word	0x20004dc4
 8001358:	080169bc 	.word	0x080169bc
 800135c:	080017ed 	.word	0x080017ed
 8001360:	20004db4 	.word	0x20004db4
 8001364:	080169e0 	.word	0x080169e0
 8001368:	080017fd 	.word	0x080017fd
 800136c:	20004dc8 	.word	0x20004dc8

08001370 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8001378:	2001      	movs	r0, #1
 800137a:	f008 fcd5 	bl	8009d28 <osDelay>
 800137e:	e7fb      	b.n	8001378 <StartDefaultTask+0x8>

08001380 <StartDrawing>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDrawing */
void StartDrawing(void *argument)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	  for(;;)
	  {
		char numbers[10];
		char *currentTime;

		SSD1306_GotoXY (0,0);
 8001388:	2100      	movs	r1, #0
 800138a:	2000      	movs	r0, #0
 800138c:	f001 fa78 	bl	8002880 <SSD1306_GotoXY>
		sprintf(numbers, "batt: %.0f", batteryPer);
 8001390:	4b4b      	ldr	r3, [pc, #300]	; (80014c0 <StartDrawing+0x140>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f8df 	bl	8000558 <__aeabi_f2d>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	f107 0008 	add.w	r0, r7, #8
 80013a2:	4948      	ldr	r1, [pc, #288]	; (80014c4 <StartDrawing+0x144>)
 80013a4:	f00f fddc 	bl	8010f60 <siprintf>
		SSD1306_Puts (numbers, &Font_7x10, 1);
 80013a8:	f107 0308 	add.w	r3, r7, #8
 80013ac:	2201      	movs	r2, #1
 80013ae:	4946      	ldr	r1, [pc, #280]	; (80014c8 <StartDrawing+0x148>)
 80013b0:	4618      	mov	r0, r3
 80013b2:	f001 fafb 	bl	80029ac <SSD1306_Puts>

		SSD1306_GotoXY (80,0);
 80013b6:	2100      	movs	r1, #0
 80013b8:	2050      	movs	r0, #80	; 0x50
 80013ba:	f001 fa61 	bl	8002880 <SSD1306_GotoXY>
		SSD1306_Puts ("ADM:", &Font_7x10, 1);
 80013be:	2201      	movs	r2, #1
 80013c0:	4941      	ldr	r1, [pc, #260]	; (80014c8 <StartDrawing+0x148>)
 80013c2:	4842      	ldr	r0, [pc, #264]	; (80014cc <StartDrawing+0x14c>)
 80013c4:	f001 faf2 	bl	80029ac <SSD1306_Puts>

		SSD1306_GotoXY (110, 0);
 80013c8:	2100      	movs	r1, #0
 80013ca:	206e      	movs	r0, #110	; 0x6e
 80013cc:	f001 fa58 	bl	8002880 <SSD1306_GotoXY>
		sprintf(numbers, "%d", CurrentActivity.activeDailyMinutes);
 80013d0:	4b3f      	ldr	r3, [pc, #252]	; (80014d0 <StartDrawing+0x150>)
 80013d2:	785b      	ldrb	r3, [r3, #1]
 80013d4:	461a      	mov	r2, r3
 80013d6:	f107 0308 	add.w	r3, r7, #8
 80013da:	493e      	ldr	r1, [pc, #248]	; (80014d4 <StartDrawing+0x154>)
 80013dc:	4618      	mov	r0, r3
 80013de:	f00f fdbf 	bl	8010f60 <siprintf>
		SSD1306_Puts(numbers, &Font_7x10, 1);
 80013e2:	f107 0308 	add.w	r3, r7, #8
 80013e6:	2201      	movs	r2, #1
 80013e8:	4937      	ldr	r1, [pc, #220]	; (80014c8 <StartDrawing+0x148>)
 80013ea:	4618      	mov	r0, r3
 80013ec:	f001 fade 	bl	80029ac <SSD1306_Puts>

		SSD1306_GotoXY (0, 25);
 80013f0:	2119      	movs	r1, #25
 80013f2:	2000      	movs	r0, #0
 80013f4:	f001 fa44 	bl	8002880 <SSD1306_GotoXY>
		sprintf(numbers, "%.2f", GPS.speed_km);
 80013f8:	4b37      	ldr	r3, [pc, #220]	; (80014d8 <StartDrawing+0x158>)
 80013fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff f8ab 	bl	8000558 <__aeabi_f2d>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	f107 0008 	add.w	r0, r7, #8
 800140a:	4934      	ldr	r1, [pc, #208]	; (80014dc <StartDrawing+0x15c>)
 800140c:	f00f fda8 	bl	8010f60 <siprintf>
		SSD1306_Puts(numbers, &Font_11x18, 1);
 8001410:	f107 0308 	add.w	r3, r7, #8
 8001414:	2201      	movs	r2, #1
 8001416:	4932      	ldr	r1, [pc, #200]	; (80014e0 <StartDrawing+0x160>)
 8001418:	4618      	mov	r0, r3
 800141a:	f001 fac7 	bl	80029ac <SSD1306_Puts>
		SSD1306_GotoXY (50,31);
 800141e:	211f      	movs	r1, #31
 8001420:	2032      	movs	r0, #50	; 0x32
 8001422:	f001 fa2d 	bl	8002880 <SSD1306_GotoXY>
		SSD1306_Puts ("km/u", &Font_7x10, 1);
 8001426:	2201      	movs	r2, #1
 8001428:	4927      	ldr	r1, [pc, #156]	; (80014c8 <StartDrawing+0x148>)
 800142a:	482e      	ldr	r0, [pc, #184]	; (80014e4 <StartDrawing+0x164>)
 800142c:	f001 fabe 	bl	80029ac <SSD1306_Puts>

		SSD1306_GotoXY (0,10);
 8001430:	210a      	movs	r1, #10
 8001432:	2000      	movs	r0, #0
 8001434:	f001 fa24 	bl	8002880 <SSD1306_GotoXY>
		//SSD1306_Puts(getActivity(), &Font_7x10, 1);
		SSD1306_Puts(activityToString(CurrentActivity.lastActiveMinute), &Font_7x10, 1);
 8001438:	4b25      	ldr	r3, [pc, #148]	; (80014d0 <StartDrawing+0x150>)
 800143a:	789b      	ldrb	r3, [r3, #2]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fe33 	bl	80010a8 <activityToString>
 8001442:	4603      	mov	r3, r0
 8001444:	2201      	movs	r2, #1
 8001446:	4920      	ldr	r1, [pc, #128]	; (80014c8 <StartDrawing+0x148>)
 8001448:	4618      	mov	r0, r3
 800144a:	f001 faaf 	bl	80029ac <SSD1306_Puts>
		SSD1306_Puts("          ",&Font_7x10, 1);
 800144e:	2201      	movs	r2, #1
 8001450:	491d      	ldr	r1, [pc, #116]	; (80014c8 <StartDrawing+0x148>)
 8001452:	4825      	ldr	r0, [pc, #148]	; (80014e8 <StartDrawing+0x168>)
 8001454:	f001 faaa 	bl	80029ac <SSD1306_Puts>

		currentTime = getTime();
 8001458:	f000 fd46 	bl	8001ee8 <getTime>
 800145c:	6178      	str	r0, [r7, #20]
		SSD1306_GotoXY (0, 45);
 800145e:	212d      	movs	r1, #45	; 0x2d
 8001460:	2000      	movs	r0, #0
 8001462:	f001 fa0d 	bl	8002880 <SSD1306_GotoXY>
		SSD1306_Puts(currentTime, &Font_7x10, 1);
 8001466:	2201      	movs	r2, #1
 8001468:	4917      	ldr	r1, [pc, #92]	; (80014c8 <StartDrawing+0x148>)
 800146a:	6978      	ldr	r0, [r7, #20]
 800146c:	f001 fa9e 	bl	80029ac <SSD1306_Puts>

		free(currentTime);
 8001470:	6978      	ldr	r0, [r7, #20]
 8001472:	f00e fdbf 	bl	800fff4 <free>

		SSD1306_GotoXY (80,10);
 8001476:	210a      	movs	r1, #10
 8001478:	2050      	movs	r0, #80	; 0x50
 800147a:	f001 fa01 	bl	8002880 <SSD1306_GotoXY>
		SSD1306_Puts ("AL:", &Font_7x10, 1);
 800147e:	2201      	movs	r2, #1
 8001480:	4911      	ldr	r1, [pc, #68]	; (80014c8 <StartDrawing+0x148>)
 8001482:	481a      	ldr	r0, [pc, #104]	; (80014ec <StartDrawing+0x16c>)
 8001484:	f001 fa92 	bl	80029ac <SSD1306_Puts>

		SSD1306_GotoXY (110, 10);
 8001488:	210a      	movs	r1, #10
 800148a:	206e      	movs	r0, #110	; 0x6e
 800148c:	f001 f9f8 	bl	8002880 <SSD1306_GotoXY>
		sprintf(numbers, "%d", CurrentActivity.length);
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <StartDrawing+0x150>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	f107 0308 	add.w	r3, r7, #8
 800149a:	490e      	ldr	r1, [pc, #56]	; (80014d4 <StartDrawing+0x154>)
 800149c:	4618      	mov	r0, r3
 800149e:	f00f fd5f 	bl	8010f60 <siprintf>
		SSD1306_Puts(numbers, &Font_7x10, 1);
 80014a2:	f107 0308 	add.w	r3, r7, #8
 80014a6:	2201      	movs	r2, #1
 80014a8:	4907      	ldr	r1, [pc, #28]	; (80014c8 <StartDrawing+0x148>)
 80014aa:	4618      	mov	r0, r3
 80014ac:	f001 fa7e 	bl	80029ac <SSD1306_Puts>

		SSD1306_UpdateScreen();
 80014b0:	f001 f940 	bl	8002734 <SSD1306_UpdateScreen>

	    osDelay(1000);
 80014b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014b8:	f008 fc36 	bl	8009d28 <osDelay>
	  {
 80014bc:	e764      	b.n	8001388 <StartDrawing+0x8>
 80014be:	bf00      	nop
 80014c0:	20000230 	.word	0x20000230
 80014c4:	0801515c 	.word	0x0801515c
 80014c8:	20000000 	.word	0x20000000
 80014cc:	08015168 	.word	0x08015168
 80014d0:	20004d60 	.word	0x20004d60
 80014d4:	08015170 	.word	0x08015170
 80014d8:	20004dcc 	.word	0x20004dcc
 80014dc:	08015174 	.word	0x08015174
 80014e0:	20000008 	.word	0x20000008
 80014e4:	0801517c 	.word	0x0801517c
 80014e8:	08015184 	.word	0x08015184
 80014ec:	08015190 	.word	0x08015190

080014f0 <StartActivityTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartActivityTask */
void StartActivityTask(void *argument)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartActivityTask */
	static float time;
		//static uint8_t activityPM[20];
		static uint8_t counter = 0, counterPM = 0, counterPauze = 0;
		static uint8_t trackActivity[4];
		char* SDString = "";
 80014f8:	4b91      	ldr	r3, [pc, #580]	; (8001740 <StartActivityTask+0x250>)
 80014fa:	61bb      	str	r3, [r7, #24]
	  /* Infinite loop */
	  for(;;)
	  {
		  getActivity();
 80014fc:	f7ff fd7e 	bl	8000ffc <getActivity>

		  	if(time != GPS.utc_time)
 8001500:	4b90      	ldr	r3, [pc, #576]	; (8001744 <StartActivityTask+0x254>)
 8001502:	ed93 7a06 	vldr	s14, [r3, #24]
 8001506:	4b90      	ldr	r3, [pc, #576]	; (8001748 <StartActivityTask+0x258>)
 8001508:	edd3 7a00 	vldr	s15, [r3]
 800150c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001514:	f000 810f 	beq.w	8001736 <StartActivityTask+0x246>
		  	{
		  		time = GPS.utc_time;
 8001518:	4b8a      	ldr	r3, [pc, #552]	; (8001744 <StartActivityTask+0x254>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	4a8a      	ldr	r2, [pc, #552]	; (8001748 <StartActivityTask+0x258>)
 800151e:	6013      	str	r3, [r2, #0]

		  		if(counter < 60)	//one minute
 8001520:	4b8a      	ldr	r3, [pc, #552]	; (800174c <StartActivityTask+0x25c>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b3b      	cmp	r3, #59	; 0x3b
 8001526:	d82d      	bhi.n	8001584 <StartActivityTask+0x94>
		  		{
		  			switch (CurrentActivity.currentActivity) {
 8001528:	4b89      	ldr	r3, [pc, #548]	; (8001750 <StartActivityTask+0x260>)
 800152a:	7a1b      	ldrb	r3, [r3, #8]
 800152c:	2b03      	cmp	r3, #3
 800152e:	d014      	beq.n	800155a <StartActivityTask+0x6a>
 8001530:	2b03      	cmp	r3, #3
 8001532:	dc19      	bgt.n	8001568 <StartActivityTask+0x78>
 8001534:	2b01      	cmp	r3, #1
 8001536:	d002      	beq.n	800153e <StartActivityTask+0x4e>
 8001538:	2b02      	cmp	r3, #2
 800153a:	d007      	beq.n	800154c <StartActivityTask+0x5c>
 800153c:	e014      	b.n	8001568 <StartActivityTask+0x78>
		  				case noMovement:
		  					trackActivity[noMovement]++;
 800153e:	4b85      	ldr	r3, [pc, #532]	; (8001754 <StartActivityTask+0x264>)
 8001540:	785b      	ldrb	r3, [r3, #1]
 8001542:	3301      	adds	r3, #1
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4b83      	ldr	r3, [pc, #524]	; (8001754 <StartActivityTask+0x264>)
 8001548:	705a      	strb	r2, [r3, #1]
		  					break;
 800154a:	e014      	b.n	8001576 <StartActivityTask+0x86>
		  				case walking:
		  					trackActivity[walking]++;
 800154c:	4b81      	ldr	r3, [pc, #516]	; (8001754 <StartActivityTask+0x264>)
 800154e:	789b      	ldrb	r3, [r3, #2]
 8001550:	3301      	adds	r3, #1
 8001552:	b2da      	uxtb	r2, r3
 8001554:	4b7f      	ldr	r3, [pc, #508]	; (8001754 <StartActivityTask+0x264>)
 8001556:	709a      	strb	r2, [r3, #2]
		  					break;
 8001558:	e00d      	b.n	8001576 <StartActivityTask+0x86>
		  				case running:
		  					trackActivity[running]++;
 800155a:	4b7e      	ldr	r3, [pc, #504]	; (8001754 <StartActivityTask+0x264>)
 800155c:	78db      	ldrb	r3, [r3, #3]
 800155e:	3301      	adds	r3, #1
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4b7c      	ldr	r3, [pc, #496]	; (8001754 <StartActivityTask+0x264>)
 8001564:	70da      	strb	r2, [r3, #3]
		  					break;
 8001566:	e006      	b.n	8001576 <StartActivityTask+0x86>
		  				default:
		  					trackActivity[unknown]++;
 8001568:	4b7a      	ldr	r3, [pc, #488]	; (8001754 <StartActivityTask+0x264>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	3301      	adds	r3, #1
 800156e:	b2da      	uxtb	r2, r3
 8001570:	4b78      	ldr	r3, [pc, #480]	; (8001754 <StartActivityTask+0x264>)
 8001572:	701a      	strb	r2, [r3, #0]
		  					break;
 8001574:	bf00      	nop
		  			}

		  			counter++;
 8001576:	4b75      	ldr	r3, [pc, #468]	; (800174c <StartActivityTask+0x25c>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	3301      	adds	r3, #1
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4b73      	ldr	r3, [pc, #460]	; (800174c <StartActivityTask+0x25c>)
 8001580:	701a      	strb	r2, [r3, #0]
 8001582:	e0d8      	b.n	8001736 <StartActivityTask+0x246>
		  		}
		  		else
		  		{
		  			uint8_t current = 0; //index = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		  			for(int i = 0; i < 4; i++)
 800158a:	2300      	movs	r3, #0
 800158c:	623b      	str	r3, [r7, #32]
 800158e:	e019      	b.n	80015c4 <StartActivityTask+0xd4>
		  			{
		  				if(current <= trackActivity[i])
 8001590:	4a70      	ldr	r2, [pc, #448]	; (8001754 <StartActivityTask+0x264>)
 8001592:	6a3b      	ldr	r3, [r7, #32]
 8001594:	4413      	add	r3, r2
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800159c:	429a      	cmp	r2, r3
 800159e:	d80e      	bhi.n	80015be <StartActivityTask+0xce>
		  				{
		  					current = trackActivity[i];
 80015a0:	4a6c      	ldr	r2, [pc, #432]	; (8001754 <StartActivityTask+0x264>)
 80015a2:	6a3b      	ldr	r3, [r7, #32]
 80015a4:	4413      	add	r3, r2
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  					trackActivity[i] = 0;
 80015ac:	4a69      	ldr	r2, [pc, #420]	; (8001754 <StartActivityTask+0x264>)
 80015ae:	6a3b      	ldr	r3, [r7, #32]
 80015b0:	4413      	add	r3, r2
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]
		  					CurrentActivity.lastActiveMinute = i;
 80015b6:	6a3b      	ldr	r3, [r7, #32]
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4b65      	ldr	r3, [pc, #404]	; (8001750 <StartActivityTask+0x260>)
 80015bc:	709a      	strb	r2, [r3, #2]
		  			for(int i = 0; i < 4; i++)
 80015be:	6a3b      	ldr	r3, [r7, #32]
 80015c0:	3301      	adds	r3, #1
 80015c2:	623b      	str	r3, [r7, #32]
 80015c4:	6a3b      	ldr	r3, [r7, #32]
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	dde2      	ble.n	8001590 <StartActivityTask+0xa0>
		  				}
		  			}

		  			if(counterPM < 0Xff)
 80015ca:	4b63      	ldr	r3, [pc, #396]	; (8001758 <StartActivityTask+0x268>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2bff      	cmp	r3, #255	; 0xff
 80015d0:	d065      	beq.n	800169e <StartActivityTask+0x1ae>
		  			{
		  				if((CurrentActivity.lastActiveMinute == walking || CurrentActivity.lastActiveMinute == running))
 80015d2:	4b5f      	ldr	r3, [pc, #380]	; (8001750 <StartActivityTask+0x260>)
 80015d4:	789b      	ldrb	r3, [r3, #2]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d003      	beq.n	80015e2 <StartActivityTask+0xf2>
 80015da:	4b5d      	ldr	r3, [pc, #372]	; (8001750 <StartActivityTask+0x260>)
 80015dc:	789b      	ldrb	r3, [r3, #2]
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d134      	bne.n	800164c <StartActivityTask+0x15c>
		  				{
		  					if(counterPM == 0)
 80015e2:	4b5d      	ldr	r3, [pc, #372]	; (8001758 <StartActivityTask+0x268>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d102      	bne.n	80015f0 <StartActivityTask+0x100>
		  					{
		  						writeStartToSD("MinActi.txt");
 80015ea:	485c      	ldr	r0, [pc, #368]	; (800175c <StartActivityTask+0x26c>)
 80015ec:	f000 ff42 	bl	8002474 <writeStartToSD>
		  					}
		  					CalculateActivityAverage(CurrentActivity.lastActiveMinute);
 80015f0:	4b57      	ldr	r3, [pc, #348]	; (8001750 <StartActivityTask+0x260>)
 80015f2:	789b      	ldrb	r3, [r3, #2]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fd85 	bl	8001104 <CalculateActivityAverage>
		  					CurrentActivity.length++;
 80015fa:	4b55      	ldr	r3, [pc, #340]	; (8001750 <StartActivityTask+0x260>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	3301      	adds	r3, #1
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4b53      	ldr	r3, [pc, #332]	; (8001750 <StartActivityTask+0x260>)
 8001604:	701a      	strb	r2, [r3, #0]
		  					CurrentActivity.activeDailyMinutes++;
 8001606:	4b52      	ldr	r3, [pc, #328]	; (8001750 <StartActivityTask+0x260>)
 8001608:	785b      	ldrb	r3, [r3, #1]
 800160a:	3301      	adds	r3, #1
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4b50      	ldr	r3, [pc, #320]	; (8001750 <StartActivityTask+0x260>)
 8001610:	705a      	strb	r2, [r3, #1]
		  					SDString = activityToString(CurrentActivity.lastActiveMinute);
 8001612:	4b4f      	ldr	r3, [pc, #316]	; (8001750 <StartActivityTask+0x260>)
 8001614:	789b      	ldrb	r3, [r3, #2]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fd46 	bl	80010a8 <activityToString>
 800161c:	61b8      	str	r0, [r7, #24]
							if(!activityToSD("MinActi.txt", SDString))
 800161e:	69b9      	ldr	r1, [r7, #24]
 8001620:	484e      	ldr	r0, [pc, #312]	; (800175c <StartActivityTask+0x26c>)
 8001622:	f000 fec7 	bl	80023b4 <activityToSD>
 8001626:	4603      	mov	r3, r0
 8001628:	f083 0301 	eor.w	r3, r3, #1
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d005      	beq.n	800163e <StartActivityTask+0x14e>
							{
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, SET);
 8001632:	2201      	movs	r2, #1
 8001634:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001638:	4849      	ldr	r0, [pc, #292]	; (8001760 <StartActivityTask+0x270>)
 800163a:	f002 fd1d 	bl	8004078 <HAL_GPIO_WritePin>
							}
		  					counterPM++;
 800163e:	4b46      	ldr	r3, [pc, #280]	; (8001758 <StartActivityTask+0x268>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	3301      	adds	r3, #1
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4b44      	ldr	r3, [pc, #272]	; (8001758 <StartActivityTask+0x268>)
 8001648:	701a      	strb	r2, [r3, #0]
 800164a:	e071      	b.n	8001730 <StartActivityTask+0x240>
		  				}
		  				else if(counterPM != 0 && (CurrentActivity.lastActiveMinute == noMovement || CurrentActivity.lastActiveMinute == unknown))
 800164c:	4b42      	ldr	r3, [pc, #264]	; (8001758 <StartActivityTask+0x268>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d06d      	beq.n	8001730 <StartActivityTask+0x240>
 8001654:	4b3e      	ldr	r3, [pc, #248]	; (8001750 <StartActivityTask+0x260>)
 8001656:	789b      	ldrb	r3, [r3, #2]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d003      	beq.n	8001664 <StartActivityTask+0x174>
 800165c:	4b3c      	ldr	r3, [pc, #240]	; (8001750 <StartActivityTask+0x260>)
 800165e:	789b      	ldrb	r3, [r3, #2]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d165      	bne.n	8001730 <StartActivityTask+0x240>
		  				{
		  					if(counterPauze < 2)
 8001664:	4b3f      	ldr	r3, [pc, #252]	; (8001764 <StartActivityTask+0x274>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d811      	bhi.n	8001690 <StartActivityTask+0x1a0>
		  					{
		  						CalculateActivityAverage(CurrentActivity.lastActiveMinute);
 800166c:	4b38      	ldr	r3, [pc, #224]	; (8001750 <StartActivityTask+0x260>)
 800166e:	789b      	ldrb	r3, [r3, #2]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fd47 	bl	8001104 <CalculateActivityAverage>
		  						counterPauze++;
 8001676:	4b3b      	ldr	r3, [pc, #236]	; (8001764 <StartActivityTask+0x274>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	3301      	adds	r3, #1
 800167c:	b2da      	uxtb	r2, r3
 800167e:	4b39      	ldr	r3, [pc, #228]	; (8001764 <StartActivityTask+0x274>)
 8001680:	701a      	strb	r2, [r3, #0]
		  						counterPM++;
 8001682:	4b35      	ldr	r3, [pc, #212]	; (8001758 <StartActivityTask+0x268>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	3301      	adds	r3, #1
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4b33      	ldr	r3, [pc, #204]	; (8001758 <StartActivityTask+0x268>)
 800168c:	701a      	strb	r2, [r3, #0]
 800168e:	e04f      	b.n	8001730 <StartActivityTask+0x240>
		  					}
		  					else
		  					{
		  						counterPM = 0Xff;
 8001690:	4b31      	ldr	r3, [pc, #196]	; (8001758 <StartActivityTask+0x268>)
 8001692:	22ff      	movs	r2, #255	; 0xff
 8001694:	701a      	strb	r2, [r3, #0]
		  						counterPauze = 0;
 8001696:	4b33      	ldr	r3, [pc, #204]	; (8001764 <StartActivityTask+0x274>)
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
 800169c:	e048      	b.n	8001730 <StartActivityTask+0x240>
		  			else
		  			{
		  				//calculate the avarage for total activity
		  				//and write total activity to sd

		  				current = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  				for(int i = 0; i < sizeof(CurrentActivity.activityTotal); i++)
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
 80016a8:	e01c      	b.n	80016e4 <StartActivityTask+0x1f4>
						{
							if(current <= CurrentActivity.activityTotal[i])
 80016aa:	4a29      	ldr	r2, [pc, #164]	; (8001750 <StartActivityTask+0x260>)
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	4413      	add	r3, r2
 80016b0:	3303      	adds	r3, #3
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d810      	bhi.n	80016de <StartActivityTask+0x1ee>
							{
								current = CurrentActivity.activityTotal[i];
 80016bc:	4a24      	ldr	r2, [pc, #144]	; (8001750 <StartActivityTask+0x260>)
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	4413      	add	r3, r2
 80016c2:	3303      	adds	r3, #3
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								CurrentActivity.activityTotal[i] = 0;
 80016ca:	4a21      	ldr	r2, [pc, #132]	; (8001750 <StartActivityTask+0x260>)
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	4413      	add	r3, r2
 80016d0:	3303      	adds	r3, #3
 80016d2:	2200      	movs	r2, #0
 80016d4:	701a      	strb	r2, [r3, #0]
								CurrentActivity.totalActivity = i;
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	4b1d      	ldr	r3, [pc, #116]	; (8001750 <StartActivityTask+0x260>)
 80016dc:	725a      	strb	r2, [r3, #9]
		  				for(int i = 0; i < sizeof(CurrentActivity.activityTotal); i++)
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3301      	adds	r3, #1
 80016e2:	61fb      	str	r3, [r7, #28]
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	2b03      	cmp	r3, #3
 80016e8:	d9df      	bls.n	80016aa <StartActivityTask+0x1ba>
							}
						}
		  				char numbers[10];
						sprintf(numbers, "%d", CurrentActivity.length);
 80016ea:	4b19      	ldr	r3, [pc, #100]	; (8001750 <StartActivityTask+0x260>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	461a      	mov	r2, r3
 80016f0:	f107 030c 	add.w	r3, r7, #12
 80016f4:	491c      	ldr	r1, [pc, #112]	; (8001768 <StartActivityTask+0x278>)
 80016f6:	4618      	mov	r0, r3
 80016f8:	f00f fc32 	bl	8010f60 <siprintf>
						SDString = activityToString(CurrentActivity.totalActivity);
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <StartActivityTask+0x260>)
 80016fe:	7a5b      	ldrb	r3, [r3, #9]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fcd1 	bl	80010a8 <activityToString>
 8001706:	61b8      	str	r0, [r7, #24]
		  				totalActivityToSD("MinActi.txt", numbers, SDString);
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4619      	mov	r1, r3
 8001710:	4812      	ldr	r0, [pc, #72]	; (800175c <StartActivityTask+0x26c>)
 8001712:	f000 fe7b 	bl	800240c <totalActivityToSD>

		  				//lengte van de activiteit toevoegen
		  				CurrentActivity.previousLength = CurrentActivity.length;
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <StartActivityTask+0x260>)
 8001718:	781a      	ldrb	r2, [r3, #0]
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <StartActivityTask+0x260>)
 800171c:	71da      	strb	r2, [r3, #7]
		  				CurrentActivity.length = 0;
 800171e:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <StartActivityTask+0x260>)
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
		  				counterPM = 0;
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <StartActivityTask+0x268>)
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]
		  				counterPauze = 0;
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <StartActivityTask+0x274>)
 800172c:	2200      	movs	r2, #0
 800172e:	701a      	strb	r2, [r3, #0]
		  			}
		  			counter = 0;
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <StartActivityTask+0x25c>)
 8001732:	2200      	movs	r2, #0
 8001734:	701a      	strb	r2, [r3, #0]
		  		}

		  	}

		      osDelay(100);
 8001736:	2064      	movs	r0, #100	; 0x64
 8001738:	f008 faf6 	bl	8009d28 <osDelay>
		  getActivity();
 800173c:	e6de      	b.n	80014fc <StartActivityTask+0xc>
 800173e:	bf00      	nop
 8001740:	08015194 	.word	0x08015194
 8001744:	20004dcc 	.word	0x20004dcc
 8001748:	20000238 	.word	0x20000238
 800174c:	2000023c 	.word	0x2000023c
 8001750:	20004d60 	.word	0x20004d60
 8001754:	20000240 	.word	0x20000240
 8001758:	20000244 	.word	0x20000244
 800175c:	08015198 	.word	0x08015198
 8001760:	40020400 	.word	0x40020400
 8001764:	20000245 	.word	0x20000245
 8001768:	08015170 	.word	0x08015170
 800176c:	00000000 	.word	0x00000000

08001770 <StartReadBattery>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartReadBattery */
void StartReadBattery(void *argument)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadBattery */

	/* Infinite loop */
	  for(;;)
	  {
		batteryPer = calculateBattery(CALCULATEPERCENTAGE);
 8001778:	2000      	movs	r0, #0
 800177a:	f000 f8b1 	bl	80018e0 <calculateBattery>
 800177e:	eef0 7a40 	vmov.f32	s15, s0
 8001782:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <StartReadBattery+0x70>)
 8001784:	edc3 7a00 	vstr	s15, [r3]
		batteryVol = calculateBattery(CALCULATEVOLTAGE);
 8001788:	2001      	movs	r0, #1
 800178a:	f000 f8a9 	bl	80018e0 <calculateBattery>
 800178e:	eef0 7a40 	vmov.f32	s15, s0
 8001792:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <StartReadBattery+0x74>)
 8001794:	edc3 7a00 	vstr	s15, [r3]
		//at around 20% battery remaining, turn on the red LED
		if(batteryVol < 3.2)
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <StartReadBattery+0x74>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fedb 	bl	8000558 <__aeabi_f2d>
 80017a2:	a30d      	add	r3, pc, #52	; (adr r3, 80017d8 <StartReadBattery+0x68>)
 80017a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a8:	f7ff f9a0 	bl	8000aec <__aeabi_dcmplt>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <StartReadBattery+0x50>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, SET);
 80017b2:	2201      	movs	r2, #1
 80017b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017b8:	480b      	ldr	r0, [pc, #44]	; (80017e8 <StartReadBattery+0x78>)
 80017ba:	f002 fc5d 	bl	8004078 <HAL_GPIO_WritePin>
 80017be:	e005      	b.n	80017cc <StartReadBattery+0x5c>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 80017c0:	2200      	movs	r2, #0
 80017c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017c6:	4808      	ldr	r0, [pc, #32]	; (80017e8 <StartReadBattery+0x78>)
 80017c8:	f002 fc56 	bl	8004078 <HAL_GPIO_WritePin>
		}
	    osDelay(5000);
 80017cc:	f241 3088 	movw	r0, #5000	; 0x1388
 80017d0:	f008 faaa 	bl	8009d28 <osDelay>
		batteryPer = calculateBattery(CALCULATEPERCENTAGE);
 80017d4:	e7d0      	b.n	8001778 <StartReadBattery+0x8>
 80017d6:	bf00      	nop
 80017d8:	9999999a 	.word	0x9999999a
 80017dc:	40099999 	.word	0x40099999
 80017e0:	20000230 	.word	0x20000230
 80017e4:	20000234 	.word	0x20000234
 80017e8:	40020400 	.word	0x40020400

080017ec <StartRadioSendTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRadioSendTask */
void StartRadioSendTask(void *argument)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRadioSendTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80017f4:	2001      	movs	r0, #1
 80017f6:	f008 fa97 	bl	8009d28 <osDelay>
 80017fa:	e7fb      	b.n	80017f4 <StartRadioSendTask+0x8>

080017fc <StartRadioReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRadioReceiveTask */
void StartRadioReceiveTask(void *argument)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08e      	sub	sp, #56	; 0x38
 8001800:	af04      	add	r7, sp, #16
 8001802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRadioReceiveTask */

	// Start listening on the receiver
	receiverEnable();
 8001804:	f00b fcbc 	bl	800d180 <receiverEnable>

	bool doAck = false;
 8001808:	2300      	movs	r3, #0
 800180a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	char * incoming = "";
 800180e:	4b2f      	ldr	r3, [pc, #188]	; (80018cc <StartRadioReceiveTask+0xd0>)
 8001810:	623b      	str	r3, [r7, #32]

	for(;;)
	{
		doAck = false;
 8001812:	2300      	movs	r3, #0
 8001814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		// See if there are messages in the queue
		if(receiverCheckMessage())
 8001818:	f00b fcc6 	bl	800d1a8 <receiverCheckMessage>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d04d      	beq.n	80018be <StartRadioReceiveTask+0xc2>
		{
			// Get the first message from the queue
			receiverPopMessage(&incoming);
 8001822:	f107 0320 	add.w	r3, r7, #32
 8001826:	4618      	mov	r0, r3
 8001828:	f00b fcc8 	bl	800d1bc <receiverPopMessage>

			// Read the contents of the file

			if(strncmp(incoming, "accel:(", 6) == 0)
 800182c:	6a3b      	ldr	r3, [r7, #32]
 800182e:	2206      	movs	r2, #6
 8001830:	4927      	ldr	r1, [pc, #156]	; (80018d0 <StartRadioReceiveTask+0xd4>)
 8001832:	4618      	mov	r0, r3
 8001834:	f00f fc25 	bl	8011082 <strncmp>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d126      	bne.n	800188c <StartRadioReceiveTask+0x90>
			{
				// Read accelero/gyro data
				int MPUData[6] = {0,0,0,0,0,0};
 800183e:	f107 0308 	add.w	r3, r7, #8
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
 800184c:	611a      	str	r2, [r3, #16]
 800184e:	615a      	str	r2, [r3, #20]

				sscanf(incoming,
 8001850:	6a38      	ldr	r0, [r7, #32]
 8001852:	f107 0308 	add.w	r3, r7, #8
 8001856:	1d19      	adds	r1, r3, #4
 8001858:	f107 0208 	add.w	r2, r7, #8
 800185c:	f107 0308 	add.w	r3, r7, #8
 8001860:	3314      	adds	r3, #20
 8001862:	9303      	str	r3, [sp, #12]
 8001864:	f107 0308 	add.w	r3, r7, #8
 8001868:	3310      	adds	r3, #16
 800186a:	9302      	str	r3, [sp, #8]
 800186c:	f107 0308 	add.w	r3, r7, #8
 8001870:	330c      	adds	r3, #12
 8001872:	9301      	str	r3, [sp, #4]
 8001874:	f107 0308 	add.w	r3, r7, #8
 8001878:	3308      	adds	r3, #8
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	460b      	mov	r3, r1
 800187e:	4915      	ldr	r1, [pc, #84]	; (80018d4 <StartRadioReceiveTask+0xd8>)
 8001880:	f00f fb8e 	bl	8010fa0 <siscanf>
					&MPUData[5]
				);

				// TODO: Handle accelero/gyro data

				doAck = true;
 8001884:	2301      	movs	r3, #1
 8001886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800188a:	e00b      	b.n	80018a4 <StartRadioReceiveTask+0xa8>
			}
			else if(strncmp(incoming, "step", 4) == 0)
 800188c:	6a3b      	ldr	r3, [r7, #32]
 800188e:	2204      	movs	r2, #4
 8001890:	4911      	ldr	r1, [pc, #68]	; (80018d8 <StartRadioReceiveTask+0xdc>)
 8001892:	4618      	mov	r0, r3
 8001894:	f00f fbf5 	bl	8011082 <strncmp>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d102      	bne.n	80018a4 <StartRadioReceiveTask+0xa8>
			{
				// TODO: Handle step

				doAck = true;
 800189e:	2301      	movs	r3, #1
 80018a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}

			doAck = true;
 80018a4:	2301      	movs	r3, #1
 80018a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if(doAck)
 80018aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d005      	beq.n	80018be <StartRadioReceiveTask+0xc2>
			{
				receiverDisable();
 80018b2:	f00b fc6f 	bl	800d194 <receiverDisable>
				transmitterSendAck();
 80018b6:	f00b fc4f 	bl	800d158 <transmitterSendAck>
				receiverEnable();
 80018ba:	f00b fc61 	bl	800d180 <receiverEnable>
			}
		}

		incoming = "";
 80018be:	4b03      	ldr	r3, [pc, #12]	; (80018cc <StartRadioReceiveTask+0xd0>)
 80018c0:	623b      	str	r3, [r7, #32]

		// If there is no delay here, other tasks will never run
		osDelay(100);
 80018c2:	2064      	movs	r0, #100	; 0x64
 80018c4:	f008 fa30 	bl	8009d28 <osDelay>
		doAck = false;
 80018c8:	e7a3      	b.n	8001812 <StartRadioReceiveTask+0x16>
 80018ca:	bf00      	nop
 80018cc:	08015194 	.word	0x08015194
 80018d0:	080151a4 	.word	0x080151a4
 80018d4:	080151ac 	.word	0x080151ac
 80018d8:	080151c8 	.word	0x080151c8
 80018dc:	00000000 	.word	0x00000000

080018e0 <calculateBattery>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

float calculateBattery(uint8_t whatCalculation)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
	float result = -1.0;
 80018ea:	4b2b      	ldr	r3, [pc, #172]	; (8001998 <calculateBattery+0xb8>)
 80018ec:	60fb      	str	r3, [r7, #12]
	uint16_t localADC = ADCValue;	//grab the last conversion value
 80018ee:	4b2b      	ldr	r3, [pc, #172]	; (800199c <calculateBattery+0xbc>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	817b      	strh	r3, [r7, #10]
	HAL_ADC_Start_IT(&hadc1);		//start a new conversion already so it's ready for the next time the function is called
 80018f4:	482a      	ldr	r0, [pc, #168]	; (80019a0 <calculateBattery+0xc0>)
 80018f6:	f001 fc67 	bl	80031c8 <HAL_ADC_Start_IT>

	if(whatCalculation == CALCULATEPERCENTAGE)
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d11e      	bne.n	800193e <calculateBattery+0x5e>
	{
		result = 71.428571428571 * calculateBattery(CALCULATEVOLTAGE) - 200;
 8001900:	2001      	movs	r0, #1
 8001902:	f7ff ffed 	bl	80018e0 <calculateBattery>
 8001906:	ee10 3a10 	vmov	r3, s0
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe fe24 	bl	8000558 <__aeabi_f2d>
 8001910:	a31d      	add	r3, pc, #116	; (adr r3, 8001988 <calculateBattery+0xa8>)
 8001912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001916:	f7fe fe77 	bl	8000608 <__aeabi_dmul>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	4b1f      	ldr	r3, [pc, #124]	; (80019a4 <calculateBattery+0xc4>)
 8001928:	f7fe fcb6 	bl	8000298 <__aeabi_dsub>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	f7ff f960 	bl	8000bf8 <__aeabi_d2f>
 8001938:	4603      	mov	r3, r0
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	e01c      	b.n	8001978 <calculateBattery+0x98>
	}
	else if(whatCalculation == CALCULATEVOLTAGE)
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d119      	bne.n	8001978 <calculateBattery+0x98>
	{
		result = (localADC / (float)4095) * 4.2;
 8001944:	897b      	ldrh	r3, [r7, #10]
 8001946:	ee07 3a90 	vmov	s15, r3
 800194a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800194e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80019a8 <calculateBattery+0xc8>
 8001952:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001956:	ee16 0a90 	vmov	r0, s13
 800195a:	f7fe fdfd 	bl	8000558 <__aeabi_f2d>
 800195e:	a30c      	add	r3, pc, #48	; (adr r3, 8001990 <calculateBattery+0xb0>)
 8001960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001964:	f7fe fe50 	bl	8000608 <__aeabi_dmul>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	f7ff f942 	bl	8000bf8 <__aeabi_d2f>
 8001974:	4603      	mov	r3, r0
 8001976:	60fb      	str	r3, [r7, #12]
	}
	return result;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	ee07 3a90 	vmov	s15, r3
}
 800197e:	eeb0 0a67 	vmov.f32	s0, s15
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	b6db6d99 	.word	0xb6db6d99
 800198c:	4051db6d 	.word	0x4051db6d
 8001990:	cccccccd 	.word	0xcccccccd
 8001994:	4010cccc 	.word	0x4010cccc
 8001998:	bf800000 	.word	0xbf800000
 800199c:	2000022c 	.word	0x2000022c
 80019a0:	20004d6c 	.word	0x20004d6c
 80019a4:	40690000 	.word	0x40690000
 80019a8:	457ff000 	.word	0x457ff000

080019ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	; 0x28
 80019b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]
 80019c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	4b3e      	ldr	r3, [pc, #248]	; (8001ac0 <MX_GPIO_Init+0x114>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a3d      	ldr	r2, [pc, #244]	; (8001ac0 <MX_GPIO_Init+0x114>)
 80019cc:	f043 0304 	orr.w	r3, r3, #4
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b3b      	ldr	r3, [pc, #236]	; (8001ac0 <MX_GPIO_Init+0x114>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b37      	ldr	r3, [pc, #220]	; (8001ac0 <MX_GPIO_Init+0x114>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a36      	ldr	r2, [pc, #216]	; (8001ac0 <MX_GPIO_Init+0x114>)
 80019e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b34      	ldr	r3, [pc, #208]	; (8001ac0 <MX_GPIO_Init+0x114>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	4b30      	ldr	r3, [pc, #192]	; (8001ac0 <MX_GPIO_Init+0x114>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a2f      	ldr	r2, [pc, #188]	; (8001ac0 <MX_GPIO_Init+0x114>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ac0 <MX_GPIO_Init+0x114>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	4b29      	ldr	r3, [pc, #164]	; (8001ac0 <MX_GPIO_Init+0x114>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a28      	ldr	r2, [pc, #160]	; (8001ac0 <MX_GPIO_Init+0x114>)
 8001a20:	f043 0302 	orr.w	r3, r3, #2
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b26      	ldr	r3, [pc, #152]	; (8001ac0 <MX_GPIO_Init+0x114>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2110      	movs	r1, #16
 8001a36:	4823      	ldr	r0, [pc, #140]	; (8001ac4 <MX_GPIO_Init+0x118>)
 8001a38:	f002 fb1e 	bl	8004078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RADIO_SEND_Pin|LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f240 3102 	movw	r1, #770	; 0x302
 8001a42:	4821      	ldr	r0, [pc, #132]	; (8001ac8 <MX_GPIO_Init+0x11c>)
 8001a44:	f002 fb18 	bl	8004078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001a48:	2310      	movs	r3, #16
 8001a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	2300      	movs	r3, #0
 8001a56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4819      	ldr	r0, [pc, #100]	; (8001ac4 <MX_GPIO_Init+0x118>)
 8001a60:	f002 f96e 	bl	8003d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_SEND_Pin;
 8001a64:	2302      	movs	r3, #2
 8001a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a70:	2302      	movs	r3, #2
 8001a72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RADIO_SEND_GPIO_Port, &GPIO_InitStruct);
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4813      	ldr	r0, [pc, #76]	; (8001ac8 <MX_GPIO_Init+0x11c>)
 8001a7c:	f002 f960 	bl	8003d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_RECEIVE_Pin;
 8001a80:	2304      	movs	r3, #4
 8001a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a84:	2300      	movs	r3, #0
 8001a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RADIO_RECEIVE_GPIO_Port, &GPIO_InitStruct);
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	4619      	mov	r1, r3
 8001a92:	480d      	ldr	r0, [pc, #52]	; (8001ac8 <MX_GPIO_Init+0x11c>)
 8001a94:	f002 f954 	bl	8003d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8001a98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aaa:	f107 0314 	add.w	r3, r7, #20
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <MX_GPIO_Init+0x11c>)
 8001ab2:	f002 f945 	bl	8003d40 <HAL_GPIO_Init>

}
 8001ab6:	bf00      	nop
 8001ab8:	3728      	adds	r7, #40	; 0x28
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40020000 	.word	0x40020000
 8001ac8:	40020400 	.word	0x40020400

08001acc <GPS_Init>:
	CDC_Transmit_FS((unsigned char *) buf, (uint16_t) strlen(buf));
}
#endif

void GPS_Init()
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &GPS.rxTmp, 1);
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	4903      	ldr	r1, [pc, #12]	; (8001ae0 <GPS_Init+0x14>)
 8001ad4:	4803      	ldr	r0, [pc, #12]	; (8001ae4 <GPS_Init+0x18>)
 8001ad6:	f004 fac6 	bl	8006066 <HAL_UART_Receive_IT>
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20005028 	.word	0x20005028
 8001ae4:	2000561c 	.word	0x2000561c

08001ae8 <GPS_UART_CallBack>:


void GPS_UART_CallBack(){
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
	GPS.LastTime=HAL_GetTick();
 8001aec:	f001 fb1c 	bl	8003128 <HAL_GetTick>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4a35      	ldr	r2, [pc, #212]	; (8001bc8 <GPS_UART_CallBack+0xe0>)
 8001af4:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
	static int i = 0;
	if(GPS.rxTmp != '\n' && GPS.rxIndex < sizeof(GPS.rxBuffer)-2)
 8001af8:	4b33      	ldr	r3, [pc, #204]	; (8001bc8 <GPS_UART_CallBack+0xe0>)
 8001afa:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8001afe:	2b0a      	cmp	r3, #10
 8001b00:	d044      	beq.n	8001b8c <GPS_UART_CallBack+0xa4>
 8001b02:	4b31      	ldr	r3, [pc, #196]	; (8001bc8 <GPS_UART_CallBack+0xe0>)
 8001b04:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 8001b08:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8001b0c:	d23e      	bcs.n	8001b8c <GPS_UART_CallBack+0xa4>
	{
		if(i % 2)
 8001b0e:	4b2f      	ldr	r3, [pc, #188]	; (8001bcc <GPS_UART_CallBack+0xe4>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d032      	beq.n	8001b80 <GPS_UART_CallBack+0x98>
		{
			if(GPS.rxBuffer[GPS.rxIndex - 1]== ',' && GPS.rxTmp == ',') {  // check n-1 and n chr's for two ',,'
 8001b1a:	4b2b      	ldr	r3, [pc, #172]	; (8001bc8 <GPS_UART_CallBack+0xe0>)
 8001b1c:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 8001b20:	3b01      	subs	r3, #1
 8001b22:	4a29      	ldr	r2, [pc, #164]	; (8001bc8 <GPS_UART_CallBack+0xe0>)
 8001b24:	4413      	add	r3, r2
 8001b26:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8001b2a:	2b2c      	cmp	r3, #44	; 0x2c
 8001b2c:	d115      	bne.n	8001b5a <GPS_UART_CallBack+0x72>
 8001b2e:	4b26      	ldr	r3, [pc, #152]	; (8001bc8 <GPS_UART_CallBack+0xe0>)
 8001b30:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8001b34:	2b2c      	cmp	r3, #44	; 0x2c
 8001b36:	d110      	bne.n	8001b5a <GPS_UART_CallBack+0x72>
				GPS.rxBuffer[GPS.rxIndex] = '0';      // add a '0'
 8001b38:	4b23      	ldr	r3, [pc, #140]	; (8001bc8 <GPS_UART_CallBack+0xe0>)
 8001b3a:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <GPS_UART_CallBack+0xe0>)
 8001b42:	4413      	add	r3, r2
 8001b44:	2230      	movs	r2, #48	; 0x30
 8001b46:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
				GPS.rxIndex++;
 8001b4a:	4b1f      	ldr	r3, [pc, #124]	; (8001bc8 <GPS_UART_CallBack+0xe0>)
 8001b4c:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 8001b50:	3301      	adds	r3, #1
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	4b1c      	ldr	r3, [pc, #112]	; (8001bc8 <GPS_UART_CallBack+0xe0>)
 8001b56:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
			}

			GPS.rxBuffer[GPS.rxIndex] = GPS.rxTmp;
 8001b5a:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <GPS_UART_CallBack+0xe0>)
 8001b5c:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 8001b60:	4619      	mov	r1, r3
 8001b62:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <GPS_UART_CallBack+0xe0>)
 8001b64:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 8001b68:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <GPS_UART_CallBack+0xe0>)
 8001b6a:	440b      	add	r3, r1
 8001b6c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

			GPS.rxIndex++;
 8001b70:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <GPS_UART_CallBack+0xe0>)
 8001b72:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 8001b76:	3301      	adds	r3, #1
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <GPS_UART_CallBack+0xe0>)
 8001b7c:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
		}
		i++;
 8001b80:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <GPS_UART_CallBack+0xe4>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	3301      	adds	r3, #1
 8001b86:	4a11      	ldr	r2, [pc, #68]	; (8001bcc <GPS_UART_CallBack+0xe4>)
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	e015      	b.n	8001bb8 <GPS_UART_CallBack+0xd0>
	}
	else
	{

		if(GPS_validate((char*) GPS.rxBuffer))
 8001b8c:	4810      	ldr	r0, [pc, #64]	; (8001bd0 <GPS_UART_CallBack+0xe8>)
 8001b8e:	f000 f825 	bl	8001bdc <GPS_validate>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d002      	beq.n	8001b9e <GPS_UART_CallBack+0xb6>
			GPS_parse((char*) GPS.rxBuffer);
 8001b98:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <GPS_UART_CallBack+0xe8>)
 8001b9a:	f000 f881 	bl	8001ca0 <GPS_parse>
		GPS.rxIndex=0;
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <GPS_UART_CallBack+0xe0>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
		i = 0;
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <GPS_UART_CallBack+0xe4>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
		memset(GPS.rxBuffer, 0, sizeof(GPS.rxBuffer));
 8001bac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4807      	ldr	r0, [pc, #28]	; (8001bd0 <GPS_UART_CallBack+0xe8>)
 8001bb4:	f00e fa4e 	bl	8010054 <memset>
	}
	HAL_UART_Receive_IT(GPS_USART, &GPS.rxTmp, 1);
 8001bb8:	2201      	movs	r2, #1
 8001bba:	4906      	ldr	r1, [pc, #24]	; (8001bd4 <GPS_UART_CallBack+0xec>)
 8001bbc:	4806      	ldr	r0, [pc, #24]	; (8001bd8 <GPS_UART_CallBack+0xf0>)
 8001bbe:	f004 fa52 	bl	8006066 <HAL_UART_Receive_IT>
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20004dcc 	.word	0x20004dcc
 8001bcc:	20000248 	.word	0x20000248
 8001bd0:	20004e25 	.word	0x20004e25
 8001bd4:	20005028 	.word	0x20005028
 8001bd8:	2000561c 	.word	0x2000561c

08001bdc <GPS_validate>:


int GPS_validate(char *nmeastr){
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	613b      	str	r3, [r7, #16]


    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b24      	cmp	r3, #36	; 0x24
 8001bf6:	d103      	bne.n	8001c00 <GPS_validate+0x24>
        i++;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	617b      	str	r3, [r7, #20]
    else
        return 0;


    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001bfe:	e00c      	b.n	8001c1a <GPS_validate+0x3e>
        return 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	e047      	b.n	8001c94 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	4053      	eors	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        i++;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	3301      	adds	r3, #1
 8001c18:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	4413      	add	r3, r2
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d008      	beq.n	8001c38 <GPS_validate+0x5c>
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b2a      	cmp	r3, #42	; 0x2a
 8001c30:	d002      	beq.n	8001c38 <GPS_validate+0x5c>
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2b4a      	cmp	r3, #74	; 0x4a
 8001c36:	dde5      	ble.n	8001c04 <GPS_validate+0x28>
    }

    if(i >= 75){
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	2b4a      	cmp	r3, #74	; 0x4a
 8001c3c:	dd01      	ble.n	8001c42 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e028      	b.n	8001c94 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	4413      	add	r3, r2
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b2a      	cmp	r3, #42	; 0x2a
 8001c4c:	d119      	bne.n	8001c82 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	3301      	adds	r3, #1
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	3302      	adds	r3, #2
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8001c6a:	f107 0308 	add.w	r3, r7, #8
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	490a      	ldr	r1, [pc, #40]	; (8001c9c <GPS_validate+0xc0>)
 8001c72:	4618      	mov	r0, r3
 8001c74:	f00f f974 	bl	8010f60 <siprintf>

    return((checkcalcstr[0] == check[0])
 8001c78:	7a3a      	ldrb	r2, [r7, #8]
 8001c7a:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d108      	bne.n	8001c92 <GPS_validate+0xb6>
 8001c80:	e001      	b.n	8001c86 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8001c82:	2300      	movs	r3, #0
 8001c84:	e006      	b.n	8001c94 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001c86:	7a7a      	ldrb	r2, [r7, #9]
 8001c88:	7b7b      	ldrb	r3, [r7, #13]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d101      	bne.n	8001c92 <GPS_validate+0xb6>
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <GPS_validate+0xb8>
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	080151d0 	.word	0x080151d0

08001ca0 <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	; 0x28
 8001ca4:	af08      	add	r7, sp, #32
 8001ca6:	6078      	str	r0, [r7, #4]



	   if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 8001ca8:	2206      	movs	r2, #6
 8001caa:	494a      	ldr	r1, [pc, #296]	; (8001dd4 <GPS_parse+0x134>)
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f00f f9e8 	bl	8011082 <strncmp>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d118      	bne.n	8001cea <GPS_parse+0x4a>

	    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1)
 8001cb8:	4b47      	ldr	r3, [pc, #284]	; (8001dd8 <GPS_parse+0x138>)
 8001cba:	9307      	str	r3, [sp, #28]
 8001cbc:	4b47      	ldr	r3, [pc, #284]	; (8001ddc <GPS_parse+0x13c>)
 8001cbe:	9306      	str	r3, [sp, #24]
 8001cc0:	4b47      	ldr	r3, [pc, #284]	; (8001de0 <GPS_parse+0x140>)
 8001cc2:	9305      	str	r3, [sp, #20]
 8001cc4:	4b47      	ldr	r3, [pc, #284]	; (8001de4 <GPS_parse+0x144>)
 8001cc6:	9304      	str	r3, [sp, #16]
 8001cc8:	4b47      	ldr	r3, [pc, #284]	; (8001de8 <GPS_parse+0x148>)
 8001cca:	9303      	str	r3, [sp, #12]
 8001ccc:	4b47      	ldr	r3, [pc, #284]	; (8001dec <GPS_parse+0x14c>)
 8001cce:	9302      	str	r3, [sp, #8]
 8001cd0:	4b47      	ldr	r3, [pc, #284]	; (8001df0 <GPS_parse+0x150>)
 8001cd2:	9301      	str	r3, [sp, #4]
 8001cd4:	4b47      	ldr	r3, [pc, #284]	; (8001df4 <GPS_parse+0x154>)
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	4b47      	ldr	r3, [pc, #284]	; (8001df8 <GPS_parse+0x158>)
 8001cda:	4a48      	ldr	r2, [pc, #288]	; (8001dfc <GPS_parse+0x15c>)
 8001cdc:	4948      	ldr	r1, [pc, #288]	; (8001e00 <GPS_parse+0x160>)
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f00f f95e 	bl	8010fa0 <siscanf>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	e070      	b.n	8001dcc <GPS_parse+0x12c>
	    		return;
	    }
	    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 8001cea:	2206      	movs	r2, #6
 8001cec:	4945      	ldr	r1, [pc, #276]	; (8001e04 <GPS_parse+0x164>)
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f00f f9c7 	bl	8011082 <strncmp>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d114      	bne.n	8001d24 <GPS_parse+0x84>

	    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 8001cfa:	4b43      	ldr	r3, [pc, #268]	; (8001e08 <GPS_parse+0x168>)
 8001cfc:	9305      	str	r3, [sp, #20]
 8001cfe:	4b43      	ldr	r3, [pc, #268]	; (8001e0c <GPS_parse+0x16c>)
 8001d00:	9304      	str	r3, [sp, #16]
 8001d02:	4b43      	ldr	r3, [pc, #268]	; (8001e10 <GPS_parse+0x170>)
 8001d04:	9303      	str	r3, [sp, #12]
 8001d06:	4b39      	ldr	r3, [pc, #228]	; (8001dec <GPS_parse+0x14c>)
 8001d08:	9302      	str	r3, [sp, #8]
 8001d0a:	4b39      	ldr	r3, [pc, #228]	; (8001df0 <GPS_parse+0x150>)
 8001d0c:	9301      	str	r3, [sp, #4]
 8001d0e:	4b39      	ldr	r3, [pc, #228]	; (8001df4 <GPS_parse+0x154>)
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	4b39      	ldr	r3, [pc, #228]	; (8001df8 <GPS_parse+0x158>)
 8001d14:	4a39      	ldr	r2, [pc, #228]	; (8001dfc <GPS_parse+0x15c>)
 8001d16:	493f      	ldr	r1, [pc, #252]	; (8001e14 <GPS_parse+0x174>)
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f00f f941 	bl	8010fa0 <siscanf>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	e053      	b.n	8001dcc <GPS_parse+0x12c>
	    		return;
	    }
	    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 8001d24:	2206      	movs	r2, #6
 8001d26:	493c      	ldr	r1, [pc, #240]	; (8001e18 <GPS_parse+0x178>)
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f00f f9aa 	bl	8011082 <strncmp>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d12f      	bne.n	8001d94 <GPS_parse+0xf4>

	        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 8001d34:	4b39      	ldr	r3, [pc, #228]	; (8001e1c <GPS_parse+0x17c>)
 8001d36:	9303      	str	r3, [sp, #12]
 8001d38:	4b30      	ldr	r3, [pc, #192]	; (8001dfc <GPS_parse+0x15c>)
 8001d3a:	9302      	str	r3, [sp, #8]
 8001d3c:	4b2b      	ldr	r3, [pc, #172]	; (8001dec <GPS_parse+0x14c>)
 8001d3e:	9301      	str	r3, [sp, #4]
 8001d40:	4b2b      	ldr	r3, [pc, #172]	; (8001df0 <GPS_parse+0x150>)
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	4b2b      	ldr	r3, [pc, #172]	; (8001df4 <GPS_parse+0x154>)
 8001d46:	4a2c      	ldr	r2, [pc, #176]	; (8001df8 <GPS_parse+0x158>)
 8001d48:	4935      	ldr	r1, [pc, #212]	; (8001e20 <GPS_parse+0x180>)
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f00f f928 	bl	8010fa0 <siscanf>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	dd3a      	ble.n	8001dcc <GPS_parse+0x12c>
	        {
				GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001d56:	4b33      	ldr	r3, [pc, #204]	; (8001e24 <GPS_parse+0x184>)
 8001d58:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d5c:	4b31      	ldr	r3, [pc, #196]	; (8001e24 <GPS_parse+0x184>)
 8001d5e:	7f1b      	ldrb	r3, [r3, #28]
 8001d60:	4618      	mov	r0, r3
 8001d62:	eeb0 0a67 	vmov.f32	s0, s15
 8001d66:	f000 f871 	bl	8001e4c <GPS_nmea_to_dec>
 8001d6a:	eef0 7a40 	vmov.f32	s15, s0
 8001d6e:	4b2d      	ldr	r3, [pc, #180]	; (8001e24 <GPS_parse+0x184>)
 8001d70:	edc3 7a01 	vstr	s15, [r3, #4]
				GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001d74:	4b2b      	ldr	r3, [pc, #172]	; (8001e24 <GPS_parse+0x184>)
 8001d76:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d7a:	4b2a      	ldr	r3, [pc, #168]	; (8001e24 <GPS_parse+0x184>)
 8001d7c:	7f5b      	ldrb	r3, [r3, #29]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	eeb0 0a67 	vmov.f32	s0, s15
 8001d84:	f000 f862 	bl	8001e4c <GPS_nmea_to_dec>
 8001d88:	eef0 7a40 	vmov.f32	s15, s0
 8001d8c:	4b25      	ldr	r3, [pc, #148]	; (8001e24 <GPS_parse+0x184>)
 8001d8e:	edc3 7a00 	vstr	s15, [r3]

				return;
 8001d92:	e01b      	b.n	8001dcc <GPS_parse+0x12c>
			}
	    }
	    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 8001d94:	2206      	movs	r2, #6
 8001d96:	4924      	ldr	r1, [pc, #144]	; (8001e28 <GPS_parse+0x188>)
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f00f f972 	bl	8011082 <strncmp>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d113      	bne.n	8001dcc <GPS_parse+0x12c>

			if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8001da4:	4b21      	ldr	r3, [pc, #132]	; (8001e2c <GPS_parse+0x18c>)
 8001da6:	9305      	str	r3, [sp, #20]
 8001da8:	4b21      	ldr	r3, [pc, #132]	; (8001e30 <GPS_parse+0x190>)
 8001daa:	9304      	str	r3, [sp, #16]
 8001dac:	4b21      	ldr	r3, [pc, #132]	; (8001e34 <GPS_parse+0x194>)
 8001dae:	9303      	str	r3, [sp, #12]
 8001db0:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <GPS_parse+0x170>)
 8001db2:	9302      	str	r3, [sp, #8]
 8001db4:	4b20      	ldr	r3, [pc, #128]	; (8001e38 <GPS_parse+0x198>)
 8001db6:	9301      	str	r3, [sp, #4]
 8001db8:	4b20      	ldr	r3, [pc, #128]	; (8001e3c <GPS_parse+0x19c>)
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	4b20      	ldr	r3, [pc, #128]	; (8001e40 <GPS_parse+0x1a0>)
 8001dbe:	4a21      	ldr	r2, [pc, #132]	; (8001e44 <GPS_parse+0x1a4>)
 8001dc0:	4921      	ldr	r1, [pc, #132]	; (8001e48 <GPS_parse+0x1a8>)
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f00f f8ec 	bl	8010fa0 <siscanf>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
				return;

	    }
	}
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	080151d8 	.word	0x080151d8
 8001dd8:	20004dfc 	.word	0x20004dfc
 8001ddc:	20004df8 	.word	0x20004df8
 8001de0:	20004df4 	.word	0x20004df4
 8001de4:	20004df0 	.word	0x20004df0
 8001de8:	20004dec 	.word	0x20004dec
 8001dec:	20004de9 	.word	0x20004de9
 8001df0:	20004ddc 	.word	0x20004ddc
 8001df4:	20004de8 	.word	0x20004de8
 8001df8:	20004de0 	.word	0x20004de0
 8001dfc:	20004de4 	.word	0x20004de4
 8001e00:	080151e0 	.word	0x080151e0
 8001e04:	08015208 	.word	0x08015208
 8001e08:	20004e08 	.word	0x20004e08
 8001e0c:	20004e04 	.word	0x20004e04
 8001e10:	20004e00 	.word	0x20004e00
 8001e14:	08015210 	.word	0x08015210
 8001e18:	08015230 	.word	0x08015230
 8001e1c:	20004e0c 	.word	0x20004e0c
 8001e20:	08015238 	.word	0x08015238
 8001e24:	20004dcc 	.word	0x20004dcc
 8001e28:	08015254 	.word	0x08015254
 8001e2c:	20004e24 	.word	0x20004e24
 8001e30:	20004e20 	.word	0x20004e20
 8001e34:	20004e1d 	.word	0x20004e1d
 8001e38:	20004e1c 	.word	0x20004e1c
 8001e3c:	20004e18 	.word	0x20004e18
 8001e40:	20004e14 	.word	0x20004e14
 8001e44:	20004e10 	.word	0x20004e10
 8001e48:	0801525c 	.word	0x0801525c

08001e4c <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8001e4c:	b480      	push	{r7}
 8001e4e:	b087      	sub	sp, #28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e56:	4603      	mov	r3, r0
 8001e58:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8001e5a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e5e:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001ee0 <GPS_nmea_to_dec+0x94>
 8001e62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e6a:	ee17 3a90 	vmov	r3, s15
 8001e6e:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	2264      	movs	r2, #100	; 0x64
 8001e74:	fb02 f303 	mul.w	r3, r2, r3
 8001e78:	ee07 3a90 	vmov	s15, r3
 8001e7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e80:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e88:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8001e8c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e90:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001ee4 <GPS_nmea_to_dec+0x98>
 8001e94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e98:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	ee07 3a90 	vmov	s15, r3
 8001ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea6:	ed97 7a02 	vldr	s14, [r7, #8]
 8001eaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eae:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8001eb2:	78fb      	ldrb	r3, [r7, #3]
 8001eb4:	2b53      	cmp	r3, #83	; 0x53
 8001eb6:	d002      	beq.n	8001ebe <GPS_nmea_to_dec+0x72>
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	2b57      	cmp	r3, #87	; 0x57
 8001ebc:	d105      	bne.n	8001eca <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8001ebe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ec2:	eef1 7a67 	vneg.f32	s15, s15
 8001ec6:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	ee07 3a90 	vmov	s15, r3
}
 8001ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ed4:	371c      	adds	r7, #28
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	42c80000 	.word	0x42c80000
 8001ee4:	42700000 	.word	0x42700000

08001ee8 <getTime>:

char* getTime()
{
 8001ee8:	b5b0      	push	{r4, r5, r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af04      	add	r7, sp, #16

	char *toArray;

	toArray = malloc (sizeof (char) * 10);
 8001eee:	200a      	movs	r0, #10
 8001ef0:	f00e f878 	bl	800ffe4 <malloc>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	607b      	str	r3, [r7, #4]
	float time = GPS.utc_time + 20000; //make it CET
 8001ef8:	4b33      	ldr	r3, [pc, #204]	; (8001fc8 <getTime+0xe0>)
 8001efa:	edd3 7a06 	vldr	s15, [r3, #24]
 8001efe:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001fcc <getTime+0xe4>
 8001f02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f06:	edc7 7a00 	vstr	s15, [r7]
	sprintf(toArray, "%f", time );
 8001f0a:	6838      	ldr	r0, [r7, #0]
 8001f0c:	f7fe fb24 	bl	8000558 <__aeabi_f2d>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	492e      	ldr	r1, [pc, #184]	; (8001fd0 <getTime+0xe8>)
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f00f f822 	bl	8010f60 <siprintf>

	if(GPS.utc_time == 0)
 8001f1c:	4b2a      	ldr	r3, [pc, #168]	; (8001fc8 <getTime+0xe0>)
 8001f1e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001f22:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f2a:	d102      	bne.n	8001f32 <getTime+0x4a>
	{
		CurrentActivity.activeDailyMinutes = 0;
 8001f2c:	4b29      	ldr	r3, [pc, #164]	; (8001fd4 <getTime+0xec>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	705a      	strb	r2, [r3, #1]
	}

	if(time < 100000)
 8001f32:	edd7 7a00 	vldr	s15, [r7]
 8001f36:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001fd8 <getTime+0xf0>
 8001f3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f42:	d51b      	bpl.n	8001f7c <getTime+0x94>
		sprintf(toArray, "%c:%c%c:%c%c", toArray[0], toArray[1], toArray[2], toArray[3], toArray[4]);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	461c      	mov	r4, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3302      	adds	r3, #2
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3303      	adds	r3, #3
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	4619      	mov	r1, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3304      	adds	r3, #4
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	9302      	str	r3, [sp, #8]
 8001f6a:	9101      	str	r1, [sp, #4]
 8001f6c:	9200      	str	r2, [sp, #0]
 8001f6e:	4623      	mov	r3, r4
 8001f70:	4602      	mov	r2, r0
 8001f72:	491a      	ldr	r1, [pc, #104]	; (8001fdc <getTime+0xf4>)
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f00e fff3 	bl	8010f60 <siprintf>
 8001f7a:	e01f      	b.n	8001fbc <getTime+0xd4>
	else
		sprintf(toArray, "%c%c:%c%c:%c%c", toArray[0], toArray[1], toArray[2], toArray[3], toArray[4], toArray[5]);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	461c      	mov	r4, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3301      	adds	r3, #1
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	461d      	mov	r5, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	3302      	adds	r3, #2
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	461a      	mov	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3303      	adds	r3, #3
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	4619      	mov	r1, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3305      	adds	r3, #5
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	9303      	str	r3, [sp, #12]
 8001faa:	9002      	str	r0, [sp, #8]
 8001fac:	9101      	str	r1, [sp, #4]
 8001fae:	9200      	str	r2, [sp, #0]
 8001fb0:	462b      	mov	r3, r5
 8001fb2:	4622      	mov	r2, r4
 8001fb4:	490a      	ldr	r1, [pc, #40]	; (8001fe0 <getTime+0xf8>)
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f00e ffd2 	bl	8010f60 <siprintf>

	return toArray;
 8001fbc:	687b      	ldr	r3, [r7, #4]


}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bdb0      	pop	{r4, r5, r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20004dcc 	.word	0x20004dcc
 8001fcc:	469c4000 	.word	0x469c4000
 8001fd0:	0801527c 	.word	0x0801527c
 8001fd4:	20004d60 	.word	0x20004d60
 8001fd8:	47c35000 	.word	0x47c35000
 8001fdc:	08015280 	.word	0x08015280
 8001fe0:	08015290 	.word	0x08015290

08001fe4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fe8:	4b12      	ldr	r3, [pc, #72]	; (8002034 <MX_I2C1_Init+0x50>)
 8001fea:	4a13      	ldr	r2, [pc, #76]	; (8002038 <MX_I2C1_Init+0x54>)
 8001fec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <MX_I2C1_Init+0x50>)
 8001ff0:	4a12      	ldr	r2, [pc, #72]	; (800203c <MX_I2C1_Init+0x58>)
 8001ff2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <MX_I2C1_Init+0x50>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <MX_I2C1_Init+0x50>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <MX_I2C1_Init+0x50>)
 8002002:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002006:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002008:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <MX_I2C1_Init+0x50>)
 800200a:	2200      	movs	r2, #0
 800200c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800200e:	4b09      	ldr	r3, [pc, #36]	; (8002034 <MX_I2C1_Init+0x50>)
 8002010:	2200      	movs	r2, #0
 8002012:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002014:	4b07      	ldr	r3, [pc, #28]	; (8002034 <MX_I2C1_Init+0x50>)
 8002016:	2200      	movs	r2, #0
 8002018:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800201a:	4b06      	ldr	r3, [pc, #24]	; (8002034 <MX_I2C1_Init+0x50>)
 800201c:	2200      	movs	r2, #0
 800201e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002020:	4804      	ldr	r0, [pc, #16]	; (8002034 <MX_I2C1_Init+0x50>)
 8002022:	f002 f843 	bl	80040ac <HAL_I2C_Init>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800202c:	f000 f920 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20005030 	.word	0x20005030
 8002038:	40005400 	.word	0x40005400
 800203c:	00061a80 	.word	0x00061a80

08002040 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08a      	sub	sp, #40	; 0x28
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a19      	ldr	r2, [pc, #100]	; (80020c4 <HAL_I2C_MspInit+0x84>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d12b      	bne.n	80020ba <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <HAL_I2C_MspInit+0x88>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	4a17      	ldr	r2, [pc, #92]	; (80020c8 <HAL_I2C_MspInit+0x88>)
 800206c:	f043 0302 	orr.w	r3, r3, #2
 8002070:	6313      	str	r3, [r2, #48]	; 0x30
 8002072:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <HAL_I2C_MspInit+0x88>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_CLOCK_Pin|I2C_DATA_Pin;
 800207e:	23c0      	movs	r3, #192	; 0xc0
 8002080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002082:	2312      	movs	r3, #18
 8002084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002086:	2301      	movs	r3, #1
 8002088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208a:	2303      	movs	r3, #3
 800208c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800208e:	2304      	movs	r3, #4
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002092:	f107 0314 	add.w	r3, r7, #20
 8002096:	4619      	mov	r1, r3
 8002098:	480c      	ldr	r0, [pc, #48]	; (80020cc <HAL_I2C_MspInit+0x8c>)
 800209a:	f001 fe51 	bl	8003d40 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <HAL_I2C_MspInit+0x88>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	4a08      	ldr	r2, [pc, #32]	; (80020c8 <HAL_I2C_MspInit+0x88>)
 80020a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020ac:	6413      	str	r3, [r2, #64]	; 0x40
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <HAL_I2C_MspInit+0x88>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80020ba:	bf00      	nop
 80020bc:	3728      	adds	r7, #40	; 0x28
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40005400 	.word	0x40005400
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40020400 	.word	0x40020400

080020d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020d4:	f000 fff2 	bl	80030bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020d8:	f000 f83a 	bl	8002150 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020dc:	f7ff fc66 	bl	80019ac <MX_GPIO_Init>
  MX_I2C1_Init();
 80020e0:	f7ff ff80 	bl	8001fe4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80020e4:	f000 f9e4 	bl	80024b0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80020e8:	f000 ff4c 	bl	8002f84 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80020ec:	f7ff f83e 	bl	800116c <MX_ADC1_Init>
  MX_FATFS_Init();
 80020f0:	f004 fcf8 	bl	8006ae4 <MX_FATFS_Init>
  MX_TIM10_Init();
 80020f4:	f000 feba 	bl	8002e6c <MX_TIM10_Init>
  MX_TIM11_Init();
 80020f8:	f000 fedc 	bl	8002eb4 <MX_TIM11_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80020fc:	f000 f892 	bl	8002224 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

	GPS_Init();
 8002100:	f7ff fce4 	bl	8001acc <GPS_Init>
	SSD1306_Init();
 8002104:	f000 fa52 	bl	80025ac <SSD1306_Init>
	SSD1306_Clear();
 8002108:	f000 fc75 	bl	80029f6 <SSD1306_Clear>
	SSD1306_UpdateScreen();
 800210c:	f000 fb12 	bl	8002734 <SSD1306_UpdateScreen>
	initSdCard();
 8002110:	f000 f8b4 	bl	800227c <initSdCard>
	__HAL_UART_ENABLE_IT(&huart1, UART_FLAG_RXNE);
 8002114:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <main+0x78>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	695a      	ldr	r2, [r3, #20]
 800211a:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <main+0x78>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 0220 	orr.w	r2, r2, #32
 8002122:	615a      	str	r2, [r3, #20]

	// Enable the ADC interrupt for measuring battery
	__HAL_ADC_ENABLE_IT(&hadc1, ADC_FLAG_EOC);
 8002124:	4b09      	ldr	r3, [pc, #36]	; (800214c <main+0x7c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	4b08      	ldr	r3, [pc, #32]	; (800214c <main+0x7c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0202 	orr.w	r2, r2, #2
 8002132:	605a      	str	r2, [r3, #4]
	HAL_ADC_Start_IT(&hadc1);
 8002134:	4805      	ldr	r0, [pc, #20]	; (800214c <main+0x7c>)
 8002136:	f001 f847 	bl	80031c8 <HAL_ADC_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800213a:	f007 fd19 	bl	8009b70 <osKernelInitialize>
  MX_FREERTOS_Init();
 800213e:	f7ff f8bf 	bl	80012c0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002142:	f007 fd39 	bl	8009bb8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8002146:	e7fe      	b.n	8002146 <main+0x76>
 8002148:	2000561c 	.word	0x2000561c
 800214c:	20004d6c 	.word	0x20004d6c

08002150 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b094      	sub	sp, #80	; 0x50
 8002154:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002156:	f107 0320 	add.w	r3, r7, #32
 800215a:	2230      	movs	r2, #48	; 0x30
 800215c:	2100      	movs	r1, #0
 800215e:	4618      	mov	r0, r3
 8002160:	f00d ff78 	bl	8010054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002164:	f107 030c 	add.w	r3, r7, #12
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002174:	2300      	movs	r3, #0
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	4b28      	ldr	r3, [pc, #160]	; (800221c <SystemClock_Config+0xcc>)
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	4a27      	ldr	r2, [pc, #156]	; (800221c <SystemClock_Config+0xcc>)
 800217e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002182:	6413      	str	r3, [r2, #64]	; 0x40
 8002184:	4b25      	ldr	r3, [pc, #148]	; (800221c <SystemClock_Config+0xcc>)
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002190:	2300      	movs	r3, #0
 8002192:	607b      	str	r3, [r7, #4]
 8002194:	4b22      	ldr	r3, [pc, #136]	; (8002220 <SystemClock_Config+0xd0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800219c:	4a20      	ldr	r2, [pc, #128]	; (8002220 <SystemClock_Config+0xd0>)
 800219e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	4b1e      	ldr	r3, [pc, #120]	; (8002220 <SystemClock_Config+0xd0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021ac:	607b      	str	r3, [r7, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021b0:	2301      	movs	r3, #1
 80021b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021ba:	2302      	movs	r3, #2
 80021bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80021c4:	2319      	movs	r3, #25
 80021c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 80021c8:	2380      	movs	r3, #128	; 0x80
 80021ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021cc:	2302      	movs	r3, #2
 80021ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80021d0:	2305      	movs	r3, #5
 80021d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021d4:	f107 0320 	add.w	r3, r7, #32
 80021d8:	4618      	mov	r0, r3
 80021da:	f002 fce1 	bl	8004ba0 <HAL_RCC_OscConfig>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80021e4:	f000 f844 	bl	8002270 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021e8:	230f      	movs	r3, #15
 80021ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021ec:	2302      	movs	r3, #2
 80021ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021fe:	f107 030c 	add.w	r3, r7, #12
 8002202:	2102      	movs	r1, #2
 8002204:	4618      	mov	r0, r3
 8002206:	f002 ff43 	bl	8005090 <HAL_RCC_ClockConfig>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002210:	f000 f82e 	bl	8002270 <Error_Handler>
  }
}
 8002214:	bf00      	nop
 8002216:	3750      	adds	r7, #80	; 0x50
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40023800 	.word	0x40023800
 8002220:	40007000 	.word	0x40007000

08002224 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002228:	2200      	movs	r2, #0
 800222a:	2100      	movs	r1, #0
 800222c:	2025      	movs	r0, #37	; 0x25
 800222e:	f001 fccb 	bl	8003bc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002232:	2025      	movs	r0, #37	; 0x25
 8002234:	f001 fce4 	bl	8003c00 <HAL_NVIC_EnableIRQ>
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8002238:	2200      	movs	r2, #0
 800223a:	2105      	movs	r1, #5
 800223c:	2012      	movs	r0, #18
 800223e:	f001 fcc3 	bl	8003bc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002242:	2012      	movs	r0, #18
 8002244:	f001 fcdc 	bl	8003c00 <HAL_NVIC_EnableIRQ>
}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a04      	ldr	r2, [pc, #16]	; (800226c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d101      	bne.n	8002262 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800225e:	f000 ff4f 	bl	8003100 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40000400 	.word	0x40000400

08002270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002274:	b672      	cpsid	i
}
 8002276:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002278:	e7fe      	b.n	8002278 <Error_Handler+0x8>
	...

0800227c <initSdCard>:
FRESULT fres; //Result after operations

//check if the SD card is insterted, if it is mount the card right now and return true.
//If it isn't, return false.
bool initSdCard()
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
	fres = f_mount(&FatFs, "", 1); //1=mount now
 8002280:	2201      	movs	r2, #1
 8002282:	4908      	ldr	r1, [pc, #32]	; (80022a4 <initSdCard+0x28>)
 8002284:	4808      	ldr	r0, [pc, #32]	; (80022a8 <initSdCard+0x2c>)
 8002286:	f006 ff07 	bl	8009098 <f_mount>
 800228a:	4603      	mov	r3, r0
 800228c:	461a      	mov	r2, r3
 800228e:	4b07      	ldr	r3, [pc, #28]	; (80022ac <initSdCard+0x30>)
 8002290:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK)
 8002292:	4b06      	ldr	r3, [pc, #24]	; (80022ac <initSdCard+0x30>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <initSdCard+0x22>
	{
	   	return false;
 800229a:	2300      	movs	r3, #0
 800229c:	e000      	b.n	80022a0 <initSdCard+0x24>
	} else
	{
	   	return true;
 800229e:	2301      	movs	r3, #1
	}
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	080152a0 	.word	0x080152a0
 80022a8:	20005084 	.word	0x20005084
 80022ac:	200052b8 	.word	0x200052b8

080022b0 <writeFile>:

//Write something to the SD card. If the write was successfull, return true.
//If the write was successfull, return true.
bool writeFile(char* fileName, char* string)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
	if(openFileRead(fileName))
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f83e 	bl	800233c <openFileRead>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <writeFile+0x1e>
	{
		f_close(&fil);
 80022c6:	481b      	ldr	r0, [pc, #108]	; (8002334 <writeFile+0x84>)
 80022c8:	f007 fb3c 	bl	8009944 <f_close>
 80022cc:	e002      	b.n	80022d4 <writeFile+0x24>
	} else
	{
		makeNewFile(fileName);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f850 	bl	8002374 <makeNewFile>
	}

	fres = f_open(&fil, fileName, FA_WRITE | FA_OPEN_EXISTING | FA_OPEN_APPEND);
 80022d4:	2232      	movs	r2, #50	; 0x32
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	4816      	ldr	r0, [pc, #88]	; (8002334 <writeFile+0x84>)
 80022da:	f006 ff41 	bl	8009160 <f_open>
 80022de:	4603      	mov	r3, r0
 80022e0:	461a      	mov	r2, r3
 80022e2:	4b15      	ldr	r3, [pc, #84]	; (8002338 <writeFile+0x88>)
 80022e4:	701a      	strb	r2, [r3, #0]
	if(fres == FR_OK) {
 80022e6:	4b14      	ldr	r3, [pc, #80]	; (8002338 <writeFile+0x88>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d11d      	bne.n	800232a <writeFile+0x7a>
		uint16_t stringLength = strlen(string);
 80022ee:	6838      	ldr	r0, [r7, #0]
 80022f0:	f7fd ffc6 	bl	8000280 <strlen>
 80022f4:	4603      	mov	r3, r0
 80022f6:	81fb      	strh	r3, [r7, #14]
	    UINT bytesWrote;
	    fres = f_write(&fil, string, stringLength, &bytesWrote);
 80022f8:	89fa      	ldrh	r2, [r7, #14]
 80022fa:	f107 0308 	add.w	r3, r7, #8
 80022fe:	6839      	ldr	r1, [r7, #0]
 8002300:	480c      	ldr	r0, [pc, #48]	; (8002334 <writeFile+0x84>)
 8002302:	f007 f8f2 	bl	80094ea <f_write>
 8002306:	4603      	mov	r3, r0
 8002308:	461a      	mov	r2, r3
 800230a:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <writeFile+0x88>)
 800230c:	701a      	strb	r2, [r3, #0]
	    if(fres == FR_OK) {
 800230e:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <writeFile+0x88>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d104      	bne.n	8002320 <writeFile+0x70>
	    	f_close(&fil);
 8002316:	4807      	ldr	r0, [pc, #28]	; (8002334 <writeFile+0x84>)
 8002318:	f007 fb14 	bl	8009944 <f_close>
	    	return true;
 800231c:	2301      	movs	r3, #1
 800231e:	e005      	b.n	800232c <writeFile+0x7c>
	    } else {
	    	f_close(&fil);
 8002320:	4804      	ldr	r0, [pc, #16]	; (8002334 <writeFile+0x84>)
 8002322:	f007 fb0f 	bl	8009944 <f_close>
	    	return false;
 8002326:	2300      	movs	r3, #0
 8002328:	e000      	b.n	800232c <writeFile+0x7c>
	    }
	} else {
	   	return false;
 800232a:	2300      	movs	r3, #0
	}
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	200052bc 	.word	0x200052bc
 8002338:	200052b8 	.word	0x200052b8

0800233c <openFileRead>:

//open a file for reading.
bool openFileRead(char* fileName)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
	fres = f_open(&fil, fileName, FA_READ);
 8002344:	2201      	movs	r2, #1
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4808      	ldr	r0, [pc, #32]	; (800236c <openFileRead+0x30>)
 800234a:	f006 ff09 	bl	8009160 <f_open>
 800234e:	4603      	mov	r3, r0
 8002350:	461a      	mov	r2, r3
 8002352:	4b07      	ldr	r3, [pc, #28]	; (8002370 <openFileRead+0x34>)
 8002354:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8002356:	4b06      	ldr	r3, [pc, #24]	; (8002370 <openFileRead+0x34>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <openFileRead+0x26>
	    return false;
 800235e:	2300      	movs	r3, #0
 8002360:	e000      	b.n	8002364 <openFileRead+0x28>
    } else
    {
    	return true;
 8002362:	2301      	movs	r3, #1
    }
}
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	200052bc 	.word	0x200052bc
 8002370:	200052b8 	.word	0x200052b8

08002374 <makeNewFile>:
	}
}

//Make a new file with the "fileName", make sure ".txt" is included in the fileName
bool makeNewFile(char* fileName)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
	fres = f_open(&fil, fileName, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_NEW);
 800237c:	2216      	movs	r2, #22
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	480a      	ldr	r0, [pc, #40]	; (80023ac <makeNewFile+0x38>)
 8002382:	f006 feed 	bl	8009160 <f_open>
 8002386:	4603      	mov	r3, r0
 8002388:	461a      	mov	r2, r3
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <makeNewFile+0x3c>)
 800238c:	701a      	strb	r2, [r3, #0]
	if(fres == FR_OK) {
 800238e:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <makeNewFile+0x3c>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d104      	bne.n	80023a0 <makeNewFile+0x2c>
		f_close(&fil);
 8002396:	4805      	ldr	r0, [pc, #20]	; (80023ac <makeNewFile+0x38>)
 8002398:	f007 fad4 	bl	8009944 <f_close>
		return true;
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <makeNewFile+0x2e>
	} else {
	   	return false;
 80023a0:	2300      	movs	r3, #0
	}
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	200052bc 	.word	0x200052bc
 80023b0:	200052b8 	.word	0x200052b8

080023b4 <activityToSD>:

//write an activity to the SD card. this function will also grab time data from the GPS module
bool activityToSD(char* fileName, char* string)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
	char *sTime;
	sTime = getTime();
 80023be:	f7ff fd93 	bl	8001ee8 <getTime>
 80023c2:	60f8      	str	r0, [r7, #12]
	writeFile(fileName, sTime);
 80023c4:	68f9      	ldr	r1, [r7, #12]
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff ff72 	bl	80022b0 <writeFile>
	writeFile(fileName, " : ");
 80023cc:	490d      	ldr	r1, [pc, #52]	; (8002404 <activityToSD+0x50>)
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff ff6e 	bl	80022b0 <writeFile>
	if(writeFile(fileName, string))
 80023d4:	6839      	ldr	r1, [r7, #0]
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff ff6a 	bl	80022b0 <writeFile>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d008      	beq.n	80023f4 <activityToSD+0x40>
	{
		free(sTime);
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f00d fe06 	bl	800fff4 <free>
		writeFile(fileName, "\n");
 80023e8:	4907      	ldr	r1, [pc, #28]	; (8002408 <activityToSD+0x54>)
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff ff60 	bl	80022b0 <writeFile>
		return true;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e003      	b.n	80023fc <activityToSD+0x48>
	} else
	{
		free(sTime);
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f00d fdfd 	bl	800fff4 <free>
		return false;
 80023fa:	2300      	movs	r3, #0
	}

}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	080152c0 	.word	0x080152c0
 8002408:	080152c4 	.word	0x080152c4

0800240c <totalActivityToSD>:

//write the total activity to the SD card
void totalActivityToSD(char* fileName, char* firstString, char* secondString)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
	char *sTime;
	sTime = getTime();
 8002418:	f7ff fd66 	bl	8001ee8 <getTime>
 800241c:	6178      	str	r0, [r7, #20]
	writeFile(fileName, "Einde activiteit, activteit gedaan voor ");
 800241e:	4911      	ldr	r1, [pc, #68]	; (8002464 <totalActivityToSD+0x58>)
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f7ff ff45 	bl	80022b0 <writeFile>
	writeFile(fileName, firstString);
 8002426:	68b9      	ldr	r1, [r7, #8]
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f7ff ff41 	bl	80022b0 <writeFile>
	writeFile(fileName, " minuten.\nActiviteit beëindigt op: ");
 800242e:	490e      	ldr	r1, [pc, #56]	; (8002468 <totalActivityToSD+0x5c>)
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f7ff ff3d 	bl	80022b0 <writeFile>
	writeFile(fileName, sTime);
 8002436:	6979      	ldr	r1, [r7, #20]
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f7ff ff39 	bl	80022b0 <writeFile>
	free(sTime);
 800243e:	6978      	ldr	r0, [r7, #20]
 8002440:	f00d fdd8 	bl	800fff4 <free>
	writeFile(fileName, ". Activiteit was: ");
 8002444:	4909      	ldr	r1, [pc, #36]	; (800246c <totalActivityToSD+0x60>)
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f7ff ff32 	bl	80022b0 <writeFile>
	writeFile(fileName, secondString);
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f7ff ff2e 	bl	80022b0 <writeFile>
	writeFile(fileName, "\n");
 8002454:	4906      	ldr	r1, [pc, #24]	; (8002470 <totalActivityToSD+0x64>)
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f7ff ff2a 	bl	80022b0 <writeFile>

}
 800245c:	bf00      	nop
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	080152c8 	.word	0x080152c8
 8002468:	080152f4 	.word	0x080152f4
 800246c:	0801531c 	.word	0x0801531c
 8002470:	080152c4 	.word	0x080152c4

08002474 <writeStartToSD>:

//write the start of the activty to the SD card
void writeStartToSD(char* fileName)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
	char *sTime;
	sTime = getTime();
 800247c:	f7ff fd34 	bl	8001ee8 <getTime>
 8002480:	60f8      	str	r0, [r7, #12]
	writeFile(fileName, "Nieuwe activiteit gestart op: ");
 8002482:	4909      	ldr	r1, [pc, #36]	; (80024a8 <writeStartToSD+0x34>)
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f7ff ff13 	bl	80022b0 <writeFile>
	writeFile(fileName, sTime);
 800248a:	68f9      	ldr	r1, [r7, #12]
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff ff0f 	bl	80022b0 <writeFile>
	free(sTime);
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f00d fdae 	bl	800fff4 <free>
	writeFile(fileName, "\n");
 8002498:	4904      	ldr	r1, [pc, #16]	; (80024ac <writeStartToSD+0x38>)
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff ff08 	bl	80022b0 <writeFile>
}
 80024a0:	bf00      	nop
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	08015330 	.word	0x08015330
 80024ac:	080152c4 	.word	0x080152c4

080024b0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80024b4:	4b17      	ldr	r3, [pc, #92]	; (8002514 <MX_SPI1_Init+0x64>)
 80024b6:	4a18      	ldr	r2, [pc, #96]	; (8002518 <MX_SPI1_Init+0x68>)
 80024b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024ba:	4b16      	ldr	r3, [pc, #88]	; (8002514 <MX_SPI1_Init+0x64>)
 80024bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024c2:	4b14      	ldr	r3, [pc, #80]	; (8002514 <MX_SPI1_Init+0x64>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024c8:	4b12      	ldr	r3, [pc, #72]	; (8002514 <MX_SPI1_Init+0x64>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024ce:	4b11      	ldr	r3, [pc, #68]	; (8002514 <MX_SPI1_Init+0x64>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024d4:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <MX_SPI1_Init+0x64>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80024da:	4b0e      	ldr	r3, [pc, #56]	; (8002514 <MX_SPI1_Init+0x64>)
 80024dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80024e2:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <MX_SPI1_Init+0x64>)
 80024e4:	2230      	movs	r2, #48	; 0x30
 80024e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024e8:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <MX_SPI1_Init+0x64>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024ee:	4b09      	ldr	r3, [pc, #36]	; (8002514 <MX_SPI1_Init+0x64>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024f4:	4b07      	ldr	r3, [pc, #28]	; (8002514 <MX_SPI1_Init+0x64>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80024fa:	4b06      	ldr	r3, [pc, #24]	; (8002514 <MX_SPI1_Init+0x64>)
 80024fc:	220a      	movs	r2, #10
 80024fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002500:	4804      	ldr	r0, [pc, #16]	; (8002514 <MX_SPI1_Init+0x64>)
 8002502:	f002 ffc7 	bl	8005494 <HAL_SPI_Init>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800250c:	f7ff feb0 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002510:	bf00      	nop
 8002512:	bd80      	pop	{r7, pc}
 8002514:	200054ec 	.word	0x200054ec
 8002518:	40013000 	.word	0x40013000

0800251c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08a      	sub	sp, #40	; 0x28
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002524:	f107 0314 	add.w	r3, r7, #20
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	60da      	str	r2, [r3, #12]
 8002532:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a19      	ldr	r2, [pc, #100]	; (80025a0 <HAL_SPI_MspInit+0x84>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d12b      	bne.n	8002596 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	613b      	str	r3, [r7, #16]
 8002542:	4b18      	ldr	r3, [pc, #96]	; (80025a4 <HAL_SPI_MspInit+0x88>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	4a17      	ldr	r2, [pc, #92]	; (80025a4 <HAL_SPI_MspInit+0x88>)
 8002548:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800254c:	6453      	str	r3, [r2, #68]	; 0x44
 800254e:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <HAL_SPI_MspInit+0x88>)
 8002550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002552:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002556:	613b      	str	r3, [r7, #16]
 8002558:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <HAL_SPI_MspInit+0x88>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	4a10      	ldr	r2, [pc, #64]	; (80025a4 <HAL_SPI_MspInit+0x88>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	6313      	str	r3, [r2, #48]	; 0x30
 800256a:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <HAL_SPI_MspInit+0x88>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_CLOCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 8002576:	23e0      	movs	r3, #224	; 0xe0
 8002578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257a:	2302      	movs	r3, #2
 800257c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002582:	2303      	movs	r3, #3
 8002584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002586:	2305      	movs	r3, #5
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258a:	f107 0314 	add.w	r3, r7, #20
 800258e:	4619      	mov	r1, r3
 8002590:	4805      	ldr	r0, [pc, #20]	; (80025a8 <HAL_SPI_MspInit+0x8c>)
 8002592:	f001 fbd5 	bl	8003d40 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002596:	bf00      	nop
 8002598:	3728      	adds	r7, #40	; 0x28
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40013000 	.word	0x40013000
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40020000 	.word	0x40020000

080025ac <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80025b2:	f000 fa29 	bl	8002a08 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80025b6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80025ba:	2201      	movs	r2, #1
 80025bc:	2178      	movs	r1, #120	; 0x78
 80025be:	485b      	ldr	r0, [pc, #364]	; (800272c <SSD1306_Init+0x180>)
 80025c0:	f001 ffb6 	bl	8004530 <HAL_I2C_IsDeviceReady>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	e0a9      	b.n	8002722 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80025ce:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80025d2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80025d4:	e002      	b.n	80025dc <SSD1306_Init+0x30>
		p--;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3b01      	subs	r3, #1
 80025da:	607b      	str	r3, [r7, #4]
	while(p>0)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f9      	bne.n	80025d6 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80025e2:	22ae      	movs	r2, #174	; 0xae
 80025e4:	2100      	movs	r1, #0
 80025e6:	2078      	movs	r0, #120	; 0x78
 80025e8:	f000 fa6c 	bl	8002ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80025ec:	2220      	movs	r2, #32
 80025ee:	2100      	movs	r1, #0
 80025f0:	2078      	movs	r0, #120	; 0x78
 80025f2:	f000 fa67 	bl	8002ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80025f6:	2210      	movs	r2, #16
 80025f8:	2100      	movs	r1, #0
 80025fa:	2078      	movs	r0, #120	; 0x78
 80025fc:	f000 fa62 	bl	8002ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002600:	22b0      	movs	r2, #176	; 0xb0
 8002602:	2100      	movs	r1, #0
 8002604:	2078      	movs	r0, #120	; 0x78
 8002606:	f000 fa5d 	bl	8002ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800260a:	22c8      	movs	r2, #200	; 0xc8
 800260c:	2100      	movs	r1, #0
 800260e:	2078      	movs	r0, #120	; 0x78
 8002610:	f000 fa58 	bl	8002ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002614:	2200      	movs	r2, #0
 8002616:	2100      	movs	r1, #0
 8002618:	2078      	movs	r0, #120	; 0x78
 800261a:	f000 fa53 	bl	8002ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800261e:	2210      	movs	r2, #16
 8002620:	2100      	movs	r1, #0
 8002622:	2078      	movs	r0, #120	; 0x78
 8002624:	f000 fa4e 	bl	8002ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002628:	2240      	movs	r2, #64	; 0x40
 800262a:	2100      	movs	r1, #0
 800262c:	2078      	movs	r0, #120	; 0x78
 800262e:	f000 fa49 	bl	8002ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002632:	2281      	movs	r2, #129	; 0x81
 8002634:	2100      	movs	r1, #0
 8002636:	2078      	movs	r0, #120	; 0x78
 8002638:	f000 fa44 	bl	8002ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800263c:	22ff      	movs	r2, #255	; 0xff
 800263e:	2100      	movs	r1, #0
 8002640:	2078      	movs	r0, #120	; 0x78
 8002642:	f000 fa3f 	bl	8002ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002646:	22a1      	movs	r2, #161	; 0xa1
 8002648:	2100      	movs	r1, #0
 800264a:	2078      	movs	r0, #120	; 0x78
 800264c:	f000 fa3a 	bl	8002ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002650:	22a6      	movs	r2, #166	; 0xa6
 8002652:	2100      	movs	r1, #0
 8002654:	2078      	movs	r0, #120	; 0x78
 8002656:	f000 fa35 	bl	8002ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800265a:	22a8      	movs	r2, #168	; 0xa8
 800265c:	2100      	movs	r1, #0
 800265e:	2078      	movs	r0, #120	; 0x78
 8002660:	f000 fa30 	bl	8002ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002664:	223f      	movs	r2, #63	; 0x3f
 8002666:	2100      	movs	r1, #0
 8002668:	2078      	movs	r0, #120	; 0x78
 800266a:	f000 fa2b 	bl	8002ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800266e:	22a4      	movs	r2, #164	; 0xa4
 8002670:	2100      	movs	r1, #0
 8002672:	2078      	movs	r0, #120	; 0x78
 8002674:	f000 fa26 	bl	8002ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002678:	22d3      	movs	r2, #211	; 0xd3
 800267a:	2100      	movs	r1, #0
 800267c:	2078      	movs	r0, #120	; 0x78
 800267e:	f000 fa21 	bl	8002ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002682:	2200      	movs	r2, #0
 8002684:	2100      	movs	r1, #0
 8002686:	2078      	movs	r0, #120	; 0x78
 8002688:	f000 fa1c 	bl	8002ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800268c:	22d5      	movs	r2, #213	; 0xd5
 800268e:	2100      	movs	r1, #0
 8002690:	2078      	movs	r0, #120	; 0x78
 8002692:	f000 fa17 	bl	8002ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002696:	22f0      	movs	r2, #240	; 0xf0
 8002698:	2100      	movs	r1, #0
 800269a:	2078      	movs	r0, #120	; 0x78
 800269c:	f000 fa12 	bl	8002ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80026a0:	22d9      	movs	r2, #217	; 0xd9
 80026a2:	2100      	movs	r1, #0
 80026a4:	2078      	movs	r0, #120	; 0x78
 80026a6:	f000 fa0d 	bl	8002ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80026aa:	2222      	movs	r2, #34	; 0x22
 80026ac:	2100      	movs	r1, #0
 80026ae:	2078      	movs	r0, #120	; 0x78
 80026b0:	f000 fa08 	bl	8002ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80026b4:	22da      	movs	r2, #218	; 0xda
 80026b6:	2100      	movs	r1, #0
 80026b8:	2078      	movs	r0, #120	; 0x78
 80026ba:	f000 fa03 	bl	8002ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80026be:	2212      	movs	r2, #18
 80026c0:	2100      	movs	r1, #0
 80026c2:	2078      	movs	r0, #120	; 0x78
 80026c4:	f000 f9fe 	bl	8002ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80026c8:	22db      	movs	r2, #219	; 0xdb
 80026ca:	2100      	movs	r1, #0
 80026cc:	2078      	movs	r0, #120	; 0x78
 80026ce:	f000 f9f9 	bl	8002ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80026d2:	2220      	movs	r2, #32
 80026d4:	2100      	movs	r1, #0
 80026d6:	2078      	movs	r0, #120	; 0x78
 80026d8:	f000 f9f4 	bl	8002ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80026dc:	228d      	movs	r2, #141	; 0x8d
 80026de:	2100      	movs	r1, #0
 80026e0:	2078      	movs	r0, #120	; 0x78
 80026e2:	f000 f9ef 	bl	8002ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80026e6:	2214      	movs	r2, #20
 80026e8:	2100      	movs	r1, #0
 80026ea:	2078      	movs	r0, #120	; 0x78
 80026ec:	f000 f9ea 	bl	8002ac4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80026f0:	22af      	movs	r2, #175	; 0xaf
 80026f2:	2100      	movs	r1, #0
 80026f4:	2078      	movs	r0, #120	; 0x78
 80026f6:	f000 f9e5 	bl	8002ac4 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80026fa:	222e      	movs	r2, #46	; 0x2e
 80026fc:	2100      	movs	r1, #0
 80026fe:	2078      	movs	r0, #120	; 0x78
 8002700:	f000 f9e0 	bl	8002ac4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002704:	2000      	movs	r0, #0
 8002706:	f000 f843 	bl	8002790 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800270a:	f000 f813 	bl	8002734 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800270e:	4b08      	ldr	r3, [pc, #32]	; (8002730 <SSD1306_Init+0x184>)
 8002710:	2200      	movs	r2, #0
 8002712:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002714:	4b06      	ldr	r3, [pc, #24]	; (8002730 <SSD1306_Init+0x184>)
 8002716:	2200      	movs	r2, #0
 8002718:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800271a:	4b05      	ldr	r3, [pc, #20]	; (8002730 <SSD1306_Init+0x184>)
 800271c:	2201      	movs	r2, #1
 800271e:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8002720:	2301      	movs	r3, #1
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20005030 	.word	0x20005030
 8002730:	2000064c 	.word	0x2000064c

08002734 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800273a:	2300      	movs	r3, #0
 800273c:	71fb      	strb	r3, [r7, #7]
 800273e:	e01d      	b.n	800277c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	3b50      	subs	r3, #80	; 0x50
 8002744:	b2db      	uxtb	r3, r3
 8002746:	461a      	mov	r2, r3
 8002748:	2100      	movs	r1, #0
 800274a:	2078      	movs	r0, #120	; 0x78
 800274c:	f000 f9ba 	bl	8002ac4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002750:	2200      	movs	r2, #0
 8002752:	2100      	movs	r1, #0
 8002754:	2078      	movs	r0, #120	; 0x78
 8002756:	f000 f9b5 	bl	8002ac4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800275a:	2210      	movs	r2, #16
 800275c:	2100      	movs	r1, #0
 800275e:	2078      	movs	r0, #120	; 0x78
 8002760:	f000 f9b0 	bl	8002ac4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	01db      	lsls	r3, r3, #7
 8002768:	4a08      	ldr	r2, [pc, #32]	; (800278c <SSD1306_UpdateScreen+0x58>)
 800276a:	441a      	add	r2, r3
 800276c:	2380      	movs	r3, #128	; 0x80
 800276e:	2140      	movs	r1, #64	; 0x40
 8002770:	2078      	movs	r0, #120	; 0x78
 8002772:	f000 f95f 	bl	8002a34 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	3301      	adds	r3, #1
 800277a:	71fb      	strb	r3, [r7, #7]
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	2b07      	cmp	r3, #7
 8002780:	d9de      	bls.n	8002740 <SSD1306_UpdateScreen+0xc>
	}
}
 8002782:	bf00      	nop
 8002784:	bf00      	nop
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	2000024c 	.word	0x2000024c

08002790 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <SSD1306_Fill+0x14>
 80027a0:	2300      	movs	r3, #0
 80027a2:	e000      	b.n	80027a6 <SSD1306_Fill+0x16>
 80027a4:	23ff      	movs	r3, #255	; 0xff
 80027a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027aa:	4619      	mov	r1, r3
 80027ac:	4803      	ldr	r0, [pc, #12]	; (80027bc <SSD1306_Fill+0x2c>)
 80027ae:	f00d fc51 	bl	8010054 <memset>
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	2000024c 	.word	0x2000024c

080027c0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	80fb      	strh	r3, [r7, #6]
 80027ca:	460b      	mov	r3, r1
 80027cc:	80bb      	strh	r3, [r7, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	70fb      	strb	r3, [r7, #3]
	if (
 80027d2:	88fb      	ldrh	r3, [r7, #6]
 80027d4:	2b7f      	cmp	r3, #127	; 0x7f
 80027d6:	d848      	bhi.n	800286a <SSD1306_DrawPixel+0xaa>
			x >= SSD1306_WIDTH ||
 80027d8:	88bb      	ldrh	r3, [r7, #4]
 80027da:	2b3f      	cmp	r3, #63	; 0x3f
 80027dc:	d845      	bhi.n	800286a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80027de:	4b26      	ldr	r3, [pc, #152]	; (8002878 <SSD1306_DrawPixel+0xb8>)
 80027e0:	791b      	ldrb	r3, [r3, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d006      	beq.n	80027f4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80027e6:	78fb      	ldrb	r3, [r7, #3]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	bf0c      	ite	eq
 80027ec:	2301      	moveq	r3, #1
 80027ee:	2300      	movne	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80027f4:	78fb      	ldrb	r3, [r7, #3]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d11a      	bne.n	8002830 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80027fa:	88fa      	ldrh	r2, [r7, #6]
 80027fc:	88bb      	ldrh	r3, [r7, #4]
 80027fe:	08db      	lsrs	r3, r3, #3
 8002800:	b298      	uxth	r0, r3
 8002802:	4603      	mov	r3, r0
 8002804:	01db      	lsls	r3, r3, #7
 8002806:	4413      	add	r3, r2
 8002808:	4a1c      	ldr	r2, [pc, #112]	; (800287c <SSD1306_DrawPixel+0xbc>)
 800280a:	5cd3      	ldrb	r3, [r2, r3]
 800280c:	b25a      	sxtb	r2, r3
 800280e:	88bb      	ldrh	r3, [r7, #4]
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	2101      	movs	r1, #1
 8002816:	fa01 f303 	lsl.w	r3, r1, r3
 800281a:	b25b      	sxtb	r3, r3
 800281c:	4313      	orrs	r3, r2
 800281e:	b259      	sxtb	r1, r3
 8002820:	88fa      	ldrh	r2, [r7, #6]
 8002822:	4603      	mov	r3, r0
 8002824:	01db      	lsls	r3, r3, #7
 8002826:	4413      	add	r3, r2
 8002828:	b2c9      	uxtb	r1, r1
 800282a:	4a14      	ldr	r2, [pc, #80]	; (800287c <SSD1306_DrawPixel+0xbc>)
 800282c:	54d1      	strb	r1, [r2, r3]
 800282e:	e01d      	b.n	800286c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002830:	88fa      	ldrh	r2, [r7, #6]
 8002832:	88bb      	ldrh	r3, [r7, #4]
 8002834:	08db      	lsrs	r3, r3, #3
 8002836:	b298      	uxth	r0, r3
 8002838:	4603      	mov	r3, r0
 800283a:	01db      	lsls	r3, r3, #7
 800283c:	4413      	add	r3, r2
 800283e:	4a0f      	ldr	r2, [pc, #60]	; (800287c <SSD1306_DrawPixel+0xbc>)
 8002840:	5cd3      	ldrb	r3, [r2, r3]
 8002842:	b25a      	sxtb	r2, r3
 8002844:	88bb      	ldrh	r3, [r7, #4]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	2101      	movs	r1, #1
 800284c:	fa01 f303 	lsl.w	r3, r1, r3
 8002850:	b25b      	sxtb	r3, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	b25b      	sxtb	r3, r3
 8002856:	4013      	ands	r3, r2
 8002858:	b259      	sxtb	r1, r3
 800285a:	88fa      	ldrh	r2, [r7, #6]
 800285c:	4603      	mov	r3, r0
 800285e:	01db      	lsls	r3, r3, #7
 8002860:	4413      	add	r3, r2
 8002862:	b2c9      	uxtb	r1, r1
 8002864:	4a05      	ldr	r2, [pc, #20]	; (800287c <SSD1306_DrawPixel+0xbc>)
 8002866:	54d1      	strb	r1, [r2, r3]
 8002868:	e000      	b.n	800286c <SSD1306_DrawPixel+0xac>
		return;
 800286a:	bf00      	nop
	}
}
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	2000064c 	.word	0x2000064c
 800287c:	2000024c 	.word	0x2000024c

08002880 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	460a      	mov	r2, r1
 800288a:	80fb      	strh	r3, [r7, #6]
 800288c:	4613      	mov	r3, r2
 800288e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002890:	4a05      	ldr	r2, [pc, #20]	; (80028a8 <SSD1306_GotoXY+0x28>)
 8002892:	88fb      	ldrh	r3, [r7, #6]
 8002894:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002896:	4a04      	ldr	r2, [pc, #16]	; (80028a8 <SSD1306_GotoXY+0x28>)
 8002898:	88bb      	ldrh	r3, [r7, #4]
 800289a:	8053      	strh	r3, [r2, #2]
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	2000064c 	.word	0x2000064c

080028ac <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	6039      	str	r1, [r7, #0]
 80028b6:	71fb      	strb	r3, [r7, #7]
 80028b8:	4613      	mov	r3, r2
 80028ba:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
			SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80028bc:	4b3a      	ldr	r3, [pc, #232]	; (80029a8 <SSD1306_Putc+0xfc>)
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	461a      	mov	r2, r3
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	4413      	add	r3, r2
	if (
 80028c8:	2b7f      	cmp	r3, #127	; 0x7f
 80028ca:	dc07      	bgt.n	80028dc <SSD1306_Putc+0x30>
			SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80028cc:	4b36      	ldr	r3, [pc, #216]	; (80029a8 <SSD1306_Putc+0xfc>)
 80028ce:	885b      	ldrh	r3, [r3, #2]
 80028d0:	461a      	mov	r2, r3
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	785b      	ldrb	r3, [r3, #1]
 80028d6:	4413      	add	r3, r2
			SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80028d8:	2b3f      	cmp	r3, #63	; 0x3f
 80028da:	dd01      	ble.n	80028e0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	e05e      	b.n	800299e <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	e04b      	b.n	800297e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	79fb      	ldrb	r3, [r7, #7]
 80028ec:	3b20      	subs	r3, #32
 80028ee:	6839      	ldr	r1, [r7, #0]
 80028f0:	7849      	ldrb	r1, [r1, #1]
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	4619      	mov	r1, r3
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	440b      	add	r3, r1
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	4413      	add	r3, r2
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002904:	2300      	movs	r3, #0
 8002906:	613b      	str	r3, [r7, #16]
 8002908:	e030      	b.n	800296c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d010      	beq.n	800293c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800291a:	4b23      	ldr	r3, [pc, #140]	; (80029a8 <SSD1306_Putc+0xfc>)
 800291c:	881a      	ldrh	r2, [r3, #0]
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	b29b      	uxth	r3, r3
 8002922:	4413      	add	r3, r2
 8002924:	b298      	uxth	r0, r3
 8002926:	4b20      	ldr	r3, [pc, #128]	; (80029a8 <SSD1306_Putc+0xfc>)
 8002928:	885a      	ldrh	r2, [r3, #2]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	b29b      	uxth	r3, r3
 800292e:	4413      	add	r3, r2
 8002930:	b29b      	uxth	r3, r3
 8002932:	79ba      	ldrb	r2, [r7, #6]
 8002934:	4619      	mov	r1, r3
 8002936:	f7ff ff43 	bl	80027c0 <SSD1306_DrawPixel>
 800293a:	e014      	b.n	8002966 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800293c:	4b1a      	ldr	r3, [pc, #104]	; (80029a8 <SSD1306_Putc+0xfc>)
 800293e:	881a      	ldrh	r2, [r3, #0]
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	b29b      	uxth	r3, r3
 8002944:	4413      	add	r3, r2
 8002946:	b298      	uxth	r0, r3
 8002948:	4b17      	ldr	r3, [pc, #92]	; (80029a8 <SSD1306_Putc+0xfc>)
 800294a:	885a      	ldrh	r2, [r3, #2]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	b29b      	uxth	r3, r3
 8002950:	4413      	add	r3, r2
 8002952:	b299      	uxth	r1, r3
 8002954:	79bb      	ldrb	r3, [r7, #6]
 8002956:	2b00      	cmp	r3, #0
 8002958:	bf0c      	ite	eq
 800295a:	2301      	moveq	r3, #1
 800295c:	2300      	movne	r3, #0
 800295e:	b2db      	uxtb	r3, r3
 8002960:	461a      	mov	r2, r3
 8002962:	f7ff ff2d 	bl	80027c0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	3301      	adds	r3, #1
 800296a:	613b      	str	r3, [r7, #16]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	461a      	mov	r2, r3
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4293      	cmp	r3, r2
 8002976:	d3c8      	bcc.n	800290a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	3301      	adds	r3, #1
 800297c:	617b      	str	r3, [r7, #20]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	785b      	ldrb	r3, [r3, #1]
 8002982:	461a      	mov	r2, r3
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	4293      	cmp	r3, r2
 8002988:	d3ad      	bcc.n	80028e6 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800298a:	4b07      	ldr	r3, [pc, #28]	; (80029a8 <SSD1306_Putc+0xfc>)
 800298c:	881a      	ldrh	r2, [r3, #0]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	b29b      	uxth	r3, r3
 8002994:	4413      	add	r3, r2
 8002996:	b29a      	uxth	r2, r3
 8002998:	4b03      	ldr	r3, [pc, #12]	; (80029a8 <SSD1306_Putc+0xfc>)
 800299a:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800299c:	79fb      	ldrb	r3, [r7, #7]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	2000064c 	.word	0x2000064c

080029ac <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	4613      	mov	r3, r2
 80029b8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80029ba:	e012      	b.n	80029e2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	79fa      	ldrb	r2, [r7, #7]
 80029c2:	68b9      	ldr	r1, [r7, #8]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff ff71 	bl	80028ac <SSD1306_Putc>
 80029ca:	4603      	mov	r3, r0
 80029cc:	461a      	mov	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d002      	beq.n	80029dc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	e008      	b.n	80029ee <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	3301      	adds	r3, #1
 80029e0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1e8      	bne.n	80029bc <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	781b      	ldrb	r3, [r3, #0]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80029fa:	2000      	movs	r0, #0
 80029fc:	f7ff fec8 	bl	8002790 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8002a00:	f7ff fe98 	bl	8002734 <SSD1306_UpdateScreen>
}
 8002a04:	bf00      	nop
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002a0e:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <ssd1306_I2C_Init+0x28>)
 8002a10:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002a12:	e002      	b.n	8002a1a <ssd1306_I2C_Init+0x12>
		p--;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1f9      	bne.n	8002a14 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002a20:	bf00      	nop
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	0003d090 	.word	0x0003d090

08002a34 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002a34:	b590      	push	{r4, r7, lr}
 8002a36:	b0c7      	sub	sp, #284	; 0x11c
 8002a38:	af02      	add	r7, sp, #8
 8002a3a:	4604      	mov	r4, r0
 8002a3c:	4608      	mov	r0, r1
 8002a3e:	4639      	mov	r1, r7
 8002a40:	600a      	str	r2, [r1, #0]
 8002a42:	4619      	mov	r1, r3
 8002a44:	1dfb      	adds	r3, r7, #7
 8002a46:	4622      	mov	r2, r4
 8002a48:	701a      	strb	r2, [r3, #0]
 8002a4a:	1dbb      	adds	r3, r7, #6
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	701a      	strb	r2, [r3, #0]
 8002a50:	1d3b      	adds	r3, r7, #4
 8002a52:	460a      	mov	r2, r1
 8002a54:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8002a56:	f107 030c 	add.w	r3, r7, #12
 8002a5a:	1dba      	adds	r2, r7, #6
 8002a5c:	7812      	ldrb	r2, [r2, #0]
 8002a5e:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8002a60:	2300      	movs	r3, #0
 8002a62:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002a66:	e010      	b.n	8002a8a <ssd1306_I2C_WriteMulti+0x56>
		dt[i+1] = data[i];
 8002a68:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002a6c:	463a      	mov	r2, r7
 8002a6e:	6812      	ldr	r2, [r2, #0]
 8002a70:	441a      	add	r2, r3
 8002a72:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002a76:	3301      	adds	r3, #1
 8002a78:	7811      	ldrb	r1, [r2, #0]
 8002a7a:	f107 020c 	add.w	r2, r7, #12
 8002a7e:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8002a80:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002a84:	3301      	adds	r3, #1
 8002a86:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002a8a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	1d3a      	adds	r2, r7, #4
 8002a92:	8812      	ldrh	r2, [r2, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d8e7      	bhi.n	8002a68 <ssd1306_I2C_WriteMulti+0x34>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002a98:	1dfb      	adds	r3, r7, #7
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	b299      	uxth	r1, r3
 8002a9e:	1d3b      	adds	r3, r7, #4
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	f107 020c 	add.w	r2, r7, #12
 8002aaa:	200a      	movs	r0, #10
 8002aac:	9000      	str	r0, [sp, #0]
 8002aae:	4804      	ldr	r0, [pc, #16]	; (8002ac0 <ssd1306_I2C_WriteMulti+0x8c>)
 8002ab0:	f001 fc40 	bl	8004334 <HAL_I2C_Master_Transmit>
}
 8002ab4:	bf00      	nop
 8002ab6:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd90      	pop	{r4, r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20005030 	.word	0x20005030

08002ac4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af02      	add	r7, sp, #8
 8002aca:	4603      	mov	r3, r0
 8002acc:	71fb      	strb	r3, [r7, #7]
 8002ace:	460b      	mov	r3, r1
 8002ad0:	71bb      	strb	r3, [r7, #6]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002ad6:	79bb      	ldrb	r3, [r7, #6]
 8002ad8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002ada:	797b      	ldrb	r3, [r7, #5]
 8002adc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002ade:	79fb      	ldrb	r3, [r7, #7]
 8002ae0:	b299      	uxth	r1, r3
 8002ae2:	f107 020c 	add.w	r2, r7, #12
 8002ae6:	230a      	movs	r3, #10
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	2302      	movs	r3, #2
 8002aec:	4803      	ldr	r0, [pc, #12]	; (8002afc <ssd1306_I2C_Write+0x38>)
 8002aee:	f001 fc21 	bl	8004334 <HAL_I2C_Master_Transmit>
}
 8002af2:	bf00      	nop
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	20005030 	.word	0x20005030

08002b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	607b      	str	r3, [r7, #4]
 8002b0a:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <HAL_MspInit+0x54>)
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0e:	4a11      	ldr	r2, [pc, #68]	; (8002b54 <HAL_MspInit+0x54>)
 8002b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b14:	6453      	str	r3, [r2, #68]	; 0x44
 8002b16:	4b0f      	ldr	r3, [pc, #60]	; (8002b54 <HAL_MspInit+0x54>)
 8002b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b1e:	607b      	str	r3, [r7, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	603b      	str	r3, [r7, #0]
 8002b26:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <HAL_MspInit+0x54>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	4a0a      	ldr	r2, [pc, #40]	; (8002b54 <HAL_MspInit+0x54>)
 8002b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b30:	6413      	str	r3, [r2, #64]	; 0x40
 8002b32:	4b08      	ldr	r3, [pc, #32]	; (8002b54 <HAL_MspInit+0x54>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	210f      	movs	r1, #15
 8002b42:	f06f 0001 	mvn.w	r0, #1
 8002b46:	f001 f83f 	bl	8003bc8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40023800 	.word	0x40023800

08002b58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08c      	sub	sp, #48	; 0x30
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002b60:	2300      	movs	r3, #0
 8002b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8002b68:	2200      	movs	r2, #0
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	201d      	movs	r0, #29
 8002b6e:	f001 f82b 	bl	8003bc8 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b72:	201d      	movs	r0, #29
 8002b74:	f001 f844 	bl	8003c00 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	4b1f      	ldr	r3, [pc, #124]	; (8002bfc <HAL_InitTick+0xa4>)
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	4a1e      	ldr	r2, [pc, #120]	; (8002bfc <HAL_InitTick+0xa4>)
 8002b82:	f043 0302 	orr.w	r3, r3, #2
 8002b86:	6413      	str	r3, [r2, #64]	; 0x40
 8002b88:	4b1c      	ldr	r3, [pc, #112]	; (8002bfc <HAL_InitTick+0xa4>)
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b94:	f107 0210 	add.w	r2, r7, #16
 8002b98:	f107 0314 	add.w	r3, r7, #20
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f002 fc46 	bl	8005430 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002ba4:	f002 fc1c 	bl	80053e0 <HAL_RCC_GetPCLK1Freq>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb0:	4a13      	ldr	r2, [pc, #76]	; (8002c00 <HAL_InitTick+0xa8>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	0c9b      	lsrs	r3, r3, #18
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8002bbc:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <HAL_InitTick+0xac>)
 8002bbe:	4a12      	ldr	r2, [pc, #72]	; (8002c08 <HAL_InitTick+0xb0>)
 8002bc0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002bc2:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <HAL_InitTick+0xac>)
 8002bc4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bc8:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8002bca:	4a0e      	ldr	r2, [pc, #56]	; (8002c04 <HAL_InitTick+0xac>)
 8002bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bce:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <HAL_InitTick+0xac>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bd6:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <HAL_InitTick+0xac>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8002bdc:	4809      	ldr	r0, [pc, #36]	; (8002c04 <HAL_InitTick+0xac>)
 8002bde:	f002 ff4f 	bl	8005a80 <HAL_TIM_Base_Init>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d104      	bne.n	8002bf2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8002be8:	4806      	ldr	r0, [pc, #24]	; (8002c04 <HAL_InitTick+0xac>)
 8002bea:	f002 ff99 	bl	8005b20 <HAL_TIM_Base_Start_IT>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	e000      	b.n	8002bf4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3730      	adds	r7, #48	; 0x30
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	431bde83 	.word	0x431bde83
 8002c04:	20005544 	.word	0x20005544
 8002c08:	40000400 	.word	0x40000400

08002c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8002c10:	e7fe      	b.n	8002c10 <NMI_Handler+0x4>

08002c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c12:	b480      	push	{r7}
 8002c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c16:	e7fe      	b.n	8002c16 <HardFault_Handler+0x4>

08002c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c1c:	e7fe      	b.n	8002c1c <MemManage_Handler+0x4>

08002c1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c22:	e7fe      	b.n	8002c22 <BusFault_Handler+0x4>

08002c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c28:	e7fe      	b.n	8002c28 <UsageFault_Handler+0x4>

08002c2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002c3c:	4802      	ldr	r0, [pc, #8]	; (8002c48 <ADC_IRQHandler+0x10>)
 8002c3e:	f000 fb81 	bl	8003344 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20004d6c 	.word	0x20004d6c

08002c4c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002c50:	4803      	ldr	r0, [pc, #12]	; (8002c60 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002c52:	f002 fff6 	bl	8005c42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

	transmitterTick();
 8002c56:	f00a fa89 	bl	800d16c <transmitterTick>

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	2000558c 	.word	0x2000558c

08002c64 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002c68:	4803      	ldr	r0, [pc, #12]	; (8002c78 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8002c6a:	f002 ffea 	bl	8005c42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

	receiverTick();
 8002c6e:	f00a fac3 	bl	800d1f8 <receiverTick>

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	200055d4 	.word	0x200055d4

08002c7c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c80:	4802      	ldr	r0, [pc, #8]	; (8002c8c <TIM3_IRQHandler+0x10>)
 8002c82:	f002 ffde 	bl	8005c42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c86:	bf00      	nop
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20005544 	.word	0x20005544

08002c90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	HAL_UART_RxCpltCallback(&huart1);
 8002c94:	4803      	ldr	r0, [pc, #12]	; (8002ca4 <USART1_IRQHandler+0x14>)
 8002c96:	f000 f807 	bl	8002ca8 <HAL_UART_RxCpltCallback>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c9a:	4802      	ldr	r0, [pc, #8]	; (8002ca4 <USART1_IRQHandler+0x14>)
 8002c9c:	f003 fa14 	bl	80060c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
	//GPS_CallBack();
  /* USER CODE END USART1_IRQn 1 */
}
 8002ca0:	bf00      	nop
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	2000561c 	.word	0x2000561c

08002ca8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
	GPS_UART_CallBack();
 8002cb0:	f7fe ff1a 	bl	8001ae8 <GPS_UART_CallBack>
}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
	return 1;
 8002cc0:	2301      	movs	r3, #1
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <_kill>:

int _kill(int pid, int sig)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002cd6:	f00d f95b 	bl	800ff90 <__errno>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2216      	movs	r2, #22
 8002cde:	601a      	str	r2, [r3, #0]
	return -1;
 8002ce0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <_exit>:

void _exit (int status)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7ff ffe7 	bl	8002ccc <_kill>
	while (1) {}		/* Make sure we hang here */
 8002cfe:	e7fe      	b.n	8002cfe <_exit+0x12>

08002d00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	617b      	str	r3, [r7, #20]
 8002d10:	e00a      	b.n	8002d28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d12:	f3af 8000 	nop.w
 8002d16:	4601      	mov	r1, r0
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	60ba      	str	r2, [r7, #8]
 8002d1e:	b2ca      	uxtb	r2, r1
 8002d20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	3301      	adds	r3, #1
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	dbf0      	blt.n	8002d12 <_read+0x12>
	}

	return len;
 8002d30:	687b      	ldr	r3, [r7, #4]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b086      	sub	sp, #24
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	60f8      	str	r0, [r7, #12]
 8002d42:	60b9      	str	r1, [r7, #8]
 8002d44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	e009      	b.n	8002d60 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	1c5a      	adds	r2, r3, #1
 8002d50:	60ba      	str	r2, [r7, #8]
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	dbf1      	blt.n	8002d4c <_write+0x12>
	}
	return len;
 8002d68:	687b      	ldr	r3, [r7, #4]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <_close>:

int _close(int file)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
	return -1;
 8002d7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d9a:	605a      	str	r2, [r3, #4]
	return 0;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <_isatty>:

int _isatty(int file)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
	return 1;
 8002db2:	2301      	movs	r3, #1
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
	return 0;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
	...

08002ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002de4:	4a14      	ldr	r2, [pc, #80]	; (8002e38 <_sbrk+0x5c>)
 8002de6:	4b15      	ldr	r3, [pc, #84]	; (8002e3c <_sbrk+0x60>)
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end)
 8002df0:	4b13      	ldr	r3, [pc, #76]	; (8002e40 <_sbrk+0x64>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d102      	bne.n	8002dfe <_sbrk+0x22>
	{
		__sbrk_heap_end = &_end;
 8002df8:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <_sbrk+0x64>)
 8002dfa:	4a12      	ldr	r2, [pc, #72]	; (8002e44 <_sbrk+0x68>)
 8002dfc:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap)
 8002dfe:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <_sbrk+0x64>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4413      	add	r3, r2
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d207      	bcs.n	8002e1c <_sbrk+0x40>
	{
		errno = ENOMEM;
 8002e0c:	f00d f8c0 	bl	800ff90 <__errno>
 8002e10:	4603      	mov	r3, r0
 8002e12:	220c      	movs	r2, #12
 8002e14:	601a      	str	r2, [r3, #0]
		return (void *)-1;
 8002e16:	f04f 33ff 	mov.w	r3, #4294967295
 8002e1a:	e009      	b.n	8002e30 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002e1c:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <_sbrk+0x64>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8002e22:	4b07      	ldr	r3, [pc, #28]	; (8002e40 <_sbrk+0x64>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4413      	add	r3, r2
 8002e2a:	4a05      	ldr	r2, [pc, #20]	; (8002e40 <_sbrk+0x64>)
 8002e2c:	6013      	str	r3, [r2, #0]

	return (void *)prev_heap_end;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	20010000 	.word	0x20010000
 8002e3c:	00000400 	.word	0x00000400
 8002e40:	20000654 	.word	0x20000654
 8002e44:	20005b28 	.word	0x20005b28

08002e48 <SystemInit>:
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <SystemInit+0x20>)
 8002e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e52:	4a05      	ldr	r2, [pc, #20]	; (8002e68 <SystemInit+0x20>)
 8002e54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
	SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e5c:	bf00      	nop
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	e000ed00 	.word	0xe000ed00

08002e6c <MX_TIM10_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002e70:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <MX_TIM10_Init+0x40>)
 8002e72:	4a0f      	ldr	r2, [pc, #60]	; (8002eb0 <MX_TIM10_Init+0x44>)
 8002e74:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 640;
 8002e76:	4b0d      	ldr	r3, [pc, #52]	; (8002eac <MX_TIM10_Init+0x40>)
 8002e78:	f44f 7220 	mov.w	r2, #640	; 0x280
 8002e7c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e7e:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <MX_TIM10_Init+0x40>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 99;
 8002e84:	4b09      	ldr	r3, [pc, #36]	; (8002eac <MX_TIM10_Init+0x40>)
 8002e86:	2263      	movs	r2, #99	; 0x63
 8002e88:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e8a:	4b08      	ldr	r3, [pc, #32]	; (8002eac <MX_TIM10_Init+0x40>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e90:	4b06      	ldr	r3, [pc, #24]	; (8002eac <MX_TIM10_Init+0x40>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002e96:	4805      	ldr	r0, [pc, #20]	; (8002eac <MX_TIM10_Init+0x40>)
 8002e98:	f002 fdf2 	bl	8005a80 <HAL_TIM_Base_Init>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002ea2:	f7ff f9e5 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002ea6:	bf00      	nop
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	2000558c 	.word	0x2000558c
 8002eb0:	40014400 	.word	0x40014400

08002eb4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002eb8:	4b0d      	ldr	r3, [pc, #52]	; (8002ef0 <MX_TIM11_Init+0x3c>)
 8002eba:	4a0e      	ldr	r2, [pc, #56]	; (8002ef4 <MX_TIM11_Init+0x40>)
 8002ebc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 64;
 8002ebe:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <MX_TIM11_Init+0x3c>)
 8002ec0:	2240      	movs	r2, #64	; 0x40
 8002ec2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ec4:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <MX_TIM11_Init+0x3c>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 9;
 8002eca:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <MX_TIM11_Init+0x3c>)
 8002ecc:	2209      	movs	r2, #9
 8002ece:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ed0:	4b07      	ldr	r3, [pc, #28]	; (8002ef0 <MX_TIM11_Init+0x3c>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ed6:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <MX_TIM11_Init+0x3c>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002edc:	4804      	ldr	r0, [pc, #16]	; (8002ef0 <MX_TIM11_Init+0x3c>)
 8002ede:	f002 fdcf 	bl	8005a80 <HAL_TIM_Base_Init>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <MX_TIM11_Init+0x38>
  {
    Error_Handler();
 8002ee8:	f7ff f9c2 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002eec:	bf00      	nop
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	200055d4 	.word	0x200055d4
 8002ef4:	40014800 	.word	0x40014800

08002ef8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a1c      	ldr	r2, [pc, #112]	; (8002f78 <HAL_TIM_Base_MspInit+0x80>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d116      	bne.n	8002f38 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	4b1b      	ldr	r3, [pc, #108]	; (8002f7c <HAL_TIM_Base_MspInit+0x84>)
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	4a1a      	ldr	r2, [pc, #104]	; (8002f7c <HAL_TIM_Base_MspInit+0x84>)
 8002f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f18:	6453      	str	r3, [r2, #68]	; 0x44
 8002f1a:	4b18      	ldr	r3, [pc, #96]	; (8002f7c <HAL_TIM_Base_MspInit+0x84>)
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f22:	60fb      	str	r3, [r7, #12]
 8002f24:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002f26:	2200      	movs	r2, #0
 8002f28:	2100      	movs	r1, #0
 8002f2a:	2019      	movs	r0, #25
 8002f2c:	f000 fe4c 	bl	8003bc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002f30:	2019      	movs	r0, #25
 8002f32:	f000 fe65 	bl	8003c00 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002f36:	e01a      	b.n	8002f6e <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a10      	ldr	r2, [pc, #64]	; (8002f80 <HAL_TIM_Base_MspInit+0x88>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d115      	bne.n	8002f6e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	4b0d      	ldr	r3, [pc, #52]	; (8002f7c <HAL_TIM_Base_MspInit+0x84>)
 8002f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4a:	4a0c      	ldr	r2, [pc, #48]	; (8002f7c <HAL_TIM_Base_MspInit+0x84>)
 8002f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f50:	6453      	str	r3, [r2, #68]	; 0x44
 8002f52:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <HAL_TIM_Base_MspInit+0x84>)
 8002f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f5a:	60bb      	str	r3, [r7, #8]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2100      	movs	r1, #0
 8002f62:	201a      	movs	r0, #26
 8002f64:	f000 fe30 	bl	8003bc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002f68:	201a      	movs	r0, #26
 8002f6a:	f000 fe49 	bl	8003c00 <HAL_NVIC_EnableIRQ>
}
 8002f6e:	bf00      	nop
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40014400 	.word	0x40014400
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	40014800 	.word	0x40014800

08002f84 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f88:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <MX_USART1_UART_Init+0x4c>)
 8002f8a:	4a12      	ldr	r2, [pc, #72]	; (8002fd4 <MX_USART1_UART_Init+0x50>)
 8002f8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002f8e:	4b10      	ldr	r3, [pc, #64]	; (8002fd0 <MX_USART1_UART_Init+0x4c>)
 8002f90:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002f94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f96:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <MX_USART1_UART_Init+0x4c>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <MX_USART1_UART_Init+0x4c>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fa2:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <MX_USART1_UART_Init+0x4c>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fa8:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <MX_USART1_UART_Init+0x4c>)
 8002faa:	220c      	movs	r2, #12
 8002fac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fae:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <MX_USART1_UART_Init+0x4c>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fb4:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <MX_USART1_UART_Init+0x4c>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fba:	4805      	ldr	r0, [pc, #20]	; (8002fd0 <MX_USART1_UART_Init+0x4c>)
 8002fbc:	f003 f806 	bl	8005fcc <HAL_UART_Init>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002fc6:	f7ff f953 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	2000561c 	.word	0x2000561c
 8002fd4:	40011000 	.word	0x40011000

08002fd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08a      	sub	sp, #40	; 0x28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe0:	f107 0314 	add.w	r3, r7, #20
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	605a      	str	r2, [r3, #4]
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	60da      	str	r2, [r3, #12]
 8002fee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a19      	ldr	r2, [pc, #100]	; (800305c <HAL_UART_MspInit+0x84>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d12c      	bne.n	8003054 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	4b18      	ldr	r3, [pc, #96]	; (8003060 <HAL_UART_MspInit+0x88>)
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	4a17      	ldr	r2, [pc, #92]	; (8003060 <HAL_UART_MspInit+0x88>)
 8003004:	f043 0310 	orr.w	r3, r3, #16
 8003008:	6453      	str	r3, [r2, #68]	; 0x44
 800300a:	4b15      	ldr	r3, [pc, #84]	; (8003060 <HAL_UART_MspInit+0x88>)
 800300c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300e:	f003 0310 	and.w	r3, r3, #16
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	4b11      	ldr	r3, [pc, #68]	; (8003060 <HAL_UART_MspInit+0x88>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	4a10      	ldr	r2, [pc, #64]	; (8003060 <HAL_UART_MspInit+0x88>)
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	6313      	str	r3, [r2, #48]	; 0x30
 8003026:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <HAL_UART_MspInit+0x88>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003032:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003038:	2302      	movs	r3, #2
 800303a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303c:	2300      	movs	r3, #0
 800303e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003040:	2303      	movs	r3, #3
 8003042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003044:	2307      	movs	r3, #7
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003048:	f107 0314 	add.w	r3, r7, #20
 800304c:	4619      	mov	r1, r3
 800304e:	4805      	ldr	r0, [pc, #20]	; (8003064 <HAL_UART_MspInit+0x8c>)
 8003050:	f000 fe76 	bl	8003d40 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003054:	bf00      	nop
 8003056:	3728      	adds	r7, #40	; 0x28
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40011000 	.word	0x40011000
 8003060:	40023800 	.word	0x40023800
 8003064:	40020000 	.word	0x40020000

08003068 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003068:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800306c:	480d      	ldr	r0, [pc, #52]	; (80030a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800306e:	490e      	ldr	r1, [pc, #56]	; (80030a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003070:	4a0e      	ldr	r2, [pc, #56]	; (80030ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003074:	e002      	b.n	800307c <LoopCopyDataInit>

08003076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800307a:	3304      	adds	r3, #4

0800307c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800307c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800307e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003080:	d3f9      	bcc.n	8003076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003082:	4a0b      	ldr	r2, [pc, #44]	; (80030b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003084:	4c0b      	ldr	r4, [pc, #44]	; (80030b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003088:	e001      	b.n	800308e <LoopFillZerobss>

0800308a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800308a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800308c:	3204      	adds	r2, #4

0800308e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800308e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003090:	d3fb      	bcc.n	800308a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003092:	f7ff fed9 	bl	8002e48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003096:	f00c ff81 	bl	800ff9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800309a:	f7ff f819 	bl	80020d0 <main>
  bx  lr    
 800309e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80030a0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80030a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030a8:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 80030ac:	08017054 	.word	0x08017054
  ldr r2, =_sbss
 80030b0:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80030b4:	20005b28 	.word	0x20005b28

080030b8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030b8:	e7fe      	b.n	80030b8 <DMA1_Stream0_IRQHandler>
	...

080030bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030c0:	4b0e      	ldr	r3, [pc, #56]	; (80030fc <HAL_Init+0x40>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a0d      	ldr	r2, [pc, #52]	; (80030fc <HAL_Init+0x40>)
 80030c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030cc:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <HAL_Init+0x40>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a0a      	ldr	r2, [pc, #40]	; (80030fc <HAL_Init+0x40>)
 80030d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030d8:	4b08      	ldr	r3, [pc, #32]	; (80030fc <HAL_Init+0x40>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a07      	ldr	r2, [pc, #28]	; (80030fc <HAL_Init+0x40>)
 80030de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030e4:	2003      	movs	r0, #3
 80030e6:	f000 fd64 	bl	8003bb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030ea:	2000      	movs	r0, #0
 80030ec:	f7ff fd34 	bl	8002b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030f0:	f7ff fd06 	bl	8002b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40023c00 	.word	0x40023c00

08003100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003104:	4b06      	ldr	r3, [pc, #24]	; (8003120 <HAL_IncTick+0x20>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	4b06      	ldr	r3, [pc, #24]	; (8003124 <HAL_IncTick+0x24>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4413      	add	r3, r2
 8003110:	4a04      	ldr	r2, [pc, #16]	; (8003124 <HAL_IncTick+0x24>)
 8003112:	6013      	str	r3, [r2, #0]
}
 8003114:	bf00      	nop
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	20000018 	.word	0x20000018
 8003124:	20005660 	.word	0x20005660

08003128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  return uwTick;
 800312c:	4b03      	ldr	r3, [pc, #12]	; (800313c <HAL_GetTick+0x14>)
 800312e:	681b      	ldr	r3, [r3, #0]
}
 8003130:	4618      	mov	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	20005660 	.word	0x20005660

08003140 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e033      	b.n	80031be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	2b00      	cmp	r3, #0
 800315c:	d109      	bne.n	8003172 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7fe f856 	bl	8001210 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	f003 0310 	and.w	r3, r3, #16
 800317a:	2b00      	cmp	r3, #0
 800317c:	d118      	bne.n	80031b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003186:	f023 0302 	bic.w	r3, r3, #2
 800318a:	f043 0202 	orr.w	r2, r3, #2
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 fb5a 	bl	800384c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	f023 0303 	bic.w	r3, r3, #3
 80031a6:	f043 0201 	orr.w	r2, r3, #1
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	641a      	str	r2, [r3, #64]	; 0x40
 80031ae:	e001      	b.n	80031b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
	...

080031c8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d101      	bne.n	80031e2 <HAL_ADC_Start_IT+0x1a>
 80031de:	2302      	movs	r3, #2
 80031e0:	e0a1      	b.n	8003326 <HAL_ADC_Start_IT+0x15e>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d018      	beq.n	800322a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 0201 	orr.w	r2, r2, #1
 8003206:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003208:	4b4a      	ldr	r3, [pc, #296]	; (8003334 <HAL_ADC_Start_IT+0x16c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a4a      	ldr	r2, [pc, #296]	; (8003338 <HAL_ADC_Start_IT+0x170>)
 800320e:	fba2 2303 	umull	r2, r3, r2, r3
 8003212:	0c9a      	lsrs	r2, r3, #18
 8003214:	4613      	mov	r3, r2
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	4413      	add	r3, r2
 800321a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800321c:	e002      	b.n	8003224 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	3b01      	subs	r3, #1
 8003222:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1f9      	bne.n	800321e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b01      	cmp	r3, #1
 8003236:	d169      	bne.n	800330c <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003240:	f023 0301 	bic.w	r3, r3, #1
 8003244:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003256:	2b00      	cmp	r3, #0
 8003258:	d007      	beq.n	800326a <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003262:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003276:	d106      	bne.n	8003286 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327c:	f023 0206 	bic.w	r2, r3, #6
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	645a      	str	r2, [r3, #68]	; 0x44
 8003284:	e002      	b.n	800328c <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003294:	4b29      	ldr	r3, [pc, #164]	; (800333c <HAL_ADC_Start_IT+0x174>)
 8003296:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80032a0:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6812      	ldr	r2, [r2, #0]
 80032ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032b0:	f043 0320 	orr.w	r3, r3, #32
 80032b4:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f003 031f 	and.w	r3, r3, #31
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10f      	bne.n	80032e2 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d129      	bne.n	8003324 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	e020      	b.n	8003324 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a16      	ldr	r2, [pc, #88]	; (8003340 <HAL_ADC_Start_IT+0x178>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d11b      	bne.n	8003324 <HAL_ADC_Start_IT+0x15c>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d114      	bne.n	8003324 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003308:	609a      	str	r2, [r3, #8]
 800330a:	e00b      	b.n	8003324 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	f043 0210 	orr.w	r2, r3, #16
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331c:	f043 0201 	orr.w	r2, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	20000010 	.word	0x20000010
 8003338:	431bde83 	.word	0x431bde83
 800333c:	40012300 	.word	0x40012300
 8003340:	40012000 	.word	0x40012000

08003344 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	2300      	movs	r3, #0
 8003352:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b02      	cmp	r3, #2
 8003360:	bf0c      	ite	eq
 8003362:	2301      	moveq	r3, #1
 8003364:	2300      	movne	r3, #0
 8003366:	b2db      	uxtb	r3, r3
 8003368:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 0320 	and.w	r3, r3, #32
 8003374:	2b20      	cmp	r3, #32
 8003376:	bf0c      	ite	eq
 8003378:	2301      	moveq	r3, #1
 800337a:	2300      	movne	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d049      	beq.n	800341a <HAL_ADC_IRQHandler+0xd6>
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d046      	beq.n	800341a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	f003 0310 	and.w	r3, r3, #16
 8003394:	2b00      	cmp	r3, #0
 8003396:	d105      	bne.n	80033a4 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d12b      	bne.n	800340a <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d127      	bne.n	800340a <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d006      	beq.n	80033d6 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d119      	bne.n	800340a <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0220 	bic.w	r2, r2, #32
 80033e4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d105      	bne.n	800340a <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	f043 0201 	orr.w	r2, r3, #1
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7fd ff44 	bl	8001298 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f06f 0212 	mvn.w	r2, #18
 8003418:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b04      	cmp	r3, #4
 8003426:	bf0c      	ite	eq
 8003428:	2301      	moveq	r3, #1
 800342a:	2300      	movne	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343a:	2b80      	cmp	r3, #128	; 0x80
 800343c:	bf0c      	ite	eq
 800343e:	2301      	moveq	r3, #1
 8003440:	2300      	movne	r3, #0
 8003442:	b2db      	uxtb	r3, r3
 8003444:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d057      	beq.n	80034fc <HAL_ADC_IRQHandler+0x1b8>
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d054      	beq.n	80034fc <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	f003 0310 	and.w	r3, r3, #16
 800345a:	2b00      	cmp	r3, #0
 800345c:	d105      	bne.n	800346a <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d139      	bne.n	80034ec <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003482:	2b00      	cmp	r3, #0
 8003484:	d006      	beq.n	8003494 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003490:	2b00      	cmp	r3, #0
 8003492:	d12b      	bne.n	80034ec <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d124      	bne.n	80034ec <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d11d      	bne.n	80034ec <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d119      	bne.n	80034ec <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034c6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d105      	bne.n	80034ec <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	f043 0201 	orr.w	r2, r3, #1
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 faa9 	bl	8003a44 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f06f 020c 	mvn.w	r2, #12
 80034fa:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b01      	cmp	r3, #1
 8003508:	bf0c      	ite	eq
 800350a:	2301      	moveq	r3, #1
 800350c:	2300      	movne	r3, #0
 800350e:	b2db      	uxtb	r3, r3
 8003510:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351c:	2b40      	cmp	r3, #64	; 0x40
 800351e:	bf0c      	ite	eq
 8003520:	2301      	moveq	r3, #1
 8003522:	2300      	movne	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d017      	beq.n	800355e <HAL_ADC_IRQHandler+0x21a>
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d014      	beq.n	800355e <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b01      	cmp	r3, #1
 8003540:	d10d      	bne.n	800355e <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f846 	bl	80035e0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f06f 0201 	mvn.w	r2, #1
 800355c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0320 	and.w	r3, r3, #32
 8003568:	2b20      	cmp	r3, #32
 800356a:	bf0c      	ite	eq
 800356c:	2301      	moveq	r3, #1
 800356e:	2300      	movne	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800357e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003582:	bf0c      	ite	eq
 8003584:	2301      	moveq	r3, #1
 8003586:	2300      	movne	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d015      	beq.n	80035be <HAL_ADC_IRQHandler+0x27a>
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d012      	beq.n	80035be <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359c:	f043 0202 	orr.w	r2, r3, #2
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 0220 	mvn.w	r2, #32
 80035ac:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f820 	bl	80035f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f06f 0220 	mvn.w	r2, #32
 80035bc:	601a      	str	r2, [r3, #0]
  }
}
 80035be:	bf00      	nop
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800361c:	2b01      	cmp	r3, #1
 800361e:	d101      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x1c>
 8003620:	2302      	movs	r3, #2
 8003622:	e105      	b.n	8003830 <HAL_ADC_ConfigChannel+0x228>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2b09      	cmp	r3, #9
 8003632:	d925      	bls.n	8003680 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68d9      	ldr	r1, [r3, #12]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	b29b      	uxth	r3, r3
 8003640:	461a      	mov	r2, r3
 8003642:	4613      	mov	r3, r2
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	4413      	add	r3, r2
 8003648:	3b1e      	subs	r3, #30
 800364a:	2207      	movs	r2, #7
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	43da      	mvns	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	400a      	ands	r2, r1
 8003658:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68d9      	ldr	r1, [r3, #12]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	b29b      	uxth	r3, r3
 800366a:	4618      	mov	r0, r3
 800366c:	4603      	mov	r3, r0
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	4403      	add	r3, r0
 8003672:	3b1e      	subs	r3, #30
 8003674:	409a      	lsls	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	60da      	str	r2, [r3, #12]
 800367e:	e022      	b.n	80036c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6919      	ldr	r1, [r3, #16]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	b29b      	uxth	r3, r3
 800368c:	461a      	mov	r2, r3
 800368e:	4613      	mov	r3, r2
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	4413      	add	r3, r2
 8003694:	2207      	movs	r2, #7
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	43da      	mvns	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	400a      	ands	r2, r1
 80036a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6919      	ldr	r1, [r3, #16]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	4618      	mov	r0, r3
 80036b6:	4603      	mov	r3, r0
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	4403      	add	r3, r0
 80036bc:	409a      	lsls	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b06      	cmp	r3, #6
 80036cc:	d824      	bhi.n	8003718 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	4613      	mov	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	3b05      	subs	r3, #5
 80036e0:	221f      	movs	r2, #31
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	43da      	mvns	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	400a      	ands	r2, r1
 80036ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	4618      	mov	r0, r3
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	4613      	mov	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	3b05      	subs	r3, #5
 800370a:	fa00 f203 	lsl.w	r2, r0, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	635a      	str	r2, [r3, #52]	; 0x34
 8003716:	e04c      	b.n	80037b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b0c      	cmp	r3, #12
 800371e:	d824      	bhi.n	800376a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	4613      	mov	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	3b23      	subs	r3, #35	; 0x23
 8003732:	221f      	movs	r2, #31
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	43da      	mvns	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	400a      	ands	r2, r1
 8003740:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	b29b      	uxth	r3, r3
 800374e:	4618      	mov	r0, r3
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	3b23      	subs	r3, #35	; 0x23
 800375c:	fa00 f203 	lsl.w	r2, r0, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	631a      	str	r2, [r3, #48]	; 0x30
 8003768:	e023      	b.n	80037b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	4613      	mov	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	3b41      	subs	r3, #65	; 0x41
 800377c:	221f      	movs	r2, #31
 800377e:	fa02 f303 	lsl.w	r3, r2, r3
 8003782:	43da      	mvns	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	400a      	ands	r2, r1
 800378a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	b29b      	uxth	r3, r3
 8003798:	4618      	mov	r0, r3
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	3b41      	subs	r3, #65	; 0x41
 80037a6:	fa00 f203 	lsl.w	r2, r0, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037b2:	4b22      	ldr	r3, [pc, #136]	; (800383c <HAL_ADC_ConfigChannel+0x234>)
 80037b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a21      	ldr	r2, [pc, #132]	; (8003840 <HAL_ADC_ConfigChannel+0x238>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d109      	bne.n	80037d4 <HAL_ADC_ConfigChannel+0x1cc>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b12      	cmp	r3, #18
 80037c6:	d105      	bne.n	80037d4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a19      	ldr	r2, [pc, #100]	; (8003840 <HAL_ADC_ConfigChannel+0x238>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d123      	bne.n	8003826 <HAL_ADC_ConfigChannel+0x21e>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2b10      	cmp	r3, #16
 80037e4:	d003      	beq.n	80037ee <HAL_ADC_ConfigChannel+0x1e6>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b11      	cmp	r3, #17
 80037ec:	d11b      	bne.n	8003826 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b10      	cmp	r3, #16
 8003800:	d111      	bne.n	8003826 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003802:	4b10      	ldr	r3, [pc, #64]	; (8003844 <HAL_ADC_ConfigChannel+0x23c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a10      	ldr	r2, [pc, #64]	; (8003848 <HAL_ADC_ConfigChannel+0x240>)
 8003808:	fba2 2303 	umull	r2, r3, r2, r3
 800380c:	0c9a      	lsrs	r2, r3, #18
 800380e:	4613      	mov	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003818:	e002      	b.n	8003820 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	3b01      	subs	r3, #1
 800381e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f9      	bne.n	800381a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3714      	adds	r7, #20
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	40012300 	.word	0x40012300
 8003840:	40012000 	.word	0x40012000
 8003844:	20000010 	.word	0x20000010
 8003848:	431bde83 	.word	0x431bde83

0800384c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003854:	4b79      	ldr	r3, [pc, #484]	; (8003a3c <ADC_Init+0x1f0>)
 8003856:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	431a      	orrs	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003880:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6859      	ldr	r1, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	021a      	lsls	r2, r3, #8
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80038a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6859      	ldr	r1, [r3, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6899      	ldr	r1, [r3, #8]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038de:	4a58      	ldr	r2, [pc, #352]	; (8003a40 <ADC_Init+0x1f4>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d022      	beq.n	800392a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6899      	ldr	r1, [r3, #8]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003914:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6899      	ldr	r1, [r3, #8]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	609a      	str	r2, [r3, #8]
 8003928:	e00f      	b.n	800394a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003938:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003948:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0202 	bic.w	r2, r2, #2
 8003958:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6899      	ldr	r1, [r3, #8]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	7e1b      	ldrb	r3, [r3, #24]
 8003964:	005a      	lsls	r2, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d01b      	beq.n	80039b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003986:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003996:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6859      	ldr	r1, [r3, #4]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	3b01      	subs	r3, #1
 80039a4:	035a      	lsls	r2, r3, #13
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	605a      	str	r2, [r3, #4]
 80039ae:	e007      	b.n	80039c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80039ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	3b01      	subs	r3, #1
 80039dc:	051a      	lsls	r2, r3, #20
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80039f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6899      	ldr	r1, [r3, #8]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a02:	025a      	lsls	r2, r3, #9
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6899      	ldr	r1, [r3, #8]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	029a      	lsls	r2, r3, #10
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	609a      	str	r2, [r3, #8]
}
 8003a30:	bf00      	nop
 8003a32:	3714      	adds	r7, #20
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr
 8003a3c:	40012300 	.word	0x40012300
 8003a40:	0f000001 	.word	0x0f000001

08003a44 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a68:	4b0c      	ldr	r3, [pc, #48]	; (8003a9c <__NVIC_SetPriorityGrouping+0x44>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a74:	4013      	ands	r3, r2
 8003a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a8a:	4a04      	ldr	r2, [pc, #16]	; (8003a9c <__NVIC_SetPriorityGrouping+0x44>)
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	60d3      	str	r3, [r2, #12]
}
 8003a90:	bf00      	nop
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	e000ed00 	.word	0xe000ed00

08003aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003aa4:	4b04      	ldr	r3, [pc, #16]	; (8003ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	0a1b      	lsrs	r3, r3, #8
 8003aaa:	f003 0307 	and.w	r3, r3, #7
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	e000ed00 	.word	0xe000ed00

08003abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	db0b      	blt.n	8003ae6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ace:	79fb      	ldrb	r3, [r7, #7]
 8003ad0:	f003 021f 	and.w	r2, r3, #31
 8003ad4:	4907      	ldr	r1, [pc, #28]	; (8003af4 <__NVIC_EnableIRQ+0x38>)
 8003ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ada:	095b      	lsrs	r3, r3, #5
 8003adc:	2001      	movs	r0, #1
 8003ade:	fa00 f202 	lsl.w	r2, r0, r2
 8003ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ae6:	bf00      	nop
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	e000e100 	.word	0xe000e100

08003af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	6039      	str	r1, [r7, #0]
 8003b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	db0a      	blt.n	8003b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	490c      	ldr	r1, [pc, #48]	; (8003b44 <__NVIC_SetPriority+0x4c>)
 8003b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b16:	0112      	lsls	r2, r2, #4
 8003b18:	b2d2      	uxtb	r2, r2
 8003b1a:	440b      	add	r3, r1
 8003b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b20:	e00a      	b.n	8003b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	4908      	ldr	r1, [pc, #32]	; (8003b48 <__NVIC_SetPriority+0x50>)
 8003b28:	79fb      	ldrb	r3, [r7, #7]
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	3b04      	subs	r3, #4
 8003b30:	0112      	lsls	r2, r2, #4
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	440b      	add	r3, r1
 8003b36:	761a      	strb	r2, [r3, #24]
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	e000e100 	.word	0xe000e100
 8003b48:	e000ed00 	.word	0xe000ed00

08003b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b089      	sub	sp, #36	; 0x24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	f1c3 0307 	rsb	r3, r3, #7
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	bf28      	it	cs
 8003b6a:	2304      	movcs	r3, #4
 8003b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	3304      	adds	r3, #4
 8003b72:	2b06      	cmp	r3, #6
 8003b74:	d902      	bls.n	8003b7c <NVIC_EncodePriority+0x30>
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	3b03      	subs	r3, #3
 8003b7a:	e000      	b.n	8003b7e <NVIC_EncodePriority+0x32>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b80:	f04f 32ff 	mov.w	r2, #4294967295
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8a:	43da      	mvns	r2, r3
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	401a      	ands	r2, r3
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b94:	f04f 31ff 	mov.w	r1, #4294967295
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9e:	43d9      	mvns	r1, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ba4:	4313      	orrs	r3, r2
         );
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3724      	adds	r7, #36	; 0x24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b082      	sub	sp, #8
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7ff ff4c 	bl	8003a58 <__NVIC_SetPriorityGrouping>
}
 8003bc0:	bf00      	nop
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
 8003bd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bda:	f7ff ff61 	bl	8003aa0 <__NVIC_GetPriorityGrouping>
 8003bde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	68b9      	ldr	r1, [r7, #8]
 8003be4:	6978      	ldr	r0, [r7, #20]
 8003be6:	f7ff ffb1 	bl	8003b4c <NVIC_EncodePriority>
 8003bea:	4602      	mov	r2, r0
 8003bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bf0:	4611      	mov	r1, r2
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff ff80 	bl	8003af8 <__NVIC_SetPriority>
}
 8003bf8:	bf00      	nop
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff ff54 	bl	8003abc <__NVIC_EnableIRQ>
}
 8003c14:	bf00      	nop
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c28:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c2a:	f7ff fa7d 	bl	8003128 <HAL_GetTick>
 8003c2e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d008      	beq.n	8003c4e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2280      	movs	r2, #128	; 0x80
 8003c40:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e052      	b.n	8003cf4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0216 	bic.w	r2, r2, #22
 8003c5c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	695a      	ldr	r2, [r3, #20]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c6c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d103      	bne.n	8003c7e <HAL_DMA_Abort+0x62>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d007      	beq.n	8003c8e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0208 	bic.w	r2, r2, #8
 8003c8c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0201 	bic.w	r2, r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c9e:	e013      	b.n	8003cc8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ca0:	f7ff fa42 	bl	8003128 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b05      	cmp	r3, #5
 8003cac:	d90c      	bls.n	8003cc8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2203      	movs	r2, #3
 8003cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e015      	b.n	8003cf4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1e4      	bne.n	8003ca0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cda:	223f      	movs	r2, #63	; 0x3f
 8003cdc:	409a      	lsls	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d004      	beq.n	8003d1a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2280      	movs	r2, #128	; 0x80
 8003d14:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e00c      	b.n	8003d34 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2205      	movs	r2, #5
 8003d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0201 	bic.w	r2, r2, #1
 8003d30:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b089      	sub	sp, #36	; 0x24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d52:	2300      	movs	r3, #0
 8003d54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d56:	2300      	movs	r3, #0
 8003d58:	61fb      	str	r3, [r7, #28]
 8003d5a:	e159      	b.n	8004010 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	f040 8148 	bne.w	800400a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d005      	beq.n	8003d92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d130      	bne.n	8003df4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	2203      	movs	r2, #3
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	43db      	mvns	r3, r3
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	4013      	ands	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dc8:	2201      	movs	r2, #1
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	091b      	lsrs	r3, r3, #4
 8003dde:	f003 0201 	and.w	r2, r3, #1
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f003 0303 	and.w	r3, r3, #3
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	d017      	beq.n	8003e30 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	2203      	movs	r2, #3
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	43db      	mvns	r3, r3
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4013      	ands	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f003 0303 	and.w	r3, r3, #3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d123      	bne.n	8003e84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	08da      	lsrs	r2, r3, #3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3208      	adds	r2, #8
 8003e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	220f      	movs	r2, #15
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	08da      	lsrs	r2, r3, #3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3208      	adds	r2, #8
 8003e7e:	69b9      	ldr	r1, [r7, #24]
 8003e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	2203      	movs	r2, #3
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	43db      	mvns	r3, r3
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f003 0203 	and.w	r2, r3, #3
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 80a2 	beq.w	800400a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	4b57      	ldr	r3, [pc, #348]	; (8004028 <HAL_GPIO_Init+0x2e8>)
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ece:	4a56      	ldr	r2, [pc, #344]	; (8004028 <HAL_GPIO_Init+0x2e8>)
 8003ed0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ed6:	4b54      	ldr	r3, [pc, #336]	; (8004028 <HAL_GPIO_Init+0x2e8>)
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ee2:	4a52      	ldr	r2, [pc, #328]	; (800402c <HAL_GPIO_Init+0x2ec>)
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	089b      	lsrs	r3, r3, #2
 8003ee8:	3302      	adds	r3, #2
 8003eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	220f      	movs	r2, #15
 8003efa:	fa02 f303 	lsl.w	r3, r2, r3
 8003efe:	43db      	mvns	r3, r3
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	4013      	ands	r3, r2
 8003f04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a49      	ldr	r2, [pc, #292]	; (8004030 <HAL_GPIO_Init+0x2f0>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d019      	beq.n	8003f42 <HAL_GPIO_Init+0x202>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a48      	ldr	r2, [pc, #288]	; (8004034 <HAL_GPIO_Init+0x2f4>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d013      	beq.n	8003f3e <HAL_GPIO_Init+0x1fe>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a47      	ldr	r2, [pc, #284]	; (8004038 <HAL_GPIO_Init+0x2f8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00d      	beq.n	8003f3a <HAL_GPIO_Init+0x1fa>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a46      	ldr	r2, [pc, #280]	; (800403c <HAL_GPIO_Init+0x2fc>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d007      	beq.n	8003f36 <HAL_GPIO_Init+0x1f6>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a45      	ldr	r2, [pc, #276]	; (8004040 <HAL_GPIO_Init+0x300>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d101      	bne.n	8003f32 <HAL_GPIO_Init+0x1f2>
 8003f2e:	2304      	movs	r3, #4
 8003f30:	e008      	b.n	8003f44 <HAL_GPIO_Init+0x204>
 8003f32:	2307      	movs	r3, #7
 8003f34:	e006      	b.n	8003f44 <HAL_GPIO_Init+0x204>
 8003f36:	2303      	movs	r3, #3
 8003f38:	e004      	b.n	8003f44 <HAL_GPIO_Init+0x204>
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	e002      	b.n	8003f44 <HAL_GPIO_Init+0x204>
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e000      	b.n	8003f44 <HAL_GPIO_Init+0x204>
 8003f42:	2300      	movs	r3, #0
 8003f44:	69fa      	ldr	r2, [r7, #28]
 8003f46:	f002 0203 	and.w	r2, r2, #3
 8003f4a:	0092      	lsls	r2, r2, #2
 8003f4c:	4093      	lsls	r3, r2
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f54:	4935      	ldr	r1, [pc, #212]	; (800402c <HAL_GPIO_Init+0x2ec>)
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	089b      	lsrs	r3, r3, #2
 8003f5a:	3302      	adds	r3, #2
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f62:	4b38      	ldr	r3, [pc, #224]	; (8004044 <HAL_GPIO_Init+0x304>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f86:	4a2f      	ldr	r2, [pc, #188]	; (8004044 <HAL_GPIO_Init+0x304>)
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f8c:	4b2d      	ldr	r3, [pc, #180]	; (8004044 <HAL_GPIO_Init+0x304>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	43db      	mvns	r3, r3
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fb0:	4a24      	ldr	r2, [pc, #144]	; (8004044 <HAL_GPIO_Init+0x304>)
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fb6:	4b23      	ldr	r3, [pc, #140]	; (8004044 <HAL_GPIO_Init+0x304>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fda:	4a1a      	ldr	r2, [pc, #104]	; (8004044 <HAL_GPIO_Init+0x304>)
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fe0:	4b18      	ldr	r3, [pc, #96]	; (8004044 <HAL_GPIO_Init+0x304>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	4013      	ands	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004004:	4a0f      	ldr	r2, [pc, #60]	; (8004044 <HAL_GPIO_Init+0x304>)
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	3301      	adds	r3, #1
 800400e:	61fb      	str	r3, [r7, #28]
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	2b0f      	cmp	r3, #15
 8004014:	f67f aea2 	bls.w	8003d5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004018:	bf00      	nop
 800401a:	bf00      	nop
 800401c:	3724      	adds	r7, #36	; 0x24
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	40023800 	.word	0x40023800
 800402c:	40013800 	.word	0x40013800
 8004030:	40020000 	.word	0x40020000
 8004034:	40020400 	.word	0x40020400
 8004038:	40020800 	.word	0x40020800
 800403c:	40020c00 	.word	0x40020c00
 8004040:	40021000 	.word	0x40021000
 8004044:	40013c00 	.word	0x40013c00

08004048 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691a      	ldr	r2, [r3, #16]
 8004058:	887b      	ldrh	r3, [r7, #2]
 800405a:	4013      	ands	r3, r2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d002      	beq.n	8004066 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004060:	2301      	movs	r3, #1
 8004062:	73fb      	strb	r3, [r7, #15]
 8004064:	e001      	b.n	800406a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004066:	2300      	movs	r3, #0
 8004068:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800406a:	7bfb      	ldrb	r3, [r7, #15]
}
 800406c:	4618      	mov	r0, r3
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	807b      	strh	r3, [r7, #2]
 8004084:	4613      	mov	r3, r2
 8004086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004088:	787b      	ldrb	r3, [r7, #1]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800408e:	887a      	ldrh	r2, [r7, #2]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004094:	e003      	b.n	800409e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004096:	887b      	ldrh	r3, [r7, #2]
 8004098:	041a      	lsls	r2, r3, #16
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	619a      	str	r2, [r3, #24]
}
 800409e:	bf00      	nop
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
	...

080040ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e12b      	b.n	8004316 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d106      	bne.n	80040d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7fd ffb4 	bl	8002040 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2224      	movs	r2, #36	; 0x24
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0201 	bic.w	r2, r2, #1
 80040ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800410e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004110:	f001 f966 	bl	80053e0 <HAL_RCC_GetPCLK1Freq>
 8004114:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	4a81      	ldr	r2, [pc, #516]	; (8004320 <HAL_I2C_Init+0x274>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d807      	bhi.n	8004130 <HAL_I2C_Init+0x84>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4a80      	ldr	r2, [pc, #512]	; (8004324 <HAL_I2C_Init+0x278>)
 8004124:	4293      	cmp	r3, r2
 8004126:	bf94      	ite	ls
 8004128:	2301      	movls	r3, #1
 800412a:	2300      	movhi	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	e006      	b.n	800413e <HAL_I2C_Init+0x92>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4a7d      	ldr	r2, [pc, #500]	; (8004328 <HAL_I2C_Init+0x27c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	bf94      	ite	ls
 8004138:	2301      	movls	r3, #1
 800413a:	2300      	movhi	r3, #0
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e0e7      	b.n	8004316 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	4a78      	ldr	r2, [pc, #480]	; (800432c <HAL_I2C_Init+0x280>)
 800414a:	fba2 2303 	umull	r2, r3, r2, r3
 800414e:	0c9b      	lsrs	r3, r3, #18
 8004150:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	430a      	orrs	r2, r1
 8004164:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	4a6a      	ldr	r2, [pc, #424]	; (8004320 <HAL_I2C_Init+0x274>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d802      	bhi.n	8004180 <HAL_I2C_Init+0xd4>
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	3301      	adds	r3, #1
 800417e:	e009      	b.n	8004194 <HAL_I2C_Init+0xe8>
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004186:	fb02 f303 	mul.w	r3, r2, r3
 800418a:	4a69      	ldr	r2, [pc, #420]	; (8004330 <HAL_I2C_Init+0x284>)
 800418c:	fba2 2303 	umull	r2, r3, r2, r3
 8004190:	099b      	lsrs	r3, r3, #6
 8004192:	3301      	adds	r3, #1
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6812      	ldr	r2, [r2, #0]
 8004198:	430b      	orrs	r3, r1
 800419a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80041a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	495c      	ldr	r1, [pc, #368]	; (8004320 <HAL_I2C_Init+0x274>)
 80041b0:	428b      	cmp	r3, r1
 80041b2:	d819      	bhi.n	80041e8 <HAL_I2C_Init+0x13c>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	1e59      	subs	r1, r3, #1
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	fbb1 f3f3 	udiv	r3, r1, r3
 80041c2:	1c59      	adds	r1, r3, #1
 80041c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80041c8:	400b      	ands	r3, r1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00a      	beq.n	80041e4 <HAL_I2C_Init+0x138>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	1e59      	subs	r1, r3, #1
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80041dc:	3301      	adds	r3, #1
 80041de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041e2:	e051      	b.n	8004288 <HAL_I2C_Init+0x1dc>
 80041e4:	2304      	movs	r3, #4
 80041e6:	e04f      	b.n	8004288 <HAL_I2C_Init+0x1dc>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d111      	bne.n	8004214 <HAL_I2C_Init+0x168>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	1e58      	subs	r0, r3, #1
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6859      	ldr	r1, [r3, #4]
 80041f8:	460b      	mov	r3, r1
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	440b      	add	r3, r1
 80041fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004202:	3301      	adds	r3, #1
 8004204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004208:	2b00      	cmp	r3, #0
 800420a:	bf0c      	ite	eq
 800420c:	2301      	moveq	r3, #1
 800420e:	2300      	movne	r3, #0
 8004210:	b2db      	uxtb	r3, r3
 8004212:	e012      	b.n	800423a <HAL_I2C_Init+0x18e>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	1e58      	subs	r0, r3, #1
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6859      	ldr	r1, [r3, #4]
 800421c:	460b      	mov	r3, r1
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	440b      	add	r3, r1
 8004222:	0099      	lsls	r1, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	fbb0 f3f3 	udiv	r3, r0, r3
 800422a:	3301      	adds	r3, #1
 800422c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004230:	2b00      	cmp	r3, #0
 8004232:	bf0c      	ite	eq
 8004234:	2301      	moveq	r3, #1
 8004236:	2300      	movne	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <HAL_I2C_Init+0x196>
 800423e:	2301      	movs	r3, #1
 8004240:	e022      	b.n	8004288 <HAL_I2C_Init+0x1dc>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10e      	bne.n	8004268 <HAL_I2C_Init+0x1bc>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	1e58      	subs	r0, r3, #1
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6859      	ldr	r1, [r3, #4]
 8004252:	460b      	mov	r3, r1
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	440b      	add	r3, r1
 8004258:	fbb0 f3f3 	udiv	r3, r0, r3
 800425c:	3301      	adds	r3, #1
 800425e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004266:	e00f      	b.n	8004288 <HAL_I2C_Init+0x1dc>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	1e58      	subs	r0, r3, #1
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6859      	ldr	r1, [r3, #4]
 8004270:	460b      	mov	r3, r1
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	440b      	add	r3, r1
 8004276:	0099      	lsls	r1, r3, #2
 8004278:	440b      	add	r3, r1
 800427a:	fbb0 f3f3 	udiv	r3, r0, r3
 800427e:	3301      	adds	r3, #1
 8004280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004284:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004288:	6879      	ldr	r1, [r7, #4]
 800428a:	6809      	ldr	r1, [r1, #0]
 800428c:	4313      	orrs	r3, r2
 800428e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69da      	ldr	r2, [r3, #28]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	430a      	orrs	r2, r1
 80042aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80042b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6911      	ldr	r1, [r2, #16]
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	68d2      	ldr	r2, [r2, #12]
 80042c2:	4311      	orrs	r1, r2
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6812      	ldr	r2, [r2, #0]
 80042c8:	430b      	orrs	r3, r1
 80042ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	695a      	ldr	r2, [r3, #20]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2220      	movs	r2, #32
 8004302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	000186a0 	.word	0x000186a0
 8004324:	001e847f 	.word	0x001e847f
 8004328:	003d08ff 	.word	0x003d08ff
 800432c:	431bde83 	.word	0x431bde83
 8004330:	10624dd3 	.word	0x10624dd3

08004334 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b088      	sub	sp, #32
 8004338:	af02      	add	r7, sp, #8
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	607a      	str	r2, [r7, #4]
 800433e:	461a      	mov	r2, r3
 8004340:	460b      	mov	r3, r1
 8004342:	817b      	strh	r3, [r7, #10]
 8004344:	4613      	mov	r3, r2
 8004346:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004348:	f7fe feee 	bl	8003128 <HAL_GetTick>
 800434c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b20      	cmp	r3, #32
 8004358:	f040 80e0 	bne.w	800451c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	2319      	movs	r3, #25
 8004362:	2201      	movs	r2, #1
 8004364:	4970      	ldr	r1, [pc, #448]	; (8004528 <HAL_I2C_Master_Transmit+0x1f4>)
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 fa92 	bl	8004890 <I2C_WaitOnFlagUntilTimeout>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004372:	2302      	movs	r3, #2
 8004374:	e0d3      	b.n	800451e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800437c:	2b01      	cmp	r3, #1
 800437e:	d101      	bne.n	8004384 <HAL_I2C_Master_Transmit+0x50>
 8004380:	2302      	movs	r3, #2
 8004382:	e0cc      	b.n	800451e <HAL_I2C_Master_Transmit+0x1ea>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b01      	cmp	r3, #1
 8004398:	d007      	beq.n	80043aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f042 0201 	orr.w	r2, r2, #1
 80043a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2221      	movs	r2, #33	; 0x21
 80043be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2210      	movs	r2, #16
 80043c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	893a      	ldrh	r2, [r7, #8]
 80043da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	4a50      	ldr	r2, [pc, #320]	; (800452c <HAL_I2C_Master_Transmit+0x1f8>)
 80043ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80043ec:	8979      	ldrh	r1, [r7, #10]
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	6a3a      	ldr	r2, [r7, #32]
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 f9ca 	bl	800478c <I2C_MasterRequestWrite>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e08d      	b.n	800451e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004402:	2300      	movs	r3, #0
 8004404:	613b      	str	r3, [r7, #16]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	613b      	str	r3, [r7, #16]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	613b      	str	r3, [r7, #16]
 8004416:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004418:	e066      	b.n	80044e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	6a39      	ldr	r1, [r7, #32]
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 fb0c 	bl	8004a3c <I2C_WaitOnTXEFlagUntilTimeout>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00d      	beq.n	8004446 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	2b04      	cmp	r3, #4
 8004430:	d107      	bne.n	8004442 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004440:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e06b      	b.n	800451e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	781a      	ldrb	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800446e:	3b01      	subs	r3, #1
 8004470:	b29a      	uxth	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b04      	cmp	r3, #4
 8004482:	d11b      	bne.n	80044bc <HAL_I2C_Master_Transmit+0x188>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004488:	2b00      	cmp	r3, #0
 800448a:	d017      	beq.n	80044bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	781a      	ldrb	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	3b01      	subs	r3, #1
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	6a39      	ldr	r1, [r7, #32]
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 fafc 	bl	8004abe <I2C_WaitOnBTFFlagUntilTimeout>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00d      	beq.n	80044e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d0:	2b04      	cmp	r3, #4
 80044d2:	d107      	bne.n	80044e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e01a      	b.n	800451e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d194      	bne.n	800441a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2220      	movs	r2, #32
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004518:	2300      	movs	r3, #0
 800451a:	e000      	b.n	800451e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800451c:	2302      	movs	r3, #2
  }
}
 800451e:	4618      	mov	r0, r3
 8004520:	3718      	adds	r7, #24
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	00100002 	.word	0x00100002
 800452c:	ffff0000 	.word	0xffff0000

08004530 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b08a      	sub	sp, #40	; 0x28
 8004534:	af02      	add	r7, sp, #8
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	607a      	str	r2, [r7, #4]
 800453a:	603b      	str	r3, [r7, #0]
 800453c:	460b      	mov	r3, r1
 800453e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004540:	f7fe fdf2 	bl	8003128 <HAL_GetTick>
 8004544:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004546:	2301      	movs	r3, #1
 8004548:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b20      	cmp	r3, #32
 8004554:	f040 8111 	bne.w	800477a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	2319      	movs	r3, #25
 800455e:	2201      	movs	r2, #1
 8004560:	4988      	ldr	r1, [pc, #544]	; (8004784 <HAL_I2C_IsDeviceReady+0x254>)
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 f994 	bl	8004890 <I2C_WaitOnFlagUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800456e:	2302      	movs	r3, #2
 8004570:	e104      	b.n	800477c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004578:	2b01      	cmp	r3, #1
 800457a:	d101      	bne.n	8004580 <HAL_I2C_IsDeviceReady+0x50>
 800457c:	2302      	movs	r3, #2
 800457e:	e0fd      	b.n	800477c <HAL_I2C_IsDeviceReady+0x24c>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b01      	cmp	r3, #1
 8004594:	d007      	beq.n	80045a6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f042 0201 	orr.w	r2, r2, #1
 80045a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2224      	movs	r2, #36	; 0x24
 80045ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4a70      	ldr	r2, [pc, #448]	; (8004788 <HAL_I2C_IsDeviceReady+0x258>)
 80045c8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045d8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 f952 	bl	8004890 <I2C_WaitOnFlagUntilTimeout>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00d      	beq.n	800460e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004600:	d103      	bne.n	800460a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004608:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e0b6      	b.n	800477c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800460e:	897b      	ldrh	r3, [r7, #10]
 8004610:	b2db      	uxtb	r3, r3
 8004612:	461a      	mov	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800461c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800461e:	f7fe fd83 	bl	8003128 <HAL_GetTick>
 8004622:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b02      	cmp	r3, #2
 8004630:	bf0c      	ite	eq
 8004632:	2301      	moveq	r3, #1
 8004634:	2300      	movne	r3, #0
 8004636:	b2db      	uxtb	r3, r3
 8004638:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004648:	bf0c      	ite	eq
 800464a:	2301      	moveq	r3, #1
 800464c:	2300      	movne	r3, #0
 800464e:	b2db      	uxtb	r3, r3
 8004650:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004652:	e025      	b.n	80046a0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004654:	f7fe fd68 	bl	8003128 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	429a      	cmp	r2, r3
 8004662:	d302      	bcc.n	800466a <HAL_I2C_IsDeviceReady+0x13a>
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d103      	bne.n	8004672 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	22a0      	movs	r2, #160	; 0xa0
 800466e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b02      	cmp	r3, #2
 800467e:	bf0c      	ite	eq
 8004680:	2301      	moveq	r3, #1
 8004682:	2300      	movne	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004696:	bf0c      	ite	eq
 8004698:	2301      	moveq	r3, #1
 800469a:	2300      	movne	r3, #0
 800469c:	b2db      	uxtb	r3, r3
 800469e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2ba0      	cmp	r3, #160	; 0xa0
 80046aa:	d005      	beq.n	80046b8 <HAL_I2C_IsDeviceReady+0x188>
 80046ac:	7dfb      	ldrb	r3, [r7, #23]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d102      	bne.n	80046b8 <HAL_I2C_IsDeviceReady+0x188>
 80046b2:	7dbb      	ldrb	r3, [r7, #22]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0cd      	beq.n	8004654 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d129      	bne.n	8004722 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046dc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046de:	2300      	movs	r3, #0
 80046e0:	613b      	str	r3, [r7, #16]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	613b      	str	r3, [r7, #16]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	613b      	str	r3, [r7, #16]
 80046f2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	2319      	movs	r3, #25
 80046fa:	2201      	movs	r2, #1
 80046fc:	4921      	ldr	r1, [pc, #132]	; (8004784 <HAL_I2C_IsDeviceReady+0x254>)
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f000 f8c6 	bl	8004890 <I2C_WaitOnFlagUntilTimeout>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e036      	b.n	800477c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2220      	movs	r2, #32
 8004712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800471e:	2300      	movs	r3, #0
 8004720:	e02c      	b.n	800477c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004730:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800473a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	2319      	movs	r3, #25
 8004742:	2201      	movs	r2, #1
 8004744:	490f      	ldr	r1, [pc, #60]	; (8004784 <HAL_I2C_IsDeviceReady+0x254>)
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 f8a2 	bl	8004890 <I2C_WaitOnFlagUntilTimeout>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e012      	b.n	800477c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	3301      	adds	r3, #1
 800475a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	429a      	cmp	r2, r3
 8004762:	f4ff af32 	bcc.w	80045ca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2220      	movs	r2, #32
 800476a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e000      	b.n	800477c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800477a:	2302      	movs	r3, #2
  }
}
 800477c:	4618      	mov	r0, r3
 800477e:	3720      	adds	r7, #32
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	00100002 	.word	0x00100002
 8004788:	ffff0000 	.word	0xffff0000

0800478c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af02      	add	r7, sp, #8
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	607a      	str	r2, [r7, #4]
 8004796:	603b      	str	r3, [r7, #0]
 8004798:	460b      	mov	r3, r1
 800479a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d006      	beq.n	80047b6 <I2C_MasterRequestWrite+0x2a>
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d003      	beq.n	80047b6 <I2C_MasterRequestWrite+0x2a>
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047b4:	d108      	bne.n	80047c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	e00b      	b.n	80047e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047cc:	2b12      	cmp	r3, #18
 80047ce:	d107      	bne.n	80047e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 f84f 	bl	8004890 <I2C_WaitOnFlagUntilTimeout>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00d      	beq.n	8004814 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004806:	d103      	bne.n	8004810 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800480e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e035      	b.n	8004880 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800481c:	d108      	bne.n	8004830 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800481e:	897b      	ldrh	r3, [r7, #10]
 8004820:	b2db      	uxtb	r3, r3
 8004822:	461a      	mov	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800482c:	611a      	str	r2, [r3, #16]
 800482e:	e01b      	b.n	8004868 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004830:	897b      	ldrh	r3, [r7, #10]
 8004832:	11db      	asrs	r3, r3, #7
 8004834:	b2db      	uxtb	r3, r3
 8004836:	f003 0306 	and.w	r3, r3, #6
 800483a:	b2db      	uxtb	r3, r3
 800483c:	f063 030f 	orn	r3, r3, #15
 8004840:	b2da      	uxtb	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	490e      	ldr	r1, [pc, #56]	; (8004888 <I2C_MasterRequestWrite+0xfc>)
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f000 f875 	bl	800493e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e010      	b.n	8004880 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800485e:	897b      	ldrh	r3, [r7, #10]
 8004860:	b2da      	uxtb	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	4907      	ldr	r1, [pc, #28]	; (800488c <I2C_MasterRequestWrite+0x100>)
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 f865 	bl	800493e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e000      	b.n	8004880 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3718      	adds	r7, #24
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	00010008 	.word	0x00010008
 800488c:	00010002 	.word	0x00010002

08004890 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	603b      	str	r3, [r7, #0]
 800489c:	4613      	mov	r3, r2
 800489e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048a0:	e025      	b.n	80048ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a8:	d021      	beq.n	80048ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048aa:	f7fe fc3d 	bl	8003128 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d302      	bcc.n	80048c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d116      	bne.n	80048ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2220      	movs	r2, #32
 80048ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	f043 0220 	orr.w	r2, r3, #32
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e023      	b.n	8004936 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	0c1b      	lsrs	r3, r3, #16
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d10d      	bne.n	8004914 <I2C_WaitOnFlagUntilTimeout+0x84>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	43da      	mvns	r2, r3
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	4013      	ands	r3, r2
 8004904:	b29b      	uxth	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	bf0c      	ite	eq
 800490a:	2301      	moveq	r3, #1
 800490c:	2300      	movne	r3, #0
 800490e:	b2db      	uxtb	r3, r3
 8004910:	461a      	mov	r2, r3
 8004912:	e00c      	b.n	800492e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	43da      	mvns	r2, r3
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	4013      	ands	r3, r2
 8004920:	b29b      	uxth	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	bf0c      	ite	eq
 8004926:	2301      	moveq	r3, #1
 8004928:	2300      	movne	r3, #0
 800492a:	b2db      	uxtb	r3, r3
 800492c:	461a      	mov	r2, r3
 800492e:	79fb      	ldrb	r3, [r7, #7]
 8004930:	429a      	cmp	r2, r3
 8004932:	d0b6      	beq.n	80048a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b084      	sub	sp, #16
 8004942:	af00      	add	r7, sp, #0
 8004944:	60f8      	str	r0, [r7, #12]
 8004946:	60b9      	str	r1, [r7, #8]
 8004948:	607a      	str	r2, [r7, #4]
 800494a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800494c:	e051      	b.n	80049f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800495c:	d123      	bne.n	80049a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800496c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004976:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2220      	movs	r2, #32
 8004982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004992:	f043 0204 	orr.w	r2, r3, #4
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e046      	b.n	8004a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ac:	d021      	beq.n	80049f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ae:	f7fe fbbb 	bl	8003128 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d302      	bcc.n	80049c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d116      	bne.n	80049f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	f043 0220 	orr.w	r2, r3, #32
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e020      	b.n	8004a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	0c1b      	lsrs	r3, r3, #16
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d10c      	bne.n	8004a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	43da      	mvns	r2, r3
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	4013      	ands	r3, r2
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	bf14      	ite	ne
 8004a0e:	2301      	movne	r3, #1
 8004a10:	2300      	moveq	r3, #0
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	e00b      	b.n	8004a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	43da      	mvns	r2, r3
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	4013      	ands	r3, r2
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	bf14      	ite	ne
 8004a28:	2301      	movne	r3, #1
 8004a2a:	2300      	moveq	r3, #0
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d18d      	bne.n	800494e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a48:	e02d      	b.n	8004aa6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 f878 	bl	8004b40 <I2C_IsAcknowledgeFailed>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e02d      	b.n	8004ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a60:	d021      	beq.n	8004aa6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a62:	f7fe fb61 	bl	8003128 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d302      	bcc.n	8004a78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d116      	bne.n	8004aa6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2220      	movs	r2, #32
 8004a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	f043 0220 	orr.w	r2, r3, #32
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e007      	b.n	8004ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab0:	2b80      	cmp	r3, #128	; 0x80
 8004ab2:	d1ca      	bne.n	8004a4a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b084      	sub	sp, #16
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	60f8      	str	r0, [r7, #12]
 8004ac6:	60b9      	str	r1, [r7, #8]
 8004ac8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004aca:	e02d      	b.n	8004b28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f000 f837 	bl	8004b40 <I2C_IsAcknowledgeFailed>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e02d      	b.n	8004b38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae2:	d021      	beq.n	8004b28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ae4:	f7fe fb20 	bl	8003128 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d302      	bcc.n	8004afa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d116      	bne.n	8004b28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2220      	movs	r2, #32
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b14:	f043 0220 	orr.w	r2, r3, #32
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e007      	b.n	8004b38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	f003 0304 	and.w	r3, r3, #4
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d1ca      	bne.n	8004acc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b56:	d11b      	bne.n	8004b90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7c:	f043 0204 	orr.w	r2, r3, #4
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e000      	b.n	8004b92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
	...

08004ba0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e264      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d075      	beq.n	8004caa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bbe:	4ba3      	ldr	r3, [pc, #652]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 030c 	and.w	r3, r3, #12
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d00c      	beq.n	8004be4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bca:	4ba0      	ldr	r3, [pc, #640]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bd2:	2b08      	cmp	r3, #8
 8004bd4:	d112      	bne.n	8004bfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bd6:	4b9d      	ldr	r3, [pc, #628]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004be2:	d10b      	bne.n	8004bfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be4:	4b99      	ldr	r3, [pc, #612]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d05b      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x108>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d157      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e23f      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c04:	d106      	bne.n	8004c14 <HAL_RCC_OscConfig+0x74>
 8004c06:	4b91      	ldr	r3, [pc, #580]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a90      	ldr	r2, [pc, #576]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	e01d      	b.n	8004c50 <HAL_RCC_OscConfig+0xb0>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c1c:	d10c      	bne.n	8004c38 <HAL_RCC_OscConfig+0x98>
 8004c1e:	4b8b      	ldr	r3, [pc, #556]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a8a      	ldr	r2, [pc, #552]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	4b88      	ldr	r3, [pc, #544]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a87      	ldr	r2, [pc, #540]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	e00b      	b.n	8004c50 <HAL_RCC_OscConfig+0xb0>
 8004c38:	4b84      	ldr	r3, [pc, #528]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a83      	ldr	r2, [pc, #524]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c42:	6013      	str	r3, [r2, #0]
 8004c44:	4b81      	ldr	r3, [pc, #516]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a80      	ldr	r2, [pc, #512]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d013      	beq.n	8004c80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c58:	f7fe fa66 	bl	8003128 <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c60:	f7fe fa62 	bl	8003128 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b64      	cmp	r3, #100	; 0x64
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e204      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c72:	4b76      	ldr	r3, [pc, #472]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0f0      	beq.n	8004c60 <HAL_RCC_OscConfig+0xc0>
 8004c7e:	e014      	b.n	8004caa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c80:	f7fe fa52 	bl	8003128 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c88:	f7fe fa4e 	bl	8003128 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b64      	cmp	r3, #100	; 0x64
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e1f0      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c9a:	4b6c      	ldr	r3, [pc, #432]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f0      	bne.n	8004c88 <HAL_RCC_OscConfig+0xe8>
 8004ca6:	e000      	b.n	8004caa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d063      	beq.n	8004d7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cb6:	4b65      	ldr	r3, [pc, #404]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 030c 	and.w	r3, r3, #12
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00b      	beq.n	8004cda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cc2:	4b62      	ldr	r3, [pc, #392]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cca:	2b08      	cmp	r3, #8
 8004ccc:	d11c      	bne.n	8004d08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cce:	4b5f      	ldr	r3, [pc, #380]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d116      	bne.n	8004d08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cda:	4b5c      	ldr	r3, [pc, #368]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d005      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x152>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d001      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e1c4      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf2:	4b56      	ldr	r3, [pc, #344]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	4952      	ldr	r1, [pc, #328]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d06:	e03a      	b.n	8004d7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d020      	beq.n	8004d52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d10:	4b4f      	ldr	r3, [pc, #316]	; (8004e50 <HAL_RCC_OscConfig+0x2b0>)
 8004d12:	2201      	movs	r2, #1
 8004d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d16:	f7fe fa07 	bl	8003128 <HAL_GetTick>
 8004d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d1c:	e008      	b.n	8004d30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d1e:	f7fe fa03 	bl	8003128 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d901      	bls.n	8004d30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e1a5      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d30:	4b46      	ldr	r3, [pc, #280]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0f0      	beq.n	8004d1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d3c:	4b43      	ldr	r3, [pc, #268]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	00db      	lsls	r3, r3, #3
 8004d4a:	4940      	ldr	r1, [pc, #256]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	600b      	str	r3, [r1, #0]
 8004d50:	e015      	b.n	8004d7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d52:	4b3f      	ldr	r3, [pc, #252]	; (8004e50 <HAL_RCC_OscConfig+0x2b0>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d58:	f7fe f9e6 	bl	8003128 <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d60:	f7fe f9e2 	bl	8003128 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e184      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d72:	4b36      	ldr	r3, [pc, #216]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1f0      	bne.n	8004d60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0308 	and.w	r3, r3, #8
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d030      	beq.n	8004dec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d016      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d92:	4b30      	ldr	r3, [pc, #192]	; (8004e54 <HAL_RCC_OscConfig+0x2b4>)
 8004d94:	2201      	movs	r2, #1
 8004d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d98:	f7fe f9c6 	bl	8003128 <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004da0:	f7fe f9c2 	bl	8003128 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e164      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004db2:	4b26      	ldr	r3, [pc, #152]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0f0      	beq.n	8004da0 <HAL_RCC_OscConfig+0x200>
 8004dbe:	e015      	b.n	8004dec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dc0:	4b24      	ldr	r3, [pc, #144]	; (8004e54 <HAL_RCC_OscConfig+0x2b4>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dc6:	f7fe f9af 	bl	8003128 <HAL_GetTick>
 8004dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dcc:	e008      	b.n	8004de0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dce:	f7fe f9ab 	bl	8003128 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d901      	bls.n	8004de0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e14d      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004de0:	4b1a      	ldr	r3, [pc, #104]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1f0      	bne.n	8004dce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0304 	and.w	r3, r3, #4
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 80a0 	beq.w	8004f3a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dfe:	4b13      	ldr	r3, [pc, #76]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10f      	bne.n	8004e2a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60bb      	str	r3, [r7, #8]
 8004e0e:	4b0f      	ldr	r3, [pc, #60]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e12:	4a0e      	ldr	r2, [pc, #56]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e18:	6413      	str	r3, [r2, #64]	; 0x40
 8004e1a:	4b0c      	ldr	r3, [pc, #48]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e22:	60bb      	str	r3, [r7, #8]
 8004e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e26:	2301      	movs	r3, #1
 8004e28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e2a:	4b0b      	ldr	r3, [pc, #44]	; (8004e58 <HAL_RCC_OscConfig+0x2b8>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d121      	bne.n	8004e7a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e36:	4b08      	ldr	r3, [pc, #32]	; (8004e58 <HAL_RCC_OscConfig+0x2b8>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a07      	ldr	r2, [pc, #28]	; (8004e58 <HAL_RCC_OscConfig+0x2b8>)
 8004e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e42:	f7fe f971 	bl	8003128 <HAL_GetTick>
 8004e46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e48:	e011      	b.n	8004e6e <HAL_RCC_OscConfig+0x2ce>
 8004e4a:	bf00      	nop
 8004e4c:	40023800 	.word	0x40023800
 8004e50:	42470000 	.word	0x42470000
 8004e54:	42470e80 	.word	0x42470e80
 8004e58:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e5c:	f7fe f964 	bl	8003128 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e106      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e6e:	4b85      	ldr	r3, [pc, #532]	; (8005084 <HAL_RCC_OscConfig+0x4e4>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0f0      	beq.n	8004e5c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d106      	bne.n	8004e90 <HAL_RCC_OscConfig+0x2f0>
 8004e82:	4b81      	ldr	r3, [pc, #516]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e86:	4a80      	ldr	r2, [pc, #512]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004e88:	f043 0301 	orr.w	r3, r3, #1
 8004e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e8e:	e01c      	b.n	8004eca <HAL_RCC_OscConfig+0x32a>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	2b05      	cmp	r3, #5
 8004e96:	d10c      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x312>
 8004e98:	4b7b      	ldr	r3, [pc, #492]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9c:	4a7a      	ldr	r2, [pc, #488]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004e9e:	f043 0304 	orr.w	r3, r3, #4
 8004ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ea4:	4b78      	ldr	r3, [pc, #480]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea8:	4a77      	ldr	r2, [pc, #476]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004eaa:	f043 0301 	orr.w	r3, r3, #1
 8004eae:	6713      	str	r3, [r2, #112]	; 0x70
 8004eb0:	e00b      	b.n	8004eca <HAL_RCC_OscConfig+0x32a>
 8004eb2:	4b75      	ldr	r3, [pc, #468]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb6:	4a74      	ldr	r2, [pc, #464]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004eb8:	f023 0301 	bic.w	r3, r3, #1
 8004ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8004ebe:	4b72      	ldr	r3, [pc, #456]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec2:	4a71      	ldr	r2, [pc, #452]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004ec4:	f023 0304 	bic.w	r3, r3, #4
 8004ec8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d015      	beq.n	8004efe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed2:	f7fe f929 	bl	8003128 <HAL_GetTick>
 8004ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed8:	e00a      	b.n	8004ef0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eda:	f7fe f925 	bl	8003128 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e0c5      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ef0:	4b65      	ldr	r3, [pc, #404]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0ee      	beq.n	8004eda <HAL_RCC_OscConfig+0x33a>
 8004efc:	e014      	b.n	8004f28 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004efe:	f7fe f913 	bl	8003128 <HAL_GetTick>
 8004f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f04:	e00a      	b.n	8004f1c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f06:	f7fe f90f 	bl	8003128 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d901      	bls.n	8004f1c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e0af      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f1c:	4b5a      	ldr	r3, [pc, #360]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1ee      	bne.n	8004f06 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f28:	7dfb      	ldrb	r3, [r7, #23]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d105      	bne.n	8004f3a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f2e:	4b56      	ldr	r3, [pc, #344]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	4a55      	ldr	r2, [pc, #340]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f000 809b 	beq.w	800507a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f44:	4b50      	ldr	r3, [pc, #320]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f003 030c 	and.w	r3, r3, #12
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	d05c      	beq.n	800500a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d141      	bne.n	8004fdc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f58:	4b4c      	ldr	r3, [pc, #304]	; (800508c <HAL_RCC_OscConfig+0x4ec>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f5e:	f7fe f8e3 	bl	8003128 <HAL_GetTick>
 8004f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f64:	e008      	b.n	8004f78 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f66:	f7fe f8df 	bl	8003128 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d901      	bls.n	8004f78 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e081      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f78:	4b43      	ldr	r3, [pc, #268]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1f0      	bne.n	8004f66 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	69da      	ldr	r2, [r3, #28]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	019b      	lsls	r3, r3, #6
 8004f94:	431a      	orrs	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9a:	085b      	lsrs	r3, r3, #1
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	041b      	lsls	r3, r3, #16
 8004fa0:	431a      	orrs	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa6:	061b      	lsls	r3, r3, #24
 8004fa8:	4937      	ldr	r1, [pc, #220]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fae:	4b37      	ldr	r3, [pc, #220]	; (800508c <HAL_RCC_OscConfig+0x4ec>)
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb4:	f7fe f8b8 	bl	8003128 <HAL_GetTick>
 8004fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fba:	e008      	b.n	8004fce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fbc:	f7fe f8b4 	bl	8003128 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e056      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fce:	4b2e      	ldr	r3, [pc, #184]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0f0      	beq.n	8004fbc <HAL_RCC_OscConfig+0x41c>
 8004fda:	e04e      	b.n	800507a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fdc:	4b2b      	ldr	r3, [pc, #172]	; (800508c <HAL_RCC_OscConfig+0x4ec>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe2:	f7fe f8a1 	bl	8003128 <HAL_GetTick>
 8004fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fe8:	e008      	b.n	8004ffc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fea:	f7fe f89d 	bl	8003128 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e03f      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ffc:	4b22      	ldr	r3, [pc, #136]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1f0      	bne.n	8004fea <HAL_RCC_OscConfig+0x44a>
 8005008:	e037      	b.n	800507a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d101      	bne.n	8005016 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e032      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005016:	4b1c      	ldr	r3, [pc, #112]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d028      	beq.n	8005076 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800502e:	429a      	cmp	r2, r3
 8005030:	d121      	bne.n	8005076 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800503c:	429a      	cmp	r2, r3
 800503e:	d11a      	bne.n	8005076 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005046:	4013      	ands	r3, r2
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800504c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800504e:	4293      	cmp	r3, r2
 8005050:	d111      	bne.n	8005076 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505c:	085b      	lsrs	r3, r3, #1
 800505e:	3b01      	subs	r3, #1
 8005060:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005062:	429a      	cmp	r2, r3
 8005064:	d107      	bne.n	8005076 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005070:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005072:	429a      	cmp	r2, r3
 8005074:	d001      	beq.n	800507a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e000      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3718      	adds	r7, #24
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	40007000 	.word	0x40007000
 8005088:	40023800 	.word	0x40023800
 800508c:	42470060 	.word	0x42470060

08005090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e0cc      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050a4:	4b68      	ldr	r3, [pc, #416]	; (8005248 <HAL_RCC_ClockConfig+0x1b8>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d90c      	bls.n	80050cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050b2:	4b65      	ldr	r3, [pc, #404]	; (8005248 <HAL_RCC_ClockConfig+0x1b8>)
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ba:	4b63      	ldr	r3, [pc, #396]	; (8005248 <HAL_RCC_ClockConfig+0x1b8>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0307 	and.w	r3, r3, #7
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d001      	beq.n	80050cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e0b8      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d020      	beq.n	800511a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0304 	and.w	r3, r3, #4
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d005      	beq.n	80050f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050e4:	4b59      	ldr	r3, [pc, #356]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	4a58      	ldr	r2, [pc, #352]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 80050ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0308 	and.w	r3, r3, #8
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d005      	beq.n	8005108 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050fc:	4b53      	ldr	r3, [pc, #332]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	4a52      	ldr	r2, [pc, #328]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005102:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005106:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005108:	4b50      	ldr	r3, [pc, #320]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	494d      	ldr	r1, [pc, #308]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005116:	4313      	orrs	r3, r2
 8005118:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b00      	cmp	r3, #0
 8005124:	d044      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d107      	bne.n	800513e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800512e:	4b47      	ldr	r3, [pc, #284]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d119      	bne.n	800516e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e07f      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	2b02      	cmp	r3, #2
 8005144:	d003      	beq.n	800514e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800514a:	2b03      	cmp	r3, #3
 800514c:	d107      	bne.n	800515e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800514e:	4b3f      	ldr	r3, [pc, #252]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d109      	bne.n	800516e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e06f      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800515e:	4b3b      	ldr	r3, [pc, #236]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e067      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800516e:	4b37      	ldr	r3, [pc, #220]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f023 0203 	bic.w	r2, r3, #3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	4934      	ldr	r1, [pc, #208]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 800517c:	4313      	orrs	r3, r2
 800517e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005180:	f7fd ffd2 	bl	8003128 <HAL_GetTick>
 8005184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005186:	e00a      	b.n	800519e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005188:	f7fd ffce 	bl	8003128 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	f241 3288 	movw	r2, #5000	; 0x1388
 8005196:	4293      	cmp	r3, r2
 8005198:	d901      	bls.n	800519e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e04f      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800519e:	4b2b      	ldr	r3, [pc, #172]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f003 020c 	and.w	r2, r3, #12
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d1eb      	bne.n	8005188 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051b0:	4b25      	ldr	r3, [pc, #148]	; (8005248 <HAL_RCC_ClockConfig+0x1b8>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d20c      	bcs.n	80051d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051be:	4b22      	ldr	r3, [pc, #136]	; (8005248 <HAL_RCC_ClockConfig+0x1b8>)
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051c6:	4b20      	ldr	r3, [pc, #128]	; (8005248 <HAL_RCC_ClockConfig+0x1b8>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d001      	beq.n	80051d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e032      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0304 	and.w	r3, r3, #4
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d008      	beq.n	80051f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051e4:	4b19      	ldr	r3, [pc, #100]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	4916      	ldr	r1, [pc, #88]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0308 	and.w	r3, r3, #8
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d009      	beq.n	8005216 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005202:	4b12      	ldr	r3, [pc, #72]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	490e      	ldr	r1, [pc, #56]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005212:	4313      	orrs	r3, r2
 8005214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005216:	f000 f821 	bl	800525c <HAL_RCC_GetSysClockFreq>
 800521a:	4602      	mov	r2, r0
 800521c:	4b0b      	ldr	r3, [pc, #44]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	091b      	lsrs	r3, r3, #4
 8005222:	f003 030f 	and.w	r3, r3, #15
 8005226:	490a      	ldr	r1, [pc, #40]	; (8005250 <HAL_RCC_ClockConfig+0x1c0>)
 8005228:	5ccb      	ldrb	r3, [r1, r3]
 800522a:	fa22 f303 	lsr.w	r3, r2, r3
 800522e:	4a09      	ldr	r2, [pc, #36]	; (8005254 <HAL_RCC_ClockConfig+0x1c4>)
 8005230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005232:	4b09      	ldr	r3, [pc, #36]	; (8005258 <HAL_RCC_ClockConfig+0x1c8>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4618      	mov	r0, r3
 8005238:	f7fd fc8e 	bl	8002b58 <HAL_InitTick>

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	40023c00 	.word	0x40023c00
 800524c:	40023800 	.word	0x40023800
 8005250:	08016a04 	.word	0x08016a04
 8005254:	20000010 	.word	0x20000010
 8005258:	20000014 	.word	0x20000014

0800525c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800525c:	b5b0      	push	{r4, r5, r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005262:	2100      	movs	r1, #0
 8005264:	6079      	str	r1, [r7, #4]
 8005266:	2100      	movs	r1, #0
 8005268:	60f9      	str	r1, [r7, #12]
 800526a:	2100      	movs	r1, #0
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800526e:	2100      	movs	r1, #0
 8005270:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005272:	4952      	ldr	r1, [pc, #328]	; (80053bc <HAL_RCC_GetSysClockFreq+0x160>)
 8005274:	6889      	ldr	r1, [r1, #8]
 8005276:	f001 010c 	and.w	r1, r1, #12
 800527a:	2908      	cmp	r1, #8
 800527c:	d00d      	beq.n	800529a <HAL_RCC_GetSysClockFreq+0x3e>
 800527e:	2908      	cmp	r1, #8
 8005280:	f200 8094 	bhi.w	80053ac <HAL_RCC_GetSysClockFreq+0x150>
 8005284:	2900      	cmp	r1, #0
 8005286:	d002      	beq.n	800528e <HAL_RCC_GetSysClockFreq+0x32>
 8005288:	2904      	cmp	r1, #4
 800528a:	d003      	beq.n	8005294 <HAL_RCC_GetSysClockFreq+0x38>
 800528c:	e08e      	b.n	80053ac <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800528e:	4b4c      	ldr	r3, [pc, #304]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x164>)
 8005290:	60bb      	str	r3, [r7, #8]
       break;
 8005292:	e08e      	b.n	80053b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005294:	4b4b      	ldr	r3, [pc, #300]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x168>)
 8005296:	60bb      	str	r3, [r7, #8]
      break;
 8005298:	e08b      	b.n	80053b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800529a:	4948      	ldr	r1, [pc, #288]	; (80053bc <HAL_RCC_GetSysClockFreq+0x160>)
 800529c:	6849      	ldr	r1, [r1, #4]
 800529e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80052a2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052a4:	4945      	ldr	r1, [pc, #276]	; (80053bc <HAL_RCC_GetSysClockFreq+0x160>)
 80052a6:	6849      	ldr	r1, [r1, #4]
 80052a8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80052ac:	2900      	cmp	r1, #0
 80052ae:	d024      	beq.n	80052fa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052b0:	4942      	ldr	r1, [pc, #264]	; (80053bc <HAL_RCC_GetSysClockFreq+0x160>)
 80052b2:	6849      	ldr	r1, [r1, #4]
 80052b4:	0989      	lsrs	r1, r1, #6
 80052b6:	4608      	mov	r0, r1
 80052b8:	f04f 0100 	mov.w	r1, #0
 80052bc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80052c0:	f04f 0500 	mov.w	r5, #0
 80052c4:	ea00 0204 	and.w	r2, r0, r4
 80052c8:	ea01 0305 	and.w	r3, r1, r5
 80052cc:	493d      	ldr	r1, [pc, #244]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80052ce:	fb01 f003 	mul.w	r0, r1, r3
 80052d2:	2100      	movs	r1, #0
 80052d4:	fb01 f102 	mul.w	r1, r1, r2
 80052d8:	1844      	adds	r4, r0, r1
 80052da:	493a      	ldr	r1, [pc, #232]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80052dc:	fba2 0101 	umull	r0, r1, r2, r1
 80052e0:	1863      	adds	r3, r4, r1
 80052e2:	4619      	mov	r1, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	461a      	mov	r2, r3
 80052e8:	f04f 0300 	mov.w	r3, #0
 80052ec:	f7fb fcd4 	bl	8000c98 <__aeabi_uldivmod>
 80052f0:	4602      	mov	r2, r0
 80052f2:	460b      	mov	r3, r1
 80052f4:	4613      	mov	r3, r2
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	e04a      	b.n	8005390 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052fa:	4b30      	ldr	r3, [pc, #192]	; (80053bc <HAL_RCC_GetSysClockFreq+0x160>)
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	099b      	lsrs	r3, r3, #6
 8005300:	461a      	mov	r2, r3
 8005302:	f04f 0300 	mov.w	r3, #0
 8005306:	f240 10ff 	movw	r0, #511	; 0x1ff
 800530a:	f04f 0100 	mov.w	r1, #0
 800530e:	ea02 0400 	and.w	r4, r2, r0
 8005312:	ea03 0501 	and.w	r5, r3, r1
 8005316:	4620      	mov	r0, r4
 8005318:	4629      	mov	r1, r5
 800531a:	f04f 0200 	mov.w	r2, #0
 800531e:	f04f 0300 	mov.w	r3, #0
 8005322:	014b      	lsls	r3, r1, #5
 8005324:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005328:	0142      	lsls	r2, r0, #5
 800532a:	4610      	mov	r0, r2
 800532c:	4619      	mov	r1, r3
 800532e:	1b00      	subs	r0, r0, r4
 8005330:	eb61 0105 	sbc.w	r1, r1, r5
 8005334:	f04f 0200 	mov.w	r2, #0
 8005338:	f04f 0300 	mov.w	r3, #0
 800533c:	018b      	lsls	r3, r1, #6
 800533e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005342:	0182      	lsls	r2, r0, #6
 8005344:	1a12      	subs	r2, r2, r0
 8005346:	eb63 0301 	sbc.w	r3, r3, r1
 800534a:	f04f 0000 	mov.w	r0, #0
 800534e:	f04f 0100 	mov.w	r1, #0
 8005352:	00d9      	lsls	r1, r3, #3
 8005354:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005358:	00d0      	lsls	r0, r2, #3
 800535a:	4602      	mov	r2, r0
 800535c:	460b      	mov	r3, r1
 800535e:	1912      	adds	r2, r2, r4
 8005360:	eb45 0303 	adc.w	r3, r5, r3
 8005364:	f04f 0000 	mov.w	r0, #0
 8005368:	f04f 0100 	mov.w	r1, #0
 800536c:	0299      	lsls	r1, r3, #10
 800536e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005372:	0290      	lsls	r0, r2, #10
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	4610      	mov	r0, r2
 800537a:	4619      	mov	r1, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	461a      	mov	r2, r3
 8005380:	f04f 0300 	mov.w	r3, #0
 8005384:	f7fb fc88 	bl	8000c98 <__aeabi_uldivmod>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	4613      	mov	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005390:	4b0a      	ldr	r3, [pc, #40]	; (80053bc <HAL_RCC_GetSysClockFreq+0x160>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	0c1b      	lsrs	r3, r3, #16
 8005396:	f003 0303 	and.w	r3, r3, #3
 800539a:	3301      	adds	r3, #1
 800539c:	005b      	lsls	r3, r3, #1
 800539e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a8:	60bb      	str	r3, [r7, #8]
      break;
 80053aa:	e002      	b.n	80053b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053ac:	4b04      	ldr	r3, [pc, #16]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x164>)
 80053ae:	60bb      	str	r3, [r7, #8]
      break;
 80053b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053b2:	68bb      	ldr	r3, [r7, #8]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bdb0      	pop	{r4, r5, r7, pc}
 80053bc:	40023800 	.word	0x40023800
 80053c0:	00f42400 	.word	0x00f42400
 80053c4:	017d7840 	.word	0x017d7840

080053c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053c8:	b480      	push	{r7}
 80053ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053cc:	4b03      	ldr	r3, [pc, #12]	; (80053dc <HAL_RCC_GetHCLKFreq+0x14>)
 80053ce:	681b      	ldr	r3, [r3, #0]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	20000010 	.word	0x20000010

080053e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053e4:	f7ff fff0 	bl	80053c8 <HAL_RCC_GetHCLKFreq>
 80053e8:	4602      	mov	r2, r0
 80053ea:	4b05      	ldr	r3, [pc, #20]	; (8005400 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	0a9b      	lsrs	r3, r3, #10
 80053f0:	f003 0307 	and.w	r3, r3, #7
 80053f4:	4903      	ldr	r1, [pc, #12]	; (8005404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053f6:	5ccb      	ldrb	r3, [r1, r3]
 80053f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	40023800 	.word	0x40023800
 8005404:	08016a14 	.word	0x08016a14

08005408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800540c:	f7ff ffdc 	bl	80053c8 <HAL_RCC_GetHCLKFreq>
 8005410:	4602      	mov	r2, r0
 8005412:	4b05      	ldr	r3, [pc, #20]	; (8005428 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	0b5b      	lsrs	r3, r3, #13
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	4903      	ldr	r1, [pc, #12]	; (800542c <HAL_RCC_GetPCLK2Freq+0x24>)
 800541e:	5ccb      	ldrb	r3, [r1, r3]
 8005420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005424:	4618      	mov	r0, r3
 8005426:	bd80      	pop	{r7, pc}
 8005428:	40023800 	.word	0x40023800
 800542c:	08016a14 	.word	0x08016a14

08005430 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	220f      	movs	r2, #15
 800543e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005440:	4b12      	ldr	r3, [pc, #72]	; (800548c <HAL_RCC_GetClockConfig+0x5c>)
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f003 0203 	and.w	r2, r3, #3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800544c:	4b0f      	ldr	r3, [pc, #60]	; (800548c <HAL_RCC_GetClockConfig+0x5c>)
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005458:	4b0c      	ldr	r3, [pc, #48]	; (800548c <HAL_RCC_GetClockConfig+0x5c>)
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005464:	4b09      	ldr	r3, [pc, #36]	; (800548c <HAL_RCC_GetClockConfig+0x5c>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	08db      	lsrs	r3, r3, #3
 800546a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005472:	4b07      	ldr	r3, [pc, #28]	; (8005490 <HAL_RCC_GetClockConfig+0x60>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0207 	and.w	r2, r3, #7
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	601a      	str	r2, [r3, #0]
}
 800547e:	bf00      	nop
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	40023800 	.word	0x40023800
 8005490:	40023c00 	.word	0x40023c00

08005494 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e07b      	b.n	800559e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d108      	bne.n	80054c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054b6:	d009      	beq.n	80054cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	61da      	str	r2, [r3, #28]
 80054be:	e005      	b.n	80054cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d106      	bne.n	80054ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7fd f818 	bl	800251c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005502:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005514:	431a      	orrs	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800551e:	431a      	orrs	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	431a      	orrs	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	431a      	orrs	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800553c:	431a      	orrs	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005546:	431a      	orrs	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005550:	ea42 0103 	orr.w	r1, r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005558:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	0c1b      	lsrs	r3, r3, #16
 800556a:	f003 0104 	and.w	r1, r3, #4
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005572:	f003 0210 	and.w	r2, r3, #16
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	69da      	ldr	r2, [r3, #28]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800558c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b08c      	sub	sp, #48	; 0x30
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	60f8      	str	r0, [r7, #12]
 80055ae:	60b9      	str	r1, [r7, #8]
 80055b0:	607a      	str	r2, [r7, #4]
 80055b2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80055b4:	2301      	movs	r3, #1
 80055b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80055b8:	2300      	movs	r3, #0
 80055ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d101      	bne.n	80055cc <HAL_SPI_TransmitReceive+0x26>
 80055c8:	2302      	movs	r3, #2
 80055ca:	e18a      	b.n	80058e2 <HAL_SPI_TransmitReceive+0x33c>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055d4:	f7fd fda8 	bl	8003128 <HAL_GetTick>
 80055d8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80055ea:	887b      	ldrh	r3, [r7, #2]
 80055ec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80055ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d00f      	beq.n	8005616 <HAL_SPI_TransmitReceive+0x70>
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055fc:	d107      	bne.n	800560e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d103      	bne.n	800560e <HAL_SPI_TransmitReceive+0x68>
 8005606:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800560a:	2b04      	cmp	r3, #4
 800560c:	d003      	beq.n	8005616 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800560e:	2302      	movs	r3, #2
 8005610:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005614:	e15b      	b.n	80058ce <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d005      	beq.n	8005628 <HAL_SPI_TransmitReceive+0x82>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <HAL_SPI_TransmitReceive+0x82>
 8005622:	887b      	ldrh	r3, [r7, #2]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d103      	bne.n	8005630 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800562e:	e14e      	b.n	80058ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b04      	cmp	r3, #4
 800563a:	d003      	beq.n	8005644 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2205      	movs	r2, #5
 8005640:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	887a      	ldrh	r2, [r7, #2]
 8005654:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	887a      	ldrh	r2, [r7, #2]
 800565a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	887a      	ldrh	r2, [r7, #2]
 8005666:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	887a      	ldrh	r2, [r7, #2]
 800566c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005684:	2b40      	cmp	r3, #64	; 0x40
 8005686:	d007      	beq.n	8005698 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005696:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056a0:	d178      	bne.n	8005794 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d002      	beq.n	80056b0 <HAL_SPI_TransmitReceive+0x10a>
 80056aa:	8b7b      	ldrh	r3, [r7, #26]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d166      	bne.n	800577e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b4:	881a      	ldrh	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c0:	1c9a      	adds	r2, r3, #2
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	3b01      	subs	r3, #1
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056d4:	e053      	b.n	800577e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d11b      	bne.n	800571c <HAL_SPI_TransmitReceive+0x176>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d016      	beq.n	800571c <HAL_SPI_TransmitReceive+0x176>
 80056ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d113      	bne.n	800571c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f8:	881a      	ldrh	r2, [r3, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005704:	1c9a      	adds	r2, r3, #2
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800570e:	b29b      	uxth	r3, r3
 8005710:	3b01      	subs	r3, #1
 8005712:	b29a      	uxth	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b01      	cmp	r3, #1
 8005728:	d119      	bne.n	800575e <HAL_SPI_TransmitReceive+0x1b8>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800572e:	b29b      	uxth	r3, r3
 8005730:	2b00      	cmp	r3, #0
 8005732:	d014      	beq.n	800575e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68da      	ldr	r2, [r3, #12]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573e:	b292      	uxth	r2, r2
 8005740:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005746:	1c9a      	adds	r2, r3, #2
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005750:	b29b      	uxth	r3, r3
 8005752:	3b01      	subs	r3, #1
 8005754:	b29a      	uxth	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800575a:	2301      	movs	r3, #1
 800575c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800575e:	f7fd fce3 	bl	8003128 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800576a:	429a      	cmp	r2, r3
 800576c:	d807      	bhi.n	800577e <HAL_SPI_TransmitReceive+0x1d8>
 800576e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005774:	d003      	beq.n	800577e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800577c:	e0a7      	b.n	80058ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005782:	b29b      	uxth	r3, r3
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1a6      	bne.n	80056d6 <HAL_SPI_TransmitReceive+0x130>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800578c:	b29b      	uxth	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1a1      	bne.n	80056d6 <HAL_SPI_TransmitReceive+0x130>
 8005792:	e07c      	b.n	800588e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d002      	beq.n	80057a2 <HAL_SPI_TransmitReceive+0x1fc>
 800579c:	8b7b      	ldrh	r3, [r7, #26]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d16b      	bne.n	800587a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	330c      	adds	r3, #12
 80057ac:	7812      	ldrb	r2, [r2, #0]
 80057ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b4:	1c5a      	adds	r2, r3, #1
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057be:	b29b      	uxth	r3, r3
 80057c0:	3b01      	subs	r3, #1
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057c8:	e057      	b.n	800587a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d11c      	bne.n	8005812 <HAL_SPI_TransmitReceive+0x26c>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057dc:	b29b      	uxth	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d017      	beq.n	8005812 <HAL_SPI_TransmitReceive+0x26c>
 80057e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d114      	bne.n	8005812 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	330c      	adds	r3, #12
 80057f2:	7812      	ldrb	r2, [r2, #0]
 80057f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fa:	1c5a      	adds	r2, r3, #1
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005804:	b29b      	uxth	r3, r3
 8005806:	3b01      	subs	r3, #1
 8005808:	b29a      	uxth	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800580e:	2300      	movs	r3, #0
 8005810:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	2b01      	cmp	r3, #1
 800581e:	d119      	bne.n	8005854 <HAL_SPI_TransmitReceive+0x2ae>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005824:	b29b      	uxth	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d014      	beq.n	8005854 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68da      	ldr	r2, [r3, #12]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005834:	b2d2      	uxtb	r2, r2
 8005836:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583c:	1c5a      	adds	r2, r3, #1
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005846:	b29b      	uxth	r3, r3
 8005848:	3b01      	subs	r3, #1
 800584a:	b29a      	uxth	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005850:	2301      	movs	r3, #1
 8005852:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005854:	f7fd fc68 	bl	8003128 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005860:	429a      	cmp	r2, r3
 8005862:	d803      	bhi.n	800586c <HAL_SPI_TransmitReceive+0x2c6>
 8005864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586a:	d102      	bne.n	8005872 <HAL_SPI_TransmitReceive+0x2cc>
 800586c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586e:	2b00      	cmp	r3, #0
 8005870:	d103      	bne.n	800587a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005878:	e029      	b.n	80058ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800587e:	b29b      	uxth	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1a2      	bne.n	80057ca <HAL_SPI_TransmitReceive+0x224>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005888:	b29b      	uxth	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d19d      	bne.n	80057ca <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800588e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005890:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f000 f8b2 	bl	80059fc <SPI_EndRxTxTransaction>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d006      	beq.n	80058ac <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2220      	movs	r2, #32
 80058a8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80058aa:	e010      	b.n	80058ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10b      	bne.n	80058cc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058b4:	2300      	movs	r3, #0
 80058b6:	617b      	str	r3, [r7, #20]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	617b      	str	r3, [r7, #20]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	617b      	str	r3, [r7, #20]
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	e000      	b.n	80058ce <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80058cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80058de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3730      	adds	r7, #48	; 0x30
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
	...

080058ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b088      	sub	sp, #32
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	603b      	str	r3, [r7, #0]
 80058f8:	4613      	mov	r3, r2
 80058fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058fc:	f7fd fc14 	bl	8003128 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005904:	1a9b      	subs	r3, r3, r2
 8005906:	683a      	ldr	r2, [r7, #0]
 8005908:	4413      	add	r3, r2
 800590a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800590c:	f7fd fc0c 	bl	8003128 <HAL_GetTick>
 8005910:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005912:	4b39      	ldr	r3, [pc, #228]	; (80059f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	015b      	lsls	r3, r3, #5
 8005918:	0d1b      	lsrs	r3, r3, #20
 800591a:	69fa      	ldr	r2, [r7, #28]
 800591c:	fb02 f303 	mul.w	r3, r2, r3
 8005920:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005922:	e054      	b.n	80059ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592a:	d050      	beq.n	80059ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800592c:	f7fd fbfc 	bl	8003128 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	69fa      	ldr	r2, [r7, #28]
 8005938:	429a      	cmp	r2, r3
 800593a:	d902      	bls.n	8005942 <SPI_WaitFlagStateUntilTimeout+0x56>
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d13d      	bne.n	80059be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	685a      	ldr	r2, [r3, #4]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005950:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800595a:	d111      	bne.n	8005980 <SPI_WaitFlagStateUntilTimeout+0x94>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005964:	d004      	beq.n	8005970 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800596e:	d107      	bne.n	8005980 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800597e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005984:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005988:	d10f      	bne.n	80059aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005998:	601a      	str	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e017      	b.n	80059ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d101      	bne.n	80059c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80059c4:	2300      	movs	r3, #0
 80059c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	3b01      	subs	r3, #1
 80059cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	689a      	ldr	r2, [r3, #8]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	4013      	ands	r3, r2
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	429a      	cmp	r2, r3
 80059dc:	bf0c      	ite	eq
 80059de:	2301      	moveq	r3, #1
 80059e0:	2300      	movne	r3, #0
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	461a      	mov	r2, r3
 80059e6:	79fb      	ldrb	r3, [r7, #7]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d19b      	bne.n	8005924 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3720      	adds	r7, #32
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	20000010 	.word	0x20000010

080059fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b088      	sub	sp, #32
 8005a00:	af02      	add	r7, sp, #8
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a08:	4b1b      	ldr	r3, [pc, #108]	; (8005a78 <SPI_EndRxTxTransaction+0x7c>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a1b      	ldr	r2, [pc, #108]	; (8005a7c <SPI_EndRxTxTransaction+0x80>)
 8005a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a12:	0d5b      	lsrs	r3, r3, #21
 8005a14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a18:	fb02 f303 	mul.w	r3, r2, r3
 8005a1c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a26:	d112      	bne.n	8005a4e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	2180      	movs	r1, #128	; 0x80
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f7ff ff5a 	bl	80058ec <SPI_WaitFlagStateUntilTimeout>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d016      	beq.n	8005a6c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a42:	f043 0220 	orr.w	r2, r3, #32
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e00f      	b.n	8005a6e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00a      	beq.n	8005a6a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	3b01      	subs	r3, #1
 8005a58:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a64:	2b80      	cmp	r3, #128	; 0x80
 8005a66:	d0f2      	beq.n	8005a4e <SPI_EndRxTxTransaction+0x52>
 8005a68:	e000      	b.n	8005a6c <SPI_EndRxTxTransaction+0x70>
        break;
 8005a6a:	bf00      	nop
  }

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3718      	adds	r7, #24
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	20000010 	.word	0x20000010
 8005a7c:	165e9f81 	.word	0x165e9f81

08005a80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e041      	b.n	8005b16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d106      	bne.n	8005aac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7fd fa26 	bl	8002ef8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	3304      	adds	r3, #4
 8005abc:	4619      	mov	r1, r3
 8005abe:	4610      	mov	r0, r2
 8005ac0:	f000 f9f0 	bl	8005ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
	...

08005b20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d001      	beq.n	8005b38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e044      	b.n	8005bc2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68da      	ldr	r2, [r3, #12]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f042 0201 	orr.w	r2, r2, #1
 8005b4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a1e      	ldr	r2, [pc, #120]	; (8005bd0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d018      	beq.n	8005b8c <HAL_TIM_Base_Start_IT+0x6c>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b62:	d013      	beq.n	8005b8c <HAL_TIM_Base_Start_IT+0x6c>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a1a      	ldr	r2, [pc, #104]	; (8005bd4 <HAL_TIM_Base_Start_IT+0xb4>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d00e      	beq.n	8005b8c <HAL_TIM_Base_Start_IT+0x6c>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a19      	ldr	r2, [pc, #100]	; (8005bd8 <HAL_TIM_Base_Start_IT+0xb8>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d009      	beq.n	8005b8c <HAL_TIM_Base_Start_IT+0x6c>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a17      	ldr	r2, [pc, #92]	; (8005bdc <HAL_TIM_Base_Start_IT+0xbc>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d004      	beq.n	8005b8c <HAL_TIM_Base_Start_IT+0x6c>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a16      	ldr	r2, [pc, #88]	; (8005be0 <HAL_TIM_Base_Start_IT+0xc0>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d111      	bne.n	8005bb0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f003 0307 	and.w	r3, r3, #7
 8005b96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2b06      	cmp	r3, #6
 8005b9c:	d010      	beq.n	8005bc0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f042 0201 	orr.w	r2, r2, #1
 8005bac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bae:	e007      	b.n	8005bc0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 0201 	orr.w	r2, r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	40010000 	.word	0x40010000
 8005bd4:	40000400 	.word	0x40000400
 8005bd8:	40000800 	.word	0x40000800
 8005bdc:	40000c00 	.word	0x40000c00
 8005be0:	40014000 	.word	0x40014000

08005be4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68da      	ldr	r2, [r3, #12]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0201 	bic.w	r2, r2, #1
 8005bfa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6a1a      	ldr	r2, [r3, #32]
 8005c02:	f241 1311 	movw	r3, #4369	; 0x1111
 8005c06:	4013      	ands	r3, r2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10f      	bne.n	8005c2c <HAL_TIM_Base_Stop_IT+0x48>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6a1a      	ldr	r2, [r3, #32]
 8005c12:	f240 4344 	movw	r3, #1092	; 0x444
 8005c16:	4013      	ands	r3, r2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d107      	bne.n	8005c2c <HAL_TIM_Base_Stop_IT+0x48>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 0201 	bic.w	r2, r2, #1
 8005c2a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b082      	sub	sp, #8
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	f003 0302 	and.w	r3, r3, #2
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d122      	bne.n	8005c9e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d11b      	bne.n	8005c9e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f06f 0202 	mvn.w	r2, #2
 8005c6e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	f003 0303 	and.w	r3, r3, #3
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d003      	beq.n	8005c8c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 f8ee 	bl	8005e66 <HAL_TIM_IC_CaptureCallback>
 8005c8a:	e005      	b.n	8005c98 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 f8e0 	bl	8005e52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f8f1 	bl	8005e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	f003 0304 	and.w	r3, r3, #4
 8005ca8:	2b04      	cmp	r3, #4
 8005caa:	d122      	bne.n	8005cf2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	f003 0304 	and.w	r3, r3, #4
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	d11b      	bne.n	8005cf2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f06f 0204 	mvn.w	r2, #4
 8005cc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d003      	beq.n	8005ce0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 f8c4 	bl	8005e66 <HAL_TIM_IC_CaptureCallback>
 8005cde:	e005      	b.n	8005cec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 f8b6 	bl	8005e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f8c7 	bl	8005e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	f003 0308 	and.w	r3, r3, #8
 8005cfc:	2b08      	cmp	r3, #8
 8005cfe:	d122      	bne.n	8005d46 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	f003 0308 	and.w	r3, r3, #8
 8005d0a:	2b08      	cmp	r3, #8
 8005d0c:	d11b      	bne.n	8005d46 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f06f 0208 	mvn.w	r2, #8
 8005d16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2204      	movs	r2, #4
 8005d1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	69db      	ldr	r3, [r3, #28]
 8005d24:	f003 0303 	and.w	r3, r3, #3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d003      	beq.n	8005d34 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 f89a 	bl	8005e66 <HAL_TIM_IC_CaptureCallback>
 8005d32:	e005      	b.n	8005d40 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 f88c 	bl	8005e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f89d 	bl	8005e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	f003 0310 	and.w	r3, r3, #16
 8005d50:	2b10      	cmp	r3, #16
 8005d52:	d122      	bne.n	8005d9a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	f003 0310 	and.w	r3, r3, #16
 8005d5e:	2b10      	cmp	r3, #16
 8005d60:	d11b      	bne.n	8005d9a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f06f 0210 	mvn.w	r2, #16
 8005d6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2208      	movs	r2, #8
 8005d70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	69db      	ldr	r3, [r3, #28]
 8005d78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d003      	beq.n	8005d88 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 f870 	bl	8005e66 <HAL_TIM_IC_CaptureCallback>
 8005d86:	e005      	b.n	8005d94 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 f862 	bl	8005e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f873 	bl	8005e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d10e      	bne.n	8005dc6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d107      	bne.n	8005dc6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f06f 0201 	mvn.w	r2, #1
 8005dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f7fc fa43 	bl	800224c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd0:	2b80      	cmp	r3, #128	; 0x80
 8005dd2:	d10e      	bne.n	8005df2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dde:	2b80      	cmp	r3, #128	; 0x80
 8005de0:	d107      	bne.n	8005df2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f8e3 	bl	8005fb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dfc:	2b40      	cmp	r3, #64	; 0x40
 8005dfe:	d10e      	bne.n	8005e1e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e0a:	2b40      	cmp	r3, #64	; 0x40
 8005e0c:	d107      	bne.n	8005e1e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 f838 	bl	8005e8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	f003 0320 	and.w	r3, r3, #32
 8005e28:	2b20      	cmp	r3, #32
 8005e2a:	d10e      	bne.n	8005e4a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	f003 0320 	and.w	r3, r3, #32
 8005e36:	2b20      	cmp	r3, #32
 8005e38:	d107      	bne.n	8005e4a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f06f 0220 	mvn.w	r2, #32
 8005e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f8ad 	bl	8005fa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e4a:	bf00      	nop
 8005e4c:	3708      	adds	r7, #8
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b083      	sub	sp, #12
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e5a:	bf00      	nop
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b083      	sub	sp, #12
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e6e:	bf00      	nop
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr

08005e7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e7a:	b480      	push	{r7}
 8005e7c:	b083      	sub	sp, #12
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e82:	bf00      	nop
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b083      	sub	sp, #12
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e96:	bf00      	nop
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
	...

08005ea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a34      	ldr	r2, [pc, #208]	; (8005f88 <TIM_Base_SetConfig+0xe4>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d00f      	beq.n	8005edc <TIM_Base_SetConfig+0x38>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ec2:	d00b      	beq.n	8005edc <TIM_Base_SetConfig+0x38>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a31      	ldr	r2, [pc, #196]	; (8005f8c <TIM_Base_SetConfig+0xe8>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d007      	beq.n	8005edc <TIM_Base_SetConfig+0x38>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a30      	ldr	r2, [pc, #192]	; (8005f90 <TIM_Base_SetConfig+0xec>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d003      	beq.n	8005edc <TIM_Base_SetConfig+0x38>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a2f      	ldr	r2, [pc, #188]	; (8005f94 <TIM_Base_SetConfig+0xf0>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d108      	bne.n	8005eee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a25      	ldr	r2, [pc, #148]	; (8005f88 <TIM_Base_SetConfig+0xe4>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d01b      	beq.n	8005f2e <TIM_Base_SetConfig+0x8a>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005efc:	d017      	beq.n	8005f2e <TIM_Base_SetConfig+0x8a>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a22      	ldr	r2, [pc, #136]	; (8005f8c <TIM_Base_SetConfig+0xe8>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d013      	beq.n	8005f2e <TIM_Base_SetConfig+0x8a>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a21      	ldr	r2, [pc, #132]	; (8005f90 <TIM_Base_SetConfig+0xec>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d00f      	beq.n	8005f2e <TIM_Base_SetConfig+0x8a>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a20      	ldr	r2, [pc, #128]	; (8005f94 <TIM_Base_SetConfig+0xf0>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d00b      	beq.n	8005f2e <TIM_Base_SetConfig+0x8a>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a1f      	ldr	r2, [pc, #124]	; (8005f98 <TIM_Base_SetConfig+0xf4>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d007      	beq.n	8005f2e <TIM_Base_SetConfig+0x8a>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a1e      	ldr	r2, [pc, #120]	; (8005f9c <TIM_Base_SetConfig+0xf8>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d003      	beq.n	8005f2e <TIM_Base_SetConfig+0x8a>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a1d      	ldr	r2, [pc, #116]	; (8005fa0 <TIM_Base_SetConfig+0xfc>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d108      	bne.n	8005f40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a08      	ldr	r2, [pc, #32]	; (8005f88 <TIM_Base_SetConfig+0xe4>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d103      	bne.n	8005f74 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	691a      	ldr	r2, [r3, #16]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	615a      	str	r2, [r3, #20]
}
 8005f7a:	bf00      	nop
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	40010000 	.word	0x40010000
 8005f8c:	40000400 	.word	0x40000400
 8005f90:	40000800 	.word	0x40000800
 8005f94:	40000c00 	.word	0x40000c00
 8005f98:	40014000 	.word	0x40014000
 8005f9c:	40014400 	.word	0x40014400
 8005fa0:	40014800 	.word	0x40014800

08005fa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e03f      	b.n	800605e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d106      	bne.n	8005ff8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7fc fff0 	bl	8002fd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2224      	movs	r2, #36	; 0x24
 8005ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68da      	ldr	r2, [r3, #12]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800600e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 fb9f 	bl	8006754 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	691a      	ldr	r2, [r3, #16]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006024:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	695a      	ldr	r2, [r3, #20]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006034:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68da      	ldr	r2, [r3, #12]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006044:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2220      	movs	r2, #32
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2220      	movs	r2, #32
 8006058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b084      	sub	sp, #16
 800606a:	af00      	add	r7, sp, #0
 800606c:	60f8      	str	r0, [r7, #12]
 800606e:	60b9      	str	r1, [r7, #8]
 8006070:	4613      	mov	r3, r2
 8006072:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b20      	cmp	r3, #32
 800607e:	d11d      	bne.n	80060bc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d002      	beq.n	800608c <HAL_UART_Receive_IT+0x26>
 8006086:	88fb      	ldrh	r3, [r7, #6]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d101      	bne.n	8006090 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e016      	b.n	80060be <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006096:	2b01      	cmp	r3, #1
 8006098:	d101      	bne.n	800609e <HAL_UART_Receive_IT+0x38>
 800609a:	2302      	movs	r3, #2
 800609c:	e00f      	b.n	80060be <HAL_UART_Receive_IT+0x58>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80060ac:	88fb      	ldrh	r3, [r7, #6]
 80060ae:	461a      	mov	r2, r3
 80060b0:	68b9      	ldr	r1, [r7, #8]
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f000 f9d4 	bl	8006460 <UART_Start_Receive_IT>
 80060b8:	4603      	mov	r3, r0
 80060ba:	e000      	b.n	80060be <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80060bc:	2302      	movs	r3, #2
  }
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
	...

080060c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b08a      	sub	sp, #40	; 0x28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80060e8:	2300      	movs	r3, #0
 80060ea:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f2:	f003 030f 	and.w	r3, r3, #15
 80060f6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10d      	bne.n	800611a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006100:	f003 0320 	and.w	r3, r3, #32
 8006104:	2b00      	cmp	r3, #0
 8006106:	d008      	beq.n	800611a <HAL_UART_IRQHandler+0x52>
 8006108:	6a3b      	ldr	r3, [r7, #32]
 800610a:	f003 0320 	and.w	r3, r3, #32
 800610e:	2b00      	cmp	r3, #0
 8006110:	d003      	beq.n	800611a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 fa87 	bl	8006626 <UART_Receive_IT>
      return;
 8006118:	e17c      	b.n	8006414 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	2b00      	cmp	r3, #0
 800611e:	f000 80b1 	beq.w	8006284 <HAL_UART_IRQHandler+0x1bc>
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	2b00      	cmp	r3, #0
 800612a:	d105      	bne.n	8006138 <HAL_UART_IRQHandler+0x70>
 800612c:	6a3b      	ldr	r3, [r7, #32]
 800612e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006132:	2b00      	cmp	r3, #0
 8006134:	f000 80a6 	beq.w	8006284 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00a      	beq.n	8006158 <HAL_UART_IRQHandler+0x90>
 8006142:	6a3b      	ldr	r3, [r7, #32]
 8006144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006148:	2b00      	cmp	r3, #0
 800614a:	d005      	beq.n	8006158 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006150:	f043 0201 	orr.w	r2, r3, #1
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615a:	f003 0304 	and.w	r3, r3, #4
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00a      	beq.n	8006178 <HAL_UART_IRQHandler+0xb0>
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	f003 0301 	and.w	r3, r3, #1
 8006168:	2b00      	cmp	r3, #0
 800616a:	d005      	beq.n	8006178 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006170:	f043 0202 	orr.w	r2, r3, #2
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617a:	f003 0302 	and.w	r3, r3, #2
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00a      	beq.n	8006198 <HAL_UART_IRQHandler+0xd0>
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	f003 0301 	and.w	r3, r3, #1
 8006188:	2b00      	cmp	r3, #0
 800618a:	d005      	beq.n	8006198 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006190:	f043 0204 	orr.w	r2, r3, #4
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	f003 0308 	and.w	r3, r3, #8
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00f      	beq.n	80061c2 <HAL_UART_IRQHandler+0xfa>
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	f003 0320 	and.w	r3, r3, #32
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d104      	bne.n	80061b6 <HAL_UART_IRQHandler+0xee>
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d005      	beq.n	80061c2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ba:	f043 0208 	orr.w	r2, r3, #8
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f000 811f 	beq.w	800640a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ce:	f003 0320 	and.w	r3, r3, #32
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d007      	beq.n	80061e6 <HAL_UART_IRQHandler+0x11e>
 80061d6:	6a3b      	ldr	r3, [r7, #32]
 80061d8:	f003 0320 	and.w	r3, r3, #32
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d002      	beq.n	80061e6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 fa20 	bl	8006626 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f0:	2b40      	cmp	r3, #64	; 0x40
 80061f2:	bf0c      	ite	eq
 80061f4:	2301      	moveq	r3, #1
 80061f6:	2300      	movne	r3, #0
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006200:	f003 0308 	and.w	r3, r3, #8
 8006204:	2b00      	cmp	r3, #0
 8006206:	d102      	bne.n	800620e <HAL_UART_IRQHandler+0x146>
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d031      	beq.n	8006272 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f960 	bl	80064d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800621e:	2b40      	cmp	r3, #64	; 0x40
 8006220:	d123      	bne.n	800626a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	695a      	ldr	r2, [r3, #20]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006230:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006236:	2b00      	cmp	r3, #0
 8006238:	d013      	beq.n	8006262 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623e:	4a77      	ldr	r2, [pc, #476]	; (800641c <HAL_UART_IRQHandler+0x354>)
 8006240:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006246:	4618      	mov	r0, r3
 8006248:	f7fd fd58 	bl	8003cfc <HAL_DMA_Abort_IT>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d016      	beq.n	8006280 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800625c:	4610      	mov	r0, r2
 800625e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006260:	e00e      	b.n	8006280 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f8e6 	bl	8006434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006268:	e00a      	b.n	8006280 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f8e2 	bl	8006434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006270:	e006      	b.n	8006280 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f8de 	bl	8006434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800627e:	e0c4      	b.n	800640a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006280:	bf00      	nop
    return;
 8006282:	e0c2      	b.n	800640a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006288:	2b01      	cmp	r3, #1
 800628a:	f040 80a2 	bne.w	80063d2 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	f003 0310 	and.w	r3, r3, #16
 8006294:	2b00      	cmp	r3, #0
 8006296:	f000 809c 	beq.w	80063d2 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800629a:	6a3b      	ldr	r3, [r7, #32]
 800629c:	f003 0310 	and.w	r3, r3, #16
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 8096 	beq.w	80063d2 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062a6:	2300      	movs	r3, #0
 80062a8:	60fb      	str	r3, [r7, #12]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	60fb      	str	r3, [r7, #12]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	60fb      	str	r3, [r7, #12]
 80062ba:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c6:	2b40      	cmp	r3, #64	; 0x40
 80062c8:	d14f      	bne.n	800636a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80062d4:	8a3b      	ldrh	r3, [r7, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f000 8099 	beq.w	800640e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062e0:	8a3a      	ldrh	r2, [r7, #16]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	f080 8093 	bcs.w	800640e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	8a3a      	ldrh	r2, [r7, #16]
 80062ec:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062f8:	d02b      	beq.n	8006352 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68da      	ldr	r2, [r3, #12]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006308:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	695a      	ldr	r2, [r3, #20]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 0201 	bic.w	r2, r2, #1
 8006318:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	695a      	ldr	r2, [r3, #20]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006328:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2220      	movs	r2, #32
 800632e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68da      	ldr	r2, [r3, #12]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 0210 	bic.w	r2, r2, #16
 8006346:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634c:	4618      	mov	r0, r3
 800634e:	f7fd fc65 	bl	8003c1c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800635a:	b29b      	uxth	r3, r3
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	b29b      	uxth	r3, r3
 8006360:	4619      	mov	r1, r3
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f870 	bl	8006448 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006368:	e051      	b.n	800640e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006372:	b29b      	uxth	r3, r3
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800637c:	b29b      	uxth	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d047      	beq.n	8006412 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8006382:	8a7b      	ldrh	r3, [r7, #18]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d044      	beq.n	8006412 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68da      	ldr	r2, [r3, #12]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006396:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	695a      	ldr	r2, [r3, #20]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f022 0201 	bic.w	r2, r2, #1
 80063a6:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2220      	movs	r2, #32
 80063ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68da      	ldr	r2, [r3, #12]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 0210 	bic.w	r2, r2, #16
 80063c4:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063c6:	8a7b      	ldrh	r3, [r7, #18]
 80063c8:	4619      	mov	r1, r3
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f83c 	bl	8006448 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80063d0:	e01f      	b.n	8006412 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80063d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d008      	beq.n	80063ee <HAL_UART_IRQHandler+0x326>
 80063dc:	6a3b      	ldr	r3, [r7, #32]
 80063de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d003      	beq.n	80063ee <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 f8b5 	bl	8006556 <UART_Transmit_IT>
    return;
 80063ec:	e012      	b.n	8006414 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00d      	beq.n	8006414 <HAL_UART_IRQHandler+0x34c>
 80063f8:	6a3b      	ldr	r3, [r7, #32]
 80063fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d008      	beq.n	8006414 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f8f7 	bl	80065f6 <UART_EndTransmit_IT>
    return;
 8006408:	e004      	b.n	8006414 <HAL_UART_IRQHandler+0x34c>
    return;
 800640a:	bf00      	nop
 800640c:	e002      	b.n	8006414 <HAL_UART_IRQHandler+0x34c>
      return;
 800640e:	bf00      	nop
 8006410:	e000      	b.n	8006414 <HAL_UART_IRQHandler+0x34c>
      return;
 8006412:	bf00      	nop
  }
}
 8006414:	3728      	adds	r7, #40	; 0x28
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	0800652f 	.word	0x0800652f

08006420 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	460b      	mov	r3, r1
 8006452:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	4613      	mov	r3, r2
 800646c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	88fa      	ldrh	r2, [r7, #6]
 8006478:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	88fa      	ldrh	r2, [r7, #6]
 800647e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2222      	movs	r2, #34	; 0x22
 800648a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68da      	ldr	r2, [r3, #12]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064a4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	695a      	ldr	r2, [r3, #20]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f042 0201 	orr.w	r2, r2, #1
 80064b4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68da      	ldr	r2, [r3, #12]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f042 0220 	orr.w	r2, r2, #32
 80064c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3714      	adds	r7, #20
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68da      	ldr	r2, [r3, #12]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80064ea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	695a      	ldr	r2, [r3, #20]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f022 0201 	bic.w	r2, r2, #1
 80064fa:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006500:	2b01      	cmp	r3, #1
 8006502:	d107      	bne.n	8006514 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68da      	ldr	r2, [r3, #12]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f022 0210 	bic.w	r2, r2, #16
 8006512:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2220      	movs	r2, #32
 8006518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006522:	bf00      	nop
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b084      	sub	sp, #16
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f7ff ff73 	bl	8006434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800654e:	bf00      	nop
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006556:	b480      	push	{r7}
 8006558:	b085      	sub	sp, #20
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b21      	cmp	r3, #33	; 0x21
 8006568:	d13e      	bne.n	80065e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006572:	d114      	bne.n	800659e <UART_Transmit_IT+0x48>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d110      	bne.n	800659e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a1b      	ldr	r3, [r3, #32]
 8006580:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	461a      	mov	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006590:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	1c9a      	adds	r2, r3, #2
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	621a      	str	r2, [r3, #32]
 800659c:	e008      	b.n	80065b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	1c59      	adds	r1, r3, #1
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	6211      	str	r1, [r2, #32]
 80065a8:	781a      	ldrb	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	3b01      	subs	r3, #1
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	4619      	mov	r1, r3
 80065be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10f      	bne.n	80065e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68da      	ldr	r2, [r3, #12]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80065e4:	2300      	movs	r3, #0
 80065e6:	e000      	b.n	80065ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80065e8:	2302      	movs	r3, #2
  }
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3714      	adds	r7, #20
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b082      	sub	sp, #8
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68da      	ldr	r2, [r3, #12]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800660c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2220      	movs	r2, #32
 8006612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7ff ff02 	bl	8006420 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3708      	adds	r7, #8
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b084      	sub	sp, #16
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b22      	cmp	r3, #34	; 0x22
 8006638:	f040 8087 	bne.w	800674a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006644:	d117      	bne.n	8006676 <UART_Receive_IT+0x50>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d113      	bne.n	8006676 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800664e:	2300      	movs	r3, #0
 8006650:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006656:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	b29b      	uxth	r3, r3
 8006660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006664:	b29a      	uxth	r2, r3
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666e:	1c9a      	adds	r2, r3, #2
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	629a      	str	r2, [r3, #40]	; 0x28
 8006674:	e026      	b.n	80066c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800667c:	2300      	movs	r3, #0
 800667e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006688:	d007      	beq.n	800669a <UART_Receive_IT+0x74>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10a      	bne.n	80066a8 <UART_Receive_IT+0x82>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d106      	bne.n	80066a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	701a      	strb	r2, [r3, #0]
 80066a6:	e008      	b.n	80066ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066be:	1c5a      	adds	r2, r3, #1
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	3b01      	subs	r3, #1
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	4619      	mov	r1, r3
 80066d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d136      	bne.n	8006746 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68da      	ldr	r2, [r3, #12]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 0220 	bic.w	r2, r2, #32
 80066e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68da      	ldr	r2, [r3, #12]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	695a      	ldr	r2, [r3, #20]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f022 0201 	bic.w	r2, r2, #1
 8006706:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2220      	movs	r2, #32
 800670c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006714:	2b01      	cmp	r3, #1
 8006716:	d10e      	bne.n	8006736 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68da      	ldr	r2, [r3, #12]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 0210 	bic.w	r2, r2, #16
 8006726:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800672c:	4619      	mov	r1, r3
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7ff fe8a 	bl	8006448 <HAL_UARTEx_RxEventCallback>
 8006734:	e002      	b.n	800673c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7fc fab6 	bl	8002ca8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8006742:	2300      	movs	r3, #0
 8006744:	e002      	b.n	800674c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8006746:	2300      	movs	r3, #0
 8006748:	e000      	b.n	800674c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800674a:	2302      	movs	r3, #2
  }
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006758:	b09f      	sub	sp, #124	; 0x7c
 800675a:	af00      	add	r7, sp, #0
 800675c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800675e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800676a:	68d9      	ldr	r1, [r3, #12]
 800676c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	ea40 0301 	orr.w	r3, r0, r1
 8006774:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006778:	689a      	ldr	r2, [r3, #8]
 800677a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	431a      	orrs	r2, r3
 8006780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006782:	695b      	ldr	r3, [r3, #20]
 8006784:	431a      	orrs	r2, r3
 8006786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	4313      	orrs	r3, r2
 800678c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800678e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006798:	f021 010c 	bic.w	r1, r1, #12
 800679c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067a2:	430b      	orrs	r3, r1
 80067a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80067b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067b2:	6999      	ldr	r1, [r3, #24]
 80067b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	ea40 0301 	orr.w	r3, r0, r1
 80067bc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80067be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	4bc5      	ldr	r3, [pc, #788]	; (8006ad8 <UART_SetConfig+0x384>)
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d004      	beq.n	80067d2 <UART_SetConfig+0x7e>
 80067c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	4bc3      	ldr	r3, [pc, #780]	; (8006adc <UART_SetConfig+0x388>)
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d103      	bne.n	80067da <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80067d2:	f7fe fe19 	bl	8005408 <HAL_RCC_GetPCLK2Freq>
 80067d6:	6778      	str	r0, [r7, #116]	; 0x74
 80067d8:	e002      	b.n	80067e0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80067da:	f7fe fe01 	bl	80053e0 <HAL_RCC_GetPCLK1Freq>
 80067de:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067e2:	69db      	ldr	r3, [r3, #28]
 80067e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067e8:	f040 80b6 	bne.w	8006958 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80067ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067ee:	461c      	mov	r4, r3
 80067f0:	f04f 0500 	mov.w	r5, #0
 80067f4:	4622      	mov	r2, r4
 80067f6:	462b      	mov	r3, r5
 80067f8:	1891      	adds	r1, r2, r2
 80067fa:	6439      	str	r1, [r7, #64]	; 0x40
 80067fc:	415b      	adcs	r3, r3
 80067fe:	647b      	str	r3, [r7, #68]	; 0x44
 8006800:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006804:	1912      	adds	r2, r2, r4
 8006806:	eb45 0303 	adc.w	r3, r5, r3
 800680a:	f04f 0000 	mov.w	r0, #0
 800680e:	f04f 0100 	mov.w	r1, #0
 8006812:	00d9      	lsls	r1, r3, #3
 8006814:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006818:	00d0      	lsls	r0, r2, #3
 800681a:	4602      	mov	r2, r0
 800681c:	460b      	mov	r3, r1
 800681e:	1911      	adds	r1, r2, r4
 8006820:	6639      	str	r1, [r7, #96]	; 0x60
 8006822:	416b      	adcs	r3, r5
 8006824:	667b      	str	r3, [r7, #100]	; 0x64
 8006826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	461a      	mov	r2, r3
 800682c:	f04f 0300 	mov.w	r3, #0
 8006830:	1891      	adds	r1, r2, r2
 8006832:	63b9      	str	r1, [r7, #56]	; 0x38
 8006834:	415b      	adcs	r3, r3
 8006836:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006838:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800683c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006840:	f7fa fa2a 	bl	8000c98 <__aeabi_uldivmod>
 8006844:	4602      	mov	r2, r0
 8006846:	460b      	mov	r3, r1
 8006848:	4ba5      	ldr	r3, [pc, #660]	; (8006ae0 <UART_SetConfig+0x38c>)
 800684a:	fba3 2302 	umull	r2, r3, r3, r2
 800684e:	095b      	lsrs	r3, r3, #5
 8006850:	011e      	lsls	r6, r3, #4
 8006852:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006854:	461c      	mov	r4, r3
 8006856:	f04f 0500 	mov.w	r5, #0
 800685a:	4622      	mov	r2, r4
 800685c:	462b      	mov	r3, r5
 800685e:	1891      	adds	r1, r2, r2
 8006860:	6339      	str	r1, [r7, #48]	; 0x30
 8006862:	415b      	adcs	r3, r3
 8006864:	637b      	str	r3, [r7, #52]	; 0x34
 8006866:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800686a:	1912      	adds	r2, r2, r4
 800686c:	eb45 0303 	adc.w	r3, r5, r3
 8006870:	f04f 0000 	mov.w	r0, #0
 8006874:	f04f 0100 	mov.w	r1, #0
 8006878:	00d9      	lsls	r1, r3, #3
 800687a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800687e:	00d0      	lsls	r0, r2, #3
 8006880:	4602      	mov	r2, r0
 8006882:	460b      	mov	r3, r1
 8006884:	1911      	adds	r1, r2, r4
 8006886:	65b9      	str	r1, [r7, #88]	; 0x58
 8006888:	416b      	adcs	r3, r5
 800688a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800688c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	461a      	mov	r2, r3
 8006892:	f04f 0300 	mov.w	r3, #0
 8006896:	1891      	adds	r1, r2, r2
 8006898:	62b9      	str	r1, [r7, #40]	; 0x28
 800689a:	415b      	adcs	r3, r3
 800689c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800689e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80068a2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80068a6:	f7fa f9f7 	bl	8000c98 <__aeabi_uldivmod>
 80068aa:	4602      	mov	r2, r0
 80068ac:	460b      	mov	r3, r1
 80068ae:	4b8c      	ldr	r3, [pc, #560]	; (8006ae0 <UART_SetConfig+0x38c>)
 80068b0:	fba3 1302 	umull	r1, r3, r3, r2
 80068b4:	095b      	lsrs	r3, r3, #5
 80068b6:	2164      	movs	r1, #100	; 0x64
 80068b8:	fb01 f303 	mul.w	r3, r1, r3
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	00db      	lsls	r3, r3, #3
 80068c0:	3332      	adds	r3, #50	; 0x32
 80068c2:	4a87      	ldr	r2, [pc, #540]	; (8006ae0 <UART_SetConfig+0x38c>)
 80068c4:	fba2 2303 	umull	r2, r3, r2, r3
 80068c8:	095b      	lsrs	r3, r3, #5
 80068ca:	005b      	lsls	r3, r3, #1
 80068cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80068d0:	441e      	add	r6, r3
 80068d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068d4:	4618      	mov	r0, r3
 80068d6:	f04f 0100 	mov.w	r1, #0
 80068da:	4602      	mov	r2, r0
 80068dc:	460b      	mov	r3, r1
 80068de:	1894      	adds	r4, r2, r2
 80068e0:	623c      	str	r4, [r7, #32]
 80068e2:	415b      	adcs	r3, r3
 80068e4:	627b      	str	r3, [r7, #36]	; 0x24
 80068e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80068ea:	1812      	adds	r2, r2, r0
 80068ec:	eb41 0303 	adc.w	r3, r1, r3
 80068f0:	f04f 0400 	mov.w	r4, #0
 80068f4:	f04f 0500 	mov.w	r5, #0
 80068f8:	00dd      	lsls	r5, r3, #3
 80068fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80068fe:	00d4      	lsls	r4, r2, #3
 8006900:	4622      	mov	r2, r4
 8006902:	462b      	mov	r3, r5
 8006904:	1814      	adds	r4, r2, r0
 8006906:	653c      	str	r4, [r7, #80]	; 0x50
 8006908:	414b      	adcs	r3, r1
 800690a:	657b      	str	r3, [r7, #84]	; 0x54
 800690c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	461a      	mov	r2, r3
 8006912:	f04f 0300 	mov.w	r3, #0
 8006916:	1891      	adds	r1, r2, r2
 8006918:	61b9      	str	r1, [r7, #24]
 800691a:	415b      	adcs	r3, r3
 800691c:	61fb      	str	r3, [r7, #28]
 800691e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006922:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006926:	f7fa f9b7 	bl	8000c98 <__aeabi_uldivmod>
 800692a:	4602      	mov	r2, r0
 800692c:	460b      	mov	r3, r1
 800692e:	4b6c      	ldr	r3, [pc, #432]	; (8006ae0 <UART_SetConfig+0x38c>)
 8006930:	fba3 1302 	umull	r1, r3, r3, r2
 8006934:	095b      	lsrs	r3, r3, #5
 8006936:	2164      	movs	r1, #100	; 0x64
 8006938:	fb01 f303 	mul.w	r3, r1, r3
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	3332      	adds	r3, #50	; 0x32
 8006942:	4a67      	ldr	r2, [pc, #412]	; (8006ae0 <UART_SetConfig+0x38c>)
 8006944:	fba2 2303 	umull	r2, r3, r2, r3
 8006948:	095b      	lsrs	r3, r3, #5
 800694a:	f003 0207 	and.w	r2, r3, #7
 800694e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4432      	add	r2, r6
 8006954:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006956:	e0b9      	b.n	8006acc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006958:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800695a:	461c      	mov	r4, r3
 800695c:	f04f 0500 	mov.w	r5, #0
 8006960:	4622      	mov	r2, r4
 8006962:	462b      	mov	r3, r5
 8006964:	1891      	adds	r1, r2, r2
 8006966:	6139      	str	r1, [r7, #16]
 8006968:	415b      	adcs	r3, r3
 800696a:	617b      	str	r3, [r7, #20]
 800696c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006970:	1912      	adds	r2, r2, r4
 8006972:	eb45 0303 	adc.w	r3, r5, r3
 8006976:	f04f 0000 	mov.w	r0, #0
 800697a:	f04f 0100 	mov.w	r1, #0
 800697e:	00d9      	lsls	r1, r3, #3
 8006980:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006984:	00d0      	lsls	r0, r2, #3
 8006986:	4602      	mov	r2, r0
 8006988:	460b      	mov	r3, r1
 800698a:	eb12 0804 	adds.w	r8, r2, r4
 800698e:	eb43 0905 	adc.w	r9, r3, r5
 8006992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	4618      	mov	r0, r3
 8006998:	f04f 0100 	mov.w	r1, #0
 800699c:	f04f 0200 	mov.w	r2, #0
 80069a0:	f04f 0300 	mov.w	r3, #0
 80069a4:	008b      	lsls	r3, r1, #2
 80069a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80069aa:	0082      	lsls	r2, r0, #2
 80069ac:	4640      	mov	r0, r8
 80069ae:	4649      	mov	r1, r9
 80069b0:	f7fa f972 	bl	8000c98 <__aeabi_uldivmod>
 80069b4:	4602      	mov	r2, r0
 80069b6:	460b      	mov	r3, r1
 80069b8:	4b49      	ldr	r3, [pc, #292]	; (8006ae0 <UART_SetConfig+0x38c>)
 80069ba:	fba3 2302 	umull	r2, r3, r3, r2
 80069be:	095b      	lsrs	r3, r3, #5
 80069c0:	011e      	lsls	r6, r3, #4
 80069c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069c4:	4618      	mov	r0, r3
 80069c6:	f04f 0100 	mov.w	r1, #0
 80069ca:	4602      	mov	r2, r0
 80069cc:	460b      	mov	r3, r1
 80069ce:	1894      	adds	r4, r2, r2
 80069d0:	60bc      	str	r4, [r7, #8]
 80069d2:	415b      	adcs	r3, r3
 80069d4:	60fb      	str	r3, [r7, #12]
 80069d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069da:	1812      	adds	r2, r2, r0
 80069dc:	eb41 0303 	adc.w	r3, r1, r3
 80069e0:	f04f 0400 	mov.w	r4, #0
 80069e4:	f04f 0500 	mov.w	r5, #0
 80069e8:	00dd      	lsls	r5, r3, #3
 80069ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80069ee:	00d4      	lsls	r4, r2, #3
 80069f0:	4622      	mov	r2, r4
 80069f2:	462b      	mov	r3, r5
 80069f4:	1814      	adds	r4, r2, r0
 80069f6:	64bc      	str	r4, [r7, #72]	; 0x48
 80069f8:	414b      	adcs	r3, r1
 80069fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	4618      	mov	r0, r3
 8006a02:	f04f 0100 	mov.w	r1, #0
 8006a06:	f04f 0200 	mov.w	r2, #0
 8006a0a:	f04f 0300 	mov.w	r3, #0
 8006a0e:	008b      	lsls	r3, r1, #2
 8006a10:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006a14:	0082      	lsls	r2, r0, #2
 8006a16:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006a1a:	f7fa f93d 	bl	8000c98 <__aeabi_uldivmod>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	460b      	mov	r3, r1
 8006a22:	4b2f      	ldr	r3, [pc, #188]	; (8006ae0 <UART_SetConfig+0x38c>)
 8006a24:	fba3 1302 	umull	r1, r3, r3, r2
 8006a28:	095b      	lsrs	r3, r3, #5
 8006a2a:	2164      	movs	r1, #100	; 0x64
 8006a2c:	fb01 f303 	mul.w	r3, r1, r3
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	011b      	lsls	r3, r3, #4
 8006a34:	3332      	adds	r3, #50	; 0x32
 8006a36:	4a2a      	ldr	r2, [pc, #168]	; (8006ae0 <UART_SetConfig+0x38c>)
 8006a38:	fba2 2303 	umull	r2, r3, r2, r3
 8006a3c:	095b      	lsrs	r3, r3, #5
 8006a3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a42:	441e      	add	r6, r3
 8006a44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a46:	4618      	mov	r0, r3
 8006a48:	f04f 0100 	mov.w	r1, #0
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	460b      	mov	r3, r1
 8006a50:	1894      	adds	r4, r2, r2
 8006a52:	603c      	str	r4, [r7, #0]
 8006a54:	415b      	adcs	r3, r3
 8006a56:	607b      	str	r3, [r7, #4]
 8006a58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a5c:	1812      	adds	r2, r2, r0
 8006a5e:	eb41 0303 	adc.w	r3, r1, r3
 8006a62:	f04f 0400 	mov.w	r4, #0
 8006a66:	f04f 0500 	mov.w	r5, #0
 8006a6a:	00dd      	lsls	r5, r3, #3
 8006a6c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006a70:	00d4      	lsls	r4, r2, #3
 8006a72:	4622      	mov	r2, r4
 8006a74:	462b      	mov	r3, r5
 8006a76:	eb12 0a00 	adds.w	sl, r2, r0
 8006a7a:	eb43 0b01 	adc.w	fp, r3, r1
 8006a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	4618      	mov	r0, r3
 8006a84:	f04f 0100 	mov.w	r1, #0
 8006a88:	f04f 0200 	mov.w	r2, #0
 8006a8c:	f04f 0300 	mov.w	r3, #0
 8006a90:	008b      	lsls	r3, r1, #2
 8006a92:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006a96:	0082      	lsls	r2, r0, #2
 8006a98:	4650      	mov	r0, sl
 8006a9a:	4659      	mov	r1, fp
 8006a9c:	f7fa f8fc 	bl	8000c98 <__aeabi_uldivmod>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4b0e      	ldr	r3, [pc, #56]	; (8006ae0 <UART_SetConfig+0x38c>)
 8006aa6:	fba3 1302 	umull	r1, r3, r3, r2
 8006aaa:	095b      	lsrs	r3, r3, #5
 8006aac:	2164      	movs	r1, #100	; 0x64
 8006aae:	fb01 f303 	mul.w	r3, r1, r3
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	011b      	lsls	r3, r3, #4
 8006ab6:	3332      	adds	r3, #50	; 0x32
 8006ab8:	4a09      	ldr	r2, [pc, #36]	; (8006ae0 <UART_SetConfig+0x38c>)
 8006aba:	fba2 2303 	umull	r2, r3, r2, r3
 8006abe:	095b      	lsrs	r3, r3, #5
 8006ac0:	f003 020f 	and.w	r2, r3, #15
 8006ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4432      	add	r2, r6
 8006aca:	609a      	str	r2, [r3, #8]
}
 8006acc:	bf00      	nop
 8006ace:	377c      	adds	r7, #124	; 0x7c
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ad6:	bf00      	nop
 8006ad8:	40011000 	.word	0x40011000
 8006adc:	40011400 	.word	0x40011400
 8006ae0:	51eb851f 	.word	0x51eb851f

08006ae4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006ae8:	4904      	ldr	r1, [pc, #16]	; (8006afc <MX_FATFS_Init+0x18>)
 8006aea:	4805      	ldr	r0, [pc, #20]	; (8006b00 <MX_FATFS_Init+0x1c>)
 8006aec:	f002 ffa6 	bl	8009a3c <FATFS_LinkDriver>
 8006af0:	4603      	mov	r3, r0
 8006af2:	461a      	mov	r2, r3
 8006af4:	4b03      	ldr	r3, [pc, #12]	; (8006b04 <MX_FATFS_Init+0x20>)
 8006af6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006af8:	bf00      	nop
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	20005664 	.word	0x20005664
 8006b00:	2000001c 	.word	0x2000001c
 8006b04:	20005668 	.word	0x20005668

08006b08 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006b0c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	4603      	mov	r3, r0
 8006b20:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8006b22:	79fb      	ldrb	r3, [r7, #7]
 8006b24:	4618      	mov	r0, r3
 8006b26:	f000 f9d9 	bl	8006edc <USER_SPI_initialize>
 8006b2a:	4603      	mov	r3, r0
    Stat = STA_NOINIT;
    return Stat;
  /* USER CODE END INIT */
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8006b3e:	79fb      	ldrb	r3, [r7, #7]
 8006b40:	4618      	mov	r0, r3
 8006b42:	f000 fab7 	bl	80070b4 <USER_SPI_status>
 8006b46:	4603      	mov	r3, r0
    Stat = STA_NOINIT;
    return Stat;
  /* USER CODE END STATUS */
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3708      	adds	r7, #8
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60b9      	str	r1, [r7, #8]
 8006b58:	607a      	str	r2, [r7, #4]
 8006b5a:	603b      	str	r3, [r7, #0]
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8006b60:	7bf8      	ldrb	r0, [r7, #15]
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	68b9      	ldr	r1, [r7, #8]
 8006b68:	f000 faba 	bl	80070e0 <USER_SPI_read>
 8006b6c:	4603      	mov	r3, r0
    return RES_OK;
  /* USER CODE END READ */
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b084      	sub	sp, #16
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	607a      	str	r2, [r7, #4]
 8006b80:	603b      	str	r3, [r7, #0]
 8006b82:	4603      	mov	r3, r0
 8006b84:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8006b86:	7bf8      	ldrb	r0, [r7, #15]
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	68b9      	ldr	r1, [r7, #8]
 8006b8e:	f000 fb0d 	bl	80071ac <USER_SPI_write>
 8006b92:	4603      	mov	r3, r0
    return RES_OK;
  /* USER CODE END WRITE */
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3710      	adds	r7, #16
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	603a      	str	r2, [r7, #0]
 8006ba6:	71fb      	strb	r3, [r7, #7]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8006bac:	79b9      	ldrb	r1, [r7, #6]
 8006bae:	79fb      	ldrb	r3, [r7, #7]
 8006bb0:	683a      	ldr	r2, [r7, #0]
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f000 fb76 	bl	80072a4 <USER_SPI_ioctl>
 8006bb8:	4603      	mov	r3, r0
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3708      	adds	r7, #8
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
	...

08006bc4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8006bcc:	f7fc faac 	bl	8003128 <HAL_GetTick>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	4a04      	ldr	r2, [pc, #16]	; (8006be4 <SPI_Timer_On+0x20>)
 8006bd4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8006bd6:	4a04      	ldr	r2, [pc, #16]	; (8006be8 <SPI_Timer_On+0x24>)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6013      	str	r3, [r2, #0]
}
 8006bdc:	bf00      	nop
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	20005ad0 	.word	0x20005ad0
 8006be8:	20005ad4 	.word	0x20005ad4

08006bec <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8006bec:	b580      	push	{r7, lr}
 8006bee:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006bf0:	f7fc fa9a 	bl	8003128 <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	4b06      	ldr	r3, [pc, #24]	; (8006c10 <SPI_Timer_Status+0x24>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	1ad2      	subs	r2, r2, r3
 8006bfc:	4b05      	ldr	r3, [pc, #20]	; (8006c14 <SPI_Timer_Status+0x28>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	bf34      	ite	cc
 8006c04:	2301      	movcc	r3, #1
 8006c06:	2300      	movcs	r3, #0
 8006c08:	b2db      	uxtb	r3, r3
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	20005ad0 	.word	0x20005ad0
 8006c14:	20005ad4 	.word	0x20005ad4

08006c18 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af02      	add	r7, sp, #8
 8006c1e:	4603      	mov	r3, r0
 8006c20:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006c22:	f107 020f 	add.w	r2, r7, #15
 8006c26:	1df9      	adds	r1, r7, #7
 8006c28:	2332      	movs	r3, #50	; 0x32
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	4804      	ldr	r0, [pc, #16]	; (8006c40 <xchg_spi+0x28>)
 8006c30:	f7fe fcb9 	bl	80055a6 <HAL_SPI_TransmitReceive>
    return rxDat;
 8006c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	200054ec 	.word	0x200054ec

08006c44 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8006c44:	b590      	push	{r4, r7, lr}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8006c4e:	2300      	movs	r3, #0
 8006c50:	60fb      	str	r3, [r7, #12]
 8006c52:	e00a      	b.n	8006c6a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	18d4      	adds	r4, r2, r3
 8006c5a:	20ff      	movs	r0, #255	; 0xff
 8006c5c:	f7ff ffdc 	bl	8006c18 <xchg_spi>
 8006c60:	4603      	mov	r3, r0
 8006c62:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	3301      	adds	r3, #1
 8006c68:	60fb      	str	r3, [r7, #12]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d3f0      	bcc.n	8006c54 <rcvr_spi_multi+0x10>
	}
}
 8006c72:	bf00      	nop
 8006c74:	bf00      	nop
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd90      	pop	{r4, r7, pc}

08006c7c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8006c86:	2300      	movs	r3, #0
 8006c88:	60fb      	str	r3, [r7, #12]
 8006c8a:	e009      	b.n	8006ca0 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	4413      	add	r3, r2
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7ff ffbf 	bl	8006c18 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	60fb      	str	r3, [r7, #12]
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d3f1      	bcc.n	8006c8c <xmit_spi_multi+0x10>
	}
}
 8006ca8:	bf00      	nop
 8006caa:	bf00      	nop
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b086      	sub	sp, #24
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8006cba:	f7fc fa35 	bl	8003128 <HAL_GetTick>
 8006cbe:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8006cc4:	20ff      	movs	r0, #255	; 0xff
 8006cc6:	f7ff ffa7 	bl	8006c18 <xchg_spi>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8006cce:	7bfb      	ldrb	r3, [r7, #15]
 8006cd0:	2bff      	cmp	r3, #255	; 0xff
 8006cd2:	d007      	beq.n	8006ce4 <wait_ready+0x32>
 8006cd4:	f7fc fa28 	bl	8003128 <HAL_GetTick>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d8ef      	bhi.n	8006cc4 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8006ce4:	7bfb      	ldrb	r3, [r7, #15]
 8006ce6:	2bff      	cmp	r3, #255	; 0xff
 8006ce8:	bf0c      	ite	eq
 8006cea:	2301      	moveq	r3, #1
 8006cec:	2300      	movne	r3, #0
 8006cee:	b2db      	uxtb	r3, r3
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3718      	adds	r7, #24
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	2110      	movs	r1, #16
 8006d00:	4803      	ldr	r0, [pc, #12]	; (8006d10 <despiselect+0x18>)
 8006d02:	f7fd f9b9 	bl	8004078 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8006d06:	20ff      	movs	r0, #255	; 0xff
 8006d08:	f7ff ff86 	bl	8006c18 <xchg_spi>

}
 8006d0c:	bf00      	nop
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	40020000 	.word	0x40020000

08006d14 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8006d18:	2200      	movs	r2, #0
 8006d1a:	2110      	movs	r1, #16
 8006d1c:	4809      	ldr	r0, [pc, #36]	; (8006d44 <spiselect+0x30>)
 8006d1e:	f7fd f9ab 	bl	8004078 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8006d22:	20ff      	movs	r0, #255	; 0xff
 8006d24:	f7ff ff78 	bl	8006c18 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8006d28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006d2c:	f7ff ffc1 	bl	8006cb2 <wait_ready>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d001      	beq.n	8006d3a <spiselect+0x26>
 8006d36:	2301      	movs	r3, #1
 8006d38:	e002      	b.n	8006d40 <spiselect+0x2c>

	despiselect();
 8006d3a:	f7ff ffdd 	bl	8006cf8 <despiselect>
	return 0;	/* Timeout */
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	40020000 	.word	0x40020000

08006d48 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8006d52:	20c8      	movs	r0, #200	; 0xc8
 8006d54:	f7ff ff36 	bl	8006bc4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8006d58:	20ff      	movs	r0, #255	; 0xff
 8006d5a:	f7ff ff5d 	bl	8006c18 <xchg_spi>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8006d62:	7bfb      	ldrb	r3, [r7, #15]
 8006d64:	2bff      	cmp	r3, #255	; 0xff
 8006d66:	d104      	bne.n	8006d72 <rcvr_datablock+0x2a>
 8006d68:	f7ff ff40 	bl	8006bec <SPI_Timer_Status>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1f2      	bne.n	8006d58 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8006d72:	7bfb      	ldrb	r3, [r7, #15]
 8006d74:	2bfe      	cmp	r3, #254	; 0xfe
 8006d76:	d001      	beq.n	8006d7c <rcvr_datablock+0x34>
 8006d78:	2300      	movs	r3, #0
 8006d7a:	e00a      	b.n	8006d92 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006d7c:	6839      	ldr	r1, [r7, #0]
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f7ff ff60 	bl	8006c44 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8006d84:	20ff      	movs	r0, #255	; 0xff
 8006d86:	f7ff ff47 	bl	8006c18 <xchg_spi>
 8006d8a:	20ff      	movs	r0, #255	; 0xff
 8006d8c:	f7ff ff44 	bl	8006c18 <xchg_spi>

	return 1;						/* Function succeeded */
 8006d90:	2301      	movs	r3, #1
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b084      	sub	sp, #16
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	460b      	mov	r3, r1
 8006da4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8006da6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006daa:	f7ff ff82 	bl	8006cb2 <wait_ready>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d101      	bne.n	8006db8 <xmit_datablock+0x1e>
 8006db4:	2300      	movs	r3, #0
 8006db6:	e01e      	b.n	8006df6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8006db8:	78fb      	ldrb	r3, [r7, #3]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7ff ff2c 	bl	8006c18 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8006dc0:	78fb      	ldrb	r3, [r7, #3]
 8006dc2:	2bfd      	cmp	r3, #253	; 0xfd
 8006dc4:	d016      	beq.n	8006df4 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8006dc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f7ff ff56 	bl	8006c7c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8006dd0:	20ff      	movs	r0, #255	; 0xff
 8006dd2:	f7ff ff21 	bl	8006c18 <xchg_spi>
 8006dd6:	20ff      	movs	r0, #255	; 0xff
 8006dd8:	f7ff ff1e 	bl	8006c18 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8006ddc:	20ff      	movs	r0, #255	; 0xff
 8006dde:	f7ff ff1b 	bl	8006c18 <xchg_spi>
 8006de2:	4603      	mov	r3, r0
 8006de4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8006de6:	7bfb      	ldrb	r3, [r7, #15]
 8006de8:	f003 031f 	and.w	r3, r3, #31
 8006dec:	2b05      	cmp	r3, #5
 8006dee:	d001      	beq.n	8006df4 <xmit_datablock+0x5a>
 8006df0:	2300      	movs	r3, #0
 8006df2:	e000      	b.n	8006df6 <xmit_datablock+0x5c>
	}
	return 1;
 8006df4:	2301      	movs	r3, #1
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b084      	sub	sp, #16
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	4603      	mov	r3, r0
 8006e06:	6039      	str	r1, [r7, #0]
 8006e08:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8006e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	da0e      	bge.n	8006e30 <send_cmd+0x32>
		cmd &= 0x7F;
 8006e12:	79fb      	ldrb	r3, [r7, #7]
 8006e14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e18:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	2037      	movs	r0, #55	; 0x37
 8006e1e:	f7ff ffee 	bl	8006dfe <send_cmd>
 8006e22:	4603      	mov	r3, r0
 8006e24:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8006e26:	7bbb      	ldrb	r3, [r7, #14]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d901      	bls.n	8006e30 <send_cmd+0x32>
 8006e2c:	7bbb      	ldrb	r3, [r7, #14]
 8006e2e:	e051      	b.n	8006ed4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8006e30:	79fb      	ldrb	r3, [r7, #7]
 8006e32:	2b0c      	cmp	r3, #12
 8006e34:	d008      	beq.n	8006e48 <send_cmd+0x4a>
		despiselect();
 8006e36:	f7ff ff5f 	bl	8006cf8 <despiselect>
		if (!spiselect()) return 0xFF;
 8006e3a:	f7ff ff6b 	bl	8006d14 <spiselect>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d101      	bne.n	8006e48 <send_cmd+0x4a>
 8006e44:	23ff      	movs	r3, #255	; 0xff
 8006e46:	e045      	b.n	8006ed4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8006e48:	79fb      	ldrb	r3, [r7, #7]
 8006e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7ff fee1 	bl	8006c18 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	0e1b      	lsrs	r3, r3, #24
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7ff fedb 	bl	8006c18 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	0c1b      	lsrs	r3, r3, #16
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7ff fed5 	bl	8006c18 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	0a1b      	lsrs	r3, r3, #8
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7ff fecf 	bl	8006c18 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7ff feca 	bl	8006c18 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8006e84:	2301      	movs	r3, #1
 8006e86:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8006e88:	79fb      	ldrb	r3, [r7, #7]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d101      	bne.n	8006e92 <send_cmd+0x94>
 8006e8e:	2395      	movs	r3, #149	; 0x95
 8006e90:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8006e92:	79fb      	ldrb	r3, [r7, #7]
 8006e94:	2b08      	cmp	r3, #8
 8006e96:	d101      	bne.n	8006e9c <send_cmd+0x9e>
 8006e98:	2387      	movs	r3, #135	; 0x87
 8006e9a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7ff feba 	bl	8006c18 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8006ea4:	79fb      	ldrb	r3, [r7, #7]
 8006ea6:	2b0c      	cmp	r3, #12
 8006ea8:	d102      	bne.n	8006eb0 <send_cmd+0xb2>
 8006eaa:	20ff      	movs	r0, #255	; 0xff
 8006eac:	f7ff feb4 	bl	8006c18 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8006eb0:	230a      	movs	r3, #10
 8006eb2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8006eb4:	20ff      	movs	r0, #255	; 0xff
 8006eb6:	f7ff feaf 	bl	8006c18 <xchg_spi>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8006ebe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	da05      	bge.n	8006ed2 <send_cmd+0xd4>
 8006ec6:	7bfb      	ldrb	r3, [r7, #15]
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	73fb      	strb	r3, [r7, #15]
 8006ecc:	7bfb      	ldrb	r3, [r7, #15]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1f0      	bne.n	8006eb4 <send_cmd+0xb6>

	return res;							/* Return received response */
 8006ed2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006edc:	b590      	push	{r4, r7, lr}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006ee6:	79fb      	ldrb	r3, [r7, #7]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d001      	beq.n	8006ef0 <USER_SPI_initialize+0x14>
 8006eec:	2301      	movs	r3, #1
 8006eee:	e0d6      	b.n	800709e <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8006ef0:	4b6d      	ldr	r3, [pc, #436]	; (80070a8 <USER_SPI_initialize+0x1cc>)
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d003      	beq.n	8006f06 <USER_SPI_initialize+0x2a>
 8006efe:	4b6a      	ldr	r3, [pc, #424]	; (80070a8 <USER_SPI_initialize+0x1cc>)
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	e0cb      	b.n	800709e <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8006f06:	4b69      	ldr	r3, [pc, #420]	; (80070ac <USER_SPI_initialize+0x1d0>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006f10:	4b66      	ldr	r3, [pc, #408]	; (80070ac <USER_SPI_initialize+0x1d0>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8006f18:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8006f1a:	230a      	movs	r3, #10
 8006f1c:	73fb      	strb	r3, [r7, #15]
 8006f1e:	e005      	b.n	8006f2c <USER_SPI_initialize+0x50>
 8006f20:	20ff      	movs	r0, #255	; 0xff
 8006f22:	f7ff fe79 	bl	8006c18 <xchg_spi>
 8006f26:	7bfb      	ldrb	r3, [r7, #15]
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	73fb      	strb	r3, [r7, #15]
 8006f2c:	7bfb      	ldrb	r3, [r7, #15]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1f6      	bne.n	8006f20 <USER_SPI_initialize+0x44>

	ty = 0;
 8006f32:	2300      	movs	r3, #0
 8006f34:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8006f36:	2100      	movs	r1, #0
 8006f38:	2000      	movs	r0, #0
 8006f3a:	f7ff ff60 	bl	8006dfe <send_cmd>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	f040 808b 	bne.w	800705c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8006f46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006f4a:	f7ff fe3b 	bl	8006bc4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8006f4e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006f52:	2008      	movs	r0, #8
 8006f54:	f7ff ff53 	bl	8006dfe <send_cmd>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d151      	bne.n	8007002 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8006f5e:	2300      	movs	r3, #0
 8006f60:	73fb      	strb	r3, [r7, #15]
 8006f62:	e00d      	b.n	8006f80 <USER_SPI_initialize+0xa4>
 8006f64:	7bfc      	ldrb	r4, [r7, #15]
 8006f66:	20ff      	movs	r0, #255	; 0xff
 8006f68:	f7ff fe56 	bl	8006c18 <xchg_spi>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	461a      	mov	r2, r3
 8006f70:	f107 0310 	add.w	r3, r7, #16
 8006f74:	4423      	add	r3, r4
 8006f76:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006f7a:	7bfb      	ldrb	r3, [r7, #15]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	73fb      	strb	r3, [r7, #15]
 8006f80:	7bfb      	ldrb	r3, [r7, #15]
 8006f82:	2b03      	cmp	r3, #3
 8006f84:	d9ee      	bls.n	8006f64 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8006f86:	7abb      	ldrb	r3, [r7, #10]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d167      	bne.n	800705c <USER_SPI_initialize+0x180>
 8006f8c:	7afb      	ldrb	r3, [r7, #11]
 8006f8e:	2baa      	cmp	r3, #170	; 0xaa
 8006f90:	d164      	bne.n	800705c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8006f92:	bf00      	nop
 8006f94:	f7ff fe2a 	bl	8006bec <SPI_Timer_Status>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d007      	beq.n	8006fae <USER_SPI_initialize+0xd2>
 8006f9e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006fa2:	20a9      	movs	r0, #169	; 0xa9
 8006fa4:	f7ff ff2b 	bl	8006dfe <send_cmd>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1f2      	bne.n	8006f94 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8006fae:	f7ff fe1d 	bl	8006bec <SPI_Timer_Status>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d051      	beq.n	800705c <USER_SPI_initialize+0x180>
 8006fb8:	2100      	movs	r1, #0
 8006fba:	203a      	movs	r0, #58	; 0x3a
 8006fbc:	f7ff ff1f 	bl	8006dfe <send_cmd>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d14a      	bne.n	800705c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	73fb      	strb	r3, [r7, #15]
 8006fca:	e00d      	b.n	8006fe8 <USER_SPI_initialize+0x10c>
 8006fcc:	7bfc      	ldrb	r4, [r7, #15]
 8006fce:	20ff      	movs	r0, #255	; 0xff
 8006fd0:	f7ff fe22 	bl	8006c18 <xchg_spi>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	f107 0310 	add.w	r3, r7, #16
 8006fdc:	4423      	add	r3, r4
 8006fde:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006fe2:	7bfb      	ldrb	r3, [r7, #15]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	73fb      	strb	r3, [r7, #15]
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
 8006fea:	2b03      	cmp	r3, #3
 8006fec:	d9ee      	bls.n	8006fcc <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8006fee:	7a3b      	ldrb	r3, [r7, #8]
 8006ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d001      	beq.n	8006ffc <USER_SPI_initialize+0x120>
 8006ff8:	230c      	movs	r3, #12
 8006ffa:	e000      	b.n	8006ffe <USER_SPI_initialize+0x122>
 8006ffc:	2304      	movs	r3, #4
 8006ffe:	737b      	strb	r3, [r7, #13]
 8007000:	e02c      	b.n	800705c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8007002:	2100      	movs	r1, #0
 8007004:	20a9      	movs	r0, #169	; 0xa9
 8007006:	f7ff fefa 	bl	8006dfe <send_cmd>
 800700a:	4603      	mov	r3, r0
 800700c:	2b01      	cmp	r3, #1
 800700e:	d804      	bhi.n	800701a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8007010:	2302      	movs	r3, #2
 8007012:	737b      	strb	r3, [r7, #13]
 8007014:	23a9      	movs	r3, #169	; 0xa9
 8007016:	73bb      	strb	r3, [r7, #14]
 8007018:	e003      	b.n	8007022 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800701a:	2301      	movs	r3, #1
 800701c:	737b      	strb	r3, [r7, #13]
 800701e:	2301      	movs	r3, #1
 8007020:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8007022:	bf00      	nop
 8007024:	f7ff fde2 	bl	8006bec <SPI_Timer_Status>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d007      	beq.n	800703e <USER_SPI_initialize+0x162>
 800702e:	7bbb      	ldrb	r3, [r7, #14]
 8007030:	2100      	movs	r1, #0
 8007032:	4618      	mov	r0, r3
 8007034:	f7ff fee3 	bl	8006dfe <send_cmd>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1f2      	bne.n	8007024 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800703e:	f7ff fdd5 	bl	8006bec <SPI_Timer_Status>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d007      	beq.n	8007058 <USER_SPI_initialize+0x17c>
 8007048:	f44f 7100 	mov.w	r1, #512	; 0x200
 800704c:	2010      	movs	r0, #16
 800704e:	f7ff fed6 	bl	8006dfe <send_cmd>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d001      	beq.n	800705c <USER_SPI_initialize+0x180>
				ty = 0;
 8007058:	2300      	movs	r3, #0
 800705a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800705c:	4a14      	ldr	r2, [pc, #80]	; (80070b0 <USER_SPI_initialize+0x1d4>)
 800705e:	7b7b      	ldrb	r3, [r7, #13]
 8007060:	7013      	strb	r3, [r2, #0]
	despiselect();
 8007062:	f7ff fe49 	bl	8006cf8 <despiselect>

	if (ty) {			/* OK */
 8007066:	7b7b      	ldrb	r3, [r7, #13]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d012      	beq.n	8007092 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800706c:	4b0f      	ldr	r3, [pc, #60]	; (80070ac <USER_SPI_initialize+0x1d0>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007076:	4b0d      	ldr	r3, [pc, #52]	; (80070ac <USER_SPI_initialize+0x1d0>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f042 0210 	orr.w	r2, r2, #16
 800707e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8007080:	4b09      	ldr	r3, [pc, #36]	; (80070a8 <USER_SPI_initialize+0x1cc>)
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	b2db      	uxtb	r3, r3
 8007086:	f023 0301 	bic.w	r3, r3, #1
 800708a:	b2da      	uxtb	r2, r3
 800708c:	4b06      	ldr	r3, [pc, #24]	; (80070a8 <USER_SPI_initialize+0x1cc>)
 800708e:	701a      	strb	r2, [r3, #0]
 8007090:	e002      	b.n	8007098 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8007092:	4b05      	ldr	r3, [pc, #20]	; (80070a8 <USER_SPI_initialize+0x1cc>)
 8007094:	2201      	movs	r2, #1
 8007096:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8007098:	4b03      	ldr	r3, [pc, #12]	; (80070a8 <USER_SPI_initialize+0x1cc>)
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	b2db      	uxtb	r3, r3
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd90      	pop	{r4, r7, pc}
 80070a6:	bf00      	nop
 80070a8:	20000030 	.word	0x20000030
 80070ac:	200054ec 	.word	0x200054ec
 80070b0:	20000658 	.word	0x20000658

080070b4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	4603      	mov	r3, r0
 80070bc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80070be:	79fb      	ldrb	r3, [r7, #7]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d001      	beq.n	80070c8 <USER_SPI_status+0x14>
 80070c4:	2301      	movs	r3, #1
 80070c6:	e002      	b.n	80070ce <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80070c8:	4b04      	ldr	r3, [pc, #16]	; (80070dc <USER_SPI_status+0x28>)
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	b2db      	uxtb	r3, r3
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	370c      	adds	r7, #12
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	20000030 	.word	0x20000030

080070e0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60b9      	str	r1, [r7, #8]
 80070e8:	607a      	str	r2, [r7, #4]
 80070ea:	603b      	str	r3, [r7, #0]
 80070ec:	4603      	mov	r3, r0
 80070ee:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80070f0:	7bfb      	ldrb	r3, [r7, #15]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d102      	bne.n	80070fc <USER_SPI_read+0x1c>
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d101      	bne.n	8007100 <USER_SPI_read+0x20>
 80070fc:	2304      	movs	r3, #4
 80070fe:	e04d      	b.n	800719c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007100:	4b28      	ldr	r3, [pc, #160]	; (80071a4 <USER_SPI_read+0xc4>)
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	b2db      	uxtb	r3, r3
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	2b00      	cmp	r3, #0
 800710c:	d001      	beq.n	8007112 <USER_SPI_read+0x32>
 800710e:	2303      	movs	r3, #3
 8007110:	e044      	b.n	800719c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8007112:	4b25      	ldr	r3, [pc, #148]	; (80071a8 <USER_SPI_read+0xc8>)
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	f003 0308 	and.w	r3, r3, #8
 800711a:	2b00      	cmp	r3, #0
 800711c:	d102      	bne.n	8007124 <USER_SPI_read+0x44>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	025b      	lsls	r3, r3, #9
 8007122:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d111      	bne.n	800714e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800712a:	6879      	ldr	r1, [r7, #4]
 800712c:	2011      	movs	r0, #17
 800712e:	f7ff fe66 	bl	8006dfe <send_cmd>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d129      	bne.n	800718c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8007138:	f44f 7100 	mov.w	r1, #512	; 0x200
 800713c:	68b8      	ldr	r0, [r7, #8]
 800713e:	f7ff fe03 	bl	8006d48 <rcvr_datablock>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d021      	beq.n	800718c <USER_SPI_read+0xac>
			count = 0;
 8007148:	2300      	movs	r3, #0
 800714a:	603b      	str	r3, [r7, #0]
 800714c:	e01e      	b.n	800718c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800714e:	6879      	ldr	r1, [r7, #4]
 8007150:	2012      	movs	r0, #18
 8007152:	f7ff fe54 	bl	8006dfe <send_cmd>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d117      	bne.n	800718c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800715c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007160:	68b8      	ldr	r0, [r7, #8]
 8007162:	f7ff fdf1 	bl	8006d48 <rcvr_datablock>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00a      	beq.n	8007182 <USER_SPI_read+0xa2>
				buff += 512;
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007172:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	3b01      	subs	r3, #1
 8007178:	603b      	str	r3, [r7, #0]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1ed      	bne.n	800715c <USER_SPI_read+0x7c>
 8007180:	e000      	b.n	8007184 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8007182:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007184:	2100      	movs	r1, #0
 8007186:	200c      	movs	r0, #12
 8007188:	f7ff fe39 	bl	8006dfe <send_cmd>
		}
	}
	despiselect();
 800718c:	f7ff fdb4 	bl	8006cf8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	bf14      	ite	ne
 8007196:	2301      	movne	r3, #1
 8007198:	2300      	moveq	r3, #0
 800719a:	b2db      	uxtb	r3, r3
}
 800719c:	4618      	mov	r0, r3
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	20000030 	.word	0x20000030
 80071a8:	20000658 	.word	0x20000658

080071ac <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60b9      	str	r1, [r7, #8]
 80071b4:	607a      	str	r2, [r7, #4]
 80071b6:	603b      	str	r3, [r7, #0]
 80071b8:	4603      	mov	r3, r0
 80071ba:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80071bc:	7bfb      	ldrb	r3, [r7, #15]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d102      	bne.n	80071c8 <USER_SPI_write+0x1c>
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d101      	bne.n	80071cc <USER_SPI_write+0x20>
 80071c8:	2304      	movs	r3, #4
 80071ca:	e063      	b.n	8007294 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80071cc:	4b33      	ldr	r3, [pc, #204]	; (800729c <USER_SPI_write+0xf0>)
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d001      	beq.n	80071de <USER_SPI_write+0x32>
 80071da:	2303      	movs	r3, #3
 80071dc:	e05a      	b.n	8007294 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80071de:	4b2f      	ldr	r3, [pc, #188]	; (800729c <USER_SPI_write+0xf0>)
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	f003 0304 	and.w	r3, r3, #4
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d001      	beq.n	80071f0 <USER_SPI_write+0x44>
 80071ec:	2302      	movs	r3, #2
 80071ee:	e051      	b.n	8007294 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80071f0:	4b2b      	ldr	r3, [pc, #172]	; (80072a0 <USER_SPI_write+0xf4>)
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	f003 0308 	and.w	r3, r3, #8
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d102      	bne.n	8007202 <USER_SPI_write+0x56>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	025b      	lsls	r3, r3, #9
 8007200:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d110      	bne.n	800722a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8007208:	6879      	ldr	r1, [r7, #4]
 800720a:	2018      	movs	r0, #24
 800720c:	f7ff fdf7 	bl	8006dfe <send_cmd>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d136      	bne.n	8007284 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8007216:	21fe      	movs	r1, #254	; 0xfe
 8007218:	68b8      	ldr	r0, [r7, #8]
 800721a:	f7ff fdbe 	bl	8006d9a <xmit_datablock>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d02f      	beq.n	8007284 <USER_SPI_write+0xd8>
			count = 0;
 8007224:	2300      	movs	r3, #0
 8007226:	603b      	str	r3, [r7, #0]
 8007228:	e02c      	b.n	8007284 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800722a:	4b1d      	ldr	r3, [pc, #116]	; (80072a0 <USER_SPI_write+0xf4>)
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	f003 0306 	and.w	r3, r3, #6
 8007232:	2b00      	cmp	r3, #0
 8007234:	d003      	beq.n	800723e <USER_SPI_write+0x92>
 8007236:	6839      	ldr	r1, [r7, #0]
 8007238:	2097      	movs	r0, #151	; 0x97
 800723a:	f7ff fde0 	bl	8006dfe <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800723e:	6879      	ldr	r1, [r7, #4]
 8007240:	2019      	movs	r0, #25
 8007242:	f7ff fddc 	bl	8006dfe <send_cmd>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d11b      	bne.n	8007284 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800724c:	21fc      	movs	r1, #252	; 0xfc
 800724e:	68b8      	ldr	r0, [r7, #8]
 8007250:	f7ff fda3 	bl	8006d9a <xmit_datablock>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00a      	beq.n	8007270 <USER_SPI_write+0xc4>
				buff += 512;
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007260:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	3b01      	subs	r3, #1
 8007266:	603b      	str	r3, [r7, #0]
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1ee      	bne.n	800724c <USER_SPI_write+0xa0>
 800726e:	e000      	b.n	8007272 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007270:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8007272:	21fd      	movs	r1, #253	; 0xfd
 8007274:	2000      	movs	r0, #0
 8007276:	f7ff fd90 	bl	8006d9a <xmit_datablock>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d101      	bne.n	8007284 <USER_SPI_write+0xd8>
 8007280:	2301      	movs	r3, #1
 8007282:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8007284:	f7ff fd38 	bl	8006cf8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	bf14      	ite	ne
 800728e:	2301      	movne	r3, #1
 8007290:	2300      	moveq	r3, #0
 8007292:	b2db      	uxtb	r3, r3
}
 8007294:	4618      	mov	r0, r3
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	20000030 	.word	0x20000030
 80072a0:	20000658 	.word	0x20000658

080072a4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b08c      	sub	sp, #48	; 0x30
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	4603      	mov	r3, r0
 80072ac:	603a      	str	r2, [r7, #0]
 80072ae:	71fb      	strb	r3, [r7, #7]
 80072b0:	460b      	mov	r3, r1
 80072b2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80072b4:	79fb      	ldrb	r3, [r7, #7]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d001      	beq.n	80072be <USER_SPI_ioctl+0x1a>
 80072ba:	2304      	movs	r3, #4
 80072bc:	e15a      	b.n	8007574 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80072be:	4baf      	ldr	r3, [pc, #700]	; (800757c <USER_SPI_ioctl+0x2d8>)
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	f003 0301 	and.w	r3, r3, #1
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d001      	beq.n	80072d0 <USER_SPI_ioctl+0x2c>
 80072cc:	2303      	movs	r3, #3
 80072ce:	e151      	b.n	8007574 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80072d6:	79bb      	ldrb	r3, [r7, #6]
 80072d8:	2b04      	cmp	r3, #4
 80072da:	f200 8136 	bhi.w	800754a <USER_SPI_ioctl+0x2a6>
 80072de:	a201      	add	r2, pc, #4	; (adr r2, 80072e4 <USER_SPI_ioctl+0x40>)
 80072e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e4:	080072f9 	.word	0x080072f9
 80072e8:	0800730d 	.word	0x0800730d
 80072ec:	0800754b 	.word	0x0800754b
 80072f0:	080073b9 	.word	0x080073b9
 80072f4:	080074af 	.word	0x080074af
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80072f8:	f7ff fd0c 	bl	8006d14 <spiselect>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	f000 8127 	beq.w	8007552 <USER_SPI_ioctl+0x2ae>
 8007304:	2300      	movs	r3, #0
 8007306:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800730a:	e122      	b.n	8007552 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800730c:	2100      	movs	r1, #0
 800730e:	2009      	movs	r0, #9
 8007310:	f7ff fd75 	bl	8006dfe <send_cmd>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	f040 811d 	bne.w	8007556 <USER_SPI_ioctl+0x2b2>
 800731c:	f107 030c 	add.w	r3, r7, #12
 8007320:	2110      	movs	r1, #16
 8007322:	4618      	mov	r0, r3
 8007324:	f7ff fd10 	bl	8006d48 <rcvr_datablock>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	f000 8113 	beq.w	8007556 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007330:	7b3b      	ldrb	r3, [r7, #12]
 8007332:	099b      	lsrs	r3, r3, #6
 8007334:	b2db      	uxtb	r3, r3
 8007336:	2b01      	cmp	r3, #1
 8007338:	d111      	bne.n	800735e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800733a:	7d7b      	ldrb	r3, [r7, #21]
 800733c:	461a      	mov	r2, r3
 800733e:	7d3b      	ldrb	r3, [r7, #20]
 8007340:	021b      	lsls	r3, r3, #8
 8007342:	4413      	add	r3, r2
 8007344:	461a      	mov	r2, r3
 8007346:	7cfb      	ldrb	r3, [r7, #19]
 8007348:	041b      	lsls	r3, r3, #16
 800734a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800734e:	4413      	add	r3, r2
 8007350:	3301      	adds	r3, #1
 8007352:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	029a      	lsls	r2, r3, #10
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	601a      	str	r2, [r3, #0]
 800735c:	e028      	b.n	80073b0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800735e:	7c7b      	ldrb	r3, [r7, #17]
 8007360:	f003 030f 	and.w	r3, r3, #15
 8007364:	b2da      	uxtb	r2, r3
 8007366:	7dbb      	ldrb	r3, [r7, #22]
 8007368:	09db      	lsrs	r3, r3, #7
 800736a:	b2db      	uxtb	r3, r3
 800736c:	4413      	add	r3, r2
 800736e:	b2da      	uxtb	r2, r3
 8007370:	7d7b      	ldrb	r3, [r7, #21]
 8007372:	005b      	lsls	r3, r3, #1
 8007374:	b2db      	uxtb	r3, r3
 8007376:	f003 0306 	and.w	r3, r3, #6
 800737a:	b2db      	uxtb	r3, r3
 800737c:	4413      	add	r3, r2
 800737e:	b2db      	uxtb	r3, r3
 8007380:	3302      	adds	r3, #2
 8007382:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8007386:	7d3b      	ldrb	r3, [r7, #20]
 8007388:	099b      	lsrs	r3, r3, #6
 800738a:	b2db      	uxtb	r3, r3
 800738c:	461a      	mov	r2, r3
 800738e:	7cfb      	ldrb	r3, [r7, #19]
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	441a      	add	r2, r3
 8007394:	7cbb      	ldrb	r3, [r7, #18]
 8007396:	029b      	lsls	r3, r3, #10
 8007398:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800739c:	4413      	add	r3, r2
 800739e:	3301      	adds	r3, #1
 80073a0:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80073a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80073a6:	3b09      	subs	r3, #9
 80073a8:	69fa      	ldr	r2, [r7, #28]
 80073aa:	409a      	lsls	r2, r3
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80073b0:	2300      	movs	r3, #0
 80073b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80073b6:	e0ce      	b.n	8007556 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80073b8:	4b71      	ldr	r3, [pc, #452]	; (8007580 <USER_SPI_ioctl+0x2dc>)
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	f003 0304 	and.w	r3, r3, #4
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d031      	beq.n	8007428 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80073c4:	2100      	movs	r1, #0
 80073c6:	208d      	movs	r0, #141	; 0x8d
 80073c8:	f7ff fd19 	bl	8006dfe <send_cmd>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f040 80c3 	bne.w	800755a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80073d4:	20ff      	movs	r0, #255	; 0xff
 80073d6:	f7ff fc1f 	bl	8006c18 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80073da:	f107 030c 	add.w	r3, r7, #12
 80073de:	2110      	movs	r1, #16
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7ff fcb1 	bl	8006d48 <rcvr_datablock>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f000 80b6 	beq.w	800755a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80073ee:	2330      	movs	r3, #48	; 0x30
 80073f0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80073f4:	e007      	b.n	8007406 <USER_SPI_ioctl+0x162>
 80073f6:	20ff      	movs	r0, #255	; 0xff
 80073f8:	f7ff fc0e 	bl	8006c18 <xchg_spi>
 80073fc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007400:	3b01      	subs	r3, #1
 8007402:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007406:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1f3      	bne.n	80073f6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800740e:	7dbb      	ldrb	r3, [r7, #22]
 8007410:	091b      	lsrs	r3, r3, #4
 8007412:	b2db      	uxtb	r3, r3
 8007414:	461a      	mov	r2, r3
 8007416:	2310      	movs	r3, #16
 8007418:	fa03 f202 	lsl.w	r2, r3, r2
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8007420:	2300      	movs	r3, #0
 8007422:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8007426:	e098      	b.n	800755a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8007428:	2100      	movs	r1, #0
 800742a:	2009      	movs	r0, #9
 800742c:	f7ff fce7 	bl	8006dfe <send_cmd>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	f040 8091 	bne.w	800755a <USER_SPI_ioctl+0x2b6>
 8007438:	f107 030c 	add.w	r3, r7, #12
 800743c:	2110      	movs	r1, #16
 800743e:	4618      	mov	r0, r3
 8007440:	f7ff fc82 	bl	8006d48 <rcvr_datablock>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	f000 8087 	beq.w	800755a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800744c:	4b4c      	ldr	r3, [pc, #304]	; (8007580 <USER_SPI_ioctl+0x2dc>)
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	f003 0302 	and.w	r3, r3, #2
 8007454:	2b00      	cmp	r3, #0
 8007456:	d012      	beq.n	800747e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8007458:	7dbb      	ldrb	r3, [r7, #22]
 800745a:	005b      	lsls	r3, r3, #1
 800745c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007460:	7dfa      	ldrb	r2, [r7, #23]
 8007462:	09d2      	lsrs	r2, r2, #7
 8007464:	b2d2      	uxtb	r2, r2
 8007466:	4413      	add	r3, r2
 8007468:	1c5a      	adds	r2, r3, #1
 800746a:	7e7b      	ldrb	r3, [r7, #25]
 800746c:	099b      	lsrs	r3, r3, #6
 800746e:	b2db      	uxtb	r3, r3
 8007470:	3b01      	subs	r3, #1
 8007472:	fa02 f303 	lsl.w	r3, r2, r3
 8007476:	461a      	mov	r2, r3
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	601a      	str	r2, [r3, #0]
 800747c:	e013      	b.n	80074a6 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800747e:	7dbb      	ldrb	r3, [r7, #22]
 8007480:	109b      	asrs	r3, r3, #2
 8007482:	b29b      	uxth	r3, r3
 8007484:	f003 031f 	and.w	r3, r3, #31
 8007488:	3301      	adds	r3, #1
 800748a:	7dfa      	ldrb	r2, [r7, #23]
 800748c:	00d2      	lsls	r2, r2, #3
 800748e:	f002 0218 	and.w	r2, r2, #24
 8007492:	7df9      	ldrb	r1, [r7, #23]
 8007494:	0949      	lsrs	r1, r1, #5
 8007496:	b2c9      	uxtb	r1, r1
 8007498:	440a      	add	r2, r1
 800749a:	3201      	adds	r2, #1
 800749c:	fb02 f303 	mul.w	r3, r2, r3
 80074a0:	461a      	mov	r2, r3
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80074a6:	2300      	movs	r3, #0
 80074a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80074ac:	e055      	b.n	800755a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80074ae:	4b34      	ldr	r3, [pc, #208]	; (8007580 <USER_SPI_ioctl+0x2dc>)
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	f003 0306 	and.w	r3, r3, #6
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d051      	beq.n	800755e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80074ba:	f107 020c 	add.w	r2, r7, #12
 80074be:	79fb      	ldrb	r3, [r7, #7]
 80074c0:	210b      	movs	r1, #11
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7ff feee 	bl	80072a4 <USER_SPI_ioctl>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d149      	bne.n	8007562 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80074ce:	7b3b      	ldrb	r3, [r7, #12]
 80074d0:	099b      	lsrs	r3, r3, #6
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d104      	bne.n	80074e2 <USER_SPI_ioctl+0x23e>
 80074d8:	7dbb      	ldrb	r3, [r7, #22]
 80074da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d041      	beq.n	8007566 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	623b      	str	r3, [r7, #32]
 80074e6:	6a3b      	ldr	r3, [r7, #32]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80074f2:	4b23      	ldr	r3, [pc, #140]	; (8007580 <USER_SPI_ioctl+0x2dc>)
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	f003 0308 	and.w	r3, r3, #8
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d105      	bne.n	800750a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80074fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007500:	025b      	lsls	r3, r3, #9
 8007502:	62bb      	str	r3, [r7, #40]	; 0x28
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	025b      	lsls	r3, r3, #9
 8007508:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800750a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800750c:	2020      	movs	r0, #32
 800750e:	f7ff fc76 	bl	8006dfe <send_cmd>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d128      	bne.n	800756a <USER_SPI_ioctl+0x2c6>
 8007518:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800751a:	2021      	movs	r0, #33	; 0x21
 800751c:	f7ff fc6f 	bl	8006dfe <send_cmd>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d121      	bne.n	800756a <USER_SPI_ioctl+0x2c6>
 8007526:	2100      	movs	r1, #0
 8007528:	2026      	movs	r0, #38	; 0x26
 800752a:	f7ff fc68 	bl	8006dfe <send_cmd>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d11a      	bne.n	800756a <USER_SPI_ioctl+0x2c6>
 8007534:	f247 5030 	movw	r0, #30000	; 0x7530
 8007538:	f7ff fbbb 	bl	8006cb2 <wait_ready>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d013      	beq.n	800756a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8007542:	2300      	movs	r3, #0
 8007544:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8007548:	e00f      	b.n	800756a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800754a:	2304      	movs	r3, #4
 800754c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007550:	e00c      	b.n	800756c <USER_SPI_ioctl+0x2c8>
		break;
 8007552:	bf00      	nop
 8007554:	e00a      	b.n	800756c <USER_SPI_ioctl+0x2c8>
		break;
 8007556:	bf00      	nop
 8007558:	e008      	b.n	800756c <USER_SPI_ioctl+0x2c8>
		break;
 800755a:	bf00      	nop
 800755c:	e006      	b.n	800756c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800755e:	bf00      	nop
 8007560:	e004      	b.n	800756c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007562:	bf00      	nop
 8007564:	e002      	b.n	800756c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007566:	bf00      	nop
 8007568:	e000      	b.n	800756c <USER_SPI_ioctl+0x2c8>
		break;
 800756a:	bf00      	nop
	}

	despiselect();
 800756c:	f7ff fbc4 	bl	8006cf8 <despiselect>

	return res;
 8007570:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007574:	4618      	mov	r0, r3
 8007576:	3730      	adds	r7, #48	; 0x30
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}
 800757c:	20000030 	.word	0x20000030
 8007580:	20000658 	.word	0x20000658

08007584 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	4603      	mov	r3, r0
 800758c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800758e:	79fb      	ldrb	r3, [r7, #7]
 8007590:	4a08      	ldr	r2, [pc, #32]	; (80075b4 <disk_status+0x30>)
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	4413      	add	r3, r2
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	79fa      	ldrb	r2, [r7, #7]
 800759c:	4905      	ldr	r1, [pc, #20]	; (80075b4 <disk_status+0x30>)
 800759e:	440a      	add	r2, r1
 80075a0:	7a12      	ldrb	r2, [r2, #8]
 80075a2:	4610      	mov	r0, r2
 80075a4:	4798      	blx	r3
 80075a6:	4603      	mov	r3, r0
 80075a8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80075aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	20000684 	.word	0x20000684

080075b8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	4603      	mov	r3, r0
 80075c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80075c2:	2300      	movs	r3, #0
 80075c4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80075c6:	79fb      	ldrb	r3, [r7, #7]
 80075c8:	4a0d      	ldr	r2, [pc, #52]	; (8007600 <disk_initialize+0x48>)
 80075ca:	5cd3      	ldrb	r3, [r2, r3]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d111      	bne.n	80075f4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80075d0:	79fb      	ldrb	r3, [r7, #7]
 80075d2:	4a0b      	ldr	r2, [pc, #44]	; (8007600 <disk_initialize+0x48>)
 80075d4:	2101      	movs	r1, #1
 80075d6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80075d8:	79fb      	ldrb	r3, [r7, #7]
 80075da:	4a09      	ldr	r2, [pc, #36]	; (8007600 <disk_initialize+0x48>)
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	79fa      	ldrb	r2, [r7, #7]
 80075e6:	4906      	ldr	r1, [pc, #24]	; (8007600 <disk_initialize+0x48>)
 80075e8:	440a      	add	r2, r1
 80075ea:	7a12      	ldrb	r2, [r2, #8]
 80075ec:	4610      	mov	r0, r2
 80075ee:	4798      	blx	r3
 80075f0:	4603      	mov	r3, r0
 80075f2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80075f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	20000684 	.word	0x20000684

08007604 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007604:	b590      	push	{r4, r7, lr}
 8007606:	b087      	sub	sp, #28
 8007608:	af00      	add	r7, sp, #0
 800760a:	60b9      	str	r1, [r7, #8]
 800760c:	607a      	str	r2, [r7, #4]
 800760e:	603b      	str	r3, [r7, #0]
 8007610:	4603      	mov	r3, r0
 8007612:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007614:	7bfb      	ldrb	r3, [r7, #15]
 8007616:	4a0a      	ldr	r2, [pc, #40]	; (8007640 <disk_read+0x3c>)
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	4413      	add	r3, r2
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	689c      	ldr	r4, [r3, #8]
 8007620:	7bfb      	ldrb	r3, [r7, #15]
 8007622:	4a07      	ldr	r2, [pc, #28]	; (8007640 <disk_read+0x3c>)
 8007624:	4413      	add	r3, r2
 8007626:	7a18      	ldrb	r0, [r3, #8]
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	68b9      	ldr	r1, [r7, #8]
 800762e:	47a0      	blx	r4
 8007630:	4603      	mov	r3, r0
 8007632:	75fb      	strb	r3, [r7, #23]
  return res;
 8007634:	7dfb      	ldrb	r3, [r7, #23]
}
 8007636:	4618      	mov	r0, r3
 8007638:	371c      	adds	r7, #28
 800763a:	46bd      	mov	sp, r7
 800763c:	bd90      	pop	{r4, r7, pc}
 800763e:	bf00      	nop
 8007640:	20000684 	.word	0x20000684

08007644 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007644:	b590      	push	{r4, r7, lr}
 8007646:	b087      	sub	sp, #28
 8007648:	af00      	add	r7, sp, #0
 800764a:	60b9      	str	r1, [r7, #8]
 800764c:	607a      	str	r2, [r7, #4]
 800764e:	603b      	str	r3, [r7, #0]
 8007650:	4603      	mov	r3, r0
 8007652:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007654:	7bfb      	ldrb	r3, [r7, #15]
 8007656:	4a0a      	ldr	r2, [pc, #40]	; (8007680 <disk_write+0x3c>)
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	4413      	add	r3, r2
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	68dc      	ldr	r4, [r3, #12]
 8007660:	7bfb      	ldrb	r3, [r7, #15]
 8007662:	4a07      	ldr	r2, [pc, #28]	; (8007680 <disk_write+0x3c>)
 8007664:	4413      	add	r3, r2
 8007666:	7a18      	ldrb	r0, [r3, #8]
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	68b9      	ldr	r1, [r7, #8]
 800766e:	47a0      	blx	r4
 8007670:	4603      	mov	r3, r0
 8007672:	75fb      	strb	r3, [r7, #23]
  return res;
 8007674:	7dfb      	ldrb	r3, [r7, #23]
}
 8007676:	4618      	mov	r0, r3
 8007678:	371c      	adds	r7, #28
 800767a:	46bd      	mov	sp, r7
 800767c:	bd90      	pop	{r4, r7, pc}
 800767e:	bf00      	nop
 8007680:	20000684 	.word	0x20000684

08007684 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	4603      	mov	r3, r0
 800768c:	603a      	str	r2, [r7, #0]
 800768e:	71fb      	strb	r3, [r7, #7]
 8007690:	460b      	mov	r3, r1
 8007692:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007694:	79fb      	ldrb	r3, [r7, #7]
 8007696:	4a09      	ldr	r2, [pc, #36]	; (80076bc <disk_ioctl+0x38>)
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	4413      	add	r3, r2
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	79fa      	ldrb	r2, [r7, #7]
 80076a2:	4906      	ldr	r1, [pc, #24]	; (80076bc <disk_ioctl+0x38>)
 80076a4:	440a      	add	r2, r1
 80076a6:	7a10      	ldrb	r0, [r2, #8]
 80076a8:	79b9      	ldrb	r1, [r7, #6]
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	4798      	blx	r3
 80076ae:	4603      	mov	r3, r0
 80076b0:	73fb      	strb	r3, [r7, #15]
  return res;
 80076b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	20000684 	.word	0x20000684

080076c0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	3301      	adds	r3, #1
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80076d0:	89fb      	ldrh	r3, [r7, #14]
 80076d2:	021b      	lsls	r3, r3, #8
 80076d4:	b21a      	sxth	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	b21b      	sxth	r3, r3
 80076dc:	4313      	orrs	r3, r2
 80076de:	b21b      	sxth	r3, r3
 80076e0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80076e2:	89fb      	ldrh	r3, [r7, #14]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3714      	adds	r7, #20
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	3303      	adds	r3, #3
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	021b      	lsls	r3, r3, #8
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	3202      	adds	r2, #2
 8007708:	7812      	ldrb	r2, [r2, #0]
 800770a:	4313      	orrs	r3, r2
 800770c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	021b      	lsls	r3, r3, #8
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	3201      	adds	r2, #1
 8007716:	7812      	ldrb	r2, [r2, #0]
 8007718:	4313      	orrs	r3, r2
 800771a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	021b      	lsls	r3, r3, #8
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	7812      	ldrb	r2, [r2, #0]
 8007724:	4313      	orrs	r3, r2
 8007726:	60fb      	str	r3, [r7, #12]
	return rv;
 8007728:	68fb      	ldr	r3, [r7, #12]
}
 800772a:	4618      	mov	r0, r3
 800772c:	3714      	adds	r7, #20
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr

08007736 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007736:	b480      	push	{r7}
 8007738:	b083      	sub	sp, #12
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
 800773e:	460b      	mov	r3, r1
 8007740:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	1c5a      	adds	r2, r3, #1
 8007746:	607a      	str	r2, [r7, #4]
 8007748:	887a      	ldrh	r2, [r7, #2]
 800774a:	b2d2      	uxtb	r2, r2
 800774c:	701a      	strb	r2, [r3, #0]
 800774e:	887b      	ldrh	r3, [r7, #2]
 8007750:	0a1b      	lsrs	r3, r3, #8
 8007752:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	1c5a      	adds	r2, r3, #1
 8007758:	607a      	str	r2, [r7, #4]
 800775a:	887a      	ldrh	r2, [r7, #2]
 800775c:	b2d2      	uxtb	r2, r2
 800775e:	701a      	strb	r2, [r3, #0]
}
 8007760:	bf00      	nop
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	1c5a      	adds	r2, r3, #1
 800777a:	607a      	str	r2, [r7, #4]
 800777c:	683a      	ldr	r2, [r7, #0]
 800777e:	b2d2      	uxtb	r2, r2
 8007780:	701a      	strb	r2, [r3, #0]
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	0a1b      	lsrs	r3, r3, #8
 8007786:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	1c5a      	adds	r2, r3, #1
 800778c:	607a      	str	r2, [r7, #4]
 800778e:	683a      	ldr	r2, [r7, #0]
 8007790:	b2d2      	uxtb	r2, r2
 8007792:	701a      	strb	r2, [r3, #0]
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	0a1b      	lsrs	r3, r3, #8
 8007798:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	1c5a      	adds	r2, r3, #1
 800779e:	607a      	str	r2, [r7, #4]
 80077a0:	683a      	ldr	r2, [r7, #0]
 80077a2:	b2d2      	uxtb	r2, r2
 80077a4:	701a      	strb	r2, [r3, #0]
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	0a1b      	lsrs	r3, r3, #8
 80077aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	1c5a      	adds	r2, r3, #1
 80077b0:	607a      	str	r2, [r7, #4]
 80077b2:	683a      	ldr	r2, [r7, #0]
 80077b4:	b2d2      	uxtb	r2, r2
 80077b6:	701a      	strb	r2, [r3, #0]
}
 80077b8:	bf00      	nop
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80077c4:	b480      	push	{r7}
 80077c6:	b087      	sub	sp, #28
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00d      	beq.n	80077fa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80077de:	693a      	ldr	r2, [r7, #16]
 80077e0:	1c53      	adds	r3, r2, #1
 80077e2:	613b      	str	r3, [r7, #16]
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	1c59      	adds	r1, r3, #1
 80077e8:	6179      	str	r1, [r7, #20]
 80077ea:	7812      	ldrb	r2, [r2, #0]
 80077ec:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	3b01      	subs	r3, #1
 80077f2:	607b      	str	r3, [r7, #4]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1f1      	bne.n	80077de <mem_cpy+0x1a>
	}
}
 80077fa:	bf00      	nop
 80077fc:	371c      	adds	r7, #28
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr

08007806 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007806:	b480      	push	{r7}
 8007808:	b087      	sub	sp, #28
 800780a:	af00      	add	r7, sp, #0
 800780c:	60f8      	str	r0, [r7, #12]
 800780e:	60b9      	str	r1, [r7, #8]
 8007810:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	1c5a      	adds	r2, r3, #1
 800781a:	617a      	str	r2, [r7, #20]
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	b2d2      	uxtb	r2, r2
 8007820:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	3b01      	subs	r3, #1
 8007826:	607b      	str	r3, [r7, #4]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1f3      	bne.n	8007816 <mem_set+0x10>
}
 800782e:	bf00      	nop
 8007830:	bf00      	nop
 8007832:	371c      	adds	r7, #28
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800783c:	b480      	push	{r7}
 800783e:	b089      	sub	sp, #36	; 0x24
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	61fb      	str	r3, [r7, #28]
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007850:	2300      	movs	r3, #0
 8007852:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	1c5a      	adds	r2, r3, #1
 8007858:	61fa      	str	r2, [r7, #28]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	4619      	mov	r1, r3
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	1c5a      	adds	r2, r3, #1
 8007862:	61ba      	str	r2, [r7, #24]
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	1acb      	subs	r3, r1, r3
 8007868:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	3b01      	subs	r3, #1
 800786e:	607b      	str	r3, [r7, #4]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d002      	beq.n	800787c <mem_cmp+0x40>
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d0eb      	beq.n	8007854 <mem_cmp+0x18>

	return r;
 800787c:	697b      	ldr	r3, [r7, #20]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3724      	adds	r7, #36	; 0x24
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800788a:	b480      	push	{r7}
 800788c:	b083      	sub	sp, #12
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
 8007892:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007894:	e002      	b.n	800789c <chk_chr+0x12>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	3301      	adds	r3, #1
 800789a:	607b      	str	r3, [r7, #4]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d005      	beq.n	80078b0 <chk_chr+0x26>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	461a      	mov	r2, r3
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d1f2      	bne.n	8007896 <chk_chr+0xc>
	return *str;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	781b      	ldrb	r3, [r3, #0]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d009      	beq.n	80078e2 <lock_fs+0x22>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	4618      	mov	r0, r3
 80078d4:	f002 f8e8 	bl	8009aa8 <ff_req_grant>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d001      	beq.n	80078e2 <lock_fs+0x22>
 80078de:	2301      	movs	r3, #1
 80078e0:	e000      	b.n	80078e4 <lock_fs+0x24>
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	460b      	mov	r3, r1
 80078f6:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00d      	beq.n	800791a <unlock_fs+0x2e>
 80078fe:	78fb      	ldrb	r3, [r7, #3]
 8007900:	2b0c      	cmp	r3, #12
 8007902:	d00a      	beq.n	800791a <unlock_fs+0x2e>
 8007904:	78fb      	ldrb	r3, [r7, #3]
 8007906:	2b0b      	cmp	r3, #11
 8007908:	d007      	beq.n	800791a <unlock_fs+0x2e>
 800790a:	78fb      	ldrb	r3, [r7, #3]
 800790c:	2b0f      	cmp	r3, #15
 800790e:	d004      	beq.n	800791a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	4618      	mov	r0, r3
 8007916:	f002 f8dc 	bl	8009ad2 <ff_rel_grant>
	}
}
 800791a:	bf00      	nop
 800791c:	3708      	adds	r7, #8
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
	...

08007924 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007924:	b480      	push	{r7}
 8007926:	b085      	sub	sp, #20
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800792e:	2300      	movs	r3, #0
 8007930:	60bb      	str	r3, [r7, #8]
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	60fb      	str	r3, [r7, #12]
 8007936:	e029      	b.n	800798c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007938:	4a27      	ldr	r2, [pc, #156]	; (80079d8 <chk_lock+0xb4>)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	011b      	lsls	r3, r3, #4
 800793e:	4413      	add	r3, r2
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d01d      	beq.n	8007982 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007946:	4a24      	ldr	r2, [pc, #144]	; (80079d8 <chk_lock+0xb4>)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	011b      	lsls	r3, r3, #4
 800794c:	4413      	add	r3, r2
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	429a      	cmp	r2, r3
 8007956:	d116      	bne.n	8007986 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007958:	4a1f      	ldr	r2, [pc, #124]	; (80079d8 <chk_lock+0xb4>)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	011b      	lsls	r3, r3, #4
 800795e:	4413      	add	r3, r2
 8007960:	3304      	adds	r3, #4
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007968:	429a      	cmp	r2, r3
 800796a:	d10c      	bne.n	8007986 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800796c:	4a1a      	ldr	r2, [pc, #104]	; (80079d8 <chk_lock+0xb4>)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	011b      	lsls	r3, r3, #4
 8007972:	4413      	add	r3, r2
 8007974:	3308      	adds	r3, #8
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800797c:	429a      	cmp	r2, r3
 800797e:	d102      	bne.n	8007986 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007980:	e007      	b.n	8007992 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007982:	2301      	movs	r3, #1
 8007984:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	3301      	adds	r3, #1
 800798a:	60fb      	str	r3, [r7, #12]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2b01      	cmp	r3, #1
 8007990:	d9d2      	bls.n	8007938 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2b02      	cmp	r3, #2
 8007996:	d109      	bne.n	80079ac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d102      	bne.n	80079a4 <chk_lock+0x80>
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d101      	bne.n	80079a8 <chk_lock+0x84>
 80079a4:	2300      	movs	r3, #0
 80079a6:	e010      	b.n	80079ca <chk_lock+0xa6>
 80079a8:	2312      	movs	r3, #18
 80079aa:	e00e      	b.n	80079ca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d108      	bne.n	80079c4 <chk_lock+0xa0>
 80079b2:	4a09      	ldr	r2, [pc, #36]	; (80079d8 <chk_lock+0xb4>)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	011b      	lsls	r3, r3, #4
 80079b8:	4413      	add	r3, r2
 80079ba:	330c      	adds	r3, #12
 80079bc:	881b      	ldrh	r3, [r3, #0]
 80079be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079c2:	d101      	bne.n	80079c8 <chk_lock+0xa4>
 80079c4:	2310      	movs	r3, #16
 80079c6:	e000      	b.n	80079ca <chk_lock+0xa6>
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3714      	adds	r7, #20
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop
 80079d8:	20000664 	.word	0x20000664

080079dc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80079e2:	2300      	movs	r3, #0
 80079e4:	607b      	str	r3, [r7, #4]
 80079e6:	e002      	b.n	80079ee <enq_lock+0x12>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	3301      	adds	r3, #1
 80079ec:	607b      	str	r3, [r7, #4]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d806      	bhi.n	8007a02 <enq_lock+0x26>
 80079f4:	4a09      	ldr	r2, [pc, #36]	; (8007a1c <enq_lock+0x40>)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	011b      	lsls	r3, r3, #4
 80079fa:	4413      	add	r3, r2
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1f2      	bne.n	80079e8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	bf14      	ite	ne
 8007a08:	2301      	movne	r3, #1
 8007a0a:	2300      	moveq	r3, #0
 8007a0c:	b2db      	uxtb	r3, r3
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	370c      	adds	r7, #12
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	20000664 	.word	0x20000664

08007a20 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	60fb      	str	r3, [r7, #12]
 8007a2e:	e01f      	b.n	8007a70 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007a30:	4a41      	ldr	r2, [pc, #260]	; (8007b38 <inc_lock+0x118>)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	011b      	lsls	r3, r3, #4
 8007a36:	4413      	add	r3, r2
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d113      	bne.n	8007a6a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007a42:	4a3d      	ldr	r2, [pc, #244]	; (8007b38 <inc_lock+0x118>)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	011b      	lsls	r3, r3, #4
 8007a48:	4413      	add	r3, r2
 8007a4a:	3304      	adds	r3, #4
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d109      	bne.n	8007a6a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007a56:	4a38      	ldr	r2, [pc, #224]	; (8007b38 <inc_lock+0x118>)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	011b      	lsls	r3, r3, #4
 8007a5c:	4413      	add	r3, r2
 8007a5e:	3308      	adds	r3, #8
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d006      	beq.n	8007a78 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	60fb      	str	r3, [r7, #12]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d9dc      	bls.n	8007a30 <inc_lock+0x10>
 8007a76:	e000      	b.n	8007a7a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007a78:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	d132      	bne.n	8007ae6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007a80:	2300      	movs	r3, #0
 8007a82:	60fb      	str	r3, [r7, #12]
 8007a84:	e002      	b.n	8007a8c <inc_lock+0x6c>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	60fb      	str	r3, [r7, #12]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d806      	bhi.n	8007aa0 <inc_lock+0x80>
 8007a92:	4a29      	ldr	r2, [pc, #164]	; (8007b38 <inc_lock+0x118>)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	011b      	lsls	r3, r3, #4
 8007a98:	4413      	add	r3, r2
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d1f2      	bne.n	8007a86 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	d101      	bne.n	8007aaa <inc_lock+0x8a>
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	e040      	b.n	8007b2c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	4922      	ldr	r1, [pc, #136]	; (8007b38 <inc_lock+0x118>)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	011b      	lsls	r3, r3, #4
 8007ab4:	440b      	add	r3, r1
 8007ab6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	689a      	ldr	r2, [r3, #8]
 8007abc:	491e      	ldr	r1, [pc, #120]	; (8007b38 <inc_lock+0x118>)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	011b      	lsls	r3, r3, #4
 8007ac2:	440b      	add	r3, r1
 8007ac4:	3304      	adds	r3, #4
 8007ac6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	695a      	ldr	r2, [r3, #20]
 8007acc:	491a      	ldr	r1, [pc, #104]	; (8007b38 <inc_lock+0x118>)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	011b      	lsls	r3, r3, #4
 8007ad2:	440b      	add	r3, r1
 8007ad4:	3308      	adds	r3, #8
 8007ad6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007ad8:	4a17      	ldr	r2, [pc, #92]	; (8007b38 <inc_lock+0x118>)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	011b      	lsls	r3, r3, #4
 8007ade:	4413      	add	r3, r2
 8007ae0:	330c      	adds	r3, #12
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d009      	beq.n	8007b00 <inc_lock+0xe0>
 8007aec:	4a12      	ldr	r2, [pc, #72]	; (8007b38 <inc_lock+0x118>)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	011b      	lsls	r3, r3, #4
 8007af2:	4413      	add	r3, r2
 8007af4:	330c      	adds	r3, #12
 8007af6:	881b      	ldrh	r3, [r3, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d001      	beq.n	8007b00 <inc_lock+0xe0>
 8007afc:	2300      	movs	r3, #0
 8007afe:	e015      	b.n	8007b2c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d108      	bne.n	8007b18 <inc_lock+0xf8>
 8007b06:	4a0c      	ldr	r2, [pc, #48]	; (8007b38 <inc_lock+0x118>)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	011b      	lsls	r3, r3, #4
 8007b0c:	4413      	add	r3, r2
 8007b0e:	330c      	adds	r3, #12
 8007b10:	881b      	ldrh	r3, [r3, #0]
 8007b12:	3301      	adds	r3, #1
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	e001      	b.n	8007b1c <inc_lock+0xfc>
 8007b18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b1c:	4906      	ldr	r1, [pc, #24]	; (8007b38 <inc_lock+0x118>)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	011b      	lsls	r3, r3, #4
 8007b22:	440b      	add	r3, r1
 8007b24:	330c      	adds	r3, #12
 8007b26:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	3301      	adds	r3, #1
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3714      	adds	r7, #20
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr
 8007b38:	20000664 	.word	0x20000664

08007b3c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	3b01      	subs	r3, #1
 8007b48:	607b      	str	r3, [r7, #4]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d825      	bhi.n	8007b9c <dec_lock+0x60>
		n = Files[i].ctr;
 8007b50:	4a17      	ldr	r2, [pc, #92]	; (8007bb0 <dec_lock+0x74>)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	011b      	lsls	r3, r3, #4
 8007b56:	4413      	add	r3, r2
 8007b58:	330c      	adds	r3, #12
 8007b5a:	881b      	ldrh	r3, [r3, #0]
 8007b5c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007b5e:	89fb      	ldrh	r3, [r7, #14]
 8007b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b64:	d101      	bne.n	8007b6a <dec_lock+0x2e>
 8007b66:	2300      	movs	r3, #0
 8007b68:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007b6a:	89fb      	ldrh	r3, [r7, #14]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d002      	beq.n	8007b76 <dec_lock+0x3a>
 8007b70:	89fb      	ldrh	r3, [r7, #14]
 8007b72:	3b01      	subs	r3, #1
 8007b74:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007b76:	4a0e      	ldr	r2, [pc, #56]	; (8007bb0 <dec_lock+0x74>)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	011b      	lsls	r3, r3, #4
 8007b7c:	4413      	add	r3, r2
 8007b7e:	330c      	adds	r3, #12
 8007b80:	89fa      	ldrh	r2, [r7, #14]
 8007b82:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007b84:	89fb      	ldrh	r3, [r7, #14]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d105      	bne.n	8007b96 <dec_lock+0x5a>
 8007b8a:	4a09      	ldr	r2, [pc, #36]	; (8007bb0 <dec_lock+0x74>)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	011b      	lsls	r3, r3, #4
 8007b90:	4413      	add	r3, r2
 8007b92:	2200      	movs	r2, #0
 8007b94:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	737b      	strb	r3, [r7, #13]
 8007b9a:	e001      	b.n	8007ba0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007ba0:	7b7b      	ldrb	r3, [r7, #13]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3714      	adds	r7, #20
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	20000664 	.word	0x20000664

08007bb4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	60fb      	str	r3, [r7, #12]
 8007bc0:	e010      	b.n	8007be4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007bc2:	4a0d      	ldr	r2, [pc, #52]	; (8007bf8 <clear_lock+0x44>)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	011b      	lsls	r3, r3, #4
 8007bc8:	4413      	add	r3, r2
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d105      	bne.n	8007bde <clear_lock+0x2a>
 8007bd2:	4a09      	ldr	r2, [pc, #36]	; (8007bf8 <clear_lock+0x44>)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	011b      	lsls	r3, r3, #4
 8007bd8:	4413      	add	r3, r2
 8007bda:	2200      	movs	r2, #0
 8007bdc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	3301      	adds	r3, #1
 8007be2:	60fb      	str	r3, [r7, #12]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d9eb      	bls.n	8007bc2 <clear_lock+0xe>
	}
}
 8007bea:	bf00      	nop
 8007bec:	bf00      	nop
 8007bee:	3714      	adds	r7, #20
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr
 8007bf8:	20000664 	.word	0x20000664

08007bfc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b086      	sub	sp, #24
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007c04:	2300      	movs	r3, #0
 8007c06:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	78db      	ldrb	r3, [r3, #3]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d034      	beq.n	8007c7a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c14:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	7858      	ldrb	r0, [r3, #1]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007c20:	2301      	movs	r3, #1
 8007c22:	697a      	ldr	r2, [r7, #20]
 8007c24:	f7ff fd0e 	bl	8007644 <disk_write>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d002      	beq.n	8007c34 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	73fb      	strb	r3, [r7, #15]
 8007c32:	e022      	b.n	8007c7a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3e:	697a      	ldr	r2, [r7, #20]
 8007c40:	1ad2      	subs	r2, r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	69db      	ldr	r3, [r3, #28]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d217      	bcs.n	8007c7a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	789b      	ldrb	r3, [r3, #2]
 8007c4e:	613b      	str	r3, [r7, #16]
 8007c50:	e010      	b.n	8007c74 <sync_window+0x78>
					wsect += fs->fsize;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	69db      	ldr	r3, [r3, #28]
 8007c56:	697a      	ldr	r2, [r7, #20]
 8007c58:	4413      	add	r3, r2
 8007c5a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	7858      	ldrb	r0, [r3, #1]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007c66:	2301      	movs	r3, #1
 8007c68:	697a      	ldr	r2, [r7, #20]
 8007c6a:	f7ff fceb 	bl	8007644 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	3b01      	subs	r3, #1
 8007c72:	613b      	str	r3, [r7, #16]
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d8eb      	bhi.n	8007c52 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3718      	adds	r7, #24
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c96:	683a      	ldr	r2, [r7, #0]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d01b      	beq.n	8007cd4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f7ff ffad 	bl	8007bfc <sync_window>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007ca6:	7bfb      	ldrb	r3, [r7, #15]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d113      	bne.n	8007cd4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	7858      	ldrb	r0, [r3, #1]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	683a      	ldr	r2, [r7, #0]
 8007cba:	f7ff fca3 	bl	8007604 <disk_read>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d004      	beq.n	8007cce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8007cc8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	683a      	ldr	r2, [r7, #0]
 8007cd2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
	...

08007ce0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f7ff ff87 	bl	8007bfc <sync_window>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007cf2:	7bfb      	ldrb	r3, [r7, #15]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d158      	bne.n	8007daa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	2b03      	cmp	r3, #3
 8007cfe:	d148      	bne.n	8007d92 <sync_fs+0xb2>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	791b      	ldrb	r3, [r3, #4]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d144      	bne.n	8007d92 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	3334      	adds	r3, #52	; 0x34
 8007d0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d10:	2100      	movs	r1, #0
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7ff fd77 	bl	8007806 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	3334      	adds	r3, #52	; 0x34
 8007d1c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007d20:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7ff fd06 	bl	8007736 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	3334      	adds	r3, #52	; 0x34
 8007d2e:	4921      	ldr	r1, [pc, #132]	; (8007db4 <sync_fs+0xd4>)
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7ff fd1b 	bl	800776c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	3334      	adds	r3, #52	; 0x34
 8007d3a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007d3e:	491e      	ldr	r1, [pc, #120]	; (8007db8 <sync_fs+0xd8>)
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7ff fd13 	bl	800776c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	3334      	adds	r3, #52	; 0x34
 8007d4a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	695b      	ldr	r3, [r3, #20]
 8007d52:	4619      	mov	r1, r3
 8007d54:	4610      	mov	r0, r2
 8007d56:	f7ff fd09 	bl	800776c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	3334      	adds	r3, #52	; 0x34
 8007d5e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	4619      	mov	r1, r3
 8007d68:	4610      	mov	r0, r2
 8007d6a:	f7ff fcff 	bl	800776c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a1b      	ldr	r3, [r3, #32]
 8007d72:	1c5a      	adds	r2, r3, #1
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	7858      	ldrb	r0, [r3, #1]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d86:	2301      	movs	r3, #1
 8007d88:	f7ff fc5c 	bl	8007644 <disk_write>
			fs->fsi_flag = 0;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	785b      	ldrb	r3, [r3, #1]
 8007d96:	2200      	movs	r2, #0
 8007d98:	2100      	movs	r1, #0
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7ff fc72 	bl	8007684 <disk_ioctl>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d001      	beq.n	8007daa <sync_fs+0xca>
 8007da6:	2301      	movs	r3, #1
 8007da8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	41615252 	.word	0x41615252
 8007db8:	61417272 	.word	0x61417272

08007dbc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	3b02      	subs	r3, #2
 8007dca:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	699b      	ldr	r3, [r3, #24]
 8007dd0:	3b02      	subs	r3, #2
 8007dd2:	683a      	ldr	r2, [r7, #0]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d301      	bcc.n	8007ddc <clust2sect+0x20>
 8007dd8:	2300      	movs	r3, #0
 8007dda:	e008      	b.n	8007dee <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	895b      	ldrh	r3, [r3, #10]
 8007de0:	461a      	mov	r2, r3
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	fb03 f202 	mul.w	r2, r3, r2
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dec:	4413      	add	r3, r2
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	370c      	adds	r7, #12
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b086      	sub	sp, #24
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
 8007e02:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d904      	bls.n	8007e1a <get_fat+0x20>
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	699b      	ldr	r3, [r3, #24]
 8007e14:	683a      	ldr	r2, [r7, #0]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d302      	bcc.n	8007e20 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	617b      	str	r3, [r7, #20]
 8007e1e:	e08f      	b.n	8007f40 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007e20:	f04f 33ff 	mov.w	r3, #4294967295
 8007e24:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	d062      	beq.n	8007ef4 <get_fat+0xfa>
 8007e2e:	2b03      	cmp	r3, #3
 8007e30:	dc7c      	bgt.n	8007f2c <get_fat+0x132>
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d002      	beq.n	8007e3c <get_fat+0x42>
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d042      	beq.n	8007ec0 <get_fat+0xc6>
 8007e3a:	e077      	b.n	8007f2c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	60fb      	str	r3, [r7, #12]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	085b      	lsrs	r3, r3, #1
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	4413      	add	r3, r2
 8007e48:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	0a5b      	lsrs	r3, r3, #9
 8007e52:	4413      	add	r3, r2
 8007e54:	4619      	mov	r1, r3
 8007e56:	6938      	ldr	r0, [r7, #16]
 8007e58:	f7ff ff14 	bl	8007c84 <move_window>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d167      	bne.n	8007f32 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	1c5a      	adds	r2, r3, #1
 8007e66:	60fa      	str	r2, [r7, #12]
 8007e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e6c:	693a      	ldr	r2, [r7, #16]
 8007e6e:	4413      	add	r3, r2
 8007e70:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e74:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	0a5b      	lsrs	r3, r3, #9
 8007e7e:	4413      	add	r3, r2
 8007e80:	4619      	mov	r1, r3
 8007e82:	6938      	ldr	r0, [r7, #16]
 8007e84:	f7ff fefe 	bl	8007c84 <move_window>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d153      	bne.n	8007f36 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e94:	693a      	ldr	r2, [r7, #16]
 8007e96:	4413      	add	r3, r2
 8007e98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e9c:	021b      	lsls	r3, r3, #8
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	f003 0301 	and.w	r3, r3, #1
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d002      	beq.n	8007eb6 <get_fat+0xbc>
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	091b      	lsrs	r3, r3, #4
 8007eb4:	e002      	b.n	8007ebc <get_fat+0xc2>
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ebc:	617b      	str	r3, [r7, #20]
			break;
 8007ebe:	e03f      	b.n	8007f40 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	0a1b      	lsrs	r3, r3, #8
 8007ec8:	4413      	add	r3, r2
 8007eca:	4619      	mov	r1, r3
 8007ecc:	6938      	ldr	r0, [r7, #16]
 8007ece:	f7ff fed9 	bl	8007c84 <move_window>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d130      	bne.n	8007f3a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	005b      	lsls	r3, r3, #1
 8007ee2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007ee6:	4413      	add	r3, r2
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7ff fbe9 	bl	80076c0 <ld_word>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	617b      	str	r3, [r7, #20]
			break;
 8007ef2:	e025      	b.n	8007f40 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	09db      	lsrs	r3, r3, #7
 8007efc:	4413      	add	r3, r2
 8007efe:	4619      	mov	r1, r3
 8007f00:	6938      	ldr	r0, [r7, #16]
 8007f02:	f7ff febf 	bl	8007c84 <move_window>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d118      	bne.n	8007f3e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007f1a:	4413      	add	r3, r2
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7ff fbe7 	bl	80076f0 <ld_dword>
 8007f22:	4603      	mov	r3, r0
 8007f24:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007f28:	617b      	str	r3, [r7, #20]
			break;
 8007f2a:	e009      	b.n	8007f40 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	617b      	str	r3, [r7, #20]
 8007f30:	e006      	b.n	8007f40 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007f32:	bf00      	nop
 8007f34:	e004      	b.n	8007f40 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007f36:	bf00      	nop
 8007f38:	e002      	b.n	8007f40 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007f3a:	bf00      	nop
 8007f3c:	e000      	b.n	8007f40 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007f3e:	bf00      	nop
		}
	}

	return val;
 8007f40:	697b      	ldr	r3, [r7, #20]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3718      	adds	r7, #24
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007f4a:	b590      	push	{r4, r7, lr}
 8007f4c:	b089      	sub	sp, #36	; 0x24
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	60f8      	str	r0, [r7, #12]
 8007f52:	60b9      	str	r1, [r7, #8]
 8007f54:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007f56:	2302      	movs	r3, #2
 8007f58:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	f240 80d2 	bls.w	8008106 <put_fat+0x1bc>
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	699b      	ldr	r3, [r3, #24]
 8007f66:	68ba      	ldr	r2, [r7, #8]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	f080 80cc 	bcs.w	8008106 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	2b03      	cmp	r3, #3
 8007f74:	f000 8096 	beq.w	80080a4 <put_fat+0x15a>
 8007f78:	2b03      	cmp	r3, #3
 8007f7a:	f300 80cd 	bgt.w	8008118 <put_fat+0x1ce>
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d002      	beq.n	8007f88 <put_fat+0x3e>
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d06e      	beq.n	8008064 <put_fat+0x11a>
 8007f86:	e0c7      	b.n	8008118 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	61bb      	str	r3, [r7, #24]
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	085b      	lsrs	r3, r3, #1
 8007f90:	69ba      	ldr	r2, [r7, #24]
 8007f92:	4413      	add	r3, r2
 8007f94:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	0a5b      	lsrs	r3, r3, #9
 8007f9e:	4413      	add	r3, r2
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f7ff fe6e 	bl	8007c84 <move_window>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007fac:	7ffb      	ldrb	r3, [r7, #31]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	f040 80ab 	bne.w	800810a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	1c59      	adds	r1, r3, #1
 8007fbe:	61b9      	str	r1, [r7, #24]
 8007fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fc4:	4413      	add	r3, r2
 8007fc6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	f003 0301 	and.w	r3, r3, #1
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00d      	beq.n	8007fee <put_fat+0xa4>
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	b25b      	sxtb	r3, r3
 8007fd8:	f003 030f 	and.w	r3, r3, #15
 8007fdc:	b25a      	sxtb	r2, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	011b      	lsls	r3, r3, #4
 8007fe4:	b25b      	sxtb	r3, r3
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	b25b      	sxtb	r3, r3
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	e001      	b.n	8007ff2 <put_fat+0xa8>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	697a      	ldr	r2, [r7, #20]
 8007ff4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	0a5b      	lsrs	r3, r3, #9
 8008004:	4413      	add	r3, r2
 8008006:	4619      	mov	r1, r3
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f7ff fe3b 	bl	8007c84 <move_window>
 800800e:	4603      	mov	r3, r0
 8008010:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008012:	7ffb      	ldrb	r3, [r7, #31]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d17a      	bne.n	800810e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008024:	4413      	add	r3, r2
 8008026:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	f003 0301 	and.w	r3, r3, #1
 800802e:	2b00      	cmp	r3, #0
 8008030:	d003      	beq.n	800803a <put_fat+0xf0>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	091b      	lsrs	r3, r3, #4
 8008036:	b2db      	uxtb	r3, r3
 8008038:	e00e      	b.n	8008058 <put_fat+0x10e>
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	b25b      	sxtb	r3, r3
 8008040:	f023 030f 	bic.w	r3, r3, #15
 8008044:	b25a      	sxtb	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	0a1b      	lsrs	r3, r3, #8
 800804a:	b25b      	sxtb	r3, r3
 800804c:	f003 030f 	and.w	r3, r3, #15
 8008050:	b25b      	sxtb	r3, r3
 8008052:	4313      	orrs	r3, r2
 8008054:	b25b      	sxtb	r3, r3
 8008056:	b2db      	uxtb	r3, r3
 8008058:	697a      	ldr	r2, [r7, #20]
 800805a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2201      	movs	r2, #1
 8008060:	70da      	strb	r2, [r3, #3]
			break;
 8008062:	e059      	b.n	8008118 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	0a1b      	lsrs	r3, r3, #8
 800806c:	4413      	add	r3, r2
 800806e:	4619      	mov	r1, r3
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f7ff fe07 	bl	8007c84 <move_window>
 8008076:	4603      	mov	r3, r0
 8008078:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800807a:	7ffb      	ldrb	r3, [r7, #31]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d148      	bne.n	8008112 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	005b      	lsls	r3, r3, #1
 800808a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800808e:	4413      	add	r3, r2
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	b292      	uxth	r2, r2
 8008094:	4611      	mov	r1, r2
 8008096:	4618      	mov	r0, r3
 8008098:	f7ff fb4d 	bl	8007736 <st_word>
			fs->wflag = 1;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2201      	movs	r2, #1
 80080a0:	70da      	strb	r2, [r3, #3]
			break;
 80080a2:	e039      	b.n	8008118 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	09db      	lsrs	r3, r3, #7
 80080ac:	4413      	add	r3, r2
 80080ae:	4619      	mov	r1, r3
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f7ff fde7 	bl	8007c84 <move_window>
 80080b6:	4603      	mov	r3, r0
 80080b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80080ba:	7ffb      	ldrb	r3, [r7, #31]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d12a      	bne.n	8008116 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80080d4:	4413      	add	r3, r2
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7ff fb0a 	bl	80076f0 <ld_dword>
 80080dc:	4603      	mov	r3, r0
 80080de:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80080e2:	4323      	orrs	r3, r4
 80080e4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80080f4:	4413      	add	r3, r2
 80080f6:	6879      	ldr	r1, [r7, #4]
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7ff fb37 	bl	800776c <st_dword>
			fs->wflag = 1;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2201      	movs	r2, #1
 8008102:	70da      	strb	r2, [r3, #3]
			break;
 8008104:	e008      	b.n	8008118 <put_fat+0x1ce>
		}
	}
 8008106:	bf00      	nop
 8008108:	e006      	b.n	8008118 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800810a:	bf00      	nop
 800810c:	e004      	b.n	8008118 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800810e:	bf00      	nop
 8008110:	e002      	b.n	8008118 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008112:	bf00      	nop
 8008114:	e000      	b.n	8008118 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008116:	bf00      	nop
	return res;
 8008118:	7ffb      	ldrb	r3, [r7, #31]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3724      	adds	r7, #36	; 0x24
 800811e:	46bd      	mov	sp, r7
 8008120:	bd90      	pop	{r4, r7, pc}

08008122 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b088      	sub	sp, #32
 8008126:	af00      	add	r7, sp, #0
 8008128:	60f8      	str	r0, [r7, #12]
 800812a:	60b9      	str	r1, [r7, #8]
 800812c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800812e:	2300      	movs	r3, #0
 8008130:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d904      	bls.n	8008148 <remove_chain+0x26>
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	68ba      	ldr	r2, [r7, #8]
 8008144:	429a      	cmp	r2, r3
 8008146:	d301      	bcc.n	800814c <remove_chain+0x2a>
 8008148:	2302      	movs	r3, #2
 800814a:	e04b      	b.n	80081e4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00c      	beq.n	800816c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008152:	f04f 32ff 	mov.w	r2, #4294967295
 8008156:	6879      	ldr	r1, [r7, #4]
 8008158:	69b8      	ldr	r0, [r7, #24]
 800815a:	f7ff fef6 	bl	8007f4a <put_fat>
 800815e:	4603      	mov	r3, r0
 8008160:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008162:	7ffb      	ldrb	r3, [r7, #31]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d001      	beq.n	800816c <remove_chain+0x4a>
 8008168:	7ffb      	ldrb	r3, [r7, #31]
 800816a:	e03b      	b.n	80081e4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800816c:	68b9      	ldr	r1, [r7, #8]
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f7ff fe43 	bl	8007dfa <get_fat>
 8008174:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d031      	beq.n	80081e0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	2b01      	cmp	r3, #1
 8008180:	d101      	bne.n	8008186 <remove_chain+0x64>
 8008182:	2302      	movs	r3, #2
 8008184:	e02e      	b.n	80081e4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800818c:	d101      	bne.n	8008192 <remove_chain+0x70>
 800818e:	2301      	movs	r3, #1
 8008190:	e028      	b.n	80081e4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008192:	2200      	movs	r2, #0
 8008194:	68b9      	ldr	r1, [r7, #8]
 8008196:	69b8      	ldr	r0, [r7, #24]
 8008198:	f7ff fed7 	bl	8007f4a <put_fat>
 800819c:	4603      	mov	r3, r0
 800819e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80081a0:	7ffb      	ldrb	r3, [r7, #31]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d001      	beq.n	80081aa <remove_chain+0x88>
 80081a6:	7ffb      	ldrb	r3, [r7, #31]
 80081a8:	e01c      	b.n	80081e4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	695a      	ldr	r2, [r3, #20]
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	699b      	ldr	r3, [r3, #24]
 80081b2:	3b02      	subs	r3, #2
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d20b      	bcs.n	80081d0 <remove_chain+0xae>
			fs->free_clst++;
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	695b      	ldr	r3, [r3, #20]
 80081bc:	1c5a      	adds	r2, r3, #1
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	791b      	ldrb	r3, [r3, #4]
 80081c6:	f043 0301 	orr.w	r3, r3, #1
 80081ca:	b2da      	uxtb	r2, r3
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	699b      	ldr	r3, [r3, #24]
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d3c6      	bcc.n	800816c <remove_chain+0x4a>
 80081de:	e000      	b.n	80081e2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80081e0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3720      	adds	r7, #32
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b088      	sub	sp, #32
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d10d      	bne.n	800821e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d004      	beq.n	8008218 <create_chain+0x2c>
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	699b      	ldr	r3, [r3, #24]
 8008212:	69ba      	ldr	r2, [r7, #24]
 8008214:	429a      	cmp	r2, r3
 8008216:	d31b      	bcc.n	8008250 <create_chain+0x64>
 8008218:	2301      	movs	r3, #1
 800821a:	61bb      	str	r3, [r7, #24]
 800821c:	e018      	b.n	8008250 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800821e:	6839      	ldr	r1, [r7, #0]
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f7ff fdea 	bl	8007dfa <get_fat>
 8008226:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2b01      	cmp	r3, #1
 800822c:	d801      	bhi.n	8008232 <create_chain+0x46>
 800822e:	2301      	movs	r3, #1
 8008230:	e070      	b.n	8008314 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008238:	d101      	bne.n	800823e <create_chain+0x52>
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	e06a      	b.n	8008314 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	699b      	ldr	r3, [r3, #24]
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	429a      	cmp	r2, r3
 8008246:	d201      	bcs.n	800824c <create_chain+0x60>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	e063      	b.n	8008314 <create_chain+0x128>
		scl = clst;
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	3301      	adds	r3, #1
 8008258:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	699b      	ldr	r3, [r3, #24]
 800825e:	69fa      	ldr	r2, [r7, #28]
 8008260:	429a      	cmp	r2, r3
 8008262:	d307      	bcc.n	8008274 <create_chain+0x88>
				ncl = 2;
 8008264:	2302      	movs	r3, #2
 8008266:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008268:	69fa      	ldr	r2, [r7, #28]
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	429a      	cmp	r2, r3
 800826e:	d901      	bls.n	8008274 <create_chain+0x88>
 8008270:	2300      	movs	r3, #0
 8008272:	e04f      	b.n	8008314 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008274:	69f9      	ldr	r1, [r7, #28]
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f7ff fdbf 	bl	8007dfa <get_fat>
 800827c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00e      	beq.n	80082a2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2b01      	cmp	r3, #1
 8008288:	d003      	beq.n	8008292 <create_chain+0xa6>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008290:	d101      	bne.n	8008296 <create_chain+0xaa>
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	e03e      	b.n	8008314 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008296:	69fa      	ldr	r2, [r7, #28]
 8008298:	69bb      	ldr	r3, [r7, #24]
 800829a:	429a      	cmp	r2, r3
 800829c:	d1da      	bne.n	8008254 <create_chain+0x68>
 800829e:	2300      	movs	r3, #0
 80082a0:	e038      	b.n	8008314 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80082a2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80082a4:	f04f 32ff 	mov.w	r2, #4294967295
 80082a8:	69f9      	ldr	r1, [r7, #28]
 80082aa:	6938      	ldr	r0, [r7, #16]
 80082ac:	f7ff fe4d 	bl	8007f4a <put_fat>
 80082b0:	4603      	mov	r3, r0
 80082b2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80082b4:	7dfb      	ldrb	r3, [r7, #23]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d109      	bne.n	80082ce <create_chain+0xe2>
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d006      	beq.n	80082ce <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80082c0:	69fa      	ldr	r2, [r7, #28]
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	6938      	ldr	r0, [r7, #16]
 80082c6:	f7ff fe40 	bl	8007f4a <put_fat>
 80082ca:	4603      	mov	r3, r0
 80082cc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80082ce:	7dfb      	ldrb	r3, [r7, #23]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d116      	bne.n	8008302 <create_chain+0x116>
		fs->last_clst = ncl;
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	69fa      	ldr	r2, [r7, #28]
 80082d8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	695a      	ldr	r2, [r3, #20]
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	699b      	ldr	r3, [r3, #24]
 80082e2:	3b02      	subs	r3, #2
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d804      	bhi.n	80082f2 <create_chain+0x106>
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	695b      	ldr	r3, [r3, #20]
 80082ec:	1e5a      	subs	r2, r3, #1
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	791b      	ldrb	r3, [r3, #4]
 80082f6:	f043 0301 	orr.w	r3, r3, #1
 80082fa:	b2da      	uxtb	r2, r3
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	711a      	strb	r2, [r3, #4]
 8008300:	e007      	b.n	8008312 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008302:	7dfb      	ldrb	r3, [r7, #23]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d102      	bne.n	800830e <create_chain+0x122>
 8008308:	f04f 33ff 	mov.w	r3, #4294967295
 800830c:	e000      	b.n	8008310 <create_chain+0x124>
 800830e:	2301      	movs	r3, #1
 8008310:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008312:	69fb      	ldr	r3, [r7, #28]
}
 8008314:	4618      	mov	r0, r3
 8008316:	3720      	adds	r7, #32
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800831c:	b480      	push	{r7}
 800831e:	b087      	sub	sp, #28
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008330:	3304      	adds	r3, #4
 8008332:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	0a5b      	lsrs	r3, r3, #9
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	8952      	ldrh	r2, [r2, #10]
 800833c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008340:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	1d1a      	adds	r2, r3, #4
 8008346:	613a      	str	r2, [r7, #16]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <clmt_clust+0x3a>
 8008352:	2300      	movs	r3, #0
 8008354:	e010      	b.n	8008378 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008356:	697a      	ldr	r2, [r7, #20]
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	429a      	cmp	r2, r3
 800835c:	d307      	bcc.n	800836e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800835e:	697a      	ldr	r2, [r7, #20]
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	1ad3      	subs	r3, r2, r3
 8008364:	617b      	str	r3, [r7, #20]
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	3304      	adds	r3, #4
 800836a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800836c:	e7e9      	b.n	8008342 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800836e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	4413      	add	r3, r2
}
 8008378:	4618      	mov	r0, r3
 800837a:	371c      	adds	r7, #28
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b086      	sub	sp, #24
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800839a:	d204      	bcs.n	80083a6 <dir_sdi+0x22>
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	f003 031f 	and.w	r3, r3, #31
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d001      	beq.n	80083aa <dir_sdi+0x26>
		return FR_INT_ERR;
 80083a6:	2302      	movs	r3, #2
 80083a8:	e063      	b.n	8008472 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	683a      	ldr	r2, [r7, #0]
 80083ae:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d106      	bne.n	80083ca <dir_sdi+0x46>
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	2b02      	cmp	r3, #2
 80083c2:	d902      	bls.n	80083ca <dir_sdi+0x46>
		clst = fs->dirbase;
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10c      	bne.n	80083ea <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	095b      	lsrs	r3, r3, #5
 80083d4:	693a      	ldr	r2, [r7, #16]
 80083d6:	8912      	ldrh	r2, [r2, #8]
 80083d8:	4293      	cmp	r3, r2
 80083da:	d301      	bcc.n	80083e0 <dir_sdi+0x5c>
 80083dc:	2302      	movs	r3, #2
 80083de:	e048      	b.n	8008472 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	61da      	str	r2, [r3, #28]
 80083e8:	e029      	b.n	800843e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	895b      	ldrh	r3, [r3, #10]
 80083ee:	025b      	lsls	r3, r3, #9
 80083f0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80083f2:	e019      	b.n	8008428 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6979      	ldr	r1, [r7, #20]
 80083f8:	4618      	mov	r0, r3
 80083fa:	f7ff fcfe 	bl	8007dfa <get_fat>
 80083fe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008406:	d101      	bne.n	800840c <dir_sdi+0x88>
 8008408:	2301      	movs	r3, #1
 800840a:	e032      	b.n	8008472 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	2b01      	cmp	r3, #1
 8008410:	d904      	bls.n	800841c <dir_sdi+0x98>
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	429a      	cmp	r2, r3
 800841a:	d301      	bcc.n	8008420 <dir_sdi+0x9c>
 800841c:	2302      	movs	r3, #2
 800841e:	e028      	b.n	8008472 <dir_sdi+0xee>
			ofs -= csz;
 8008420:	683a      	ldr	r2, [r7, #0]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008428:	683a      	ldr	r2, [r7, #0]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	429a      	cmp	r2, r3
 800842e:	d2e1      	bcs.n	80083f4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008430:	6979      	ldr	r1, [r7, #20]
 8008432:	6938      	ldr	r0, [r7, #16]
 8008434:	f7ff fcc2 	bl	8007dbc <clust2sect>
 8008438:	4602      	mov	r2, r0
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	697a      	ldr	r2, [r7, #20]
 8008442:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	69db      	ldr	r3, [r3, #28]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d101      	bne.n	8008450 <dir_sdi+0xcc>
 800844c:	2302      	movs	r3, #2
 800844e:	e010      	b.n	8008472 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	69da      	ldr	r2, [r3, #28]
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	0a5b      	lsrs	r3, r3, #9
 8008458:	441a      	add	r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800846a:	441a      	add	r2, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3718      	adds	r7, #24
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b086      	sub	sp, #24
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
 8008482:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	695b      	ldr	r3, [r3, #20]
 800848e:	3320      	adds	r3, #32
 8008490:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	69db      	ldr	r3, [r3, #28]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d003      	beq.n	80084a2 <dir_next+0x28>
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084a0:	d301      	bcc.n	80084a6 <dir_next+0x2c>
 80084a2:	2304      	movs	r3, #4
 80084a4:	e0aa      	b.n	80085fc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	f040 8098 	bne.w	80085e2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	69db      	ldr	r3, [r3, #28]
 80084b6:	1c5a      	adds	r2, r3, #1
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	699b      	ldr	r3, [r3, #24]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d10b      	bne.n	80084dc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	095b      	lsrs	r3, r3, #5
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	8912      	ldrh	r2, [r2, #8]
 80084cc:	4293      	cmp	r3, r2
 80084ce:	f0c0 8088 	bcc.w	80085e2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	61da      	str	r2, [r3, #28]
 80084d8:	2304      	movs	r3, #4
 80084da:	e08f      	b.n	80085fc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	0a5b      	lsrs	r3, r3, #9
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	8952      	ldrh	r2, [r2, #10]
 80084e4:	3a01      	subs	r2, #1
 80084e6:	4013      	ands	r3, r2
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d17a      	bne.n	80085e2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	4619      	mov	r1, r3
 80084f4:	4610      	mov	r0, r2
 80084f6:	f7ff fc80 	bl	8007dfa <get_fat>
 80084fa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d801      	bhi.n	8008506 <dir_next+0x8c>
 8008502:	2302      	movs	r3, #2
 8008504:	e07a      	b.n	80085fc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800850c:	d101      	bne.n	8008512 <dir_next+0x98>
 800850e:	2301      	movs	r3, #1
 8008510:	e074      	b.n	80085fc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	699b      	ldr	r3, [r3, #24]
 8008516:	697a      	ldr	r2, [r7, #20]
 8008518:	429a      	cmp	r2, r3
 800851a:	d358      	bcc.n	80085ce <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d104      	bne.n	800852c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	61da      	str	r2, [r3, #28]
 8008528:	2304      	movs	r3, #4
 800852a:	e067      	b.n	80085fc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	4619      	mov	r1, r3
 8008534:	4610      	mov	r0, r2
 8008536:	f7ff fe59 	bl	80081ec <create_chain>
 800853a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d101      	bne.n	8008546 <dir_next+0xcc>
 8008542:	2307      	movs	r3, #7
 8008544:	e05a      	b.n	80085fc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	2b01      	cmp	r3, #1
 800854a:	d101      	bne.n	8008550 <dir_next+0xd6>
 800854c:	2302      	movs	r3, #2
 800854e:	e055      	b.n	80085fc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008556:	d101      	bne.n	800855c <dir_next+0xe2>
 8008558:	2301      	movs	r3, #1
 800855a:	e04f      	b.n	80085fc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	f7ff fb4d 	bl	8007bfc <sync_window>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d001      	beq.n	800856c <dir_next+0xf2>
 8008568:	2301      	movs	r3, #1
 800856a:	e047      	b.n	80085fc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	3334      	adds	r3, #52	; 0x34
 8008570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008574:	2100      	movs	r1, #0
 8008576:	4618      	mov	r0, r3
 8008578:	f7ff f945 	bl	8007806 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800857c:	2300      	movs	r3, #0
 800857e:	613b      	str	r3, [r7, #16]
 8008580:	6979      	ldr	r1, [r7, #20]
 8008582:	68f8      	ldr	r0, [r7, #12]
 8008584:	f7ff fc1a 	bl	8007dbc <clust2sect>
 8008588:	4602      	mov	r2, r0
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	631a      	str	r2, [r3, #48]	; 0x30
 800858e:	e012      	b.n	80085b6 <dir_next+0x13c>
						fs->wflag = 1;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2201      	movs	r2, #1
 8008594:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f7ff fb30 	bl	8007bfc <sync_window>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d001      	beq.n	80085a6 <dir_next+0x12c>
 80085a2:	2301      	movs	r3, #1
 80085a4:	e02a      	b.n	80085fc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	3301      	adds	r3, #1
 80085aa:	613b      	str	r3, [r7, #16]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b0:	1c5a      	adds	r2, r3, #1
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	631a      	str	r2, [r3, #48]	; 0x30
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	895b      	ldrh	r3, [r3, #10]
 80085ba:	461a      	mov	r2, r3
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	4293      	cmp	r3, r2
 80085c0:	d3e6      	bcc.n	8008590 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	1ad2      	subs	r2, r2, r3
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	697a      	ldr	r2, [r7, #20]
 80085d2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80085d4:	6979      	ldr	r1, [r7, #20]
 80085d6:	68f8      	ldr	r0, [r7, #12]
 80085d8:	f7ff fbf0 	bl	8007dbc <clust2sect>
 80085dc:	4602      	mov	r2, r0
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	68ba      	ldr	r2, [r7, #8]
 80085e6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085f4:	441a      	add	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3718      	adds	r7, #24
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b086      	sub	sp, #24
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008614:	2100      	movs	r1, #0
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f7ff feb4 	bl	8008384 <dir_sdi>
 800861c:	4603      	mov	r3, r0
 800861e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008620:	7dfb      	ldrb	r3, [r7, #23]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d12b      	bne.n	800867e <dir_alloc+0x7a>
		n = 0;
 8008626:	2300      	movs	r3, #0
 8008628:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	69db      	ldr	r3, [r3, #28]
 800862e:	4619      	mov	r1, r3
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f7ff fb27 	bl	8007c84 <move_window>
 8008636:	4603      	mov	r3, r0
 8008638:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800863a:	7dfb      	ldrb	r3, [r7, #23]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d11d      	bne.n	800867c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6a1b      	ldr	r3, [r3, #32]
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	2be5      	cmp	r3, #229	; 0xe5
 8008648:	d004      	beq.n	8008654 <dir_alloc+0x50>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6a1b      	ldr	r3, [r3, #32]
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d107      	bne.n	8008664 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	3301      	adds	r3, #1
 8008658:	613b      	str	r3, [r7, #16]
 800865a:	693a      	ldr	r2, [r7, #16]
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	429a      	cmp	r2, r3
 8008660:	d102      	bne.n	8008668 <dir_alloc+0x64>
 8008662:	e00c      	b.n	800867e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008664:	2300      	movs	r3, #0
 8008666:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008668:	2101      	movs	r1, #1
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f7ff ff05 	bl	800847a <dir_next>
 8008670:	4603      	mov	r3, r0
 8008672:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008674:	7dfb      	ldrb	r3, [r7, #23]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d0d7      	beq.n	800862a <dir_alloc+0x26>
 800867a:	e000      	b.n	800867e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800867c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800867e:	7dfb      	ldrb	r3, [r7, #23]
 8008680:	2b04      	cmp	r3, #4
 8008682:	d101      	bne.n	8008688 <dir_alloc+0x84>
 8008684:	2307      	movs	r3, #7
 8008686:	75fb      	strb	r3, [r7, #23]
	return res;
 8008688:	7dfb      	ldrb	r3, [r7, #23]
}
 800868a:	4618      	mov	r0, r3
 800868c:	3718      	adds	r7, #24
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b084      	sub	sp, #16
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
 800869a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	331a      	adds	r3, #26
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7ff f80d 	bl	80076c0 <ld_word>
 80086a6:	4603      	mov	r3, r0
 80086a8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	2b03      	cmp	r3, #3
 80086b0:	d109      	bne.n	80086c6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	3314      	adds	r3, #20
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7ff f802 	bl	80076c0 <ld_word>
 80086bc:	4603      	mov	r3, r0
 80086be:	041b      	lsls	r3, r3, #16
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80086c6:	68fb      	ldr	r3, [r7, #12]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	331a      	adds	r3, #26
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	b292      	uxth	r2, r2
 80086e4:	4611      	mov	r1, r2
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7ff f825 	bl	8007736 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	2b03      	cmp	r3, #3
 80086f2:	d109      	bne.n	8008708 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	f103 0214 	add.w	r2, r3, #20
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	0c1b      	lsrs	r3, r3, #16
 80086fe:	b29b      	uxth	r3, r3
 8008700:	4619      	mov	r1, r3
 8008702:	4610      	mov	r0, r2
 8008704:	f7ff f817 	bl	8007736 <st_word>
	}
}
 8008708:	bf00      	nop
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b086      	sub	sp, #24
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800871e:	2100      	movs	r1, #0
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f7ff fe2f 	bl	8008384 <dir_sdi>
 8008726:	4603      	mov	r3, r0
 8008728:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800872a:	7dfb      	ldrb	r3, [r7, #23]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d001      	beq.n	8008734 <dir_find+0x24>
 8008730:	7dfb      	ldrb	r3, [r7, #23]
 8008732:	e03e      	b.n	80087b2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	69db      	ldr	r3, [r3, #28]
 8008738:	4619      	mov	r1, r3
 800873a:	6938      	ldr	r0, [r7, #16]
 800873c:	f7ff faa2 	bl	8007c84 <move_window>
 8008740:	4603      	mov	r3, r0
 8008742:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008744:	7dfb      	ldrb	r3, [r7, #23]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d12f      	bne.n	80087aa <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6a1b      	ldr	r3, [r3, #32]
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008752:	7bfb      	ldrb	r3, [r7, #15]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d102      	bne.n	800875e <dir_find+0x4e>
 8008758:	2304      	movs	r3, #4
 800875a:	75fb      	strb	r3, [r7, #23]
 800875c:	e028      	b.n	80087b0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a1b      	ldr	r3, [r3, #32]
 8008762:	330b      	adds	r3, #11
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800876a:	b2da      	uxtb	r2, r3
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a1b      	ldr	r3, [r3, #32]
 8008774:	330b      	adds	r3, #11
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	f003 0308 	and.w	r3, r3, #8
 800877c:	2b00      	cmp	r3, #0
 800877e:	d10a      	bne.n	8008796 <dir_find+0x86>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6a18      	ldr	r0, [r3, #32]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	3324      	adds	r3, #36	; 0x24
 8008788:	220b      	movs	r2, #11
 800878a:	4619      	mov	r1, r3
 800878c:	f7ff f856 	bl	800783c <mem_cmp>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00b      	beq.n	80087ae <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008796:	2100      	movs	r1, #0
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f7ff fe6e 	bl	800847a <dir_next>
 800879e:	4603      	mov	r3, r0
 80087a0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80087a2:	7dfb      	ldrb	r3, [r7, #23]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d0c5      	beq.n	8008734 <dir_find+0x24>
 80087a8:	e002      	b.n	80087b0 <dir_find+0xa0>
		if (res != FR_OK) break;
 80087aa:	bf00      	nop
 80087ac:	e000      	b.n	80087b0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80087ae:	bf00      	nop

	return res;
 80087b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3718      	adds	r7, #24
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b084      	sub	sp, #16
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80087c8:	2101      	movs	r1, #1
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f7ff ff1a 	bl	8008604 <dir_alloc>
 80087d0:	4603      	mov	r3, r0
 80087d2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80087d4:	7bfb      	ldrb	r3, [r7, #15]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d11c      	bne.n	8008814 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	69db      	ldr	r3, [r3, #28]
 80087de:	4619      	mov	r1, r3
 80087e0:	68b8      	ldr	r0, [r7, #8]
 80087e2:	f7ff fa4f 	bl	8007c84 <move_window>
 80087e6:	4603      	mov	r3, r0
 80087e8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80087ea:	7bfb      	ldrb	r3, [r7, #15]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d111      	bne.n	8008814 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6a1b      	ldr	r3, [r3, #32]
 80087f4:	2220      	movs	r2, #32
 80087f6:	2100      	movs	r1, #0
 80087f8:	4618      	mov	r0, r3
 80087fa:	f7ff f804 	bl	8007806 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6a18      	ldr	r0, [r3, #32]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	3324      	adds	r3, #36	; 0x24
 8008806:	220b      	movs	r2, #11
 8008808:	4619      	mov	r1, r3
 800880a:	f7fe ffdb 	bl	80077c4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	2201      	movs	r2, #1
 8008812:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008814:	7bfb      	ldrb	r3, [r7, #15]
}
 8008816:	4618      	mov	r0, r3
 8008818:	3710      	adds	r7, #16
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
	...

08008820 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b088      	sub	sp, #32
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	60fb      	str	r3, [r7, #12]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	3324      	adds	r3, #36	; 0x24
 8008834:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008836:	220b      	movs	r2, #11
 8008838:	2120      	movs	r1, #32
 800883a:	68b8      	ldr	r0, [r7, #8]
 800883c:	f7fe ffe3 	bl	8007806 <mem_set>
	si = i = 0; ni = 8;
 8008840:	2300      	movs	r3, #0
 8008842:	613b      	str	r3, [r7, #16]
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	61fb      	str	r3, [r7, #28]
 8008848:	2308      	movs	r3, #8
 800884a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	1c5a      	adds	r2, r3, #1
 8008850:	61fa      	str	r2, [r7, #28]
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	4413      	add	r3, r2
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800885a:	7efb      	ldrb	r3, [r7, #27]
 800885c:	2b20      	cmp	r3, #32
 800885e:	d94e      	bls.n	80088fe <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008860:	7efb      	ldrb	r3, [r7, #27]
 8008862:	2b2f      	cmp	r3, #47	; 0x2f
 8008864:	d006      	beq.n	8008874 <create_name+0x54>
 8008866:	7efb      	ldrb	r3, [r7, #27]
 8008868:	2b5c      	cmp	r3, #92	; 0x5c
 800886a:	d110      	bne.n	800888e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800886c:	e002      	b.n	8008874 <create_name+0x54>
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	3301      	adds	r3, #1
 8008872:	61fb      	str	r3, [r7, #28]
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	4413      	add	r3, r2
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	2b2f      	cmp	r3, #47	; 0x2f
 800887e:	d0f6      	beq.n	800886e <create_name+0x4e>
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	4413      	add	r3, r2
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	2b5c      	cmp	r3, #92	; 0x5c
 800888a:	d0f0      	beq.n	800886e <create_name+0x4e>
			break;
 800888c:	e038      	b.n	8008900 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800888e:	7efb      	ldrb	r3, [r7, #27]
 8008890:	2b2e      	cmp	r3, #46	; 0x2e
 8008892:	d003      	beq.n	800889c <create_name+0x7c>
 8008894:	693a      	ldr	r2, [r7, #16]
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	429a      	cmp	r2, r3
 800889a:	d30c      	bcc.n	80088b6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	2b0b      	cmp	r3, #11
 80088a0:	d002      	beq.n	80088a8 <create_name+0x88>
 80088a2:	7efb      	ldrb	r3, [r7, #27]
 80088a4:	2b2e      	cmp	r3, #46	; 0x2e
 80088a6:	d001      	beq.n	80088ac <create_name+0x8c>
 80088a8:	2306      	movs	r3, #6
 80088aa:	e044      	b.n	8008936 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80088ac:	2308      	movs	r3, #8
 80088ae:	613b      	str	r3, [r7, #16]
 80088b0:	230b      	movs	r3, #11
 80088b2:	617b      	str	r3, [r7, #20]
			continue;
 80088b4:	e022      	b.n	80088fc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80088b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	da04      	bge.n	80088c8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80088be:	7efb      	ldrb	r3, [r7, #27]
 80088c0:	3b80      	subs	r3, #128	; 0x80
 80088c2:	4a1f      	ldr	r2, [pc, #124]	; (8008940 <create_name+0x120>)
 80088c4:	5cd3      	ldrb	r3, [r2, r3]
 80088c6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80088c8:	7efb      	ldrb	r3, [r7, #27]
 80088ca:	4619      	mov	r1, r3
 80088cc:	481d      	ldr	r0, [pc, #116]	; (8008944 <create_name+0x124>)
 80088ce:	f7fe ffdc 	bl	800788a <chk_chr>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d001      	beq.n	80088dc <create_name+0xbc>
 80088d8:	2306      	movs	r3, #6
 80088da:	e02c      	b.n	8008936 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80088dc:	7efb      	ldrb	r3, [r7, #27]
 80088de:	2b60      	cmp	r3, #96	; 0x60
 80088e0:	d905      	bls.n	80088ee <create_name+0xce>
 80088e2:	7efb      	ldrb	r3, [r7, #27]
 80088e4:	2b7a      	cmp	r3, #122	; 0x7a
 80088e6:	d802      	bhi.n	80088ee <create_name+0xce>
 80088e8:	7efb      	ldrb	r3, [r7, #27]
 80088ea:	3b20      	subs	r3, #32
 80088ec:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	1c5a      	adds	r2, r3, #1
 80088f2:	613a      	str	r2, [r7, #16]
 80088f4:	68ba      	ldr	r2, [r7, #8]
 80088f6:	4413      	add	r3, r2
 80088f8:	7efa      	ldrb	r2, [r7, #27]
 80088fa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80088fc:	e7a6      	b.n	800884c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80088fe:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008900:	68fa      	ldr	r2, [r7, #12]
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	441a      	add	r2, r3
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d101      	bne.n	8008914 <create_name+0xf4>
 8008910:	2306      	movs	r3, #6
 8008912:	e010      	b.n	8008936 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	2be5      	cmp	r3, #229	; 0xe5
 800891a:	d102      	bne.n	8008922 <create_name+0x102>
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	2205      	movs	r2, #5
 8008920:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008922:	7efb      	ldrb	r3, [r7, #27]
 8008924:	2b20      	cmp	r3, #32
 8008926:	d801      	bhi.n	800892c <create_name+0x10c>
 8008928:	2204      	movs	r2, #4
 800892a:	e000      	b.n	800892e <create_name+0x10e>
 800892c:	2200      	movs	r2, #0
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	330b      	adds	r3, #11
 8008932:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008934:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008936:	4618      	mov	r0, r3
 8008938:	3720      	adds	r7, #32
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	08016a1c 	.word	0x08016a1c
 8008944:	08015350 	.word	0x08015350

08008948 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b086      	sub	sp, #24
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800895c:	e002      	b.n	8008964 <follow_path+0x1c>
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	3301      	adds	r3, #1
 8008962:	603b      	str	r3, [r7, #0]
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	2b2f      	cmp	r3, #47	; 0x2f
 800896a:	d0f8      	beq.n	800895e <follow_path+0x16>
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	2b5c      	cmp	r3, #92	; 0x5c
 8008972:	d0f4      	beq.n	800895e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	2200      	movs	r2, #0
 8008978:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	2b1f      	cmp	r3, #31
 8008980:	d80a      	bhi.n	8008998 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2280      	movs	r2, #128	; 0x80
 8008986:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800898a:	2100      	movs	r1, #0
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f7ff fcf9 	bl	8008384 <dir_sdi>
 8008992:	4603      	mov	r3, r0
 8008994:	75fb      	strb	r3, [r7, #23]
 8008996:	e043      	b.n	8008a20 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008998:	463b      	mov	r3, r7
 800899a:	4619      	mov	r1, r3
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f7ff ff3f 	bl	8008820 <create_name>
 80089a2:	4603      	mov	r3, r0
 80089a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80089a6:	7dfb      	ldrb	r3, [r7, #23]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d134      	bne.n	8008a16 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f7ff feaf 	bl	8008710 <dir_find>
 80089b2:	4603      	mov	r3, r0
 80089b4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80089bc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80089be:	7dfb      	ldrb	r3, [r7, #23]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d00a      	beq.n	80089da <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80089c4:	7dfb      	ldrb	r3, [r7, #23]
 80089c6:	2b04      	cmp	r3, #4
 80089c8:	d127      	bne.n	8008a1a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80089ca:	7afb      	ldrb	r3, [r7, #11]
 80089cc:	f003 0304 	and.w	r3, r3, #4
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d122      	bne.n	8008a1a <follow_path+0xd2>
 80089d4:	2305      	movs	r3, #5
 80089d6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80089d8:	e01f      	b.n	8008a1a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80089da:	7afb      	ldrb	r3, [r7, #11]
 80089dc:	f003 0304 	and.w	r3, r3, #4
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d11c      	bne.n	8008a1e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	799b      	ldrb	r3, [r3, #6]
 80089e8:	f003 0310 	and.w	r3, r3, #16
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d102      	bne.n	80089f6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80089f0:	2305      	movs	r3, #5
 80089f2:	75fb      	strb	r3, [r7, #23]
 80089f4:	e014      	b.n	8008a20 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	695b      	ldr	r3, [r3, #20]
 8008a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a04:	4413      	add	r3, r2
 8008a06:	4619      	mov	r1, r3
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f7ff fe42 	bl	8008692 <ld_clust>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008a14:	e7c0      	b.n	8008998 <follow_path+0x50>
			if (res != FR_OK) break;
 8008a16:	bf00      	nop
 8008a18:	e002      	b.n	8008a20 <follow_path+0xd8>
				break;
 8008a1a:	bf00      	nop
 8008a1c:	e000      	b.n	8008a20 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008a1e:	bf00      	nop
			}
		}
	}

	return res;
 8008a20:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3718      	adds	r7, #24
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008a2a:	b480      	push	{r7}
 8008a2c:	b087      	sub	sp, #28
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008a32:	f04f 33ff 	mov.w	r3, #4294967295
 8008a36:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d031      	beq.n	8008aa4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	617b      	str	r3, [r7, #20]
 8008a46:	e002      	b.n	8008a4e <get_ldnumber+0x24>
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	617b      	str	r3, [r7, #20]
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	2b20      	cmp	r3, #32
 8008a54:	d903      	bls.n	8008a5e <get_ldnumber+0x34>
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	2b3a      	cmp	r3, #58	; 0x3a
 8008a5c:	d1f4      	bne.n	8008a48 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	2b3a      	cmp	r3, #58	; 0x3a
 8008a64:	d11c      	bne.n	8008aa0 <get_ldnumber+0x76>
			tp = *path;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	1c5a      	adds	r2, r3, #1
 8008a70:	60fa      	str	r2, [r7, #12]
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	3b30      	subs	r3, #48	; 0x30
 8008a76:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	2b09      	cmp	r3, #9
 8008a7c:	d80e      	bhi.n	8008a9c <get_ldnumber+0x72>
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d10a      	bne.n	8008a9c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d107      	bne.n	8008a9c <get_ldnumber+0x72>
					vol = (int)i;
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	3301      	adds	r3, #1
 8008a94:	617b      	str	r3, [r7, #20]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	e002      	b.n	8008aa6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008aa4:	693b      	ldr	r3, [r7, #16]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	371c      	adds	r7, #28
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr
	...

08008ab4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	70da      	strb	r2, [r3, #3]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8008aca:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008acc:	6839      	ldr	r1, [r7, #0]
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f7ff f8d8 	bl	8007c84 <move_window>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d001      	beq.n	8008ade <check_fs+0x2a>
 8008ada:	2304      	movs	r3, #4
 8008adc:	e038      	b.n	8008b50 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	3334      	adds	r3, #52	; 0x34
 8008ae2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7fe fdea 	bl	80076c0 <ld_word>
 8008aec:	4603      	mov	r3, r0
 8008aee:	461a      	mov	r2, r3
 8008af0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d001      	beq.n	8008afc <check_fs+0x48>
 8008af8:	2303      	movs	r3, #3
 8008afa:	e029      	b.n	8008b50 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008b02:	2be9      	cmp	r3, #233	; 0xe9
 8008b04:	d009      	beq.n	8008b1a <check_fs+0x66>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008b0c:	2beb      	cmp	r3, #235	; 0xeb
 8008b0e:	d11e      	bne.n	8008b4e <check_fs+0x9a>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008b16:	2b90      	cmp	r3, #144	; 0x90
 8008b18:	d119      	bne.n	8008b4e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	3334      	adds	r3, #52	; 0x34
 8008b1e:	3336      	adds	r3, #54	; 0x36
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7fe fde5 	bl	80076f0 <ld_dword>
 8008b26:	4603      	mov	r3, r0
 8008b28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008b2c:	4a0a      	ldr	r2, [pc, #40]	; (8008b58 <check_fs+0xa4>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d101      	bne.n	8008b36 <check_fs+0x82>
 8008b32:	2300      	movs	r3, #0
 8008b34:	e00c      	b.n	8008b50 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	3334      	adds	r3, #52	; 0x34
 8008b3a:	3352      	adds	r3, #82	; 0x52
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7fe fdd7 	bl	80076f0 <ld_dword>
 8008b42:	4603      	mov	r3, r0
 8008b44:	4a05      	ldr	r2, [pc, #20]	; (8008b5c <check_fs+0xa8>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d101      	bne.n	8008b4e <check_fs+0x9a>
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	e000      	b.n	8008b50 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008b4e:	2302      	movs	r3, #2
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3708      	adds	r7, #8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	00544146 	.word	0x00544146
 8008b5c:	33544146 	.word	0x33544146

08008b60 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b096      	sub	sp, #88	; 0x58
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	2200      	movs	r2, #0
 8008b72:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f7ff ff58 	bl	8008a2a <get_ldnumber>
 8008b7a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	da01      	bge.n	8008b86 <find_volume+0x26>
 8008b82:	230b      	movs	r3, #11
 8008b84:	e236      	b.n	8008ff4 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008b86:	4aac      	ldr	r2, [pc, #688]	; (8008e38 <find_volume+0x2d8>)
 8008b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b8e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d101      	bne.n	8008b9a <find_volume+0x3a>
 8008b96:	230c      	movs	r3, #12
 8008b98:	e22c      	b.n	8008ff4 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8008b9a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b9c:	f7fe fe90 	bl	80078c0 <lock_fs>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d101      	bne.n	8008baa <find_volume+0x4a>
 8008ba6:	230f      	movs	r3, #15
 8008ba8:	e224      	b.n	8008ff4 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008bb0:	79fb      	ldrb	r3, [r7, #7]
 8008bb2:	f023 0301 	bic.w	r3, r3, #1
 8008bb6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d01a      	beq.n	8008bf6 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8008bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc2:	785b      	ldrb	r3, [r3, #1]
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7fe fcdd 	bl	8007584 <disk_status>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008bd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008bd4:	f003 0301 	and.w	r3, r3, #1
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d10c      	bne.n	8008bf6 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008bdc:	79fb      	ldrb	r3, [r7, #7]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d007      	beq.n	8008bf2 <find_volume+0x92>
 8008be2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008be6:	f003 0304 	and.w	r3, r3, #4
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d001      	beq.n	8008bf2 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8008bee:	230a      	movs	r3, #10
 8008bf0:	e200      	b.n	8008ff4 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	e1fe      	b.n	8008ff4 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bfe:	b2da      	uxtb	r2, r3
 8008c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c02:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c06:	785b      	ldrb	r3, [r3, #1]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7fe fcd5 	bl	80075b8 <disk_initialize>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008c14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008c18:	f003 0301 	and.w	r3, r3, #1
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d001      	beq.n	8008c24 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008c20:	2303      	movs	r3, #3
 8008c22:	e1e7      	b.n	8008ff4 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008c24:	79fb      	ldrb	r3, [r7, #7]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d007      	beq.n	8008c3a <find_volume+0xda>
 8008c2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008c2e:	f003 0304 	and.w	r3, r3, #4
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d001      	beq.n	8008c3a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8008c36:	230a      	movs	r3, #10
 8008c38:	e1dc      	b.n	8008ff4 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008c3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008c40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008c42:	f7ff ff37 	bl	8008ab4 <check_fs>
 8008c46:	4603      	mov	r3, r0
 8008c48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008c4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d14b      	bne.n	8008cec <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008c54:	2300      	movs	r3, #0
 8008c56:	643b      	str	r3, [r7, #64]	; 0x40
 8008c58:	e01f      	b.n	8008c9a <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c5c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c62:	011b      	lsls	r3, r3, #4
 8008c64:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008c68:	4413      	add	r3, r2
 8008c6a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6e:	3304      	adds	r3, #4
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d006      	beq.n	8008c84 <find_volume+0x124>
 8008c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c78:	3308      	adds	r3, #8
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7fe fd38 	bl	80076f0 <ld_dword>
 8008c80:	4602      	mov	r2, r0
 8008c82:	e000      	b.n	8008c86 <find_volume+0x126>
 8008c84:	2200      	movs	r2, #0
 8008c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008c8e:	440b      	add	r3, r1
 8008c90:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c96:	3301      	adds	r3, #1
 8008c98:	643b      	str	r3, [r7, #64]	; 0x40
 8008c9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c9c:	2b03      	cmp	r3, #3
 8008c9e:	d9dc      	bls.n	8008c5a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d002      	beq.n	8008cb0 <find_volume+0x150>
 8008caa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cac:	3b01      	subs	r3, #1
 8008cae:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008cb8:	4413      	add	r3, r2
 8008cba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008cbe:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008cc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d005      	beq.n	8008cd2 <find_volume+0x172>
 8008cc6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008cc8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008cca:	f7ff fef3 	bl	8008ab4 <check_fs>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	e000      	b.n	8008cd4 <find_volume+0x174>
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008cd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d905      	bls.n	8008cec <find_volume+0x18c>
 8008ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	643b      	str	r3, [r7, #64]	; 0x40
 8008ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ce8:	2b03      	cmp	r3, #3
 8008cea:	d9e1      	bls.n	8008cb0 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008cec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008cf0:	2b04      	cmp	r3, #4
 8008cf2:	d101      	bne.n	8008cf8 <find_volume+0x198>
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e17d      	b.n	8008ff4 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008cf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d901      	bls.n	8008d04 <find_volume+0x1a4>
 8008d00:	230d      	movs	r3, #13
 8008d02:	e177      	b.n	8008ff4 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d06:	3334      	adds	r3, #52	; 0x34
 8008d08:	330b      	adds	r3, #11
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7fe fcd8 	bl	80076c0 <ld_word>
 8008d10:	4603      	mov	r3, r0
 8008d12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d16:	d001      	beq.n	8008d1c <find_volume+0x1bc>
 8008d18:	230d      	movs	r3, #13
 8008d1a:	e16b      	b.n	8008ff4 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1e:	3334      	adds	r3, #52	; 0x34
 8008d20:	3316      	adds	r3, #22
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7fe fccc 	bl	80076c0 <ld_word>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d106      	bne.n	8008d40 <find_volume+0x1e0>
 8008d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d34:	3334      	adds	r3, #52	; 0x34
 8008d36:	3324      	adds	r3, #36	; 0x24
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7fe fcd9 	bl	80076f0 <ld_dword>
 8008d3e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d44:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d48:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d52:	789b      	ldrb	r3, [r3, #2]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d005      	beq.n	8008d64 <find_volume+0x204>
 8008d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5a:	789b      	ldrb	r3, [r3, #2]
 8008d5c:	2b02      	cmp	r3, #2
 8008d5e:	d001      	beq.n	8008d64 <find_volume+0x204>
 8008d60:	230d      	movs	r3, #13
 8008d62:	e147      	b.n	8008ff4 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d66:	789b      	ldrb	r3, [r3, #2]
 8008d68:	461a      	mov	r2, r3
 8008d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d6c:	fb02 f303 	mul.w	r3, r2, r3
 8008d70:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d78:	b29a      	uxth	r2, r3
 8008d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d7c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d80:	895b      	ldrh	r3, [r3, #10]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d008      	beq.n	8008d98 <find_volume+0x238>
 8008d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d88:	895b      	ldrh	r3, [r3, #10]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8e:	895b      	ldrh	r3, [r3, #10]
 8008d90:	3b01      	subs	r3, #1
 8008d92:	4013      	ands	r3, r2
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d001      	beq.n	8008d9c <find_volume+0x23c>
 8008d98:	230d      	movs	r3, #13
 8008d9a:	e12b      	b.n	8008ff4 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9e:	3334      	adds	r3, #52	; 0x34
 8008da0:	3311      	adds	r3, #17
 8008da2:	4618      	mov	r0, r3
 8008da4:	f7fe fc8c 	bl	80076c0 <ld_word>
 8008da8:	4603      	mov	r3, r0
 8008daa:	461a      	mov	r2, r3
 8008dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db2:	891b      	ldrh	r3, [r3, #8]
 8008db4:	f003 030f 	and.w	r3, r3, #15
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d001      	beq.n	8008dc2 <find_volume+0x262>
 8008dbe:	230d      	movs	r3, #13
 8008dc0:	e118      	b.n	8008ff4 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc4:	3334      	adds	r3, #52	; 0x34
 8008dc6:	3313      	adds	r3, #19
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7fe fc79 	bl	80076c0 <ld_word>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d106      	bne.n	8008de6 <find_volume+0x286>
 8008dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dda:	3334      	adds	r3, #52	; 0x34
 8008ddc:	3320      	adds	r3, #32
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7fe fc86 	bl	80076f0 <ld_dword>
 8008de4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de8:	3334      	adds	r3, #52	; 0x34
 8008dea:	330e      	adds	r3, #14
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7fe fc67 	bl	80076c0 <ld_word>
 8008df2:	4603      	mov	r3, r0
 8008df4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008df6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d101      	bne.n	8008e00 <find_volume+0x2a0>
 8008dfc:	230d      	movs	r3, #13
 8008dfe:	e0f9      	b.n	8008ff4 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008e00:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e04:	4413      	add	r3, r2
 8008e06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e08:	8912      	ldrh	r2, [r2, #8]
 8008e0a:	0912      	lsrs	r2, r2, #4
 8008e0c:	b292      	uxth	r2, r2
 8008e0e:	4413      	add	r3, r2
 8008e10:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008e12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d201      	bcs.n	8008e1e <find_volume+0x2be>
 8008e1a:	230d      	movs	r3, #13
 8008e1c:	e0ea      	b.n	8008ff4 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008e1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e22:	1ad3      	subs	r3, r2, r3
 8008e24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e26:	8952      	ldrh	r2, [r2, #10]
 8008e28:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e2c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d103      	bne.n	8008e3c <find_volume+0x2dc>
 8008e34:	230d      	movs	r3, #13
 8008e36:	e0dd      	b.n	8008ff4 <find_volume+0x494>
 8008e38:	2000065c 	.word	0x2000065c
		fmt = FS_FAT32;
 8008e3c:	2303      	movs	r3, #3
 8008e3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e44:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d802      	bhi.n	8008e52 <find_volume+0x2f2>
 8008e4c:	2302      	movs	r3, #2
 8008e4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e54:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d802      	bhi.n	8008e62 <find_volume+0x302>
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e64:	1c9a      	adds	r2, r3, #2
 8008e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e68:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e6e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008e70:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008e72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e74:	441a      	add	r2, r3
 8008e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e78:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008e7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7e:	441a      	add	r2, r3
 8008e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e82:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8008e84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e88:	2b03      	cmp	r3, #3
 8008e8a:	d11e      	bne.n	8008eca <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8e:	3334      	adds	r3, #52	; 0x34
 8008e90:	332a      	adds	r3, #42	; 0x2a
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7fe fc14 	bl	80076c0 <ld_word>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d001      	beq.n	8008ea2 <find_volume+0x342>
 8008e9e:	230d      	movs	r3, #13
 8008ea0:	e0a8      	b.n	8008ff4 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea4:	891b      	ldrh	r3, [r3, #8]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d001      	beq.n	8008eae <find_volume+0x34e>
 8008eaa:	230d      	movs	r3, #13
 8008eac:	e0a2      	b.n	8008ff4 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb0:	3334      	adds	r3, #52	; 0x34
 8008eb2:	332c      	adds	r3, #44	; 0x2c
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7fe fc1b 	bl	80076f0 <ld_dword>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ebe:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec2:	699b      	ldr	r3, [r3, #24]
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	647b      	str	r3, [r7, #68]	; 0x44
 8008ec8:	e01f      	b.n	8008f0a <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ecc:	891b      	ldrh	r3, [r3, #8]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d101      	bne.n	8008ed6 <find_volume+0x376>
 8008ed2:	230d      	movs	r3, #13
 8008ed4:	e08e      	b.n	8008ff4 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008edc:	441a      	add	r2, r3
 8008ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008ee2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ee6:	2b02      	cmp	r3, #2
 8008ee8:	d103      	bne.n	8008ef2 <find_volume+0x392>
 8008eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eec:	699b      	ldr	r3, [r3, #24]
 8008eee:	005b      	lsls	r3, r3, #1
 8008ef0:	e00a      	b.n	8008f08 <find_volume+0x3a8>
 8008ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef4:	699a      	ldr	r2, [r3, #24]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	005b      	lsls	r3, r3, #1
 8008efa:	4413      	add	r3, r2
 8008efc:	085a      	lsrs	r2, r3, #1
 8008efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f00:	699b      	ldr	r3, [r3, #24]
 8008f02:	f003 0301 	and.w	r3, r3, #1
 8008f06:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008f08:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f0c:	69da      	ldr	r2, [r3, #28]
 8008f0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f10:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008f14:	0a5b      	lsrs	r3, r3, #9
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d201      	bcs.n	8008f1e <find_volume+0x3be>
 8008f1a:	230d      	movs	r3, #13
 8008f1c:	e06a      	b.n	8008ff4 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f20:	f04f 32ff 	mov.w	r2, #4294967295
 8008f24:	615a      	str	r2, [r3, #20]
 8008f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f28:	695a      	ldr	r2, [r3, #20]
 8008f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f30:	2280      	movs	r2, #128	; 0x80
 8008f32:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008f34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f38:	2b03      	cmp	r3, #3
 8008f3a:	d149      	bne.n	8008fd0 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f3e:	3334      	adds	r3, #52	; 0x34
 8008f40:	3330      	adds	r3, #48	; 0x30
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7fe fbbc 	bl	80076c0 <ld_word>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d140      	bne.n	8008fd0 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f50:	3301      	adds	r3, #1
 8008f52:	4619      	mov	r1, r3
 8008f54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008f56:	f7fe fe95 	bl	8007c84 <move_window>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d137      	bne.n	8008fd0 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8008f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f62:	2200      	movs	r2, #0
 8008f64:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f68:	3334      	adds	r3, #52	; 0x34
 8008f6a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7fe fba6 	bl	80076c0 <ld_word>
 8008f74:	4603      	mov	r3, r0
 8008f76:	461a      	mov	r2, r3
 8008f78:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d127      	bne.n	8008fd0 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f82:	3334      	adds	r3, #52	; 0x34
 8008f84:	4618      	mov	r0, r3
 8008f86:	f7fe fbb3 	bl	80076f0 <ld_dword>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	4a1b      	ldr	r2, [pc, #108]	; (8008ffc <find_volume+0x49c>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d11e      	bne.n	8008fd0 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f94:	3334      	adds	r3, #52	; 0x34
 8008f96:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7fe fba8 	bl	80076f0 <ld_dword>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	4a17      	ldr	r2, [pc, #92]	; (8009000 <find_volume+0x4a0>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d113      	bne.n	8008fd0 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008faa:	3334      	adds	r3, #52	; 0x34
 8008fac:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7fe fb9d 	bl	80076f0 <ld_dword>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fba:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fbe:	3334      	adds	r3, #52	; 0x34
 8008fc0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f7fe fb93 	bl	80076f0 <ld_dword>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fce:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008fd6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008fd8:	4b0a      	ldr	r3, [pc, #40]	; (8009004 <find_volume+0x4a4>)
 8008fda:	881b      	ldrh	r3, [r3, #0]
 8008fdc:	3301      	adds	r3, #1
 8008fde:	b29a      	uxth	r2, r3
 8008fe0:	4b08      	ldr	r3, [pc, #32]	; (8009004 <find_volume+0x4a4>)
 8008fe2:	801a      	strh	r2, [r3, #0]
 8008fe4:	4b07      	ldr	r3, [pc, #28]	; (8009004 <find_volume+0x4a4>)
 8008fe6:	881a      	ldrh	r2, [r3, #0]
 8008fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fea:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008fec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008fee:	f7fe fde1 	bl	8007bb4 <clear_lock>
#endif
	return FR_OK;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3758      	adds	r7, #88	; 0x58
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	41615252 	.word	0x41615252
 8009000:	61417272 	.word	0x61417272
 8009004:	20000660 	.word	0x20000660

08009008 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009012:	2309      	movs	r3, #9
 8009014:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d02e      	beq.n	800907a <validate+0x72>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d02a      	beq.n	800907a <validate+0x72>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d025      	beq.n	800907a <validate+0x72>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	889a      	ldrh	r2, [r3, #4]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	88db      	ldrh	r3, [r3, #6]
 8009038:	429a      	cmp	r2, r3
 800903a:	d11e      	bne.n	800907a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4618      	mov	r0, r3
 8009042:	f7fe fc3d 	bl	80078c0 <lock_fs>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d014      	beq.n	8009076 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	785b      	ldrb	r3, [r3, #1]
 8009052:	4618      	mov	r0, r3
 8009054:	f7fe fa96 	bl	8007584 <disk_status>
 8009058:	4603      	mov	r3, r0
 800905a:	f003 0301 	and.w	r3, r3, #1
 800905e:	2b00      	cmp	r3, #0
 8009060:	d102      	bne.n	8009068 <validate+0x60>
				res = FR_OK;
 8009062:	2300      	movs	r3, #0
 8009064:	73fb      	strb	r3, [r7, #15]
 8009066:	e008      	b.n	800907a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2100      	movs	r1, #0
 800906e:	4618      	mov	r0, r3
 8009070:	f7fe fc3c 	bl	80078ec <unlock_fs>
 8009074:	e001      	b.n	800907a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8009076:	230f      	movs	r3, #15
 8009078:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800907a:	7bfb      	ldrb	r3, [r7, #15]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d102      	bne.n	8009086 <validate+0x7e>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	e000      	b.n	8009088 <validate+0x80>
 8009086:	2300      	movs	r3, #0
 8009088:	683a      	ldr	r2, [r7, #0]
 800908a:	6013      	str	r3, [r2, #0]
	return res;
 800908c:	7bfb      	ldrb	r3, [r7, #15]
}
 800908e:	4618      	mov	r0, r3
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
	...

08009098 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b088      	sub	sp, #32
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	4613      	mov	r3, r2
 80090a4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80090aa:	f107 0310 	add.w	r3, r7, #16
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7ff fcbb 	bl	8008a2a <get_ldnumber>
 80090b4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	da01      	bge.n	80090c0 <f_mount+0x28>
 80090bc:	230b      	movs	r3, #11
 80090be:	e048      	b.n	8009152 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80090c0:	4a26      	ldr	r2, [pc, #152]	; (800915c <f_mount+0xc4>)
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090c8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d00f      	beq.n	80090f0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80090d0:	69b8      	ldr	r0, [r7, #24]
 80090d2:	f7fe fd6f 	bl	8007bb4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	4618      	mov	r0, r3
 80090dc:	f000 fcd8 	bl	8009a90 <ff_del_syncobj>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d101      	bne.n	80090ea <f_mount+0x52>
 80090e6:	2302      	movs	r3, #2
 80090e8:	e033      	b.n	8009152 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	2200      	movs	r2, #0
 80090ee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00f      	beq.n	8009116 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2200      	movs	r2, #0
 80090fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	b2da      	uxtb	r2, r3
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	330c      	adds	r3, #12
 8009104:	4619      	mov	r1, r3
 8009106:	4610      	mov	r0, r2
 8009108:	f000 fca7 	bl	8009a5a <ff_cre_syncobj>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d101      	bne.n	8009116 <f_mount+0x7e>
 8009112:	2302      	movs	r3, #2
 8009114:	e01d      	b.n	8009152 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009116:	68fa      	ldr	r2, [r7, #12]
 8009118:	4910      	ldr	r1, [pc, #64]	; (800915c <f_mount+0xc4>)
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d002      	beq.n	800912c <f_mount+0x94>
 8009126:	79fb      	ldrb	r3, [r7, #7]
 8009128:	2b01      	cmp	r3, #1
 800912a:	d001      	beq.n	8009130 <f_mount+0x98>
 800912c:	2300      	movs	r3, #0
 800912e:	e010      	b.n	8009152 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009130:	f107 010c 	add.w	r1, r7, #12
 8009134:	f107 0308 	add.w	r3, r7, #8
 8009138:	2200      	movs	r2, #0
 800913a:	4618      	mov	r0, r3
 800913c:	f7ff fd10 	bl	8008b60 <find_volume>
 8009140:	4603      	mov	r3, r0
 8009142:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	7dfa      	ldrb	r2, [r7, #23]
 8009148:	4611      	mov	r1, r2
 800914a:	4618      	mov	r0, r3
 800914c:	f7fe fbce 	bl	80078ec <unlock_fs>
 8009150:	7dfb      	ldrb	r3, [r7, #23]
}
 8009152:	4618      	mov	r0, r3
 8009154:	3720      	adds	r7, #32
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	2000065c 	.word	0x2000065c

08009160 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b098      	sub	sp, #96	; 0x60
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	4613      	mov	r3, r2
 800916c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d101      	bne.n	8009178 <f_open+0x18>
 8009174:	2309      	movs	r3, #9
 8009176:	e1b4      	b.n	80094e2 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009178:	79fb      	ldrb	r3, [r7, #7]
 800917a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800917e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009180:	79fa      	ldrb	r2, [r7, #7]
 8009182:	f107 0110 	add.w	r1, r7, #16
 8009186:	f107 0308 	add.w	r3, r7, #8
 800918a:	4618      	mov	r0, r3
 800918c:	f7ff fce8 	bl	8008b60 <find_volume>
 8009190:	4603      	mov	r3, r0
 8009192:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8009196:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800919a:	2b00      	cmp	r3, #0
 800919c:	f040 8191 	bne.w	80094c2 <f_open+0x362>
		dj.obj.fs = fs;
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80091a4:	68ba      	ldr	r2, [r7, #8]
 80091a6:	f107 0314 	add.w	r3, r7, #20
 80091aa:	4611      	mov	r1, r2
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7ff fbcb 	bl	8008948 <follow_path>
 80091b2:	4603      	mov	r3, r0
 80091b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80091b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d11a      	bne.n	80091f6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80091c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80091c4:	b25b      	sxtb	r3, r3
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	da03      	bge.n	80091d2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80091ca:	2306      	movs	r3, #6
 80091cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80091d0:	e011      	b.n	80091f6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80091d2:	79fb      	ldrb	r3, [r7, #7]
 80091d4:	f023 0301 	bic.w	r3, r3, #1
 80091d8:	2b00      	cmp	r3, #0
 80091da:	bf14      	ite	ne
 80091dc:	2301      	movne	r3, #1
 80091de:	2300      	moveq	r3, #0
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	461a      	mov	r2, r3
 80091e4:	f107 0314 	add.w	r3, r7, #20
 80091e8:	4611      	mov	r1, r2
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7fe fb9a 	bl	8007924 <chk_lock>
 80091f0:	4603      	mov	r3, r0
 80091f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80091f6:	79fb      	ldrb	r3, [r7, #7]
 80091f8:	f003 031c 	and.w	r3, r3, #28
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d07f      	beq.n	8009300 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009200:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009204:	2b00      	cmp	r3, #0
 8009206:	d017      	beq.n	8009238 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009208:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800920c:	2b04      	cmp	r3, #4
 800920e:	d10e      	bne.n	800922e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009210:	f7fe fbe4 	bl	80079dc <enq_lock>
 8009214:	4603      	mov	r3, r0
 8009216:	2b00      	cmp	r3, #0
 8009218:	d006      	beq.n	8009228 <f_open+0xc8>
 800921a:	f107 0314 	add.w	r3, r7, #20
 800921e:	4618      	mov	r0, r3
 8009220:	f7ff facb 	bl	80087ba <dir_register>
 8009224:	4603      	mov	r3, r0
 8009226:	e000      	b.n	800922a <f_open+0xca>
 8009228:	2312      	movs	r3, #18
 800922a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800922e:	79fb      	ldrb	r3, [r7, #7]
 8009230:	f043 0308 	orr.w	r3, r3, #8
 8009234:	71fb      	strb	r3, [r7, #7]
 8009236:	e010      	b.n	800925a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009238:	7ebb      	ldrb	r3, [r7, #26]
 800923a:	f003 0311 	and.w	r3, r3, #17
 800923e:	2b00      	cmp	r3, #0
 8009240:	d003      	beq.n	800924a <f_open+0xea>
					res = FR_DENIED;
 8009242:	2307      	movs	r3, #7
 8009244:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009248:	e007      	b.n	800925a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800924a:	79fb      	ldrb	r3, [r7, #7]
 800924c:	f003 0304 	and.w	r3, r3, #4
 8009250:	2b00      	cmp	r3, #0
 8009252:	d002      	beq.n	800925a <f_open+0xfa>
 8009254:	2308      	movs	r3, #8
 8009256:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800925a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800925e:	2b00      	cmp	r3, #0
 8009260:	d168      	bne.n	8009334 <f_open+0x1d4>
 8009262:	79fb      	ldrb	r3, [r7, #7]
 8009264:	f003 0308 	and.w	r3, r3, #8
 8009268:	2b00      	cmp	r3, #0
 800926a:	d063      	beq.n	8009334 <f_open+0x1d4>
				dw = GET_FATTIME();
 800926c:	f7fd fc4c 	bl	8006b08 <get_fattime>
 8009270:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009274:	330e      	adds	r3, #14
 8009276:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009278:	4618      	mov	r0, r3
 800927a:	f7fe fa77 	bl	800776c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800927e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009280:	3316      	adds	r3, #22
 8009282:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009284:	4618      	mov	r0, r3
 8009286:	f7fe fa71 	bl	800776c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800928a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800928c:	330b      	adds	r3, #11
 800928e:	2220      	movs	r2, #32
 8009290:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009296:	4611      	mov	r1, r2
 8009298:	4618      	mov	r0, r3
 800929a:	f7ff f9fa 	bl	8008692 <ld_clust>
 800929e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80092a4:	2200      	movs	r2, #0
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7ff fa12 	bl	80086d0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80092ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ae:	331c      	adds	r3, #28
 80092b0:	2100      	movs	r1, #0
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7fe fa5a 	bl	800776c <st_dword>
					fs->wflag = 1;
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	2201      	movs	r2, #1
 80092bc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80092be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d037      	beq.n	8009334 <f_open+0x1d4>
						dw = fs->winsect;
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092c8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80092ca:	f107 0314 	add.w	r3, r7, #20
 80092ce:	2200      	movs	r2, #0
 80092d0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7fe ff25 	bl	8008122 <remove_chain>
 80092d8:	4603      	mov	r3, r0
 80092da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80092de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d126      	bne.n	8009334 <f_open+0x1d4>
							res = move_window(fs, dw);
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7fe fcca 	bl	8007c84 <move_window>
 80092f0:	4603      	mov	r3, r0
 80092f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80092fa:	3a01      	subs	r2, #1
 80092fc:	611a      	str	r2, [r3, #16]
 80092fe:	e019      	b.n	8009334 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009300:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009304:	2b00      	cmp	r3, #0
 8009306:	d115      	bne.n	8009334 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009308:	7ebb      	ldrb	r3, [r7, #26]
 800930a:	f003 0310 	and.w	r3, r3, #16
 800930e:	2b00      	cmp	r3, #0
 8009310:	d003      	beq.n	800931a <f_open+0x1ba>
					res = FR_NO_FILE;
 8009312:	2304      	movs	r3, #4
 8009314:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009318:	e00c      	b.n	8009334 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800931a:	79fb      	ldrb	r3, [r7, #7]
 800931c:	f003 0302 	and.w	r3, r3, #2
 8009320:	2b00      	cmp	r3, #0
 8009322:	d007      	beq.n	8009334 <f_open+0x1d4>
 8009324:	7ebb      	ldrb	r3, [r7, #26]
 8009326:	f003 0301 	and.w	r3, r3, #1
 800932a:	2b00      	cmp	r3, #0
 800932c:	d002      	beq.n	8009334 <f_open+0x1d4>
						res = FR_DENIED;
 800932e:	2307      	movs	r3, #7
 8009330:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009334:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009338:	2b00      	cmp	r3, #0
 800933a:	d128      	bne.n	800938e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800933c:	79fb      	ldrb	r3, [r7, #7]
 800933e:	f003 0308 	and.w	r3, r3, #8
 8009342:	2b00      	cmp	r3, #0
 8009344:	d003      	beq.n	800934e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009346:	79fb      	ldrb	r3, [r7, #7]
 8009348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800934c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009356:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800935c:	79fb      	ldrb	r3, [r7, #7]
 800935e:	f023 0301 	bic.w	r3, r3, #1
 8009362:	2b00      	cmp	r3, #0
 8009364:	bf14      	ite	ne
 8009366:	2301      	movne	r3, #1
 8009368:	2300      	moveq	r3, #0
 800936a:	b2db      	uxtb	r3, r3
 800936c:	461a      	mov	r2, r3
 800936e:	f107 0314 	add.w	r3, r7, #20
 8009372:	4611      	mov	r1, r2
 8009374:	4618      	mov	r0, r3
 8009376:	f7fe fb53 	bl	8007a20 <inc_lock>
 800937a:	4602      	mov	r2, r0
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	691b      	ldr	r3, [r3, #16]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d102      	bne.n	800938e <f_open+0x22e>
 8009388:	2302      	movs	r3, #2
 800938a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800938e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009392:	2b00      	cmp	r3, #0
 8009394:	f040 8095 	bne.w	80094c2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800939c:	4611      	mov	r1, r2
 800939e:	4618      	mov	r0, r3
 80093a0:	f7ff f977 	bl	8008692 <ld_clust>
 80093a4:	4602      	mov	r2, r0
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80093aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ac:	331c      	adds	r3, #28
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7fe f99e 	bl	80076f0 <ld_dword>
 80093b4:	4602      	mov	r2, r0
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2200      	movs	r2, #0
 80093be:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80093c0:	693a      	ldr	r2, [r7, #16]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	88da      	ldrh	r2, [r3, #6]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	79fa      	ldrb	r2, [r7, #7]
 80093d2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2200      	movs	r2, #0
 80093d8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2200      	movs	r2, #0
 80093de:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2200      	movs	r2, #0
 80093e4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	3330      	adds	r3, #48	; 0x30
 80093ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093ee:	2100      	movs	r1, #0
 80093f0:	4618      	mov	r0, r3
 80093f2:	f7fe fa08 	bl	8007806 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80093f6:	79fb      	ldrb	r3, [r7, #7]
 80093f8:	f003 0320 	and.w	r3, r3, #32
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d060      	beq.n	80094c2 <f_open+0x362>
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d05c      	beq.n	80094c2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	68da      	ldr	r2, [r3, #12]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	895b      	ldrh	r3, [r3, #10]
 8009414:	025b      	lsls	r3, r3, #9
 8009416:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	689b      	ldr	r3, [r3, #8]
 800941c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	68db      	ldr	r3, [r3, #12]
 8009422:	657b      	str	r3, [r7, #84]	; 0x54
 8009424:	e016      	b.n	8009454 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800942a:	4618      	mov	r0, r3
 800942c:	f7fe fce5 	bl	8007dfa <get_fat>
 8009430:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009432:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009434:	2b01      	cmp	r3, #1
 8009436:	d802      	bhi.n	800943e <f_open+0x2de>
 8009438:	2302      	movs	r3, #2
 800943a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800943e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009444:	d102      	bne.n	800944c <f_open+0x2ec>
 8009446:	2301      	movs	r3, #1
 8009448:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800944c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800944e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009450:	1ad3      	subs	r3, r2, r3
 8009452:	657b      	str	r3, [r7, #84]	; 0x54
 8009454:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009458:	2b00      	cmp	r3, #0
 800945a:	d103      	bne.n	8009464 <f_open+0x304>
 800945c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800945e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009460:	429a      	cmp	r2, r3
 8009462:	d8e0      	bhi.n	8009426 <f_open+0x2c6>
				}
				fp->clust = clst;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009468:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800946a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800946e:	2b00      	cmp	r3, #0
 8009470:	d127      	bne.n	80094c2 <f_open+0x362>
 8009472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009478:	2b00      	cmp	r3, #0
 800947a:	d022      	beq.n	80094c2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009480:	4618      	mov	r0, r3
 8009482:	f7fe fc9b 	bl	8007dbc <clust2sect>
 8009486:	6478      	str	r0, [r7, #68]	; 0x44
 8009488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800948a:	2b00      	cmp	r3, #0
 800948c:	d103      	bne.n	8009496 <f_open+0x336>
						res = FR_INT_ERR;
 800948e:	2302      	movs	r3, #2
 8009490:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009494:	e015      	b.n	80094c2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009496:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009498:	0a5a      	lsrs	r2, r3, #9
 800949a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800949c:	441a      	add	r2, r3
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	7858      	ldrb	r0, [r3, #1]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6a1a      	ldr	r2, [r3, #32]
 80094b0:	2301      	movs	r3, #1
 80094b2:	f7fe f8a7 	bl	8007604 <disk_read>
 80094b6:	4603      	mov	r3, r0
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d002      	beq.n	80094c2 <f_open+0x362>
 80094bc:	2301      	movs	r3, #1
 80094be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80094c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d002      	beq.n	80094d0 <f_open+0x370>
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2200      	movs	r2, #0
 80094ce:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80094d6:	4611      	mov	r1, r2
 80094d8:	4618      	mov	r0, r3
 80094da:	f7fe fa07 	bl	80078ec <unlock_fs>
 80094de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3760      	adds	r7, #96	; 0x60
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80094ea:	b580      	push	{r7, lr}
 80094ec:	b08c      	sub	sp, #48	; 0x30
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	60f8      	str	r0, [r7, #12]
 80094f2:	60b9      	str	r1, [r7, #8]
 80094f4:	607a      	str	r2, [r7, #4]
 80094f6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	2200      	movs	r2, #0
 8009500:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f107 0210 	add.w	r2, r7, #16
 8009508:	4611      	mov	r1, r2
 800950a:	4618      	mov	r0, r3
 800950c:	f7ff fd7c 	bl	8009008 <validate>
 8009510:	4603      	mov	r3, r0
 8009512:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009516:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800951a:	2b00      	cmp	r3, #0
 800951c:	d107      	bne.n	800952e <f_write+0x44>
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	7d5b      	ldrb	r3, [r3, #21]
 8009522:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009526:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800952a:	2b00      	cmp	r3, #0
 800952c:	d009      	beq.n	8009542 <f_write+0x58>
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009534:	4611      	mov	r1, r2
 8009536:	4618      	mov	r0, r3
 8009538:	f7fe f9d8 	bl	80078ec <unlock_fs>
 800953c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009540:	e173      	b.n	800982a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	7d1b      	ldrb	r3, [r3, #20]
 8009546:	f003 0302 	and.w	r3, r3, #2
 800954a:	2b00      	cmp	r3, #0
 800954c:	d106      	bne.n	800955c <f_write+0x72>
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	2107      	movs	r1, #7
 8009552:	4618      	mov	r0, r3
 8009554:	f7fe f9ca 	bl	80078ec <unlock_fs>
 8009558:	2307      	movs	r3, #7
 800955a:	e166      	b.n	800982a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	699a      	ldr	r2, [r3, #24]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	441a      	add	r2, r3
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	699b      	ldr	r3, [r3, #24]
 8009568:	429a      	cmp	r2, r3
 800956a:	f080 814b 	bcs.w	8009804 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	699b      	ldr	r3, [r3, #24]
 8009572:	43db      	mvns	r3, r3
 8009574:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009576:	e145      	b.n	8009804 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	699b      	ldr	r3, [r3, #24]
 800957c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009580:	2b00      	cmp	r3, #0
 8009582:	f040 8101 	bne.w	8009788 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	699b      	ldr	r3, [r3, #24]
 800958a:	0a5b      	lsrs	r3, r3, #9
 800958c:	693a      	ldr	r2, [r7, #16]
 800958e:	8952      	ldrh	r2, [r2, #10]
 8009590:	3a01      	subs	r2, #1
 8009592:	4013      	ands	r3, r2
 8009594:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d14d      	bne.n	8009638 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	699b      	ldr	r3, [r3, #24]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d10c      	bne.n	80095be <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80095aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d11a      	bne.n	80095e6 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2100      	movs	r1, #0
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7fe fe19 	bl	80081ec <create_chain>
 80095ba:	62b8      	str	r0, [r7, #40]	; 0x28
 80095bc:	e013      	b.n	80095e6 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d007      	beq.n	80095d6 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	699b      	ldr	r3, [r3, #24]
 80095ca:	4619      	mov	r1, r3
 80095cc:	68f8      	ldr	r0, [r7, #12]
 80095ce:	f7fe fea5 	bl	800831c <clmt_clust>
 80095d2:	62b8      	str	r0, [r7, #40]	; 0x28
 80095d4:	e007      	b.n	80095e6 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80095d6:	68fa      	ldr	r2, [r7, #12]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	69db      	ldr	r3, [r3, #28]
 80095dc:	4619      	mov	r1, r3
 80095de:	4610      	mov	r0, r2
 80095e0:	f7fe fe04 	bl	80081ec <create_chain>
 80095e4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80095e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	f000 8110 	beq.w	800980e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80095ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d109      	bne.n	8009608 <f_write+0x11e>
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2202      	movs	r2, #2
 80095f8:	755a      	strb	r2, [r3, #21]
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	2102      	movs	r1, #2
 80095fe:	4618      	mov	r0, r3
 8009600:	f7fe f974 	bl	80078ec <unlock_fs>
 8009604:	2302      	movs	r3, #2
 8009606:	e110      	b.n	800982a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800960e:	d109      	bne.n	8009624 <f_write+0x13a>
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2201      	movs	r2, #1
 8009614:	755a      	strb	r2, [r3, #21]
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	2101      	movs	r1, #1
 800961a:	4618      	mov	r0, r3
 800961c:	f7fe f966 	bl	80078ec <unlock_fs>
 8009620:	2301      	movs	r3, #1
 8009622:	e102      	b.n	800982a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009628:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d102      	bne.n	8009638 <f_write+0x14e>
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009636:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	7d1b      	ldrb	r3, [r3, #20]
 800963c:	b25b      	sxtb	r3, r3
 800963e:	2b00      	cmp	r3, #0
 8009640:	da1d      	bge.n	800967e <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	7858      	ldrb	r0, [r3, #1]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6a1a      	ldr	r2, [r3, #32]
 8009650:	2301      	movs	r3, #1
 8009652:	f7fd fff7 	bl	8007644 <disk_write>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d009      	beq.n	8009670 <f_write+0x186>
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2201      	movs	r2, #1
 8009660:	755a      	strb	r2, [r3, #21]
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	2101      	movs	r1, #1
 8009666:	4618      	mov	r0, r3
 8009668:	f7fe f940 	bl	80078ec <unlock_fs>
 800966c:	2301      	movs	r3, #1
 800966e:	e0dc      	b.n	800982a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	7d1b      	ldrb	r3, [r3, #20]
 8009674:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009678:	b2da      	uxtb	r2, r3
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800967e:	693a      	ldr	r2, [r7, #16]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	69db      	ldr	r3, [r3, #28]
 8009684:	4619      	mov	r1, r3
 8009686:	4610      	mov	r0, r2
 8009688:	f7fe fb98 	bl	8007dbc <clust2sect>
 800968c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d109      	bne.n	80096a8 <f_write+0x1be>
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2202      	movs	r2, #2
 8009698:	755a      	strb	r2, [r3, #21]
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	2102      	movs	r1, #2
 800969e:	4618      	mov	r0, r3
 80096a0:	f7fe f924 	bl	80078ec <unlock_fs>
 80096a4:	2302      	movs	r3, #2
 80096a6:	e0c0      	b.n	800982a <f_write+0x340>
			sect += csect;
 80096a8:	697a      	ldr	r2, [r7, #20]
 80096aa:	69bb      	ldr	r3, [r7, #24]
 80096ac:	4413      	add	r3, r2
 80096ae:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	0a5b      	lsrs	r3, r3, #9
 80096b4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80096b6:	6a3b      	ldr	r3, [r7, #32]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d041      	beq.n	8009740 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80096bc:	69ba      	ldr	r2, [r7, #24]
 80096be:	6a3b      	ldr	r3, [r7, #32]
 80096c0:	4413      	add	r3, r2
 80096c2:	693a      	ldr	r2, [r7, #16]
 80096c4:	8952      	ldrh	r2, [r2, #10]
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d905      	bls.n	80096d6 <f_write+0x1ec>
					cc = fs->csize - csect;
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	895b      	ldrh	r3, [r3, #10]
 80096ce:	461a      	mov	r2, r3
 80096d0:	69bb      	ldr	r3, [r7, #24]
 80096d2:	1ad3      	subs	r3, r2, r3
 80096d4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	7858      	ldrb	r0, [r3, #1]
 80096da:	6a3b      	ldr	r3, [r7, #32]
 80096dc:	697a      	ldr	r2, [r7, #20]
 80096de:	69f9      	ldr	r1, [r7, #28]
 80096e0:	f7fd ffb0 	bl	8007644 <disk_write>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d009      	beq.n	80096fe <f_write+0x214>
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2201      	movs	r2, #1
 80096ee:	755a      	strb	r2, [r3, #21]
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	2101      	movs	r1, #1
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7fe f8f9 	bl	80078ec <unlock_fs>
 80096fa:	2301      	movs	r3, #1
 80096fc:	e095      	b.n	800982a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	6a1a      	ldr	r2, [r3, #32]
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	1ad3      	subs	r3, r2, r3
 8009706:	6a3a      	ldr	r2, [r7, #32]
 8009708:	429a      	cmp	r2, r3
 800970a:	d915      	bls.n	8009738 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6a1a      	ldr	r2, [r3, #32]
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	1ad3      	subs	r3, r2, r3
 800971a:	025b      	lsls	r3, r3, #9
 800971c:	69fa      	ldr	r2, [r7, #28]
 800971e:	4413      	add	r3, r2
 8009720:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009724:	4619      	mov	r1, r3
 8009726:	f7fe f84d 	bl	80077c4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	7d1b      	ldrb	r3, [r3, #20]
 800972e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009732:	b2da      	uxtb	r2, r3
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009738:	6a3b      	ldr	r3, [r7, #32]
 800973a:	025b      	lsls	r3, r3, #9
 800973c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800973e:	e044      	b.n	80097ca <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6a1b      	ldr	r3, [r3, #32]
 8009744:	697a      	ldr	r2, [r7, #20]
 8009746:	429a      	cmp	r2, r3
 8009748:	d01b      	beq.n	8009782 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	699a      	ldr	r2, [r3, #24]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009752:	429a      	cmp	r2, r3
 8009754:	d215      	bcs.n	8009782 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	7858      	ldrb	r0, [r3, #1]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009760:	2301      	movs	r3, #1
 8009762:	697a      	ldr	r2, [r7, #20]
 8009764:	f7fd ff4e 	bl	8007604 <disk_read>
 8009768:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800976a:	2b00      	cmp	r3, #0
 800976c:	d009      	beq.n	8009782 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2201      	movs	r2, #1
 8009772:	755a      	strb	r2, [r3, #21]
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	2101      	movs	r1, #1
 8009778:	4618      	mov	r0, r3
 800977a:	f7fe f8b7 	bl	80078ec <unlock_fs>
 800977e:	2301      	movs	r3, #1
 8009780:	e053      	b.n	800982a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	697a      	ldr	r2, [r7, #20]
 8009786:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	699b      	ldr	r3, [r3, #24]
 800978c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009790:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009794:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	429a      	cmp	r2, r3
 800979c:	d901      	bls.n	80097a2 <f_write+0x2b8>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	699b      	ldr	r3, [r3, #24]
 80097ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097b0:	4413      	add	r3, r2
 80097b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097b4:	69f9      	ldr	r1, [r7, #28]
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7fe f804 	bl	80077c4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	7d1b      	ldrb	r3, [r3, #20]
 80097c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80097c4:	b2da      	uxtb	r2, r3
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80097ca:	69fa      	ldr	r2, [r7, #28]
 80097cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ce:	4413      	add	r3, r2
 80097d0:	61fb      	str	r3, [r7, #28]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	699a      	ldr	r2, [r3, #24]
 80097d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d8:	441a      	add	r2, r3
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	619a      	str	r2, [r3, #24]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	68da      	ldr	r2, [r3, #12]
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	699b      	ldr	r3, [r3, #24]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	bf38      	it	cc
 80097ea:	461a      	movcc	r2, r3
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	60da      	str	r2, [r3, #12]
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f6:	441a      	add	r2, r3
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	601a      	str	r2, [r3, #0]
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009800:	1ad3      	subs	r3, r2, r3
 8009802:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2b00      	cmp	r3, #0
 8009808:	f47f aeb6 	bne.w	8009578 <f_write+0x8e>
 800980c:	e000      	b.n	8009810 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800980e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	7d1b      	ldrb	r3, [r3, #20]
 8009814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009818:	b2da      	uxtb	r2, r3
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	2100      	movs	r1, #0
 8009822:	4618      	mov	r0, r3
 8009824:	f7fe f862 	bl	80078ec <unlock_fs>
 8009828:	2300      	movs	r3, #0
}
 800982a:	4618      	mov	r0, r3
 800982c:	3730      	adds	r7, #48	; 0x30
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}

08009832 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009832:	b580      	push	{r7, lr}
 8009834:	b086      	sub	sp, #24
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f107 0208 	add.w	r2, r7, #8
 8009840:	4611      	mov	r1, r2
 8009842:	4618      	mov	r0, r3
 8009844:	f7ff fbe0 	bl	8009008 <validate>
 8009848:	4603      	mov	r3, r0
 800984a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800984c:	7dfb      	ldrb	r3, [r7, #23]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d16d      	bne.n	800992e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	7d1b      	ldrb	r3, [r3, #20]
 8009856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800985a:	2b00      	cmp	r3, #0
 800985c:	d067      	beq.n	800992e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	7d1b      	ldrb	r3, [r3, #20]
 8009862:	b25b      	sxtb	r3, r3
 8009864:	2b00      	cmp	r3, #0
 8009866:	da1a      	bge.n	800989e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	7858      	ldrb	r0, [r3, #1]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6a1a      	ldr	r2, [r3, #32]
 8009876:	2301      	movs	r3, #1
 8009878:	f7fd fee4 	bl	8007644 <disk_write>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d006      	beq.n	8009890 <f_sync+0x5e>
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	2101      	movs	r1, #1
 8009886:	4618      	mov	r0, r3
 8009888:	f7fe f830 	bl	80078ec <unlock_fs>
 800988c:	2301      	movs	r3, #1
 800988e:	e055      	b.n	800993c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	7d1b      	ldrb	r3, [r3, #20]
 8009894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009898:	b2da      	uxtb	r2, r3
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800989e:	f7fd f933 	bl	8006b08 <get_fattime>
 80098a2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80098a4:	68ba      	ldr	r2, [r7, #8]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098aa:	4619      	mov	r1, r3
 80098ac:	4610      	mov	r0, r2
 80098ae:	f7fe f9e9 	bl	8007c84 <move_window>
 80098b2:	4603      	mov	r3, r0
 80098b4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80098b6:	7dfb      	ldrb	r3, [r7, #23]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d138      	bne.n	800992e <f_sync+0xfc>
					dir = fp->dir_ptr;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098c0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	330b      	adds	r3, #11
 80098c6:	781a      	ldrb	r2, [r3, #0]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	330b      	adds	r3, #11
 80098cc:	f042 0220 	orr.w	r2, r2, #32
 80098d0:	b2d2      	uxtb	r2, r2
 80098d2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6818      	ldr	r0, [r3, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	461a      	mov	r2, r3
 80098de:	68f9      	ldr	r1, [r7, #12]
 80098e0:	f7fe fef6 	bl	80086d0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f103 021c 	add.w	r2, r3, #28
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	68db      	ldr	r3, [r3, #12]
 80098ee:	4619      	mov	r1, r3
 80098f0:	4610      	mov	r0, r2
 80098f2:	f7fd ff3b 	bl	800776c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	3316      	adds	r3, #22
 80098fa:	6939      	ldr	r1, [r7, #16]
 80098fc:	4618      	mov	r0, r3
 80098fe:	f7fd ff35 	bl	800776c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	3312      	adds	r3, #18
 8009906:	2100      	movs	r1, #0
 8009908:	4618      	mov	r0, r3
 800990a:	f7fd ff14 	bl	8007736 <st_word>
					fs->wflag = 1;
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	2201      	movs	r2, #1
 8009912:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	4618      	mov	r0, r3
 8009918:	f7fe f9e2 	bl	8007ce0 <sync_fs>
 800991c:	4603      	mov	r3, r0
 800991e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	7d1b      	ldrb	r3, [r3, #20]
 8009924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009928:	b2da      	uxtb	r2, r3
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	7dfa      	ldrb	r2, [r7, #23]
 8009932:	4611      	mov	r1, r2
 8009934:	4618      	mov	r0, r3
 8009936:	f7fd ffd9 	bl	80078ec <unlock_fs>
 800993a:	7dfb      	ldrb	r3, [r7, #23]
}
 800993c:	4618      	mov	r0, r3
 800993e:	3718      	adds	r7, #24
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f7ff ff70 	bl	8009832 <f_sync>
 8009952:	4603      	mov	r3, r0
 8009954:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009956:	7bfb      	ldrb	r3, [r7, #15]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d11d      	bne.n	8009998 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f107 0208 	add.w	r2, r7, #8
 8009962:	4611      	mov	r1, r2
 8009964:	4618      	mov	r0, r3
 8009966:	f7ff fb4f 	bl	8009008 <validate>
 800996a:	4603      	mov	r3, r0
 800996c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800996e:	7bfb      	ldrb	r3, [r7, #15]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d111      	bne.n	8009998 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	4618      	mov	r0, r3
 800997a:	f7fe f8df 	bl	8007b3c <dec_lock>
 800997e:	4603      	mov	r3, r0
 8009980:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009982:	7bfb      	ldrb	r3, [r7, #15]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d102      	bne.n	800998e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	2100      	movs	r1, #0
 8009992:	4618      	mov	r0, r3
 8009994:	f7fd ffaa 	bl	80078ec <unlock_fs>
#endif
		}
	}
	return res;
 8009998:	7bfb      	ldrb	r3, [r7, #15]
}
 800999a:	4618      	mov	r0, r3
 800999c:	3710      	adds	r7, #16
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
	...

080099a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b087      	sub	sp, #28
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	4613      	mov	r3, r2
 80099b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80099b2:	2301      	movs	r3, #1
 80099b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80099b6:	2300      	movs	r3, #0
 80099b8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80099ba:	4b1f      	ldr	r3, [pc, #124]	; (8009a38 <FATFS_LinkDriverEx+0x94>)
 80099bc:	7a5b      	ldrb	r3, [r3, #9]
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d131      	bne.n	8009a28 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80099c4:	4b1c      	ldr	r3, [pc, #112]	; (8009a38 <FATFS_LinkDriverEx+0x94>)
 80099c6:	7a5b      	ldrb	r3, [r3, #9]
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	461a      	mov	r2, r3
 80099cc:	4b1a      	ldr	r3, [pc, #104]	; (8009a38 <FATFS_LinkDriverEx+0x94>)
 80099ce:	2100      	movs	r1, #0
 80099d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80099d2:	4b19      	ldr	r3, [pc, #100]	; (8009a38 <FATFS_LinkDriverEx+0x94>)
 80099d4:	7a5b      	ldrb	r3, [r3, #9]
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	4a17      	ldr	r2, [pc, #92]	; (8009a38 <FATFS_LinkDriverEx+0x94>)
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	4413      	add	r3, r2
 80099de:	68fa      	ldr	r2, [r7, #12]
 80099e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80099e2:	4b15      	ldr	r3, [pc, #84]	; (8009a38 <FATFS_LinkDriverEx+0x94>)
 80099e4:	7a5b      	ldrb	r3, [r3, #9]
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	461a      	mov	r2, r3
 80099ea:	4b13      	ldr	r3, [pc, #76]	; (8009a38 <FATFS_LinkDriverEx+0x94>)
 80099ec:	4413      	add	r3, r2
 80099ee:	79fa      	ldrb	r2, [r7, #7]
 80099f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80099f2:	4b11      	ldr	r3, [pc, #68]	; (8009a38 <FATFS_LinkDriverEx+0x94>)
 80099f4:	7a5b      	ldrb	r3, [r3, #9]
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	1c5a      	adds	r2, r3, #1
 80099fa:	b2d1      	uxtb	r1, r2
 80099fc:	4a0e      	ldr	r2, [pc, #56]	; (8009a38 <FATFS_LinkDriverEx+0x94>)
 80099fe:	7251      	strb	r1, [r2, #9]
 8009a00:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009a02:	7dbb      	ldrb	r3, [r7, #22]
 8009a04:	3330      	adds	r3, #48	; 0x30
 8009a06:	b2da      	uxtb	r2, r3
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	223a      	movs	r2, #58	; 0x3a
 8009a12:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	3302      	adds	r3, #2
 8009a18:	222f      	movs	r2, #47	; 0x2f
 8009a1a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	3303      	adds	r3, #3
 8009a20:	2200      	movs	r2, #0
 8009a22:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009a24:	2300      	movs	r3, #0
 8009a26:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	371c      	adds	r7, #28
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr
 8009a36:	bf00      	nop
 8009a38:	20000684 	.word	0x20000684

08009a3c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009a46:	2200      	movs	r2, #0
 8009a48:	6839      	ldr	r1, [r7, #0]
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f7ff ffaa 	bl	80099a4 <FATFS_LinkDriverEx>
 8009a50:	4603      	mov	r3, r0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3708      	adds	r7, #8
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	b084      	sub	sp, #16
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	4603      	mov	r3, r0
 8009a62:	6039      	str	r1, [r7, #0]
 8009a64:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8009a66:	2200      	movs	r2, #0
 8009a68:	2101      	movs	r1, #1
 8009a6a:	2001      	movs	r0, #1
 8009a6c:	f000 f977 	bl	8009d5e <osSemaphoreNew>
 8009a70:	4602      	mov	r2, r0
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	bf14      	ite	ne
 8009a7e:	2301      	movne	r3, #1
 8009a80:	2300      	moveq	r3, #0
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	60fb      	str	r3, [r7, #12]

    return ret;
 8009a86:	68fb      	ldr	r3, [r7, #12]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3710      	adds	r7, #16
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 fa7f 	bl	8009f9c <osSemaphoreDelete>
#endif
    return 1;
 8009a9e:	2301      	movs	r3, #1
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8009ab4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 f9d9 	bl	8009e70 <osSemaphoreAcquire>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d101      	bne.n	8009ac8 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b082      	sub	sp, #8
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 fa1a 	bl	8009f14 <osSemaphoreRelease>
#endif
}
 8009ae0:	bf00      	nop
 8009ae2:	3708      	adds	r7, #8
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <__NVIC_SetPriority>:
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	4603      	mov	r3, r0
 8009af0:	6039      	str	r1, [r7, #0]
 8009af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	db0a      	blt.n	8009b12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	b2da      	uxtb	r2, r3
 8009b00:	490c      	ldr	r1, [pc, #48]	; (8009b34 <__NVIC_SetPriority+0x4c>)
 8009b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b06:	0112      	lsls	r2, r2, #4
 8009b08:	b2d2      	uxtb	r2, r2
 8009b0a:	440b      	add	r3, r1
 8009b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009b10:	e00a      	b.n	8009b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	b2da      	uxtb	r2, r3
 8009b16:	4908      	ldr	r1, [pc, #32]	; (8009b38 <__NVIC_SetPriority+0x50>)
 8009b18:	79fb      	ldrb	r3, [r7, #7]
 8009b1a:	f003 030f 	and.w	r3, r3, #15
 8009b1e:	3b04      	subs	r3, #4
 8009b20:	0112      	lsls	r2, r2, #4
 8009b22:	b2d2      	uxtb	r2, r2
 8009b24:	440b      	add	r3, r1
 8009b26:	761a      	strb	r2, [r3, #24]
}
 8009b28:	bf00      	nop
 8009b2a:	370c      	adds	r7, #12
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr
 8009b34:	e000e100 	.word	0xe000e100
 8009b38:	e000ed00 	.word	0xe000ed00

08009b3c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009b40:	4b05      	ldr	r3, [pc, #20]	; (8009b58 <SysTick_Handler+0x1c>)
 8009b42:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009b44:	f002 f962 	bl	800be0c <xTaskGetSchedulerState>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d001      	beq.n	8009b52 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009b4e:	f003 f84b 	bl	800cbe8 <xPortSysTickHandler>
  }
}
 8009b52:	bf00      	nop
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	e000e010 	.word	0xe000e010

08009b5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009b60:	2100      	movs	r1, #0
 8009b62:	f06f 0004 	mvn.w	r0, #4
 8009b66:	f7ff ffbf 	bl	8009ae8 <__NVIC_SetPriority>
#endif
}
 8009b6a:	bf00      	nop
 8009b6c:	bd80      	pop	{r7, pc}
	...

08009b70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b76:	f3ef 8305 	mrs	r3, IPSR
 8009b7a:	603b      	str	r3, [r7, #0]
  return(result);
 8009b7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d003      	beq.n	8009b8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009b82:	f06f 0305 	mvn.w	r3, #5
 8009b86:	607b      	str	r3, [r7, #4]
 8009b88:	e00c      	b.n	8009ba4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009b8a:	4b0a      	ldr	r3, [pc, #40]	; (8009bb4 <osKernelInitialize+0x44>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d105      	bne.n	8009b9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009b92:	4b08      	ldr	r3, [pc, #32]	; (8009bb4 <osKernelInitialize+0x44>)
 8009b94:	2201      	movs	r2, #1
 8009b96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	607b      	str	r3, [r7, #4]
 8009b9c:	e002      	b.n	8009ba4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8009ba2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009ba4:	687b      	ldr	r3, [r7, #4]
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	370c      	adds	r7, #12
 8009baa:	46bd      	mov	sp, r7
 8009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb0:	4770      	bx	lr
 8009bb2:	bf00      	nop
 8009bb4:	20000690 	.word	0x20000690

08009bb8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bbe:	f3ef 8305 	mrs	r3, IPSR
 8009bc2:	603b      	str	r3, [r7, #0]
  return(result);
 8009bc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d003      	beq.n	8009bd2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009bca:	f06f 0305 	mvn.w	r3, #5
 8009bce:	607b      	str	r3, [r7, #4]
 8009bd0:	e010      	b.n	8009bf4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009bd2:	4b0b      	ldr	r3, [pc, #44]	; (8009c00 <osKernelStart+0x48>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d109      	bne.n	8009bee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009bda:	f7ff ffbf 	bl	8009b5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009bde:	4b08      	ldr	r3, [pc, #32]	; (8009c00 <osKernelStart+0x48>)
 8009be0:	2202      	movs	r2, #2
 8009be2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009be4:	f001 fcca 	bl	800b57c <vTaskStartScheduler>
      stat = osOK;
 8009be8:	2300      	movs	r3, #0
 8009bea:	607b      	str	r3, [r7, #4]
 8009bec:	e002      	b.n	8009bf4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009bee:	f04f 33ff 	mov.w	r3, #4294967295
 8009bf2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009bf4:	687b      	ldr	r3, [r7, #4]
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3708      	adds	r7, #8
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	bf00      	nop
 8009c00:	20000690 	.word	0x20000690

08009c04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b08e      	sub	sp, #56	; 0x38
 8009c08:	af04      	add	r7, sp, #16
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009c10:	2300      	movs	r3, #0
 8009c12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c14:	f3ef 8305 	mrs	r3, IPSR
 8009c18:	617b      	str	r3, [r7, #20]
  return(result);
 8009c1a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d17e      	bne.n	8009d1e <osThreadNew+0x11a>
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d07b      	beq.n	8009d1e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009c26:	2340      	movs	r3, #64	; 0x40
 8009c28:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009c2a:	2318      	movs	r3, #24
 8009c2c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009c32:	f04f 33ff 	mov.w	r3, #4294967295
 8009c36:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d045      	beq.n	8009cca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d002      	beq.n	8009c4c <osThreadNew+0x48>
        name = attr->name;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	699b      	ldr	r3, [r3, #24]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d002      	beq.n	8009c5a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	699b      	ldr	r3, [r3, #24]
 8009c58:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009c5a:	69fb      	ldr	r3, [r7, #28]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d008      	beq.n	8009c72 <osThreadNew+0x6e>
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	2b38      	cmp	r3, #56	; 0x38
 8009c64:	d805      	bhi.n	8009c72 <osThreadNew+0x6e>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	f003 0301 	and.w	r3, r3, #1
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d001      	beq.n	8009c76 <osThreadNew+0x72>
        return (NULL);
 8009c72:	2300      	movs	r3, #0
 8009c74:	e054      	b.n	8009d20 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	695b      	ldr	r3, [r3, #20]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d003      	beq.n	8009c86 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	695b      	ldr	r3, [r3, #20]
 8009c82:	089b      	lsrs	r3, r3, #2
 8009c84:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d00e      	beq.n	8009cac <osThreadNew+0xa8>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	68db      	ldr	r3, [r3, #12]
 8009c92:	2b5b      	cmp	r3, #91	; 0x5b
 8009c94:	d90a      	bls.n	8009cac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d006      	beq.n	8009cac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	695b      	ldr	r3, [r3, #20]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d002      	beq.n	8009cac <osThreadNew+0xa8>
        mem = 1;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	61bb      	str	r3, [r7, #24]
 8009caa:	e010      	b.n	8009cce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d10c      	bne.n	8009cce <osThreadNew+0xca>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d108      	bne.n	8009cce <osThreadNew+0xca>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	691b      	ldr	r3, [r3, #16]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d104      	bne.n	8009cce <osThreadNew+0xca>
          mem = 0;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	61bb      	str	r3, [r7, #24]
 8009cc8:	e001      	b.n	8009cce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009cce:	69bb      	ldr	r3, [r7, #24]
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d110      	bne.n	8009cf6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009cdc:	9202      	str	r2, [sp, #8]
 8009cde:	9301      	str	r3, [sp, #4]
 8009ce0:	69fb      	ldr	r3, [r7, #28]
 8009ce2:	9300      	str	r3, [sp, #0]
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	6a3a      	ldr	r2, [r7, #32]
 8009ce8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f001 fa70 	bl	800b1d0 <xTaskCreateStatic>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	613b      	str	r3, [r7, #16]
 8009cf4:	e013      	b.n	8009d1e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d110      	bne.n	8009d1e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009cfc:	6a3b      	ldr	r3, [r7, #32]
 8009cfe:	b29a      	uxth	r2, r3
 8009d00:	f107 0310 	add.w	r3, r7, #16
 8009d04:	9301      	str	r3, [sp, #4]
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	9300      	str	r3, [sp, #0]
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d0e:	68f8      	ldr	r0, [r7, #12]
 8009d10:	f001 fabb 	bl	800b28a <xTaskCreate>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d001      	beq.n	8009d1e <osThreadNew+0x11a>
            hTask = NULL;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009d1e:	693b      	ldr	r3, [r7, #16]
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3728      	adds	r7, #40	; 0x28
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d30:	f3ef 8305 	mrs	r3, IPSR
 8009d34:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d36:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d003      	beq.n	8009d44 <osDelay+0x1c>
    stat = osErrorISR;
 8009d3c:	f06f 0305 	mvn.w	r3, #5
 8009d40:	60fb      	str	r3, [r7, #12]
 8009d42:	e007      	b.n	8009d54 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009d44:	2300      	movs	r3, #0
 8009d46:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d002      	beq.n	8009d54 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f001 fbe0 	bl	800b514 <vTaskDelay>
    }
  }

  return (stat);
 8009d54:	68fb      	ldr	r3, [r7, #12]
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b08a      	sub	sp, #40	; 0x28
 8009d62:	af02      	add	r7, sp, #8
 8009d64:	60f8      	str	r0, [r7, #12]
 8009d66:	60b9      	str	r1, [r7, #8]
 8009d68:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d6e:	f3ef 8305 	mrs	r3, IPSR
 8009d72:	613b      	str	r3, [r7, #16]
  return(result);
 8009d74:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d175      	bne.n	8009e66 <osSemaphoreNew+0x108>
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d072      	beq.n	8009e66 <osSemaphoreNew+0x108>
 8009d80:	68ba      	ldr	r2, [r7, #8]
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d86e      	bhi.n	8009e66 <osSemaphoreNew+0x108>
    mem = -1;
 8009d88:	f04f 33ff 	mov.w	r3, #4294967295
 8009d8c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d015      	beq.n	8009dc0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d006      	beq.n	8009daa <osSemaphoreNew+0x4c>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	68db      	ldr	r3, [r3, #12]
 8009da0:	2b4f      	cmp	r3, #79	; 0x4f
 8009da2:	d902      	bls.n	8009daa <osSemaphoreNew+0x4c>
        mem = 1;
 8009da4:	2301      	movs	r3, #1
 8009da6:	61bb      	str	r3, [r7, #24]
 8009da8:	e00c      	b.n	8009dc4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	689b      	ldr	r3, [r3, #8]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d108      	bne.n	8009dc4 <osSemaphoreNew+0x66>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d104      	bne.n	8009dc4 <osSemaphoreNew+0x66>
          mem = 0;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	61bb      	str	r3, [r7, #24]
 8009dbe:	e001      	b.n	8009dc4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009dc4:	69bb      	ldr	r3, [r7, #24]
 8009dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dca:	d04c      	beq.n	8009e66 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d128      	bne.n	8009e24 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d10a      	bne.n	8009dee <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	2203      	movs	r2, #3
 8009dde:	9200      	str	r2, [sp, #0]
 8009de0:	2200      	movs	r2, #0
 8009de2:	2100      	movs	r1, #0
 8009de4:	2001      	movs	r0, #1
 8009de6:	f000 fa4d 	bl	800a284 <xQueueGenericCreateStatic>
 8009dea:	61f8      	str	r0, [r7, #28]
 8009dec:	e005      	b.n	8009dfa <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009dee:	2203      	movs	r2, #3
 8009df0:	2100      	movs	r1, #0
 8009df2:	2001      	movs	r0, #1
 8009df4:	f000 fabe 	bl	800a374 <xQueueGenericCreate>
 8009df8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009dfa:	69fb      	ldr	r3, [r7, #28]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d022      	beq.n	8009e46 <osSemaphoreNew+0xe8>
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d01f      	beq.n	8009e46 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009e06:	2300      	movs	r3, #0
 8009e08:	2200      	movs	r2, #0
 8009e0a:	2100      	movs	r1, #0
 8009e0c:	69f8      	ldr	r0, [r7, #28]
 8009e0e:	f000 fb79 	bl	800a504 <xQueueGenericSend>
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d016      	beq.n	8009e46 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009e18:	69f8      	ldr	r0, [r7, #28]
 8009e1a:	f001 f805 	bl	800ae28 <vQueueDelete>
            hSemaphore = NULL;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	61fb      	str	r3, [r7, #28]
 8009e22:	e010      	b.n	8009e46 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009e24:	69bb      	ldr	r3, [r7, #24]
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d108      	bne.n	8009e3c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	461a      	mov	r2, r3
 8009e30:	68b9      	ldr	r1, [r7, #8]
 8009e32:	68f8      	ldr	r0, [r7, #12]
 8009e34:	f000 fafb 	bl	800a42e <xQueueCreateCountingSemaphoreStatic>
 8009e38:	61f8      	str	r0, [r7, #28]
 8009e3a:	e004      	b.n	8009e46 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009e3c:	68b9      	ldr	r1, [r7, #8]
 8009e3e:	68f8      	ldr	r0, [r7, #12]
 8009e40:	f000 fb2c 	bl	800a49c <xQueueCreateCountingSemaphore>
 8009e44:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009e46:	69fb      	ldr	r3, [r7, #28]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d00c      	beq.n	8009e66 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d003      	beq.n	8009e5a <osSemaphoreNew+0xfc>
          name = attr->name;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	617b      	str	r3, [r7, #20]
 8009e58:	e001      	b.n	8009e5e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009e5e:	6979      	ldr	r1, [r7, #20]
 8009e60:	69f8      	ldr	r0, [r7, #28]
 8009e62:	f001 f92d 	bl	800b0c0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009e66:	69fb      	ldr	r3, [r7, #28]
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3720      	adds	r7, #32
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b086      	sub	sp, #24
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d103      	bne.n	8009e90 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009e88:	f06f 0303 	mvn.w	r3, #3
 8009e8c:	617b      	str	r3, [r7, #20]
 8009e8e:	e039      	b.n	8009f04 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e90:	f3ef 8305 	mrs	r3, IPSR
 8009e94:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e96:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d022      	beq.n	8009ee2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d003      	beq.n	8009eaa <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009ea2:	f06f 0303 	mvn.w	r3, #3
 8009ea6:	617b      	str	r3, [r7, #20]
 8009ea8:	e02c      	b.n	8009f04 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009eae:	f107 0308 	add.w	r3, r7, #8
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	2100      	movs	r1, #0
 8009eb6:	6938      	ldr	r0, [r7, #16]
 8009eb8:	f000 ff36 	bl	800ad28 <xQueueReceiveFromISR>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d003      	beq.n	8009eca <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009ec2:	f06f 0302 	mvn.w	r3, #2
 8009ec6:	617b      	str	r3, [r7, #20]
 8009ec8:	e01c      	b.n	8009f04 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d019      	beq.n	8009f04 <osSemaphoreAcquire+0x94>
 8009ed0:	4b0f      	ldr	r3, [pc, #60]	; (8009f10 <osSemaphoreAcquire+0xa0>)
 8009ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ed6:	601a      	str	r2, [r3, #0]
 8009ed8:	f3bf 8f4f 	dsb	sy
 8009edc:	f3bf 8f6f 	isb	sy
 8009ee0:	e010      	b.n	8009f04 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009ee2:	6839      	ldr	r1, [r7, #0]
 8009ee4:	6938      	ldr	r0, [r7, #16]
 8009ee6:	f000 fe13 	bl	800ab10 <xQueueSemaphoreTake>
 8009eea:	4603      	mov	r3, r0
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d009      	beq.n	8009f04 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d003      	beq.n	8009efe <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009ef6:	f06f 0301 	mvn.w	r3, #1
 8009efa:	617b      	str	r3, [r7, #20]
 8009efc:	e002      	b.n	8009f04 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009efe:	f06f 0302 	mvn.w	r3, #2
 8009f02:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009f04:	697b      	ldr	r3, [r7, #20]
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3718      	adds	r7, #24
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	e000ed04 	.word	0xe000ed04

08009f14 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b086      	sub	sp, #24
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009f20:	2300      	movs	r3, #0
 8009f22:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d103      	bne.n	8009f32 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009f2a:	f06f 0303 	mvn.w	r3, #3
 8009f2e:	617b      	str	r3, [r7, #20]
 8009f30:	e02c      	b.n	8009f8c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f32:	f3ef 8305 	mrs	r3, IPSR
 8009f36:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f38:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d01a      	beq.n	8009f74 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009f42:	f107 0308 	add.w	r3, r7, #8
 8009f46:	4619      	mov	r1, r3
 8009f48:	6938      	ldr	r0, [r7, #16]
 8009f4a:	f000 fc74 	bl	800a836 <xQueueGiveFromISR>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d003      	beq.n	8009f5c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009f54:	f06f 0302 	mvn.w	r3, #2
 8009f58:	617b      	str	r3, [r7, #20]
 8009f5a:	e017      	b.n	8009f8c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d014      	beq.n	8009f8c <osSemaphoreRelease+0x78>
 8009f62:	4b0d      	ldr	r3, [pc, #52]	; (8009f98 <osSemaphoreRelease+0x84>)
 8009f64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f68:	601a      	str	r2, [r3, #0]
 8009f6a:	f3bf 8f4f 	dsb	sy
 8009f6e:	f3bf 8f6f 	isb	sy
 8009f72:	e00b      	b.n	8009f8c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009f74:	2300      	movs	r3, #0
 8009f76:	2200      	movs	r2, #0
 8009f78:	2100      	movs	r1, #0
 8009f7a:	6938      	ldr	r0, [r7, #16]
 8009f7c:	f000 fac2 	bl	800a504 <xQueueGenericSend>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d002      	beq.n	8009f8c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009f86:	f06f 0302 	mvn.w	r3, #2
 8009f8a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009f8c:	697b      	ldr	r3, [r7, #20]
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3718      	adds	r7, #24
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	bf00      	nop
 8009f98:	e000ed04 	.word	0xe000ed04

08009f9c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b086      	sub	sp, #24
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fa8:	f3ef 8305 	mrs	r3, IPSR
 8009fac:	60fb      	str	r3, [r7, #12]
  return(result);
 8009fae:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d003      	beq.n	8009fbc <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8009fb4:	f06f 0305 	mvn.w	r3, #5
 8009fb8:	617b      	str	r3, [r7, #20]
 8009fba:	e00e      	b.n	8009fda <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d103      	bne.n	8009fca <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8009fc2:	f06f 0303 	mvn.w	r3, #3
 8009fc6:	617b      	str	r3, [r7, #20]
 8009fc8:	e007      	b.n	8009fda <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8009fca:	6938      	ldr	r0, [r7, #16]
 8009fcc:	f001 f8a2 	bl	800b114 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8009fd4:	6938      	ldr	r0, [r7, #16]
 8009fd6:	f000 ff27 	bl	800ae28 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8009fda:	697b      	ldr	r3, [r7, #20]
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3718      	adds	r7, #24
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009fe4:	b480      	push	{r7}
 8009fe6:	b085      	sub	sp, #20
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	4a07      	ldr	r2, [pc, #28]	; (800a010 <vApplicationGetIdleTaskMemory+0x2c>)
 8009ff4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	4a06      	ldr	r2, [pc, #24]	; (800a014 <vApplicationGetIdleTaskMemory+0x30>)
 8009ffa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2240      	movs	r2, #64	; 0x40
 800a000:	601a      	str	r2, [r3, #0]
}
 800a002:	bf00      	nop
 800a004:	3714      	adds	r7, #20
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr
 800a00e:	bf00      	nop
 800a010:	20000694 	.word	0x20000694
 800a014:	200006f0 	.word	0x200006f0

0800a018 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a018:	b480      	push	{r7}
 800a01a:	b085      	sub	sp, #20
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	4a07      	ldr	r2, [pc, #28]	; (800a044 <vApplicationGetTimerTaskMemory+0x2c>)
 800a028:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	4a06      	ldr	r2, [pc, #24]	; (800a048 <vApplicationGetTimerTaskMemory+0x30>)
 800a02e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2280      	movs	r2, #128	; 0x80
 800a034:	601a      	str	r2, [r3, #0]
}
 800a036:	bf00      	nop
 800a038:	3714      	adds	r7, #20
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr
 800a042:	bf00      	nop
 800a044:	200007f0 	.word	0x200007f0
 800a048:	2000084c 	.word	0x2000084c

0800a04c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a04c:	b480      	push	{r7}
 800a04e:	b083      	sub	sp, #12
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f103 0208 	add.w	r2, r3, #8
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f04f 32ff 	mov.w	r2, #4294967295
 800a064:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f103 0208 	add.w	r2, r3, #8
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f103 0208 	add.w	r2, r3, #8
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a080:	bf00      	nop
 800a082:	370c      	adds	r7, #12
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr

0800a08c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2200      	movs	r2, #0
 800a098:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a09a:	bf00      	nop
 800a09c:	370c      	adds	r7, #12
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr

0800a0a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a0a6:	b480      	push	{r7}
 800a0a8:	b085      	sub	sp, #20
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
 800a0ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	68fa      	ldr	r2, [r7, #12]
 800a0ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	689a      	ldr	r2, [r3, #8]
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	689b      	ldr	r3, [r3, #8]
 800a0c8:	683a      	ldr	r2, [r7, #0]
 800a0ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	683a      	ldr	r2, [r7, #0]
 800a0d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	1c5a      	adds	r2, r3, #1
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	601a      	str	r2, [r3, #0]
}
 800a0e2:	bf00      	nop
 800a0e4:	3714      	adds	r7, #20
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr

0800a0ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a0ee:	b480      	push	{r7}
 800a0f0:	b085      	sub	sp, #20
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
 800a0f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a104:	d103      	bne.n	800a10e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	691b      	ldr	r3, [r3, #16]
 800a10a:	60fb      	str	r3, [r7, #12]
 800a10c:	e00c      	b.n	800a128 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	3308      	adds	r3, #8
 800a112:	60fb      	str	r3, [r7, #12]
 800a114:	e002      	b.n	800a11c <vListInsert+0x2e>
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	60fb      	str	r3, [r7, #12]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	68ba      	ldr	r2, [r7, #8]
 800a124:	429a      	cmp	r2, r3
 800a126:	d2f6      	bcs.n	800a116 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	685a      	ldr	r2, [r3, #4]
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	683a      	ldr	r2, [r7, #0]
 800a136:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	68fa      	ldr	r2, [r7, #12]
 800a13c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	683a      	ldr	r2, [r7, #0]
 800a142:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	1c5a      	adds	r2, r3, #1
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	601a      	str	r2, [r3, #0]
}
 800a154:	bf00      	nop
 800a156:	3714      	adds	r7, #20
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a160:	b480      	push	{r7}
 800a162:	b085      	sub	sp, #20
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	691b      	ldr	r3, [r3, #16]
 800a16c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	6892      	ldr	r2, [r2, #8]
 800a176:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	6852      	ldr	r2, [r2, #4]
 800a180:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	429a      	cmp	r2, r3
 800a18a:	d103      	bne.n	800a194 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	689a      	ldr	r2, [r3, #8]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	1e5a      	subs	r2, r3, #1
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3714      	adds	r7, #20
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d10a      	bne.n	800a1de <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1cc:	f383 8811 	msr	BASEPRI, r3
 800a1d0:	f3bf 8f6f 	isb	sy
 800a1d4:	f3bf 8f4f 	dsb	sy
 800a1d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a1da:	bf00      	nop
 800a1dc:	e7fe      	b.n	800a1dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a1de:	f002 fc71 	bl	800cac4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1ea:	68f9      	ldr	r1, [r7, #12]
 800a1ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a1ee:	fb01 f303 	mul.w	r3, r1, r3
 800a1f2:	441a      	add	r2, r3
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681a      	ldr	r2, [r3, #0]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a20e:	3b01      	subs	r3, #1
 800a210:	68f9      	ldr	r1, [r7, #12]
 800a212:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a214:	fb01 f303 	mul.w	r3, r1, r3
 800a218:	441a      	add	r2, r3
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	22ff      	movs	r2, #255	; 0xff
 800a222:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	22ff      	movs	r2, #255	; 0xff
 800a22a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d114      	bne.n	800a25e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	691b      	ldr	r3, [r3, #16]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d01a      	beq.n	800a272 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	3310      	adds	r3, #16
 800a240:	4618      	mov	r0, r3
 800a242:	f001 fc25 	bl	800ba90 <xTaskRemoveFromEventList>
 800a246:	4603      	mov	r3, r0
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d012      	beq.n	800a272 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a24c:	4b0c      	ldr	r3, [pc, #48]	; (800a280 <xQueueGenericReset+0xcc>)
 800a24e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a252:	601a      	str	r2, [r3, #0]
 800a254:	f3bf 8f4f 	dsb	sy
 800a258:	f3bf 8f6f 	isb	sy
 800a25c:	e009      	b.n	800a272 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	3310      	adds	r3, #16
 800a262:	4618      	mov	r0, r3
 800a264:	f7ff fef2 	bl	800a04c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	3324      	adds	r3, #36	; 0x24
 800a26c:	4618      	mov	r0, r3
 800a26e:	f7ff feed 	bl	800a04c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a272:	f002 fc57 	bl	800cb24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a276:	2301      	movs	r3, #1
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3710      	adds	r7, #16
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}
 800a280:	e000ed04 	.word	0xe000ed04

0800a284 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a284:	b580      	push	{r7, lr}
 800a286:	b08e      	sub	sp, #56	; 0x38
 800a288:	af02      	add	r7, sp, #8
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	60b9      	str	r1, [r7, #8]
 800a28e:	607a      	str	r2, [r7, #4]
 800a290:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d10a      	bne.n	800a2ae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29c:	f383 8811 	msr	BASEPRI, r3
 800a2a0:	f3bf 8f6f 	isb	sy
 800a2a4:	f3bf 8f4f 	dsb	sy
 800a2a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a2aa:	bf00      	nop
 800a2ac:	e7fe      	b.n	800a2ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d10a      	bne.n	800a2ca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b8:	f383 8811 	msr	BASEPRI, r3
 800a2bc:	f3bf 8f6f 	isb	sy
 800a2c0:	f3bf 8f4f 	dsb	sy
 800a2c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a2c6:	bf00      	nop
 800a2c8:	e7fe      	b.n	800a2c8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d002      	beq.n	800a2d6 <xQueueGenericCreateStatic+0x52>
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d001      	beq.n	800a2da <xQueueGenericCreateStatic+0x56>
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	e000      	b.n	800a2dc <xQueueGenericCreateStatic+0x58>
 800a2da:	2300      	movs	r3, #0
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d10a      	bne.n	800a2f6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e4:	f383 8811 	msr	BASEPRI, r3
 800a2e8:	f3bf 8f6f 	isb	sy
 800a2ec:	f3bf 8f4f 	dsb	sy
 800a2f0:	623b      	str	r3, [r7, #32]
}
 800a2f2:	bf00      	nop
 800a2f4:	e7fe      	b.n	800a2f4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d102      	bne.n	800a302 <xQueueGenericCreateStatic+0x7e>
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d101      	bne.n	800a306 <xQueueGenericCreateStatic+0x82>
 800a302:	2301      	movs	r3, #1
 800a304:	e000      	b.n	800a308 <xQueueGenericCreateStatic+0x84>
 800a306:	2300      	movs	r3, #0
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d10a      	bne.n	800a322 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a310:	f383 8811 	msr	BASEPRI, r3
 800a314:	f3bf 8f6f 	isb	sy
 800a318:	f3bf 8f4f 	dsb	sy
 800a31c:	61fb      	str	r3, [r7, #28]
}
 800a31e:	bf00      	nop
 800a320:	e7fe      	b.n	800a320 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a322:	2350      	movs	r3, #80	; 0x50
 800a324:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	2b50      	cmp	r3, #80	; 0x50
 800a32a:	d00a      	beq.n	800a342 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a330:	f383 8811 	msr	BASEPRI, r3
 800a334:	f3bf 8f6f 	isb	sy
 800a338:	f3bf 8f4f 	dsb	sy
 800a33c:	61bb      	str	r3, [r7, #24]
}
 800a33e:	bf00      	nop
 800a340:	e7fe      	b.n	800a340 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a342:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d00d      	beq.n	800a36a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a350:	2201      	movs	r2, #1
 800a352:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a356:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35c:	9300      	str	r3, [sp, #0]
 800a35e:	4613      	mov	r3, r2
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	68b9      	ldr	r1, [r7, #8]
 800a364:	68f8      	ldr	r0, [r7, #12]
 800a366:	f000 f83f 	bl	800a3e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3730      	adds	r7, #48	; 0x30
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a374:	b580      	push	{r7, lr}
 800a376:	b08a      	sub	sp, #40	; 0x28
 800a378:	af02      	add	r7, sp, #8
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	60b9      	str	r1, [r7, #8]
 800a37e:	4613      	mov	r3, r2
 800a380:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d10a      	bne.n	800a39e <xQueueGenericCreate+0x2a>
	__asm volatile
 800a388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a38c:	f383 8811 	msr	BASEPRI, r3
 800a390:	f3bf 8f6f 	isb	sy
 800a394:	f3bf 8f4f 	dsb	sy
 800a398:	613b      	str	r3, [r7, #16]
}
 800a39a:	bf00      	nop
 800a39c:	e7fe      	b.n	800a39c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	68ba      	ldr	r2, [r7, #8]
 800a3a2:	fb02 f303 	mul.w	r3, r2, r3
 800a3a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	3350      	adds	r3, #80	; 0x50
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f002 fcab 	bl	800cd08 <pvPortMalloc>
 800a3b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d011      	beq.n	800a3de <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	3350      	adds	r3, #80	; 0x50
 800a3c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a3c4:	69bb      	ldr	r3, [r7, #24]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a3cc:	79fa      	ldrb	r2, [r7, #7]
 800a3ce:	69bb      	ldr	r3, [r7, #24]
 800a3d0:	9300      	str	r3, [sp, #0]
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	697a      	ldr	r2, [r7, #20]
 800a3d6:	68b9      	ldr	r1, [r7, #8]
 800a3d8:	68f8      	ldr	r0, [r7, #12]
 800a3da:	f000 f805 	bl	800a3e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a3de:	69bb      	ldr	r3, [r7, #24]
	}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3720      	adds	r7, #32
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	607a      	str	r2, [r7, #4]
 800a3f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d103      	bne.n	800a404 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a3fc:	69bb      	ldr	r3, [r7, #24]
 800a3fe:	69ba      	ldr	r2, [r7, #24]
 800a400:	601a      	str	r2, [r3, #0]
 800a402:	e002      	b.n	800a40a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a404:	69bb      	ldr	r3, [r7, #24]
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a40a:	69bb      	ldr	r3, [r7, #24]
 800a40c:	68fa      	ldr	r2, [r7, #12]
 800a40e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a410:	69bb      	ldr	r3, [r7, #24]
 800a412:	68ba      	ldr	r2, [r7, #8]
 800a414:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a416:	2101      	movs	r1, #1
 800a418:	69b8      	ldr	r0, [r7, #24]
 800a41a:	f7ff fecb 	bl	800a1b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	78fa      	ldrb	r2, [r7, #3]
 800a422:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a426:	bf00      	nop
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}

0800a42e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a42e:	b580      	push	{r7, lr}
 800a430:	b08a      	sub	sp, #40	; 0x28
 800a432:	af02      	add	r7, sp, #8
 800a434:	60f8      	str	r0, [r7, #12]
 800a436:	60b9      	str	r1, [r7, #8]
 800a438:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d10a      	bne.n	800a456 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a444:	f383 8811 	msr	BASEPRI, r3
 800a448:	f3bf 8f6f 	isb	sy
 800a44c:	f3bf 8f4f 	dsb	sy
 800a450:	61bb      	str	r3, [r7, #24]
}
 800a452:	bf00      	nop
 800a454:	e7fe      	b.n	800a454 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a456:	68ba      	ldr	r2, [r7, #8]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d90a      	bls.n	800a474 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a462:	f383 8811 	msr	BASEPRI, r3
 800a466:	f3bf 8f6f 	isb	sy
 800a46a:	f3bf 8f4f 	dsb	sy
 800a46e:	617b      	str	r3, [r7, #20]
}
 800a470:	bf00      	nop
 800a472:	e7fe      	b.n	800a472 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a474:	2302      	movs	r3, #2
 800a476:	9300      	str	r3, [sp, #0]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2200      	movs	r2, #0
 800a47c:	2100      	movs	r1, #0
 800a47e:	68f8      	ldr	r0, [r7, #12]
 800a480:	f7ff ff00 	bl	800a284 <xQueueGenericCreateStatic>
 800a484:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a486:	69fb      	ldr	r3, [r7, #28]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d002      	beq.n	800a492 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a48c:	69fb      	ldr	r3, [r7, #28]
 800a48e:	68ba      	ldr	r2, [r7, #8]
 800a490:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a492:	69fb      	ldr	r3, [r7, #28]
	}
 800a494:	4618      	mov	r0, r3
 800a496:	3720      	adds	r7, #32
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b086      	sub	sp, #24
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d10a      	bne.n	800a4c2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b0:	f383 8811 	msr	BASEPRI, r3
 800a4b4:	f3bf 8f6f 	isb	sy
 800a4b8:	f3bf 8f4f 	dsb	sy
 800a4bc:	613b      	str	r3, [r7, #16]
}
 800a4be:	bf00      	nop
 800a4c0:	e7fe      	b.n	800a4c0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a4c2:	683a      	ldr	r2, [r7, #0]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d90a      	bls.n	800a4e0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ce:	f383 8811 	msr	BASEPRI, r3
 800a4d2:	f3bf 8f6f 	isb	sy
 800a4d6:	f3bf 8f4f 	dsb	sy
 800a4da:	60fb      	str	r3, [r7, #12]
}
 800a4dc:	bf00      	nop
 800a4de:	e7fe      	b.n	800a4de <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a4e0:	2202      	movs	r2, #2
 800a4e2:	2100      	movs	r1, #0
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f7ff ff45 	bl	800a374 <xQueueGenericCreate>
 800a4ea:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d002      	beq.n	800a4f8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	683a      	ldr	r2, [r7, #0]
 800a4f6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a4f8:	697b      	ldr	r3, [r7, #20]
	}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3718      	adds	r7, #24
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
	...

0800a504 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b08e      	sub	sp, #56	; 0x38
 800a508:	af00      	add	r7, sp, #0
 800a50a:	60f8      	str	r0, [r7, #12]
 800a50c:	60b9      	str	r1, [r7, #8]
 800a50e:	607a      	str	r2, [r7, #4]
 800a510:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a512:	2300      	movs	r3, #0
 800a514:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d10a      	bne.n	800a536 <xQueueGenericSend+0x32>
	__asm volatile
 800a520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a524:	f383 8811 	msr	BASEPRI, r3
 800a528:	f3bf 8f6f 	isb	sy
 800a52c:	f3bf 8f4f 	dsb	sy
 800a530:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a532:	bf00      	nop
 800a534:	e7fe      	b.n	800a534 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d103      	bne.n	800a544 <xQueueGenericSend+0x40>
 800a53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a540:	2b00      	cmp	r3, #0
 800a542:	d101      	bne.n	800a548 <xQueueGenericSend+0x44>
 800a544:	2301      	movs	r3, #1
 800a546:	e000      	b.n	800a54a <xQueueGenericSend+0x46>
 800a548:	2300      	movs	r3, #0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d10a      	bne.n	800a564 <xQueueGenericSend+0x60>
	__asm volatile
 800a54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a552:	f383 8811 	msr	BASEPRI, r3
 800a556:	f3bf 8f6f 	isb	sy
 800a55a:	f3bf 8f4f 	dsb	sy
 800a55e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a560:	bf00      	nop
 800a562:	e7fe      	b.n	800a562 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	2b02      	cmp	r3, #2
 800a568:	d103      	bne.n	800a572 <xQueueGenericSend+0x6e>
 800a56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d101      	bne.n	800a576 <xQueueGenericSend+0x72>
 800a572:	2301      	movs	r3, #1
 800a574:	e000      	b.n	800a578 <xQueueGenericSend+0x74>
 800a576:	2300      	movs	r3, #0
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d10a      	bne.n	800a592 <xQueueGenericSend+0x8e>
	__asm volatile
 800a57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a580:	f383 8811 	msr	BASEPRI, r3
 800a584:	f3bf 8f6f 	isb	sy
 800a588:	f3bf 8f4f 	dsb	sy
 800a58c:	623b      	str	r3, [r7, #32]
}
 800a58e:	bf00      	nop
 800a590:	e7fe      	b.n	800a590 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a592:	f001 fc3b 	bl	800be0c <xTaskGetSchedulerState>
 800a596:	4603      	mov	r3, r0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d102      	bne.n	800a5a2 <xQueueGenericSend+0x9e>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d101      	bne.n	800a5a6 <xQueueGenericSend+0xa2>
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	e000      	b.n	800a5a8 <xQueueGenericSend+0xa4>
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d10a      	bne.n	800a5c2 <xQueueGenericSend+0xbe>
	__asm volatile
 800a5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b0:	f383 8811 	msr	BASEPRI, r3
 800a5b4:	f3bf 8f6f 	isb	sy
 800a5b8:	f3bf 8f4f 	dsb	sy
 800a5bc:	61fb      	str	r3, [r7, #28]
}
 800a5be:	bf00      	nop
 800a5c0:	e7fe      	b.n	800a5c0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a5c2:	f002 fa7f 	bl	800cac4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d302      	bcc.n	800a5d8 <xQueueGenericSend+0xd4>
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	2b02      	cmp	r3, #2
 800a5d6:	d129      	bne.n	800a62c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a5d8:	683a      	ldr	r2, [r7, #0]
 800a5da:	68b9      	ldr	r1, [r7, #8]
 800a5dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5de:	f000 fc5e 	bl	800ae9e <prvCopyDataToQueue>
 800a5e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d010      	beq.n	800a60e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ee:	3324      	adds	r3, #36	; 0x24
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f001 fa4d 	bl	800ba90 <xTaskRemoveFromEventList>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d013      	beq.n	800a624 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a5fc:	4b3f      	ldr	r3, [pc, #252]	; (800a6fc <xQueueGenericSend+0x1f8>)
 800a5fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a602:	601a      	str	r2, [r3, #0]
 800a604:	f3bf 8f4f 	dsb	sy
 800a608:	f3bf 8f6f 	isb	sy
 800a60c:	e00a      	b.n	800a624 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a610:	2b00      	cmp	r3, #0
 800a612:	d007      	beq.n	800a624 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a614:	4b39      	ldr	r3, [pc, #228]	; (800a6fc <xQueueGenericSend+0x1f8>)
 800a616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a61a:	601a      	str	r2, [r3, #0]
 800a61c:	f3bf 8f4f 	dsb	sy
 800a620:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a624:	f002 fa7e 	bl	800cb24 <vPortExitCritical>
				return pdPASS;
 800a628:	2301      	movs	r3, #1
 800a62a:	e063      	b.n	800a6f4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d103      	bne.n	800a63a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a632:	f002 fa77 	bl	800cb24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a636:	2300      	movs	r3, #0
 800a638:	e05c      	b.n	800a6f4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a63a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d106      	bne.n	800a64e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a640:	f107 0314 	add.w	r3, r7, #20
 800a644:	4618      	mov	r0, r3
 800a646:	f001 fa87 	bl	800bb58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a64a:	2301      	movs	r3, #1
 800a64c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a64e:	f002 fa69 	bl	800cb24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a652:	f000 fff9 	bl	800b648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a656:	f002 fa35 	bl	800cac4 <vPortEnterCritical>
 800a65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a660:	b25b      	sxtb	r3, r3
 800a662:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a666:	d103      	bne.n	800a670 <xQueueGenericSend+0x16c>
 800a668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66a:	2200      	movs	r2, #0
 800a66c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a672:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a676:	b25b      	sxtb	r3, r3
 800a678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a67c:	d103      	bne.n	800a686 <xQueueGenericSend+0x182>
 800a67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a680:	2200      	movs	r2, #0
 800a682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a686:	f002 fa4d 	bl	800cb24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a68a:	1d3a      	adds	r2, r7, #4
 800a68c:	f107 0314 	add.w	r3, r7, #20
 800a690:	4611      	mov	r1, r2
 800a692:	4618      	mov	r0, r3
 800a694:	f001 fa76 	bl	800bb84 <xTaskCheckForTimeOut>
 800a698:	4603      	mov	r3, r0
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d124      	bne.n	800a6e8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a69e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6a0:	f000 fcf5 	bl	800b08e <prvIsQueueFull>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d018      	beq.n	800a6dc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ac:	3310      	adds	r3, #16
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	4611      	mov	r1, r2
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f001 f99c 	bl	800b9f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a6b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6ba:	f000 fc80 	bl	800afbe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a6be:	f000 ffd1 	bl	800b664 <xTaskResumeAll>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	f47f af7c 	bne.w	800a5c2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a6ca:	4b0c      	ldr	r3, [pc, #48]	; (800a6fc <xQueueGenericSend+0x1f8>)
 800a6cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6d0:	601a      	str	r2, [r3, #0]
 800a6d2:	f3bf 8f4f 	dsb	sy
 800a6d6:	f3bf 8f6f 	isb	sy
 800a6da:	e772      	b.n	800a5c2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a6dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6de:	f000 fc6e 	bl	800afbe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a6e2:	f000 ffbf 	bl	800b664 <xTaskResumeAll>
 800a6e6:	e76c      	b.n	800a5c2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a6e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6ea:	f000 fc68 	bl	800afbe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a6ee:	f000 ffb9 	bl	800b664 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a6f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3738      	adds	r7, #56	; 0x38
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	e000ed04 	.word	0xe000ed04

0800a700 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b090      	sub	sp, #64	; 0x40
 800a704:	af00      	add	r7, sp, #0
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	607a      	str	r2, [r7, #4]
 800a70c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a714:	2b00      	cmp	r3, #0
 800a716:	d10a      	bne.n	800a72e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71c:	f383 8811 	msr	BASEPRI, r3
 800a720:	f3bf 8f6f 	isb	sy
 800a724:	f3bf 8f4f 	dsb	sy
 800a728:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a72a:	bf00      	nop
 800a72c:	e7fe      	b.n	800a72c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d103      	bne.n	800a73c <xQueueGenericSendFromISR+0x3c>
 800a734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d101      	bne.n	800a740 <xQueueGenericSendFromISR+0x40>
 800a73c:	2301      	movs	r3, #1
 800a73e:	e000      	b.n	800a742 <xQueueGenericSendFromISR+0x42>
 800a740:	2300      	movs	r3, #0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d10a      	bne.n	800a75c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74a:	f383 8811 	msr	BASEPRI, r3
 800a74e:	f3bf 8f6f 	isb	sy
 800a752:	f3bf 8f4f 	dsb	sy
 800a756:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a758:	bf00      	nop
 800a75a:	e7fe      	b.n	800a75a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	2b02      	cmp	r3, #2
 800a760:	d103      	bne.n	800a76a <xQueueGenericSendFromISR+0x6a>
 800a762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a766:	2b01      	cmp	r3, #1
 800a768:	d101      	bne.n	800a76e <xQueueGenericSendFromISR+0x6e>
 800a76a:	2301      	movs	r3, #1
 800a76c:	e000      	b.n	800a770 <xQueueGenericSendFromISR+0x70>
 800a76e:	2300      	movs	r3, #0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d10a      	bne.n	800a78a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a778:	f383 8811 	msr	BASEPRI, r3
 800a77c:	f3bf 8f6f 	isb	sy
 800a780:	f3bf 8f4f 	dsb	sy
 800a784:	623b      	str	r3, [r7, #32]
}
 800a786:	bf00      	nop
 800a788:	e7fe      	b.n	800a788 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a78a:	f002 fa7d 	bl	800cc88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a78e:	f3ef 8211 	mrs	r2, BASEPRI
 800a792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a796:	f383 8811 	msr	BASEPRI, r3
 800a79a:	f3bf 8f6f 	isb	sy
 800a79e:	f3bf 8f4f 	dsb	sy
 800a7a2:	61fa      	str	r2, [r7, #28]
 800a7a4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a7a6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a7a8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d302      	bcc.n	800a7bc <xQueueGenericSendFromISR+0xbc>
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	2b02      	cmp	r3, #2
 800a7ba:	d12f      	bne.n	800a81c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a7cc:	683a      	ldr	r2, [r7, #0]
 800a7ce:	68b9      	ldr	r1, [r7, #8]
 800a7d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a7d2:	f000 fb64 	bl	800ae9e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a7d6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a7da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7de:	d112      	bne.n	800a806 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d016      	beq.n	800a816 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ea:	3324      	adds	r3, #36	; 0x24
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f001 f94f 	bl	800ba90 <xTaskRemoveFromEventList>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d00e      	beq.n	800a816 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d00b      	beq.n	800a816 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2201      	movs	r2, #1
 800a802:	601a      	str	r2, [r3, #0]
 800a804:	e007      	b.n	800a816 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a806:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a80a:	3301      	adds	r3, #1
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	b25a      	sxtb	r2, r3
 800a810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a812:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a816:	2301      	movs	r3, #1
 800a818:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a81a:	e001      	b.n	800a820 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a81c:	2300      	movs	r3, #0
 800a81e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a822:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a82a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a82c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3740      	adds	r7, #64	; 0x40
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}

0800a836 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a836:	b580      	push	{r7, lr}
 800a838:	b08e      	sub	sp, #56	; 0x38
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
 800a83e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a846:	2b00      	cmp	r3, #0
 800a848:	d10a      	bne.n	800a860 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a84e:	f383 8811 	msr	BASEPRI, r3
 800a852:	f3bf 8f6f 	isb	sy
 800a856:	f3bf 8f4f 	dsb	sy
 800a85a:	623b      	str	r3, [r7, #32]
}
 800a85c:	bf00      	nop
 800a85e:	e7fe      	b.n	800a85e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a864:	2b00      	cmp	r3, #0
 800a866:	d00a      	beq.n	800a87e <xQueueGiveFromISR+0x48>
	__asm volatile
 800a868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86c:	f383 8811 	msr	BASEPRI, r3
 800a870:	f3bf 8f6f 	isb	sy
 800a874:	f3bf 8f4f 	dsb	sy
 800a878:	61fb      	str	r3, [r7, #28]
}
 800a87a:	bf00      	nop
 800a87c:	e7fe      	b.n	800a87c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d103      	bne.n	800a88e <xQueueGiveFromISR+0x58>
 800a886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a888:	689b      	ldr	r3, [r3, #8]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d101      	bne.n	800a892 <xQueueGiveFromISR+0x5c>
 800a88e:	2301      	movs	r3, #1
 800a890:	e000      	b.n	800a894 <xQueueGiveFromISR+0x5e>
 800a892:	2300      	movs	r3, #0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d10a      	bne.n	800a8ae <xQueueGiveFromISR+0x78>
	__asm volatile
 800a898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a89c:	f383 8811 	msr	BASEPRI, r3
 800a8a0:	f3bf 8f6f 	isb	sy
 800a8a4:	f3bf 8f4f 	dsb	sy
 800a8a8:	61bb      	str	r3, [r7, #24]
}
 800a8aa:	bf00      	nop
 800a8ac:	e7fe      	b.n	800a8ac <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a8ae:	f002 f9eb 	bl	800cc88 <vPortValidateInterruptPriority>
	__asm volatile
 800a8b2:	f3ef 8211 	mrs	r2, BASEPRI
 800a8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ba:	f383 8811 	msr	BASEPRI, r3
 800a8be:	f3bf 8f6f 	isb	sy
 800a8c2:	f3bf 8f4f 	dsb	sy
 800a8c6:	617a      	str	r2, [r7, #20]
 800a8c8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a8ca:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a8cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d22b      	bcs.n	800a936 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ea:	1c5a      	adds	r2, r3, #1
 800a8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a8f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a8f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8f8:	d112      	bne.n	800a920 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d016      	beq.n	800a930 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a904:	3324      	adds	r3, #36	; 0x24
 800a906:	4618      	mov	r0, r3
 800a908:	f001 f8c2 	bl	800ba90 <xTaskRemoveFromEventList>
 800a90c:	4603      	mov	r3, r0
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d00e      	beq.n	800a930 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d00b      	beq.n	800a930 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	2201      	movs	r2, #1
 800a91c:	601a      	str	r2, [r3, #0]
 800a91e:	e007      	b.n	800a930 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a920:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a924:	3301      	adds	r3, #1
 800a926:	b2db      	uxtb	r3, r3
 800a928:	b25a      	sxtb	r2, r3
 800a92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a930:	2301      	movs	r3, #1
 800a932:	637b      	str	r3, [r7, #52]	; 0x34
 800a934:	e001      	b.n	800a93a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a936:	2300      	movs	r3, #0
 800a938:	637b      	str	r3, [r7, #52]	; 0x34
 800a93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a93c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f383 8811 	msr	BASEPRI, r3
}
 800a944:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3738      	adds	r7, #56	; 0x38
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b08c      	sub	sp, #48	; 0x30
 800a954:	af00      	add	r7, sp, #0
 800a956:	60f8      	str	r0, [r7, #12]
 800a958:	60b9      	str	r1, [r7, #8]
 800a95a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a95c:	2300      	movs	r3, #0
 800a95e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a966:	2b00      	cmp	r3, #0
 800a968:	d10a      	bne.n	800a980 <xQueueReceive+0x30>
	__asm volatile
 800a96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a96e:	f383 8811 	msr	BASEPRI, r3
 800a972:	f3bf 8f6f 	isb	sy
 800a976:	f3bf 8f4f 	dsb	sy
 800a97a:	623b      	str	r3, [r7, #32]
}
 800a97c:	bf00      	nop
 800a97e:	e7fe      	b.n	800a97e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d103      	bne.n	800a98e <xQueueReceive+0x3e>
 800a986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d101      	bne.n	800a992 <xQueueReceive+0x42>
 800a98e:	2301      	movs	r3, #1
 800a990:	e000      	b.n	800a994 <xQueueReceive+0x44>
 800a992:	2300      	movs	r3, #0
 800a994:	2b00      	cmp	r3, #0
 800a996:	d10a      	bne.n	800a9ae <xQueueReceive+0x5e>
	__asm volatile
 800a998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99c:	f383 8811 	msr	BASEPRI, r3
 800a9a0:	f3bf 8f6f 	isb	sy
 800a9a4:	f3bf 8f4f 	dsb	sy
 800a9a8:	61fb      	str	r3, [r7, #28]
}
 800a9aa:	bf00      	nop
 800a9ac:	e7fe      	b.n	800a9ac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a9ae:	f001 fa2d 	bl	800be0c <xTaskGetSchedulerState>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d102      	bne.n	800a9be <xQueueReceive+0x6e>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d101      	bne.n	800a9c2 <xQueueReceive+0x72>
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e000      	b.n	800a9c4 <xQueueReceive+0x74>
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d10a      	bne.n	800a9de <xQueueReceive+0x8e>
	__asm volatile
 800a9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9cc:	f383 8811 	msr	BASEPRI, r3
 800a9d0:	f3bf 8f6f 	isb	sy
 800a9d4:	f3bf 8f4f 	dsb	sy
 800a9d8:	61bb      	str	r3, [r7, #24]
}
 800a9da:	bf00      	nop
 800a9dc:	e7fe      	b.n	800a9dc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a9de:	f002 f871 	bl	800cac4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d01f      	beq.n	800aa2e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a9ee:	68b9      	ldr	r1, [r7, #8]
 800a9f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9f2:	f000 fabe 	bl	800af72 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f8:	1e5a      	subs	r2, r3, #1
 800a9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa00:	691b      	ldr	r3, [r3, #16]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d00f      	beq.n	800aa26 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa08:	3310      	adds	r3, #16
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f001 f840 	bl	800ba90 <xTaskRemoveFromEventList>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d007      	beq.n	800aa26 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aa16:	4b3d      	ldr	r3, [pc, #244]	; (800ab0c <xQueueReceive+0x1bc>)
 800aa18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa1c:	601a      	str	r2, [r3, #0]
 800aa1e:	f3bf 8f4f 	dsb	sy
 800aa22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aa26:	f002 f87d 	bl	800cb24 <vPortExitCritical>
				return pdPASS;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	e069      	b.n	800ab02 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d103      	bne.n	800aa3c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa34:	f002 f876 	bl	800cb24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	e062      	b.n	800ab02 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d106      	bne.n	800aa50 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa42:	f107 0310 	add.w	r3, r7, #16
 800aa46:	4618      	mov	r0, r3
 800aa48:	f001 f886 	bl	800bb58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa50:	f002 f868 	bl	800cb24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa54:	f000 fdf8 	bl	800b648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa58:	f002 f834 	bl	800cac4 <vPortEnterCritical>
 800aa5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa62:	b25b      	sxtb	r3, r3
 800aa64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa68:	d103      	bne.n	800aa72 <xQueueReceive+0x122>
 800aa6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa78:	b25b      	sxtb	r3, r3
 800aa7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa7e:	d103      	bne.n	800aa88 <xQueueReceive+0x138>
 800aa80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa82:	2200      	movs	r2, #0
 800aa84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa88:	f002 f84c 	bl	800cb24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa8c:	1d3a      	adds	r2, r7, #4
 800aa8e:	f107 0310 	add.w	r3, r7, #16
 800aa92:	4611      	mov	r1, r2
 800aa94:	4618      	mov	r0, r3
 800aa96:	f001 f875 	bl	800bb84 <xTaskCheckForTimeOut>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d123      	bne.n	800aae8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aaa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aaa2:	f000 fade 	bl	800b062 <prvIsQueueEmpty>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d017      	beq.n	800aadc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aaac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaae:	3324      	adds	r3, #36	; 0x24
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	4611      	mov	r1, r2
 800aab4:	4618      	mov	r0, r3
 800aab6:	f000 ff9b 	bl	800b9f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aaba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aabc:	f000 fa7f 	bl	800afbe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aac0:	f000 fdd0 	bl	800b664 <xTaskResumeAll>
 800aac4:	4603      	mov	r3, r0
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d189      	bne.n	800a9de <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800aaca:	4b10      	ldr	r3, [pc, #64]	; (800ab0c <xQueueReceive+0x1bc>)
 800aacc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aad0:	601a      	str	r2, [r3, #0]
 800aad2:	f3bf 8f4f 	dsb	sy
 800aad6:	f3bf 8f6f 	isb	sy
 800aada:	e780      	b.n	800a9de <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aadc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aade:	f000 fa6e 	bl	800afbe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aae2:	f000 fdbf 	bl	800b664 <xTaskResumeAll>
 800aae6:	e77a      	b.n	800a9de <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aaea:	f000 fa68 	bl	800afbe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aaee:	f000 fdb9 	bl	800b664 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aaf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aaf4:	f000 fab5 	bl	800b062 <prvIsQueueEmpty>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	f43f af6f 	beq.w	800a9de <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ab00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3730      	adds	r7, #48	; 0x30
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	e000ed04 	.word	0xe000ed04

0800ab10 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b08e      	sub	sp, #56	; 0x38
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ab22:	2300      	movs	r3, #0
 800ab24:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ab26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d10a      	bne.n	800ab42 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ab2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab30:	f383 8811 	msr	BASEPRI, r3
 800ab34:	f3bf 8f6f 	isb	sy
 800ab38:	f3bf 8f4f 	dsb	sy
 800ab3c:	623b      	str	r3, [r7, #32]
}
 800ab3e:	bf00      	nop
 800ab40:	e7fe      	b.n	800ab40 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ab42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d00a      	beq.n	800ab60 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ab4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4e:	f383 8811 	msr	BASEPRI, r3
 800ab52:	f3bf 8f6f 	isb	sy
 800ab56:	f3bf 8f4f 	dsb	sy
 800ab5a:	61fb      	str	r3, [r7, #28]
}
 800ab5c:	bf00      	nop
 800ab5e:	e7fe      	b.n	800ab5e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab60:	f001 f954 	bl	800be0c <xTaskGetSchedulerState>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d102      	bne.n	800ab70 <xQueueSemaphoreTake+0x60>
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d101      	bne.n	800ab74 <xQueueSemaphoreTake+0x64>
 800ab70:	2301      	movs	r3, #1
 800ab72:	e000      	b.n	800ab76 <xQueueSemaphoreTake+0x66>
 800ab74:	2300      	movs	r3, #0
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d10a      	bne.n	800ab90 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ab7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7e:	f383 8811 	msr	BASEPRI, r3
 800ab82:	f3bf 8f6f 	isb	sy
 800ab86:	f3bf 8f4f 	dsb	sy
 800ab8a:	61bb      	str	r3, [r7, #24]
}
 800ab8c:	bf00      	nop
 800ab8e:	e7fe      	b.n	800ab8e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab90:	f001 ff98 	bl	800cac4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ab94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab98:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ab9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d024      	beq.n	800abea <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800aba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba2:	1e5a      	subs	r2, r3, #1
 800aba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d104      	bne.n	800abba <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800abb0:	f001 faa2 	bl	800c0f8 <pvTaskIncrementMutexHeldCount>
 800abb4:	4602      	mov	r2, r0
 800abb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abbc:	691b      	ldr	r3, [r3, #16]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d00f      	beq.n	800abe2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc4:	3310      	adds	r3, #16
 800abc6:	4618      	mov	r0, r3
 800abc8:	f000 ff62 	bl	800ba90 <xTaskRemoveFromEventList>
 800abcc:	4603      	mov	r3, r0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d007      	beq.n	800abe2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800abd2:	4b54      	ldr	r3, [pc, #336]	; (800ad24 <xQueueSemaphoreTake+0x214>)
 800abd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abd8:	601a      	str	r2, [r3, #0]
 800abda:	f3bf 8f4f 	dsb	sy
 800abde:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800abe2:	f001 ff9f 	bl	800cb24 <vPortExitCritical>
				return pdPASS;
 800abe6:	2301      	movs	r3, #1
 800abe8:	e097      	b.n	800ad1a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d111      	bne.n	800ac14 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800abf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d00a      	beq.n	800ac0c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800abf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfa:	f383 8811 	msr	BASEPRI, r3
 800abfe:	f3bf 8f6f 	isb	sy
 800ac02:	f3bf 8f4f 	dsb	sy
 800ac06:	617b      	str	r3, [r7, #20]
}
 800ac08:	bf00      	nop
 800ac0a:	e7fe      	b.n	800ac0a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ac0c:	f001 ff8a 	bl	800cb24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ac10:	2300      	movs	r3, #0
 800ac12:	e082      	b.n	800ad1a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d106      	bne.n	800ac28 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac1a:	f107 030c 	add.w	r3, r7, #12
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f000 ff9a 	bl	800bb58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac24:	2301      	movs	r3, #1
 800ac26:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac28:	f001 ff7c 	bl	800cb24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac2c:	f000 fd0c 	bl	800b648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac30:	f001 ff48 	bl	800cac4 <vPortEnterCritical>
 800ac34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac3a:	b25b      	sxtb	r3, r3
 800ac3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac40:	d103      	bne.n	800ac4a <xQueueSemaphoreTake+0x13a>
 800ac42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac44:	2200      	movs	r2, #0
 800ac46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac50:	b25b      	sxtb	r3, r3
 800ac52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac56:	d103      	bne.n	800ac60 <xQueueSemaphoreTake+0x150>
 800ac58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac60:	f001 ff60 	bl	800cb24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac64:	463a      	mov	r2, r7
 800ac66:	f107 030c 	add.w	r3, r7, #12
 800ac6a:	4611      	mov	r1, r2
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f000 ff89 	bl	800bb84 <xTaskCheckForTimeOut>
 800ac72:	4603      	mov	r3, r0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d132      	bne.n	800acde <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac7a:	f000 f9f2 	bl	800b062 <prvIsQueueEmpty>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d026      	beq.n	800acd2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d109      	bne.n	800aca0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ac8c:	f001 ff1a 	bl	800cac4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ac90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac92:	689b      	ldr	r3, [r3, #8]
 800ac94:	4618      	mov	r0, r3
 800ac96:	f001 f8d7 	bl	800be48 <xTaskPriorityInherit>
 800ac9a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ac9c:	f001 ff42 	bl	800cb24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca2:	3324      	adds	r3, #36	; 0x24
 800aca4:	683a      	ldr	r2, [r7, #0]
 800aca6:	4611      	mov	r1, r2
 800aca8:	4618      	mov	r0, r3
 800acaa:	f000 fea1 	bl	800b9f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800acae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800acb0:	f000 f985 	bl	800afbe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800acb4:	f000 fcd6 	bl	800b664 <xTaskResumeAll>
 800acb8:	4603      	mov	r3, r0
 800acba:	2b00      	cmp	r3, #0
 800acbc:	f47f af68 	bne.w	800ab90 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800acc0:	4b18      	ldr	r3, [pc, #96]	; (800ad24 <xQueueSemaphoreTake+0x214>)
 800acc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acc6:	601a      	str	r2, [r3, #0]
 800acc8:	f3bf 8f4f 	dsb	sy
 800accc:	f3bf 8f6f 	isb	sy
 800acd0:	e75e      	b.n	800ab90 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800acd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800acd4:	f000 f973 	bl	800afbe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800acd8:	f000 fcc4 	bl	800b664 <xTaskResumeAll>
 800acdc:	e758      	b.n	800ab90 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800acde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ace0:	f000 f96d 	bl	800afbe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ace4:	f000 fcbe 	bl	800b664 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ace8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800acea:	f000 f9ba 	bl	800b062 <prvIsQueueEmpty>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	f43f af4d 	beq.w	800ab90 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800acf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d00d      	beq.n	800ad18 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800acfc:	f001 fee2 	bl	800cac4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ad00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad02:	f000 f8b4 	bl	800ae6e <prvGetDisinheritPriorityAfterTimeout>
 800ad06:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ad08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad0a:	689b      	ldr	r3, [r3, #8]
 800ad0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f001 f970 	bl	800bff4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ad14:	f001 ff06 	bl	800cb24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ad18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3738      	adds	r7, #56	; 0x38
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	e000ed04 	.word	0xe000ed04

0800ad28 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b08e      	sub	sp, #56	; 0x38
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	60b9      	str	r1, [r7, #8]
 800ad32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d10a      	bne.n	800ad54 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ad3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad42:	f383 8811 	msr	BASEPRI, r3
 800ad46:	f3bf 8f6f 	isb	sy
 800ad4a:	f3bf 8f4f 	dsb	sy
 800ad4e:	623b      	str	r3, [r7, #32]
}
 800ad50:	bf00      	nop
 800ad52:	e7fe      	b.n	800ad52 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d103      	bne.n	800ad62 <xQueueReceiveFromISR+0x3a>
 800ad5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d101      	bne.n	800ad66 <xQueueReceiveFromISR+0x3e>
 800ad62:	2301      	movs	r3, #1
 800ad64:	e000      	b.n	800ad68 <xQueueReceiveFromISR+0x40>
 800ad66:	2300      	movs	r3, #0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d10a      	bne.n	800ad82 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ad6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad70:	f383 8811 	msr	BASEPRI, r3
 800ad74:	f3bf 8f6f 	isb	sy
 800ad78:	f3bf 8f4f 	dsb	sy
 800ad7c:	61fb      	str	r3, [r7, #28]
}
 800ad7e:	bf00      	nop
 800ad80:	e7fe      	b.n	800ad80 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ad82:	f001 ff81 	bl	800cc88 <vPortValidateInterruptPriority>
	__asm volatile
 800ad86:	f3ef 8211 	mrs	r2, BASEPRI
 800ad8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad8e:	f383 8811 	msr	BASEPRI, r3
 800ad92:	f3bf 8f6f 	isb	sy
 800ad96:	f3bf 8f4f 	dsb	sy
 800ad9a:	61ba      	str	r2, [r7, #24]
 800ad9c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ad9e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ada0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ada2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ada8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d02f      	beq.n	800ae0e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800adae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800adb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800adb8:	68b9      	ldr	r1, [r7, #8]
 800adba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800adbc:	f000 f8d9 	bl	800af72 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800adc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc2:	1e5a      	subs	r2, r3, #1
 800adc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800adc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800adcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800add0:	d112      	bne.n	800adf8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800add2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add4:	691b      	ldr	r3, [r3, #16]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d016      	beq.n	800ae08 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800addc:	3310      	adds	r3, #16
 800adde:	4618      	mov	r0, r3
 800ade0:	f000 fe56 	bl	800ba90 <xTaskRemoveFromEventList>
 800ade4:	4603      	mov	r3, r0
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d00e      	beq.n	800ae08 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d00b      	beq.n	800ae08 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2201      	movs	r2, #1
 800adf4:	601a      	str	r2, [r3, #0]
 800adf6:	e007      	b.n	800ae08 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800adf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800adfc:	3301      	adds	r3, #1
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	b25a      	sxtb	r2, r3
 800ae02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	637b      	str	r3, [r7, #52]	; 0x34
 800ae0c:	e001      	b.n	800ae12 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	637b      	str	r3, [r7, #52]	; 0x34
 800ae12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae14:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	f383 8811 	msr	BASEPRI, r3
}
 800ae1c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ae1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3738      	adds	r7, #56	; 0x38
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d10a      	bne.n	800ae50 <vQueueDelete+0x28>
	__asm volatile
 800ae3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae3e:	f383 8811 	msr	BASEPRI, r3
 800ae42:	f3bf 8f6f 	isb	sy
 800ae46:	f3bf 8f4f 	dsb	sy
 800ae4a:	60bb      	str	r3, [r7, #8]
}
 800ae4c:	bf00      	nop
 800ae4e:	e7fe      	b.n	800ae4e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ae50:	68f8      	ldr	r0, [r7, #12]
 800ae52:	f000 f95f 	bl	800b114 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d102      	bne.n	800ae66 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800ae60:	68f8      	ldr	r0, [r7, #12]
 800ae62:	f002 f81d 	bl	800cea0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ae66:	bf00      	nop
 800ae68:	3710      	adds	r7, #16
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}

0800ae6e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ae6e:	b480      	push	{r7}
 800ae70:	b085      	sub	sp, #20
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d006      	beq.n	800ae8c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ae88:	60fb      	str	r3, [r7, #12]
 800ae8a:	e001      	b.n	800ae90 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ae90:	68fb      	ldr	r3, [r7, #12]
	}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3714      	adds	r7, #20
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr

0800ae9e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ae9e:	b580      	push	{r7, lr}
 800aea0:	b086      	sub	sp, #24
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	60f8      	str	r0, [r7, #12]
 800aea6:	60b9      	str	r1, [r7, #8]
 800aea8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeb2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d10d      	bne.n	800aed8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d14d      	bne.n	800af60 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	689b      	ldr	r3, [r3, #8]
 800aec8:	4618      	mov	r0, r3
 800aeca:	f001 f825 	bl	800bf18 <xTaskPriorityDisinherit>
 800aece:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2200      	movs	r2, #0
 800aed4:	609a      	str	r2, [r3, #8]
 800aed6:	e043      	b.n	800af60 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d119      	bne.n	800af12 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	6858      	ldr	r0, [r3, #4]
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aee6:	461a      	mov	r2, r3
 800aee8:	68b9      	ldr	r1, [r7, #8]
 800aeea:	f005 f88b 	bl	8010004 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	685a      	ldr	r2, [r3, #4]
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef6:	441a      	add	r2, r3
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	685a      	ldr	r2, [r3, #4]
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	689b      	ldr	r3, [r3, #8]
 800af04:	429a      	cmp	r2, r3
 800af06:	d32b      	bcc.n	800af60 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681a      	ldr	r2, [r3, #0]
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	605a      	str	r2, [r3, #4]
 800af10:	e026      	b.n	800af60 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	68d8      	ldr	r0, [r3, #12]
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af1a:	461a      	mov	r2, r3
 800af1c:	68b9      	ldr	r1, [r7, #8]
 800af1e:	f005 f871 	bl	8010004 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	68da      	ldr	r2, [r3, #12]
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af2a:	425b      	negs	r3, r3
 800af2c:	441a      	add	r2, r3
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	68da      	ldr	r2, [r3, #12]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d207      	bcs.n	800af4e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	689a      	ldr	r2, [r3, #8]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af46:	425b      	negs	r3, r3
 800af48:	441a      	add	r2, r3
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2b02      	cmp	r3, #2
 800af52:	d105      	bne.n	800af60 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d002      	beq.n	800af60 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	3b01      	subs	r3, #1
 800af5e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	1c5a      	adds	r2, r3, #1
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800af68:	697b      	ldr	r3, [r7, #20]
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3718      	adds	r7, #24
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}

0800af72 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800af72:	b580      	push	{r7, lr}
 800af74:	b082      	sub	sp, #8
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
 800af7a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af80:	2b00      	cmp	r3, #0
 800af82:	d018      	beq.n	800afb6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	68da      	ldr	r2, [r3, #12]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af8c:	441a      	add	r2, r3
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	68da      	ldr	r2, [r3, #12]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	689b      	ldr	r3, [r3, #8]
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d303      	bcc.n	800afa6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681a      	ldr	r2, [r3, #0]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	68d9      	ldr	r1, [r3, #12]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afae:	461a      	mov	r2, r3
 800afb0:	6838      	ldr	r0, [r7, #0]
 800afb2:	f005 f827 	bl	8010004 <memcpy>
	}
}
 800afb6:	bf00      	nop
 800afb8:	3708      	adds	r7, #8
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}

0800afbe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b084      	sub	sp, #16
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800afc6:	f001 fd7d 	bl	800cac4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afd0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800afd2:	e011      	b.n	800aff8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d012      	beq.n	800b002 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	3324      	adds	r3, #36	; 0x24
 800afe0:	4618      	mov	r0, r3
 800afe2:	f000 fd55 	bl	800ba90 <xTaskRemoveFromEventList>
 800afe6:	4603      	mov	r3, r0
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d001      	beq.n	800aff0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800afec:	f000 fe2c 	bl	800bc48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aff0:	7bfb      	ldrb	r3, [r7, #15]
 800aff2:	3b01      	subs	r3, #1
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800affc:	2b00      	cmp	r3, #0
 800affe:	dce9      	bgt.n	800afd4 <prvUnlockQueue+0x16>
 800b000:	e000      	b.n	800b004 <prvUnlockQueue+0x46>
					break;
 800b002:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	22ff      	movs	r2, #255	; 0xff
 800b008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b00c:	f001 fd8a 	bl	800cb24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b010:	f001 fd58 	bl	800cac4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b01a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b01c:	e011      	b.n	800b042 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	691b      	ldr	r3, [r3, #16]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d012      	beq.n	800b04c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	3310      	adds	r3, #16
 800b02a:	4618      	mov	r0, r3
 800b02c:	f000 fd30 	bl	800ba90 <xTaskRemoveFromEventList>
 800b030:	4603      	mov	r3, r0
 800b032:	2b00      	cmp	r3, #0
 800b034:	d001      	beq.n	800b03a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b036:	f000 fe07 	bl	800bc48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b03a:	7bbb      	ldrb	r3, [r7, #14]
 800b03c:	3b01      	subs	r3, #1
 800b03e:	b2db      	uxtb	r3, r3
 800b040:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b042:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b046:	2b00      	cmp	r3, #0
 800b048:	dce9      	bgt.n	800b01e <prvUnlockQueue+0x60>
 800b04a:	e000      	b.n	800b04e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b04c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	22ff      	movs	r2, #255	; 0xff
 800b052:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b056:	f001 fd65 	bl	800cb24 <vPortExitCritical>
}
 800b05a:	bf00      	nop
 800b05c:	3710      	adds	r7, #16
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}

0800b062 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b062:	b580      	push	{r7, lr}
 800b064:	b084      	sub	sp, #16
 800b066:	af00      	add	r7, sp, #0
 800b068:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b06a:	f001 fd2b 	bl	800cac4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b072:	2b00      	cmp	r3, #0
 800b074:	d102      	bne.n	800b07c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b076:	2301      	movs	r3, #1
 800b078:	60fb      	str	r3, [r7, #12]
 800b07a:	e001      	b.n	800b080 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b07c:	2300      	movs	r3, #0
 800b07e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b080:	f001 fd50 	bl	800cb24 <vPortExitCritical>

	return xReturn;
 800b084:	68fb      	ldr	r3, [r7, #12]
}
 800b086:	4618      	mov	r0, r3
 800b088:	3710      	adds	r7, #16
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}

0800b08e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b08e:	b580      	push	{r7, lr}
 800b090:	b084      	sub	sp, #16
 800b092:	af00      	add	r7, sp, #0
 800b094:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b096:	f001 fd15 	bl	800cac4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d102      	bne.n	800b0ac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	60fb      	str	r3, [r7, #12]
 800b0aa:	e001      	b.n	800b0b0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b0b0:	f001 fd38 	bl	800cb24 <vPortExitCritical>

	return xReturn;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3710      	adds	r7, #16
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
	...

0800b0c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b085      	sub	sp, #20
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	60fb      	str	r3, [r7, #12]
 800b0ce:	e014      	b.n	800b0fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b0d0:	4a0f      	ldr	r2, [pc, #60]	; (800b110 <vQueueAddToRegistry+0x50>)
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d10b      	bne.n	800b0f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b0dc:	490c      	ldr	r1, [pc, #48]	; (800b110 <vQueueAddToRegistry+0x50>)
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	683a      	ldr	r2, [r7, #0]
 800b0e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b0e6:	4a0a      	ldr	r2, [pc, #40]	; (800b110 <vQueueAddToRegistry+0x50>)
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	00db      	lsls	r3, r3, #3
 800b0ec:	4413      	add	r3, r2
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b0f2:	e006      	b.n	800b102 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	60fb      	str	r3, [r7, #12]
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2b07      	cmp	r3, #7
 800b0fe:	d9e7      	bls.n	800b0d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b100:	bf00      	nop
 800b102:	bf00      	nop
 800b104:	3714      	adds	r7, #20
 800b106:	46bd      	mov	sp, r7
 800b108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10c:	4770      	bx	lr
 800b10e:	bf00      	nop
 800b110:	20005ad8 	.word	0x20005ad8

0800b114 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b114:	b480      	push	{r7}
 800b116:	b085      	sub	sp, #20
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b11c:	2300      	movs	r3, #0
 800b11e:	60fb      	str	r3, [r7, #12]
 800b120:	e016      	b.n	800b150 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b122:	4a10      	ldr	r2, [pc, #64]	; (800b164 <vQueueUnregisterQueue+0x50>)
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	00db      	lsls	r3, r3, #3
 800b128:	4413      	add	r3, r2
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	687a      	ldr	r2, [r7, #4]
 800b12e:	429a      	cmp	r2, r3
 800b130:	d10b      	bne.n	800b14a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b132:	4a0c      	ldr	r2, [pc, #48]	; (800b164 <vQueueUnregisterQueue+0x50>)
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2100      	movs	r1, #0
 800b138:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b13c:	4a09      	ldr	r2, [pc, #36]	; (800b164 <vQueueUnregisterQueue+0x50>)
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	00db      	lsls	r3, r3, #3
 800b142:	4413      	add	r3, r2
 800b144:	2200      	movs	r2, #0
 800b146:	605a      	str	r2, [r3, #4]
				break;
 800b148:	e006      	b.n	800b158 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	3301      	adds	r3, #1
 800b14e:	60fb      	str	r3, [r7, #12]
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	2b07      	cmp	r3, #7
 800b154:	d9e5      	bls.n	800b122 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b156:	bf00      	nop
 800b158:	bf00      	nop
 800b15a:	3714      	adds	r7, #20
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr
 800b164:	20005ad8 	.word	0x20005ad8

0800b168 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b086      	sub	sp, #24
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	60f8      	str	r0, [r7, #12]
 800b170:	60b9      	str	r1, [r7, #8]
 800b172:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b178:	f001 fca4 	bl	800cac4 <vPortEnterCritical>
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b182:	b25b      	sxtb	r3, r3
 800b184:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b188:	d103      	bne.n	800b192 <vQueueWaitForMessageRestricted+0x2a>
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	2200      	movs	r2, #0
 800b18e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b198:	b25b      	sxtb	r3, r3
 800b19a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b19e:	d103      	bne.n	800b1a8 <vQueueWaitForMessageRestricted+0x40>
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1a8:	f001 fcbc 	bl	800cb24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d106      	bne.n	800b1c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	3324      	adds	r3, #36	; 0x24
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	68b9      	ldr	r1, [r7, #8]
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f000 fc3b 	bl	800ba38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b1c2:	6978      	ldr	r0, [r7, #20]
 800b1c4:	f7ff fefb 	bl	800afbe <prvUnlockQueue>
	}
 800b1c8:	bf00      	nop
 800b1ca:	3718      	adds	r7, #24
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b08e      	sub	sp, #56	; 0x38
 800b1d4:	af04      	add	r7, sp, #16
 800b1d6:	60f8      	str	r0, [r7, #12]
 800b1d8:	60b9      	str	r1, [r7, #8]
 800b1da:	607a      	str	r2, [r7, #4]
 800b1dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b1de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d10a      	bne.n	800b1fa <xTaskCreateStatic+0x2a>
	__asm volatile
 800b1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e8:	f383 8811 	msr	BASEPRI, r3
 800b1ec:	f3bf 8f6f 	isb	sy
 800b1f0:	f3bf 8f4f 	dsb	sy
 800b1f4:	623b      	str	r3, [r7, #32]
}
 800b1f6:	bf00      	nop
 800b1f8:	e7fe      	b.n	800b1f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d10a      	bne.n	800b216 <xTaskCreateStatic+0x46>
	__asm volatile
 800b200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b204:	f383 8811 	msr	BASEPRI, r3
 800b208:	f3bf 8f6f 	isb	sy
 800b20c:	f3bf 8f4f 	dsb	sy
 800b210:	61fb      	str	r3, [r7, #28]
}
 800b212:	bf00      	nop
 800b214:	e7fe      	b.n	800b214 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b216:	235c      	movs	r3, #92	; 0x5c
 800b218:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	2b5c      	cmp	r3, #92	; 0x5c
 800b21e:	d00a      	beq.n	800b236 <xTaskCreateStatic+0x66>
	__asm volatile
 800b220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b224:	f383 8811 	msr	BASEPRI, r3
 800b228:	f3bf 8f6f 	isb	sy
 800b22c:	f3bf 8f4f 	dsb	sy
 800b230:	61bb      	str	r3, [r7, #24]
}
 800b232:	bf00      	nop
 800b234:	e7fe      	b.n	800b234 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b236:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d01e      	beq.n	800b27c <xTaskCreateStatic+0xac>
 800b23e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b240:	2b00      	cmp	r3, #0
 800b242:	d01b      	beq.n	800b27c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b246:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b24c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b250:	2202      	movs	r2, #2
 800b252:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b256:	2300      	movs	r3, #0
 800b258:	9303      	str	r3, [sp, #12]
 800b25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25c:	9302      	str	r3, [sp, #8]
 800b25e:	f107 0314 	add.w	r3, r7, #20
 800b262:	9301      	str	r3, [sp, #4]
 800b264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b266:	9300      	str	r3, [sp, #0]
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	68b9      	ldr	r1, [r7, #8]
 800b26e:	68f8      	ldr	r0, [r7, #12]
 800b270:	f000 f850 	bl	800b314 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b274:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b276:	f000 f8dd 	bl	800b434 <prvAddNewTaskToReadyList>
 800b27a:	e001      	b.n	800b280 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b27c:	2300      	movs	r3, #0
 800b27e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b280:	697b      	ldr	r3, [r7, #20]
	}
 800b282:	4618      	mov	r0, r3
 800b284:	3728      	adds	r7, #40	; 0x28
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}

0800b28a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b28a:	b580      	push	{r7, lr}
 800b28c:	b08c      	sub	sp, #48	; 0x30
 800b28e:	af04      	add	r7, sp, #16
 800b290:	60f8      	str	r0, [r7, #12]
 800b292:	60b9      	str	r1, [r7, #8]
 800b294:	603b      	str	r3, [r7, #0]
 800b296:	4613      	mov	r3, r2
 800b298:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b29a:	88fb      	ldrh	r3, [r7, #6]
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f001 fd32 	bl	800cd08 <pvPortMalloc>
 800b2a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d00e      	beq.n	800b2ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b2ac:	205c      	movs	r0, #92	; 0x5c
 800b2ae:	f001 fd2b 	bl	800cd08 <pvPortMalloc>
 800b2b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d003      	beq.n	800b2c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b2ba:	69fb      	ldr	r3, [r7, #28]
 800b2bc:	697a      	ldr	r2, [r7, #20]
 800b2be:	631a      	str	r2, [r3, #48]	; 0x30
 800b2c0:	e005      	b.n	800b2ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b2c2:	6978      	ldr	r0, [r7, #20]
 800b2c4:	f001 fdec 	bl	800cea0 <vPortFree>
 800b2c8:	e001      	b.n	800b2ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b2ce:	69fb      	ldr	r3, [r7, #28]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d017      	beq.n	800b304 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b2d4:	69fb      	ldr	r3, [r7, #28]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b2dc:	88fa      	ldrh	r2, [r7, #6]
 800b2de:	2300      	movs	r3, #0
 800b2e0:	9303      	str	r3, [sp, #12]
 800b2e2:	69fb      	ldr	r3, [r7, #28]
 800b2e4:	9302      	str	r3, [sp, #8]
 800b2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e8:	9301      	str	r3, [sp, #4]
 800b2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ec:	9300      	str	r3, [sp, #0]
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	68b9      	ldr	r1, [r7, #8]
 800b2f2:	68f8      	ldr	r0, [r7, #12]
 800b2f4:	f000 f80e 	bl	800b314 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b2f8:	69f8      	ldr	r0, [r7, #28]
 800b2fa:	f000 f89b 	bl	800b434 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b2fe:	2301      	movs	r3, #1
 800b300:	61bb      	str	r3, [r7, #24]
 800b302:	e002      	b.n	800b30a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b304:	f04f 33ff 	mov.w	r3, #4294967295
 800b308:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b30a:	69bb      	ldr	r3, [r7, #24]
	}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3720      	adds	r7, #32
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b088      	sub	sp, #32
 800b318:	af00      	add	r7, sp, #0
 800b31a:	60f8      	str	r0, [r7, #12]
 800b31c:	60b9      	str	r1, [r7, #8]
 800b31e:	607a      	str	r2, [r7, #4]
 800b320:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b324:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	009b      	lsls	r3, r3, #2
 800b32a:	461a      	mov	r2, r3
 800b32c:	21a5      	movs	r1, #165	; 0xa5
 800b32e:	f004 fe91 	bl	8010054 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b33c:	3b01      	subs	r3, #1
 800b33e:	009b      	lsls	r3, r3, #2
 800b340:	4413      	add	r3, r2
 800b342:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b344:	69bb      	ldr	r3, [r7, #24]
 800b346:	f023 0307 	bic.w	r3, r3, #7
 800b34a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b34c:	69bb      	ldr	r3, [r7, #24]
 800b34e:	f003 0307 	and.w	r3, r3, #7
 800b352:	2b00      	cmp	r3, #0
 800b354:	d00a      	beq.n	800b36c <prvInitialiseNewTask+0x58>
	__asm volatile
 800b356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b35a:	f383 8811 	msr	BASEPRI, r3
 800b35e:	f3bf 8f6f 	isb	sy
 800b362:	f3bf 8f4f 	dsb	sy
 800b366:	617b      	str	r3, [r7, #20]
}
 800b368:	bf00      	nop
 800b36a:	e7fe      	b.n	800b36a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d01f      	beq.n	800b3b2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b372:	2300      	movs	r3, #0
 800b374:	61fb      	str	r3, [r7, #28]
 800b376:	e012      	b.n	800b39e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b378:	68ba      	ldr	r2, [r7, #8]
 800b37a:	69fb      	ldr	r3, [r7, #28]
 800b37c:	4413      	add	r3, r2
 800b37e:	7819      	ldrb	r1, [r3, #0]
 800b380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b382:	69fb      	ldr	r3, [r7, #28]
 800b384:	4413      	add	r3, r2
 800b386:	3334      	adds	r3, #52	; 0x34
 800b388:	460a      	mov	r2, r1
 800b38a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b38c:	68ba      	ldr	r2, [r7, #8]
 800b38e:	69fb      	ldr	r3, [r7, #28]
 800b390:	4413      	add	r3, r2
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d006      	beq.n	800b3a6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b398:	69fb      	ldr	r3, [r7, #28]
 800b39a:	3301      	adds	r3, #1
 800b39c:	61fb      	str	r3, [r7, #28]
 800b39e:	69fb      	ldr	r3, [r7, #28]
 800b3a0:	2b0f      	cmp	r3, #15
 800b3a2:	d9e9      	bls.n	800b378 <prvInitialiseNewTask+0x64>
 800b3a4:	e000      	b.n	800b3a8 <prvInitialiseNewTask+0x94>
			{
				break;
 800b3a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b3b0:	e003      	b.n	800b3ba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3bc:	2b37      	cmp	r3, #55	; 0x37
 800b3be:	d901      	bls.n	800b3c4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b3c0:	2337      	movs	r3, #55	; 0x37
 800b3c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d8:	3304      	adds	r3, #4
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f7fe fe56 	bl	800a08c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e2:	3318      	adds	r3, #24
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7fe fe51 	bl	800a08c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b402:	2200      	movs	r2, #0
 800b404:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b408:	2200      	movs	r2, #0
 800b40a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b40e:	683a      	ldr	r2, [r7, #0]
 800b410:	68f9      	ldr	r1, [r7, #12]
 800b412:	69b8      	ldr	r0, [r7, #24]
 800b414:	f001 fa26 	bl	800c864 <pxPortInitialiseStack>
 800b418:	4602      	mov	r2, r0
 800b41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b41c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b420:	2b00      	cmp	r3, #0
 800b422:	d002      	beq.n	800b42a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b428:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b42a:	bf00      	nop
 800b42c:	3720      	adds	r7, #32
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}
	...

0800b434 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b082      	sub	sp, #8
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b43c:	f001 fb42 	bl	800cac4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b440:	4b2d      	ldr	r3, [pc, #180]	; (800b4f8 <prvAddNewTaskToReadyList+0xc4>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	3301      	adds	r3, #1
 800b446:	4a2c      	ldr	r2, [pc, #176]	; (800b4f8 <prvAddNewTaskToReadyList+0xc4>)
 800b448:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b44a:	4b2c      	ldr	r3, [pc, #176]	; (800b4fc <prvAddNewTaskToReadyList+0xc8>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d109      	bne.n	800b466 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b452:	4a2a      	ldr	r2, [pc, #168]	; (800b4fc <prvAddNewTaskToReadyList+0xc8>)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b458:	4b27      	ldr	r3, [pc, #156]	; (800b4f8 <prvAddNewTaskToReadyList+0xc4>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d110      	bne.n	800b482 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b460:	f000 fc16 	bl	800bc90 <prvInitialiseTaskLists>
 800b464:	e00d      	b.n	800b482 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b466:	4b26      	ldr	r3, [pc, #152]	; (800b500 <prvAddNewTaskToReadyList+0xcc>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d109      	bne.n	800b482 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b46e:	4b23      	ldr	r3, [pc, #140]	; (800b4fc <prvAddNewTaskToReadyList+0xc8>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b478:	429a      	cmp	r2, r3
 800b47a:	d802      	bhi.n	800b482 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b47c:	4a1f      	ldr	r2, [pc, #124]	; (800b4fc <prvAddNewTaskToReadyList+0xc8>)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b482:	4b20      	ldr	r3, [pc, #128]	; (800b504 <prvAddNewTaskToReadyList+0xd0>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	3301      	adds	r3, #1
 800b488:	4a1e      	ldr	r2, [pc, #120]	; (800b504 <prvAddNewTaskToReadyList+0xd0>)
 800b48a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b48c:	4b1d      	ldr	r3, [pc, #116]	; (800b504 <prvAddNewTaskToReadyList+0xd0>)
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b498:	4b1b      	ldr	r3, [pc, #108]	; (800b508 <prvAddNewTaskToReadyList+0xd4>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d903      	bls.n	800b4a8 <prvAddNewTaskToReadyList+0x74>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4a4:	4a18      	ldr	r2, [pc, #96]	; (800b508 <prvAddNewTaskToReadyList+0xd4>)
 800b4a6:	6013      	str	r3, [r2, #0]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	009b      	lsls	r3, r3, #2
 800b4b0:	4413      	add	r3, r2
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	4a15      	ldr	r2, [pc, #84]	; (800b50c <prvAddNewTaskToReadyList+0xd8>)
 800b4b6:	441a      	add	r2, r3
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	3304      	adds	r3, #4
 800b4bc:	4619      	mov	r1, r3
 800b4be:	4610      	mov	r0, r2
 800b4c0:	f7fe fdf1 	bl	800a0a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b4c4:	f001 fb2e 	bl	800cb24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b4c8:	4b0d      	ldr	r3, [pc, #52]	; (800b500 <prvAddNewTaskToReadyList+0xcc>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d00e      	beq.n	800b4ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b4d0:	4b0a      	ldr	r3, [pc, #40]	; (800b4fc <prvAddNewTaskToReadyList+0xc8>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d207      	bcs.n	800b4ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b4de:	4b0c      	ldr	r3, [pc, #48]	; (800b510 <prvAddNewTaskToReadyList+0xdc>)
 800b4e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4e4:	601a      	str	r2, [r3, #0]
 800b4e6:	f3bf 8f4f 	dsb	sy
 800b4ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4ee:	bf00      	nop
 800b4f0:	3708      	adds	r7, #8
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	20000f20 	.word	0x20000f20
 800b4fc:	20000a4c 	.word	0x20000a4c
 800b500:	20000f2c 	.word	0x20000f2c
 800b504:	20000f3c 	.word	0x20000f3c
 800b508:	20000f28 	.word	0x20000f28
 800b50c:	20000a50 	.word	0x20000a50
 800b510:	e000ed04 	.word	0xe000ed04

0800b514 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b514:	b580      	push	{r7, lr}
 800b516:	b084      	sub	sp, #16
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b51c:	2300      	movs	r3, #0
 800b51e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d017      	beq.n	800b556 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b526:	4b13      	ldr	r3, [pc, #76]	; (800b574 <vTaskDelay+0x60>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d00a      	beq.n	800b544 <vTaskDelay+0x30>
	__asm volatile
 800b52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b532:	f383 8811 	msr	BASEPRI, r3
 800b536:	f3bf 8f6f 	isb	sy
 800b53a:	f3bf 8f4f 	dsb	sy
 800b53e:	60bb      	str	r3, [r7, #8]
}
 800b540:	bf00      	nop
 800b542:	e7fe      	b.n	800b542 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b544:	f000 f880 	bl	800b648 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b548:	2100      	movs	r1, #0
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 fde8 	bl	800c120 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b550:	f000 f888 	bl	800b664 <xTaskResumeAll>
 800b554:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d107      	bne.n	800b56c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b55c:	4b06      	ldr	r3, [pc, #24]	; (800b578 <vTaskDelay+0x64>)
 800b55e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b562:	601a      	str	r2, [r3, #0]
 800b564:	f3bf 8f4f 	dsb	sy
 800b568:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b56c:	bf00      	nop
 800b56e:	3710      	adds	r7, #16
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}
 800b574:	20000f48 	.word	0x20000f48
 800b578:	e000ed04 	.word	0xe000ed04

0800b57c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b08a      	sub	sp, #40	; 0x28
 800b580:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b582:	2300      	movs	r3, #0
 800b584:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b586:	2300      	movs	r3, #0
 800b588:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b58a:	463a      	mov	r2, r7
 800b58c:	1d39      	adds	r1, r7, #4
 800b58e:	f107 0308 	add.w	r3, r7, #8
 800b592:	4618      	mov	r0, r3
 800b594:	f7fe fd26 	bl	8009fe4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b598:	6839      	ldr	r1, [r7, #0]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	68ba      	ldr	r2, [r7, #8]
 800b59e:	9202      	str	r2, [sp, #8]
 800b5a0:	9301      	str	r3, [sp, #4]
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	9300      	str	r3, [sp, #0]
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	460a      	mov	r2, r1
 800b5aa:	4921      	ldr	r1, [pc, #132]	; (800b630 <vTaskStartScheduler+0xb4>)
 800b5ac:	4821      	ldr	r0, [pc, #132]	; (800b634 <vTaskStartScheduler+0xb8>)
 800b5ae:	f7ff fe0f 	bl	800b1d0 <xTaskCreateStatic>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	4a20      	ldr	r2, [pc, #128]	; (800b638 <vTaskStartScheduler+0xbc>)
 800b5b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b5b8:	4b1f      	ldr	r3, [pc, #124]	; (800b638 <vTaskStartScheduler+0xbc>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d002      	beq.n	800b5c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	617b      	str	r3, [r7, #20]
 800b5c4:	e001      	b.n	800b5ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	d102      	bne.n	800b5d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b5d0:	f000 fdfa 	bl	800c1c8 <xTimerCreateTimerTask>
 800b5d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	d116      	bne.n	800b60a <vTaskStartScheduler+0x8e>
	__asm volatile
 800b5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e0:	f383 8811 	msr	BASEPRI, r3
 800b5e4:	f3bf 8f6f 	isb	sy
 800b5e8:	f3bf 8f4f 	dsb	sy
 800b5ec:	613b      	str	r3, [r7, #16]
}
 800b5ee:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b5f0:	4b12      	ldr	r3, [pc, #72]	; (800b63c <vTaskStartScheduler+0xc0>)
 800b5f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b5f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b5f8:	4b11      	ldr	r3, [pc, #68]	; (800b640 <vTaskStartScheduler+0xc4>)
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b5fe:	4b11      	ldr	r3, [pc, #68]	; (800b644 <vTaskStartScheduler+0xc8>)
 800b600:	2200      	movs	r2, #0
 800b602:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b604:	f001 f9bc 	bl	800c980 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b608:	e00e      	b.n	800b628 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b610:	d10a      	bne.n	800b628 <vTaskStartScheduler+0xac>
	__asm volatile
 800b612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b616:	f383 8811 	msr	BASEPRI, r3
 800b61a:	f3bf 8f6f 	isb	sy
 800b61e:	f3bf 8f4f 	dsb	sy
 800b622:	60fb      	str	r3, [r7, #12]
}
 800b624:	bf00      	nop
 800b626:	e7fe      	b.n	800b626 <vTaskStartScheduler+0xaa>
}
 800b628:	bf00      	nop
 800b62a:	3718      	adds	r7, #24
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}
 800b630:	08015394 	.word	0x08015394
 800b634:	0800bc61 	.word	0x0800bc61
 800b638:	20000f44 	.word	0x20000f44
 800b63c:	20000f40 	.word	0x20000f40
 800b640:	20000f2c 	.word	0x20000f2c
 800b644:	20000f24 	.word	0x20000f24

0800b648 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b648:	b480      	push	{r7}
 800b64a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b64c:	4b04      	ldr	r3, [pc, #16]	; (800b660 <vTaskSuspendAll+0x18>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	3301      	adds	r3, #1
 800b652:	4a03      	ldr	r2, [pc, #12]	; (800b660 <vTaskSuspendAll+0x18>)
 800b654:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b656:	bf00      	nop
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr
 800b660:	20000f48 	.word	0x20000f48

0800b664 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b084      	sub	sp, #16
 800b668:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b66a:	2300      	movs	r3, #0
 800b66c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b66e:	2300      	movs	r3, #0
 800b670:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b672:	4b42      	ldr	r3, [pc, #264]	; (800b77c <xTaskResumeAll+0x118>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d10a      	bne.n	800b690 <xTaskResumeAll+0x2c>
	__asm volatile
 800b67a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b67e:	f383 8811 	msr	BASEPRI, r3
 800b682:	f3bf 8f6f 	isb	sy
 800b686:	f3bf 8f4f 	dsb	sy
 800b68a:	603b      	str	r3, [r7, #0]
}
 800b68c:	bf00      	nop
 800b68e:	e7fe      	b.n	800b68e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b690:	f001 fa18 	bl	800cac4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b694:	4b39      	ldr	r3, [pc, #228]	; (800b77c <xTaskResumeAll+0x118>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	3b01      	subs	r3, #1
 800b69a:	4a38      	ldr	r2, [pc, #224]	; (800b77c <xTaskResumeAll+0x118>)
 800b69c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b69e:	4b37      	ldr	r3, [pc, #220]	; (800b77c <xTaskResumeAll+0x118>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d162      	bne.n	800b76c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b6a6:	4b36      	ldr	r3, [pc, #216]	; (800b780 <xTaskResumeAll+0x11c>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d05e      	beq.n	800b76c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b6ae:	e02f      	b.n	800b710 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6b0:	4b34      	ldr	r3, [pc, #208]	; (800b784 <xTaskResumeAll+0x120>)
 800b6b2:	68db      	ldr	r3, [r3, #12]
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	3318      	adds	r3, #24
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f7fe fd4f 	bl	800a160 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	3304      	adds	r3, #4
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f7fe fd4a 	bl	800a160 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6d0:	4b2d      	ldr	r3, [pc, #180]	; (800b788 <xTaskResumeAll+0x124>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d903      	bls.n	800b6e0 <xTaskResumeAll+0x7c>
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6dc:	4a2a      	ldr	r2, [pc, #168]	; (800b788 <xTaskResumeAll+0x124>)
 800b6de:	6013      	str	r3, [r2, #0]
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6e4:	4613      	mov	r3, r2
 800b6e6:	009b      	lsls	r3, r3, #2
 800b6e8:	4413      	add	r3, r2
 800b6ea:	009b      	lsls	r3, r3, #2
 800b6ec:	4a27      	ldr	r2, [pc, #156]	; (800b78c <xTaskResumeAll+0x128>)
 800b6ee:	441a      	add	r2, r3
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	3304      	adds	r3, #4
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	4610      	mov	r0, r2
 800b6f8:	f7fe fcd5 	bl	800a0a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b700:	4b23      	ldr	r3, [pc, #140]	; (800b790 <xTaskResumeAll+0x12c>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b706:	429a      	cmp	r2, r3
 800b708:	d302      	bcc.n	800b710 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b70a:	4b22      	ldr	r3, [pc, #136]	; (800b794 <xTaskResumeAll+0x130>)
 800b70c:	2201      	movs	r2, #1
 800b70e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b710:	4b1c      	ldr	r3, [pc, #112]	; (800b784 <xTaskResumeAll+0x120>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d1cb      	bne.n	800b6b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d001      	beq.n	800b722 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b71e:	f000 fb55 	bl	800bdcc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b722:	4b1d      	ldr	r3, [pc, #116]	; (800b798 <xTaskResumeAll+0x134>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d010      	beq.n	800b750 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b72e:	f000 f847 	bl	800b7c0 <xTaskIncrementTick>
 800b732:	4603      	mov	r3, r0
 800b734:	2b00      	cmp	r3, #0
 800b736:	d002      	beq.n	800b73e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b738:	4b16      	ldr	r3, [pc, #88]	; (800b794 <xTaskResumeAll+0x130>)
 800b73a:	2201      	movs	r2, #1
 800b73c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	3b01      	subs	r3, #1
 800b742:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d1f1      	bne.n	800b72e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b74a:	4b13      	ldr	r3, [pc, #76]	; (800b798 <xTaskResumeAll+0x134>)
 800b74c:	2200      	movs	r2, #0
 800b74e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b750:	4b10      	ldr	r3, [pc, #64]	; (800b794 <xTaskResumeAll+0x130>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d009      	beq.n	800b76c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b758:	2301      	movs	r3, #1
 800b75a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b75c:	4b0f      	ldr	r3, [pc, #60]	; (800b79c <xTaskResumeAll+0x138>)
 800b75e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b762:	601a      	str	r2, [r3, #0]
 800b764:	f3bf 8f4f 	dsb	sy
 800b768:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b76c:	f001 f9da 	bl	800cb24 <vPortExitCritical>

	return xAlreadyYielded;
 800b770:	68bb      	ldr	r3, [r7, #8]
}
 800b772:	4618      	mov	r0, r3
 800b774:	3710      	adds	r7, #16
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
 800b77a:	bf00      	nop
 800b77c:	20000f48 	.word	0x20000f48
 800b780:	20000f20 	.word	0x20000f20
 800b784:	20000ee0 	.word	0x20000ee0
 800b788:	20000f28 	.word	0x20000f28
 800b78c:	20000a50 	.word	0x20000a50
 800b790:	20000a4c 	.word	0x20000a4c
 800b794:	20000f34 	.word	0x20000f34
 800b798:	20000f30 	.word	0x20000f30
 800b79c:	e000ed04 	.word	0xe000ed04

0800b7a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b083      	sub	sp, #12
 800b7a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b7a6:	4b05      	ldr	r3, [pc, #20]	; (800b7bc <xTaskGetTickCount+0x1c>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b7ac:	687b      	ldr	r3, [r7, #4]
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	370c      	adds	r7, #12
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr
 800b7ba:	bf00      	nop
 800b7bc:	20000f24 	.word	0x20000f24

0800b7c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b086      	sub	sp, #24
 800b7c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7ca:	4b4f      	ldr	r3, [pc, #316]	; (800b908 <xTaskIncrementTick+0x148>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	f040 808f 	bne.w	800b8f2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b7d4:	4b4d      	ldr	r3, [pc, #308]	; (800b90c <xTaskIncrementTick+0x14c>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	3301      	adds	r3, #1
 800b7da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b7dc:	4a4b      	ldr	r2, [pc, #300]	; (800b90c <xTaskIncrementTick+0x14c>)
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d120      	bne.n	800b82a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b7e8:	4b49      	ldr	r3, [pc, #292]	; (800b910 <xTaskIncrementTick+0x150>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d00a      	beq.n	800b808 <xTaskIncrementTick+0x48>
	__asm volatile
 800b7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f6:	f383 8811 	msr	BASEPRI, r3
 800b7fa:	f3bf 8f6f 	isb	sy
 800b7fe:	f3bf 8f4f 	dsb	sy
 800b802:	603b      	str	r3, [r7, #0]
}
 800b804:	bf00      	nop
 800b806:	e7fe      	b.n	800b806 <xTaskIncrementTick+0x46>
 800b808:	4b41      	ldr	r3, [pc, #260]	; (800b910 <xTaskIncrementTick+0x150>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	60fb      	str	r3, [r7, #12]
 800b80e:	4b41      	ldr	r3, [pc, #260]	; (800b914 <xTaskIncrementTick+0x154>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	4a3f      	ldr	r2, [pc, #252]	; (800b910 <xTaskIncrementTick+0x150>)
 800b814:	6013      	str	r3, [r2, #0]
 800b816:	4a3f      	ldr	r2, [pc, #252]	; (800b914 <xTaskIncrementTick+0x154>)
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	6013      	str	r3, [r2, #0]
 800b81c:	4b3e      	ldr	r3, [pc, #248]	; (800b918 <xTaskIncrementTick+0x158>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	3301      	adds	r3, #1
 800b822:	4a3d      	ldr	r2, [pc, #244]	; (800b918 <xTaskIncrementTick+0x158>)
 800b824:	6013      	str	r3, [r2, #0]
 800b826:	f000 fad1 	bl	800bdcc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b82a:	4b3c      	ldr	r3, [pc, #240]	; (800b91c <xTaskIncrementTick+0x15c>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	693a      	ldr	r2, [r7, #16]
 800b830:	429a      	cmp	r2, r3
 800b832:	d349      	bcc.n	800b8c8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b834:	4b36      	ldr	r3, [pc, #216]	; (800b910 <xTaskIncrementTick+0x150>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d104      	bne.n	800b848 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b83e:	4b37      	ldr	r3, [pc, #220]	; (800b91c <xTaskIncrementTick+0x15c>)
 800b840:	f04f 32ff 	mov.w	r2, #4294967295
 800b844:	601a      	str	r2, [r3, #0]
					break;
 800b846:	e03f      	b.n	800b8c8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b848:	4b31      	ldr	r3, [pc, #196]	; (800b910 <xTaskIncrementTick+0x150>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	68db      	ldr	r3, [r3, #12]
 800b84e:	68db      	ldr	r3, [r3, #12]
 800b850:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b858:	693a      	ldr	r2, [r7, #16]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d203      	bcs.n	800b868 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b860:	4a2e      	ldr	r2, [pc, #184]	; (800b91c <xTaskIncrementTick+0x15c>)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b866:	e02f      	b.n	800b8c8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	3304      	adds	r3, #4
 800b86c:	4618      	mov	r0, r3
 800b86e:	f7fe fc77 	bl	800a160 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b876:	2b00      	cmp	r3, #0
 800b878:	d004      	beq.n	800b884 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	3318      	adds	r3, #24
 800b87e:	4618      	mov	r0, r3
 800b880:	f7fe fc6e 	bl	800a160 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b888:	4b25      	ldr	r3, [pc, #148]	; (800b920 <xTaskIncrementTick+0x160>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d903      	bls.n	800b898 <xTaskIncrementTick+0xd8>
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b894:	4a22      	ldr	r2, [pc, #136]	; (800b920 <xTaskIncrementTick+0x160>)
 800b896:	6013      	str	r3, [r2, #0]
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b89c:	4613      	mov	r3, r2
 800b89e:	009b      	lsls	r3, r3, #2
 800b8a0:	4413      	add	r3, r2
 800b8a2:	009b      	lsls	r3, r3, #2
 800b8a4:	4a1f      	ldr	r2, [pc, #124]	; (800b924 <xTaskIncrementTick+0x164>)
 800b8a6:	441a      	add	r2, r3
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	3304      	adds	r3, #4
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	4610      	mov	r0, r2
 800b8b0:	f7fe fbf9 	bl	800a0a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8b8:	4b1b      	ldr	r3, [pc, #108]	; (800b928 <xTaskIncrementTick+0x168>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	d3b8      	bcc.n	800b834 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8c6:	e7b5      	b.n	800b834 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b8c8:	4b17      	ldr	r3, [pc, #92]	; (800b928 <xTaskIncrementTick+0x168>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8ce:	4915      	ldr	r1, [pc, #84]	; (800b924 <xTaskIncrementTick+0x164>)
 800b8d0:	4613      	mov	r3, r2
 800b8d2:	009b      	lsls	r3, r3, #2
 800b8d4:	4413      	add	r3, r2
 800b8d6:	009b      	lsls	r3, r3, #2
 800b8d8:	440b      	add	r3, r1
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	d901      	bls.n	800b8e4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b8e4:	4b11      	ldr	r3, [pc, #68]	; (800b92c <xTaskIncrementTick+0x16c>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d007      	beq.n	800b8fc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	617b      	str	r3, [r7, #20]
 800b8f0:	e004      	b.n	800b8fc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b8f2:	4b0f      	ldr	r3, [pc, #60]	; (800b930 <xTaskIncrementTick+0x170>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	4a0d      	ldr	r2, [pc, #52]	; (800b930 <xTaskIncrementTick+0x170>)
 800b8fa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b8fc:	697b      	ldr	r3, [r7, #20]
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3718      	adds	r7, #24
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}
 800b906:	bf00      	nop
 800b908:	20000f48 	.word	0x20000f48
 800b90c:	20000f24 	.word	0x20000f24
 800b910:	20000ed8 	.word	0x20000ed8
 800b914:	20000edc 	.word	0x20000edc
 800b918:	20000f38 	.word	0x20000f38
 800b91c:	20000f40 	.word	0x20000f40
 800b920:	20000f28 	.word	0x20000f28
 800b924:	20000a50 	.word	0x20000a50
 800b928:	20000a4c 	.word	0x20000a4c
 800b92c:	20000f34 	.word	0x20000f34
 800b930:	20000f30 	.word	0x20000f30

0800b934 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b934:	b480      	push	{r7}
 800b936:	b085      	sub	sp, #20
 800b938:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b93a:	4b28      	ldr	r3, [pc, #160]	; (800b9dc <vTaskSwitchContext+0xa8>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d003      	beq.n	800b94a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b942:	4b27      	ldr	r3, [pc, #156]	; (800b9e0 <vTaskSwitchContext+0xac>)
 800b944:	2201      	movs	r2, #1
 800b946:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b948:	e041      	b.n	800b9ce <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b94a:	4b25      	ldr	r3, [pc, #148]	; (800b9e0 <vTaskSwitchContext+0xac>)
 800b94c:	2200      	movs	r2, #0
 800b94e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b950:	4b24      	ldr	r3, [pc, #144]	; (800b9e4 <vTaskSwitchContext+0xb0>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	60fb      	str	r3, [r7, #12]
 800b956:	e010      	b.n	800b97a <vTaskSwitchContext+0x46>
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d10a      	bne.n	800b974 <vTaskSwitchContext+0x40>
	__asm volatile
 800b95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b962:	f383 8811 	msr	BASEPRI, r3
 800b966:	f3bf 8f6f 	isb	sy
 800b96a:	f3bf 8f4f 	dsb	sy
 800b96e:	607b      	str	r3, [r7, #4]
}
 800b970:	bf00      	nop
 800b972:	e7fe      	b.n	800b972 <vTaskSwitchContext+0x3e>
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	3b01      	subs	r3, #1
 800b978:	60fb      	str	r3, [r7, #12]
 800b97a:	491b      	ldr	r1, [pc, #108]	; (800b9e8 <vTaskSwitchContext+0xb4>)
 800b97c:	68fa      	ldr	r2, [r7, #12]
 800b97e:	4613      	mov	r3, r2
 800b980:	009b      	lsls	r3, r3, #2
 800b982:	4413      	add	r3, r2
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	440b      	add	r3, r1
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d0e4      	beq.n	800b958 <vTaskSwitchContext+0x24>
 800b98e:	68fa      	ldr	r2, [r7, #12]
 800b990:	4613      	mov	r3, r2
 800b992:	009b      	lsls	r3, r3, #2
 800b994:	4413      	add	r3, r2
 800b996:	009b      	lsls	r3, r3, #2
 800b998:	4a13      	ldr	r2, [pc, #76]	; (800b9e8 <vTaskSwitchContext+0xb4>)
 800b99a:	4413      	add	r3, r2
 800b99c:	60bb      	str	r3, [r7, #8]
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	685a      	ldr	r2, [r3, #4]
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	605a      	str	r2, [r3, #4]
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	685a      	ldr	r2, [r3, #4]
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	3308      	adds	r3, #8
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d104      	bne.n	800b9be <vTaskSwitchContext+0x8a>
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	685b      	ldr	r3, [r3, #4]
 800b9b8:	685a      	ldr	r2, [r3, #4]
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	605a      	str	r2, [r3, #4]
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	68db      	ldr	r3, [r3, #12]
 800b9c4:	4a09      	ldr	r2, [pc, #36]	; (800b9ec <vTaskSwitchContext+0xb8>)
 800b9c6:	6013      	str	r3, [r2, #0]
 800b9c8:	4a06      	ldr	r2, [pc, #24]	; (800b9e4 <vTaskSwitchContext+0xb0>)
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	6013      	str	r3, [r2, #0]
}
 800b9ce:	bf00      	nop
 800b9d0:	3714      	adds	r7, #20
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr
 800b9da:	bf00      	nop
 800b9dc:	20000f48 	.word	0x20000f48
 800b9e0:	20000f34 	.word	0x20000f34
 800b9e4:	20000f28 	.word	0x20000f28
 800b9e8:	20000a50 	.word	0x20000a50
 800b9ec:	20000a4c 	.word	0x20000a4c

0800b9f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d10a      	bne.n	800ba16 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ba00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba04:	f383 8811 	msr	BASEPRI, r3
 800ba08:	f3bf 8f6f 	isb	sy
 800ba0c:	f3bf 8f4f 	dsb	sy
 800ba10:	60fb      	str	r3, [r7, #12]
}
 800ba12:	bf00      	nop
 800ba14:	e7fe      	b.n	800ba14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ba16:	4b07      	ldr	r3, [pc, #28]	; (800ba34 <vTaskPlaceOnEventList+0x44>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	3318      	adds	r3, #24
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f7fe fb65 	bl	800a0ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ba24:	2101      	movs	r1, #1
 800ba26:	6838      	ldr	r0, [r7, #0]
 800ba28:	f000 fb7a 	bl	800c120 <prvAddCurrentTaskToDelayedList>
}
 800ba2c:	bf00      	nop
 800ba2e:	3710      	adds	r7, #16
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}
 800ba34:	20000a4c 	.word	0x20000a4c

0800ba38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b086      	sub	sp, #24
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	60f8      	str	r0, [r7, #12]
 800ba40:	60b9      	str	r1, [r7, #8]
 800ba42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d10a      	bne.n	800ba60 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ba4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba4e:	f383 8811 	msr	BASEPRI, r3
 800ba52:	f3bf 8f6f 	isb	sy
 800ba56:	f3bf 8f4f 	dsb	sy
 800ba5a:	617b      	str	r3, [r7, #20]
}
 800ba5c:	bf00      	nop
 800ba5e:	e7fe      	b.n	800ba5e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ba60:	4b0a      	ldr	r3, [pc, #40]	; (800ba8c <vTaskPlaceOnEventListRestricted+0x54>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	3318      	adds	r3, #24
 800ba66:	4619      	mov	r1, r3
 800ba68:	68f8      	ldr	r0, [r7, #12]
 800ba6a:	f7fe fb1c 	bl	800a0a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d002      	beq.n	800ba7a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ba74:	f04f 33ff 	mov.w	r3, #4294967295
 800ba78:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ba7a:	6879      	ldr	r1, [r7, #4]
 800ba7c:	68b8      	ldr	r0, [r7, #8]
 800ba7e:	f000 fb4f 	bl	800c120 <prvAddCurrentTaskToDelayedList>
	}
 800ba82:	bf00      	nop
 800ba84:	3718      	adds	r7, #24
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	20000a4c 	.word	0x20000a4c

0800ba90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b086      	sub	sp, #24
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	68db      	ldr	r3, [r3, #12]
 800ba9c:	68db      	ldr	r3, [r3, #12]
 800ba9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d10a      	bne.n	800babc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800baa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baaa:	f383 8811 	msr	BASEPRI, r3
 800baae:	f3bf 8f6f 	isb	sy
 800bab2:	f3bf 8f4f 	dsb	sy
 800bab6:	60fb      	str	r3, [r7, #12]
}
 800bab8:	bf00      	nop
 800baba:	e7fe      	b.n	800baba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	3318      	adds	r3, #24
 800bac0:	4618      	mov	r0, r3
 800bac2:	f7fe fb4d 	bl	800a160 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bac6:	4b1e      	ldr	r3, [pc, #120]	; (800bb40 <xTaskRemoveFromEventList+0xb0>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d11d      	bne.n	800bb0a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	3304      	adds	r3, #4
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7fe fb44 	bl	800a160 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800badc:	4b19      	ldr	r3, [pc, #100]	; (800bb44 <xTaskRemoveFromEventList+0xb4>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d903      	bls.n	800baec <xTaskRemoveFromEventList+0x5c>
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bae8:	4a16      	ldr	r2, [pc, #88]	; (800bb44 <xTaskRemoveFromEventList+0xb4>)
 800baea:	6013      	str	r3, [r2, #0]
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baf0:	4613      	mov	r3, r2
 800baf2:	009b      	lsls	r3, r3, #2
 800baf4:	4413      	add	r3, r2
 800baf6:	009b      	lsls	r3, r3, #2
 800baf8:	4a13      	ldr	r2, [pc, #76]	; (800bb48 <xTaskRemoveFromEventList+0xb8>)
 800bafa:	441a      	add	r2, r3
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	3304      	adds	r3, #4
 800bb00:	4619      	mov	r1, r3
 800bb02:	4610      	mov	r0, r2
 800bb04:	f7fe facf 	bl	800a0a6 <vListInsertEnd>
 800bb08:	e005      	b.n	800bb16 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	3318      	adds	r3, #24
 800bb0e:	4619      	mov	r1, r3
 800bb10:	480e      	ldr	r0, [pc, #56]	; (800bb4c <xTaskRemoveFromEventList+0xbc>)
 800bb12:	f7fe fac8 	bl	800a0a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb1a:	4b0d      	ldr	r3, [pc, #52]	; (800bb50 <xTaskRemoveFromEventList+0xc0>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d905      	bls.n	800bb30 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bb24:	2301      	movs	r3, #1
 800bb26:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bb28:	4b0a      	ldr	r3, [pc, #40]	; (800bb54 <xTaskRemoveFromEventList+0xc4>)
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	601a      	str	r2, [r3, #0]
 800bb2e:	e001      	b.n	800bb34 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bb30:	2300      	movs	r3, #0
 800bb32:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bb34:	697b      	ldr	r3, [r7, #20]
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3718      	adds	r7, #24
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	bf00      	nop
 800bb40:	20000f48 	.word	0x20000f48
 800bb44:	20000f28 	.word	0x20000f28
 800bb48:	20000a50 	.word	0x20000a50
 800bb4c:	20000ee0 	.word	0x20000ee0
 800bb50:	20000a4c 	.word	0x20000a4c
 800bb54:	20000f34 	.word	0x20000f34

0800bb58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bb60:	4b06      	ldr	r3, [pc, #24]	; (800bb7c <vTaskInternalSetTimeOutState+0x24>)
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bb68:	4b05      	ldr	r3, [pc, #20]	; (800bb80 <vTaskInternalSetTimeOutState+0x28>)
 800bb6a:	681a      	ldr	r2, [r3, #0]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	605a      	str	r2, [r3, #4]
}
 800bb70:	bf00      	nop
 800bb72:	370c      	adds	r7, #12
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr
 800bb7c:	20000f38 	.word	0x20000f38
 800bb80:	20000f24 	.word	0x20000f24

0800bb84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b088      	sub	sp, #32
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d10a      	bne.n	800bbaa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bb94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb98:	f383 8811 	msr	BASEPRI, r3
 800bb9c:	f3bf 8f6f 	isb	sy
 800bba0:	f3bf 8f4f 	dsb	sy
 800bba4:	613b      	str	r3, [r7, #16]
}
 800bba6:	bf00      	nop
 800bba8:	e7fe      	b.n	800bba8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d10a      	bne.n	800bbc6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb4:	f383 8811 	msr	BASEPRI, r3
 800bbb8:	f3bf 8f6f 	isb	sy
 800bbbc:	f3bf 8f4f 	dsb	sy
 800bbc0:	60fb      	str	r3, [r7, #12]
}
 800bbc2:	bf00      	nop
 800bbc4:	e7fe      	b.n	800bbc4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bbc6:	f000 ff7d 	bl	800cac4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bbca:	4b1d      	ldr	r3, [pc, #116]	; (800bc40 <xTaskCheckForTimeOut+0xbc>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	69ba      	ldr	r2, [r7, #24]
 800bbd6:	1ad3      	subs	r3, r2, r3
 800bbd8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbe2:	d102      	bne.n	800bbea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	61fb      	str	r3, [r7, #28]
 800bbe8:	e023      	b.n	800bc32 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681a      	ldr	r2, [r3, #0]
 800bbee:	4b15      	ldr	r3, [pc, #84]	; (800bc44 <xTaskCheckForTimeOut+0xc0>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d007      	beq.n	800bc06 <xTaskCheckForTimeOut+0x82>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	685b      	ldr	r3, [r3, #4]
 800bbfa:	69ba      	ldr	r2, [r7, #24]
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d302      	bcc.n	800bc06 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bc00:	2301      	movs	r3, #1
 800bc02:	61fb      	str	r3, [r7, #28]
 800bc04:	e015      	b.n	800bc32 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	697a      	ldr	r2, [r7, #20]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d20b      	bcs.n	800bc28 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	1ad2      	subs	r2, r2, r3
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f7ff ff9b 	bl	800bb58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bc22:	2300      	movs	r3, #0
 800bc24:	61fb      	str	r3, [r7, #28]
 800bc26:	e004      	b.n	800bc32 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bc2e:	2301      	movs	r3, #1
 800bc30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bc32:	f000 ff77 	bl	800cb24 <vPortExitCritical>

	return xReturn;
 800bc36:	69fb      	ldr	r3, [r7, #28]
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3720      	adds	r7, #32
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}
 800bc40:	20000f24 	.word	0x20000f24
 800bc44:	20000f38 	.word	0x20000f38

0800bc48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bc48:	b480      	push	{r7}
 800bc4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bc4c:	4b03      	ldr	r3, [pc, #12]	; (800bc5c <vTaskMissedYield+0x14>)
 800bc4e:	2201      	movs	r2, #1
 800bc50:	601a      	str	r2, [r3, #0]
}
 800bc52:	bf00      	nop
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr
 800bc5c:	20000f34 	.word	0x20000f34

0800bc60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b082      	sub	sp, #8
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bc68:	f000 f852 	bl	800bd10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bc6c:	4b06      	ldr	r3, [pc, #24]	; (800bc88 <prvIdleTask+0x28>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	2b01      	cmp	r3, #1
 800bc72:	d9f9      	bls.n	800bc68 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bc74:	4b05      	ldr	r3, [pc, #20]	; (800bc8c <prvIdleTask+0x2c>)
 800bc76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc7a:	601a      	str	r2, [r3, #0]
 800bc7c:	f3bf 8f4f 	dsb	sy
 800bc80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bc84:	e7f0      	b.n	800bc68 <prvIdleTask+0x8>
 800bc86:	bf00      	nop
 800bc88:	20000a50 	.word	0x20000a50
 800bc8c:	e000ed04 	.word	0xe000ed04

0800bc90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b082      	sub	sp, #8
 800bc94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bc96:	2300      	movs	r3, #0
 800bc98:	607b      	str	r3, [r7, #4]
 800bc9a:	e00c      	b.n	800bcb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bc9c:	687a      	ldr	r2, [r7, #4]
 800bc9e:	4613      	mov	r3, r2
 800bca0:	009b      	lsls	r3, r3, #2
 800bca2:	4413      	add	r3, r2
 800bca4:	009b      	lsls	r3, r3, #2
 800bca6:	4a12      	ldr	r2, [pc, #72]	; (800bcf0 <prvInitialiseTaskLists+0x60>)
 800bca8:	4413      	add	r3, r2
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f7fe f9ce 	bl	800a04c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	3301      	adds	r3, #1
 800bcb4:	607b      	str	r3, [r7, #4]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2b37      	cmp	r3, #55	; 0x37
 800bcba:	d9ef      	bls.n	800bc9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bcbc:	480d      	ldr	r0, [pc, #52]	; (800bcf4 <prvInitialiseTaskLists+0x64>)
 800bcbe:	f7fe f9c5 	bl	800a04c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bcc2:	480d      	ldr	r0, [pc, #52]	; (800bcf8 <prvInitialiseTaskLists+0x68>)
 800bcc4:	f7fe f9c2 	bl	800a04c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bcc8:	480c      	ldr	r0, [pc, #48]	; (800bcfc <prvInitialiseTaskLists+0x6c>)
 800bcca:	f7fe f9bf 	bl	800a04c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bcce:	480c      	ldr	r0, [pc, #48]	; (800bd00 <prvInitialiseTaskLists+0x70>)
 800bcd0:	f7fe f9bc 	bl	800a04c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bcd4:	480b      	ldr	r0, [pc, #44]	; (800bd04 <prvInitialiseTaskLists+0x74>)
 800bcd6:	f7fe f9b9 	bl	800a04c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bcda:	4b0b      	ldr	r3, [pc, #44]	; (800bd08 <prvInitialiseTaskLists+0x78>)
 800bcdc:	4a05      	ldr	r2, [pc, #20]	; (800bcf4 <prvInitialiseTaskLists+0x64>)
 800bcde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bce0:	4b0a      	ldr	r3, [pc, #40]	; (800bd0c <prvInitialiseTaskLists+0x7c>)
 800bce2:	4a05      	ldr	r2, [pc, #20]	; (800bcf8 <prvInitialiseTaskLists+0x68>)
 800bce4:	601a      	str	r2, [r3, #0]
}
 800bce6:	bf00      	nop
 800bce8:	3708      	adds	r7, #8
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}
 800bcee:	bf00      	nop
 800bcf0:	20000a50 	.word	0x20000a50
 800bcf4:	20000eb0 	.word	0x20000eb0
 800bcf8:	20000ec4 	.word	0x20000ec4
 800bcfc:	20000ee0 	.word	0x20000ee0
 800bd00:	20000ef4 	.word	0x20000ef4
 800bd04:	20000f0c 	.word	0x20000f0c
 800bd08:	20000ed8 	.word	0x20000ed8
 800bd0c:	20000edc 	.word	0x20000edc

0800bd10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd16:	e019      	b.n	800bd4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bd18:	f000 fed4 	bl	800cac4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd1c:	4b10      	ldr	r3, [pc, #64]	; (800bd60 <prvCheckTasksWaitingTermination+0x50>)
 800bd1e:	68db      	ldr	r3, [r3, #12]
 800bd20:	68db      	ldr	r3, [r3, #12]
 800bd22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	3304      	adds	r3, #4
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7fe fa19 	bl	800a160 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bd2e:	4b0d      	ldr	r3, [pc, #52]	; (800bd64 <prvCheckTasksWaitingTermination+0x54>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	3b01      	subs	r3, #1
 800bd34:	4a0b      	ldr	r2, [pc, #44]	; (800bd64 <prvCheckTasksWaitingTermination+0x54>)
 800bd36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bd38:	4b0b      	ldr	r3, [pc, #44]	; (800bd68 <prvCheckTasksWaitingTermination+0x58>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	3b01      	subs	r3, #1
 800bd3e:	4a0a      	ldr	r2, [pc, #40]	; (800bd68 <prvCheckTasksWaitingTermination+0x58>)
 800bd40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bd42:	f000 feef 	bl	800cb24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f000 f810 	bl	800bd6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd4c:	4b06      	ldr	r3, [pc, #24]	; (800bd68 <prvCheckTasksWaitingTermination+0x58>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d1e1      	bne.n	800bd18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bd54:	bf00      	nop
 800bd56:	bf00      	nop
 800bd58:	3708      	adds	r7, #8
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	20000ef4 	.word	0x20000ef4
 800bd64:	20000f20 	.word	0x20000f20
 800bd68:	20000f08 	.word	0x20000f08

0800bd6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b084      	sub	sp, #16
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d108      	bne.n	800bd90 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd82:	4618      	mov	r0, r3
 800bd84:	f001 f88c 	bl	800cea0 <vPortFree>
				vPortFree( pxTCB );
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f001 f889 	bl	800cea0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bd8e:	e018      	b.n	800bdc2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bd96:	2b01      	cmp	r3, #1
 800bd98:	d103      	bne.n	800bda2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f001 f880 	bl	800cea0 <vPortFree>
	}
 800bda0:	e00f      	b.n	800bdc2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bda8:	2b02      	cmp	r3, #2
 800bdaa:	d00a      	beq.n	800bdc2 <prvDeleteTCB+0x56>
	__asm volatile
 800bdac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb0:	f383 8811 	msr	BASEPRI, r3
 800bdb4:	f3bf 8f6f 	isb	sy
 800bdb8:	f3bf 8f4f 	dsb	sy
 800bdbc:	60fb      	str	r3, [r7, #12]
}
 800bdbe:	bf00      	nop
 800bdc0:	e7fe      	b.n	800bdc0 <prvDeleteTCB+0x54>
	}
 800bdc2:	bf00      	nop
 800bdc4:	3710      	adds	r7, #16
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}
	...

0800bdcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b083      	sub	sp, #12
 800bdd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bdd2:	4b0c      	ldr	r3, [pc, #48]	; (800be04 <prvResetNextTaskUnblockTime+0x38>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d104      	bne.n	800bde6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bddc:	4b0a      	ldr	r3, [pc, #40]	; (800be08 <prvResetNextTaskUnblockTime+0x3c>)
 800bdde:	f04f 32ff 	mov.w	r2, #4294967295
 800bde2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bde4:	e008      	b.n	800bdf8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bde6:	4b07      	ldr	r3, [pc, #28]	; (800be04 <prvResetNextTaskUnblockTime+0x38>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	68db      	ldr	r3, [r3, #12]
 800bdec:	68db      	ldr	r3, [r3, #12]
 800bdee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	4a04      	ldr	r2, [pc, #16]	; (800be08 <prvResetNextTaskUnblockTime+0x3c>)
 800bdf6:	6013      	str	r3, [r2, #0]
}
 800bdf8:	bf00      	nop
 800bdfa:	370c      	adds	r7, #12
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be02:	4770      	bx	lr
 800be04:	20000ed8 	.word	0x20000ed8
 800be08:	20000f40 	.word	0x20000f40

0800be0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800be0c:	b480      	push	{r7}
 800be0e:	b083      	sub	sp, #12
 800be10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800be12:	4b0b      	ldr	r3, [pc, #44]	; (800be40 <xTaskGetSchedulerState+0x34>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d102      	bne.n	800be20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800be1a:	2301      	movs	r3, #1
 800be1c:	607b      	str	r3, [r7, #4]
 800be1e:	e008      	b.n	800be32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be20:	4b08      	ldr	r3, [pc, #32]	; (800be44 <xTaskGetSchedulerState+0x38>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d102      	bne.n	800be2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800be28:	2302      	movs	r3, #2
 800be2a:	607b      	str	r3, [r7, #4]
 800be2c:	e001      	b.n	800be32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800be2e:	2300      	movs	r3, #0
 800be30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800be32:	687b      	ldr	r3, [r7, #4]
	}
 800be34:	4618      	mov	r0, r3
 800be36:	370c      	adds	r7, #12
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr
 800be40:	20000f2c 	.word	0x20000f2c
 800be44:	20000f48 	.word	0x20000f48

0800be48 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b084      	sub	sp, #16
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800be54:	2300      	movs	r3, #0
 800be56:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d051      	beq.n	800bf02 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be62:	4b2a      	ldr	r3, [pc, #168]	; (800bf0c <xTaskPriorityInherit+0xc4>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be68:	429a      	cmp	r2, r3
 800be6a:	d241      	bcs.n	800bef0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	699b      	ldr	r3, [r3, #24]
 800be70:	2b00      	cmp	r3, #0
 800be72:	db06      	blt.n	800be82 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be74:	4b25      	ldr	r3, [pc, #148]	; (800bf0c <xTaskPriorityInherit+0xc4>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	6959      	ldr	r1, [r3, #20]
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be8a:	4613      	mov	r3, r2
 800be8c:	009b      	lsls	r3, r3, #2
 800be8e:	4413      	add	r3, r2
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	4a1f      	ldr	r2, [pc, #124]	; (800bf10 <xTaskPriorityInherit+0xc8>)
 800be94:	4413      	add	r3, r2
 800be96:	4299      	cmp	r1, r3
 800be98:	d122      	bne.n	800bee0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	3304      	adds	r3, #4
 800be9e:	4618      	mov	r0, r3
 800bea0:	f7fe f95e 	bl	800a160 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bea4:	4b19      	ldr	r3, [pc, #100]	; (800bf0c <xTaskPriorityInherit+0xc4>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beb2:	4b18      	ldr	r3, [pc, #96]	; (800bf14 <xTaskPriorityInherit+0xcc>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d903      	bls.n	800bec2 <xTaskPriorityInherit+0x7a>
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bebe:	4a15      	ldr	r2, [pc, #84]	; (800bf14 <xTaskPriorityInherit+0xcc>)
 800bec0:	6013      	str	r3, [r2, #0]
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bec6:	4613      	mov	r3, r2
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	4413      	add	r3, r2
 800becc:	009b      	lsls	r3, r3, #2
 800bece:	4a10      	ldr	r2, [pc, #64]	; (800bf10 <xTaskPriorityInherit+0xc8>)
 800bed0:	441a      	add	r2, r3
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	3304      	adds	r3, #4
 800bed6:	4619      	mov	r1, r3
 800bed8:	4610      	mov	r0, r2
 800beda:	f7fe f8e4 	bl	800a0a6 <vListInsertEnd>
 800bede:	e004      	b.n	800beea <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bee0:	4b0a      	ldr	r3, [pc, #40]	; (800bf0c <xTaskPriorityInherit+0xc4>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800beea:	2301      	movs	r3, #1
 800beec:	60fb      	str	r3, [r7, #12]
 800beee:	e008      	b.n	800bf02 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bef4:	4b05      	ldr	r3, [pc, #20]	; (800bf0c <xTaskPriorityInherit+0xc4>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800befa:	429a      	cmp	r2, r3
 800befc:	d201      	bcs.n	800bf02 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800befe:	2301      	movs	r3, #1
 800bf00:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bf02:	68fb      	ldr	r3, [r7, #12]
	}
 800bf04:	4618      	mov	r0, r3
 800bf06:	3710      	adds	r7, #16
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}
 800bf0c:	20000a4c 	.word	0x20000a4c
 800bf10:	20000a50 	.word	0x20000a50
 800bf14:	20000f28 	.word	0x20000f28

0800bf18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b086      	sub	sp, #24
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bf24:	2300      	movs	r3, #0
 800bf26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d056      	beq.n	800bfdc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bf2e:	4b2e      	ldr	r3, [pc, #184]	; (800bfe8 <xTaskPriorityDisinherit+0xd0>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	693a      	ldr	r2, [r7, #16]
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d00a      	beq.n	800bf4e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bf38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf3c:	f383 8811 	msr	BASEPRI, r3
 800bf40:	f3bf 8f6f 	isb	sy
 800bf44:	f3bf 8f4f 	dsb	sy
 800bf48:	60fb      	str	r3, [r7, #12]
}
 800bf4a:	bf00      	nop
 800bf4c:	e7fe      	b.n	800bf4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d10a      	bne.n	800bf6c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bf56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf5a:	f383 8811 	msr	BASEPRI, r3
 800bf5e:	f3bf 8f6f 	isb	sy
 800bf62:	f3bf 8f4f 	dsb	sy
 800bf66:	60bb      	str	r3, [r7, #8]
}
 800bf68:	bf00      	nop
 800bf6a:	e7fe      	b.n	800bf6a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bf6c:	693b      	ldr	r3, [r7, #16]
 800bf6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf70:	1e5a      	subs	r2, r3, #1
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d02c      	beq.n	800bfdc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d128      	bne.n	800bfdc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	3304      	adds	r3, #4
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f7fe f8e6 	bl	800a160 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfa0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfac:	4b0f      	ldr	r3, [pc, #60]	; (800bfec <xTaskPriorityDisinherit+0xd4>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d903      	bls.n	800bfbc <xTaskPriorityDisinherit+0xa4>
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfb8:	4a0c      	ldr	r2, [pc, #48]	; (800bfec <xTaskPriorityDisinherit+0xd4>)
 800bfba:	6013      	str	r3, [r2, #0]
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfc0:	4613      	mov	r3, r2
 800bfc2:	009b      	lsls	r3, r3, #2
 800bfc4:	4413      	add	r3, r2
 800bfc6:	009b      	lsls	r3, r3, #2
 800bfc8:	4a09      	ldr	r2, [pc, #36]	; (800bff0 <xTaskPriorityDisinherit+0xd8>)
 800bfca:	441a      	add	r2, r3
 800bfcc:	693b      	ldr	r3, [r7, #16]
 800bfce:	3304      	adds	r3, #4
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	4610      	mov	r0, r2
 800bfd4:	f7fe f867 	bl	800a0a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bfd8:	2301      	movs	r3, #1
 800bfda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bfdc:	697b      	ldr	r3, [r7, #20]
	}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3718      	adds	r7, #24
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	20000a4c 	.word	0x20000a4c
 800bfec:	20000f28 	.word	0x20000f28
 800bff0:	20000a50 	.word	0x20000a50

0800bff4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b088      	sub	sp, #32
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c002:	2301      	movs	r3, #1
 800c004:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d06a      	beq.n	800c0e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c00c:	69bb      	ldr	r3, [r7, #24]
 800c00e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c010:	2b00      	cmp	r3, #0
 800c012:	d10a      	bne.n	800c02a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c018:	f383 8811 	msr	BASEPRI, r3
 800c01c:	f3bf 8f6f 	isb	sy
 800c020:	f3bf 8f4f 	dsb	sy
 800c024:	60fb      	str	r3, [r7, #12]
}
 800c026:	bf00      	nop
 800c028:	e7fe      	b.n	800c028 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c02a:	69bb      	ldr	r3, [r7, #24]
 800c02c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c02e:	683a      	ldr	r2, [r7, #0]
 800c030:	429a      	cmp	r2, r3
 800c032:	d902      	bls.n	800c03a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	61fb      	str	r3, [r7, #28]
 800c038:	e002      	b.n	800c040 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c03a:	69bb      	ldr	r3, [r7, #24]
 800c03c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c03e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c040:	69bb      	ldr	r3, [r7, #24]
 800c042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c044:	69fa      	ldr	r2, [r7, #28]
 800c046:	429a      	cmp	r2, r3
 800c048:	d04b      	beq.n	800c0e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c04a:	69bb      	ldr	r3, [r7, #24]
 800c04c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c04e:	697a      	ldr	r2, [r7, #20]
 800c050:	429a      	cmp	r2, r3
 800c052:	d146      	bne.n	800c0e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c054:	4b25      	ldr	r3, [pc, #148]	; (800c0ec <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	69ba      	ldr	r2, [r7, #24]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d10a      	bne.n	800c074 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c062:	f383 8811 	msr	BASEPRI, r3
 800c066:	f3bf 8f6f 	isb	sy
 800c06a:	f3bf 8f4f 	dsb	sy
 800c06e:	60bb      	str	r3, [r7, #8]
}
 800c070:	bf00      	nop
 800c072:	e7fe      	b.n	800c072 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c074:	69bb      	ldr	r3, [r7, #24]
 800c076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c078:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c07a:	69bb      	ldr	r3, [r7, #24]
 800c07c:	69fa      	ldr	r2, [r7, #28]
 800c07e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c080:	69bb      	ldr	r3, [r7, #24]
 800c082:	699b      	ldr	r3, [r3, #24]
 800c084:	2b00      	cmp	r3, #0
 800c086:	db04      	blt.n	800c092 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c088:	69fb      	ldr	r3, [r7, #28]
 800c08a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c08e:	69bb      	ldr	r3, [r7, #24]
 800c090:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c092:	69bb      	ldr	r3, [r7, #24]
 800c094:	6959      	ldr	r1, [r3, #20]
 800c096:	693a      	ldr	r2, [r7, #16]
 800c098:	4613      	mov	r3, r2
 800c09a:	009b      	lsls	r3, r3, #2
 800c09c:	4413      	add	r3, r2
 800c09e:	009b      	lsls	r3, r3, #2
 800c0a0:	4a13      	ldr	r2, [pc, #76]	; (800c0f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c0a2:	4413      	add	r3, r2
 800c0a4:	4299      	cmp	r1, r3
 800c0a6:	d11c      	bne.n	800c0e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c0a8:	69bb      	ldr	r3, [r7, #24]
 800c0aa:	3304      	adds	r3, #4
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f7fe f857 	bl	800a160 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c0b2:	69bb      	ldr	r3, [r7, #24]
 800c0b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0b6:	4b0f      	ldr	r3, [pc, #60]	; (800c0f4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d903      	bls.n	800c0c6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c0be:	69bb      	ldr	r3, [r7, #24]
 800c0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0c2:	4a0c      	ldr	r2, [pc, #48]	; (800c0f4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c0c4:	6013      	str	r3, [r2, #0]
 800c0c6:	69bb      	ldr	r3, [r7, #24]
 800c0c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0ca:	4613      	mov	r3, r2
 800c0cc:	009b      	lsls	r3, r3, #2
 800c0ce:	4413      	add	r3, r2
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	4a07      	ldr	r2, [pc, #28]	; (800c0f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c0d4:	441a      	add	r2, r3
 800c0d6:	69bb      	ldr	r3, [r7, #24]
 800c0d8:	3304      	adds	r3, #4
 800c0da:	4619      	mov	r1, r3
 800c0dc:	4610      	mov	r0, r2
 800c0de:	f7fd ffe2 	bl	800a0a6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c0e2:	bf00      	nop
 800c0e4:	3720      	adds	r7, #32
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
 800c0ea:	bf00      	nop
 800c0ec:	20000a4c 	.word	0x20000a4c
 800c0f0:	20000a50 	.word	0x20000a50
 800c0f4:	20000f28 	.word	0x20000f28

0800c0f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c0f8:	b480      	push	{r7}
 800c0fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c0fc:	4b07      	ldr	r3, [pc, #28]	; (800c11c <pvTaskIncrementMutexHeldCount+0x24>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d004      	beq.n	800c10e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c104:	4b05      	ldr	r3, [pc, #20]	; (800c11c <pvTaskIncrementMutexHeldCount+0x24>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c10a:	3201      	adds	r2, #1
 800c10c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c10e:	4b03      	ldr	r3, [pc, #12]	; (800c11c <pvTaskIncrementMutexHeldCount+0x24>)
 800c110:	681b      	ldr	r3, [r3, #0]
	}
 800c112:	4618      	mov	r0, r3
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr
 800c11c:	20000a4c 	.word	0x20000a4c

0800c120 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b084      	sub	sp, #16
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c12a:	4b21      	ldr	r3, [pc, #132]	; (800c1b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c130:	4b20      	ldr	r3, [pc, #128]	; (800c1b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	3304      	adds	r3, #4
 800c136:	4618      	mov	r0, r3
 800c138:	f7fe f812 	bl	800a160 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c142:	d10a      	bne.n	800c15a <prvAddCurrentTaskToDelayedList+0x3a>
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d007      	beq.n	800c15a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c14a:	4b1a      	ldr	r3, [pc, #104]	; (800c1b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	3304      	adds	r3, #4
 800c150:	4619      	mov	r1, r3
 800c152:	4819      	ldr	r0, [pc, #100]	; (800c1b8 <prvAddCurrentTaskToDelayedList+0x98>)
 800c154:	f7fd ffa7 	bl	800a0a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c158:	e026      	b.n	800c1a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c15a:	68fa      	ldr	r2, [r7, #12]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	4413      	add	r3, r2
 800c160:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c162:	4b14      	ldr	r3, [pc, #80]	; (800c1b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	68ba      	ldr	r2, [r7, #8]
 800c168:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c16a:	68ba      	ldr	r2, [r7, #8]
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	429a      	cmp	r2, r3
 800c170:	d209      	bcs.n	800c186 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c172:	4b12      	ldr	r3, [pc, #72]	; (800c1bc <prvAddCurrentTaskToDelayedList+0x9c>)
 800c174:	681a      	ldr	r2, [r3, #0]
 800c176:	4b0f      	ldr	r3, [pc, #60]	; (800c1b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	3304      	adds	r3, #4
 800c17c:	4619      	mov	r1, r3
 800c17e:	4610      	mov	r0, r2
 800c180:	f7fd ffb5 	bl	800a0ee <vListInsert>
}
 800c184:	e010      	b.n	800c1a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c186:	4b0e      	ldr	r3, [pc, #56]	; (800c1c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c188:	681a      	ldr	r2, [r3, #0]
 800c18a:	4b0a      	ldr	r3, [pc, #40]	; (800c1b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	3304      	adds	r3, #4
 800c190:	4619      	mov	r1, r3
 800c192:	4610      	mov	r0, r2
 800c194:	f7fd ffab 	bl	800a0ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c198:	4b0a      	ldr	r3, [pc, #40]	; (800c1c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	68ba      	ldr	r2, [r7, #8]
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	d202      	bcs.n	800c1a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c1a2:	4a08      	ldr	r2, [pc, #32]	; (800c1c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	6013      	str	r3, [r2, #0]
}
 800c1a8:	bf00      	nop
 800c1aa:	3710      	adds	r7, #16
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}
 800c1b0:	20000f24 	.word	0x20000f24
 800c1b4:	20000a4c 	.word	0x20000a4c
 800c1b8:	20000f0c 	.word	0x20000f0c
 800c1bc:	20000edc 	.word	0x20000edc
 800c1c0:	20000ed8 	.word	0x20000ed8
 800c1c4:	20000f40 	.word	0x20000f40

0800c1c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b08a      	sub	sp, #40	; 0x28
 800c1cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c1d2:	f000 fb07 	bl	800c7e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c1d6:	4b1c      	ldr	r3, [pc, #112]	; (800c248 <xTimerCreateTimerTask+0x80>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d021      	beq.n	800c222 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c1e6:	1d3a      	adds	r2, r7, #4
 800c1e8:	f107 0108 	add.w	r1, r7, #8
 800c1ec:	f107 030c 	add.w	r3, r7, #12
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f7fd ff11 	bl	800a018 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c1f6:	6879      	ldr	r1, [r7, #4]
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	68fa      	ldr	r2, [r7, #12]
 800c1fc:	9202      	str	r2, [sp, #8]
 800c1fe:	9301      	str	r3, [sp, #4]
 800c200:	2302      	movs	r3, #2
 800c202:	9300      	str	r3, [sp, #0]
 800c204:	2300      	movs	r3, #0
 800c206:	460a      	mov	r2, r1
 800c208:	4910      	ldr	r1, [pc, #64]	; (800c24c <xTimerCreateTimerTask+0x84>)
 800c20a:	4811      	ldr	r0, [pc, #68]	; (800c250 <xTimerCreateTimerTask+0x88>)
 800c20c:	f7fe ffe0 	bl	800b1d0 <xTaskCreateStatic>
 800c210:	4603      	mov	r3, r0
 800c212:	4a10      	ldr	r2, [pc, #64]	; (800c254 <xTimerCreateTimerTask+0x8c>)
 800c214:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c216:	4b0f      	ldr	r3, [pc, #60]	; (800c254 <xTimerCreateTimerTask+0x8c>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d001      	beq.n	800c222 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c21e:	2301      	movs	r3, #1
 800c220:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d10a      	bne.n	800c23e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c22c:	f383 8811 	msr	BASEPRI, r3
 800c230:	f3bf 8f6f 	isb	sy
 800c234:	f3bf 8f4f 	dsb	sy
 800c238:	613b      	str	r3, [r7, #16]
}
 800c23a:	bf00      	nop
 800c23c:	e7fe      	b.n	800c23c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c23e:	697b      	ldr	r3, [r7, #20]
}
 800c240:	4618      	mov	r0, r3
 800c242:	3718      	adds	r7, #24
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}
 800c248:	20000f7c 	.word	0x20000f7c
 800c24c:	0801539c 	.word	0x0801539c
 800c250:	0800c38d 	.word	0x0800c38d
 800c254:	20000f80 	.word	0x20000f80

0800c258 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b08a      	sub	sp, #40	; 0x28
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	607a      	str	r2, [r7, #4]
 800c264:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c266:	2300      	movs	r3, #0
 800c268:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d10a      	bne.n	800c286 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c274:	f383 8811 	msr	BASEPRI, r3
 800c278:	f3bf 8f6f 	isb	sy
 800c27c:	f3bf 8f4f 	dsb	sy
 800c280:	623b      	str	r3, [r7, #32]
}
 800c282:	bf00      	nop
 800c284:	e7fe      	b.n	800c284 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c286:	4b1a      	ldr	r3, [pc, #104]	; (800c2f0 <xTimerGenericCommand+0x98>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d02a      	beq.n	800c2e4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	2b05      	cmp	r3, #5
 800c29e:	dc18      	bgt.n	800c2d2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c2a0:	f7ff fdb4 	bl	800be0c <xTaskGetSchedulerState>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	2b02      	cmp	r3, #2
 800c2a8:	d109      	bne.n	800c2be <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c2aa:	4b11      	ldr	r3, [pc, #68]	; (800c2f0 <xTimerGenericCommand+0x98>)
 800c2ac:	6818      	ldr	r0, [r3, #0]
 800c2ae:	f107 0110 	add.w	r1, r7, #16
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2b6:	f7fe f925 	bl	800a504 <xQueueGenericSend>
 800c2ba:	6278      	str	r0, [r7, #36]	; 0x24
 800c2bc:	e012      	b.n	800c2e4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c2be:	4b0c      	ldr	r3, [pc, #48]	; (800c2f0 <xTimerGenericCommand+0x98>)
 800c2c0:	6818      	ldr	r0, [r3, #0]
 800c2c2:	f107 0110 	add.w	r1, r7, #16
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	f7fe f91b 	bl	800a504 <xQueueGenericSend>
 800c2ce:	6278      	str	r0, [r7, #36]	; 0x24
 800c2d0:	e008      	b.n	800c2e4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c2d2:	4b07      	ldr	r3, [pc, #28]	; (800c2f0 <xTimerGenericCommand+0x98>)
 800c2d4:	6818      	ldr	r0, [r3, #0]
 800c2d6:	f107 0110 	add.w	r1, r7, #16
 800c2da:	2300      	movs	r3, #0
 800c2dc:	683a      	ldr	r2, [r7, #0]
 800c2de:	f7fe fa0f 	bl	800a700 <xQueueGenericSendFromISR>
 800c2e2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3728      	adds	r7, #40	; 0x28
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}
 800c2ee:	bf00      	nop
 800c2f0:	20000f7c 	.word	0x20000f7c

0800c2f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b088      	sub	sp, #32
 800c2f8:	af02      	add	r7, sp, #8
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2fe:	4b22      	ldr	r3, [pc, #136]	; (800c388 <prvProcessExpiredTimer+0x94>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	68db      	ldr	r3, [r3, #12]
 800c304:	68db      	ldr	r3, [r3, #12]
 800c306:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	3304      	adds	r3, #4
 800c30c:	4618      	mov	r0, r3
 800c30e:	f7fd ff27 	bl	800a160 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c318:	f003 0304 	and.w	r3, r3, #4
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d022      	beq.n	800c366 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	699a      	ldr	r2, [r3, #24]
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	18d1      	adds	r1, r2, r3
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	683a      	ldr	r2, [r7, #0]
 800c32c:	6978      	ldr	r0, [r7, #20]
 800c32e:	f000 f8d1 	bl	800c4d4 <prvInsertTimerInActiveList>
 800c332:	4603      	mov	r3, r0
 800c334:	2b00      	cmp	r3, #0
 800c336:	d01f      	beq.n	800c378 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c338:	2300      	movs	r3, #0
 800c33a:	9300      	str	r3, [sp, #0]
 800c33c:	2300      	movs	r3, #0
 800c33e:	687a      	ldr	r2, [r7, #4]
 800c340:	2100      	movs	r1, #0
 800c342:	6978      	ldr	r0, [r7, #20]
 800c344:	f7ff ff88 	bl	800c258 <xTimerGenericCommand>
 800c348:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d113      	bne.n	800c378 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c354:	f383 8811 	msr	BASEPRI, r3
 800c358:	f3bf 8f6f 	isb	sy
 800c35c:	f3bf 8f4f 	dsb	sy
 800c360:	60fb      	str	r3, [r7, #12]
}
 800c362:	bf00      	nop
 800c364:	e7fe      	b.n	800c364 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c36c:	f023 0301 	bic.w	r3, r3, #1
 800c370:	b2da      	uxtb	r2, r3
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	6a1b      	ldr	r3, [r3, #32]
 800c37c:	6978      	ldr	r0, [r7, #20]
 800c37e:	4798      	blx	r3
}
 800c380:	bf00      	nop
 800c382:	3718      	adds	r7, #24
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}
 800c388:	20000f74 	.word	0x20000f74

0800c38c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b084      	sub	sp, #16
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c394:	f107 0308 	add.w	r3, r7, #8
 800c398:	4618      	mov	r0, r3
 800c39a:	f000 f857 	bl	800c44c <prvGetNextExpireTime>
 800c39e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	4619      	mov	r1, r3
 800c3a4:	68f8      	ldr	r0, [r7, #12]
 800c3a6:	f000 f803 	bl	800c3b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c3aa:	f000 f8d5 	bl	800c558 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c3ae:	e7f1      	b.n	800c394 <prvTimerTask+0x8>

0800c3b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b084      	sub	sp, #16
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c3ba:	f7ff f945 	bl	800b648 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c3be:	f107 0308 	add.w	r3, r7, #8
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f000 f866 	bl	800c494 <prvSampleTimeNow>
 800c3c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d130      	bne.n	800c432 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d10a      	bne.n	800c3ec <prvProcessTimerOrBlockTask+0x3c>
 800c3d6:	687a      	ldr	r2, [r7, #4]
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d806      	bhi.n	800c3ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c3de:	f7ff f941 	bl	800b664 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c3e2:	68f9      	ldr	r1, [r7, #12]
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f7ff ff85 	bl	800c2f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c3ea:	e024      	b.n	800c436 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d008      	beq.n	800c404 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c3f2:	4b13      	ldr	r3, [pc, #76]	; (800c440 <prvProcessTimerOrBlockTask+0x90>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d101      	bne.n	800c400 <prvProcessTimerOrBlockTask+0x50>
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	e000      	b.n	800c402 <prvProcessTimerOrBlockTask+0x52>
 800c400:	2300      	movs	r3, #0
 800c402:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c404:	4b0f      	ldr	r3, [pc, #60]	; (800c444 <prvProcessTimerOrBlockTask+0x94>)
 800c406:	6818      	ldr	r0, [r3, #0]
 800c408:	687a      	ldr	r2, [r7, #4]
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	1ad3      	subs	r3, r2, r3
 800c40e:	683a      	ldr	r2, [r7, #0]
 800c410:	4619      	mov	r1, r3
 800c412:	f7fe fea9 	bl	800b168 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c416:	f7ff f925 	bl	800b664 <xTaskResumeAll>
 800c41a:	4603      	mov	r3, r0
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d10a      	bne.n	800c436 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c420:	4b09      	ldr	r3, [pc, #36]	; (800c448 <prvProcessTimerOrBlockTask+0x98>)
 800c422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c426:	601a      	str	r2, [r3, #0]
 800c428:	f3bf 8f4f 	dsb	sy
 800c42c:	f3bf 8f6f 	isb	sy
}
 800c430:	e001      	b.n	800c436 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c432:	f7ff f917 	bl	800b664 <xTaskResumeAll>
}
 800c436:	bf00      	nop
 800c438:	3710      	adds	r7, #16
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}
 800c43e:	bf00      	nop
 800c440:	20000f78 	.word	0x20000f78
 800c444:	20000f7c 	.word	0x20000f7c
 800c448:	e000ed04 	.word	0xe000ed04

0800c44c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c44c:	b480      	push	{r7}
 800c44e:	b085      	sub	sp, #20
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c454:	4b0e      	ldr	r3, [pc, #56]	; (800c490 <prvGetNextExpireTime+0x44>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d101      	bne.n	800c462 <prvGetNextExpireTime+0x16>
 800c45e:	2201      	movs	r2, #1
 800c460:	e000      	b.n	800c464 <prvGetNextExpireTime+0x18>
 800c462:	2200      	movs	r2, #0
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d105      	bne.n	800c47c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c470:	4b07      	ldr	r3, [pc, #28]	; (800c490 <prvGetNextExpireTime+0x44>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	68db      	ldr	r3, [r3, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	60fb      	str	r3, [r7, #12]
 800c47a:	e001      	b.n	800c480 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c47c:	2300      	movs	r3, #0
 800c47e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c480:	68fb      	ldr	r3, [r7, #12]
}
 800c482:	4618      	mov	r0, r3
 800c484:	3714      	adds	r7, #20
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr
 800c48e:	bf00      	nop
 800c490:	20000f74 	.word	0x20000f74

0800c494 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b084      	sub	sp, #16
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c49c:	f7ff f980 	bl	800b7a0 <xTaskGetTickCount>
 800c4a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c4a2:	4b0b      	ldr	r3, [pc, #44]	; (800c4d0 <prvSampleTimeNow+0x3c>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	68fa      	ldr	r2, [r7, #12]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d205      	bcs.n	800c4b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c4ac:	f000 f936 	bl	800c71c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	601a      	str	r2, [r3, #0]
 800c4b6:	e002      	b.n	800c4be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c4be:	4a04      	ldr	r2, [pc, #16]	; (800c4d0 <prvSampleTimeNow+0x3c>)
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3710      	adds	r7, #16
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
 800c4ce:	bf00      	nop
 800c4d0:	20000f84 	.word	0x20000f84

0800c4d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b086      	sub	sp, #24
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	60f8      	str	r0, [r7, #12]
 800c4dc:	60b9      	str	r1, [r7, #8]
 800c4de:	607a      	str	r2, [r7, #4]
 800c4e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	68ba      	ldr	r2, [r7, #8]
 800c4ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	68fa      	ldr	r2, [r7, #12]
 800c4f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c4f2:	68ba      	ldr	r2, [r7, #8]
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	429a      	cmp	r2, r3
 800c4f8:	d812      	bhi.n	800c520 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4fa:	687a      	ldr	r2, [r7, #4]
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	1ad2      	subs	r2, r2, r3
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	699b      	ldr	r3, [r3, #24]
 800c504:	429a      	cmp	r2, r3
 800c506:	d302      	bcc.n	800c50e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c508:	2301      	movs	r3, #1
 800c50a:	617b      	str	r3, [r7, #20]
 800c50c:	e01b      	b.n	800c546 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c50e:	4b10      	ldr	r3, [pc, #64]	; (800c550 <prvInsertTimerInActiveList+0x7c>)
 800c510:	681a      	ldr	r2, [r3, #0]
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	3304      	adds	r3, #4
 800c516:	4619      	mov	r1, r3
 800c518:	4610      	mov	r0, r2
 800c51a:	f7fd fde8 	bl	800a0ee <vListInsert>
 800c51e:	e012      	b.n	800c546 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c520:	687a      	ldr	r2, [r7, #4]
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	429a      	cmp	r2, r3
 800c526:	d206      	bcs.n	800c536 <prvInsertTimerInActiveList+0x62>
 800c528:	68ba      	ldr	r2, [r7, #8]
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d302      	bcc.n	800c536 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c530:	2301      	movs	r3, #1
 800c532:	617b      	str	r3, [r7, #20]
 800c534:	e007      	b.n	800c546 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c536:	4b07      	ldr	r3, [pc, #28]	; (800c554 <prvInsertTimerInActiveList+0x80>)
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	3304      	adds	r3, #4
 800c53e:	4619      	mov	r1, r3
 800c540:	4610      	mov	r0, r2
 800c542:	f7fd fdd4 	bl	800a0ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c546:	697b      	ldr	r3, [r7, #20]
}
 800c548:	4618      	mov	r0, r3
 800c54a:	3718      	adds	r7, #24
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}
 800c550:	20000f78 	.word	0x20000f78
 800c554:	20000f74 	.word	0x20000f74

0800c558 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b08e      	sub	sp, #56	; 0x38
 800c55c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c55e:	e0ca      	b.n	800c6f6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2b00      	cmp	r3, #0
 800c564:	da18      	bge.n	800c598 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c566:	1d3b      	adds	r3, r7, #4
 800c568:	3304      	adds	r3, #4
 800c56a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d10a      	bne.n	800c588 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c576:	f383 8811 	msr	BASEPRI, r3
 800c57a:	f3bf 8f6f 	isb	sy
 800c57e:	f3bf 8f4f 	dsb	sy
 800c582:	61fb      	str	r3, [r7, #28]
}
 800c584:	bf00      	nop
 800c586:	e7fe      	b.n	800c586 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c58e:	6850      	ldr	r0, [r2, #4]
 800c590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c592:	6892      	ldr	r2, [r2, #8]
 800c594:	4611      	mov	r1, r2
 800c596:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	f2c0 80aa 	blt.w	800c6f4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a6:	695b      	ldr	r3, [r3, #20]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d004      	beq.n	800c5b6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ae:	3304      	adds	r3, #4
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f7fd fdd5 	bl	800a160 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c5b6:	463b      	mov	r3, r7
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f7ff ff6b 	bl	800c494 <prvSampleTimeNow>
 800c5be:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2b09      	cmp	r3, #9
 800c5c4:	f200 8097 	bhi.w	800c6f6 <prvProcessReceivedCommands+0x19e>
 800c5c8:	a201      	add	r2, pc, #4	; (adr r2, 800c5d0 <prvProcessReceivedCommands+0x78>)
 800c5ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5ce:	bf00      	nop
 800c5d0:	0800c5f9 	.word	0x0800c5f9
 800c5d4:	0800c5f9 	.word	0x0800c5f9
 800c5d8:	0800c5f9 	.word	0x0800c5f9
 800c5dc:	0800c66d 	.word	0x0800c66d
 800c5e0:	0800c681 	.word	0x0800c681
 800c5e4:	0800c6cb 	.word	0x0800c6cb
 800c5e8:	0800c5f9 	.word	0x0800c5f9
 800c5ec:	0800c5f9 	.word	0x0800c5f9
 800c5f0:	0800c66d 	.word	0x0800c66d
 800c5f4:	0800c681 	.word	0x0800c681
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5fe:	f043 0301 	orr.w	r3, r3, #1
 800c602:	b2da      	uxtb	r2, r3
 800c604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c606:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c60a:	68ba      	ldr	r2, [r7, #8]
 800c60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c60e:	699b      	ldr	r3, [r3, #24]
 800c610:	18d1      	adds	r1, r2, r3
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c616:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c618:	f7ff ff5c 	bl	800c4d4 <prvInsertTimerInActiveList>
 800c61c:	4603      	mov	r3, r0
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d069      	beq.n	800c6f6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c624:	6a1b      	ldr	r3, [r3, #32]
 800c626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c628:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c62c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c630:	f003 0304 	and.w	r3, r3, #4
 800c634:	2b00      	cmp	r3, #0
 800c636:	d05e      	beq.n	800c6f6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c638:	68ba      	ldr	r2, [r7, #8]
 800c63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c63c:	699b      	ldr	r3, [r3, #24]
 800c63e:	441a      	add	r2, r3
 800c640:	2300      	movs	r3, #0
 800c642:	9300      	str	r3, [sp, #0]
 800c644:	2300      	movs	r3, #0
 800c646:	2100      	movs	r1, #0
 800c648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c64a:	f7ff fe05 	bl	800c258 <xTimerGenericCommand>
 800c64e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c650:	6a3b      	ldr	r3, [r7, #32]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d14f      	bne.n	800c6f6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c65a:	f383 8811 	msr	BASEPRI, r3
 800c65e:	f3bf 8f6f 	isb	sy
 800c662:	f3bf 8f4f 	dsb	sy
 800c666:	61bb      	str	r3, [r7, #24]
}
 800c668:	bf00      	nop
 800c66a:	e7fe      	b.n	800c66a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c66e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c672:	f023 0301 	bic.w	r3, r3, #1
 800c676:	b2da      	uxtb	r2, r3
 800c678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c67a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c67e:	e03a      	b.n	800c6f6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c682:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c686:	f043 0301 	orr.w	r3, r3, #1
 800c68a:	b2da      	uxtb	r2, r3
 800c68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c68e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c692:	68ba      	ldr	r2, [r7, #8]
 800c694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c696:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c69a:	699b      	ldr	r3, [r3, #24]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d10a      	bne.n	800c6b6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a4:	f383 8811 	msr	BASEPRI, r3
 800c6a8:	f3bf 8f6f 	isb	sy
 800c6ac:	f3bf 8f4f 	dsb	sy
 800c6b0:	617b      	str	r3, [r7, #20]
}
 800c6b2:	bf00      	nop
 800c6b4:	e7fe      	b.n	800c6b4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b8:	699a      	ldr	r2, [r3, #24]
 800c6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6bc:	18d1      	adds	r1, r2, r3
 800c6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6c4:	f7ff ff06 	bl	800c4d4 <prvInsertTimerInActiveList>
					break;
 800c6c8:	e015      	b.n	800c6f6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6d0:	f003 0302 	and.w	r3, r3, #2
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d103      	bne.n	800c6e0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c6d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6da:	f000 fbe1 	bl	800cea0 <vPortFree>
 800c6de:	e00a      	b.n	800c6f6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6e6:	f023 0301 	bic.w	r3, r3, #1
 800c6ea:	b2da      	uxtb	r2, r3
 800c6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c6f2:	e000      	b.n	800c6f6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c6f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c6f6:	4b08      	ldr	r3, [pc, #32]	; (800c718 <prvProcessReceivedCommands+0x1c0>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	1d39      	adds	r1, r7, #4
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	4618      	mov	r0, r3
 800c700:	f7fe f926 	bl	800a950 <xQueueReceive>
 800c704:	4603      	mov	r3, r0
 800c706:	2b00      	cmp	r3, #0
 800c708:	f47f af2a 	bne.w	800c560 <prvProcessReceivedCommands+0x8>
	}
}
 800c70c:	bf00      	nop
 800c70e:	bf00      	nop
 800c710:	3730      	adds	r7, #48	; 0x30
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
 800c716:	bf00      	nop
 800c718:	20000f7c 	.word	0x20000f7c

0800c71c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b088      	sub	sp, #32
 800c720:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c722:	e048      	b.n	800c7b6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c724:	4b2d      	ldr	r3, [pc, #180]	; (800c7dc <prvSwitchTimerLists+0xc0>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	68db      	ldr	r3, [r3, #12]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c72e:	4b2b      	ldr	r3, [pc, #172]	; (800c7dc <prvSwitchTimerLists+0xc0>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	68db      	ldr	r3, [r3, #12]
 800c734:	68db      	ldr	r3, [r3, #12]
 800c736:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	3304      	adds	r3, #4
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7fd fd0f 	bl	800a160 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	6a1b      	ldr	r3, [r3, #32]
 800c746:	68f8      	ldr	r0, [r7, #12]
 800c748:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c750:	f003 0304 	and.w	r3, r3, #4
 800c754:	2b00      	cmp	r3, #0
 800c756:	d02e      	beq.n	800c7b6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	699b      	ldr	r3, [r3, #24]
 800c75c:	693a      	ldr	r2, [r7, #16]
 800c75e:	4413      	add	r3, r2
 800c760:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c762:	68ba      	ldr	r2, [r7, #8]
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	429a      	cmp	r2, r3
 800c768:	d90e      	bls.n	800c788 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	68ba      	ldr	r2, [r7, #8]
 800c76e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	68fa      	ldr	r2, [r7, #12]
 800c774:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c776:	4b19      	ldr	r3, [pc, #100]	; (800c7dc <prvSwitchTimerLists+0xc0>)
 800c778:	681a      	ldr	r2, [r3, #0]
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	3304      	adds	r3, #4
 800c77e:	4619      	mov	r1, r3
 800c780:	4610      	mov	r0, r2
 800c782:	f7fd fcb4 	bl	800a0ee <vListInsert>
 800c786:	e016      	b.n	800c7b6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c788:	2300      	movs	r3, #0
 800c78a:	9300      	str	r3, [sp, #0]
 800c78c:	2300      	movs	r3, #0
 800c78e:	693a      	ldr	r2, [r7, #16]
 800c790:	2100      	movs	r1, #0
 800c792:	68f8      	ldr	r0, [r7, #12]
 800c794:	f7ff fd60 	bl	800c258 <xTimerGenericCommand>
 800c798:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d10a      	bne.n	800c7b6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a4:	f383 8811 	msr	BASEPRI, r3
 800c7a8:	f3bf 8f6f 	isb	sy
 800c7ac:	f3bf 8f4f 	dsb	sy
 800c7b0:	603b      	str	r3, [r7, #0]
}
 800c7b2:	bf00      	nop
 800c7b4:	e7fe      	b.n	800c7b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c7b6:	4b09      	ldr	r3, [pc, #36]	; (800c7dc <prvSwitchTimerLists+0xc0>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d1b1      	bne.n	800c724 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c7c0:	4b06      	ldr	r3, [pc, #24]	; (800c7dc <prvSwitchTimerLists+0xc0>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c7c6:	4b06      	ldr	r3, [pc, #24]	; (800c7e0 <prvSwitchTimerLists+0xc4>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	4a04      	ldr	r2, [pc, #16]	; (800c7dc <prvSwitchTimerLists+0xc0>)
 800c7cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c7ce:	4a04      	ldr	r2, [pc, #16]	; (800c7e0 <prvSwitchTimerLists+0xc4>)
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	6013      	str	r3, [r2, #0]
}
 800c7d4:	bf00      	nop
 800c7d6:	3718      	adds	r7, #24
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}
 800c7dc:	20000f74 	.word	0x20000f74
 800c7e0:	20000f78 	.word	0x20000f78

0800c7e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b082      	sub	sp, #8
 800c7e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c7ea:	f000 f96b 	bl	800cac4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c7ee:	4b15      	ldr	r3, [pc, #84]	; (800c844 <prvCheckForValidListAndQueue+0x60>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d120      	bne.n	800c838 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c7f6:	4814      	ldr	r0, [pc, #80]	; (800c848 <prvCheckForValidListAndQueue+0x64>)
 800c7f8:	f7fd fc28 	bl	800a04c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c7fc:	4813      	ldr	r0, [pc, #76]	; (800c84c <prvCheckForValidListAndQueue+0x68>)
 800c7fe:	f7fd fc25 	bl	800a04c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c802:	4b13      	ldr	r3, [pc, #76]	; (800c850 <prvCheckForValidListAndQueue+0x6c>)
 800c804:	4a10      	ldr	r2, [pc, #64]	; (800c848 <prvCheckForValidListAndQueue+0x64>)
 800c806:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c808:	4b12      	ldr	r3, [pc, #72]	; (800c854 <prvCheckForValidListAndQueue+0x70>)
 800c80a:	4a10      	ldr	r2, [pc, #64]	; (800c84c <prvCheckForValidListAndQueue+0x68>)
 800c80c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c80e:	2300      	movs	r3, #0
 800c810:	9300      	str	r3, [sp, #0]
 800c812:	4b11      	ldr	r3, [pc, #68]	; (800c858 <prvCheckForValidListAndQueue+0x74>)
 800c814:	4a11      	ldr	r2, [pc, #68]	; (800c85c <prvCheckForValidListAndQueue+0x78>)
 800c816:	2110      	movs	r1, #16
 800c818:	200a      	movs	r0, #10
 800c81a:	f7fd fd33 	bl	800a284 <xQueueGenericCreateStatic>
 800c81e:	4603      	mov	r3, r0
 800c820:	4a08      	ldr	r2, [pc, #32]	; (800c844 <prvCheckForValidListAndQueue+0x60>)
 800c822:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c824:	4b07      	ldr	r3, [pc, #28]	; (800c844 <prvCheckForValidListAndQueue+0x60>)
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d005      	beq.n	800c838 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c82c:	4b05      	ldr	r3, [pc, #20]	; (800c844 <prvCheckForValidListAndQueue+0x60>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	490b      	ldr	r1, [pc, #44]	; (800c860 <prvCheckForValidListAndQueue+0x7c>)
 800c832:	4618      	mov	r0, r3
 800c834:	f7fe fc44 	bl	800b0c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c838:	f000 f974 	bl	800cb24 <vPortExitCritical>
}
 800c83c:	bf00      	nop
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
 800c842:	bf00      	nop
 800c844:	20000f7c 	.word	0x20000f7c
 800c848:	20000f4c 	.word	0x20000f4c
 800c84c:	20000f60 	.word	0x20000f60
 800c850:	20000f74 	.word	0x20000f74
 800c854:	20000f78 	.word	0x20000f78
 800c858:	20001028 	.word	0x20001028
 800c85c:	20000f88 	.word	0x20000f88
 800c860:	080153a4 	.word	0x080153a4

0800c864 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c864:	b480      	push	{r7}
 800c866:	b085      	sub	sp, #20
 800c868:	af00      	add	r7, sp, #0
 800c86a:	60f8      	str	r0, [r7, #12]
 800c86c:	60b9      	str	r1, [r7, #8]
 800c86e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	3b04      	subs	r3, #4
 800c874:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c87c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	3b04      	subs	r3, #4
 800c882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	f023 0201 	bic.w	r2, r3, #1
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	3b04      	subs	r3, #4
 800c892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c894:	4a0c      	ldr	r2, [pc, #48]	; (800c8c8 <pxPortInitialiseStack+0x64>)
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	3b14      	subs	r3, #20
 800c89e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c8a0:	687a      	ldr	r2, [r7, #4]
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	3b04      	subs	r3, #4
 800c8aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	f06f 0202 	mvn.w	r2, #2
 800c8b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	3b20      	subs	r3, #32
 800c8b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3714      	adds	r7, #20
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr
 800c8c8:	0800c8cd 	.word	0x0800c8cd

0800c8cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b085      	sub	sp, #20
 800c8d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c8d6:	4b12      	ldr	r3, [pc, #72]	; (800c920 <prvTaskExitError+0x54>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8de:	d00a      	beq.n	800c8f6 <prvTaskExitError+0x2a>
	__asm volatile
 800c8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e4:	f383 8811 	msr	BASEPRI, r3
 800c8e8:	f3bf 8f6f 	isb	sy
 800c8ec:	f3bf 8f4f 	dsb	sy
 800c8f0:	60fb      	str	r3, [r7, #12]
}
 800c8f2:	bf00      	nop
 800c8f4:	e7fe      	b.n	800c8f4 <prvTaskExitError+0x28>
	__asm volatile
 800c8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8fa:	f383 8811 	msr	BASEPRI, r3
 800c8fe:	f3bf 8f6f 	isb	sy
 800c902:	f3bf 8f4f 	dsb	sy
 800c906:	60bb      	str	r3, [r7, #8]
}
 800c908:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c90a:	bf00      	nop
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d0fc      	beq.n	800c90c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c912:	bf00      	nop
 800c914:	bf00      	nop
 800c916:	3714      	adds	r7, #20
 800c918:	46bd      	mov	sp, r7
 800c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91e:	4770      	bx	lr
 800c920:	20000034 	.word	0x20000034
	...

0800c930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c930:	4b07      	ldr	r3, [pc, #28]	; (800c950 <pxCurrentTCBConst2>)
 800c932:	6819      	ldr	r1, [r3, #0]
 800c934:	6808      	ldr	r0, [r1, #0]
 800c936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c93a:	f380 8809 	msr	PSP, r0
 800c93e:	f3bf 8f6f 	isb	sy
 800c942:	f04f 0000 	mov.w	r0, #0
 800c946:	f380 8811 	msr	BASEPRI, r0
 800c94a:	4770      	bx	lr
 800c94c:	f3af 8000 	nop.w

0800c950 <pxCurrentTCBConst2>:
 800c950:	20000a4c 	.word	0x20000a4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c954:	bf00      	nop
 800c956:	bf00      	nop

0800c958 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c958:	4808      	ldr	r0, [pc, #32]	; (800c97c <prvPortStartFirstTask+0x24>)
 800c95a:	6800      	ldr	r0, [r0, #0]
 800c95c:	6800      	ldr	r0, [r0, #0]
 800c95e:	f380 8808 	msr	MSP, r0
 800c962:	f04f 0000 	mov.w	r0, #0
 800c966:	f380 8814 	msr	CONTROL, r0
 800c96a:	b662      	cpsie	i
 800c96c:	b661      	cpsie	f
 800c96e:	f3bf 8f4f 	dsb	sy
 800c972:	f3bf 8f6f 	isb	sy
 800c976:	df00      	svc	0
 800c978:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c97a:	bf00      	nop
 800c97c:	e000ed08 	.word	0xe000ed08

0800c980 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b086      	sub	sp, #24
 800c984:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c986:	4b46      	ldr	r3, [pc, #280]	; (800caa0 <xPortStartScheduler+0x120>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	4a46      	ldr	r2, [pc, #280]	; (800caa4 <xPortStartScheduler+0x124>)
 800c98c:	4293      	cmp	r3, r2
 800c98e:	d10a      	bne.n	800c9a6 <xPortStartScheduler+0x26>
	__asm volatile
 800c990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c994:	f383 8811 	msr	BASEPRI, r3
 800c998:	f3bf 8f6f 	isb	sy
 800c99c:	f3bf 8f4f 	dsb	sy
 800c9a0:	613b      	str	r3, [r7, #16]
}
 800c9a2:	bf00      	nop
 800c9a4:	e7fe      	b.n	800c9a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c9a6:	4b3e      	ldr	r3, [pc, #248]	; (800caa0 <xPortStartScheduler+0x120>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	4a3f      	ldr	r2, [pc, #252]	; (800caa8 <xPortStartScheduler+0x128>)
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d10a      	bne.n	800c9c6 <xPortStartScheduler+0x46>
	__asm volatile
 800c9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b4:	f383 8811 	msr	BASEPRI, r3
 800c9b8:	f3bf 8f6f 	isb	sy
 800c9bc:	f3bf 8f4f 	dsb	sy
 800c9c0:	60fb      	str	r3, [r7, #12]
}
 800c9c2:	bf00      	nop
 800c9c4:	e7fe      	b.n	800c9c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c9c6:	4b39      	ldr	r3, [pc, #228]	; (800caac <xPortStartScheduler+0x12c>)
 800c9c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	b2db      	uxtb	r3, r3
 800c9d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	22ff      	movs	r2, #255	; 0xff
 800c9d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	b2db      	uxtb	r3, r3
 800c9de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c9e0:	78fb      	ldrb	r3, [r7, #3]
 800c9e2:	b2db      	uxtb	r3, r3
 800c9e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c9e8:	b2da      	uxtb	r2, r3
 800c9ea:	4b31      	ldr	r3, [pc, #196]	; (800cab0 <xPortStartScheduler+0x130>)
 800c9ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c9ee:	4b31      	ldr	r3, [pc, #196]	; (800cab4 <xPortStartScheduler+0x134>)
 800c9f0:	2207      	movs	r2, #7
 800c9f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c9f4:	e009      	b.n	800ca0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c9f6:	4b2f      	ldr	r3, [pc, #188]	; (800cab4 <xPortStartScheduler+0x134>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	3b01      	subs	r3, #1
 800c9fc:	4a2d      	ldr	r2, [pc, #180]	; (800cab4 <xPortStartScheduler+0x134>)
 800c9fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ca00:	78fb      	ldrb	r3, [r7, #3]
 800ca02:	b2db      	uxtb	r3, r3
 800ca04:	005b      	lsls	r3, r3, #1
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ca0a:	78fb      	ldrb	r3, [r7, #3]
 800ca0c:	b2db      	uxtb	r3, r3
 800ca0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca12:	2b80      	cmp	r3, #128	; 0x80
 800ca14:	d0ef      	beq.n	800c9f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ca16:	4b27      	ldr	r3, [pc, #156]	; (800cab4 <xPortStartScheduler+0x134>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f1c3 0307 	rsb	r3, r3, #7
 800ca1e:	2b04      	cmp	r3, #4
 800ca20:	d00a      	beq.n	800ca38 <xPortStartScheduler+0xb8>
	__asm volatile
 800ca22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca26:	f383 8811 	msr	BASEPRI, r3
 800ca2a:	f3bf 8f6f 	isb	sy
 800ca2e:	f3bf 8f4f 	dsb	sy
 800ca32:	60bb      	str	r3, [r7, #8]
}
 800ca34:	bf00      	nop
 800ca36:	e7fe      	b.n	800ca36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ca38:	4b1e      	ldr	r3, [pc, #120]	; (800cab4 <xPortStartScheduler+0x134>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	021b      	lsls	r3, r3, #8
 800ca3e:	4a1d      	ldr	r2, [pc, #116]	; (800cab4 <xPortStartScheduler+0x134>)
 800ca40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ca42:	4b1c      	ldr	r3, [pc, #112]	; (800cab4 <xPortStartScheduler+0x134>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ca4a:	4a1a      	ldr	r2, [pc, #104]	; (800cab4 <xPortStartScheduler+0x134>)
 800ca4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	b2da      	uxtb	r2, r3
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ca56:	4b18      	ldr	r3, [pc, #96]	; (800cab8 <xPortStartScheduler+0x138>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	4a17      	ldr	r2, [pc, #92]	; (800cab8 <xPortStartScheduler+0x138>)
 800ca5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ca60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ca62:	4b15      	ldr	r3, [pc, #84]	; (800cab8 <xPortStartScheduler+0x138>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	4a14      	ldr	r2, [pc, #80]	; (800cab8 <xPortStartScheduler+0x138>)
 800ca68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ca6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ca6e:	f000 f8dd 	bl	800cc2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ca72:	4b12      	ldr	r3, [pc, #72]	; (800cabc <xPortStartScheduler+0x13c>)
 800ca74:	2200      	movs	r2, #0
 800ca76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ca78:	f000 f8fc 	bl	800cc74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ca7c:	4b10      	ldr	r3, [pc, #64]	; (800cac0 <xPortStartScheduler+0x140>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	4a0f      	ldr	r2, [pc, #60]	; (800cac0 <xPortStartScheduler+0x140>)
 800ca82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ca86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ca88:	f7ff ff66 	bl	800c958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ca8c:	f7fe ff52 	bl	800b934 <vTaskSwitchContext>
	prvTaskExitError();
 800ca90:	f7ff ff1c 	bl	800c8cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ca94:	2300      	movs	r3, #0
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3718      	adds	r7, #24
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}
 800ca9e:	bf00      	nop
 800caa0:	e000ed00 	.word	0xe000ed00
 800caa4:	410fc271 	.word	0x410fc271
 800caa8:	410fc270 	.word	0x410fc270
 800caac:	e000e400 	.word	0xe000e400
 800cab0:	20001078 	.word	0x20001078
 800cab4:	2000107c 	.word	0x2000107c
 800cab8:	e000ed20 	.word	0xe000ed20
 800cabc:	20000034 	.word	0x20000034
 800cac0:	e000ef34 	.word	0xe000ef34

0800cac4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cac4:	b480      	push	{r7}
 800cac6:	b083      	sub	sp, #12
 800cac8:	af00      	add	r7, sp, #0
	__asm volatile
 800caca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cace:	f383 8811 	msr	BASEPRI, r3
 800cad2:	f3bf 8f6f 	isb	sy
 800cad6:	f3bf 8f4f 	dsb	sy
 800cada:	607b      	str	r3, [r7, #4]
}
 800cadc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cade:	4b0f      	ldr	r3, [pc, #60]	; (800cb1c <vPortEnterCritical+0x58>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	3301      	adds	r3, #1
 800cae4:	4a0d      	ldr	r2, [pc, #52]	; (800cb1c <vPortEnterCritical+0x58>)
 800cae6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cae8:	4b0c      	ldr	r3, [pc, #48]	; (800cb1c <vPortEnterCritical+0x58>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	2b01      	cmp	r3, #1
 800caee:	d10f      	bne.n	800cb10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800caf0:	4b0b      	ldr	r3, [pc, #44]	; (800cb20 <vPortEnterCritical+0x5c>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	b2db      	uxtb	r3, r3
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d00a      	beq.n	800cb10 <vPortEnterCritical+0x4c>
	__asm volatile
 800cafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cafe:	f383 8811 	msr	BASEPRI, r3
 800cb02:	f3bf 8f6f 	isb	sy
 800cb06:	f3bf 8f4f 	dsb	sy
 800cb0a:	603b      	str	r3, [r7, #0]
}
 800cb0c:	bf00      	nop
 800cb0e:	e7fe      	b.n	800cb0e <vPortEnterCritical+0x4a>
	}
}
 800cb10:	bf00      	nop
 800cb12:	370c      	adds	r7, #12
 800cb14:	46bd      	mov	sp, r7
 800cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1a:	4770      	bx	lr
 800cb1c:	20000034 	.word	0x20000034
 800cb20:	e000ed04 	.word	0xe000ed04

0800cb24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cb24:	b480      	push	{r7}
 800cb26:	b083      	sub	sp, #12
 800cb28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cb2a:	4b12      	ldr	r3, [pc, #72]	; (800cb74 <vPortExitCritical+0x50>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d10a      	bne.n	800cb48 <vPortExitCritical+0x24>
	__asm volatile
 800cb32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb36:	f383 8811 	msr	BASEPRI, r3
 800cb3a:	f3bf 8f6f 	isb	sy
 800cb3e:	f3bf 8f4f 	dsb	sy
 800cb42:	607b      	str	r3, [r7, #4]
}
 800cb44:	bf00      	nop
 800cb46:	e7fe      	b.n	800cb46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cb48:	4b0a      	ldr	r3, [pc, #40]	; (800cb74 <vPortExitCritical+0x50>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	3b01      	subs	r3, #1
 800cb4e:	4a09      	ldr	r2, [pc, #36]	; (800cb74 <vPortExitCritical+0x50>)
 800cb50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cb52:	4b08      	ldr	r3, [pc, #32]	; (800cb74 <vPortExitCritical+0x50>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d105      	bne.n	800cb66 <vPortExitCritical+0x42>
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	f383 8811 	msr	BASEPRI, r3
}
 800cb64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cb66:	bf00      	nop
 800cb68:	370c      	adds	r7, #12
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb70:	4770      	bx	lr
 800cb72:	bf00      	nop
 800cb74:	20000034 	.word	0x20000034
	...

0800cb80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cb80:	f3ef 8009 	mrs	r0, PSP
 800cb84:	f3bf 8f6f 	isb	sy
 800cb88:	4b15      	ldr	r3, [pc, #84]	; (800cbe0 <pxCurrentTCBConst>)
 800cb8a:	681a      	ldr	r2, [r3, #0]
 800cb8c:	f01e 0f10 	tst.w	lr, #16
 800cb90:	bf08      	it	eq
 800cb92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cb96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb9a:	6010      	str	r0, [r2, #0]
 800cb9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cba0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cba4:	f380 8811 	msr	BASEPRI, r0
 800cba8:	f3bf 8f4f 	dsb	sy
 800cbac:	f3bf 8f6f 	isb	sy
 800cbb0:	f7fe fec0 	bl	800b934 <vTaskSwitchContext>
 800cbb4:	f04f 0000 	mov.w	r0, #0
 800cbb8:	f380 8811 	msr	BASEPRI, r0
 800cbbc:	bc09      	pop	{r0, r3}
 800cbbe:	6819      	ldr	r1, [r3, #0]
 800cbc0:	6808      	ldr	r0, [r1, #0]
 800cbc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbc6:	f01e 0f10 	tst.w	lr, #16
 800cbca:	bf08      	it	eq
 800cbcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cbd0:	f380 8809 	msr	PSP, r0
 800cbd4:	f3bf 8f6f 	isb	sy
 800cbd8:	4770      	bx	lr
 800cbda:	bf00      	nop
 800cbdc:	f3af 8000 	nop.w

0800cbe0 <pxCurrentTCBConst>:
 800cbe0:	20000a4c 	.word	0x20000a4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cbe4:	bf00      	nop
 800cbe6:	bf00      	nop

0800cbe8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b082      	sub	sp, #8
 800cbec:	af00      	add	r7, sp, #0
	__asm volatile
 800cbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf2:	f383 8811 	msr	BASEPRI, r3
 800cbf6:	f3bf 8f6f 	isb	sy
 800cbfa:	f3bf 8f4f 	dsb	sy
 800cbfe:	607b      	str	r3, [r7, #4]
}
 800cc00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cc02:	f7fe fddd 	bl	800b7c0 <xTaskIncrementTick>
 800cc06:	4603      	mov	r3, r0
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d003      	beq.n	800cc14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cc0c:	4b06      	ldr	r3, [pc, #24]	; (800cc28 <xPortSysTickHandler+0x40>)
 800cc0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc12:	601a      	str	r2, [r3, #0]
 800cc14:	2300      	movs	r3, #0
 800cc16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	f383 8811 	msr	BASEPRI, r3
}
 800cc1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cc20:	bf00      	nop
 800cc22:	3708      	adds	r7, #8
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	e000ed04 	.word	0xe000ed04

0800cc2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cc30:	4b0b      	ldr	r3, [pc, #44]	; (800cc60 <vPortSetupTimerInterrupt+0x34>)
 800cc32:	2200      	movs	r2, #0
 800cc34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cc36:	4b0b      	ldr	r3, [pc, #44]	; (800cc64 <vPortSetupTimerInterrupt+0x38>)
 800cc38:	2200      	movs	r2, #0
 800cc3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cc3c:	4b0a      	ldr	r3, [pc, #40]	; (800cc68 <vPortSetupTimerInterrupt+0x3c>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4a0a      	ldr	r2, [pc, #40]	; (800cc6c <vPortSetupTimerInterrupt+0x40>)
 800cc42:	fba2 2303 	umull	r2, r3, r2, r3
 800cc46:	099b      	lsrs	r3, r3, #6
 800cc48:	4a09      	ldr	r2, [pc, #36]	; (800cc70 <vPortSetupTimerInterrupt+0x44>)
 800cc4a:	3b01      	subs	r3, #1
 800cc4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cc4e:	4b04      	ldr	r3, [pc, #16]	; (800cc60 <vPortSetupTimerInterrupt+0x34>)
 800cc50:	2207      	movs	r2, #7
 800cc52:	601a      	str	r2, [r3, #0]
}
 800cc54:	bf00      	nop
 800cc56:	46bd      	mov	sp, r7
 800cc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5c:	4770      	bx	lr
 800cc5e:	bf00      	nop
 800cc60:	e000e010 	.word	0xe000e010
 800cc64:	e000e018 	.word	0xe000e018
 800cc68:	20000010 	.word	0x20000010
 800cc6c:	10624dd3 	.word	0x10624dd3
 800cc70:	e000e014 	.word	0xe000e014

0800cc74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cc74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cc84 <vPortEnableVFP+0x10>
 800cc78:	6801      	ldr	r1, [r0, #0]
 800cc7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cc7e:	6001      	str	r1, [r0, #0]
 800cc80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cc82:	bf00      	nop
 800cc84:	e000ed88 	.word	0xe000ed88

0800cc88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cc88:	b480      	push	{r7}
 800cc8a:	b085      	sub	sp, #20
 800cc8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cc8e:	f3ef 8305 	mrs	r3, IPSR
 800cc92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	2b0f      	cmp	r3, #15
 800cc98:	d914      	bls.n	800ccc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cc9a:	4a17      	ldr	r2, [pc, #92]	; (800ccf8 <vPortValidateInterruptPriority+0x70>)
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	4413      	add	r3, r2
 800cca0:	781b      	ldrb	r3, [r3, #0]
 800cca2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cca4:	4b15      	ldr	r3, [pc, #84]	; (800ccfc <vPortValidateInterruptPriority+0x74>)
 800cca6:	781b      	ldrb	r3, [r3, #0]
 800cca8:	7afa      	ldrb	r2, [r7, #11]
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d20a      	bcs.n	800ccc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ccae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb2:	f383 8811 	msr	BASEPRI, r3
 800ccb6:	f3bf 8f6f 	isb	sy
 800ccba:	f3bf 8f4f 	dsb	sy
 800ccbe:	607b      	str	r3, [r7, #4]
}
 800ccc0:	bf00      	nop
 800ccc2:	e7fe      	b.n	800ccc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ccc4:	4b0e      	ldr	r3, [pc, #56]	; (800cd00 <vPortValidateInterruptPriority+0x78>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cccc:	4b0d      	ldr	r3, [pc, #52]	; (800cd04 <vPortValidateInterruptPriority+0x7c>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d90a      	bls.n	800ccea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ccd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd8:	f383 8811 	msr	BASEPRI, r3
 800ccdc:	f3bf 8f6f 	isb	sy
 800cce0:	f3bf 8f4f 	dsb	sy
 800cce4:	603b      	str	r3, [r7, #0]
}
 800cce6:	bf00      	nop
 800cce8:	e7fe      	b.n	800cce8 <vPortValidateInterruptPriority+0x60>
	}
 800ccea:	bf00      	nop
 800ccec:	3714      	adds	r7, #20
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf4:	4770      	bx	lr
 800ccf6:	bf00      	nop
 800ccf8:	e000e3f0 	.word	0xe000e3f0
 800ccfc:	20001078 	.word	0x20001078
 800cd00:	e000ed0c 	.word	0xe000ed0c
 800cd04:	2000107c 	.word	0x2000107c

0800cd08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b08a      	sub	sp, #40	; 0x28
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cd10:	2300      	movs	r3, #0
 800cd12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cd14:	f7fe fc98 	bl	800b648 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cd18:	4b5b      	ldr	r3, [pc, #364]	; (800ce88 <pvPortMalloc+0x180>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d101      	bne.n	800cd24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cd20:	f000 f920 	bl	800cf64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cd24:	4b59      	ldr	r3, [pc, #356]	; (800ce8c <pvPortMalloc+0x184>)
 800cd26:	681a      	ldr	r2, [r3, #0]
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	4013      	ands	r3, r2
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	f040 8093 	bne.w	800ce58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d01d      	beq.n	800cd74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cd38:	2208      	movs	r2, #8
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	4413      	add	r3, r2
 800cd3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f003 0307 	and.w	r3, r3, #7
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d014      	beq.n	800cd74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f023 0307 	bic.w	r3, r3, #7
 800cd50:	3308      	adds	r3, #8
 800cd52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f003 0307 	and.w	r3, r3, #7
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d00a      	beq.n	800cd74 <pvPortMalloc+0x6c>
	__asm volatile
 800cd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd62:	f383 8811 	msr	BASEPRI, r3
 800cd66:	f3bf 8f6f 	isb	sy
 800cd6a:	f3bf 8f4f 	dsb	sy
 800cd6e:	617b      	str	r3, [r7, #20]
}
 800cd70:	bf00      	nop
 800cd72:	e7fe      	b.n	800cd72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d06e      	beq.n	800ce58 <pvPortMalloc+0x150>
 800cd7a:	4b45      	ldr	r3, [pc, #276]	; (800ce90 <pvPortMalloc+0x188>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	687a      	ldr	r2, [r7, #4]
 800cd80:	429a      	cmp	r2, r3
 800cd82:	d869      	bhi.n	800ce58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cd84:	4b43      	ldr	r3, [pc, #268]	; (800ce94 <pvPortMalloc+0x18c>)
 800cd86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cd88:	4b42      	ldr	r3, [pc, #264]	; (800ce94 <pvPortMalloc+0x18c>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd8e:	e004      	b.n	800cd9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd9c:	685b      	ldr	r3, [r3, #4]
 800cd9e:	687a      	ldr	r2, [r7, #4]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d903      	bls.n	800cdac <pvPortMalloc+0xa4>
 800cda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d1f1      	bne.n	800cd90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cdac:	4b36      	ldr	r3, [pc, #216]	; (800ce88 <pvPortMalloc+0x180>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdb2:	429a      	cmp	r2, r3
 800cdb4:	d050      	beq.n	800ce58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cdb6:	6a3b      	ldr	r3, [r7, #32]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	2208      	movs	r2, #8
 800cdbc:	4413      	add	r3, r2
 800cdbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc2:	681a      	ldr	r2, [r3, #0]
 800cdc4:	6a3b      	ldr	r3, [r7, #32]
 800cdc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdca:	685a      	ldr	r2, [r3, #4]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	1ad2      	subs	r2, r2, r3
 800cdd0:	2308      	movs	r3, #8
 800cdd2:	005b      	lsls	r3, r3, #1
 800cdd4:	429a      	cmp	r2, r3
 800cdd6:	d91f      	bls.n	800ce18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cdd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	4413      	add	r3, r2
 800cdde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cde0:	69bb      	ldr	r3, [r7, #24]
 800cde2:	f003 0307 	and.w	r3, r3, #7
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d00a      	beq.n	800ce00 <pvPortMalloc+0xf8>
	__asm volatile
 800cdea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdee:	f383 8811 	msr	BASEPRI, r3
 800cdf2:	f3bf 8f6f 	isb	sy
 800cdf6:	f3bf 8f4f 	dsb	sy
 800cdfa:	613b      	str	r3, [r7, #16]
}
 800cdfc:	bf00      	nop
 800cdfe:	e7fe      	b.n	800cdfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ce00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce02:	685a      	ldr	r2, [r3, #4]
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	1ad2      	subs	r2, r2, r3
 800ce08:	69bb      	ldr	r3, [r7, #24]
 800ce0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ce0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce0e:	687a      	ldr	r2, [r7, #4]
 800ce10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ce12:	69b8      	ldr	r0, [r7, #24]
 800ce14:	f000 f908 	bl	800d028 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ce18:	4b1d      	ldr	r3, [pc, #116]	; (800ce90 <pvPortMalloc+0x188>)
 800ce1a:	681a      	ldr	r2, [r3, #0]
 800ce1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce1e:	685b      	ldr	r3, [r3, #4]
 800ce20:	1ad3      	subs	r3, r2, r3
 800ce22:	4a1b      	ldr	r2, [pc, #108]	; (800ce90 <pvPortMalloc+0x188>)
 800ce24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ce26:	4b1a      	ldr	r3, [pc, #104]	; (800ce90 <pvPortMalloc+0x188>)
 800ce28:	681a      	ldr	r2, [r3, #0]
 800ce2a:	4b1b      	ldr	r3, [pc, #108]	; (800ce98 <pvPortMalloc+0x190>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	d203      	bcs.n	800ce3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ce32:	4b17      	ldr	r3, [pc, #92]	; (800ce90 <pvPortMalloc+0x188>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	4a18      	ldr	r2, [pc, #96]	; (800ce98 <pvPortMalloc+0x190>)
 800ce38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ce3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce3c:	685a      	ldr	r2, [r3, #4]
 800ce3e:	4b13      	ldr	r3, [pc, #76]	; (800ce8c <pvPortMalloc+0x184>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	431a      	orrs	r2, r3
 800ce44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ce48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ce4e:	4b13      	ldr	r3, [pc, #76]	; (800ce9c <pvPortMalloc+0x194>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	3301      	adds	r3, #1
 800ce54:	4a11      	ldr	r2, [pc, #68]	; (800ce9c <pvPortMalloc+0x194>)
 800ce56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ce58:	f7fe fc04 	bl	800b664 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce5c:	69fb      	ldr	r3, [r7, #28]
 800ce5e:	f003 0307 	and.w	r3, r3, #7
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d00a      	beq.n	800ce7c <pvPortMalloc+0x174>
	__asm volatile
 800ce66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce6a:	f383 8811 	msr	BASEPRI, r3
 800ce6e:	f3bf 8f6f 	isb	sy
 800ce72:	f3bf 8f4f 	dsb	sy
 800ce76:	60fb      	str	r3, [r7, #12]
}
 800ce78:	bf00      	nop
 800ce7a:	e7fe      	b.n	800ce7a <pvPortMalloc+0x172>
	return pvReturn;
 800ce7c:	69fb      	ldr	r3, [r7, #28]
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3728      	adds	r7, #40	; 0x28
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}
 800ce86:	bf00      	nop
 800ce88:	20004c88 	.word	0x20004c88
 800ce8c:	20004c9c 	.word	0x20004c9c
 800ce90:	20004c8c 	.word	0x20004c8c
 800ce94:	20004c80 	.word	0x20004c80
 800ce98:	20004c90 	.word	0x20004c90
 800ce9c:	20004c94 	.word	0x20004c94

0800cea0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b086      	sub	sp, #24
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d04d      	beq.n	800cf4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ceb2:	2308      	movs	r3, #8
 800ceb4:	425b      	negs	r3, r3
 800ceb6:	697a      	ldr	r2, [r7, #20]
 800ceb8:	4413      	add	r3, r2
 800ceba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cec0:	693b      	ldr	r3, [r7, #16]
 800cec2:	685a      	ldr	r2, [r3, #4]
 800cec4:	4b24      	ldr	r3, [pc, #144]	; (800cf58 <vPortFree+0xb8>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	4013      	ands	r3, r2
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d10a      	bne.n	800cee4 <vPortFree+0x44>
	__asm volatile
 800cece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced2:	f383 8811 	msr	BASEPRI, r3
 800ced6:	f3bf 8f6f 	isb	sy
 800ceda:	f3bf 8f4f 	dsb	sy
 800cede:	60fb      	str	r3, [r7, #12]
}
 800cee0:	bf00      	nop
 800cee2:	e7fe      	b.n	800cee2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cee4:	693b      	ldr	r3, [r7, #16]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d00a      	beq.n	800cf02 <vPortFree+0x62>
	__asm volatile
 800ceec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cef0:	f383 8811 	msr	BASEPRI, r3
 800cef4:	f3bf 8f6f 	isb	sy
 800cef8:	f3bf 8f4f 	dsb	sy
 800cefc:	60bb      	str	r3, [r7, #8]
}
 800cefe:	bf00      	nop
 800cf00:	e7fe      	b.n	800cf00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	685a      	ldr	r2, [r3, #4]
 800cf06:	4b14      	ldr	r3, [pc, #80]	; (800cf58 <vPortFree+0xb8>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	4013      	ands	r3, r2
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d01e      	beq.n	800cf4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d11a      	bne.n	800cf4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	685a      	ldr	r2, [r3, #4]
 800cf1c:	4b0e      	ldr	r3, [pc, #56]	; (800cf58 <vPortFree+0xb8>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	43db      	mvns	r3, r3
 800cf22:	401a      	ands	r2, r3
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cf28:	f7fe fb8e 	bl	800b648 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cf2c:	693b      	ldr	r3, [r7, #16]
 800cf2e:	685a      	ldr	r2, [r3, #4]
 800cf30:	4b0a      	ldr	r3, [pc, #40]	; (800cf5c <vPortFree+0xbc>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	4413      	add	r3, r2
 800cf36:	4a09      	ldr	r2, [pc, #36]	; (800cf5c <vPortFree+0xbc>)
 800cf38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cf3a:	6938      	ldr	r0, [r7, #16]
 800cf3c:	f000 f874 	bl	800d028 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cf40:	4b07      	ldr	r3, [pc, #28]	; (800cf60 <vPortFree+0xc0>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	3301      	adds	r3, #1
 800cf46:	4a06      	ldr	r2, [pc, #24]	; (800cf60 <vPortFree+0xc0>)
 800cf48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cf4a:	f7fe fb8b 	bl	800b664 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cf4e:	bf00      	nop
 800cf50:	3718      	adds	r7, #24
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}
 800cf56:	bf00      	nop
 800cf58:	20004c9c 	.word	0x20004c9c
 800cf5c:	20004c8c 	.word	0x20004c8c
 800cf60:	20004c98 	.word	0x20004c98

0800cf64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cf64:	b480      	push	{r7}
 800cf66:	b085      	sub	sp, #20
 800cf68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cf6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cf6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cf70:	4b27      	ldr	r3, [pc, #156]	; (800d010 <prvHeapInit+0xac>)
 800cf72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	f003 0307 	and.w	r3, r3, #7
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d00c      	beq.n	800cf98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	3307      	adds	r3, #7
 800cf82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	f023 0307 	bic.w	r3, r3, #7
 800cf8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cf8c:	68ba      	ldr	r2, [r7, #8]
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	1ad3      	subs	r3, r2, r3
 800cf92:	4a1f      	ldr	r2, [pc, #124]	; (800d010 <prvHeapInit+0xac>)
 800cf94:	4413      	add	r3, r2
 800cf96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cf9c:	4a1d      	ldr	r2, [pc, #116]	; (800d014 <prvHeapInit+0xb0>)
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cfa2:	4b1c      	ldr	r3, [pc, #112]	; (800d014 <prvHeapInit+0xb0>)
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	68ba      	ldr	r2, [r7, #8]
 800cfac:	4413      	add	r3, r2
 800cfae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cfb0:	2208      	movs	r2, #8
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	1a9b      	subs	r3, r3, r2
 800cfb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	f023 0307 	bic.w	r3, r3, #7
 800cfbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	4a15      	ldr	r2, [pc, #84]	; (800d018 <prvHeapInit+0xb4>)
 800cfc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cfc6:	4b14      	ldr	r3, [pc, #80]	; (800d018 <prvHeapInit+0xb4>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cfce:	4b12      	ldr	r3, [pc, #72]	; (800d018 <prvHeapInit+0xb4>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	68fa      	ldr	r2, [r7, #12]
 800cfde:	1ad2      	subs	r2, r2, r3
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cfe4:	4b0c      	ldr	r3, [pc, #48]	; (800d018 <prvHeapInit+0xb4>)
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	685b      	ldr	r3, [r3, #4]
 800cff0:	4a0a      	ldr	r2, [pc, #40]	; (800d01c <prvHeapInit+0xb8>)
 800cff2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	685b      	ldr	r3, [r3, #4]
 800cff8:	4a09      	ldr	r2, [pc, #36]	; (800d020 <prvHeapInit+0xbc>)
 800cffa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cffc:	4b09      	ldr	r3, [pc, #36]	; (800d024 <prvHeapInit+0xc0>)
 800cffe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d002:	601a      	str	r2, [r3, #0]
}
 800d004:	bf00      	nop
 800d006:	3714      	adds	r7, #20
 800d008:	46bd      	mov	sp, r7
 800d00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00e:	4770      	bx	lr
 800d010:	20001080 	.word	0x20001080
 800d014:	20004c80 	.word	0x20004c80
 800d018:	20004c88 	.word	0x20004c88
 800d01c:	20004c90 	.word	0x20004c90
 800d020:	20004c8c 	.word	0x20004c8c
 800d024:	20004c9c 	.word	0x20004c9c

0800d028 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d028:	b480      	push	{r7}
 800d02a:	b085      	sub	sp, #20
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d030:	4b28      	ldr	r3, [pc, #160]	; (800d0d4 <prvInsertBlockIntoFreeList+0xac>)
 800d032:	60fb      	str	r3, [r7, #12]
 800d034:	e002      	b.n	800d03c <prvInsertBlockIntoFreeList+0x14>
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	60fb      	str	r3, [r7, #12]
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	687a      	ldr	r2, [r7, #4]
 800d042:	429a      	cmp	r2, r3
 800d044:	d8f7      	bhi.n	800d036 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	685b      	ldr	r3, [r3, #4]
 800d04e:	68ba      	ldr	r2, [r7, #8]
 800d050:	4413      	add	r3, r2
 800d052:	687a      	ldr	r2, [r7, #4]
 800d054:	429a      	cmp	r2, r3
 800d056:	d108      	bne.n	800d06a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	685a      	ldr	r2, [r3, #4]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	685b      	ldr	r3, [r3, #4]
 800d060:	441a      	add	r2, r3
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	685b      	ldr	r3, [r3, #4]
 800d072:	68ba      	ldr	r2, [r7, #8]
 800d074:	441a      	add	r2, r3
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	429a      	cmp	r2, r3
 800d07c:	d118      	bne.n	800d0b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	681a      	ldr	r2, [r3, #0]
 800d082:	4b15      	ldr	r3, [pc, #84]	; (800d0d8 <prvInsertBlockIntoFreeList+0xb0>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	429a      	cmp	r2, r3
 800d088:	d00d      	beq.n	800d0a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	685a      	ldr	r2, [r3, #4]
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	441a      	add	r2, r3
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	681a      	ldr	r2, [r3, #0]
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	601a      	str	r2, [r3, #0]
 800d0a4:	e008      	b.n	800d0b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d0a6:	4b0c      	ldr	r3, [pc, #48]	; (800d0d8 <prvInsertBlockIntoFreeList+0xb0>)
 800d0a8:	681a      	ldr	r2, [r3, #0]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	601a      	str	r2, [r3, #0]
 800d0ae:	e003      	b.n	800d0b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	681a      	ldr	r2, [r3, #0]
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d0b8:	68fa      	ldr	r2, [r7, #12]
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d002      	beq.n	800d0c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	687a      	ldr	r2, [r7, #4]
 800d0c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d0c6:	bf00      	nop
 800d0c8:	3714      	adds	r7, #20
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d0:	4770      	bx	lr
 800d0d2:	bf00      	nop
 800d0d4:	20004c80 	.word	0x20004c80
 800d0d8:	20004c88 	.word	0x20004c88

0800d0dc <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 800d0dc:	b480      	push	{r7}
 800d0de:	b083      	sub	sp, #12
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d0ea:	d205      	bcs.n	800d0f8 <_ZSt16__deque_buf_sizej+0x1c>
 800d0ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0f6:	e000      	b.n	800d0fa <_ZSt16__deque_buf_sizej+0x1e>
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	370c      	adds	r7, #12
 800d0fe:	46bd      	mov	sp, r7
 800d100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d104:	4770      	bx	lr

0800d106 <_ZN11transmitterC1Ev>:
#define LENGTH_START	3
#define LENGTH_ZERO		1
#define LENGTH_ONE		2
#define LENGTH_STOP		4

class transmitter
 800d106:	b580      	push	{r7, lr}
 800d108:	b082      	sub	sp, #8
 800d10a:	af00      	add	r7, sp, #0
 800d10c:	6078      	str	r0, [r7, #4]
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2200      	movs	r2, #0
 800d112:	701a      	strb	r2, [r3, #0]
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	3304      	adds	r3, #4
 800d118:	4618      	mov	r0, r3
 800d11a:	f000 f877 	bl	800d20c <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	332c      	adds	r3, #44	; 0x2c
 800d122:	4618      	mov	r0, r3
 800d124:	f000 f8a4 	bl	800d270 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EEC1Ev>
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	4618      	mov	r0, r3
 800d12c:	3708      	adds	r7, #8
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}

0800d132 <_ZN8receiverC1Ev>:
#define START_MIN		290
#define START_MAX		300
#define STOP_MIN		390
#define STOP_MAX		400

class receiver
 800d132:	b580      	push	{r7, lr}
 800d134:	b082      	sub	sp, #8
 800d136:	af00      	add	r7, sp, #0
 800d138:	6078      	str	r0, [r7, #4]
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	4618      	mov	r0, r3
 800d13e:	f000 f865 	bl	800d20c <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	3328      	adds	r3, #40	; 0x28
 800d146:	4618      	mov	r0, r3
 800d148:	f000 f892 	bl	800d270 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EEC1Ev>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	4618      	mov	r0, r3
 800d150:	3708      	adds	r7, #8
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}
	...

0800d158 <transmitterSendAck>:

	return t.sendBlocking(messageString);
}

void transmitterSendAck()
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	af00      	add	r7, sp, #0
	return t.sendAck();
 800d15c:	4802      	ldr	r0, [pc, #8]	; (800d168 <transmitterSendAck+0x10>)
 800d15e:	f002 fb3b 	bl	800f7d8 <_ZN11transmitter7sendAckEv>
 800d162:	bf00      	nop
}
 800d164:	bd80      	pop	{r7, pc}
 800d166:	bf00      	nop
 800d168:	20004ca0 	.word	0x20004ca0

0800d16c <transmitterTick>:

void transmitterTick()
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	af00      	add	r7, sp, #0
	return t.tick();
 800d170:	4802      	ldr	r0, [pc, #8]	; (800d17c <transmitterTick+0x10>)
 800d172:	f002 fb6f 	bl	800f854 <_ZN11transmitter4tickEv>
 800d176:	bf00      	nop
}
 800d178:	bd80      	pop	{r7, pc}
 800d17a:	bf00      	nop
 800d17c:	20004ca0 	.word	0x20004ca0

0800d180 <receiverEnable>:

// Receiver class public functions

void receiverEnable()
{
 800d180:	b580      	push	{r7, lr}
 800d182:	af00      	add	r7, sp, #0
	return r.enable();
 800d184:	4802      	ldr	r0, [pc, #8]	; (800d190 <receiverEnable+0x10>)
 800d186:	f001 f83b 	bl	800e200 <_ZN8receiver6enableEv>
 800d18a:	bf00      	nop
}
 800d18c:	bd80      	pop	{r7, pc}
 800d18e:	bf00      	nop
 800d190:	20004cf8 	.word	0x20004cf8

0800d194 <receiverDisable>:

void receiverDisable()
{
 800d194:	b580      	push	{r7, lr}
 800d196:	af00      	add	r7, sp, #0
	return r.disable();
 800d198:	4802      	ldr	r0, [pc, #8]	; (800d1a4 <receiverDisable+0x10>)
 800d19a:	f001 f83f 	bl	800e21c <_ZN8receiver7disableEv>
 800d19e:	bf00      	nop
}
 800d1a0:	bd80      	pop	{r7, pc}
 800d1a2:	bf00      	nop
 800d1a4:	20004cf8 	.word	0x20004cf8

0800d1a8 <receiverCheckMessage>:

bool receiverCheckMessage()
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	af00      	add	r7, sp, #0
	return r.checkMessage();
 800d1ac:	4802      	ldr	r0, [pc, #8]	; (800d1b8 <receiverCheckMessage+0x10>)
 800d1ae:	f001 f8ff 	bl	800e3b0 <_ZN8receiver12checkMessageEv>
 800d1b2:	4603      	mov	r3, r0
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	bd80      	pop	{r7, pc}
 800d1b8:	20004cf8 	.word	0x20004cf8

0800d1bc <receiverPopMessage>:

// Get a message from the message queue.
// str should be a char*, and it must be initialized
void receiverPopMessage(char* *str)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b088      	sub	sp, #32
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
	// Get the filled up message object
	string message = r.popMessage();
 800d1c4:	f107 0308 	add.w	r3, r7, #8
 800d1c8:	490a      	ldr	r1, [pc, #40]	; (800d1f4 <receiverPopMessage+0x38>)
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f001 f900 	bl	800e3d0 <_ZN8receiver10popMessageB5cxx11Ev>

	// Here be dragons
	*str = const_cast<char*>(message.c_str());
 800d1d0:	f107 0308 	add.w	r3, r7, #8
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f002 fe5b 	bl	800fe90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800d1da:	4602      	mov	r2, r0
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	601a      	str	r2, [r3, #0]
	string message = r.popMessage();
 800d1e0:	f107 0308 	add.w	r3, r7, #8
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f002 fdd8 	bl	800fd9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800d1ea:	bf00      	nop
 800d1ec:	3720      	adds	r7, #32
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}
 800d1f2:	bf00      	nop
 800d1f4:	20004cf8 	.word	0x20004cf8

0800d1f8 <receiverTick>:
{
	return r.waitForAck(milliseconds);
}

void receiverTick()
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	af00      	add	r7, sp, #0
	return r.tick();
 800d1fc:	4802      	ldr	r0, [pc, #8]	; (800d208 <receiverTick+0x10>)
 800d1fe:	f001 f8ff 	bl	800e400 <_ZN8receiver4tickEv>
 800d202:	bf00      	nop
}
 800d204:	bd80      	pop	{r7, pc}
 800d206:	bf00      	nop
 800d208:	20004cf8 	.word	0x20004cf8

0800d20c <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %deque with no elements.
       */
      deque() : _Base() { }
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b082      	sub	sp, #8
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	4618      	mov	r0, r3
 800d218:	f000 f868 	bl	800d2ec <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	4618      	mov	r0, r3
 800d220:	3708      	adds	r7, #8
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}

0800d226 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 800d226:	b580      	push	{r7, lr}
 800d228:	b08a      	sub	sp, #40	; 0x28
 800d22a:	af00      	add	r7, sp, #0
 800d22c:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 800d22e:	f107 0308 	add.w	r3, r7, #8
 800d232:	6879      	ldr	r1, [r7, #4]
 800d234:	4618      	mov	r0, r3
 800d236:	f000 f88c 	bl	800d352 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 800d23a:	f107 0318 	add.w	r3, r7, #24
 800d23e:	6879      	ldr	r1, [r7, #4]
 800d240:	4618      	mov	r0, r3
 800d242:	f000 f895 	bl	800d370 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	4618      	mov	r0, r3
 800d24a:	f000 f8a0 	bl	800d38e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800d24e:	4603      	mov	r3, r0
 800d250:	f107 0218 	add.w	r2, r7, #24
 800d254:	f107 0108 	add.w	r1, r7, #8
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f000 f8bf 	bl	800d3dc <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_destroy_dataESt15_Deque_iteratorIS5_RS5_PS5_ESB_RKS6_>
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	4618      	mov	r0, r3
 800d262:	f000 f854 	bl	800d30e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	4618      	mov	r0, r3
 800d26a:	3728      	adds	r7, #40	; 0x28
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}

0800d270 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EEC1Ev>:
      deque() : _Base() { }
 800d270:	b580      	push	{r7, lr}
 800d272:	b082      	sub	sp, #8
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	4618      	mov	r0, r3
 800d27c:	f000 f8d9 	bl	800d432 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EEC1Ev>
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	4618      	mov	r0, r3
 800d284:	3708      	adds	r7, #8
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}

0800d28a <_ZNSt5dequeISt6bitsetILj8EESaIS1_EED1Ev>:
      ~deque()
 800d28a:	b580      	push	{r7, lr}
 800d28c:	b08a      	sub	sp, #40	; 0x28
 800d28e:	af00      	add	r7, sp, #0
 800d290:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 800d292:	f107 0308 	add.w	r3, r7, #8
 800d296:	6879      	ldr	r1, [r7, #4]
 800d298:	4618      	mov	r0, r3
 800d29a:	f000 f8fd 	bl	800d498 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE5beginEv>
 800d29e:	f107 0318 	add.w	r3, r7, #24
 800d2a2:	6879      	ldr	r1, [r7, #4]
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f000 f906 	bl	800d4b6 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE3endEv>
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f000 f911 	bl	800d4d4 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE19_M_get_Tp_allocatorEv>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	f107 0218 	add.w	r2, r7, #24
 800d2b8:	f107 0108 	add.w	r1, r7, #8
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f000 f930 	bl	800d522 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f000 f8c5 	bl	800d454 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EED1Ev>
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3728      	adds	r7, #40	; 0x28
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f000 f949 	bl	800d574 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3708      	adds	r7, #8
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}

0800d2ec <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEC1Ev>:
      _Deque_base()
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b082      	sub	sp, #8
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
      : _M_impl()
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f000 f920 	bl	800d53c <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 800d2fc:	2100      	movs	r1, #0
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f000 f944 	bl	800d58c <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_initialize_mapEj>
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	4618      	mov	r0, r3
 800d308:	3708      	adds	r7, #8
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}

0800d30e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 800d30e:	b580      	push	{r7, lr}
 800d310:	b082      	sub	sp, #8
 800d312:	af00      	add	r7, sp, #0
 800d314:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d010      	beq.n	800d340 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800d326:	3304      	adds	r3, #4
 800d328:	461a      	mov	r2, r3
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f000 f994 	bl	800d658 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_destroy_nodesEPPS5_S9_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6819      	ldr	r1, [r3, #0]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	685b      	ldr	r3, [r3, #4]
 800d338:	461a      	mov	r2, r3
 800d33a:	6878      	ldr	r0, [r7, #4]
 800d33c:	f000 f9a6 	bl	800d68c <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_deallocate_mapEPPS5_j>
    }
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	4618      	mov	r0, r3
 800d344:	f7ff ffc6 	bl	800d2d4 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_Deque_implD1Ev>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	4618      	mov	r0, r3
 800d34c:	3708      	adds	r7, #8
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}

0800d352 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 800d352:	b580      	push	{r7, lr}
 800d354:	b082      	sub	sp, #8
 800d356:	af00      	add	r7, sp, #0
 800d358:	6078      	str	r0, [r7, #4]
 800d35a:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	3308      	adds	r3, #8
 800d360:	4619      	mov	r1, r3
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f000 f81e 	bl	800d3a4 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1ERKS8_>
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	3708      	adds	r7, #8
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}

0800d370 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 800d370:	b580      	push	{r7, lr}
 800d372:	b082      	sub	sp, #8
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
 800d378:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	3318      	adds	r3, #24
 800d37e:	4619      	mov	r1, r3
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	f000 f80f 	bl	800d3a4 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1ERKS8_>
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	3708      	adds	r7, #8
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}

0800d38e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800d38e:	b480      	push	{r7}
 800d390:	b083      	sub	sp, #12
 800d392:	af00      	add	r7, sp, #0
 800d394:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	4618      	mov	r0, r3
 800d39a:	370c      	adds	r7, #12
 800d39c:	46bd      	mov	sp, r7
 800d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a2:	4770      	bx	lr

0800d3a4 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1ERKS8_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 800d3a4:	b480      	push	{r7}
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
 800d3ac:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	605a      	str	r2, [r3, #4]
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	689a      	ldr	r2, [r3, #8]
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	609a      	str	r2, [r3, #8]
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	68da      	ldr	r2, [r3, #12]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	60da      	str	r2, [r3, #12]
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	370c      	adds	r7, #12
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3da:	4770      	bx	lr

0800d3dc <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_destroy_dataESt15_Deque_iteratorIS5_RS5_PS5_ESB_RKS6_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b08c      	sub	sp, #48	; 0x30
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	60f8      	str	r0, [r7, #12]
 800d3e4:	60b9      	str	r1, [r7, #8]
 800d3e6:	607a      	str	r2, [r7, #4]
 800d3e8:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
 800d3ea:	f107 0310 	add.w	r3, r7, #16
 800d3ee:	68b9      	ldr	r1, [r7, #8]
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f7ff ffd7 	bl	800d3a4 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1ERKS8_>
 800d3f6:	f107 0320 	add.w	r3, r7, #32
 800d3fa:	6879      	ldr	r1, [r7, #4]
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f7ff ffd1 	bl	800d3a4 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1ERKS8_>
 800d402:	f107 0220 	add.w	r2, r7, #32
 800d406:	f107 0310 	add.w	r3, r7, #16
 800d40a:	4619      	mov	r1, r3
 800d40c:	68f8      	ldr	r0, [r7, #12]
 800d40e:	f000 f959 	bl	800d6c4 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_>
      }
 800d412:	bf00      	nop
 800d414:	3730      	adds	r7, #48	; 0x30
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}

0800d41a <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 800d41a:	b580      	push	{r7, lr}
 800d41c:	b082      	sub	sp, #8
 800d41e:	af00      	add	r7, sp, #0
 800d420:	6078      	str	r0, [r7, #4]
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f000 f9c8 	bl	800d7b8 <_ZNSaISt6bitsetILj8EEED1Ev>
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	4618      	mov	r0, r3
 800d42c:	3708      	adds	r7, #8
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}

0800d432 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EEC1Ev>:
      _Deque_base()
 800d432:	b580      	push	{r7, lr}
 800d434:	b082      	sub	sp, #8
 800d436:	af00      	add	r7, sp, #0
 800d438:	6078      	str	r0, [r7, #4]
      : _M_impl()
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	4618      	mov	r0, r3
 800d43e:	f000 f99f 	bl	800d780 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 800d442:	2100      	movs	r1, #0
 800d444:	6878      	ldr	r0, [r7, #4]
 800d446:	f000 f9c3 	bl	800d7d0 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE17_M_initialize_mapEj>
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	4618      	mov	r0, r3
 800d44e:	3708      	adds	r7, #8
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}

0800d454 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 800d454:	b580      	push	{r7, lr}
 800d456:	b082      	sub	sp, #8
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d010      	beq.n	800d486 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800d46c:	3304      	adds	r3, #4
 800d46e:	461a      	mov	r2, r3
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f000 fa10 	bl	800d896 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6819      	ldr	r1, [r3, #0]
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	685b      	ldr	r3, [r3, #4]
 800d47e:	461a      	mov	r2, r3
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f000 fa22 	bl	800d8ca <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE17_M_deallocate_mapEPPS1_j>
    }
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	4618      	mov	r0, r3
 800d48a:	f7ff ffc6 	bl	800d41a <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE11_Deque_implD1Ev>
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	4618      	mov	r0, r3
 800d492:	3708      	adds	r7, #8
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}

0800d498 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800d498:	b580      	push	{r7, lr}
 800d49a:	b082      	sub	sp, #8
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	3308      	adds	r3, #8
 800d4a6:	4619      	mov	r1, r3
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f000 f81e 	bl	800d4ea <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EC1ERKS4_>
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	3708      	adds	r7, #8
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}

0800d4b6 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800d4b6:	b580      	push	{r7, lr}
 800d4b8:	b082      	sub	sp, #8
 800d4ba:	af00      	add	r7, sp, #0
 800d4bc:	6078      	str	r0, [r7, #4]
 800d4be:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	3318      	adds	r3, #24
 800d4c4:	4619      	mov	r1, r3
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f000 f80f 	bl	800d4ea <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EC1ERKS4_>
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	3708      	adds	r7, #8
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}

0800d4d4 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800d4d4:	b480      	push	{r7}
 800d4d6:	b083      	sub	sp, #12
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	4618      	mov	r0, r3
 800d4e0:	370c      	adds	r7, #12
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e8:	4770      	bx	lr

0800d4ea <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EC1ERKS4_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 800d4ea:	b480      	push	{r7}
 800d4ec:	b083      	sub	sp, #12
 800d4ee:	af00      	add	r7, sp, #0
 800d4f0:	6078      	str	r0, [r7, #4]
 800d4f2:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	605a      	str	r2, [r3, #4]
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	689a      	ldr	r2, [r3, #8]
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	609a      	str	r2, [r3, #8]
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	68da      	ldr	r2, [r3, #12]
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	60da      	str	r2, [r3, #12]
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	4618      	mov	r0, r3
 800d518:	370c      	adds	r7, #12
 800d51a:	46bd      	mov	sp, r7
 800d51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d520:	4770      	bx	lr

0800d522 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>:
      _M_destroy_data(iterator __first, iterator __last,
 800d522:	b480      	push	{r7}
 800d524:	b08d      	sub	sp, #52	; 0x34
 800d526:	af00      	add	r7, sp, #0
 800d528:	60f8      	str	r0, [r7, #12]
 800d52a:	60b9      	str	r1, [r7, #8]
 800d52c:	607a      	str	r2, [r7, #4]
 800d52e:	603b      	str	r3, [r7, #0]
      }
 800d530:	bf00      	nop
 800d532:	3734      	adds	r7, #52	; 0x34
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr

0800d53c <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_Deque_implC1Ev>:
	_Deque_impl()
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b082      	sub	sp, #8
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
	  _M_start(), _M_finish()
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f000 f9dc 	bl	800d902 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2200      	movs	r2, #0
 800d54e:	601a      	str	r2, [r3, #0]
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2200      	movs	r2, #0
 800d554:	605a      	str	r2, [r3, #4]
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	3308      	adds	r3, #8
 800d55a:	4618      	mov	r0, r3
 800d55c:	f000 f9dd 	bl	800d91a <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1Ev>
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	3318      	adds	r3, #24
 800d564:	4618      	mov	r0, r3
 800d566:	f000 f9d8 	bl	800d91a <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1Ev>
	{ }
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	4618      	mov	r0, r3
 800d56e:	3708      	adds	r7, #8
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}

0800d574 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 800d574:	b580      	push	{r7, lr}
 800d576:	b082      	sub	sp, #8
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f000 f9e3 	bl	800d948 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	4618      	mov	r0, r3
 800d586:	3708      	adds	r7, #8
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}

0800d58c <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 800d58c:	b590      	push	{r4, r7, lr}
 800d58e:	b089      	sub	sp, #36	; 0x24
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
 800d596:	2018      	movs	r0, #24
 800d598:	f7ff fda0 	bl	800d0dc <_ZSt16__deque_buf_sizej>
 800d59c:	4602      	mov	r2, r0
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800d5a8:	2308      	movs	r3, #8
 800d5aa:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 800d5ac:	69fb      	ldr	r3, [r7, #28]
 800d5ae:	3302      	adds	r3, #2
 800d5b0:	613b      	str	r3, [r7, #16]
 800d5b2:	f107 0210 	add.w	r2, r7, #16
 800d5b6:	f107 030c 	add.w	r3, r7, #12
 800d5ba:	4611      	mov	r1, r2
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f000 f9ce 	bl	800d95e <_ZSt3maxIjERKT_S2_S2_>
 800d5c2:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800d5c4:	681a      	ldr	r2, [r3, #0]
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	685b      	ldr	r3, [r3, #4]
 800d5ce:	4619      	mov	r1, r3
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f000 f9d8 	bl	800d986 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_allocate_mapEj>
 800d5d6:	4602      	mov	r2, r0
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6859      	ldr	r1, [r3, #4]
 800d5e4:	69fb      	ldr	r3, [r7, #28]
 800d5e6:	1acb      	subs	r3, r1, r3
 800d5e8:	085b      	lsrs	r3, r3, #1
 800d5ea:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 800d5ec:	4413      	add	r3, r2
 800d5ee:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 800d5f0:	69fb      	ldr	r3, [r7, #28]
 800d5f2:	009b      	lsls	r3, r3, #2
 800d5f4:	69ba      	ldr	r2, [r7, #24]
 800d5f6:	4413      	add	r3, r2
 800d5f8:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 800d5fa:	697a      	ldr	r2, [r7, #20]
 800d5fc:	69b9      	ldr	r1, [r7, #24]
 800d5fe:	6878      	ldr	r0, [r7, #4]
 800d600:	f000 f9de 	bl	800d9c0 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_create_nodesEPPS5_S9_>
      this->_M_impl._M_start._M_set_node(__nstart);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	3308      	adds	r3, #8
 800d608:	69b9      	ldr	r1, [r7, #24]
 800d60a:	4618      	mov	r0, r3
 800d60c:	f000 f9f2 	bl	800d9f4 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f103 0218 	add.w	r2, r3, #24
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	3b04      	subs	r3, #4
 800d61a:	4619      	mov	r1, r3
 800d61c:	4610      	mov	r0, r2
 800d61e:	f000 f9e9 	bl	800d9f4 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	68da      	ldr	r2, [r3, #12]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 800d62e:	2018      	movs	r0, #24
 800d630:	f7ff fd54 	bl	800d0dc <_ZSt16__deque_buf_sizej>
 800d634:	4602      	mov	r2, r0
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	fbb3 f1f2 	udiv	r1, r3, r2
 800d63c:	fb02 f201 	mul.w	r2, r2, r1
 800d640:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 800d642:	4613      	mov	r3, r2
 800d644:	005b      	lsls	r3, r3, #1
 800d646:	4413      	add	r3, r2
 800d648:	00db      	lsls	r3, r3, #3
 800d64a:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	619a      	str	r2, [r3, #24]
    }
 800d650:	bf00      	nop
 800d652:	3724      	adds	r7, #36	; 0x24
 800d654:	46bd      	mov	sp, r7
 800d656:	bd90      	pop	{r4, r7, pc}

0800d658 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_destroy_nodesEPPS5_S9_>:
    _Deque_base<_Tp, _Alloc>::
 800d658:	b580      	push	{r7, lr}
 800d65a:	b086      	sub	sp, #24
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	60f8      	str	r0, [r7, #12]
 800d660:	60b9      	str	r1, [r7, #8]
 800d662:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	617b      	str	r3, [r7, #20]
 800d668:	697a      	ldr	r2, [r7, #20]
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d209      	bcs.n	800d684 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_destroy_nodesEPPS5_S9_+0x2c>
	_M_deallocate_node(*__n);
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	4619      	mov	r1, r3
 800d676:	68f8      	ldr	r0, [r7, #12]
 800d678:	f000 f9d8 	bl	800da2c <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE18_M_deallocate_nodeEPS5_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800d67c:	697b      	ldr	r3, [r7, #20]
 800d67e:	3304      	adds	r3, #4
 800d680:	617b      	str	r3, [r7, #20]
 800d682:	e7f1      	b.n	800d668 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_destroy_nodesEPPS5_S9_+0x10>
    }
 800d684:	bf00      	nop
 800d686:	3718      	adds	r7, #24
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd80      	pop	{r7, pc}

0800d68c <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_deallocate_mapEPPS5_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b086      	sub	sp, #24
 800d690:	af00      	add	r7, sp, #0
 800d692:	60f8      	str	r0, [r7, #12]
 800d694:	60b9      	str	r1, [r7, #8]
 800d696:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800d698:	f107 0314 	add.w	r3, r7, #20
 800d69c:	68f9      	ldr	r1, [r7, #12]
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f000 f9d7 	bl	800da52 <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 800d6a4:	f107 0314 	add.w	r3, r7, #20
 800d6a8:	687a      	ldr	r2, [r7, #4]
 800d6aa:	68b9      	ldr	r1, [r7, #8]
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f000 f9ed 	bl	800da8c <_ZNSt16allocator_traitsISaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS7_PS6_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800d6b2:	f107 0314 	add.w	r3, r7, #20
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f000 f9dc 	bl	800da74 <_ZNSaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
      }
 800d6bc:	bf00      	nop
 800d6be:	3718      	adds	r7, #24
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}

0800d6c4 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_>:
        }
      }

   template<typename _Tp, typename _Alloc>
     void
     deque<_Tp, _Alloc>::
 800d6c4:	b5b0      	push	{r4, r5, r7, lr}
 800d6c6:	b086      	sub	sp, #24
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	60f8      	str	r0, [r7, #12]
 800d6cc:	60b9      	str	r1, [r7, #8]
 800d6ce:	607a      	str	r2, [r7, #4]
     _M_destroy_data_aux(iterator __first, iterator __last)
     {
       for (_Map_pointer __node = __first._M_node + 1;
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	68db      	ldr	r3, [r3, #12]
 800d6d4:	3304      	adds	r3, #4
 800d6d6:	617b      	str	r3, [r7, #20]
	    __node < __last._M_node; ++__node)
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	68db      	ldr	r3, [r3, #12]
 800d6dc:	697a      	ldr	r2, [r7, #20]
 800d6de:	429a      	cmp	r2, r3
 800d6e0:	d219      	bcs.n	800d716 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_+0x52>
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	681d      	ldr	r5, [r3, #0]
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	681c      	ldr	r4, [r3, #0]
 800d6ea:	f000 f9de 	bl	800daaa <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_S_buffer_sizeEv>
 800d6ee:	4602      	mov	r2, r0
 800d6f0:	4613      	mov	r3, r2
 800d6f2:	005b      	lsls	r3, r3, #1
 800d6f4:	4413      	add	r3, r2
 800d6f6:	00db      	lsls	r3, r3, #3
 800d6f8:	441c      	add	r4, r3
		       _M_get_Tp_allocator());
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f7ff fe46 	bl	800d38e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800d702:	4603      	mov	r3, r0
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 800d704:	461a      	mov	r2, r3
 800d706:	4621      	mov	r1, r4
 800d708:	4628      	mov	r0, r5
 800d70a:	f000 f9d6 	bl	800daba <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
       for (_Map_pointer __node = __first._M_node + 1;
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	3304      	adds	r3, #4
 800d712:	617b      	str	r3, [r7, #20]
 800d714:	e7e0      	b.n	800d6d8 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_+0x14>

       if (__first._M_node != __last._M_node)
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	68da      	ldr	r2, [r3, #12]
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	68db      	ldr	r3, [r3, #12]
 800d71e:	429a      	cmp	r2, r3
 800d720:	d01c      	beq.n	800d75c <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_+0x98>
	 {
	   std::_Destroy(__first._M_cur, __first._M_last,
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	681c      	ldr	r4, [r3, #0]
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	689d      	ldr	r5, [r3, #8]
			 _M_get_Tp_allocator());
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	4618      	mov	r0, r3
 800d72e:	f7ff fe2e 	bl	800d38e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800d732:	4603      	mov	r3, r0
	   std::_Destroy(__first._M_cur, __first._M_last,
 800d734:	461a      	mov	r2, r3
 800d736:	4629      	mov	r1, r5
 800d738:	4620      	mov	r0, r4
 800d73a:	f000 f9be 	bl	800daba <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
	   std::_Destroy(__last._M_first, __last._M_cur,
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	685c      	ldr	r4, [r3, #4]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681d      	ldr	r5, [r3, #0]
			 _M_get_Tp_allocator());
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	4618      	mov	r0, r3
 800d74a:	f7ff fe20 	bl	800d38e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800d74e:	4603      	mov	r3, r0
	   std::_Destroy(__last._M_first, __last._M_cur,
 800d750:	461a      	mov	r2, r3
 800d752:	4629      	mov	r1, r5
 800d754:	4620      	mov	r0, r4
 800d756:	f000 f9b0 	bl	800daba <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
	 }
       else
	 std::_Destroy(__first._M_cur, __last._M_cur,
		       _M_get_Tp_allocator());
     }
 800d75a:	e00d      	b.n	800d778 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_+0xb4>
	 std::_Destroy(__first._M_cur, __last._M_cur,
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	681c      	ldr	r4, [r3, #0]
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681d      	ldr	r5, [r3, #0]
		       _M_get_Tp_allocator());
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	4618      	mov	r0, r3
 800d768:	f7ff fe11 	bl	800d38e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800d76c:	4603      	mov	r3, r0
	 std::_Destroy(__first._M_cur, __last._M_cur,
 800d76e:	461a      	mov	r2, r3
 800d770:	4629      	mov	r1, r5
 800d772:	4620      	mov	r0, r4
 800d774:	f000 f9a1 	bl	800daba <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>
     }
 800d778:	bf00      	nop
 800d77a:	3718      	adds	r7, #24
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bdb0      	pop	{r4, r5, r7, pc}

0800d780 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE11_Deque_implC1Ev>:
	_Deque_impl()
 800d780:	b580      	push	{r7, lr}
 800d782:	b082      	sub	sp, #8
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
	  _M_start(), _M_finish()
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f000 f9a4 	bl	800dad6 <_ZNSaISt6bitsetILj8EEEC1Ev>
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2200      	movs	r2, #0
 800d792:	601a      	str	r2, [r3, #0]
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2200      	movs	r2, #0
 800d798:	605a      	str	r2, [r3, #4]
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	3308      	adds	r3, #8
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f000 f9a5 	bl	800daee <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EC1Ev>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	3318      	adds	r3, #24
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f000 f9a0 	bl	800daee <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EC1Ev>
	{ }
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3708      	adds	r7, #8
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}

0800d7b8 <_ZNSaISt6bitsetILj8EEED1Ev>:
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b082      	sub	sp, #8
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f000 f9ab 	bl	800db1c <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEED1Ev>
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3708      	adds	r7, #8
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}

0800d7d0 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 800d7d0:	b590      	push	{r4, r7, lr}
 800d7d2:	b089      	sub	sp, #36	; 0x24
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
 800d7d8:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
 800d7da:	2004      	movs	r0, #4
 800d7dc:	f7ff fc7e 	bl	800d0dc <_ZSt16__deque_buf_sizej>
 800d7e0:	4602      	mov	r2, r0
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7e8:	3301      	adds	r3, #1
 800d7ea:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800d7ec:	2308      	movs	r3, #8
 800d7ee:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 800d7f0:	69fb      	ldr	r3, [r7, #28]
 800d7f2:	3302      	adds	r3, #2
 800d7f4:	613b      	str	r3, [r7, #16]
 800d7f6:	f107 0210 	add.w	r2, r7, #16
 800d7fa:	f107 030c 	add.w	r3, r7, #12
 800d7fe:	4611      	mov	r1, r2
 800d800:	4618      	mov	r0, r3
 800d802:	f000 f8ac 	bl	800d95e <_ZSt3maxIjERKT_S2_S2_>
 800d806:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800d808:	681a      	ldr	r2, [r3, #0]
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	685b      	ldr	r3, [r3, #4]
 800d812:	4619      	mov	r1, r3
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f000 f98c 	bl	800db32 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE15_M_allocate_mapEj>
 800d81a:	4602      	mov	r2, r0
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6859      	ldr	r1, [r3, #4]
 800d828:	69fb      	ldr	r3, [r7, #28]
 800d82a:	1acb      	subs	r3, r1, r3
 800d82c:	085b      	lsrs	r3, r3, #1
 800d82e:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 800d830:	4413      	add	r3, r2
 800d832:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 800d834:	69fb      	ldr	r3, [r7, #28]
 800d836:	009b      	lsls	r3, r3, #2
 800d838:	69ba      	ldr	r2, [r7, #24]
 800d83a:	4413      	add	r3, r2
 800d83c:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 800d83e:	697a      	ldr	r2, [r7, #20]
 800d840:	69b9      	ldr	r1, [r7, #24]
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f000 f992 	bl	800db6c <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE15_M_create_nodesEPPS1_S5_>
      this->_M_impl._M_start._M_set_node(__nstart);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	3308      	adds	r3, #8
 800d84c:	69b9      	ldr	r1, [r7, #24]
 800d84e:	4618      	mov	r0, r3
 800d850:	f000 f9a6 	bl	800dba0 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f103 0218 	add.w	r2, r3, #24
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	3b04      	subs	r3, #4
 800d85e:	4619      	mov	r1, r3
 800d860:	4610      	mov	r0, r2
 800d862:	f000 f99d 	bl	800dba0 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	68da      	ldr	r2, [r3, #12]
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 800d872:	2004      	movs	r0, #4
 800d874:	f7ff fc32 	bl	800d0dc <_ZSt16__deque_buf_sizej>
 800d878:	4602      	mov	r2, r0
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d880:	fb02 f201 	mul.w	r2, r2, r1
 800d884:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 800d886:	009b      	lsls	r3, r3, #2
 800d888:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	619a      	str	r2, [r3, #24]
    }
 800d88e:	bf00      	nop
 800d890:	3724      	adds	r7, #36	; 0x24
 800d892:	46bd      	mov	sp, r7
 800d894:	bd90      	pop	{r4, r7, pc}

0800d896 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE16_M_destroy_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 800d896:	b580      	push	{r7, lr}
 800d898:	b086      	sub	sp, #24
 800d89a:	af00      	add	r7, sp, #0
 800d89c:	60f8      	str	r0, [r7, #12]
 800d89e:	60b9      	str	r1, [r7, #8]
 800d8a0:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	617b      	str	r3, [r7, #20]
 800d8a6:	697a      	ldr	r2, [r7, #20]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	d209      	bcs.n	800d8c2 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x2c>
	_M_deallocate_node(*__n);
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	68f8      	ldr	r0, [r7, #12]
 800d8b6:	f000 f98c 	bl	800dbd2 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE18_M_deallocate_nodeEPS1_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	3304      	adds	r3, #4
 800d8be:	617b      	str	r3, [r7, #20]
 800d8c0:	e7f1      	b.n	800d8a6 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x10>
    }
 800d8c2:	bf00      	nop
 800d8c4:	3718      	adds	r7, #24
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}

0800d8ca <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE17_M_deallocate_mapEPPS1_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 800d8ca:	b580      	push	{r7, lr}
 800d8cc:	b086      	sub	sp, #24
 800d8ce:	af00      	add	r7, sp, #0
 800d8d0:	60f8      	str	r0, [r7, #12]
 800d8d2:	60b9      	str	r1, [r7, #8]
 800d8d4:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800d8d6:	f107 0314 	add.w	r3, r7, #20
 800d8da:	68f9      	ldr	r1, [r7, #12]
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f000 f98b 	bl	800dbf8 <_ZNKSt11_Deque_baseISt6bitsetILj8EESaIS1_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 800d8e2:	f107 0314 	add.w	r3, r7, #20
 800d8e6:	687a      	ldr	r2, [r7, #4]
 800d8e8:	68b9      	ldr	r1, [r7, #8]
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f000 f9a1 	bl	800dc32 <_ZNSt16allocator_traitsISaIPSt6bitsetILj8EEEE10deallocateERS3_PS2_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800d8f0:	f107 0314 	add.w	r3, r7, #20
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f000 f990 	bl	800dc1a <_ZNSaIPSt6bitsetILj8EEED1Ev>
      }
 800d8fa:	bf00      	nop
 800d8fc:	3718      	adds	r7, #24
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}

0800d902 <_ZNSaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800d902:	b580      	push	{r7, lr}
 800d904:	b082      	sub	sp, #8
 800d906:	af00      	add	r7, sp, #0
 800d908:	6078      	str	r0, [r7, #4]
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f000 f9a0 	bl	800dc50 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	4618      	mov	r0, r3
 800d914:	3708      	adds	r7, #8
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}

0800d91a <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 800d91a:	b480      	push	{r7}
 800d91c:	b083      	sub	sp, #12
 800d91e:	af00      	add	r7, sp, #0
 800d920:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2200      	movs	r2, #0
 800d926:	601a      	str	r2, [r3, #0]
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2200      	movs	r2, #0
 800d92c:	605a      	str	r2, [r3, #4]
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2200      	movs	r2, #0
 800d932:	609a      	str	r2, [r3, #8]
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2200      	movs	r2, #0
 800d938:	60da      	str	r2, [r3, #12]
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	4618      	mov	r0, r3
 800d93e:	370c      	adds	r7, #12
 800d940:	46bd      	mov	sp, r7
 800d942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d946:	4770      	bx	lr

0800d948 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800d948:	b480      	push	{r7}
 800d94a:	b083      	sub	sp, #12
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	4618      	mov	r0, r3
 800d954:	370c      	adds	r7, #12
 800d956:	46bd      	mov	sp, r7
 800d958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95c:	4770      	bx	lr

0800d95e <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800d95e:	b480      	push	{r7}
 800d960:	b083      	sub	sp, #12
 800d962:	af00      	add	r7, sp, #0
 800d964:	6078      	str	r0, [r7, #4]
 800d966:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681a      	ldr	r2, [r3, #0]
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	429a      	cmp	r2, r3
 800d972:	d201      	bcs.n	800d978 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	e000      	b.n	800d97a <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800d978:	687b      	ldr	r3, [r7, #4]
    }
 800d97a:	4618      	mov	r0, r3
 800d97c:	370c      	adds	r7, #12
 800d97e:	46bd      	mov	sp, r7
 800d980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d984:	4770      	bx	lr

0800d986 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 800d986:	b590      	push	{r4, r7, lr}
 800d988:	b085      	sub	sp, #20
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	6078      	str	r0, [r7, #4]
 800d98e:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800d990:	f107 030c 	add.w	r3, r7, #12
 800d994:	6879      	ldr	r1, [r7, #4]
 800d996:	4618      	mov	r0, r3
 800d998:	f000 f85b 	bl	800da52 <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800d99c:	f107 030c 	add.w	r3, r7, #12
 800d9a0:	6839      	ldr	r1, [r7, #0]
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f000 f95f 	bl	800dc66 <_ZNSt16allocator_traitsISaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS7_j>
 800d9a8:	4604      	mov	r4, r0
 800d9aa:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800d9ac:	f107 030c 	add.w	r3, r7, #12
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f000 f85f 	bl	800da74 <_ZNSaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800d9b6:	4623      	mov	r3, r4
      }
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	3714      	adds	r7, #20
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd90      	pop	{r4, r7, pc}

0800d9c0 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_create_nodesEPPS5_S9_>:
    _Deque_base<_Tp, _Alloc>::
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b086      	sub	sp, #24
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	60f8      	str	r0, [r7, #12]
 800d9c8:	60b9      	str	r1, [r7, #8]
 800d9ca:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	617b      	str	r3, [r7, #20]
 800d9d0:	697a      	ldr	r2, [r7, #20]
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	429a      	cmp	r2, r3
 800d9d6:	d209      	bcs.n	800d9ec <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_create_nodesEPPS5_S9_+0x2c>
	    *__cur = this->_M_allocate_node();
 800d9d8:	68f8      	ldr	r0, [r7, #12]
 800d9da:	f000 f953 	bl	800dc84 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_allocate_nodeEv>
 800d9de:	4602      	mov	r2, r0
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	3304      	adds	r3, #4
 800d9e8:	617b      	str	r3, [r7, #20]
 800d9ea:	e7f1      	b.n	800d9d0 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_create_nodesEPPS5_S9_+0x10>
    }
 800d9ec:	bf00      	nop
 800d9ee:	3718      	adds	r7, #24
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}

0800d9f4 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 800d9f4:	b590      	push	{r4, r7, lr}
 800d9f6:	b083      	sub	sp, #12
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
 800d9fc:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	683a      	ldr	r2, [r7, #0]
 800da02:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	681a      	ldr	r2, [r3, #0]
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	685c      	ldr	r4, [r3, #4]
 800da10:	f000 f94a 	bl	800dca8 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E14_S_buffer_sizeEv>
 800da14:	4602      	mov	r2, r0
 800da16:	4613      	mov	r3, r2
 800da18:	005b      	lsls	r3, r3, #1
 800da1a:	4413      	add	r3, r2
 800da1c:	00db      	lsls	r3, r3, #3
 800da1e:	18e2      	adds	r2, r4, r3
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	609a      	str	r2, [r3, #8]
      }
 800da24:	bf00      	nop
 800da26:	370c      	adds	r7, #12
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd90      	pop	{r4, r7, pc}

0800da2c <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE18_M_deallocate_nodeEPS5_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 800da2c:	b590      	push	{r4, r7, lr}
 800da2e:	b083      	sub	sp, #12
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 800da36:	687c      	ldr	r4, [r7, #4]
 800da38:	2018      	movs	r0, #24
 800da3a:	f7ff fb4f 	bl	800d0dc <_ZSt16__deque_buf_sizej>
 800da3e:	4603      	mov	r3, r0
 800da40:	461a      	mov	r2, r3
 800da42:	6839      	ldr	r1, [r7, #0]
 800da44:	4620      	mov	r0, r4
 800da46:	f000 f937 	bl	800dcb8 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>
      }
 800da4a:	bf00      	nop
 800da4c:	370c      	adds	r7, #12
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd90      	pop	{r4, r7, pc}

0800da52 <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 800da52:	b580      	push	{r7, lr}
 800da54:	b082      	sub	sp, #8
 800da56:	af00      	add	r7, sp, #0
 800da58:	6078      	str	r0, [r7, #4]
 800da5a:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 800da5c:	6838      	ldr	r0, [r7, #0]
 800da5e:	f000 f93a 	bl	800dcd6 <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800da62:	4603      	mov	r3, r0
 800da64:	4619      	mov	r1, r3
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f000 f940 	bl	800dcec <_ZNSaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS4_EERKSaIT_E>
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	3708      	adds	r7, #8
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}

0800da74 <_ZNSaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800da74:	b580      	push	{r7, lr}
 800da76:	b082      	sub	sp, #8
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f000 f942 	bl	800dd06 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	4618      	mov	r0, r3
 800da86:	3708      	adds	r7, #8
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}

0800da8c <_ZNSt16allocator_traitsISaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS7_PS6_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b084      	sub	sp, #16
 800da90:	af00      	add	r7, sp, #0
 800da92:	60f8      	str	r0, [r7, #12]
 800da94:	60b9      	str	r1, [r7, #8]
 800da96:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800da98:	687a      	ldr	r2, [r7, #4]
 800da9a:	68b9      	ldr	r1, [r7, #8]
 800da9c:	68f8      	ldr	r0, [r7, #12]
 800da9e:	f000 f93d 	bl	800dd1c <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS7_j>
 800daa2:	bf00      	nop
 800daa4:	3710      	adds	r7, #16
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}

0800daaa <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 800daaa:	b580      	push	{r7, lr}
 800daac:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 800daae:	2018      	movs	r0, #24
 800dab0:	f7ff fb14 	bl	800d0dc <_ZSt16__deque_buf_sizej>
 800dab4:	4603      	mov	r3, r0
 800dab6:	4618      	mov	r0, r3
 800dab8:	bd80      	pop	{r7, pc}

0800daba <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800daba:	b580      	push	{r7, lr}
 800dabc:	b084      	sub	sp, #16
 800dabe:	af00      	add	r7, sp, #0
 800dac0:	60f8      	str	r0, [r7, #12]
 800dac2:	60b9      	str	r1, [r7, #8]
 800dac4:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800dac6:	68b9      	ldr	r1, [r7, #8]
 800dac8:	68f8      	ldr	r0, [r7, #12]
 800daca:	f000 f934 	bl	800dd36 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>
    }
 800dace:	bf00      	nop
 800dad0:	3710      	adds	r7, #16
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}

0800dad6 <_ZNSaISt6bitsetILj8EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800dad6:	b580      	push	{r7, lr}
 800dad8:	b082      	sub	sp, #8
 800dada:	af00      	add	r7, sp, #0
 800dadc:	6078      	str	r0, [r7, #4]
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	f000 f936 	bl	800dd50 <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEEC1Ev>
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	4618      	mov	r0, r3
 800dae8:	3708      	adds	r7, #8
 800daea:	46bd      	mov	sp, r7
 800daec:	bd80      	pop	{r7, pc}

0800daee <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 800daee:	b480      	push	{r7}
 800daf0:	b083      	sub	sp, #12
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	2200      	movs	r2, #0
 800dafa:	601a      	str	r2, [r3, #0]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2200      	movs	r2, #0
 800db00:	605a      	str	r2, [r3, #4]
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2200      	movs	r2, #0
 800db06:	609a      	str	r2, [r3, #8]
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2200      	movs	r2, #0
 800db0c:	60da      	str	r2, [r3, #12]
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	4618      	mov	r0, r3
 800db12:	370c      	adds	r7, #12
 800db14:	46bd      	mov	sp, r7
 800db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1a:	4770      	bx	lr

0800db1c <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEED1Ev>:
 800db1c:	b480      	push	{r7}
 800db1e:	b083      	sub	sp, #12
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	4618      	mov	r0, r3
 800db28:	370c      	adds	r7, #12
 800db2a:	46bd      	mov	sp, r7
 800db2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db30:	4770      	bx	lr

0800db32 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 800db32:	b590      	push	{r4, r7, lr}
 800db34:	b085      	sub	sp, #20
 800db36:	af00      	add	r7, sp, #0
 800db38:	6078      	str	r0, [r7, #4]
 800db3a:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800db3c:	f107 030c 	add.w	r3, r7, #12
 800db40:	6879      	ldr	r1, [r7, #4]
 800db42:	4618      	mov	r0, r3
 800db44:	f000 f858 	bl	800dbf8 <_ZNKSt11_Deque_baseISt6bitsetILj8EESaIS1_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800db48:	f107 030c 	add.w	r3, r7, #12
 800db4c:	6839      	ldr	r1, [r7, #0]
 800db4e:	4618      	mov	r0, r3
 800db50:	f000 f909 	bl	800dd66 <_ZNSt16allocator_traitsISaIPSt6bitsetILj8EEEE8allocateERS3_j>
 800db54:	4604      	mov	r4, r0
 800db56:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800db58:	f107 030c 	add.w	r3, r7, #12
 800db5c:	4618      	mov	r0, r3
 800db5e:	f000 f85c 	bl	800dc1a <_ZNSaIPSt6bitsetILj8EEED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800db62:	4623      	mov	r3, r4
      }
 800db64:	4618      	mov	r0, r3
 800db66:	3714      	adds	r7, #20
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd90      	pop	{r4, r7, pc}

0800db6c <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE15_M_create_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b086      	sub	sp, #24
 800db70:	af00      	add	r7, sp, #0
 800db72:	60f8      	str	r0, [r7, #12]
 800db74:	60b9      	str	r1, [r7, #8]
 800db76:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	617b      	str	r3, [r7, #20]
 800db7c:	697a      	ldr	r2, [r7, #20]
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	429a      	cmp	r2, r3
 800db82:	d209      	bcs.n	800db98 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE15_M_create_nodesEPPS1_S5_+0x2c>
	    *__cur = this->_M_allocate_node();
 800db84:	68f8      	ldr	r0, [r7, #12]
 800db86:	f000 f8fd 	bl	800dd84 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE16_M_allocate_nodeEv>
 800db8a:	4602      	mov	r2, r0
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800db90:	697b      	ldr	r3, [r7, #20]
 800db92:	3304      	adds	r3, #4
 800db94:	617b      	str	r3, [r7, #20]
 800db96:	e7f1      	b.n	800db7c <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE15_M_create_nodesEPPS1_S5_+0x10>
    }
 800db98:	bf00      	nop
 800db9a:	3718      	adds	r7, #24
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}

0800dba0 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E11_M_set_nodeEPS3_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 800dba0:	b590      	push	{r4, r7, lr}
 800dba2:	b083      	sub	sp, #12
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
 800dba8:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	683a      	ldr	r2, [r7, #0]
 800dbae:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	681a      	ldr	r2, [r3, #0]
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	685c      	ldr	r4, [r3, #4]
 800dbbc:	f000 f8f4 	bl	800dda8 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E14_S_buffer_sizeEv>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	009b      	lsls	r3, r3, #2
 800dbc4:	18e2      	adds	r2, r4, r3
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	609a      	str	r2, [r3, #8]
      }
 800dbca:	bf00      	nop
 800dbcc:	370c      	adds	r7, #12
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd90      	pop	{r4, r7, pc}

0800dbd2 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE18_M_deallocate_nodeEPS1_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 800dbd2:	b590      	push	{r4, r7, lr}
 800dbd4:	b083      	sub	sp, #12
 800dbd6:	af00      	add	r7, sp, #0
 800dbd8:	6078      	str	r0, [r7, #4]
 800dbda:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 800dbdc:	687c      	ldr	r4, [r7, #4]
 800dbde:	2004      	movs	r0, #4
 800dbe0:	f7ff fa7c 	bl	800d0dc <_ZSt16__deque_buf_sizej>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	461a      	mov	r2, r3
 800dbe8:	6839      	ldr	r1, [r7, #0]
 800dbea:	4620      	mov	r0, r4
 800dbec:	f000 f8e4 	bl	800ddb8 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE10deallocateERS2_PS1_j>
      }
 800dbf0:	bf00      	nop
 800dbf2:	370c      	adds	r7, #12
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd90      	pop	{r4, r7, pc}

0800dbf8 <_ZNKSt11_Deque_baseISt6bitsetILj8EESaIS1_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b082      	sub	sp, #8
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
 800dc00:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 800dc02:	6838      	ldr	r0, [r7, #0]
 800dc04:	f000 f8e7 	bl	800ddd6 <_ZNKSt11_Deque_baseISt6bitsetILj8EESaIS1_EE19_M_get_Tp_allocatorEv>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	4619      	mov	r1, r3
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f000 f8ed 	bl	800ddec <_ZNSaIPSt6bitsetILj8EEEC1IS0_EERKSaIT_E>
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	3708      	adds	r7, #8
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}

0800dc1a <_ZNSaIPSt6bitsetILj8EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800dc1a:	b580      	push	{r7, lr}
 800dc1c:	b082      	sub	sp, #8
 800dc1e:	af00      	add	r7, sp, #0
 800dc20:	6078      	str	r0, [r7, #4]
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	f000 f8ef 	bl	800de06 <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEED1Ev>
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3708      	adds	r7, #8
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}

0800dc32 <_ZNSt16allocator_traitsISaIPSt6bitsetILj8EEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800dc32:	b580      	push	{r7, lr}
 800dc34:	b084      	sub	sp, #16
 800dc36:	af00      	add	r7, sp, #0
 800dc38:	60f8      	str	r0, [r7, #12]
 800dc3a:	60b9      	str	r1, [r7, #8]
 800dc3c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800dc3e:	687a      	ldr	r2, [r7, #4]
 800dc40:	68b9      	ldr	r1, [r7, #8]
 800dc42:	68f8      	ldr	r0, [r7, #12]
 800dc44:	f000 f8ea 	bl	800de1c <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEE10deallocateEPS3_j>
 800dc48:	bf00      	nop
 800dc4a:	3710      	adds	r7, #16
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}

0800dc50 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800dc50:	b480      	push	{r7}
 800dc52:	b083      	sub	sp, #12
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	370c      	adds	r7, #12
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc64:	4770      	bx	lr

0800dc66 <_ZNSt16allocator_traitsISaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 800dc66:	b580      	push	{r7, lr}
 800dc68:	b082      	sub	sp, #8
 800dc6a:	af00      	add	r7, sp, #0
 800dc6c:	6078      	str	r0, [r7, #4]
 800dc6e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800dc70:	2200      	movs	r2, #0
 800dc72:	6839      	ldr	r1, [r7, #0]
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	f000 f8de 	bl	800de36 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3708      	adds	r7, #8
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}

0800dc84 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 800dc84:	b590      	push	{r4, r7, lr}
 800dc86:	b083      	sub	sp, #12
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 800dc8c:	687c      	ldr	r4, [r7, #4]
 800dc8e:	2018      	movs	r0, #24
 800dc90:	f7ff fa24 	bl	800d0dc <_ZSt16__deque_buf_sizej>
 800dc94:	4603      	mov	r3, r0
 800dc96:	4619      	mov	r1, r3
 800dc98:	4620      	mov	r0, r4
 800dc9a:	f000 f8ea 	bl	800de72 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>
 800dc9e:	4603      	mov	r3, r0
      }
 800dca0:	4618      	mov	r0, r3
 800dca2:	370c      	adds	r7, #12
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd90      	pop	{r4, r7, pc}

0800dca8 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 800dcac:	2018      	movs	r0, #24
 800dcae:	f7ff fa15 	bl	800d0dc <_ZSt16__deque_buf_sizej>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	bd80      	pop	{r7, pc}

0800dcb8 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b084      	sub	sp, #16
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	60f8      	str	r0, [r7, #12]
 800dcc0:	60b9      	str	r1, [r7, #8]
 800dcc2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800dcc4:	687a      	ldr	r2, [r7, #4]
 800dcc6:	68b9      	ldr	r1, [r7, #8]
 800dcc8:	68f8      	ldr	r0, [r7, #12]
 800dcca:	f000 f8e1 	bl	800de90 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>
 800dcce:	bf00      	nop
 800dcd0:	3710      	adds	r7, #16
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}

0800dcd6 <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800dcd6:	b480      	push	{r7}
 800dcd8:	b083      	sub	sp, #12
 800dcda:	af00      	add	r7, sp, #0
 800dcdc:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	4618      	mov	r0, r3
 800dce2:	370c      	adds	r7, #12
 800dce4:	46bd      	mov	sp, r7
 800dce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcea:	4770      	bx	lr

0800dcec <_ZNSaIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1IS4_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b082      	sub	sp, #8
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	6039      	str	r1, [r7, #0]
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f000 f8d7 	bl	800deaa <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	4618      	mov	r0, r3
 800dd00:	3708      	adds	r7, #8
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}

0800dd06 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800dd06:	b480      	push	{r7}
 800dd08:	b083      	sub	sp, #12
 800dd0a:	af00      	add	r7, sp, #0
 800dd0c:	6078      	str	r0, [r7, #4]
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	4618      	mov	r0, r3
 800dd12:	370c      	adds	r7, #12
 800dd14:	46bd      	mov	sp, r7
 800dd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1a:	4770      	bx	lr

0800dd1c <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS7_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b084      	sub	sp, #16
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	60f8      	str	r0, [r7, #12]
 800dd24:	60b9      	str	r1, [r7, #8]
 800dd26:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 800dd28:	68b8      	ldr	r0, [r7, #8]
 800dd2a:	f001 febb 	bl	800faa4 <_ZdlPv>
      }
 800dd2e:	bf00      	nop
 800dd30:	3710      	adds	r7, #16
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}

0800dd36 <_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800dd36:	b580      	push	{r7, lr}
 800dd38:	b082      	sub	sp, #8
 800dd3a:	af00      	add	r7, sp, #0
 800dd3c:	6078      	str	r0, [r7, #4]
 800dd3e:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800dd40:	6839      	ldr	r1, [r7, #0]
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	f000 f8bc 	bl	800dec0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>
    }
 800dd48:	bf00      	nop
 800dd4a:	3708      	adds	r7, #8
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}

0800dd50 <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800dd50:	b480      	push	{r7}
 800dd52:	b083      	sub	sp, #12
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	370c      	adds	r7, #12
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd64:	4770      	bx	lr

0800dd66 <_ZNSt16allocator_traitsISaIPSt6bitsetILj8EEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 800dd66:	b580      	push	{r7, lr}
 800dd68:	b082      	sub	sp, #8
 800dd6a:	af00      	add	r7, sp, #0
 800dd6c:	6078      	str	r0, [r7, #4]
 800dd6e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800dd70:	2200      	movs	r2, #0
 800dd72:	6839      	ldr	r1, [r7, #0]
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	f000 f8bb 	bl	800def0 <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEE8allocateEjPKv>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3708      	adds	r7, #8
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}

0800dd84 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 800dd84:	b590      	push	{r4, r7, lr}
 800dd86:	b083      	sub	sp, #12
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 800dd8c:	687c      	ldr	r4, [r7, #4]
 800dd8e:	2004      	movs	r0, #4
 800dd90:	f7ff f9a4 	bl	800d0dc <_ZSt16__deque_buf_sizej>
 800dd94:	4603      	mov	r3, r0
 800dd96:	4619      	mov	r1, r3
 800dd98:	4620      	mov	r0, r4
 800dd9a:	f000 f8c7 	bl	800df2c <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE8allocateERS2_j>
 800dd9e:	4603      	mov	r3, r0
      }
 800dda0:	4618      	mov	r0, r3
 800dda2:	370c      	adds	r7, #12
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd90      	pop	{r4, r7, pc}

0800dda8 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 800ddac:	2004      	movs	r0, #4
 800ddae:	f7ff f995 	bl	800d0dc <_ZSt16__deque_buf_sizej>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	bd80      	pop	{r7, pc}

0800ddb8 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b084      	sub	sp, #16
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	60f8      	str	r0, [r7, #12]
 800ddc0:	60b9      	str	r1, [r7, #8]
 800ddc2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800ddc4:	687a      	ldr	r2, [r7, #4]
 800ddc6:	68b9      	ldr	r1, [r7, #8]
 800ddc8:	68f8      	ldr	r0, [r7, #12]
 800ddca:	f000 f8be 	bl	800df4a <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE10deallocateEPS2_j>
 800ddce:	bf00      	nop
 800ddd0:	3710      	adds	r7, #16
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}

0800ddd6 <_ZNKSt11_Deque_baseISt6bitsetILj8EESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800ddd6:	b480      	push	{r7}
 800ddd8:	b083      	sub	sp, #12
 800ddda:	af00      	add	r7, sp, #0
 800dddc:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	4618      	mov	r0, r3
 800dde2:	370c      	adds	r7, #12
 800dde4:	46bd      	mov	sp, r7
 800dde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddea:	4770      	bx	lr

0800ddec <_ZNSaIPSt6bitsetILj8EEEC1IS0_EERKSaIT_E>:
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b082      	sub	sp, #8
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
 800ddf4:	6039      	str	r1, [r7, #0]
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f000 f8b4 	bl	800df64 <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEEC1Ev>
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	4618      	mov	r0, r3
 800de00:	3708      	adds	r7, #8
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}

0800de06 <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800de06:	b480      	push	{r7}
 800de08:	b083      	sub	sp, #12
 800de0a:	af00      	add	r7, sp, #0
 800de0c:	6078      	str	r0, [r7, #4]
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	4618      	mov	r0, r3
 800de12:	370c      	adds	r7, #12
 800de14:	46bd      	mov	sp, r7
 800de16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1a:	4770      	bx	lr

0800de1c <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEE10deallocateEPS3_j>:
      deallocate(pointer __p, size_type)
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b084      	sub	sp, #16
 800de20:	af00      	add	r7, sp, #0
 800de22:	60f8      	str	r0, [r7, #12]
 800de24:	60b9      	str	r1, [r7, #8]
 800de26:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800de28:	68b8      	ldr	r0, [r7, #8]
 800de2a:	f001 fe3b 	bl	800faa4 <_ZdlPv>
      }
 800de2e:	bf00      	nop
 800de30:	3710      	adds	r7, #16
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}

0800de36 <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800de36:	b580      	push	{r7, lr}
 800de38:	b084      	sub	sp, #16
 800de3a:	af00      	add	r7, sp, #0
 800de3c:	60f8      	str	r0, [r7, #12]
 800de3e:	60b9      	str	r1, [r7, #8]
 800de40:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800de42:	68f8      	ldr	r0, [r7, #12]
 800de44:	f000 f899 	bl	800df7a <_ZNK9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 800de48:	4602      	mov	r2, r0
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	4293      	cmp	r3, r2
 800de4e:	bf8c      	ite	hi
 800de50:	2301      	movhi	r3, #1
 800de52:	2300      	movls	r3, #0
 800de54:	b2db      	uxtb	r3, r3
 800de56:	2b00      	cmp	r3, #0
 800de58:	d001      	beq.n	800de5e <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800de5a:	f001 fe38 	bl	800face <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	009b      	lsls	r3, r3, #2
 800de62:	4618      	mov	r0, r3
 800de64:	f001 fe20 	bl	800faa8 <_Znwj>
 800de68:	4603      	mov	r3, r0
      }
 800de6a:	4618      	mov	r0, r3
 800de6c:	3710      	adds	r7, #16
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}

0800de72 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800de72:	b580      	push	{r7, lr}
 800de74:	b082      	sub	sp, #8
 800de76:	af00      	add	r7, sp, #0
 800de78:	6078      	str	r0, [r7, #4]
 800de7a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800de7c:	2200      	movs	r2, #0
 800de7e:	6839      	ldr	r1, [r7, #0]
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f000 f886 	bl	800df92 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>
 800de86:	4603      	mov	r3, r0
 800de88:	4618      	mov	r0, r3
 800de8a:	3708      	adds	r7, #8
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}

0800de90 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_j>:
      deallocate(pointer __p, size_type)
 800de90:	b580      	push	{r7, lr}
 800de92:	b084      	sub	sp, #16
 800de94:	af00      	add	r7, sp, #0
 800de96:	60f8      	str	r0, [r7, #12]
 800de98:	60b9      	str	r1, [r7, #8]
 800de9a:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800de9c:	68b8      	ldr	r0, [r7, #8]
 800de9e:	f001 fe01 	bl	800faa4 <_ZdlPv>
      }
 800dea2:	bf00      	nop
 800dea4:	3710      	adds	r7, #16
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}

0800deaa <_ZN9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800deaa:	b480      	push	{r7}
 800deac:	b083      	sub	sp, #12
 800deae:	af00      	add	r7, sp, #0
 800deb0:	6078      	str	r0, [r7, #4]
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	4618      	mov	r0, r3
 800deb6:	370c      	adds	r7, #12
 800deb8:	46bd      	mov	sp, r7
 800deba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debe:	4770      	bx	lr

0800dec0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b082      	sub	sp, #8
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
 800dec8:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800deca:	687a      	ldr	r2, [r7, #4]
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	429a      	cmp	r2, r3
 800ded0:	d00a      	beq.n	800dee8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f000 f87e 	bl	800dfd4 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>
 800ded8:	4603      	mov	r3, r0
 800deda:	4618      	mov	r0, r3
 800dedc:	f000 f885 	bl	800dfea <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>
	  for (; __first != __last; ++__first)
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	3318      	adds	r3, #24
 800dee4:	607b      	str	r3, [r7, #4]
 800dee6:	e7f0      	b.n	800deca <_ZNSt12_Destroy_auxILb0EE9__destroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvT_S9_+0xa>
	}
 800dee8:	bf00      	nop
 800deea:	3708      	adds	r7, #8
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}

0800def0 <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800def0:	b580      	push	{r7, lr}
 800def2:	b084      	sub	sp, #16
 800def4:	af00      	add	r7, sp, #0
 800def6:	60f8      	str	r0, [r7, #12]
 800def8:	60b9      	str	r1, [r7, #8]
 800defa:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800defc:	68f8      	ldr	r0, [r7, #12]
 800defe:	f000 f87f 	bl	800e000 <_ZNK9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEE8max_sizeEv>
 800df02:	4602      	mov	r2, r0
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	4293      	cmp	r3, r2
 800df08:	bf8c      	ite	hi
 800df0a:	2301      	movhi	r3, #1
 800df0c:	2300      	movls	r3, #0
 800df0e:	b2db      	uxtb	r3, r3
 800df10:	2b00      	cmp	r3, #0
 800df12:	d001      	beq.n	800df18 <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800df14:	f001 fddb 	bl	800face <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	009b      	lsls	r3, r3, #2
 800df1c:	4618      	mov	r0, r3
 800df1e:	f001 fdc3 	bl	800faa8 <_Znwj>
 800df22:	4603      	mov	r3, r0
      }
 800df24:	4618      	mov	r0, r3
 800df26:	3710      	adds	r7, #16
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd80      	pop	{r7, pc}

0800df2c <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b082      	sub	sp, #8
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
 800df34:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800df36:	2200      	movs	r2, #0
 800df38:	6839      	ldr	r1, [r7, #0]
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f000 f86c 	bl	800e018 <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE8allocateEjPKv>
 800df40:	4603      	mov	r3, r0
 800df42:	4618      	mov	r0, r3
 800df44:	3708      	adds	r7, #8
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}

0800df4a <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 800df4a:	b580      	push	{r7, lr}
 800df4c:	b084      	sub	sp, #16
 800df4e:	af00      	add	r7, sp, #0
 800df50:	60f8      	str	r0, [r7, #12]
 800df52:	60b9      	str	r1, [r7, #8]
 800df54:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800df56:	68b8      	ldr	r0, [r7, #8]
 800df58:	f001 fda4 	bl	800faa4 <_ZdlPv>
      }
 800df5c:	bf00      	nop
 800df5e:	3710      	adds	r7, #16
 800df60:	46bd      	mov	sp, r7
 800df62:	bd80      	pop	{r7, pc}

0800df64 <_ZN9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800df64:	b480      	push	{r7}
 800df66:	b083      	sub	sp, #12
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	4618      	mov	r0, r3
 800df70:	370c      	adds	r7, #12
 800df72:	46bd      	mov	sp, r7
 800df74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df78:	4770      	bx	lr

0800df7a <_ZNK9__gnu_cxx13new_allocatorIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800df7a:	b480      	push	{r7}
 800df7c:	b083      	sub	sp, #12
 800df7e:	af00      	add	r7, sp, #0
 800df80:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800df82:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return size_t(-1) / sizeof(_Tp);
#endif
      }
 800df86:	4618      	mov	r0, r3
 800df88:	370c      	adds	r7, #12
 800df8a:	46bd      	mov	sp, r7
 800df8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df90:	4770      	bx	lr

0800df92 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800df92:	b580      	push	{r7, lr}
 800df94:	b084      	sub	sp, #16
 800df96:	af00      	add	r7, sp, #0
 800df98:	60f8      	str	r0, [r7, #12]
 800df9a:	60b9      	str	r1, [r7, #8]
 800df9c:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800df9e:	68f8      	ldr	r0, [r7, #12]
 800dfa0:	f000 f858 	bl	800e054 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 800dfa4:	4602      	mov	r2, r0
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	4293      	cmp	r3, r2
 800dfaa:	bf8c      	ite	hi
 800dfac:	2301      	movhi	r3, #1
 800dfae:	2300      	movls	r3, #0
 800dfb0:	b2db      	uxtb	r3, r3
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d001      	beq.n	800dfba <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800dfb6:	f001 fd8a 	bl	800face <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800dfba:	68ba      	ldr	r2, [r7, #8]
 800dfbc:	4613      	mov	r3, r2
 800dfbe:	005b      	lsls	r3, r3, #1
 800dfc0:	4413      	add	r3, r2
 800dfc2:	00db      	lsls	r3, r3, #3
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f001 fd6f 	bl	800faa8 <_Znwj>
 800dfca:	4603      	mov	r3, r0
      }
 800dfcc:	4618      	mov	r0, r3
 800dfce:	3710      	adds	r7, #16
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	bd80      	pop	{r7, pc}

0800dfd4 <_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800dfd4:	b480      	push	{r7}
 800dfd6:	b083      	sub	sp, #12
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	4618      	mov	r0, r3
 800dfe0:	370c      	adds	r7, #12
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe8:	4770      	bx	lr

0800dfea <_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_>:
    _Destroy(_Tp* __pointer)
 800dfea:	b580      	push	{r7, lr}
 800dfec:	b082      	sub	sp, #8
 800dfee:	af00      	add	r7, sp, #0
 800dff0:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 800dff2:	6878      	ldr	r0, [r7, #4]
 800dff4:	f001 fed1 	bl	800fd9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800dff8:	bf00      	nop
 800dffa:	3708      	adds	r7, #8
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}

0800e000 <_ZNK9__gnu_cxx13new_allocatorIPSt6bitsetILj8EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800e000:	b480      	push	{r7}
 800e002:	b083      	sub	sp, #12
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800e008:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800e00c:	4618      	mov	r0, r3
 800e00e:	370c      	adds	r7, #12
 800e010:	46bd      	mov	sp, r7
 800e012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e016:	4770      	bx	lr

0800e018 <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800e018:	b580      	push	{r7, lr}
 800e01a:	b084      	sub	sp, #16
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	60f8      	str	r0, [r7, #12]
 800e020:	60b9      	str	r1, [r7, #8]
 800e022:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800e024:	68f8      	ldr	r0, [r7, #12]
 800e026:	f000 f823 	bl	800e070 <_ZNK9__gnu_cxx13new_allocatorISt6bitsetILj8EEE8max_sizeEv>
 800e02a:	4602      	mov	r2, r0
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	4293      	cmp	r3, r2
 800e030:	bf8c      	ite	hi
 800e032:	2301      	movhi	r3, #1
 800e034:	2300      	movls	r3, #0
 800e036:	b2db      	uxtb	r3, r3
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d001      	beq.n	800e040 <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800e03c:	f001 fd47 	bl	800face <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	009b      	lsls	r3, r3, #2
 800e044:	4618      	mov	r0, r3
 800e046:	f001 fd2f 	bl	800faa8 <_Znwj>
 800e04a:	4603      	mov	r3, r0
      }
 800e04c:	4618      	mov	r0, r3
 800e04e:	3710      	adds	r7, #16
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}

0800e054 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800e054:	b480      	push	{r7}
 800e056:	b083      	sub	sp, #12
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800e05c:	4b03      	ldr	r3, [pc, #12]	; (800e06c <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv+0x18>)
      }
 800e05e:	4618      	mov	r0, r3
 800e060:	370c      	adds	r7, #12
 800e062:	46bd      	mov	sp, r7
 800e064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e068:	4770      	bx	lr
 800e06a:	bf00      	nop
 800e06c:	05555555 	.word	0x05555555

0800e070 <_ZNK9__gnu_cxx13new_allocatorISt6bitsetILj8EEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800e070:	b480      	push	{r7}
 800e072:	b083      	sub	sp, #12
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800e078:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800e07c:	4618      	mov	r0, r3
 800e07e:	370c      	adds	r7, #12
 800e080:	46bd      	mov	sp, r7
 800e082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e086:	4770      	bx	lr

0800e088 <_ZN8receiverD1Ev>:
 800e088:	b580      	push	{r7, lr}
 800e08a:	b082      	sub	sp, #8
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	3328      	adds	r3, #40	; 0x28
 800e094:	4618      	mov	r0, r3
 800e096:	f7ff f8f8 	bl	800d28a <_ZNSt5dequeISt6bitsetILj8EESaIS1_EED1Ev>
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	4618      	mov	r0, r3
 800e09e:	f7ff f8c2 	bl	800d226 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	3708      	adds	r7, #8
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}

0800e0ac <_ZN11transmitterD1Ev>:
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b082      	sub	sp, #8
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	332c      	adds	r3, #44	; 0x2c
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f7ff f8e6 	bl	800d28a <_ZNSt5dequeISt6bitsetILj8EESaIS1_EED1Ev>
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	3304      	adds	r3, #4
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f7ff f8af 	bl	800d226 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev>
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	3708      	adds	r7, #8
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}
	...

0800e0d4 <_Z41__static_initialization_and_destruction_0ii>:
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b082      	sub	sp, #8
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
 800e0dc:	6039      	str	r1, [r7, #0]
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	2b01      	cmp	r3, #1
 800e0e2:	d10a      	bne.n	800e0fa <_Z41__static_initialization_and_destruction_0ii+0x26>
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e0ea:	4293      	cmp	r3, r2
 800e0ec:	d105      	bne.n	800e0fa <_Z41__static_initialization_and_destruction_0ii+0x26>
transmitter t;
 800e0ee:	480c      	ldr	r0, [pc, #48]	; (800e120 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800e0f0:	f7ff f809 	bl	800d106 <_ZN11transmitterC1Ev>
receiver r;
 800e0f4:	480b      	ldr	r0, [pc, #44]	; (800e124 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800e0f6:	f7ff f81c 	bl	800d132 <_ZN8receiverC1Ev>
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d10a      	bne.n	800e116 <_Z41__static_initialization_and_destruction_0ii+0x42>
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e106:	4293      	cmp	r3, r2
 800e108:	d105      	bne.n	800e116 <_Z41__static_initialization_and_destruction_0ii+0x42>
 800e10a:	4806      	ldr	r0, [pc, #24]	; (800e124 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800e10c:	f7ff ffbc 	bl	800e088 <_ZN8receiverD1Ev>
transmitter t;
 800e110:	4803      	ldr	r0, [pc, #12]	; (800e120 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800e112:	f7ff ffcb 	bl	800e0ac <_ZN11transmitterD1Ev>
}
 800e116:	bf00      	nop
 800e118:	3708      	adds	r7, #8
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}
 800e11e:	bf00      	nop
 800e120:	20004ca0 	.word	0x20004ca0
 800e124:	20004cf8 	.word	0x20004cf8

0800e128 <_GLOBAL__sub_I_t>:
 800e128:	b580      	push	{r7, lr}
 800e12a:	af00      	add	r7, sp, #0
 800e12c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e130:	2001      	movs	r0, #1
 800e132:	f7ff ffcf 	bl	800e0d4 <_Z41__static_initialization_and_destruction_0ii>
 800e136:	bd80      	pop	{r7, pc}

0800e138 <_GLOBAL__sub_D_t>:
 800e138:	b580      	push	{r7, lr}
 800e13a:	af00      	add	r7, sp, #0
 800e13c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e140:	2000      	movs	r0, #0
 800e142:	f7ff ffc7 	bl	800e0d4 <_Z41__static_initialization_and_destruction_0ii>
 800e146:	bd80      	pop	{r7, pc}

0800e148 <_ZNSt11char_traitsIcE6assignERcRKc>:
      typedef streampos         pos_type;
      typedef streamoff         off_type;
      typedef mbstate_t         state_type;

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 800e148:	b480      	push	{r7}
 800e14a:	b083      	sub	sp, #12
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
 800e150:	6039      	str	r1, [r7, #0]
      { __c1 = __c2; }
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	781a      	ldrb	r2, [r3, #0]
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	701a      	strb	r2, [r3, #0]
 800e15a:	bf00      	nop
 800e15c:	370c      	adds	r7, #12
 800e15e:	46bd      	mov	sp, r7
 800e160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e164:	4770      	bx	lr

0800e166 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800e166:	b480      	push	{r7}
 800e168:	b083      	sub	sp, #12
 800e16a:	af00      	add	r7, sp, #0
 800e16c:	6078      	str	r0, [r7, #4]
 800e16e:	6039      	str	r1, [r7, #0]
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	4618      	mov	r0, r3
 800e174:	370c      	adds	r7, #12
 800e176:	46bd      	mov	sp, r7
 800e178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17c:	4770      	bx	lr

0800e17e <_ZNSt12_Base_bitsetILj1EE11_S_whichbitEj>:
      static _GLIBCXX_CONSTEXPR size_t
      _S_whichbyte(size_t __pos) _GLIBCXX_NOEXCEPT
      { return (__pos % _GLIBCXX_BITSET_BITS_PER_WORD) / __CHAR_BIT__; }

      static _GLIBCXX_CONSTEXPR size_t
      _S_whichbit(size_t __pos) _GLIBCXX_NOEXCEPT
 800e17e:	b480      	push	{r7}
 800e180:	b083      	sub	sp, #12
 800e182:	af00      	add	r7, sp, #0
 800e184:	6078      	str	r0, [r7, #4]
      {  return __pos % _GLIBCXX_BITSET_BITS_PER_WORD; }
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f003 031f 	and.w	r3, r3, #31
 800e18c:	4618      	mov	r0, r3
 800e18e:	370c      	adds	r7, #12
 800e190:	46bd      	mov	sp, r7
 800e192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e196:	4770      	bx	lr

0800e198 <_ZNSt12_Base_bitsetILj1EE10_S_maskbitEj>:

      static _GLIBCXX_CONSTEXPR _WordT
      _S_maskbit(size_t __pos) _GLIBCXX_NOEXCEPT
 800e198:	b580      	push	{r7, lr}
 800e19a:	b082      	sub	sp, #8
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
      { return (static_cast<_WordT>(1)) << _S_whichbit(__pos); }
 800e1a0:	6878      	ldr	r0, [r7, #4]
 800e1a2:	f7ff ffec 	bl	800e17e <_ZNSt12_Base_bitsetILj1EE11_S_whichbitEj>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	2201      	movs	r2, #1
 800e1aa:	fa02 f303 	lsl.w	r3, r2, r3
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3708      	adds	r7, #8
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}

0800e1b6 <_ZNSt12_Base_bitsetILj1EE10_M_getwordEj>:

      _WordT&
      _M_getword(size_t) _GLIBCXX_NOEXCEPT
 800e1b6:	b480      	push	{r7}
 800e1b8:	b083      	sub	sp, #12
 800e1ba:	af00      	add	r7, sp, #0
 800e1bc:	6078      	str	r0, [r7, #4]
 800e1be:	6039      	str	r1, [r7, #0]
      { return _M_w; }
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	370c      	adds	r7, #12
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1cc:	4770      	bx	lr

0800e1ce <_ZNKSt12_Base_bitsetILj1EE10_M_getwordEj>:

      _GLIBCXX_CONSTEXPR _WordT
      _M_getword(size_t) const _GLIBCXX_NOEXCEPT
 800e1ce:	b480      	push	{r7}
 800e1d0:	b083      	sub	sp, #12
 800e1d2:	af00      	add	r7, sp, #0
 800e1d4:	6078      	str	r0, [r7, #4]
 800e1d6:	6039      	str	r1, [r7, #0]
      { return _M_w; }
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	4618      	mov	r0, r3
 800e1de:	370c      	adds	r7, #12
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e6:	4770      	bx	lr

0800e1e8 <_ZNKSt12_Base_bitsetILj1EE14_M_do_to_ulongEv>:
      size_t
      _M_do_count() const _GLIBCXX_NOEXCEPT
      { return __builtin_popcountl(_M_w); }

      unsigned long
      _M_do_to_ulong() const _GLIBCXX_NOEXCEPT
 800e1e8:	b480      	push	{r7}
 800e1ea:	b083      	sub	sp, #12
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
      { return _M_w; }
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	370c      	adds	r7, #12
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fe:	4770      	bx	lr

0800e200 <_ZN8receiver6enableEv>:

#include "receiver.h"

// Turn on the timer to start listening for messages
void receiver::enable()
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b082      	sub	sp, #8
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(RECEIVE_TIMER);
 800e208:	4803      	ldr	r0, [pc, #12]	; (800e218 <_ZN8receiver6enableEv+0x18>)
 800e20a:	f7f7 fc89 	bl	8005b20 <HAL_TIM_Base_Start_IT>
}
 800e20e:	bf00      	nop
 800e210:	3708      	adds	r7, #8
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}
 800e216:	bf00      	nop
 800e218:	200055d4 	.word	0x200055d4

0800e21c <_ZN8receiver7disableEv>:

// Turn off the timer to stop listening for messages
void receiver::disable()
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b082      	sub	sp, #8
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(RECEIVE_TIMER);
 800e224:	4803      	ldr	r0, [pc, #12]	; (800e234 <_ZN8receiver7disableEv+0x18>)
 800e226:	f7f7 fcdd 	bl	8005be4 <HAL_TIM_Base_Stop_IT>
}
 800e22a:	bf00      	nop
 800e22c:	3708      	adds	r7, #8
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}
 800e232:	bf00      	nop
 800e234:	200055d4 	.word	0x200055d4

0800e238 <_ZN8receiver11clearBufferEv>:

// Get the contents of the inbound buffer
// and put it in a message in the inbound queue
void receiver::clearBuffer()
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b08a      	sub	sp, #40	; 0x28
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
	string m = "";
 800e240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e244:	4618      	mov	r0, r3
 800e246:	f001 fc40 	bl	800faca <_ZNSaIcEC1Ev>
 800e24a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e24e:	f107 030c 	add.w	r3, r7, #12
 800e252:	4921      	ldr	r1, [pc, #132]	; (800e2d8 <_ZN8receiver11clearBufferEv+0xa0>)
 800e254:	4618      	mov	r0, r3
 800e256:	f001 fe75 	bl	800ff44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800e25a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e25e:	4618      	mov	r0, r3
 800e260:	f001 fc34 	bl	800facc <_ZNSaIcED1Ev>

	while(!buffer.empty())
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	3328      	adds	r3, #40	; 0x28
 800e268:	4618      	mov	r0, r3
 800e26a:	f000 f95f 	bl	800e52c <_ZNKSt5dequeISt6bitsetILj8EESaIS1_EE5emptyEv>
 800e26e:	4603      	mov	r3, r0
 800e270:	f083 0301 	eor.w	r3, r3, #1
 800e274:	b2db      	uxtb	r3, r3
 800e276:	2b00      	cmp	r3, #0
 800e278:	d01a      	beq.n	800e2b0 <_ZN8receiver11clearBufferEv+0x78>
	{
		bitset<8> c = buffer.front();
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	3328      	adds	r3, #40	; 0x28
 800e27e:	4618      	mov	r0, r3
 800e280:	f000 f966 	bl	800e550 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE5frontEv>
 800e284:	4603      	mov	r3, r0
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	60bb      	str	r3, [r7, #8]
		buffer.pop_front();
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	3328      	adds	r3, #40	; 0x28
 800e28e:	4618      	mov	r0, r3
 800e290:	f000 f972 	bl	800e578 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9pop_frontEv>

		m += (char) c.to_ulong();
 800e294:	f107 0308 	add.w	r3, r7, #8
 800e298:	4618      	mov	r0, r3
 800e29a:	f000 f98c 	bl	800e5b6 <_ZNKSt6bitsetILj8EE8to_ulongEv>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	b2da      	uxtb	r2, r3
 800e2a2:	f107 030c 	add.w	r3, r7, #12
 800e2a6:	4611      	mov	r1, r2
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f001 fda0 	bl	800fdee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>
	while(!buffer.empty())
 800e2ae:	e7d9      	b.n	800e264 <_ZN8receiver11clearBufferEv+0x2c>
	}

	messages.push_back(m);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f107 020c 	add.w	r2, r7, #12
 800e2b6:	4611      	mov	r1, r2
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f000 f989 	bl	800e5d0 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_>

	bitPointer = 0;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	string m = "";
 800e2c6:	f107 030c 	add.w	r3, r7, #12
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f001 fd65 	bl	800fd9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800e2d0:	bf00      	nop
 800e2d2:	3728      	adds	r7, #40	; 0x28
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}
 800e2d8:	080153ac 	.word	0x080153ac

0800e2dc <_ZN8receiver11addToBufferEb>:

// Add a single bit to the buffer
void receiver::addToBuffer(bool bit)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b08a      	sub	sp, #40	; 0x28
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	460b      	mov	r3, r1
 800e2e6:	70fb      	strb	r3, [r7, #3]
	bitset<8> c;
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	627b      	str	r3, [r7, #36]	; 0x24
	if(bitPointer > 7 || buffer.empty())
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e2f2:	2b07      	cmp	r3, #7
 800e2f4:	d807      	bhi.n	800e306 <_ZN8receiver11addToBufferEb+0x2a>
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	3328      	adds	r3, #40	; 0x28
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f000 f916 	bl	800e52c <_ZNKSt5dequeISt6bitsetILj8EESaIS1_EE5emptyEv>
 800e300:	4603      	mov	r3, r0
 800e302:	2b00      	cmp	r3, #0
 800e304:	d001      	beq.n	800e30a <_ZN8receiver11addToBufferEb+0x2e>
 800e306:	2301      	movs	r3, #1
 800e308:	e000      	b.n	800e30c <_ZN8receiver11addToBufferEb+0x30>
 800e30a:	2300      	movs	r3, #0
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d013      	beq.n	800e338 <_ZN8receiver11addToBufferEb+0x5c>
	{
		// Make a new char and set the first bit
		c.set(0, bit);
 800e310:	78fa      	ldrb	r2, [r7, #3]
 800e312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e316:	2100      	movs	r1, #0
 800e318:	4618      	mov	r0, r3
 800e31a:	f000 f97b 	bl	800e614 <_ZNSt6bitsetILj8EE3setEjb>
		buffer.push_back(c);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	3328      	adds	r3, #40	; 0x28
 800e322:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e326:	4611      	mov	r1, r2
 800e328:	4618      	mov	r0, r3
 800e32a:	f000 f98d 	bl	800e648 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9push_backERKS1_>
		bitPointer = 1;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	2201      	movs	r2, #1
 800e332:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800e336:	e026      	b.n	800e386 <_ZN8receiver11addToBufferEb+0xaa>
	}
	else
	{
		// Grab the existing char and set the bit on it
		c = buffer.back();
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	3328      	adds	r3, #40	; 0x28
 800e33c:	4618      	mov	r0, r3
 800e33e:	f000 f9a4 	bl	800e68a <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE4backEv>
 800e342:	4603      	mov	r3, r0
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	627b      	str	r3, [r7, #36]	; 0x24
		// 7- if the sent bytes are mirrored
		//c.set(7-bitPointer, bit);
		c.set(bitPointer, bit);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e34e:	4619      	mov	r1, r3
 800e350:	78fa      	ldrb	r2, [r7, #3]
 800e352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e356:	4618      	mov	r0, r3
 800e358:	f000 f95c 	bl	800e614 <_ZNSt6bitsetILj8EE3setEjb>
		buffer.pop_back();
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	3328      	adds	r3, #40	; 0x28
 800e360:	4618      	mov	r0, r3
 800e362:	f000 f9ab 	bl	800e6bc <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE8pop_backEv>
		buffer.push_back(c);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	3328      	adds	r3, #40	; 0x28
 800e36a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e36e:	4611      	mov	r1, r2
 800e370:	4618      	mov	r0, r3
 800e372:	f000 f969 	bl	800e648 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9push_backERKS1_>
		bitPointer++;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e37c:	3301      	adds	r3, #1
 800e37e:	b29a      	uxth	r2, r3
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	}

	string s = buffer.back().to_string();
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	3328      	adds	r3, #40	; 0x28
 800e38a:	4618      	mov	r0, r3
 800e38c:	f000 f97d 	bl	800e68a <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE4backEv>
 800e390:	4602      	mov	r2, r0
 800e392:	f107 030c 	add.w	r3, r7, #12
 800e396:	4611      	mov	r1, r2
 800e398:	4618      	mov	r0, r3
 800e39a:	f000 f9ad 	bl	800e6f8 <_ZNKSt6bitsetILj8EE9to_stringB5cxx11Ev>
 800e39e:	f107 030c 	add.w	r3, r7, #12
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f001 fcf9 	bl	800fd9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800e3a8:	bf00      	nop
 800e3aa:	3728      	adds	r7, #40	; 0x28
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}

0800e3b0 <_ZN8receiver12checkMessageEv>:

bool receiver::checkMessage()
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b082      	sub	sp, #8
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
	// If messages are empty, return false. If full, return true
	return !(messages.empty());
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f000 f9aa 	bl	800e714 <_ZNKSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5emptyEv>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	f083 0301 	eor.w	r3, r3, #1
 800e3c6:	b2db      	uxtb	r3, r3
}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	3708      	adds	r7, #8
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}

0800e3d0 <_ZN8receiver10popMessageB5cxx11Ev>:

string receiver::popMessage()
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b082      	sub	sp, #8
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
 800e3d8:	6039      	str	r1, [r7, #0]
	string retVal = messages.front();
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f000 f9ab 	bl	800e738 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5frontEv>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	4619      	mov	r1, r3
 800e3e6:	6878      	ldr	r0, [r7, #4]
 800e3e8:	f001 fd78 	bl	800fedc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
	messages.pop_front();
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f000 f9b6 	bl	800e760 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9pop_frontEv>
	return retVal;
 800e3f4:	bf00      	nop
}
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	3708      	adds	r7, #8
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}
	...

0800e400 <_ZN8receiver4tickEv>:
	disable();
	return retVal;
}

void receiver::tick()
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b084      	sub	sp, #16
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
	bool on = HAL_GPIO_ReadPin(RADIO_RECEIVE_GPIO_Port,RADIO_RECEIVE_Pin);
 800e408:	2104      	movs	r1, #4
 800e40a:	4844      	ldr	r0, [pc, #272]	; (800e51c <_ZN8receiver4tickEv+0x11c>)
 800e40c:	f7f5 fe1c 	bl	8004048 <HAL_GPIO_ReadPin>
 800e410:	4603      	mov	r3, r0
 800e412:	2b00      	cmp	r3, #0
 800e414:	bf14      	ite	ne
 800e416:	2301      	movne	r3, #1
 800e418:	2300      	moveq	r3, #0
 800e41a:	73fb      	strb	r3, [r7, #15]
	static bool started = false;
	static bool isCounting = false;
	static uint16_t counter = 0;

	if(on && isCounting)
 800e41c:	7bfb      	ldrb	r3, [r7, #15]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d00a      	beq.n	800e438 <_ZN8receiver4tickEv+0x38>
 800e422:	4b3f      	ldr	r3, [pc, #252]	; (800e520 <_ZN8receiver4tickEv+0x120>)
 800e424:	781b      	ldrb	r3, [r3, #0]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d006      	beq.n	800e438 <_ZN8receiver4tickEv+0x38>
	{
		counter++;
 800e42a:	4b3e      	ldr	r3, [pc, #248]	; (800e524 <_ZN8receiver4tickEv+0x124>)
 800e42c:	881b      	ldrh	r3, [r3, #0]
 800e42e:	3301      	adds	r3, #1
 800e430:	b29a      	uxth	r2, r3
 800e432:	4b3c      	ldr	r3, [pc, #240]	; (800e524 <_ZN8receiver4tickEv+0x124>)
 800e434:	801a      	strh	r2, [r3, #0]
 800e436:	e06c      	b.n	800e512 <_ZN8receiver4tickEv+0x112>
		// For seeing how many counts a bit is
		//HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
	}
	else if(on && !isCounting)
 800e438:	7bfb      	ldrb	r3, [r7, #15]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d00d      	beq.n	800e45a <_ZN8receiver4tickEv+0x5a>
 800e43e:	4b38      	ldr	r3, [pc, #224]	; (800e520 <_ZN8receiver4tickEv+0x120>)
 800e440:	781b      	ldrb	r3, [r3, #0]
 800e442:	f083 0301 	eor.w	r3, r3, #1
 800e446:	b2db      	uxtb	r3, r3
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d006      	beq.n	800e45a <_ZN8receiver4tickEv+0x5a>
	{
		counter = 0;
 800e44c:	4b35      	ldr	r3, [pc, #212]	; (800e524 <_ZN8receiver4tickEv+0x124>)
 800e44e:	2200      	movs	r2, #0
 800e450:	801a      	strh	r2, [r3, #0]
		isCounting = true;
 800e452:	4b33      	ldr	r3, [pc, #204]	; (800e520 <_ZN8receiver4tickEv+0x120>)
 800e454:	2201      	movs	r2, #1
 800e456:	701a      	strb	r2, [r3, #0]
 800e458:	e05b      	b.n	800e512 <_ZN8receiver4tickEv+0x112>
	}
	else if(!on && isCounting)
 800e45a:	7bfb      	ldrb	r3, [r7, #15]
 800e45c:	f083 0301 	eor.w	r3, r3, #1
 800e460:	b2db      	uxtb	r3, r3
 800e462:	2b00      	cmp	r3, #0
 800e464:	d055      	beq.n	800e512 <_ZN8receiver4tickEv+0x112>
 800e466:	4b2e      	ldr	r3, [pc, #184]	; (800e520 <_ZN8receiver4tickEv+0x120>)
 800e468:	781b      	ldrb	r3, [r3, #0]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d051      	beq.n	800e512 <_ZN8receiver4tickEv+0x112>
	{
		if(!started)
 800e46e:	4b2e      	ldr	r3, [pc, #184]	; (800e528 <_ZN8receiver4tickEv+0x128>)
 800e470:	781b      	ldrb	r3, [r3, #0]
 800e472:	f083 0301 	eor.w	r3, r3, #1
 800e476:	b2db      	uxtb	r3, r3
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d013      	beq.n	800e4a4 <_ZN8receiver4tickEv+0xa4>
		{
			if((START_MIN < counter) && (counter < START_MAX))
 800e47c:	4b29      	ldr	r3, [pc, #164]	; (800e524 <_ZN8receiver4tickEv+0x124>)
 800e47e:	881b      	ldrh	r3, [r3, #0]
 800e480:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 800e484:	d93e      	bls.n	800e504 <_ZN8receiver4tickEv+0x104>
 800e486:	4b27      	ldr	r3, [pc, #156]	; (800e524 <_ZN8receiver4tickEv+0x124>)
 800e488:	881b      	ldrh	r3, [r3, #0]
 800e48a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800e48e:	d239      	bcs.n	800e504 <_ZN8receiver4tickEv+0x104>
			{
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,GPIO_PIN_SET);
 800e490:	2201      	movs	r2, #1
 800e492:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e496:	4821      	ldr	r0, [pc, #132]	; (800e51c <_ZN8receiver4tickEv+0x11c>)
 800e498:	f7f5 fdee 	bl	8004078 <HAL_GPIO_WritePin>
				// Remember that there has been a start bit
				started = true;
 800e49c:	4b22      	ldr	r3, [pc, #136]	; (800e528 <_ZN8receiver4tickEv+0x128>)
 800e49e:	2201      	movs	r2, #1
 800e4a0:	701a      	strb	r2, [r3, #0]
 800e4a2:	e02f      	b.n	800e504 <_ZN8receiver4tickEv+0x104>
			}
		}
		else
		{
			if((ZERO_MIN < counter) && (counter < ZERO_MAX))
 800e4a4:	4b1f      	ldr	r3, [pc, #124]	; (800e524 <_ZN8receiver4tickEv+0x124>)
 800e4a6:	881b      	ldrh	r3, [r3, #0]
 800e4a8:	2b5a      	cmp	r3, #90	; 0x5a
 800e4aa:	d908      	bls.n	800e4be <_ZN8receiver4tickEv+0xbe>
 800e4ac:	4b1d      	ldr	r3, [pc, #116]	; (800e524 <_ZN8receiver4tickEv+0x124>)
 800e4ae:	881b      	ldrh	r3, [r3, #0]
 800e4b0:	2b63      	cmp	r3, #99	; 0x63
 800e4b2:	d804      	bhi.n	800e4be <_ZN8receiver4tickEv+0xbe>
			{
				// Add zero to buffer
				addToBuffer(false);
 800e4b4:	2100      	movs	r1, #0
 800e4b6:	6878      	ldr	r0, [r7, #4]
 800e4b8:	f7ff ff10 	bl	800e2dc <_ZN8receiver11addToBufferEb>
 800e4bc:	e022      	b.n	800e504 <_ZN8receiver4tickEv+0x104>
			}
			else if((ONE_MIN < counter) && (counter < ONE_MAX))
 800e4be:	4b19      	ldr	r3, [pc, #100]	; (800e524 <_ZN8receiver4tickEv+0x124>)
 800e4c0:	881b      	ldrh	r3, [r3, #0]
 800e4c2:	2bbe      	cmp	r3, #190	; 0xbe
 800e4c4:	d908      	bls.n	800e4d8 <_ZN8receiver4tickEv+0xd8>
 800e4c6:	4b17      	ldr	r3, [pc, #92]	; (800e524 <_ZN8receiver4tickEv+0x124>)
 800e4c8:	881b      	ldrh	r3, [r3, #0]
 800e4ca:	2bc7      	cmp	r3, #199	; 0xc7
 800e4cc:	d804      	bhi.n	800e4d8 <_ZN8receiver4tickEv+0xd8>
			{
				// Add one to buffer
				addToBuffer(true);
 800e4ce:	2101      	movs	r1, #1
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f7ff ff03 	bl	800e2dc <_ZN8receiver11addToBufferEb>
 800e4d6:	e015      	b.n	800e504 <_ZN8receiver4tickEv+0x104>
			}
			else if((STOP_MIN < counter) && (counter < STOP_MAX))
 800e4d8:	4b12      	ldr	r3, [pc, #72]	; (800e524 <_ZN8receiver4tickEv+0x124>)
 800e4da:	881b      	ldrh	r3, [r3, #0]
 800e4dc:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 800e4e0:	d910      	bls.n	800e504 <_ZN8receiver4tickEv+0x104>
 800e4e2:	4b10      	ldr	r3, [pc, #64]	; (800e524 <_ZN8receiver4tickEv+0x124>)
 800e4e4:	881b      	ldrh	r3, [r3, #0]
 800e4e6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800e4ea:	d20b      	bcs.n	800e504 <_ZN8receiver4tickEv+0x104>
			{
				// Forget the start bit so we can wait
				// for the next message
				started = false;
 800e4ec:	4b0e      	ldr	r3, [pc, #56]	; (800e528 <_ZN8receiver4tickEv+0x128>)
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	701a      	strb	r2, [r3, #0]

				// If a second high point the length of a
				// start bit is found (the stop bit), put
				// the buffer in the message queue
				clearBuffer();
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f7ff fea0 	bl	800e238 <_ZN8receiver11clearBufferEv>

				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,GPIO_PIN_RESET);
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e4fe:	4807      	ldr	r0, [pc, #28]	; (800e51c <_ZN8receiver4tickEv+0x11c>)
 800e500:	f7f5 fdba 	bl	8004078 <HAL_GPIO_WritePin>
			}
		}

		// Stop the timer
		counter = 0;
 800e504:	4b07      	ldr	r3, [pc, #28]	; (800e524 <_ZN8receiver4tickEv+0x124>)
 800e506:	2200      	movs	r2, #0
 800e508:	801a      	strh	r2, [r3, #0]
		isCounting = false;
 800e50a:	4b05      	ldr	r3, [pc, #20]	; (800e520 <_ZN8receiver4tickEv+0x120>)
 800e50c:	2200      	movs	r2, #0
 800e50e:	701a      	strb	r2, [r3, #0]
	}
}
 800e510:	e7ff      	b.n	800e512 <_ZN8receiver4tickEv+0x112>
 800e512:	bf00      	nop
 800e514:	3710      	adds	r7, #16
 800e516:	46bd      	mov	sp, r7
 800e518:	bd80      	pop	{r7, pc}
 800e51a:	bf00      	nop
 800e51c:	40020400 	.word	0x40020400
 800e520:	20004d4d 	.word	0x20004d4d
 800e524:	20004d4e 	.word	0x20004d4e
 800e528:	20004d4c 	.word	0x20004d4c

0800e52c <_ZNKSt5dequeISt6bitsetILj8EESaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b082      	sub	sp, #8
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	f103 0218 	add.w	r2, r3, #24
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	3308      	adds	r3, #8
 800e53e:	4619      	mov	r1, r3
 800e540:	4610      	mov	r0, r2
 800e542:	f000 f92d 	bl	800e7a0 <_ZSteqISt6bitsetILj8EERS1_PS1_EbRKSt15_Deque_iteratorIT_T0_T1_ESA_>
 800e546:	4603      	mov	r3, r0
 800e548:	4618      	mov	r0, r3
 800e54a:	3708      	adds	r7, #8
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}

0800e550 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 800e550:	b580      	push	{r7, lr}
 800e552:	b086      	sub	sp, #24
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
	return *begin();
 800e558:	f107 0308 	add.w	r3, r7, #8
 800e55c:	6879      	ldr	r1, [r7, #4]
 800e55e:	4618      	mov	r0, r3
 800e560:	f7fe ff9a 	bl	800d498 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE5beginEv>
 800e564:	f107 0308 	add.w	r3, r7, #8
 800e568:	4618      	mov	r0, r3
 800e56a:	f000 f92d 	bl	800e7c8 <_ZNKSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EdeEv>
 800e56e:	4603      	mov	r3, r0
      }
 800e570:	4618      	mov	r0, r3
 800e572:	3718      	adds	r7, #24
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}

0800e578 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 800e578:	b580      	push	{r7, lr}
 800e57a:	b082      	sub	sp, #8
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	691b      	ldr	r3, [r3, #16]
 800e588:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 800e58a:	429a      	cmp	r2, r3
 800e58c:	d00c      	beq.n	800e5a8 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9pop_frontEv+0x30>
	    _Alloc_traits::destroy(this->_M_impl,
 800e58e:	687a      	ldr	r2, [r7, #4]
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	689b      	ldr	r3, [r3, #8]
 800e594:	4619      	mov	r1, r3
 800e596:	4610      	mov	r0, r2
 800e598:	f000 f922 	bl	800e7e0 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE7destroyIS1_EEvRS2_PT_>
	    ++this->_M_impl._M_start._M_cur;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	689b      	ldr	r3, [r3, #8]
 800e5a0:	1d1a      	adds	r2, r3, #4
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	609a      	str	r2, [r3, #8]
      }
 800e5a6:	e002      	b.n	800e5ae <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9pop_frontEv+0x36>
	  _M_pop_front_aux();
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f000 f926 	bl	800e7fa <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE16_M_pop_front_auxEv>
      }
 800e5ae:	bf00      	nop
 800e5b0:	3708      	adds	r7, #8
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}

0800e5b6 <_ZNKSt6bitsetILj8EE8to_ulongEv>:
       *  @return  The integral equivalent of the bits.
       *  @throw  std::overflow_error  If there are too many bits to be
       *                               represented in an @c unsigned @c long.
       */
      unsigned long
      to_ulong() const
 800e5b6:	b580      	push	{r7, lr}
 800e5b8:	b082      	sub	sp, #8
 800e5ba:	af00      	add	r7, sp, #0
 800e5bc:	6078      	str	r0, [r7, #4]
      { return this->_M_do_to_ulong(); }
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f7ff fe11 	bl	800e1e8 <_ZNKSt12_Base_bitsetILj1EE14_M_do_to_ulongEv>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	3708      	adds	r7, #8
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	bd80      	pop	{r7, pc}

0800e5d0 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_>:
      push_back(const value_type& __x)
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b082      	sub	sp, #8
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
 800e5d8:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6a1b      	ldr	r3, [r3, #32]
 800e5e2:	3b18      	subs	r3, #24
	if (this->_M_impl._M_finish._M_cur
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	d00d      	beq.n	800e604 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_+0x34>
	    _Alloc_traits::construct(this->_M_impl,
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	699b      	ldr	r3, [r3, #24]
 800e5ee:	683a      	ldr	r2, [r7, #0]
 800e5f0:	4619      	mov	r1, r3
 800e5f2:	f000 f92a 	bl	800e84a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	699b      	ldr	r3, [r3, #24]
 800e5fa:	f103 0218 	add.w	r2, r3, #24
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	619a      	str	r2, [r3, #24]
      }
 800e602:	e003      	b.n	800e60c <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_+0x3c>
	  _M_push_back_aux(__x);
 800e604:	6839      	ldr	r1, [r7, #0]
 800e606:	6878      	ldr	r0, [r7, #4]
 800e608:	f000 f932 	bl	800e870 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_>
      }
 800e60c:	bf00      	nop
 800e60e:	3708      	adds	r7, #8
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}

0800e614 <_ZNSt6bitsetILj8EE3setEjb>:
      set(size_t __position, bool __val = true)
 800e614:	b580      	push	{r7, lr}
 800e616:	b084      	sub	sp, #16
 800e618:	af00      	add	r7, sp, #0
 800e61a:	60f8      	str	r0, [r7, #12]
 800e61c:	60b9      	str	r1, [r7, #8]
 800e61e:	4613      	mov	r3, r2
 800e620:	71fb      	strb	r3, [r7, #7]
	this->_M_check(__position, __N("bitset::set"));
 800e622:	4a08      	ldr	r2, [pc, #32]	; (800e644 <_ZNSt6bitsetILj8EE3setEjb+0x30>)
 800e624:	68b9      	ldr	r1, [r7, #8]
 800e626:	68f8      	ldr	r0, [r7, #12]
 800e628:	f000 f966 	bl	800e8f8 <_ZNKSt6bitsetILj8EE8_M_checkEjPKc>
	return _Unchecked_set(__position, __val);
 800e62c:	79fb      	ldrb	r3, [r7, #7]
 800e62e:	461a      	mov	r2, r3
 800e630:	68b9      	ldr	r1, [r7, #8]
 800e632:	68f8      	ldr	r0, [r7, #12]
 800e634:	f000 f976 	bl	800e924 <_ZNSt6bitsetILj8EE14_Unchecked_setEji>
 800e638:	4603      	mov	r3, r0
      }
 800e63a:	4618      	mov	r0, r3
 800e63c:	3710      	adds	r7, #16
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}
 800e642:	bf00      	nop
 800e644:	080153b4 	.word	0x080153b4

0800e648 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 800e648:	b580      	push	{r7, lr}
 800e64a:	b082      	sub	sp, #8
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
 800e650:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6a1b      	ldr	r3, [r3, #32]
 800e65a:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 800e65c:	429a      	cmp	r2, r3
 800e65e:	d00c      	beq.n	800e67a <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9push_backERKS1_+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	699b      	ldr	r3, [r3, #24]
 800e666:	683a      	ldr	r2, [r7, #0]
 800e668:	4619      	mov	r1, r3
 800e66a:	f000 f985 	bl	800e978 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	699b      	ldr	r3, [r3, #24]
 800e672:	1d1a      	adds	r2, r3, #4
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	619a      	str	r2, [r3, #24]
      }
 800e678:	e003      	b.n	800e682 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9push_backERKS1_+0x3a>
	  _M_push_back_aux(__x);
 800e67a:	6839      	ldr	r1, [r7, #0]
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f000 f98f 	bl	800e9a0 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE16_M_push_back_auxIJRKS1_EEEvDpOT_>
      }
 800e682:	bf00      	nop
 800e684:	3708      	adds	r7, #8
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}

0800e68a <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800e68a:	b580      	push	{r7, lr}
 800e68c:	b086      	sub	sp, #24
 800e68e:	af00      	add	r7, sp, #0
 800e690:	6078      	str	r0, [r7, #4]
	iterator __tmp = end();
 800e692:	f107 0308 	add.w	r3, r7, #8
 800e696:	6879      	ldr	r1, [r7, #4]
 800e698:	4618      	mov	r0, r3
 800e69a:	f7fe ff0c 	bl	800d4b6 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE3endEv>
	--__tmp;
 800e69e:	f107 0308 	add.w	r3, r7, #8
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f000 f9c0 	bl	800ea28 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EmmEv>
	return *__tmp;
 800e6a8:	f107 0308 	add.w	r3, r7, #8
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f000 f88b 	bl	800e7c8 <_ZNKSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EdeEv>
 800e6b2:	4603      	mov	r3, r0
      }
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	3718      	adds	r7, #24
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}

0800e6bc <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE8pop_backEv>:
      pop_back() _GLIBCXX_NOEXCEPT
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b082      	sub	sp, #8
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_finish._M_cur
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_first)
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	69db      	ldr	r3, [r3, #28]
	if (this->_M_impl._M_finish._M_cur
 800e6cc:	429a      	cmp	r2, r3
 800e6ce:	d00c      	beq.n	800e6ea <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE8pop_backEv+0x2e>
	    --this->_M_impl._M_finish._M_cur;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	699b      	ldr	r3, [r3, #24]
 800e6d4:	1f1a      	subs	r2, r3, #4
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	619a      	str	r2, [r3, #24]
	    _Alloc_traits::destroy(this->_M_impl,
 800e6da:	687a      	ldr	r2, [r7, #4]
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	699b      	ldr	r3, [r3, #24]
 800e6e0:	4619      	mov	r1, r3
 800e6e2:	4610      	mov	r0, r2
 800e6e4:	f000 f87c 	bl	800e7e0 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE7destroyIS1_EEvRS2_PT_>
      }
 800e6e8:	e002      	b.n	800e6f0 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE8pop_backEv+0x34>
	  _M_pop_back_aux();
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f000 f9bb 	bl	800ea66 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE15_M_pop_back_auxEv>
      }
 800e6f0:	bf00      	nop
 800e6f2:	3708      	adds	r7, #8
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}

0800e6f8 <_ZNKSt6bitsetILj8EE9to_stringB5cxx11Ev>:
	  return to_string<_CharT, std::char_traits<_CharT>,
	                   std::allocator<_CharT> >(__zero, __one);
	}

      std::basic_string<char, std::char_traits<char>, std::allocator<char> >
      to_string() const
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b082      	sub	sp, #8
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
 800e700:	6039      	str	r1, [r7, #0]
      {
	return to_string<char, std::char_traits<char>,
	                 std::allocator<char> >();
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	6839      	ldr	r1, [r7, #0]
 800e706:	4618      	mov	r0, r3
 800e708:	f000 f9d6 	bl	800eab8 <_ZNKSt6bitsetILj8EE9to_stringIcSt11char_traitsIcESaIcEEENSt7__cxx1112basic_stringIT_T0_T1_EEv>
      }
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	3708      	adds	r7, #8
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}

0800e714 <_ZNKSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 800e714:	b580      	push	{r7, lr}
 800e716:	b082      	sub	sp, #8
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f103 0218 	add.w	r2, r3, #24
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	3308      	adds	r3, #8
 800e726:	4619      	mov	r1, r3
 800e728:	4610      	mov	r0, r2
 800e72a:	f000 f9d8 	bl	800eade <_ZSteqINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EbRKSt15_Deque_iteratorIT_T0_T1_ESE_>
 800e72e:	4603      	mov	r3, r0
 800e730:	4618      	mov	r0, r3
 800e732:	3708      	adds	r7, #8
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}

0800e738 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 800e738:	b580      	push	{r7, lr}
 800e73a:	b086      	sub	sp, #24
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
	return *begin();
 800e740:	f107 0308 	add.w	r3, r7, #8
 800e744:	6879      	ldr	r1, [r7, #4]
 800e746:	4618      	mov	r0, r3
 800e748:	f7fe fe03 	bl	800d352 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5beginEv>
 800e74c:	f107 0308 	add.w	r3, r7, #8
 800e750:	4618      	mov	r0, r3
 800e752:	f000 f9d8 	bl	800eb06 <_ZNKSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EdeEv>
 800e756:	4603      	mov	r3, r0
      }
 800e758:	4618      	mov	r0, r3
 800e75a:	3718      	adds	r7, #24
 800e75c:	46bd      	mov	sp, r7
 800e75e:	bd80      	pop	{r7, pc}

0800e760 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 800e760:	b580      	push	{r7, lr}
 800e762:	b082      	sub	sp, #8
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	691b      	ldr	r3, [r3, #16]
 800e770:	3b18      	subs	r3, #24
	if (this->_M_impl._M_start._M_cur
 800e772:	429a      	cmp	r2, r3
 800e774:	d00d      	beq.n	800e792 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9pop_frontEv+0x32>
	    _Alloc_traits::destroy(this->_M_impl,
 800e776:	687a      	ldr	r2, [r7, #4]
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	689b      	ldr	r3, [r3, #8]
 800e77c:	4619      	mov	r1, r3
 800e77e:	4610      	mov	r0, r2
 800e780:	f000 f9cd 	bl	800eb1e <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>
	    ++this->_M_impl._M_start._M_cur;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	689b      	ldr	r3, [r3, #8]
 800e788:	f103 0218 	add.w	r2, r3, #24
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	609a      	str	r2, [r3, #8]
      }
 800e790:	e002      	b.n	800e798 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9pop_frontEv+0x38>
	  _M_pop_front_aux();
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f000 f9d0 	bl	800eb38 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_pop_front_auxEv>
      }
 800e798:	bf00      	nop
 800e79a:	3708      	adds	r7, #8
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd80      	pop	{r7, pc}

0800e7a0 <_ZSteqISt6bitsetILj8EERS1_PS1_EbRKSt15_Deque_iteratorIT_T0_T1_ESA_>:
    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 800e7a0:	b480      	push	{r7}
 800e7a2:	b083      	sub	sp, #12
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
 800e7a8:	6039      	str	r1, [r7, #0]
    { return __x._M_cur == __y._M_cur; }
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681a      	ldr	r2, [r3, #0]
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	bf0c      	ite	eq
 800e7b6:	2301      	moveq	r3, #1
 800e7b8:	2300      	movne	r3, #0
 800e7ba:	b2db      	uxtb	r3, r3
 800e7bc:	4618      	mov	r0, r3
 800e7be:	370c      	adds	r7, #12
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c6:	4770      	bx	lr

0800e7c8 <_ZNKSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800e7c8:	b480      	push	{r7}
 800e7ca:	b083      	sub	sp, #12
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	370c      	adds	r7, #12
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7de:	4770      	bx	lr

0800e7e0 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE7destroyIS1_EEvRS2_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b082      	sub	sp, #8
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	6039      	str	r1, [r7, #0]
	noexcept(noexcept(__a.destroy(__p)))
	{ __a.destroy(__p); }
 800e7ea:	6839      	ldr	r1, [r7, #0]
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f000 f9cb 	bl	800eb88 <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE7destroyIS2_EEvPT_>
 800e7f2:	bf00      	nop
 800e7f4:	3708      	adds	r7, #8
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}

0800e7fa <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE16_M_pop_front_auxEv>:
    void deque<_Tp, _Alloc>::
 800e7fa:	b580      	push	{r7, lr}
 800e7fc:	b082      	sub	sp, #8
 800e7fe:	af00      	add	r7, sp, #0
 800e800:	6078      	str	r0, [r7, #4]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	4618      	mov	r0, r3
 800e806:	f7fe fe65 	bl	800d4d4 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE19_M_get_Tp_allocatorEv>
 800e80a:	4602      	mov	r2, r0
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	689b      	ldr	r3, [r3, #8]
 800e810:	4619      	mov	r1, r3
 800e812:	4610      	mov	r0, r2
 800e814:	f7ff ffe4 	bl	800e7e0 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE7destroyIS1_EEvRS2_PT_>
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 800e818:	687a      	ldr	r2, [r7, #4]
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	68db      	ldr	r3, [r3, #12]
 800e81e:	4619      	mov	r1, r3
 800e820:	4610      	mov	r0, r2
 800e822:	f7ff f9d6 	bl	800dbd2 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE18_M_deallocate_nodeEPS1_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f103 0208 	add.w	r2, r3, #8
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	695b      	ldr	r3, [r3, #20]
 800e830:	3304      	adds	r3, #4
 800e832:	4619      	mov	r1, r3
 800e834:	4610      	mov	r0, r2
 800e836:	f7ff f9b3 	bl	800dba0 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	68da      	ldr	r2, [r3, #12]
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	609a      	str	r2, [r3, #8]
    }
 800e842:	bf00      	nop
 800e844:	3708      	adds	r7, #8
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}

0800e84a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800e84a:	b580      	push	{r7, lr}
 800e84c:	b084      	sub	sp, #16
 800e84e:	af00      	add	r7, sp, #0
 800e850:	60f8      	str	r0, [r7, #12]
 800e852:	60b9      	str	r1, [r7, #8]
 800e854:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800e856:	6878      	ldr	r0, [r7, #4]
 800e858:	f000 f9a1 	bl	800eb9e <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800e85c:	4603      	mov	r3, r0
 800e85e:	461a      	mov	r2, r3
 800e860:	68b9      	ldr	r1, [r7, #8]
 800e862:	68f8      	ldr	r0, [r7, #12]
 800e864:	f000 f9a6 	bl	800ebb4 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_>
 800e868:	bf00      	nop
 800e86a:	3710      	adds	r7, #16
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}

0800e870 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 800e870:	b5b0      	push	{r4, r5, r7, lr}
 800e872:	b082      	sub	sp, #8
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
 800e878:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	f000 f9b2 	bl	800ebe4 <_ZNKSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>
 800e880:	4604      	mov	r4, r0
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f000 f9c0 	bl	800ec08 <_ZNKSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>
 800e888:	4603      	mov	r3, r0
 800e88a:	429c      	cmp	r4, r3
 800e88c:	bf0c      	ite	eq
 800e88e:	2301      	moveq	r3, #1
 800e890:	2300      	movne	r3, #0
 800e892:	b2db      	uxtb	r3, r3
 800e894:	2b00      	cmp	r3, #0
 800e896:	d002      	beq.n	800e89e <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_+0x2e>
	  __throw_length_error(
 800e898:	4816      	ldr	r0, [pc, #88]	; (800e8f4 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_+0x84>)
 800e89a:	f001 f91e 	bl	800fada <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 800e89e:	2101      	movs	r1, #1
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f000 f9c2 	bl	800ec2a <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 800e8a6:	687a      	ldr	r2, [r7, #4]
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8ac:	1d1c      	adds	r4, r3, #4
 800e8ae:	4610      	mov	r0, r2
 800e8b0:	f7ff f9e8 	bl	800dc84 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_allocate_nodeEv>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 800e8b8:	687c      	ldr	r4, [r7, #4]
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	699d      	ldr	r5, [r3, #24]
 800e8be:	6838      	ldr	r0, [r7, #0]
 800e8c0:	f000 f96d 	bl	800eb9e <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	461a      	mov	r2, r3
 800e8c8:	4629      	mov	r1, r5
 800e8ca:	4620      	mov	r0, r4
 800e8cc:	f7ff ffbd 	bl	800e84a <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f103 0218 	add.w	r2, r3, #24
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8da:	3304      	adds	r3, #4
 800e8dc:	4619      	mov	r1, r3
 800e8de:	4610      	mov	r0, r2
 800e8e0:	f7ff f888 	bl	800d9f4 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	69da      	ldr	r2, [r3, #28]
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	619a      	str	r2, [r3, #24]
      }
 800e8ec:	bf00      	nop
 800e8ee:	3708      	adds	r7, #8
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bdb0      	pop	{r4, r5, r7, pc}
 800e8f4:	080153c0 	.word	0x080153c0

0800e8f8 <_ZNKSt6bitsetILj8EE8_M_checkEjPKc>:
      void _M_check(size_t __position, const char *__s) const
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b084      	sub	sp, #16
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	60f8      	str	r0, [r7, #12]
 800e900:	60b9      	str	r1, [r7, #8]
 800e902:	607a      	str	r2, [r7, #4]
	if (__position >= _Nb)
 800e904:	68bb      	ldr	r3, [r7, #8]
 800e906:	2b07      	cmp	r3, #7
 800e908:	d905      	bls.n	800e916 <_ZNKSt6bitsetILj8EE8_M_checkEjPKc+0x1e>
	  __throw_out_of_range_fmt(__N("%s: __position (which is %zu) "
 800e90a:	2308      	movs	r3, #8
 800e90c:	68ba      	ldr	r2, [r7, #8]
 800e90e:	6879      	ldr	r1, [r7, #4]
 800e910:	4803      	ldr	r0, [pc, #12]	; (800e920 <_ZNKSt6bitsetILj8EE8_M_checkEjPKc+0x28>)
 800e912:	f001 f8e5 	bl	800fae0 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 800e916:	bf00      	nop
 800e918:	3710      	adds	r7, #16
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}
 800e91e:	bf00      	nop
 800e920:	080153f0 	.word	0x080153f0

0800e924 <_ZNSt6bitsetILj8EE14_Unchecked_setEji>:
      _Unchecked_set(size_t __pos, int __val) _GLIBCXX_NOEXCEPT
 800e924:	b590      	push	{r4, r7, lr}
 800e926:	b085      	sub	sp, #20
 800e928:	af00      	add	r7, sp, #0
 800e92a:	60f8      	str	r0, [r7, #12]
 800e92c:	60b9      	str	r1, [r7, #8]
 800e92e:	607a      	str	r2, [r7, #4]
	if (__val)
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d00d      	beq.n	800e952 <_ZNSt6bitsetILj8EE14_Unchecked_setEji+0x2e>
	  this->_M_getword(__pos) |= _Base::_S_maskbit(__pos);
 800e936:	68b8      	ldr	r0, [r7, #8]
 800e938:	f7ff fc2e 	bl	800e198 <_ZNSt12_Base_bitsetILj1EE10_S_maskbitEj>
 800e93c:	4604      	mov	r4, r0
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	68b9      	ldr	r1, [r7, #8]
 800e942:	4618      	mov	r0, r3
 800e944:	f7ff fc37 	bl	800e1b6 <_ZNSt12_Base_bitsetILj1EE10_M_getwordEj>
 800e948:	4603      	mov	r3, r0
 800e94a:	681a      	ldr	r2, [r3, #0]
 800e94c:	4322      	orrs	r2, r4
 800e94e:	601a      	str	r2, [r3, #0]
 800e950:	e00d      	b.n	800e96e <_ZNSt6bitsetILj8EE14_Unchecked_setEji+0x4a>
	  this->_M_getword(__pos) &= ~_Base::_S_maskbit(__pos);
 800e952:	68b8      	ldr	r0, [r7, #8]
 800e954:	f7ff fc20 	bl	800e198 <_ZNSt12_Base_bitsetILj1EE10_S_maskbitEj>
 800e958:	4603      	mov	r3, r0
 800e95a:	43dc      	mvns	r4, r3
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	68b9      	ldr	r1, [r7, #8]
 800e960:	4618      	mov	r0, r3
 800e962:	f7ff fc28 	bl	800e1b6 <_ZNSt12_Base_bitsetILj1EE10_M_getwordEj>
 800e966:	4603      	mov	r3, r0
 800e968:	681a      	ldr	r2, [r3, #0]
 800e96a:	4022      	ands	r2, r4
 800e96c:	601a      	str	r2, [r3, #0]
	return *this;
 800e96e:	68fb      	ldr	r3, [r7, #12]
      }
 800e970:	4618      	mov	r0, r3
 800e972:	3714      	adds	r7, #20
 800e974:	46bd      	mov	sp, r7
 800e976:	bd90      	pop	{r4, r7, pc}

0800e978 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800e978:	b580      	push	{r7, lr}
 800e97a:	b084      	sub	sp, #16
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	60f8      	str	r0, [r7, #12]
 800e980:	60b9      	str	r1, [r7, #8]
 800e982:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800e984:	6878      	ldr	r0, [r7, #4]
 800e986:	f000 f96b 	bl	800ec60 <_ZSt7forwardIRKSt6bitsetILj8EEEOT_RNSt16remove_referenceIS4_E4typeE>
 800e98a:	4603      	mov	r3, r0
 800e98c:	461a      	mov	r2, r3
 800e98e:	68b9      	ldr	r1, [r7, #8]
 800e990:	68f8      	ldr	r0, [r7, #12]
 800e992:	f000 f970 	bl	800ec76 <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
 800e996:	bf00      	nop
 800e998:	3710      	adds	r7, #16
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}
	...

0800e9a0 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE16_M_push_back_auxIJRKS1_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 800e9a0:	b5b0      	push	{r4, r5, r7, lr}
 800e9a2:	b082      	sub	sp, #8
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
 800e9a8:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f000 f979 	bl	800eca2 <_ZNKSt5dequeISt6bitsetILj8EESaIS1_EE4sizeEv>
 800e9b0:	4604      	mov	r4, r0
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	f000 f987 	bl	800ecc6 <_ZNKSt5dequeISt6bitsetILj8EESaIS1_EE8max_sizeEv>
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	429c      	cmp	r4, r3
 800e9bc:	bf0c      	ite	eq
 800e9be:	2301      	moveq	r3, #1
 800e9c0:	2300      	movne	r3, #0
 800e9c2:	b2db      	uxtb	r3, r3
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d002      	beq.n	800e9ce <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE16_M_push_back_auxIJRKS1_EEEvDpOT_+0x2e>
	  __throw_length_error(
 800e9c8:	4816      	ldr	r0, [pc, #88]	; (800ea24 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE16_M_push_back_auxIJRKS1_EEEvDpOT_+0x84>)
 800e9ca:	f001 f886 	bl	800fada <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 800e9ce:	2101      	movs	r1, #1
 800e9d0:	6878      	ldr	r0, [r7, #4]
 800e9d2:	f000 f989 	bl	800ece8 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 800e9d6:	687a      	ldr	r2, [r7, #4]
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9dc:	1d1c      	adds	r4, r3, #4
 800e9de:	4610      	mov	r0, r2
 800e9e0:	f7ff f9d0 	bl	800dd84 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE16_M_allocate_nodeEv>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 800e9e8:	687c      	ldr	r4, [r7, #4]
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	699d      	ldr	r5, [r3, #24]
 800e9ee:	6838      	ldr	r0, [r7, #0]
 800e9f0:	f000 f936 	bl	800ec60 <_ZSt7forwardIRKSt6bitsetILj8EEEOT_RNSt16remove_referenceIS4_E4typeE>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	461a      	mov	r2, r3
 800e9f8:	4629      	mov	r1, r5
 800e9fa:	4620      	mov	r0, r4
 800e9fc:	f7ff ffbc 	bl	800e978 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f103 0218 	add.w	r2, r3, #24
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea0a:	3304      	adds	r3, #4
 800ea0c:	4619      	mov	r1, r3
 800ea0e:	4610      	mov	r0, r2
 800ea10:	f7ff f8c6 	bl	800dba0 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E11_M_set_nodeEPS3_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	69da      	ldr	r2, [r3, #28]
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	619a      	str	r2, [r3, #24]
      }
 800ea1c:	bf00      	nop
 800ea1e:	3708      	adds	r7, #8
 800ea20:	46bd      	mov	sp, r7
 800ea22:	bdb0      	pop	{r4, r5, r7, pc}
 800ea24:	080153c0 	.word	0x080153c0

0800ea28 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b082      	sub	sp, #8
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
	if (_M_cur == _M_first)
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681a      	ldr	r2, [r3, #0]
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	685b      	ldr	r3, [r3, #4]
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	d10a      	bne.n	800ea52 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_EmmEv+0x2a>
	    _M_set_node(_M_node - 1);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	68db      	ldr	r3, [r3, #12]
 800ea40:	3b04      	subs	r3, #4
 800ea42:	4619      	mov	r1, r3
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f7ff f8ab 	bl	800dba0 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E11_M_set_nodeEPS3_>
	    _M_cur = _M_last;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	689a      	ldr	r2, [r3, #8]
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	601a      	str	r2, [r3, #0]
	--_M_cur;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	1f1a      	subs	r2, r3, #4
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	601a      	str	r2, [r3, #0]
	return *this;
 800ea5c:	687b      	ldr	r3, [r7, #4]
      }
 800ea5e:	4618      	mov	r0, r3
 800ea60:	3708      	adds	r7, #8
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}

0800ea66 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE15_M_pop_back_auxEv>:
    void deque<_Tp, _Alloc>::
 800ea66:	b580      	push	{r7, lr}
 800ea68:	b082      	sub	sp, #8
 800ea6a:	af00      	add	r7, sp, #0
 800ea6c:	6078      	str	r0, [r7, #4]
      _M_deallocate_node(this->_M_impl._M_finish._M_first);
 800ea6e:	687a      	ldr	r2, [r7, #4]
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	69db      	ldr	r3, [r3, #28]
 800ea74:	4619      	mov	r1, r3
 800ea76:	4610      	mov	r0, r2
 800ea78:	f7ff f8ab 	bl	800dbd2 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE18_M_deallocate_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f103 0218 	add.w	r2, r3, #24
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea86:	3b04      	subs	r3, #4
 800ea88:	4619      	mov	r1, r3
 800ea8a:	4610      	mov	r0, r2
 800ea8c:	f7ff f888 	bl	800dba0 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	6a1b      	ldr	r3, [r3, #32]
 800ea94:	1f1a      	subs	r2, r3, #4
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	619a      	str	r2, [r3, #24]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f7fe fd19 	bl	800d4d4 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE19_M_get_Tp_allocatorEv>
 800eaa2:	4602      	mov	r2, r0
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	699b      	ldr	r3, [r3, #24]
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	4610      	mov	r0, r2
 800eaac:	f7ff fe98 	bl	800e7e0 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE7destroyIS1_EEvRS2_PT_>
    }
 800eab0:	bf00      	nop
 800eab2:	3708      	adds	r7, #8
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}

0800eab8 <_ZNKSt6bitsetILj8EE9to_stringIcSt11char_traitsIcESaIcEEENSt7__cxx1112basic_stringIT_T0_T1_EEv>:
	to_string() const
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b082      	sub	sp, #8
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
 800eac0:	6039      	str	r1, [r7, #0]
	  std::basic_string<_CharT, _Traits, _Alloc> __result;
 800eac2:	6878      	ldr	r0, [r7, #4]
 800eac4:	f001 f962 	bl	800fd8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  _M_copy_to_string(__result, _CharT('0'), _CharT('1'));
 800eac8:	2331      	movs	r3, #49	; 0x31
 800eaca:	2230      	movs	r2, #48	; 0x30
 800eacc:	6879      	ldr	r1, [r7, #4]
 800eace:	6838      	ldr	r0, [r7, #0]
 800ead0:	f000 f925 	bl	800ed1e <_ZNKSt6bitsetILj8EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_>
	  return __result;
 800ead4:	bf00      	nop
	}
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	3708      	adds	r7, #8
 800eada:	46bd      	mov	sp, r7
 800eadc:	bd80      	pop	{r7, pc}

0800eade <_ZSteqINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EbRKSt15_Deque_iteratorIT_T0_T1_ESE_>:
    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 800eade:	b480      	push	{r7}
 800eae0:	b083      	sub	sp, #12
 800eae2:	af00      	add	r7, sp, #0
 800eae4:	6078      	str	r0, [r7, #4]
 800eae6:	6039      	str	r1, [r7, #0]
    { return __x._M_cur == __y._M_cur; }
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681a      	ldr	r2, [r3, #0]
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	429a      	cmp	r2, r3
 800eaf2:	bf0c      	ite	eq
 800eaf4:	2301      	moveq	r3, #1
 800eaf6:	2300      	movne	r3, #0
 800eaf8:	b2db      	uxtb	r3, r3
 800eafa:	4618      	mov	r0, r3
 800eafc:	370c      	adds	r7, #12
 800eafe:	46bd      	mov	sp, r7
 800eb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb04:	4770      	bx	lr

0800eb06 <_ZNKSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800eb06:	b480      	push	{r7}
 800eb08:	b083      	sub	sp, #12
 800eb0a:	af00      	add	r7, sp, #0
 800eb0c:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	4618      	mov	r0, r3
 800eb14:	370c      	adds	r7, #12
 800eb16:	46bd      	mov	sp, r7
 800eb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1c:	4770      	bx	lr

0800eb1e <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800eb1e:	b580      	push	{r7, lr}
 800eb20:	b082      	sub	sp, #8
 800eb22:	af00      	add	r7, sp, #0
 800eb24:	6078      	str	r0, [r7, #4]
 800eb26:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800eb28:	6839      	ldr	r1, [r7, #0]
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f000 f92b 	bl	800ed86 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS6_EEvPT_>
 800eb30:	bf00      	nop
 800eb32:	3708      	adds	r7, #8
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}

0800eb38 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_pop_front_auxEv>:
    void deque<_Tp, _Alloc>::
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b082      	sub	sp, #8
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7fe fc23 	bl	800d38e <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800eb48:	4602      	mov	r2, r0
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	689b      	ldr	r3, [r3, #8]
 800eb4e:	4619      	mov	r1, r3
 800eb50:	4610      	mov	r0, r2
 800eb52:	f7ff ffe4 	bl	800eb1e <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS5_EEvRS6_PT_>
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 800eb56:	687a      	ldr	r2, [r7, #4]
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	68db      	ldr	r3, [r3, #12]
 800eb5c:	4619      	mov	r1, r3
 800eb5e:	4610      	mov	r0, r2
 800eb60:	f7fe ff64 	bl	800da2c <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE18_M_deallocate_nodeEPS5_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	f103 0208 	add.w	r2, r3, #8
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	695b      	ldr	r3, [r3, #20]
 800eb6e:	3304      	adds	r3, #4
 800eb70:	4619      	mov	r1, r3
 800eb72:	4610      	mov	r0, r2
 800eb74:	f7fe ff3e 	bl	800d9f4 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	68da      	ldr	r2, [r3, #12]
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	609a      	str	r2, [r3, #8]
    }
 800eb80:	bf00      	nop
 800eb82:	3708      	adds	r7, #8
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}

0800eb88 <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE7destroyIS2_EEvPT_>:
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 800eb88:	b480      	push	{r7}
 800eb8a:	b083      	sub	sp, #12
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
 800eb90:	6039      	str	r1, [r7, #0]
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 800eb92:	bf00      	nop
 800eb94:	370c      	adds	r7, #12
 800eb96:	46bd      	mov	sp, r7
 800eb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9c:	4770      	bx	lr

0800eb9e <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800eb9e:	b480      	push	{r7}
 800eba0:	b083      	sub	sp, #12
 800eba2:	af00      	add	r7, sp, #0
 800eba4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	4618      	mov	r0, r3
 800ebaa:	370c      	adds	r7, #12
 800ebac:	46bd      	mov	sp, r7
 800ebae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb2:	4770      	bx	lr

0800ebb4 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800ebb4:	b590      	push	{r4, r7, lr}
 800ebb6:	b085      	sub	sp, #20
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	60f8      	str	r0, [r7, #12]
 800ebbc:	60b9      	str	r1, [r7, #8]
 800ebbe:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f7ff ffec 	bl	800eb9e <_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800ebc6:	4604      	mov	r4, r0
 800ebc8:	68bb      	ldr	r3, [r7, #8]
 800ebca:	4619      	mov	r1, r3
 800ebcc:	2018      	movs	r0, #24
 800ebce:	f7ff faca 	bl	800e166 <_ZnwjPv>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	4621      	mov	r1, r4
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f001 f980 	bl	800fedc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800ebdc:	bf00      	nop
 800ebde:	3714      	adds	r7, #20
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd90      	pop	{r4, r7, pc}

0800ebe4 <_ZNKSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b082      	sub	sp, #8
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f103 0218 	add.w	r2, r3, #24
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	3308      	adds	r3, #8
 800ebf6:	4619      	mov	r1, r3
 800ebf8:	4610      	mov	r0, r2
 800ebfa:	f000 f8d1 	bl	800eda0 <_ZStmiINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKSC_SF_>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	4618      	mov	r0, r3
 800ec02:	3708      	adds	r7, #8
 800ec04:	46bd      	mov	sp, r7
 800ec06:	bd80      	pop	{r7, pc}

0800ec08 <_ZNKSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b082      	sub	sp, #8
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7ff f85f 	bl	800dcd6 <_ZNKSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_get_Tp_allocatorEv>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f000 f8ec 	bl	800edf8 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_>
 800ec20:	4603      	mov	r3, r0
 800ec22:	4618      	mov	r0, r3
 800ec24:	3708      	adds	r7, #8
 800ec26:	46bd      	mov	sp, r7
 800ec28:	bd80      	pop	{r7, pc}

0800ec2a <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 800ec2a:	b580      	push	{r7, lr}
 800ec2c:	b082      	sub	sp, #8
 800ec2e:	af00      	add	r7, sp, #0
 800ec30:	6078      	str	r0, [r7, #4]
 800ec32:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	1c5a      	adds	r2, r3, #1
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 800ec3c:	6879      	ldr	r1, [r7, #4]
 800ec3e:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800ec40:	6879      	ldr	r1, [r7, #4]
 800ec42:	6809      	ldr	r1, [r1, #0]
 800ec44:	1a41      	subs	r1, r0, r1
 800ec46:	1089      	asrs	r1, r1, #2
 800ec48:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800ec4a:	429a      	cmp	r2, r3
 800ec4c:	d904      	bls.n	800ec58 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 800ec4e:	2200      	movs	r2, #0
 800ec50:	6839      	ldr	r1, [r7, #0]
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f000 f8ea 	bl	800ee2c <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb>
      }
 800ec58:	bf00      	nop
 800ec5a:	3708      	adds	r7, #8
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}

0800ec60 <_ZSt7forwardIRKSt6bitsetILj8EEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ec60:	b480      	push	{r7}
 800ec62:	b083      	sub	sp, #12
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	370c      	adds	r7, #12
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec74:	4770      	bx	lr

0800ec76 <_ZN9__gnu_cxx13new_allocatorISt6bitsetILj8EEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800ec76:	b590      	push	{r4, r7, lr}
 800ec78:	b085      	sub	sp, #20
 800ec7a:	af00      	add	r7, sp, #0
 800ec7c:	60f8      	str	r0, [r7, #12]
 800ec7e:	60b9      	str	r1, [r7, #8]
 800ec80:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800ec82:	6878      	ldr	r0, [r7, #4]
 800ec84:	f7ff ffec 	bl	800ec60 <_ZSt7forwardIRKSt6bitsetILj8EEEOT_RNSt16remove_referenceIS4_E4typeE>
 800ec88:	4604      	mov	r4, r0
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	4619      	mov	r1, r3
 800ec8e:	2004      	movs	r0, #4
 800ec90:	f7ff fa69 	bl	800e166 <_ZnwjPv>
 800ec94:	4602      	mov	r2, r0
 800ec96:	6823      	ldr	r3, [r4, #0]
 800ec98:	6013      	str	r3, [r2, #0]
 800ec9a:	bf00      	nop
 800ec9c:	3714      	adds	r7, #20
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd90      	pop	{r4, r7, pc}

0800eca2 <_ZNKSt5dequeISt6bitsetILj8EESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800eca2:	b580      	push	{r7, lr}
 800eca4:	b082      	sub	sp, #8
 800eca6:	af00      	add	r7, sp, #0
 800eca8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	f103 0218 	add.w	r2, r3, #24
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	3308      	adds	r3, #8
 800ecb4:	4619      	mov	r1, r3
 800ecb6:	4610      	mov	r0, r2
 800ecb8:	f000 f952 	bl	800ef60 <_ZStmiISt6bitsetILj8EERS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	3708      	adds	r7, #8
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}

0800ecc6 <_ZNKSt5dequeISt6bitsetILj8EESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800ecc6:	b580      	push	{r7, lr}
 800ecc8:	b082      	sub	sp, #8
 800ecca:	af00      	add	r7, sp, #0
 800eccc:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	f7ff f880 	bl	800ddd6 <_ZNKSt11_Deque_baseISt6bitsetILj8EESaIS1_EE19_M_get_Tp_allocatorEv>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f000 f965 	bl	800efa8 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE11_S_max_sizeERKS2_>
 800ecde:	4603      	mov	r3, r0
 800ece0:	4618      	mov	r0, r3
 800ece2:	3708      	adds	r7, #8
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}

0800ece8 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b082      	sub	sp, #8
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
 800ecf0:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	1c5a      	adds	r2, r3, #1
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 800ecfa:	6879      	ldr	r1, [r7, #4]
 800ecfc:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800ecfe:	6879      	ldr	r1, [r7, #4]
 800ed00:	6809      	ldr	r1, [r1, #0]
 800ed02:	1a41      	subs	r1, r0, r1
 800ed04:	1089      	asrs	r1, r1, #2
 800ed06:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800ed08:	429a      	cmp	r2, r3
 800ed0a:	d904      	bls.n	800ed16 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	6839      	ldr	r1, [r7, #0]
 800ed10:	6878      	ldr	r0, [r7, #4]
 800ed12:	f000 f963 	bl	800efdc <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb>
      }
 800ed16:	bf00      	nop
 800ed18:	3708      	adds	r7, #8
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	bd80      	pop	{r7, pc}

0800ed1e <_ZNKSt6bitsetILj8EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_>:
      }

  template<size_t _Nb>
    template<class _CharT, class _Traits, class _Alloc>
      void
      bitset<_Nb>::
 800ed1e:	b580      	push	{r7, lr}
 800ed20:	b086      	sub	sp, #24
 800ed22:	af00      	add	r7, sp, #0
 800ed24:	60f8      	str	r0, [r7, #12]
 800ed26:	60b9      	str	r1, [r7, #8]
 800ed28:	4611      	mov	r1, r2
 800ed2a:	461a      	mov	r2, r3
 800ed2c:	460b      	mov	r3, r1
 800ed2e:	71fb      	strb	r3, [r7, #7]
 800ed30:	4613      	mov	r3, r2
 800ed32:	71bb      	strb	r3, [r7, #6]
      _M_copy_to_string(std::basic_string<_CharT, _Traits, _Alloc>& __s,
			_CharT __zero, _CharT __one) const
      {
	__s.assign(_Nb, __zero);
 800ed34:	79fb      	ldrb	r3, [r7, #7]
 800ed36:	461a      	mov	r2, r3
 800ed38:	2108      	movs	r1, #8
 800ed3a:	68b8      	ldr	r0, [r7, #8]
 800ed3c:	f001 f89e 	bl	800fe7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEjc>
	for (size_t __i = _Nb; __i > 0; --__i)
 800ed40:	2308      	movs	r3, #8
 800ed42:	617b      	str	r3, [r7, #20]
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d019      	beq.n	800ed7e <_ZNKSt6bitsetILj8EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_+0x60>
	  if (_Unchecked_test(__i - 1))
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	3b01      	subs	r3, #1
 800ed4e:	4619      	mov	r1, r3
 800ed50:	68f8      	ldr	r0, [r7, #12]
 800ed52:	f000 f9dd 	bl	800f110 <_ZNKSt6bitsetILj8EE15_Unchecked_testEj>
 800ed56:	4603      	mov	r3, r0
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d00c      	beq.n	800ed76 <_ZNKSt6bitsetILj8EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_+0x58>
	    _Traits::assign(__s[_Nb - __i], __one);
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	f1c3 0308 	rsb	r3, r3, #8
 800ed62:	4619      	mov	r1, r3
 800ed64:	68b8      	ldr	r0, [r7, #8]
 800ed66:	f001 f820 	bl	800fdaa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800ed6a:	4602      	mov	r2, r0
 800ed6c:	1dbb      	adds	r3, r7, #6
 800ed6e:	4619      	mov	r1, r3
 800ed70:	4610      	mov	r0, r2
 800ed72:	f7ff f9e9 	bl	800e148 <_ZNSt11char_traitsIcE6assignERcRKc>
	for (size_t __i = _Nb; __i > 0; --__i)
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	3b01      	subs	r3, #1
 800ed7a:	617b      	str	r3, [r7, #20]
 800ed7c:	e7e2      	b.n	800ed44 <_ZNKSt6bitsetILj8EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_+0x26>
      }
 800ed7e:	bf00      	nop
 800ed80:	3718      	adds	r7, #24
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}

0800ed86 <_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS6_EEvPT_>:
	destroy(_Up* __p)
 800ed86:	b580      	push	{r7, lr}
 800ed88:	b082      	sub	sp, #8
 800ed8a:	af00      	add	r7, sp, #0
 800ed8c:	6078      	str	r0, [r7, #4]
 800ed8e:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 800ed90:	6838      	ldr	r0, [r7, #0]
 800ed92:	f001 f802 	bl	800fd9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800ed96:	bf00      	nop
 800ed98:	3708      	adds	r7, #8
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}
	...

0800eda0 <_ZStmiINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKSC_SF_>:
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b082      	sub	sp, #8
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
 800eda8:	6039      	str	r1, [r7, #0]
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
 800edaa:	f7fe ff7d 	bl	800dca8 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E14_S_buffer_sizeEv>
 800edae:	4603      	mov	r3, r0
 800edb0:	4619      	mov	r1, r3
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	68da      	ldr	r2, [r3, #12]
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	68db      	ldr	r3, [r3, #12]
 800edba:	1ad3      	subs	r3, r2, r3
 800edbc:	109b      	asrs	r3, r3, #2
 800edbe:	3b01      	subs	r3, #1
 800edc0:	fb03 f301 	mul.w	r3, r3, r1
 800edc4:	687a      	ldr	r2, [r7, #4]
 800edc6:	6811      	ldr	r1, [r2, #0]
 800edc8:	687a      	ldr	r2, [r7, #4]
 800edca:	6852      	ldr	r2, [r2, #4]
 800edcc:	1a8a      	subs	r2, r1, r2
 800edce:	10d2      	asrs	r2, r2, #3
 800edd0:	4908      	ldr	r1, [pc, #32]	; (800edf4 <_ZStmiINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKSC_SF_+0x54>)
 800edd2:	fb01 f202 	mul.w	r2, r1, r2
 800edd6:	4413      	add	r3, r2
	+ (__y._M_last - __y._M_cur);
 800edd8:	683a      	ldr	r2, [r7, #0]
 800edda:	6891      	ldr	r1, [r2, #8]
 800eddc:	683a      	ldr	r2, [r7, #0]
 800edde:	6812      	ldr	r2, [r2, #0]
 800ede0:	1a8a      	subs	r2, r1, r2
 800ede2:	10d2      	asrs	r2, r2, #3
 800ede4:	4903      	ldr	r1, [pc, #12]	; (800edf4 <_ZStmiINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKSC_SF_+0x54>)
 800ede6:	fb01 f202 	mul.w	r2, r1, r2
 800edea:	4413      	add	r3, r2
    }
 800edec:	4618      	mov	r0, r3
 800edee:	3708      	adds	r7, #8
 800edf0:	46bd      	mov	sp, r7
 800edf2:	bd80      	pop	{r7, pc}
 800edf4:	aaaaaaab 	.word	0xaaaaaaab

0800edf8 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_max_sizeERKS6_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b084      	sub	sp, #16
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 800ee00:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ee04:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800ee06:	6878      	ldr	r0, [r7, #4]
 800ee08:	f000 f99b 	bl	800f142 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800ee10:	f107 0208 	add.w	r2, r7, #8
 800ee14:	f107 030c 	add.w	r3, r7, #12
 800ee18:	4611      	mov	r1, r2
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f000 f99d 	bl	800f15a <_ZSt3minIjERKT_S2_S2_>
 800ee20:	4603      	mov	r3, r0
 800ee22:	681b      	ldr	r3, [r3, #0]
      }
 800ee24:	4618      	mov	r0, r3
 800ee26:	3710      	adds	r7, #16
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}

0800ee2c <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb>:
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 800ee2c:	b590      	push	{r4, r7, lr}
 800ee2e:	b08b      	sub	sp, #44	; 0x2c
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	60f8      	str	r0, [r7, #12]
 800ee34:	60b9      	str	r1, [r7, #8]
 800ee36:	4613      	mov	r3, r2
 800ee38:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	695b      	ldr	r3, [r3, #20]
 800ee42:	1ad3      	subs	r3, r2, r3
 800ee44:	109b      	asrs	r3, r3, #2
 800ee46:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 800ee48:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 800ee4a:	68bb      	ldr	r3, [r7, #8]
 800ee4c:	6a3a      	ldr	r2, [r7, #32]
 800ee4e:	4413      	add	r3, r2
 800ee50:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	685a      	ldr	r2, [r3, #4]
 800ee56:	69fb      	ldr	r3, [r7, #28]
 800ee58:	005b      	lsls	r3, r3, #1
 800ee5a:	429a      	cmp	r2, r3
 800ee5c:	d92d      	bls.n	800eeba <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	681a      	ldr	r2, [r3, #0]
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 800ee66:	69fb      	ldr	r3, [r7, #28]
 800ee68:	1acb      	subs	r3, r1, r3
 800ee6a:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800ee6c:	0099      	lsls	r1, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 800ee6e:	79fb      	ldrb	r3, [r7, #7]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d002      	beq.n	800ee7a <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0x4e>
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	009b      	lsls	r3, r3, #2
 800ee78:	e000      	b.n	800ee7c <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0x50>
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800ee7e:	4413      	add	r3, r2
 800ee80:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	695b      	ldr	r3, [r3, #20]
 800ee86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee88:	429a      	cmp	r2, r3
 800ee8a:	d209      	bcs.n	800eea0 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 800ee94:	3304      	adds	r3, #4
 800ee96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee98:	4619      	mov	r1, r3
 800ee9a:	f000 f972 	bl	800f182 <_ZSt4copyIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET0_T_S9_S8_>
 800ee9e:	e048      	b.n	800ef32 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800eea8:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 800eeaa:	6a3b      	ldr	r3, [r7, #32]
 800eeac:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800eeae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eeb0:	4413      	add	r3, r2
 800eeb2:	461a      	mov	r2, r3
 800eeb4:	f000 f97d 	bl	800f1b2 <_ZSt13copy_backwardIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET0_T_S9_S8_>
 800eeb8:	e03b      	b.n	800ef32 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	685c      	ldr	r4, [r3, #4]
	                             + std::max(this->_M_impl._M_map_size,
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	3304      	adds	r3, #4
 800eec2:	f107 0208 	add.w	r2, r7, #8
 800eec6:	4611      	mov	r1, r2
 800eec8:	4618      	mov	r0, r3
 800eeca:	f7fe fd48 	bl	800d95e <_ZSt3maxIjERKT_S2_S2_>
 800eece:	4603      	mov	r3, r0
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 800eed4:	3302      	adds	r3, #2
 800eed6:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	69b9      	ldr	r1, [r7, #24]
 800eedc:	4618      	mov	r0, r3
 800eede:	f7fe fd52 	bl	800d986 <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_allocate_mapEj>
 800eee2:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800eee4:	69ba      	ldr	r2, [r7, #24]
 800eee6:	69fb      	ldr	r3, [r7, #28]
 800eee8:	1ad3      	subs	r3, r2, r3
 800eeea:	085b      	lsrs	r3, r3, #1
 800eeec:	009a      	lsls	r2, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 800eeee:	79fb      	ldrb	r3, [r7, #7]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d002      	beq.n	800eefa <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0xce>
 800eef4:	68bb      	ldr	r3, [r7, #8]
 800eef6:	009b      	lsls	r3, r3, #2
 800eef8:	e000      	b.n	800eefc <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb+0xd0>
 800eefa:	2300      	movs	r3, #0
 800eefc:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800eefe:	697a      	ldr	r2, [r7, #20]
 800ef00:	4413      	add	r3, r2
 800ef02:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800ef0c:	3304      	adds	r3, #4
 800ef0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef10:	4619      	mov	r1, r3
 800ef12:	f000 f936 	bl	800f182 <_ZSt4copyIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET0_T_S9_S8_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800ef16:	68f8      	ldr	r0, [r7, #12]
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	6819      	ldr	r1, [r3, #0]
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	685b      	ldr	r3, [r3, #4]
 800ef20:	461a      	mov	r2, r3
 800ef22:	f7fe fbb3 	bl	800d68c <_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_deallocate_mapEPPS5_j>

	  this->_M_impl._M_map = __new_map;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	697a      	ldr	r2, [r7, #20]
 800ef2a:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	69ba      	ldr	r2, [r7, #24]
 800ef30:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	3308      	adds	r3, #8
 800ef36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f7fe fd5b 	bl	800d9f4 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	f103 0018 	add.w	r0, r3, #24
 800ef44:	6a3b      	ldr	r3, [r7, #32]
 800ef46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ef4a:	3b01      	subs	r3, #1
 800ef4c:	009b      	lsls	r3, r3, #2
 800ef4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef50:	4413      	add	r3, r2
 800ef52:	4619      	mov	r1, r3
 800ef54:	f7fe fd4e 	bl	800d9f4 <_ZNSt15_Deque_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERS5_PS5_E11_M_set_nodeEPS7_>
    }
 800ef58:	bf00      	nop
 800ef5a:	372c      	adds	r7, #44	; 0x2c
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd90      	pop	{r4, r7, pc}

0800ef60 <_ZStmiISt6bitsetILj8EERS1_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>:
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b082      	sub	sp, #8
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
 800ef68:	6039      	str	r1, [r7, #0]
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
 800ef6a:	f7fe ff1d 	bl	800dda8 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E14_S_buffer_sizeEv>
 800ef6e:	4603      	mov	r3, r0
 800ef70:	4619      	mov	r1, r3
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	68da      	ldr	r2, [r3, #12]
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	68db      	ldr	r3, [r3, #12]
 800ef7a:	1ad3      	subs	r3, r2, r3
 800ef7c:	109b      	asrs	r3, r3, #2
 800ef7e:	3b01      	subs	r3, #1
 800ef80:	fb03 f301 	mul.w	r3, r3, r1
 800ef84:	687a      	ldr	r2, [r7, #4]
 800ef86:	6811      	ldr	r1, [r2, #0]
 800ef88:	687a      	ldr	r2, [r7, #4]
 800ef8a:	6852      	ldr	r2, [r2, #4]
 800ef8c:	1a8a      	subs	r2, r1, r2
 800ef8e:	1092      	asrs	r2, r2, #2
 800ef90:	4413      	add	r3, r2
	+ (__y._M_last - __y._M_cur);
 800ef92:	683a      	ldr	r2, [r7, #0]
 800ef94:	6891      	ldr	r1, [r2, #8]
 800ef96:	683a      	ldr	r2, [r7, #0]
 800ef98:	6812      	ldr	r2, [r2, #0]
 800ef9a:	1a8a      	subs	r2, r1, r2
 800ef9c:	1092      	asrs	r2, r2, #2
 800ef9e:	4413      	add	r3, r2
    }
 800efa0:	4618      	mov	r0, r3
 800efa2:	3708      	adds	r7, #8
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}

0800efa8 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b084      	sub	sp, #16
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 800efb0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800efb4:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800efb6:	6878      	ldr	r0, [r7, #4]
 800efb8:	f000 f913 	bl	800f1e2 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE8max_sizeERKS2_>
 800efbc:	4603      	mov	r3, r0
 800efbe:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800efc0:	f107 0208 	add.w	r2, r7, #8
 800efc4:	f107 030c 	add.w	r3, r7, #12
 800efc8:	4611      	mov	r1, r2
 800efca:	4618      	mov	r0, r3
 800efcc:	f000 f8c5 	bl	800f15a <_ZSt3minIjERKT_S2_S2_>
 800efd0:	4603      	mov	r3, r0
 800efd2:	681b      	ldr	r3, [r3, #0]
      }
 800efd4:	4618      	mov	r0, r3
 800efd6:	3710      	adds	r7, #16
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}

0800efdc <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 800efdc:	b590      	push	{r4, r7, lr}
 800efde:	b08b      	sub	sp, #44	; 0x2c
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	60f8      	str	r0, [r7, #12]
 800efe4:	60b9      	str	r1, [r7, #8]
 800efe6:	4613      	mov	r3, r2
 800efe8:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	695b      	ldr	r3, [r3, #20]
 800eff2:	1ad3      	subs	r3, r2, r3
 800eff4:	109b      	asrs	r3, r3, #2
 800eff6:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 800eff8:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 800effa:	68bb      	ldr	r3, [r7, #8]
 800effc:	6a3a      	ldr	r2, [r7, #32]
 800effe:	4413      	add	r3, r2
 800f000:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	685a      	ldr	r2, [r3, #4]
 800f006:	69fb      	ldr	r3, [r7, #28]
 800f008:	005b      	lsls	r3, r3, #1
 800f00a:	429a      	cmp	r2, r3
 800f00c:	d92d      	bls.n	800f06a <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	681a      	ldr	r2, [r3, #0]
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 800f016:	69fb      	ldr	r3, [r7, #28]
 800f018:	1acb      	subs	r3, r1, r3
 800f01a:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800f01c:	0099      	lsls	r1, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 800f01e:	79fb      	ldrb	r3, [r7, #7]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d002      	beq.n	800f02a <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0x4e>
 800f024:	68bb      	ldr	r3, [r7, #8]
 800f026:	009b      	lsls	r3, r3, #2
 800f028:	e000      	b.n	800f02c <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0x50>
 800f02a:	2300      	movs	r3, #0
 800f02c:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800f02e:	4413      	add	r3, r2
 800f030:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	695b      	ldr	r3, [r3, #20]
 800f036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f038:	429a      	cmp	r2, r3
 800f03a:	d209      	bcs.n	800f050 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 800f044:	3304      	adds	r3, #4
 800f046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f048:	4619      	mov	r1, r3
 800f04a:	f000 f8d6 	bl	800f1fa <_ZSt4copyIPPSt6bitsetILj8EES3_ET0_T_S5_S4_>
 800f04e:	e048      	b.n	800f0e2 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800f058:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 800f05a:	6a3b      	ldr	r3, [r7, #32]
 800f05c:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800f05e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f060:	4413      	add	r3, r2
 800f062:	461a      	mov	r2, r3
 800f064:	f000 f8e1 	bl	800f22a <_ZSt13copy_backwardIPPSt6bitsetILj8EES3_ET0_T_S5_S4_>
 800f068:	e03b      	b.n	800f0e2 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	685c      	ldr	r4, [r3, #4]
	                             + std::max(this->_M_impl._M_map_size,
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	3304      	adds	r3, #4
 800f072:	f107 0208 	add.w	r2, r7, #8
 800f076:	4611      	mov	r1, r2
 800f078:	4618      	mov	r0, r3
 800f07a:	f7fe fc70 	bl	800d95e <_ZSt3maxIjERKT_S2_S2_>
 800f07e:	4603      	mov	r3, r0
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 800f084:	3302      	adds	r3, #2
 800f086:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	69b9      	ldr	r1, [r7, #24]
 800f08c:	4618      	mov	r0, r3
 800f08e:	f7fe fd50 	bl	800db32 <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE15_M_allocate_mapEj>
 800f092:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800f094:	69ba      	ldr	r2, [r7, #24]
 800f096:	69fb      	ldr	r3, [r7, #28]
 800f098:	1ad3      	subs	r3, r2, r3
 800f09a:	085b      	lsrs	r3, r3, #1
 800f09c:	009a      	lsls	r2, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 800f09e:	79fb      	ldrb	r3, [r7, #7]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d002      	beq.n	800f0aa <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0xce>
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	009b      	lsls	r3, r3, #2
 800f0a8:	e000      	b.n	800f0ac <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE17_M_reallocate_mapEjb+0xd0>
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800f0ae:	697a      	ldr	r2, [r7, #20]
 800f0b0:	4413      	add	r3, r2
 800f0b2:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800f0bc:	3304      	adds	r3, #4
 800f0be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0c0:	4619      	mov	r1, r3
 800f0c2:	f000 f89a 	bl	800f1fa <_ZSt4copyIPPSt6bitsetILj8EES3_ET0_T_S5_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800f0c6:	68f8      	ldr	r0, [r7, #12]
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	6819      	ldr	r1, [r3, #0]
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	685b      	ldr	r3, [r3, #4]
 800f0d0:	461a      	mov	r2, r3
 800f0d2:	f7fe fbfa 	bl	800d8ca <_ZNSt11_Deque_baseISt6bitsetILj8EESaIS1_EE17_M_deallocate_mapEPPS1_j>
	  this->_M_impl._M_map = __new_map;
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	697a      	ldr	r2, [r7, #20]
 800f0da:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	69ba      	ldr	r2, [r7, #24]
 800f0e0:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	3308      	adds	r3, #8
 800f0e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f7fe fd59 	bl	800dba0 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	f103 0018 	add.w	r0, r3, #24
 800f0f4:	6a3b      	ldr	r3, [r7, #32]
 800f0f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f0fa:	3b01      	subs	r3, #1
 800f0fc:	009b      	lsls	r3, r3, #2
 800f0fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f100:	4413      	add	r3, r2
 800f102:	4619      	mov	r1, r3
 800f104:	f7fe fd4c 	bl	800dba0 <_ZNSt15_Deque_iteratorISt6bitsetILj8EERS1_PS1_E11_M_set_nodeEPS3_>
    }
 800f108:	bf00      	nop
 800f10a:	372c      	adds	r7, #44	; 0x2c
 800f10c:	46bd      	mov	sp, r7
 800f10e:	bd90      	pop	{r4, r7, pc}

0800f110 <_ZNKSt6bitsetILj8EE15_Unchecked_testEj>:
      _Unchecked_test(size_t __pos) const _GLIBCXX_NOEXCEPT
 800f110:	b590      	push	{r4, r7, lr}
 800f112:	b083      	sub	sp, #12
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	6039      	str	r1, [r7, #0]
      { return ((this->_M_getword(__pos) & _Base::_S_maskbit(__pos))
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	6839      	ldr	r1, [r7, #0]
 800f11e:	4618      	mov	r0, r3
 800f120:	f7ff f855 	bl	800e1ce <_ZNKSt12_Base_bitsetILj1EE10_M_getwordEj>
 800f124:	4604      	mov	r4, r0
 800f126:	6838      	ldr	r0, [r7, #0]
 800f128:	f7ff f836 	bl	800e198 <_ZNSt12_Base_bitsetILj1EE10_S_maskbitEj>
 800f12c:	4603      	mov	r3, r0
 800f12e:	4023      	ands	r3, r4
		!= static_cast<_WordT>(0)); }
 800f130:	2b00      	cmp	r3, #0
 800f132:	bf14      	ite	ne
 800f134:	2301      	movne	r3, #1
 800f136:	2300      	moveq	r3, #0
 800f138:	b2db      	uxtb	r3, r3
 800f13a:	4618      	mov	r0, r3
 800f13c:	370c      	adds	r7, #12
 800f13e:	46bd      	mov	sp, r7
 800f140:	bd90      	pop	{r4, r7, pc}

0800f142 <_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeERKS6_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 800f142:	b580      	push	{r7, lr}
 800f144:	b082      	sub	sp, #8
 800f146:	af00      	add	r7, sp, #0
 800f148:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800f14a:	6878      	ldr	r0, [r7, #4]
 800f14c:	f7fe ff82 	bl	800e054 <_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv>
 800f150:	4603      	mov	r3, r0
 800f152:	4618      	mov	r0, r3
 800f154:	3708      	adds	r7, #8
 800f156:	46bd      	mov	sp, r7
 800f158:	bd80      	pop	{r7, pc}

0800f15a <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800f15a:	b480      	push	{r7}
 800f15c:	b083      	sub	sp, #12
 800f15e:	af00      	add	r7, sp, #0
 800f160:	6078      	str	r0, [r7, #4]
 800f162:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	681a      	ldr	r2, [r3, #0]
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	429a      	cmp	r2, r3
 800f16e:	d201      	bcs.n	800f174 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	e000      	b.n	800f176 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800f174:	687b      	ldr	r3, [r7, #4]
    }
 800f176:	4618      	mov	r0, r3
 800f178:	370c      	adds	r7, #12
 800f17a:	46bd      	mov	sp, r7
 800f17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f180:	4770      	bx	lr

0800f182 <_ZSt4copyIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET0_T_S9_S8_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800f182:	b590      	push	{r4, r7, lr}
 800f184:	b085      	sub	sp, #20
 800f186:	af00      	add	r7, sp, #0
 800f188:	60f8      	str	r0, [r7, #12]
 800f18a:	60b9      	str	r1, [r7, #8]
 800f18c:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800f18e:	68f8      	ldr	r0, [r7, #12]
 800f190:	f000 f863 	bl	800f25a <_ZSt12__miter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 800f194:	4604      	mov	r4, r0
 800f196:	68b8      	ldr	r0, [r7, #8]
 800f198:	f000 f85f 	bl	800f25a <_ZSt12__miter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 800f19c:	4603      	mov	r3, r0
 800f19e:	687a      	ldr	r2, [r7, #4]
 800f1a0:	4619      	mov	r1, r3
 800f1a2:	4620      	mov	r0, r4
 800f1a4:	f000 f864 	bl	800f270 <_ZSt14__copy_move_a2ILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>
 800f1a8:	4603      	mov	r3, r0
    }
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	3714      	adds	r7, #20
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	bd90      	pop	{r4, r7, pc}

0800f1b2 <_ZSt13copy_backwardIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET0_T_S9_S8_>:
   *  Result may not be in the range (first,last].  Use copy instead.  Note
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800f1b2:	b590      	push	{r4, r7, lr}
 800f1b4:	b085      	sub	sp, #20
 800f1b6:	af00      	add	r7, sp, #0
 800f1b8:	60f8      	str	r0, [r7, #12]
 800f1ba:	60b9      	str	r1, [r7, #8]
 800f1bc:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800f1be:	68f8      	ldr	r0, [r7, #12]
 800f1c0:	f000 f84b 	bl	800f25a <_ZSt12__miter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 800f1c4:	4604      	mov	r4, r0
 800f1c6:	68b8      	ldr	r0, [r7, #8]
 800f1c8:	f000 f847 	bl	800f25a <_ZSt12__miter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	687a      	ldr	r2, [r7, #4]
 800f1d0:	4619      	mov	r1, r3
 800f1d2:	4620      	mov	r0, r4
 800f1d4:	f000 f86f 	bl	800f2b6 <_ZSt23__copy_move_backward_a2ILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>
 800f1d8:	4603      	mov	r3, r0
    }
 800f1da:	4618      	mov	r0, r3
 800f1dc:	3714      	adds	r7, #20
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd90      	pop	{r4, r7, pc}

0800f1e2 <_ZNSt16allocator_traitsISaISt6bitsetILj8EEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 800f1e2:	b580      	push	{r7, lr}
 800f1e4:	b082      	sub	sp, #8
 800f1e6:	af00      	add	r7, sp, #0
 800f1e8:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800f1ea:	6878      	ldr	r0, [r7, #4]
 800f1ec:	f7fe ff40 	bl	800e070 <_ZNK9__gnu_cxx13new_allocatorISt6bitsetILj8EEE8max_sizeEv>
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	3708      	adds	r7, #8
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}

0800f1fa <_ZSt4copyIPPSt6bitsetILj8EES3_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 800f1fa:	b590      	push	{r4, r7, lr}
 800f1fc:	b085      	sub	sp, #20
 800f1fe:	af00      	add	r7, sp, #0
 800f200:	60f8      	str	r0, [r7, #12]
 800f202:	60b9      	str	r1, [r7, #8]
 800f204:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800f206:	68f8      	ldr	r0, [r7, #12]
 800f208:	f000 f878 	bl	800f2fc <_ZSt12__miter_baseIPPSt6bitsetILj8EEET_S4_>
 800f20c:	4604      	mov	r4, r0
 800f20e:	68b8      	ldr	r0, [r7, #8]
 800f210:	f000 f874 	bl	800f2fc <_ZSt12__miter_baseIPPSt6bitsetILj8EEET_S4_>
 800f214:	4603      	mov	r3, r0
 800f216:	687a      	ldr	r2, [r7, #4]
 800f218:	4619      	mov	r1, r3
 800f21a:	4620      	mov	r0, r4
 800f21c:	f000 f879 	bl	800f312 <_ZSt14__copy_move_a2ILb0EPPSt6bitsetILj8EES3_ET1_T0_S5_S4_>
 800f220:	4603      	mov	r3, r0
    }
 800f222:	4618      	mov	r0, r3
 800f224:	3714      	adds	r7, #20
 800f226:	46bd      	mov	sp, r7
 800f228:	bd90      	pop	{r4, r7, pc}

0800f22a <_ZSt13copy_backwardIPPSt6bitsetILj8EES3_ET0_T_S5_S4_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800f22a:	b590      	push	{r4, r7, lr}
 800f22c:	b085      	sub	sp, #20
 800f22e:	af00      	add	r7, sp, #0
 800f230:	60f8      	str	r0, [r7, #12]
 800f232:	60b9      	str	r1, [r7, #8]
 800f234:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800f236:	68f8      	ldr	r0, [r7, #12]
 800f238:	f000 f860 	bl	800f2fc <_ZSt12__miter_baseIPPSt6bitsetILj8EEET_S4_>
 800f23c:	4604      	mov	r4, r0
 800f23e:	68b8      	ldr	r0, [r7, #8]
 800f240:	f000 f85c 	bl	800f2fc <_ZSt12__miter_baseIPPSt6bitsetILj8EEET_S4_>
 800f244:	4603      	mov	r3, r0
 800f246:	687a      	ldr	r2, [r7, #4]
 800f248:	4619      	mov	r1, r3
 800f24a:	4620      	mov	r0, r4
 800f24c:	f000 f884 	bl	800f358 <_ZSt23__copy_move_backward_a2ILb0EPPSt6bitsetILj8EES3_ET1_T0_S5_S4_>
 800f250:	4603      	mov	r3, r0
    }
 800f252:	4618      	mov	r0, r3
 800f254:	3714      	adds	r7, #20
 800f256:	46bd      	mov	sp, r7
 800f258:	bd90      	pop	{r4, r7, pc}

0800f25a <_ZSt12__miter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 800f25a:	b480      	push	{r7}
 800f25c:	b083      	sub	sp, #12
 800f25e:	af00      	add	r7, sp, #0
 800f260:	6078      	str	r0, [r7, #4]
    { return __it; }
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	4618      	mov	r0, r3
 800f266:	370c      	adds	r7, #12
 800f268:	46bd      	mov	sp, r7
 800f26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26e:	4770      	bx	lr

0800f270 <_ZSt14__copy_move_a2ILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800f270:	b5b0      	push	{r4, r5, r7, lr}
 800f272:	b084      	sub	sp, #16
 800f274:	af00      	add	r7, sp, #0
 800f276:	60f8      	str	r0, [r7, #12]
 800f278:	60b9      	str	r1, [r7, #8]
 800f27a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800f27c:	68f8      	ldr	r0, [r7, #12]
 800f27e:	f000 f88e 	bl	800f39e <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 800f282:	4604      	mov	r4, r0
 800f284:	68b8      	ldr	r0, [r7, #8]
 800f286:	f000 f88a 	bl	800f39e <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 800f28a:	4605      	mov	r5, r0
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	4618      	mov	r0, r3
 800f290:	f000 f885 	bl	800f39e <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 800f294:	4603      	mov	r3, r0
 800f296:	461a      	mov	r2, r3
 800f298:	4629      	mov	r1, r5
 800f29a:	4620      	mov	r0, r4
 800f29c:	f000 f88a 	bl	800f3b4 <_ZSt13__copy_move_aILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>
 800f2a0:	4602      	mov	r2, r0
 800f2a2:	1d3b      	adds	r3, r7, #4
 800f2a4:	4611      	mov	r1, r2
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f000 f896 	bl	800f3d8 <_ZSt12__niter_wrapIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_RKS8_S8_>
 800f2ac:	4603      	mov	r3, r0
    }
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	3710      	adds	r7, #16
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bdb0      	pop	{r4, r5, r7, pc}

0800f2b6 <_ZSt23__copy_move_backward_a2ILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800f2b6:	b5b0      	push	{r4, r5, r7, lr}
 800f2b8:	b084      	sub	sp, #16
 800f2ba:	af00      	add	r7, sp, #0
 800f2bc:	60f8      	str	r0, [r7, #12]
 800f2be:	60b9      	str	r1, [r7, #8]
 800f2c0:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800f2c2:	68f8      	ldr	r0, [r7, #12]
 800f2c4:	f000 f86b 	bl	800f39e <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 800f2c8:	4604      	mov	r4, r0
 800f2ca:	68b8      	ldr	r0, [r7, #8]
 800f2cc:	f000 f867 	bl	800f39e <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 800f2d0:	4605      	mov	r5, r0
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	f000 f862 	bl	800f39e <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	461a      	mov	r2, r3
 800f2de:	4629      	mov	r1, r5
 800f2e0:	4620      	mov	r0, r4
 800f2e2:	f000 f885 	bl	800f3f0 <_ZSt22__copy_move_backward_aILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>
 800f2e6:	4602      	mov	r2, r0
 800f2e8:	1d3b      	adds	r3, r7, #4
 800f2ea:	4611      	mov	r1, r2
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	f000 f873 	bl	800f3d8 <_ZSt12__niter_wrapIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_RKS8_S8_>
 800f2f2:	4603      	mov	r3, r0
    }
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	3710      	adds	r7, #16
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	bdb0      	pop	{r4, r5, r7, pc}

0800f2fc <_ZSt12__miter_baseIPPSt6bitsetILj8EEET_S4_>:
    __miter_base(_Iterator __it)
 800f2fc:	b480      	push	{r7}
 800f2fe:	b083      	sub	sp, #12
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
    { return __it; }
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	4618      	mov	r0, r3
 800f308:	370c      	adds	r7, #12
 800f30a:	46bd      	mov	sp, r7
 800f30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f310:	4770      	bx	lr

0800f312 <_ZSt14__copy_move_a2ILb0EPPSt6bitsetILj8EES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800f312:	b5b0      	push	{r4, r5, r7, lr}
 800f314:	b084      	sub	sp, #16
 800f316:	af00      	add	r7, sp, #0
 800f318:	60f8      	str	r0, [r7, #12]
 800f31a:	60b9      	str	r1, [r7, #8]
 800f31c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800f31e:	68f8      	ldr	r0, [r7, #12]
 800f320:	f000 f878 	bl	800f414 <_ZSt12__niter_baseIPPSt6bitsetILj8EEET_S4_>
 800f324:	4604      	mov	r4, r0
 800f326:	68b8      	ldr	r0, [r7, #8]
 800f328:	f000 f874 	bl	800f414 <_ZSt12__niter_baseIPPSt6bitsetILj8EEET_S4_>
 800f32c:	4605      	mov	r5, r0
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	4618      	mov	r0, r3
 800f332:	f000 f86f 	bl	800f414 <_ZSt12__niter_baseIPPSt6bitsetILj8EEET_S4_>
 800f336:	4603      	mov	r3, r0
 800f338:	461a      	mov	r2, r3
 800f33a:	4629      	mov	r1, r5
 800f33c:	4620      	mov	r0, r4
 800f33e:	f000 f874 	bl	800f42a <_ZSt13__copy_move_aILb0EPPSt6bitsetILj8EES3_ET1_T0_S5_S4_>
 800f342:	4602      	mov	r2, r0
 800f344:	1d3b      	adds	r3, r7, #4
 800f346:	4611      	mov	r1, r2
 800f348:	4618      	mov	r0, r3
 800f34a:	f000 f880 	bl	800f44e <_ZSt12__niter_wrapIPPSt6bitsetILj8EEET_RKS4_S4_>
 800f34e:	4603      	mov	r3, r0
    }
 800f350:	4618      	mov	r0, r3
 800f352:	3710      	adds	r7, #16
 800f354:	46bd      	mov	sp, r7
 800f356:	bdb0      	pop	{r4, r5, r7, pc}

0800f358 <_ZSt23__copy_move_backward_a2ILb0EPPSt6bitsetILj8EES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800f358:	b5b0      	push	{r4, r5, r7, lr}
 800f35a:	b084      	sub	sp, #16
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	60f8      	str	r0, [r7, #12]
 800f360:	60b9      	str	r1, [r7, #8]
 800f362:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800f364:	68f8      	ldr	r0, [r7, #12]
 800f366:	f000 f855 	bl	800f414 <_ZSt12__niter_baseIPPSt6bitsetILj8EEET_S4_>
 800f36a:	4604      	mov	r4, r0
 800f36c:	68b8      	ldr	r0, [r7, #8]
 800f36e:	f000 f851 	bl	800f414 <_ZSt12__niter_baseIPPSt6bitsetILj8EEET_S4_>
 800f372:	4605      	mov	r5, r0
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	4618      	mov	r0, r3
 800f378:	f000 f84c 	bl	800f414 <_ZSt12__niter_baseIPPSt6bitsetILj8EEET_S4_>
 800f37c:	4603      	mov	r3, r0
 800f37e:	461a      	mov	r2, r3
 800f380:	4629      	mov	r1, r5
 800f382:	4620      	mov	r0, r4
 800f384:	f000 f86f 	bl	800f466 <_ZSt22__copy_move_backward_aILb0EPPSt6bitsetILj8EES3_ET1_T0_S5_S4_>
 800f388:	4602      	mov	r2, r0
 800f38a:	1d3b      	adds	r3, r7, #4
 800f38c:	4611      	mov	r1, r2
 800f38e:	4618      	mov	r0, r3
 800f390:	f000 f85d 	bl	800f44e <_ZSt12__niter_wrapIPPSt6bitsetILj8EEET_RKS4_S4_>
 800f394:	4603      	mov	r3, r0
    }
 800f396:	4618      	mov	r0, r3
 800f398:	3710      	adds	r7, #16
 800f39a:	46bd      	mov	sp, r7
 800f39c:	bdb0      	pop	{r4, r5, r7, pc}

0800f39e <_ZSt12__niter_baseIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_S8_>:
    __niter_base(_Iterator __it)
 800f39e:	b480      	push	{r7}
 800f3a0:	b083      	sub	sp, #12
 800f3a2:	af00      	add	r7, sp, #0
 800f3a4:	6078      	str	r0, [r7, #4]
    { return __it; }
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	370c      	adds	r7, #12
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b2:	4770      	bx	lr

0800f3b4 <_ZSt13__copy_move_aILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b086      	sub	sp, #24
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	60f8      	str	r0, [r7, #12]
 800f3bc:	60b9      	str	r1, [r7, #8]
 800f3be:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 800f3c0:	2301      	movs	r3, #1
 800f3c2:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 800f3c4:	687a      	ldr	r2, [r7, #4]
 800f3c6:	68b9      	ldr	r1, [r7, #8]
 800f3c8:	68f8      	ldr	r0, [r7, #12]
 800f3ca:	f000 f85e 	bl	800f48a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_PKSA_SD_SB_>
 800f3ce:	4603      	mov	r3, r0
    }
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	3718      	adds	r7, #24
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	bd80      	pop	{r7, pc}

0800f3d8 <_ZSt12__niter_wrapIPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEET_RKS8_S8_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800f3d8:	b480      	push	{r7}
 800f3da:	b083      	sub	sp, #12
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
 800f3e0:	6039      	str	r1, [r7, #0]
    { return __res; }
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	370c      	adds	r7, #12
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ee:	4770      	bx	lr

0800f3f0 <_ZSt22__copy_move_backward_aILb0EPPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ET1_T0_S9_S8_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b086      	sub	sp, #24
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	60f8      	str	r0, [r7, #12]
 800f3f8:	60b9      	str	r1, [r7, #8]
 800f3fa:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueType1)
 800f3fc:	2301      	movs	r3, #1
 800f3fe:	75fb      	strb	r3, [r7, #23]
				       _Category>::__copy_move_b(__first,
 800f400:	687a      	ldr	r2, [r7, #4]
 800f402:	68b9      	ldr	r1, [r7, #8]
 800f404:	68f8      	ldr	r0, [r7, #12]
 800f406:	f000 f85d 	bl	800f4c4 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_PKSA_SD_SB_>
 800f40a:	4603      	mov	r3, r0
    }
 800f40c:	4618      	mov	r0, r3
 800f40e:	3718      	adds	r7, #24
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}

0800f414 <_ZSt12__niter_baseIPPSt6bitsetILj8EEET_S4_>:
    __niter_base(_Iterator __it)
 800f414:	b480      	push	{r7}
 800f416:	b083      	sub	sp, #12
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	4618      	mov	r0, r3
 800f420:	370c      	adds	r7, #12
 800f422:	46bd      	mov	sp, r7
 800f424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f428:	4770      	bx	lr

0800f42a <_ZSt13__copy_move_aILb0EPPSt6bitsetILj8EES3_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800f42a:	b580      	push	{r7, lr}
 800f42c:	b086      	sub	sp, #24
 800f42e:	af00      	add	r7, sp, #0
 800f430:	60f8      	str	r0, [r7, #12]
 800f432:	60b9      	str	r1, [r7, #8]
 800f434:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 800f436:	2301      	movs	r3, #1
 800f438:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 800f43a:	687a      	ldr	r2, [r7, #4]
 800f43c:	68b9      	ldr	r1, [r7, #8]
 800f43e:	68f8      	ldr	r0, [r7, #12]
 800f440:	f000 f862 	bl	800f508 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPSt6bitsetILj8EEEEPT_PKS6_S9_S7_>
 800f444:	4603      	mov	r3, r0
    }
 800f446:	4618      	mov	r0, r3
 800f448:	3718      	adds	r7, #24
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}

0800f44e <_ZSt12__niter_wrapIPPSt6bitsetILj8EEET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800f44e:	b480      	push	{r7}
 800f450:	b083      	sub	sp, #12
 800f452:	af00      	add	r7, sp, #0
 800f454:	6078      	str	r0, [r7, #4]
 800f456:	6039      	str	r1, [r7, #0]
    { return __res; }
 800f458:	683b      	ldr	r3, [r7, #0]
 800f45a:	4618      	mov	r0, r3
 800f45c:	370c      	adds	r7, #12
 800f45e:	46bd      	mov	sp, r7
 800f460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f464:	4770      	bx	lr

0800f466 <_ZSt22__copy_move_backward_aILb0EPPSt6bitsetILj8EES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 800f466:	b580      	push	{r7, lr}
 800f468:	b086      	sub	sp, #24
 800f46a:	af00      	add	r7, sp, #0
 800f46c:	60f8      	str	r0, [r7, #12]
 800f46e:	60b9      	str	r1, [r7, #8]
 800f470:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueType1)
 800f472:	2301      	movs	r3, #1
 800f474:	75fb      	strb	r3, [r7, #23]
				       _Category>::__copy_move_b(__first,
 800f476:	687a      	ldr	r2, [r7, #4]
 800f478:	68b9      	ldr	r1, [r7, #8]
 800f47a:	68f8      	ldr	r0, [r7, #12]
 800f47c:	f000 f861 	bl	800f542 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPSt6bitsetILj8EEEEPT_PKS6_S9_S7_>
 800f480:	4603      	mov	r3, r0
    }
 800f482:	4618      	mov	r0, r3
 800f484:	3718      	adds	r7, #24
 800f486:	46bd      	mov	sp, r7
 800f488:	bd80      	pop	{r7, pc}

0800f48a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_PKSA_SD_SB_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800f48a:	b580      	push	{r7, lr}
 800f48c:	b086      	sub	sp, #24
 800f48e:	af00      	add	r7, sp, #0
 800f490:	60f8      	str	r0, [r7, #12]
 800f492:	60b9      	str	r1, [r7, #8]
 800f494:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800f496:	68ba      	ldr	r2, [r7, #8]
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	1ad3      	subs	r3, r2, r3
 800f49c:	109b      	asrs	r3, r3, #2
 800f49e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800f4a0:	697b      	ldr	r3, [r7, #20]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d006      	beq.n	800f4b4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_PKSA_SD_SB_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800f4a6:	697b      	ldr	r3, [r7, #20]
 800f4a8:	009b      	lsls	r3, r3, #2
 800f4aa:	461a      	mov	r2, r3
 800f4ac:	68f9      	ldr	r1, [r7, #12]
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	f000 fdb6 	bl	8010020 <memmove>
	  return __result + _Num;
 800f4b4:	697b      	ldr	r3, [r7, #20]
 800f4b6:	009b      	lsls	r3, r3, #2
 800f4b8:	687a      	ldr	r2, [r7, #4]
 800f4ba:	4413      	add	r3, r2
	}
 800f4bc:	4618      	mov	r0, r3
 800f4be:	3718      	adds	r7, #24
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}

0800f4c4 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_PKSA_SD_SB_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b086      	sub	sp, #24
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	60f8      	str	r0, [r7, #12]
 800f4cc:	60b9      	str	r1, [r7, #8]
 800f4ce:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800f4d0:	68ba      	ldr	r2, [r7, #8]
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	1ad3      	subs	r3, r2, r3
 800f4d6:	109b      	asrs	r3, r3, #2
 800f4d8:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800f4da:	697b      	ldr	r3, [r7, #20]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d00a      	beq.n	800f4f6 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEPT_PKSA_SD_SB_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800f4e0:	697b      	ldr	r3, [r7, #20]
 800f4e2:	009b      	lsls	r3, r3, #2
 800f4e4:	425b      	negs	r3, r3
 800f4e6:	687a      	ldr	r2, [r7, #4]
 800f4e8:	18d0      	adds	r0, r2, r3
 800f4ea:	697b      	ldr	r3, [r7, #20]
 800f4ec:	009b      	lsls	r3, r3, #2
 800f4ee:	461a      	mov	r2, r3
 800f4f0:	68f9      	ldr	r1, [r7, #12]
 800f4f2:	f000 fd95 	bl	8010020 <memmove>
	  return __result - _Num;
 800f4f6:	697b      	ldr	r3, [r7, #20]
 800f4f8:	009b      	lsls	r3, r3, #2
 800f4fa:	425b      	negs	r3, r3
 800f4fc:	687a      	ldr	r2, [r7, #4]
 800f4fe:	4413      	add	r3, r2
	}
 800f500:	4618      	mov	r0, r3
 800f502:	3718      	adds	r7, #24
 800f504:	46bd      	mov	sp, r7
 800f506:	bd80      	pop	{r7, pc}

0800f508 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPSt6bitsetILj8EEEEPT_PKS6_S9_S7_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800f508:	b580      	push	{r7, lr}
 800f50a:	b086      	sub	sp, #24
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	60f8      	str	r0, [r7, #12]
 800f510:	60b9      	str	r1, [r7, #8]
 800f512:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800f514:	68ba      	ldr	r2, [r7, #8]
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	1ad3      	subs	r3, r2, r3
 800f51a:	109b      	asrs	r3, r3, #2
 800f51c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800f51e:	697b      	ldr	r3, [r7, #20]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d006      	beq.n	800f532 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPSt6bitsetILj8EEEEPT_PKS6_S9_S7_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800f524:	697b      	ldr	r3, [r7, #20]
 800f526:	009b      	lsls	r3, r3, #2
 800f528:	461a      	mov	r2, r3
 800f52a:	68f9      	ldr	r1, [r7, #12]
 800f52c:	6878      	ldr	r0, [r7, #4]
 800f52e:	f000 fd77 	bl	8010020 <memmove>
	  return __result + _Num;
 800f532:	697b      	ldr	r3, [r7, #20]
 800f534:	009b      	lsls	r3, r3, #2
 800f536:	687a      	ldr	r2, [r7, #4]
 800f538:	4413      	add	r3, r2
	}
 800f53a:	4618      	mov	r0, r3
 800f53c:	3718      	adds	r7, #24
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd80      	pop	{r7, pc}

0800f542 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPSt6bitsetILj8EEEEPT_PKS6_S9_S7_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800f542:	b580      	push	{r7, lr}
 800f544:	b086      	sub	sp, #24
 800f546:	af00      	add	r7, sp, #0
 800f548:	60f8      	str	r0, [r7, #12]
 800f54a:	60b9      	str	r1, [r7, #8]
 800f54c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800f54e:	68ba      	ldr	r2, [r7, #8]
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	1ad3      	subs	r3, r2, r3
 800f554:	109b      	asrs	r3, r3, #2
 800f556:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800f558:	697b      	ldr	r3, [r7, #20]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d00a      	beq.n	800f574 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPSt6bitsetILj8EEEEPT_PKS6_S9_S7_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800f55e:	697b      	ldr	r3, [r7, #20]
 800f560:	009b      	lsls	r3, r3, #2
 800f562:	425b      	negs	r3, r3
 800f564:	687a      	ldr	r2, [r7, #4]
 800f566:	18d0      	adds	r0, r2, r3
 800f568:	697b      	ldr	r3, [r7, #20]
 800f56a:	009b      	lsls	r3, r3, #2
 800f56c:	461a      	mov	r2, r3
 800f56e:	68f9      	ldr	r1, [r7, #12]
 800f570:	f000 fd56 	bl	8010020 <memmove>
	  return __result - _Num;
 800f574:	697b      	ldr	r3, [r7, #20]
 800f576:	009b      	lsls	r3, r3, #2
 800f578:	425b      	negs	r3, r3
 800f57a:	687a      	ldr	r2, [r7, #4]
 800f57c:	4413      	add	r3, r2
	}
 800f57e:	4618      	mov	r0, r3
 800f580:	3718      	adds	r7, #24
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}

0800f586 <_ZNSt12_Base_bitsetILj1EEC1Ey>:
      constexpr _Base_bitset(unsigned long long __val) noexcept
 800f586:	b480      	push	{r7}
 800f588:	b085      	sub	sp, #20
 800f58a:	af00      	add	r7, sp, #0
 800f58c:	60f8      	str	r0, [r7, #12]
 800f58e:	e9c7 2300 	strd	r2, r3, [r7]
      : _M_w(__val)
 800f592:	683a      	ldr	r2, [r7, #0]
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	601a      	str	r2, [r3, #0]
      { }
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	4618      	mov	r0, r3
 800f59c:	3714      	adds	r7, #20
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a4:	4770      	bx	lr
	...

0800f5a8 <_ZN11transmitter6enableEv>:
 */

#include "transmitter.h"

void transmitter::enable()
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b082      	sub	sp, #8
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(SEND_TIMER);
 800f5b0:	4803      	ldr	r0, [pc, #12]	; (800f5c0 <_ZN11transmitter6enableEv+0x18>)
 800f5b2:	f7f6 fab5 	bl	8005b20 <HAL_TIM_Base_Start_IT>
}
 800f5b6:	bf00      	nop
 800f5b8:	3708      	adds	r7, #8
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}
 800f5be:	bf00      	nop
 800f5c0:	2000558c 	.word	0x2000558c

0800f5c4 <_ZN11transmitter7disableEv>:

void transmitter::disable()
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b082      	sub	sp, #8
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(SEND_TIMER);
 800f5cc:	4803      	ldr	r0, [pc, #12]	; (800f5dc <_ZN11transmitter7disableEv+0x18>)
 800f5ce:	f7f6 fb09 	bl	8005be4 <HAL_TIM_Base_Stop_IT>
}
 800f5d2:	bf00      	nop
 800f5d4:	3708      	adds	r7, #8
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	bd80      	pop	{r7, pc}
 800f5da:	bf00      	nop
 800f5dc:	2000558c 	.word	0x2000558c

0800f5e0 <_ZN11transmitter10fillBufferEv>:

// Pop the next message from the outbound queue
// and add it to the outbound buffer
void transmitter::fillBuffer()
{
 800f5e0:	b590      	push	{r4, r7, lr}
 800f5e2:	b08b      	sub	sp, #44	; 0x2c
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
	// FIXME: This doesn't account for an empty queue.
	// This means everything will break if the timer
	// is running and there is no new message.
	string m = messages.front();
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	3304      	adds	r3, #4
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f7ff f8a3 	bl	800e738 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5frontEv>
 800f5f2:	4602      	mov	r2, r0
 800f5f4:	f107 030c 	add.w	r3, r7, #12
 800f5f8:	4611      	mov	r1, r2
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f000 fc6e 	bl	800fedc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
	messages.pop_front();
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	3304      	adds	r3, #4
 800f604:	4618      	mov	r0, r3
 800f606:	f7ff f8ab 	bl	800e760 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9pop_frontEv>

	for(uint8_t i = 0; i < m.length(); i++)
 800f60a:	2300      	movs	r3, #0
 800f60c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f610:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 800f614:	f107 030c 	add.w	r3, r7, #12
 800f618:	4618      	mov	r0, r3
 800f61a:	f000 fbc4 	bl	800fda6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800f61e:	4603      	mov	r3, r0
 800f620:	429c      	cmp	r4, r3
 800f622:	bf34      	ite	cc
 800f624:	2301      	movcc	r3, #1
 800f626:	2300      	movcs	r3, #0
 800f628:	b2db      	uxtb	r3, r3
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d01f      	beq.n	800f66e <_ZN11transmitter10fillBufferEv+0x8e>
	{
		bitset<8> c = m[i];
 800f62e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f632:	f107 030c 	add.w	r3, r7, #12
 800f636:	4611      	mov	r1, r2
 800f638:	4618      	mov	r0, r3
 800f63a:	f000 fbb6 	bl	800fdaa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800f63e:	4603      	mov	r3, r0
 800f640:	781b      	ldrb	r3, [r3, #0]
 800f642:	b2da      	uxtb	r2, r3
 800f644:	f04f 0300 	mov.w	r3, #0
 800f648:	f107 0108 	add.w	r1, r7, #8
 800f64c:	4608      	mov	r0, r1
 800f64e:	f000 f9b3 	bl	800f9b8 <_ZNSt6bitsetILj8EEC1Ey>
		buffer.push_back(c);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	332c      	adds	r3, #44	; 0x2c
 800f656:	f107 0208 	add.w	r2, r7, #8
 800f65a:	4611      	mov	r1, r2
 800f65c:	4618      	mov	r0, r3
 800f65e:	f7fe fff3 	bl	800e648 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9push_backERKS1_>
	for(uint8_t i = 0; i < m.length(); i++)
 800f662:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f666:	3301      	adds	r3, #1
 800f668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f66c:	e7d0      	b.n	800f610 <_ZN11transmitter10fillBufferEv+0x30>
	}
	bitPointer = 0;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	2200      	movs	r2, #0
 800f672:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	string m = messages.front();
 800f676:	f107 030c 	add.w	r3, r7, #12
 800f67a:	4618      	mov	r0, r3
 800f67c:	f000 fb8d 	bl	800fd9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800f680:	bf00      	nop
 800f682:	372c      	adds	r7, #44	; 0x2c
 800f684:	46bd      	mov	sp, r7
 800f686:	bd90      	pop	{r4, r7, pc}

0800f688 <_ZN11transmitter10getNextBitEv>:

// Get the next bit to send
uint8_t transmitter::getNextBit()
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b086      	sub	sp, #24
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
	if(buffer.empty())
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	332c      	adds	r3, #44	; 0x2c
 800f694:	4618      	mov	r0, r3
 800f696:	f7fe ff49 	bl	800e52c <_ZNKSt5dequeISt6bitsetILj8EESaIS1_EE5emptyEv>
 800f69a:	4603      	mov	r3, r0
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d001      	beq.n	800f6a4 <_ZN11transmitter10getNextBitEv+0x1c>
	{
		return NO_NEW_BITS;
 800f6a0:	2302      	movs	r3, #2
 800f6a2:	e03b      	b.n	800f71c <_ZN11transmitter10getNextBitEv+0x94>
	}

	if(bitPointer > 7)
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800f6aa:	2b07      	cmp	r3, #7
 800f6ac:	d912      	bls.n	800f6d4 <_ZN11transmitter10getNextBitEv+0x4c>
	{
		buffer.pop_front();
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	332c      	adds	r3, #44	; 0x2c
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	f7fe ff60 	bl	800e578 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE9pop_frontEv>
		bitPointer = 0;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

		if(buffer.empty())
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	332c      	adds	r3, #44	; 0x2c
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f7fe ff31 	bl	800e52c <_ZNKSt5dequeISt6bitsetILj8EESaIS1_EE5emptyEv>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d001      	beq.n	800f6d4 <_ZN11transmitter10getNextBitEv+0x4c>
		{
			return NO_NEW_BITS;
 800f6d0:	2302      	movs	r3, #2
 800f6d2:	e023      	b.n	800f71c <_ZN11transmitter10getNextBitEv+0x94>
		}
	}

	uint8_t retVal = buffer.front()[bitPointer];
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	332c      	adds	r3, #44	; 0x2c
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f7fe ff39 	bl	800e550 <_ZNSt5dequeISt6bitsetILj8EESaIS1_EE5frontEv>
 800f6de:	4601      	mov	r1, r0
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800f6e6:	461a      	mov	r2, r3
 800f6e8:	f107 030c 	add.w	r3, r7, #12
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f000 f978 	bl	800f9e2 <_ZNSt6bitsetILj8EEixEj>
 800f6f2:	f107 030c 	add.w	r3, r7, #12
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f000 f98d 	bl	800fa16 <_ZNKSt6bitsetILj8EE9referencecvbEv>
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	75fb      	strb	r3, [r7, #23]
 800f700:	f107 030c 	add.w	r3, r7, #12
 800f704:	4618      	mov	r0, r3
 800f706:	f000 f97b 	bl	800fa00 <_ZNSt6bitsetILj8EE9referenceD1Ev>

	bitPointer++;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800f710:	3301      	adds	r3, #1
 800f712:	b2da      	uxtb	r2, r3
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	return retVal;
 800f71a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f71c:	4618      	mov	r0, r3
 800f71e:	3718      	adds	r7, #24
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}

0800f724 <_ZN11transmitter3pinEh>:

void transmitter::pin(uint8_t high)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b082      	sub	sp, #8
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
 800f72c:	460b      	mov	r3, r1
 800f72e:	70fb      	strb	r3, [r7, #3]
	if(high)
 800f730:	78fb      	ldrb	r3, [r7, #3]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d00b      	beq.n	800f74e <_ZN11transmitter3pinEh+0x2a>
	{
		HAL_GPIO_WritePin(RADIO_SEND_GPIO_Port,RADIO_SEND_Pin,GPIO_PIN_SET);
 800f736:	2201      	movs	r2, #1
 800f738:	2102      	movs	r1, #2
 800f73a:	480c      	ldr	r0, [pc, #48]	; (800f76c <_ZN11transmitter3pinEh+0x48>)
 800f73c:	f7f4 fc9c 	bl	8004078 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,GPIO_PIN_SET);
 800f740:	2201      	movs	r2, #1
 800f742:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f746:	4809      	ldr	r0, [pc, #36]	; (800f76c <_ZN11transmitter3pinEh+0x48>)
 800f748:	f7f4 fc96 	bl	8004078 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(RADIO_SEND_GPIO_Port,RADIO_SEND_Pin,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,GPIO_PIN_RESET);
	}
}
 800f74c:	e00a      	b.n	800f764 <_ZN11transmitter3pinEh+0x40>
		HAL_GPIO_WritePin(RADIO_SEND_GPIO_Port,RADIO_SEND_Pin,GPIO_PIN_RESET);
 800f74e:	2200      	movs	r2, #0
 800f750:	2102      	movs	r1, #2
 800f752:	4806      	ldr	r0, [pc, #24]	; (800f76c <_ZN11transmitter3pinEh+0x48>)
 800f754:	f7f4 fc90 	bl	8004078 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,GPIO_PIN_RESET);
 800f758:	2200      	movs	r2, #0
 800f75a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f75e:	4803      	ldr	r0, [pc, #12]	; (800f76c <_ZN11transmitter3pinEh+0x48>)
 800f760:	f7f4 fc8a 	bl	8004078 <HAL_GPIO_WritePin>
}
 800f764:	bf00      	nop
 800f766:	3708      	adds	r7, #8
 800f768:	46bd      	mov	sp, r7
 800f76a:	bd80      	pop	{r7, pc}
 800f76c:	40020400 	.word	0x40020400

0800f770 <_ZN11transmitter4sendENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

// The send function adds a message to the queue.
// The interrupt handler will notice and start sending this message bit by bit.
void transmitter::send(string message)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b082      	sub	sp, #8
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
 800f778:	6039      	str	r1, [r7, #0]
	messages.push_back(message);
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	3304      	adds	r3, #4
 800f77e:	6839      	ldr	r1, [r7, #0]
 800f780:	4618      	mov	r0, r3
 800f782:	f7fe ff25 	bl	800e5d0 <_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_>
	enable();
 800f786:	6878      	ldr	r0, [r7, #4]
 800f788:	f7ff ff0e 	bl	800f5a8 <_ZN11transmitter6enableEv>
}
 800f78c:	bf00      	nop
 800f78e:	3708      	adds	r7, #8
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}

0800f794 <_ZN11transmitter12sendBlockingENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

// Send a message, but wait until sending is complete
void transmitter::sendBlocking(string message)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b088      	sub	sp, #32
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
 800f79c:	6039      	str	r1, [r7, #0]
	send(message);
 800f79e:	f107 0308 	add.w	r3, r7, #8
 800f7a2:	6839      	ldr	r1, [r7, #0]
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f000 fb99 	bl	800fedc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800f7aa:	f107 0308 	add.w	r3, r7, #8
 800f7ae:	4619      	mov	r1, r3
 800f7b0:	6878      	ldr	r0, [r7, #4]
 800f7b2:	f7ff ffdd 	bl	800f770 <_ZN11transmitter4sendENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800f7b6:	f107 0308 	add.w	r3, r7, #8
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f000 faed 	bl	800fd9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

	// Wait until the message has been sent
	while(!messageSent);
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	781b      	ldrb	r3, [r3, #0]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d100      	bne.n	800f7ca <_ZN11transmitter12sendBlockingENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x36>
 800f7c8:	e7fa      	b.n	800f7c0 <_ZN11transmitter12sendBlockingENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2c>
	messageSent = false;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	701a      	strb	r2, [r3, #0]
}
 800f7d0:	bf00      	nop
 800f7d2:	3720      	adds	r7, #32
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}

0800f7d8 <_ZN11transmitter7sendAckEv>:

void transmitter::sendAck()
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b090      	sub	sp, #64	; 0x40
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
	// The 6th character in the ASCII table is
	// the official symbol for acknowledgements
	string ack = " ";
 800f7e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f000 f970 	bl	800faca <_ZNSaIcEC1Ev>
 800f7ea:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f7ee:	f107 030c 	add.w	r3, r7, #12
 800f7f2:	4917      	ldr	r1, [pc, #92]	; (800f850 <_ZN11transmitter7sendAckEv+0x78>)
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	f000 fba5 	bl	800ff44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800f7fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f7fe:	4618      	mov	r0, r3
 800f800:	f000 f964 	bl	800facc <_ZNSaIcED1Ev>
	ack[0] = (char) 6;
 800f804:	f107 030c 	add.w	r3, r7, #12
 800f808:	2100      	movs	r1, #0
 800f80a:	4618      	mov	r0, r3
 800f80c:	f000 facd 	bl	800fdaa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800f810:	4603      	mov	r3, r0
 800f812:	2206      	movs	r2, #6
 800f814:	701a      	strb	r2, [r3, #0]
	sendBlocking(ack);
 800f816:	f107 020c 	add.w	r2, r7, #12
 800f81a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f81e:	4611      	mov	r1, r2
 800f820:	4618      	mov	r0, r3
 800f822:	f000 fb5b 	bl	800fedc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800f826:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f82a:	4619      	mov	r1, r3
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f7ff ffb1 	bl	800f794 <_ZN11transmitter12sendBlockingENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800f832:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f836:	4618      	mov	r0, r3
 800f838:	f000 faaf 	bl	800fd9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	string ack = " ";
 800f83c:	f107 030c 	add.w	r3, r7, #12
 800f840:	4618      	mov	r0, r3
 800f842:	f000 faaa 	bl	800fd9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800f846:	bf00      	nop
 800f848:	3740      	adds	r7, #64	; 0x40
 800f84a:	46bd      	mov	sp, r7
 800f84c:	bd80      	pop	{r7, pc}
 800f84e:	bf00      	nop
 800f850:	08015424 	.word	0x08015424

0800f854 <_ZN11transmitter4tickEv>:

// Function to be called by the interrupt handler.
// Standard version with start and stop bits, using a state machine.
void transmitter::tick()
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b082      	sub	sp, #8
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]

	// State machine variable to keep track of message progress across interrupts
	static uint8_t state = START_HIGH;

	// When done waiting, move on to the next instruction
	if(holdFor <= 1)
 800f85c:	4b54      	ldr	r3, [pc, #336]	; (800f9b0 <_ZN11transmitter4tickEv+0x15c>)
 800f85e:	781b      	ldrb	r3, [r3, #0]
 800f860:	2b01      	cmp	r3, #1
 800f862:	f200 8098 	bhi.w	800f996 <_ZN11transmitter4tickEv+0x142>
	{
		switch(state)
 800f866:	4b53      	ldr	r3, [pc, #332]	; (800f9b4 <_ZN11transmitter4tickEv+0x160>)
 800f868:	781b      	ldrb	r3, [r3, #0]
 800f86a:	2b06      	cmp	r3, #6
 800f86c:	f200 809b 	bhi.w	800f9a6 <_ZN11transmitter4tickEv+0x152>
 800f870:	a201      	add	r2, pc, #4	; (adr r2, 800f878 <_ZN11transmitter4tickEv+0x24>)
 800f872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f876:	bf00      	nop
 800f878:	0800f895 	.word	0x0800f895
 800f87c:	0800f8ab 	.word	0x0800f8ab
 800f880:	0800f8c7 	.word	0x0800f8c7
 800f884:	0800f91f 	.word	0x0800f91f
 800f888:	0800f92f 	.word	0x0800f92f
 800f88c:	0800f945 	.word	0x0800f945
 800f890:	0800f95b 	.word	0x0800f95b
		{
		case START_HIGH:
			pin(1);
 800f894:	2101      	movs	r1, #1
 800f896:	6878      	ldr	r0, [r7, #4]
 800f898:	f7ff ff44 	bl	800f724 <_ZN11transmitter3pinEh>
			holdFor = LENGTH_START;
 800f89c:	4b44      	ldr	r3, [pc, #272]	; (800f9b0 <_ZN11transmitter4tickEv+0x15c>)
 800f89e:	2203      	movs	r2, #3
 800f8a0:	701a      	strb	r2, [r3, #0]
			state = START_LOW;
 800f8a2:	4b44      	ldr	r3, [pc, #272]	; (800f9b4 <_ZN11transmitter4tickEv+0x160>)
 800f8a4:	2201      	movs	r2, #1
 800f8a6:	701a      	strb	r2, [r3, #0]
			break;
 800f8a8:	e07d      	b.n	800f9a6 <_ZN11transmitter4tickEv+0x152>
		case START_LOW:
			pin(0);
 800f8aa:	2100      	movs	r1, #0
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	f7ff ff39 	bl	800f724 <_ZN11transmitter3pinEh>
			holdFor = LENGTH_START;
 800f8b2:	4b3f      	ldr	r3, [pc, #252]	; (800f9b0 <_ZN11transmitter4tickEv+0x15c>)
 800f8b4:	2203      	movs	r2, #3
 800f8b6:	701a      	strb	r2, [r3, #0]
			state = MSG_HIGH;
 800f8b8:	4b3e      	ldr	r3, [pc, #248]	; (800f9b4 <_ZN11transmitter4tickEv+0x160>)
 800f8ba:	2202      	movs	r2, #2
 800f8bc:	701a      	strb	r2, [r3, #0]
			// Fill the buffer with the message to be sent
			fillBuffer();
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f7ff fe8e 	bl	800f5e0 <_ZN11transmitter10fillBufferEv>
			break;
 800f8c4:	e06f      	b.n	800f9a6 <_ZN11transmitter4tickEv+0x152>
		case MSG_HIGH:
			switch(getNextBit())
 800f8c6:	6878      	ldr	r0, [r7, #4]
 800f8c8:	f7ff fede 	bl	800f688 <_ZN11transmitter10getNextBitEv>
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	2b02      	cmp	r3, #2
 800f8d0:	d01c      	beq.n	800f90c <_ZN11transmitter4tickEv+0xb8>
 800f8d2:	2b02      	cmp	r3, #2
 800f8d4:	dc66      	bgt.n	800f9a4 <_ZN11transmitter4tickEv+0x150>
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d002      	beq.n	800f8e0 <_ZN11transmitter4tickEv+0x8c>
 800f8da:	2b01      	cmp	r3, #1
 800f8dc:	d00b      	beq.n	800f8f6 <_ZN11transmitter4tickEv+0xa2>
			case NO_NEW_BITS:
				pin(0);
				state = STOP_LOW;
				break;
			}
			break;
 800f8de:	e061      	b.n	800f9a4 <_ZN11transmitter4tickEv+0x150>
				pin(1);
 800f8e0:	2101      	movs	r1, #1
 800f8e2:	6878      	ldr	r0, [r7, #4]
 800f8e4:	f7ff ff1e 	bl	800f724 <_ZN11transmitter3pinEh>
				holdFor = LENGTH_ZERO;
 800f8e8:	4b31      	ldr	r3, [pc, #196]	; (800f9b0 <_ZN11transmitter4tickEv+0x15c>)
 800f8ea:	2201      	movs	r2, #1
 800f8ec:	701a      	strb	r2, [r3, #0]
				state = MSG_LOW;
 800f8ee:	4b31      	ldr	r3, [pc, #196]	; (800f9b4 <_ZN11transmitter4tickEv+0x160>)
 800f8f0:	2203      	movs	r2, #3
 800f8f2:	701a      	strb	r2, [r3, #0]
				break;
 800f8f4:	e012      	b.n	800f91c <_ZN11transmitter4tickEv+0xc8>
				pin(1);
 800f8f6:	2101      	movs	r1, #1
 800f8f8:	6878      	ldr	r0, [r7, #4]
 800f8fa:	f7ff ff13 	bl	800f724 <_ZN11transmitter3pinEh>
				holdFor = LENGTH_ONE;
 800f8fe:	4b2c      	ldr	r3, [pc, #176]	; (800f9b0 <_ZN11transmitter4tickEv+0x15c>)
 800f900:	2202      	movs	r2, #2
 800f902:	701a      	strb	r2, [r3, #0]
				state = MSG_LOW;
 800f904:	4b2b      	ldr	r3, [pc, #172]	; (800f9b4 <_ZN11transmitter4tickEv+0x160>)
 800f906:	2203      	movs	r2, #3
 800f908:	701a      	strb	r2, [r3, #0]
				break;
 800f90a:	e007      	b.n	800f91c <_ZN11transmitter4tickEv+0xc8>
				pin(0);
 800f90c:	2100      	movs	r1, #0
 800f90e:	6878      	ldr	r0, [r7, #4]
 800f910:	f7ff ff08 	bl	800f724 <_ZN11transmitter3pinEh>
				state = STOP_LOW;
 800f914:	4b27      	ldr	r3, [pc, #156]	; (800f9b4 <_ZN11transmitter4tickEv+0x160>)
 800f916:	2204      	movs	r2, #4
 800f918:	701a      	strb	r2, [r3, #0]
				break;
 800f91a:	bf00      	nop
			break;
 800f91c:	e042      	b.n	800f9a4 <_ZN11transmitter4tickEv+0x150>
			case MSG_LOW:
				pin(0);
 800f91e:	2100      	movs	r1, #0
 800f920:	6878      	ldr	r0, [r7, #4]
 800f922:	f7ff feff 	bl	800f724 <_ZN11transmitter3pinEh>
				state = MSG_HIGH;
 800f926:	4b23      	ldr	r3, [pc, #140]	; (800f9b4 <_ZN11transmitter4tickEv+0x160>)
 800f928:	2202      	movs	r2, #2
 800f92a:	701a      	strb	r2, [r3, #0]
				break;
 800f92c:	e03b      	b.n	800f9a6 <_ZN11transmitter4tickEv+0x152>
			case STOP_LOW:
				pin(0);
 800f92e:	2100      	movs	r1, #0
 800f930:	6878      	ldr	r0, [r7, #4]
 800f932:	f7ff fef7 	bl	800f724 <_ZN11transmitter3pinEh>
				holdFor = LENGTH_STOP;
 800f936:	4b1e      	ldr	r3, [pc, #120]	; (800f9b0 <_ZN11transmitter4tickEv+0x15c>)
 800f938:	2204      	movs	r2, #4
 800f93a:	701a      	strb	r2, [r3, #0]
				state = STOP_HIGH;
 800f93c:	4b1d      	ldr	r3, [pc, #116]	; (800f9b4 <_ZN11transmitter4tickEv+0x160>)
 800f93e:	2205      	movs	r2, #5
 800f940:	701a      	strb	r2, [r3, #0]
				break;
 800f942:	e030      	b.n	800f9a6 <_ZN11transmitter4tickEv+0x152>
			case STOP_HIGH:
				pin(1);
 800f944:	2101      	movs	r1, #1
 800f946:	6878      	ldr	r0, [r7, #4]
 800f948:	f7ff feec 	bl	800f724 <_ZN11transmitter3pinEh>
				holdFor = LENGTH_STOP;
 800f94c:	4b18      	ldr	r3, [pc, #96]	; (800f9b0 <_ZN11transmitter4tickEv+0x15c>)
 800f94e:	2204      	movs	r2, #4
 800f950:	701a      	strb	r2, [r3, #0]
				state = IDLE;
 800f952:	4b18      	ldr	r3, [pc, #96]	; (800f9b4 <_ZN11transmitter4tickEv+0x160>)
 800f954:	2206      	movs	r2, #6
 800f956:	701a      	strb	r2, [r3, #0]
				break;
 800f958:	e025      	b.n	800f9a6 <_ZN11transmitter4tickEv+0x152>
			case IDLE:
				pin(0);
 800f95a:	2100      	movs	r1, #0
 800f95c:	6878      	ldr	r0, [r7, #4]
 800f95e:	f7ff fee1 	bl	800f724 <_ZN11transmitter3pinEh>
				// Notify that the message has been sent,
				// for sendBlocking()
				messageSent = true;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	2201      	movs	r2, #1
 800f966:	701a      	strb	r2, [r3, #0]
				if(messages.empty())
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	3304      	adds	r3, #4
 800f96c:	4618      	mov	r0, r3
 800f96e:	f7fe fed1 	bl	800e714 <_ZNKSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE5emptyEv>
 800f972:	4603      	mov	r3, r0
 800f974:	2b00      	cmp	r3, #0
 800f976:	d003      	beq.n	800f980 <_ZN11transmitter4tickEv+0x12c>
				{
					disable();
 800f978:	6878      	ldr	r0, [r7, #4]
 800f97a:	f7ff fe23 	bl	800f5c4 <_ZN11transmitter7disableEv>
				{
					holdFor = 10;
					bitPointer = 0;
					state = START_HIGH;
				}
				break;
 800f97e:	e012      	b.n	800f9a6 <_ZN11transmitter4tickEv+0x152>
					holdFor = 10;
 800f980:	4b0b      	ldr	r3, [pc, #44]	; (800f9b0 <_ZN11transmitter4tickEv+0x15c>)
 800f982:	220a      	movs	r2, #10
 800f984:	701a      	strb	r2, [r3, #0]
					bitPointer = 0;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	2200      	movs	r2, #0
 800f98a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
					state = START_HIGH;
 800f98e:	4b09      	ldr	r3, [pc, #36]	; (800f9b4 <_ZN11transmitter4tickEv+0x160>)
 800f990:	2200      	movs	r2, #0
 800f992:	701a      	strb	r2, [r3, #0]
				break;
 800f994:	e007      	b.n	800f9a6 <_ZN11transmitter4tickEv+0x152>
		}
	}
	else
	{
		holdFor--;
 800f996:	4b06      	ldr	r3, [pc, #24]	; (800f9b0 <_ZN11transmitter4tickEv+0x15c>)
 800f998:	781b      	ldrb	r3, [r3, #0]
 800f99a:	3b01      	subs	r3, #1
 800f99c:	b2da      	uxtb	r2, r3
 800f99e:	4b04      	ldr	r3, [pc, #16]	; (800f9b0 <_ZN11transmitter4tickEv+0x15c>)
 800f9a0:	701a      	strb	r2, [r3, #0]
	}
}
 800f9a2:	e000      	b.n	800f9a6 <_ZN11transmitter4tickEv+0x152>
			break;
 800f9a4:	bf00      	nop
}
 800f9a6:	bf00      	nop
 800f9a8:	3708      	adds	r7, #8
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}
 800f9ae:	bf00      	nop
 800f9b0:	20000038 	.word	0x20000038
 800f9b4:	20004d50 	.word	0x20004d50

0800f9b8 <_ZNSt6bitsetILj8EEC1Ey>:
      constexpr bitset(unsigned long long __val) noexcept
 800f9b8:	b590      	push	{r4, r7, lr}
 800f9ba:	b085      	sub	sp, #20
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	60f8      	str	r0, [r7, #12]
 800f9c0:	e9c7 2300 	strd	r2, r3, [r7]
      : _Base(_Sanitize_val<_Nb>::_S_do_sanitize_val(__val)) { }
 800f9c4:	68fc      	ldr	r4, [r7, #12]
 800f9c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f9ca:	f000 f83b 	bl	800fa44 <_ZNSt13_Sanitize_valILj8ELb1EE18_S_do_sanitize_valEy>
 800f9ce:	4602      	mov	r2, r0
 800f9d0:	460b      	mov	r3, r1
 800f9d2:	4620      	mov	r0, r4
 800f9d4:	f7ff fdd7 	bl	800f586 <_ZNSt12_Base_bitsetILj1EEC1Ey>
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	4618      	mov	r0, r3
 800f9dc:	3714      	adds	r7, #20
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	bd90      	pop	{r4, r7, pc}

0800f9e2 <_ZNSt6bitsetILj8EEixEj>:
      operator[](size_t __position)
 800f9e2:	b580      	push	{r7, lr}
 800f9e4:	b084      	sub	sp, #16
 800f9e6:	af00      	add	r7, sp, #0
 800f9e8:	60f8      	str	r0, [r7, #12]
 800f9ea:	60b9      	str	r1, [r7, #8]
 800f9ec:	607a      	str	r2, [r7, #4]
      { return reference(*this, __position); }
 800f9ee:	687a      	ldr	r2, [r7, #4]
 800f9f0:	68b9      	ldr	r1, [r7, #8]
 800f9f2:	68f8      	ldr	r0, [r7, #12]
 800f9f4:	f000 f83d 	bl	800fa72 <_ZNSt6bitsetILj8EE9referenceC1ERS0_j>
 800f9f8:	68f8      	ldr	r0, [r7, #12]
 800f9fa:	3710      	adds	r7, #16
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}

0800fa00 <_ZNSt6bitsetILj8EE9referenceD1Ev>:
	~reference() _GLIBCXX_NOEXCEPT
 800fa00:	b480      	push	{r7}
 800fa02:	b083      	sub	sp, #12
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
	{ }
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	370c      	adds	r7, #12
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa14:	4770      	bx	lr

0800fa16 <_ZNKSt6bitsetILj8EE9referencecvbEv>:
	operator bool() const _GLIBCXX_NOEXCEPT
 800fa16:	b590      	push	{r4, r7, lr}
 800fa18:	b083      	sub	sp, #12
 800fa1a:	af00      	add	r7, sp, #0
 800fa1c:	6078      	str	r0, [r7, #4]
	{ return (*(_M_wp) & _Base::_S_maskbit(_M_bpos)) != 0; }
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	681c      	ldr	r4, [r3, #0]
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	685b      	ldr	r3, [r3, #4]
 800fa28:	4618      	mov	r0, r3
 800fa2a:	f7fe fbb5 	bl	800e198 <_ZNSt12_Base_bitsetILj1EE10_S_maskbitEj>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	4023      	ands	r3, r4
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	bf14      	ite	ne
 800fa36:	2301      	movne	r3, #1
 800fa38:	2300      	moveq	r3, #0
 800fa3a:	b2db      	uxtb	r3, r3
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	370c      	adds	r7, #12
 800fa40:	46bd      	mov	sp, r7
 800fa42:	bd90      	pop	{r4, r7, pc}

0800fa44 <_ZNSt13_Sanitize_valILj8ELb1EE18_S_do_sanitize_valEy>:
      _S_do_sanitize_val(unsigned long long __val)
 800fa44:	b4b0      	push	{r4, r5, r7}
 800fa46:	b083      	sub	sp, #12
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	e9c7 0100 	strd	r0, r1, [r7]
      { return __val & ~((~static_cast<unsigned long long>(0)) << _Nb); }
 800fa4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa52:	f04f 00ff 	mov.w	r0, #255	; 0xff
 800fa56:	f04f 0100 	mov.w	r1, #0
 800fa5a:	ea02 0400 	and.w	r4, r2, r0
 800fa5e:	ea03 0501 	and.w	r5, r3, r1
 800fa62:	4622      	mov	r2, r4
 800fa64:	462b      	mov	r3, r5
 800fa66:	4610      	mov	r0, r2
 800fa68:	4619      	mov	r1, r3
 800fa6a:	370c      	adds	r7, #12
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bcb0      	pop	{r4, r5, r7}
 800fa70:	4770      	bx	lr

0800fa72 <_ZNSt6bitsetILj8EE9referenceC1ERS0_j>:
	reference(bitset& __b, size_t __pos) _GLIBCXX_NOEXCEPT
 800fa72:	b580      	push	{r7, lr}
 800fa74:	b084      	sub	sp, #16
 800fa76:	af00      	add	r7, sp, #0
 800fa78:	60f8      	str	r0, [r7, #12]
 800fa7a:	60b9      	str	r1, [r7, #8]
 800fa7c:	607a      	str	r2, [r7, #4]
	  _M_wp = &__b._M_getword(__pos);
 800fa7e:	68bb      	ldr	r3, [r7, #8]
 800fa80:	6879      	ldr	r1, [r7, #4]
 800fa82:	4618      	mov	r0, r3
 800fa84:	f7fe fb97 	bl	800e1b6 <_ZNSt12_Base_bitsetILj1EE10_M_getwordEj>
 800fa88:	4602      	mov	r2, r0
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	601a      	str	r2, [r3, #0]
	  _M_bpos = _Base::_S_whichbit(__pos);
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f7fe fb75 	bl	800e17e <_ZNSt12_Base_bitsetILj1EE11_S_whichbitEj>
 800fa94:	4602      	mov	r2, r0
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	605a      	str	r2, [r3, #4]
	}
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	3710      	adds	r7, #16
 800faa0:	46bd      	mov	sp, r7
 800faa2:	bd80      	pop	{r7, pc}

0800faa4 <_ZdlPv>:
 800faa4:	f000 baa6 	b.w	800fff4 <free>

0800faa8 <_Znwj>:
 800faa8:	2801      	cmp	r0, #1
 800faaa:	bf38      	it	cc
 800faac:	2001      	movcc	r0, #1
 800faae:	b510      	push	{r4, lr}
 800fab0:	4604      	mov	r4, r0
 800fab2:	4620      	mov	r0, r4
 800fab4:	f000 fa96 	bl	800ffe4 <malloc>
 800fab8:	b930      	cbnz	r0, 800fac8 <_Znwj+0x20>
 800faba:	f000 fa59 	bl	800ff70 <_ZSt15get_new_handlerv>
 800fabe:	b908      	cbnz	r0, 800fac4 <_Znwj+0x1c>
 800fac0:	f000 fa5e 	bl	800ff80 <abort>
 800fac4:	4780      	blx	r0
 800fac6:	e7f4      	b.n	800fab2 <_Znwj+0xa>
 800fac8:	bd10      	pop	{r4, pc}

0800faca <_ZNSaIcEC1Ev>:
 800faca:	4770      	bx	lr

0800facc <_ZNSaIcED1Ev>:
 800facc:	4770      	bx	lr

0800face <_ZSt17__throw_bad_allocv>:
 800face:	b508      	push	{r3, lr}
 800fad0:	f000 fa56 	bl	800ff80 <abort>

0800fad4 <_ZSt19__throw_logic_errorPKc>:
 800fad4:	b508      	push	{r3, lr}
 800fad6:	f000 fa53 	bl	800ff80 <abort>

0800fada <_ZSt20__throw_length_errorPKc>:
 800fada:	b508      	push	{r3, lr}
 800fadc:	f000 fa50 	bl	800ff80 <abort>

0800fae0 <_ZSt24__throw_out_of_range_fmtPKcz>:
 800fae0:	b40f      	push	{r0, r1, r2, r3}
 800fae2:	b580      	push	{r7, lr}
 800fae4:	b084      	sub	sp, #16
 800fae6:	af00      	add	r7, sp, #0
 800fae8:	f107 0418 	add.w	r4, r7, #24
 800faec:	f854 2b04 	ldr.w	r2, [r4], #4
 800faf0:	607a      	str	r2, [r7, #4]
 800faf2:	4610      	mov	r0, r2
 800faf4:	f7f0 fbc4 	bl	8000280 <strlen>
 800faf8:	f200 2307 	addw	r3, r0, #519	; 0x207
 800fafc:	f023 0307 	bic.w	r3, r3, #7
 800fb00:	ebad 0d03 	sub.w	sp, sp, r3
 800fb04:	f500 7100 	add.w	r1, r0, #512	; 0x200
 800fb08:	687a      	ldr	r2, [r7, #4]
 800fb0a:	60fc      	str	r4, [r7, #12]
 800fb0c:	4623      	mov	r3, r4
 800fb0e:	4668      	mov	r0, sp
 800fb10:	f000 f854 	bl	800fbbc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 800fb14:	f000 fa34 	bl	800ff80 <abort>

0800fb18 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b09c      	sub	sp, #112	; 0x70
 800fb1c:	4606      	mov	r6, r0
 800fb1e:	af00      	add	r7, sp, #0
 800fb20:	460c      	mov	r4, r1
 800fb22:	1ba4      	subs	r4, r4, r6
 800fb24:	490e      	ldr	r1, [pc, #56]	; (800fb60 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 800fb26:	2269      	movs	r2, #105	; 0x69
 800fb28:	1d38      	adds	r0, r7, #4
 800fb2a:	f000 fa6b 	bl	8010004 <memcpy>
 800fb2e:	f104 0370 	add.w	r3, r4, #112	; 0x70
 800fb32:	f023 0307 	bic.w	r3, r3, #7
 800fb36:	ebad 0d03 	sub.w	sp, sp, r3
 800fb3a:	466d      	mov	r5, sp
 800fb3c:	2268      	movs	r2, #104	; 0x68
 800fb3e:	1d39      	adds	r1, r7, #4
 800fb40:	4628      	mov	r0, r5
 800fb42:	f000 fa5f 	bl	8010004 <memcpy>
 800fb46:	4622      	mov	r2, r4
 800fb48:	4631      	mov	r1, r6
 800fb4a:	f105 0068 	add.w	r0, r5, #104	; 0x68
 800fb4e:	442c      	add	r4, r5
 800fb50:	f000 fa58 	bl	8010004 <memcpy>
 800fb54:	2300      	movs	r3, #0
 800fb56:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800fb5a:	4628      	mov	r0, r5
 800fb5c:	f7ff ffba 	bl	800fad4 <_ZSt19__throw_logic_errorPKc>
 800fb60:	08016a9c 	.word	0x08016a9c

0800fb64 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 800fb64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	b084      	sub	sp, #16
 800fb6c:	466d      	mov	r5, sp
 800fb6e:	f105 040c 	add.w	r4, r5, #12
 800fb72:	f8df 8044 	ldr.w	r8, [pc, #68]	; 800fbb8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 800fb76:	4623      	mov	r3, r4
 800fb78:	f04f 0c0a 	mov.w	ip, #10
 800fb7c:	fbb2 f6fc 	udiv	r6, r2, ip
 800fb80:	fb0c 2e16 	mls	lr, ip, r6, r2
 800fb84:	f818 e00e 	ldrb.w	lr, [r8, lr]
 800fb88:	f803 ed01 	strb.w	lr, [r3, #-1]!
 800fb8c:	4696      	mov	lr, r2
 800fb8e:	f1be 0f09 	cmp.w	lr, #9
 800fb92:	4632      	mov	r2, r6
 800fb94:	d8f2      	bhi.n	800fb7c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 800fb96:	1ae4      	subs	r4, r4, r3
 800fb98:	428c      	cmp	r4, r1
 800fb9a:	d809      	bhi.n	800fbb0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 800fb9c:	f1c4 010c 	rsb	r1, r4, #12
 800fba0:	4622      	mov	r2, r4
 800fba2:	4429      	add	r1, r5
 800fba4:	f000 fa2e 	bl	8010004 <memcpy>
 800fba8:	4620      	mov	r0, r4
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbb0:	f04f 34ff 	mov.w	r4, #4294967295
 800fbb4:	e7f8      	b.n	800fba8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 800fbb6:	bf00      	nop
 800fbb8:	08016b05 	.word	0x08016b05

0800fbbc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 800fbbc:	3901      	subs	r1, #1
 800fbbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbc2:	4607      	mov	r7, r0
 800fbc4:	4615      	mov	r5, r2
 800fbc6:	eb00 0801 	add.w	r8, r0, r1
 800fbca:	4604      	mov	r4, r0
 800fbcc:	782a      	ldrb	r2, [r5, #0]
 800fbce:	b362      	cbz	r2, 800fc2a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 800fbd0:	4544      	cmp	r4, r8
 800fbd2:	d22e      	bcs.n	800fc32 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 800fbd4:	2a25      	cmp	r2, #37	; 0x25
 800fbd6:	d107      	bne.n	800fbe8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800fbd8:	786a      	ldrb	r2, [r5, #1]
 800fbda:	2a73      	cmp	r2, #115	; 0x73
 800fbdc:	d009      	beq.n	800fbf2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 800fbde:	2a7a      	cmp	r2, #122	; 0x7a
 800fbe0:	d012      	beq.n	800fc08 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 800fbe2:	2a25      	cmp	r2, #37	; 0x25
 800fbe4:	d100      	bne.n	800fbe8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800fbe6:	3501      	adds	r5, #1
 800fbe8:	f815 2b01 	ldrb.w	r2, [r5], #1
 800fbec:	f804 2b01 	strb.w	r2, [r4], #1
 800fbf0:	e7ec      	b.n	800fbcc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800fbf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbf6:	3a01      	subs	r2, #1
 800fbf8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800fbfc:	b1e9      	cbz	r1, 800fc3a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7e>
 800fbfe:	4544      	cmp	r4, r8
 800fc00:	d017      	beq.n	800fc32 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 800fc02:	f804 1b01 	strb.w	r1, [r4], #1
 800fc06:	e7f7      	b.n	800fbf8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 800fc08:	78aa      	ldrb	r2, [r5, #2]
 800fc0a:	2a75      	cmp	r2, #117	; 0x75
 800fc0c:	d1ec      	bne.n	800fbe8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800fc0e:	461e      	mov	r6, r3
 800fc10:	eba8 0104 	sub.w	r1, r8, r4
 800fc14:	f856 2b04 	ldr.w	r2, [r6], #4
 800fc18:	4620      	mov	r0, r4
 800fc1a:	f7ff ffa3 	bl	800fb64 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 800fc1e:	2800      	cmp	r0, #0
 800fc20:	dd07      	ble.n	800fc32 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 800fc22:	4404      	add	r4, r0
 800fc24:	3503      	adds	r5, #3
 800fc26:	4633      	mov	r3, r6
 800fc28:	e7d0      	b.n	800fbcc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800fc2a:	7022      	strb	r2, [r4, #0]
 800fc2c:	1be0      	subs	r0, r4, r7
 800fc2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc32:	4621      	mov	r1, r4
 800fc34:	4638      	mov	r0, r7
 800fc36:	f7ff ff6f 	bl	800fb18 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 800fc3a:	3502      	adds	r5, #2
 800fc3c:	e7c6      	b.n	800fbcc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>

0800fc3e <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 800fc3e:	b10a      	cbz	r2, 800fc44 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 800fc40:	f000 b9e0 	b.w	8010004 <memcpy>
 800fc44:	4770      	bx	lr
	...

0800fc48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800fc48:	b508      	push	{r3, lr}
 800fc4a:	680b      	ldr	r3, [r1, #0]
 800fc4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc50:	d302      	bcc.n	800fc58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800fc52:	480d      	ldr	r0, [pc, #52]	; (800fc88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800fc54:	f7ff ff41 	bl	800fada <_ZSt20__throw_length_errorPKc>
 800fc58:	4293      	cmp	r3, r2
 800fc5a:	d90b      	bls.n	800fc74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800fc5c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800fc60:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800fc64:	d206      	bcs.n	800fc74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800fc66:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800fc6a:	bf2a      	itet	cs
 800fc6c:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800fc70:	6008      	strcc	r0, [r1, #0]
 800fc72:	600b      	strcs	r3, [r1, #0]
 800fc74:	6808      	ldr	r0, [r1, #0]
 800fc76:	3001      	adds	r0, #1
 800fc78:	d501      	bpl.n	800fc7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800fc7a:	f7ff ff28 	bl	800face <_ZSt17__throw_bad_allocv>
 800fc7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800fc82:	f7ff bf11 	b.w	800faa8 <_Znwj>
 800fc86:	bf00      	nop
 800fc88:	08016b10 	.word	0x08016b10

0800fc8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800fc8c:	f850 3b08 	ldr.w	r3, [r0], #8
 800fc90:	4283      	cmp	r3, r0
 800fc92:	d002      	beq.n	800fc9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800fc94:	4618      	mov	r0, r3
 800fc96:	f7ff bf05 	b.w	800faa4 <_ZdlPv>
 800fc9a:	4770      	bx	lr

0800fc9c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 800fc9c:	6840      	ldr	r0, [r0, #4]
 800fc9e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800fca2:	3901      	subs	r1, #1
 800fca4:	1a09      	subs	r1, r1, r0
 800fca6:	4291      	cmp	r1, r2
 800fca8:	b508      	push	{r3, lr}
 800fcaa:	d202      	bcs.n	800fcb2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 800fcac:	4618      	mov	r0, r3
 800fcae:	f7ff ff14 	bl	800fada <_ZSt20__throw_length_errorPKc>
 800fcb2:	bd08      	pop	{r3, pc}

0800fcb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800fcb4:	2a01      	cmp	r2, #1
 800fcb6:	b510      	push	{r4, lr}
 800fcb8:	d102      	bne.n	800fcc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 800fcba:	780a      	ldrb	r2, [r1, #0]
 800fcbc:	7002      	strb	r2, [r0, #0]
 800fcbe:	bd10      	pop	{r4, pc}
 800fcc0:	f7ff ffbd 	bl	800fc3e <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800fcc4:	e7fb      	b.n	800fcbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0800fcc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 800fcc6:	2a01      	cmp	r2, #1
 800fcc8:	b430      	push	{r4, r5}
 800fcca:	d103      	bne.n	800fcd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 800fccc:	780b      	ldrb	r3, [r1, #0]
 800fcce:	7003      	strb	r3, [r0, #0]
 800fcd0:	bc30      	pop	{r4, r5}
 800fcd2:	4770      	bx	lr
 800fcd4:	2a00      	cmp	r2, #0
 800fcd6:	d0fb      	beq.n	800fcd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 800fcd8:	bc30      	pop	{r4, r5}
 800fcda:	f000 b9a1 	b.w	8010020 <memmove>

0800fcde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 800fcde:	460b      	mov	r3, r1
 800fce0:	2b01      	cmp	r3, #1
 800fce2:	b410      	push	{r4}
 800fce4:	4611      	mov	r1, r2
 800fce6:	4604      	mov	r4, r0
 800fce8:	d103      	bne.n	800fcf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 800fcea:	7022      	strb	r2, [r4, #0]
 800fcec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fcf0:	4770      	bx	lr
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d0fa      	beq.n	800fcec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 800fcf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fcfa:	461a      	mov	r2, r3
 800fcfc:	f000 b9aa 	b.w	8010054 <memset>

0800fd00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800fd00:	b508      	push	{r3, lr}
 800fd02:	1a52      	subs	r2, r2, r1
 800fd04:	f7ff ffd6 	bl	800fcb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800fd08:	bd08      	pop	{r3, pc}

0800fd0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800fd0a:	b508      	push	{r3, lr}
 800fd0c:	1a52      	subs	r2, r2, r1
 800fd0e:	f7ff ffd1 	bl	800fcb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800fd12:	bd08      	pop	{r3, pc}

0800fd14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800fd14:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd18:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fd1a:	461f      	mov	r7, r3
 800fd1c:	6843      	ldr	r3, [r0, #4]
 800fd1e:	eb01 0802 	add.w	r8, r1, r2
 800fd22:	1ab2      	subs	r2, r6, r2
 800fd24:	441a      	add	r2, r3
 800fd26:	eba3 0908 	sub.w	r9, r3, r8
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	9201      	str	r2, [sp, #4]
 800fd2e:	f853 2b08 	ldr.w	r2, [r3], #8
 800fd32:	429a      	cmp	r2, r3
 800fd34:	bf18      	it	ne
 800fd36:	6882      	ldrne	r2, [r0, #8]
 800fd38:	460d      	mov	r5, r1
 800fd3a:	bf08      	it	eq
 800fd3c:	220f      	moveq	r2, #15
 800fd3e:	a901      	add	r1, sp, #4
 800fd40:	4604      	mov	r4, r0
 800fd42:	f7ff ff81 	bl	800fc48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800fd46:	4682      	mov	sl, r0
 800fd48:	b11d      	cbz	r5, 800fd52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800fd4a:	6821      	ldr	r1, [r4, #0]
 800fd4c:	462a      	mov	r2, r5
 800fd4e:	f7ff ffb1 	bl	800fcb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800fd52:	b137      	cbz	r7, 800fd62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800fd54:	b12e      	cbz	r6, 800fd62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800fd56:	4632      	mov	r2, r6
 800fd58:	4639      	mov	r1, r7
 800fd5a:	eb0a 0005 	add.w	r0, sl, r5
 800fd5e:	f7ff ffa9 	bl	800fcb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800fd62:	f1b9 0f00 	cmp.w	r9, #0
 800fd66:	d007      	beq.n	800fd78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 800fd68:	6821      	ldr	r1, [r4, #0]
 800fd6a:	4435      	add	r5, r6
 800fd6c:	464a      	mov	r2, r9
 800fd6e:	4441      	add	r1, r8
 800fd70:	eb0a 0005 	add.w	r0, sl, r5
 800fd74:	f7ff ff9e 	bl	800fcb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800fd78:	4620      	mov	r0, r4
 800fd7a:	f7ff ff87 	bl	800fc8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800fd7e:	9b01      	ldr	r3, [sp, #4]
 800fd80:	f8c4 a000 	str.w	sl, [r4]
 800fd84:	60a3      	str	r3, [r4, #8]
 800fd86:	b002      	add	sp, #8
 800fd88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800fd8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800fd8c:	f100 0208 	add.w	r2, r0, #8
 800fd90:	6002      	str	r2, [r0, #0]
 800fd92:	2200      	movs	r2, #0
 800fd94:	6042      	str	r2, [r0, #4]
 800fd96:	7202      	strb	r2, [r0, #8]
 800fd98:	4770      	bx	lr

0800fd9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800fd9a:	b510      	push	{r4, lr}
 800fd9c:	4604      	mov	r4, r0
 800fd9e:	f7ff ff75 	bl	800fc8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800fda2:	4620      	mov	r0, r4
 800fda4:	bd10      	pop	{r4, pc}

0800fda6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 800fda6:	6840      	ldr	r0, [r0, #4]
 800fda8:	4770      	bx	lr

0800fdaa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 800fdaa:	6800      	ldr	r0, [r0, #0]
 800fdac:	4408      	add	r0, r1
 800fdae:	4770      	bx	lr

0800fdb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fdb4:	f853 2b08 	ldr.w	r2, [r3], #8
 800fdb8:	6846      	ldr	r6, [r0, #4]
 800fdba:	429a      	cmp	r2, r3
 800fdbc:	bf18      	it	ne
 800fdbe:	6883      	ldrne	r3, [r0, #8]
 800fdc0:	f106 0501 	add.w	r5, r6, #1
 800fdc4:	bf08      	it	eq
 800fdc6:	230f      	moveq	r3, #15
 800fdc8:	429d      	cmp	r5, r3
 800fdca:	4604      	mov	r4, r0
 800fdcc:	460f      	mov	r7, r1
 800fdce:	d906      	bls.n	800fdde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2e>
 800fdd0:	2301      	movs	r3, #1
 800fdd2:	9300      	str	r3, [sp, #0]
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	461a      	mov	r2, r3
 800fdd8:	4631      	mov	r1, r6
 800fdda:	f7ff ff9b 	bl	800fd14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800fdde:	6823      	ldr	r3, [r4, #0]
 800fde0:	559f      	strb	r7, [r3, r6]
 800fde2:	6823      	ldr	r3, [r4, #0]
 800fde4:	6065      	str	r5, [r4, #4]
 800fde6:	2200      	movs	r2, #0
 800fde8:	555a      	strb	r2, [r3, r5]
 800fdea:	b003      	add	sp, #12
 800fdec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fdee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>:
 800fdee:	b510      	push	{r4, lr}
 800fdf0:	4604      	mov	r4, r0
 800fdf2:	f7ff ffdd 	bl	800fdb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
 800fdf6:	4620      	mov	r0, r4
 800fdf8:	bd10      	pop	{r4, pc}
	...

0800fdfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 800fdfc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800fe00:	4616      	mov	r6, r2
 800fe02:	461d      	mov	r5, r3
 800fe04:	4604      	mov	r4, r0
 800fe06:	4b1c      	ldr	r3, [pc, #112]	; (800fe78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x7c>)
 800fe08:	462a      	mov	r2, r5
 800fe0a:	460f      	mov	r7, r1
 800fe0c:	4631      	mov	r1, r6
 800fe0e:	f7ff ff45 	bl	800fc9c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800fe12:	4623      	mov	r3, r4
 800fe14:	6862      	ldr	r2, [r4, #4]
 800fe16:	f853 0b08 	ldr.w	r0, [r3], #8
 800fe1a:	4298      	cmp	r0, r3
 800fe1c:	bf18      	it	ne
 800fe1e:	68a3      	ldrne	r3, [r4, #8]
 800fe20:	eba5 0806 	sub.w	r8, r5, r6
 800fe24:	4490      	add	r8, r2
 800fe26:	bf08      	it	eq
 800fe28:	230f      	moveq	r3, #15
 800fe2a:	4543      	cmp	r3, r8
 800fe2c:	d31b      	bcc.n	800fe66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x6a>
 800fe2e:	19f3      	adds	r3, r6, r7
 800fe30:	1ad2      	subs	r2, r2, r3
 800fe32:	d006      	beq.n	800fe42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 800fe34:	42ae      	cmp	r6, r5
 800fe36:	d004      	beq.n	800fe42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 800fe38:	4438      	add	r0, r7
 800fe3a:	1981      	adds	r1, r0, r6
 800fe3c:	4428      	add	r0, r5
 800fe3e:	f7ff ff42 	bl	800fcc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800fe42:	b135      	cbz	r5, 800fe52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x56>
 800fe44:	6820      	ldr	r0, [r4, #0]
 800fe46:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800fe4a:	4629      	mov	r1, r5
 800fe4c:	4438      	add	r0, r7
 800fe4e:	f7ff ff46 	bl	800fcde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 800fe52:	6823      	ldr	r3, [r4, #0]
 800fe54:	f8c4 8004 	str.w	r8, [r4, #4]
 800fe58:	2200      	movs	r2, #0
 800fe5a:	4620      	mov	r0, r4
 800fe5c:	f803 2008 	strb.w	r2, [r3, r8]
 800fe60:	b002      	add	sp, #8
 800fe62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe66:	9500      	str	r5, [sp, #0]
 800fe68:	2300      	movs	r3, #0
 800fe6a:	4632      	mov	r2, r6
 800fe6c:	4639      	mov	r1, r7
 800fe6e:	4620      	mov	r0, r4
 800fe70:	f7ff ff50 	bl	800fd14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800fe74:	e7e5      	b.n	800fe42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 800fe76:	bf00      	nop
 800fe78:	08016b28 	.word	0x08016b28

0800fe7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEjc>:
 800fe7c:	b507      	push	{r0, r1, r2, lr}
 800fe7e:	9200      	str	r2, [sp, #0]
 800fe80:	460b      	mov	r3, r1
 800fe82:	6842      	ldr	r2, [r0, #4]
 800fe84:	2100      	movs	r1, #0
 800fe86:	f7ff ffb9 	bl	800fdfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 800fe8a:	b003      	add	sp, #12
 800fe8c:	f85d fb04 	ldr.w	pc, [sp], #4

0800fe90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800fe90:	6800      	ldr	r0, [r0, #0]
 800fe92:	4770      	bx	lr

0800fe94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 800fe94:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fe96:	4604      	mov	r4, r0
 800fe98:	4616      	mov	r6, r2
 800fe9a:	460d      	mov	r5, r1
 800fe9c:	b919      	cbnz	r1, 800fea6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800fe9e:	b112      	cbz	r2, 800fea6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800fea0:	480d      	ldr	r0, [pc, #52]	; (800fed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 800fea2:	f7ff fe17 	bl	800fad4 <_ZSt19__throw_logic_errorPKc>
 800fea6:	1b73      	subs	r3, r6, r5
 800fea8:	2b0f      	cmp	r3, #15
 800feaa:	9301      	str	r3, [sp, #4]
 800feac:	d907      	bls.n	800febe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 800feae:	2200      	movs	r2, #0
 800feb0:	a901      	add	r1, sp, #4
 800feb2:	4620      	mov	r0, r4
 800feb4:	f7ff fec8 	bl	800fc48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800feb8:	9b01      	ldr	r3, [sp, #4]
 800feba:	6020      	str	r0, [r4, #0]
 800febc:	60a3      	str	r3, [r4, #8]
 800febe:	4632      	mov	r2, r6
 800fec0:	4629      	mov	r1, r5
 800fec2:	6820      	ldr	r0, [r4, #0]
 800fec4:	f7ff ff1c 	bl	800fd00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 800fec8:	9b01      	ldr	r3, [sp, #4]
 800feca:	6822      	ldr	r2, [r4, #0]
 800fecc:	6063      	str	r3, [r4, #4]
 800fece:	2100      	movs	r1, #0
 800fed0:	54d1      	strb	r1, [r2, r3]
 800fed2:	b002      	add	sp, #8
 800fed4:	bd70      	pop	{r4, r5, r6, pc}
 800fed6:	bf00      	nop
 800fed8:	08016b45 	.word	0x08016b45

0800fedc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800fedc:	b538      	push	{r3, r4, r5, lr}
 800fede:	f100 0308 	add.w	r3, r0, #8
 800fee2:	6003      	str	r3, [r0, #0]
 800fee4:	e9d1 5200 	ldrd	r5, r2, [r1]
 800fee8:	4604      	mov	r4, r0
 800feea:	f04f 0300 	mov.w	r3, #0
 800feee:	442a      	add	r2, r5
 800fef0:	4629      	mov	r1, r5
 800fef2:	f7ff ffcf 	bl	800fe94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 800fef6:	4620      	mov	r0, r4
 800fef8:	bd38      	pop	{r3, r4, r5, pc}
	...

0800fefc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800fefc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fefe:	4604      	mov	r4, r0
 800ff00:	4616      	mov	r6, r2
 800ff02:	460d      	mov	r5, r1
 800ff04:	b919      	cbnz	r1, 800ff0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800ff06:	b112      	cbz	r2, 800ff0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800ff08:	480d      	ldr	r0, [pc, #52]	; (800ff40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800ff0a:	f7ff fde3 	bl	800fad4 <_ZSt19__throw_logic_errorPKc>
 800ff0e:	1b73      	subs	r3, r6, r5
 800ff10:	2b0f      	cmp	r3, #15
 800ff12:	9301      	str	r3, [sp, #4]
 800ff14:	d907      	bls.n	800ff26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800ff16:	2200      	movs	r2, #0
 800ff18:	a901      	add	r1, sp, #4
 800ff1a:	4620      	mov	r0, r4
 800ff1c:	f7ff fe94 	bl	800fc48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800ff20:	9b01      	ldr	r3, [sp, #4]
 800ff22:	6020      	str	r0, [r4, #0]
 800ff24:	60a3      	str	r3, [r4, #8]
 800ff26:	4632      	mov	r2, r6
 800ff28:	4629      	mov	r1, r5
 800ff2a:	6820      	ldr	r0, [r4, #0]
 800ff2c:	f7ff feed 	bl	800fd0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800ff30:	9b01      	ldr	r3, [sp, #4]
 800ff32:	6822      	ldr	r2, [r4, #0]
 800ff34:	6063      	str	r3, [r4, #4]
 800ff36:	2100      	movs	r1, #0
 800ff38:	54d1      	strb	r1, [r2, r3]
 800ff3a:	b002      	add	sp, #8
 800ff3c:	bd70      	pop	{r4, r5, r6, pc}
 800ff3e:	bf00      	nop
 800ff40:	08016b45 	.word	0x08016b45

0800ff44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800ff44:	b538      	push	{r3, r4, r5, lr}
 800ff46:	f100 0308 	add.w	r3, r0, #8
 800ff4a:	4604      	mov	r4, r0
 800ff4c:	6003      	str	r3, [r0, #0]
 800ff4e:	460d      	mov	r5, r1
 800ff50:	b159      	cbz	r1, 800ff6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800ff52:	4608      	mov	r0, r1
 800ff54:	f7f0 f994 	bl	8000280 <strlen>
 800ff58:	182a      	adds	r2, r5, r0
 800ff5a:	4620      	mov	r0, r4
 800ff5c:	f04f 0300 	mov.w	r3, #0
 800ff60:	4629      	mov	r1, r5
 800ff62:	f7ff ffcb 	bl	800fefc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800ff66:	4620      	mov	r0, r4
 800ff68:	bd38      	pop	{r3, r4, r5, pc}
 800ff6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ff6e:	e7f4      	b.n	800ff5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800ff70 <_ZSt15get_new_handlerv>:
 800ff70:	4b02      	ldr	r3, [pc, #8]	; (800ff7c <_ZSt15get_new_handlerv+0xc>)
 800ff72:	6818      	ldr	r0, [r3, #0]
 800ff74:	f3bf 8f5b 	dmb	ish
 800ff78:	4770      	bx	lr
 800ff7a:	bf00      	nop
 800ff7c:	20004d54 	.word	0x20004d54

0800ff80 <abort>:
 800ff80:	b508      	push	{r3, lr}
 800ff82:	2006      	movs	r0, #6
 800ff84:	f000 ffd0 	bl	8010f28 <raise>
 800ff88:	2001      	movs	r0, #1
 800ff8a:	f7f2 feaf 	bl	8002cec <_exit>
	...

0800ff90 <__errno>:
 800ff90:	4b01      	ldr	r3, [pc, #4]	; (800ff98 <__errno+0x8>)
 800ff92:	6818      	ldr	r0, [r3, #0]
 800ff94:	4770      	bx	lr
 800ff96:	bf00      	nop
 800ff98:	2000003c 	.word	0x2000003c

0800ff9c <__libc_init_array>:
 800ff9c:	b570      	push	{r4, r5, r6, lr}
 800ff9e:	4d0d      	ldr	r5, [pc, #52]	; (800ffd4 <__libc_init_array+0x38>)
 800ffa0:	4c0d      	ldr	r4, [pc, #52]	; (800ffd8 <__libc_init_array+0x3c>)
 800ffa2:	1b64      	subs	r4, r4, r5
 800ffa4:	10a4      	asrs	r4, r4, #2
 800ffa6:	2600      	movs	r6, #0
 800ffa8:	42a6      	cmp	r6, r4
 800ffaa:	d109      	bne.n	800ffc0 <__libc_init_array+0x24>
 800ffac:	4d0b      	ldr	r5, [pc, #44]	; (800ffdc <__libc_init_array+0x40>)
 800ffae:	4c0c      	ldr	r4, [pc, #48]	; (800ffe0 <__libc_init_array+0x44>)
 800ffb0:	f005 f882 	bl	80150b8 <_init>
 800ffb4:	1b64      	subs	r4, r4, r5
 800ffb6:	10a4      	asrs	r4, r4, #2
 800ffb8:	2600      	movs	r6, #0
 800ffba:	42a6      	cmp	r6, r4
 800ffbc:	d105      	bne.n	800ffca <__libc_init_array+0x2e>
 800ffbe:	bd70      	pop	{r4, r5, r6, pc}
 800ffc0:	f855 3b04 	ldr.w	r3, [r5], #4
 800ffc4:	4798      	blx	r3
 800ffc6:	3601      	adds	r6, #1
 800ffc8:	e7ee      	b.n	800ffa8 <__libc_init_array+0xc>
 800ffca:	f855 3b04 	ldr.w	r3, [r5], #4
 800ffce:	4798      	blx	r3
 800ffd0:	3601      	adds	r6, #1
 800ffd2:	e7f2      	b.n	800ffba <__libc_init_array+0x1e>
 800ffd4:	08017044 	.word	0x08017044
 800ffd8:	08017044 	.word	0x08017044
 800ffdc:	08017044 	.word	0x08017044
 800ffe0:	0801704c 	.word	0x0801704c

0800ffe4 <malloc>:
 800ffe4:	4b02      	ldr	r3, [pc, #8]	; (800fff0 <malloc+0xc>)
 800ffe6:	4601      	mov	r1, r0
 800ffe8:	6818      	ldr	r0, [r3, #0]
 800ffea:	f000 b88b 	b.w	8010104 <_malloc_r>
 800ffee:	bf00      	nop
 800fff0:	2000003c 	.word	0x2000003c

0800fff4 <free>:
 800fff4:	4b02      	ldr	r3, [pc, #8]	; (8010000 <free+0xc>)
 800fff6:	4601      	mov	r1, r0
 800fff8:	6818      	ldr	r0, [r3, #0]
 800fffa:	f000 b833 	b.w	8010064 <_free_r>
 800fffe:	bf00      	nop
 8010000:	2000003c 	.word	0x2000003c

08010004 <memcpy>:
 8010004:	440a      	add	r2, r1
 8010006:	4291      	cmp	r1, r2
 8010008:	f100 33ff 	add.w	r3, r0, #4294967295
 801000c:	d100      	bne.n	8010010 <memcpy+0xc>
 801000e:	4770      	bx	lr
 8010010:	b510      	push	{r4, lr}
 8010012:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010016:	f803 4f01 	strb.w	r4, [r3, #1]!
 801001a:	4291      	cmp	r1, r2
 801001c:	d1f9      	bne.n	8010012 <memcpy+0xe>
 801001e:	bd10      	pop	{r4, pc}

08010020 <memmove>:
 8010020:	4288      	cmp	r0, r1
 8010022:	b510      	push	{r4, lr}
 8010024:	eb01 0402 	add.w	r4, r1, r2
 8010028:	d902      	bls.n	8010030 <memmove+0x10>
 801002a:	4284      	cmp	r4, r0
 801002c:	4623      	mov	r3, r4
 801002e:	d807      	bhi.n	8010040 <memmove+0x20>
 8010030:	1e43      	subs	r3, r0, #1
 8010032:	42a1      	cmp	r1, r4
 8010034:	d008      	beq.n	8010048 <memmove+0x28>
 8010036:	f811 2b01 	ldrb.w	r2, [r1], #1
 801003a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801003e:	e7f8      	b.n	8010032 <memmove+0x12>
 8010040:	4402      	add	r2, r0
 8010042:	4601      	mov	r1, r0
 8010044:	428a      	cmp	r2, r1
 8010046:	d100      	bne.n	801004a <memmove+0x2a>
 8010048:	bd10      	pop	{r4, pc}
 801004a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801004e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010052:	e7f7      	b.n	8010044 <memmove+0x24>

08010054 <memset>:
 8010054:	4402      	add	r2, r0
 8010056:	4603      	mov	r3, r0
 8010058:	4293      	cmp	r3, r2
 801005a:	d100      	bne.n	801005e <memset+0xa>
 801005c:	4770      	bx	lr
 801005e:	f803 1b01 	strb.w	r1, [r3], #1
 8010062:	e7f9      	b.n	8010058 <memset+0x4>

08010064 <_free_r>:
 8010064:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010066:	2900      	cmp	r1, #0
 8010068:	d048      	beq.n	80100fc <_free_r+0x98>
 801006a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801006e:	9001      	str	r0, [sp, #4]
 8010070:	2b00      	cmp	r3, #0
 8010072:	f1a1 0404 	sub.w	r4, r1, #4
 8010076:	bfb8      	it	lt
 8010078:	18e4      	addlt	r4, r4, r3
 801007a:	f003 f8f9 	bl	8013270 <__malloc_lock>
 801007e:	4a20      	ldr	r2, [pc, #128]	; (8010100 <_free_r+0x9c>)
 8010080:	9801      	ldr	r0, [sp, #4]
 8010082:	6813      	ldr	r3, [r2, #0]
 8010084:	4615      	mov	r5, r2
 8010086:	b933      	cbnz	r3, 8010096 <_free_r+0x32>
 8010088:	6063      	str	r3, [r4, #4]
 801008a:	6014      	str	r4, [r2, #0]
 801008c:	b003      	add	sp, #12
 801008e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010092:	f003 b8f3 	b.w	801327c <__malloc_unlock>
 8010096:	42a3      	cmp	r3, r4
 8010098:	d90b      	bls.n	80100b2 <_free_r+0x4e>
 801009a:	6821      	ldr	r1, [r4, #0]
 801009c:	1862      	adds	r2, r4, r1
 801009e:	4293      	cmp	r3, r2
 80100a0:	bf04      	itt	eq
 80100a2:	681a      	ldreq	r2, [r3, #0]
 80100a4:	685b      	ldreq	r3, [r3, #4]
 80100a6:	6063      	str	r3, [r4, #4]
 80100a8:	bf04      	itt	eq
 80100aa:	1852      	addeq	r2, r2, r1
 80100ac:	6022      	streq	r2, [r4, #0]
 80100ae:	602c      	str	r4, [r5, #0]
 80100b0:	e7ec      	b.n	801008c <_free_r+0x28>
 80100b2:	461a      	mov	r2, r3
 80100b4:	685b      	ldr	r3, [r3, #4]
 80100b6:	b10b      	cbz	r3, 80100bc <_free_r+0x58>
 80100b8:	42a3      	cmp	r3, r4
 80100ba:	d9fa      	bls.n	80100b2 <_free_r+0x4e>
 80100bc:	6811      	ldr	r1, [r2, #0]
 80100be:	1855      	adds	r5, r2, r1
 80100c0:	42a5      	cmp	r5, r4
 80100c2:	d10b      	bne.n	80100dc <_free_r+0x78>
 80100c4:	6824      	ldr	r4, [r4, #0]
 80100c6:	4421      	add	r1, r4
 80100c8:	1854      	adds	r4, r2, r1
 80100ca:	42a3      	cmp	r3, r4
 80100cc:	6011      	str	r1, [r2, #0]
 80100ce:	d1dd      	bne.n	801008c <_free_r+0x28>
 80100d0:	681c      	ldr	r4, [r3, #0]
 80100d2:	685b      	ldr	r3, [r3, #4]
 80100d4:	6053      	str	r3, [r2, #4]
 80100d6:	4421      	add	r1, r4
 80100d8:	6011      	str	r1, [r2, #0]
 80100da:	e7d7      	b.n	801008c <_free_r+0x28>
 80100dc:	d902      	bls.n	80100e4 <_free_r+0x80>
 80100de:	230c      	movs	r3, #12
 80100e0:	6003      	str	r3, [r0, #0]
 80100e2:	e7d3      	b.n	801008c <_free_r+0x28>
 80100e4:	6825      	ldr	r5, [r4, #0]
 80100e6:	1961      	adds	r1, r4, r5
 80100e8:	428b      	cmp	r3, r1
 80100ea:	bf04      	itt	eq
 80100ec:	6819      	ldreq	r1, [r3, #0]
 80100ee:	685b      	ldreq	r3, [r3, #4]
 80100f0:	6063      	str	r3, [r4, #4]
 80100f2:	bf04      	itt	eq
 80100f4:	1949      	addeq	r1, r1, r5
 80100f6:	6021      	streq	r1, [r4, #0]
 80100f8:	6054      	str	r4, [r2, #4]
 80100fa:	e7c7      	b.n	801008c <_free_r+0x28>
 80100fc:	b003      	add	sp, #12
 80100fe:	bd30      	pop	{r4, r5, pc}
 8010100:	20004d58 	.word	0x20004d58

08010104 <_malloc_r>:
 8010104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010106:	1ccd      	adds	r5, r1, #3
 8010108:	f025 0503 	bic.w	r5, r5, #3
 801010c:	3508      	adds	r5, #8
 801010e:	2d0c      	cmp	r5, #12
 8010110:	bf38      	it	cc
 8010112:	250c      	movcc	r5, #12
 8010114:	2d00      	cmp	r5, #0
 8010116:	4606      	mov	r6, r0
 8010118:	db01      	blt.n	801011e <_malloc_r+0x1a>
 801011a:	42a9      	cmp	r1, r5
 801011c:	d903      	bls.n	8010126 <_malloc_r+0x22>
 801011e:	230c      	movs	r3, #12
 8010120:	6033      	str	r3, [r6, #0]
 8010122:	2000      	movs	r0, #0
 8010124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010126:	f003 f8a3 	bl	8013270 <__malloc_lock>
 801012a:	4921      	ldr	r1, [pc, #132]	; (80101b0 <_malloc_r+0xac>)
 801012c:	680a      	ldr	r2, [r1, #0]
 801012e:	4614      	mov	r4, r2
 8010130:	b99c      	cbnz	r4, 801015a <_malloc_r+0x56>
 8010132:	4f20      	ldr	r7, [pc, #128]	; (80101b4 <_malloc_r+0xb0>)
 8010134:	683b      	ldr	r3, [r7, #0]
 8010136:	b923      	cbnz	r3, 8010142 <_malloc_r+0x3e>
 8010138:	4621      	mov	r1, r4
 801013a:	4630      	mov	r0, r6
 801013c:	f000 feb6 	bl	8010eac <_sbrk_r>
 8010140:	6038      	str	r0, [r7, #0]
 8010142:	4629      	mov	r1, r5
 8010144:	4630      	mov	r0, r6
 8010146:	f000 feb1 	bl	8010eac <_sbrk_r>
 801014a:	1c43      	adds	r3, r0, #1
 801014c:	d123      	bne.n	8010196 <_malloc_r+0x92>
 801014e:	230c      	movs	r3, #12
 8010150:	6033      	str	r3, [r6, #0]
 8010152:	4630      	mov	r0, r6
 8010154:	f003 f892 	bl	801327c <__malloc_unlock>
 8010158:	e7e3      	b.n	8010122 <_malloc_r+0x1e>
 801015a:	6823      	ldr	r3, [r4, #0]
 801015c:	1b5b      	subs	r3, r3, r5
 801015e:	d417      	bmi.n	8010190 <_malloc_r+0x8c>
 8010160:	2b0b      	cmp	r3, #11
 8010162:	d903      	bls.n	801016c <_malloc_r+0x68>
 8010164:	6023      	str	r3, [r4, #0]
 8010166:	441c      	add	r4, r3
 8010168:	6025      	str	r5, [r4, #0]
 801016a:	e004      	b.n	8010176 <_malloc_r+0x72>
 801016c:	6863      	ldr	r3, [r4, #4]
 801016e:	42a2      	cmp	r2, r4
 8010170:	bf0c      	ite	eq
 8010172:	600b      	streq	r3, [r1, #0]
 8010174:	6053      	strne	r3, [r2, #4]
 8010176:	4630      	mov	r0, r6
 8010178:	f003 f880 	bl	801327c <__malloc_unlock>
 801017c:	f104 000b 	add.w	r0, r4, #11
 8010180:	1d23      	adds	r3, r4, #4
 8010182:	f020 0007 	bic.w	r0, r0, #7
 8010186:	1ac2      	subs	r2, r0, r3
 8010188:	d0cc      	beq.n	8010124 <_malloc_r+0x20>
 801018a:	1a1b      	subs	r3, r3, r0
 801018c:	50a3      	str	r3, [r4, r2]
 801018e:	e7c9      	b.n	8010124 <_malloc_r+0x20>
 8010190:	4622      	mov	r2, r4
 8010192:	6864      	ldr	r4, [r4, #4]
 8010194:	e7cc      	b.n	8010130 <_malloc_r+0x2c>
 8010196:	1cc4      	adds	r4, r0, #3
 8010198:	f024 0403 	bic.w	r4, r4, #3
 801019c:	42a0      	cmp	r0, r4
 801019e:	d0e3      	beq.n	8010168 <_malloc_r+0x64>
 80101a0:	1a21      	subs	r1, r4, r0
 80101a2:	4630      	mov	r0, r6
 80101a4:	f000 fe82 	bl	8010eac <_sbrk_r>
 80101a8:	3001      	adds	r0, #1
 80101aa:	d1dd      	bne.n	8010168 <_malloc_r+0x64>
 80101ac:	e7cf      	b.n	801014e <_malloc_r+0x4a>
 80101ae:	bf00      	nop
 80101b0:	20004d58 	.word	0x20004d58
 80101b4:	20004d5c 	.word	0x20004d5c

080101b8 <__cvt>:
 80101b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80101bc:	ec55 4b10 	vmov	r4, r5, d0
 80101c0:	2d00      	cmp	r5, #0
 80101c2:	460e      	mov	r6, r1
 80101c4:	4619      	mov	r1, r3
 80101c6:	462b      	mov	r3, r5
 80101c8:	bfbb      	ittet	lt
 80101ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80101ce:	461d      	movlt	r5, r3
 80101d0:	2300      	movge	r3, #0
 80101d2:	232d      	movlt	r3, #45	; 0x2d
 80101d4:	700b      	strb	r3, [r1, #0]
 80101d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80101d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80101dc:	4691      	mov	r9, r2
 80101de:	f023 0820 	bic.w	r8, r3, #32
 80101e2:	bfbc      	itt	lt
 80101e4:	4622      	movlt	r2, r4
 80101e6:	4614      	movlt	r4, r2
 80101e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80101ec:	d005      	beq.n	80101fa <__cvt+0x42>
 80101ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80101f2:	d100      	bne.n	80101f6 <__cvt+0x3e>
 80101f4:	3601      	adds	r6, #1
 80101f6:	2102      	movs	r1, #2
 80101f8:	e000      	b.n	80101fc <__cvt+0x44>
 80101fa:	2103      	movs	r1, #3
 80101fc:	ab03      	add	r3, sp, #12
 80101fe:	9301      	str	r3, [sp, #4]
 8010200:	ab02      	add	r3, sp, #8
 8010202:	9300      	str	r3, [sp, #0]
 8010204:	ec45 4b10 	vmov	d0, r4, r5
 8010208:	4653      	mov	r3, sl
 801020a:	4632      	mov	r2, r6
 801020c:	f001 feac 	bl	8011f68 <_dtoa_r>
 8010210:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010214:	4607      	mov	r7, r0
 8010216:	d102      	bne.n	801021e <__cvt+0x66>
 8010218:	f019 0f01 	tst.w	r9, #1
 801021c:	d022      	beq.n	8010264 <__cvt+0xac>
 801021e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010222:	eb07 0906 	add.w	r9, r7, r6
 8010226:	d110      	bne.n	801024a <__cvt+0x92>
 8010228:	783b      	ldrb	r3, [r7, #0]
 801022a:	2b30      	cmp	r3, #48	; 0x30
 801022c:	d10a      	bne.n	8010244 <__cvt+0x8c>
 801022e:	2200      	movs	r2, #0
 8010230:	2300      	movs	r3, #0
 8010232:	4620      	mov	r0, r4
 8010234:	4629      	mov	r1, r5
 8010236:	f7f0 fc4f 	bl	8000ad8 <__aeabi_dcmpeq>
 801023a:	b918      	cbnz	r0, 8010244 <__cvt+0x8c>
 801023c:	f1c6 0601 	rsb	r6, r6, #1
 8010240:	f8ca 6000 	str.w	r6, [sl]
 8010244:	f8da 3000 	ldr.w	r3, [sl]
 8010248:	4499      	add	r9, r3
 801024a:	2200      	movs	r2, #0
 801024c:	2300      	movs	r3, #0
 801024e:	4620      	mov	r0, r4
 8010250:	4629      	mov	r1, r5
 8010252:	f7f0 fc41 	bl	8000ad8 <__aeabi_dcmpeq>
 8010256:	b108      	cbz	r0, 801025c <__cvt+0xa4>
 8010258:	f8cd 900c 	str.w	r9, [sp, #12]
 801025c:	2230      	movs	r2, #48	; 0x30
 801025e:	9b03      	ldr	r3, [sp, #12]
 8010260:	454b      	cmp	r3, r9
 8010262:	d307      	bcc.n	8010274 <__cvt+0xbc>
 8010264:	9b03      	ldr	r3, [sp, #12]
 8010266:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010268:	1bdb      	subs	r3, r3, r7
 801026a:	4638      	mov	r0, r7
 801026c:	6013      	str	r3, [r2, #0]
 801026e:	b004      	add	sp, #16
 8010270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010274:	1c59      	adds	r1, r3, #1
 8010276:	9103      	str	r1, [sp, #12]
 8010278:	701a      	strb	r2, [r3, #0]
 801027a:	e7f0      	b.n	801025e <__cvt+0xa6>

0801027c <__exponent>:
 801027c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801027e:	4603      	mov	r3, r0
 8010280:	2900      	cmp	r1, #0
 8010282:	bfb8      	it	lt
 8010284:	4249      	neglt	r1, r1
 8010286:	f803 2b02 	strb.w	r2, [r3], #2
 801028a:	bfb4      	ite	lt
 801028c:	222d      	movlt	r2, #45	; 0x2d
 801028e:	222b      	movge	r2, #43	; 0x2b
 8010290:	2909      	cmp	r1, #9
 8010292:	7042      	strb	r2, [r0, #1]
 8010294:	dd2a      	ble.n	80102ec <__exponent+0x70>
 8010296:	f10d 0407 	add.w	r4, sp, #7
 801029a:	46a4      	mov	ip, r4
 801029c:	270a      	movs	r7, #10
 801029e:	46a6      	mov	lr, r4
 80102a0:	460a      	mov	r2, r1
 80102a2:	fb91 f6f7 	sdiv	r6, r1, r7
 80102a6:	fb07 1516 	mls	r5, r7, r6, r1
 80102aa:	3530      	adds	r5, #48	; 0x30
 80102ac:	2a63      	cmp	r2, #99	; 0x63
 80102ae:	f104 34ff 	add.w	r4, r4, #4294967295
 80102b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80102b6:	4631      	mov	r1, r6
 80102b8:	dcf1      	bgt.n	801029e <__exponent+0x22>
 80102ba:	3130      	adds	r1, #48	; 0x30
 80102bc:	f1ae 0502 	sub.w	r5, lr, #2
 80102c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80102c4:	1c44      	adds	r4, r0, #1
 80102c6:	4629      	mov	r1, r5
 80102c8:	4561      	cmp	r1, ip
 80102ca:	d30a      	bcc.n	80102e2 <__exponent+0x66>
 80102cc:	f10d 0209 	add.w	r2, sp, #9
 80102d0:	eba2 020e 	sub.w	r2, r2, lr
 80102d4:	4565      	cmp	r5, ip
 80102d6:	bf88      	it	hi
 80102d8:	2200      	movhi	r2, #0
 80102da:	4413      	add	r3, r2
 80102dc:	1a18      	subs	r0, r3, r0
 80102de:	b003      	add	sp, #12
 80102e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80102e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80102ea:	e7ed      	b.n	80102c8 <__exponent+0x4c>
 80102ec:	2330      	movs	r3, #48	; 0x30
 80102ee:	3130      	adds	r1, #48	; 0x30
 80102f0:	7083      	strb	r3, [r0, #2]
 80102f2:	70c1      	strb	r1, [r0, #3]
 80102f4:	1d03      	adds	r3, r0, #4
 80102f6:	e7f1      	b.n	80102dc <__exponent+0x60>

080102f8 <_printf_float>:
 80102f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102fc:	ed2d 8b02 	vpush	{d8}
 8010300:	b08d      	sub	sp, #52	; 0x34
 8010302:	460c      	mov	r4, r1
 8010304:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010308:	4616      	mov	r6, r2
 801030a:	461f      	mov	r7, r3
 801030c:	4605      	mov	r5, r0
 801030e:	f002 ff87 	bl	8013220 <_localeconv_r>
 8010312:	f8d0 a000 	ldr.w	sl, [r0]
 8010316:	4650      	mov	r0, sl
 8010318:	f7ef ffb2 	bl	8000280 <strlen>
 801031c:	2300      	movs	r3, #0
 801031e:	930a      	str	r3, [sp, #40]	; 0x28
 8010320:	6823      	ldr	r3, [r4, #0]
 8010322:	9305      	str	r3, [sp, #20]
 8010324:	f8d8 3000 	ldr.w	r3, [r8]
 8010328:	f894 b018 	ldrb.w	fp, [r4, #24]
 801032c:	3307      	adds	r3, #7
 801032e:	f023 0307 	bic.w	r3, r3, #7
 8010332:	f103 0208 	add.w	r2, r3, #8
 8010336:	f8c8 2000 	str.w	r2, [r8]
 801033a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801033e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010342:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010346:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801034a:	9307      	str	r3, [sp, #28]
 801034c:	f8cd 8018 	str.w	r8, [sp, #24]
 8010350:	ee08 0a10 	vmov	s16, r0
 8010354:	4b9f      	ldr	r3, [pc, #636]	; (80105d4 <_printf_float+0x2dc>)
 8010356:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801035a:	f04f 32ff 	mov.w	r2, #4294967295
 801035e:	f7f0 fbed 	bl	8000b3c <__aeabi_dcmpun>
 8010362:	bb88      	cbnz	r0, 80103c8 <_printf_float+0xd0>
 8010364:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010368:	4b9a      	ldr	r3, [pc, #616]	; (80105d4 <_printf_float+0x2dc>)
 801036a:	f04f 32ff 	mov.w	r2, #4294967295
 801036e:	f7f0 fbc7 	bl	8000b00 <__aeabi_dcmple>
 8010372:	bb48      	cbnz	r0, 80103c8 <_printf_float+0xd0>
 8010374:	2200      	movs	r2, #0
 8010376:	2300      	movs	r3, #0
 8010378:	4640      	mov	r0, r8
 801037a:	4649      	mov	r1, r9
 801037c:	f7f0 fbb6 	bl	8000aec <__aeabi_dcmplt>
 8010380:	b110      	cbz	r0, 8010388 <_printf_float+0x90>
 8010382:	232d      	movs	r3, #45	; 0x2d
 8010384:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010388:	4b93      	ldr	r3, [pc, #588]	; (80105d8 <_printf_float+0x2e0>)
 801038a:	4894      	ldr	r0, [pc, #592]	; (80105dc <_printf_float+0x2e4>)
 801038c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010390:	bf94      	ite	ls
 8010392:	4698      	movls	r8, r3
 8010394:	4680      	movhi	r8, r0
 8010396:	2303      	movs	r3, #3
 8010398:	6123      	str	r3, [r4, #16]
 801039a:	9b05      	ldr	r3, [sp, #20]
 801039c:	f023 0204 	bic.w	r2, r3, #4
 80103a0:	6022      	str	r2, [r4, #0]
 80103a2:	f04f 0900 	mov.w	r9, #0
 80103a6:	9700      	str	r7, [sp, #0]
 80103a8:	4633      	mov	r3, r6
 80103aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80103ac:	4621      	mov	r1, r4
 80103ae:	4628      	mov	r0, r5
 80103b0:	f000 f9d8 	bl	8010764 <_printf_common>
 80103b4:	3001      	adds	r0, #1
 80103b6:	f040 8090 	bne.w	80104da <_printf_float+0x1e2>
 80103ba:	f04f 30ff 	mov.w	r0, #4294967295
 80103be:	b00d      	add	sp, #52	; 0x34
 80103c0:	ecbd 8b02 	vpop	{d8}
 80103c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103c8:	4642      	mov	r2, r8
 80103ca:	464b      	mov	r3, r9
 80103cc:	4640      	mov	r0, r8
 80103ce:	4649      	mov	r1, r9
 80103d0:	f7f0 fbb4 	bl	8000b3c <__aeabi_dcmpun>
 80103d4:	b140      	cbz	r0, 80103e8 <_printf_float+0xf0>
 80103d6:	464b      	mov	r3, r9
 80103d8:	2b00      	cmp	r3, #0
 80103da:	bfbc      	itt	lt
 80103dc:	232d      	movlt	r3, #45	; 0x2d
 80103de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80103e2:	487f      	ldr	r0, [pc, #508]	; (80105e0 <_printf_float+0x2e8>)
 80103e4:	4b7f      	ldr	r3, [pc, #508]	; (80105e4 <_printf_float+0x2ec>)
 80103e6:	e7d1      	b.n	801038c <_printf_float+0x94>
 80103e8:	6863      	ldr	r3, [r4, #4]
 80103ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80103ee:	9206      	str	r2, [sp, #24]
 80103f0:	1c5a      	adds	r2, r3, #1
 80103f2:	d13f      	bne.n	8010474 <_printf_float+0x17c>
 80103f4:	2306      	movs	r3, #6
 80103f6:	6063      	str	r3, [r4, #4]
 80103f8:	9b05      	ldr	r3, [sp, #20]
 80103fa:	6861      	ldr	r1, [r4, #4]
 80103fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010400:	2300      	movs	r3, #0
 8010402:	9303      	str	r3, [sp, #12]
 8010404:	ab0a      	add	r3, sp, #40	; 0x28
 8010406:	e9cd b301 	strd	fp, r3, [sp, #4]
 801040a:	ab09      	add	r3, sp, #36	; 0x24
 801040c:	ec49 8b10 	vmov	d0, r8, r9
 8010410:	9300      	str	r3, [sp, #0]
 8010412:	6022      	str	r2, [r4, #0]
 8010414:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010418:	4628      	mov	r0, r5
 801041a:	f7ff fecd 	bl	80101b8 <__cvt>
 801041e:	9b06      	ldr	r3, [sp, #24]
 8010420:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010422:	2b47      	cmp	r3, #71	; 0x47
 8010424:	4680      	mov	r8, r0
 8010426:	d108      	bne.n	801043a <_printf_float+0x142>
 8010428:	1cc8      	adds	r0, r1, #3
 801042a:	db02      	blt.n	8010432 <_printf_float+0x13a>
 801042c:	6863      	ldr	r3, [r4, #4]
 801042e:	4299      	cmp	r1, r3
 8010430:	dd41      	ble.n	80104b6 <_printf_float+0x1be>
 8010432:	f1ab 0b02 	sub.w	fp, fp, #2
 8010436:	fa5f fb8b 	uxtb.w	fp, fp
 801043a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801043e:	d820      	bhi.n	8010482 <_printf_float+0x18a>
 8010440:	3901      	subs	r1, #1
 8010442:	465a      	mov	r2, fp
 8010444:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010448:	9109      	str	r1, [sp, #36]	; 0x24
 801044a:	f7ff ff17 	bl	801027c <__exponent>
 801044e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010450:	1813      	adds	r3, r2, r0
 8010452:	2a01      	cmp	r2, #1
 8010454:	4681      	mov	r9, r0
 8010456:	6123      	str	r3, [r4, #16]
 8010458:	dc02      	bgt.n	8010460 <_printf_float+0x168>
 801045a:	6822      	ldr	r2, [r4, #0]
 801045c:	07d2      	lsls	r2, r2, #31
 801045e:	d501      	bpl.n	8010464 <_printf_float+0x16c>
 8010460:	3301      	adds	r3, #1
 8010462:	6123      	str	r3, [r4, #16]
 8010464:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010468:	2b00      	cmp	r3, #0
 801046a:	d09c      	beq.n	80103a6 <_printf_float+0xae>
 801046c:	232d      	movs	r3, #45	; 0x2d
 801046e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010472:	e798      	b.n	80103a6 <_printf_float+0xae>
 8010474:	9a06      	ldr	r2, [sp, #24]
 8010476:	2a47      	cmp	r2, #71	; 0x47
 8010478:	d1be      	bne.n	80103f8 <_printf_float+0x100>
 801047a:	2b00      	cmp	r3, #0
 801047c:	d1bc      	bne.n	80103f8 <_printf_float+0x100>
 801047e:	2301      	movs	r3, #1
 8010480:	e7b9      	b.n	80103f6 <_printf_float+0xfe>
 8010482:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010486:	d118      	bne.n	80104ba <_printf_float+0x1c2>
 8010488:	2900      	cmp	r1, #0
 801048a:	6863      	ldr	r3, [r4, #4]
 801048c:	dd0b      	ble.n	80104a6 <_printf_float+0x1ae>
 801048e:	6121      	str	r1, [r4, #16]
 8010490:	b913      	cbnz	r3, 8010498 <_printf_float+0x1a0>
 8010492:	6822      	ldr	r2, [r4, #0]
 8010494:	07d0      	lsls	r0, r2, #31
 8010496:	d502      	bpl.n	801049e <_printf_float+0x1a6>
 8010498:	3301      	adds	r3, #1
 801049a:	440b      	add	r3, r1
 801049c:	6123      	str	r3, [r4, #16]
 801049e:	65a1      	str	r1, [r4, #88]	; 0x58
 80104a0:	f04f 0900 	mov.w	r9, #0
 80104a4:	e7de      	b.n	8010464 <_printf_float+0x16c>
 80104a6:	b913      	cbnz	r3, 80104ae <_printf_float+0x1b6>
 80104a8:	6822      	ldr	r2, [r4, #0]
 80104aa:	07d2      	lsls	r2, r2, #31
 80104ac:	d501      	bpl.n	80104b2 <_printf_float+0x1ba>
 80104ae:	3302      	adds	r3, #2
 80104b0:	e7f4      	b.n	801049c <_printf_float+0x1a4>
 80104b2:	2301      	movs	r3, #1
 80104b4:	e7f2      	b.n	801049c <_printf_float+0x1a4>
 80104b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80104ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104bc:	4299      	cmp	r1, r3
 80104be:	db05      	blt.n	80104cc <_printf_float+0x1d4>
 80104c0:	6823      	ldr	r3, [r4, #0]
 80104c2:	6121      	str	r1, [r4, #16]
 80104c4:	07d8      	lsls	r0, r3, #31
 80104c6:	d5ea      	bpl.n	801049e <_printf_float+0x1a6>
 80104c8:	1c4b      	adds	r3, r1, #1
 80104ca:	e7e7      	b.n	801049c <_printf_float+0x1a4>
 80104cc:	2900      	cmp	r1, #0
 80104ce:	bfd4      	ite	le
 80104d0:	f1c1 0202 	rsble	r2, r1, #2
 80104d4:	2201      	movgt	r2, #1
 80104d6:	4413      	add	r3, r2
 80104d8:	e7e0      	b.n	801049c <_printf_float+0x1a4>
 80104da:	6823      	ldr	r3, [r4, #0]
 80104dc:	055a      	lsls	r2, r3, #21
 80104de:	d407      	bmi.n	80104f0 <_printf_float+0x1f8>
 80104e0:	6923      	ldr	r3, [r4, #16]
 80104e2:	4642      	mov	r2, r8
 80104e4:	4631      	mov	r1, r6
 80104e6:	4628      	mov	r0, r5
 80104e8:	47b8      	blx	r7
 80104ea:	3001      	adds	r0, #1
 80104ec:	d12c      	bne.n	8010548 <_printf_float+0x250>
 80104ee:	e764      	b.n	80103ba <_printf_float+0xc2>
 80104f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80104f4:	f240 80e0 	bls.w	80106b8 <_printf_float+0x3c0>
 80104f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80104fc:	2200      	movs	r2, #0
 80104fe:	2300      	movs	r3, #0
 8010500:	f7f0 faea 	bl	8000ad8 <__aeabi_dcmpeq>
 8010504:	2800      	cmp	r0, #0
 8010506:	d034      	beq.n	8010572 <_printf_float+0x27a>
 8010508:	4a37      	ldr	r2, [pc, #220]	; (80105e8 <_printf_float+0x2f0>)
 801050a:	2301      	movs	r3, #1
 801050c:	4631      	mov	r1, r6
 801050e:	4628      	mov	r0, r5
 8010510:	47b8      	blx	r7
 8010512:	3001      	adds	r0, #1
 8010514:	f43f af51 	beq.w	80103ba <_printf_float+0xc2>
 8010518:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801051c:	429a      	cmp	r2, r3
 801051e:	db02      	blt.n	8010526 <_printf_float+0x22e>
 8010520:	6823      	ldr	r3, [r4, #0]
 8010522:	07d8      	lsls	r0, r3, #31
 8010524:	d510      	bpl.n	8010548 <_printf_float+0x250>
 8010526:	ee18 3a10 	vmov	r3, s16
 801052a:	4652      	mov	r2, sl
 801052c:	4631      	mov	r1, r6
 801052e:	4628      	mov	r0, r5
 8010530:	47b8      	blx	r7
 8010532:	3001      	adds	r0, #1
 8010534:	f43f af41 	beq.w	80103ba <_printf_float+0xc2>
 8010538:	f04f 0800 	mov.w	r8, #0
 801053c:	f104 091a 	add.w	r9, r4, #26
 8010540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010542:	3b01      	subs	r3, #1
 8010544:	4543      	cmp	r3, r8
 8010546:	dc09      	bgt.n	801055c <_printf_float+0x264>
 8010548:	6823      	ldr	r3, [r4, #0]
 801054a:	079b      	lsls	r3, r3, #30
 801054c:	f100 8105 	bmi.w	801075a <_printf_float+0x462>
 8010550:	68e0      	ldr	r0, [r4, #12]
 8010552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010554:	4298      	cmp	r0, r3
 8010556:	bfb8      	it	lt
 8010558:	4618      	movlt	r0, r3
 801055a:	e730      	b.n	80103be <_printf_float+0xc6>
 801055c:	2301      	movs	r3, #1
 801055e:	464a      	mov	r2, r9
 8010560:	4631      	mov	r1, r6
 8010562:	4628      	mov	r0, r5
 8010564:	47b8      	blx	r7
 8010566:	3001      	adds	r0, #1
 8010568:	f43f af27 	beq.w	80103ba <_printf_float+0xc2>
 801056c:	f108 0801 	add.w	r8, r8, #1
 8010570:	e7e6      	b.n	8010540 <_printf_float+0x248>
 8010572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010574:	2b00      	cmp	r3, #0
 8010576:	dc39      	bgt.n	80105ec <_printf_float+0x2f4>
 8010578:	4a1b      	ldr	r2, [pc, #108]	; (80105e8 <_printf_float+0x2f0>)
 801057a:	2301      	movs	r3, #1
 801057c:	4631      	mov	r1, r6
 801057e:	4628      	mov	r0, r5
 8010580:	47b8      	blx	r7
 8010582:	3001      	adds	r0, #1
 8010584:	f43f af19 	beq.w	80103ba <_printf_float+0xc2>
 8010588:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801058c:	4313      	orrs	r3, r2
 801058e:	d102      	bne.n	8010596 <_printf_float+0x29e>
 8010590:	6823      	ldr	r3, [r4, #0]
 8010592:	07d9      	lsls	r1, r3, #31
 8010594:	d5d8      	bpl.n	8010548 <_printf_float+0x250>
 8010596:	ee18 3a10 	vmov	r3, s16
 801059a:	4652      	mov	r2, sl
 801059c:	4631      	mov	r1, r6
 801059e:	4628      	mov	r0, r5
 80105a0:	47b8      	blx	r7
 80105a2:	3001      	adds	r0, #1
 80105a4:	f43f af09 	beq.w	80103ba <_printf_float+0xc2>
 80105a8:	f04f 0900 	mov.w	r9, #0
 80105ac:	f104 0a1a 	add.w	sl, r4, #26
 80105b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105b2:	425b      	negs	r3, r3
 80105b4:	454b      	cmp	r3, r9
 80105b6:	dc01      	bgt.n	80105bc <_printf_float+0x2c4>
 80105b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105ba:	e792      	b.n	80104e2 <_printf_float+0x1ea>
 80105bc:	2301      	movs	r3, #1
 80105be:	4652      	mov	r2, sl
 80105c0:	4631      	mov	r1, r6
 80105c2:	4628      	mov	r0, r5
 80105c4:	47b8      	blx	r7
 80105c6:	3001      	adds	r0, #1
 80105c8:	f43f aef7 	beq.w	80103ba <_printf_float+0xc2>
 80105cc:	f109 0901 	add.w	r9, r9, #1
 80105d0:	e7ee      	b.n	80105b0 <_printf_float+0x2b8>
 80105d2:	bf00      	nop
 80105d4:	7fefffff 	.word	0x7fefffff
 80105d8:	08016b74 	.word	0x08016b74
 80105dc:	08016b78 	.word	0x08016b78
 80105e0:	08016b80 	.word	0x08016b80
 80105e4:	08016b7c 	.word	0x08016b7c
 80105e8:	08016f89 	.word	0x08016f89
 80105ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80105ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80105f0:	429a      	cmp	r2, r3
 80105f2:	bfa8      	it	ge
 80105f4:	461a      	movge	r2, r3
 80105f6:	2a00      	cmp	r2, #0
 80105f8:	4691      	mov	r9, r2
 80105fa:	dc37      	bgt.n	801066c <_printf_float+0x374>
 80105fc:	f04f 0b00 	mov.w	fp, #0
 8010600:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010604:	f104 021a 	add.w	r2, r4, #26
 8010608:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801060a:	9305      	str	r3, [sp, #20]
 801060c:	eba3 0309 	sub.w	r3, r3, r9
 8010610:	455b      	cmp	r3, fp
 8010612:	dc33      	bgt.n	801067c <_printf_float+0x384>
 8010614:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010618:	429a      	cmp	r2, r3
 801061a:	db3b      	blt.n	8010694 <_printf_float+0x39c>
 801061c:	6823      	ldr	r3, [r4, #0]
 801061e:	07da      	lsls	r2, r3, #31
 8010620:	d438      	bmi.n	8010694 <_printf_float+0x39c>
 8010622:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010624:	9b05      	ldr	r3, [sp, #20]
 8010626:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010628:	1ad3      	subs	r3, r2, r3
 801062a:	eba2 0901 	sub.w	r9, r2, r1
 801062e:	4599      	cmp	r9, r3
 8010630:	bfa8      	it	ge
 8010632:	4699      	movge	r9, r3
 8010634:	f1b9 0f00 	cmp.w	r9, #0
 8010638:	dc35      	bgt.n	80106a6 <_printf_float+0x3ae>
 801063a:	f04f 0800 	mov.w	r8, #0
 801063e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010642:	f104 0a1a 	add.w	sl, r4, #26
 8010646:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801064a:	1a9b      	subs	r3, r3, r2
 801064c:	eba3 0309 	sub.w	r3, r3, r9
 8010650:	4543      	cmp	r3, r8
 8010652:	f77f af79 	ble.w	8010548 <_printf_float+0x250>
 8010656:	2301      	movs	r3, #1
 8010658:	4652      	mov	r2, sl
 801065a:	4631      	mov	r1, r6
 801065c:	4628      	mov	r0, r5
 801065e:	47b8      	blx	r7
 8010660:	3001      	adds	r0, #1
 8010662:	f43f aeaa 	beq.w	80103ba <_printf_float+0xc2>
 8010666:	f108 0801 	add.w	r8, r8, #1
 801066a:	e7ec      	b.n	8010646 <_printf_float+0x34e>
 801066c:	4613      	mov	r3, r2
 801066e:	4631      	mov	r1, r6
 8010670:	4642      	mov	r2, r8
 8010672:	4628      	mov	r0, r5
 8010674:	47b8      	blx	r7
 8010676:	3001      	adds	r0, #1
 8010678:	d1c0      	bne.n	80105fc <_printf_float+0x304>
 801067a:	e69e      	b.n	80103ba <_printf_float+0xc2>
 801067c:	2301      	movs	r3, #1
 801067e:	4631      	mov	r1, r6
 8010680:	4628      	mov	r0, r5
 8010682:	9205      	str	r2, [sp, #20]
 8010684:	47b8      	blx	r7
 8010686:	3001      	adds	r0, #1
 8010688:	f43f ae97 	beq.w	80103ba <_printf_float+0xc2>
 801068c:	9a05      	ldr	r2, [sp, #20]
 801068e:	f10b 0b01 	add.w	fp, fp, #1
 8010692:	e7b9      	b.n	8010608 <_printf_float+0x310>
 8010694:	ee18 3a10 	vmov	r3, s16
 8010698:	4652      	mov	r2, sl
 801069a:	4631      	mov	r1, r6
 801069c:	4628      	mov	r0, r5
 801069e:	47b8      	blx	r7
 80106a0:	3001      	adds	r0, #1
 80106a2:	d1be      	bne.n	8010622 <_printf_float+0x32a>
 80106a4:	e689      	b.n	80103ba <_printf_float+0xc2>
 80106a6:	9a05      	ldr	r2, [sp, #20]
 80106a8:	464b      	mov	r3, r9
 80106aa:	4442      	add	r2, r8
 80106ac:	4631      	mov	r1, r6
 80106ae:	4628      	mov	r0, r5
 80106b0:	47b8      	blx	r7
 80106b2:	3001      	adds	r0, #1
 80106b4:	d1c1      	bne.n	801063a <_printf_float+0x342>
 80106b6:	e680      	b.n	80103ba <_printf_float+0xc2>
 80106b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80106ba:	2a01      	cmp	r2, #1
 80106bc:	dc01      	bgt.n	80106c2 <_printf_float+0x3ca>
 80106be:	07db      	lsls	r3, r3, #31
 80106c0:	d538      	bpl.n	8010734 <_printf_float+0x43c>
 80106c2:	2301      	movs	r3, #1
 80106c4:	4642      	mov	r2, r8
 80106c6:	4631      	mov	r1, r6
 80106c8:	4628      	mov	r0, r5
 80106ca:	47b8      	blx	r7
 80106cc:	3001      	adds	r0, #1
 80106ce:	f43f ae74 	beq.w	80103ba <_printf_float+0xc2>
 80106d2:	ee18 3a10 	vmov	r3, s16
 80106d6:	4652      	mov	r2, sl
 80106d8:	4631      	mov	r1, r6
 80106da:	4628      	mov	r0, r5
 80106dc:	47b8      	blx	r7
 80106de:	3001      	adds	r0, #1
 80106e0:	f43f ae6b 	beq.w	80103ba <_printf_float+0xc2>
 80106e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80106e8:	2200      	movs	r2, #0
 80106ea:	2300      	movs	r3, #0
 80106ec:	f7f0 f9f4 	bl	8000ad8 <__aeabi_dcmpeq>
 80106f0:	b9d8      	cbnz	r0, 801072a <_printf_float+0x432>
 80106f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106f4:	f108 0201 	add.w	r2, r8, #1
 80106f8:	3b01      	subs	r3, #1
 80106fa:	4631      	mov	r1, r6
 80106fc:	4628      	mov	r0, r5
 80106fe:	47b8      	blx	r7
 8010700:	3001      	adds	r0, #1
 8010702:	d10e      	bne.n	8010722 <_printf_float+0x42a>
 8010704:	e659      	b.n	80103ba <_printf_float+0xc2>
 8010706:	2301      	movs	r3, #1
 8010708:	4652      	mov	r2, sl
 801070a:	4631      	mov	r1, r6
 801070c:	4628      	mov	r0, r5
 801070e:	47b8      	blx	r7
 8010710:	3001      	adds	r0, #1
 8010712:	f43f ae52 	beq.w	80103ba <_printf_float+0xc2>
 8010716:	f108 0801 	add.w	r8, r8, #1
 801071a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801071c:	3b01      	subs	r3, #1
 801071e:	4543      	cmp	r3, r8
 8010720:	dcf1      	bgt.n	8010706 <_printf_float+0x40e>
 8010722:	464b      	mov	r3, r9
 8010724:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010728:	e6dc      	b.n	80104e4 <_printf_float+0x1ec>
 801072a:	f04f 0800 	mov.w	r8, #0
 801072e:	f104 0a1a 	add.w	sl, r4, #26
 8010732:	e7f2      	b.n	801071a <_printf_float+0x422>
 8010734:	2301      	movs	r3, #1
 8010736:	4642      	mov	r2, r8
 8010738:	e7df      	b.n	80106fa <_printf_float+0x402>
 801073a:	2301      	movs	r3, #1
 801073c:	464a      	mov	r2, r9
 801073e:	4631      	mov	r1, r6
 8010740:	4628      	mov	r0, r5
 8010742:	47b8      	blx	r7
 8010744:	3001      	adds	r0, #1
 8010746:	f43f ae38 	beq.w	80103ba <_printf_float+0xc2>
 801074a:	f108 0801 	add.w	r8, r8, #1
 801074e:	68e3      	ldr	r3, [r4, #12]
 8010750:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010752:	1a5b      	subs	r3, r3, r1
 8010754:	4543      	cmp	r3, r8
 8010756:	dcf0      	bgt.n	801073a <_printf_float+0x442>
 8010758:	e6fa      	b.n	8010550 <_printf_float+0x258>
 801075a:	f04f 0800 	mov.w	r8, #0
 801075e:	f104 0919 	add.w	r9, r4, #25
 8010762:	e7f4      	b.n	801074e <_printf_float+0x456>

08010764 <_printf_common>:
 8010764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010768:	4616      	mov	r6, r2
 801076a:	4699      	mov	r9, r3
 801076c:	688a      	ldr	r2, [r1, #8]
 801076e:	690b      	ldr	r3, [r1, #16]
 8010770:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010774:	4293      	cmp	r3, r2
 8010776:	bfb8      	it	lt
 8010778:	4613      	movlt	r3, r2
 801077a:	6033      	str	r3, [r6, #0]
 801077c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010780:	4607      	mov	r7, r0
 8010782:	460c      	mov	r4, r1
 8010784:	b10a      	cbz	r2, 801078a <_printf_common+0x26>
 8010786:	3301      	adds	r3, #1
 8010788:	6033      	str	r3, [r6, #0]
 801078a:	6823      	ldr	r3, [r4, #0]
 801078c:	0699      	lsls	r1, r3, #26
 801078e:	bf42      	ittt	mi
 8010790:	6833      	ldrmi	r3, [r6, #0]
 8010792:	3302      	addmi	r3, #2
 8010794:	6033      	strmi	r3, [r6, #0]
 8010796:	6825      	ldr	r5, [r4, #0]
 8010798:	f015 0506 	ands.w	r5, r5, #6
 801079c:	d106      	bne.n	80107ac <_printf_common+0x48>
 801079e:	f104 0a19 	add.w	sl, r4, #25
 80107a2:	68e3      	ldr	r3, [r4, #12]
 80107a4:	6832      	ldr	r2, [r6, #0]
 80107a6:	1a9b      	subs	r3, r3, r2
 80107a8:	42ab      	cmp	r3, r5
 80107aa:	dc26      	bgt.n	80107fa <_printf_common+0x96>
 80107ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80107b0:	1e13      	subs	r3, r2, #0
 80107b2:	6822      	ldr	r2, [r4, #0]
 80107b4:	bf18      	it	ne
 80107b6:	2301      	movne	r3, #1
 80107b8:	0692      	lsls	r2, r2, #26
 80107ba:	d42b      	bmi.n	8010814 <_printf_common+0xb0>
 80107bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80107c0:	4649      	mov	r1, r9
 80107c2:	4638      	mov	r0, r7
 80107c4:	47c0      	blx	r8
 80107c6:	3001      	adds	r0, #1
 80107c8:	d01e      	beq.n	8010808 <_printf_common+0xa4>
 80107ca:	6823      	ldr	r3, [r4, #0]
 80107cc:	68e5      	ldr	r5, [r4, #12]
 80107ce:	6832      	ldr	r2, [r6, #0]
 80107d0:	f003 0306 	and.w	r3, r3, #6
 80107d4:	2b04      	cmp	r3, #4
 80107d6:	bf08      	it	eq
 80107d8:	1aad      	subeq	r5, r5, r2
 80107da:	68a3      	ldr	r3, [r4, #8]
 80107dc:	6922      	ldr	r2, [r4, #16]
 80107de:	bf0c      	ite	eq
 80107e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80107e4:	2500      	movne	r5, #0
 80107e6:	4293      	cmp	r3, r2
 80107e8:	bfc4      	itt	gt
 80107ea:	1a9b      	subgt	r3, r3, r2
 80107ec:	18ed      	addgt	r5, r5, r3
 80107ee:	2600      	movs	r6, #0
 80107f0:	341a      	adds	r4, #26
 80107f2:	42b5      	cmp	r5, r6
 80107f4:	d11a      	bne.n	801082c <_printf_common+0xc8>
 80107f6:	2000      	movs	r0, #0
 80107f8:	e008      	b.n	801080c <_printf_common+0xa8>
 80107fa:	2301      	movs	r3, #1
 80107fc:	4652      	mov	r2, sl
 80107fe:	4649      	mov	r1, r9
 8010800:	4638      	mov	r0, r7
 8010802:	47c0      	blx	r8
 8010804:	3001      	adds	r0, #1
 8010806:	d103      	bne.n	8010810 <_printf_common+0xac>
 8010808:	f04f 30ff 	mov.w	r0, #4294967295
 801080c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010810:	3501      	adds	r5, #1
 8010812:	e7c6      	b.n	80107a2 <_printf_common+0x3e>
 8010814:	18e1      	adds	r1, r4, r3
 8010816:	1c5a      	adds	r2, r3, #1
 8010818:	2030      	movs	r0, #48	; 0x30
 801081a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801081e:	4422      	add	r2, r4
 8010820:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010824:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010828:	3302      	adds	r3, #2
 801082a:	e7c7      	b.n	80107bc <_printf_common+0x58>
 801082c:	2301      	movs	r3, #1
 801082e:	4622      	mov	r2, r4
 8010830:	4649      	mov	r1, r9
 8010832:	4638      	mov	r0, r7
 8010834:	47c0      	blx	r8
 8010836:	3001      	adds	r0, #1
 8010838:	d0e6      	beq.n	8010808 <_printf_common+0xa4>
 801083a:	3601      	adds	r6, #1
 801083c:	e7d9      	b.n	80107f2 <_printf_common+0x8e>
	...

08010840 <_printf_i>:
 8010840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010844:	460c      	mov	r4, r1
 8010846:	4691      	mov	r9, r2
 8010848:	7e27      	ldrb	r7, [r4, #24]
 801084a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801084c:	2f78      	cmp	r7, #120	; 0x78
 801084e:	4680      	mov	r8, r0
 8010850:	469a      	mov	sl, r3
 8010852:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010856:	d807      	bhi.n	8010868 <_printf_i+0x28>
 8010858:	2f62      	cmp	r7, #98	; 0x62
 801085a:	d80a      	bhi.n	8010872 <_printf_i+0x32>
 801085c:	2f00      	cmp	r7, #0
 801085e:	f000 80d8 	beq.w	8010a12 <_printf_i+0x1d2>
 8010862:	2f58      	cmp	r7, #88	; 0x58
 8010864:	f000 80a3 	beq.w	80109ae <_printf_i+0x16e>
 8010868:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801086c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010870:	e03a      	b.n	80108e8 <_printf_i+0xa8>
 8010872:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010876:	2b15      	cmp	r3, #21
 8010878:	d8f6      	bhi.n	8010868 <_printf_i+0x28>
 801087a:	a001      	add	r0, pc, #4	; (adr r0, 8010880 <_printf_i+0x40>)
 801087c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010880:	080108d9 	.word	0x080108d9
 8010884:	080108ed 	.word	0x080108ed
 8010888:	08010869 	.word	0x08010869
 801088c:	08010869 	.word	0x08010869
 8010890:	08010869 	.word	0x08010869
 8010894:	08010869 	.word	0x08010869
 8010898:	080108ed 	.word	0x080108ed
 801089c:	08010869 	.word	0x08010869
 80108a0:	08010869 	.word	0x08010869
 80108a4:	08010869 	.word	0x08010869
 80108a8:	08010869 	.word	0x08010869
 80108ac:	080109f9 	.word	0x080109f9
 80108b0:	0801091d 	.word	0x0801091d
 80108b4:	080109db 	.word	0x080109db
 80108b8:	08010869 	.word	0x08010869
 80108bc:	08010869 	.word	0x08010869
 80108c0:	08010a1b 	.word	0x08010a1b
 80108c4:	08010869 	.word	0x08010869
 80108c8:	0801091d 	.word	0x0801091d
 80108cc:	08010869 	.word	0x08010869
 80108d0:	08010869 	.word	0x08010869
 80108d4:	080109e3 	.word	0x080109e3
 80108d8:	680b      	ldr	r3, [r1, #0]
 80108da:	1d1a      	adds	r2, r3, #4
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	600a      	str	r2, [r1, #0]
 80108e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80108e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80108e8:	2301      	movs	r3, #1
 80108ea:	e0a3      	b.n	8010a34 <_printf_i+0x1f4>
 80108ec:	6825      	ldr	r5, [r4, #0]
 80108ee:	6808      	ldr	r0, [r1, #0]
 80108f0:	062e      	lsls	r6, r5, #24
 80108f2:	f100 0304 	add.w	r3, r0, #4
 80108f6:	d50a      	bpl.n	801090e <_printf_i+0xce>
 80108f8:	6805      	ldr	r5, [r0, #0]
 80108fa:	600b      	str	r3, [r1, #0]
 80108fc:	2d00      	cmp	r5, #0
 80108fe:	da03      	bge.n	8010908 <_printf_i+0xc8>
 8010900:	232d      	movs	r3, #45	; 0x2d
 8010902:	426d      	negs	r5, r5
 8010904:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010908:	485e      	ldr	r0, [pc, #376]	; (8010a84 <_printf_i+0x244>)
 801090a:	230a      	movs	r3, #10
 801090c:	e019      	b.n	8010942 <_printf_i+0x102>
 801090e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010912:	6805      	ldr	r5, [r0, #0]
 8010914:	600b      	str	r3, [r1, #0]
 8010916:	bf18      	it	ne
 8010918:	b22d      	sxthne	r5, r5
 801091a:	e7ef      	b.n	80108fc <_printf_i+0xbc>
 801091c:	680b      	ldr	r3, [r1, #0]
 801091e:	6825      	ldr	r5, [r4, #0]
 8010920:	1d18      	adds	r0, r3, #4
 8010922:	6008      	str	r0, [r1, #0]
 8010924:	0628      	lsls	r0, r5, #24
 8010926:	d501      	bpl.n	801092c <_printf_i+0xec>
 8010928:	681d      	ldr	r5, [r3, #0]
 801092a:	e002      	b.n	8010932 <_printf_i+0xf2>
 801092c:	0669      	lsls	r1, r5, #25
 801092e:	d5fb      	bpl.n	8010928 <_printf_i+0xe8>
 8010930:	881d      	ldrh	r5, [r3, #0]
 8010932:	4854      	ldr	r0, [pc, #336]	; (8010a84 <_printf_i+0x244>)
 8010934:	2f6f      	cmp	r7, #111	; 0x6f
 8010936:	bf0c      	ite	eq
 8010938:	2308      	moveq	r3, #8
 801093a:	230a      	movne	r3, #10
 801093c:	2100      	movs	r1, #0
 801093e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010942:	6866      	ldr	r6, [r4, #4]
 8010944:	60a6      	str	r6, [r4, #8]
 8010946:	2e00      	cmp	r6, #0
 8010948:	bfa2      	ittt	ge
 801094a:	6821      	ldrge	r1, [r4, #0]
 801094c:	f021 0104 	bicge.w	r1, r1, #4
 8010950:	6021      	strge	r1, [r4, #0]
 8010952:	b90d      	cbnz	r5, 8010958 <_printf_i+0x118>
 8010954:	2e00      	cmp	r6, #0
 8010956:	d04d      	beq.n	80109f4 <_printf_i+0x1b4>
 8010958:	4616      	mov	r6, r2
 801095a:	fbb5 f1f3 	udiv	r1, r5, r3
 801095e:	fb03 5711 	mls	r7, r3, r1, r5
 8010962:	5dc7      	ldrb	r7, [r0, r7]
 8010964:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010968:	462f      	mov	r7, r5
 801096a:	42bb      	cmp	r3, r7
 801096c:	460d      	mov	r5, r1
 801096e:	d9f4      	bls.n	801095a <_printf_i+0x11a>
 8010970:	2b08      	cmp	r3, #8
 8010972:	d10b      	bne.n	801098c <_printf_i+0x14c>
 8010974:	6823      	ldr	r3, [r4, #0]
 8010976:	07df      	lsls	r7, r3, #31
 8010978:	d508      	bpl.n	801098c <_printf_i+0x14c>
 801097a:	6923      	ldr	r3, [r4, #16]
 801097c:	6861      	ldr	r1, [r4, #4]
 801097e:	4299      	cmp	r1, r3
 8010980:	bfde      	ittt	le
 8010982:	2330      	movle	r3, #48	; 0x30
 8010984:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010988:	f106 36ff 	addle.w	r6, r6, #4294967295
 801098c:	1b92      	subs	r2, r2, r6
 801098e:	6122      	str	r2, [r4, #16]
 8010990:	f8cd a000 	str.w	sl, [sp]
 8010994:	464b      	mov	r3, r9
 8010996:	aa03      	add	r2, sp, #12
 8010998:	4621      	mov	r1, r4
 801099a:	4640      	mov	r0, r8
 801099c:	f7ff fee2 	bl	8010764 <_printf_common>
 80109a0:	3001      	adds	r0, #1
 80109a2:	d14c      	bne.n	8010a3e <_printf_i+0x1fe>
 80109a4:	f04f 30ff 	mov.w	r0, #4294967295
 80109a8:	b004      	add	sp, #16
 80109aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109ae:	4835      	ldr	r0, [pc, #212]	; (8010a84 <_printf_i+0x244>)
 80109b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80109b4:	6823      	ldr	r3, [r4, #0]
 80109b6:	680e      	ldr	r6, [r1, #0]
 80109b8:	061f      	lsls	r7, r3, #24
 80109ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80109be:	600e      	str	r6, [r1, #0]
 80109c0:	d514      	bpl.n	80109ec <_printf_i+0x1ac>
 80109c2:	07d9      	lsls	r1, r3, #31
 80109c4:	bf44      	itt	mi
 80109c6:	f043 0320 	orrmi.w	r3, r3, #32
 80109ca:	6023      	strmi	r3, [r4, #0]
 80109cc:	b91d      	cbnz	r5, 80109d6 <_printf_i+0x196>
 80109ce:	6823      	ldr	r3, [r4, #0]
 80109d0:	f023 0320 	bic.w	r3, r3, #32
 80109d4:	6023      	str	r3, [r4, #0]
 80109d6:	2310      	movs	r3, #16
 80109d8:	e7b0      	b.n	801093c <_printf_i+0xfc>
 80109da:	6823      	ldr	r3, [r4, #0]
 80109dc:	f043 0320 	orr.w	r3, r3, #32
 80109e0:	6023      	str	r3, [r4, #0]
 80109e2:	2378      	movs	r3, #120	; 0x78
 80109e4:	4828      	ldr	r0, [pc, #160]	; (8010a88 <_printf_i+0x248>)
 80109e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80109ea:	e7e3      	b.n	80109b4 <_printf_i+0x174>
 80109ec:	065e      	lsls	r6, r3, #25
 80109ee:	bf48      	it	mi
 80109f0:	b2ad      	uxthmi	r5, r5
 80109f2:	e7e6      	b.n	80109c2 <_printf_i+0x182>
 80109f4:	4616      	mov	r6, r2
 80109f6:	e7bb      	b.n	8010970 <_printf_i+0x130>
 80109f8:	680b      	ldr	r3, [r1, #0]
 80109fa:	6826      	ldr	r6, [r4, #0]
 80109fc:	6960      	ldr	r0, [r4, #20]
 80109fe:	1d1d      	adds	r5, r3, #4
 8010a00:	600d      	str	r5, [r1, #0]
 8010a02:	0635      	lsls	r5, r6, #24
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	d501      	bpl.n	8010a0c <_printf_i+0x1cc>
 8010a08:	6018      	str	r0, [r3, #0]
 8010a0a:	e002      	b.n	8010a12 <_printf_i+0x1d2>
 8010a0c:	0671      	lsls	r1, r6, #25
 8010a0e:	d5fb      	bpl.n	8010a08 <_printf_i+0x1c8>
 8010a10:	8018      	strh	r0, [r3, #0]
 8010a12:	2300      	movs	r3, #0
 8010a14:	6123      	str	r3, [r4, #16]
 8010a16:	4616      	mov	r6, r2
 8010a18:	e7ba      	b.n	8010990 <_printf_i+0x150>
 8010a1a:	680b      	ldr	r3, [r1, #0]
 8010a1c:	1d1a      	adds	r2, r3, #4
 8010a1e:	600a      	str	r2, [r1, #0]
 8010a20:	681e      	ldr	r6, [r3, #0]
 8010a22:	6862      	ldr	r2, [r4, #4]
 8010a24:	2100      	movs	r1, #0
 8010a26:	4630      	mov	r0, r6
 8010a28:	f7ef fbda 	bl	80001e0 <memchr>
 8010a2c:	b108      	cbz	r0, 8010a32 <_printf_i+0x1f2>
 8010a2e:	1b80      	subs	r0, r0, r6
 8010a30:	6060      	str	r0, [r4, #4]
 8010a32:	6863      	ldr	r3, [r4, #4]
 8010a34:	6123      	str	r3, [r4, #16]
 8010a36:	2300      	movs	r3, #0
 8010a38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a3c:	e7a8      	b.n	8010990 <_printf_i+0x150>
 8010a3e:	6923      	ldr	r3, [r4, #16]
 8010a40:	4632      	mov	r2, r6
 8010a42:	4649      	mov	r1, r9
 8010a44:	4640      	mov	r0, r8
 8010a46:	47d0      	blx	sl
 8010a48:	3001      	adds	r0, #1
 8010a4a:	d0ab      	beq.n	80109a4 <_printf_i+0x164>
 8010a4c:	6823      	ldr	r3, [r4, #0]
 8010a4e:	079b      	lsls	r3, r3, #30
 8010a50:	d413      	bmi.n	8010a7a <_printf_i+0x23a>
 8010a52:	68e0      	ldr	r0, [r4, #12]
 8010a54:	9b03      	ldr	r3, [sp, #12]
 8010a56:	4298      	cmp	r0, r3
 8010a58:	bfb8      	it	lt
 8010a5a:	4618      	movlt	r0, r3
 8010a5c:	e7a4      	b.n	80109a8 <_printf_i+0x168>
 8010a5e:	2301      	movs	r3, #1
 8010a60:	4632      	mov	r2, r6
 8010a62:	4649      	mov	r1, r9
 8010a64:	4640      	mov	r0, r8
 8010a66:	47d0      	blx	sl
 8010a68:	3001      	adds	r0, #1
 8010a6a:	d09b      	beq.n	80109a4 <_printf_i+0x164>
 8010a6c:	3501      	adds	r5, #1
 8010a6e:	68e3      	ldr	r3, [r4, #12]
 8010a70:	9903      	ldr	r1, [sp, #12]
 8010a72:	1a5b      	subs	r3, r3, r1
 8010a74:	42ab      	cmp	r3, r5
 8010a76:	dcf2      	bgt.n	8010a5e <_printf_i+0x21e>
 8010a78:	e7eb      	b.n	8010a52 <_printf_i+0x212>
 8010a7a:	2500      	movs	r5, #0
 8010a7c:	f104 0619 	add.w	r6, r4, #25
 8010a80:	e7f5      	b.n	8010a6e <_printf_i+0x22e>
 8010a82:	bf00      	nop
 8010a84:	08016b84 	.word	0x08016b84
 8010a88:	08016b95 	.word	0x08016b95

08010a8c <_scanf_float>:
 8010a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a90:	b087      	sub	sp, #28
 8010a92:	4617      	mov	r7, r2
 8010a94:	9303      	str	r3, [sp, #12]
 8010a96:	688b      	ldr	r3, [r1, #8]
 8010a98:	1e5a      	subs	r2, r3, #1
 8010a9a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010a9e:	bf83      	ittte	hi
 8010aa0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010aa4:	195b      	addhi	r3, r3, r5
 8010aa6:	9302      	strhi	r3, [sp, #8]
 8010aa8:	2300      	movls	r3, #0
 8010aaa:	bf86      	itte	hi
 8010aac:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010ab0:	608b      	strhi	r3, [r1, #8]
 8010ab2:	9302      	strls	r3, [sp, #8]
 8010ab4:	680b      	ldr	r3, [r1, #0]
 8010ab6:	468b      	mov	fp, r1
 8010ab8:	2500      	movs	r5, #0
 8010aba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010abe:	f84b 3b1c 	str.w	r3, [fp], #28
 8010ac2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010ac6:	4680      	mov	r8, r0
 8010ac8:	460c      	mov	r4, r1
 8010aca:	465e      	mov	r6, fp
 8010acc:	46aa      	mov	sl, r5
 8010ace:	46a9      	mov	r9, r5
 8010ad0:	9501      	str	r5, [sp, #4]
 8010ad2:	68a2      	ldr	r2, [r4, #8]
 8010ad4:	b152      	cbz	r2, 8010aec <_scanf_float+0x60>
 8010ad6:	683b      	ldr	r3, [r7, #0]
 8010ad8:	781b      	ldrb	r3, [r3, #0]
 8010ada:	2b4e      	cmp	r3, #78	; 0x4e
 8010adc:	d864      	bhi.n	8010ba8 <_scanf_float+0x11c>
 8010ade:	2b40      	cmp	r3, #64	; 0x40
 8010ae0:	d83c      	bhi.n	8010b5c <_scanf_float+0xd0>
 8010ae2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8010ae6:	b2c8      	uxtb	r0, r1
 8010ae8:	280e      	cmp	r0, #14
 8010aea:	d93a      	bls.n	8010b62 <_scanf_float+0xd6>
 8010aec:	f1b9 0f00 	cmp.w	r9, #0
 8010af0:	d003      	beq.n	8010afa <_scanf_float+0x6e>
 8010af2:	6823      	ldr	r3, [r4, #0]
 8010af4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010af8:	6023      	str	r3, [r4, #0]
 8010afa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010afe:	f1ba 0f01 	cmp.w	sl, #1
 8010b02:	f200 8113 	bhi.w	8010d2c <_scanf_float+0x2a0>
 8010b06:	455e      	cmp	r6, fp
 8010b08:	f200 8105 	bhi.w	8010d16 <_scanf_float+0x28a>
 8010b0c:	2501      	movs	r5, #1
 8010b0e:	4628      	mov	r0, r5
 8010b10:	b007      	add	sp, #28
 8010b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b16:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8010b1a:	2a0d      	cmp	r2, #13
 8010b1c:	d8e6      	bhi.n	8010aec <_scanf_float+0x60>
 8010b1e:	a101      	add	r1, pc, #4	; (adr r1, 8010b24 <_scanf_float+0x98>)
 8010b20:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010b24:	08010c63 	.word	0x08010c63
 8010b28:	08010aed 	.word	0x08010aed
 8010b2c:	08010aed 	.word	0x08010aed
 8010b30:	08010aed 	.word	0x08010aed
 8010b34:	08010cc3 	.word	0x08010cc3
 8010b38:	08010c9b 	.word	0x08010c9b
 8010b3c:	08010aed 	.word	0x08010aed
 8010b40:	08010aed 	.word	0x08010aed
 8010b44:	08010c71 	.word	0x08010c71
 8010b48:	08010aed 	.word	0x08010aed
 8010b4c:	08010aed 	.word	0x08010aed
 8010b50:	08010aed 	.word	0x08010aed
 8010b54:	08010aed 	.word	0x08010aed
 8010b58:	08010c29 	.word	0x08010c29
 8010b5c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8010b60:	e7db      	b.n	8010b1a <_scanf_float+0x8e>
 8010b62:	290e      	cmp	r1, #14
 8010b64:	d8c2      	bhi.n	8010aec <_scanf_float+0x60>
 8010b66:	a001      	add	r0, pc, #4	; (adr r0, 8010b6c <_scanf_float+0xe0>)
 8010b68:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010b6c:	08010c1b 	.word	0x08010c1b
 8010b70:	08010aed 	.word	0x08010aed
 8010b74:	08010c1b 	.word	0x08010c1b
 8010b78:	08010caf 	.word	0x08010caf
 8010b7c:	08010aed 	.word	0x08010aed
 8010b80:	08010bc9 	.word	0x08010bc9
 8010b84:	08010c05 	.word	0x08010c05
 8010b88:	08010c05 	.word	0x08010c05
 8010b8c:	08010c05 	.word	0x08010c05
 8010b90:	08010c05 	.word	0x08010c05
 8010b94:	08010c05 	.word	0x08010c05
 8010b98:	08010c05 	.word	0x08010c05
 8010b9c:	08010c05 	.word	0x08010c05
 8010ba0:	08010c05 	.word	0x08010c05
 8010ba4:	08010c05 	.word	0x08010c05
 8010ba8:	2b6e      	cmp	r3, #110	; 0x6e
 8010baa:	d809      	bhi.n	8010bc0 <_scanf_float+0x134>
 8010bac:	2b60      	cmp	r3, #96	; 0x60
 8010bae:	d8b2      	bhi.n	8010b16 <_scanf_float+0x8a>
 8010bb0:	2b54      	cmp	r3, #84	; 0x54
 8010bb2:	d077      	beq.n	8010ca4 <_scanf_float+0x218>
 8010bb4:	2b59      	cmp	r3, #89	; 0x59
 8010bb6:	d199      	bne.n	8010aec <_scanf_float+0x60>
 8010bb8:	2d07      	cmp	r5, #7
 8010bba:	d197      	bne.n	8010aec <_scanf_float+0x60>
 8010bbc:	2508      	movs	r5, #8
 8010bbe:	e029      	b.n	8010c14 <_scanf_float+0x188>
 8010bc0:	2b74      	cmp	r3, #116	; 0x74
 8010bc2:	d06f      	beq.n	8010ca4 <_scanf_float+0x218>
 8010bc4:	2b79      	cmp	r3, #121	; 0x79
 8010bc6:	e7f6      	b.n	8010bb6 <_scanf_float+0x12a>
 8010bc8:	6821      	ldr	r1, [r4, #0]
 8010bca:	05c8      	lsls	r0, r1, #23
 8010bcc:	d51a      	bpl.n	8010c04 <_scanf_float+0x178>
 8010bce:	9b02      	ldr	r3, [sp, #8]
 8010bd0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010bd4:	6021      	str	r1, [r4, #0]
 8010bd6:	f109 0901 	add.w	r9, r9, #1
 8010bda:	b11b      	cbz	r3, 8010be4 <_scanf_float+0x158>
 8010bdc:	3b01      	subs	r3, #1
 8010bde:	3201      	adds	r2, #1
 8010be0:	9302      	str	r3, [sp, #8]
 8010be2:	60a2      	str	r2, [r4, #8]
 8010be4:	68a3      	ldr	r3, [r4, #8]
 8010be6:	3b01      	subs	r3, #1
 8010be8:	60a3      	str	r3, [r4, #8]
 8010bea:	6923      	ldr	r3, [r4, #16]
 8010bec:	3301      	adds	r3, #1
 8010bee:	6123      	str	r3, [r4, #16]
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	3b01      	subs	r3, #1
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	607b      	str	r3, [r7, #4]
 8010bf8:	f340 8084 	ble.w	8010d04 <_scanf_float+0x278>
 8010bfc:	683b      	ldr	r3, [r7, #0]
 8010bfe:	3301      	adds	r3, #1
 8010c00:	603b      	str	r3, [r7, #0]
 8010c02:	e766      	b.n	8010ad2 <_scanf_float+0x46>
 8010c04:	eb1a 0f05 	cmn.w	sl, r5
 8010c08:	f47f af70 	bne.w	8010aec <_scanf_float+0x60>
 8010c0c:	6822      	ldr	r2, [r4, #0]
 8010c0e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8010c12:	6022      	str	r2, [r4, #0]
 8010c14:	f806 3b01 	strb.w	r3, [r6], #1
 8010c18:	e7e4      	b.n	8010be4 <_scanf_float+0x158>
 8010c1a:	6822      	ldr	r2, [r4, #0]
 8010c1c:	0610      	lsls	r0, r2, #24
 8010c1e:	f57f af65 	bpl.w	8010aec <_scanf_float+0x60>
 8010c22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010c26:	e7f4      	b.n	8010c12 <_scanf_float+0x186>
 8010c28:	f1ba 0f00 	cmp.w	sl, #0
 8010c2c:	d10e      	bne.n	8010c4c <_scanf_float+0x1c0>
 8010c2e:	f1b9 0f00 	cmp.w	r9, #0
 8010c32:	d10e      	bne.n	8010c52 <_scanf_float+0x1c6>
 8010c34:	6822      	ldr	r2, [r4, #0]
 8010c36:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010c3a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010c3e:	d108      	bne.n	8010c52 <_scanf_float+0x1c6>
 8010c40:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010c44:	6022      	str	r2, [r4, #0]
 8010c46:	f04f 0a01 	mov.w	sl, #1
 8010c4a:	e7e3      	b.n	8010c14 <_scanf_float+0x188>
 8010c4c:	f1ba 0f02 	cmp.w	sl, #2
 8010c50:	d055      	beq.n	8010cfe <_scanf_float+0x272>
 8010c52:	2d01      	cmp	r5, #1
 8010c54:	d002      	beq.n	8010c5c <_scanf_float+0x1d0>
 8010c56:	2d04      	cmp	r5, #4
 8010c58:	f47f af48 	bne.w	8010aec <_scanf_float+0x60>
 8010c5c:	3501      	adds	r5, #1
 8010c5e:	b2ed      	uxtb	r5, r5
 8010c60:	e7d8      	b.n	8010c14 <_scanf_float+0x188>
 8010c62:	f1ba 0f01 	cmp.w	sl, #1
 8010c66:	f47f af41 	bne.w	8010aec <_scanf_float+0x60>
 8010c6a:	f04f 0a02 	mov.w	sl, #2
 8010c6e:	e7d1      	b.n	8010c14 <_scanf_float+0x188>
 8010c70:	b97d      	cbnz	r5, 8010c92 <_scanf_float+0x206>
 8010c72:	f1b9 0f00 	cmp.w	r9, #0
 8010c76:	f47f af3c 	bne.w	8010af2 <_scanf_float+0x66>
 8010c7a:	6822      	ldr	r2, [r4, #0]
 8010c7c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010c80:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010c84:	f47f af39 	bne.w	8010afa <_scanf_float+0x6e>
 8010c88:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010c8c:	6022      	str	r2, [r4, #0]
 8010c8e:	2501      	movs	r5, #1
 8010c90:	e7c0      	b.n	8010c14 <_scanf_float+0x188>
 8010c92:	2d03      	cmp	r5, #3
 8010c94:	d0e2      	beq.n	8010c5c <_scanf_float+0x1d0>
 8010c96:	2d05      	cmp	r5, #5
 8010c98:	e7de      	b.n	8010c58 <_scanf_float+0x1cc>
 8010c9a:	2d02      	cmp	r5, #2
 8010c9c:	f47f af26 	bne.w	8010aec <_scanf_float+0x60>
 8010ca0:	2503      	movs	r5, #3
 8010ca2:	e7b7      	b.n	8010c14 <_scanf_float+0x188>
 8010ca4:	2d06      	cmp	r5, #6
 8010ca6:	f47f af21 	bne.w	8010aec <_scanf_float+0x60>
 8010caa:	2507      	movs	r5, #7
 8010cac:	e7b2      	b.n	8010c14 <_scanf_float+0x188>
 8010cae:	6822      	ldr	r2, [r4, #0]
 8010cb0:	0591      	lsls	r1, r2, #22
 8010cb2:	f57f af1b 	bpl.w	8010aec <_scanf_float+0x60>
 8010cb6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8010cba:	6022      	str	r2, [r4, #0]
 8010cbc:	f8cd 9004 	str.w	r9, [sp, #4]
 8010cc0:	e7a8      	b.n	8010c14 <_scanf_float+0x188>
 8010cc2:	6822      	ldr	r2, [r4, #0]
 8010cc4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010cc8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010ccc:	d006      	beq.n	8010cdc <_scanf_float+0x250>
 8010cce:	0550      	lsls	r0, r2, #21
 8010cd0:	f57f af0c 	bpl.w	8010aec <_scanf_float+0x60>
 8010cd4:	f1b9 0f00 	cmp.w	r9, #0
 8010cd8:	f43f af0f 	beq.w	8010afa <_scanf_float+0x6e>
 8010cdc:	0591      	lsls	r1, r2, #22
 8010cde:	bf58      	it	pl
 8010ce0:	9901      	ldrpl	r1, [sp, #4]
 8010ce2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010ce6:	bf58      	it	pl
 8010ce8:	eba9 0101 	subpl.w	r1, r9, r1
 8010cec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010cf0:	bf58      	it	pl
 8010cf2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010cf6:	6022      	str	r2, [r4, #0]
 8010cf8:	f04f 0900 	mov.w	r9, #0
 8010cfc:	e78a      	b.n	8010c14 <_scanf_float+0x188>
 8010cfe:	f04f 0a03 	mov.w	sl, #3
 8010d02:	e787      	b.n	8010c14 <_scanf_float+0x188>
 8010d04:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010d08:	4639      	mov	r1, r7
 8010d0a:	4640      	mov	r0, r8
 8010d0c:	4798      	blx	r3
 8010d0e:	2800      	cmp	r0, #0
 8010d10:	f43f aedf 	beq.w	8010ad2 <_scanf_float+0x46>
 8010d14:	e6ea      	b.n	8010aec <_scanf_float+0x60>
 8010d16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010d1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010d1e:	463a      	mov	r2, r7
 8010d20:	4640      	mov	r0, r8
 8010d22:	4798      	blx	r3
 8010d24:	6923      	ldr	r3, [r4, #16]
 8010d26:	3b01      	subs	r3, #1
 8010d28:	6123      	str	r3, [r4, #16]
 8010d2a:	e6ec      	b.n	8010b06 <_scanf_float+0x7a>
 8010d2c:	1e6b      	subs	r3, r5, #1
 8010d2e:	2b06      	cmp	r3, #6
 8010d30:	d825      	bhi.n	8010d7e <_scanf_float+0x2f2>
 8010d32:	2d02      	cmp	r5, #2
 8010d34:	d836      	bhi.n	8010da4 <_scanf_float+0x318>
 8010d36:	455e      	cmp	r6, fp
 8010d38:	f67f aee8 	bls.w	8010b0c <_scanf_float+0x80>
 8010d3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010d40:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010d44:	463a      	mov	r2, r7
 8010d46:	4640      	mov	r0, r8
 8010d48:	4798      	blx	r3
 8010d4a:	6923      	ldr	r3, [r4, #16]
 8010d4c:	3b01      	subs	r3, #1
 8010d4e:	6123      	str	r3, [r4, #16]
 8010d50:	e7f1      	b.n	8010d36 <_scanf_float+0x2aa>
 8010d52:	9802      	ldr	r0, [sp, #8]
 8010d54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010d58:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8010d5c:	9002      	str	r0, [sp, #8]
 8010d5e:	463a      	mov	r2, r7
 8010d60:	4640      	mov	r0, r8
 8010d62:	4798      	blx	r3
 8010d64:	6923      	ldr	r3, [r4, #16]
 8010d66:	3b01      	subs	r3, #1
 8010d68:	6123      	str	r3, [r4, #16]
 8010d6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010d6e:	fa5f fa8a 	uxtb.w	sl, sl
 8010d72:	f1ba 0f02 	cmp.w	sl, #2
 8010d76:	d1ec      	bne.n	8010d52 <_scanf_float+0x2c6>
 8010d78:	3d03      	subs	r5, #3
 8010d7a:	b2ed      	uxtb	r5, r5
 8010d7c:	1b76      	subs	r6, r6, r5
 8010d7e:	6823      	ldr	r3, [r4, #0]
 8010d80:	05da      	lsls	r2, r3, #23
 8010d82:	d52f      	bpl.n	8010de4 <_scanf_float+0x358>
 8010d84:	055b      	lsls	r3, r3, #21
 8010d86:	d510      	bpl.n	8010daa <_scanf_float+0x31e>
 8010d88:	455e      	cmp	r6, fp
 8010d8a:	f67f aebf 	bls.w	8010b0c <_scanf_float+0x80>
 8010d8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010d92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010d96:	463a      	mov	r2, r7
 8010d98:	4640      	mov	r0, r8
 8010d9a:	4798      	blx	r3
 8010d9c:	6923      	ldr	r3, [r4, #16]
 8010d9e:	3b01      	subs	r3, #1
 8010da0:	6123      	str	r3, [r4, #16]
 8010da2:	e7f1      	b.n	8010d88 <_scanf_float+0x2fc>
 8010da4:	46aa      	mov	sl, r5
 8010da6:	9602      	str	r6, [sp, #8]
 8010da8:	e7df      	b.n	8010d6a <_scanf_float+0x2de>
 8010daa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010dae:	6923      	ldr	r3, [r4, #16]
 8010db0:	2965      	cmp	r1, #101	; 0x65
 8010db2:	f103 33ff 	add.w	r3, r3, #4294967295
 8010db6:	f106 35ff 	add.w	r5, r6, #4294967295
 8010dba:	6123      	str	r3, [r4, #16]
 8010dbc:	d00c      	beq.n	8010dd8 <_scanf_float+0x34c>
 8010dbe:	2945      	cmp	r1, #69	; 0x45
 8010dc0:	d00a      	beq.n	8010dd8 <_scanf_float+0x34c>
 8010dc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010dc6:	463a      	mov	r2, r7
 8010dc8:	4640      	mov	r0, r8
 8010dca:	4798      	blx	r3
 8010dcc:	6923      	ldr	r3, [r4, #16]
 8010dce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010dd2:	3b01      	subs	r3, #1
 8010dd4:	1eb5      	subs	r5, r6, #2
 8010dd6:	6123      	str	r3, [r4, #16]
 8010dd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010ddc:	463a      	mov	r2, r7
 8010dde:	4640      	mov	r0, r8
 8010de0:	4798      	blx	r3
 8010de2:	462e      	mov	r6, r5
 8010de4:	6825      	ldr	r5, [r4, #0]
 8010de6:	f015 0510 	ands.w	r5, r5, #16
 8010dea:	d158      	bne.n	8010e9e <_scanf_float+0x412>
 8010dec:	7035      	strb	r5, [r6, #0]
 8010dee:	6823      	ldr	r3, [r4, #0]
 8010df0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010df8:	d11c      	bne.n	8010e34 <_scanf_float+0x3a8>
 8010dfa:	9b01      	ldr	r3, [sp, #4]
 8010dfc:	454b      	cmp	r3, r9
 8010dfe:	eba3 0209 	sub.w	r2, r3, r9
 8010e02:	d124      	bne.n	8010e4e <_scanf_float+0x3c2>
 8010e04:	2200      	movs	r2, #0
 8010e06:	4659      	mov	r1, fp
 8010e08:	4640      	mov	r0, r8
 8010e0a:	f000 ff73 	bl	8011cf4 <_strtod_r>
 8010e0e:	9b03      	ldr	r3, [sp, #12]
 8010e10:	6821      	ldr	r1, [r4, #0]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	f011 0f02 	tst.w	r1, #2
 8010e18:	ec57 6b10 	vmov	r6, r7, d0
 8010e1c:	f103 0204 	add.w	r2, r3, #4
 8010e20:	d020      	beq.n	8010e64 <_scanf_float+0x3d8>
 8010e22:	9903      	ldr	r1, [sp, #12]
 8010e24:	600a      	str	r2, [r1, #0]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	e9c3 6700 	strd	r6, r7, [r3]
 8010e2c:	68e3      	ldr	r3, [r4, #12]
 8010e2e:	3301      	adds	r3, #1
 8010e30:	60e3      	str	r3, [r4, #12]
 8010e32:	e66c      	b.n	8010b0e <_scanf_float+0x82>
 8010e34:	9b04      	ldr	r3, [sp, #16]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d0e4      	beq.n	8010e04 <_scanf_float+0x378>
 8010e3a:	9905      	ldr	r1, [sp, #20]
 8010e3c:	230a      	movs	r3, #10
 8010e3e:	462a      	mov	r2, r5
 8010e40:	3101      	adds	r1, #1
 8010e42:	4640      	mov	r0, r8
 8010e44:	f000 ffe0 	bl	8011e08 <_strtol_r>
 8010e48:	9b04      	ldr	r3, [sp, #16]
 8010e4a:	9e05      	ldr	r6, [sp, #20]
 8010e4c:	1ac2      	subs	r2, r0, r3
 8010e4e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010e52:	429e      	cmp	r6, r3
 8010e54:	bf28      	it	cs
 8010e56:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8010e5a:	4912      	ldr	r1, [pc, #72]	; (8010ea4 <_scanf_float+0x418>)
 8010e5c:	4630      	mov	r0, r6
 8010e5e:	f000 f87f 	bl	8010f60 <siprintf>
 8010e62:	e7cf      	b.n	8010e04 <_scanf_float+0x378>
 8010e64:	f011 0f04 	tst.w	r1, #4
 8010e68:	9903      	ldr	r1, [sp, #12]
 8010e6a:	600a      	str	r2, [r1, #0]
 8010e6c:	d1db      	bne.n	8010e26 <_scanf_float+0x39a>
 8010e6e:	f8d3 8000 	ldr.w	r8, [r3]
 8010e72:	ee10 2a10 	vmov	r2, s0
 8010e76:	ee10 0a10 	vmov	r0, s0
 8010e7a:	463b      	mov	r3, r7
 8010e7c:	4639      	mov	r1, r7
 8010e7e:	f7ef fe5d 	bl	8000b3c <__aeabi_dcmpun>
 8010e82:	b128      	cbz	r0, 8010e90 <_scanf_float+0x404>
 8010e84:	4808      	ldr	r0, [pc, #32]	; (8010ea8 <_scanf_float+0x41c>)
 8010e86:	f000 f821 	bl	8010ecc <nanf>
 8010e8a:	ed88 0a00 	vstr	s0, [r8]
 8010e8e:	e7cd      	b.n	8010e2c <_scanf_float+0x3a0>
 8010e90:	4630      	mov	r0, r6
 8010e92:	4639      	mov	r1, r7
 8010e94:	f7ef feb0 	bl	8000bf8 <__aeabi_d2f>
 8010e98:	f8c8 0000 	str.w	r0, [r8]
 8010e9c:	e7c6      	b.n	8010e2c <_scanf_float+0x3a0>
 8010e9e:	2500      	movs	r5, #0
 8010ea0:	e635      	b.n	8010b0e <_scanf_float+0x82>
 8010ea2:	bf00      	nop
 8010ea4:	08016ba6 	.word	0x08016ba6
 8010ea8:	08016fdb 	.word	0x08016fdb

08010eac <_sbrk_r>:
 8010eac:	b538      	push	{r3, r4, r5, lr}
 8010eae:	4d06      	ldr	r5, [pc, #24]	; (8010ec8 <_sbrk_r+0x1c>)
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	4604      	mov	r4, r0
 8010eb4:	4608      	mov	r0, r1
 8010eb6:	602b      	str	r3, [r5, #0]
 8010eb8:	f7f1 ff90 	bl	8002ddc <_sbrk>
 8010ebc:	1c43      	adds	r3, r0, #1
 8010ebe:	d102      	bne.n	8010ec6 <_sbrk_r+0x1a>
 8010ec0:	682b      	ldr	r3, [r5, #0]
 8010ec2:	b103      	cbz	r3, 8010ec6 <_sbrk_r+0x1a>
 8010ec4:	6023      	str	r3, [r4, #0]
 8010ec6:	bd38      	pop	{r3, r4, r5, pc}
 8010ec8:	20005b18 	.word	0x20005b18

08010ecc <nanf>:
 8010ecc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010ed4 <nanf+0x8>
 8010ed0:	4770      	bx	lr
 8010ed2:	bf00      	nop
 8010ed4:	7fc00000 	.word	0x7fc00000

08010ed8 <_raise_r>:
 8010ed8:	291f      	cmp	r1, #31
 8010eda:	b538      	push	{r3, r4, r5, lr}
 8010edc:	4604      	mov	r4, r0
 8010ede:	460d      	mov	r5, r1
 8010ee0:	d904      	bls.n	8010eec <_raise_r+0x14>
 8010ee2:	2316      	movs	r3, #22
 8010ee4:	6003      	str	r3, [r0, #0]
 8010ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8010eea:	bd38      	pop	{r3, r4, r5, pc}
 8010eec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010eee:	b112      	cbz	r2, 8010ef6 <_raise_r+0x1e>
 8010ef0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010ef4:	b94b      	cbnz	r3, 8010f0a <_raise_r+0x32>
 8010ef6:	4620      	mov	r0, r4
 8010ef8:	f000 f830 	bl	8010f5c <_getpid_r>
 8010efc:	462a      	mov	r2, r5
 8010efe:	4601      	mov	r1, r0
 8010f00:	4620      	mov	r0, r4
 8010f02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f06:	f000 b817 	b.w	8010f38 <_kill_r>
 8010f0a:	2b01      	cmp	r3, #1
 8010f0c:	d00a      	beq.n	8010f24 <_raise_r+0x4c>
 8010f0e:	1c59      	adds	r1, r3, #1
 8010f10:	d103      	bne.n	8010f1a <_raise_r+0x42>
 8010f12:	2316      	movs	r3, #22
 8010f14:	6003      	str	r3, [r0, #0]
 8010f16:	2001      	movs	r0, #1
 8010f18:	e7e7      	b.n	8010eea <_raise_r+0x12>
 8010f1a:	2400      	movs	r4, #0
 8010f1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010f20:	4628      	mov	r0, r5
 8010f22:	4798      	blx	r3
 8010f24:	2000      	movs	r0, #0
 8010f26:	e7e0      	b.n	8010eea <_raise_r+0x12>

08010f28 <raise>:
 8010f28:	4b02      	ldr	r3, [pc, #8]	; (8010f34 <raise+0xc>)
 8010f2a:	4601      	mov	r1, r0
 8010f2c:	6818      	ldr	r0, [r3, #0]
 8010f2e:	f7ff bfd3 	b.w	8010ed8 <_raise_r>
 8010f32:	bf00      	nop
 8010f34:	2000003c 	.word	0x2000003c

08010f38 <_kill_r>:
 8010f38:	b538      	push	{r3, r4, r5, lr}
 8010f3a:	4d07      	ldr	r5, [pc, #28]	; (8010f58 <_kill_r+0x20>)
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	4604      	mov	r4, r0
 8010f40:	4608      	mov	r0, r1
 8010f42:	4611      	mov	r1, r2
 8010f44:	602b      	str	r3, [r5, #0]
 8010f46:	f7f1 fec1 	bl	8002ccc <_kill>
 8010f4a:	1c43      	adds	r3, r0, #1
 8010f4c:	d102      	bne.n	8010f54 <_kill_r+0x1c>
 8010f4e:	682b      	ldr	r3, [r5, #0]
 8010f50:	b103      	cbz	r3, 8010f54 <_kill_r+0x1c>
 8010f52:	6023      	str	r3, [r4, #0]
 8010f54:	bd38      	pop	{r3, r4, r5, pc}
 8010f56:	bf00      	nop
 8010f58:	20005b18 	.word	0x20005b18

08010f5c <_getpid_r>:
 8010f5c:	f7f1 beae 	b.w	8002cbc <_getpid>

08010f60 <siprintf>:
 8010f60:	b40e      	push	{r1, r2, r3}
 8010f62:	b500      	push	{lr}
 8010f64:	b09c      	sub	sp, #112	; 0x70
 8010f66:	ab1d      	add	r3, sp, #116	; 0x74
 8010f68:	9002      	str	r0, [sp, #8]
 8010f6a:	9006      	str	r0, [sp, #24]
 8010f6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010f70:	4809      	ldr	r0, [pc, #36]	; (8010f98 <siprintf+0x38>)
 8010f72:	9107      	str	r1, [sp, #28]
 8010f74:	9104      	str	r1, [sp, #16]
 8010f76:	4909      	ldr	r1, [pc, #36]	; (8010f9c <siprintf+0x3c>)
 8010f78:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f7c:	9105      	str	r1, [sp, #20]
 8010f7e:	6800      	ldr	r0, [r0, #0]
 8010f80:	9301      	str	r3, [sp, #4]
 8010f82:	a902      	add	r1, sp, #8
 8010f84:	f002 fea6 	bl	8013cd4 <_svfiprintf_r>
 8010f88:	9b02      	ldr	r3, [sp, #8]
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	701a      	strb	r2, [r3, #0]
 8010f8e:	b01c      	add	sp, #112	; 0x70
 8010f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f94:	b003      	add	sp, #12
 8010f96:	4770      	bx	lr
 8010f98:	2000003c 	.word	0x2000003c
 8010f9c:	ffff0208 	.word	0xffff0208

08010fa0 <siscanf>:
 8010fa0:	b40e      	push	{r1, r2, r3}
 8010fa2:	b510      	push	{r4, lr}
 8010fa4:	b09f      	sub	sp, #124	; 0x7c
 8010fa6:	ac21      	add	r4, sp, #132	; 0x84
 8010fa8:	f44f 7101 	mov.w	r1, #516	; 0x204
 8010fac:	f854 2b04 	ldr.w	r2, [r4], #4
 8010fb0:	9201      	str	r2, [sp, #4]
 8010fb2:	f8ad 101c 	strh.w	r1, [sp, #28]
 8010fb6:	9004      	str	r0, [sp, #16]
 8010fb8:	9008      	str	r0, [sp, #32]
 8010fba:	f7ef f961 	bl	8000280 <strlen>
 8010fbe:	4b0c      	ldr	r3, [pc, #48]	; (8010ff0 <siscanf+0x50>)
 8010fc0:	9005      	str	r0, [sp, #20]
 8010fc2:	9009      	str	r0, [sp, #36]	; 0x24
 8010fc4:	930d      	str	r3, [sp, #52]	; 0x34
 8010fc6:	480b      	ldr	r0, [pc, #44]	; (8010ff4 <siscanf+0x54>)
 8010fc8:	9a01      	ldr	r2, [sp, #4]
 8010fca:	6800      	ldr	r0, [r0, #0]
 8010fcc:	9403      	str	r4, [sp, #12]
 8010fce:	2300      	movs	r3, #0
 8010fd0:	9311      	str	r3, [sp, #68]	; 0x44
 8010fd2:	9316      	str	r3, [sp, #88]	; 0x58
 8010fd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010fd8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010fdc:	a904      	add	r1, sp, #16
 8010fde:	4623      	mov	r3, r4
 8010fe0:	f002 ffd2 	bl	8013f88 <__ssvfiscanf_r>
 8010fe4:	b01f      	add	sp, #124	; 0x7c
 8010fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010fea:	b003      	add	sp, #12
 8010fec:	4770      	bx	lr
 8010fee:	bf00      	nop
 8010ff0:	0801101b 	.word	0x0801101b
 8010ff4:	2000003c 	.word	0x2000003c

08010ff8 <__sread>:
 8010ff8:	b510      	push	{r4, lr}
 8010ffa:	460c      	mov	r4, r1
 8010ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011000:	f003 fa86 	bl	8014510 <_read_r>
 8011004:	2800      	cmp	r0, #0
 8011006:	bfab      	itete	ge
 8011008:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801100a:	89a3      	ldrhlt	r3, [r4, #12]
 801100c:	181b      	addge	r3, r3, r0
 801100e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011012:	bfac      	ite	ge
 8011014:	6563      	strge	r3, [r4, #84]	; 0x54
 8011016:	81a3      	strhlt	r3, [r4, #12]
 8011018:	bd10      	pop	{r4, pc}

0801101a <__seofread>:
 801101a:	2000      	movs	r0, #0
 801101c:	4770      	bx	lr

0801101e <__swrite>:
 801101e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011022:	461f      	mov	r7, r3
 8011024:	898b      	ldrh	r3, [r1, #12]
 8011026:	05db      	lsls	r3, r3, #23
 8011028:	4605      	mov	r5, r0
 801102a:	460c      	mov	r4, r1
 801102c:	4616      	mov	r6, r2
 801102e:	d505      	bpl.n	801103c <__swrite+0x1e>
 8011030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011034:	2302      	movs	r3, #2
 8011036:	2200      	movs	r2, #0
 8011038:	f002 f8f6 	bl	8013228 <_lseek_r>
 801103c:	89a3      	ldrh	r3, [r4, #12]
 801103e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011042:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011046:	81a3      	strh	r3, [r4, #12]
 8011048:	4632      	mov	r2, r6
 801104a:	463b      	mov	r3, r7
 801104c:	4628      	mov	r0, r5
 801104e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011052:	f000 bedb 	b.w	8011e0c <_write_r>

08011056 <__sseek>:
 8011056:	b510      	push	{r4, lr}
 8011058:	460c      	mov	r4, r1
 801105a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801105e:	f002 f8e3 	bl	8013228 <_lseek_r>
 8011062:	1c43      	adds	r3, r0, #1
 8011064:	89a3      	ldrh	r3, [r4, #12]
 8011066:	bf15      	itete	ne
 8011068:	6560      	strne	r0, [r4, #84]	; 0x54
 801106a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801106e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011072:	81a3      	strheq	r3, [r4, #12]
 8011074:	bf18      	it	ne
 8011076:	81a3      	strhne	r3, [r4, #12]
 8011078:	bd10      	pop	{r4, pc}

0801107a <__sclose>:
 801107a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801107e:	f000 bed7 	b.w	8011e30 <_close_r>

08011082 <strncmp>:
 8011082:	b510      	push	{r4, lr}
 8011084:	b16a      	cbz	r2, 80110a2 <strncmp+0x20>
 8011086:	3901      	subs	r1, #1
 8011088:	1884      	adds	r4, r0, r2
 801108a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801108e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011092:	4293      	cmp	r3, r2
 8011094:	d103      	bne.n	801109e <strncmp+0x1c>
 8011096:	42a0      	cmp	r0, r4
 8011098:	d001      	beq.n	801109e <strncmp+0x1c>
 801109a:	2b00      	cmp	r3, #0
 801109c:	d1f5      	bne.n	801108a <strncmp+0x8>
 801109e:	1a98      	subs	r0, r3, r2
 80110a0:	bd10      	pop	{r4, pc}
 80110a2:	4610      	mov	r0, r2
 80110a4:	e7fc      	b.n	80110a0 <strncmp+0x1e>

080110a6 <sulp>:
 80110a6:	b570      	push	{r4, r5, r6, lr}
 80110a8:	4604      	mov	r4, r0
 80110aa:	460d      	mov	r5, r1
 80110ac:	ec45 4b10 	vmov	d0, r4, r5
 80110b0:	4616      	mov	r6, r2
 80110b2:	f002 fc55 	bl	8013960 <__ulp>
 80110b6:	ec51 0b10 	vmov	r0, r1, d0
 80110ba:	b17e      	cbz	r6, 80110dc <sulp+0x36>
 80110bc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80110c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	dd09      	ble.n	80110dc <sulp+0x36>
 80110c8:	051b      	lsls	r3, r3, #20
 80110ca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80110ce:	2400      	movs	r4, #0
 80110d0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80110d4:	4622      	mov	r2, r4
 80110d6:	462b      	mov	r3, r5
 80110d8:	f7ef fa96 	bl	8000608 <__aeabi_dmul>
 80110dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080110e0 <_strtod_l>:
 80110e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110e4:	b0a3      	sub	sp, #140	; 0x8c
 80110e6:	461f      	mov	r7, r3
 80110e8:	2300      	movs	r3, #0
 80110ea:	931e      	str	r3, [sp, #120]	; 0x78
 80110ec:	4ba4      	ldr	r3, [pc, #656]	; (8011380 <_strtod_l+0x2a0>)
 80110ee:	9219      	str	r2, [sp, #100]	; 0x64
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	9307      	str	r3, [sp, #28]
 80110f4:	4604      	mov	r4, r0
 80110f6:	4618      	mov	r0, r3
 80110f8:	4688      	mov	r8, r1
 80110fa:	f7ef f8c1 	bl	8000280 <strlen>
 80110fe:	f04f 0a00 	mov.w	sl, #0
 8011102:	4605      	mov	r5, r0
 8011104:	f04f 0b00 	mov.w	fp, #0
 8011108:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801110c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801110e:	781a      	ldrb	r2, [r3, #0]
 8011110:	2a2b      	cmp	r2, #43	; 0x2b
 8011112:	d04c      	beq.n	80111ae <_strtod_l+0xce>
 8011114:	d839      	bhi.n	801118a <_strtod_l+0xaa>
 8011116:	2a0d      	cmp	r2, #13
 8011118:	d832      	bhi.n	8011180 <_strtod_l+0xa0>
 801111a:	2a08      	cmp	r2, #8
 801111c:	d832      	bhi.n	8011184 <_strtod_l+0xa4>
 801111e:	2a00      	cmp	r2, #0
 8011120:	d03c      	beq.n	801119c <_strtod_l+0xbc>
 8011122:	2300      	movs	r3, #0
 8011124:	930e      	str	r3, [sp, #56]	; 0x38
 8011126:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8011128:	7833      	ldrb	r3, [r6, #0]
 801112a:	2b30      	cmp	r3, #48	; 0x30
 801112c:	f040 80b4 	bne.w	8011298 <_strtod_l+0x1b8>
 8011130:	7873      	ldrb	r3, [r6, #1]
 8011132:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011136:	2b58      	cmp	r3, #88	; 0x58
 8011138:	d16c      	bne.n	8011214 <_strtod_l+0x134>
 801113a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801113c:	9301      	str	r3, [sp, #4]
 801113e:	ab1e      	add	r3, sp, #120	; 0x78
 8011140:	9702      	str	r7, [sp, #8]
 8011142:	9300      	str	r3, [sp, #0]
 8011144:	4a8f      	ldr	r2, [pc, #572]	; (8011384 <_strtod_l+0x2a4>)
 8011146:	ab1f      	add	r3, sp, #124	; 0x7c
 8011148:	a91d      	add	r1, sp, #116	; 0x74
 801114a:	4620      	mov	r0, r4
 801114c:	f001 fd60 	bl	8012c10 <__gethex>
 8011150:	f010 0707 	ands.w	r7, r0, #7
 8011154:	4605      	mov	r5, r0
 8011156:	d005      	beq.n	8011164 <_strtod_l+0x84>
 8011158:	2f06      	cmp	r7, #6
 801115a:	d12a      	bne.n	80111b2 <_strtod_l+0xd2>
 801115c:	3601      	adds	r6, #1
 801115e:	2300      	movs	r3, #0
 8011160:	961d      	str	r6, [sp, #116]	; 0x74
 8011162:	930e      	str	r3, [sp, #56]	; 0x38
 8011164:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011166:	2b00      	cmp	r3, #0
 8011168:	f040 8596 	bne.w	8011c98 <_strtod_l+0xbb8>
 801116c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801116e:	b1db      	cbz	r3, 80111a8 <_strtod_l+0xc8>
 8011170:	4652      	mov	r2, sl
 8011172:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011176:	ec43 2b10 	vmov	d0, r2, r3
 801117a:	b023      	add	sp, #140	; 0x8c
 801117c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011180:	2a20      	cmp	r2, #32
 8011182:	d1ce      	bne.n	8011122 <_strtod_l+0x42>
 8011184:	3301      	adds	r3, #1
 8011186:	931d      	str	r3, [sp, #116]	; 0x74
 8011188:	e7c0      	b.n	801110c <_strtod_l+0x2c>
 801118a:	2a2d      	cmp	r2, #45	; 0x2d
 801118c:	d1c9      	bne.n	8011122 <_strtod_l+0x42>
 801118e:	2201      	movs	r2, #1
 8011190:	920e      	str	r2, [sp, #56]	; 0x38
 8011192:	1c5a      	adds	r2, r3, #1
 8011194:	921d      	str	r2, [sp, #116]	; 0x74
 8011196:	785b      	ldrb	r3, [r3, #1]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d1c4      	bne.n	8011126 <_strtod_l+0x46>
 801119c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801119e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	f040 8576 	bne.w	8011c94 <_strtod_l+0xbb4>
 80111a8:	4652      	mov	r2, sl
 80111aa:	465b      	mov	r3, fp
 80111ac:	e7e3      	b.n	8011176 <_strtod_l+0x96>
 80111ae:	2200      	movs	r2, #0
 80111b0:	e7ee      	b.n	8011190 <_strtod_l+0xb0>
 80111b2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80111b4:	b13a      	cbz	r2, 80111c6 <_strtod_l+0xe6>
 80111b6:	2135      	movs	r1, #53	; 0x35
 80111b8:	a820      	add	r0, sp, #128	; 0x80
 80111ba:	f002 fcdc 	bl	8013b76 <__copybits>
 80111be:	991e      	ldr	r1, [sp, #120]	; 0x78
 80111c0:	4620      	mov	r0, r4
 80111c2:	f002 f8a1 	bl	8013308 <_Bfree>
 80111c6:	3f01      	subs	r7, #1
 80111c8:	2f05      	cmp	r7, #5
 80111ca:	d807      	bhi.n	80111dc <_strtod_l+0xfc>
 80111cc:	e8df f007 	tbb	[pc, r7]
 80111d0:	1d180b0e 	.word	0x1d180b0e
 80111d4:	030e      	.short	0x030e
 80111d6:	f04f 0b00 	mov.w	fp, #0
 80111da:	46da      	mov	sl, fp
 80111dc:	0728      	lsls	r0, r5, #28
 80111de:	d5c1      	bpl.n	8011164 <_strtod_l+0x84>
 80111e0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80111e4:	e7be      	b.n	8011164 <_strtod_l+0x84>
 80111e6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80111ea:	e7f7      	b.n	80111dc <_strtod_l+0xfc>
 80111ec:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80111f0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80111f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80111f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80111fa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80111fe:	e7ed      	b.n	80111dc <_strtod_l+0xfc>
 8011200:	f8df b184 	ldr.w	fp, [pc, #388]	; 8011388 <_strtod_l+0x2a8>
 8011204:	f04f 0a00 	mov.w	sl, #0
 8011208:	e7e8      	b.n	80111dc <_strtod_l+0xfc>
 801120a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801120e:	f04f 3aff 	mov.w	sl, #4294967295
 8011212:	e7e3      	b.n	80111dc <_strtod_l+0xfc>
 8011214:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011216:	1c5a      	adds	r2, r3, #1
 8011218:	921d      	str	r2, [sp, #116]	; 0x74
 801121a:	785b      	ldrb	r3, [r3, #1]
 801121c:	2b30      	cmp	r3, #48	; 0x30
 801121e:	d0f9      	beq.n	8011214 <_strtod_l+0x134>
 8011220:	2b00      	cmp	r3, #0
 8011222:	d09f      	beq.n	8011164 <_strtod_l+0x84>
 8011224:	2301      	movs	r3, #1
 8011226:	f04f 0900 	mov.w	r9, #0
 801122a:	9304      	str	r3, [sp, #16]
 801122c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801122e:	930a      	str	r3, [sp, #40]	; 0x28
 8011230:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8011234:	464f      	mov	r7, r9
 8011236:	220a      	movs	r2, #10
 8011238:	981d      	ldr	r0, [sp, #116]	; 0x74
 801123a:	7806      	ldrb	r6, [r0, #0]
 801123c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8011240:	b2d9      	uxtb	r1, r3
 8011242:	2909      	cmp	r1, #9
 8011244:	d92a      	bls.n	801129c <_strtod_l+0x1bc>
 8011246:	9907      	ldr	r1, [sp, #28]
 8011248:	462a      	mov	r2, r5
 801124a:	f7ff ff1a 	bl	8011082 <strncmp>
 801124e:	b398      	cbz	r0, 80112b8 <_strtod_l+0x1d8>
 8011250:	2000      	movs	r0, #0
 8011252:	4633      	mov	r3, r6
 8011254:	463d      	mov	r5, r7
 8011256:	9007      	str	r0, [sp, #28]
 8011258:	4602      	mov	r2, r0
 801125a:	2b65      	cmp	r3, #101	; 0x65
 801125c:	d001      	beq.n	8011262 <_strtod_l+0x182>
 801125e:	2b45      	cmp	r3, #69	; 0x45
 8011260:	d118      	bne.n	8011294 <_strtod_l+0x1b4>
 8011262:	b91d      	cbnz	r5, 801126c <_strtod_l+0x18c>
 8011264:	9b04      	ldr	r3, [sp, #16]
 8011266:	4303      	orrs	r3, r0
 8011268:	d098      	beq.n	801119c <_strtod_l+0xbc>
 801126a:	2500      	movs	r5, #0
 801126c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8011270:	f108 0301 	add.w	r3, r8, #1
 8011274:	931d      	str	r3, [sp, #116]	; 0x74
 8011276:	f898 3001 	ldrb.w	r3, [r8, #1]
 801127a:	2b2b      	cmp	r3, #43	; 0x2b
 801127c:	d075      	beq.n	801136a <_strtod_l+0x28a>
 801127e:	2b2d      	cmp	r3, #45	; 0x2d
 8011280:	d07b      	beq.n	801137a <_strtod_l+0x29a>
 8011282:	f04f 0c00 	mov.w	ip, #0
 8011286:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801128a:	2909      	cmp	r1, #9
 801128c:	f240 8082 	bls.w	8011394 <_strtod_l+0x2b4>
 8011290:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8011294:	2600      	movs	r6, #0
 8011296:	e09d      	b.n	80113d4 <_strtod_l+0x2f4>
 8011298:	2300      	movs	r3, #0
 801129a:	e7c4      	b.n	8011226 <_strtod_l+0x146>
 801129c:	2f08      	cmp	r7, #8
 801129e:	bfd8      	it	le
 80112a0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80112a2:	f100 0001 	add.w	r0, r0, #1
 80112a6:	bfda      	itte	le
 80112a8:	fb02 3301 	mlale	r3, r2, r1, r3
 80112ac:	9309      	strle	r3, [sp, #36]	; 0x24
 80112ae:	fb02 3909 	mlagt	r9, r2, r9, r3
 80112b2:	3701      	adds	r7, #1
 80112b4:	901d      	str	r0, [sp, #116]	; 0x74
 80112b6:	e7bf      	b.n	8011238 <_strtod_l+0x158>
 80112b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80112ba:	195a      	adds	r2, r3, r5
 80112bc:	921d      	str	r2, [sp, #116]	; 0x74
 80112be:	5d5b      	ldrb	r3, [r3, r5]
 80112c0:	2f00      	cmp	r7, #0
 80112c2:	d037      	beq.n	8011334 <_strtod_l+0x254>
 80112c4:	9007      	str	r0, [sp, #28]
 80112c6:	463d      	mov	r5, r7
 80112c8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80112cc:	2a09      	cmp	r2, #9
 80112ce:	d912      	bls.n	80112f6 <_strtod_l+0x216>
 80112d0:	2201      	movs	r2, #1
 80112d2:	e7c2      	b.n	801125a <_strtod_l+0x17a>
 80112d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80112d6:	1c5a      	adds	r2, r3, #1
 80112d8:	921d      	str	r2, [sp, #116]	; 0x74
 80112da:	785b      	ldrb	r3, [r3, #1]
 80112dc:	3001      	adds	r0, #1
 80112de:	2b30      	cmp	r3, #48	; 0x30
 80112e0:	d0f8      	beq.n	80112d4 <_strtod_l+0x1f4>
 80112e2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80112e6:	2a08      	cmp	r2, #8
 80112e8:	f200 84db 	bhi.w	8011ca2 <_strtod_l+0xbc2>
 80112ec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80112ee:	9007      	str	r0, [sp, #28]
 80112f0:	2000      	movs	r0, #0
 80112f2:	920a      	str	r2, [sp, #40]	; 0x28
 80112f4:	4605      	mov	r5, r0
 80112f6:	3b30      	subs	r3, #48	; 0x30
 80112f8:	f100 0201 	add.w	r2, r0, #1
 80112fc:	d014      	beq.n	8011328 <_strtod_l+0x248>
 80112fe:	9907      	ldr	r1, [sp, #28]
 8011300:	4411      	add	r1, r2
 8011302:	9107      	str	r1, [sp, #28]
 8011304:	462a      	mov	r2, r5
 8011306:	eb00 0e05 	add.w	lr, r0, r5
 801130a:	210a      	movs	r1, #10
 801130c:	4572      	cmp	r2, lr
 801130e:	d113      	bne.n	8011338 <_strtod_l+0x258>
 8011310:	182a      	adds	r2, r5, r0
 8011312:	2a08      	cmp	r2, #8
 8011314:	f105 0501 	add.w	r5, r5, #1
 8011318:	4405      	add	r5, r0
 801131a:	dc1c      	bgt.n	8011356 <_strtod_l+0x276>
 801131c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801131e:	220a      	movs	r2, #10
 8011320:	fb02 3301 	mla	r3, r2, r1, r3
 8011324:	9309      	str	r3, [sp, #36]	; 0x24
 8011326:	2200      	movs	r2, #0
 8011328:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801132a:	1c59      	adds	r1, r3, #1
 801132c:	911d      	str	r1, [sp, #116]	; 0x74
 801132e:	785b      	ldrb	r3, [r3, #1]
 8011330:	4610      	mov	r0, r2
 8011332:	e7c9      	b.n	80112c8 <_strtod_l+0x1e8>
 8011334:	4638      	mov	r0, r7
 8011336:	e7d2      	b.n	80112de <_strtod_l+0x1fe>
 8011338:	2a08      	cmp	r2, #8
 801133a:	dc04      	bgt.n	8011346 <_strtod_l+0x266>
 801133c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801133e:	434e      	muls	r6, r1
 8011340:	9609      	str	r6, [sp, #36]	; 0x24
 8011342:	3201      	adds	r2, #1
 8011344:	e7e2      	b.n	801130c <_strtod_l+0x22c>
 8011346:	f102 0c01 	add.w	ip, r2, #1
 801134a:	f1bc 0f10 	cmp.w	ip, #16
 801134e:	bfd8      	it	le
 8011350:	fb01 f909 	mulle.w	r9, r1, r9
 8011354:	e7f5      	b.n	8011342 <_strtod_l+0x262>
 8011356:	2d10      	cmp	r5, #16
 8011358:	bfdc      	itt	le
 801135a:	220a      	movle	r2, #10
 801135c:	fb02 3909 	mlale	r9, r2, r9, r3
 8011360:	e7e1      	b.n	8011326 <_strtod_l+0x246>
 8011362:	2300      	movs	r3, #0
 8011364:	9307      	str	r3, [sp, #28]
 8011366:	2201      	movs	r2, #1
 8011368:	e77c      	b.n	8011264 <_strtod_l+0x184>
 801136a:	f04f 0c00 	mov.w	ip, #0
 801136e:	f108 0302 	add.w	r3, r8, #2
 8011372:	931d      	str	r3, [sp, #116]	; 0x74
 8011374:	f898 3002 	ldrb.w	r3, [r8, #2]
 8011378:	e785      	b.n	8011286 <_strtod_l+0x1a6>
 801137a:	f04f 0c01 	mov.w	ip, #1
 801137e:	e7f6      	b.n	801136e <_strtod_l+0x28e>
 8011380:	08016e00 	.word	0x08016e00
 8011384:	08016bac 	.word	0x08016bac
 8011388:	7ff00000 	.word	0x7ff00000
 801138c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801138e:	1c59      	adds	r1, r3, #1
 8011390:	911d      	str	r1, [sp, #116]	; 0x74
 8011392:	785b      	ldrb	r3, [r3, #1]
 8011394:	2b30      	cmp	r3, #48	; 0x30
 8011396:	d0f9      	beq.n	801138c <_strtod_l+0x2ac>
 8011398:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801139c:	2908      	cmp	r1, #8
 801139e:	f63f af79 	bhi.w	8011294 <_strtod_l+0x1b4>
 80113a2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80113a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80113a8:	9308      	str	r3, [sp, #32]
 80113aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80113ac:	1c59      	adds	r1, r3, #1
 80113ae:	911d      	str	r1, [sp, #116]	; 0x74
 80113b0:	785b      	ldrb	r3, [r3, #1]
 80113b2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80113b6:	2e09      	cmp	r6, #9
 80113b8:	d937      	bls.n	801142a <_strtod_l+0x34a>
 80113ba:	9e08      	ldr	r6, [sp, #32]
 80113bc:	1b89      	subs	r1, r1, r6
 80113be:	2908      	cmp	r1, #8
 80113c0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80113c4:	dc02      	bgt.n	80113cc <_strtod_l+0x2ec>
 80113c6:	4576      	cmp	r6, lr
 80113c8:	bfa8      	it	ge
 80113ca:	4676      	movge	r6, lr
 80113cc:	f1bc 0f00 	cmp.w	ip, #0
 80113d0:	d000      	beq.n	80113d4 <_strtod_l+0x2f4>
 80113d2:	4276      	negs	r6, r6
 80113d4:	2d00      	cmp	r5, #0
 80113d6:	d14f      	bne.n	8011478 <_strtod_l+0x398>
 80113d8:	9904      	ldr	r1, [sp, #16]
 80113da:	4301      	orrs	r1, r0
 80113dc:	f47f aec2 	bne.w	8011164 <_strtod_l+0x84>
 80113e0:	2a00      	cmp	r2, #0
 80113e2:	f47f aedb 	bne.w	801119c <_strtod_l+0xbc>
 80113e6:	2b69      	cmp	r3, #105	; 0x69
 80113e8:	d027      	beq.n	801143a <_strtod_l+0x35a>
 80113ea:	dc24      	bgt.n	8011436 <_strtod_l+0x356>
 80113ec:	2b49      	cmp	r3, #73	; 0x49
 80113ee:	d024      	beq.n	801143a <_strtod_l+0x35a>
 80113f0:	2b4e      	cmp	r3, #78	; 0x4e
 80113f2:	f47f aed3 	bne.w	801119c <_strtod_l+0xbc>
 80113f6:	499e      	ldr	r1, [pc, #632]	; (8011670 <_strtod_l+0x590>)
 80113f8:	a81d      	add	r0, sp, #116	; 0x74
 80113fa:	f001 fe61 	bl	80130c0 <__match>
 80113fe:	2800      	cmp	r0, #0
 8011400:	f43f aecc 	beq.w	801119c <_strtod_l+0xbc>
 8011404:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011406:	781b      	ldrb	r3, [r3, #0]
 8011408:	2b28      	cmp	r3, #40	; 0x28
 801140a:	d12d      	bne.n	8011468 <_strtod_l+0x388>
 801140c:	4999      	ldr	r1, [pc, #612]	; (8011674 <_strtod_l+0x594>)
 801140e:	aa20      	add	r2, sp, #128	; 0x80
 8011410:	a81d      	add	r0, sp, #116	; 0x74
 8011412:	f001 fe69 	bl	80130e8 <__hexnan>
 8011416:	2805      	cmp	r0, #5
 8011418:	d126      	bne.n	8011468 <_strtod_l+0x388>
 801141a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801141c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8011420:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011424:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011428:	e69c      	b.n	8011164 <_strtod_l+0x84>
 801142a:	210a      	movs	r1, #10
 801142c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8011430:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011434:	e7b9      	b.n	80113aa <_strtod_l+0x2ca>
 8011436:	2b6e      	cmp	r3, #110	; 0x6e
 8011438:	e7db      	b.n	80113f2 <_strtod_l+0x312>
 801143a:	498f      	ldr	r1, [pc, #572]	; (8011678 <_strtod_l+0x598>)
 801143c:	a81d      	add	r0, sp, #116	; 0x74
 801143e:	f001 fe3f 	bl	80130c0 <__match>
 8011442:	2800      	cmp	r0, #0
 8011444:	f43f aeaa 	beq.w	801119c <_strtod_l+0xbc>
 8011448:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801144a:	498c      	ldr	r1, [pc, #560]	; (801167c <_strtod_l+0x59c>)
 801144c:	3b01      	subs	r3, #1
 801144e:	a81d      	add	r0, sp, #116	; 0x74
 8011450:	931d      	str	r3, [sp, #116]	; 0x74
 8011452:	f001 fe35 	bl	80130c0 <__match>
 8011456:	b910      	cbnz	r0, 801145e <_strtod_l+0x37e>
 8011458:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801145a:	3301      	adds	r3, #1
 801145c:	931d      	str	r3, [sp, #116]	; 0x74
 801145e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801168c <_strtod_l+0x5ac>
 8011462:	f04f 0a00 	mov.w	sl, #0
 8011466:	e67d      	b.n	8011164 <_strtod_l+0x84>
 8011468:	4885      	ldr	r0, [pc, #532]	; (8011680 <_strtod_l+0x5a0>)
 801146a:	f003 f865 	bl	8014538 <nan>
 801146e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8011472:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8011476:	e675      	b.n	8011164 <_strtod_l+0x84>
 8011478:	9b07      	ldr	r3, [sp, #28]
 801147a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801147c:	1af3      	subs	r3, r6, r3
 801147e:	2f00      	cmp	r7, #0
 8011480:	bf08      	it	eq
 8011482:	462f      	moveq	r7, r5
 8011484:	2d10      	cmp	r5, #16
 8011486:	9308      	str	r3, [sp, #32]
 8011488:	46a8      	mov	r8, r5
 801148a:	bfa8      	it	ge
 801148c:	f04f 0810 	movge.w	r8, #16
 8011490:	f7ef f840 	bl	8000514 <__aeabi_ui2d>
 8011494:	2d09      	cmp	r5, #9
 8011496:	4682      	mov	sl, r0
 8011498:	468b      	mov	fp, r1
 801149a:	dd13      	ble.n	80114c4 <_strtod_l+0x3e4>
 801149c:	4b79      	ldr	r3, [pc, #484]	; (8011684 <_strtod_l+0x5a4>)
 801149e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80114a2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80114a6:	f7ef f8af 	bl	8000608 <__aeabi_dmul>
 80114aa:	4682      	mov	sl, r0
 80114ac:	4648      	mov	r0, r9
 80114ae:	468b      	mov	fp, r1
 80114b0:	f7ef f830 	bl	8000514 <__aeabi_ui2d>
 80114b4:	4602      	mov	r2, r0
 80114b6:	460b      	mov	r3, r1
 80114b8:	4650      	mov	r0, sl
 80114ba:	4659      	mov	r1, fp
 80114bc:	f7ee feee 	bl	800029c <__adddf3>
 80114c0:	4682      	mov	sl, r0
 80114c2:	468b      	mov	fp, r1
 80114c4:	2d0f      	cmp	r5, #15
 80114c6:	dc38      	bgt.n	801153a <_strtod_l+0x45a>
 80114c8:	9b08      	ldr	r3, [sp, #32]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	f43f ae4a 	beq.w	8011164 <_strtod_l+0x84>
 80114d0:	dd24      	ble.n	801151c <_strtod_l+0x43c>
 80114d2:	2b16      	cmp	r3, #22
 80114d4:	dc0b      	bgt.n	80114ee <_strtod_l+0x40e>
 80114d6:	4d6b      	ldr	r5, [pc, #428]	; (8011684 <_strtod_l+0x5a4>)
 80114d8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80114dc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80114e0:	4652      	mov	r2, sl
 80114e2:	465b      	mov	r3, fp
 80114e4:	f7ef f890 	bl	8000608 <__aeabi_dmul>
 80114e8:	4682      	mov	sl, r0
 80114ea:	468b      	mov	fp, r1
 80114ec:	e63a      	b.n	8011164 <_strtod_l+0x84>
 80114ee:	9a08      	ldr	r2, [sp, #32]
 80114f0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80114f4:	4293      	cmp	r3, r2
 80114f6:	db20      	blt.n	801153a <_strtod_l+0x45a>
 80114f8:	4c62      	ldr	r4, [pc, #392]	; (8011684 <_strtod_l+0x5a4>)
 80114fa:	f1c5 050f 	rsb	r5, r5, #15
 80114fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011502:	4652      	mov	r2, sl
 8011504:	465b      	mov	r3, fp
 8011506:	e9d1 0100 	ldrd	r0, r1, [r1]
 801150a:	f7ef f87d 	bl	8000608 <__aeabi_dmul>
 801150e:	9b08      	ldr	r3, [sp, #32]
 8011510:	1b5d      	subs	r5, r3, r5
 8011512:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011516:	e9d4 2300 	ldrd	r2, r3, [r4]
 801151a:	e7e3      	b.n	80114e4 <_strtod_l+0x404>
 801151c:	9b08      	ldr	r3, [sp, #32]
 801151e:	3316      	adds	r3, #22
 8011520:	db0b      	blt.n	801153a <_strtod_l+0x45a>
 8011522:	9b07      	ldr	r3, [sp, #28]
 8011524:	4a57      	ldr	r2, [pc, #348]	; (8011684 <_strtod_l+0x5a4>)
 8011526:	1b9e      	subs	r6, r3, r6
 8011528:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801152c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011530:	4650      	mov	r0, sl
 8011532:	4659      	mov	r1, fp
 8011534:	f7ef f992 	bl	800085c <__aeabi_ddiv>
 8011538:	e7d6      	b.n	80114e8 <_strtod_l+0x408>
 801153a:	9b08      	ldr	r3, [sp, #32]
 801153c:	eba5 0808 	sub.w	r8, r5, r8
 8011540:	4498      	add	r8, r3
 8011542:	f1b8 0f00 	cmp.w	r8, #0
 8011546:	dd71      	ble.n	801162c <_strtod_l+0x54c>
 8011548:	f018 030f 	ands.w	r3, r8, #15
 801154c:	d00a      	beq.n	8011564 <_strtod_l+0x484>
 801154e:	494d      	ldr	r1, [pc, #308]	; (8011684 <_strtod_l+0x5a4>)
 8011550:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011554:	4652      	mov	r2, sl
 8011556:	465b      	mov	r3, fp
 8011558:	e9d1 0100 	ldrd	r0, r1, [r1]
 801155c:	f7ef f854 	bl	8000608 <__aeabi_dmul>
 8011560:	4682      	mov	sl, r0
 8011562:	468b      	mov	fp, r1
 8011564:	f038 080f 	bics.w	r8, r8, #15
 8011568:	d04d      	beq.n	8011606 <_strtod_l+0x526>
 801156a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801156e:	dd22      	ble.n	80115b6 <_strtod_l+0x4d6>
 8011570:	2500      	movs	r5, #0
 8011572:	462e      	mov	r6, r5
 8011574:	9509      	str	r5, [sp, #36]	; 0x24
 8011576:	9507      	str	r5, [sp, #28]
 8011578:	2322      	movs	r3, #34	; 0x22
 801157a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801168c <_strtod_l+0x5ac>
 801157e:	6023      	str	r3, [r4, #0]
 8011580:	f04f 0a00 	mov.w	sl, #0
 8011584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011586:	2b00      	cmp	r3, #0
 8011588:	f43f adec 	beq.w	8011164 <_strtod_l+0x84>
 801158c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801158e:	4620      	mov	r0, r4
 8011590:	f001 feba 	bl	8013308 <_Bfree>
 8011594:	9907      	ldr	r1, [sp, #28]
 8011596:	4620      	mov	r0, r4
 8011598:	f001 feb6 	bl	8013308 <_Bfree>
 801159c:	4631      	mov	r1, r6
 801159e:	4620      	mov	r0, r4
 80115a0:	f001 feb2 	bl	8013308 <_Bfree>
 80115a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80115a6:	4620      	mov	r0, r4
 80115a8:	f001 feae 	bl	8013308 <_Bfree>
 80115ac:	4629      	mov	r1, r5
 80115ae:	4620      	mov	r0, r4
 80115b0:	f001 feaa 	bl	8013308 <_Bfree>
 80115b4:	e5d6      	b.n	8011164 <_strtod_l+0x84>
 80115b6:	2300      	movs	r3, #0
 80115b8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80115bc:	4650      	mov	r0, sl
 80115be:	4659      	mov	r1, fp
 80115c0:	4699      	mov	r9, r3
 80115c2:	f1b8 0f01 	cmp.w	r8, #1
 80115c6:	dc21      	bgt.n	801160c <_strtod_l+0x52c>
 80115c8:	b10b      	cbz	r3, 80115ce <_strtod_l+0x4ee>
 80115ca:	4682      	mov	sl, r0
 80115cc:	468b      	mov	fp, r1
 80115ce:	4b2e      	ldr	r3, [pc, #184]	; (8011688 <_strtod_l+0x5a8>)
 80115d0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80115d4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80115d8:	4652      	mov	r2, sl
 80115da:	465b      	mov	r3, fp
 80115dc:	e9d9 0100 	ldrd	r0, r1, [r9]
 80115e0:	f7ef f812 	bl	8000608 <__aeabi_dmul>
 80115e4:	4b29      	ldr	r3, [pc, #164]	; (801168c <_strtod_l+0x5ac>)
 80115e6:	460a      	mov	r2, r1
 80115e8:	400b      	ands	r3, r1
 80115ea:	4929      	ldr	r1, [pc, #164]	; (8011690 <_strtod_l+0x5b0>)
 80115ec:	428b      	cmp	r3, r1
 80115ee:	4682      	mov	sl, r0
 80115f0:	d8be      	bhi.n	8011570 <_strtod_l+0x490>
 80115f2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80115f6:	428b      	cmp	r3, r1
 80115f8:	bf86      	itte	hi
 80115fa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8011694 <_strtod_l+0x5b4>
 80115fe:	f04f 3aff 	movhi.w	sl, #4294967295
 8011602:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8011606:	2300      	movs	r3, #0
 8011608:	9304      	str	r3, [sp, #16]
 801160a:	e081      	b.n	8011710 <_strtod_l+0x630>
 801160c:	f018 0f01 	tst.w	r8, #1
 8011610:	d007      	beq.n	8011622 <_strtod_l+0x542>
 8011612:	4b1d      	ldr	r3, [pc, #116]	; (8011688 <_strtod_l+0x5a8>)
 8011614:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8011618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801161c:	f7ee fff4 	bl	8000608 <__aeabi_dmul>
 8011620:	2301      	movs	r3, #1
 8011622:	f109 0901 	add.w	r9, r9, #1
 8011626:	ea4f 0868 	mov.w	r8, r8, asr #1
 801162a:	e7ca      	b.n	80115c2 <_strtod_l+0x4e2>
 801162c:	d0eb      	beq.n	8011606 <_strtod_l+0x526>
 801162e:	f1c8 0800 	rsb	r8, r8, #0
 8011632:	f018 020f 	ands.w	r2, r8, #15
 8011636:	d00a      	beq.n	801164e <_strtod_l+0x56e>
 8011638:	4b12      	ldr	r3, [pc, #72]	; (8011684 <_strtod_l+0x5a4>)
 801163a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801163e:	4650      	mov	r0, sl
 8011640:	4659      	mov	r1, fp
 8011642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011646:	f7ef f909 	bl	800085c <__aeabi_ddiv>
 801164a:	4682      	mov	sl, r0
 801164c:	468b      	mov	fp, r1
 801164e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011652:	d0d8      	beq.n	8011606 <_strtod_l+0x526>
 8011654:	f1b8 0f1f 	cmp.w	r8, #31
 8011658:	dd1e      	ble.n	8011698 <_strtod_l+0x5b8>
 801165a:	2500      	movs	r5, #0
 801165c:	462e      	mov	r6, r5
 801165e:	9509      	str	r5, [sp, #36]	; 0x24
 8011660:	9507      	str	r5, [sp, #28]
 8011662:	2322      	movs	r3, #34	; 0x22
 8011664:	f04f 0a00 	mov.w	sl, #0
 8011668:	f04f 0b00 	mov.w	fp, #0
 801166c:	6023      	str	r3, [r4, #0]
 801166e:	e789      	b.n	8011584 <_strtod_l+0x4a4>
 8011670:	08016b81 	.word	0x08016b81
 8011674:	08016bc0 	.word	0x08016bc0
 8011678:	08016b79 	.word	0x08016b79
 801167c:	08016d04 	.word	0x08016d04
 8011680:	08016fdb 	.word	0x08016fdb
 8011684:	08016ea0 	.word	0x08016ea0
 8011688:	08016e78 	.word	0x08016e78
 801168c:	7ff00000 	.word	0x7ff00000
 8011690:	7ca00000 	.word	0x7ca00000
 8011694:	7fefffff 	.word	0x7fefffff
 8011698:	f018 0310 	ands.w	r3, r8, #16
 801169c:	bf18      	it	ne
 801169e:	236a      	movne	r3, #106	; 0x6a
 80116a0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8011a58 <_strtod_l+0x978>
 80116a4:	9304      	str	r3, [sp, #16]
 80116a6:	4650      	mov	r0, sl
 80116a8:	4659      	mov	r1, fp
 80116aa:	2300      	movs	r3, #0
 80116ac:	f018 0f01 	tst.w	r8, #1
 80116b0:	d004      	beq.n	80116bc <_strtod_l+0x5dc>
 80116b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80116b6:	f7ee ffa7 	bl	8000608 <__aeabi_dmul>
 80116ba:	2301      	movs	r3, #1
 80116bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80116c0:	f109 0908 	add.w	r9, r9, #8
 80116c4:	d1f2      	bne.n	80116ac <_strtod_l+0x5cc>
 80116c6:	b10b      	cbz	r3, 80116cc <_strtod_l+0x5ec>
 80116c8:	4682      	mov	sl, r0
 80116ca:	468b      	mov	fp, r1
 80116cc:	9b04      	ldr	r3, [sp, #16]
 80116ce:	b1bb      	cbz	r3, 8011700 <_strtod_l+0x620>
 80116d0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80116d4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80116d8:	2b00      	cmp	r3, #0
 80116da:	4659      	mov	r1, fp
 80116dc:	dd10      	ble.n	8011700 <_strtod_l+0x620>
 80116de:	2b1f      	cmp	r3, #31
 80116e0:	f340 8128 	ble.w	8011934 <_strtod_l+0x854>
 80116e4:	2b34      	cmp	r3, #52	; 0x34
 80116e6:	bfde      	ittt	le
 80116e8:	3b20      	suble	r3, #32
 80116ea:	f04f 32ff 	movle.w	r2, #4294967295
 80116ee:	fa02 f303 	lslle.w	r3, r2, r3
 80116f2:	f04f 0a00 	mov.w	sl, #0
 80116f6:	bfcc      	ite	gt
 80116f8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80116fc:	ea03 0b01 	andle.w	fp, r3, r1
 8011700:	2200      	movs	r2, #0
 8011702:	2300      	movs	r3, #0
 8011704:	4650      	mov	r0, sl
 8011706:	4659      	mov	r1, fp
 8011708:	f7ef f9e6 	bl	8000ad8 <__aeabi_dcmpeq>
 801170c:	2800      	cmp	r0, #0
 801170e:	d1a4      	bne.n	801165a <_strtod_l+0x57a>
 8011710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011712:	9300      	str	r3, [sp, #0]
 8011714:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011716:	462b      	mov	r3, r5
 8011718:	463a      	mov	r2, r7
 801171a:	4620      	mov	r0, r4
 801171c:	f001 fe60 	bl	80133e0 <__s2b>
 8011720:	9009      	str	r0, [sp, #36]	; 0x24
 8011722:	2800      	cmp	r0, #0
 8011724:	f43f af24 	beq.w	8011570 <_strtod_l+0x490>
 8011728:	9b07      	ldr	r3, [sp, #28]
 801172a:	1b9e      	subs	r6, r3, r6
 801172c:	9b08      	ldr	r3, [sp, #32]
 801172e:	2b00      	cmp	r3, #0
 8011730:	bfb4      	ite	lt
 8011732:	4633      	movlt	r3, r6
 8011734:	2300      	movge	r3, #0
 8011736:	9310      	str	r3, [sp, #64]	; 0x40
 8011738:	9b08      	ldr	r3, [sp, #32]
 801173a:	2500      	movs	r5, #0
 801173c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011740:	9318      	str	r3, [sp, #96]	; 0x60
 8011742:	462e      	mov	r6, r5
 8011744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011746:	4620      	mov	r0, r4
 8011748:	6859      	ldr	r1, [r3, #4]
 801174a:	f001 fd9d 	bl	8013288 <_Balloc>
 801174e:	9007      	str	r0, [sp, #28]
 8011750:	2800      	cmp	r0, #0
 8011752:	f43f af11 	beq.w	8011578 <_strtod_l+0x498>
 8011756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011758:	691a      	ldr	r2, [r3, #16]
 801175a:	3202      	adds	r2, #2
 801175c:	f103 010c 	add.w	r1, r3, #12
 8011760:	0092      	lsls	r2, r2, #2
 8011762:	300c      	adds	r0, #12
 8011764:	f7fe fc4e 	bl	8010004 <memcpy>
 8011768:	ec4b ab10 	vmov	d0, sl, fp
 801176c:	aa20      	add	r2, sp, #128	; 0x80
 801176e:	a91f      	add	r1, sp, #124	; 0x7c
 8011770:	4620      	mov	r0, r4
 8011772:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8011776:	f002 f96f 	bl	8013a58 <__d2b>
 801177a:	901e      	str	r0, [sp, #120]	; 0x78
 801177c:	2800      	cmp	r0, #0
 801177e:	f43f aefb 	beq.w	8011578 <_strtod_l+0x498>
 8011782:	2101      	movs	r1, #1
 8011784:	4620      	mov	r0, r4
 8011786:	f001 fec5 	bl	8013514 <__i2b>
 801178a:	4606      	mov	r6, r0
 801178c:	2800      	cmp	r0, #0
 801178e:	f43f aef3 	beq.w	8011578 <_strtod_l+0x498>
 8011792:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011794:	9904      	ldr	r1, [sp, #16]
 8011796:	2b00      	cmp	r3, #0
 8011798:	bfab      	itete	ge
 801179a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801179c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801179e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80117a0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80117a4:	bfac      	ite	ge
 80117a6:	eb03 0902 	addge.w	r9, r3, r2
 80117aa:	1ad7      	sublt	r7, r2, r3
 80117ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80117ae:	eba3 0801 	sub.w	r8, r3, r1
 80117b2:	4490      	add	r8, r2
 80117b4:	4ba3      	ldr	r3, [pc, #652]	; (8011a44 <_strtod_l+0x964>)
 80117b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80117ba:	4598      	cmp	r8, r3
 80117bc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80117c0:	f280 80cc 	bge.w	801195c <_strtod_l+0x87c>
 80117c4:	eba3 0308 	sub.w	r3, r3, r8
 80117c8:	2b1f      	cmp	r3, #31
 80117ca:	eba2 0203 	sub.w	r2, r2, r3
 80117ce:	f04f 0101 	mov.w	r1, #1
 80117d2:	f300 80b6 	bgt.w	8011942 <_strtod_l+0x862>
 80117d6:	fa01 f303 	lsl.w	r3, r1, r3
 80117da:	9311      	str	r3, [sp, #68]	; 0x44
 80117dc:	2300      	movs	r3, #0
 80117de:	930c      	str	r3, [sp, #48]	; 0x30
 80117e0:	eb09 0802 	add.w	r8, r9, r2
 80117e4:	9b04      	ldr	r3, [sp, #16]
 80117e6:	45c1      	cmp	r9, r8
 80117e8:	4417      	add	r7, r2
 80117ea:	441f      	add	r7, r3
 80117ec:	464b      	mov	r3, r9
 80117ee:	bfa8      	it	ge
 80117f0:	4643      	movge	r3, r8
 80117f2:	42bb      	cmp	r3, r7
 80117f4:	bfa8      	it	ge
 80117f6:	463b      	movge	r3, r7
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	bfc2      	ittt	gt
 80117fc:	eba8 0803 	subgt.w	r8, r8, r3
 8011800:	1aff      	subgt	r7, r7, r3
 8011802:	eba9 0903 	subgt.w	r9, r9, r3
 8011806:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011808:	2b00      	cmp	r3, #0
 801180a:	dd17      	ble.n	801183c <_strtod_l+0x75c>
 801180c:	4631      	mov	r1, r6
 801180e:	461a      	mov	r2, r3
 8011810:	4620      	mov	r0, r4
 8011812:	f001 ff3b 	bl	801368c <__pow5mult>
 8011816:	4606      	mov	r6, r0
 8011818:	2800      	cmp	r0, #0
 801181a:	f43f aead 	beq.w	8011578 <_strtod_l+0x498>
 801181e:	4601      	mov	r1, r0
 8011820:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011822:	4620      	mov	r0, r4
 8011824:	f001 fe8c 	bl	8013540 <__multiply>
 8011828:	900f      	str	r0, [sp, #60]	; 0x3c
 801182a:	2800      	cmp	r0, #0
 801182c:	f43f aea4 	beq.w	8011578 <_strtod_l+0x498>
 8011830:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011832:	4620      	mov	r0, r4
 8011834:	f001 fd68 	bl	8013308 <_Bfree>
 8011838:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801183a:	931e      	str	r3, [sp, #120]	; 0x78
 801183c:	f1b8 0f00 	cmp.w	r8, #0
 8011840:	f300 8091 	bgt.w	8011966 <_strtod_l+0x886>
 8011844:	9b08      	ldr	r3, [sp, #32]
 8011846:	2b00      	cmp	r3, #0
 8011848:	dd08      	ble.n	801185c <_strtod_l+0x77c>
 801184a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801184c:	9907      	ldr	r1, [sp, #28]
 801184e:	4620      	mov	r0, r4
 8011850:	f001 ff1c 	bl	801368c <__pow5mult>
 8011854:	9007      	str	r0, [sp, #28]
 8011856:	2800      	cmp	r0, #0
 8011858:	f43f ae8e 	beq.w	8011578 <_strtod_l+0x498>
 801185c:	2f00      	cmp	r7, #0
 801185e:	dd08      	ble.n	8011872 <_strtod_l+0x792>
 8011860:	9907      	ldr	r1, [sp, #28]
 8011862:	463a      	mov	r2, r7
 8011864:	4620      	mov	r0, r4
 8011866:	f001 ff6b 	bl	8013740 <__lshift>
 801186a:	9007      	str	r0, [sp, #28]
 801186c:	2800      	cmp	r0, #0
 801186e:	f43f ae83 	beq.w	8011578 <_strtod_l+0x498>
 8011872:	f1b9 0f00 	cmp.w	r9, #0
 8011876:	dd08      	ble.n	801188a <_strtod_l+0x7aa>
 8011878:	4631      	mov	r1, r6
 801187a:	464a      	mov	r2, r9
 801187c:	4620      	mov	r0, r4
 801187e:	f001 ff5f 	bl	8013740 <__lshift>
 8011882:	4606      	mov	r6, r0
 8011884:	2800      	cmp	r0, #0
 8011886:	f43f ae77 	beq.w	8011578 <_strtod_l+0x498>
 801188a:	9a07      	ldr	r2, [sp, #28]
 801188c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801188e:	4620      	mov	r0, r4
 8011890:	f001 ffde 	bl	8013850 <__mdiff>
 8011894:	4605      	mov	r5, r0
 8011896:	2800      	cmp	r0, #0
 8011898:	f43f ae6e 	beq.w	8011578 <_strtod_l+0x498>
 801189c:	68c3      	ldr	r3, [r0, #12]
 801189e:	930f      	str	r3, [sp, #60]	; 0x3c
 80118a0:	2300      	movs	r3, #0
 80118a2:	60c3      	str	r3, [r0, #12]
 80118a4:	4631      	mov	r1, r6
 80118a6:	f001 ffb7 	bl	8013818 <__mcmp>
 80118aa:	2800      	cmp	r0, #0
 80118ac:	da65      	bge.n	801197a <_strtod_l+0x89a>
 80118ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80118b0:	ea53 030a 	orrs.w	r3, r3, sl
 80118b4:	f040 8087 	bne.w	80119c6 <_strtod_l+0x8e6>
 80118b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80118bc:	2b00      	cmp	r3, #0
 80118be:	f040 8082 	bne.w	80119c6 <_strtod_l+0x8e6>
 80118c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80118c6:	0d1b      	lsrs	r3, r3, #20
 80118c8:	051b      	lsls	r3, r3, #20
 80118ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80118ce:	d97a      	bls.n	80119c6 <_strtod_l+0x8e6>
 80118d0:	696b      	ldr	r3, [r5, #20]
 80118d2:	b913      	cbnz	r3, 80118da <_strtod_l+0x7fa>
 80118d4:	692b      	ldr	r3, [r5, #16]
 80118d6:	2b01      	cmp	r3, #1
 80118d8:	dd75      	ble.n	80119c6 <_strtod_l+0x8e6>
 80118da:	4629      	mov	r1, r5
 80118dc:	2201      	movs	r2, #1
 80118de:	4620      	mov	r0, r4
 80118e0:	f001 ff2e 	bl	8013740 <__lshift>
 80118e4:	4631      	mov	r1, r6
 80118e6:	4605      	mov	r5, r0
 80118e8:	f001 ff96 	bl	8013818 <__mcmp>
 80118ec:	2800      	cmp	r0, #0
 80118ee:	dd6a      	ble.n	80119c6 <_strtod_l+0x8e6>
 80118f0:	9904      	ldr	r1, [sp, #16]
 80118f2:	4a55      	ldr	r2, [pc, #340]	; (8011a48 <_strtod_l+0x968>)
 80118f4:	465b      	mov	r3, fp
 80118f6:	2900      	cmp	r1, #0
 80118f8:	f000 8085 	beq.w	8011a06 <_strtod_l+0x926>
 80118fc:	ea02 010b 	and.w	r1, r2, fp
 8011900:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011904:	dc7f      	bgt.n	8011a06 <_strtod_l+0x926>
 8011906:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801190a:	f77f aeaa 	ble.w	8011662 <_strtod_l+0x582>
 801190e:	4a4f      	ldr	r2, [pc, #316]	; (8011a4c <_strtod_l+0x96c>)
 8011910:	2300      	movs	r3, #0
 8011912:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8011916:	4650      	mov	r0, sl
 8011918:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801191c:	4659      	mov	r1, fp
 801191e:	f7ee fe73 	bl	8000608 <__aeabi_dmul>
 8011922:	460b      	mov	r3, r1
 8011924:	4303      	orrs	r3, r0
 8011926:	bf08      	it	eq
 8011928:	2322      	moveq	r3, #34	; 0x22
 801192a:	4682      	mov	sl, r0
 801192c:	468b      	mov	fp, r1
 801192e:	bf08      	it	eq
 8011930:	6023      	streq	r3, [r4, #0]
 8011932:	e62b      	b.n	801158c <_strtod_l+0x4ac>
 8011934:	f04f 32ff 	mov.w	r2, #4294967295
 8011938:	fa02 f303 	lsl.w	r3, r2, r3
 801193c:	ea03 0a0a 	and.w	sl, r3, sl
 8011940:	e6de      	b.n	8011700 <_strtod_l+0x620>
 8011942:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8011946:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801194a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801194e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8011952:	fa01 f308 	lsl.w	r3, r1, r8
 8011956:	930c      	str	r3, [sp, #48]	; 0x30
 8011958:	9111      	str	r1, [sp, #68]	; 0x44
 801195a:	e741      	b.n	80117e0 <_strtod_l+0x700>
 801195c:	2300      	movs	r3, #0
 801195e:	930c      	str	r3, [sp, #48]	; 0x30
 8011960:	2301      	movs	r3, #1
 8011962:	9311      	str	r3, [sp, #68]	; 0x44
 8011964:	e73c      	b.n	80117e0 <_strtod_l+0x700>
 8011966:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011968:	4642      	mov	r2, r8
 801196a:	4620      	mov	r0, r4
 801196c:	f001 fee8 	bl	8013740 <__lshift>
 8011970:	901e      	str	r0, [sp, #120]	; 0x78
 8011972:	2800      	cmp	r0, #0
 8011974:	f47f af66 	bne.w	8011844 <_strtod_l+0x764>
 8011978:	e5fe      	b.n	8011578 <_strtod_l+0x498>
 801197a:	465f      	mov	r7, fp
 801197c:	d16e      	bne.n	8011a5c <_strtod_l+0x97c>
 801197e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011980:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011984:	b342      	cbz	r2, 80119d8 <_strtod_l+0x8f8>
 8011986:	4a32      	ldr	r2, [pc, #200]	; (8011a50 <_strtod_l+0x970>)
 8011988:	4293      	cmp	r3, r2
 801198a:	d128      	bne.n	80119de <_strtod_l+0x8fe>
 801198c:	9b04      	ldr	r3, [sp, #16]
 801198e:	4650      	mov	r0, sl
 8011990:	b1eb      	cbz	r3, 80119ce <_strtod_l+0x8ee>
 8011992:	4a2d      	ldr	r2, [pc, #180]	; (8011a48 <_strtod_l+0x968>)
 8011994:	403a      	ands	r2, r7
 8011996:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801199a:	f04f 31ff 	mov.w	r1, #4294967295
 801199e:	d819      	bhi.n	80119d4 <_strtod_l+0x8f4>
 80119a0:	0d12      	lsrs	r2, r2, #20
 80119a2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80119a6:	fa01 f303 	lsl.w	r3, r1, r3
 80119aa:	4298      	cmp	r0, r3
 80119ac:	d117      	bne.n	80119de <_strtod_l+0x8fe>
 80119ae:	4b29      	ldr	r3, [pc, #164]	; (8011a54 <_strtod_l+0x974>)
 80119b0:	429f      	cmp	r7, r3
 80119b2:	d102      	bne.n	80119ba <_strtod_l+0x8da>
 80119b4:	3001      	adds	r0, #1
 80119b6:	f43f addf 	beq.w	8011578 <_strtod_l+0x498>
 80119ba:	4b23      	ldr	r3, [pc, #140]	; (8011a48 <_strtod_l+0x968>)
 80119bc:	403b      	ands	r3, r7
 80119be:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80119c2:	f04f 0a00 	mov.w	sl, #0
 80119c6:	9b04      	ldr	r3, [sp, #16]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d1a0      	bne.n	801190e <_strtod_l+0x82e>
 80119cc:	e5de      	b.n	801158c <_strtod_l+0x4ac>
 80119ce:	f04f 33ff 	mov.w	r3, #4294967295
 80119d2:	e7ea      	b.n	80119aa <_strtod_l+0x8ca>
 80119d4:	460b      	mov	r3, r1
 80119d6:	e7e8      	b.n	80119aa <_strtod_l+0x8ca>
 80119d8:	ea53 030a 	orrs.w	r3, r3, sl
 80119dc:	d088      	beq.n	80118f0 <_strtod_l+0x810>
 80119de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80119e0:	b1db      	cbz	r3, 8011a1a <_strtod_l+0x93a>
 80119e2:	423b      	tst	r3, r7
 80119e4:	d0ef      	beq.n	80119c6 <_strtod_l+0x8e6>
 80119e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80119e8:	9a04      	ldr	r2, [sp, #16]
 80119ea:	4650      	mov	r0, sl
 80119ec:	4659      	mov	r1, fp
 80119ee:	b1c3      	cbz	r3, 8011a22 <_strtod_l+0x942>
 80119f0:	f7ff fb59 	bl	80110a6 <sulp>
 80119f4:	4602      	mov	r2, r0
 80119f6:	460b      	mov	r3, r1
 80119f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80119fc:	f7ee fc4e 	bl	800029c <__adddf3>
 8011a00:	4682      	mov	sl, r0
 8011a02:	468b      	mov	fp, r1
 8011a04:	e7df      	b.n	80119c6 <_strtod_l+0x8e6>
 8011a06:	4013      	ands	r3, r2
 8011a08:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011a0c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011a10:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011a14:	f04f 3aff 	mov.w	sl, #4294967295
 8011a18:	e7d5      	b.n	80119c6 <_strtod_l+0x8e6>
 8011a1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011a1c:	ea13 0f0a 	tst.w	r3, sl
 8011a20:	e7e0      	b.n	80119e4 <_strtod_l+0x904>
 8011a22:	f7ff fb40 	bl	80110a6 <sulp>
 8011a26:	4602      	mov	r2, r0
 8011a28:	460b      	mov	r3, r1
 8011a2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011a2e:	f7ee fc33 	bl	8000298 <__aeabi_dsub>
 8011a32:	2200      	movs	r2, #0
 8011a34:	2300      	movs	r3, #0
 8011a36:	4682      	mov	sl, r0
 8011a38:	468b      	mov	fp, r1
 8011a3a:	f7ef f84d 	bl	8000ad8 <__aeabi_dcmpeq>
 8011a3e:	2800      	cmp	r0, #0
 8011a40:	d0c1      	beq.n	80119c6 <_strtod_l+0x8e6>
 8011a42:	e60e      	b.n	8011662 <_strtod_l+0x582>
 8011a44:	fffffc02 	.word	0xfffffc02
 8011a48:	7ff00000 	.word	0x7ff00000
 8011a4c:	39500000 	.word	0x39500000
 8011a50:	000fffff 	.word	0x000fffff
 8011a54:	7fefffff 	.word	0x7fefffff
 8011a58:	08016bd8 	.word	0x08016bd8
 8011a5c:	4631      	mov	r1, r6
 8011a5e:	4628      	mov	r0, r5
 8011a60:	f002 f856 	bl	8013b10 <__ratio>
 8011a64:	ec59 8b10 	vmov	r8, r9, d0
 8011a68:	ee10 0a10 	vmov	r0, s0
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011a72:	4649      	mov	r1, r9
 8011a74:	f7ef f844 	bl	8000b00 <__aeabi_dcmple>
 8011a78:	2800      	cmp	r0, #0
 8011a7a:	d07c      	beq.n	8011b76 <_strtod_l+0xa96>
 8011a7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d04c      	beq.n	8011b1c <_strtod_l+0xa3c>
 8011a82:	4b95      	ldr	r3, [pc, #596]	; (8011cd8 <_strtod_l+0xbf8>)
 8011a84:	2200      	movs	r2, #0
 8011a86:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011a8a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8011cd8 <_strtod_l+0xbf8>
 8011a8e:	f04f 0800 	mov.w	r8, #0
 8011a92:	4b92      	ldr	r3, [pc, #584]	; (8011cdc <_strtod_l+0xbfc>)
 8011a94:	403b      	ands	r3, r7
 8011a96:	9311      	str	r3, [sp, #68]	; 0x44
 8011a98:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011a9a:	4b91      	ldr	r3, [pc, #580]	; (8011ce0 <_strtod_l+0xc00>)
 8011a9c:	429a      	cmp	r2, r3
 8011a9e:	f040 80b2 	bne.w	8011c06 <_strtod_l+0xb26>
 8011aa2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011aa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011aaa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8011aae:	ec4b ab10 	vmov	d0, sl, fp
 8011ab2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8011ab6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011aba:	f001 ff51 	bl	8013960 <__ulp>
 8011abe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011ac2:	ec53 2b10 	vmov	r2, r3, d0
 8011ac6:	f7ee fd9f 	bl	8000608 <__aeabi_dmul>
 8011aca:	4652      	mov	r2, sl
 8011acc:	465b      	mov	r3, fp
 8011ace:	f7ee fbe5 	bl	800029c <__adddf3>
 8011ad2:	460b      	mov	r3, r1
 8011ad4:	4981      	ldr	r1, [pc, #516]	; (8011cdc <_strtod_l+0xbfc>)
 8011ad6:	4a83      	ldr	r2, [pc, #524]	; (8011ce4 <_strtod_l+0xc04>)
 8011ad8:	4019      	ands	r1, r3
 8011ada:	4291      	cmp	r1, r2
 8011adc:	4682      	mov	sl, r0
 8011ade:	d95e      	bls.n	8011b9e <_strtod_l+0xabe>
 8011ae0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ae2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011ae6:	4293      	cmp	r3, r2
 8011ae8:	d103      	bne.n	8011af2 <_strtod_l+0xa12>
 8011aea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011aec:	3301      	adds	r3, #1
 8011aee:	f43f ad43 	beq.w	8011578 <_strtod_l+0x498>
 8011af2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8011cf0 <_strtod_l+0xc10>
 8011af6:	f04f 3aff 	mov.w	sl, #4294967295
 8011afa:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011afc:	4620      	mov	r0, r4
 8011afe:	f001 fc03 	bl	8013308 <_Bfree>
 8011b02:	9907      	ldr	r1, [sp, #28]
 8011b04:	4620      	mov	r0, r4
 8011b06:	f001 fbff 	bl	8013308 <_Bfree>
 8011b0a:	4631      	mov	r1, r6
 8011b0c:	4620      	mov	r0, r4
 8011b0e:	f001 fbfb 	bl	8013308 <_Bfree>
 8011b12:	4629      	mov	r1, r5
 8011b14:	4620      	mov	r0, r4
 8011b16:	f001 fbf7 	bl	8013308 <_Bfree>
 8011b1a:	e613      	b.n	8011744 <_strtod_l+0x664>
 8011b1c:	f1ba 0f00 	cmp.w	sl, #0
 8011b20:	d11b      	bne.n	8011b5a <_strtod_l+0xa7a>
 8011b22:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011b26:	b9f3      	cbnz	r3, 8011b66 <_strtod_l+0xa86>
 8011b28:	4b6b      	ldr	r3, [pc, #428]	; (8011cd8 <_strtod_l+0xbf8>)
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	4640      	mov	r0, r8
 8011b2e:	4649      	mov	r1, r9
 8011b30:	f7ee ffdc 	bl	8000aec <__aeabi_dcmplt>
 8011b34:	b9d0      	cbnz	r0, 8011b6c <_strtod_l+0xa8c>
 8011b36:	4640      	mov	r0, r8
 8011b38:	4649      	mov	r1, r9
 8011b3a:	4b6b      	ldr	r3, [pc, #428]	; (8011ce8 <_strtod_l+0xc08>)
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	f7ee fd63 	bl	8000608 <__aeabi_dmul>
 8011b42:	4680      	mov	r8, r0
 8011b44:	4689      	mov	r9, r1
 8011b46:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011b4a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8011b4e:	931b      	str	r3, [sp, #108]	; 0x6c
 8011b50:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8011b54:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011b58:	e79b      	b.n	8011a92 <_strtod_l+0x9b2>
 8011b5a:	f1ba 0f01 	cmp.w	sl, #1
 8011b5e:	d102      	bne.n	8011b66 <_strtod_l+0xa86>
 8011b60:	2f00      	cmp	r7, #0
 8011b62:	f43f ad7e 	beq.w	8011662 <_strtod_l+0x582>
 8011b66:	4b61      	ldr	r3, [pc, #388]	; (8011cec <_strtod_l+0xc0c>)
 8011b68:	2200      	movs	r2, #0
 8011b6a:	e78c      	b.n	8011a86 <_strtod_l+0x9a6>
 8011b6c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8011ce8 <_strtod_l+0xc08>
 8011b70:	f04f 0800 	mov.w	r8, #0
 8011b74:	e7e7      	b.n	8011b46 <_strtod_l+0xa66>
 8011b76:	4b5c      	ldr	r3, [pc, #368]	; (8011ce8 <_strtod_l+0xc08>)
 8011b78:	4640      	mov	r0, r8
 8011b7a:	4649      	mov	r1, r9
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	f7ee fd43 	bl	8000608 <__aeabi_dmul>
 8011b82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011b84:	4680      	mov	r8, r0
 8011b86:	4689      	mov	r9, r1
 8011b88:	b933      	cbnz	r3, 8011b98 <_strtod_l+0xab8>
 8011b8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011b8e:	9012      	str	r0, [sp, #72]	; 0x48
 8011b90:	9313      	str	r3, [sp, #76]	; 0x4c
 8011b92:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8011b96:	e7dd      	b.n	8011b54 <_strtod_l+0xa74>
 8011b98:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8011b9c:	e7f9      	b.n	8011b92 <_strtod_l+0xab2>
 8011b9e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8011ba2:	9b04      	ldr	r3, [sp, #16]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d1a8      	bne.n	8011afa <_strtod_l+0xa1a>
 8011ba8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011bac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011bae:	0d1b      	lsrs	r3, r3, #20
 8011bb0:	051b      	lsls	r3, r3, #20
 8011bb2:	429a      	cmp	r2, r3
 8011bb4:	d1a1      	bne.n	8011afa <_strtod_l+0xa1a>
 8011bb6:	4640      	mov	r0, r8
 8011bb8:	4649      	mov	r1, r9
 8011bba:	f7ef f885 	bl	8000cc8 <__aeabi_d2lz>
 8011bbe:	f7ee fcf5 	bl	80005ac <__aeabi_l2d>
 8011bc2:	4602      	mov	r2, r0
 8011bc4:	460b      	mov	r3, r1
 8011bc6:	4640      	mov	r0, r8
 8011bc8:	4649      	mov	r1, r9
 8011bca:	f7ee fb65 	bl	8000298 <__aeabi_dsub>
 8011bce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011bd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011bd4:	ea43 030a 	orr.w	r3, r3, sl
 8011bd8:	4313      	orrs	r3, r2
 8011bda:	4680      	mov	r8, r0
 8011bdc:	4689      	mov	r9, r1
 8011bde:	d053      	beq.n	8011c88 <_strtod_l+0xba8>
 8011be0:	a335      	add	r3, pc, #212	; (adr r3, 8011cb8 <_strtod_l+0xbd8>)
 8011be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011be6:	f7ee ff81 	bl	8000aec <__aeabi_dcmplt>
 8011bea:	2800      	cmp	r0, #0
 8011bec:	f47f acce 	bne.w	801158c <_strtod_l+0x4ac>
 8011bf0:	a333      	add	r3, pc, #204	; (adr r3, 8011cc0 <_strtod_l+0xbe0>)
 8011bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf6:	4640      	mov	r0, r8
 8011bf8:	4649      	mov	r1, r9
 8011bfa:	f7ee ff95 	bl	8000b28 <__aeabi_dcmpgt>
 8011bfe:	2800      	cmp	r0, #0
 8011c00:	f43f af7b 	beq.w	8011afa <_strtod_l+0xa1a>
 8011c04:	e4c2      	b.n	801158c <_strtod_l+0x4ac>
 8011c06:	9b04      	ldr	r3, [sp, #16]
 8011c08:	b333      	cbz	r3, 8011c58 <_strtod_l+0xb78>
 8011c0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011c0c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011c10:	d822      	bhi.n	8011c58 <_strtod_l+0xb78>
 8011c12:	a32d      	add	r3, pc, #180	; (adr r3, 8011cc8 <_strtod_l+0xbe8>)
 8011c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c18:	4640      	mov	r0, r8
 8011c1a:	4649      	mov	r1, r9
 8011c1c:	f7ee ff70 	bl	8000b00 <__aeabi_dcmple>
 8011c20:	b1a0      	cbz	r0, 8011c4c <_strtod_l+0xb6c>
 8011c22:	4649      	mov	r1, r9
 8011c24:	4640      	mov	r0, r8
 8011c26:	f7ee ffc7 	bl	8000bb8 <__aeabi_d2uiz>
 8011c2a:	2801      	cmp	r0, #1
 8011c2c:	bf38      	it	cc
 8011c2e:	2001      	movcc	r0, #1
 8011c30:	f7ee fc70 	bl	8000514 <__aeabi_ui2d>
 8011c34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011c36:	4680      	mov	r8, r0
 8011c38:	4689      	mov	r9, r1
 8011c3a:	bb13      	cbnz	r3, 8011c82 <_strtod_l+0xba2>
 8011c3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011c40:	9014      	str	r0, [sp, #80]	; 0x50
 8011c42:	9315      	str	r3, [sp, #84]	; 0x54
 8011c44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011c48:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011c4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011c4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011c50:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011c54:	1a9b      	subs	r3, r3, r2
 8011c56:	930d      	str	r3, [sp, #52]	; 0x34
 8011c58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011c5c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011c60:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011c64:	f001 fe7c 	bl	8013960 <__ulp>
 8011c68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011c6c:	ec53 2b10 	vmov	r2, r3, d0
 8011c70:	f7ee fcca 	bl	8000608 <__aeabi_dmul>
 8011c74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011c78:	f7ee fb10 	bl	800029c <__adddf3>
 8011c7c:	4682      	mov	sl, r0
 8011c7e:	468b      	mov	fp, r1
 8011c80:	e78f      	b.n	8011ba2 <_strtod_l+0xac2>
 8011c82:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8011c86:	e7dd      	b.n	8011c44 <_strtod_l+0xb64>
 8011c88:	a311      	add	r3, pc, #68	; (adr r3, 8011cd0 <_strtod_l+0xbf0>)
 8011c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c8e:	f7ee ff2d 	bl	8000aec <__aeabi_dcmplt>
 8011c92:	e7b4      	b.n	8011bfe <_strtod_l+0xb1e>
 8011c94:	2300      	movs	r3, #0
 8011c96:	930e      	str	r3, [sp, #56]	; 0x38
 8011c98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011c9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011c9c:	6013      	str	r3, [r2, #0]
 8011c9e:	f7ff ba65 	b.w	801116c <_strtod_l+0x8c>
 8011ca2:	2b65      	cmp	r3, #101	; 0x65
 8011ca4:	f43f ab5d 	beq.w	8011362 <_strtod_l+0x282>
 8011ca8:	2b45      	cmp	r3, #69	; 0x45
 8011caa:	f43f ab5a 	beq.w	8011362 <_strtod_l+0x282>
 8011cae:	2201      	movs	r2, #1
 8011cb0:	f7ff bb92 	b.w	80113d8 <_strtod_l+0x2f8>
 8011cb4:	f3af 8000 	nop.w
 8011cb8:	94a03595 	.word	0x94a03595
 8011cbc:	3fdfffff 	.word	0x3fdfffff
 8011cc0:	35afe535 	.word	0x35afe535
 8011cc4:	3fe00000 	.word	0x3fe00000
 8011cc8:	ffc00000 	.word	0xffc00000
 8011ccc:	41dfffff 	.word	0x41dfffff
 8011cd0:	94a03595 	.word	0x94a03595
 8011cd4:	3fcfffff 	.word	0x3fcfffff
 8011cd8:	3ff00000 	.word	0x3ff00000
 8011cdc:	7ff00000 	.word	0x7ff00000
 8011ce0:	7fe00000 	.word	0x7fe00000
 8011ce4:	7c9fffff 	.word	0x7c9fffff
 8011ce8:	3fe00000 	.word	0x3fe00000
 8011cec:	bff00000 	.word	0xbff00000
 8011cf0:	7fefffff 	.word	0x7fefffff

08011cf4 <_strtod_r>:
 8011cf4:	4b01      	ldr	r3, [pc, #4]	; (8011cfc <_strtod_r+0x8>)
 8011cf6:	f7ff b9f3 	b.w	80110e0 <_strtod_l>
 8011cfa:	bf00      	nop
 8011cfc:	200000a4 	.word	0x200000a4

08011d00 <_strtol_l.isra.0>:
 8011d00:	2b01      	cmp	r3, #1
 8011d02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d06:	d001      	beq.n	8011d0c <_strtol_l.isra.0+0xc>
 8011d08:	2b24      	cmp	r3, #36	; 0x24
 8011d0a:	d906      	bls.n	8011d1a <_strtol_l.isra.0+0x1a>
 8011d0c:	f7fe f940 	bl	800ff90 <__errno>
 8011d10:	2316      	movs	r3, #22
 8011d12:	6003      	str	r3, [r0, #0]
 8011d14:	2000      	movs	r0, #0
 8011d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d1a:	4f3a      	ldr	r7, [pc, #232]	; (8011e04 <_strtol_l.isra.0+0x104>)
 8011d1c:	468e      	mov	lr, r1
 8011d1e:	4676      	mov	r6, lr
 8011d20:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011d24:	5de5      	ldrb	r5, [r4, r7]
 8011d26:	f015 0508 	ands.w	r5, r5, #8
 8011d2a:	d1f8      	bne.n	8011d1e <_strtol_l.isra.0+0x1e>
 8011d2c:	2c2d      	cmp	r4, #45	; 0x2d
 8011d2e:	d134      	bne.n	8011d9a <_strtol_l.isra.0+0x9a>
 8011d30:	f89e 4000 	ldrb.w	r4, [lr]
 8011d34:	f04f 0801 	mov.w	r8, #1
 8011d38:	f106 0e02 	add.w	lr, r6, #2
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d05c      	beq.n	8011dfa <_strtol_l.isra.0+0xfa>
 8011d40:	2b10      	cmp	r3, #16
 8011d42:	d10c      	bne.n	8011d5e <_strtol_l.isra.0+0x5e>
 8011d44:	2c30      	cmp	r4, #48	; 0x30
 8011d46:	d10a      	bne.n	8011d5e <_strtol_l.isra.0+0x5e>
 8011d48:	f89e 4000 	ldrb.w	r4, [lr]
 8011d4c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011d50:	2c58      	cmp	r4, #88	; 0x58
 8011d52:	d14d      	bne.n	8011df0 <_strtol_l.isra.0+0xf0>
 8011d54:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8011d58:	2310      	movs	r3, #16
 8011d5a:	f10e 0e02 	add.w	lr, lr, #2
 8011d5e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8011d62:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011d66:	2600      	movs	r6, #0
 8011d68:	fbbc f9f3 	udiv	r9, ip, r3
 8011d6c:	4635      	mov	r5, r6
 8011d6e:	fb03 ca19 	mls	sl, r3, r9, ip
 8011d72:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8011d76:	2f09      	cmp	r7, #9
 8011d78:	d818      	bhi.n	8011dac <_strtol_l.isra.0+0xac>
 8011d7a:	463c      	mov	r4, r7
 8011d7c:	42a3      	cmp	r3, r4
 8011d7e:	dd24      	ble.n	8011dca <_strtol_l.isra.0+0xca>
 8011d80:	2e00      	cmp	r6, #0
 8011d82:	db1f      	blt.n	8011dc4 <_strtol_l.isra.0+0xc4>
 8011d84:	45a9      	cmp	r9, r5
 8011d86:	d31d      	bcc.n	8011dc4 <_strtol_l.isra.0+0xc4>
 8011d88:	d101      	bne.n	8011d8e <_strtol_l.isra.0+0x8e>
 8011d8a:	45a2      	cmp	sl, r4
 8011d8c:	db1a      	blt.n	8011dc4 <_strtol_l.isra.0+0xc4>
 8011d8e:	fb05 4503 	mla	r5, r5, r3, r4
 8011d92:	2601      	movs	r6, #1
 8011d94:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011d98:	e7eb      	b.n	8011d72 <_strtol_l.isra.0+0x72>
 8011d9a:	2c2b      	cmp	r4, #43	; 0x2b
 8011d9c:	bf08      	it	eq
 8011d9e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8011da2:	46a8      	mov	r8, r5
 8011da4:	bf08      	it	eq
 8011da6:	f106 0e02 	addeq.w	lr, r6, #2
 8011daa:	e7c7      	b.n	8011d3c <_strtol_l.isra.0+0x3c>
 8011dac:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8011db0:	2f19      	cmp	r7, #25
 8011db2:	d801      	bhi.n	8011db8 <_strtol_l.isra.0+0xb8>
 8011db4:	3c37      	subs	r4, #55	; 0x37
 8011db6:	e7e1      	b.n	8011d7c <_strtol_l.isra.0+0x7c>
 8011db8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8011dbc:	2f19      	cmp	r7, #25
 8011dbe:	d804      	bhi.n	8011dca <_strtol_l.isra.0+0xca>
 8011dc0:	3c57      	subs	r4, #87	; 0x57
 8011dc2:	e7db      	b.n	8011d7c <_strtol_l.isra.0+0x7c>
 8011dc4:	f04f 36ff 	mov.w	r6, #4294967295
 8011dc8:	e7e4      	b.n	8011d94 <_strtol_l.isra.0+0x94>
 8011dca:	2e00      	cmp	r6, #0
 8011dcc:	da05      	bge.n	8011dda <_strtol_l.isra.0+0xda>
 8011dce:	2322      	movs	r3, #34	; 0x22
 8011dd0:	6003      	str	r3, [r0, #0]
 8011dd2:	4665      	mov	r5, ip
 8011dd4:	b942      	cbnz	r2, 8011de8 <_strtol_l.isra.0+0xe8>
 8011dd6:	4628      	mov	r0, r5
 8011dd8:	e79d      	b.n	8011d16 <_strtol_l.isra.0+0x16>
 8011dda:	f1b8 0f00 	cmp.w	r8, #0
 8011dde:	d000      	beq.n	8011de2 <_strtol_l.isra.0+0xe2>
 8011de0:	426d      	negs	r5, r5
 8011de2:	2a00      	cmp	r2, #0
 8011de4:	d0f7      	beq.n	8011dd6 <_strtol_l.isra.0+0xd6>
 8011de6:	b10e      	cbz	r6, 8011dec <_strtol_l.isra.0+0xec>
 8011de8:	f10e 31ff 	add.w	r1, lr, #4294967295
 8011dec:	6011      	str	r1, [r2, #0]
 8011dee:	e7f2      	b.n	8011dd6 <_strtol_l.isra.0+0xd6>
 8011df0:	2430      	movs	r4, #48	; 0x30
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d1b3      	bne.n	8011d5e <_strtol_l.isra.0+0x5e>
 8011df6:	2308      	movs	r3, #8
 8011df8:	e7b1      	b.n	8011d5e <_strtol_l.isra.0+0x5e>
 8011dfa:	2c30      	cmp	r4, #48	; 0x30
 8011dfc:	d0a4      	beq.n	8011d48 <_strtol_l.isra.0+0x48>
 8011dfe:	230a      	movs	r3, #10
 8011e00:	e7ad      	b.n	8011d5e <_strtol_l.isra.0+0x5e>
 8011e02:	bf00      	nop
 8011e04:	08016c01 	.word	0x08016c01

08011e08 <_strtol_r>:
 8011e08:	f7ff bf7a 	b.w	8011d00 <_strtol_l.isra.0>

08011e0c <_write_r>:
 8011e0c:	b538      	push	{r3, r4, r5, lr}
 8011e0e:	4d07      	ldr	r5, [pc, #28]	; (8011e2c <_write_r+0x20>)
 8011e10:	4604      	mov	r4, r0
 8011e12:	4608      	mov	r0, r1
 8011e14:	4611      	mov	r1, r2
 8011e16:	2200      	movs	r2, #0
 8011e18:	602a      	str	r2, [r5, #0]
 8011e1a:	461a      	mov	r2, r3
 8011e1c:	f7f0 ff8d 	bl	8002d3a <_write>
 8011e20:	1c43      	adds	r3, r0, #1
 8011e22:	d102      	bne.n	8011e2a <_write_r+0x1e>
 8011e24:	682b      	ldr	r3, [r5, #0]
 8011e26:	b103      	cbz	r3, 8011e2a <_write_r+0x1e>
 8011e28:	6023      	str	r3, [r4, #0]
 8011e2a:	bd38      	pop	{r3, r4, r5, pc}
 8011e2c:	20005b18 	.word	0x20005b18

08011e30 <_close_r>:
 8011e30:	b538      	push	{r3, r4, r5, lr}
 8011e32:	4d06      	ldr	r5, [pc, #24]	; (8011e4c <_close_r+0x1c>)
 8011e34:	2300      	movs	r3, #0
 8011e36:	4604      	mov	r4, r0
 8011e38:	4608      	mov	r0, r1
 8011e3a:	602b      	str	r3, [r5, #0]
 8011e3c:	f7f0 ff99 	bl	8002d72 <_close>
 8011e40:	1c43      	adds	r3, r0, #1
 8011e42:	d102      	bne.n	8011e4a <_close_r+0x1a>
 8011e44:	682b      	ldr	r3, [r5, #0]
 8011e46:	b103      	cbz	r3, 8011e4a <_close_r+0x1a>
 8011e48:	6023      	str	r3, [r4, #0]
 8011e4a:	bd38      	pop	{r3, r4, r5, pc}
 8011e4c:	20005b18 	.word	0x20005b18

08011e50 <quorem>:
 8011e50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e54:	6903      	ldr	r3, [r0, #16]
 8011e56:	690c      	ldr	r4, [r1, #16]
 8011e58:	42a3      	cmp	r3, r4
 8011e5a:	4607      	mov	r7, r0
 8011e5c:	f2c0 8081 	blt.w	8011f62 <quorem+0x112>
 8011e60:	3c01      	subs	r4, #1
 8011e62:	f101 0814 	add.w	r8, r1, #20
 8011e66:	f100 0514 	add.w	r5, r0, #20
 8011e6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011e6e:	9301      	str	r3, [sp, #4]
 8011e70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011e74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011e78:	3301      	adds	r3, #1
 8011e7a:	429a      	cmp	r2, r3
 8011e7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011e80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011e84:	fbb2 f6f3 	udiv	r6, r2, r3
 8011e88:	d331      	bcc.n	8011eee <quorem+0x9e>
 8011e8a:	f04f 0e00 	mov.w	lr, #0
 8011e8e:	4640      	mov	r0, r8
 8011e90:	46ac      	mov	ip, r5
 8011e92:	46f2      	mov	sl, lr
 8011e94:	f850 2b04 	ldr.w	r2, [r0], #4
 8011e98:	b293      	uxth	r3, r2
 8011e9a:	fb06 e303 	mla	r3, r6, r3, lr
 8011e9e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011ea2:	b29b      	uxth	r3, r3
 8011ea4:	ebaa 0303 	sub.w	r3, sl, r3
 8011ea8:	0c12      	lsrs	r2, r2, #16
 8011eaa:	f8dc a000 	ldr.w	sl, [ip]
 8011eae:	fb06 e202 	mla	r2, r6, r2, lr
 8011eb2:	fa13 f38a 	uxtah	r3, r3, sl
 8011eb6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011eba:	fa1f fa82 	uxth.w	sl, r2
 8011ebe:	f8dc 2000 	ldr.w	r2, [ip]
 8011ec2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8011ec6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011eca:	b29b      	uxth	r3, r3
 8011ecc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011ed0:	4581      	cmp	r9, r0
 8011ed2:	f84c 3b04 	str.w	r3, [ip], #4
 8011ed6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011eda:	d2db      	bcs.n	8011e94 <quorem+0x44>
 8011edc:	f855 300b 	ldr.w	r3, [r5, fp]
 8011ee0:	b92b      	cbnz	r3, 8011eee <quorem+0x9e>
 8011ee2:	9b01      	ldr	r3, [sp, #4]
 8011ee4:	3b04      	subs	r3, #4
 8011ee6:	429d      	cmp	r5, r3
 8011ee8:	461a      	mov	r2, r3
 8011eea:	d32e      	bcc.n	8011f4a <quorem+0xfa>
 8011eec:	613c      	str	r4, [r7, #16]
 8011eee:	4638      	mov	r0, r7
 8011ef0:	f001 fc92 	bl	8013818 <__mcmp>
 8011ef4:	2800      	cmp	r0, #0
 8011ef6:	db24      	blt.n	8011f42 <quorem+0xf2>
 8011ef8:	3601      	adds	r6, #1
 8011efa:	4628      	mov	r0, r5
 8011efc:	f04f 0c00 	mov.w	ip, #0
 8011f00:	f858 2b04 	ldr.w	r2, [r8], #4
 8011f04:	f8d0 e000 	ldr.w	lr, [r0]
 8011f08:	b293      	uxth	r3, r2
 8011f0a:	ebac 0303 	sub.w	r3, ip, r3
 8011f0e:	0c12      	lsrs	r2, r2, #16
 8011f10:	fa13 f38e 	uxtah	r3, r3, lr
 8011f14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011f18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011f1c:	b29b      	uxth	r3, r3
 8011f1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011f22:	45c1      	cmp	r9, r8
 8011f24:	f840 3b04 	str.w	r3, [r0], #4
 8011f28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011f2c:	d2e8      	bcs.n	8011f00 <quorem+0xb0>
 8011f2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011f32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011f36:	b922      	cbnz	r2, 8011f42 <quorem+0xf2>
 8011f38:	3b04      	subs	r3, #4
 8011f3a:	429d      	cmp	r5, r3
 8011f3c:	461a      	mov	r2, r3
 8011f3e:	d30a      	bcc.n	8011f56 <quorem+0x106>
 8011f40:	613c      	str	r4, [r7, #16]
 8011f42:	4630      	mov	r0, r6
 8011f44:	b003      	add	sp, #12
 8011f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f4a:	6812      	ldr	r2, [r2, #0]
 8011f4c:	3b04      	subs	r3, #4
 8011f4e:	2a00      	cmp	r2, #0
 8011f50:	d1cc      	bne.n	8011eec <quorem+0x9c>
 8011f52:	3c01      	subs	r4, #1
 8011f54:	e7c7      	b.n	8011ee6 <quorem+0x96>
 8011f56:	6812      	ldr	r2, [r2, #0]
 8011f58:	3b04      	subs	r3, #4
 8011f5a:	2a00      	cmp	r2, #0
 8011f5c:	d1f0      	bne.n	8011f40 <quorem+0xf0>
 8011f5e:	3c01      	subs	r4, #1
 8011f60:	e7eb      	b.n	8011f3a <quorem+0xea>
 8011f62:	2000      	movs	r0, #0
 8011f64:	e7ee      	b.n	8011f44 <quorem+0xf4>
	...

08011f68 <_dtoa_r>:
 8011f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f6c:	ed2d 8b02 	vpush	{d8}
 8011f70:	ec57 6b10 	vmov	r6, r7, d0
 8011f74:	b095      	sub	sp, #84	; 0x54
 8011f76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011f78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011f7c:	9105      	str	r1, [sp, #20]
 8011f7e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011f82:	4604      	mov	r4, r0
 8011f84:	9209      	str	r2, [sp, #36]	; 0x24
 8011f86:	930f      	str	r3, [sp, #60]	; 0x3c
 8011f88:	b975      	cbnz	r5, 8011fa8 <_dtoa_r+0x40>
 8011f8a:	2010      	movs	r0, #16
 8011f8c:	f7fe f82a 	bl	800ffe4 <malloc>
 8011f90:	4602      	mov	r2, r0
 8011f92:	6260      	str	r0, [r4, #36]	; 0x24
 8011f94:	b920      	cbnz	r0, 8011fa0 <_dtoa_r+0x38>
 8011f96:	4bb2      	ldr	r3, [pc, #712]	; (8012260 <_dtoa_r+0x2f8>)
 8011f98:	21ea      	movs	r1, #234	; 0xea
 8011f9a:	48b2      	ldr	r0, [pc, #712]	; (8012264 <_dtoa_r+0x2fc>)
 8011f9c:	f002 fbd4 	bl	8014748 <__assert_func>
 8011fa0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011fa4:	6005      	str	r5, [r0, #0]
 8011fa6:	60c5      	str	r5, [r0, #12]
 8011fa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011faa:	6819      	ldr	r1, [r3, #0]
 8011fac:	b151      	cbz	r1, 8011fc4 <_dtoa_r+0x5c>
 8011fae:	685a      	ldr	r2, [r3, #4]
 8011fb0:	604a      	str	r2, [r1, #4]
 8011fb2:	2301      	movs	r3, #1
 8011fb4:	4093      	lsls	r3, r2
 8011fb6:	608b      	str	r3, [r1, #8]
 8011fb8:	4620      	mov	r0, r4
 8011fba:	f001 f9a5 	bl	8013308 <_Bfree>
 8011fbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	601a      	str	r2, [r3, #0]
 8011fc4:	1e3b      	subs	r3, r7, #0
 8011fc6:	bfb9      	ittee	lt
 8011fc8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011fcc:	9303      	strlt	r3, [sp, #12]
 8011fce:	2300      	movge	r3, #0
 8011fd0:	f8c8 3000 	strge.w	r3, [r8]
 8011fd4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8011fd8:	4ba3      	ldr	r3, [pc, #652]	; (8012268 <_dtoa_r+0x300>)
 8011fda:	bfbc      	itt	lt
 8011fdc:	2201      	movlt	r2, #1
 8011fde:	f8c8 2000 	strlt.w	r2, [r8]
 8011fe2:	ea33 0309 	bics.w	r3, r3, r9
 8011fe6:	d11b      	bne.n	8012020 <_dtoa_r+0xb8>
 8011fe8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011fea:	f242 730f 	movw	r3, #9999	; 0x270f
 8011fee:	6013      	str	r3, [r2, #0]
 8011ff0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011ff4:	4333      	orrs	r3, r6
 8011ff6:	f000 857a 	beq.w	8012aee <_dtoa_r+0xb86>
 8011ffa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011ffc:	b963      	cbnz	r3, 8012018 <_dtoa_r+0xb0>
 8011ffe:	4b9b      	ldr	r3, [pc, #620]	; (801226c <_dtoa_r+0x304>)
 8012000:	e024      	b.n	801204c <_dtoa_r+0xe4>
 8012002:	4b9b      	ldr	r3, [pc, #620]	; (8012270 <_dtoa_r+0x308>)
 8012004:	9300      	str	r3, [sp, #0]
 8012006:	3308      	adds	r3, #8
 8012008:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801200a:	6013      	str	r3, [r2, #0]
 801200c:	9800      	ldr	r0, [sp, #0]
 801200e:	b015      	add	sp, #84	; 0x54
 8012010:	ecbd 8b02 	vpop	{d8}
 8012014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012018:	4b94      	ldr	r3, [pc, #592]	; (801226c <_dtoa_r+0x304>)
 801201a:	9300      	str	r3, [sp, #0]
 801201c:	3303      	adds	r3, #3
 801201e:	e7f3      	b.n	8012008 <_dtoa_r+0xa0>
 8012020:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012024:	2200      	movs	r2, #0
 8012026:	ec51 0b17 	vmov	r0, r1, d7
 801202a:	2300      	movs	r3, #0
 801202c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012030:	f7ee fd52 	bl	8000ad8 <__aeabi_dcmpeq>
 8012034:	4680      	mov	r8, r0
 8012036:	b158      	cbz	r0, 8012050 <_dtoa_r+0xe8>
 8012038:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801203a:	2301      	movs	r3, #1
 801203c:	6013      	str	r3, [r2, #0]
 801203e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012040:	2b00      	cmp	r3, #0
 8012042:	f000 8551 	beq.w	8012ae8 <_dtoa_r+0xb80>
 8012046:	488b      	ldr	r0, [pc, #556]	; (8012274 <_dtoa_r+0x30c>)
 8012048:	6018      	str	r0, [r3, #0]
 801204a:	1e43      	subs	r3, r0, #1
 801204c:	9300      	str	r3, [sp, #0]
 801204e:	e7dd      	b.n	801200c <_dtoa_r+0xa4>
 8012050:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012054:	aa12      	add	r2, sp, #72	; 0x48
 8012056:	a913      	add	r1, sp, #76	; 0x4c
 8012058:	4620      	mov	r0, r4
 801205a:	f001 fcfd 	bl	8013a58 <__d2b>
 801205e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012062:	4683      	mov	fp, r0
 8012064:	2d00      	cmp	r5, #0
 8012066:	d07c      	beq.n	8012162 <_dtoa_r+0x1fa>
 8012068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801206a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801206e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012072:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8012076:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801207a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801207e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012082:	4b7d      	ldr	r3, [pc, #500]	; (8012278 <_dtoa_r+0x310>)
 8012084:	2200      	movs	r2, #0
 8012086:	4630      	mov	r0, r6
 8012088:	4639      	mov	r1, r7
 801208a:	f7ee f905 	bl	8000298 <__aeabi_dsub>
 801208e:	a36e      	add	r3, pc, #440	; (adr r3, 8012248 <_dtoa_r+0x2e0>)
 8012090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012094:	f7ee fab8 	bl	8000608 <__aeabi_dmul>
 8012098:	a36d      	add	r3, pc, #436	; (adr r3, 8012250 <_dtoa_r+0x2e8>)
 801209a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801209e:	f7ee f8fd 	bl	800029c <__adddf3>
 80120a2:	4606      	mov	r6, r0
 80120a4:	4628      	mov	r0, r5
 80120a6:	460f      	mov	r7, r1
 80120a8:	f7ee fa44 	bl	8000534 <__aeabi_i2d>
 80120ac:	a36a      	add	r3, pc, #424	; (adr r3, 8012258 <_dtoa_r+0x2f0>)
 80120ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120b2:	f7ee faa9 	bl	8000608 <__aeabi_dmul>
 80120b6:	4602      	mov	r2, r0
 80120b8:	460b      	mov	r3, r1
 80120ba:	4630      	mov	r0, r6
 80120bc:	4639      	mov	r1, r7
 80120be:	f7ee f8ed 	bl	800029c <__adddf3>
 80120c2:	4606      	mov	r6, r0
 80120c4:	460f      	mov	r7, r1
 80120c6:	f7ee fd4f 	bl	8000b68 <__aeabi_d2iz>
 80120ca:	2200      	movs	r2, #0
 80120cc:	4682      	mov	sl, r0
 80120ce:	2300      	movs	r3, #0
 80120d0:	4630      	mov	r0, r6
 80120d2:	4639      	mov	r1, r7
 80120d4:	f7ee fd0a 	bl	8000aec <__aeabi_dcmplt>
 80120d8:	b148      	cbz	r0, 80120ee <_dtoa_r+0x186>
 80120da:	4650      	mov	r0, sl
 80120dc:	f7ee fa2a 	bl	8000534 <__aeabi_i2d>
 80120e0:	4632      	mov	r2, r6
 80120e2:	463b      	mov	r3, r7
 80120e4:	f7ee fcf8 	bl	8000ad8 <__aeabi_dcmpeq>
 80120e8:	b908      	cbnz	r0, 80120ee <_dtoa_r+0x186>
 80120ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80120ee:	f1ba 0f16 	cmp.w	sl, #22
 80120f2:	d854      	bhi.n	801219e <_dtoa_r+0x236>
 80120f4:	4b61      	ldr	r3, [pc, #388]	; (801227c <_dtoa_r+0x314>)
 80120f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80120fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012102:	f7ee fcf3 	bl	8000aec <__aeabi_dcmplt>
 8012106:	2800      	cmp	r0, #0
 8012108:	d04b      	beq.n	80121a2 <_dtoa_r+0x23a>
 801210a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801210e:	2300      	movs	r3, #0
 8012110:	930e      	str	r3, [sp, #56]	; 0x38
 8012112:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012114:	1b5d      	subs	r5, r3, r5
 8012116:	1e6b      	subs	r3, r5, #1
 8012118:	9304      	str	r3, [sp, #16]
 801211a:	bf43      	ittte	mi
 801211c:	2300      	movmi	r3, #0
 801211e:	f1c5 0801 	rsbmi	r8, r5, #1
 8012122:	9304      	strmi	r3, [sp, #16]
 8012124:	f04f 0800 	movpl.w	r8, #0
 8012128:	f1ba 0f00 	cmp.w	sl, #0
 801212c:	db3b      	blt.n	80121a6 <_dtoa_r+0x23e>
 801212e:	9b04      	ldr	r3, [sp, #16]
 8012130:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8012134:	4453      	add	r3, sl
 8012136:	9304      	str	r3, [sp, #16]
 8012138:	2300      	movs	r3, #0
 801213a:	9306      	str	r3, [sp, #24]
 801213c:	9b05      	ldr	r3, [sp, #20]
 801213e:	2b09      	cmp	r3, #9
 8012140:	d869      	bhi.n	8012216 <_dtoa_r+0x2ae>
 8012142:	2b05      	cmp	r3, #5
 8012144:	bfc4      	itt	gt
 8012146:	3b04      	subgt	r3, #4
 8012148:	9305      	strgt	r3, [sp, #20]
 801214a:	9b05      	ldr	r3, [sp, #20]
 801214c:	f1a3 0302 	sub.w	r3, r3, #2
 8012150:	bfcc      	ite	gt
 8012152:	2500      	movgt	r5, #0
 8012154:	2501      	movle	r5, #1
 8012156:	2b03      	cmp	r3, #3
 8012158:	d869      	bhi.n	801222e <_dtoa_r+0x2c6>
 801215a:	e8df f003 	tbb	[pc, r3]
 801215e:	4e2c      	.short	0x4e2c
 8012160:	5a4c      	.short	0x5a4c
 8012162:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8012166:	441d      	add	r5, r3
 8012168:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801216c:	2b20      	cmp	r3, #32
 801216e:	bfc1      	itttt	gt
 8012170:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012174:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012178:	fa09 f303 	lslgt.w	r3, r9, r3
 801217c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012180:	bfda      	itte	le
 8012182:	f1c3 0320 	rsble	r3, r3, #32
 8012186:	fa06 f003 	lslle.w	r0, r6, r3
 801218a:	4318      	orrgt	r0, r3
 801218c:	f7ee f9c2 	bl	8000514 <__aeabi_ui2d>
 8012190:	2301      	movs	r3, #1
 8012192:	4606      	mov	r6, r0
 8012194:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012198:	3d01      	subs	r5, #1
 801219a:	9310      	str	r3, [sp, #64]	; 0x40
 801219c:	e771      	b.n	8012082 <_dtoa_r+0x11a>
 801219e:	2301      	movs	r3, #1
 80121a0:	e7b6      	b.n	8012110 <_dtoa_r+0x1a8>
 80121a2:	900e      	str	r0, [sp, #56]	; 0x38
 80121a4:	e7b5      	b.n	8012112 <_dtoa_r+0x1aa>
 80121a6:	f1ca 0300 	rsb	r3, sl, #0
 80121aa:	9306      	str	r3, [sp, #24]
 80121ac:	2300      	movs	r3, #0
 80121ae:	eba8 080a 	sub.w	r8, r8, sl
 80121b2:	930d      	str	r3, [sp, #52]	; 0x34
 80121b4:	e7c2      	b.n	801213c <_dtoa_r+0x1d4>
 80121b6:	2300      	movs	r3, #0
 80121b8:	9308      	str	r3, [sp, #32]
 80121ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121bc:	2b00      	cmp	r3, #0
 80121be:	dc39      	bgt.n	8012234 <_dtoa_r+0x2cc>
 80121c0:	f04f 0901 	mov.w	r9, #1
 80121c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80121c8:	464b      	mov	r3, r9
 80121ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80121ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80121d0:	2200      	movs	r2, #0
 80121d2:	6042      	str	r2, [r0, #4]
 80121d4:	2204      	movs	r2, #4
 80121d6:	f102 0614 	add.w	r6, r2, #20
 80121da:	429e      	cmp	r6, r3
 80121dc:	6841      	ldr	r1, [r0, #4]
 80121de:	d92f      	bls.n	8012240 <_dtoa_r+0x2d8>
 80121e0:	4620      	mov	r0, r4
 80121e2:	f001 f851 	bl	8013288 <_Balloc>
 80121e6:	9000      	str	r0, [sp, #0]
 80121e8:	2800      	cmp	r0, #0
 80121ea:	d14b      	bne.n	8012284 <_dtoa_r+0x31c>
 80121ec:	4b24      	ldr	r3, [pc, #144]	; (8012280 <_dtoa_r+0x318>)
 80121ee:	4602      	mov	r2, r0
 80121f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80121f4:	e6d1      	b.n	8011f9a <_dtoa_r+0x32>
 80121f6:	2301      	movs	r3, #1
 80121f8:	e7de      	b.n	80121b8 <_dtoa_r+0x250>
 80121fa:	2300      	movs	r3, #0
 80121fc:	9308      	str	r3, [sp, #32]
 80121fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012200:	eb0a 0903 	add.w	r9, sl, r3
 8012204:	f109 0301 	add.w	r3, r9, #1
 8012208:	2b01      	cmp	r3, #1
 801220a:	9301      	str	r3, [sp, #4]
 801220c:	bfb8      	it	lt
 801220e:	2301      	movlt	r3, #1
 8012210:	e7dd      	b.n	80121ce <_dtoa_r+0x266>
 8012212:	2301      	movs	r3, #1
 8012214:	e7f2      	b.n	80121fc <_dtoa_r+0x294>
 8012216:	2501      	movs	r5, #1
 8012218:	2300      	movs	r3, #0
 801221a:	9305      	str	r3, [sp, #20]
 801221c:	9508      	str	r5, [sp, #32]
 801221e:	f04f 39ff 	mov.w	r9, #4294967295
 8012222:	2200      	movs	r2, #0
 8012224:	f8cd 9004 	str.w	r9, [sp, #4]
 8012228:	2312      	movs	r3, #18
 801222a:	9209      	str	r2, [sp, #36]	; 0x24
 801222c:	e7cf      	b.n	80121ce <_dtoa_r+0x266>
 801222e:	2301      	movs	r3, #1
 8012230:	9308      	str	r3, [sp, #32]
 8012232:	e7f4      	b.n	801221e <_dtoa_r+0x2b6>
 8012234:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012238:	f8cd 9004 	str.w	r9, [sp, #4]
 801223c:	464b      	mov	r3, r9
 801223e:	e7c6      	b.n	80121ce <_dtoa_r+0x266>
 8012240:	3101      	adds	r1, #1
 8012242:	6041      	str	r1, [r0, #4]
 8012244:	0052      	lsls	r2, r2, #1
 8012246:	e7c6      	b.n	80121d6 <_dtoa_r+0x26e>
 8012248:	636f4361 	.word	0x636f4361
 801224c:	3fd287a7 	.word	0x3fd287a7
 8012250:	8b60c8b3 	.word	0x8b60c8b3
 8012254:	3fc68a28 	.word	0x3fc68a28
 8012258:	509f79fb 	.word	0x509f79fb
 801225c:	3fd34413 	.word	0x3fd34413
 8012260:	08016d0e 	.word	0x08016d0e
 8012264:	08016d25 	.word	0x08016d25
 8012268:	7ff00000 	.word	0x7ff00000
 801226c:	08016d0a 	.word	0x08016d0a
 8012270:	08016d01 	.word	0x08016d01
 8012274:	08016f8a 	.word	0x08016f8a
 8012278:	3ff80000 	.word	0x3ff80000
 801227c:	08016ea0 	.word	0x08016ea0
 8012280:	08016d84 	.word	0x08016d84
 8012284:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012286:	9a00      	ldr	r2, [sp, #0]
 8012288:	601a      	str	r2, [r3, #0]
 801228a:	9b01      	ldr	r3, [sp, #4]
 801228c:	2b0e      	cmp	r3, #14
 801228e:	f200 80ad 	bhi.w	80123ec <_dtoa_r+0x484>
 8012292:	2d00      	cmp	r5, #0
 8012294:	f000 80aa 	beq.w	80123ec <_dtoa_r+0x484>
 8012298:	f1ba 0f00 	cmp.w	sl, #0
 801229c:	dd36      	ble.n	801230c <_dtoa_r+0x3a4>
 801229e:	4ac3      	ldr	r2, [pc, #780]	; (80125ac <_dtoa_r+0x644>)
 80122a0:	f00a 030f 	and.w	r3, sl, #15
 80122a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80122a8:	ed93 7b00 	vldr	d7, [r3]
 80122ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80122b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80122b4:	eeb0 8a47 	vmov.f32	s16, s14
 80122b8:	eef0 8a67 	vmov.f32	s17, s15
 80122bc:	d016      	beq.n	80122ec <_dtoa_r+0x384>
 80122be:	4bbc      	ldr	r3, [pc, #752]	; (80125b0 <_dtoa_r+0x648>)
 80122c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80122c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80122c8:	f7ee fac8 	bl	800085c <__aeabi_ddiv>
 80122cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80122d0:	f007 070f 	and.w	r7, r7, #15
 80122d4:	2503      	movs	r5, #3
 80122d6:	4eb6      	ldr	r6, [pc, #728]	; (80125b0 <_dtoa_r+0x648>)
 80122d8:	b957      	cbnz	r7, 80122f0 <_dtoa_r+0x388>
 80122da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80122de:	ec53 2b18 	vmov	r2, r3, d8
 80122e2:	f7ee fabb 	bl	800085c <__aeabi_ddiv>
 80122e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80122ea:	e029      	b.n	8012340 <_dtoa_r+0x3d8>
 80122ec:	2502      	movs	r5, #2
 80122ee:	e7f2      	b.n	80122d6 <_dtoa_r+0x36e>
 80122f0:	07f9      	lsls	r1, r7, #31
 80122f2:	d508      	bpl.n	8012306 <_dtoa_r+0x39e>
 80122f4:	ec51 0b18 	vmov	r0, r1, d8
 80122f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80122fc:	f7ee f984 	bl	8000608 <__aeabi_dmul>
 8012300:	ec41 0b18 	vmov	d8, r0, r1
 8012304:	3501      	adds	r5, #1
 8012306:	107f      	asrs	r7, r7, #1
 8012308:	3608      	adds	r6, #8
 801230a:	e7e5      	b.n	80122d8 <_dtoa_r+0x370>
 801230c:	f000 80a6 	beq.w	801245c <_dtoa_r+0x4f4>
 8012310:	f1ca 0600 	rsb	r6, sl, #0
 8012314:	4ba5      	ldr	r3, [pc, #660]	; (80125ac <_dtoa_r+0x644>)
 8012316:	4fa6      	ldr	r7, [pc, #664]	; (80125b0 <_dtoa_r+0x648>)
 8012318:	f006 020f 	and.w	r2, r6, #15
 801231c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012324:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012328:	f7ee f96e 	bl	8000608 <__aeabi_dmul>
 801232c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012330:	1136      	asrs	r6, r6, #4
 8012332:	2300      	movs	r3, #0
 8012334:	2502      	movs	r5, #2
 8012336:	2e00      	cmp	r6, #0
 8012338:	f040 8085 	bne.w	8012446 <_dtoa_r+0x4de>
 801233c:	2b00      	cmp	r3, #0
 801233e:	d1d2      	bne.n	80122e6 <_dtoa_r+0x37e>
 8012340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012342:	2b00      	cmp	r3, #0
 8012344:	f000 808c 	beq.w	8012460 <_dtoa_r+0x4f8>
 8012348:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801234c:	4b99      	ldr	r3, [pc, #612]	; (80125b4 <_dtoa_r+0x64c>)
 801234e:	2200      	movs	r2, #0
 8012350:	4630      	mov	r0, r6
 8012352:	4639      	mov	r1, r7
 8012354:	f7ee fbca 	bl	8000aec <__aeabi_dcmplt>
 8012358:	2800      	cmp	r0, #0
 801235a:	f000 8081 	beq.w	8012460 <_dtoa_r+0x4f8>
 801235e:	9b01      	ldr	r3, [sp, #4]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d07d      	beq.n	8012460 <_dtoa_r+0x4f8>
 8012364:	f1b9 0f00 	cmp.w	r9, #0
 8012368:	dd3c      	ble.n	80123e4 <_dtoa_r+0x47c>
 801236a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801236e:	9307      	str	r3, [sp, #28]
 8012370:	2200      	movs	r2, #0
 8012372:	4b91      	ldr	r3, [pc, #580]	; (80125b8 <_dtoa_r+0x650>)
 8012374:	4630      	mov	r0, r6
 8012376:	4639      	mov	r1, r7
 8012378:	f7ee f946 	bl	8000608 <__aeabi_dmul>
 801237c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012380:	3501      	adds	r5, #1
 8012382:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8012386:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801238a:	4628      	mov	r0, r5
 801238c:	f7ee f8d2 	bl	8000534 <__aeabi_i2d>
 8012390:	4632      	mov	r2, r6
 8012392:	463b      	mov	r3, r7
 8012394:	f7ee f938 	bl	8000608 <__aeabi_dmul>
 8012398:	4b88      	ldr	r3, [pc, #544]	; (80125bc <_dtoa_r+0x654>)
 801239a:	2200      	movs	r2, #0
 801239c:	f7ed ff7e 	bl	800029c <__adddf3>
 80123a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80123a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80123a8:	9303      	str	r3, [sp, #12]
 80123aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d15c      	bne.n	801246a <_dtoa_r+0x502>
 80123b0:	4b83      	ldr	r3, [pc, #524]	; (80125c0 <_dtoa_r+0x658>)
 80123b2:	2200      	movs	r2, #0
 80123b4:	4630      	mov	r0, r6
 80123b6:	4639      	mov	r1, r7
 80123b8:	f7ed ff6e 	bl	8000298 <__aeabi_dsub>
 80123bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80123c0:	4606      	mov	r6, r0
 80123c2:	460f      	mov	r7, r1
 80123c4:	f7ee fbb0 	bl	8000b28 <__aeabi_dcmpgt>
 80123c8:	2800      	cmp	r0, #0
 80123ca:	f040 8296 	bne.w	80128fa <_dtoa_r+0x992>
 80123ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80123d2:	4630      	mov	r0, r6
 80123d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80123d8:	4639      	mov	r1, r7
 80123da:	f7ee fb87 	bl	8000aec <__aeabi_dcmplt>
 80123de:	2800      	cmp	r0, #0
 80123e0:	f040 8288 	bne.w	80128f4 <_dtoa_r+0x98c>
 80123e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80123e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80123ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	f2c0 8158 	blt.w	80126a4 <_dtoa_r+0x73c>
 80123f4:	f1ba 0f0e 	cmp.w	sl, #14
 80123f8:	f300 8154 	bgt.w	80126a4 <_dtoa_r+0x73c>
 80123fc:	4b6b      	ldr	r3, [pc, #428]	; (80125ac <_dtoa_r+0x644>)
 80123fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012402:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012408:	2b00      	cmp	r3, #0
 801240a:	f280 80e3 	bge.w	80125d4 <_dtoa_r+0x66c>
 801240e:	9b01      	ldr	r3, [sp, #4]
 8012410:	2b00      	cmp	r3, #0
 8012412:	f300 80df 	bgt.w	80125d4 <_dtoa_r+0x66c>
 8012416:	f040 826d 	bne.w	80128f4 <_dtoa_r+0x98c>
 801241a:	4b69      	ldr	r3, [pc, #420]	; (80125c0 <_dtoa_r+0x658>)
 801241c:	2200      	movs	r2, #0
 801241e:	4640      	mov	r0, r8
 8012420:	4649      	mov	r1, r9
 8012422:	f7ee f8f1 	bl	8000608 <__aeabi_dmul>
 8012426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801242a:	f7ee fb73 	bl	8000b14 <__aeabi_dcmpge>
 801242e:	9e01      	ldr	r6, [sp, #4]
 8012430:	4637      	mov	r7, r6
 8012432:	2800      	cmp	r0, #0
 8012434:	f040 8243 	bne.w	80128be <_dtoa_r+0x956>
 8012438:	9d00      	ldr	r5, [sp, #0]
 801243a:	2331      	movs	r3, #49	; 0x31
 801243c:	f805 3b01 	strb.w	r3, [r5], #1
 8012440:	f10a 0a01 	add.w	sl, sl, #1
 8012444:	e23f      	b.n	80128c6 <_dtoa_r+0x95e>
 8012446:	07f2      	lsls	r2, r6, #31
 8012448:	d505      	bpl.n	8012456 <_dtoa_r+0x4ee>
 801244a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801244e:	f7ee f8db 	bl	8000608 <__aeabi_dmul>
 8012452:	3501      	adds	r5, #1
 8012454:	2301      	movs	r3, #1
 8012456:	1076      	asrs	r6, r6, #1
 8012458:	3708      	adds	r7, #8
 801245a:	e76c      	b.n	8012336 <_dtoa_r+0x3ce>
 801245c:	2502      	movs	r5, #2
 801245e:	e76f      	b.n	8012340 <_dtoa_r+0x3d8>
 8012460:	9b01      	ldr	r3, [sp, #4]
 8012462:	f8cd a01c 	str.w	sl, [sp, #28]
 8012466:	930c      	str	r3, [sp, #48]	; 0x30
 8012468:	e78d      	b.n	8012386 <_dtoa_r+0x41e>
 801246a:	9900      	ldr	r1, [sp, #0]
 801246c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801246e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012470:	4b4e      	ldr	r3, [pc, #312]	; (80125ac <_dtoa_r+0x644>)
 8012472:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012476:	4401      	add	r1, r0
 8012478:	9102      	str	r1, [sp, #8]
 801247a:	9908      	ldr	r1, [sp, #32]
 801247c:	eeb0 8a47 	vmov.f32	s16, s14
 8012480:	eef0 8a67 	vmov.f32	s17, s15
 8012484:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012488:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801248c:	2900      	cmp	r1, #0
 801248e:	d045      	beq.n	801251c <_dtoa_r+0x5b4>
 8012490:	494c      	ldr	r1, [pc, #304]	; (80125c4 <_dtoa_r+0x65c>)
 8012492:	2000      	movs	r0, #0
 8012494:	f7ee f9e2 	bl	800085c <__aeabi_ddiv>
 8012498:	ec53 2b18 	vmov	r2, r3, d8
 801249c:	f7ed fefc 	bl	8000298 <__aeabi_dsub>
 80124a0:	9d00      	ldr	r5, [sp, #0]
 80124a2:	ec41 0b18 	vmov	d8, r0, r1
 80124a6:	4639      	mov	r1, r7
 80124a8:	4630      	mov	r0, r6
 80124aa:	f7ee fb5d 	bl	8000b68 <__aeabi_d2iz>
 80124ae:	900c      	str	r0, [sp, #48]	; 0x30
 80124b0:	f7ee f840 	bl	8000534 <__aeabi_i2d>
 80124b4:	4602      	mov	r2, r0
 80124b6:	460b      	mov	r3, r1
 80124b8:	4630      	mov	r0, r6
 80124ba:	4639      	mov	r1, r7
 80124bc:	f7ed feec 	bl	8000298 <__aeabi_dsub>
 80124c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80124c2:	3330      	adds	r3, #48	; 0x30
 80124c4:	f805 3b01 	strb.w	r3, [r5], #1
 80124c8:	ec53 2b18 	vmov	r2, r3, d8
 80124cc:	4606      	mov	r6, r0
 80124ce:	460f      	mov	r7, r1
 80124d0:	f7ee fb0c 	bl	8000aec <__aeabi_dcmplt>
 80124d4:	2800      	cmp	r0, #0
 80124d6:	d165      	bne.n	80125a4 <_dtoa_r+0x63c>
 80124d8:	4632      	mov	r2, r6
 80124da:	463b      	mov	r3, r7
 80124dc:	4935      	ldr	r1, [pc, #212]	; (80125b4 <_dtoa_r+0x64c>)
 80124de:	2000      	movs	r0, #0
 80124e0:	f7ed feda 	bl	8000298 <__aeabi_dsub>
 80124e4:	ec53 2b18 	vmov	r2, r3, d8
 80124e8:	f7ee fb00 	bl	8000aec <__aeabi_dcmplt>
 80124ec:	2800      	cmp	r0, #0
 80124ee:	f040 80b9 	bne.w	8012664 <_dtoa_r+0x6fc>
 80124f2:	9b02      	ldr	r3, [sp, #8]
 80124f4:	429d      	cmp	r5, r3
 80124f6:	f43f af75 	beq.w	80123e4 <_dtoa_r+0x47c>
 80124fa:	4b2f      	ldr	r3, [pc, #188]	; (80125b8 <_dtoa_r+0x650>)
 80124fc:	ec51 0b18 	vmov	r0, r1, d8
 8012500:	2200      	movs	r2, #0
 8012502:	f7ee f881 	bl	8000608 <__aeabi_dmul>
 8012506:	4b2c      	ldr	r3, [pc, #176]	; (80125b8 <_dtoa_r+0x650>)
 8012508:	ec41 0b18 	vmov	d8, r0, r1
 801250c:	2200      	movs	r2, #0
 801250e:	4630      	mov	r0, r6
 8012510:	4639      	mov	r1, r7
 8012512:	f7ee f879 	bl	8000608 <__aeabi_dmul>
 8012516:	4606      	mov	r6, r0
 8012518:	460f      	mov	r7, r1
 801251a:	e7c4      	b.n	80124a6 <_dtoa_r+0x53e>
 801251c:	ec51 0b17 	vmov	r0, r1, d7
 8012520:	f7ee f872 	bl	8000608 <__aeabi_dmul>
 8012524:	9b02      	ldr	r3, [sp, #8]
 8012526:	9d00      	ldr	r5, [sp, #0]
 8012528:	930c      	str	r3, [sp, #48]	; 0x30
 801252a:	ec41 0b18 	vmov	d8, r0, r1
 801252e:	4639      	mov	r1, r7
 8012530:	4630      	mov	r0, r6
 8012532:	f7ee fb19 	bl	8000b68 <__aeabi_d2iz>
 8012536:	9011      	str	r0, [sp, #68]	; 0x44
 8012538:	f7ed fffc 	bl	8000534 <__aeabi_i2d>
 801253c:	4602      	mov	r2, r0
 801253e:	460b      	mov	r3, r1
 8012540:	4630      	mov	r0, r6
 8012542:	4639      	mov	r1, r7
 8012544:	f7ed fea8 	bl	8000298 <__aeabi_dsub>
 8012548:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801254a:	3330      	adds	r3, #48	; 0x30
 801254c:	f805 3b01 	strb.w	r3, [r5], #1
 8012550:	9b02      	ldr	r3, [sp, #8]
 8012552:	429d      	cmp	r5, r3
 8012554:	4606      	mov	r6, r0
 8012556:	460f      	mov	r7, r1
 8012558:	f04f 0200 	mov.w	r2, #0
 801255c:	d134      	bne.n	80125c8 <_dtoa_r+0x660>
 801255e:	4b19      	ldr	r3, [pc, #100]	; (80125c4 <_dtoa_r+0x65c>)
 8012560:	ec51 0b18 	vmov	r0, r1, d8
 8012564:	f7ed fe9a 	bl	800029c <__adddf3>
 8012568:	4602      	mov	r2, r0
 801256a:	460b      	mov	r3, r1
 801256c:	4630      	mov	r0, r6
 801256e:	4639      	mov	r1, r7
 8012570:	f7ee fada 	bl	8000b28 <__aeabi_dcmpgt>
 8012574:	2800      	cmp	r0, #0
 8012576:	d175      	bne.n	8012664 <_dtoa_r+0x6fc>
 8012578:	ec53 2b18 	vmov	r2, r3, d8
 801257c:	4911      	ldr	r1, [pc, #68]	; (80125c4 <_dtoa_r+0x65c>)
 801257e:	2000      	movs	r0, #0
 8012580:	f7ed fe8a 	bl	8000298 <__aeabi_dsub>
 8012584:	4602      	mov	r2, r0
 8012586:	460b      	mov	r3, r1
 8012588:	4630      	mov	r0, r6
 801258a:	4639      	mov	r1, r7
 801258c:	f7ee faae 	bl	8000aec <__aeabi_dcmplt>
 8012590:	2800      	cmp	r0, #0
 8012592:	f43f af27 	beq.w	80123e4 <_dtoa_r+0x47c>
 8012596:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012598:	1e6b      	subs	r3, r5, #1
 801259a:	930c      	str	r3, [sp, #48]	; 0x30
 801259c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80125a0:	2b30      	cmp	r3, #48	; 0x30
 80125a2:	d0f8      	beq.n	8012596 <_dtoa_r+0x62e>
 80125a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80125a8:	e04a      	b.n	8012640 <_dtoa_r+0x6d8>
 80125aa:	bf00      	nop
 80125ac:	08016ea0 	.word	0x08016ea0
 80125b0:	08016e78 	.word	0x08016e78
 80125b4:	3ff00000 	.word	0x3ff00000
 80125b8:	40240000 	.word	0x40240000
 80125bc:	401c0000 	.word	0x401c0000
 80125c0:	40140000 	.word	0x40140000
 80125c4:	3fe00000 	.word	0x3fe00000
 80125c8:	4baf      	ldr	r3, [pc, #700]	; (8012888 <_dtoa_r+0x920>)
 80125ca:	f7ee f81d 	bl	8000608 <__aeabi_dmul>
 80125ce:	4606      	mov	r6, r0
 80125d0:	460f      	mov	r7, r1
 80125d2:	e7ac      	b.n	801252e <_dtoa_r+0x5c6>
 80125d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80125d8:	9d00      	ldr	r5, [sp, #0]
 80125da:	4642      	mov	r2, r8
 80125dc:	464b      	mov	r3, r9
 80125de:	4630      	mov	r0, r6
 80125e0:	4639      	mov	r1, r7
 80125e2:	f7ee f93b 	bl	800085c <__aeabi_ddiv>
 80125e6:	f7ee fabf 	bl	8000b68 <__aeabi_d2iz>
 80125ea:	9002      	str	r0, [sp, #8]
 80125ec:	f7ed ffa2 	bl	8000534 <__aeabi_i2d>
 80125f0:	4642      	mov	r2, r8
 80125f2:	464b      	mov	r3, r9
 80125f4:	f7ee f808 	bl	8000608 <__aeabi_dmul>
 80125f8:	4602      	mov	r2, r0
 80125fa:	460b      	mov	r3, r1
 80125fc:	4630      	mov	r0, r6
 80125fe:	4639      	mov	r1, r7
 8012600:	f7ed fe4a 	bl	8000298 <__aeabi_dsub>
 8012604:	9e02      	ldr	r6, [sp, #8]
 8012606:	9f01      	ldr	r7, [sp, #4]
 8012608:	3630      	adds	r6, #48	; 0x30
 801260a:	f805 6b01 	strb.w	r6, [r5], #1
 801260e:	9e00      	ldr	r6, [sp, #0]
 8012610:	1bae      	subs	r6, r5, r6
 8012612:	42b7      	cmp	r7, r6
 8012614:	4602      	mov	r2, r0
 8012616:	460b      	mov	r3, r1
 8012618:	d137      	bne.n	801268a <_dtoa_r+0x722>
 801261a:	f7ed fe3f 	bl	800029c <__adddf3>
 801261e:	4642      	mov	r2, r8
 8012620:	464b      	mov	r3, r9
 8012622:	4606      	mov	r6, r0
 8012624:	460f      	mov	r7, r1
 8012626:	f7ee fa7f 	bl	8000b28 <__aeabi_dcmpgt>
 801262a:	b9c8      	cbnz	r0, 8012660 <_dtoa_r+0x6f8>
 801262c:	4642      	mov	r2, r8
 801262e:	464b      	mov	r3, r9
 8012630:	4630      	mov	r0, r6
 8012632:	4639      	mov	r1, r7
 8012634:	f7ee fa50 	bl	8000ad8 <__aeabi_dcmpeq>
 8012638:	b110      	cbz	r0, 8012640 <_dtoa_r+0x6d8>
 801263a:	9b02      	ldr	r3, [sp, #8]
 801263c:	07d9      	lsls	r1, r3, #31
 801263e:	d40f      	bmi.n	8012660 <_dtoa_r+0x6f8>
 8012640:	4620      	mov	r0, r4
 8012642:	4659      	mov	r1, fp
 8012644:	f000 fe60 	bl	8013308 <_Bfree>
 8012648:	2300      	movs	r3, #0
 801264a:	702b      	strb	r3, [r5, #0]
 801264c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801264e:	f10a 0001 	add.w	r0, sl, #1
 8012652:	6018      	str	r0, [r3, #0]
 8012654:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012656:	2b00      	cmp	r3, #0
 8012658:	f43f acd8 	beq.w	801200c <_dtoa_r+0xa4>
 801265c:	601d      	str	r5, [r3, #0]
 801265e:	e4d5      	b.n	801200c <_dtoa_r+0xa4>
 8012660:	f8cd a01c 	str.w	sl, [sp, #28]
 8012664:	462b      	mov	r3, r5
 8012666:	461d      	mov	r5, r3
 8012668:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801266c:	2a39      	cmp	r2, #57	; 0x39
 801266e:	d108      	bne.n	8012682 <_dtoa_r+0x71a>
 8012670:	9a00      	ldr	r2, [sp, #0]
 8012672:	429a      	cmp	r2, r3
 8012674:	d1f7      	bne.n	8012666 <_dtoa_r+0x6fe>
 8012676:	9a07      	ldr	r2, [sp, #28]
 8012678:	9900      	ldr	r1, [sp, #0]
 801267a:	3201      	adds	r2, #1
 801267c:	9207      	str	r2, [sp, #28]
 801267e:	2230      	movs	r2, #48	; 0x30
 8012680:	700a      	strb	r2, [r1, #0]
 8012682:	781a      	ldrb	r2, [r3, #0]
 8012684:	3201      	adds	r2, #1
 8012686:	701a      	strb	r2, [r3, #0]
 8012688:	e78c      	b.n	80125a4 <_dtoa_r+0x63c>
 801268a:	4b7f      	ldr	r3, [pc, #508]	; (8012888 <_dtoa_r+0x920>)
 801268c:	2200      	movs	r2, #0
 801268e:	f7ed ffbb 	bl	8000608 <__aeabi_dmul>
 8012692:	2200      	movs	r2, #0
 8012694:	2300      	movs	r3, #0
 8012696:	4606      	mov	r6, r0
 8012698:	460f      	mov	r7, r1
 801269a:	f7ee fa1d 	bl	8000ad8 <__aeabi_dcmpeq>
 801269e:	2800      	cmp	r0, #0
 80126a0:	d09b      	beq.n	80125da <_dtoa_r+0x672>
 80126a2:	e7cd      	b.n	8012640 <_dtoa_r+0x6d8>
 80126a4:	9a08      	ldr	r2, [sp, #32]
 80126a6:	2a00      	cmp	r2, #0
 80126a8:	f000 80c4 	beq.w	8012834 <_dtoa_r+0x8cc>
 80126ac:	9a05      	ldr	r2, [sp, #20]
 80126ae:	2a01      	cmp	r2, #1
 80126b0:	f300 80a8 	bgt.w	8012804 <_dtoa_r+0x89c>
 80126b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80126b6:	2a00      	cmp	r2, #0
 80126b8:	f000 80a0 	beq.w	80127fc <_dtoa_r+0x894>
 80126bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80126c0:	9e06      	ldr	r6, [sp, #24]
 80126c2:	4645      	mov	r5, r8
 80126c4:	9a04      	ldr	r2, [sp, #16]
 80126c6:	2101      	movs	r1, #1
 80126c8:	441a      	add	r2, r3
 80126ca:	4620      	mov	r0, r4
 80126cc:	4498      	add	r8, r3
 80126ce:	9204      	str	r2, [sp, #16]
 80126d0:	f000 ff20 	bl	8013514 <__i2b>
 80126d4:	4607      	mov	r7, r0
 80126d6:	2d00      	cmp	r5, #0
 80126d8:	dd0b      	ble.n	80126f2 <_dtoa_r+0x78a>
 80126da:	9b04      	ldr	r3, [sp, #16]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	dd08      	ble.n	80126f2 <_dtoa_r+0x78a>
 80126e0:	42ab      	cmp	r3, r5
 80126e2:	9a04      	ldr	r2, [sp, #16]
 80126e4:	bfa8      	it	ge
 80126e6:	462b      	movge	r3, r5
 80126e8:	eba8 0803 	sub.w	r8, r8, r3
 80126ec:	1aed      	subs	r5, r5, r3
 80126ee:	1ad3      	subs	r3, r2, r3
 80126f0:	9304      	str	r3, [sp, #16]
 80126f2:	9b06      	ldr	r3, [sp, #24]
 80126f4:	b1fb      	cbz	r3, 8012736 <_dtoa_r+0x7ce>
 80126f6:	9b08      	ldr	r3, [sp, #32]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	f000 809f 	beq.w	801283c <_dtoa_r+0x8d4>
 80126fe:	2e00      	cmp	r6, #0
 8012700:	dd11      	ble.n	8012726 <_dtoa_r+0x7be>
 8012702:	4639      	mov	r1, r7
 8012704:	4632      	mov	r2, r6
 8012706:	4620      	mov	r0, r4
 8012708:	f000 ffc0 	bl	801368c <__pow5mult>
 801270c:	465a      	mov	r2, fp
 801270e:	4601      	mov	r1, r0
 8012710:	4607      	mov	r7, r0
 8012712:	4620      	mov	r0, r4
 8012714:	f000 ff14 	bl	8013540 <__multiply>
 8012718:	4659      	mov	r1, fp
 801271a:	9007      	str	r0, [sp, #28]
 801271c:	4620      	mov	r0, r4
 801271e:	f000 fdf3 	bl	8013308 <_Bfree>
 8012722:	9b07      	ldr	r3, [sp, #28]
 8012724:	469b      	mov	fp, r3
 8012726:	9b06      	ldr	r3, [sp, #24]
 8012728:	1b9a      	subs	r2, r3, r6
 801272a:	d004      	beq.n	8012736 <_dtoa_r+0x7ce>
 801272c:	4659      	mov	r1, fp
 801272e:	4620      	mov	r0, r4
 8012730:	f000 ffac 	bl	801368c <__pow5mult>
 8012734:	4683      	mov	fp, r0
 8012736:	2101      	movs	r1, #1
 8012738:	4620      	mov	r0, r4
 801273a:	f000 feeb 	bl	8013514 <__i2b>
 801273e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012740:	2b00      	cmp	r3, #0
 8012742:	4606      	mov	r6, r0
 8012744:	dd7c      	ble.n	8012840 <_dtoa_r+0x8d8>
 8012746:	461a      	mov	r2, r3
 8012748:	4601      	mov	r1, r0
 801274a:	4620      	mov	r0, r4
 801274c:	f000 ff9e 	bl	801368c <__pow5mult>
 8012750:	9b05      	ldr	r3, [sp, #20]
 8012752:	2b01      	cmp	r3, #1
 8012754:	4606      	mov	r6, r0
 8012756:	dd76      	ble.n	8012846 <_dtoa_r+0x8de>
 8012758:	2300      	movs	r3, #0
 801275a:	9306      	str	r3, [sp, #24]
 801275c:	6933      	ldr	r3, [r6, #16]
 801275e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012762:	6918      	ldr	r0, [r3, #16]
 8012764:	f000 fe86 	bl	8013474 <__hi0bits>
 8012768:	f1c0 0020 	rsb	r0, r0, #32
 801276c:	9b04      	ldr	r3, [sp, #16]
 801276e:	4418      	add	r0, r3
 8012770:	f010 001f 	ands.w	r0, r0, #31
 8012774:	f000 8086 	beq.w	8012884 <_dtoa_r+0x91c>
 8012778:	f1c0 0320 	rsb	r3, r0, #32
 801277c:	2b04      	cmp	r3, #4
 801277e:	dd7f      	ble.n	8012880 <_dtoa_r+0x918>
 8012780:	f1c0 001c 	rsb	r0, r0, #28
 8012784:	9b04      	ldr	r3, [sp, #16]
 8012786:	4403      	add	r3, r0
 8012788:	4480      	add	r8, r0
 801278a:	4405      	add	r5, r0
 801278c:	9304      	str	r3, [sp, #16]
 801278e:	f1b8 0f00 	cmp.w	r8, #0
 8012792:	dd05      	ble.n	80127a0 <_dtoa_r+0x838>
 8012794:	4659      	mov	r1, fp
 8012796:	4642      	mov	r2, r8
 8012798:	4620      	mov	r0, r4
 801279a:	f000 ffd1 	bl	8013740 <__lshift>
 801279e:	4683      	mov	fp, r0
 80127a0:	9b04      	ldr	r3, [sp, #16]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	dd05      	ble.n	80127b2 <_dtoa_r+0x84a>
 80127a6:	4631      	mov	r1, r6
 80127a8:	461a      	mov	r2, r3
 80127aa:	4620      	mov	r0, r4
 80127ac:	f000 ffc8 	bl	8013740 <__lshift>
 80127b0:	4606      	mov	r6, r0
 80127b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d069      	beq.n	801288c <_dtoa_r+0x924>
 80127b8:	4631      	mov	r1, r6
 80127ba:	4658      	mov	r0, fp
 80127bc:	f001 f82c 	bl	8013818 <__mcmp>
 80127c0:	2800      	cmp	r0, #0
 80127c2:	da63      	bge.n	801288c <_dtoa_r+0x924>
 80127c4:	2300      	movs	r3, #0
 80127c6:	4659      	mov	r1, fp
 80127c8:	220a      	movs	r2, #10
 80127ca:	4620      	mov	r0, r4
 80127cc:	f000 fdbe 	bl	801334c <__multadd>
 80127d0:	9b08      	ldr	r3, [sp, #32]
 80127d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80127d6:	4683      	mov	fp, r0
 80127d8:	2b00      	cmp	r3, #0
 80127da:	f000 818f 	beq.w	8012afc <_dtoa_r+0xb94>
 80127de:	4639      	mov	r1, r7
 80127e0:	2300      	movs	r3, #0
 80127e2:	220a      	movs	r2, #10
 80127e4:	4620      	mov	r0, r4
 80127e6:	f000 fdb1 	bl	801334c <__multadd>
 80127ea:	f1b9 0f00 	cmp.w	r9, #0
 80127ee:	4607      	mov	r7, r0
 80127f0:	f300 808e 	bgt.w	8012910 <_dtoa_r+0x9a8>
 80127f4:	9b05      	ldr	r3, [sp, #20]
 80127f6:	2b02      	cmp	r3, #2
 80127f8:	dc50      	bgt.n	801289c <_dtoa_r+0x934>
 80127fa:	e089      	b.n	8012910 <_dtoa_r+0x9a8>
 80127fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80127fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012802:	e75d      	b.n	80126c0 <_dtoa_r+0x758>
 8012804:	9b01      	ldr	r3, [sp, #4]
 8012806:	1e5e      	subs	r6, r3, #1
 8012808:	9b06      	ldr	r3, [sp, #24]
 801280a:	42b3      	cmp	r3, r6
 801280c:	bfbf      	itttt	lt
 801280e:	9b06      	ldrlt	r3, [sp, #24]
 8012810:	9606      	strlt	r6, [sp, #24]
 8012812:	1af2      	sublt	r2, r6, r3
 8012814:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8012816:	bfb6      	itet	lt
 8012818:	189b      	addlt	r3, r3, r2
 801281a:	1b9e      	subge	r6, r3, r6
 801281c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801281e:	9b01      	ldr	r3, [sp, #4]
 8012820:	bfb8      	it	lt
 8012822:	2600      	movlt	r6, #0
 8012824:	2b00      	cmp	r3, #0
 8012826:	bfb5      	itete	lt
 8012828:	eba8 0503 	sublt.w	r5, r8, r3
 801282c:	9b01      	ldrge	r3, [sp, #4]
 801282e:	2300      	movlt	r3, #0
 8012830:	4645      	movge	r5, r8
 8012832:	e747      	b.n	80126c4 <_dtoa_r+0x75c>
 8012834:	9e06      	ldr	r6, [sp, #24]
 8012836:	9f08      	ldr	r7, [sp, #32]
 8012838:	4645      	mov	r5, r8
 801283a:	e74c      	b.n	80126d6 <_dtoa_r+0x76e>
 801283c:	9a06      	ldr	r2, [sp, #24]
 801283e:	e775      	b.n	801272c <_dtoa_r+0x7c4>
 8012840:	9b05      	ldr	r3, [sp, #20]
 8012842:	2b01      	cmp	r3, #1
 8012844:	dc18      	bgt.n	8012878 <_dtoa_r+0x910>
 8012846:	9b02      	ldr	r3, [sp, #8]
 8012848:	b9b3      	cbnz	r3, 8012878 <_dtoa_r+0x910>
 801284a:	9b03      	ldr	r3, [sp, #12]
 801284c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012850:	b9a3      	cbnz	r3, 801287c <_dtoa_r+0x914>
 8012852:	9b03      	ldr	r3, [sp, #12]
 8012854:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012858:	0d1b      	lsrs	r3, r3, #20
 801285a:	051b      	lsls	r3, r3, #20
 801285c:	b12b      	cbz	r3, 801286a <_dtoa_r+0x902>
 801285e:	9b04      	ldr	r3, [sp, #16]
 8012860:	3301      	adds	r3, #1
 8012862:	9304      	str	r3, [sp, #16]
 8012864:	f108 0801 	add.w	r8, r8, #1
 8012868:	2301      	movs	r3, #1
 801286a:	9306      	str	r3, [sp, #24]
 801286c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801286e:	2b00      	cmp	r3, #0
 8012870:	f47f af74 	bne.w	801275c <_dtoa_r+0x7f4>
 8012874:	2001      	movs	r0, #1
 8012876:	e779      	b.n	801276c <_dtoa_r+0x804>
 8012878:	2300      	movs	r3, #0
 801287a:	e7f6      	b.n	801286a <_dtoa_r+0x902>
 801287c:	9b02      	ldr	r3, [sp, #8]
 801287e:	e7f4      	b.n	801286a <_dtoa_r+0x902>
 8012880:	d085      	beq.n	801278e <_dtoa_r+0x826>
 8012882:	4618      	mov	r0, r3
 8012884:	301c      	adds	r0, #28
 8012886:	e77d      	b.n	8012784 <_dtoa_r+0x81c>
 8012888:	40240000 	.word	0x40240000
 801288c:	9b01      	ldr	r3, [sp, #4]
 801288e:	2b00      	cmp	r3, #0
 8012890:	dc38      	bgt.n	8012904 <_dtoa_r+0x99c>
 8012892:	9b05      	ldr	r3, [sp, #20]
 8012894:	2b02      	cmp	r3, #2
 8012896:	dd35      	ble.n	8012904 <_dtoa_r+0x99c>
 8012898:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801289c:	f1b9 0f00 	cmp.w	r9, #0
 80128a0:	d10d      	bne.n	80128be <_dtoa_r+0x956>
 80128a2:	4631      	mov	r1, r6
 80128a4:	464b      	mov	r3, r9
 80128a6:	2205      	movs	r2, #5
 80128a8:	4620      	mov	r0, r4
 80128aa:	f000 fd4f 	bl	801334c <__multadd>
 80128ae:	4601      	mov	r1, r0
 80128b0:	4606      	mov	r6, r0
 80128b2:	4658      	mov	r0, fp
 80128b4:	f000 ffb0 	bl	8013818 <__mcmp>
 80128b8:	2800      	cmp	r0, #0
 80128ba:	f73f adbd 	bgt.w	8012438 <_dtoa_r+0x4d0>
 80128be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128c0:	9d00      	ldr	r5, [sp, #0]
 80128c2:	ea6f 0a03 	mvn.w	sl, r3
 80128c6:	f04f 0800 	mov.w	r8, #0
 80128ca:	4631      	mov	r1, r6
 80128cc:	4620      	mov	r0, r4
 80128ce:	f000 fd1b 	bl	8013308 <_Bfree>
 80128d2:	2f00      	cmp	r7, #0
 80128d4:	f43f aeb4 	beq.w	8012640 <_dtoa_r+0x6d8>
 80128d8:	f1b8 0f00 	cmp.w	r8, #0
 80128dc:	d005      	beq.n	80128ea <_dtoa_r+0x982>
 80128de:	45b8      	cmp	r8, r7
 80128e0:	d003      	beq.n	80128ea <_dtoa_r+0x982>
 80128e2:	4641      	mov	r1, r8
 80128e4:	4620      	mov	r0, r4
 80128e6:	f000 fd0f 	bl	8013308 <_Bfree>
 80128ea:	4639      	mov	r1, r7
 80128ec:	4620      	mov	r0, r4
 80128ee:	f000 fd0b 	bl	8013308 <_Bfree>
 80128f2:	e6a5      	b.n	8012640 <_dtoa_r+0x6d8>
 80128f4:	2600      	movs	r6, #0
 80128f6:	4637      	mov	r7, r6
 80128f8:	e7e1      	b.n	80128be <_dtoa_r+0x956>
 80128fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80128fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012900:	4637      	mov	r7, r6
 8012902:	e599      	b.n	8012438 <_dtoa_r+0x4d0>
 8012904:	9b08      	ldr	r3, [sp, #32]
 8012906:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801290a:	2b00      	cmp	r3, #0
 801290c:	f000 80fd 	beq.w	8012b0a <_dtoa_r+0xba2>
 8012910:	2d00      	cmp	r5, #0
 8012912:	dd05      	ble.n	8012920 <_dtoa_r+0x9b8>
 8012914:	4639      	mov	r1, r7
 8012916:	462a      	mov	r2, r5
 8012918:	4620      	mov	r0, r4
 801291a:	f000 ff11 	bl	8013740 <__lshift>
 801291e:	4607      	mov	r7, r0
 8012920:	9b06      	ldr	r3, [sp, #24]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d05c      	beq.n	80129e0 <_dtoa_r+0xa78>
 8012926:	6879      	ldr	r1, [r7, #4]
 8012928:	4620      	mov	r0, r4
 801292a:	f000 fcad 	bl	8013288 <_Balloc>
 801292e:	4605      	mov	r5, r0
 8012930:	b928      	cbnz	r0, 801293e <_dtoa_r+0x9d6>
 8012932:	4b80      	ldr	r3, [pc, #512]	; (8012b34 <_dtoa_r+0xbcc>)
 8012934:	4602      	mov	r2, r0
 8012936:	f240 21ea 	movw	r1, #746	; 0x2ea
 801293a:	f7ff bb2e 	b.w	8011f9a <_dtoa_r+0x32>
 801293e:	693a      	ldr	r2, [r7, #16]
 8012940:	3202      	adds	r2, #2
 8012942:	0092      	lsls	r2, r2, #2
 8012944:	f107 010c 	add.w	r1, r7, #12
 8012948:	300c      	adds	r0, #12
 801294a:	f7fd fb5b 	bl	8010004 <memcpy>
 801294e:	2201      	movs	r2, #1
 8012950:	4629      	mov	r1, r5
 8012952:	4620      	mov	r0, r4
 8012954:	f000 fef4 	bl	8013740 <__lshift>
 8012958:	9b00      	ldr	r3, [sp, #0]
 801295a:	3301      	adds	r3, #1
 801295c:	9301      	str	r3, [sp, #4]
 801295e:	9b00      	ldr	r3, [sp, #0]
 8012960:	444b      	add	r3, r9
 8012962:	9307      	str	r3, [sp, #28]
 8012964:	9b02      	ldr	r3, [sp, #8]
 8012966:	f003 0301 	and.w	r3, r3, #1
 801296a:	46b8      	mov	r8, r7
 801296c:	9306      	str	r3, [sp, #24]
 801296e:	4607      	mov	r7, r0
 8012970:	9b01      	ldr	r3, [sp, #4]
 8012972:	4631      	mov	r1, r6
 8012974:	3b01      	subs	r3, #1
 8012976:	4658      	mov	r0, fp
 8012978:	9302      	str	r3, [sp, #8]
 801297a:	f7ff fa69 	bl	8011e50 <quorem>
 801297e:	4603      	mov	r3, r0
 8012980:	3330      	adds	r3, #48	; 0x30
 8012982:	9004      	str	r0, [sp, #16]
 8012984:	4641      	mov	r1, r8
 8012986:	4658      	mov	r0, fp
 8012988:	9308      	str	r3, [sp, #32]
 801298a:	f000 ff45 	bl	8013818 <__mcmp>
 801298e:	463a      	mov	r2, r7
 8012990:	4681      	mov	r9, r0
 8012992:	4631      	mov	r1, r6
 8012994:	4620      	mov	r0, r4
 8012996:	f000 ff5b 	bl	8013850 <__mdiff>
 801299a:	68c2      	ldr	r2, [r0, #12]
 801299c:	9b08      	ldr	r3, [sp, #32]
 801299e:	4605      	mov	r5, r0
 80129a0:	bb02      	cbnz	r2, 80129e4 <_dtoa_r+0xa7c>
 80129a2:	4601      	mov	r1, r0
 80129a4:	4658      	mov	r0, fp
 80129a6:	f000 ff37 	bl	8013818 <__mcmp>
 80129aa:	9b08      	ldr	r3, [sp, #32]
 80129ac:	4602      	mov	r2, r0
 80129ae:	4629      	mov	r1, r5
 80129b0:	4620      	mov	r0, r4
 80129b2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80129b6:	f000 fca7 	bl	8013308 <_Bfree>
 80129ba:	9b05      	ldr	r3, [sp, #20]
 80129bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80129be:	9d01      	ldr	r5, [sp, #4]
 80129c0:	ea43 0102 	orr.w	r1, r3, r2
 80129c4:	9b06      	ldr	r3, [sp, #24]
 80129c6:	430b      	orrs	r3, r1
 80129c8:	9b08      	ldr	r3, [sp, #32]
 80129ca:	d10d      	bne.n	80129e8 <_dtoa_r+0xa80>
 80129cc:	2b39      	cmp	r3, #57	; 0x39
 80129ce:	d029      	beq.n	8012a24 <_dtoa_r+0xabc>
 80129d0:	f1b9 0f00 	cmp.w	r9, #0
 80129d4:	dd01      	ble.n	80129da <_dtoa_r+0xa72>
 80129d6:	9b04      	ldr	r3, [sp, #16]
 80129d8:	3331      	adds	r3, #49	; 0x31
 80129da:	9a02      	ldr	r2, [sp, #8]
 80129dc:	7013      	strb	r3, [r2, #0]
 80129de:	e774      	b.n	80128ca <_dtoa_r+0x962>
 80129e0:	4638      	mov	r0, r7
 80129e2:	e7b9      	b.n	8012958 <_dtoa_r+0x9f0>
 80129e4:	2201      	movs	r2, #1
 80129e6:	e7e2      	b.n	80129ae <_dtoa_r+0xa46>
 80129e8:	f1b9 0f00 	cmp.w	r9, #0
 80129ec:	db06      	blt.n	80129fc <_dtoa_r+0xa94>
 80129ee:	9905      	ldr	r1, [sp, #20]
 80129f0:	ea41 0909 	orr.w	r9, r1, r9
 80129f4:	9906      	ldr	r1, [sp, #24]
 80129f6:	ea59 0101 	orrs.w	r1, r9, r1
 80129fa:	d120      	bne.n	8012a3e <_dtoa_r+0xad6>
 80129fc:	2a00      	cmp	r2, #0
 80129fe:	ddec      	ble.n	80129da <_dtoa_r+0xa72>
 8012a00:	4659      	mov	r1, fp
 8012a02:	2201      	movs	r2, #1
 8012a04:	4620      	mov	r0, r4
 8012a06:	9301      	str	r3, [sp, #4]
 8012a08:	f000 fe9a 	bl	8013740 <__lshift>
 8012a0c:	4631      	mov	r1, r6
 8012a0e:	4683      	mov	fp, r0
 8012a10:	f000 ff02 	bl	8013818 <__mcmp>
 8012a14:	2800      	cmp	r0, #0
 8012a16:	9b01      	ldr	r3, [sp, #4]
 8012a18:	dc02      	bgt.n	8012a20 <_dtoa_r+0xab8>
 8012a1a:	d1de      	bne.n	80129da <_dtoa_r+0xa72>
 8012a1c:	07da      	lsls	r2, r3, #31
 8012a1e:	d5dc      	bpl.n	80129da <_dtoa_r+0xa72>
 8012a20:	2b39      	cmp	r3, #57	; 0x39
 8012a22:	d1d8      	bne.n	80129d6 <_dtoa_r+0xa6e>
 8012a24:	9a02      	ldr	r2, [sp, #8]
 8012a26:	2339      	movs	r3, #57	; 0x39
 8012a28:	7013      	strb	r3, [r2, #0]
 8012a2a:	462b      	mov	r3, r5
 8012a2c:	461d      	mov	r5, r3
 8012a2e:	3b01      	subs	r3, #1
 8012a30:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012a34:	2a39      	cmp	r2, #57	; 0x39
 8012a36:	d050      	beq.n	8012ada <_dtoa_r+0xb72>
 8012a38:	3201      	adds	r2, #1
 8012a3a:	701a      	strb	r2, [r3, #0]
 8012a3c:	e745      	b.n	80128ca <_dtoa_r+0x962>
 8012a3e:	2a00      	cmp	r2, #0
 8012a40:	dd03      	ble.n	8012a4a <_dtoa_r+0xae2>
 8012a42:	2b39      	cmp	r3, #57	; 0x39
 8012a44:	d0ee      	beq.n	8012a24 <_dtoa_r+0xabc>
 8012a46:	3301      	adds	r3, #1
 8012a48:	e7c7      	b.n	80129da <_dtoa_r+0xa72>
 8012a4a:	9a01      	ldr	r2, [sp, #4]
 8012a4c:	9907      	ldr	r1, [sp, #28]
 8012a4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012a52:	428a      	cmp	r2, r1
 8012a54:	d02a      	beq.n	8012aac <_dtoa_r+0xb44>
 8012a56:	4659      	mov	r1, fp
 8012a58:	2300      	movs	r3, #0
 8012a5a:	220a      	movs	r2, #10
 8012a5c:	4620      	mov	r0, r4
 8012a5e:	f000 fc75 	bl	801334c <__multadd>
 8012a62:	45b8      	cmp	r8, r7
 8012a64:	4683      	mov	fp, r0
 8012a66:	f04f 0300 	mov.w	r3, #0
 8012a6a:	f04f 020a 	mov.w	r2, #10
 8012a6e:	4641      	mov	r1, r8
 8012a70:	4620      	mov	r0, r4
 8012a72:	d107      	bne.n	8012a84 <_dtoa_r+0xb1c>
 8012a74:	f000 fc6a 	bl	801334c <__multadd>
 8012a78:	4680      	mov	r8, r0
 8012a7a:	4607      	mov	r7, r0
 8012a7c:	9b01      	ldr	r3, [sp, #4]
 8012a7e:	3301      	adds	r3, #1
 8012a80:	9301      	str	r3, [sp, #4]
 8012a82:	e775      	b.n	8012970 <_dtoa_r+0xa08>
 8012a84:	f000 fc62 	bl	801334c <__multadd>
 8012a88:	4639      	mov	r1, r7
 8012a8a:	4680      	mov	r8, r0
 8012a8c:	2300      	movs	r3, #0
 8012a8e:	220a      	movs	r2, #10
 8012a90:	4620      	mov	r0, r4
 8012a92:	f000 fc5b 	bl	801334c <__multadd>
 8012a96:	4607      	mov	r7, r0
 8012a98:	e7f0      	b.n	8012a7c <_dtoa_r+0xb14>
 8012a9a:	f1b9 0f00 	cmp.w	r9, #0
 8012a9e:	9a00      	ldr	r2, [sp, #0]
 8012aa0:	bfcc      	ite	gt
 8012aa2:	464d      	movgt	r5, r9
 8012aa4:	2501      	movle	r5, #1
 8012aa6:	4415      	add	r5, r2
 8012aa8:	f04f 0800 	mov.w	r8, #0
 8012aac:	4659      	mov	r1, fp
 8012aae:	2201      	movs	r2, #1
 8012ab0:	4620      	mov	r0, r4
 8012ab2:	9301      	str	r3, [sp, #4]
 8012ab4:	f000 fe44 	bl	8013740 <__lshift>
 8012ab8:	4631      	mov	r1, r6
 8012aba:	4683      	mov	fp, r0
 8012abc:	f000 feac 	bl	8013818 <__mcmp>
 8012ac0:	2800      	cmp	r0, #0
 8012ac2:	dcb2      	bgt.n	8012a2a <_dtoa_r+0xac2>
 8012ac4:	d102      	bne.n	8012acc <_dtoa_r+0xb64>
 8012ac6:	9b01      	ldr	r3, [sp, #4]
 8012ac8:	07db      	lsls	r3, r3, #31
 8012aca:	d4ae      	bmi.n	8012a2a <_dtoa_r+0xac2>
 8012acc:	462b      	mov	r3, r5
 8012ace:	461d      	mov	r5, r3
 8012ad0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012ad4:	2a30      	cmp	r2, #48	; 0x30
 8012ad6:	d0fa      	beq.n	8012ace <_dtoa_r+0xb66>
 8012ad8:	e6f7      	b.n	80128ca <_dtoa_r+0x962>
 8012ada:	9a00      	ldr	r2, [sp, #0]
 8012adc:	429a      	cmp	r2, r3
 8012ade:	d1a5      	bne.n	8012a2c <_dtoa_r+0xac4>
 8012ae0:	f10a 0a01 	add.w	sl, sl, #1
 8012ae4:	2331      	movs	r3, #49	; 0x31
 8012ae6:	e779      	b.n	80129dc <_dtoa_r+0xa74>
 8012ae8:	4b13      	ldr	r3, [pc, #76]	; (8012b38 <_dtoa_r+0xbd0>)
 8012aea:	f7ff baaf 	b.w	801204c <_dtoa_r+0xe4>
 8012aee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	f47f aa86 	bne.w	8012002 <_dtoa_r+0x9a>
 8012af6:	4b11      	ldr	r3, [pc, #68]	; (8012b3c <_dtoa_r+0xbd4>)
 8012af8:	f7ff baa8 	b.w	801204c <_dtoa_r+0xe4>
 8012afc:	f1b9 0f00 	cmp.w	r9, #0
 8012b00:	dc03      	bgt.n	8012b0a <_dtoa_r+0xba2>
 8012b02:	9b05      	ldr	r3, [sp, #20]
 8012b04:	2b02      	cmp	r3, #2
 8012b06:	f73f aec9 	bgt.w	801289c <_dtoa_r+0x934>
 8012b0a:	9d00      	ldr	r5, [sp, #0]
 8012b0c:	4631      	mov	r1, r6
 8012b0e:	4658      	mov	r0, fp
 8012b10:	f7ff f99e 	bl	8011e50 <quorem>
 8012b14:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012b18:	f805 3b01 	strb.w	r3, [r5], #1
 8012b1c:	9a00      	ldr	r2, [sp, #0]
 8012b1e:	1aaa      	subs	r2, r5, r2
 8012b20:	4591      	cmp	r9, r2
 8012b22:	ddba      	ble.n	8012a9a <_dtoa_r+0xb32>
 8012b24:	4659      	mov	r1, fp
 8012b26:	2300      	movs	r3, #0
 8012b28:	220a      	movs	r2, #10
 8012b2a:	4620      	mov	r0, r4
 8012b2c:	f000 fc0e 	bl	801334c <__multadd>
 8012b30:	4683      	mov	fp, r0
 8012b32:	e7eb      	b.n	8012b0c <_dtoa_r+0xba4>
 8012b34:	08016d84 	.word	0x08016d84
 8012b38:	08016f89 	.word	0x08016f89
 8012b3c:	08016d01 	.word	0x08016d01

08012b40 <rshift>:
 8012b40:	6903      	ldr	r3, [r0, #16]
 8012b42:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012b46:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012b4a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012b4e:	f100 0414 	add.w	r4, r0, #20
 8012b52:	dd45      	ble.n	8012be0 <rshift+0xa0>
 8012b54:	f011 011f 	ands.w	r1, r1, #31
 8012b58:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012b5c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012b60:	d10c      	bne.n	8012b7c <rshift+0x3c>
 8012b62:	f100 0710 	add.w	r7, r0, #16
 8012b66:	4629      	mov	r1, r5
 8012b68:	42b1      	cmp	r1, r6
 8012b6a:	d334      	bcc.n	8012bd6 <rshift+0x96>
 8012b6c:	1a9b      	subs	r3, r3, r2
 8012b6e:	009b      	lsls	r3, r3, #2
 8012b70:	1eea      	subs	r2, r5, #3
 8012b72:	4296      	cmp	r6, r2
 8012b74:	bf38      	it	cc
 8012b76:	2300      	movcc	r3, #0
 8012b78:	4423      	add	r3, r4
 8012b7a:	e015      	b.n	8012ba8 <rshift+0x68>
 8012b7c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012b80:	f1c1 0820 	rsb	r8, r1, #32
 8012b84:	40cf      	lsrs	r7, r1
 8012b86:	f105 0e04 	add.w	lr, r5, #4
 8012b8a:	46a1      	mov	r9, r4
 8012b8c:	4576      	cmp	r6, lr
 8012b8e:	46f4      	mov	ip, lr
 8012b90:	d815      	bhi.n	8012bbe <rshift+0x7e>
 8012b92:	1a9b      	subs	r3, r3, r2
 8012b94:	009a      	lsls	r2, r3, #2
 8012b96:	3a04      	subs	r2, #4
 8012b98:	3501      	adds	r5, #1
 8012b9a:	42ae      	cmp	r6, r5
 8012b9c:	bf38      	it	cc
 8012b9e:	2200      	movcc	r2, #0
 8012ba0:	18a3      	adds	r3, r4, r2
 8012ba2:	50a7      	str	r7, [r4, r2]
 8012ba4:	b107      	cbz	r7, 8012ba8 <rshift+0x68>
 8012ba6:	3304      	adds	r3, #4
 8012ba8:	1b1a      	subs	r2, r3, r4
 8012baa:	42a3      	cmp	r3, r4
 8012bac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012bb0:	bf08      	it	eq
 8012bb2:	2300      	moveq	r3, #0
 8012bb4:	6102      	str	r2, [r0, #16]
 8012bb6:	bf08      	it	eq
 8012bb8:	6143      	streq	r3, [r0, #20]
 8012bba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012bbe:	f8dc c000 	ldr.w	ip, [ip]
 8012bc2:	fa0c fc08 	lsl.w	ip, ip, r8
 8012bc6:	ea4c 0707 	orr.w	r7, ip, r7
 8012bca:	f849 7b04 	str.w	r7, [r9], #4
 8012bce:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012bd2:	40cf      	lsrs	r7, r1
 8012bd4:	e7da      	b.n	8012b8c <rshift+0x4c>
 8012bd6:	f851 cb04 	ldr.w	ip, [r1], #4
 8012bda:	f847 cf04 	str.w	ip, [r7, #4]!
 8012bde:	e7c3      	b.n	8012b68 <rshift+0x28>
 8012be0:	4623      	mov	r3, r4
 8012be2:	e7e1      	b.n	8012ba8 <rshift+0x68>

08012be4 <__hexdig_fun>:
 8012be4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012be8:	2b09      	cmp	r3, #9
 8012bea:	d802      	bhi.n	8012bf2 <__hexdig_fun+0xe>
 8012bec:	3820      	subs	r0, #32
 8012bee:	b2c0      	uxtb	r0, r0
 8012bf0:	4770      	bx	lr
 8012bf2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012bf6:	2b05      	cmp	r3, #5
 8012bf8:	d801      	bhi.n	8012bfe <__hexdig_fun+0x1a>
 8012bfa:	3847      	subs	r0, #71	; 0x47
 8012bfc:	e7f7      	b.n	8012bee <__hexdig_fun+0xa>
 8012bfe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012c02:	2b05      	cmp	r3, #5
 8012c04:	d801      	bhi.n	8012c0a <__hexdig_fun+0x26>
 8012c06:	3827      	subs	r0, #39	; 0x27
 8012c08:	e7f1      	b.n	8012bee <__hexdig_fun+0xa>
 8012c0a:	2000      	movs	r0, #0
 8012c0c:	4770      	bx	lr
	...

08012c10 <__gethex>:
 8012c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c14:	ed2d 8b02 	vpush	{d8}
 8012c18:	b089      	sub	sp, #36	; 0x24
 8012c1a:	ee08 0a10 	vmov	s16, r0
 8012c1e:	9304      	str	r3, [sp, #16]
 8012c20:	4bbc      	ldr	r3, [pc, #752]	; (8012f14 <__gethex+0x304>)
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	9301      	str	r3, [sp, #4]
 8012c26:	4618      	mov	r0, r3
 8012c28:	468b      	mov	fp, r1
 8012c2a:	4690      	mov	r8, r2
 8012c2c:	f7ed fb28 	bl	8000280 <strlen>
 8012c30:	9b01      	ldr	r3, [sp, #4]
 8012c32:	f8db 2000 	ldr.w	r2, [fp]
 8012c36:	4403      	add	r3, r0
 8012c38:	4682      	mov	sl, r0
 8012c3a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012c3e:	9305      	str	r3, [sp, #20]
 8012c40:	1c93      	adds	r3, r2, #2
 8012c42:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012c46:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012c4a:	32fe      	adds	r2, #254	; 0xfe
 8012c4c:	18d1      	adds	r1, r2, r3
 8012c4e:	461f      	mov	r7, r3
 8012c50:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012c54:	9100      	str	r1, [sp, #0]
 8012c56:	2830      	cmp	r0, #48	; 0x30
 8012c58:	d0f8      	beq.n	8012c4c <__gethex+0x3c>
 8012c5a:	f7ff ffc3 	bl	8012be4 <__hexdig_fun>
 8012c5e:	4604      	mov	r4, r0
 8012c60:	2800      	cmp	r0, #0
 8012c62:	d13a      	bne.n	8012cda <__gethex+0xca>
 8012c64:	9901      	ldr	r1, [sp, #4]
 8012c66:	4652      	mov	r2, sl
 8012c68:	4638      	mov	r0, r7
 8012c6a:	f7fe fa0a 	bl	8011082 <strncmp>
 8012c6e:	4605      	mov	r5, r0
 8012c70:	2800      	cmp	r0, #0
 8012c72:	d168      	bne.n	8012d46 <__gethex+0x136>
 8012c74:	f817 000a 	ldrb.w	r0, [r7, sl]
 8012c78:	eb07 060a 	add.w	r6, r7, sl
 8012c7c:	f7ff ffb2 	bl	8012be4 <__hexdig_fun>
 8012c80:	2800      	cmp	r0, #0
 8012c82:	d062      	beq.n	8012d4a <__gethex+0x13a>
 8012c84:	4633      	mov	r3, r6
 8012c86:	7818      	ldrb	r0, [r3, #0]
 8012c88:	2830      	cmp	r0, #48	; 0x30
 8012c8a:	461f      	mov	r7, r3
 8012c8c:	f103 0301 	add.w	r3, r3, #1
 8012c90:	d0f9      	beq.n	8012c86 <__gethex+0x76>
 8012c92:	f7ff ffa7 	bl	8012be4 <__hexdig_fun>
 8012c96:	2301      	movs	r3, #1
 8012c98:	fab0 f480 	clz	r4, r0
 8012c9c:	0964      	lsrs	r4, r4, #5
 8012c9e:	4635      	mov	r5, r6
 8012ca0:	9300      	str	r3, [sp, #0]
 8012ca2:	463a      	mov	r2, r7
 8012ca4:	4616      	mov	r6, r2
 8012ca6:	3201      	adds	r2, #1
 8012ca8:	7830      	ldrb	r0, [r6, #0]
 8012caa:	f7ff ff9b 	bl	8012be4 <__hexdig_fun>
 8012cae:	2800      	cmp	r0, #0
 8012cb0:	d1f8      	bne.n	8012ca4 <__gethex+0x94>
 8012cb2:	9901      	ldr	r1, [sp, #4]
 8012cb4:	4652      	mov	r2, sl
 8012cb6:	4630      	mov	r0, r6
 8012cb8:	f7fe f9e3 	bl	8011082 <strncmp>
 8012cbc:	b980      	cbnz	r0, 8012ce0 <__gethex+0xd0>
 8012cbe:	b94d      	cbnz	r5, 8012cd4 <__gethex+0xc4>
 8012cc0:	eb06 050a 	add.w	r5, r6, sl
 8012cc4:	462a      	mov	r2, r5
 8012cc6:	4616      	mov	r6, r2
 8012cc8:	3201      	adds	r2, #1
 8012cca:	7830      	ldrb	r0, [r6, #0]
 8012ccc:	f7ff ff8a 	bl	8012be4 <__hexdig_fun>
 8012cd0:	2800      	cmp	r0, #0
 8012cd2:	d1f8      	bne.n	8012cc6 <__gethex+0xb6>
 8012cd4:	1bad      	subs	r5, r5, r6
 8012cd6:	00ad      	lsls	r5, r5, #2
 8012cd8:	e004      	b.n	8012ce4 <__gethex+0xd4>
 8012cda:	2400      	movs	r4, #0
 8012cdc:	4625      	mov	r5, r4
 8012cde:	e7e0      	b.n	8012ca2 <__gethex+0x92>
 8012ce0:	2d00      	cmp	r5, #0
 8012ce2:	d1f7      	bne.n	8012cd4 <__gethex+0xc4>
 8012ce4:	7833      	ldrb	r3, [r6, #0]
 8012ce6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012cea:	2b50      	cmp	r3, #80	; 0x50
 8012cec:	d13b      	bne.n	8012d66 <__gethex+0x156>
 8012cee:	7873      	ldrb	r3, [r6, #1]
 8012cf0:	2b2b      	cmp	r3, #43	; 0x2b
 8012cf2:	d02c      	beq.n	8012d4e <__gethex+0x13e>
 8012cf4:	2b2d      	cmp	r3, #45	; 0x2d
 8012cf6:	d02e      	beq.n	8012d56 <__gethex+0x146>
 8012cf8:	1c71      	adds	r1, r6, #1
 8012cfa:	f04f 0900 	mov.w	r9, #0
 8012cfe:	7808      	ldrb	r0, [r1, #0]
 8012d00:	f7ff ff70 	bl	8012be4 <__hexdig_fun>
 8012d04:	1e43      	subs	r3, r0, #1
 8012d06:	b2db      	uxtb	r3, r3
 8012d08:	2b18      	cmp	r3, #24
 8012d0a:	d82c      	bhi.n	8012d66 <__gethex+0x156>
 8012d0c:	f1a0 0210 	sub.w	r2, r0, #16
 8012d10:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012d14:	f7ff ff66 	bl	8012be4 <__hexdig_fun>
 8012d18:	1e43      	subs	r3, r0, #1
 8012d1a:	b2db      	uxtb	r3, r3
 8012d1c:	2b18      	cmp	r3, #24
 8012d1e:	d91d      	bls.n	8012d5c <__gethex+0x14c>
 8012d20:	f1b9 0f00 	cmp.w	r9, #0
 8012d24:	d000      	beq.n	8012d28 <__gethex+0x118>
 8012d26:	4252      	negs	r2, r2
 8012d28:	4415      	add	r5, r2
 8012d2a:	f8cb 1000 	str.w	r1, [fp]
 8012d2e:	b1e4      	cbz	r4, 8012d6a <__gethex+0x15a>
 8012d30:	9b00      	ldr	r3, [sp, #0]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	bf14      	ite	ne
 8012d36:	2700      	movne	r7, #0
 8012d38:	2706      	moveq	r7, #6
 8012d3a:	4638      	mov	r0, r7
 8012d3c:	b009      	add	sp, #36	; 0x24
 8012d3e:	ecbd 8b02 	vpop	{d8}
 8012d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d46:	463e      	mov	r6, r7
 8012d48:	4625      	mov	r5, r4
 8012d4a:	2401      	movs	r4, #1
 8012d4c:	e7ca      	b.n	8012ce4 <__gethex+0xd4>
 8012d4e:	f04f 0900 	mov.w	r9, #0
 8012d52:	1cb1      	adds	r1, r6, #2
 8012d54:	e7d3      	b.n	8012cfe <__gethex+0xee>
 8012d56:	f04f 0901 	mov.w	r9, #1
 8012d5a:	e7fa      	b.n	8012d52 <__gethex+0x142>
 8012d5c:	230a      	movs	r3, #10
 8012d5e:	fb03 0202 	mla	r2, r3, r2, r0
 8012d62:	3a10      	subs	r2, #16
 8012d64:	e7d4      	b.n	8012d10 <__gethex+0x100>
 8012d66:	4631      	mov	r1, r6
 8012d68:	e7df      	b.n	8012d2a <__gethex+0x11a>
 8012d6a:	1bf3      	subs	r3, r6, r7
 8012d6c:	3b01      	subs	r3, #1
 8012d6e:	4621      	mov	r1, r4
 8012d70:	2b07      	cmp	r3, #7
 8012d72:	dc0b      	bgt.n	8012d8c <__gethex+0x17c>
 8012d74:	ee18 0a10 	vmov	r0, s16
 8012d78:	f000 fa86 	bl	8013288 <_Balloc>
 8012d7c:	4604      	mov	r4, r0
 8012d7e:	b940      	cbnz	r0, 8012d92 <__gethex+0x182>
 8012d80:	4b65      	ldr	r3, [pc, #404]	; (8012f18 <__gethex+0x308>)
 8012d82:	4602      	mov	r2, r0
 8012d84:	21de      	movs	r1, #222	; 0xde
 8012d86:	4865      	ldr	r0, [pc, #404]	; (8012f1c <__gethex+0x30c>)
 8012d88:	f001 fcde 	bl	8014748 <__assert_func>
 8012d8c:	3101      	adds	r1, #1
 8012d8e:	105b      	asrs	r3, r3, #1
 8012d90:	e7ee      	b.n	8012d70 <__gethex+0x160>
 8012d92:	f100 0914 	add.w	r9, r0, #20
 8012d96:	f04f 0b00 	mov.w	fp, #0
 8012d9a:	f1ca 0301 	rsb	r3, sl, #1
 8012d9e:	f8cd 9008 	str.w	r9, [sp, #8]
 8012da2:	f8cd b000 	str.w	fp, [sp]
 8012da6:	9306      	str	r3, [sp, #24]
 8012da8:	42b7      	cmp	r7, r6
 8012daa:	d340      	bcc.n	8012e2e <__gethex+0x21e>
 8012dac:	9802      	ldr	r0, [sp, #8]
 8012dae:	9b00      	ldr	r3, [sp, #0]
 8012db0:	f840 3b04 	str.w	r3, [r0], #4
 8012db4:	eba0 0009 	sub.w	r0, r0, r9
 8012db8:	1080      	asrs	r0, r0, #2
 8012dba:	0146      	lsls	r6, r0, #5
 8012dbc:	6120      	str	r0, [r4, #16]
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	f000 fb58 	bl	8013474 <__hi0bits>
 8012dc4:	1a30      	subs	r0, r6, r0
 8012dc6:	f8d8 6000 	ldr.w	r6, [r8]
 8012dca:	42b0      	cmp	r0, r6
 8012dcc:	dd63      	ble.n	8012e96 <__gethex+0x286>
 8012dce:	1b87      	subs	r7, r0, r6
 8012dd0:	4639      	mov	r1, r7
 8012dd2:	4620      	mov	r0, r4
 8012dd4:	f000 fef2 	bl	8013bbc <__any_on>
 8012dd8:	4682      	mov	sl, r0
 8012dda:	b1a8      	cbz	r0, 8012e08 <__gethex+0x1f8>
 8012ddc:	1e7b      	subs	r3, r7, #1
 8012dde:	1159      	asrs	r1, r3, #5
 8012de0:	f003 021f 	and.w	r2, r3, #31
 8012de4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012de8:	f04f 0a01 	mov.w	sl, #1
 8012dec:	fa0a f202 	lsl.w	r2, sl, r2
 8012df0:	420a      	tst	r2, r1
 8012df2:	d009      	beq.n	8012e08 <__gethex+0x1f8>
 8012df4:	4553      	cmp	r3, sl
 8012df6:	dd05      	ble.n	8012e04 <__gethex+0x1f4>
 8012df8:	1eb9      	subs	r1, r7, #2
 8012dfa:	4620      	mov	r0, r4
 8012dfc:	f000 fede 	bl	8013bbc <__any_on>
 8012e00:	2800      	cmp	r0, #0
 8012e02:	d145      	bne.n	8012e90 <__gethex+0x280>
 8012e04:	f04f 0a02 	mov.w	sl, #2
 8012e08:	4639      	mov	r1, r7
 8012e0a:	4620      	mov	r0, r4
 8012e0c:	f7ff fe98 	bl	8012b40 <rshift>
 8012e10:	443d      	add	r5, r7
 8012e12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012e16:	42ab      	cmp	r3, r5
 8012e18:	da4c      	bge.n	8012eb4 <__gethex+0x2a4>
 8012e1a:	ee18 0a10 	vmov	r0, s16
 8012e1e:	4621      	mov	r1, r4
 8012e20:	f000 fa72 	bl	8013308 <_Bfree>
 8012e24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012e26:	2300      	movs	r3, #0
 8012e28:	6013      	str	r3, [r2, #0]
 8012e2a:	27a3      	movs	r7, #163	; 0xa3
 8012e2c:	e785      	b.n	8012d3a <__gethex+0x12a>
 8012e2e:	1e73      	subs	r3, r6, #1
 8012e30:	9a05      	ldr	r2, [sp, #20]
 8012e32:	9303      	str	r3, [sp, #12]
 8012e34:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012e38:	4293      	cmp	r3, r2
 8012e3a:	d019      	beq.n	8012e70 <__gethex+0x260>
 8012e3c:	f1bb 0f20 	cmp.w	fp, #32
 8012e40:	d107      	bne.n	8012e52 <__gethex+0x242>
 8012e42:	9b02      	ldr	r3, [sp, #8]
 8012e44:	9a00      	ldr	r2, [sp, #0]
 8012e46:	f843 2b04 	str.w	r2, [r3], #4
 8012e4a:	9302      	str	r3, [sp, #8]
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	9300      	str	r3, [sp, #0]
 8012e50:	469b      	mov	fp, r3
 8012e52:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012e56:	f7ff fec5 	bl	8012be4 <__hexdig_fun>
 8012e5a:	9b00      	ldr	r3, [sp, #0]
 8012e5c:	f000 000f 	and.w	r0, r0, #15
 8012e60:	fa00 f00b 	lsl.w	r0, r0, fp
 8012e64:	4303      	orrs	r3, r0
 8012e66:	9300      	str	r3, [sp, #0]
 8012e68:	f10b 0b04 	add.w	fp, fp, #4
 8012e6c:	9b03      	ldr	r3, [sp, #12]
 8012e6e:	e00d      	b.n	8012e8c <__gethex+0x27c>
 8012e70:	9b03      	ldr	r3, [sp, #12]
 8012e72:	9a06      	ldr	r2, [sp, #24]
 8012e74:	4413      	add	r3, r2
 8012e76:	42bb      	cmp	r3, r7
 8012e78:	d3e0      	bcc.n	8012e3c <__gethex+0x22c>
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	9901      	ldr	r1, [sp, #4]
 8012e7e:	9307      	str	r3, [sp, #28]
 8012e80:	4652      	mov	r2, sl
 8012e82:	f7fe f8fe 	bl	8011082 <strncmp>
 8012e86:	9b07      	ldr	r3, [sp, #28]
 8012e88:	2800      	cmp	r0, #0
 8012e8a:	d1d7      	bne.n	8012e3c <__gethex+0x22c>
 8012e8c:	461e      	mov	r6, r3
 8012e8e:	e78b      	b.n	8012da8 <__gethex+0x198>
 8012e90:	f04f 0a03 	mov.w	sl, #3
 8012e94:	e7b8      	b.n	8012e08 <__gethex+0x1f8>
 8012e96:	da0a      	bge.n	8012eae <__gethex+0x29e>
 8012e98:	1a37      	subs	r7, r6, r0
 8012e9a:	4621      	mov	r1, r4
 8012e9c:	ee18 0a10 	vmov	r0, s16
 8012ea0:	463a      	mov	r2, r7
 8012ea2:	f000 fc4d 	bl	8013740 <__lshift>
 8012ea6:	1bed      	subs	r5, r5, r7
 8012ea8:	4604      	mov	r4, r0
 8012eaa:	f100 0914 	add.w	r9, r0, #20
 8012eae:	f04f 0a00 	mov.w	sl, #0
 8012eb2:	e7ae      	b.n	8012e12 <__gethex+0x202>
 8012eb4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012eb8:	42a8      	cmp	r0, r5
 8012eba:	dd72      	ble.n	8012fa2 <__gethex+0x392>
 8012ebc:	1b45      	subs	r5, r0, r5
 8012ebe:	42ae      	cmp	r6, r5
 8012ec0:	dc36      	bgt.n	8012f30 <__gethex+0x320>
 8012ec2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012ec6:	2b02      	cmp	r3, #2
 8012ec8:	d02a      	beq.n	8012f20 <__gethex+0x310>
 8012eca:	2b03      	cmp	r3, #3
 8012ecc:	d02c      	beq.n	8012f28 <__gethex+0x318>
 8012ece:	2b01      	cmp	r3, #1
 8012ed0:	d115      	bne.n	8012efe <__gethex+0x2ee>
 8012ed2:	42ae      	cmp	r6, r5
 8012ed4:	d113      	bne.n	8012efe <__gethex+0x2ee>
 8012ed6:	2e01      	cmp	r6, #1
 8012ed8:	d10b      	bne.n	8012ef2 <__gethex+0x2e2>
 8012eda:	9a04      	ldr	r2, [sp, #16]
 8012edc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012ee0:	6013      	str	r3, [r2, #0]
 8012ee2:	2301      	movs	r3, #1
 8012ee4:	6123      	str	r3, [r4, #16]
 8012ee6:	f8c9 3000 	str.w	r3, [r9]
 8012eea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012eec:	2762      	movs	r7, #98	; 0x62
 8012eee:	601c      	str	r4, [r3, #0]
 8012ef0:	e723      	b.n	8012d3a <__gethex+0x12a>
 8012ef2:	1e71      	subs	r1, r6, #1
 8012ef4:	4620      	mov	r0, r4
 8012ef6:	f000 fe61 	bl	8013bbc <__any_on>
 8012efa:	2800      	cmp	r0, #0
 8012efc:	d1ed      	bne.n	8012eda <__gethex+0x2ca>
 8012efe:	ee18 0a10 	vmov	r0, s16
 8012f02:	4621      	mov	r1, r4
 8012f04:	f000 fa00 	bl	8013308 <_Bfree>
 8012f08:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	6013      	str	r3, [r2, #0]
 8012f0e:	2750      	movs	r7, #80	; 0x50
 8012f10:	e713      	b.n	8012d3a <__gethex+0x12a>
 8012f12:	bf00      	nop
 8012f14:	08016e00 	.word	0x08016e00
 8012f18:	08016d84 	.word	0x08016d84
 8012f1c:	08016d95 	.word	0x08016d95
 8012f20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d1eb      	bne.n	8012efe <__gethex+0x2ee>
 8012f26:	e7d8      	b.n	8012eda <__gethex+0x2ca>
 8012f28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d1d5      	bne.n	8012eda <__gethex+0x2ca>
 8012f2e:	e7e6      	b.n	8012efe <__gethex+0x2ee>
 8012f30:	1e6f      	subs	r7, r5, #1
 8012f32:	f1ba 0f00 	cmp.w	sl, #0
 8012f36:	d131      	bne.n	8012f9c <__gethex+0x38c>
 8012f38:	b127      	cbz	r7, 8012f44 <__gethex+0x334>
 8012f3a:	4639      	mov	r1, r7
 8012f3c:	4620      	mov	r0, r4
 8012f3e:	f000 fe3d 	bl	8013bbc <__any_on>
 8012f42:	4682      	mov	sl, r0
 8012f44:	117b      	asrs	r3, r7, #5
 8012f46:	2101      	movs	r1, #1
 8012f48:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8012f4c:	f007 071f 	and.w	r7, r7, #31
 8012f50:	fa01 f707 	lsl.w	r7, r1, r7
 8012f54:	421f      	tst	r7, r3
 8012f56:	4629      	mov	r1, r5
 8012f58:	4620      	mov	r0, r4
 8012f5a:	bf18      	it	ne
 8012f5c:	f04a 0a02 	orrne.w	sl, sl, #2
 8012f60:	1b76      	subs	r6, r6, r5
 8012f62:	f7ff fded 	bl	8012b40 <rshift>
 8012f66:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012f6a:	2702      	movs	r7, #2
 8012f6c:	f1ba 0f00 	cmp.w	sl, #0
 8012f70:	d048      	beq.n	8013004 <__gethex+0x3f4>
 8012f72:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012f76:	2b02      	cmp	r3, #2
 8012f78:	d015      	beq.n	8012fa6 <__gethex+0x396>
 8012f7a:	2b03      	cmp	r3, #3
 8012f7c:	d017      	beq.n	8012fae <__gethex+0x39e>
 8012f7e:	2b01      	cmp	r3, #1
 8012f80:	d109      	bne.n	8012f96 <__gethex+0x386>
 8012f82:	f01a 0f02 	tst.w	sl, #2
 8012f86:	d006      	beq.n	8012f96 <__gethex+0x386>
 8012f88:	f8d9 0000 	ldr.w	r0, [r9]
 8012f8c:	ea4a 0a00 	orr.w	sl, sl, r0
 8012f90:	f01a 0f01 	tst.w	sl, #1
 8012f94:	d10e      	bne.n	8012fb4 <__gethex+0x3a4>
 8012f96:	f047 0710 	orr.w	r7, r7, #16
 8012f9a:	e033      	b.n	8013004 <__gethex+0x3f4>
 8012f9c:	f04f 0a01 	mov.w	sl, #1
 8012fa0:	e7d0      	b.n	8012f44 <__gethex+0x334>
 8012fa2:	2701      	movs	r7, #1
 8012fa4:	e7e2      	b.n	8012f6c <__gethex+0x35c>
 8012fa6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012fa8:	f1c3 0301 	rsb	r3, r3, #1
 8012fac:	9315      	str	r3, [sp, #84]	; 0x54
 8012fae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d0f0      	beq.n	8012f96 <__gethex+0x386>
 8012fb4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012fb8:	f104 0314 	add.w	r3, r4, #20
 8012fbc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012fc0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012fc4:	f04f 0c00 	mov.w	ip, #0
 8012fc8:	4618      	mov	r0, r3
 8012fca:	f853 2b04 	ldr.w	r2, [r3], #4
 8012fce:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012fd2:	d01c      	beq.n	801300e <__gethex+0x3fe>
 8012fd4:	3201      	adds	r2, #1
 8012fd6:	6002      	str	r2, [r0, #0]
 8012fd8:	2f02      	cmp	r7, #2
 8012fda:	f104 0314 	add.w	r3, r4, #20
 8012fde:	d13f      	bne.n	8013060 <__gethex+0x450>
 8012fe0:	f8d8 2000 	ldr.w	r2, [r8]
 8012fe4:	3a01      	subs	r2, #1
 8012fe6:	42b2      	cmp	r2, r6
 8012fe8:	d10a      	bne.n	8013000 <__gethex+0x3f0>
 8012fea:	1171      	asrs	r1, r6, #5
 8012fec:	2201      	movs	r2, #1
 8012fee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012ff2:	f006 061f 	and.w	r6, r6, #31
 8012ff6:	fa02 f606 	lsl.w	r6, r2, r6
 8012ffa:	421e      	tst	r6, r3
 8012ffc:	bf18      	it	ne
 8012ffe:	4617      	movne	r7, r2
 8013000:	f047 0720 	orr.w	r7, r7, #32
 8013004:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013006:	601c      	str	r4, [r3, #0]
 8013008:	9b04      	ldr	r3, [sp, #16]
 801300a:	601d      	str	r5, [r3, #0]
 801300c:	e695      	b.n	8012d3a <__gethex+0x12a>
 801300e:	4299      	cmp	r1, r3
 8013010:	f843 cc04 	str.w	ip, [r3, #-4]
 8013014:	d8d8      	bhi.n	8012fc8 <__gethex+0x3b8>
 8013016:	68a3      	ldr	r3, [r4, #8]
 8013018:	459b      	cmp	fp, r3
 801301a:	db19      	blt.n	8013050 <__gethex+0x440>
 801301c:	6861      	ldr	r1, [r4, #4]
 801301e:	ee18 0a10 	vmov	r0, s16
 8013022:	3101      	adds	r1, #1
 8013024:	f000 f930 	bl	8013288 <_Balloc>
 8013028:	4681      	mov	r9, r0
 801302a:	b918      	cbnz	r0, 8013034 <__gethex+0x424>
 801302c:	4b1a      	ldr	r3, [pc, #104]	; (8013098 <__gethex+0x488>)
 801302e:	4602      	mov	r2, r0
 8013030:	2184      	movs	r1, #132	; 0x84
 8013032:	e6a8      	b.n	8012d86 <__gethex+0x176>
 8013034:	6922      	ldr	r2, [r4, #16]
 8013036:	3202      	adds	r2, #2
 8013038:	f104 010c 	add.w	r1, r4, #12
 801303c:	0092      	lsls	r2, r2, #2
 801303e:	300c      	adds	r0, #12
 8013040:	f7fc ffe0 	bl	8010004 <memcpy>
 8013044:	4621      	mov	r1, r4
 8013046:	ee18 0a10 	vmov	r0, s16
 801304a:	f000 f95d 	bl	8013308 <_Bfree>
 801304e:	464c      	mov	r4, r9
 8013050:	6923      	ldr	r3, [r4, #16]
 8013052:	1c5a      	adds	r2, r3, #1
 8013054:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013058:	6122      	str	r2, [r4, #16]
 801305a:	2201      	movs	r2, #1
 801305c:	615a      	str	r2, [r3, #20]
 801305e:	e7bb      	b.n	8012fd8 <__gethex+0x3c8>
 8013060:	6922      	ldr	r2, [r4, #16]
 8013062:	455a      	cmp	r2, fp
 8013064:	dd0b      	ble.n	801307e <__gethex+0x46e>
 8013066:	2101      	movs	r1, #1
 8013068:	4620      	mov	r0, r4
 801306a:	f7ff fd69 	bl	8012b40 <rshift>
 801306e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013072:	3501      	adds	r5, #1
 8013074:	42ab      	cmp	r3, r5
 8013076:	f6ff aed0 	blt.w	8012e1a <__gethex+0x20a>
 801307a:	2701      	movs	r7, #1
 801307c:	e7c0      	b.n	8013000 <__gethex+0x3f0>
 801307e:	f016 061f 	ands.w	r6, r6, #31
 8013082:	d0fa      	beq.n	801307a <__gethex+0x46a>
 8013084:	449a      	add	sl, r3
 8013086:	f1c6 0620 	rsb	r6, r6, #32
 801308a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801308e:	f000 f9f1 	bl	8013474 <__hi0bits>
 8013092:	42b0      	cmp	r0, r6
 8013094:	dbe7      	blt.n	8013066 <__gethex+0x456>
 8013096:	e7f0      	b.n	801307a <__gethex+0x46a>
 8013098:	08016d84 	.word	0x08016d84

0801309c <L_shift>:
 801309c:	f1c2 0208 	rsb	r2, r2, #8
 80130a0:	0092      	lsls	r2, r2, #2
 80130a2:	b570      	push	{r4, r5, r6, lr}
 80130a4:	f1c2 0620 	rsb	r6, r2, #32
 80130a8:	6843      	ldr	r3, [r0, #4]
 80130aa:	6804      	ldr	r4, [r0, #0]
 80130ac:	fa03 f506 	lsl.w	r5, r3, r6
 80130b0:	432c      	orrs	r4, r5
 80130b2:	40d3      	lsrs	r3, r2
 80130b4:	6004      	str	r4, [r0, #0]
 80130b6:	f840 3f04 	str.w	r3, [r0, #4]!
 80130ba:	4288      	cmp	r0, r1
 80130bc:	d3f4      	bcc.n	80130a8 <L_shift+0xc>
 80130be:	bd70      	pop	{r4, r5, r6, pc}

080130c0 <__match>:
 80130c0:	b530      	push	{r4, r5, lr}
 80130c2:	6803      	ldr	r3, [r0, #0]
 80130c4:	3301      	adds	r3, #1
 80130c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80130ca:	b914      	cbnz	r4, 80130d2 <__match+0x12>
 80130cc:	6003      	str	r3, [r0, #0]
 80130ce:	2001      	movs	r0, #1
 80130d0:	bd30      	pop	{r4, r5, pc}
 80130d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80130d6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80130da:	2d19      	cmp	r5, #25
 80130dc:	bf98      	it	ls
 80130de:	3220      	addls	r2, #32
 80130e0:	42a2      	cmp	r2, r4
 80130e2:	d0f0      	beq.n	80130c6 <__match+0x6>
 80130e4:	2000      	movs	r0, #0
 80130e6:	e7f3      	b.n	80130d0 <__match+0x10>

080130e8 <__hexnan>:
 80130e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130ec:	680b      	ldr	r3, [r1, #0]
 80130ee:	6801      	ldr	r1, [r0, #0]
 80130f0:	115e      	asrs	r6, r3, #5
 80130f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80130f6:	f013 031f 	ands.w	r3, r3, #31
 80130fa:	b087      	sub	sp, #28
 80130fc:	bf18      	it	ne
 80130fe:	3604      	addne	r6, #4
 8013100:	2500      	movs	r5, #0
 8013102:	1f37      	subs	r7, r6, #4
 8013104:	4682      	mov	sl, r0
 8013106:	4690      	mov	r8, r2
 8013108:	9301      	str	r3, [sp, #4]
 801310a:	f846 5c04 	str.w	r5, [r6, #-4]
 801310e:	46b9      	mov	r9, r7
 8013110:	463c      	mov	r4, r7
 8013112:	9502      	str	r5, [sp, #8]
 8013114:	46ab      	mov	fp, r5
 8013116:	784a      	ldrb	r2, [r1, #1]
 8013118:	1c4b      	adds	r3, r1, #1
 801311a:	9303      	str	r3, [sp, #12]
 801311c:	b342      	cbz	r2, 8013170 <__hexnan+0x88>
 801311e:	4610      	mov	r0, r2
 8013120:	9105      	str	r1, [sp, #20]
 8013122:	9204      	str	r2, [sp, #16]
 8013124:	f7ff fd5e 	bl	8012be4 <__hexdig_fun>
 8013128:	2800      	cmp	r0, #0
 801312a:	d14f      	bne.n	80131cc <__hexnan+0xe4>
 801312c:	9a04      	ldr	r2, [sp, #16]
 801312e:	9905      	ldr	r1, [sp, #20]
 8013130:	2a20      	cmp	r2, #32
 8013132:	d818      	bhi.n	8013166 <__hexnan+0x7e>
 8013134:	9b02      	ldr	r3, [sp, #8]
 8013136:	459b      	cmp	fp, r3
 8013138:	dd13      	ble.n	8013162 <__hexnan+0x7a>
 801313a:	454c      	cmp	r4, r9
 801313c:	d206      	bcs.n	801314c <__hexnan+0x64>
 801313e:	2d07      	cmp	r5, #7
 8013140:	dc04      	bgt.n	801314c <__hexnan+0x64>
 8013142:	462a      	mov	r2, r5
 8013144:	4649      	mov	r1, r9
 8013146:	4620      	mov	r0, r4
 8013148:	f7ff ffa8 	bl	801309c <L_shift>
 801314c:	4544      	cmp	r4, r8
 801314e:	d950      	bls.n	80131f2 <__hexnan+0x10a>
 8013150:	2300      	movs	r3, #0
 8013152:	f1a4 0904 	sub.w	r9, r4, #4
 8013156:	f844 3c04 	str.w	r3, [r4, #-4]
 801315a:	f8cd b008 	str.w	fp, [sp, #8]
 801315e:	464c      	mov	r4, r9
 8013160:	461d      	mov	r5, r3
 8013162:	9903      	ldr	r1, [sp, #12]
 8013164:	e7d7      	b.n	8013116 <__hexnan+0x2e>
 8013166:	2a29      	cmp	r2, #41	; 0x29
 8013168:	d156      	bne.n	8013218 <__hexnan+0x130>
 801316a:	3102      	adds	r1, #2
 801316c:	f8ca 1000 	str.w	r1, [sl]
 8013170:	f1bb 0f00 	cmp.w	fp, #0
 8013174:	d050      	beq.n	8013218 <__hexnan+0x130>
 8013176:	454c      	cmp	r4, r9
 8013178:	d206      	bcs.n	8013188 <__hexnan+0xa0>
 801317a:	2d07      	cmp	r5, #7
 801317c:	dc04      	bgt.n	8013188 <__hexnan+0xa0>
 801317e:	462a      	mov	r2, r5
 8013180:	4649      	mov	r1, r9
 8013182:	4620      	mov	r0, r4
 8013184:	f7ff ff8a 	bl	801309c <L_shift>
 8013188:	4544      	cmp	r4, r8
 801318a:	d934      	bls.n	80131f6 <__hexnan+0x10e>
 801318c:	f1a8 0204 	sub.w	r2, r8, #4
 8013190:	4623      	mov	r3, r4
 8013192:	f853 1b04 	ldr.w	r1, [r3], #4
 8013196:	f842 1f04 	str.w	r1, [r2, #4]!
 801319a:	429f      	cmp	r7, r3
 801319c:	d2f9      	bcs.n	8013192 <__hexnan+0xaa>
 801319e:	1b3b      	subs	r3, r7, r4
 80131a0:	f023 0303 	bic.w	r3, r3, #3
 80131a4:	3304      	adds	r3, #4
 80131a6:	3401      	adds	r4, #1
 80131a8:	3e03      	subs	r6, #3
 80131aa:	42b4      	cmp	r4, r6
 80131ac:	bf88      	it	hi
 80131ae:	2304      	movhi	r3, #4
 80131b0:	4443      	add	r3, r8
 80131b2:	2200      	movs	r2, #0
 80131b4:	f843 2b04 	str.w	r2, [r3], #4
 80131b8:	429f      	cmp	r7, r3
 80131ba:	d2fb      	bcs.n	80131b4 <__hexnan+0xcc>
 80131bc:	683b      	ldr	r3, [r7, #0]
 80131be:	b91b      	cbnz	r3, 80131c8 <__hexnan+0xe0>
 80131c0:	4547      	cmp	r7, r8
 80131c2:	d127      	bne.n	8013214 <__hexnan+0x12c>
 80131c4:	2301      	movs	r3, #1
 80131c6:	603b      	str	r3, [r7, #0]
 80131c8:	2005      	movs	r0, #5
 80131ca:	e026      	b.n	801321a <__hexnan+0x132>
 80131cc:	3501      	adds	r5, #1
 80131ce:	2d08      	cmp	r5, #8
 80131d0:	f10b 0b01 	add.w	fp, fp, #1
 80131d4:	dd06      	ble.n	80131e4 <__hexnan+0xfc>
 80131d6:	4544      	cmp	r4, r8
 80131d8:	d9c3      	bls.n	8013162 <__hexnan+0x7a>
 80131da:	2300      	movs	r3, #0
 80131dc:	f844 3c04 	str.w	r3, [r4, #-4]
 80131e0:	2501      	movs	r5, #1
 80131e2:	3c04      	subs	r4, #4
 80131e4:	6822      	ldr	r2, [r4, #0]
 80131e6:	f000 000f 	and.w	r0, r0, #15
 80131ea:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80131ee:	6022      	str	r2, [r4, #0]
 80131f0:	e7b7      	b.n	8013162 <__hexnan+0x7a>
 80131f2:	2508      	movs	r5, #8
 80131f4:	e7b5      	b.n	8013162 <__hexnan+0x7a>
 80131f6:	9b01      	ldr	r3, [sp, #4]
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d0df      	beq.n	80131bc <__hexnan+0xd4>
 80131fc:	f04f 32ff 	mov.w	r2, #4294967295
 8013200:	f1c3 0320 	rsb	r3, r3, #32
 8013204:	fa22 f303 	lsr.w	r3, r2, r3
 8013208:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801320c:	401a      	ands	r2, r3
 801320e:	f846 2c04 	str.w	r2, [r6, #-4]
 8013212:	e7d3      	b.n	80131bc <__hexnan+0xd4>
 8013214:	3f04      	subs	r7, #4
 8013216:	e7d1      	b.n	80131bc <__hexnan+0xd4>
 8013218:	2004      	movs	r0, #4
 801321a:	b007      	add	sp, #28
 801321c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013220 <_localeconv_r>:
 8013220:	4800      	ldr	r0, [pc, #0]	; (8013224 <_localeconv_r+0x4>)
 8013222:	4770      	bx	lr
 8013224:	20000194 	.word	0x20000194

08013228 <_lseek_r>:
 8013228:	b538      	push	{r3, r4, r5, lr}
 801322a:	4d07      	ldr	r5, [pc, #28]	; (8013248 <_lseek_r+0x20>)
 801322c:	4604      	mov	r4, r0
 801322e:	4608      	mov	r0, r1
 8013230:	4611      	mov	r1, r2
 8013232:	2200      	movs	r2, #0
 8013234:	602a      	str	r2, [r5, #0]
 8013236:	461a      	mov	r2, r3
 8013238:	f7ef fdc2 	bl	8002dc0 <_lseek>
 801323c:	1c43      	adds	r3, r0, #1
 801323e:	d102      	bne.n	8013246 <_lseek_r+0x1e>
 8013240:	682b      	ldr	r3, [r5, #0]
 8013242:	b103      	cbz	r3, 8013246 <_lseek_r+0x1e>
 8013244:	6023      	str	r3, [r4, #0]
 8013246:	bd38      	pop	{r3, r4, r5, pc}
 8013248:	20005b18 	.word	0x20005b18

0801324c <__ascii_mbtowc>:
 801324c:	b082      	sub	sp, #8
 801324e:	b901      	cbnz	r1, 8013252 <__ascii_mbtowc+0x6>
 8013250:	a901      	add	r1, sp, #4
 8013252:	b142      	cbz	r2, 8013266 <__ascii_mbtowc+0x1a>
 8013254:	b14b      	cbz	r3, 801326a <__ascii_mbtowc+0x1e>
 8013256:	7813      	ldrb	r3, [r2, #0]
 8013258:	600b      	str	r3, [r1, #0]
 801325a:	7812      	ldrb	r2, [r2, #0]
 801325c:	1e10      	subs	r0, r2, #0
 801325e:	bf18      	it	ne
 8013260:	2001      	movne	r0, #1
 8013262:	b002      	add	sp, #8
 8013264:	4770      	bx	lr
 8013266:	4610      	mov	r0, r2
 8013268:	e7fb      	b.n	8013262 <__ascii_mbtowc+0x16>
 801326a:	f06f 0001 	mvn.w	r0, #1
 801326e:	e7f8      	b.n	8013262 <__ascii_mbtowc+0x16>

08013270 <__malloc_lock>:
 8013270:	4801      	ldr	r0, [pc, #4]	; (8013278 <__malloc_lock+0x8>)
 8013272:	f001 bc51 	b.w	8014b18 <__retarget_lock_acquire_recursive>
 8013276:	bf00      	nop
 8013278:	20005b20 	.word	0x20005b20

0801327c <__malloc_unlock>:
 801327c:	4801      	ldr	r0, [pc, #4]	; (8013284 <__malloc_unlock+0x8>)
 801327e:	f001 bc4c 	b.w	8014b1a <__retarget_lock_release_recursive>
 8013282:	bf00      	nop
 8013284:	20005b20 	.word	0x20005b20

08013288 <_Balloc>:
 8013288:	b570      	push	{r4, r5, r6, lr}
 801328a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801328c:	4604      	mov	r4, r0
 801328e:	460d      	mov	r5, r1
 8013290:	b976      	cbnz	r6, 80132b0 <_Balloc+0x28>
 8013292:	2010      	movs	r0, #16
 8013294:	f7fc fea6 	bl	800ffe4 <malloc>
 8013298:	4602      	mov	r2, r0
 801329a:	6260      	str	r0, [r4, #36]	; 0x24
 801329c:	b920      	cbnz	r0, 80132a8 <_Balloc+0x20>
 801329e:	4b18      	ldr	r3, [pc, #96]	; (8013300 <_Balloc+0x78>)
 80132a0:	4818      	ldr	r0, [pc, #96]	; (8013304 <_Balloc+0x7c>)
 80132a2:	2166      	movs	r1, #102	; 0x66
 80132a4:	f001 fa50 	bl	8014748 <__assert_func>
 80132a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80132ac:	6006      	str	r6, [r0, #0]
 80132ae:	60c6      	str	r6, [r0, #12]
 80132b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80132b2:	68f3      	ldr	r3, [r6, #12]
 80132b4:	b183      	cbz	r3, 80132d8 <_Balloc+0x50>
 80132b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80132b8:	68db      	ldr	r3, [r3, #12]
 80132ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80132be:	b9b8      	cbnz	r0, 80132f0 <_Balloc+0x68>
 80132c0:	2101      	movs	r1, #1
 80132c2:	fa01 f605 	lsl.w	r6, r1, r5
 80132c6:	1d72      	adds	r2, r6, #5
 80132c8:	0092      	lsls	r2, r2, #2
 80132ca:	4620      	mov	r0, r4
 80132cc:	f000 fc97 	bl	8013bfe <_calloc_r>
 80132d0:	b160      	cbz	r0, 80132ec <_Balloc+0x64>
 80132d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80132d6:	e00e      	b.n	80132f6 <_Balloc+0x6e>
 80132d8:	2221      	movs	r2, #33	; 0x21
 80132da:	2104      	movs	r1, #4
 80132dc:	4620      	mov	r0, r4
 80132de:	f000 fc8e 	bl	8013bfe <_calloc_r>
 80132e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80132e4:	60f0      	str	r0, [r6, #12]
 80132e6:	68db      	ldr	r3, [r3, #12]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d1e4      	bne.n	80132b6 <_Balloc+0x2e>
 80132ec:	2000      	movs	r0, #0
 80132ee:	bd70      	pop	{r4, r5, r6, pc}
 80132f0:	6802      	ldr	r2, [r0, #0]
 80132f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80132f6:	2300      	movs	r3, #0
 80132f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80132fc:	e7f7      	b.n	80132ee <_Balloc+0x66>
 80132fe:	bf00      	nop
 8013300:	08016d0e 	.word	0x08016d0e
 8013304:	08016e14 	.word	0x08016e14

08013308 <_Bfree>:
 8013308:	b570      	push	{r4, r5, r6, lr}
 801330a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801330c:	4605      	mov	r5, r0
 801330e:	460c      	mov	r4, r1
 8013310:	b976      	cbnz	r6, 8013330 <_Bfree+0x28>
 8013312:	2010      	movs	r0, #16
 8013314:	f7fc fe66 	bl	800ffe4 <malloc>
 8013318:	4602      	mov	r2, r0
 801331a:	6268      	str	r0, [r5, #36]	; 0x24
 801331c:	b920      	cbnz	r0, 8013328 <_Bfree+0x20>
 801331e:	4b09      	ldr	r3, [pc, #36]	; (8013344 <_Bfree+0x3c>)
 8013320:	4809      	ldr	r0, [pc, #36]	; (8013348 <_Bfree+0x40>)
 8013322:	218a      	movs	r1, #138	; 0x8a
 8013324:	f001 fa10 	bl	8014748 <__assert_func>
 8013328:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801332c:	6006      	str	r6, [r0, #0]
 801332e:	60c6      	str	r6, [r0, #12]
 8013330:	b13c      	cbz	r4, 8013342 <_Bfree+0x3a>
 8013332:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013334:	6862      	ldr	r2, [r4, #4]
 8013336:	68db      	ldr	r3, [r3, #12]
 8013338:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801333c:	6021      	str	r1, [r4, #0]
 801333e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013342:	bd70      	pop	{r4, r5, r6, pc}
 8013344:	08016d0e 	.word	0x08016d0e
 8013348:	08016e14 	.word	0x08016e14

0801334c <__multadd>:
 801334c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013350:	690e      	ldr	r6, [r1, #16]
 8013352:	4607      	mov	r7, r0
 8013354:	4698      	mov	r8, r3
 8013356:	460c      	mov	r4, r1
 8013358:	f101 0014 	add.w	r0, r1, #20
 801335c:	2300      	movs	r3, #0
 801335e:	6805      	ldr	r5, [r0, #0]
 8013360:	b2a9      	uxth	r1, r5
 8013362:	fb02 8101 	mla	r1, r2, r1, r8
 8013366:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801336a:	0c2d      	lsrs	r5, r5, #16
 801336c:	fb02 c505 	mla	r5, r2, r5, ip
 8013370:	b289      	uxth	r1, r1
 8013372:	3301      	adds	r3, #1
 8013374:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8013378:	429e      	cmp	r6, r3
 801337a:	f840 1b04 	str.w	r1, [r0], #4
 801337e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8013382:	dcec      	bgt.n	801335e <__multadd+0x12>
 8013384:	f1b8 0f00 	cmp.w	r8, #0
 8013388:	d022      	beq.n	80133d0 <__multadd+0x84>
 801338a:	68a3      	ldr	r3, [r4, #8]
 801338c:	42b3      	cmp	r3, r6
 801338e:	dc19      	bgt.n	80133c4 <__multadd+0x78>
 8013390:	6861      	ldr	r1, [r4, #4]
 8013392:	4638      	mov	r0, r7
 8013394:	3101      	adds	r1, #1
 8013396:	f7ff ff77 	bl	8013288 <_Balloc>
 801339a:	4605      	mov	r5, r0
 801339c:	b928      	cbnz	r0, 80133aa <__multadd+0x5e>
 801339e:	4602      	mov	r2, r0
 80133a0:	4b0d      	ldr	r3, [pc, #52]	; (80133d8 <__multadd+0x8c>)
 80133a2:	480e      	ldr	r0, [pc, #56]	; (80133dc <__multadd+0x90>)
 80133a4:	21b5      	movs	r1, #181	; 0xb5
 80133a6:	f001 f9cf 	bl	8014748 <__assert_func>
 80133aa:	6922      	ldr	r2, [r4, #16]
 80133ac:	3202      	adds	r2, #2
 80133ae:	f104 010c 	add.w	r1, r4, #12
 80133b2:	0092      	lsls	r2, r2, #2
 80133b4:	300c      	adds	r0, #12
 80133b6:	f7fc fe25 	bl	8010004 <memcpy>
 80133ba:	4621      	mov	r1, r4
 80133bc:	4638      	mov	r0, r7
 80133be:	f7ff ffa3 	bl	8013308 <_Bfree>
 80133c2:	462c      	mov	r4, r5
 80133c4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80133c8:	3601      	adds	r6, #1
 80133ca:	f8c3 8014 	str.w	r8, [r3, #20]
 80133ce:	6126      	str	r6, [r4, #16]
 80133d0:	4620      	mov	r0, r4
 80133d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133d6:	bf00      	nop
 80133d8:	08016d84 	.word	0x08016d84
 80133dc:	08016e14 	.word	0x08016e14

080133e0 <__s2b>:
 80133e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80133e4:	460c      	mov	r4, r1
 80133e6:	4615      	mov	r5, r2
 80133e8:	461f      	mov	r7, r3
 80133ea:	2209      	movs	r2, #9
 80133ec:	3308      	adds	r3, #8
 80133ee:	4606      	mov	r6, r0
 80133f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80133f4:	2100      	movs	r1, #0
 80133f6:	2201      	movs	r2, #1
 80133f8:	429a      	cmp	r2, r3
 80133fa:	db09      	blt.n	8013410 <__s2b+0x30>
 80133fc:	4630      	mov	r0, r6
 80133fe:	f7ff ff43 	bl	8013288 <_Balloc>
 8013402:	b940      	cbnz	r0, 8013416 <__s2b+0x36>
 8013404:	4602      	mov	r2, r0
 8013406:	4b19      	ldr	r3, [pc, #100]	; (801346c <__s2b+0x8c>)
 8013408:	4819      	ldr	r0, [pc, #100]	; (8013470 <__s2b+0x90>)
 801340a:	21ce      	movs	r1, #206	; 0xce
 801340c:	f001 f99c 	bl	8014748 <__assert_func>
 8013410:	0052      	lsls	r2, r2, #1
 8013412:	3101      	adds	r1, #1
 8013414:	e7f0      	b.n	80133f8 <__s2b+0x18>
 8013416:	9b08      	ldr	r3, [sp, #32]
 8013418:	6143      	str	r3, [r0, #20]
 801341a:	2d09      	cmp	r5, #9
 801341c:	f04f 0301 	mov.w	r3, #1
 8013420:	6103      	str	r3, [r0, #16]
 8013422:	dd16      	ble.n	8013452 <__s2b+0x72>
 8013424:	f104 0909 	add.w	r9, r4, #9
 8013428:	46c8      	mov	r8, r9
 801342a:	442c      	add	r4, r5
 801342c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013430:	4601      	mov	r1, r0
 8013432:	3b30      	subs	r3, #48	; 0x30
 8013434:	220a      	movs	r2, #10
 8013436:	4630      	mov	r0, r6
 8013438:	f7ff ff88 	bl	801334c <__multadd>
 801343c:	45a0      	cmp	r8, r4
 801343e:	d1f5      	bne.n	801342c <__s2b+0x4c>
 8013440:	f1a5 0408 	sub.w	r4, r5, #8
 8013444:	444c      	add	r4, r9
 8013446:	1b2d      	subs	r5, r5, r4
 8013448:	1963      	adds	r3, r4, r5
 801344a:	42bb      	cmp	r3, r7
 801344c:	db04      	blt.n	8013458 <__s2b+0x78>
 801344e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013452:	340a      	adds	r4, #10
 8013454:	2509      	movs	r5, #9
 8013456:	e7f6      	b.n	8013446 <__s2b+0x66>
 8013458:	f814 3b01 	ldrb.w	r3, [r4], #1
 801345c:	4601      	mov	r1, r0
 801345e:	3b30      	subs	r3, #48	; 0x30
 8013460:	220a      	movs	r2, #10
 8013462:	4630      	mov	r0, r6
 8013464:	f7ff ff72 	bl	801334c <__multadd>
 8013468:	e7ee      	b.n	8013448 <__s2b+0x68>
 801346a:	bf00      	nop
 801346c:	08016d84 	.word	0x08016d84
 8013470:	08016e14 	.word	0x08016e14

08013474 <__hi0bits>:
 8013474:	0c03      	lsrs	r3, r0, #16
 8013476:	041b      	lsls	r3, r3, #16
 8013478:	b9d3      	cbnz	r3, 80134b0 <__hi0bits+0x3c>
 801347a:	0400      	lsls	r0, r0, #16
 801347c:	2310      	movs	r3, #16
 801347e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013482:	bf04      	itt	eq
 8013484:	0200      	lsleq	r0, r0, #8
 8013486:	3308      	addeq	r3, #8
 8013488:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801348c:	bf04      	itt	eq
 801348e:	0100      	lsleq	r0, r0, #4
 8013490:	3304      	addeq	r3, #4
 8013492:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013496:	bf04      	itt	eq
 8013498:	0080      	lsleq	r0, r0, #2
 801349a:	3302      	addeq	r3, #2
 801349c:	2800      	cmp	r0, #0
 801349e:	db05      	blt.n	80134ac <__hi0bits+0x38>
 80134a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80134a4:	f103 0301 	add.w	r3, r3, #1
 80134a8:	bf08      	it	eq
 80134aa:	2320      	moveq	r3, #32
 80134ac:	4618      	mov	r0, r3
 80134ae:	4770      	bx	lr
 80134b0:	2300      	movs	r3, #0
 80134b2:	e7e4      	b.n	801347e <__hi0bits+0xa>

080134b4 <__lo0bits>:
 80134b4:	6803      	ldr	r3, [r0, #0]
 80134b6:	f013 0207 	ands.w	r2, r3, #7
 80134ba:	4601      	mov	r1, r0
 80134bc:	d00b      	beq.n	80134d6 <__lo0bits+0x22>
 80134be:	07da      	lsls	r2, r3, #31
 80134c0:	d424      	bmi.n	801350c <__lo0bits+0x58>
 80134c2:	0798      	lsls	r0, r3, #30
 80134c4:	bf49      	itett	mi
 80134c6:	085b      	lsrmi	r3, r3, #1
 80134c8:	089b      	lsrpl	r3, r3, #2
 80134ca:	2001      	movmi	r0, #1
 80134cc:	600b      	strmi	r3, [r1, #0]
 80134ce:	bf5c      	itt	pl
 80134d0:	600b      	strpl	r3, [r1, #0]
 80134d2:	2002      	movpl	r0, #2
 80134d4:	4770      	bx	lr
 80134d6:	b298      	uxth	r0, r3
 80134d8:	b9b0      	cbnz	r0, 8013508 <__lo0bits+0x54>
 80134da:	0c1b      	lsrs	r3, r3, #16
 80134dc:	2010      	movs	r0, #16
 80134de:	f013 0fff 	tst.w	r3, #255	; 0xff
 80134e2:	bf04      	itt	eq
 80134e4:	0a1b      	lsreq	r3, r3, #8
 80134e6:	3008      	addeq	r0, #8
 80134e8:	071a      	lsls	r2, r3, #28
 80134ea:	bf04      	itt	eq
 80134ec:	091b      	lsreq	r3, r3, #4
 80134ee:	3004      	addeq	r0, #4
 80134f0:	079a      	lsls	r2, r3, #30
 80134f2:	bf04      	itt	eq
 80134f4:	089b      	lsreq	r3, r3, #2
 80134f6:	3002      	addeq	r0, #2
 80134f8:	07da      	lsls	r2, r3, #31
 80134fa:	d403      	bmi.n	8013504 <__lo0bits+0x50>
 80134fc:	085b      	lsrs	r3, r3, #1
 80134fe:	f100 0001 	add.w	r0, r0, #1
 8013502:	d005      	beq.n	8013510 <__lo0bits+0x5c>
 8013504:	600b      	str	r3, [r1, #0]
 8013506:	4770      	bx	lr
 8013508:	4610      	mov	r0, r2
 801350a:	e7e8      	b.n	80134de <__lo0bits+0x2a>
 801350c:	2000      	movs	r0, #0
 801350e:	4770      	bx	lr
 8013510:	2020      	movs	r0, #32
 8013512:	4770      	bx	lr

08013514 <__i2b>:
 8013514:	b510      	push	{r4, lr}
 8013516:	460c      	mov	r4, r1
 8013518:	2101      	movs	r1, #1
 801351a:	f7ff feb5 	bl	8013288 <_Balloc>
 801351e:	4602      	mov	r2, r0
 8013520:	b928      	cbnz	r0, 801352e <__i2b+0x1a>
 8013522:	4b05      	ldr	r3, [pc, #20]	; (8013538 <__i2b+0x24>)
 8013524:	4805      	ldr	r0, [pc, #20]	; (801353c <__i2b+0x28>)
 8013526:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801352a:	f001 f90d 	bl	8014748 <__assert_func>
 801352e:	2301      	movs	r3, #1
 8013530:	6144      	str	r4, [r0, #20]
 8013532:	6103      	str	r3, [r0, #16]
 8013534:	bd10      	pop	{r4, pc}
 8013536:	bf00      	nop
 8013538:	08016d84 	.word	0x08016d84
 801353c:	08016e14 	.word	0x08016e14

08013540 <__multiply>:
 8013540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013544:	4614      	mov	r4, r2
 8013546:	690a      	ldr	r2, [r1, #16]
 8013548:	6923      	ldr	r3, [r4, #16]
 801354a:	429a      	cmp	r2, r3
 801354c:	bfb8      	it	lt
 801354e:	460b      	movlt	r3, r1
 8013550:	460d      	mov	r5, r1
 8013552:	bfbc      	itt	lt
 8013554:	4625      	movlt	r5, r4
 8013556:	461c      	movlt	r4, r3
 8013558:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801355c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013560:	68ab      	ldr	r3, [r5, #8]
 8013562:	6869      	ldr	r1, [r5, #4]
 8013564:	eb0a 0709 	add.w	r7, sl, r9
 8013568:	42bb      	cmp	r3, r7
 801356a:	b085      	sub	sp, #20
 801356c:	bfb8      	it	lt
 801356e:	3101      	addlt	r1, #1
 8013570:	f7ff fe8a 	bl	8013288 <_Balloc>
 8013574:	b930      	cbnz	r0, 8013584 <__multiply+0x44>
 8013576:	4602      	mov	r2, r0
 8013578:	4b42      	ldr	r3, [pc, #264]	; (8013684 <__multiply+0x144>)
 801357a:	4843      	ldr	r0, [pc, #268]	; (8013688 <__multiply+0x148>)
 801357c:	f240 115d 	movw	r1, #349	; 0x15d
 8013580:	f001 f8e2 	bl	8014748 <__assert_func>
 8013584:	f100 0614 	add.w	r6, r0, #20
 8013588:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801358c:	4633      	mov	r3, r6
 801358e:	2200      	movs	r2, #0
 8013590:	4543      	cmp	r3, r8
 8013592:	d31e      	bcc.n	80135d2 <__multiply+0x92>
 8013594:	f105 0c14 	add.w	ip, r5, #20
 8013598:	f104 0314 	add.w	r3, r4, #20
 801359c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80135a0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80135a4:	9202      	str	r2, [sp, #8]
 80135a6:	ebac 0205 	sub.w	r2, ip, r5
 80135aa:	3a15      	subs	r2, #21
 80135ac:	f022 0203 	bic.w	r2, r2, #3
 80135b0:	3204      	adds	r2, #4
 80135b2:	f105 0115 	add.w	r1, r5, #21
 80135b6:	458c      	cmp	ip, r1
 80135b8:	bf38      	it	cc
 80135ba:	2204      	movcc	r2, #4
 80135bc:	9201      	str	r2, [sp, #4]
 80135be:	9a02      	ldr	r2, [sp, #8]
 80135c0:	9303      	str	r3, [sp, #12]
 80135c2:	429a      	cmp	r2, r3
 80135c4:	d808      	bhi.n	80135d8 <__multiply+0x98>
 80135c6:	2f00      	cmp	r7, #0
 80135c8:	dc55      	bgt.n	8013676 <__multiply+0x136>
 80135ca:	6107      	str	r7, [r0, #16]
 80135cc:	b005      	add	sp, #20
 80135ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135d2:	f843 2b04 	str.w	r2, [r3], #4
 80135d6:	e7db      	b.n	8013590 <__multiply+0x50>
 80135d8:	f8b3 a000 	ldrh.w	sl, [r3]
 80135dc:	f1ba 0f00 	cmp.w	sl, #0
 80135e0:	d020      	beq.n	8013624 <__multiply+0xe4>
 80135e2:	f105 0e14 	add.w	lr, r5, #20
 80135e6:	46b1      	mov	r9, r6
 80135e8:	2200      	movs	r2, #0
 80135ea:	f85e 4b04 	ldr.w	r4, [lr], #4
 80135ee:	f8d9 b000 	ldr.w	fp, [r9]
 80135f2:	b2a1      	uxth	r1, r4
 80135f4:	fa1f fb8b 	uxth.w	fp, fp
 80135f8:	fb0a b101 	mla	r1, sl, r1, fp
 80135fc:	4411      	add	r1, r2
 80135fe:	f8d9 2000 	ldr.w	r2, [r9]
 8013602:	0c24      	lsrs	r4, r4, #16
 8013604:	0c12      	lsrs	r2, r2, #16
 8013606:	fb0a 2404 	mla	r4, sl, r4, r2
 801360a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801360e:	b289      	uxth	r1, r1
 8013610:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013614:	45f4      	cmp	ip, lr
 8013616:	f849 1b04 	str.w	r1, [r9], #4
 801361a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801361e:	d8e4      	bhi.n	80135ea <__multiply+0xaa>
 8013620:	9901      	ldr	r1, [sp, #4]
 8013622:	5072      	str	r2, [r6, r1]
 8013624:	9a03      	ldr	r2, [sp, #12]
 8013626:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801362a:	3304      	adds	r3, #4
 801362c:	f1b9 0f00 	cmp.w	r9, #0
 8013630:	d01f      	beq.n	8013672 <__multiply+0x132>
 8013632:	6834      	ldr	r4, [r6, #0]
 8013634:	f105 0114 	add.w	r1, r5, #20
 8013638:	46b6      	mov	lr, r6
 801363a:	f04f 0a00 	mov.w	sl, #0
 801363e:	880a      	ldrh	r2, [r1, #0]
 8013640:	f8be b002 	ldrh.w	fp, [lr, #2]
 8013644:	fb09 b202 	mla	r2, r9, r2, fp
 8013648:	4492      	add	sl, r2
 801364a:	b2a4      	uxth	r4, r4
 801364c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8013650:	f84e 4b04 	str.w	r4, [lr], #4
 8013654:	f851 4b04 	ldr.w	r4, [r1], #4
 8013658:	f8be 2000 	ldrh.w	r2, [lr]
 801365c:	0c24      	lsrs	r4, r4, #16
 801365e:	fb09 2404 	mla	r4, r9, r4, r2
 8013662:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8013666:	458c      	cmp	ip, r1
 8013668:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801366c:	d8e7      	bhi.n	801363e <__multiply+0xfe>
 801366e:	9a01      	ldr	r2, [sp, #4]
 8013670:	50b4      	str	r4, [r6, r2]
 8013672:	3604      	adds	r6, #4
 8013674:	e7a3      	b.n	80135be <__multiply+0x7e>
 8013676:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801367a:	2b00      	cmp	r3, #0
 801367c:	d1a5      	bne.n	80135ca <__multiply+0x8a>
 801367e:	3f01      	subs	r7, #1
 8013680:	e7a1      	b.n	80135c6 <__multiply+0x86>
 8013682:	bf00      	nop
 8013684:	08016d84 	.word	0x08016d84
 8013688:	08016e14 	.word	0x08016e14

0801368c <__pow5mult>:
 801368c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013690:	4615      	mov	r5, r2
 8013692:	f012 0203 	ands.w	r2, r2, #3
 8013696:	4606      	mov	r6, r0
 8013698:	460f      	mov	r7, r1
 801369a:	d007      	beq.n	80136ac <__pow5mult+0x20>
 801369c:	4c25      	ldr	r4, [pc, #148]	; (8013734 <__pow5mult+0xa8>)
 801369e:	3a01      	subs	r2, #1
 80136a0:	2300      	movs	r3, #0
 80136a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80136a6:	f7ff fe51 	bl	801334c <__multadd>
 80136aa:	4607      	mov	r7, r0
 80136ac:	10ad      	asrs	r5, r5, #2
 80136ae:	d03d      	beq.n	801372c <__pow5mult+0xa0>
 80136b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80136b2:	b97c      	cbnz	r4, 80136d4 <__pow5mult+0x48>
 80136b4:	2010      	movs	r0, #16
 80136b6:	f7fc fc95 	bl	800ffe4 <malloc>
 80136ba:	4602      	mov	r2, r0
 80136bc:	6270      	str	r0, [r6, #36]	; 0x24
 80136be:	b928      	cbnz	r0, 80136cc <__pow5mult+0x40>
 80136c0:	4b1d      	ldr	r3, [pc, #116]	; (8013738 <__pow5mult+0xac>)
 80136c2:	481e      	ldr	r0, [pc, #120]	; (801373c <__pow5mult+0xb0>)
 80136c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80136c8:	f001 f83e 	bl	8014748 <__assert_func>
 80136cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80136d0:	6004      	str	r4, [r0, #0]
 80136d2:	60c4      	str	r4, [r0, #12]
 80136d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80136d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80136dc:	b94c      	cbnz	r4, 80136f2 <__pow5mult+0x66>
 80136de:	f240 2171 	movw	r1, #625	; 0x271
 80136e2:	4630      	mov	r0, r6
 80136e4:	f7ff ff16 	bl	8013514 <__i2b>
 80136e8:	2300      	movs	r3, #0
 80136ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80136ee:	4604      	mov	r4, r0
 80136f0:	6003      	str	r3, [r0, #0]
 80136f2:	f04f 0900 	mov.w	r9, #0
 80136f6:	07eb      	lsls	r3, r5, #31
 80136f8:	d50a      	bpl.n	8013710 <__pow5mult+0x84>
 80136fa:	4639      	mov	r1, r7
 80136fc:	4622      	mov	r2, r4
 80136fe:	4630      	mov	r0, r6
 8013700:	f7ff ff1e 	bl	8013540 <__multiply>
 8013704:	4639      	mov	r1, r7
 8013706:	4680      	mov	r8, r0
 8013708:	4630      	mov	r0, r6
 801370a:	f7ff fdfd 	bl	8013308 <_Bfree>
 801370e:	4647      	mov	r7, r8
 8013710:	106d      	asrs	r5, r5, #1
 8013712:	d00b      	beq.n	801372c <__pow5mult+0xa0>
 8013714:	6820      	ldr	r0, [r4, #0]
 8013716:	b938      	cbnz	r0, 8013728 <__pow5mult+0x9c>
 8013718:	4622      	mov	r2, r4
 801371a:	4621      	mov	r1, r4
 801371c:	4630      	mov	r0, r6
 801371e:	f7ff ff0f 	bl	8013540 <__multiply>
 8013722:	6020      	str	r0, [r4, #0]
 8013724:	f8c0 9000 	str.w	r9, [r0]
 8013728:	4604      	mov	r4, r0
 801372a:	e7e4      	b.n	80136f6 <__pow5mult+0x6a>
 801372c:	4638      	mov	r0, r7
 801372e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013732:	bf00      	nop
 8013734:	08016f68 	.word	0x08016f68
 8013738:	08016d0e 	.word	0x08016d0e
 801373c:	08016e14 	.word	0x08016e14

08013740 <__lshift>:
 8013740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013744:	460c      	mov	r4, r1
 8013746:	6849      	ldr	r1, [r1, #4]
 8013748:	6923      	ldr	r3, [r4, #16]
 801374a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801374e:	68a3      	ldr	r3, [r4, #8]
 8013750:	4607      	mov	r7, r0
 8013752:	4691      	mov	r9, r2
 8013754:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013758:	f108 0601 	add.w	r6, r8, #1
 801375c:	42b3      	cmp	r3, r6
 801375e:	db0b      	blt.n	8013778 <__lshift+0x38>
 8013760:	4638      	mov	r0, r7
 8013762:	f7ff fd91 	bl	8013288 <_Balloc>
 8013766:	4605      	mov	r5, r0
 8013768:	b948      	cbnz	r0, 801377e <__lshift+0x3e>
 801376a:	4602      	mov	r2, r0
 801376c:	4b28      	ldr	r3, [pc, #160]	; (8013810 <__lshift+0xd0>)
 801376e:	4829      	ldr	r0, [pc, #164]	; (8013814 <__lshift+0xd4>)
 8013770:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013774:	f000 ffe8 	bl	8014748 <__assert_func>
 8013778:	3101      	adds	r1, #1
 801377a:	005b      	lsls	r3, r3, #1
 801377c:	e7ee      	b.n	801375c <__lshift+0x1c>
 801377e:	2300      	movs	r3, #0
 8013780:	f100 0114 	add.w	r1, r0, #20
 8013784:	f100 0210 	add.w	r2, r0, #16
 8013788:	4618      	mov	r0, r3
 801378a:	4553      	cmp	r3, sl
 801378c:	db33      	blt.n	80137f6 <__lshift+0xb6>
 801378e:	6920      	ldr	r0, [r4, #16]
 8013790:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013794:	f104 0314 	add.w	r3, r4, #20
 8013798:	f019 091f 	ands.w	r9, r9, #31
 801379c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80137a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80137a4:	d02b      	beq.n	80137fe <__lshift+0xbe>
 80137a6:	f1c9 0e20 	rsb	lr, r9, #32
 80137aa:	468a      	mov	sl, r1
 80137ac:	2200      	movs	r2, #0
 80137ae:	6818      	ldr	r0, [r3, #0]
 80137b0:	fa00 f009 	lsl.w	r0, r0, r9
 80137b4:	4302      	orrs	r2, r0
 80137b6:	f84a 2b04 	str.w	r2, [sl], #4
 80137ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80137be:	459c      	cmp	ip, r3
 80137c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80137c4:	d8f3      	bhi.n	80137ae <__lshift+0x6e>
 80137c6:	ebac 0304 	sub.w	r3, ip, r4
 80137ca:	3b15      	subs	r3, #21
 80137cc:	f023 0303 	bic.w	r3, r3, #3
 80137d0:	3304      	adds	r3, #4
 80137d2:	f104 0015 	add.w	r0, r4, #21
 80137d6:	4584      	cmp	ip, r0
 80137d8:	bf38      	it	cc
 80137da:	2304      	movcc	r3, #4
 80137dc:	50ca      	str	r2, [r1, r3]
 80137de:	b10a      	cbz	r2, 80137e4 <__lshift+0xa4>
 80137e0:	f108 0602 	add.w	r6, r8, #2
 80137e4:	3e01      	subs	r6, #1
 80137e6:	4638      	mov	r0, r7
 80137e8:	612e      	str	r6, [r5, #16]
 80137ea:	4621      	mov	r1, r4
 80137ec:	f7ff fd8c 	bl	8013308 <_Bfree>
 80137f0:	4628      	mov	r0, r5
 80137f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80137fa:	3301      	adds	r3, #1
 80137fc:	e7c5      	b.n	801378a <__lshift+0x4a>
 80137fe:	3904      	subs	r1, #4
 8013800:	f853 2b04 	ldr.w	r2, [r3], #4
 8013804:	f841 2f04 	str.w	r2, [r1, #4]!
 8013808:	459c      	cmp	ip, r3
 801380a:	d8f9      	bhi.n	8013800 <__lshift+0xc0>
 801380c:	e7ea      	b.n	80137e4 <__lshift+0xa4>
 801380e:	bf00      	nop
 8013810:	08016d84 	.word	0x08016d84
 8013814:	08016e14 	.word	0x08016e14

08013818 <__mcmp>:
 8013818:	b530      	push	{r4, r5, lr}
 801381a:	6902      	ldr	r2, [r0, #16]
 801381c:	690c      	ldr	r4, [r1, #16]
 801381e:	1b12      	subs	r2, r2, r4
 8013820:	d10e      	bne.n	8013840 <__mcmp+0x28>
 8013822:	f100 0314 	add.w	r3, r0, #20
 8013826:	3114      	adds	r1, #20
 8013828:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801382c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013830:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013834:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013838:	42a5      	cmp	r5, r4
 801383a:	d003      	beq.n	8013844 <__mcmp+0x2c>
 801383c:	d305      	bcc.n	801384a <__mcmp+0x32>
 801383e:	2201      	movs	r2, #1
 8013840:	4610      	mov	r0, r2
 8013842:	bd30      	pop	{r4, r5, pc}
 8013844:	4283      	cmp	r3, r0
 8013846:	d3f3      	bcc.n	8013830 <__mcmp+0x18>
 8013848:	e7fa      	b.n	8013840 <__mcmp+0x28>
 801384a:	f04f 32ff 	mov.w	r2, #4294967295
 801384e:	e7f7      	b.n	8013840 <__mcmp+0x28>

08013850 <__mdiff>:
 8013850:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013854:	460c      	mov	r4, r1
 8013856:	4606      	mov	r6, r0
 8013858:	4611      	mov	r1, r2
 801385a:	4620      	mov	r0, r4
 801385c:	4617      	mov	r7, r2
 801385e:	f7ff ffdb 	bl	8013818 <__mcmp>
 8013862:	1e05      	subs	r5, r0, #0
 8013864:	d110      	bne.n	8013888 <__mdiff+0x38>
 8013866:	4629      	mov	r1, r5
 8013868:	4630      	mov	r0, r6
 801386a:	f7ff fd0d 	bl	8013288 <_Balloc>
 801386e:	b930      	cbnz	r0, 801387e <__mdiff+0x2e>
 8013870:	4b39      	ldr	r3, [pc, #228]	; (8013958 <__mdiff+0x108>)
 8013872:	4602      	mov	r2, r0
 8013874:	f240 2132 	movw	r1, #562	; 0x232
 8013878:	4838      	ldr	r0, [pc, #224]	; (801395c <__mdiff+0x10c>)
 801387a:	f000 ff65 	bl	8014748 <__assert_func>
 801387e:	2301      	movs	r3, #1
 8013880:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013884:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013888:	bfa4      	itt	ge
 801388a:	463b      	movge	r3, r7
 801388c:	4627      	movge	r7, r4
 801388e:	4630      	mov	r0, r6
 8013890:	6879      	ldr	r1, [r7, #4]
 8013892:	bfa6      	itte	ge
 8013894:	461c      	movge	r4, r3
 8013896:	2500      	movge	r5, #0
 8013898:	2501      	movlt	r5, #1
 801389a:	f7ff fcf5 	bl	8013288 <_Balloc>
 801389e:	b920      	cbnz	r0, 80138aa <__mdiff+0x5a>
 80138a0:	4b2d      	ldr	r3, [pc, #180]	; (8013958 <__mdiff+0x108>)
 80138a2:	4602      	mov	r2, r0
 80138a4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80138a8:	e7e6      	b.n	8013878 <__mdiff+0x28>
 80138aa:	693e      	ldr	r6, [r7, #16]
 80138ac:	60c5      	str	r5, [r0, #12]
 80138ae:	6925      	ldr	r5, [r4, #16]
 80138b0:	f107 0114 	add.w	r1, r7, #20
 80138b4:	f104 0914 	add.w	r9, r4, #20
 80138b8:	f100 0e14 	add.w	lr, r0, #20
 80138bc:	f107 0210 	add.w	r2, r7, #16
 80138c0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80138c4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80138c8:	46f2      	mov	sl, lr
 80138ca:	2700      	movs	r7, #0
 80138cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80138d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80138d4:	fa1f f883 	uxth.w	r8, r3
 80138d8:	fa17 f78b 	uxtah	r7, r7, fp
 80138dc:	0c1b      	lsrs	r3, r3, #16
 80138de:	eba7 0808 	sub.w	r8, r7, r8
 80138e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80138e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80138ea:	fa1f f888 	uxth.w	r8, r8
 80138ee:	141f      	asrs	r7, r3, #16
 80138f0:	454d      	cmp	r5, r9
 80138f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80138f6:	f84a 3b04 	str.w	r3, [sl], #4
 80138fa:	d8e7      	bhi.n	80138cc <__mdiff+0x7c>
 80138fc:	1b2b      	subs	r3, r5, r4
 80138fe:	3b15      	subs	r3, #21
 8013900:	f023 0303 	bic.w	r3, r3, #3
 8013904:	3304      	adds	r3, #4
 8013906:	3415      	adds	r4, #21
 8013908:	42a5      	cmp	r5, r4
 801390a:	bf38      	it	cc
 801390c:	2304      	movcc	r3, #4
 801390e:	4419      	add	r1, r3
 8013910:	4473      	add	r3, lr
 8013912:	469e      	mov	lr, r3
 8013914:	460d      	mov	r5, r1
 8013916:	4565      	cmp	r5, ip
 8013918:	d30e      	bcc.n	8013938 <__mdiff+0xe8>
 801391a:	f10c 0203 	add.w	r2, ip, #3
 801391e:	1a52      	subs	r2, r2, r1
 8013920:	f022 0203 	bic.w	r2, r2, #3
 8013924:	3903      	subs	r1, #3
 8013926:	458c      	cmp	ip, r1
 8013928:	bf38      	it	cc
 801392a:	2200      	movcc	r2, #0
 801392c:	441a      	add	r2, r3
 801392e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013932:	b17b      	cbz	r3, 8013954 <__mdiff+0x104>
 8013934:	6106      	str	r6, [r0, #16]
 8013936:	e7a5      	b.n	8013884 <__mdiff+0x34>
 8013938:	f855 8b04 	ldr.w	r8, [r5], #4
 801393c:	fa17 f488 	uxtah	r4, r7, r8
 8013940:	1422      	asrs	r2, r4, #16
 8013942:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8013946:	b2a4      	uxth	r4, r4
 8013948:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801394c:	f84e 4b04 	str.w	r4, [lr], #4
 8013950:	1417      	asrs	r7, r2, #16
 8013952:	e7e0      	b.n	8013916 <__mdiff+0xc6>
 8013954:	3e01      	subs	r6, #1
 8013956:	e7ea      	b.n	801392e <__mdiff+0xde>
 8013958:	08016d84 	.word	0x08016d84
 801395c:	08016e14 	.word	0x08016e14

08013960 <__ulp>:
 8013960:	b082      	sub	sp, #8
 8013962:	ed8d 0b00 	vstr	d0, [sp]
 8013966:	9b01      	ldr	r3, [sp, #4]
 8013968:	4912      	ldr	r1, [pc, #72]	; (80139b4 <__ulp+0x54>)
 801396a:	4019      	ands	r1, r3
 801396c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8013970:	2900      	cmp	r1, #0
 8013972:	dd05      	ble.n	8013980 <__ulp+0x20>
 8013974:	2200      	movs	r2, #0
 8013976:	460b      	mov	r3, r1
 8013978:	ec43 2b10 	vmov	d0, r2, r3
 801397c:	b002      	add	sp, #8
 801397e:	4770      	bx	lr
 8013980:	4249      	negs	r1, r1
 8013982:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8013986:	ea4f 5021 	mov.w	r0, r1, asr #20
 801398a:	f04f 0200 	mov.w	r2, #0
 801398e:	f04f 0300 	mov.w	r3, #0
 8013992:	da04      	bge.n	801399e <__ulp+0x3e>
 8013994:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8013998:	fa41 f300 	asr.w	r3, r1, r0
 801399c:	e7ec      	b.n	8013978 <__ulp+0x18>
 801399e:	f1a0 0114 	sub.w	r1, r0, #20
 80139a2:	291e      	cmp	r1, #30
 80139a4:	bfda      	itte	le
 80139a6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80139aa:	fa20 f101 	lsrle.w	r1, r0, r1
 80139ae:	2101      	movgt	r1, #1
 80139b0:	460a      	mov	r2, r1
 80139b2:	e7e1      	b.n	8013978 <__ulp+0x18>
 80139b4:	7ff00000 	.word	0x7ff00000

080139b8 <__b2d>:
 80139b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139ba:	6905      	ldr	r5, [r0, #16]
 80139bc:	f100 0714 	add.w	r7, r0, #20
 80139c0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80139c4:	1f2e      	subs	r6, r5, #4
 80139c6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80139ca:	4620      	mov	r0, r4
 80139cc:	f7ff fd52 	bl	8013474 <__hi0bits>
 80139d0:	f1c0 0320 	rsb	r3, r0, #32
 80139d4:	280a      	cmp	r0, #10
 80139d6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8013a54 <__b2d+0x9c>
 80139da:	600b      	str	r3, [r1, #0]
 80139dc:	dc14      	bgt.n	8013a08 <__b2d+0x50>
 80139de:	f1c0 0e0b 	rsb	lr, r0, #11
 80139e2:	fa24 f10e 	lsr.w	r1, r4, lr
 80139e6:	42b7      	cmp	r7, r6
 80139e8:	ea41 030c 	orr.w	r3, r1, ip
 80139ec:	bf34      	ite	cc
 80139ee:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80139f2:	2100      	movcs	r1, #0
 80139f4:	3015      	adds	r0, #21
 80139f6:	fa04 f000 	lsl.w	r0, r4, r0
 80139fa:	fa21 f10e 	lsr.w	r1, r1, lr
 80139fe:	ea40 0201 	orr.w	r2, r0, r1
 8013a02:	ec43 2b10 	vmov	d0, r2, r3
 8013a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a08:	42b7      	cmp	r7, r6
 8013a0a:	bf3a      	itte	cc
 8013a0c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013a10:	f1a5 0608 	subcc.w	r6, r5, #8
 8013a14:	2100      	movcs	r1, #0
 8013a16:	380b      	subs	r0, #11
 8013a18:	d017      	beq.n	8013a4a <__b2d+0x92>
 8013a1a:	f1c0 0c20 	rsb	ip, r0, #32
 8013a1e:	fa04 f500 	lsl.w	r5, r4, r0
 8013a22:	42be      	cmp	r6, r7
 8013a24:	fa21 f40c 	lsr.w	r4, r1, ip
 8013a28:	ea45 0504 	orr.w	r5, r5, r4
 8013a2c:	bf8c      	ite	hi
 8013a2e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013a32:	2400      	movls	r4, #0
 8013a34:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8013a38:	fa01 f000 	lsl.w	r0, r1, r0
 8013a3c:	fa24 f40c 	lsr.w	r4, r4, ip
 8013a40:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013a44:	ea40 0204 	orr.w	r2, r0, r4
 8013a48:	e7db      	b.n	8013a02 <__b2d+0x4a>
 8013a4a:	ea44 030c 	orr.w	r3, r4, ip
 8013a4e:	460a      	mov	r2, r1
 8013a50:	e7d7      	b.n	8013a02 <__b2d+0x4a>
 8013a52:	bf00      	nop
 8013a54:	3ff00000 	.word	0x3ff00000

08013a58 <__d2b>:
 8013a58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013a5c:	4689      	mov	r9, r1
 8013a5e:	2101      	movs	r1, #1
 8013a60:	ec57 6b10 	vmov	r6, r7, d0
 8013a64:	4690      	mov	r8, r2
 8013a66:	f7ff fc0f 	bl	8013288 <_Balloc>
 8013a6a:	4604      	mov	r4, r0
 8013a6c:	b930      	cbnz	r0, 8013a7c <__d2b+0x24>
 8013a6e:	4602      	mov	r2, r0
 8013a70:	4b25      	ldr	r3, [pc, #148]	; (8013b08 <__d2b+0xb0>)
 8013a72:	4826      	ldr	r0, [pc, #152]	; (8013b0c <__d2b+0xb4>)
 8013a74:	f240 310a 	movw	r1, #778	; 0x30a
 8013a78:	f000 fe66 	bl	8014748 <__assert_func>
 8013a7c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013a80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013a84:	bb35      	cbnz	r5, 8013ad4 <__d2b+0x7c>
 8013a86:	2e00      	cmp	r6, #0
 8013a88:	9301      	str	r3, [sp, #4]
 8013a8a:	d028      	beq.n	8013ade <__d2b+0x86>
 8013a8c:	4668      	mov	r0, sp
 8013a8e:	9600      	str	r6, [sp, #0]
 8013a90:	f7ff fd10 	bl	80134b4 <__lo0bits>
 8013a94:	9900      	ldr	r1, [sp, #0]
 8013a96:	b300      	cbz	r0, 8013ada <__d2b+0x82>
 8013a98:	9a01      	ldr	r2, [sp, #4]
 8013a9a:	f1c0 0320 	rsb	r3, r0, #32
 8013a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8013aa2:	430b      	orrs	r3, r1
 8013aa4:	40c2      	lsrs	r2, r0
 8013aa6:	6163      	str	r3, [r4, #20]
 8013aa8:	9201      	str	r2, [sp, #4]
 8013aaa:	9b01      	ldr	r3, [sp, #4]
 8013aac:	61a3      	str	r3, [r4, #24]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	bf14      	ite	ne
 8013ab2:	2202      	movne	r2, #2
 8013ab4:	2201      	moveq	r2, #1
 8013ab6:	6122      	str	r2, [r4, #16]
 8013ab8:	b1d5      	cbz	r5, 8013af0 <__d2b+0x98>
 8013aba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013abe:	4405      	add	r5, r0
 8013ac0:	f8c9 5000 	str.w	r5, [r9]
 8013ac4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013ac8:	f8c8 0000 	str.w	r0, [r8]
 8013acc:	4620      	mov	r0, r4
 8013ace:	b003      	add	sp, #12
 8013ad0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ad4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013ad8:	e7d5      	b.n	8013a86 <__d2b+0x2e>
 8013ada:	6161      	str	r1, [r4, #20]
 8013adc:	e7e5      	b.n	8013aaa <__d2b+0x52>
 8013ade:	a801      	add	r0, sp, #4
 8013ae0:	f7ff fce8 	bl	80134b4 <__lo0bits>
 8013ae4:	9b01      	ldr	r3, [sp, #4]
 8013ae6:	6163      	str	r3, [r4, #20]
 8013ae8:	2201      	movs	r2, #1
 8013aea:	6122      	str	r2, [r4, #16]
 8013aec:	3020      	adds	r0, #32
 8013aee:	e7e3      	b.n	8013ab8 <__d2b+0x60>
 8013af0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013af4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013af8:	f8c9 0000 	str.w	r0, [r9]
 8013afc:	6918      	ldr	r0, [r3, #16]
 8013afe:	f7ff fcb9 	bl	8013474 <__hi0bits>
 8013b02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013b06:	e7df      	b.n	8013ac8 <__d2b+0x70>
 8013b08:	08016d84 	.word	0x08016d84
 8013b0c:	08016e14 	.word	0x08016e14

08013b10 <__ratio>:
 8013b10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b14:	4688      	mov	r8, r1
 8013b16:	4669      	mov	r1, sp
 8013b18:	4681      	mov	r9, r0
 8013b1a:	f7ff ff4d 	bl	80139b8 <__b2d>
 8013b1e:	a901      	add	r1, sp, #4
 8013b20:	4640      	mov	r0, r8
 8013b22:	ec55 4b10 	vmov	r4, r5, d0
 8013b26:	f7ff ff47 	bl	80139b8 <__b2d>
 8013b2a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013b2e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013b32:	eba3 0c02 	sub.w	ip, r3, r2
 8013b36:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013b3a:	1a9b      	subs	r3, r3, r2
 8013b3c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013b40:	ec51 0b10 	vmov	r0, r1, d0
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	bfd6      	itet	le
 8013b48:	460a      	movle	r2, r1
 8013b4a:	462a      	movgt	r2, r5
 8013b4c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013b50:	468b      	mov	fp, r1
 8013b52:	462f      	mov	r7, r5
 8013b54:	bfd4      	ite	le
 8013b56:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013b5a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013b5e:	4620      	mov	r0, r4
 8013b60:	ee10 2a10 	vmov	r2, s0
 8013b64:	465b      	mov	r3, fp
 8013b66:	4639      	mov	r1, r7
 8013b68:	f7ec fe78 	bl	800085c <__aeabi_ddiv>
 8013b6c:	ec41 0b10 	vmov	d0, r0, r1
 8013b70:	b003      	add	sp, #12
 8013b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013b76 <__copybits>:
 8013b76:	3901      	subs	r1, #1
 8013b78:	b570      	push	{r4, r5, r6, lr}
 8013b7a:	1149      	asrs	r1, r1, #5
 8013b7c:	6914      	ldr	r4, [r2, #16]
 8013b7e:	3101      	adds	r1, #1
 8013b80:	f102 0314 	add.w	r3, r2, #20
 8013b84:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013b88:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013b8c:	1f05      	subs	r5, r0, #4
 8013b8e:	42a3      	cmp	r3, r4
 8013b90:	d30c      	bcc.n	8013bac <__copybits+0x36>
 8013b92:	1aa3      	subs	r3, r4, r2
 8013b94:	3b11      	subs	r3, #17
 8013b96:	f023 0303 	bic.w	r3, r3, #3
 8013b9a:	3211      	adds	r2, #17
 8013b9c:	42a2      	cmp	r2, r4
 8013b9e:	bf88      	it	hi
 8013ba0:	2300      	movhi	r3, #0
 8013ba2:	4418      	add	r0, r3
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	4288      	cmp	r0, r1
 8013ba8:	d305      	bcc.n	8013bb6 <__copybits+0x40>
 8013baa:	bd70      	pop	{r4, r5, r6, pc}
 8013bac:	f853 6b04 	ldr.w	r6, [r3], #4
 8013bb0:	f845 6f04 	str.w	r6, [r5, #4]!
 8013bb4:	e7eb      	b.n	8013b8e <__copybits+0x18>
 8013bb6:	f840 3b04 	str.w	r3, [r0], #4
 8013bba:	e7f4      	b.n	8013ba6 <__copybits+0x30>

08013bbc <__any_on>:
 8013bbc:	f100 0214 	add.w	r2, r0, #20
 8013bc0:	6900      	ldr	r0, [r0, #16]
 8013bc2:	114b      	asrs	r3, r1, #5
 8013bc4:	4298      	cmp	r0, r3
 8013bc6:	b510      	push	{r4, lr}
 8013bc8:	db11      	blt.n	8013bee <__any_on+0x32>
 8013bca:	dd0a      	ble.n	8013be2 <__any_on+0x26>
 8013bcc:	f011 011f 	ands.w	r1, r1, #31
 8013bd0:	d007      	beq.n	8013be2 <__any_on+0x26>
 8013bd2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013bd6:	fa24 f001 	lsr.w	r0, r4, r1
 8013bda:	fa00 f101 	lsl.w	r1, r0, r1
 8013bde:	428c      	cmp	r4, r1
 8013be0:	d10b      	bne.n	8013bfa <__any_on+0x3e>
 8013be2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013be6:	4293      	cmp	r3, r2
 8013be8:	d803      	bhi.n	8013bf2 <__any_on+0x36>
 8013bea:	2000      	movs	r0, #0
 8013bec:	bd10      	pop	{r4, pc}
 8013bee:	4603      	mov	r3, r0
 8013bf0:	e7f7      	b.n	8013be2 <__any_on+0x26>
 8013bf2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013bf6:	2900      	cmp	r1, #0
 8013bf8:	d0f5      	beq.n	8013be6 <__any_on+0x2a>
 8013bfa:	2001      	movs	r0, #1
 8013bfc:	e7f6      	b.n	8013bec <__any_on+0x30>

08013bfe <_calloc_r>:
 8013bfe:	b513      	push	{r0, r1, r4, lr}
 8013c00:	434a      	muls	r2, r1
 8013c02:	4611      	mov	r1, r2
 8013c04:	9201      	str	r2, [sp, #4]
 8013c06:	f7fc fa7d 	bl	8010104 <_malloc_r>
 8013c0a:	4604      	mov	r4, r0
 8013c0c:	b118      	cbz	r0, 8013c16 <_calloc_r+0x18>
 8013c0e:	9a01      	ldr	r2, [sp, #4]
 8013c10:	2100      	movs	r1, #0
 8013c12:	f7fc fa1f 	bl	8010054 <memset>
 8013c16:	4620      	mov	r0, r4
 8013c18:	b002      	add	sp, #8
 8013c1a:	bd10      	pop	{r4, pc}

08013c1c <__ssputs_r>:
 8013c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c20:	688e      	ldr	r6, [r1, #8]
 8013c22:	429e      	cmp	r6, r3
 8013c24:	4682      	mov	sl, r0
 8013c26:	460c      	mov	r4, r1
 8013c28:	4690      	mov	r8, r2
 8013c2a:	461f      	mov	r7, r3
 8013c2c:	d838      	bhi.n	8013ca0 <__ssputs_r+0x84>
 8013c2e:	898a      	ldrh	r2, [r1, #12]
 8013c30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013c34:	d032      	beq.n	8013c9c <__ssputs_r+0x80>
 8013c36:	6825      	ldr	r5, [r4, #0]
 8013c38:	6909      	ldr	r1, [r1, #16]
 8013c3a:	eba5 0901 	sub.w	r9, r5, r1
 8013c3e:	6965      	ldr	r5, [r4, #20]
 8013c40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013c44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013c48:	3301      	adds	r3, #1
 8013c4a:	444b      	add	r3, r9
 8013c4c:	106d      	asrs	r5, r5, #1
 8013c4e:	429d      	cmp	r5, r3
 8013c50:	bf38      	it	cc
 8013c52:	461d      	movcc	r5, r3
 8013c54:	0553      	lsls	r3, r2, #21
 8013c56:	d531      	bpl.n	8013cbc <__ssputs_r+0xa0>
 8013c58:	4629      	mov	r1, r5
 8013c5a:	f7fc fa53 	bl	8010104 <_malloc_r>
 8013c5e:	4606      	mov	r6, r0
 8013c60:	b950      	cbnz	r0, 8013c78 <__ssputs_r+0x5c>
 8013c62:	230c      	movs	r3, #12
 8013c64:	f8ca 3000 	str.w	r3, [sl]
 8013c68:	89a3      	ldrh	r3, [r4, #12]
 8013c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c6e:	81a3      	strh	r3, [r4, #12]
 8013c70:	f04f 30ff 	mov.w	r0, #4294967295
 8013c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c78:	6921      	ldr	r1, [r4, #16]
 8013c7a:	464a      	mov	r2, r9
 8013c7c:	f7fc f9c2 	bl	8010004 <memcpy>
 8013c80:	89a3      	ldrh	r3, [r4, #12]
 8013c82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013c8a:	81a3      	strh	r3, [r4, #12]
 8013c8c:	6126      	str	r6, [r4, #16]
 8013c8e:	6165      	str	r5, [r4, #20]
 8013c90:	444e      	add	r6, r9
 8013c92:	eba5 0509 	sub.w	r5, r5, r9
 8013c96:	6026      	str	r6, [r4, #0]
 8013c98:	60a5      	str	r5, [r4, #8]
 8013c9a:	463e      	mov	r6, r7
 8013c9c:	42be      	cmp	r6, r7
 8013c9e:	d900      	bls.n	8013ca2 <__ssputs_r+0x86>
 8013ca0:	463e      	mov	r6, r7
 8013ca2:	4632      	mov	r2, r6
 8013ca4:	6820      	ldr	r0, [r4, #0]
 8013ca6:	4641      	mov	r1, r8
 8013ca8:	f7fc f9ba 	bl	8010020 <memmove>
 8013cac:	68a3      	ldr	r3, [r4, #8]
 8013cae:	6822      	ldr	r2, [r4, #0]
 8013cb0:	1b9b      	subs	r3, r3, r6
 8013cb2:	4432      	add	r2, r6
 8013cb4:	60a3      	str	r3, [r4, #8]
 8013cb6:	6022      	str	r2, [r4, #0]
 8013cb8:	2000      	movs	r0, #0
 8013cba:	e7db      	b.n	8013c74 <__ssputs_r+0x58>
 8013cbc:	462a      	mov	r2, r5
 8013cbe:	f000 ff2d 	bl	8014b1c <_realloc_r>
 8013cc2:	4606      	mov	r6, r0
 8013cc4:	2800      	cmp	r0, #0
 8013cc6:	d1e1      	bne.n	8013c8c <__ssputs_r+0x70>
 8013cc8:	6921      	ldr	r1, [r4, #16]
 8013cca:	4650      	mov	r0, sl
 8013ccc:	f7fc f9ca 	bl	8010064 <_free_r>
 8013cd0:	e7c7      	b.n	8013c62 <__ssputs_r+0x46>
	...

08013cd4 <_svfiprintf_r>:
 8013cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cd8:	4698      	mov	r8, r3
 8013cda:	898b      	ldrh	r3, [r1, #12]
 8013cdc:	061b      	lsls	r3, r3, #24
 8013cde:	b09d      	sub	sp, #116	; 0x74
 8013ce0:	4607      	mov	r7, r0
 8013ce2:	460d      	mov	r5, r1
 8013ce4:	4614      	mov	r4, r2
 8013ce6:	d50e      	bpl.n	8013d06 <_svfiprintf_r+0x32>
 8013ce8:	690b      	ldr	r3, [r1, #16]
 8013cea:	b963      	cbnz	r3, 8013d06 <_svfiprintf_r+0x32>
 8013cec:	2140      	movs	r1, #64	; 0x40
 8013cee:	f7fc fa09 	bl	8010104 <_malloc_r>
 8013cf2:	6028      	str	r0, [r5, #0]
 8013cf4:	6128      	str	r0, [r5, #16]
 8013cf6:	b920      	cbnz	r0, 8013d02 <_svfiprintf_r+0x2e>
 8013cf8:	230c      	movs	r3, #12
 8013cfa:	603b      	str	r3, [r7, #0]
 8013cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8013d00:	e0d1      	b.n	8013ea6 <_svfiprintf_r+0x1d2>
 8013d02:	2340      	movs	r3, #64	; 0x40
 8013d04:	616b      	str	r3, [r5, #20]
 8013d06:	2300      	movs	r3, #0
 8013d08:	9309      	str	r3, [sp, #36]	; 0x24
 8013d0a:	2320      	movs	r3, #32
 8013d0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013d10:	f8cd 800c 	str.w	r8, [sp, #12]
 8013d14:	2330      	movs	r3, #48	; 0x30
 8013d16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013ec0 <_svfiprintf_r+0x1ec>
 8013d1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013d1e:	f04f 0901 	mov.w	r9, #1
 8013d22:	4623      	mov	r3, r4
 8013d24:	469a      	mov	sl, r3
 8013d26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013d2a:	b10a      	cbz	r2, 8013d30 <_svfiprintf_r+0x5c>
 8013d2c:	2a25      	cmp	r2, #37	; 0x25
 8013d2e:	d1f9      	bne.n	8013d24 <_svfiprintf_r+0x50>
 8013d30:	ebba 0b04 	subs.w	fp, sl, r4
 8013d34:	d00b      	beq.n	8013d4e <_svfiprintf_r+0x7a>
 8013d36:	465b      	mov	r3, fp
 8013d38:	4622      	mov	r2, r4
 8013d3a:	4629      	mov	r1, r5
 8013d3c:	4638      	mov	r0, r7
 8013d3e:	f7ff ff6d 	bl	8013c1c <__ssputs_r>
 8013d42:	3001      	adds	r0, #1
 8013d44:	f000 80aa 	beq.w	8013e9c <_svfiprintf_r+0x1c8>
 8013d48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013d4a:	445a      	add	r2, fp
 8013d4c:	9209      	str	r2, [sp, #36]	; 0x24
 8013d4e:	f89a 3000 	ldrb.w	r3, [sl]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	f000 80a2 	beq.w	8013e9c <_svfiprintf_r+0x1c8>
 8013d58:	2300      	movs	r3, #0
 8013d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8013d5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013d62:	f10a 0a01 	add.w	sl, sl, #1
 8013d66:	9304      	str	r3, [sp, #16]
 8013d68:	9307      	str	r3, [sp, #28]
 8013d6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013d6e:	931a      	str	r3, [sp, #104]	; 0x68
 8013d70:	4654      	mov	r4, sl
 8013d72:	2205      	movs	r2, #5
 8013d74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d78:	4851      	ldr	r0, [pc, #324]	; (8013ec0 <_svfiprintf_r+0x1ec>)
 8013d7a:	f7ec fa31 	bl	80001e0 <memchr>
 8013d7e:	9a04      	ldr	r2, [sp, #16]
 8013d80:	b9d8      	cbnz	r0, 8013dba <_svfiprintf_r+0xe6>
 8013d82:	06d0      	lsls	r0, r2, #27
 8013d84:	bf44      	itt	mi
 8013d86:	2320      	movmi	r3, #32
 8013d88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013d8c:	0711      	lsls	r1, r2, #28
 8013d8e:	bf44      	itt	mi
 8013d90:	232b      	movmi	r3, #43	; 0x2b
 8013d92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013d96:	f89a 3000 	ldrb.w	r3, [sl]
 8013d9a:	2b2a      	cmp	r3, #42	; 0x2a
 8013d9c:	d015      	beq.n	8013dca <_svfiprintf_r+0xf6>
 8013d9e:	9a07      	ldr	r2, [sp, #28]
 8013da0:	4654      	mov	r4, sl
 8013da2:	2000      	movs	r0, #0
 8013da4:	f04f 0c0a 	mov.w	ip, #10
 8013da8:	4621      	mov	r1, r4
 8013daa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013dae:	3b30      	subs	r3, #48	; 0x30
 8013db0:	2b09      	cmp	r3, #9
 8013db2:	d94e      	bls.n	8013e52 <_svfiprintf_r+0x17e>
 8013db4:	b1b0      	cbz	r0, 8013de4 <_svfiprintf_r+0x110>
 8013db6:	9207      	str	r2, [sp, #28]
 8013db8:	e014      	b.n	8013de4 <_svfiprintf_r+0x110>
 8013dba:	eba0 0308 	sub.w	r3, r0, r8
 8013dbe:	fa09 f303 	lsl.w	r3, r9, r3
 8013dc2:	4313      	orrs	r3, r2
 8013dc4:	9304      	str	r3, [sp, #16]
 8013dc6:	46a2      	mov	sl, r4
 8013dc8:	e7d2      	b.n	8013d70 <_svfiprintf_r+0x9c>
 8013dca:	9b03      	ldr	r3, [sp, #12]
 8013dcc:	1d19      	adds	r1, r3, #4
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	9103      	str	r1, [sp, #12]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	bfbb      	ittet	lt
 8013dd6:	425b      	neglt	r3, r3
 8013dd8:	f042 0202 	orrlt.w	r2, r2, #2
 8013ddc:	9307      	strge	r3, [sp, #28]
 8013dde:	9307      	strlt	r3, [sp, #28]
 8013de0:	bfb8      	it	lt
 8013de2:	9204      	strlt	r2, [sp, #16]
 8013de4:	7823      	ldrb	r3, [r4, #0]
 8013de6:	2b2e      	cmp	r3, #46	; 0x2e
 8013de8:	d10c      	bne.n	8013e04 <_svfiprintf_r+0x130>
 8013dea:	7863      	ldrb	r3, [r4, #1]
 8013dec:	2b2a      	cmp	r3, #42	; 0x2a
 8013dee:	d135      	bne.n	8013e5c <_svfiprintf_r+0x188>
 8013df0:	9b03      	ldr	r3, [sp, #12]
 8013df2:	1d1a      	adds	r2, r3, #4
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	9203      	str	r2, [sp, #12]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	bfb8      	it	lt
 8013dfc:	f04f 33ff 	movlt.w	r3, #4294967295
 8013e00:	3402      	adds	r4, #2
 8013e02:	9305      	str	r3, [sp, #20]
 8013e04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013ed0 <_svfiprintf_r+0x1fc>
 8013e08:	7821      	ldrb	r1, [r4, #0]
 8013e0a:	2203      	movs	r2, #3
 8013e0c:	4650      	mov	r0, sl
 8013e0e:	f7ec f9e7 	bl	80001e0 <memchr>
 8013e12:	b140      	cbz	r0, 8013e26 <_svfiprintf_r+0x152>
 8013e14:	2340      	movs	r3, #64	; 0x40
 8013e16:	eba0 000a 	sub.w	r0, r0, sl
 8013e1a:	fa03 f000 	lsl.w	r0, r3, r0
 8013e1e:	9b04      	ldr	r3, [sp, #16]
 8013e20:	4303      	orrs	r3, r0
 8013e22:	3401      	adds	r4, #1
 8013e24:	9304      	str	r3, [sp, #16]
 8013e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e2a:	4826      	ldr	r0, [pc, #152]	; (8013ec4 <_svfiprintf_r+0x1f0>)
 8013e2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013e30:	2206      	movs	r2, #6
 8013e32:	f7ec f9d5 	bl	80001e0 <memchr>
 8013e36:	2800      	cmp	r0, #0
 8013e38:	d038      	beq.n	8013eac <_svfiprintf_r+0x1d8>
 8013e3a:	4b23      	ldr	r3, [pc, #140]	; (8013ec8 <_svfiprintf_r+0x1f4>)
 8013e3c:	bb1b      	cbnz	r3, 8013e86 <_svfiprintf_r+0x1b2>
 8013e3e:	9b03      	ldr	r3, [sp, #12]
 8013e40:	3307      	adds	r3, #7
 8013e42:	f023 0307 	bic.w	r3, r3, #7
 8013e46:	3308      	adds	r3, #8
 8013e48:	9303      	str	r3, [sp, #12]
 8013e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e4c:	4433      	add	r3, r6
 8013e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8013e50:	e767      	b.n	8013d22 <_svfiprintf_r+0x4e>
 8013e52:	fb0c 3202 	mla	r2, ip, r2, r3
 8013e56:	460c      	mov	r4, r1
 8013e58:	2001      	movs	r0, #1
 8013e5a:	e7a5      	b.n	8013da8 <_svfiprintf_r+0xd4>
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	3401      	adds	r4, #1
 8013e60:	9305      	str	r3, [sp, #20]
 8013e62:	4619      	mov	r1, r3
 8013e64:	f04f 0c0a 	mov.w	ip, #10
 8013e68:	4620      	mov	r0, r4
 8013e6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013e6e:	3a30      	subs	r2, #48	; 0x30
 8013e70:	2a09      	cmp	r2, #9
 8013e72:	d903      	bls.n	8013e7c <_svfiprintf_r+0x1a8>
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d0c5      	beq.n	8013e04 <_svfiprintf_r+0x130>
 8013e78:	9105      	str	r1, [sp, #20]
 8013e7a:	e7c3      	b.n	8013e04 <_svfiprintf_r+0x130>
 8013e7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013e80:	4604      	mov	r4, r0
 8013e82:	2301      	movs	r3, #1
 8013e84:	e7f0      	b.n	8013e68 <_svfiprintf_r+0x194>
 8013e86:	ab03      	add	r3, sp, #12
 8013e88:	9300      	str	r3, [sp, #0]
 8013e8a:	462a      	mov	r2, r5
 8013e8c:	4b0f      	ldr	r3, [pc, #60]	; (8013ecc <_svfiprintf_r+0x1f8>)
 8013e8e:	a904      	add	r1, sp, #16
 8013e90:	4638      	mov	r0, r7
 8013e92:	f7fc fa31 	bl	80102f8 <_printf_float>
 8013e96:	1c42      	adds	r2, r0, #1
 8013e98:	4606      	mov	r6, r0
 8013e9a:	d1d6      	bne.n	8013e4a <_svfiprintf_r+0x176>
 8013e9c:	89ab      	ldrh	r3, [r5, #12]
 8013e9e:	065b      	lsls	r3, r3, #25
 8013ea0:	f53f af2c 	bmi.w	8013cfc <_svfiprintf_r+0x28>
 8013ea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013ea6:	b01d      	add	sp, #116	; 0x74
 8013ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013eac:	ab03      	add	r3, sp, #12
 8013eae:	9300      	str	r3, [sp, #0]
 8013eb0:	462a      	mov	r2, r5
 8013eb2:	4b06      	ldr	r3, [pc, #24]	; (8013ecc <_svfiprintf_r+0x1f8>)
 8013eb4:	a904      	add	r1, sp, #16
 8013eb6:	4638      	mov	r0, r7
 8013eb8:	f7fc fcc2 	bl	8010840 <_printf_i>
 8013ebc:	e7eb      	b.n	8013e96 <_svfiprintf_r+0x1c2>
 8013ebe:	bf00      	nop
 8013ec0:	08016f74 	.word	0x08016f74
 8013ec4:	08016f7e 	.word	0x08016f7e
 8013ec8:	080102f9 	.word	0x080102f9
 8013ecc:	08013c1d 	.word	0x08013c1d
 8013ed0:	08016f7a 	.word	0x08016f7a

08013ed4 <_sungetc_r>:
 8013ed4:	b538      	push	{r3, r4, r5, lr}
 8013ed6:	1c4b      	adds	r3, r1, #1
 8013ed8:	4614      	mov	r4, r2
 8013eda:	d103      	bne.n	8013ee4 <_sungetc_r+0x10>
 8013edc:	f04f 35ff 	mov.w	r5, #4294967295
 8013ee0:	4628      	mov	r0, r5
 8013ee2:	bd38      	pop	{r3, r4, r5, pc}
 8013ee4:	8993      	ldrh	r3, [r2, #12]
 8013ee6:	f023 0320 	bic.w	r3, r3, #32
 8013eea:	8193      	strh	r3, [r2, #12]
 8013eec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013eee:	6852      	ldr	r2, [r2, #4]
 8013ef0:	b2cd      	uxtb	r5, r1
 8013ef2:	b18b      	cbz	r3, 8013f18 <_sungetc_r+0x44>
 8013ef4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013ef6:	4293      	cmp	r3, r2
 8013ef8:	dd08      	ble.n	8013f0c <_sungetc_r+0x38>
 8013efa:	6823      	ldr	r3, [r4, #0]
 8013efc:	1e5a      	subs	r2, r3, #1
 8013efe:	6022      	str	r2, [r4, #0]
 8013f00:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013f04:	6863      	ldr	r3, [r4, #4]
 8013f06:	3301      	adds	r3, #1
 8013f08:	6063      	str	r3, [r4, #4]
 8013f0a:	e7e9      	b.n	8013ee0 <_sungetc_r+0xc>
 8013f0c:	4621      	mov	r1, r4
 8013f0e:	f000 fbd3 	bl	80146b8 <__submore>
 8013f12:	2800      	cmp	r0, #0
 8013f14:	d0f1      	beq.n	8013efa <_sungetc_r+0x26>
 8013f16:	e7e1      	b.n	8013edc <_sungetc_r+0x8>
 8013f18:	6921      	ldr	r1, [r4, #16]
 8013f1a:	6823      	ldr	r3, [r4, #0]
 8013f1c:	b151      	cbz	r1, 8013f34 <_sungetc_r+0x60>
 8013f1e:	4299      	cmp	r1, r3
 8013f20:	d208      	bcs.n	8013f34 <_sungetc_r+0x60>
 8013f22:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8013f26:	42a9      	cmp	r1, r5
 8013f28:	d104      	bne.n	8013f34 <_sungetc_r+0x60>
 8013f2a:	3b01      	subs	r3, #1
 8013f2c:	3201      	adds	r2, #1
 8013f2e:	6023      	str	r3, [r4, #0]
 8013f30:	6062      	str	r2, [r4, #4]
 8013f32:	e7d5      	b.n	8013ee0 <_sungetc_r+0xc>
 8013f34:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8013f38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013f3c:	6363      	str	r3, [r4, #52]	; 0x34
 8013f3e:	2303      	movs	r3, #3
 8013f40:	63a3      	str	r3, [r4, #56]	; 0x38
 8013f42:	4623      	mov	r3, r4
 8013f44:	f803 5f46 	strb.w	r5, [r3, #70]!
 8013f48:	6023      	str	r3, [r4, #0]
 8013f4a:	2301      	movs	r3, #1
 8013f4c:	e7dc      	b.n	8013f08 <_sungetc_r+0x34>

08013f4e <__ssrefill_r>:
 8013f4e:	b510      	push	{r4, lr}
 8013f50:	460c      	mov	r4, r1
 8013f52:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013f54:	b169      	cbz	r1, 8013f72 <__ssrefill_r+0x24>
 8013f56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013f5a:	4299      	cmp	r1, r3
 8013f5c:	d001      	beq.n	8013f62 <__ssrefill_r+0x14>
 8013f5e:	f7fc f881 	bl	8010064 <_free_r>
 8013f62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013f64:	6063      	str	r3, [r4, #4]
 8013f66:	2000      	movs	r0, #0
 8013f68:	6360      	str	r0, [r4, #52]	; 0x34
 8013f6a:	b113      	cbz	r3, 8013f72 <__ssrefill_r+0x24>
 8013f6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013f6e:	6023      	str	r3, [r4, #0]
 8013f70:	bd10      	pop	{r4, pc}
 8013f72:	6923      	ldr	r3, [r4, #16]
 8013f74:	6023      	str	r3, [r4, #0]
 8013f76:	2300      	movs	r3, #0
 8013f78:	6063      	str	r3, [r4, #4]
 8013f7a:	89a3      	ldrh	r3, [r4, #12]
 8013f7c:	f043 0320 	orr.w	r3, r3, #32
 8013f80:	81a3      	strh	r3, [r4, #12]
 8013f82:	f04f 30ff 	mov.w	r0, #4294967295
 8013f86:	e7f3      	b.n	8013f70 <__ssrefill_r+0x22>

08013f88 <__ssvfiscanf_r>:
 8013f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f8c:	460c      	mov	r4, r1
 8013f8e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8013f92:	2100      	movs	r1, #0
 8013f94:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8013f98:	49b2      	ldr	r1, [pc, #712]	; (8014264 <__ssvfiscanf_r+0x2dc>)
 8013f9a:	91a0      	str	r1, [sp, #640]	; 0x280
 8013f9c:	f10d 0804 	add.w	r8, sp, #4
 8013fa0:	49b1      	ldr	r1, [pc, #708]	; (8014268 <__ssvfiscanf_r+0x2e0>)
 8013fa2:	4fb2      	ldr	r7, [pc, #712]	; (801426c <__ssvfiscanf_r+0x2e4>)
 8013fa4:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8014270 <__ssvfiscanf_r+0x2e8>
 8013fa8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8013fac:	4606      	mov	r6, r0
 8013fae:	91a1      	str	r1, [sp, #644]	; 0x284
 8013fb0:	9300      	str	r3, [sp, #0]
 8013fb2:	f892 a000 	ldrb.w	sl, [r2]
 8013fb6:	f1ba 0f00 	cmp.w	sl, #0
 8013fba:	f000 8151 	beq.w	8014260 <__ssvfiscanf_r+0x2d8>
 8013fbe:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8013fc2:	f013 0308 	ands.w	r3, r3, #8
 8013fc6:	f102 0501 	add.w	r5, r2, #1
 8013fca:	d019      	beq.n	8014000 <__ssvfiscanf_r+0x78>
 8013fcc:	6863      	ldr	r3, [r4, #4]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	dd0f      	ble.n	8013ff2 <__ssvfiscanf_r+0x6a>
 8013fd2:	6823      	ldr	r3, [r4, #0]
 8013fd4:	781a      	ldrb	r2, [r3, #0]
 8013fd6:	5cba      	ldrb	r2, [r7, r2]
 8013fd8:	0712      	lsls	r2, r2, #28
 8013fda:	d401      	bmi.n	8013fe0 <__ssvfiscanf_r+0x58>
 8013fdc:	462a      	mov	r2, r5
 8013fde:	e7e8      	b.n	8013fb2 <__ssvfiscanf_r+0x2a>
 8013fe0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013fe2:	3201      	adds	r2, #1
 8013fe4:	9245      	str	r2, [sp, #276]	; 0x114
 8013fe6:	6862      	ldr	r2, [r4, #4]
 8013fe8:	3301      	adds	r3, #1
 8013fea:	3a01      	subs	r2, #1
 8013fec:	6062      	str	r2, [r4, #4]
 8013fee:	6023      	str	r3, [r4, #0]
 8013ff0:	e7ec      	b.n	8013fcc <__ssvfiscanf_r+0x44>
 8013ff2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013ff4:	4621      	mov	r1, r4
 8013ff6:	4630      	mov	r0, r6
 8013ff8:	4798      	blx	r3
 8013ffa:	2800      	cmp	r0, #0
 8013ffc:	d0e9      	beq.n	8013fd2 <__ssvfiscanf_r+0x4a>
 8013ffe:	e7ed      	b.n	8013fdc <__ssvfiscanf_r+0x54>
 8014000:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8014004:	f040 8083 	bne.w	801410e <__ssvfiscanf_r+0x186>
 8014008:	9341      	str	r3, [sp, #260]	; 0x104
 801400a:	9343      	str	r3, [sp, #268]	; 0x10c
 801400c:	7853      	ldrb	r3, [r2, #1]
 801400e:	2b2a      	cmp	r3, #42	; 0x2a
 8014010:	bf02      	ittt	eq
 8014012:	2310      	moveq	r3, #16
 8014014:	1c95      	addeq	r5, r2, #2
 8014016:	9341      	streq	r3, [sp, #260]	; 0x104
 8014018:	220a      	movs	r2, #10
 801401a:	46ab      	mov	fp, r5
 801401c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8014020:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8014024:	2b09      	cmp	r3, #9
 8014026:	d91d      	bls.n	8014064 <__ssvfiscanf_r+0xdc>
 8014028:	4891      	ldr	r0, [pc, #580]	; (8014270 <__ssvfiscanf_r+0x2e8>)
 801402a:	2203      	movs	r2, #3
 801402c:	f7ec f8d8 	bl	80001e0 <memchr>
 8014030:	b140      	cbz	r0, 8014044 <__ssvfiscanf_r+0xbc>
 8014032:	2301      	movs	r3, #1
 8014034:	eba0 0009 	sub.w	r0, r0, r9
 8014038:	fa03 f000 	lsl.w	r0, r3, r0
 801403c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801403e:	4318      	orrs	r0, r3
 8014040:	9041      	str	r0, [sp, #260]	; 0x104
 8014042:	465d      	mov	r5, fp
 8014044:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014048:	2b78      	cmp	r3, #120	; 0x78
 801404a:	d806      	bhi.n	801405a <__ssvfiscanf_r+0xd2>
 801404c:	2b57      	cmp	r3, #87	; 0x57
 801404e:	d810      	bhi.n	8014072 <__ssvfiscanf_r+0xea>
 8014050:	2b25      	cmp	r3, #37	; 0x25
 8014052:	d05c      	beq.n	801410e <__ssvfiscanf_r+0x186>
 8014054:	d856      	bhi.n	8014104 <__ssvfiscanf_r+0x17c>
 8014056:	2b00      	cmp	r3, #0
 8014058:	d074      	beq.n	8014144 <__ssvfiscanf_r+0x1bc>
 801405a:	2303      	movs	r3, #3
 801405c:	9347      	str	r3, [sp, #284]	; 0x11c
 801405e:	230a      	movs	r3, #10
 8014060:	9342      	str	r3, [sp, #264]	; 0x108
 8014062:	e081      	b.n	8014168 <__ssvfiscanf_r+0x1e0>
 8014064:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8014066:	fb02 1303 	mla	r3, r2, r3, r1
 801406a:	3b30      	subs	r3, #48	; 0x30
 801406c:	9343      	str	r3, [sp, #268]	; 0x10c
 801406e:	465d      	mov	r5, fp
 8014070:	e7d3      	b.n	801401a <__ssvfiscanf_r+0x92>
 8014072:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8014076:	2a20      	cmp	r2, #32
 8014078:	d8ef      	bhi.n	801405a <__ssvfiscanf_r+0xd2>
 801407a:	a101      	add	r1, pc, #4	; (adr r1, 8014080 <__ssvfiscanf_r+0xf8>)
 801407c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014080:	08014153 	.word	0x08014153
 8014084:	0801405b 	.word	0x0801405b
 8014088:	0801405b 	.word	0x0801405b
 801408c:	080141b1 	.word	0x080141b1
 8014090:	0801405b 	.word	0x0801405b
 8014094:	0801405b 	.word	0x0801405b
 8014098:	0801405b 	.word	0x0801405b
 801409c:	0801405b 	.word	0x0801405b
 80140a0:	0801405b 	.word	0x0801405b
 80140a4:	0801405b 	.word	0x0801405b
 80140a8:	0801405b 	.word	0x0801405b
 80140ac:	080141c7 	.word	0x080141c7
 80140b0:	0801419d 	.word	0x0801419d
 80140b4:	0801410b 	.word	0x0801410b
 80140b8:	0801410b 	.word	0x0801410b
 80140bc:	0801410b 	.word	0x0801410b
 80140c0:	0801405b 	.word	0x0801405b
 80140c4:	080141a1 	.word	0x080141a1
 80140c8:	0801405b 	.word	0x0801405b
 80140cc:	0801405b 	.word	0x0801405b
 80140d0:	0801405b 	.word	0x0801405b
 80140d4:	0801405b 	.word	0x0801405b
 80140d8:	080141d7 	.word	0x080141d7
 80140dc:	080141a9 	.word	0x080141a9
 80140e0:	0801414b 	.word	0x0801414b
 80140e4:	0801405b 	.word	0x0801405b
 80140e8:	0801405b 	.word	0x0801405b
 80140ec:	080141d3 	.word	0x080141d3
 80140f0:	0801405b 	.word	0x0801405b
 80140f4:	0801419d 	.word	0x0801419d
 80140f8:	0801405b 	.word	0x0801405b
 80140fc:	0801405b 	.word	0x0801405b
 8014100:	08014153 	.word	0x08014153
 8014104:	3b45      	subs	r3, #69	; 0x45
 8014106:	2b02      	cmp	r3, #2
 8014108:	d8a7      	bhi.n	801405a <__ssvfiscanf_r+0xd2>
 801410a:	2305      	movs	r3, #5
 801410c:	e02b      	b.n	8014166 <__ssvfiscanf_r+0x1de>
 801410e:	6863      	ldr	r3, [r4, #4]
 8014110:	2b00      	cmp	r3, #0
 8014112:	dd0d      	ble.n	8014130 <__ssvfiscanf_r+0x1a8>
 8014114:	6823      	ldr	r3, [r4, #0]
 8014116:	781a      	ldrb	r2, [r3, #0]
 8014118:	4552      	cmp	r2, sl
 801411a:	f040 80a1 	bne.w	8014260 <__ssvfiscanf_r+0x2d8>
 801411e:	3301      	adds	r3, #1
 8014120:	6862      	ldr	r2, [r4, #4]
 8014122:	6023      	str	r3, [r4, #0]
 8014124:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8014126:	3a01      	subs	r2, #1
 8014128:	3301      	adds	r3, #1
 801412a:	6062      	str	r2, [r4, #4]
 801412c:	9345      	str	r3, [sp, #276]	; 0x114
 801412e:	e755      	b.n	8013fdc <__ssvfiscanf_r+0x54>
 8014130:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014132:	4621      	mov	r1, r4
 8014134:	4630      	mov	r0, r6
 8014136:	4798      	blx	r3
 8014138:	2800      	cmp	r0, #0
 801413a:	d0eb      	beq.n	8014114 <__ssvfiscanf_r+0x18c>
 801413c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801413e:	2800      	cmp	r0, #0
 8014140:	f040 8084 	bne.w	801424c <__ssvfiscanf_r+0x2c4>
 8014144:	f04f 30ff 	mov.w	r0, #4294967295
 8014148:	e086      	b.n	8014258 <__ssvfiscanf_r+0x2d0>
 801414a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801414c:	f042 0220 	orr.w	r2, r2, #32
 8014150:	9241      	str	r2, [sp, #260]	; 0x104
 8014152:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014158:	9241      	str	r2, [sp, #260]	; 0x104
 801415a:	2210      	movs	r2, #16
 801415c:	2b6f      	cmp	r3, #111	; 0x6f
 801415e:	9242      	str	r2, [sp, #264]	; 0x108
 8014160:	bf34      	ite	cc
 8014162:	2303      	movcc	r3, #3
 8014164:	2304      	movcs	r3, #4
 8014166:	9347      	str	r3, [sp, #284]	; 0x11c
 8014168:	6863      	ldr	r3, [r4, #4]
 801416a:	2b00      	cmp	r3, #0
 801416c:	dd41      	ble.n	80141f2 <__ssvfiscanf_r+0x26a>
 801416e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014170:	0659      	lsls	r1, r3, #25
 8014172:	d404      	bmi.n	801417e <__ssvfiscanf_r+0x1f6>
 8014174:	6823      	ldr	r3, [r4, #0]
 8014176:	781a      	ldrb	r2, [r3, #0]
 8014178:	5cba      	ldrb	r2, [r7, r2]
 801417a:	0712      	lsls	r2, r2, #28
 801417c:	d440      	bmi.n	8014200 <__ssvfiscanf_r+0x278>
 801417e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8014180:	2b02      	cmp	r3, #2
 8014182:	dc4f      	bgt.n	8014224 <__ssvfiscanf_r+0x29c>
 8014184:	466b      	mov	r3, sp
 8014186:	4622      	mov	r2, r4
 8014188:	a941      	add	r1, sp, #260	; 0x104
 801418a:	4630      	mov	r0, r6
 801418c:	f000 f874 	bl	8014278 <_scanf_chars>
 8014190:	2801      	cmp	r0, #1
 8014192:	d065      	beq.n	8014260 <__ssvfiscanf_r+0x2d8>
 8014194:	2802      	cmp	r0, #2
 8014196:	f47f af21 	bne.w	8013fdc <__ssvfiscanf_r+0x54>
 801419a:	e7cf      	b.n	801413c <__ssvfiscanf_r+0x1b4>
 801419c:	220a      	movs	r2, #10
 801419e:	e7dd      	b.n	801415c <__ssvfiscanf_r+0x1d4>
 80141a0:	2300      	movs	r3, #0
 80141a2:	9342      	str	r3, [sp, #264]	; 0x108
 80141a4:	2303      	movs	r3, #3
 80141a6:	e7de      	b.n	8014166 <__ssvfiscanf_r+0x1de>
 80141a8:	2308      	movs	r3, #8
 80141aa:	9342      	str	r3, [sp, #264]	; 0x108
 80141ac:	2304      	movs	r3, #4
 80141ae:	e7da      	b.n	8014166 <__ssvfiscanf_r+0x1de>
 80141b0:	4629      	mov	r1, r5
 80141b2:	4640      	mov	r0, r8
 80141b4:	f000 f9c8 	bl	8014548 <__sccl>
 80141b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80141ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80141be:	9341      	str	r3, [sp, #260]	; 0x104
 80141c0:	4605      	mov	r5, r0
 80141c2:	2301      	movs	r3, #1
 80141c4:	e7cf      	b.n	8014166 <__ssvfiscanf_r+0x1de>
 80141c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80141c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80141cc:	9341      	str	r3, [sp, #260]	; 0x104
 80141ce:	2300      	movs	r3, #0
 80141d0:	e7c9      	b.n	8014166 <__ssvfiscanf_r+0x1de>
 80141d2:	2302      	movs	r3, #2
 80141d4:	e7c7      	b.n	8014166 <__ssvfiscanf_r+0x1de>
 80141d6:	9841      	ldr	r0, [sp, #260]	; 0x104
 80141d8:	06c3      	lsls	r3, r0, #27
 80141da:	f53f aeff 	bmi.w	8013fdc <__ssvfiscanf_r+0x54>
 80141de:	9b00      	ldr	r3, [sp, #0]
 80141e0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80141e2:	1d19      	adds	r1, r3, #4
 80141e4:	9100      	str	r1, [sp, #0]
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	07c0      	lsls	r0, r0, #31
 80141ea:	bf4c      	ite	mi
 80141ec:	801a      	strhmi	r2, [r3, #0]
 80141ee:	601a      	strpl	r2, [r3, #0]
 80141f0:	e6f4      	b.n	8013fdc <__ssvfiscanf_r+0x54>
 80141f2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80141f4:	4621      	mov	r1, r4
 80141f6:	4630      	mov	r0, r6
 80141f8:	4798      	blx	r3
 80141fa:	2800      	cmp	r0, #0
 80141fc:	d0b7      	beq.n	801416e <__ssvfiscanf_r+0x1e6>
 80141fe:	e79d      	b.n	801413c <__ssvfiscanf_r+0x1b4>
 8014200:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014202:	3201      	adds	r2, #1
 8014204:	9245      	str	r2, [sp, #276]	; 0x114
 8014206:	6862      	ldr	r2, [r4, #4]
 8014208:	3a01      	subs	r2, #1
 801420a:	2a00      	cmp	r2, #0
 801420c:	6062      	str	r2, [r4, #4]
 801420e:	dd02      	ble.n	8014216 <__ssvfiscanf_r+0x28e>
 8014210:	3301      	adds	r3, #1
 8014212:	6023      	str	r3, [r4, #0]
 8014214:	e7ae      	b.n	8014174 <__ssvfiscanf_r+0x1ec>
 8014216:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014218:	4621      	mov	r1, r4
 801421a:	4630      	mov	r0, r6
 801421c:	4798      	blx	r3
 801421e:	2800      	cmp	r0, #0
 8014220:	d0a8      	beq.n	8014174 <__ssvfiscanf_r+0x1ec>
 8014222:	e78b      	b.n	801413c <__ssvfiscanf_r+0x1b4>
 8014224:	2b04      	cmp	r3, #4
 8014226:	dc06      	bgt.n	8014236 <__ssvfiscanf_r+0x2ae>
 8014228:	466b      	mov	r3, sp
 801422a:	4622      	mov	r2, r4
 801422c:	a941      	add	r1, sp, #260	; 0x104
 801422e:	4630      	mov	r0, r6
 8014230:	f000 f87a 	bl	8014328 <_scanf_i>
 8014234:	e7ac      	b.n	8014190 <__ssvfiscanf_r+0x208>
 8014236:	4b0f      	ldr	r3, [pc, #60]	; (8014274 <__ssvfiscanf_r+0x2ec>)
 8014238:	2b00      	cmp	r3, #0
 801423a:	f43f aecf 	beq.w	8013fdc <__ssvfiscanf_r+0x54>
 801423e:	466b      	mov	r3, sp
 8014240:	4622      	mov	r2, r4
 8014242:	a941      	add	r1, sp, #260	; 0x104
 8014244:	4630      	mov	r0, r6
 8014246:	f7fc fc21 	bl	8010a8c <_scanf_float>
 801424a:	e7a1      	b.n	8014190 <__ssvfiscanf_r+0x208>
 801424c:	89a3      	ldrh	r3, [r4, #12]
 801424e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8014252:	bf18      	it	ne
 8014254:	f04f 30ff 	movne.w	r0, #4294967295
 8014258:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801425c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014260:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014262:	e7f9      	b.n	8014258 <__ssvfiscanf_r+0x2d0>
 8014264:	08013ed5 	.word	0x08013ed5
 8014268:	08013f4f 	.word	0x08013f4f
 801426c:	08016c01 	.word	0x08016c01
 8014270:	08016f7a 	.word	0x08016f7a
 8014274:	08010a8d 	.word	0x08010a8d

08014278 <_scanf_chars>:
 8014278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801427c:	4615      	mov	r5, r2
 801427e:	688a      	ldr	r2, [r1, #8]
 8014280:	4680      	mov	r8, r0
 8014282:	460c      	mov	r4, r1
 8014284:	b932      	cbnz	r2, 8014294 <_scanf_chars+0x1c>
 8014286:	698a      	ldr	r2, [r1, #24]
 8014288:	2a00      	cmp	r2, #0
 801428a:	bf0c      	ite	eq
 801428c:	2201      	moveq	r2, #1
 801428e:	f04f 32ff 	movne.w	r2, #4294967295
 8014292:	608a      	str	r2, [r1, #8]
 8014294:	6822      	ldr	r2, [r4, #0]
 8014296:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8014324 <_scanf_chars+0xac>
 801429a:	06d1      	lsls	r1, r2, #27
 801429c:	bf5f      	itttt	pl
 801429e:	681a      	ldrpl	r2, [r3, #0]
 80142a0:	1d11      	addpl	r1, r2, #4
 80142a2:	6019      	strpl	r1, [r3, #0]
 80142a4:	6816      	ldrpl	r6, [r2, #0]
 80142a6:	2700      	movs	r7, #0
 80142a8:	69a0      	ldr	r0, [r4, #24]
 80142aa:	b188      	cbz	r0, 80142d0 <_scanf_chars+0x58>
 80142ac:	2801      	cmp	r0, #1
 80142ae:	d107      	bne.n	80142c0 <_scanf_chars+0x48>
 80142b0:	682b      	ldr	r3, [r5, #0]
 80142b2:	781a      	ldrb	r2, [r3, #0]
 80142b4:	6963      	ldr	r3, [r4, #20]
 80142b6:	5c9b      	ldrb	r3, [r3, r2]
 80142b8:	b953      	cbnz	r3, 80142d0 <_scanf_chars+0x58>
 80142ba:	bb27      	cbnz	r7, 8014306 <_scanf_chars+0x8e>
 80142bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80142c0:	2802      	cmp	r0, #2
 80142c2:	d120      	bne.n	8014306 <_scanf_chars+0x8e>
 80142c4:	682b      	ldr	r3, [r5, #0]
 80142c6:	781b      	ldrb	r3, [r3, #0]
 80142c8:	f813 3009 	ldrb.w	r3, [r3, r9]
 80142cc:	071b      	lsls	r3, r3, #28
 80142ce:	d41a      	bmi.n	8014306 <_scanf_chars+0x8e>
 80142d0:	6823      	ldr	r3, [r4, #0]
 80142d2:	06da      	lsls	r2, r3, #27
 80142d4:	bf5e      	ittt	pl
 80142d6:	682b      	ldrpl	r3, [r5, #0]
 80142d8:	781b      	ldrbpl	r3, [r3, #0]
 80142da:	f806 3b01 	strbpl.w	r3, [r6], #1
 80142de:	682a      	ldr	r2, [r5, #0]
 80142e0:	686b      	ldr	r3, [r5, #4]
 80142e2:	3201      	adds	r2, #1
 80142e4:	602a      	str	r2, [r5, #0]
 80142e6:	68a2      	ldr	r2, [r4, #8]
 80142e8:	3b01      	subs	r3, #1
 80142ea:	3a01      	subs	r2, #1
 80142ec:	606b      	str	r3, [r5, #4]
 80142ee:	3701      	adds	r7, #1
 80142f0:	60a2      	str	r2, [r4, #8]
 80142f2:	b142      	cbz	r2, 8014306 <_scanf_chars+0x8e>
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	dcd7      	bgt.n	80142a8 <_scanf_chars+0x30>
 80142f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80142fc:	4629      	mov	r1, r5
 80142fe:	4640      	mov	r0, r8
 8014300:	4798      	blx	r3
 8014302:	2800      	cmp	r0, #0
 8014304:	d0d0      	beq.n	80142a8 <_scanf_chars+0x30>
 8014306:	6823      	ldr	r3, [r4, #0]
 8014308:	f013 0310 	ands.w	r3, r3, #16
 801430c:	d105      	bne.n	801431a <_scanf_chars+0xa2>
 801430e:	68e2      	ldr	r2, [r4, #12]
 8014310:	3201      	adds	r2, #1
 8014312:	60e2      	str	r2, [r4, #12]
 8014314:	69a2      	ldr	r2, [r4, #24]
 8014316:	b102      	cbz	r2, 801431a <_scanf_chars+0xa2>
 8014318:	7033      	strb	r3, [r6, #0]
 801431a:	6923      	ldr	r3, [r4, #16]
 801431c:	441f      	add	r7, r3
 801431e:	6127      	str	r7, [r4, #16]
 8014320:	2000      	movs	r0, #0
 8014322:	e7cb      	b.n	80142bc <_scanf_chars+0x44>
 8014324:	08016c01 	.word	0x08016c01

08014328 <_scanf_i>:
 8014328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801432c:	4698      	mov	r8, r3
 801432e:	4b74      	ldr	r3, [pc, #464]	; (8014500 <_scanf_i+0x1d8>)
 8014330:	460c      	mov	r4, r1
 8014332:	4682      	mov	sl, r0
 8014334:	4616      	mov	r6, r2
 8014336:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801433a:	b087      	sub	sp, #28
 801433c:	ab03      	add	r3, sp, #12
 801433e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014342:	4b70      	ldr	r3, [pc, #448]	; (8014504 <_scanf_i+0x1dc>)
 8014344:	69a1      	ldr	r1, [r4, #24]
 8014346:	4a70      	ldr	r2, [pc, #448]	; (8014508 <_scanf_i+0x1e0>)
 8014348:	2903      	cmp	r1, #3
 801434a:	bf18      	it	ne
 801434c:	461a      	movne	r2, r3
 801434e:	68a3      	ldr	r3, [r4, #8]
 8014350:	9201      	str	r2, [sp, #4]
 8014352:	1e5a      	subs	r2, r3, #1
 8014354:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8014358:	bf88      	it	hi
 801435a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801435e:	4627      	mov	r7, r4
 8014360:	bf82      	ittt	hi
 8014362:	eb03 0905 	addhi.w	r9, r3, r5
 8014366:	f240 135d 	movwhi	r3, #349	; 0x15d
 801436a:	60a3      	strhi	r3, [r4, #8]
 801436c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8014370:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8014374:	bf98      	it	ls
 8014376:	f04f 0900 	movls.w	r9, #0
 801437a:	6023      	str	r3, [r4, #0]
 801437c:	463d      	mov	r5, r7
 801437e:	f04f 0b00 	mov.w	fp, #0
 8014382:	6831      	ldr	r1, [r6, #0]
 8014384:	ab03      	add	r3, sp, #12
 8014386:	7809      	ldrb	r1, [r1, #0]
 8014388:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801438c:	2202      	movs	r2, #2
 801438e:	f7eb ff27 	bl	80001e0 <memchr>
 8014392:	b328      	cbz	r0, 80143e0 <_scanf_i+0xb8>
 8014394:	f1bb 0f01 	cmp.w	fp, #1
 8014398:	d159      	bne.n	801444e <_scanf_i+0x126>
 801439a:	6862      	ldr	r2, [r4, #4]
 801439c:	b92a      	cbnz	r2, 80143aa <_scanf_i+0x82>
 801439e:	6822      	ldr	r2, [r4, #0]
 80143a0:	2308      	movs	r3, #8
 80143a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80143a6:	6063      	str	r3, [r4, #4]
 80143a8:	6022      	str	r2, [r4, #0]
 80143aa:	6822      	ldr	r2, [r4, #0]
 80143ac:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80143b0:	6022      	str	r2, [r4, #0]
 80143b2:	68a2      	ldr	r2, [r4, #8]
 80143b4:	1e51      	subs	r1, r2, #1
 80143b6:	60a1      	str	r1, [r4, #8]
 80143b8:	b192      	cbz	r2, 80143e0 <_scanf_i+0xb8>
 80143ba:	6832      	ldr	r2, [r6, #0]
 80143bc:	1c51      	adds	r1, r2, #1
 80143be:	6031      	str	r1, [r6, #0]
 80143c0:	7812      	ldrb	r2, [r2, #0]
 80143c2:	f805 2b01 	strb.w	r2, [r5], #1
 80143c6:	6872      	ldr	r2, [r6, #4]
 80143c8:	3a01      	subs	r2, #1
 80143ca:	2a00      	cmp	r2, #0
 80143cc:	6072      	str	r2, [r6, #4]
 80143ce:	dc07      	bgt.n	80143e0 <_scanf_i+0xb8>
 80143d0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80143d4:	4631      	mov	r1, r6
 80143d6:	4650      	mov	r0, sl
 80143d8:	4790      	blx	r2
 80143da:	2800      	cmp	r0, #0
 80143dc:	f040 8085 	bne.w	80144ea <_scanf_i+0x1c2>
 80143e0:	f10b 0b01 	add.w	fp, fp, #1
 80143e4:	f1bb 0f03 	cmp.w	fp, #3
 80143e8:	d1cb      	bne.n	8014382 <_scanf_i+0x5a>
 80143ea:	6863      	ldr	r3, [r4, #4]
 80143ec:	b90b      	cbnz	r3, 80143f2 <_scanf_i+0xca>
 80143ee:	230a      	movs	r3, #10
 80143f0:	6063      	str	r3, [r4, #4]
 80143f2:	6863      	ldr	r3, [r4, #4]
 80143f4:	4945      	ldr	r1, [pc, #276]	; (801450c <_scanf_i+0x1e4>)
 80143f6:	6960      	ldr	r0, [r4, #20]
 80143f8:	1ac9      	subs	r1, r1, r3
 80143fa:	f000 f8a5 	bl	8014548 <__sccl>
 80143fe:	f04f 0b00 	mov.w	fp, #0
 8014402:	68a3      	ldr	r3, [r4, #8]
 8014404:	6822      	ldr	r2, [r4, #0]
 8014406:	2b00      	cmp	r3, #0
 8014408:	d03d      	beq.n	8014486 <_scanf_i+0x15e>
 801440a:	6831      	ldr	r1, [r6, #0]
 801440c:	6960      	ldr	r0, [r4, #20]
 801440e:	f891 c000 	ldrb.w	ip, [r1]
 8014412:	f810 000c 	ldrb.w	r0, [r0, ip]
 8014416:	2800      	cmp	r0, #0
 8014418:	d035      	beq.n	8014486 <_scanf_i+0x15e>
 801441a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801441e:	d124      	bne.n	801446a <_scanf_i+0x142>
 8014420:	0510      	lsls	r0, r2, #20
 8014422:	d522      	bpl.n	801446a <_scanf_i+0x142>
 8014424:	f10b 0b01 	add.w	fp, fp, #1
 8014428:	f1b9 0f00 	cmp.w	r9, #0
 801442c:	d003      	beq.n	8014436 <_scanf_i+0x10e>
 801442e:	3301      	adds	r3, #1
 8014430:	f109 39ff 	add.w	r9, r9, #4294967295
 8014434:	60a3      	str	r3, [r4, #8]
 8014436:	6873      	ldr	r3, [r6, #4]
 8014438:	3b01      	subs	r3, #1
 801443a:	2b00      	cmp	r3, #0
 801443c:	6073      	str	r3, [r6, #4]
 801443e:	dd1b      	ble.n	8014478 <_scanf_i+0x150>
 8014440:	6833      	ldr	r3, [r6, #0]
 8014442:	3301      	adds	r3, #1
 8014444:	6033      	str	r3, [r6, #0]
 8014446:	68a3      	ldr	r3, [r4, #8]
 8014448:	3b01      	subs	r3, #1
 801444a:	60a3      	str	r3, [r4, #8]
 801444c:	e7d9      	b.n	8014402 <_scanf_i+0xda>
 801444e:	f1bb 0f02 	cmp.w	fp, #2
 8014452:	d1ae      	bne.n	80143b2 <_scanf_i+0x8a>
 8014454:	6822      	ldr	r2, [r4, #0]
 8014456:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801445a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801445e:	d1bf      	bne.n	80143e0 <_scanf_i+0xb8>
 8014460:	2310      	movs	r3, #16
 8014462:	6063      	str	r3, [r4, #4]
 8014464:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014468:	e7a2      	b.n	80143b0 <_scanf_i+0x88>
 801446a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801446e:	6022      	str	r2, [r4, #0]
 8014470:	780b      	ldrb	r3, [r1, #0]
 8014472:	f805 3b01 	strb.w	r3, [r5], #1
 8014476:	e7de      	b.n	8014436 <_scanf_i+0x10e>
 8014478:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801447c:	4631      	mov	r1, r6
 801447e:	4650      	mov	r0, sl
 8014480:	4798      	blx	r3
 8014482:	2800      	cmp	r0, #0
 8014484:	d0df      	beq.n	8014446 <_scanf_i+0x11e>
 8014486:	6823      	ldr	r3, [r4, #0]
 8014488:	05d9      	lsls	r1, r3, #23
 801448a:	d50d      	bpl.n	80144a8 <_scanf_i+0x180>
 801448c:	42bd      	cmp	r5, r7
 801448e:	d909      	bls.n	80144a4 <_scanf_i+0x17c>
 8014490:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014494:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014498:	4632      	mov	r2, r6
 801449a:	4650      	mov	r0, sl
 801449c:	4798      	blx	r3
 801449e:	f105 39ff 	add.w	r9, r5, #4294967295
 80144a2:	464d      	mov	r5, r9
 80144a4:	42bd      	cmp	r5, r7
 80144a6:	d028      	beq.n	80144fa <_scanf_i+0x1d2>
 80144a8:	6822      	ldr	r2, [r4, #0]
 80144aa:	f012 0210 	ands.w	r2, r2, #16
 80144ae:	d113      	bne.n	80144d8 <_scanf_i+0x1b0>
 80144b0:	702a      	strb	r2, [r5, #0]
 80144b2:	6863      	ldr	r3, [r4, #4]
 80144b4:	9e01      	ldr	r6, [sp, #4]
 80144b6:	4639      	mov	r1, r7
 80144b8:	4650      	mov	r0, sl
 80144ba:	47b0      	blx	r6
 80144bc:	f8d8 3000 	ldr.w	r3, [r8]
 80144c0:	6821      	ldr	r1, [r4, #0]
 80144c2:	1d1a      	adds	r2, r3, #4
 80144c4:	f8c8 2000 	str.w	r2, [r8]
 80144c8:	f011 0f20 	tst.w	r1, #32
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	d00f      	beq.n	80144f0 <_scanf_i+0x1c8>
 80144d0:	6018      	str	r0, [r3, #0]
 80144d2:	68e3      	ldr	r3, [r4, #12]
 80144d4:	3301      	adds	r3, #1
 80144d6:	60e3      	str	r3, [r4, #12]
 80144d8:	1bed      	subs	r5, r5, r7
 80144da:	44ab      	add	fp, r5
 80144dc:	6925      	ldr	r5, [r4, #16]
 80144de:	445d      	add	r5, fp
 80144e0:	6125      	str	r5, [r4, #16]
 80144e2:	2000      	movs	r0, #0
 80144e4:	b007      	add	sp, #28
 80144e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144ea:	f04f 0b00 	mov.w	fp, #0
 80144ee:	e7ca      	b.n	8014486 <_scanf_i+0x15e>
 80144f0:	07ca      	lsls	r2, r1, #31
 80144f2:	bf4c      	ite	mi
 80144f4:	8018      	strhmi	r0, [r3, #0]
 80144f6:	6018      	strpl	r0, [r3, #0]
 80144f8:	e7eb      	b.n	80144d2 <_scanf_i+0x1aa>
 80144fa:	2001      	movs	r0, #1
 80144fc:	e7f2      	b.n	80144e4 <_scanf_i+0x1bc>
 80144fe:	bf00      	nop
 8014500:	08015458 	.word	0x08015458
 8014504:	080146b5 	.word	0x080146b5
 8014508:	08011e09 	.word	0x08011e09
 801450c:	08016f9e 	.word	0x08016f9e

08014510 <_read_r>:
 8014510:	b538      	push	{r3, r4, r5, lr}
 8014512:	4d07      	ldr	r5, [pc, #28]	; (8014530 <_read_r+0x20>)
 8014514:	4604      	mov	r4, r0
 8014516:	4608      	mov	r0, r1
 8014518:	4611      	mov	r1, r2
 801451a:	2200      	movs	r2, #0
 801451c:	602a      	str	r2, [r5, #0]
 801451e:	461a      	mov	r2, r3
 8014520:	f7ee fbee 	bl	8002d00 <_read>
 8014524:	1c43      	adds	r3, r0, #1
 8014526:	d102      	bne.n	801452e <_read_r+0x1e>
 8014528:	682b      	ldr	r3, [r5, #0]
 801452a:	b103      	cbz	r3, 801452e <_read_r+0x1e>
 801452c:	6023      	str	r3, [r4, #0]
 801452e:	bd38      	pop	{r3, r4, r5, pc}
 8014530:	20005b18 	.word	0x20005b18
 8014534:	00000000 	.word	0x00000000

08014538 <nan>:
 8014538:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014540 <nan+0x8>
 801453c:	4770      	bx	lr
 801453e:	bf00      	nop
 8014540:	00000000 	.word	0x00000000
 8014544:	7ff80000 	.word	0x7ff80000

08014548 <__sccl>:
 8014548:	b570      	push	{r4, r5, r6, lr}
 801454a:	780b      	ldrb	r3, [r1, #0]
 801454c:	4604      	mov	r4, r0
 801454e:	2b5e      	cmp	r3, #94	; 0x5e
 8014550:	bf0b      	itete	eq
 8014552:	784b      	ldrbeq	r3, [r1, #1]
 8014554:	1c48      	addne	r0, r1, #1
 8014556:	1c88      	addeq	r0, r1, #2
 8014558:	2200      	movne	r2, #0
 801455a:	bf08      	it	eq
 801455c:	2201      	moveq	r2, #1
 801455e:	1e61      	subs	r1, r4, #1
 8014560:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8014564:	f801 2f01 	strb.w	r2, [r1, #1]!
 8014568:	42a9      	cmp	r1, r5
 801456a:	d1fb      	bne.n	8014564 <__sccl+0x1c>
 801456c:	b90b      	cbnz	r3, 8014572 <__sccl+0x2a>
 801456e:	3801      	subs	r0, #1
 8014570:	bd70      	pop	{r4, r5, r6, pc}
 8014572:	f082 0101 	eor.w	r1, r2, #1
 8014576:	54e1      	strb	r1, [r4, r3]
 8014578:	1c42      	adds	r2, r0, #1
 801457a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801457e:	2d2d      	cmp	r5, #45	; 0x2d
 8014580:	f102 36ff 	add.w	r6, r2, #4294967295
 8014584:	4610      	mov	r0, r2
 8014586:	d006      	beq.n	8014596 <__sccl+0x4e>
 8014588:	2d5d      	cmp	r5, #93	; 0x5d
 801458a:	d0f1      	beq.n	8014570 <__sccl+0x28>
 801458c:	b90d      	cbnz	r5, 8014592 <__sccl+0x4a>
 801458e:	4630      	mov	r0, r6
 8014590:	e7ee      	b.n	8014570 <__sccl+0x28>
 8014592:	462b      	mov	r3, r5
 8014594:	e7ef      	b.n	8014576 <__sccl+0x2e>
 8014596:	7816      	ldrb	r6, [r2, #0]
 8014598:	2e5d      	cmp	r6, #93	; 0x5d
 801459a:	d0fa      	beq.n	8014592 <__sccl+0x4a>
 801459c:	42b3      	cmp	r3, r6
 801459e:	dcf8      	bgt.n	8014592 <__sccl+0x4a>
 80145a0:	4618      	mov	r0, r3
 80145a2:	3001      	adds	r0, #1
 80145a4:	4286      	cmp	r6, r0
 80145a6:	5421      	strb	r1, [r4, r0]
 80145a8:	dcfb      	bgt.n	80145a2 <__sccl+0x5a>
 80145aa:	43d8      	mvns	r0, r3
 80145ac:	4430      	add	r0, r6
 80145ae:	1c5d      	adds	r5, r3, #1
 80145b0:	42b3      	cmp	r3, r6
 80145b2:	bfa8      	it	ge
 80145b4:	2000      	movge	r0, #0
 80145b6:	182b      	adds	r3, r5, r0
 80145b8:	3202      	adds	r2, #2
 80145ba:	e7de      	b.n	801457a <__sccl+0x32>

080145bc <_strtoul_l.isra.0>:
 80145bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80145c0:	4e3b      	ldr	r6, [pc, #236]	; (80146b0 <_strtoul_l.isra.0+0xf4>)
 80145c2:	4686      	mov	lr, r0
 80145c4:	468c      	mov	ip, r1
 80145c6:	4660      	mov	r0, ip
 80145c8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80145cc:	5da5      	ldrb	r5, [r4, r6]
 80145ce:	f015 0508 	ands.w	r5, r5, #8
 80145d2:	d1f8      	bne.n	80145c6 <_strtoul_l.isra.0+0xa>
 80145d4:	2c2d      	cmp	r4, #45	; 0x2d
 80145d6:	d134      	bne.n	8014642 <_strtoul_l.isra.0+0x86>
 80145d8:	f89c 4000 	ldrb.w	r4, [ip]
 80145dc:	f04f 0801 	mov.w	r8, #1
 80145e0:	f100 0c02 	add.w	ip, r0, #2
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d05e      	beq.n	80146a6 <_strtoul_l.isra.0+0xea>
 80145e8:	2b10      	cmp	r3, #16
 80145ea:	d10c      	bne.n	8014606 <_strtoul_l.isra.0+0x4a>
 80145ec:	2c30      	cmp	r4, #48	; 0x30
 80145ee:	d10a      	bne.n	8014606 <_strtoul_l.isra.0+0x4a>
 80145f0:	f89c 0000 	ldrb.w	r0, [ip]
 80145f4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80145f8:	2858      	cmp	r0, #88	; 0x58
 80145fa:	d14f      	bne.n	801469c <_strtoul_l.isra.0+0xe0>
 80145fc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8014600:	2310      	movs	r3, #16
 8014602:	f10c 0c02 	add.w	ip, ip, #2
 8014606:	f04f 37ff 	mov.w	r7, #4294967295
 801460a:	2500      	movs	r5, #0
 801460c:	fbb7 f7f3 	udiv	r7, r7, r3
 8014610:	fb03 f907 	mul.w	r9, r3, r7
 8014614:	ea6f 0909 	mvn.w	r9, r9
 8014618:	4628      	mov	r0, r5
 801461a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801461e:	2e09      	cmp	r6, #9
 8014620:	d818      	bhi.n	8014654 <_strtoul_l.isra.0+0x98>
 8014622:	4634      	mov	r4, r6
 8014624:	42a3      	cmp	r3, r4
 8014626:	dd24      	ble.n	8014672 <_strtoul_l.isra.0+0xb6>
 8014628:	2d00      	cmp	r5, #0
 801462a:	db1f      	blt.n	801466c <_strtoul_l.isra.0+0xb0>
 801462c:	4287      	cmp	r7, r0
 801462e:	d31d      	bcc.n	801466c <_strtoul_l.isra.0+0xb0>
 8014630:	d101      	bne.n	8014636 <_strtoul_l.isra.0+0x7a>
 8014632:	45a1      	cmp	r9, r4
 8014634:	db1a      	blt.n	801466c <_strtoul_l.isra.0+0xb0>
 8014636:	fb00 4003 	mla	r0, r0, r3, r4
 801463a:	2501      	movs	r5, #1
 801463c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8014640:	e7eb      	b.n	801461a <_strtoul_l.isra.0+0x5e>
 8014642:	2c2b      	cmp	r4, #43	; 0x2b
 8014644:	bf08      	it	eq
 8014646:	f89c 4000 	ldrbeq.w	r4, [ip]
 801464a:	46a8      	mov	r8, r5
 801464c:	bf08      	it	eq
 801464e:	f100 0c02 	addeq.w	ip, r0, #2
 8014652:	e7c7      	b.n	80145e4 <_strtoul_l.isra.0+0x28>
 8014654:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8014658:	2e19      	cmp	r6, #25
 801465a:	d801      	bhi.n	8014660 <_strtoul_l.isra.0+0xa4>
 801465c:	3c37      	subs	r4, #55	; 0x37
 801465e:	e7e1      	b.n	8014624 <_strtoul_l.isra.0+0x68>
 8014660:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8014664:	2e19      	cmp	r6, #25
 8014666:	d804      	bhi.n	8014672 <_strtoul_l.isra.0+0xb6>
 8014668:	3c57      	subs	r4, #87	; 0x57
 801466a:	e7db      	b.n	8014624 <_strtoul_l.isra.0+0x68>
 801466c:	f04f 35ff 	mov.w	r5, #4294967295
 8014670:	e7e4      	b.n	801463c <_strtoul_l.isra.0+0x80>
 8014672:	2d00      	cmp	r5, #0
 8014674:	da07      	bge.n	8014686 <_strtoul_l.isra.0+0xca>
 8014676:	2322      	movs	r3, #34	; 0x22
 8014678:	f8ce 3000 	str.w	r3, [lr]
 801467c:	f04f 30ff 	mov.w	r0, #4294967295
 8014680:	b942      	cbnz	r2, 8014694 <_strtoul_l.isra.0+0xd8>
 8014682:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014686:	f1b8 0f00 	cmp.w	r8, #0
 801468a:	d000      	beq.n	801468e <_strtoul_l.isra.0+0xd2>
 801468c:	4240      	negs	r0, r0
 801468e:	2a00      	cmp	r2, #0
 8014690:	d0f7      	beq.n	8014682 <_strtoul_l.isra.0+0xc6>
 8014692:	b10d      	cbz	r5, 8014698 <_strtoul_l.isra.0+0xdc>
 8014694:	f10c 31ff 	add.w	r1, ip, #4294967295
 8014698:	6011      	str	r1, [r2, #0]
 801469a:	e7f2      	b.n	8014682 <_strtoul_l.isra.0+0xc6>
 801469c:	2430      	movs	r4, #48	; 0x30
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d1b1      	bne.n	8014606 <_strtoul_l.isra.0+0x4a>
 80146a2:	2308      	movs	r3, #8
 80146a4:	e7af      	b.n	8014606 <_strtoul_l.isra.0+0x4a>
 80146a6:	2c30      	cmp	r4, #48	; 0x30
 80146a8:	d0a2      	beq.n	80145f0 <_strtoul_l.isra.0+0x34>
 80146aa:	230a      	movs	r3, #10
 80146ac:	e7ab      	b.n	8014606 <_strtoul_l.isra.0+0x4a>
 80146ae:	bf00      	nop
 80146b0:	08016c01 	.word	0x08016c01

080146b4 <_strtoul_r>:
 80146b4:	f7ff bf82 	b.w	80145bc <_strtoul_l.isra.0>

080146b8 <__submore>:
 80146b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146bc:	460c      	mov	r4, r1
 80146be:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80146c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80146c4:	4299      	cmp	r1, r3
 80146c6:	d11d      	bne.n	8014704 <__submore+0x4c>
 80146c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80146cc:	f7fb fd1a 	bl	8010104 <_malloc_r>
 80146d0:	b918      	cbnz	r0, 80146da <__submore+0x22>
 80146d2:	f04f 30ff 	mov.w	r0, #4294967295
 80146d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80146de:	63a3      	str	r3, [r4, #56]	; 0x38
 80146e0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80146e4:	6360      	str	r0, [r4, #52]	; 0x34
 80146e6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80146ea:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80146ee:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80146f2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80146f6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80146fa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80146fe:	6020      	str	r0, [r4, #0]
 8014700:	2000      	movs	r0, #0
 8014702:	e7e8      	b.n	80146d6 <__submore+0x1e>
 8014704:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8014706:	0077      	lsls	r7, r6, #1
 8014708:	463a      	mov	r2, r7
 801470a:	f000 fa07 	bl	8014b1c <_realloc_r>
 801470e:	4605      	mov	r5, r0
 8014710:	2800      	cmp	r0, #0
 8014712:	d0de      	beq.n	80146d2 <__submore+0x1a>
 8014714:	eb00 0806 	add.w	r8, r0, r6
 8014718:	4601      	mov	r1, r0
 801471a:	4632      	mov	r2, r6
 801471c:	4640      	mov	r0, r8
 801471e:	f7fb fc71 	bl	8010004 <memcpy>
 8014722:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8014726:	f8c4 8000 	str.w	r8, [r4]
 801472a:	e7e9      	b.n	8014700 <__submore+0x48>

0801472c <__ascii_wctomb>:
 801472c:	b149      	cbz	r1, 8014742 <__ascii_wctomb+0x16>
 801472e:	2aff      	cmp	r2, #255	; 0xff
 8014730:	bf85      	ittet	hi
 8014732:	238a      	movhi	r3, #138	; 0x8a
 8014734:	6003      	strhi	r3, [r0, #0]
 8014736:	700a      	strbls	r2, [r1, #0]
 8014738:	f04f 30ff 	movhi.w	r0, #4294967295
 801473c:	bf98      	it	ls
 801473e:	2001      	movls	r0, #1
 8014740:	4770      	bx	lr
 8014742:	4608      	mov	r0, r1
 8014744:	4770      	bx	lr
	...

08014748 <__assert_func>:
 8014748:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801474a:	4614      	mov	r4, r2
 801474c:	461a      	mov	r2, r3
 801474e:	4b09      	ldr	r3, [pc, #36]	; (8014774 <__assert_func+0x2c>)
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	4605      	mov	r5, r0
 8014754:	68d8      	ldr	r0, [r3, #12]
 8014756:	b14c      	cbz	r4, 801476c <__assert_func+0x24>
 8014758:	4b07      	ldr	r3, [pc, #28]	; (8014778 <__assert_func+0x30>)
 801475a:	9100      	str	r1, [sp, #0]
 801475c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014760:	4906      	ldr	r1, [pc, #24]	; (801477c <__assert_func+0x34>)
 8014762:	462b      	mov	r3, r5
 8014764:	f000 f9a6 	bl	8014ab4 <fiprintf>
 8014768:	f7fb fc0a 	bl	800ff80 <abort>
 801476c:	4b04      	ldr	r3, [pc, #16]	; (8014780 <__assert_func+0x38>)
 801476e:	461c      	mov	r4, r3
 8014770:	e7f3      	b.n	801475a <__assert_func+0x12>
 8014772:	bf00      	nop
 8014774:	2000003c 	.word	0x2000003c
 8014778:	08016fa0 	.word	0x08016fa0
 801477c:	08016fad 	.word	0x08016fad
 8014780:	08016fdb 	.word	0x08016fdb

08014784 <__sflush_r>:
 8014784:	898a      	ldrh	r2, [r1, #12]
 8014786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801478a:	4605      	mov	r5, r0
 801478c:	0710      	lsls	r0, r2, #28
 801478e:	460c      	mov	r4, r1
 8014790:	d458      	bmi.n	8014844 <__sflush_r+0xc0>
 8014792:	684b      	ldr	r3, [r1, #4]
 8014794:	2b00      	cmp	r3, #0
 8014796:	dc05      	bgt.n	80147a4 <__sflush_r+0x20>
 8014798:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801479a:	2b00      	cmp	r3, #0
 801479c:	dc02      	bgt.n	80147a4 <__sflush_r+0x20>
 801479e:	2000      	movs	r0, #0
 80147a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80147a6:	2e00      	cmp	r6, #0
 80147a8:	d0f9      	beq.n	801479e <__sflush_r+0x1a>
 80147aa:	2300      	movs	r3, #0
 80147ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80147b0:	682f      	ldr	r7, [r5, #0]
 80147b2:	602b      	str	r3, [r5, #0]
 80147b4:	d032      	beq.n	801481c <__sflush_r+0x98>
 80147b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80147b8:	89a3      	ldrh	r3, [r4, #12]
 80147ba:	075a      	lsls	r2, r3, #29
 80147bc:	d505      	bpl.n	80147ca <__sflush_r+0x46>
 80147be:	6863      	ldr	r3, [r4, #4]
 80147c0:	1ac0      	subs	r0, r0, r3
 80147c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80147c4:	b10b      	cbz	r3, 80147ca <__sflush_r+0x46>
 80147c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80147c8:	1ac0      	subs	r0, r0, r3
 80147ca:	2300      	movs	r3, #0
 80147cc:	4602      	mov	r2, r0
 80147ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80147d0:	6a21      	ldr	r1, [r4, #32]
 80147d2:	4628      	mov	r0, r5
 80147d4:	47b0      	blx	r6
 80147d6:	1c43      	adds	r3, r0, #1
 80147d8:	89a3      	ldrh	r3, [r4, #12]
 80147da:	d106      	bne.n	80147ea <__sflush_r+0x66>
 80147dc:	6829      	ldr	r1, [r5, #0]
 80147de:	291d      	cmp	r1, #29
 80147e0:	d82c      	bhi.n	801483c <__sflush_r+0xb8>
 80147e2:	4a2a      	ldr	r2, [pc, #168]	; (801488c <__sflush_r+0x108>)
 80147e4:	40ca      	lsrs	r2, r1
 80147e6:	07d6      	lsls	r6, r2, #31
 80147e8:	d528      	bpl.n	801483c <__sflush_r+0xb8>
 80147ea:	2200      	movs	r2, #0
 80147ec:	6062      	str	r2, [r4, #4]
 80147ee:	04d9      	lsls	r1, r3, #19
 80147f0:	6922      	ldr	r2, [r4, #16]
 80147f2:	6022      	str	r2, [r4, #0]
 80147f4:	d504      	bpl.n	8014800 <__sflush_r+0x7c>
 80147f6:	1c42      	adds	r2, r0, #1
 80147f8:	d101      	bne.n	80147fe <__sflush_r+0x7a>
 80147fa:	682b      	ldr	r3, [r5, #0]
 80147fc:	b903      	cbnz	r3, 8014800 <__sflush_r+0x7c>
 80147fe:	6560      	str	r0, [r4, #84]	; 0x54
 8014800:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014802:	602f      	str	r7, [r5, #0]
 8014804:	2900      	cmp	r1, #0
 8014806:	d0ca      	beq.n	801479e <__sflush_r+0x1a>
 8014808:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801480c:	4299      	cmp	r1, r3
 801480e:	d002      	beq.n	8014816 <__sflush_r+0x92>
 8014810:	4628      	mov	r0, r5
 8014812:	f7fb fc27 	bl	8010064 <_free_r>
 8014816:	2000      	movs	r0, #0
 8014818:	6360      	str	r0, [r4, #52]	; 0x34
 801481a:	e7c1      	b.n	80147a0 <__sflush_r+0x1c>
 801481c:	6a21      	ldr	r1, [r4, #32]
 801481e:	2301      	movs	r3, #1
 8014820:	4628      	mov	r0, r5
 8014822:	47b0      	blx	r6
 8014824:	1c41      	adds	r1, r0, #1
 8014826:	d1c7      	bne.n	80147b8 <__sflush_r+0x34>
 8014828:	682b      	ldr	r3, [r5, #0]
 801482a:	2b00      	cmp	r3, #0
 801482c:	d0c4      	beq.n	80147b8 <__sflush_r+0x34>
 801482e:	2b1d      	cmp	r3, #29
 8014830:	d001      	beq.n	8014836 <__sflush_r+0xb2>
 8014832:	2b16      	cmp	r3, #22
 8014834:	d101      	bne.n	801483a <__sflush_r+0xb6>
 8014836:	602f      	str	r7, [r5, #0]
 8014838:	e7b1      	b.n	801479e <__sflush_r+0x1a>
 801483a:	89a3      	ldrh	r3, [r4, #12]
 801483c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014840:	81a3      	strh	r3, [r4, #12]
 8014842:	e7ad      	b.n	80147a0 <__sflush_r+0x1c>
 8014844:	690f      	ldr	r7, [r1, #16]
 8014846:	2f00      	cmp	r7, #0
 8014848:	d0a9      	beq.n	801479e <__sflush_r+0x1a>
 801484a:	0793      	lsls	r3, r2, #30
 801484c:	680e      	ldr	r6, [r1, #0]
 801484e:	bf08      	it	eq
 8014850:	694b      	ldreq	r3, [r1, #20]
 8014852:	600f      	str	r7, [r1, #0]
 8014854:	bf18      	it	ne
 8014856:	2300      	movne	r3, #0
 8014858:	eba6 0807 	sub.w	r8, r6, r7
 801485c:	608b      	str	r3, [r1, #8]
 801485e:	f1b8 0f00 	cmp.w	r8, #0
 8014862:	dd9c      	ble.n	801479e <__sflush_r+0x1a>
 8014864:	6a21      	ldr	r1, [r4, #32]
 8014866:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014868:	4643      	mov	r3, r8
 801486a:	463a      	mov	r2, r7
 801486c:	4628      	mov	r0, r5
 801486e:	47b0      	blx	r6
 8014870:	2800      	cmp	r0, #0
 8014872:	dc06      	bgt.n	8014882 <__sflush_r+0xfe>
 8014874:	89a3      	ldrh	r3, [r4, #12]
 8014876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801487a:	81a3      	strh	r3, [r4, #12]
 801487c:	f04f 30ff 	mov.w	r0, #4294967295
 8014880:	e78e      	b.n	80147a0 <__sflush_r+0x1c>
 8014882:	4407      	add	r7, r0
 8014884:	eba8 0800 	sub.w	r8, r8, r0
 8014888:	e7e9      	b.n	801485e <__sflush_r+0xda>
 801488a:	bf00      	nop
 801488c:	20400001 	.word	0x20400001

08014890 <_fflush_r>:
 8014890:	b538      	push	{r3, r4, r5, lr}
 8014892:	690b      	ldr	r3, [r1, #16]
 8014894:	4605      	mov	r5, r0
 8014896:	460c      	mov	r4, r1
 8014898:	b913      	cbnz	r3, 80148a0 <_fflush_r+0x10>
 801489a:	2500      	movs	r5, #0
 801489c:	4628      	mov	r0, r5
 801489e:	bd38      	pop	{r3, r4, r5, pc}
 80148a0:	b118      	cbz	r0, 80148aa <_fflush_r+0x1a>
 80148a2:	6983      	ldr	r3, [r0, #24]
 80148a4:	b90b      	cbnz	r3, 80148aa <_fflush_r+0x1a>
 80148a6:	f000 f887 	bl	80149b8 <__sinit>
 80148aa:	4b14      	ldr	r3, [pc, #80]	; (80148fc <_fflush_r+0x6c>)
 80148ac:	429c      	cmp	r4, r3
 80148ae:	d11b      	bne.n	80148e8 <_fflush_r+0x58>
 80148b0:	686c      	ldr	r4, [r5, #4]
 80148b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d0ef      	beq.n	801489a <_fflush_r+0xa>
 80148ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80148bc:	07d0      	lsls	r0, r2, #31
 80148be:	d404      	bmi.n	80148ca <_fflush_r+0x3a>
 80148c0:	0599      	lsls	r1, r3, #22
 80148c2:	d402      	bmi.n	80148ca <_fflush_r+0x3a>
 80148c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80148c6:	f000 f927 	bl	8014b18 <__retarget_lock_acquire_recursive>
 80148ca:	4628      	mov	r0, r5
 80148cc:	4621      	mov	r1, r4
 80148ce:	f7ff ff59 	bl	8014784 <__sflush_r>
 80148d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80148d4:	07da      	lsls	r2, r3, #31
 80148d6:	4605      	mov	r5, r0
 80148d8:	d4e0      	bmi.n	801489c <_fflush_r+0xc>
 80148da:	89a3      	ldrh	r3, [r4, #12]
 80148dc:	059b      	lsls	r3, r3, #22
 80148de:	d4dd      	bmi.n	801489c <_fflush_r+0xc>
 80148e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80148e2:	f000 f91a 	bl	8014b1a <__retarget_lock_release_recursive>
 80148e6:	e7d9      	b.n	801489c <_fflush_r+0xc>
 80148e8:	4b05      	ldr	r3, [pc, #20]	; (8014900 <_fflush_r+0x70>)
 80148ea:	429c      	cmp	r4, r3
 80148ec:	d101      	bne.n	80148f2 <_fflush_r+0x62>
 80148ee:	68ac      	ldr	r4, [r5, #8]
 80148f0:	e7df      	b.n	80148b2 <_fflush_r+0x22>
 80148f2:	4b04      	ldr	r3, [pc, #16]	; (8014904 <_fflush_r+0x74>)
 80148f4:	429c      	cmp	r4, r3
 80148f6:	bf08      	it	eq
 80148f8:	68ec      	ldreq	r4, [r5, #12]
 80148fa:	e7da      	b.n	80148b2 <_fflush_r+0x22>
 80148fc:	08016ffc 	.word	0x08016ffc
 8014900:	0801701c 	.word	0x0801701c
 8014904:	08016fdc 	.word	0x08016fdc

08014908 <std>:
 8014908:	2300      	movs	r3, #0
 801490a:	b510      	push	{r4, lr}
 801490c:	4604      	mov	r4, r0
 801490e:	e9c0 3300 	strd	r3, r3, [r0]
 8014912:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014916:	6083      	str	r3, [r0, #8]
 8014918:	8181      	strh	r1, [r0, #12]
 801491a:	6643      	str	r3, [r0, #100]	; 0x64
 801491c:	81c2      	strh	r2, [r0, #14]
 801491e:	6183      	str	r3, [r0, #24]
 8014920:	4619      	mov	r1, r3
 8014922:	2208      	movs	r2, #8
 8014924:	305c      	adds	r0, #92	; 0x5c
 8014926:	f7fb fb95 	bl	8010054 <memset>
 801492a:	4b05      	ldr	r3, [pc, #20]	; (8014940 <std+0x38>)
 801492c:	6263      	str	r3, [r4, #36]	; 0x24
 801492e:	4b05      	ldr	r3, [pc, #20]	; (8014944 <std+0x3c>)
 8014930:	62a3      	str	r3, [r4, #40]	; 0x28
 8014932:	4b05      	ldr	r3, [pc, #20]	; (8014948 <std+0x40>)
 8014934:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014936:	4b05      	ldr	r3, [pc, #20]	; (801494c <std+0x44>)
 8014938:	6224      	str	r4, [r4, #32]
 801493a:	6323      	str	r3, [r4, #48]	; 0x30
 801493c:	bd10      	pop	{r4, pc}
 801493e:	bf00      	nop
 8014940:	08010ff9 	.word	0x08010ff9
 8014944:	0801101f 	.word	0x0801101f
 8014948:	08011057 	.word	0x08011057
 801494c:	0801107b 	.word	0x0801107b

08014950 <_cleanup_r>:
 8014950:	4901      	ldr	r1, [pc, #4]	; (8014958 <_cleanup_r+0x8>)
 8014952:	f000 b8c1 	b.w	8014ad8 <_fwalk_reent>
 8014956:	bf00      	nop
 8014958:	08014891 	.word	0x08014891

0801495c <__sfmoreglue>:
 801495c:	b570      	push	{r4, r5, r6, lr}
 801495e:	1e4a      	subs	r2, r1, #1
 8014960:	2568      	movs	r5, #104	; 0x68
 8014962:	4355      	muls	r5, r2
 8014964:	460e      	mov	r6, r1
 8014966:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801496a:	f7fb fbcb 	bl	8010104 <_malloc_r>
 801496e:	4604      	mov	r4, r0
 8014970:	b140      	cbz	r0, 8014984 <__sfmoreglue+0x28>
 8014972:	2100      	movs	r1, #0
 8014974:	e9c0 1600 	strd	r1, r6, [r0]
 8014978:	300c      	adds	r0, #12
 801497a:	60a0      	str	r0, [r4, #8]
 801497c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014980:	f7fb fb68 	bl	8010054 <memset>
 8014984:	4620      	mov	r0, r4
 8014986:	bd70      	pop	{r4, r5, r6, pc}

08014988 <__sfp_lock_acquire>:
 8014988:	4801      	ldr	r0, [pc, #4]	; (8014990 <__sfp_lock_acquire+0x8>)
 801498a:	f000 b8c5 	b.w	8014b18 <__retarget_lock_acquire_recursive>
 801498e:	bf00      	nop
 8014990:	20005b24 	.word	0x20005b24

08014994 <__sfp_lock_release>:
 8014994:	4801      	ldr	r0, [pc, #4]	; (801499c <__sfp_lock_release+0x8>)
 8014996:	f000 b8c0 	b.w	8014b1a <__retarget_lock_release_recursive>
 801499a:	bf00      	nop
 801499c:	20005b24 	.word	0x20005b24

080149a0 <__sinit_lock_acquire>:
 80149a0:	4801      	ldr	r0, [pc, #4]	; (80149a8 <__sinit_lock_acquire+0x8>)
 80149a2:	f000 b8b9 	b.w	8014b18 <__retarget_lock_acquire_recursive>
 80149a6:	bf00      	nop
 80149a8:	20005b1f 	.word	0x20005b1f

080149ac <__sinit_lock_release>:
 80149ac:	4801      	ldr	r0, [pc, #4]	; (80149b4 <__sinit_lock_release+0x8>)
 80149ae:	f000 b8b4 	b.w	8014b1a <__retarget_lock_release_recursive>
 80149b2:	bf00      	nop
 80149b4:	20005b1f 	.word	0x20005b1f

080149b8 <__sinit>:
 80149b8:	b510      	push	{r4, lr}
 80149ba:	4604      	mov	r4, r0
 80149bc:	f7ff fff0 	bl	80149a0 <__sinit_lock_acquire>
 80149c0:	69a3      	ldr	r3, [r4, #24]
 80149c2:	b11b      	cbz	r3, 80149cc <__sinit+0x14>
 80149c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80149c8:	f7ff bff0 	b.w	80149ac <__sinit_lock_release>
 80149cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80149d0:	6523      	str	r3, [r4, #80]	; 0x50
 80149d2:	4b13      	ldr	r3, [pc, #76]	; (8014a20 <__sinit+0x68>)
 80149d4:	4a13      	ldr	r2, [pc, #76]	; (8014a24 <__sinit+0x6c>)
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80149da:	42a3      	cmp	r3, r4
 80149dc:	bf04      	itt	eq
 80149de:	2301      	moveq	r3, #1
 80149e0:	61a3      	streq	r3, [r4, #24]
 80149e2:	4620      	mov	r0, r4
 80149e4:	f000 f820 	bl	8014a28 <__sfp>
 80149e8:	6060      	str	r0, [r4, #4]
 80149ea:	4620      	mov	r0, r4
 80149ec:	f000 f81c 	bl	8014a28 <__sfp>
 80149f0:	60a0      	str	r0, [r4, #8]
 80149f2:	4620      	mov	r0, r4
 80149f4:	f000 f818 	bl	8014a28 <__sfp>
 80149f8:	2200      	movs	r2, #0
 80149fa:	60e0      	str	r0, [r4, #12]
 80149fc:	2104      	movs	r1, #4
 80149fe:	6860      	ldr	r0, [r4, #4]
 8014a00:	f7ff ff82 	bl	8014908 <std>
 8014a04:	68a0      	ldr	r0, [r4, #8]
 8014a06:	2201      	movs	r2, #1
 8014a08:	2109      	movs	r1, #9
 8014a0a:	f7ff ff7d 	bl	8014908 <std>
 8014a0e:	68e0      	ldr	r0, [r4, #12]
 8014a10:	2202      	movs	r2, #2
 8014a12:	2112      	movs	r1, #18
 8014a14:	f7ff ff78 	bl	8014908 <std>
 8014a18:	2301      	movs	r3, #1
 8014a1a:	61a3      	str	r3, [r4, #24]
 8014a1c:	e7d2      	b.n	80149c4 <__sinit+0xc>
 8014a1e:	bf00      	nop
 8014a20:	08016b70 	.word	0x08016b70
 8014a24:	08014951 	.word	0x08014951

08014a28 <__sfp>:
 8014a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a2a:	4607      	mov	r7, r0
 8014a2c:	f7ff ffac 	bl	8014988 <__sfp_lock_acquire>
 8014a30:	4b1e      	ldr	r3, [pc, #120]	; (8014aac <__sfp+0x84>)
 8014a32:	681e      	ldr	r6, [r3, #0]
 8014a34:	69b3      	ldr	r3, [r6, #24]
 8014a36:	b913      	cbnz	r3, 8014a3e <__sfp+0x16>
 8014a38:	4630      	mov	r0, r6
 8014a3a:	f7ff ffbd 	bl	80149b8 <__sinit>
 8014a3e:	3648      	adds	r6, #72	; 0x48
 8014a40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014a44:	3b01      	subs	r3, #1
 8014a46:	d503      	bpl.n	8014a50 <__sfp+0x28>
 8014a48:	6833      	ldr	r3, [r6, #0]
 8014a4a:	b30b      	cbz	r3, 8014a90 <__sfp+0x68>
 8014a4c:	6836      	ldr	r6, [r6, #0]
 8014a4e:	e7f7      	b.n	8014a40 <__sfp+0x18>
 8014a50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014a54:	b9d5      	cbnz	r5, 8014a8c <__sfp+0x64>
 8014a56:	4b16      	ldr	r3, [pc, #88]	; (8014ab0 <__sfp+0x88>)
 8014a58:	60e3      	str	r3, [r4, #12]
 8014a5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014a5e:	6665      	str	r5, [r4, #100]	; 0x64
 8014a60:	f000 f859 	bl	8014b16 <__retarget_lock_init_recursive>
 8014a64:	f7ff ff96 	bl	8014994 <__sfp_lock_release>
 8014a68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014a6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014a70:	6025      	str	r5, [r4, #0]
 8014a72:	61a5      	str	r5, [r4, #24]
 8014a74:	2208      	movs	r2, #8
 8014a76:	4629      	mov	r1, r5
 8014a78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014a7c:	f7fb faea 	bl	8010054 <memset>
 8014a80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014a84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014a88:	4620      	mov	r0, r4
 8014a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a8c:	3468      	adds	r4, #104	; 0x68
 8014a8e:	e7d9      	b.n	8014a44 <__sfp+0x1c>
 8014a90:	2104      	movs	r1, #4
 8014a92:	4638      	mov	r0, r7
 8014a94:	f7ff ff62 	bl	801495c <__sfmoreglue>
 8014a98:	4604      	mov	r4, r0
 8014a9a:	6030      	str	r0, [r6, #0]
 8014a9c:	2800      	cmp	r0, #0
 8014a9e:	d1d5      	bne.n	8014a4c <__sfp+0x24>
 8014aa0:	f7ff ff78 	bl	8014994 <__sfp_lock_release>
 8014aa4:	230c      	movs	r3, #12
 8014aa6:	603b      	str	r3, [r7, #0]
 8014aa8:	e7ee      	b.n	8014a88 <__sfp+0x60>
 8014aaa:	bf00      	nop
 8014aac:	08016b70 	.word	0x08016b70
 8014ab0:	ffff0001 	.word	0xffff0001

08014ab4 <fiprintf>:
 8014ab4:	b40e      	push	{r1, r2, r3}
 8014ab6:	b503      	push	{r0, r1, lr}
 8014ab8:	4601      	mov	r1, r0
 8014aba:	ab03      	add	r3, sp, #12
 8014abc:	4805      	ldr	r0, [pc, #20]	; (8014ad4 <fiprintf+0x20>)
 8014abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ac2:	6800      	ldr	r0, [r0, #0]
 8014ac4:	9301      	str	r3, [sp, #4]
 8014ac6:	f000 f879 	bl	8014bbc <_vfiprintf_r>
 8014aca:	b002      	add	sp, #8
 8014acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8014ad0:	b003      	add	sp, #12
 8014ad2:	4770      	bx	lr
 8014ad4:	2000003c 	.word	0x2000003c

08014ad8 <_fwalk_reent>:
 8014ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014adc:	4606      	mov	r6, r0
 8014ade:	4688      	mov	r8, r1
 8014ae0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014ae4:	2700      	movs	r7, #0
 8014ae6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014aea:	f1b9 0901 	subs.w	r9, r9, #1
 8014aee:	d505      	bpl.n	8014afc <_fwalk_reent+0x24>
 8014af0:	6824      	ldr	r4, [r4, #0]
 8014af2:	2c00      	cmp	r4, #0
 8014af4:	d1f7      	bne.n	8014ae6 <_fwalk_reent+0xe>
 8014af6:	4638      	mov	r0, r7
 8014af8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014afc:	89ab      	ldrh	r3, [r5, #12]
 8014afe:	2b01      	cmp	r3, #1
 8014b00:	d907      	bls.n	8014b12 <_fwalk_reent+0x3a>
 8014b02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014b06:	3301      	adds	r3, #1
 8014b08:	d003      	beq.n	8014b12 <_fwalk_reent+0x3a>
 8014b0a:	4629      	mov	r1, r5
 8014b0c:	4630      	mov	r0, r6
 8014b0e:	47c0      	blx	r8
 8014b10:	4307      	orrs	r7, r0
 8014b12:	3568      	adds	r5, #104	; 0x68
 8014b14:	e7e9      	b.n	8014aea <_fwalk_reent+0x12>

08014b16 <__retarget_lock_init_recursive>:
 8014b16:	4770      	bx	lr

08014b18 <__retarget_lock_acquire_recursive>:
 8014b18:	4770      	bx	lr

08014b1a <__retarget_lock_release_recursive>:
 8014b1a:	4770      	bx	lr

08014b1c <_realloc_r>:
 8014b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b1e:	4607      	mov	r7, r0
 8014b20:	4614      	mov	r4, r2
 8014b22:	460e      	mov	r6, r1
 8014b24:	b921      	cbnz	r1, 8014b30 <_realloc_r+0x14>
 8014b26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014b2a:	4611      	mov	r1, r2
 8014b2c:	f7fb baea 	b.w	8010104 <_malloc_r>
 8014b30:	b922      	cbnz	r2, 8014b3c <_realloc_r+0x20>
 8014b32:	f7fb fa97 	bl	8010064 <_free_r>
 8014b36:	4625      	mov	r5, r4
 8014b38:	4628      	mov	r0, r5
 8014b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b3c:	f000 fa92 	bl	8015064 <_malloc_usable_size_r>
 8014b40:	42a0      	cmp	r0, r4
 8014b42:	d20f      	bcs.n	8014b64 <_realloc_r+0x48>
 8014b44:	4621      	mov	r1, r4
 8014b46:	4638      	mov	r0, r7
 8014b48:	f7fb fadc 	bl	8010104 <_malloc_r>
 8014b4c:	4605      	mov	r5, r0
 8014b4e:	2800      	cmp	r0, #0
 8014b50:	d0f2      	beq.n	8014b38 <_realloc_r+0x1c>
 8014b52:	4631      	mov	r1, r6
 8014b54:	4622      	mov	r2, r4
 8014b56:	f7fb fa55 	bl	8010004 <memcpy>
 8014b5a:	4631      	mov	r1, r6
 8014b5c:	4638      	mov	r0, r7
 8014b5e:	f7fb fa81 	bl	8010064 <_free_r>
 8014b62:	e7e9      	b.n	8014b38 <_realloc_r+0x1c>
 8014b64:	4635      	mov	r5, r6
 8014b66:	e7e7      	b.n	8014b38 <_realloc_r+0x1c>

08014b68 <__sfputc_r>:
 8014b68:	6893      	ldr	r3, [r2, #8]
 8014b6a:	3b01      	subs	r3, #1
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	b410      	push	{r4}
 8014b70:	6093      	str	r3, [r2, #8]
 8014b72:	da08      	bge.n	8014b86 <__sfputc_r+0x1e>
 8014b74:	6994      	ldr	r4, [r2, #24]
 8014b76:	42a3      	cmp	r3, r4
 8014b78:	db01      	blt.n	8014b7e <__sfputc_r+0x16>
 8014b7a:	290a      	cmp	r1, #10
 8014b7c:	d103      	bne.n	8014b86 <__sfputc_r+0x1e>
 8014b7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014b82:	f000 b94b 	b.w	8014e1c <__swbuf_r>
 8014b86:	6813      	ldr	r3, [r2, #0]
 8014b88:	1c58      	adds	r0, r3, #1
 8014b8a:	6010      	str	r0, [r2, #0]
 8014b8c:	7019      	strb	r1, [r3, #0]
 8014b8e:	4608      	mov	r0, r1
 8014b90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014b94:	4770      	bx	lr

08014b96 <__sfputs_r>:
 8014b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b98:	4606      	mov	r6, r0
 8014b9a:	460f      	mov	r7, r1
 8014b9c:	4614      	mov	r4, r2
 8014b9e:	18d5      	adds	r5, r2, r3
 8014ba0:	42ac      	cmp	r4, r5
 8014ba2:	d101      	bne.n	8014ba8 <__sfputs_r+0x12>
 8014ba4:	2000      	movs	r0, #0
 8014ba6:	e007      	b.n	8014bb8 <__sfputs_r+0x22>
 8014ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014bac:	463a      	mov	r2, r7
 8014bae:	4630      	mov	r0, r6
 8014bb0:	f7ff ffda 	bl	8014b68 <__sfputc_r>
 8014bb4:	1c43      	adds	r3, r0, #1
 8014bb6:	d1f3      	bne.n	8014ba0 <__sfputs_r+0xa>
 8014bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014bbc <_vfiprintf_r>:
 8014bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bc0:	460d      	mov	r5, r1
 8014bc2:	b09d      	sub	sp, #116	; 0x74
 8014bc4:	4614      	mov	r4, r2
 8014bc6:	4698      	mov	r8, r3
 8014bc8:	4606      	mov	r6, r0
 8014bca:	b118      	cbz	r0, 8014bd4 <_vfiprintf_r+0x18>
 8014bcc:	6983      	ldr	r3, [r0, #24]
 8014bce:	b90b      	cbnz	r3, 8014bd4 <_vfiprintf_r+0x18>
 8014bd0:	f7ff fef2 	bl	80149b8 <__sinit>
 8014bd4:	4b89      	ldr	r3, [pc, #548]	; (8014dfc <_vfiprintf_r+0x240>)
 8014bd6:	429d      	cmp	r5, r3
 8014bd8:	d11b      	bne.n	8014c12 <_vfiprintf_r+0x56>
 8014bda:	6875      	ldr	r5, [r6, #4]
 8014bdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014bde:	07d9      	lsls	r1, r3, #31
 8014be0:	d405      	bmi.n	8014bee <_vfiprintf_r+0x32>
 8014be2:	89ab      	ldrh	r3, [r5, #12]
 8014be4:	059a      	lsls	r2, r3, #22
 8014be6:	d402      	bmi.n	8014bee <_vfiprintf_r+0x32>
 8014be8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014bea:	f7ff ff95 	bl	8014b18 <__retarget_lock_acquire_recursive>
 8014bee:	89ab      	ldrh	r3, [r5, #12]
 8014bf0:	071b      	lsls	r3, r3, #28
 8014bf2:	d501      	bpl.n	8014bf8 <_vfiprintf_r+0x3c>
 8014bf4:	692b      	ldr	r3, [r5, #16]
 8014bf6:	b9eb      	cbnz	r3, 8014c34 <_vfiprintf_r+0x78>
 8014bf8:	4629      	mov	r1, r5
 8014bfa:	4630      	mov	r0, r6
 8014bfc:	f000 f960 	bl	8014ec0 <__swsetup_r>
 8014c00:	b1c0      	cbz	r0, 8014c34 <_vfiprintf_r+0x78>
 8014c02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014c04:	07dc      	lsls	r4, r3, #31
 8014c06:	d50e      	bpl.n	8014c26 <_vfiprintf_r+0x6a>
 8014c08:	f04f 30ff 	mov.w	r0, #4294967295
 8014c0c:	b01d      	add	sp, #116	; 0x74
 8014c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c12:	4b7b      	ldr	r3, [pc, #492]	; (8014e00 <_vfiprintf_r+0x244>)
 8014c14:	429d      	cmp	r5, r3
 8014c16:	d101      	bne.n	8014c1c <_vfiprintf_r+0x60>
 8014c18:	68b5      	ldr	r5, [r6, #8]
 8014c1a:	e7df      	b.n	8014bdc <_vfiprintf_r+0x20>
 8014c1c:	4b79      	ldr	r3, [pc, #484]	; (8014e04 <_vfiprintf_r+0x248>)
 8014c1e:	429d      	cmp	r5, r3
 8014c20:	bf08      	it	eq
 8014c22:	68f5      	ldreq	r5, [r6, #12]
 8014c24:	e7da      	b.n	8014bdc <_vfiprintf_r+0x20>
 8014c26:	89ab      	ldrh	r3, [r5, #12]
 8014c28:	0598      	lsls	r0, r3, #22
 8014c2a:	d4ed      	bmi.n	8014c08 <_vfiprintf_r+0x4c>
 8014c2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014c2e:	f7ff ff74 	bl	8014b1a <__retarget_lock_release_recursive>
 8014c32:	e7e9      	b.n	8014c08 <_vfiprintf_r+0x4c>
 8014c34:	2300      	movs	r3, #0
 8014c36:	9309      	str	r3, [sp, #36]	; 0x24
 8014c38:	2320      	movs	r3, #32
 8014c3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014c3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014c42:	2330      	movs	r3, #48	; 0x30
 8014c44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014e08 <_vfiprintf_r+0x24c>
 8014c48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014c4c:	f04f 0901 	mov.w	r9, #1
 8014c50:	4623      	mov	r3, r4
 8014c52:	469a      	mov	sl, r3
 8014c54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014c58:	b10a      	cbz	r2, 8014c5e <_vfiprintf_r+0xa2>
 8014c5a:	2a25      	cmp	r2, #37	; 0x25
 8014c5c:	d1f9      	bne.n	8014c52 <_vfiprintf_r+0x96>
 8014c5e:	ebba 0b04 	subs.w	fp, sl, r4
 8014c62:	d00b      	beq.n	8014c7c <_vfiprintf_r+0xc0>
 8014c64:	465b      	mov	r3, fp
 8014c66:	4622      	mov	r2, r4
 8014c68:	4629      	mov	r1, r5
 8014c6a:	4630      	mov	r0, r6
 8014c6c:	f7ff ff93 	bl	8014b96 <__sfputs_r>
 8014c70:	3001      	adds	r0, #1
 8014c72:	f000 80aa 	beq.w	8014dca <_vfiprintf_r+0x20e>
 8014c76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014c78:	445a      	add	r2, fp
 8014c7a:	9209      	str	r2, [sp, #36]	; 0x24
 8014c7c:	f89a 3000 	ldrb.w	r3, [sl]
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	f000 80a2 	beq.w	8014dca <_vfiprintf_r+0x20e>
 8014c86:	2300      	movs	r3, #0
 8014c88:	f04f 32ff 	mov.w	r2, #4294967295
 8014c8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014c90:	f10a 0a01 	add.w	sl, sl, #1
 8014c94:	9304      	str	r3, [sp, #16]
 8014c96:	9307      	str	r3, [sp, #28]
 8014c98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014c9c:	931a      	str	r3, [sp, #104]	; 0x68
 8014c9e:	4654      	mov	r4, sl
 8014ca0:	2205      	movs	r2, #5
 8014ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ca6:	4858      	ldr	r0, [pc, #352]	; (8014e08 <_vfiprintf_r+0x24c>)
 8014ca8:	f7eb fa9a 	bl	80001e0 <memchr>
 8014cac:	9a04      	ldr	r2, [sp, #16]
 8014cae:	b9d8      	cbnz	r0, 8014ce8 <_vfiprintf_r+0x12c>
 8014cb0:	06d1      	lsls	r1, r2, #27
 8014cb2:	bf44      	itt	mi
 8014cb4:	2320      	movmi	r3, #32
 8014cb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014cba:	0713      	lsls	r3, r2, #28
 8014cbc:	bf44      	itt	mi
 8014cbe:	232b      	movmi	r3, #43	; 0x2b
 8014cc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8014cc8:	2b2a      	cmp	r3, #42	; 0x2a
 8014cca:	d015      	beq.n	8014cf8 <_vfiprintf_r+0x13c>
 8014ccc:	9a07      	ldr	r2, [sp, #28]
 8014cce:	4654      	mov	r4, sl
 8014cd0:	2000      	movs	r0, #0
 8014cd2:	f04f 0c0a 	mov.w	ip, #10
 8014cd6:	4621      	mov	r1, r4
 8014cd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014cdc:	3b30      	subs	r3, #48	; 0x30
 8014cde:	2b09      	cmp	r3, #9
 8014ce0:	d94e      	bls.n	8014d80 <_vfiprintf_r+0x1c4>
 8014ce2:	b1b0      	cbz	r0, 8014d12 <_vfiprintf_r+0x156>
 8014ce4:	9207      	str	r2, [sp, #28]
 8014ce6:	e014      	b.n	8014d12 <_vfiprintf_r+0x156>
 8014ce8:	eba0 0308 	sub.w	r3, r0, r8
 8014cec:	fa09 f303 	lsl.w	r3, r9, r3
 8014cf0:	4313      	orrs	r3, r2
 8014cf2:	9304      	str	r3, [sp, #16]
 8014cf4:	46a2      	mov	sl, r4
 8014cf6:	e7d2      	b.n	8014c9e <_vfiprintf_r+0xe2>
 8014cf8:	9b03      	ldr	r3, [sp, #12]
 8014cfa:	1d19      	adds	r1, r3, #4
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	9103      	str	r1, [sp, #12]
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	bfbb      	ittet	lt
 8014d04:	425b      	neglt	r3, r3
 8014d06:	f042 0202 	orrlt.w	r2, r2, #2
 8014d0a:	9307      	strge	r3, [sp, #28]
 8014d0c:	9307      	strlt	r3, [sp, #28]
 8014d0e:	bfb8      	it	lt
 8014d10:	9204      	strlt	r2, [sp, #16]
 8014d12:	7823      	ldrb	r3, [r4, #0]
 8014d14:	2b2e      	cmp	r3, #46	; 0x2e
 8014d16:	d10c      	bne.n	8014d32 <_vfiprintf_r+0x176>
 8014d18:	7863      	ldrb	r3, [r4, #1]
 8014d1a:	2b2a      	cmp	r3, #42	; 0x2a
 8014d1c:	d135      	bne.n	8014d8a <_vfiprintf_r+0x1ce>
 8014d1e:	9b03      	ldr	r3, [sp, #12]
 8014d20:	1d1a      	adds	r2, r3, #4
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	9203      	str	r2, [sp, #12]
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	bfb8      	it	lt
 8014d2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8014d2e:	3402      	adds	r4, #2
 8014d30:	9305      	str	r3, [sp, #20]
 8014d32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014e18 <_vfiprintf_r+0x25c>
 8014d36:	7821      	ldrb	r1, [r4, #0]
 8014d38:	2203      	movs	r2, #3
 8014d3a:	4650      	mov	r0, sl
 8014d3c:	f7eb fa50 	bl	80001e0 <memchr>
 8014d40:	b140      	cbz	r0, 8014d54 <_vfiprintf_r+0x198>
 8014d42:	2340      	movs	r3, #64	; 0x40
 8014d44:	eba0 000a 	sub.w	r0, r0, sl
 8014d48:	fa03 f000 	lsl.w	r0, r3, r0
 8014d4c:	9b04      	ldr	r3, [sp, #16]
 8014d4e:	4303      	orrs	r3, r0
 8014d50:	3401      	adds	r4, #1
 8014d52:	9304      	str	r3, [sp, #16]
 8014d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d58:	482c      	ldr	r0, [pc, #176]	; (8014e0c <_vfiprintf_r+0x250>)
 8014d5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014d5e:	2206      	movs	r2, #6
 8014d60:	f7eb fa3e 	bl	80001e0 <memchr>
 8014d64:	2800      	cmp	r0, #0
 8014d66:	d03f      	beq.n	8014de8 <_vfiprintf_r+0x22c>
 8014d68:	4b29      	ldr	r3, [pc, #164]	; (8014e10 <_vfiprintf_r+0x254>)
 8014d6a:	bb1b      	cbnz	r3, 8014db4 <_vfiprintf_r+0x1f8>
 8014d6c:	9b03      	ldr	r3, [sp, #12]
 8014d6e:	3307      	adds	r3, #7
 8014d70:	f023 0307 	bic.w	r3, r3, #7
 8014d74:	3308      	adds	r3, #8
 8014d76:	9303      	str	r3, [sp, #12]
 8014d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d7a:	443b      	add	r3, r7
 8014d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8014d7e:	e767      	b.n	8014c50 <_vfiprintf_r+0x94>
 8014d80:	fb0c 3202 	mla	r2, ip, r2, r3
 8014d84:	460c      	mov	r4, r1
 8014d86:	2001      	movs	r0, #1
 8014d88:	e7a5      	b.n	8014cd6 <_vfiprintf_r+0x11a>
 8014d8a:	2300      	movs	r3, #0
 8014d8c:	3401      	adds	r4, #1
 8014d8e:	9305      	str	r3, [sp, #20]
 8014d90:	4619      	mov	r1, r3
 8014d92:	f04f 0c0a 	mov.w	ip, #10
 8014d96:	4620      	mov	r0, r4
 8014d98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014d9c:	3a30      	subs	r2, #48	; 0x30
 8014d9e:	2a09      	cmp	r2, #9
 8014da0:	d903      	bls.n	8014daa <_vfiprintf_r+0x1ee>
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d0c5      	beq.n	8014d32 <_vfiprintf_r+0x176>
 8014da6:	9105      	str	r1, [sp, #20]
 8014da8:	e7c3      	b.n	8014d32 <_vfiprintf_r+0x176>
 8014daa:	fb0c 2101 	mla	r1, ip, r1, r2
 8014dae:	4604      	mov	r4, r0
 8014db0:	2301      	movs	r3, #1
 8014db2:	e7f0      	b.n	8014d96 <_vfiprintf_r+0x1da>
 8014db4:	ab03      	add	r3, sp, #12
 8014db6:	9300      	str	r3, [sp, #0]
 8014db8:	462a      	mov	r2, r5
 8014dba:	4b16      	ldr	r3, [pc, #88]	; (8014e14 <_vfiprintf_r+0x258>)
 8014dbc:	a904      	add	r1, sp, #16
 8014dbe:	4630      	mov	r0, r6
 8014dc0:	f7fb fa9a 	bl	80102f8 <_printf_float>
 8014dc4:	4607      	mov	r7, r0
 8014dc6:	1c78      	adds	r0, r7, #1
 8014dc8:	d1d6      	bne.n	8014d78 <_vfiprintf_r+0x1bc>
 8014dca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014dcc:	07d9      	lsls	r1, r3, #31
 8014dce:	d405      	bmi.n	8014ddc <_vfiprintf_r+0x220>
 8014dd0:	89ab      	ldrh	r3, [r5, #12]
 8014dd2:	059a      	lsls	r2, r3, #22
 8014dd4:	d402      	bmi.n	8014ddc <_vfiprintf_r+0x220>
 8014dd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014dd8:	f7ff fe9f 	bl	8014b1a <__retarget_lock_release_recursive>
 8014ddc:	89ab      	ldrh	r3, [r5, #12]
 8014dde:	065b      	lsls	r3, r3, #25
 8014de0:	f53f af12 	bmi.w	8014c08 <_vfiprintf_r+0x4c>
 8014de4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014de6:	e711      	b.n	8014c0c <_vfiprintf_r+0x50>
 8014de8:	ab03      	add	r3, sp, #12
 8014dea:	9300      	str	r3, [sp, #0]
 8014dec:	462a      	mov	r2, r5
 8014dee:	4b09      	ldr	r3, [pc, #36]	; (8014e14 <_vfiprintf_r+0x258>)
 8014df0:	a904      	add	r1, sp, #16
 8014df2:	4630      	mov	r0, r6
 8014df4:	f7fb fd24 	bl	8010840 <_printf_i>
 8014df8:	e7e4      	b.n	8014dc4 <_vfiprintf_r+0x208>
 8014dfa:	bf00      	nop
 8014dfc:	08016ffc 	.word	0x08016ffc
 8014e00:	0801701c 	.word	0x0801701c
 8014e04:	08016fdc 	.word	0x08016fdc
 8014e08:	08016f74 	.word	0x08016f74
 8014e0c:	08016f7e 	.word	0x08016f7e
 8014e10:	080102f9 	.word	0x080102f9
 8014e14:	08014b97 	.word	0x08014b97
 8014e18:	08016f7a 	.word	0x08016f7a

08014e1c <__swbuf_r>:
 8014e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e1e:	460e      	mov	r6, r1
 8014e20:	4614      	mov	r4, r2
 8014e22:	4605      	mov	r5, r0
 8014e24:	b118      	cbz	r0, 8014e2e <__swbuf_r+0x12>
 8014e26:	6983      	ldr	r3, [r0, #24]
 8014e28:	b90b      	cbnz	r3, 8014e2e <__swbuf_r+0x12>
 8014e2a:	f7ff fdc5 	bl	80149b8 <__sinit>
 8014e2e:	4b21      	ldr	r3, [pc, #132]	; (8014eb4 <__swbuf_r+0x98>)
 8014e30:	429c      	cmp	r4, r3
 8014e32:	d12b      	bne.n	8014e8c <__swbuf_r+0x70>
 8014e34:	686c      	ldr	r4, [r5, #4]
 8014e36:	69a3      	ldr	r3, [r4, #24]
 8014e38:	60a3      	str	r3, [r4, #8]
 8014e3a:	89a3      	ldrh	r3, [r4, #12]
 8014e3c:	071a      	lsls	r2, r3, #28
 8014e3e:	d52f      	bpl.n	8014ea0 <__swbuf_r+0x84>
 8014e40:	6923      	ldr	r3, [r4, #16]
 8014e42:	b36b      	cbz	r3, 8014ea0 <__swbuf_r+0x84>
 8014e44:	6923      	ldr	r3, [r4, #16]
 8014e46:	6820      	ldr	r0, [r4, #0]
 8014e48:	1ac0      	subs	r0, r0, r3
 8014e4a:	6963      	ldr	r3, [r4, #20]
 8014e4c:	b2f6      	uxtb	r6, r6
 8014e4e:	4283      	cmp	r3, r0
 8014e50:	4637      	mov	r7, r6
 8014e52:	dc04      	bgt.n	8014e5e <__swbuf_r+0x42>
 8014e54:	4621      	mov	r1, r4
 8014e56:	4628      	mov	r0, r5
 8014e58:	f7ff fd1a 	bl	8014890 <_fflush_r>
 8014e5c:	bb30      	cbnz	r0, 8014eac <__swbuf_r+0x90>
 8014e5e:	68a3      	ldr	r3, [r4, #8]
 8014e60:	3b01      	subs	r3, #1
 8014e62:	60a3      	str	r3, [r4, #8]
 8014e64:	6823      	ldr	r3, [r4, #0]
 8014e66:	1c5a      	adds	r2, r3, #1
 8014e68:	6022      	str	r2, [r4, #0]
 8014e6a:	701e      	strb	r6, [r3, #0]
 8014e6c:	6963      	ldr	r3, [r4, #20]
 8014e6e:	3001      	adds	r0, #1
 8014e70:	4283      	cmp	r3, r0
 8014e72:	d004      	beq.n	8014e7e <__swbuf_r+0x62>
 8014e74:	89a3      	ldrh	r3, [r4, #12]
 8014e76:	07db      	lsls	r3, r3, #31
 8014e78:	d506      	bpl.n	8014e88 <__swbuf_r+0x6c>
 8014e7a:	2e0a      	cmp	r6, #10
 8014e7c:	d104      	bne.n	8014e88 <__swbuf_r+0x6c>
 8014e7e:	4621      	mov	r1, r4
 8014e80:	4628      	mov	r0, r5
 8014e82:	f7ff fd05 	bl	8014890 <_fflush_r>
 8014e86:	b988      	cbnz	r0, 8014eac <__swbuf_r+0x90>
 8014e88:	4638      	mov	r0, r7
 8014e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e8c:	4b0a      	ldr	r3, [pc, #40]	; (8014eb8 <__swbuf_r+0x9c>)
 8014e8e:	429c      	cmp	r4, r3
 8014e90:	d101      	bne.n	8014e96 <__swbuf_r+0x7a>
 8014e92:	68ac      	ldr	r4, [r5, #8]
 8014e94:	e7cf      	b.n	8014e36 <__swbuf_r+0x1a>
 8014e96:	4b09      	ldr	r3, [pc, #36]	; (8014ebc <__swbuf_r+0xa0>)
 8014e98:	429c      	cmp	r4, r3
 8014e9a:	bf08      	it	eq
 8014e9c:	68ec      	ldreq	r4, [r5, #12]
 8014e9e:	e7ca      	b.n	8014e36 <__swbuf_r+0x1a>
 8014ea0:	4621      	mov	r1, r4
 8014ea2:	4628      	mov	r0, r5
 8014ea4:	f000 f80c 	bl	8014ec0 <__swsetup_r>
 8014ea8:	2800      	cmp	r0, #0
 8014eaa:	d0cb      	beq.n	8014e44 <__swbuf_r+0x28>
 8014eac:	f04f 37ff 	mov.w	r7, #4294967295
 8014eb0:	e7ea      	b.n	8014e88 <__swbuf_r+0x6c>
 8014eb2:	bf00      	nop
 8014eb4:	08016ffc 	.word	0x08016ffc
 8014eb8:	0801701c 	.word	0x0801701c
 8014ebc:	08016fdc 	.word	0x08016fdc

08014ec0 <__swsetup_r>:
 8014ec0:	4b32      	ldr	r3, [pc, #200]	; (8014f8c <__swsetup_r+0xcc>)
 8014ec2:	b570      	push	{r4, r5, r6, lr}
 8014ec4:	681d      	ldr	r5, [r3, #0]
 8014ec6:	4606      	mov	r6, r0
 8014ec8:	460c      	mov	r4, r1
 8014eca:	b125      	cbz	r5, 8014ed6 <__swsetup_r+0x16>
 8014ecc:	69ab      	ldr	r3, [r5, #24]
 8014ece:	b913      	cbnz	r3, 8014ed6 <__swsetup_r+0x16>
 8014ed0:	4628      	mov	r0, r5
 8014ed2:	f7ff fd71 	bl	80149b8 <__sinit>
 8014ed6:	4b2e      	ldr	r3, [pc, #184]	; (8014f90 <__swsetup_r+0xd0>)
 8014ed8:	429c      	cmp	r4, r3
 8014eda:	d10f      	bne.n	8014efc <__swsetup_r+0x3c>
 8014edc:	686c      	ldr	r4, [r5, #4]
 8014ede:	89a3      	ldrh	r3, [r4, #12]
 8014ee0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014ee4:	0719      	lsls	r1, r3, #28
 8014ee6:	d42c      	bmi.n	8014f42 <__swsetup_r+0x82>
 8014ee8:	06dd      	lsls	r5, r3, #27
 8014eea:	d411      	bmi.n	8014f10 <__swsetup_r+0x50>
 8014eec:	2309      	movs	r3, #9
 8014eee:	6033      	str	r3, [r6, #0]
 8014ef0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014ef4:	81a3      	strh	r3, [r4, #12]
 8014ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8014efa:	e03e      	b.n	8014f7a <__swsetup_r+0xba>
 8014efc:	4b25      	ldr	r3, [pc, #148]	; (8014f94 <__swsetup_r+0xd4>)
 8014efe:	429c      	cmp	r4, r3
 8014f00:	d101      	bne.n	8014f06 <__swsetup_r+0x46>
 8014f02:	68ac      	ldr	r4, [r5, #8]
 8014f04:	e7eb      	b.n	8014ede <__swsetup_r+0x1e>
 8014f06:	4b24      	ldr	r3, [pc, #144]	; (8014f98 <__swsetup_r+0xd8>)
 8014f08:	429c      	cmp	r4, r3
 8014f0a:	bf08      	it	eq
 8014f0c:	68ec      	ldreq	r4, [r5, #12]
 8014f0e:	e7e6      	b.n	8014ede <__swsetup_r+0x1e>
 8014f10:	0758      	lsls	r0, r3, #29
 8014f12:	d512      	bpl.n	8014f3a <__swsetup_r+0x7a>
 8014f14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014f16:	b141      	cbz	r1, 8014f2a <__swsetup_r+0x6a>
 8014f18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014f1c:	4299      	cmp	r1, r3
 8014f1e:	d002      	beq.n	8014f26 <__swsetup_r+0x66>
 8014f20:	4630      	mov	r0, r6
 8014f22:	f7fb f89f 	bl	8010064 <_free_r>
 8014f26:	2300      	movs	r3, #0
 8014f28:	6363      	str	r3, [r4, #52]	; 0x34
 8014f2a:	89a3      	ldrh	r3, [r4, #12]
 8014f2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014f30:	81a3      	strh	r3, [r4, #12]
 8014f32:	2300      	movs	r3, #0
 8014f34:	6063      	str	r3, [r4, #4]
 8014f36:	6923      	ldr	r3, [r4, #16]
 8014f38:	6023      	str	r3, [r4, #0]
 8014f3a:	89a3      	ldrh	r3, [r4, #12]
 8014f3c:	f043 0308 	orr.w	r3, r3, #8
 8014f40:	81a3      	strh	r3, [r4, #12]
 8014f42:	6923      	ldr	r3, [r4, #16]
 8014f44:	b94b      	cbnz	r3, 8014f5a <__swsetup_r+0x9a>
 8014f46:	89a3      	ldrh	r3, [r4, #12]
 8014f48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014f50:	d003      	beq.n	8014f5a <__swsetup_r+0x9a>
 8014f52:	4621      	mov	r1, r4
 8014f54:	4630      	mov	r0, r6
 8014f56:	f000 f845 	bl	8014fe4 <__smakebuf_r>
 8014f5a:	89a0      	ldrh	r0, [r4, #12]
 8014f5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014f60:	f010 0301 	ands.w	r3, r0, #1
 8014f64:	d00a      	beq.n	8014f7c <__swsetup_r+0xbc>
 8014f66:	2300      	movs	r3, #0
 8014f68:	60a3      	str	r3, [r4, #8]
 8014f6a:	6963      	ldr	r3, [r4, #20]
 8014f6c:	425b      	negs	r3, r3
 8014f6e:	61a3      	str	r3, [r4, #24]
 8014f70:	6923      	ldr	r3, [r4, #16]
 8014f72:	b943      	cbnz	r3, 8014f86 <__swsetup_r+0xc6>
 8014f74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014f78:	d1ba      	bne.n	8014ef0 <__swsetup_r+0x30>
 8014f7a:	bd70      	pop	{r4, r5, r6, pc}
 8014f7c:	0781      	lsls	r1, r0, #30
 8014f7e:	bf58      	it	pl
 8014f80:	6963      	ldrpl	r3, [r4, #20]
 8014f82:	60a3      	str	r3, [r4, #8]
 8014f84:	e7f4      	b.n	8014f70 <__swsetup_r+0xb0>
 8014f86:	2000      	movs	r0, #0
 8014f88:	e7f7      	b.n	8014f7a <__swsetup_r+0xba>
 8014f8a:	bf00      	nop
 8014f8c:	2000003c 	.word	0x2000003c
 8014f90:	08016ffc 	.word	0x08016ffc
 8014f94:	0801701c 	.word	0x0801701c
 8014f98:	08016fdc 	.word	0x08016fdc

08014f9c <__swhatbuf_r>:
 8014f9c:	b570      	push	{r4, r5, r6, lr}
 8014f9e:	460e      	mov	r6, r1
 8014fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014fa4:	2900      	cmp	r1, #0
 8014fa6:	b096      	sub	sp, #88	; 0x58
 8014fa8:	4614      	mov	r4, r2
 8014faa:	461d      	mov	r5, r3
 8014fac:	da07      	bge.n	8014fbe <__swhatbuf_r+0x22>
 8014fae:	2300      	movs	r3, #0
 8014fb0:	602b      	str	r3, [r5, #0]
 8014fb2:	89b3      	ldrh	r3, [r6, #12]
 8014fb4:	061a      	lsls	r2, r3, #24
 8014fb6:	d410      	bmi.n	8014fda <__swhatbuf_r+0x3e>
 8014fb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014fbc:	e00e      	b.n	8014fdc <__swhatbuf_r+0x40>
 8014fbe:	466a      	mov	r2, sp
 8014fc0:	f000 f858 	bl	8015074 <_fstat_r>
 8014fc4:	2800      	cmp	r0, #0
 8014fc6:	dbf2      	blt.n	8014fae <__swhatbuf_r+0x12>
 8014fc8:	9a01      	ldr	r2, [sp, #4]
 8014fca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014fce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014fd2:	425a      	negs	r2, r3
 8014fd4:	415a      	adcs	r2, r3
 8014fd6:	602a      	str	r2, [r5, #0]
 8014fd8:	e7ee      	b.n	8014fb8 <__swhatbuf_r+0x1c>
 8014fda:	2340      	movs	r3, #64	; 0x40
 8014fdc:	2000      	movs	r0, #0
 8014fde:	6023      	str	r3, [r4, #0]
 8014fe0:	b016      	add	sp, #88	; 0x58
 8014fe2:	bd70      	pop	{r4, r5, r6, pc}

08014fe4 <__smakebuf_r>:
 8014fe4:	898b      	ldrh	r3, [r1, #12]
 8014fe6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014fe8:	079d      	lsls	r5, r3, #30
 8014fea:	4606      	mov	r6, r0
 8014fec:	460c      	mov	r4, r1
 8014fee:	d507      	bpl.n	8015000 <__smakebuf_r+0x1c>
 8014ff0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014ff4:	6023      	str	r3, [r4, #0]
 8014ff6:	6123      	str	r3, [r4, #16]
 8014ff8:	2301      	movs	r3, #1
 8014ffa:	6163      	str	r3, [r4, #20]
 8014ffc:	b002      	add	sp, #8
 8014ffe:	bd70      	pop	{r4, r5, r6, pc}
 8015000:	ab01      	add	r3, sp, #4
 8015002:	466a      	mov	r2, sp
 8015004:	f7ff ffca 	bl	8014f9c <__swhatbuf_r>
 8015008:	9900      	ldr	r1, [sp, #0]
 801500a:	4605      	mov	r5, r0
 801500c:	4630      	mov	r0, r6
 801500e:	f7fb f879 	bl	8010104 <_malloc_r>
 8015012:	b948      	cbnz	r0, 8015028 <__smakebuf_r+0x44>
 8015014:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015018:	059a      	lsls	r2, r3, #22
 801501a:	d4ef      	bmi.n	8014ffc <__smakebuf_r+0x18>
 801501c:	f023 0303 	bic.w	r3, r3, #3
 8015020:	f043 0302 	orr.w	r3, r3, #2
 8015024:	81a3      	strh	r3, [r4, #12]
 8015026:	e7e3      	b.n	8014ff0 <__smakebuf_r+0xc>
 8015028:	4b0d      	ldr	r3, [pc, #52]	; (8015060 <__smakebuf_r+0x7c>)
 801502a:	62b3      	str	r3, [r6, #40]	; 0x28
 801502c:	89a3      	ldrh	r3, [r4, #12]
 801502e:	6020      	str	r0, [r4, #0]
 8015030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015034:	81a3      	strh	r3, [r4, #12]
 8015036:	9b00      	ldr	r3, [sp, #0]
 8015038:	6163      	str	r3, [r4, #20]
 801503a:	9b01      	ldr	r3, [sp, #4]
 801503c:	6120      	str	r0, [r4, #16]
 801503e:	b15b      	cbz	r3, 8015058 <__smakebuf_r+0x74>
 8015040:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015044:	4630      	mov	r0, r6
 8015046:	f000 f827 	bl	8015098 <_isatty_r>
 801504a:	b128      	cbz	r0, 8015058 <__smakebuf_r+0x74>
 801504c:	89a3      	ldrh	r3, [r4, #12]
 801504e:	f023 0303 	bic.w	r3, r3, #3
 8015052:	f043 0301 	orr.w	r3, r3, #1
 8015056:	81a3      	strh	r3, [r4, #12]
 8015058:	89a0      	ldrh	r0, [r4, #12]
 801505a:	4305      	orrs	r5, r0
 801505c:	81a5      	strh	r5, [r4, #12]
 801505e:	e7cd      	b.n	8014ffc <__smakebuf_r+0x18>
 8015060:	08014951 	.word	0x08014951

08015064 <_malloc_usable_size_r>:
 8015064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015068:	1f18      	subs	r0, r3, #4
 801506a:	2b00      	cmp	r3, #0
 801506c:	bfbc      	itt	lt
 801506e:	580b      	ldrlt	r3, [r1, r0]
 8015070:	18c0      	addlt	r0, r0, r3
 8015072:	4770      	bx	lr

08015074 <_fstat_r>:
 8015074:	b538      	push	{r3, r4, r5, lr}
 8015076:	4d07      	ldr	r5, [pc, #28]	; (8015094 <_fstat_r+0x20>)
 8015078:	2300      	movs	r3, #0
 801507a:	4604      	mov	r4, r0
 801507c:	4608      	mov	r0, r1
 801507e:	4611      	mov	r1, r2
 8015080:	602b      	str	r3, [r5, #0]
 8015082:	f7ed fe82 	bl	8002d8a <_fstat>
 8015086:	1c43      	adds	r3, r0, #1
 8015088:	d102      	bne.n	8015090 <_fstat_r+0x1c>
 801508a:	682b      	ldr	r3, [r5, #0]
 801508c:	b103      	cbz	r3, 8015090 <_fstat_r+0x1c>
 801508e:	6023      	str	r3, [r4, #0]
 8015090:	bd38      	pop	{r3, r4, r5, pc}
 8015092:	bf00      	nop
 8015094:	20005b18 	.word	0x20005b18

08015098 <_isatty_r>:
 8015098:	b538      	push	{r3, r4, r5, lr}
 801509a:	4d06      	ldr	r5, [pc, #24]	; (80150b4 <_isatty_r+0x1c>)
 801509c:	2300      	movs	r3, #0
 801509e:	4604      	mov	r4, r0
 80150a0:	4608      	mov	r0, r1
 80150a2:	602b      	str	r3, [r5, #0]
 80150a4:	f7ed fe81 	bl	8002daa <_isatty>
 80150a8:	1c43      	adds	r3, r0, #1
 80150aa:	d102      	bne.n	80150b2 <_isatty_r+0x1a>
 80150ac:	682b      	ldr	r3, [r5, #0]
 80150ae:	b103      	cbz	r3, 80150b2 <_isatty_r+0x1a>
 80150b0:	6023      	str	r3, [r4, #0]
 80150b2:	bd38      	pop	{r3, r4, r5, pc}
 80150b4:	20005b18 	.word	0x20005b18

080150b8 <_init>:
 80150b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150ba:	bf00      	nop
 80150bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80150be:	bc08      	pop	{r3}
 80150c0:	469e      	mov	lr, r3
 80150c2:	4770      	bx	lr

080150c4 <_fini>:
 80150c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150c6:	bf00      	nop
 80150c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80150ca:	bc08      	pop	{r3}
 80150cc:	469e      	mov	lr, r3
 80150ce:	4770      	bx	lr
