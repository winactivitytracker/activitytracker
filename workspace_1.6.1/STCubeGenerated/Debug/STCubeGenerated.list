
STCubeGenerated.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb3c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b8c  0800cce0  0800cce0  0001cce0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e86c  0800e86c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e86c  0800e86c  0001e86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e874  0800e874  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e874  0800e874  0001e874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e878  0800e878  0001e878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800e87c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e44  200001f4  0800ea70  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005038  0800ea70  00025038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025a30  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c0c  00000000  00000000  00045c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b90  00000000  00000000  0004a860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019e0  00000000  00000000  0004c3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b932  00000000  00000000  0004ddd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fe1f  00000000  00000000  00069702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d81e  00000000  00000000  00089521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00126d3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b1c  00000000  00000000  00126d94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ccc4 	.word	0x0800ccc4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	0800ccc4 	.word	0x0800ccc4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001000:	4a0c      	ldr	r2, [pc, #48]	; (8001034 <MX_FREERTOS_Init+0x38>)
 8001002:	2100      	movs	r1, #0
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <MX_FREERTOS_Init+0x3c>)
 8001006:	f004 f8c3 	bl	8005190 <osThreadNew>
 800100a:	4603      	mov	r3, r0
 800100c:	4a0b      	ldr	r2, [pc, #44]	; (800103c <MX_FREERTOS_Init+0x40>)
 800100e:	6013      	str	r3, [r2, #0]

  /* creation of DrawOnOledTask */
  DrawOnOledTaskHandle = osThreadNew(StartDrawing, NULL, &DrawOnOledTask_attributes);
 8001010:	4a0b      	ldr	r2, [pc, #44]	; (8001040 <MX_FREERTOS_Init+0x44>)
 8001012:	2100      	movs	r1, #0
 8001014:	480b      	ldr	r0, [pc, #44]	; (8001044 <MX_FREERTOS_Init+0x48>)
 8001016:	f004 f8bb 	bl	8005190 <osThreadNew>
 800101a:	4603      	mov	r3, r0
 800101c:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <MX_FREERTOS_Init+0x4c>)
 800101e:	6013      	str	r3, [r2, #0]

  /* creation of ActivityTask */
  ActivityTaskHandle = osThreadNew(StartActivityTask, NULL, &ActivityTask_attributes);
 8001020:	4a0a      	ldr	r2, [pc, #40]	; (800104c <MX_FREERTOS_Init+0x50>)
 8001022:	2100      	movs	r1, #0
 8001024:	480a      	ldr	r0, [pc, #40]	; (8001050 <MX_FREERTOS_Init+0x54>)
 8001026:	f004 f8b3 	bl	8005190 <osThreadNew>
 800102a:	4603      	mov	r3, r0
 800102c:	4a09      	ldr	r2, [pc, #36]	; (8001054 <MX_FREERTOS_Init+0x58>)
 800102e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	0800e320 	.word	0x0800e320
 8001038:	08001059 	.word	0x08001059
 800103c:	20004c38 	.word	0x20004c38
 8001040:	0800e344 	.word	0x0800e344
 8001044:	08001069 	.word	0x08001069
 8001048:	20004c40 	.word	0x20004c40
 800104c:	0800e368 	.word	0x0800e368
 8001050:	080010d9 	.word	0x080010d9
 8001054:	20004c3c 	.word	0x20004c3c

08001058 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001060:	2001      	movs	r0, #1
 8001062:	f004 f927 	bl	80052b4 <osDelay>
 8001066:	e7fb      	b.n	8001060 <StartDefaultTask+0x8>

08001068 <StartDrawing>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDrawing */
void StartDrawing(void *argument)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	char numbers[10];

//	SSD1306_GotoXY (0,0);
//	SSD1306_Puts ("R.A.T:", &Font_11x18, 1);

	SSD1306_GotoXY (0, 20);
 8001070:	2114      	movs	r1, #20
 8001072:	2000      	movs	r0, #0
 8001074:	f000 fe92 	bl	8001d9c <SSD1306_GotoXY>
	sprintf(numbers, "%.2f", GPS.speed_km);
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <StartDrawing+0x5c>)
 800107a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fa6b 	bl	8000558 <__aeabi_f2d>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	f107 000c 	add.w	r0, r7, #12
 800108a:	490f      	ldr	r1, [pc, #60]	; (80010c8 <StartDrawing+0x60>)
 800108c:	f007 fc46 	bl	800891c <siprintf>
	SSD1306_Puts(numbers, &Font_11x18, 1);
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	2201      	movs	r2, #1
 8001096:	490d      	ldr	r1, [pc, #52]	; (80010cc <StartDrawing+0x64>)
 8001098:	4618      	mov	r0, r3
 800109a:	f000 ff15 	bl	8001ec8 <SSD1306_Puts>
	SSD1306_GotoXY (50,26);
 800109e:	211a      	movs	r1, #26
 80010a0:	2032      	movs	r0, #50	; 0x32
 80010a2:	f000 fe7b 	bl	8001d9c <SSD1306_GotoXY>
	SSD1306_Puts ("km/u", &Font_7x10, 1);
 80010a6:	2201      	movs	r2, #1
 80010a8:	4909      	ldr	r1, [pc, #36]	; (80010d0 <StartDrawing+0x68>)
 80010aa:	480a      	ldr	r0, [pc, #40]	; (80010d4 <StartDrawing+0x6c>)
 80010ac:	f000 ff0c 	bl	8001ec8 <SSD1306_Puts>

	getTime();
 80010b0:	f000 f85c 	bl	800116c <getTime>

	getActivity();
 80010b4:	f000 f8b8 	bl	8001228 <getActivity>

	SSD1306_UpdateScreen();
 80010b8:	f000 fdca 	bl	8001c50 <SSD1306_UpdateScreen>

    osDelay(1);
 80010bc:	2001      	movs	r0, #1
 80010be:	f004 f8f9 	bl	80052b4 <osDelay>
  {
 80010c2:	e7d5      	b.n	8001070 <StartDrawing+0x8>
 80010c4:	20004c44 	.word	0x20004c44
 80010c8:	0800cd0c 	.word	0x0800cd0c
 80010cc:	20000008 	.word	0x20000008
 80010d0:	20000000 	.word	0x20000000
 80010d4:	0800cd14 	.word	0x0800cd14

080010d8 <StartActivityTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartActivityTask */
void StartActivityTask(void *argument)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartActivityTask */
  /* Infinite loop */
  for(;;)
  {
	if(GPS.speed_km < 2.0)
 80010e0:	4b21      	ldr	r3, [pc, #132]	; (8001168 <StartActivityTask+0x90>)
 80010e2:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80010e6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80010ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f2:	d504      	bpl.n	80010fe <StartActivityTask+0x26>
	{
		GPS.currentActivity = 0;
 80010f4:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <StartActivityTask+0x90>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	f883 2264 	strb.w	r2, [r3, #612]	; 0x264
 80010fc:	e030      	b.n	8001160 <StartActivityTask+0x88>
	}
	else if(GPS.speed_km >= 2.0 && GPS.speed_km < 7.0)
 80010fe:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <StartActivityTask+0x90>)
 8001100:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001104:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001108:	eef4 7ac7 	vcmpe.f32	s15, s14
 800110c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001110:	db0e      	blt.n	8001130 <StartActivityTask+0x58>
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <StartActivityTask+0x90>)
 8001114:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001118:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800111c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001124:	d504      	bpl.n	8001130 <StartActivityTask+0x58>
	{
		GPS.currentActivity = 1;
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <StartActivityTask+0x90>)
 8001128:	2201      	movs	r2, #1
 800112a:	f883 2264 	strb.w	r2, [r3, #612]	; 0x264
 800112e:	e017      	b.n	8001160 <StartActivityTask+0x88>
	}
	else if(GPS.speed_km >= 7.0 && GPS.speed_km < 15.0)
 8001130:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <StartActivityTask+0x90>)
 8001132:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001136:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800113a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800113e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001142:	db0d      	blt.n	8001160 <StartActivityTask+0x88>
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <StartActivityTask+0x90>)
 8001146:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800114a:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800114e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001156:	d503      	bpl.n	8001160 <StartActivityTask+0x88>
	{
		GPS.currentActivity = 2;
 8001158:	4b03      	ldr	r3, [pc, #12]	; (8001168 <StartActivityTask+0x90>)
 800115a:	2202      	movs	r2, #2
 800115c:	f883 2264 	strb.w	r2, [r3, #612]	; 0x264
	}

    osDelay(100);
 8001160:	2064      	movs	r0, #100	; 0x64
 8001162:	f004 f8a7 	bl	80052b4 <osDelay>
	if(GPS.speed_km < 2.0)
 8001166:	e7bb      	b.n	80010e0 <StartActivityTask+0x8>
 8001168:	20004c44 	.word	0x20004c44

0800116c <getTime>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void getTime()
{
 800116c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af04      	add	r7, sp, #16
	SSD1306_GotoXY (0, 45);
 8001172:	212d      	movs	r1, #45	; 0x2d
 8001174:	2000      	movs	r0, #0
 8001176:	f000 fe11 	bl	8001d9c <SSD1306_GotoXY>

	char toArray[10];

	float time = GPS.utc_time + 20000; //make it CET
 800117a:	4b24      	ldr	r3, [pc, #144]	; (800120c <getTime+0xa0>)
 800117c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001180:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001210 <getTime+0xa4>
 8001184:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001188:	edc7 7a03 	vstr	s15, [r7, #12]
	sprintf(toArray, "%f", time );
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	f7ff f9e3 	bl	8000558 <__aeabi_f2d>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4638      	mov	r0, r7
 8001198:	491e      	ldr	r1, [pc, #120]	; (8001214 <getTime+0xa8>)
 800119a:	f007 fbbf 	bl	800891c <siprintf>

	if(time < 100000)
 800119e:	edd7 7a03 	vldr	s15, [r7, #12]
 80011a2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001218 <getTime+0xac>
 80011a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ae:	d510      	bpl.n	80011d2 <getTime+0x66>
		sprintf(toArray, "%c:%c%c:%c%c", toArray[0], toArray[1], toArray[2], toArray[3], toArray[4]);
 80011b0:	783b      	ldrb	r3, [r7, #0]
 80011b2:	461c      	mov	r4, r3
 80011b4:	787b      	ldrb	r3, [r7, #1]
 80011b6:	461d      	mov	r5, r3
 80011b8:	78bb      	ldrb	r3, [r7, #2]
 80011ba:	78fa      	ldrb	r2, [r7, #3]
 80011bc:	7939      	ldrb	r1, [r7, #4]
 80011be:	4638      	mov	r0, r7
 80011c0:	9102      	str	r1, [sp, #8]
 80011c2:	9201      	str	r2, [sp, #4]
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	462b      	mov	r3, r5
 80011c8:	4622      	mov	r2, r4
 80011ca:	4914      	ldr	r1, [pc, #80]	; (800121c <getTime+0xb0>)
 80011cc:	f007 fba6 	bl	800891c <siprintf>
 80011d0:	e012      	b.n	80011f8 <getTime+0x8c>
	else
		sprintf(toArray, "%c%c:%c%c:%c%c", toArray[0], toArray[1], toArray[2], toArray[3], toArray[4], toArray[5]);
 80011d2:	783b      	ldrb	r3, [r7, #0]
 80011d4:	461d      	mov	r5, r3
 80011d6:	787b      	ldrb	r3, [r7, #1]
 80011d8:	461e      	mov	r6, r3
 80011da:	78bb      	ldrb	r3, [r7, #2]
 80011dc:	78fa      	ldrb	r2, [r7, #3]
 80011de:	7939      	ldrb	r1, [r7, #4]
 80011e0:	7978      	ldrb	r0, [r7, #5]
 80011e2:	4604      	mov	r4, r0
 80011e4:	4638      	mov	r0, r7
 80011e6:	9403      	str	r4, [sp, #12]
 80011e8:	9102      	str	r1, [sp, #8]
 80011ea:	9201      	str	r2, [sp, #4]
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	4633      	mov	r3, r6
 80011f0:	462a      	mov	r2, r5
 80011f2:	490b      	ldr	r1, [pc, #44]	; (8001220 <getTime+0xb4>)
 80011f4:	f007 fb92 	bl	800891c <siprintf>

	SSD1306_Puts(toArray, &Font_7x10, 1);
 80011f8:	463b      	mov	r3, r7
 80011fa:	2201      	movs	r2, #1
 80011fc:	4909      	ldr	r1, [pc, #36]	; (8001224 <getTime+0xb8>)
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 fe62 	bl	8001ec8 <SSD1306_Puts>
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800120c:	20004c44 	.word	0x20004c44
 8001210:	469c4000 	.word	0x469c4000
 8001214:	0800cd1c 	.word	0x0800cd1c
 8001218:	47c35000 	.word	0x47c35000
 800121c:	0800cd20 	.word	0x0800cd20
 8001220:	0800cd30 	.word	0x0800cd30
 8001224:	20000000 	.word	0x20000000

08001228 <getActivity>:

void getActivity()
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
	SSD1306_GotoXY (0,0);
 800122e:	2100      	movs	r1, #0
 8001230:	2000      	movs	r0, #0
 8001232:	f000 fdb3 	bl	8001d9c <SSD1306_GotoXY>

	char * activity;
	switch (GPS.currentActivity) {
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <getActivity+0x50>)
 8001238:	f893 3264 	ldrb.w	r3, [r3, #612]	; 0x264
 800123c:	2b02      	cmp	r3, #2
 800123e:	d00c      	beq.n	800125a <getActivity+0x32>
 8001240:	2b02      	cmp	r3, #2
 8001242:	dc0d      	bgt.n	8001260 <getActivity+0x38>
 8001244:	2b00      	cmp	r3, #0
 8001246:	d002      	beq.n	800124e <getActivity+0x26>
 8001248:	2b01      	cmp	r3, #1
 800124a:	d003      	beq.n	8001254 <getActivity+0x2c>
 800124c:	e008      	b.n	8001260 <getActivity+0x38>
		case 0:
			activity = "Geen beweging";
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <getActivity+0x54>)
 8001250:	607b      	str	r3, [r7, #4]
			break;
 8001252:	e008      	b.n	8001266 <getActivity+0x3e>
		case 1:
			activity = "Wandelen     ";
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <getActivity+0x58>)
 8001256:	607b      	str	r3, [r7, #4]
			break;
 8001258:	e005      	b.n	8001266 <getActivity+0x3e>
		case 2:
			activity = "Hardlopen    ";
 800125a:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <getActivity+0x5c>)
 800125c:	607b      	str	r3, [r7, #4]
			break;
 800125e:	e002      	b.n	8001266 <getActivity+0x3e>
		default:
			activity = "onbekende activiteit";
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <getActivity+0x60>)
 8001262:	607b      	str	r3, [r7, #4]
			break;
 8001264:	bf00      	nop
	}

	SSD1306_Puts(activity, &Font_7x10, 1);
 8001266:	2201      	movs	r2, #1
 8001268:	4908      	ldr	r1, [pc, #32]	; (800128c <getActivity+0x64>)
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 fe2c 	bl	8001ec8 <SSD1306_Puts>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20004c44 	.word	0x20004c44
 800127c:	0800cd40 	.word	0x0800cd40
 8001280:	0800cd50 	.word	0x0800cd50
 8001284:	0800cd60 	.word	0x0800cd60
 8001288:	0800cd70 	.word	0x0800cd70
 800128c:	20000000 	.word	0x20000000

08001290 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	4b2d      	ldr	r3, [pc, #180]	; (8001360 <MX_GPIO_Init+0xd0>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a2c      	ldr	r2, [pc, #176]	; (8001360 <MX_GPIO_Init+0xd0>)
 80012b0:	f043 0304 	orr.w	r3, r3, #4
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b2a      	ldr	r3, [pc, #168]	; (8001360 <MX_GPIO_Init+0xd0>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0304 	and.w	r3, r3, #4
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b26      	ldr	r3, [pc, #152]	; (8001360 <MX_GPIO_Init+0xd0>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a25      	ldr	r2, [pc, #148]	; (8001360 <MX_GPIO_Init+0xd0>)
 80012cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b23      	ldr	r3, [pc, #140]	; (8001360 <MX_GPIO_Init+0xd0>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <MX_GPIO_Init+0xd0>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a1e      	ldr	r2, [pc, #120]	; (8001360 <MX_GPIO_Init+0xd0>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <MX_GPIO_Init+0xd0>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <MX_GPIO_Init+0xd0>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a17      	ldr	r2, [pc, #92]	; (8001360 <MX_GPIO_Init+0xd0>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <MX_GPIO_Init+0xd0>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	f240 3102 	movw	r1, #770	; 0x302
 800131c:	4811      	ldr	r0, [pc, #68]	; (8001364 <MX_GPIO_Init+0xd4>)
 800131e:	f001 fbed 	bl	8002afc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9;
 8001322:	f240 3302 	movw	r3, #770	; 0x302
 8001326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001328:	2301      	movs	r3, #1
 800132a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	4619      	mov	r1, r3
 800133a:	480a      	ldr	r0, [pc, #40]	; (8001364 <MX_GPIO_Init+0xd4>)
 800133c:	f001 fa5a 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001340:	2304      	movs	r3, #4
 8001342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001344:	2300      	movs	r3, #0
 8001346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	4619      	mov	r1, r3
 8001352:	4804      	ldr	r0, [pc, #16]	; (8001364 <MX_GPIO_Init+0xd4>)
 8001354:	f001 fa4e 	bl	80027f4 <HAL_GPIO_Init>

}
 8001358:	bf00      	nop
 800135a:	3728      	adds	r7, #40	; 0x28
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40023800 	.word	0x40023800
 8001364:	40020400 	.word	0x40020400

08001368 <GPS_Init>:
	CDC_Transmit_FS((unsigned char *) buf, (uint16_t) strlen(buf));
}
#endif

void GPS_Init()
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &GPS.rxTmp, 1);
 800136c:	2201      	movs	r2, #1
 800136e:	4903      	ldr	r1, [pc, #12]	; (800137c <GPS_Init+0x14>)
 8001370:	4803      	ldr	r0, [pc, #12]	; (8001380 <GPS_Init+0x18>)
 8001372:	f003 f940 	bl	80045f6 <HAL_UART_Receive_IT>
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20004ea0 	.word	0x20004ea0
 8001380:	20004fa0 	.word	0x20004fa0

08001384 <GPS_UART_CallBack>:


void GPS_UART_CallBack(){
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
	GPS.LastTime=HAL_GetTick();
 8001388:	f001 f8b4 	bl	80024f4 <HAL_GetTick>
 800138c:	4603      	mov	r3, r0
 800138e:	4a35      	ldr	r2, [pc, #212]	; (8001464 <GPS_UART_CallBack+0xe0>)
 8001390:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
	static int i = 0;
	if(GPS.rxTmp != '\n' && GPS.rxIndex < sizeof(GPS.rxBuffer)-2)
 8001394:	4b33      	ldr	r3, [pc, #204]	; (8001464 <GPS_UART_CallBack+0xe0>)
 8001396:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800139a:	2b0a      	cmp	r3, #10
 800139c:	d044      	beq.n	8001428 <GPS_UART_CallBack+0xa4>
 800139e:	4b31      	ldr	r3, [pc, #196]	; (8001464 <GPS_UART_CallBack+0xe0>)
 80013a0:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 80013a4:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80013a8:	d23e      	bcs.n	8001428 <GPS_UART_CallBack+0xa4>
	{
		if(i % 2)
 80013aa:	4b2f      	ldr	r3, [pc, #188]	; (8001468 <GPS_UART_CallBack+0xe4>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d032      	beq.n	800141c <GPS_UART_CallBack+0x98>
		{
			if(GPS.rxBuffer[GPS.rxIndex - 1]== ',' && GPS.rxTmp == ',') {  // check n-1 and n chr's for two ',,'
 80013b6:	4b2b      	ldr	r3, [pc, #172]	; (8001464 <GPS_UART_CallBack+0xe0>)
 80013b8:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 80013bc:	3b01      	subs	r3, #1
 80013be:	4a29      	ldr	r2, [pc, #164]	; (8001464 <GPS_UART_CallBack+0xe0>)
 80013c0:	4413      	add	r3, r2
 80013c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80013c6:	2b2c      	cmp	r3, #44	; 0x2c
 80013c8:	d115      	bne.n	80013f6 <GPS_UART_CallBack+0x72>
 80013ca:	4b26      	ldr	r3, [pc, #152]	; (8001464 <GPS_UART_CallBack+0xe0>)
 80013cc:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80013d0:	2b2c      	cmp	r3, #44	; 0x2c
 80013d2:	d110      	bne.n	80013f6 <GPS_UART_CallBack+0x72>
				GPS.rxBuffer[GPS.rxIndex] = '0';      // add a '0'
 80013d4:	4b23      	ldr	r3, [pc, #140]	; (8001464 <GPS_UART_CallBack+0xe0>)
 80013d6:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 80013da:	461a      	mov	r2, r3
 80013dc:	4b21      	ldr	r3, [pc, #132]	; (8001464 <GPS_UART_CallBack+0xe0>)
 80013de:	4413      	add	r3, r2
 80013e0:	2230      	movs	r2, #48	; 0x30
 80013e2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
				GPS.rxIndex++;
 80013e6:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <GPS_UART_CallBack+0xe0>)
 80013e8:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 80013ec:	3301      	adds	r3, #1
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <GPS_UART_CallBack+0xe0>)
 80013f2:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
			}

			GPS.rxBuffer[GPS.rxIndex] = GPS.rxTmp;
 80013f6:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <GPS_UART_CallBack+0xe0>)
 80013f8:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 80013fc:	4619      	mov	r1, r3
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <GPS_UART_CallBack+0xe0>)
 8001400:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 8001404:	4b17      	ldr	r3, [pc, #92]	; (8001464 <GPS_UART_CallBack+0xe0>)
 8001406:	440b      	add	r3, r1
 8001408:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

			GPS.rxIndex++;
 800140c:	4b15      	ldr	r3, [pc, #84]	; (8001464 <GPS_UART_CallBack+0xe0>)
 800140e:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 8001412:	3301      	adds	r3, #1
 8001414:	b29a      	uxth	r2, r3
 8001416:	4b13      	ldr	r3, [pc, #76]	; (8001464 <GPS_UART_CallBack+0xe0>)
 8001418:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
		}
		i++;
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <GPS_UART_CallBack+0xe4>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	3301      	adds	r3, #1
 8001422:	4a11      	ldr	r2, [pc, #68]	; (8001468 <GPS_UART_CallBack+0xe4>)
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	e015      	b.n	8001454 <GPS_UART_CallBack+0xd0>
	}
	else
	{

		if(GPS_validate((char*) GPS.rxBuffer))
 8001428:	4810      	ldr	r0, [pc, #64]	; (800146c <GPS_UART_CallBack+0xe8>)
 800142a:	f000 f825 	bl	8001478 <GPS_validate>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d002      	beq.n	800143a <GPS_UART_CallBack+0xb6>
			GPS_parse((char*) GPS.rxBuffer);
 8001434:	480d      	ldr	r0, [pc, #52]	; (800146c <GPS_UART_CallBack+0xe8>)
 8001436:	f000 f881 	bl	800153c <GPS_parse>
		GPS.rxIndex=0;
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <GPS_UART_CallBack+0xe0>)
 800143c:	2200      	movs	r2, #0
 800143e:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
		i = 0;
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <GPS_UART_CallBack+0xe4>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
		memset(GPS.rxBuffer, 0, sizeof(GPS.rxBuffer));
 8001448:	f44f 7200 	mov.w	r2, #512	; 0x200
 800144c:	2100      	movs	r1, #0
 800144e:	4807      	ldr	r0, [pc, #28]	; (800146c <GPS_UART_CallBack+0xe8>)
 8001450:	f006 fbdc 	bl	8007c0c <memset>
	}
	HAL_UART_Receive_IT(GPS_USART, &GPS.rxTmp, 1);
 8001454:	2201      	movs	r2, #1
 8001456:	4906      	ldr	r1, [pc, #24]	; (8001470 <GPS_UART_CallBack+0xec>)
 8001458:	4806      	ldr	r0, [pc, #24]	; (8001474 <GPS_UART_CallBack+0xf0>)
 800145a:	f003 f8cc 	bl	80045f6 <HAL_UART_Receive_IT>
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20004c44 	.word	0x20004c44
 8001468:	20000210 	.word	0x20000210
 800146c:	20004c9d 	.word	0x20004c9d
 8001470:	20004ea0 	.word	0x20004ea0
 8001474:	20004fa0 	.word	0x20004fa0

08001478 <GPS_validate>:


int GPS_validate(char *nmeastr){
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8001484:	2300      	movs	r3, #0
 8001486:	613b      	str	r3, [r7, #16]


    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b24      	cmp	r3, #36	; 0x24
 8001492:	d103      	bne.n	800149c <GPS_validate+0x24>
        i++;
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	3301      	adds	r3, #1
 8001498:	617b      	str	r3, [r7, #20]
    else
        return 0;


    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800149a:	e00c      	b.n	80014b6 <GPS_validate+0x3e>
        return 0;
 800149c:	2300      	movs	r3, #0
 800149e:	e047      	b.n	8001530 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	4053      	eors	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        i++;
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	3301      	adds	r3, #1
 80014b4:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	4413      	add	r3, r2
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d008      	beq.n	80014d4 <GPS_validate+0x5c>
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	4413      	add	r3, r2
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b2a      	cmp	r3, #42	; 0x2a
 80014cc:	d002      	beq.n	80014d4 <GPS_validate+0x5c>
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	2b4a      	cmp	r3, #74	; 0x4a
 80014d2:	dde5      	ble.n	80014a0 <GPS_validate+0x28>
    }

    if(i >= 75){
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	2b4a      	cmp	r3, #74	; 0x4a
 80014d8:	dd01      	ble.n	80014de <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 80014da:	2300      	movs	r3, #0
 80014dc:	e028      	b.n	8001530 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	4413      	add	r3, r2
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b2a      	cmp	r3, #42	; 0x2a
 80014e8:	d119      	bne.n	800151e <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3301      	adds	r3, #1
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	4413      	add	r3, r2
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	3302      	adds	r3, #2
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	490a      	ldr	r1, [pc, #40]	; (8001538 <GPS_validate+0xc0>)
 800150e:	4618      	mov	r0, r3
 8001510:	f007 fa04 	bl	800891c <siprintf>

    return((checkcalcstr[0] == check[0])
 8001514:	7a3a      	ldrb	r2, [r7, #8]
 8001516:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001518:	429a      	cmp	r2, r3
 800151a:	d108      	bne.n	800152e <GPS_validate+0xb6>
 800151c:	e001      	b.n	8001522 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 800151e:	2300      	movs	r3, #0
 8001520:	e006      	b.n	8001530 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001522:	7a7a      	ldrb	r2, [r7, #9]
 8001524:	7b7b      	ldrb	r3, [r7, #13]
 8001526:	429a      	cmp	r2, r3
 8001528:	d101      	bne.n	800152e <GPS_validate+0xb6>
 800152a:	2301      	movs	r3, #1
 800152c:	e000      	b.n	8001530 <GPS_validate+0xb8>
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	0800cd88 	.word	0x0800cd88

0800153c <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af08      	add	r7, sp, #32
 8001542:	6078      	str	r0, [r7, #4]



	   if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 8001544:	2206      	movs	r2, #6
 8001546:	494a      	ldr	r1, [pc, #296]	; (8001670 <GPS_parse+0x134>)
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f007 fa78 	bl	8008a3e <strncmp>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d118      	bne.n	8001586 <GPS_parse+0x4a>

	    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1)
 8001554:	4b47      	ldr	r3, [pc, #284]	; (8001674 <GPS_parse+0x138>)
 8001556:	9307      	str	r3, [sp, #28]
 8001558:	4b47      	ldr	r3, [pc, #284]	; (8001678 <GPS_parse+0x13c>)
 800155a:	9306      	str	r3, [sp, #24]
 800155c:	4b47      	ldr	r3, [pc, #284]	; (800167c <GPS_parse+0x140>)
 800155e:	9305      	str	r3, [sp, #20]
 8001560:	4b47      	ldr	r3, [pc, #284]	; (8001680 <GPS_parse+0x144>)
 8001562:	9304      	str	r3, [sp, #16]
 8001564:	4b47      	ldr	r3, [pc, #284]	; (8001684 <GPS_parse+0x148>)
 8001566:	9303      	str	r3, [sp, #12]
 8001568:	4b47      	ldr	r3, [pc, #284]	; (8001688 <GPS_parse+0x14c>)
 800156a:	9302      	str	r3, [sp, #8]
 800156c:	4b47      	ldr	r3, [pc, #284]	; (800168c <GPS_parse+0x150>)
 800156e:	9301      	str	r3, [sp, #4]
 8001570:	4b47      	ldr	r3, [pc, #284]	; (8001690 <GPS_parse+0x154>)
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	4b47      	ldr	r3, [pc, #284]	; (8001694 <GPS_parse+0x158>)
 8001576:	4a48      	ldr	r2, [pc, #288]	; (8001698 <GPS_parse+0x15c>)
 8001578:	4948      	ldr	r1, [pc, #288]	; (800169c <GPS_parse+0x160>)
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f007 f9ee 	bl	800895c <siscanf>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	e070      	b.n	8001668 <GPS_parse+0x12c>
	    		return;
	    }
	    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 8001586:	2206      	movs	r2, #6
 8001588:	4945      	ldr	r1, [pc, #276]	; (80016a0 <GPS_parse+0x164>)
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f007 fa57 	bl	8008a3e <strncmp>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d114      	bne.n	80015c0 <GPS_parse+0x84>

	    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 8001596:	4b43      	ldr	r3, [pc, #268]	; (80016a4 <GPS_parse+0x168>)
 8001598:	9305      	str	r3, [sp, #20]
 800159a:	4b43      	ldr	r3, [pc, #268]	; (80016a8 <GPS_parse+0x16c>)
 800159c:	9304      	str	r3, [sp, #16]
 800159e:	4b43      	ldr	r3, [pc, #268]	; (80016ac <GPS_parse+0x170>)
 80015a0:	9303      	str	r3, [sp, #12]
 80015a2:	4b39      	ldr	r3, [pc, #228]	; (8001688 <GPS_parse+0x14c>)
 80015a4:	9302      	str	r3, [sp, #8]
 80015a6:	4b39      	ldr	r3, [pc, #228]	; (800168c <GPS_parse+0x150>)
 80015a8:	9301      	str	r3, [sp, #4]
 80015aa:	4b39      	ldr	r3, [pc, #228]	; (8001690 <GPS_parse+0x154>)
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	4b39      	ldr	r3, [pc, #228]	; (8001694 <GPS_parse+0x158>)
 80015b0:	4a39      	ldr	r2, [pc, #228]	; (8001698 <GPS_parse+0x15c>)
 80015b2:	493f      	ldr	r1, [pc, #252]	; (80016b0 <GPS_parse+0x174>)
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f007 f9d1 	bl	800895c <siscanf>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	e053      	b.n	8001668 <GPS_parse+0x12c>
	    		return;
	    }
	    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 80015c0:	2206      	movs	r2, #6
 80015c2:	493c      	ldr	r1, [pc, #240]	; (80016b4 <GPS_parse+0x178>)
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f007 fa3a 	bl	8008a3e <strncmp>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d12f      	bne.n	8001630 <GPS_parse+0xf4>

	        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 80015d0:	4b39      	ldr	r3, [pc, #228]	; (80016b8 <GPS_parse+0x17c>)
 80015d2:	9303      	str	r3, [sp, #12]
 80015d4:	4b30      	ldr	r3, [pc, #192]	; (8001698 <GPS_parse+0x15c>)
 80015d6:	9302      	str	r3, [sp, #8]
 80015d8:	4b2b      	ldr	r3, [pc, #172]	; (8001688 <GPS_parse+0x14c>)
 80015da:	9301      	str	r3, [sp, #4]
 80015dc:	4b2b      	ldr	r3, [pc, #172]	; (800168c <GPS_parse+0x150>)
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	4b2b      	ldr	r3, [pc, #172]	; (8001690 <GPS_parse+0x154>)
 80015e2:	4a2c      	ldr	r2, [pc, #176]	; (8001694 <GPS_parse+0x158>)
 80015e4:	4935      	ldr	r1, [pc, #212]	; (80016bc <GPS_parse+0x180>)
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f007 f9b8 	bl	800895c <siscanf>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	dd3a      	ble.n	8001668 <GPS_parse+0x12c>
	        {
				GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80015f2:	4b33      	ldr	r3, [pc, #204]	; (80016c0 <GPS_parse+0x184>)
 80015f4:	edd3 7a05 	vldr	s15, [r3, #20]
 80015f8:	4b31      	ldr	r3, [pc, #196]	; (80016c0 <GPS_parse+0x184>)
 80015fa:	7f1b      	ldrb	r3, [r3, #28]
 80015fc:	4618      	mov	r0, r3
 80015fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001602:	f000 f871 	bl	80016e8 <GPS_nmea_to_dec>
 8001606:	eef0 7a40 	vmov.f32	s15, s0
 800160a:	4b2d      	ldr	r3, [pc, #180]	; (80016c0 <GPS_parse+0x184>)
 800160c:	edc3 7a01 	vstr	s15, [r3, #4]
				GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001610:	4b2b      	ldr	r3, [pc, #172]	; (80016c0 <GPS_parse+0x184>)
 8001612:	edd3 7a04 	vldr	s15, [r3, #16]
 8001616:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <GPS_parse+0x184>)
 8001618:	7f5b      	ldrb	r3, [r3, #29]
 800161a:	4618      	mov	r0, r3
 800161c:	eeb0 0a67 	vmov.f32	s0, s15
 8001620:	f000 f862 	bl	80016e8 <GPS_nmea_to_dec>
 8001624:	eef0 7a40 	vmov.f32	s15, s0
 8001628:	4b25      	ldr	r3, [pc, #148]	; (80016c0 <GPS_parse+0x184>)
 800162a:	edc3 7a00 	vstr	s15, [r3]

				return;
 800162e:	e01b      	b.n	8001668 <GPS_parse+0x12c>
			}
	    }
	    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 8001630:	2206      	movs	r2, #6
 8001632:	4924      	ldr	r1, [pc, #144]	; (80016c4 <GPS_parse+0x188>)
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f007 fa02 	bl	8008a3e <strncmp>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d113      	bne.n	8001668 <GPS_parse+0x12c>

			if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8001640:	4b21      	ldr	r3, [pc, #132]	; (80016c8 <GPS_parse+0x18c>)
 8001642:	9305      	str	r3, [sp, #20]
 8001644:	4b21      	ldr	r3, [pc, #132]	; (80016cc <GPS_parse+0x190>)
 8001646:	9304      	str	r3, [sp, #16]
 8001648:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <GPS_parse+0x194>)
 800164a:	9303      	str	r3, [sp, #12]
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <GPS_parse+0x170>)
 800164e:	9302      	str	r3, [sp, #8]
 8001650:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <GPS_parse+0x198>)
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <GPS_parse+0x19c>)
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	4b20      	ldr	r3, [pc, #128]	; (80016dc <GPS_parse+0x1a0>)
 800165a:	4a21      	ldr	r2, [pc, #132]	; (80016e0 <GPS_parse+0x1a4>)
 800165c:	4921      	ldr	r1, [pc, #132]	; (80016e4 <GPS_parse+0x1a8>)
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f007 f97c 	bl	800895c <siscanf>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
				return;

	    }
	}
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	0800cd90 	.word	0x0800cd90
 8001674:	20004c74 	.word	0x20004c74
 8001678:	20004c70 	.word	0x20004c70
 800167c:	20004c6c 	.word	0x20004c6c
 8001680:	20004c68 	.word	0x20004c68
 8001684:	20004c64 	.word	0x20004c64
 8001688:	20004c61 	.word	0x20004c61
 800168c:	20004c54 	.word	0x20004c54
 8001690:	20004c60 	.word	0x20004c60
 8001694:	20004c58 	.word	0x20004c58
 8001698:	20004c5c 	.word	0x20004c5c
 800169c:	0800cd98 	.word	0x0800cd98
 80016a0:	0800cdc0 	.word	0x0800cdc0
 80016a4:	20004c80 	.word	0x20004c80
 80016a8:	20004c7c 	.word	0x20004c7c
 80016ac:	20004c78 	.word	0x20004c78
 80016b0:	0800cdc8 	.word	0x0800cdc8
 80016b4:	0800cde8 	.word	0x0800cde8
 80016b8:	20004c84 	.word	0x20004c84
 80016bc:	0800cdf0 	.word	0x0800cdf0
 80016c0:	20004c44 	.word	0x20004c44
 80016c4:	0800ce0c 	.word	0x0800ce0c
 80016c8:	20004c9c 	.word	0x20004c9c
 80016cc:	20004c98 	.word	0x20004c98
 80016d0:	20004c95 	.word	0x20004c95
 80016d4:	20004c94 	.word	0x20004c94
 80016d8:	20004c90 	.word	0x20004c90
 80016dc:	20004c8c 	.word	0x20004c8c
 80016e0:	20004c88 	.word	0x20004c88
 80016e4:	0800ce14 	.word	0x0800ce14

080016e8 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 80016e8:	b480      	push	{r7}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	ed87 0a01 	vstr	s0, [r7, #4]
 80016f2:	4603      	mov	r3, r0
 80016f4:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 80016f6:	ed97 7a01 	vldr	s14, [r7, #4]
 80016fa:	eddf 6a20 	vldr	s13, [pc, #128]	; 800177c <GPS_nmea_to_dec+0x94>
 80016fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001702:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001706:	ee17 3a90 	vmov	r3, s15
 800170a:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	2264      	movs	r2, #100	; 0x64
 8001710:	fb02 f303 	mul.w	r3, r2, r3
 8001714:	ee07 3a90 	vmov	s15, r3
 8001718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800171c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001720:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001724:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8001728:	ed97 7a03 	vldr	s14, [r7, #12]
 800172c:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001780 <GPS_nmea_to_dec+0x98>
 8001730:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001734:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	ee07 3a90 	vmov	s15, r3
 800173e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001742:	ed97 7a02 	vldr	s14, [r7, #8]
 8001746:	ee77 7a27 	vadd.f32	s15, s14, s15
 800174a:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 800174e:	78fb      	ldrb	r3, [r7, #3]
 8001750:	2b53      	cmp	r3, #83	; 0x53
 8001752:	d002      	beq.n	800175a <GPS_nmea_to_dec+0x72>
 8001754:	78fb      	ldrb	r3, [r7, #3]
 8001756:	2b57      	cmp	r3, #87	; 0x57
 8001758:	d105      	bne.n	8001766 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 800175a:	edd7 7a05 	vldr	s15, [r7, #20]
 800175e:	eef1 7a67 	vneg.f32	s15, s15
 8001762:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	ee07 3a90 	vmov	s15, r3
}
 800176c:	eeb0 0a67 	vmov.f32	s0, s15
 8001770:	371c      	adds	r7, #28
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	42c80000 	.word	0x42c80000
 8001780:	42700000 	.word	0x42700000

08001784 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <MX_I2C1_Init+0x50>)
 800178a:	4a13      	ldr	r2, [pc, #76]	; (80017d8 <MX_I2C1_Init+0x54>)
 800178c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <MX_I2C1_Init+0x50>)
 8001790:	4a12      	ldr	r2, [pc, #72]	; (80017dc <MX_I2C1_Init+0x58>)
 8001792:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <MX_I2C1_Init+0x50>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800179a:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <MX_I2C1_Init+0x50>)
 800179c:	2200      	movs	r2, #0
 800179e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <MX_I2C1_Init+0x50>)
 80017a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017a8:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <MX_I2C1_Init+0x50>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <MX_I2C1_Init+0x50>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017b4:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <MX_I2C1_Init+0x50>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <MX_I2C1_Init+0x50>)
 80017bc:	2200      	movs	r2, #0
 80017be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017c0:	4804      	ldr	r0, [pc, #16]	; (80017d4 <MX_I2C1_Init+0x50>)
 80017c2:	f001 f9cf 	bl	8002b64 <HAL_I2C_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017cc:	f000 f8f8 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20004eac 	.word	0x20004eac
 80017d8:	40005400 	.word	0x40005400
 80017dc:	00061a80 	.word	0x00061a80

080017e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	; 0x28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a19      	ldr	r2, [pc, #100]	; (8001864 <HAL_I2C_MspInit+0x84>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d12b      	bne.n	800185a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	4b18      	ldr	r3, [pc, #96]	; (8001868 <HAL_I2C_MspInit+0x88>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a17      	ldr	r2, [pc, #92]	; (8001868 <HAL_I2C_MspInit+0x88>)
 800180c:	f043 0302 	orr.w	r3, r3, #2
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <HAL_I2C_MspInit+0x88>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800181e:	23c0      	movs	r3, #192	; 0xc0
 8001820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001822:	2312      	movs	r3, #18
 8001824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001826:	2301      	movs	r3, #1
 8001828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182a:	2303      	movs	r3, #3
 800182c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800182e:	2304      	movs	r3, #4
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	4619      	mov	r1, r3
 8001838:	480c      	ldr	r0, [pc, #48]	; (800186c <HAL_I2C_MspInit+0x8c>)
 800183a:	f000 ffdb 	bl	80027f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <HAL_I2C_MspInit+0x88>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	4a08      	ldr	r2, [pc, #32]	; (8001868 <HAL_I2C_MspInit+0x88>)
 8001848:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800184c:	6413      	str	r3, [r2, #64]	; 0x40
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_I2C_MspInit+0x88>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800185a:	bf00      	nop
 800185c:	3728      	adds	r7, #40	; 0x28
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40005400 	.word	0x40005400
 8001868:	40023800 	.word	0x40023800
 800186c:	40020400 	.word	0x40020400

08001870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001874:	f000 fe08 	bl	8002488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001878:	f000 f824 	bl	80018c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800187c:	f7ff fd08 	bl	8001290 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001880:	f7ff ff80 	bl	8001784 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001884:	f000 f8a2 	bl	80019cc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001888:	f000 fd62 	bl	8002350 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800188c:	f000 f87a 	bl	8001984 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  GPS_Init();
 8001890:	f7ff fd6a 	bl	8001368 <GPS_Init>
  SSD1306_Init();
 8001894:	f000 f918 	bl	8001ac8 <SSD1306_Init>
  SSD1306_Clear();
 8001898:	f000 fb3b 	bl	8001f12 <SSD1306_Clear>
  SSD1306_UpdateScreen();
 800189c:	f000 f9d8 	bl	8001c50 <SSD1306_UpdateScreen>

  __HAL_UART_ENABLE_IT(&huart1, UART_FLAG_RXNE);
 80018a0:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <main+0x50>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	695a      	ldr	r2, [r3, #20]
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <main+0x50>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f042 0220 	orr.w	r2, r2, #32
 80018ae:	615a      	str	r2, [r3, #20]
 // LL_USART_EnableIT_RXNE(USART1);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80018b0:	f003 fc24 	bl	80050fc <osKernelInitialize>
  MX_FREERTOS_Init();
 80018b4:	f7ff fba2 	bl	8000ffc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80018b8:	f003 fc44 	bl	8005144 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <main+0x4c>
 80018be:	bf00      	nop
 80018c0:	20004fa0 	.word	0x20004fa0

080018c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b094      	sub	sp, #80	; 0x50
 80018c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ca:	f107 0320 	add.w	r3, r7, #32
 80018ce:	2230      	movs	r2, #48	; 0x30
 80018d0:	2100      	movs	r1, #0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f006 f99a 	bl	8007c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018d8:	f107 030c 	add.w	r3, r7, #12
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e8:	2300      	movs	r3, #0
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	4b23      	ldr	r3, [pc, #140]	; (800197c <SystemClock_Config+0xb8>)
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	4a22      	ldr	r2, [pc, #136]	; (800197c <SystemClock_Config+0xb8>)
 80018f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f6:	6413      	str	r3, [r2, #64]	; 0x40
 80018f8:	4b20      	ldr	r3, [pc, #128]	; (800197c <SystemClock_Config+0xb8>)
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001904:	2300      	movs	r3, #0
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <SystemClock_Config+0xbc>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001910:	4a1b      	ldr	r2, [pc, #108]	; (8001980 <SystemClock_Config+0xbc>)
 8001912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	4b19      	ldr	r3, [pc, #100]	; (8001980 <SystemClock_Config+0xbc>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001924:	2302      	movs	r3, #2
 8001926:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001928:	2301      	movs	r3, #1
 800192a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800192c:	2310      	movs	r3, #16
 800192e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001930:	2300      	movs	r3, #0
 8001932:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001934:	f107 0320 	add.w	r3, r7, #32
 8001938:	4618      	mov	r0, r3
 800193a:	f001 fe8d 	bl	8003658 <HAL_RCC_OscConfig>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001944:	f000 f83c 	bl	80019c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001948:	230f      	movs	r3, #15
 800194a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800194c:	2300      	movs	r3, #0
 800194e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001954:	2300      	movs	r3, #0
 8001956:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001958:	2300      	movs	r3, #0
 800195a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800195c:	f107 030c 	add.w	r3, r7, #12
 8001960:	2100      	movs	r1, #0
 8001962:	4618      	mov	r0, r3
 8001964:	f002 f8f0 	bl	8003b48 <HAL_RCC_ClockConfig>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800196e:	f000 f827 	bl	80019c0 <Error_Handler>
  }
}
 8001972:	bf00      	nop
 8001974:	3750      	adds	r7, #80	; 0x50
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800
 8001980:	40007000 	.word	0x40007000

08001984 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001988:	2200      	movs	r2, #0
 800198a:	2105      	movs	r1, #5
 800198c:	2025      	movs	r0, #37	; 0x25
 800198e:	f000 fe75 	bl	800267c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001992:	2025      	movs	r0, #37	; 0x25
 8001994:	f000 fe8e 	bl	80026b4 <HAL_NVIC_EnableIRQ>
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a04      	ldr	r2, [pc, #16]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d101      	bne.n	80019b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019ae:	f000 fd8d 	bl	80024cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40000400 	.word	0x40000400

080019c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c4:	b672      	cpsid	i
}
 80019c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <Error_Handler+0x8>
	...

080019cc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80019d0:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <MX_SPI1_Init+0x64>)
 80019d2:	4a18      	ldr	r2, [pc, #96]	; (8001a34 <MX_SPI1_Init+0x68>)
 80019d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019d6:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <MX_SPI1_Init+0x64>)
 80019d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019de:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <MX_SPI1_Init+0x64>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019e4:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <MX_SPI1_Init+0x64>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <MX_SPI1_Init+0x64>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019f0:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <MX_SPI1_Init+0x64>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80019f6:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <MX_SPI1_Init+0x64>)
 80019f8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80019fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019fe:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <MX_SPI1_Init+0x64>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a04:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <MX_SPI1_Init+0x64>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a0a:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <MX_SPI1_Init+0x64>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a10:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <MX_SPI1_Init+0x64>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <MX_SPI1_Init+0x64>)
 8001a18:	220a      	movs	r2, #10
 8001a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a1c:	4804      	ldr	r0, [pc, #16]	; (8001a30 <MX_SPI1_Init+0x64>)
 8001a1e:	f002 fa95 	bl	8003f4c <HAL_SPI_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a28:	f7ff ffca 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20004f00 	.word	0x20004f00
 8001a34:	40013000 	.word	0x40013000

08001a38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	; 0x28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a19      	ldr	r2, [pc, #100]	; (8001abc <HAL_SPI_MspInit+0x84>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d12c      	bne.n	8001ab4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <HAL_SPI_MspInit+0x88>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	4a17      	ldr	r2, [pc, #92]	; (8001ac0 <HAL_SPI_MspInit+0x88>)
 8001a64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a68:	6453      	str	r3, [r2, #68]	; 0x44
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <HAL_SPI_MspInit+0x88>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <HAL_SPI_MspInit+0x88>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a10      	ldr	r2, [pc, #64]	; (8001ac0 <HAL_SPI_MspInit+0x88>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <HAL_SPI_MspInit+0x88>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 8001a92:	f248 03e0 	movw	r3, #32992	; 0x80e0
 8001a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001aa4:	2305      	movs	r3, #5
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	4619      	mov	r1, r3
 8001aae:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <HAL_SPI_MspInit+0x8c>)
 8001ab0:	f000 fea0 	bl	80027f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	3728      	adds	r7, #40	; 0x28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40013000 	.word	0x40013000
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40020000 	.word	0x40020000

08001ac8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001ace:	f000 fa29 	bl	8001f24 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001ad2:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	2178      	movs	r1, #120	; 0x78
 8001ada:	485b      	ldr	r0, [pc, #364]	; (8001c48 <SSD1306_Init+0x180>)
 8001adc:	f001 fa84 	bl	8002fe8 <HAL_I2C_IsDeviceReady>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	e0a9      	b.n	8001c3e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001aea:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001aee:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001af0:	e002      	b.n	8001af8 <SSD1306_Init+0x30>
		p--;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3b01      	subs	r3, #1
 8001af6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f9      	bne.n	8001af2 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001afe:	22ae      	movs	r2, #174	; 0xae
 8001b00:	2100      	movs	r1, #0
 8001b02:	2078      	movs	r0, #120	; 0x78
 8001b04:	f000 fa6c 	bl	8001fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001b08:	2220      	movs	r2, #32
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	2078      	movs	r0, #120	; 0x78
 8001b0e:	f000 fa67 	bl	8001fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001b12:	2210      	movs	r2, #16
 8001b14:	2100      	movs	r1, #0
 8001b16:	2078      	movs	r0, #120	; 0x78
 8001b18:	f000 fa62 	bl	8001fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001b1c:	22b0      	movs	r2, #176	; 0xb0
 8001b1e:	2100      	movs	r1, #0
 8001b20:	2078      	movs	r0, #120	; 0x78
 8001b22:	f000 fa5d 	bl	8001fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001b26:	22c8      	movs	r2, #200	; 0xc8
 8001b28:	2100      	movs	r1, #0
 8001b2a:	2078      	movs	r0, #120	; 0x78
 8001b2c:	f000 fa58 	bl	8001fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001b30:	2200      	movs	r2, #0
 8001b32:	2100      	movs	r1, #0
 8001b34:	2078      	movs	r0, #120	; 0x78
 8001b36:	f000 fa53 	bl	8001fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001b3a:	2210      	movs	r2, #16
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	2078      	movs	r0, #120	; 0x78
 8001b40:	f000 fa4e 	bl	8001fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001b44:	2240      	movs	r2, #64	; 0x40
 8001b46:	2100      	movs	r1, #0
 8001b48:	2078      	movs	r0, #120	; 0x78
 8001b4a:	f000 fa49 	bl	8001fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001b4e:	2281      	movs	r2, #129	; 0x81
 8001b50:	2100      	movs	r1, #0
 8001b52:	2078      	movs	r0, #120	; 0x78
 8001b54:	f000 fa44 	bl	8001fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001b58:	22ff      	movs	r2, #255	; 0xff
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	2078      	movs	r0, #120	; 0x78
 8001b5e:	f000 fa3f 	bl	8001fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001b62:	22a1      	movs	r2, #161	; 0xa1
 8001b64:	2100      	movs	r1, #0
 8001b66:	2078      	movs	r0, #120	; 0x78
 8001b68:	f000 fa3a 	bl	8001fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001b6c:	22a6      	movs	r2, #166	; 0xa6
 8001b6e:	2100      	movs	r1, #0
 8001b70:	2078      	movs	r0, #120	; 0x78
 8001b72:	f000 fa35 	bl	8001fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001b76:	22a8      	movs	r2, #168	; 0xa8
 8001b78:	2100      	movs	r1, #0
 8001b7a:	2078      	movs	r0, #120	; 0x78
 8001b7c:	f000 fa30 	bl	8001fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001b80:	223f      	movs	r2, #63	; 0x3f
 8001b82:	2100      	movs	r1, #0
 8001b84:	2078      	movs	r0, #120	; 0x78
 8001b86:	f000 fa2b 	bl	8001fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001b8a:	22a4      	movs	r2, #164	; 0xa4
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	2078      	movs	r0, #120	; 0x78
 8001b90:	f000 fa26 	bl	8001fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001b94:	22d3      	movs	r2, #211	; 0xd3
 8001b96:	2100      	movs	r1, #0
 8001b98:	2078      	movs	r0, #120	; 0x78
 8001b9a:	f000 fa21 	bl	8001fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	2078      	movs	r0, #120	; 0x78
 8001ba4:	f000 fa1c 	bl	8001fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001ba8:	22d5      	movs	r2, #213	; 0xd5
 8001baa:	2100      	movs	r1, #0
 8001bac:	2078      	movs	r0, #120	; 0x78
 8001bae:	f000 fa17 	bl	8001fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001bb2:	22f0      	movs	r2, #240	; 0xf0
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	2078      	movs	r0, #120	; 0x78
 8001bb8:	f000 fa12 	bl	8001fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001bbc:	22d9      	movs	r2, #217	; 0xd9
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	2078      	movs	r0, #120	; 0x78
 8001bc2:	f000 fa0d 	bl	8001fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001bc6:	2222      	movs	r2, #34	; 0x22
 8001bc8:	2100      	movs	r1, #0
 8001bca:	2078      	movs	r0, #120	; 0x78
 8001bcc:	f000 fa08 	bl	8001fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001bd0:	22da      	movs	r2, #218	; 0xda
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	2078      	movs	r0, #120	; 0x78
 8001bd6:	f000 fa03 	bl	8001fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001bda:	2212      	movs	r2, #18
 8001bdc:	2100      	movs	r1, #0
 8001bde:	2078      	movs	r0, #120	; 0x78
 8001be0:	f000 f9fe 	bl	8001fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001be4:	22db      	movs	r2, #219	; 0xdb
 8001be6:	2100      	movs	r1, #0
 8001be8:	2078      	movs	r0, #120	; 0x78
 8001bea:	f000 f9f9 	bl	8001fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001bee:	2220      	movs	r2, #32
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	2078      	movs	r0, #120	; 0x78
 8001bf4:	f000 f9f4 	bl	8001fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001bf8:	228d      	movs	r2, #141	; 0x8d
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	2078      	movs	r0, #120	; 0x78
 8001bfe:	f000 f9ef 	bl	8001fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001c02:	2214      	movs	r2, #20
 8001c04:	2100      	movs	r1, #0
 8001c06:	2078      	movs	r0, #120	; 0x78
 8001c08:	f000 f9ea 	bl	8001fe0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001c0c:	22af      	movs	r2, #175	; 0xaf
 8001c0e:	2100      	movs	r1, #0
 8001c10:	2078      	movs	r0, #120	; 0x78
 8001c12:	f000 f9e5 	bl	8001fe0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001c16:	222e      	movs	r2, #46	; 0x2e
 8001c18:	2100      	movs	r1, #0
 8001c1a:	2078      	movs	r0, #120	; 0x78
 8001c1c:	f000 f9e0 	bl	8001fe0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001c20:	2000      	movs	r0, #0
 8001c22:	f000 f843 	bl	8001cac <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001c26:	f000 f813 	bl	8001c50 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001c2a:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <SSD1306_Init+0x184>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <SSD1306_Init+0x184>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001c36:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <SSD1306_Init+0x184>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001c3c:	2301      	movs	r3, #1
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20004eac 	.word	0x20004eac
 8001c4c:	20000614 	.word	0x20000614

08001c50 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001c56:	2300      	movs	r3, #0
 8001c58:	71fb      	strb	r3, [r7, #7]
 8001c5a:	e01d      	b.n	8001c98 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	3b50      	subs	r3, #80	; 0x50
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	461a      	mov	r2, r3
 8001c64:	2100      	movs	r1, #0
 8001c66:	2078      	movs	r0, #120	; 0x78
 8001c68:	f000 f9ba 	bl	8001fe0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2100      	movs	r1, #0
 8001c70:	2078      	movs	r0, #120	; 0x78
 8001c72:	f000 f9b5 	bl	8001fe0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001c76:	2210      	movs	r2, #16
 8001c78:	2100      	movs	r1, #0
 8001c7a:	2078      	movs	r0, #120	; 0x78
 8001c7c:	f000 f9b0 	bl	8001fe0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	01db      	lsls	r3, r3, #7
 8001c84:	4a08      	ldr	r2, [pc, #32]	; (8001ca8 <SSD1306_UpdateScreen+0x58>)
 8001c86:	441a      	add	r2, r3
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	2140      	movs	r1, #64	; 0x40
 8001c8c:	2078      	movs	r0, #120	; 0x78
 8001c8e:	f000 f95f 	bl	8001f50 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	3301      	adds	r3, #1
 8001c96:	71fb      	strb	r3, [r7, #7]
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	2b07      	cmp	r3, #7
 8001c9c:	d9de      	bls.n	8001c5c <SSD1306_UpdateScreen+0xc>
	}
}
 8001c9e:	bf00      	nop
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000214 	.word	0x20000214

08001cac <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <SSD1306_Fill+0x14>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	e000      	b.n	8001cc2 <SSD1306_Fill+0x16>
 8001cc0:	23ff      	movs	r3, #255	; 0xff
 8001cc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4803      	ldr	r0, [pc, #12]	; (8001cd8 <SSD1306_Fill+0x2c>)
 8001cca:	f005 ff9f 	bl	8007c0c <memset>
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000214 	.word	0x20000214

08001cdc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	80fb      	strh	r3, [r7, #6]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	80bb      	strh	r3, [r7, #4]
 8001cea:	4613      	mov	r3, r2
 8001cec:	70fb      	strb	r3, [r7, #3]
	if (
 8001cee:	88fb      	ldrh	r3, [r7, #6]
 8001cf0:	2b7f      	cmp	r3, #127	; 0x7f
 8001cf2:	d848      	bhi.n	8001d86 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001cf4:	88bb      	ldrh	r3, [r7, #4]
 8001cf6:	2b3f      	cmp	r3, #63	; 0x3f
 8001cf8:	d845      	bhi.n	8001d86 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001cfa:	4b26      	ldr	r3, [pc, #152]	; (8001d94 <SSD1306_DrawPixel+0xb8>)
 8001cfc:	791b      	ldrb	r3, [r3, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d006      	beq.n	8001d10 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001d02:	78fb      	ldrb	r3, [r7, #3]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	bf0c      	ite	eq
 8001d08:	2301      	moveq	r3, #1
 8001d0a:	2300      	movne	r3, #0
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001d10:	78fb      	ldrb	r3, [r7, #3]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d11a      	bne.n	8001d4c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001d16:	88fa      	ldrh	r2, [r7, #6]
 8001d18:	88bb      	ldrh	r3, [r7, #4]
 8001d1a:	08db      	lsrs	r3, r3, #3
 8001d1c:	b298      	uxth	r0, r3
 8001d1e:	4603      	mov	r3, r0
 8001d20:	01db      	lsls	r3, r3, #7
 8001d22:	4413      	add	r3, r2
 8001d24:	4a1c      	ldr	r2, [pc, #112]	; (8001d98 <SSD1306_DrawPixel+0xbc>)
 8001d26:	5cd3      	ldrb	r3, [r2, r3]
 8001d28:	b25a      	sxtb	r2, r3
 8001d2a:	88bb      	ldrh	r3, [r7, #4]
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	2101      	movs	r1, #1
 8001d32:	fa01 f303 	lsl.w	r3, r1, r3
 8001d36:	b25b      	sxtb	r3, r3
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	b259      	sxtb	r1, r3
 8001d3c:	88fa      	ldrh	r2, [r7, #6]
 8001d3e:	4603      	mov	r3, r0
 8001d40:	01db      	lsls	r3, r3, #7
 8001d42:	4413      	add	r3, r2
 8001d44:	b2c9      	uxtb	r1, r1
 8001d46:	4a14      	ldr	r2, [pc, #80]	; (8001d98 <SSD1306_DrawPixel+0xbc>)
 8001d48:	54d1      	strb	r1, [r2, r3]
 8001d4a:	e01d      	b.n	8001d88 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001d4c:	88fa      	ldrh	r2, [r7, #6]
 8001d4e:	88bb      	ldrh	r3, [r7, #4]
 8001d50:	08db      	lsrs	r3, r3, #3
 8001d52:	b298      	uxth	r0, r3
 8001d54:	4603      	mov	r3, r0
 8001d56:	01db      	lsls	r3, r3, #7
 8001d58:	4413      	add	r3, r2
 8001d5a:	4a0f      	ldr	r2, [pc, #60]	; (8001d98 <SSD1306_DrawPixel+0xbc>)
 8001d5c:	5cd3      	ldrb	r3, [r2, r3]
 8001d5e:	b25a      	sxtb	r2, r3
 8001d60:	88bb      	ldrh	r3, [r7, #4]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	2101      	movs	r1, #1
 8001d68:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6c:	b25b      	sxtb	r3, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	b25b      	sxtb	r3, r3
 8001d72:	4013      	ands	r3, r2
 8001d74:	b259      	sxtb	r1, r3
 8001d76:	88fa      	ldrh	r2, [r7, #6]
 8001d78:	4603      	mov	r3, r0
 8001d7a:	01db      	lsls	r3, r3, #7
 8001d7c:	4413      	add	r3, r2
 8001d7e:	b2c9      	uxtb	r1, r1
 8001d80:	4a05      	ldr	r2, [pc, #20]	; (8001d98 <SSD1306_DrawPixel+0xbc>)
 8001d82:	54d1      	strb	r1, [r2, r3]
 8001d84:	e000      	b.n	8001d88 <SSD1306_DrawPixel+0xac>
		return;
 8001d86:	bf00      	nop
	}
}
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	20000614 	.word	0x20000614
 8001d98:	20000214 	.word	0x20000214

08001d9c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	460a      	mov	r2, r1
 8001da6:	80fb      	strh	r3, [r7, #6]
 8001da8:	4613      	mov	r3, r2
 8001daa:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001dac:	4a05      	ldr	r2, [pc, #20]	; (8001dc4 <SSD1306_GotoXY+0x28>)
 8001dae:	88fb      	ldrh	r3, [r7, #6]
 8001db0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001db2:	4a04      	ldr	r2, [pc, #16]	; (8001dc4 <SSD1306_GotoXY+0x28>)
 8001db4:	88bb      	ldrh	r3, [r7, #4]
 8001db6:	8053      	strh	r3, [r2, #2]
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	20000614 	.word	0x20000614

08001dc8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	6039      	str	r1, [r7, #0]
 8001dd2:	71fb      	strb	r3, [r7, #7]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001dd8:	4b3a      	ldr	r3, [pc, #232]	; (8001ec4 <SSD1306_Putc+0xfc>)
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	4413      	add	r3, r2
	if (
 8001de4:	2b7f      	cmp	r3, #127	; 0x7f
 8001de6:	dc07      	bgt.n	8001df8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001de8:	4b36      	ldr	r3, [pc, #216]	; (8001ec4 <SSD1306_Putc+0xfc>)
 8001dea:	885b      	ldrh	r3, [r3, #2]
 8001dec:	461a      	mov	r2, r3
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	785b      	ldrb	r3, [r3, #1]
 8001df2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001df4:	2b3f      	cmp	r3, #63	; 0x3f
 8001df6:	dd01      	ble.n	8001dfc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	e05e      	b.n	8001eba <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	e04b      	b.n	8001e9a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	3b20      	subs	r3, #32
 8001e0a:	6839      	ldr	r1, [r7, #0]
 8001e0c:	7849      	ldrb	r1, [r1, #1]
 8001e0e:	fb01 f303 	mul.w	r3, r1, r3
 8001e12:	4619      	mov	r1, r3
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	440b      	add	r3, r1
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	4413      	add	r3, r2
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001e20:	2300      	movs	r3, #0
 8001e22:	613b      	str	r3, [r7, #16]
 8001e24:	e030      	b.n	8001e88 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d010      	beq.n	8001e58 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001e36:	4b23      	ldr	r3, [pc, #140]	; (8001ec4 <SSD1306_Putc+0xfc>)
 8001e38:	881a      	ldrh	r2, [r3, #0]
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	4413      	add	r3, r2
 8001e40:	b298      	uxth	r0, r3
 8001e42:	4b20      	ldr	r3, [pc, #128]	; (8001ec4 <SSD1306_Putc+0xfc>)
 8001e44:	885a      	ldrh	r2, [r3, #2]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	79ba      	ldrb	r2, [r7, #6]
 8001e50:	4619      	mov	r1, r3
 8001e52:	f7ff ff43 	bl	8001cdc <SSD1306_DrawPixel>
 8001e56:	e014      	b.n	8001e82 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001e58:	4b1a      	ldr	r3, [pc, #104]	; (8001ec4 <SSD1306_Putc+0xfc>)
 8001e5a:	881a      	ldrh	r2, [r3, #0]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	4413      	add	r3, r2
 8001e62:	b298      	uxth	r0, r3
 8001e64:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <SSD1306_Putc+0xfc>)
 8001e66:	885a      	ldrh	r2, [r3, #2]
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	b299      	uxth	r1, r3
 8001e70:	79bb      	ldrb	r3, [r7, #6]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	bf0c      	ite	eq
 8001e76:	2301      	moveq	r3, #1
 8001e78:	2300      	movne	r3, #0
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	f7ff ff2d 	bl	8001cdc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	3301      	adds	r3, #1
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d3c8      	bcc.n	8001e26 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	3301      	adds	r3, #1
 8001e98:	617b      	str	r3, [r7, #20]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	785b      	ldrb	r3, [r3, #1]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d3ad      	bcc.n	8001e02 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001ea6:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <SSD1306_Putc+0xfc>)
 8001ea8:	881a      	ldrh	r2, [r3, #0]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	4b03      	ldr	r3, [pc, #12]	; (8001ec4 <SSD1306_Putc+0xfc>)
 8001eb6:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000614 	.word	0x20000614

08001ec8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001ed6:	e012      	b.n	8001efe <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	79fa      	ldrb	r2, [r7, #7]
 8001ede:	68b9      	ldr	r1, [r7, #8]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff71 	bl	8001dc8 <SSD1306_Putc>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	461a      	mov	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d002      	beq.n	8001ef8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	e008      	b.n	8001f0a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	3301      	adds	r3, #1
 8001efc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1e8      	bne.n	8001ed8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	781b      	ldrb	r3, [r3, #0]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001f16:	2000      	movs	r0, #0
 8001f18:	f7ff fec8 	bl	8001cac <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001f1c:	f7ff fe98 	bl	8001c50 <SSD1306_UpdateScreen>
}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <ssd1306_I2C_Init+0x28>)
 8001f2c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001f2e:	e002      	b.n	8001f36 <ssd1306_I2C_Init+0x12>
		p--;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1f9      	bne.n	8001f30 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001f3c:	bf00      	nop
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	0003d090 	.word	0x0003d090

08001f50 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001f50:	b590      	push	{r4, r7, lr}
 8001f52:	b0c7      	sub	sp, #284	; 0x11c
 8001f54:	af02      	add	r7, sp, #8
 8001f56:	4604      	mov	r4, r0
 8001f58:	4608      	mov	r0, r1
 8001f5a:	4639      	mov	r1, r7
 8001f5c:	600a      	str	r2, [r1, #0]
 8001f5e:	4619      	mov	r1, r3
 8001f60:	1dfb      	adds	r3, r7, #7
 8001f62:	4622      	mov	r2, r4
 8001f64:	701a      	strb	r2, [r3, #0]
 8001f66:	1dbb      	adds	r3, r7, #6
 8001f68:	4602      	mov	r2, r0
 8001f6a:	701a      	strb	r2, [r3, #0]
 8001f6c:	1d3b      	adds	r3, r7, #4
 8001f6e:	460a      	mov	r2, r1
 8001f70:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001f72:	f107 030c 	add.w	r3, r7, #12
 8001f76:	1dba      	adds	r2, r7, #6
 8001f78:	7812      	ldrb	r2, [r2, #0]
 8001f7a:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001f82:	e010      	b.n	8001fa6 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001f84:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001f88:	463a      	mov	r2, r7
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	441a      	add	r2, r3
 8001f8e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001f92:	3301      	adds	r3, #1
 8001f94:	7811      	ldrb	r1, [r2, #0]
 8001f96:	f107 020c 	add.w	r2, r7, #12
 8001f9a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001f9c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001fa6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	1d3a      	adds	r2, r7, #4
 8001fae:	8812      	ldrh	r2, [r2, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d8e7      	bhi.n	8001f84 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001fb4:	1dfb      	adds	r3, r7, #7
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	b299      	uxth	r1, r3
 8001fba:	1d3b      	adds	r3, r7, #4
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	f107 020c 	add.w	r2, r7, #12
 8001fc6:	200a      	movs	r0, #10
 8001fc8:	9000      	str	r0, [sp, #0]
 8001fca:	4804      	ldr	r0, [pc, #16]	; (8001fdc <ssd1306_I2C_WriteMulti+0x8c>)
 8001fcc:	f000 ff0e 	bl	8002dec <HAL_I2C_Master_Transmit>
}
 8001fd0:	bf00      	nop
 8001fd2:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd90      	pop	{r4, r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20004eac 	.word	0x20004eac

08001fe0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af02      	add	r7, sp, #8
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
 8001fea:	460b      	mov	r3, r1
 8001fec:	71bb      	strb	r3, [r7, #6]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001ff2:	79bb      	ldrb	r3, [r7, #6]
 8001ff4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001ff6:	797b      	ldrb	r3, [r7, #5]
 8001ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	b299      	uxth	r1, r3
 8001ffe:	f107 020c 	add.w	r2, r7, #12
 8002002:	230a      	movs	r3, #10
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	2302      	movs	r3, #2
 8002008:	4803      	ldr	r0, [pc, #12]	; (8002018 <ssd1306_I2C_Write+0x38>)
 800200a:	f000 feef 	bl	8002dec <HAL_I2C_Master_Transmit>
}
 800200e:	bf00      	nop
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20004eac 	.word	0x20004eac

0800201c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	607b      	str	r3, [r7, #4]
 8002026:	4b12      	ldr	r3, [pc, #72]	; (8002070 <HAL_MspInit+0x54>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	4a11      	ldr	r2, [pc, #68]	; (8002070 <HAL_MspInit+0x54>)
 800202c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002030:	6453      	str	r3, [r2, #68]	; 0x44
 8002032:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <HAL_MspInit+0x54>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800203a:	607b      	str	r3, [r7, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	603b      	str	r3, [r7, #0]
 8002042:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <HAL_MspInit+0x54>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	4a0a      	ldr	r2, [pc, #40]	; (8002070 <HAL_MspInit+0x54>)
 8002048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800204c:	6413      	str	r3, [r2, #64]	; 0x40
 800204e:	4b08      	ldr	r3, [pc, #32]	; (8002070 <HAL_MspInit+0x54>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800205a:	2200      	movs	r2, #0
 800205c:	210f      	movs	r1, #15
 800205e:	f06f 0001 	mvn.w	r0, #1
 8002062:	f000 fb0b 	bl	800267c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40023800 	.word	0x40023800

08002074 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08c      	sub	sp, #48	; 0x30
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8002084:	2200      	movs	r2, #0
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	201d      	movs	r0, #29
 800208a:	f000 faf7 	bl	800267c <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800208e:	201d      	movs	r0, #29
 8002090:	f000 fb10 	bl	80026b4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002094:	2300      	movs	r3, #0
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	4b1e      	ldr	r3, [pc, #120]	; (8002114 <HAL_InitTick+0xa0>)
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	4a1d      	ldr	r2, [pc, #116]	; (8002114 <HAL_InitTick+0xa0>)
 800209e:	f043 0302 	orr.w	r3, r3, #2
 80020a2:	6413      	str	r3, [r2, #64]	; 0x40
 80020a4:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <HAL_InitTick+0xa0>)
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020b0:	f107 0210 	add.w	r2, r7, #16
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	4611      	mov	r1, r2
 80020ba:	4618      	mov	r0, r3
 80020bc:	f001 ff14 	bl	8003ee8 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80020c0:	f001 feea 	bl	8003e98 <HAL_RCC_GetPCLK1Freq>
 80020c4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c8:	4a13      	ldr	r2, [pc, #76]	; (8002118 <HAL_InitTick+0xa4>)
 80020ca:	fba2 2303 	umull	r2, r3, r2, r3
 80020ce:	0c9b      	lsrs	r3, r3, #18
 80020d0:	3b01      	subs	r3, #1
 80020d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80020d4:	4b11      	ldr	r3, [pc, #68]	; (800211c <HAL_InitTick+0xa8>)
 80020d6:	4a12      	ldr	r2, [pc, #72]	; (8002120 <HAL_InitTick+0xac>)
 80020d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <HAL_InitTick+0xa8>)
 80020dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020e0:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80020e2:	4a0e      	ldr	r2, [pc, #56]	; (800211c <HAL_InitTick+0xa8>)
 80020e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e6:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80020e8:	4b0c      	ldr	r3, [pc, #48]	; (800211c <HAL_InitTick+0xa8>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ee:	4b0b      	ldr	r3, [pc, #44]	; (800211c <HAL_InitTick+0xa8>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80020f4:	4809      	ldr	r0, [pc, #36]	; (800211c <HAL_InitTick+0xa8>)
 80020f6:	f001 ffb2 	bl	800405e <HAL_TIM_Base_Init>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d104      	bne.n	800210a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8002100:	4806      	ldr	r0, [pc, #24]	; (800211c <HAL_InitTick+0xa8>)
 8002102:	f002 f805 	bl	8004110 <HAL_TIM_Base_Start_IT>
 8002106:	4603      	mov	r3, r0
 8002108:	e000      	b.n	800210c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
}
 800210c:	4618      	mov	r0, r3
 800210e:	3730      	adds	r7, #48	; 0x30
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40023800 	.word	0x40023800
 8002118:	431bde83 	.word	0x431bde83
 800211c:	20004f58 	.word	0x20004f58
 8002120:	40000400 	.word	0x40000400

08002124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002128:	e7fe      	b.n	8002128 <NMI_Handler+0x4>

0800212a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800212e:	e7fe      	b.n	800212e <HardFault_Handler+0x4>

08002130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002134:	e7fe      	b.n	8002134 <MemManage_Handler+0x4>

08002136 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002136:	b480      	push	{r7}
 8002138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800213a:	e7fe      	b.n	800213a <BusFault_Handler+0x4>

0800213c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002140:	e7fe      	b.n	8002140 <UsageFault_Handler+0x4>

08002142 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002154:	4802      	ldr	r0, [pc, #8]	; (8002160 <TIM3_IRQHandler+0x10>)
 8002156:	f002 f83d 	bl	80041d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20004f58 	.word	0x20004f58

08002164 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  HAL_UART_RxCpltCallback(&huart1);
 8002168:	4803      	ldr	r0, [pc, #12]	; (8002178 <USART1_IRQHandler+0x14>)
 800216a:	f000 f807 	bl	800217c <HAL_UART_RxCpltCallback>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800216e:	4802      	ldr	r0, [pc, #8]	; (8002178 <USART1_IRQHandler+0x14>)
 8002170:	f002 fa72 	bl	8004658 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  //GPS_CallBack();
  /* USER CODE END USART1_IRQn 1 */
}
 8002174:	bf00      	nop
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20004fa0 	.word	0x20004fa0

0800217c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
	GPS_UART_CallBack();
 8002184:	f7ff f8fe 	bl	8001384 <GPS_UART_CallBack>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8002188:	f44f 7100 	mov.w	r1, #512	; 0x200
 800218c:	4803      	ldr	r0, [pc, #12]	; (800219c <HAL_UART_RxCpltCallback+0x20>)
 800218e:	f000 fcce 	bl	8002b2e <HAL_GPIO_TogglePin>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40020400 	.word	0x40020400

080021a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
	return 1;
 80021a4:	2301      	movs	r3, #1
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <_kill>:

int _kill(int pid, int sig)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021ba:	f005 fcef 	bl	8007b9c <__errno>
 80021be:	4603      	mov	r3, r0
 80021c0:	2216      	movs	r2, #22
 80021c2:	601a      	str	r2, [r3, #0]
	return -1;
 80021c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <_exit>:

void _exit (int status)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80021d8:	f04f 31ff 	mov.w	r1, #4294967295
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff ffe7 	bl	80021b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80021e2:	e7fe      	b.n	80021e2 <_exit+0x12>

080021e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	e00a      	b.n	800220c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021f6:	f3af 8000 	nop.w
 80021fa:	4601      	mov	r1, r0
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	60ba      	str	r2, [r7, #8]
 8002202:	b2ca      	uxtb	r2, r1
 8002204:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	3301      	adds	r3, #1
 800220a:	617b      	str	r3, [r7, #20]
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	429a      	cmp	r2, r3
 8002212:	dbf0      	blt.n	80021f6 <_read+0x12>
	}

return len;
 8002214:	687b      	ldr	r3, [r7, #4]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b086      	sub	sp, #24
 8002222:	af00      	add	r7, sp, #0
 8002224:	60f8      	str	r0, [r7, #12]
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	e009      	b.n	8002244 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	60ba      	str	r2, [r7, #8]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	3301      	adds	r3, #1
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	429a      	cmp	r2, r3
 800224a:	dbf1      	blt.n	8002230 <_write+0x12>
	}
	return len;
 800224c:	687b      	ldr	r3, [r7, #4]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <_close>:

int _close(int file)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
	return -1;
 800225e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800227e:	605a      	str	r2, [r3, #4]
	return 0;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <_isatty>:

int _isatty(int file)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
	return 1;
 8002296:	2301      	movs	r3, #1
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
	return 0;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
	...

080022c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022c8:	4a14      	ldr	r2, [pc, #80]	; (800231c <_sbrk+0x5c>)
 80022ca:	4b15      	ldr	r3, [pc, #84]	; (8002320 <_sbrk+0x60>)
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022d4:	4b13      	ldr	r3, [pc, #76]	; (8002324 <_sbrk+0x64>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d102      	bne.n	80022e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022dc:	4b11      	ldr	r3, [pc, #68]	; (8002324 <_sbrk+0x64>)
 80022de:	4a12      	ldr	r2, [pc, #72]	; (8002328 <_sbrk+0x68>)
 80022e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <_sbrk+0x64>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4413      	add	r3, r2
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d207      	bcs.n	8002300 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022f0:	f005 fc54 	bl	8007b9c <__errno>
 80022f4:	4603      	mov	r3, r0
 80022f6:	220c      	movs	r2, #12
 80022f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022fa:	f04f 33ff 	mov.w	r3, #4294967295
 80022fe:	e009      	b.n	8002314 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002300:	4b08      	ldr	r3, [pc, #32]	; (8002324 <_sbrk+0x64>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002306:	4b07      	ldr	r3, [pc, #28]	; (8002324 <_sbrk+0x64>)
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4413      	add	r3, r2
 800230e:	4a05      	ldr	r2, [pc, #20]	; (8002324 <_sbrk+0x64>)
 8002310:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002312:	68fb      	ldr	r3, [r7, #12]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20010000 	.word	0x20010000
 8002320:	00000400 	.word	0x00000400
 8002324:	2000061c 	.word	0x2000061c
 8002328:	20005038 	.word	0x20005038

0800232c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <SystemInit+0x20>)
 8002332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002336:	4a05      	ldr	r2, [pc, #20]	; (800234c <SystemInit+0x20>)
 8002338:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800233c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <MX_USART1_UART_Init+0x4c>)
 8002356:	4a12      	ldr	r2, [pc, #72]	; (80023a0 <MX_USART1_UART_Init+0x50>)
 8002358:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800235a:	4b10      	ldr	r3, [pc, #64]	; (800239c <MX_USART1_UART_Init+0x4c>)
 800235c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002360:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002362:	4b0e      	ldr	r3, [pc, #56]	; (800239c <MX_USART1_UART_Init+0x4c>)
 8002364:	2200      	movs	r2, #0
 8002366:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <MX_USART1_UART_Init+0x4c>)
 800236a:	2200      	movs	r2, #0
 800236c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800236e:	4b0b      	ldr	r3, [pc, #44]	; (800239c <MX_USART1_UART_Init+0x4c>)
 8002370:	2200      	movs	r2, #0
 8002372:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002374:	4b09      	ldr	r3, [pc, #36]	; (800239c <MX_USART1_UART_Init+0x4c>)
 8002376:	220c      	movs	r2, #12
 8002378:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800237a:	4b08      	ldr	r3, [pc, #32]	; (800239c <MX_USART1_UART_Init+0x4c>)
 800237c:	2200      	movs	r2, #0
 800237e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002380:	4b06      	ldr	r3, [pc, #24]	; (800239c <MX_USART1_UART_Init+0x4c>)
 8002382:	2200      	movs	r2, #0
 8002384:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002386:	4805      	ldr	r0, [pc, #20]	; (800239c <MX_USART1_UART_Init+0x4c>)
 8002388:	f002 f8e8 	bl	800455c <HAL_UART_Init>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002392:	f7ff fb15 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20004fa0 	.word	0x20004fa0
 80023a0:	40011000 	.word	0x40011000

080023a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08a      	sub	sp, #40	; 0x28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ac:	f107 0314 	add.w	r3, r7, #20
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a19      	ldr	r2, [pc, #100]	; (8002428 <HAL_UART_MspInit+0x84>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d12c      	bne.n	8002420 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	4b18      	ldr	r3, [pc, #96]	; (800242c <HAL_UART_MspInit+0x88>)
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	4a17      	ldr	r2, [pc, #92]	; (800242c <HAL_UART_MspInit+0x88>)
 80023d0:	f043 0310 	orr.w	r3, r3, #16
 80023d4:	6453      	str	r3, [r2, #68]	; 0x44
 80023d6:	4b15      	ldr	r3, [pc, #84]	; (800242c <HAL_UART_MspInit+0x88>)
 80023d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023da:	f003 0310 	and.w	r3, r3, #16
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	4b11      	ldr	r3, [pc, #68]	; (800242c <HAL_UART_MspInit+0x88>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	4a10      	ldr	r2, [pc, #64]	; (800242c <HAL_UART_MspInit+0x88>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	6313      	str	r3, [r2, #48]	; 0x30
 80023f2:	4b0e      	ldr	r3, [pc, #56]	; (800242c <HAL_UART_MspInit+0x88>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002404:	2302      	movs	r3, #2
 8002406:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002408:	2300      	movs	r3, #0
 800240a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800240c:	2303      	movs	r3, #3
 800240e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002410:	2307      	movs	r3, #7
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002414:	f107 0314 	add.w	r3, r7, #20
 8002418:	4619      	mov	r1, r3
 800241a:	4805      	ldr	r0, [pc, #20]	; (8002430 <HAL_UART_MspInit+0x8c>)
 800241c:	f000 f9ea 	bl	80027f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002420:	bf00      	nop
 8002422:	3728      	adds	r7, #40	; 0x28
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40011000 	.word	0x40011000
 800242c:	40023800 	.word	0x40023800
 8002430:	40020000 	.word	0x40020000

08002434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002434:	f8df d034 	ldr.w	sp, [pc, #52]	; 800246c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002438:	480d      	ldr	r0, [pc, #52]	; (8002470 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800243a:	490e      	ldr	r1, [pc, #56]	; (8002474 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800243c:	4a0e      	ldr	r2, [pc, #56]	; (8002478 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800243e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002440:	e002      	b.n	8002448 <LoopCopyDataInit>

08002442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002446:	3304      	adds	r3, #4

08002448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800244a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800244c:	d3f9      	bcc.n	8002442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800244e:	4a0b      	ldr	r2, [pc, #44]	; (800247c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002450:	4c0b      	ldr	r4, [pc, #44]	; (8002480 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002454:	e001      	b.n	800245a <LoopFillZerobss>

08002456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002458:	3204      	adds	r2, #4

0800245a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800245a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800245c:	d3fb      	bcc.n	8002456 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800245e:	f7ff ff65 	bl	800232c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002462:	f005 fba1 	bl	8007ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002466:	f7ff fa03 	bl	8001870 <main>
  bx  lr    
 800246a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800246c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002474:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002478:	0800e87c 	.word	0x0800e87c
  ldr r2, =_sbss
 800247c:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002480:	20005038 	.word	0x20005038

08002484 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002484:	e7fe      	b.n	8002484 <ADC_IRQHandler>
	...

08002488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800248c:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <HAL_Init+0x40>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a0d      	ldr	r2, [pc, #52]	; (80024c8 <HAL_Init+0x40>)
 8002492:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002496:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002498:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <HAL_Init+0x40>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <HAL_Init+0x40>)
 800249e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024a4:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <HAL_Init+0x40>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a07      	ldr	r2, [pc, #28]	; (80024c8 <HAL_Init+0x40>)
 80024aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b0:	2003      	movs	r0, #3
 80024b2:	f000 f8d8 	bl	8002666 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024b6:	2000      	movs	r0, #0
 80024b8:	f7ff fddc 	bl	8002074 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024bc:	f7ff fdae 	bl	800201c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40023c00 	.word	0x40023c00

080024cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d0:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_IncTick+0x20>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <HAL_IncTick+0x24>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4413      	add	r3, r2
 80024dc:	4a04      	ldr	r2, [pc, #16]	; (80024f0 <HAL_IncTick+0x24>)
 80024de:	6013      	str	r3, [r2, #0]
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	20000018 	.word	0x20000018
 80024f0:	20004fe4 	.word	0x20004fe4

080024f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return uwTick;
 80024f8:	4b03      	ldr	r3, [pc, #12]	; (8002508 <HAL_GetTick+0x14>)
 80024fa:	681b      	ldr	r3, [r3, #0]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	20004fe4 	.word	0x20004fe4

0800250c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800251c:	4b0c      	ldr	r3, [pc, #48]	; (8002550 <__NVIC_SetPriorityGrouping+0x44>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002528:	4013      	ands	r3, r2
 800252a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002534:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800253c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800253e:	4a04      	ldr	r2, [pc, #16]	; (8002550 <__NVIC_SetPriorityGrouping+0x44>)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	60d3      	str	r3, [r2, #12]
}
 8002544:	bf00      	nop
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	e000ed00 	.word	0xe000ed00

08002554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002558:	4b04      	ldr	r3, [pc, #16]	; (800256c <__NVIC_GetPriorityGrouping+0x18>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	0a1b      	lsrs	r3, r3, #8
 800255e:	f003 0307 	and.w	r3, r3, #7
}
 8002562:	4618      	mov	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	2b00      	cmp	r3, #0
 8002580:	db0b      	blt.n	800259a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	f003 021f 	and.w	r2, r3, #31
 8002588:	4907      	ldr	r1, [pc, #28]	; (80025a8 <__NVIC_EnableIRQ+0x38>)
 800258a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258e:	095b      	lsrs	r3, r3, #5
 8002590:	2001      	movs	r0, #1
 8002592:	fa00 f202 	lsl.w	r2, r0, r2
 8002596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	e000e100 	.word	0xe000e100

080025ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	6039      	str	r1, [r7, #0]
 80025b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	db0a      	blt.n	80025d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	490c      	ldr	r1, [pc, #48]	; (80025f8 <__NVIC_SetPriority+0x4c>)
 80025c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ca:	0112      	lsls	r2, r2, #4
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	440b      	add	r3, r1
 80025d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025d4:	e00a      	b.n	80025ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	4908      	ldr	r1, [pc, #32]	; (80025fc <__NVIC_SetPriority+0x50>)
 80025dc:	79fb      	ldrb	r3, [r7, #7]
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	3b04      	subs	r3, #4
 80025e4:	0112      	lsls	r2, r2, #4
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	440b      	add	r3, r1
 80025ea:	761a      	strb	r2, [r3, #24]
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	e000e100 	.word	0xe000e100
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002600:	b480      	push	{r7}
 8002602:	b089      	sub	sp, #36	; 0x24
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f1c3 0307 	rsb	r3, r3, #7
 800261a:	2b04      	cmp	r3, #4
 800261c:	bf28      	it	cs
 800261e:	2304      	movcs	r3, #4
 8002620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	3304      	adds	r3, #4
 8002626:	2b06      	cmp	r3, #6
 8002628:	d902      	bls.n	8002630 <NVIC_EncodePriority+0x30>
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	3b03      	subs	r3, #3
 800262e:	e000      	b.n	8002632 <NVIC_EncodePriority+0x32>
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002634:	f04f 32ff 	mov.w	r2, #4294967295
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43da      	mvns	r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	401a      	ands	r2, r3
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002648:	f04f 31ff 	mov.w	r1, #4294967295
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	fa01 f303 	lsl.w	r3, r1, r3
 8002652:	43d9      	mvns	r1, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002658:	4313      	orrs	r3, r2
         );
}
 800265a:	4618      	mov	r0, r3
 800265c:	3724      	adds	r7, #36	; 0x24
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b082      	sub	sp, #8
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff ff4c 	bl	800250c <__NVIC_SetPriorityGrouping>
}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
 8002688:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800268e:	f7ff ff61 	bl	8002554 <__NVIC_GetPriorityGrouping>
 8002692:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	68b9      	ldr	r1, [r7, #8]
 8002698:	6978      	ldr	r0, [r7, #20]
 800269a:	f7ff ffb1 	bl	8002600 <NVIC_EncodePriority>
 800269e:	4602      	mov	r2, r0
 80026a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026a4:	4611      	mov	r1, r2
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff ff80 	bl	80025ac <__NVIC_SetPriority>
}
 80026ac:	bf00      	nop
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff ff54 	bl	8002570 <__NVIC_EnableIRQ>
}
 80026c8:	bf00      	nop
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026de:	f7ff ff09 	bl	80024f4 <HAL_GetTick>
 80026e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d008      	beq.n	8002702 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2280      	movs	r2, #128	; 0x80
 80026f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e052      	b.n	80027a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0216 	bic.w	r2, r2, #22
 8002710:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695a      	ldr	r2, [r3, #20]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002720:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	2b00      	cmp	r3, #0
 8002728:	d103      	bne.n	8002732 <HAL_DMA_Abort+0x62>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800272e:	2b00      	cmp	r3, #0
 8002730:	d007      	beq.n	8002742 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0208 	bic.w	r2, r2, #8
 8002740:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0201 	bic.w	r2, r2, #1
 8002750:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002752:	e013      	b.n	800277c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002754:	f7ff fece 	bl	80024f4 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b05      	cmp	r3, #5
 8002760:	d90c      	bls.n	800277c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2220      	movs	r2, #32
 8002766:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2203      	movs	r2, #3
 8002774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e015      	b.n	80027a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1e4      	bne.n	8002754 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278e:	223f      	movs	r2, #63	; 0x3f
 8002790:	409a      	lsls	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d004      	beq.n	80027ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2280      	movs	r2, #128	; 0x80
 80027c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e00c      	b.n	80027e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2205      	movs	r2, #5
 80027d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0201 	bic.w	r2, r2, #1
 80027e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b089      	sub	sp, #36	; 0x24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002806:	2300      	movs	r3, #0
 8002808:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
 800280e:	e159      	b.n	8002ac4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002810:	2201      	movs	r2, #1
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	4013      	ands	r3, r2
 8002822:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	429a      	cmp	r2, r3
 800282a:	f040 8148 	bne.w	8002abe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	2b01      	cmp	r3, #1
 8002838:	d005      	beq.n	8002846 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002842:	2b02      	cmp	r3, #2
 8002844:	d130      	bne.n	80028a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	2203      	movs	r2, #3
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43db      	mvns	r3, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4013      	ands	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68da      	ldr	r2, [r3, #12]
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800287c:	2201      	movs	r2, #1
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	091b      	lsrs	r3, r3, #4
 8002892:	f003 0201 	and.w	r2, r3, #1
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d017      	beq.n	80028e4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	2203      	movs	r2, #3
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d123      	bne.n	8002938 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	08da      	lsrs	r2, r3, #3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3208      	adds	r2, #8
 80028f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	220f      	movs	r2, #15
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	691a      	ldr	r2, [r3, #16]
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	08da      	lsrs	r2, r3, #3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3208      	adds	r2, #8
 8002932:	69b9      	ldr	r1, [r7, #24]
 8002934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	2203      	movs	r2, #3
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0203 	and.w	r2, r3, #3
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 80a2 	beq.w	8002abe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	4b57      	ldr	r3, [pc, #348]	; (8002adc <HAL_GPIO_Init+0x2e8>)
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	4a56      	ldr	r2, [pc, #344]	; (8002adc <HAL_GPIO_Init+0x2e8>)
 8002984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002988:	6453      	str	r3, [r2, #68]	; 0x44
 800298a:	4b54      	ldr	r3, [pc, #336]	; (8002adc <HAL_GPIO_Init+0x2e8>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002996:	4a52      	ldr	r2, [pc, #328]	; (8002ae0 <HAL_GPIO_Init+0x2ec>)
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	089b      	lsrs	r3, r3, #2
 800299c:	3302      	adds	r3, #2
 800299e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	220f      	movs	r2, #15
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4013      	ands	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a49      	ldr	r2, [pc, #292]	; (8002ae4 <HAL_GPIO_Init+0x2f0>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d019      	beq.n	80029f6 <HAL_GPIO_Init+0x202>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a48      	ldr	r2, [pc, #288]	; (8002ae8 <HAL_GPIO_Init+0x2f4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d013      	beq.n	80029f2 <HAL_GPIO_Init+0x1fe>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a47      	ldr	r2, [pc, #284]	; (8002aec <HAL_GPIO_Init+0x2f8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d00d      	beq.n	80029ee <HAL_GPIO_Init+0x1fa>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a46      	ldr	r2, [pc, #280]	; (8002af0 <HAL_GPIO_Init+0x2fc>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d007      	beq.n	80029ea <HAL_GPIO_Init+0x1f6>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a45      	ldr	r2, [pc, #276]	; (8002af4 <HAL_GPIO_Init+0x300>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d101      	bne.n	80029e6 <HAL_GPIO_Init+0x1f2>
 80029e2:	2304      	movs	r3, #4
 80029e4:	e008      	b.n	80029f8 <HAL_GPIO_Init+0x204>
 80029e6:	2307      	movs	r3, #7
 80029e8:	e006      	b.n	80029f8 <HAL_GPIO_Init+0x204>
 80029ea:	2303      	movs	r3, #3
 80029ec:	e004      	b.n	80029f8 <HAL_GPIO_Init+0x204>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e002      	b.n	80029f8 <HAL_GPIO_Init+0x204>
 80029f2:	2301      	movs	r3, #1
 80029f4:	e000      	b.n	80029f8 <HAL_GPIO_Init+0x204>
 80029f6:	2300      	movs	r3, #0
 80029f8:	69fa      	ldr	r2, [r7, #28]
 80029fa:	f002 0203 	and.w	r2, r2, #3
 80029fe:	0092      	lsls	r2, r2, #2
 8002a00:	4093      	lsls	r3, r2
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a08:	4935      	ldr	r1, [pc, #212]	; (8002ae0 <HAL_GPIO_Init+0x2ec>)
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	089b      	lsrs	r3, r3, #2
 8002a0e:	3302      	adds	r3, #2
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a16:	4b38      	ldr	r3, [pc, #224]	; (8002af8 <HAL_GPIO_Init+0x304>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4013      	ands	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a3a:	4a2f      	ldr	r2, [pc, #188]	; (8002af8 <HAL_GPIO_Init+0x304>)
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a40:	4b2d      	ldr	r3, [pc, #180]	; (8002af8 <HAL_GPIO_Init+0x304>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a64:	4a24      	ldr	r2, [pc, #144]	; (8002af8 <HAL_GPIO_Init+0x304>)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a6a:	4b23      	ldr	r3, [pc, #140]	; (8002af8 <HAL_GPIO_Init+0x304>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	43db      	mvns	r3, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4013      	ands	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a8e:	4a1a      	ldr	r2, [pc, #104]	; (8002af8 <HAL_GPIO_Init+0x304>)
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a94:	4b18      	ldr	r3, [pc, #96]	; (8002af8 <HAL_GPIO_Init+0x304>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ab8:	4a0f      	ldr	r2, [pc, #60]	; (8002af8 <HAL_GPIO_Init+0x304>)
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	61fb      	str	r3, [r7, #28]
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	2b0f      	cmp	r3, #15
 8002ac8:	f67f aea2 	bls.w	8002810 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002acc:	bf00      	nop
 8002ace:	bf00      	nop
 8002ad0:	3724      	adds	r7, #36	; 0x24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40013800 	.word	0x40013800
 8002ae4:	40020000 	.word	0x40020000
 8002ae8:	40020400 	.word	0x40020400
 8002aec:	40020800 	.word	0x40020800
 8002af0:	40020c00 	.word	0x40020c00
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40013c00 	.word	0x40013c00

08002afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	460b      	mov	r3, r1
 8002b06:	807b      	strh	r3, [r7, #2]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b0c:	787b      	ldrb	r3, [r7, #1]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b12:	887a      	ldrh	r2, [r7, #2]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b18:	e003      	b.n	8002b22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b1a:	887b      	ldrh	r3, [r7, #2]
 8002b1c:	041a      	lsls	r2, r3, #16
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	619a      	str	r2, [r3, #24]
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b085      	sub	sp, #20
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	460b      	mov	r3, r1
 8002b38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b40:	887a      	ldrh	r2, [r7, #2]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4013      	ands	r3, r2
 8002b46:	041a      	lsls	r2, r3, #16
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	43d9      	mvns	r1, r3
 8002b4c:	887b      	ldrh	r3, [r7, #2]
 8002b4e:	400b      	ands	r3, r1
 8002b50:	431a      	orrs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	619a      	str	r2, [r3, #24]
}
 8002b56:	bf00      	nop
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
	...

08002b64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e12b      	b.n	8002dce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d106      	bne.n	8002b90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7fe fe28 	bl	80017e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2224      	movs	r2, #36	; 0x24
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0201 	bic.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bc8:	f001 f966 	bl	8003e98 <HAL_RCC_GetPCLK1Freq>
 8002bcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	4a81      	ldr	r2, [pc, #516]	; (8002dd8 <HAL_I2C_Init+0x274>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d807      	bhi.n	8002be8 <HAL_I2C_Init+0x84>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4a80      	ldr	r2, [pc, #512]	; (8002ddc <HAL_I2C_Init+0x278>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	bf94      	ite	ls
 8002be0:	2301      	movls	r3, #1
 8002be2:	2300      	movhi	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	e006      	b.n	8002bf6 <HAL_I2C_Init+0x92>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4a7d      	ldr	r2, [pc, #500]	; (8002de0 <HAL_I2C_Init+0x27c>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	bf94      	ite	ls
 8002bf0:	2301      	movls	r3, #1
 8002bf2:	2300      	movhi	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e0e7      	b.n	8002dce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	4a78      	ldr	r2, [pc, #480]	; (8002de4 <HAL_I2C_Init+0x280>)
 8002c02:	fba2 2303 	umull	r2, r3, r2, r3
 8002c06:	0c9b      	lsrs	r3, r3, #18
 8002c08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	4a6a      	ldr	r2, [pc, #424]	; (8002dd8 <HAL_I2C_Init+0x274>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d802      	bhi.n	8002c38 <HAL_I2C_Init+0xd4>
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	3301      	adds	r3, #1
 8002c36:	e009      	b.n	8002c4c <HAL_I2C_Init+0xe8>
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c3e:	fb02 f303 	mul.w	r3, r2, r3
 8002c42:	4a69      	ldr	r2, [pc, #420]	; (8002de8 <HAL_I2C_Init+0x284>)
 8002c44:	fba2 2303 	umull	r2, r3, r2, r3
 8002c48:	099b      	lsrs	r3, r3, #6
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6812      	ldr	r2, [r2, #0]
 8002c50:	430b      	orrs	r3, r1
 8002c52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	495c      	ldr	r1, [pc, #368]	; (8002dd8 <HAL_I2C_Init+0x274>)
 8002c68:	428b      	cmp	r3, r1
 8002c6a:	d819      	bhi.n	8002ca0 <HAL_I2C_Init+0x13c>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	1e59      	subs	r1, r3, #1
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c7a:	1c59      	adds	r1, r3, #1
 8002c7c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c80:	400b      	ands	r3, r1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00a      	beq.n	8002c9c <HAL_I2C_Init+0x138>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	1e59      	subs	r1, r3, #1
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c94:	3301      	adds	r3, #1
 8002c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c9a:	e051      	b.n	8002d40 <HAL_I2C_Init+0x1dc>
 8002c9c:	2304      	movs	r3, #4
 8002c9e:	e04f      	b.n	8002d40 <HAL_I2C_Init+0x1dc>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d111      	bne.n	8002ccc <HAL_I2C_Init+0x168>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	1e58      	subs	r0, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6859      	ldr	r1, [r3, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	440b      	add	r3, r1
 8002cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cba:	3301      	adds	r3, #1
 8002cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	bf0c      	ite	eq
 8002cc4:	2301      	moveq	r3, #1
 8002cc6:	2300      	movne	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	e012      	b.n	8002cf2 <HAL_I2C_Init+0x18e>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	1e58      	subs	r0, r3, #1
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6859      	ldr	r1, [r3, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	0099      	lsls	r1, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	bf0c      	ite	eq
 8002cec:	2301      	moveq	r3, #1
 8002cee:	2300      	movne	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_I2C_Init+0x196>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e022      	b.n	8002d40 <HAL_I2C_Init+0x1dc>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10e      	bne.n	8002d20 <HAL_I2C_Init+0x1bc>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	1e58      	subs	r0, r3, #1
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6859      	ldr	r1, [r3, #4]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	440b      	add	r3, r1
 8002d10:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d14:	3301      	adds	r3, #1
 8002d16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d1e:	e00f      	b.n	8002d40 <HAL_I2C_Init+0x1dc>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	1e58      	subs	r0, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6859      	ldr	r1, [r3, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	0099      	lsls	r1, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d36:	3301      	adds	r3, #1
 8002d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	6809      	ldr	r1, [r1, #0]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69da      	ldr	r2, [r3, #28]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6911      	ldr	r1, [r2, #16]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	68d2      	ldr	r2, [r2, #12]
 8002d7a:	4311      	orrs	r1, r2
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	6812      	ldr	r2, [r2, #0]
 8002d80:	430b      	orrs	r3, r1
 8002d82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695a      	ldr	r2, [r3, #20]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0201 	orr.w	r2, r2, #1
 8002dae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2220      	movs	r2, #32
 8002dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	000186a0 	.word	0x000186a0
 8002ddc:	001e847f 	.word	0x001e847f
 8002de0:	003d08ff 	.word	0x003d08ff
 8002de4:	431bde83 	.word	0x431bde83
 8002de8:	10624dd3 	.word	0x10624dd3

08002dec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b088      	sub	sp, #32
 8002df0:	af02      	add	r7, sp, #8
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	607a      	str	r2, [r7, #4]
 8002df6:	461a      	mov	r2, r3
 8002df8:	460b      	mov	r3, r1
 8002dfa:	817b      	strh	r3, [r7, #10]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e00:	f7ff fb78 	bl	80024f4 <HAL_GetTick>
 8002e04:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b20      	cmp	r3, #32
 8002e10:	f040 80e0 	bne.w	8002fd4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	2319      	movs	r3, #25
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	4970      	ldr	r1, [pc, #448]	; (8002fe0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 fa92 	bl	8003348 <I2C_WaitOnFlagUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e0d3      	b.n	8002fd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_I2C_Master_Transmit+0x50>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e0cc      	b.n	8002fd6 <HAL_I2C_Master_Transmit+0x1ea>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d007      	beq.n	8002e62 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f042 0201 	orr.w	r2, r2, #1
 8002e60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e70:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2221      	movs	r2, #33	; 0x21
 8002e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2210      	movs	r2, #16
 8002e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	893a      	ldrh	r2, [r7, #8]
 8002e92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	4a50      	ldr	r2, [pc, #320]	; (8002fe4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ea2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ea4:	8979      	ldrh	r1, [r7, #10]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	6a3a      	ldr	r2, [r7, #32]
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 f9ca 	bl	8003244 <I2C_MasterRequestWrite>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e08d      	b.n	8002fd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eba:	2300      	movs	r3, #0
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	613b      	str	r3, [r7, #16]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	613b      	str	r3, [r7, #16]
 8002ece:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ed0:	e066      	b.n	8002fa0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	6a39      	ldr	r1, [r7, #32]
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 fb0c 	bl	80034f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00d      	beq.n	8002efe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d107      	bne.n	8002efa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e06b      	b.n	8002fd6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	781a      	ldrb	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d11b      	bne.n	8002f74 <HAL_I2C_Master_Transmit+0x188>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d017      	beq.n	8002f74 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	781a      	ldrb	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	1c5a      	adds	r2, r3, #1
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	3b01      	subs	r3, #1
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	6a39      	ldr	r1, [r7, #32]
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 fafc 	bl	8003576 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00d      	beq.n	8002fa0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	2b04      	cmp	r3, #4
 8002f8a:	d107      	bne.n	8002f9c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f9a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e01a      	b.n	8002fd6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d194      	bne.n	8002ed2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	e000      	b.n	8002fd6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002fd4:	2302      	movs	r3, #2
  }
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	00100002 	.word	0x00100002
 8002fe4:	ffff0000 	.word	0xffff0000

08002fe8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08a      	sub	sp, #40	; 0x28
 8002fec:	af02      	add	r7, sp, #8
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	607a      	str	r2, [r7, #4]
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002ff8:	f7ff fa7c 	bl	80024f4 <HAL_GetTick>
 8002ffc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002ffe:	2301      	movs	r3, #1
 8003000:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b20      	cmp	r3, #32
 800300c:	f040 8111 	bne.w	8003232 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	2319      	movs	r3, #25
 8003016:	2201      	movs	r2, #1
 8003018:	4988      	ldr	r1, [pc, #544]	; (800323c <HAL_I2C_IsDeviceReady+0x254>)
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 f994 	bl	8003348 <I2C_WaitOnFlagUntilTimeout>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003026:	2302      	movs	r3, #2
 8003028:	e104      	b.n	8003234 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_I2C_IsDeviceReady+0x50>
 8003034:	2302      	movs	r3, #2
 8003036:	e0fd      	b.n	8003234 <HAL_I2C_IsDeviceReady+0x24c>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b01      	cmp	r3, #1
 800304c:	d007      	beq.n	800305e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 0201 	orr.w	r2, r2, #1
 800305c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800306c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2224      	movs	r2, #36	; 0x24
 8003072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4a70      	ldr	r2, [pc, #448]	; (8003240 <HAL_I2C_IsDeviceReady+0x258>)
 8003080:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003090:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2200      	movs	r2, #0
 800309a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 f952 	bl	8003348 <I2C_WaitOnFlagUntilTimeout>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00d      	beq.n	80030c6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030b8:	d103      	bne.n	80030c2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030c0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e0b6      	b.n	8003234 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030c6:	897b      	ldrh	r3, [r7, #10]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030d4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80030d6:	f7ff fa0d 	bl	80024f4 <HAL_GetTick>
 80030da:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	bf0c      	ite	eq
 80030ea:	2301      	moveq	r3, #1
 80030ec:	2300      	movne	r3, #0
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003100:	bf0c      	ite	eq
 8003102:	2301      	moveq	r3, #1
 8003104:	2300      	movne	r3, #0
 8003106:	b2db      	uxtb	r3, r3
 8003108:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800310a:	e025      	b.n	8003158 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800310c:	f7ff f9f2 	bl	80024f4 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d302      	bcc.n	8003122 <HAL_I2C_IsDeviceReady+0x13a>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d103      	bne.n	800312a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	22a0      	movs	r2, #160	; 0xa0
 8003126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b02      	cmp	r3, #2
 8003136:	bf0c      	ite	eq
 8003138:	2301      	moveq	r3, #1
 800313a:	2300      	movne	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800314e:	bf0c      	ite	eq
 8003150:	2301      	moveq	r3, #1
 8003152:	2300      	movne	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2ba0      	cmp	r3, #160	; 0xa0
 8003162:	d005      	beq.n	8003170 <HAL_I2C_IsDeviceReady+0x188>
 8003164:	7dfb      	ldrb	r3, [r7, #23]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d102      	bne.n	8003170 <HAL_I2C_IsDeviceReady+0x188>
 800316a:	7dbb      	ldrb	r3, [r7, #22]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0cd      	beq.n	800310c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2220      	movs	r2, #32
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b02      	cmp	r3, #2
 8003184:	d129      	bne.n	80031da <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003194:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003196:	2300      	movs	r3, #0
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	613b      	str	r3, [r7, #16]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	613b      	str	r3, [r7, #16]
 80031aa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	2319      	movs	r3, #25
 80031b2:	2201      	movs	r2, #1
 80031b4:	4921      	ldr	r1, [pc, #132]	; (800323c <HAL_I2C_IsDeviceReady+0x254>)
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f8c6 	bl	8003348 <I2C_WaitOnFlagUntilTimeout>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e036      	b.n	8003234 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2220      	movs	r2, #32
 80031ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80031d6:	2300      	movs	r3, #0
 80031d8:	e02c      	b.n	8003234 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031e8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031f2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	2319      	movs	r3, #25
 80031fa:	2201      	movs	r2, #1
 80031fc:	490f      	ldr	r1, [pc, #60]	; (800323c <HAL_I2C_IsDeviceReady+0x254>)
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 f8a2 	bl	8003348 <I2C_WaitOnFlagUntilTimeout>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e012      	b.n	8003234 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	3301      	adds	r3, #1
 8003212:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	429a      	cmp	r2, r3
 800321a:	f4ff af32 	bcc.w	8003082 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2220      	movs	r2, #32
 8003222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003232:	2302      	movs	r3, #2
  }
}
 8003234:	4618      	mov	r0, r3
 8003236:	3720      	adds	r7, #32
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	00100002 	.word	0x00100002
 8003240:	ffff0000 	.word	0xffff0000

08003244 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af02      	add	r7, sp, #8
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	603b      	str	r3, [r7, #0]
 8003250:	460b      	mov	r3, r1
 8003252:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2b08      	cmp	r3, #8
 800325e:	d006      	beq.n	800326e <I2C_MasterRequestWrite+0x2a>
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d003      	beq.n	800326e <I2C_MasterRequestWrite+0x2a>
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800326c:	d108      	bne.n	8003280 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	e00b      	b.n	8003298 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003284:	2b12      	cmp	r3, #18
 8003286:	d107      	bne.n	8003298 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003296:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 f84f 	bl	8003348 <I2C_WaitOnFlagUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00d      	beq.n	80032cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032be:	d103      	bne.n	80032c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e035      	b.n	8003338 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032d4:	d108      	bne.n	80032e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032d6:	897b      	ldrh	r3, [r7, #10]
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	461a      	mov	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032e4:	611a      	str	r2, [r3, #16]
 80032e6:	e01b      	b.n	8003320 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032e8:	897b      	ldrh	r3, [r7, #10]
 80032ea:	11db      	asrs	r3, r3, #7
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	f003 0306 	and.w	r3, r3, #6
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	f063 030f 	orn	r3, r3, #15
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	490e      	ldr	r1, [pc, #56]	; (8003340 <I2C_MasterRequestWrite+0xfc>)
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 f875 	bl	80033f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e010      	b.n	8003338 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003316:	897b      	ldrh	r3, [r7, #10]
 8003318:	b2da      	uxtb	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	4907      	ldr	r1, [pc, #28]	; (8003344 <I2C_MasterRequestWrite+0x100>)
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 f865 	bl	80033f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	00010008 	.word	0x00010008
 8003344:	00010002 	.word	0x00010002

08003348 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	4613      	mov	r3, r2
 8003356:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003358:	e025      	b.n	80033a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003360:	d021      	beq.n	80033a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003362:	f7ff f8c7 	bl	80024f4 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	429a      	cmp	r2, r3
 8003370:	d302      	bcc.n	8003378 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d116      	bne.n	80033a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2220      	movs	r2, #32
 8003382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	f043 0220 	orr.w	r2, r3, #32
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e023      	b.n	80033ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	0c1b      	lsrs	r3, r3, #16
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d10d      	bne.n	80033cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	43da      	mvns	r2, r3
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	4013      	ands	r3, r2
 80033bc:	b29b      	uxth	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	bf0c      	ite	eq
 80033c2:	2301      	moveq	r3, #1
 80033c4:	2300      	movne	r3, #0
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	461a      	mov	r2, r3
 80033ca:	e00c      	b.n	80033e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	43da      	mvns	r2, r3
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4013      	ands	r3, r2
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	bf0c      	ite	eq
 80033de:	2301      	moveq	r3, #1
 80033e0:	2300      	movne	r3, #0
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	461a      	mov	r2, r3
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d0b6      	beq.n	800335a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b084      	sub	sp, #16
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	607a      	str	r2, [r7, #4]
 8003402:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003404:	e051      	b.n	80034aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003414:	d123      	bne.n	800345e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003424:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800342e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2220      	movs	r2, #32
 800343a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	f043 0204 	orr.w	r2, r3, #4
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e046      	b.n	80034ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003464:	d021      	beq.n	80034aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003466:	f7ff f845 	bl	80024f4 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	429a      	cmp	r2, r3
 8003474:	d302      	bcc.n	800347c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d116      	bne.n	80034aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2220      	movs	r2, #32
 8003486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	f043 0220 	orr.w	r2, r3, #32
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e020      	b.n	80034ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	0c1b      	lsrs	r3, r3, #16
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d10c      	bne.n	80034ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	43da      	mvns	r2, r3
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	4013      	ands	r3, r2
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	bf14      	ite	ne
 80034c6:	2301      	movne	r3, #1
 80034c8:	2300      	moveq	r3, #0
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	e00b      	b.n	80034e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	43da      	mvns	r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	4013      	ands	r3, r2
 80034da:	b29b      	uxth	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	bf14      	ite	ne
 80034e0:	2301      	movne	r3, #1
 80034e2:	2300      	moveq	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d18d      	bne.n	8003406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003500:	e02d      	b.n	800355e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f878 	bl	80035f8 <I2C_IsAcknowledgeFailed>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e02d      	b.n	800356e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003518:	d021      	beq.n	800355e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351a:	f7fe ffeb 	bl	80024f4 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	429a      	cmp	r2, r3
 8003528:	d302      	bcc.n	8003530 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d116      	bne.n	800355e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2220      	movs	r2, #32
 800353a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f043 0220 	orr.w	r2, r3, #32
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e007      	b.n	800356e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003568:	2b80      	cmp	r3, #128	; 0x80
 800356a:	d1ca      	bne.n	8003502 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b084      	sub	sp, #16
 800357a:	af00      	add	r7, sp, #0
 800357c:	60f8      	str	r0, [r7, #12]
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003582:	e02d      	b.n	80035e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 f837 	bl	80035f8 <I2C_IsAcknowledgeFailed>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e02d      	b.n	80035f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359a:	d021      	beq.n	80035e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800359c:	f7fe ffaa 	bl	80024f4 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d302      	bcc.n	80035b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d116      	bne.n	80035e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	f043 0220 	orr.w	r2, r3, #32
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e007      	b.n	80035f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	f003 0304 	and.w	r3, r3, #4
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	d1ca      	bne.n	8003584 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800360a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800360e:	d11b      	bne.n	8003648 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003618:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	f043 0204 	orr.w	r2, r3, #4
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e000      	b.n	800364a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
	...

08003658 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e264      	b.n	8003b34 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d075      	beq.n	8003762 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003676:	4ba3      	ldr	r3, [pc, #652]	; (8003904 <HAL_RCC_OscConfig+0x2ac>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 030c 	and.w	r3, r3, #12
 800367e:	2b04      	cmp	r3, #4
 8003680:	d00c      	beq.n	800369c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003682:	4ba0      	ldr	r3, [pc, #640]	; (8003904 <HAL_RCC_OscConfig+0x2ac>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800368a:	2b08      	cmp	r3, #8
 800368c:	d112      	bne.n	80036b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800368e:	4b9d      	ldr	r3, [pc, #628]	; (8003904 <HAL_RCC_OscConfig+0x2ac>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003696:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800369a:	d10b      	bne.n	80036b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800369c:	4b99      	ldr	r3, [pc, #612]	; (8003904 <HAL_RCC_OscConfig+0x2ac>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d05b      	beq.n	8003760 <HAL_RCC_OscConfig+0x108>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d157      	bne.n	8003760 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e23f      	b.n	8003b34 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036bc:	d106      	bne.n	80036cc <HAL_RCC_OscConfig+0x74>
 80036be:	4b91      	ldr	r3, [pc, #580]	; (8003904 <HAL_RCC_OscConfig+0x2ac>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a90      	ldr	r2, [pc, #576]	; (8003904 <HAL_RCC_OscConfig+0x2ac>)
 80036c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	e01d      	b.n	8003708 <HAL_RCC_OscConfig+0xb0>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036d4:	d10c      	bne.n	80036f0 <HAL_RCC_OscConfig+0x98>
 80036d6:	4b8b      	ldr	r3, [pc, #556]	; (8003904 <HAL_RCC_OscConfig+0x2ac>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a8a      	ldr	r2, [pc, #552]	; (8003904 <HAL_RCC_OscConfig+0x2ac>)
 80036dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	4b88      	ldr	r3, [pc, #544]	; (8003904 <HAL_RCC_OscConfig+0x2ac>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a87      	ldr	r2, [pc, #540]	; (8003904 <HAL_RCC_OscConfig+0x2ac>)
 80036e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	e00b      	b.n	8003708 <HAL_RCC_OscConfig+0xb0>
 80036f0:	4b84      	ldr	r3, [pc, #528]	; (8003904 <HAL_RCC_OscConfig+0x2ac>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a83      	ldr	r2, [pc, #524]	; (8003904 <HAL_RCC_OscConfig+0x2ac>)
 80036f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036fa:	6013      	str	r3, [r2, #0]
 80036fc:	4b81      	ldr	r3, [pc, #516]	; (8003904 <HAL_RCC_OscConfig+0x2ac>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a80      	ldr	r2, [pc, #512]	; (8003904 <HAL_RCC_OscConfig+0x2ac>)
 8003702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d013      	beq.n	8003738 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003710:	f7fe fef0 	bl	80024f4 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003718:	f7fe feec 	bl	80024f4 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b64      	cmp	r3, #100	; 0x64
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e204      	b.n	8003b34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800372a:	4b76      	ldr	r3, [pc, #472]	; (8003904 <HAL_RCC_OscConfig+0x2ac>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0f0      	beq.n	8003718 <HAL_RCC_OscConfig+0xc0>
 8003736:	e014      	b.n	8003762 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003738:	f7fe fedc 	bl	80024f4 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003740:	f7fe fed8 	bl	80024f4 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b64      	cmp	r3, #100	; 0x64
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e1f0      	b.n	8003b34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003752:	4b6c      	ldr	r3, [pc, #432]	; (8003904 <HAL_RCC_OscConfig+0x2ac>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f0      	bne.n	8003740 <HAL_RCC_OscConfig+0xe8>
 800375e:	e000      	b.n	8003762 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d063      	beq.n	8003836 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800376e:	4b65      	ldr	r3, [pc, #404]	; (8003904 <HAL_RCC_OscConfig+0x2ac>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 030c 	and.w	r3, r3, #12
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00b      	beq.n	8003792 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800377a:	4b62      	ldr	r3, [pc, #392]	; (8003904 <HAL_RCC_OscConfig+0x2ac>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003782:	2b08      	cmp	r3, #8
 8003784:	d11c      	bne.n	80037c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003786:	4b5f      	ldr	r3, [pc, #380]	; (8003904 <HAL_RCC_OscConfig+0x2ac>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d116      	bne.n	80037c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003792:	4b5c      	ldr	r3, [pc, #368]	; (8003904 <HAL_RCC_OscConfig+0x2ac>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d005      	beq.n	80037aa <HAL_RCC_OscConfig+0x152>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d001      	beq.n	80037aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e1c4      	b.n	8003b34 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037aa:	4b56      	ldr	r3, [pc, #344]	; (8003904 <HAL_RCC_OscConfig+0x2ac>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4952      	ldr	r1, [pc, #328]	; (8003904 <HAL_RCC_OscConfig+0x2ac>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037be:	e03a      	b.n	8003836 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d020      	beq.n	800380a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037c8:	4b4f      	ldr	r3, [pc, #316]	; (8003908 <HAL_RCC_OscConfig+0x2b0>)
 80037ca:	2201      	movs	r2, #1
 80037cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ce:	f7fe fe91 	bl	80024f4 <HAL_GetTick>
 80037d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d4:	e008      	b.n	80037e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037d6:	f7fe fe8d 	bl	80024f4 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e1a5      	b.n	8003b34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e8:	4b46      	ldr	r3, [pc, #280]	; (8003904 <HAL_RCC_OscConfig+0x2ac>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d0f0      	beq.n	80037d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f4:	4b43      	ldr	r3, [pc, #268]	; (8003904 <HAL_RCC_OscConfig+0x2ac>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	4940      	ldr	r1, [pc, #256]	; (8003904 <HAL_RCC_OscConfig+0x2ac>)
 8003804:	4313      	orrs	r3, r2
 8003806:	600b      	str	r3, [r1, #0]
 8003808:	e015      	b.n	8003836 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800380a:	4b3f      	ldr	r3, [pc, #252]	; (8003908 <HAL_RCC_OscConfig+0x2b0>)
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003810:	f7fe fe70 	bl	80024f4 <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003818:	f7fe fe6c 	bl	80024f4 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e184      	b.n	8003b34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800382a:	4b36      	ldr	r3, [pc, #216]	; (8003904 <HAL_RCC_OscConfig+0x2ac>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1f0      	bne.n	8003818 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	2b00      	cmp	r3, #0
 8003840:	d030      	beq.n	80038a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d016      	beq.n	8003878 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800384a:	4b30      	ldr	r3, [pc, #192]	; (800390c <HAL_RCC_OscConfig+0x2b4>)
 800384c:	2201      	movs	r2, #1
 800384e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003850:	f7fe fe50 	bl	80024f4 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003858:	f7fe fe4c 	bl	80024f4 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e164      	b.n	8003b34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800386a:	4b26      	ldr	r3, [pc, #152]	; (8003904 <HAL_RCC_OscConfig+0x2ac>)
 800386c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0f0      	beq.n	8003858 <HAL_RCC_OscConfig+0x200>
 8003876:	e015      	b.n	80038a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003878:	4b24      	ldr	r3, [pc, #144]	; (800390c <HAL_RCC_OscConfig+0x2b4>)
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800387e:	f7fe fe39 	bl	80024f4 <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003884:	e008      	b.n	8003898 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003886:	f7fe fe35 	bl	80024f4 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d901      	bls.n	8003898 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e14d      	b.n	8003b34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003898:	4b1a      	ldr	r3, [pc, #104]	; (8003904 <HAL_RCC_OscConfig+0x2ac>)
 800389a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1f0      	bne.n	8003886 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 80a0 	beq.w	80039f2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038b2:	2300      	movs	r3, #0
 80038b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038b6:	4b13      	ldr	r3, [pc, #76]	; (8003904 <HAL_RCC_OscConfig+0x2ac>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10f      	bne.n	80038e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c2:	2300      	movs	r3, #0
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <HAL_RCC_OscConfig+0x2ac>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	4a0e      	ldr	r2, [pc, #56]	; (8003904 <HAL_RCC_OscConfig+0x2ac>)
 80038cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d0:	6413      	str	r3, [r2, #64]	; 0x40
 80038d2:	4b0c      	ldr	r3, [pc, #48]	; (8003904 <HAL_RCC_OscConfig+0x2ac>)
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038da:	60bb      	str	r3, [r7, #8]
 80038dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038de:	2301      	movs	r3, #1
 80038e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e2:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <HAL_RCC_OscConfig+0x2b8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d121      	bne.n	8003932 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ee:	4b08      	ldr	r3, [pc, #32]	; (8003910 <HAL_RCC_OscConfig+0x2b8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a07      	ldr	r2, [pc, #28]	; (8003910 <HAL_RCC_OscConfig+0x2b8>)
 80038f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038fa:	f7fe fdfb 	bl	80024f4 <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003900:	e011      	b.n	8003926 <HAL_RCC_OscConfig+0x2ce>
 8003902:	bf00      	nop
 8003904:	40023800 	.word	0x40023800
 8003908:	42470000 	.word	0x42470000
 800390c:	42470e80 	.word	0x42470e80
 8003910:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003914:	f7fe fdee 	bl	80024f4 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e106      	b.n	8003b34 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003926:	4b85      	ldr	r3, [pc, #532]	; (8003b3c <HAL_RCC_OscConfig+0x4e4>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0f0      	beq.n	8003914 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d106      	bne.n	8003948 <HAL_RCC_OscConfig+0x2f0>
 800393a:	4b81      	ldr	r3, [pc, #516]	; (8003b40 <HAL_RCC_OscConfig+0x4e8>)
 800393c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393e:	4a80      	ldr	r2, [pc, #512]	; (8003b40 <HAL_RCC_OscConfig+0x4e8>)
 8003940:	f043 0301 	orr.w	r3, r3, #1
 8003944:	6713      	str	r3, [r2, #112]	; 0x70
 8003946:	e01c      	b.n	8003982 <HAL_RCC_OscConfig+0x32a>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	2b05      	cmp	r3, #5
 800394e:	d10c      	bne.n	800396a <HAL_RCC_OscConfig+0x312>
 8003950:	4b7b      	ldr	r3, [pc, #492]	; (8003b40 <HAL_RCC_OscConfig+0x4e8>)
 8003952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003954:	4a7a      	ldr	r2, [pc, #488]	; (8003b40 <HAL_RCC_OscConfig+0x4e8>)
 8003956:	f043 0304 	orr.w	r3, r3, #4
 800395a:	6713      	str	r3, [r2, #112]	; 0x70
 800395c:	4b78      	ldr	r3, [pc, #480]	; (8003b40 <HAL_RCC_OscConfig+0x4e8>)
 800395e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003960:	4a77      	ldr	r2, [pc, #476]	; (8003b40 <HAL_RCC_OscConfig+0x4e8>)
 8003962:	f043 0301 	orr.w	r3, r3, #1
 8003966:	6713      	str	r3, [r2, #112]	; 0x70
 8003968:	e00b      	b.n	8003982 <HAL_RCC_OscConfig+0x32a>
 800396a:	4b75      	ldr	r3, [pc, #468]	; (8003b40 <HAL_RCC_OscConfig+0x4e8>)
 800396c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396e:	4a74      	ldr	r2, [pc, #464]	; (8003b40 <HAL_RCC_OscConfig+0x4e8>)
 8003970:	f023 0301 	bic.w	r3, r3, #1
 8003974:	6713      	str	r3, [r2, #112]	; 0x70
 8003976:	4b72      	ldr	r3, [pc, #456]	; (8003b40 <HAL_RCC_OscConfig+0x4e8>)
 8003978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397a:	4a71      	ldr	r2, [pc, #452]	; (8003b40 <HAL_RCC_OscConfig+0x4e8>)
 800397c:	f023 0304 	bic.w	r3, r3, #4
 8003980:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d015      	beq.n	80039b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398a:	f7fe fdb3 	bl	80024f4 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003990:	e00a      	b.n	80039a8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003992:	f7fe fdaf 	bl	80024f4 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e0c5      	b.n	8003b34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a8:	4b65      	ldr	r3, [pc, #404]	; (8003b40 <HAL_RCC_OscConfig+0x4e8>)
 80039aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0ee      	beq.n	8003992 <HAL_RCC_OscConfig+0x33a>
 80039b4:	e014      	b.n	80039e0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b6:	f7fe fd9d 	bl	80024f4 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039bc:	e00a      	b.n	80039d4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039be:	f7fe fd99 	bl	80024f4 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e0af      	b.n	8003b34 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d4:	4b5a      	ldr	r3, [pc, #360]	; (8003b40 <HAL_RCC_OscConfig+0x4e8>)
 80039d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1ee      	bne.n	80039be <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039e0:	7dfb      	ldrb	r3, [r7, #23]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d105      	bne.n	80039f2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039e6:	4b56      	ldr	r3, [pc, #344]	; (8003b40 <HAL_RCC_OscConfig+0x4e8>)
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	4a55      	ldr	r2, [pc, #340]	; (8003b40 <HAL_RCC_OscConfig+0x4e8>)
 80039ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 809b 	beq.w	8003b32 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039fc:	4b50      	ldr	r3, [pc, #320]	; (8003b40 <HAL_RCC_OscConfig+0x4e8>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f003 030c 	and.w	r3, r3, #12
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d05c      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d141      	bne.n	8003a94 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a10:	4b4c      	ldr	r3, [pc, #304]	; (8003b44 <HAL_RCC_OscConfig+0x4ec>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a16:	f7fe fd6d 	bl	80024f4 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a1e:	f7fe fd69 	bl	80024f4 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e081      	b.n	8003b34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a30:	4b43      	ldr	r3, [pc, #268]	; (8003b40 <HAL_RCC_OscConfig+0x4e8>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1f0      	bne.n	8003a1e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	69da      	ldr	r2, [r3, #28]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	431a      	orrs	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	019b      	lsls	r3, r3, #6
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a52:	085b      	lsrs	r3, r3, #1
 8003a54:	3b01      	subs	r3, #1
 8003a56:	041b      	lsls	r3, r3, #16
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5e:	061b      	lsls	r3, r3, #24
 8003a60:	4937      	ldr	r1, [pc, #220]	; (8003b40 <HAL_RCC_OscConfig+0x4e8>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a66:	4b37      	ldr	r3, [pc, #220]	; (8003b44 <HAL_RCC_OscConfig+0x4ec>)
 8003a68:	2201      	movs	r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6c:	f7fe fd42 	bl	80024f4 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a74:	f7fe fd3e 	bl	80024f4 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e056      	b.n	8003b34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a86:	4b2e      	ldr	r3, [pc, #184]	; (8003b40 <HAL_RCC_OscConfig+0x4e8>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f0      	beq.n	8003a74 <HAL_RCC_OscConfig+0x41c>
 8003a92:	e04e      	b.n	8003b32 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a94:	4b2b      	ldr	r3, [pc, #172]	; (8003b44 <HAL_RCC_OscConfig+0x4ec>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9a:	f7fe fd2b 	bl	80024f4 <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa2:	f7fe fd27 	bl	80024f4 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e03f      	b.n	8003b34 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ab4:	4b22      	ldr	r3, [pc, #136]	; (8003b40 <HAL_RCC_OscConfig+0x4e8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1f0      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x44a>
 8003ac0:	e037      	b.n	8003b32 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d101      	bne.n	8003ace <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e032      	b.n	8003b34 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ace:	4b1c      	ldr	r3, [pc, #112]	; (8003b40 <HAL_RCC_OscConfig+0x4e8>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d028      	beq.n	8003b2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d121      	bne.n	8003b2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d11a      	bne.n	8003b2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003afe:	4013      	ands	r3, r2
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b04:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d111      	bne.n	8003b2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b14:	085b      	lsrs	r3, r3, #1
 8003b16:	3b01      	subs	r3, #1
 8003b18:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d107      	bne.n	8003b2e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b28:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d001      	beq.n	8003b32 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e000      	b.n	8003b34 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3718      	adds	r7, #24
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40007000 	.word	0x40007000
 8003b40:	40023800 	.word	0x40023800
 8003b44:	42470060 	.word	0x42470060

08003b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e0cc      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b5c:	4b68      	ldr	r3, [pc, #416]	; (8003d00 <HAL_RCC_ClockConfig+0x1b8>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d90c      	bls.n	8003b84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6a:	4b65      	ldr	r3, [pc, #404]	; (8003d00 <HAL_RCC_ClockConfig+0x1b8>)
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b72:	4b63      	ldr	r3, [pc, #396]	; (8003d00 <HAL_RCC_ClockConfig+0x1b8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d001      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e0b8      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d020      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b9c:	4b59      	ldr	r3, [pc, #356]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	4a58      	ldr	r2, [pc, #352]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ba6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0308 	and.w	r3, r3, #8
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d005      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bb4:	4b53      	ldr	r3, [pc, #332]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	4a52      	ldr	r2, [pc, #328]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003bba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bc0:	4b50      	ldr	r3, [pc, #320]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	494d      	ldr	r1, [pc, #308]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d044      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d107      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be6:	4b47      	ldr	r3, [pc, #284]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d119      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e07f      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d003      	beq.n	8003c06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c02:	2b03      	cmp	r3, #3
 8003c04:	d107      	bne.n	8003c16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c06:	4b3f      	ldr	r3, [pc, #252]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d109      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e06f      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c16:	4b3b      	ldr	r3, [pc, #236]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e067      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c26:	4b37      	ldr	r3, [pc, #220]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f023 0203 	bic.w	r2, r3, #3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	4934      	ldr	r1, [pc, #208]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c38:	f7fe fc5c 	bl	80024f4 <HAL_GetTick>
 8003c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3e:	e00a      	b.n	8003c56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c40:	f7fe fc58 	bl	80024f4 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e04f      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c56:	4b2b      	ldr	r3, [pc, #172]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 020c 	and.w	r2, r3, #12
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d1eb      	bne.n	8003c40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c68:	4b25      	ldr	r3, [pc, #148]	; (8003d00 <HAL_RCC_ClockConfig+0x1b8>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d20c      	bcs.n	8003c90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c76:	4b22      	ldr	r3, [pc, #136]	; (8003d00 <HAL_RCC_ClockConfig+0x1b8>)
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c7e:	4b20      	ldr	r3, [pc, #128]	; (8003d00 <HAL_RCC_ClockConfig+0x1b8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d001      	beq.n	8003c90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e032      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d008      	beq.n	8003cae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c9c:	4b19      	ldr	r3, [pc, #100]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	4916      	ldr	r1, [pc, #88]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d009      	beq.n	8003cce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cba:	4b12      	ldr	r3, [pc, #72]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	490e      	ldr	r1, [pc, #56]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cce:	f000 f821 	bl	8003d14 <HAL_RCC_GetSysClockFreq>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	4b0b      	ldr	r3, [pc, #44]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	091b      	lsrs	r3, r3, #4
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	490a      	ldr	r1, [pc, #40]	; (8003d08 <HAL_RCC_ClockConfig+0x1c0>)
 8003ce0:	5ccb      	ldrb	r3, [r1, r3]
 8003ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce6:	4a09      	ldr	r2, [pc, #36]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cea:	4b09      	ldr	r3, [pc, #36]	; (8003d10 <HAL_RCC_ClockConfig+0x1c8>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fe f9c0 	bl	8002074 <HAL_InitTick>

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	40023c00 	.word	0x40023c00
 8003d04:	40023800 	.word	0x40023800
 8003d08:	0800e38c 	.word	0x0800e38c
 8003d0c:	20000010 	.word	0x20000010
 8003d10:	20000014 	.word	0x20000014

08003d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d14:	b5b0      	push	{r4, r5, r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	6079      	str	r1, [r7, #4]
 8003d1e:	2100      	movs	r1, #0
 8003d20:	60f9      	str	r1, [r7, #12]
 8003d22:	2100      	movs	r1, #0
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003d26:	2100      	movs	r1, #0
 8003d28:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d2a:	4952      	ldr	r1, [pc, #328]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d2c:	6889      	ldr	r1, [r1, #8]
 8003d2e:	f001 010c 	and.w	r1, r1, #12
 8003d32:	2908      	cmp	r1, #8
 8003d34:	d00d      	beq.n	8003d52 <HAL_RCC_GetSysClockFreq+0x3e>
 8003d36:	2908      	cmp	r1, #8
 8003d38:	f200 8094 	bhi.w	8003e64 <HAL_RCC_GetSysClockFreq+0x150>
 8003d3c:	2900      	cmp	r1, #0
 8003d3e:	d002      	beq.n	8003d46 <HAL_RCC_GetSysClockFreq+0x32>
 8003d40:	2904      	cmp	r1, #4
 8003d42:	d003      	beq.n	8003d4c <HAL_RCC_GetSysClockFreq+0x38>
 8003d44:	e08e      	b.n	8003e64 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d46:	4b4c      	ldr	r3, [pc, #304]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x164>)
 8003d48:	60bb      	str	r3, [r7, #8]
       break;
 8003d4a:	e08e      	b.n	8003e6a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d4c:	4b4b      	ldr	r3, [pc, #300]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x168>)
 8003d4e:	60bb      	str	r3, [r7, #8]
      break;
 8003d50:	e08b      	b.n	8003e6a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d52:	4948      	ldr	r1, [pc, #288]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d54:	6849      	ldr	r1, [r1, #4]
 8003d56:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003d5a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d5c:	4945      	ldr	r1, [pc, #276]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d5e:	6849      	ldr	r1, [r1, #4]
 8003d60:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003d64:	2900      	cmp	r1, #0
 8003d66:	d024      	beq.n	8003db2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d68:	4942      	ldr	r1, [pc, #264]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d6a:	6849      	ldr	r1, [r1, #4]
 8003d6c:	0989      	lsrs	r1, r1, #6
 8003d6e:	4608      	mov	r0, r1
 8003d70:	f04f 0100 	mov.w	r1, #0
 8003d74:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003d78:	f04f 0500 	mov.w	r5, #0
 8003d7c:	ea00 0204 	and.w	r2, r0, r4
 8003d80:	ea01 0305 	and.w	r3, r1, r5
 8003d84:	493d      	ldr	r1, [pc, #244]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x168>)
 8003d86:	fb01 f003 	mul.w	r0, r1, r3
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	fb01 f102 	mul.w	r1, r1, r2
 8003d90:	1844      	adds	r4, r0, r1
 8003d92:	493a      	ldr	r1, [pc, #232]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x168>)
 8003d94:	fba2 0101 	umull	r0, r1, r2, r1
 8003d98:	1863      	adds	r3, r4, r1
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	f04f 0300 	mov.w	r3, #0
 8003da4:	f7fc ff78 	bl	8000c98 <__aeabi_uldivmod>
 8003da8:	4602      	mov	r2, r0
 8003daa:	460b      	mov	r3, r1
 8003dac:	4613      	mov	r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	e04a      	b.n	8003e48 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003db2:	4b30      	ldr	r3, [pc, #192]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x160>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	099b      	lsrs	r3, r3, #6
 8003db8:	461a      	mov	r2, r3
 8003dba:	f04f 0300 	mov.w	r3, #0
 8003dbe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003dc2:	f04f 0100 	mov.w	r1, #0
 8003dc6:	ea02 0400 	and.w	r4, r2, r0
 8003dca:	ea03 0501 	and.w	r5, r3, r1
 8003dce:	4620      	mov	r0, r4
 8003dd0:	4629      	mov	r1, r5
 8003dd2:	f04f 0200 	mov.w	r2, #0
 8003dd6:	f04f 0300 	mov.w	r3, #0
 8003dda:	014b      	lsls	r3, r1, #5
 8003ddc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003de0:	0142      	lsls	r2, r0, #5
 8003de2:	4610      	mov	r0, r2
 8003de4:	4619      	mov	r1, r3
 8003de6:	1b00      	subs	r0, r0, r4
 8003de8:	eb61 0105 	sbc.w	r1, r1, r5
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	018b      	lsls	r3, r1, #6
 8003df6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003dfa:	0182      	lsls	r2, r0, #6
 8003dfc:	1a12      	subs	r2, r2, r0
 8003dfe:	eb63 0301 	sbc.w	r3, r3, r1
 8003e02:	f04f 0000 	mov.w	r0, #0
 8003e06:	f04f 0100 	mov.w	r1, #0
 8003e0a:	00d9      	lsls	r1, r3, #3
 8003e0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e10:	00d0      	lsls	r0, r2, #3
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	1912      	adds	r2, r2, r4
 8003e18:	eb45 0303 	adc.w	r3, r5, r3
 8003e1c:	f04f 0000 	mov.w	r0, #0
 8003e20:	f04f 0100 	mov.w	r1, #0
 8003e24:	0299      	lsls	r1, r3, #10
 8003e26:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003e2a:	0290      	lsls	r0, r2, #10
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4610      	mov	r0, r2
 8003e32:	4619      	mov	r1, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	461a      	mov	r2, r3
 8003e38:	f04f 0300 	mov.w	r3, #0
 8003e3c:	f7fc ff2c 	bl	8000c98 <__aeabi_uldivmod>
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4613      	mov	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e48:	4b0a      	ldr	r3, [pc, #40]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	0c1b      	lsrs	r3, r3, #16
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	3301      	adds	r3, #1
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e60:	60bb      	str	r3, [r7, #8]
      break;
 8003e62:	e002      	b.n	8003e6a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e64:	4b04      	ldr	r3, [pc, #16]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x164>)
 8003e66:	60bb      	str	r3, [r7, #8]
      break;
 8003e68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e6a:	68bb      	ldr	r3, [r7, #8]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bdb0      	pop	{r4, r5, r7, pc}
 8003e74:	40023800 	.word	0x40023800
 8003e78:	00f42400 	.word	0x00f42400
 8003e7c:	017d7840 	.word	0x017d7840

08003e80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e84:	4b03      	ldr	r3, [pc, #12]	; (8003e94 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e86:	681b      	ldr	r3, [r3, #0]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	20000010 	.word	0x20000010

08003e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e9c:	f7ff fff0 	bl	8003e80 <HAL_RCC_GetHCLKFreq>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	0a9b      	lsrs	r3, r3, #10
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	4903      	ldr	r1, [pc, #12]	; (8003ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eae:	5ccb      	ldrb	r3, [r1, r3]
 8003eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	0800e39c 	.word	0x0800e39c

08003ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ec4:	f7ff ffdc 	bl	8003e80 <HAL_RCC_GetHCLKFreq>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	0b5b      	lsrs	r3, r3, #13
 8003ed0:	f003 0307 	and.w	r3, r3, #7
 8003ed4:	4903      	ldr	r1, [pc, #12]	; (8003ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ed6:	5ccb      	ldrb	r3, [r1, r3]
 8003ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	0800e39c 	.word	0x0800e39c

08003ee8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	220f      	movs	r2, #15
 8003ef6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ef8:	4b12      	ldr	r3, [pc, #72]	; (8003f44 <HAL_RCC_GetClockConfig+0x5c>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f003 0203 	and.w	r2, r3, #3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f04:	4b0f      	ldr	r3, [pc, #60]	; (8003f44 <HAL_RCC_GetClockConfig+0x5c>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f10:	4b0c      	ldr	r3, [pc, #48]	; (8003f44 <HAL_RCC_GetClockConfig+0x5c>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f1c:	4b09      	ldr	r3, [pc, #36]	; (8003f44 <HAL_RCC_GetClockConfig+0x5c>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	08db      	lsrs	r3, r3, #3
 8003f22:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f2a:	4b07      	ldr	r3, [pc, #28]	; (8003f48 <HAL_RCC_GetClockConfig+0x60>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0207 	and.w	r2, r3, #7
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	601a      	str	r2, [r3, #0]
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	40023800 	.word	0x40023800
 8003f48:	40023c00 	.word	0x40023c00

08003f4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e07b      	b.n	8004056 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d108      	bne.n	8003f78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f6e:	d009      	beq.n	8003f84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	61da      	str	r2, [r3, #28]
 8003f76:	e005      	b.n	8003f84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d106      	bne.n	8003fa4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7fd fd4a 	bl	8001a38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004008:	ea42 0103 	orr.w	r1, r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004010:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	0c1b      	lsrs	r3, r3, #16
 8004022:	f003 0104 	and.w	r1, r3, #4
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	f003 0210 	and.w	r2, r3, #16
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	69da      	ldr	r2, [r3, #28]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004044:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b082      	sub	sp, #8
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e041      	b.n	80040f4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d106      	bne.n	800408a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f839 	bl	80040fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2202      	movs	r2, #2
 800408e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3304      	adds	r3, #4
 800409a:	4619      	mov	r1, r3
 800409c:	4610      	mov	r0, r2
 800409e:	f000 f9c9 	bl	8004434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b01      	cmp	r3, #1
 8004122:	d001      	beq.n	8004128 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e044      	b.n	80041b2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2202      	movs	r2, #2
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f042 0201 	orr.w	r2, r2, #1
 800413e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a1e      	ldr	r2, [pc, #120]	; (80041c0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d018      	beq.n	800417c <HAL_TIM_Base_Start_IT+0x6c>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004152:	d013      	beq.n	800417c <HAL_TIM_Base_Start_IT+0x6c>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a1a      	ldr	r2, [pc, #104]	; (80041c4 <HAL_TIM_Base_Start_IT+0xb4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d00e      	beq.n	800417c <HAL_TIM_Base_Start_IT+0x6c>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a19      	ldr	r2, [pc, #100]	; (80041c8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d009      	beq.n	800417c <HAL_TIM_Base_Start_IT+0x6c>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a17      	ldr	r2, [pc, #92]	; (80041cc <HAL_TIM_Base_Start_IT+0xbc>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d004      	beq.n	800417c <HAL_TIM_Base_Start_IT+0x6c>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a16      	ldr	r2, [pc, #88]	; (80041d0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d111      	bne.n	80041a0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 0307 	and.w	r3, r3, #7
 8004186:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2b06      	cmp	r3, #6
 800418c:	d010      	beq.n	80041b0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f042 0201 	orr.w	r2, r2, #1
 800419c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800419e:	e007      	b.n	80041b0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f042 0201 	orr.w	r2, r2, #1
 80041ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	40010000 	.word	0x40010000
 80041c4:	40000400 	.word	0x40000400
 80041c8:	40000800 	.word	0x40000800
 80041cc:	40000c00 	.word	0x40000c00
 80041d0:	40014000 	.word	0x40014000

080041d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d122      	bne.n	8004230 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d11b      	bne.n	8004230 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f06f 0202 	mvn.w	r2, #2
 8004200:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f8ee 	bl	80043f8 <HAL_TIM_IC_CaptureCallback>
 800421c:	e005      	b.n	800422a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f8e0 	bl	80043e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f8f1 	bl	800440c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f003 0304 	and.w	r3, r3, #4
 800423a:	2b04      	cmp	r3, #4
 800423c:	d122      	bne.n	8004284 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b04      	cmp	r3, #4
 800424a:	d11b      	bne.n	8004284 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f06f 0204 	mvn.w	r2, #4
 8004254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2202      	movs	r2, #2
 800425a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f8c4 	bl	80043f8 <HAL_TIM_IC_CaptureCallback>
 8004270:	e005      	b.n	800427e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f8b6 	bl	80043e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f8c7 	bl	800440c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b08      	cmp	r3, #8
 8004290:	d122      	bne.n	80042d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f003 0308 	and.w	r3, r3, #8
 800429c:	2b08      	cmp	r3, #8
 800429e:	d11b      	bne.n	80042d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f06f 0208 	mvn.w	r2, #8
 80042a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2204      	movs	r2, #4
 80042ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f89a 	bl	80043f8 <HAL_TIM_IC_CaptureCallback>
 80042c4:	e005      	b.n	80042d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f88c 	bl	80043e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f89d 	bl	800440c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f003 0310 	and.w	r3, r3, #16
 80042e2:	2b10      	cmp	r3, #16
 80042e4:	d122      	bne.n	800432c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f003 0310 	and.w	r3, r3, #16
 80042f0:	2b10      	cmp	r3, #16
 80042f2:	d11b      	bne.n	800432c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f06f 0210 	mvn.w	r2, #16
 80042fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2208      	movs	r2, #8
 8004302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f870 	bl	80043f8 <HAL_TIM_IC_CaptureCallback>
 8004318:	e005      	b.n	8004326 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f862 	bl	80043e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f873 	bl	800440c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b01      	cmp	r3, #1
 8004338:	d10e      	bne.n	8004358 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b01      	cmp	r3, #1
 8004346:	d107      	bne.n	8004358 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f06f 0201 	mvn.w	r2, #1
 8004350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7fd fb22 	bl	800199c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004362:	2b80      	cmp	r3, #128	; 0x80
 8004364:	d10e      	bne.n	8004384 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004370:	2b80      	cmp	r3, #128	; 0x80
 8004372:	d107      	bne.n	8004384 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800437c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f8e2 	bl	8004548 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438e:	2b40      	cmp	r3, #64	; 0x40
 8004390:	d10e      	bne.n	80043b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439c:	2b40      	cmp	r3, #64	; 0x40
 800439e:	d107      	bne.n	80043b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f838 	bl	8004420 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	f003 0320 	and.w	r3, r3, #32
 80043ba:	2b20      	cmp	r3, #32
 80043bc:	d10e      	bne.n	80043dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f003 0320 	and.w	r3, r3, #32
 80043c8:	2b20      	cmp	r3, #32
 80043ca:	d107      	bne.n	80043dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f06f 0220 	mvn.w	r2, #32
 80043d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f8ac 	bl	8004534 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043dc:	bf00      	nop
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a34      	ldr	r2, [pc, #208]	; (8004518 <TIM_Base_SetConfig+0xe4>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d00f      	beq.n	800446c <TIM_Base_SetConfig+0x38>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004452:	d00b      	beq.n	800446c <TIM_Base_SetConfig+0x38>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a31      	ldr	r2, [pc, #196]	; (800451c <TIM_Base_SetConfig+0xe8>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d007      	beq.n	800446c <TIM_Base_SetConfig+0x38>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a30      	ldr	r2, [pc, #192]	; (8004520 <TIM_Base_SetConfig+0xec>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d003      	beq.n	800446c <TIM_Base_SetConfig+0x38>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a2f      	ldr	r2, [pc, #188]	; (8004524 <TIM_Base_SetConfig+0xf0>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d108      	bne.n	800447e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004472:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a25      	ldr	r2, [pc, #148]	; (8004518 <TIM_Base_SetConfig+0xe4>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d01b      	beq.n	80044be <TIM_Base_SetConfig+0x8a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800448c:	d017      	beq.n	80044be <TIM_Base_SetConfig+0x8a>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a22      	ldr	r2, [pc, #136]	; (800451c <TIM_Base_SetConfig+0xe8>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d013      	beq.n	80044be <TIM_Base_SetConfig+0x8a>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a21      	ldr	r2, [pc, #132]	; (8004520 <TIM_Base_SetConfig+0xec>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d00f      	beq.n	80044be <TIM_Base_SetConfig+0x8a>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a20      	ldr	r2, [pc, #128]	; (8004524 <TIM_Base_SetConfig+0xf0>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d00b      	beq.n	80044be <TIM_Base_SetConfig+0x8a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a1f      	ldr	r2, [pc, #124]	; (8004528 <TIM_Base_SetConfig+0xf4>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d007      	beq.n	80044be <TIM_Base_SetConfig+0x8a>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a1e      	ldr	r2, [pc, #120]	; (800452c <TIM_Base_SetConfig+0xf8>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d003      	beq.n	80044be <TIM_Base_SetConfig+0x8a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a1d      	ldr	r2, [pc, #116]	; (8004530 <TIM_Base_SetConfig+0xfc>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d108      	bne.n	80044d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	4313      	orrs	r3, r2
 80044dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a08      	ldr	r2, [pc, #32]	; (8004518 <TIM_Base_SetConfig+0xe4>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d103      	bne.n	8004504 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	691a      	ldr	r2, [r3, #16]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	615a      	str	r2, [r3, #20]
}
 800450a:	bf00      	nop
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	40010000 	.word	0x40010000
 800451c:	40000400 	.word	0x40000400
 8004520:	40000800 	.word	0x40000800
 8004524:	40000c00 	.word	0x40000c00
 8004528:	40014000 	.word	0x40014000
 800452c:	40014400 	.word	0x40014400
 8004530:	40014800 	.word	0x40014800

08004534 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e03f      	b.n	80045ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d106      	bne.n	8004588 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7fd ff0e 	bl	80023a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2224      	movs	r2, #36	; 0x24
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800459e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 fb9f 	bl	8004ce4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	691a      	ldr	r2, [r3, #16]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	695a      	ldr	r2, [r3, #20]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2220      	movs	r2, #32
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b084      	sub	sp, #16
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	60f8      	str	r0, [r7, #12]
 80045fe:	60b9      	str	r1, [r7, #8]
 8004600:	4613      	mov	r3, r2
 8004602:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b20      	cmp	r3, #32
 800460e:	d11d      	bne.n	800464c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d002      	beq.n	800461c <HAL_UART_Receive_IT+0x26>
 8004616:	88fb      	ldrh	r3, [r7, #6]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e016      	b.n	800464e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004626:	2b01      	cmp	r3, #1
 8004628:	d101      	bne.n	800462e <HAL_UART_Receive_IT+0x38>
 800462a:	2302      	movs	r3, #2
 800462c:	e00f      	b.n	800464e <HAL_UART_Receive_IT+0x58>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800463c:	88fb      	ldrh	r3, [r7, #6]
 800463e:	461a      	mov	r2, r3
 8004640:	68b9      	ldr	r1, [r7, #8]
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f000 f9d4 	bl	80049f0 <UART_Start_Receive_IT>
 8004648:	4603      	mov	r3, r0
 800464a:	e000      	b.n	800464e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800464c:	2302      	movs	r3, #2
  }
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
	...

08004658 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b08a      	sub	sp, #40	; 0x28
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004678:	2300      	movs	r3, #0
 800467a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800467c:	2300      	movs	r3, #0
 800467e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	f003 030f 	and.w	r3, r3, #15
 8004686:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10d      	bne.n	80046aa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	f003 0320 	and.w	r3, r3, #32
 8004694:	2b00      	cmp	r3, #0
 8004696:	d008      	beq.n	80046aa <HAL_UART_IRQHandler+0x52>
 8004698:	6a3b      	ldr	r3, [r7, #32]
 800469a:	f003 0320 	and.w	r3, r3, #32
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 fa87 	bl	8004bb6 <UART_Receive_IT>
      return;
 80046a8:	e17c      	b.n	80049a4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 80b1 	beq.w	8004814 <HAL_UART_IRQHandler+0x1bc>
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d105      	bne.n	80046c8 <HAL_UART_IRQHandler+0x70>
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 80a6 	beq.w	8004814 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <HAL_UART_IRQHandler+0x90>
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d005      	beq.n	80046e8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e0:	f043 0201 	orr.w	r2, r3, #1
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	f003 0304 	and.w	r3, r3, #4
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <HAL_UART_IRQHandler+0xb0>
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004700:	f043 0202 	orr.w	r2, r3, #2
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00a      	beq.n	8004728 <HAL_UART_IRQHandler+0xd0>
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	d005      	beq.n	8004728 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004720:	f043 0204 	orr.w	r2, r3, #4
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00f      	beq.n	8004752 <HAL_UART_IRQHandler+0xfa>
 8004732:	6a3b      	ldr	r3, [r7, #32]
 8004734:	f003 0320 	and.w	r3, r3, #32
 8004738:	2b00      	cmp	r3, #0
 800473a:	d104      	bne.n	8004746 <HAL_UART_IRQHandler+0xee>
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d005      	beq.n	8004752 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	f043 0208 	orr.w	r2, r3, #8
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 811f 	beq.w	800499a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	f003 0320 	and.w	r3, r3, #32
 8004762:	2b00      	cmp	r3, #0
 8004764:	d007      	beq.n	8004776 <HAL_UART_IRQHandler+0x11e>
 8004766:	6a3b      	ldr	r3, [r7, #32]
 8004768:	f003 0320 	and.w	r3, r3, #32
 800476c:	2b00      	cmp	r3, #0
 800476e:	d002      	beq.n	8004776 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 fa20 	bl	8004bb6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004780:	2b40      	cmp	r3, #64	; 0x40
 8004782:	bf0c      	ite	eq
 8004784:	2301      	moveq	r3, #1
 8004786:	2300      	movne	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004790:	f003 0308 	and.w	r3, r3, #8
 8004794:	2b00      	cmp	r3, #0
 8004796:	d102      	bne.n	800479e <HAL_UART_IRQHandler+0x146>
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d031      	beq.n	8004802 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f960 	bl	8004a64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ae:	2b40      	cmp	r3, #64	; 0x40
 80047b0:	d123      	bne.n	80047fa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	695a      	ldr	r2, [r3, #20]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047c0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d013      	beq.n	80047f2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ce:	4a77      	ldr	r2, [pc, #476]	; (80049ac <HAL_UART_IRQHandler+0x354>)
 80047d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7fd ffea 	bl	80027b0 <HAL_DMA_Abort_IT>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d016      	beq.n	8004810 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047ec:	4610      	mov	r0, r2
 80047ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f0:	e00e      	b.n	8004810 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f8e6 	bl	80049c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f8:	e00a      	b.n	8004810 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f8e2 	bl	80049c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004800:	e006      	b.n	8004810 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f8de 	bl	80049c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800480e:	e0c4      	b.n	800499a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004810:	bf00      	nop
    return;
 8004812:	e0c2      	b.n	800499a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004818:	2b01      	cmp	r3, #1
 800481a:	f040 80a2 	bne.w	8004962 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	f003 0310 	and.w	r3, r3, #16
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 809c 	beq.w	8004962 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800482a:	6a3b      	ldr	r3, [r7, #32]
 800482c:	f003 0310 	and.w	r3, r3, #16
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 8096 	beq.w	8004962 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	60fb      	str	r3, [r7, #12]
 800484a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004856:	2b40      	cmp	r3, #64	; 0x40
 8004858:	d14f      	bne.n	80048fa <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004864:	8a3b      	ldrh	r3, [r7, #16]
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 8099 	beq.w	800499e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004870:	8a3a      	ldrh	r2, [r7, #16]
 8004872:	429a      	cmp	r2, r3
 8004874:	f080 8093 	bcs.w	800499e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	8a3a      	ldrh	r2, [r7, #16]
 800487c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004888:	d02b      	beq.n	80048e2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68da      	ldr	r2, [r3, #12]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004898:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	695a      	ldr	r2, [r3, #20]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 0201 	bic.w	r2, r2, #1
 80048a8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	695a      	ldr	r2, [r3, #20]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048b8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2220      	movs	r2, #32
 80048be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0210 	bic.w	r2, r2, #16
 80048d6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fd fef7 	bl	80026d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	4619      	mov	r1, r3
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f870 	bl	80049d8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80048f8:	e051      	b.n	800499e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004902:	b29b      	uxth	r3, r3
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800490c:	b29b      	uxth	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d047      	beq.n	80049a2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004912:	8a7b      	ldrh	r3, [r7, #18]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d044      	beq.n	80049a2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004926:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	695a      	ldr	r2, [r3, #20]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0201 	bic.w	r2, r2, #1
 8004936:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2220      	movs	r2, #32
 800493c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68da      	ldr	r2, [r3, #12]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0210 	bic.w	r2, r2, #16
 8004954:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004956:	8a7b      	ldrh	r3, [r7, #18]
 8004958:	4619      	mov	r1, r3
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f83c 	bl	80049d8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004960:	e01f      	b.n	80049a2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004968:	2b00      	cmp	r3, #0
 800496a:	d008      	beq.n	800497e <HAL_UART_IRQHandler+0x326>
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f8b5 	bl	8004ae6 <UART_Transmit_IT>
    return;
 800497c:	e012      	b.n	80049a4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00d      	beq.n	80049a4 <HAL_UART_IRQHandler+0x34c>
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800498e:	2b00      	cmp	r3, #0
 8004990:	d008      	beq.n	80049a4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f8f7 	bl	8004b86 <UART_EndTransmit_IT>
    return;
 8004998:	e004      	b.n	80049a4 <HAL_UART_IRQHandler+0x34c>
    return;
 800499a:	bf00      	nop
 800499c:	e002      	b.n	80049a4 <HAL_UART_IRQHandler+0x34c>
      return;
 800499e:	bf00      	nop
 80049a0:	e000      	b.n	80049a4 <HAL_UART_IRQHandler+0x34c>
      return;
 80049a2:	bf00      	nop
  }
}
 80049a4:	3728      	adds	r7, #40	; 0x28
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	08004abf 	.word	0x08004abf

080049b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	460b      	mov	r3, r1
 80049e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	4613      	mov	r3, r2
 80049fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	88fa      	ldrh	r2, [r7, #6]
 8004a08:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	88fa      	ldrh	r2, [r7, #6]
 8004a0e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2222      	movs	r2, #34	; 0x22
 8004a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68da      	ldr	r2, [r3, #12]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a34:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	695a      	ldr	r2, [r3, #20]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f042 0201 	orr.w	r2, r2, #1
 8004a44:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f042 0220 	orr.w	r2, r2, #32
 8004a54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a7a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	695a      	ldr	r2, [r3, #20]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 0201 	bic.w	r2, r2, #1
 8004a8a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d107      	bne.n	8004aa4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0210 	bic.w	r2, r2, #16
 8004aa2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b084      	sub	sp, #16
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f7ff ff73 	bl	80049c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ade:	bf00      	nop
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b085      	sub	sp, #20
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b21      	cmp	r3, #33	; 0x21
 8004af8:	d13e      	bne.n	8004b78 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b02:	d114      	bne.n	8004b2e <UART_Transmit_IT+0x48>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d110      	bne.n	8004b2e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	461a      	mov	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b20:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	1c9a      	adds	r2, r3, #2
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	621a      	str	r2, [r3, #32]
 8004b2c:	e008      	b.n	8004b40 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	1c59      	adds	r1, r3, #1
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	6211      	str	r1, [r2, #32]
 8004b38:	781a      	ldrb	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	3b01      	subs	r3, #1
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10f      	bne.n	8004b74 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b62:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68da      	ldr	r2, [r3, #12]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b72:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	e000      	b.n	8004b7a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b78:	2302      	movs	r3, #2
  }
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b082      	sub	sp, #8
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68da      	ldr	r2, [r3, #12]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b9c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7ff ff02 	bl	80049b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b084      	sub	sp, #16
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b22      	cmp	r3, #34	; 0x22
 8004bc8:	f040 8087 	bne.w	8004cda <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd4:	d117      	bne.n	8004c06 <UART_Receive_IT+0x50>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d113      	bne.n	8004c06 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004bde:	2300      	movs	r3, #0
 8004be0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfe:	1c9a      	adds	r2, r3, #2
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	629a      	str	r2, [r3, #40]	; 0x28
 8004c04:	e026      	b.n	8004c54 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c18:	d007      	beq.n	8004c2a <UART_Receive_IT+0x74>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10a      	bne.n	8004c38 <UART_Receive_IT+0x82>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d106      	bne.n	8004c38 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	701a      	strb	r2, [r3, #0]
 8004c36:	e008      	b.n	8004c4a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4e:	1c5a      	adds	r2, r3, #1
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	4619      	mov	r1, r3
 8004c62:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d136      	bne.n	8004cd6 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68da      	ldr	r2, [r3, #12]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 0220 	bic.w	r2, r2, #32
 8004c76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	695a      	ldr	r2, [r3, #20]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f022 0201 	bic.w	r2, r2, #1
 8004c96:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d10e      	bne.n	8004cc6 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68da      	ldr	r2, [r3, #12]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 0210 	bic.w	r2, r2, #16
 8004cb6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7ff fe8a 	bl	80049d8 <HAL_UARTEx_RxEventCallback>
 8004cc4:	e002      	b.n	8004ccc <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7fd fa58 	bl	800217c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	e002      	b.n	8004cdc <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	e000      	b.n	8004cdc <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004cda:	2302      	movs	r3, #2
  }
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce8:	b09f      	sub	sp, #124	; 0x7c
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cfa:	68d9      	ldr	r1, [r3, #12]
 8004cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	ea40 0301 	orr.w	r3, r0, r1
 8004d04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d08:	689a      	ldr	r2, [r3, #8]
 8004d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	431a      	orrs	r2, r3
 8004d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d28:	f021 010c 	bic.w	r1, r1, #12
 8004d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d32:	430b      	orrs	r3, r1
 8004d34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d42:	6999      	ldr	r1, [r3, #24]
 8004d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	ea40 0301 	orr.w	r3, r0, r1
 8004d4c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	4bc5      	ldr	r3, [pc, #788]	; (8005068 <UART_SetConfig+0x384>)
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d004      	beq.n	8004d62 <UART_SetConfig+0x7e>
 8004d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	4bc3      	ldr	r3, [pc, #780]	; (800506c <UART_SetConfig+0x388>)
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d103      	bne.n	8004d6a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d62:	f7ff f8ad 	bl	8003ec0 <HAL_RCC_GetPCLK2Freq>
 8004d66:	6778      	str	r0, [r7, #116]	; 0x74
 8004d68:	e002      	b.n	8004d70 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d6a:	f7ff f895 	bl	8003e98 <HAL_RCC_GetPCLK1Freq>
 8004d6e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d78:	f040 80b6 	bne.w	8004ee8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d7e:	461c      	mov	r4, r3
 8004d80:	f04f 0500 	mov.w	r5, #0
 8004d84:	4622      	mov	r2, r4
 8004d86:	462b      	mov	r3, r5
 8004d88:	1891      	adds	r1, r2, r2
 8004d8a:	6439      	str	r1, [r7, #64]	; 0x40
 8004d8c:	415b      	adcs	r3, r3
 8004d8e:	647b      	str	r3, [r7, #68]	; 0x44
 8004d90:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d94:	1912      	adds	r2, r2, r4
 8004d96:	eb45 0303 	adc.w	r3, r5, r3
 8004d9a:	f04f 0000 	mov.w	r0, #0
 8004d9e:	f04f 0100 	mov.w	r1, #0
 8004da2:	00d9      	lsls	r1, r3, #3
 8004da4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004da8:	00d0      	lsls	r0, r2, #3
 8004daa:	4602      	mov	r2, r0
 8004dac:	460b      	mov	r3, r1
 8004dae:	1911      	adds	r1, r2, r4
 8004db0:	6639      	str	r1, [r7, #96]	; 0x60
 8004db2:	416b      	adcs	r3, r5
 8004db4:	667b      	str	r3, [r7, #100]	; 0x64
 8004db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	f04f 0300 	mov.w	r3, #0
 8004dc0:	1891      	adds	r1, r2, r2
 8004dc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004dc4:	415b      	adcs	r3, r3
 8004dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004dcc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004dd0:	f7fb ff62 	bl	8000c98 <__aeabi_uldivmod>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4ba5      	ldr	r3, [pc, #660]	; (8005070 <UART_SetConfig+0x38c>)
 8004dda:	fba3 2302 	umull	r2, r3, r3, r2
 8004dde:	095b      	lsrs	r3, r3, #5
 8004de0:	011e      	lsls	r6, r3, #4
 8004de2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004de4:	461c      	mov	r4, r3
 8004de6:	f04f 0500 	mov.w	r5, #0
 8004dea:	4622      	mov	r2, r4
 8004dec:	462b      	mov	r3, r5
 8004dee:	1891      	adds	r1, r2, r2
 8004df0:	6339      	str	r1, [r7, #48]	; 0x30
 8004df2:	415b      	adcs	r3, r3
 8004df4:	637b      	str	r3, [r7, #52]	; 0x34
 8004df6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004dfa:	1912      	adds	r2, r2, r4
 8004dfc:	eb45 0303 	adc.w	r3, r5, r3
 8004e00:	f04f 0000 	mov.w	r0, #0
 8004e04:	f04f 0100 	mov.w	r1, #0
 8004e08:	00d9      	lsls	r1, r3, #3
 8004e0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e0e:	00d0      	lsls	r0, r2, #3
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	1911      	adds	r1, r2, r4
 8004e16:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e18:	416b      	adcs	r3, r5
 8004e1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	461a      	mov	r2, r3
 8004e22:	f04f 0300 	mov.w	r3, #0
 8004e26:	1891      	adds	r1, r2, r2
 8004e28:	62b9      	str	r1, [r7, #40]	; 0x28
 8004e2a:	415b      	adcs	r3, r3
 8004e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e32:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004e36:	f7fb ff2f 	bl	8000c98 <__aeabi_uldivmod>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	4b8c      	ldr	r3, [pc, #560]	; (8005070 <UART_SetConfig+0x38c>)
 8004e40:	fba3 1302 	umull	r1, r3, r3, r2
 8004e44:	095b      	lsrs	r3, r3, #5
 8004e46:	2164      	movs	r1, #100	; 0x64
 8004e48:	fb01 f303 	mul.w	r3, r1, r3
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	3332      	adds	r3, #50	; 0x32
 8004e52:	4a87      	ldr	r2, [pc, #540]	; (8005070 <UART_SetConfig+0x38c>)
 8004e54:	fba2 2303 	umull	r2, r3, r2, r3
 8004e58:	095b      	lsrs	r3, r3, #5
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e60:	441e      	add	r6, r3
 8004e62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e64:	4618      	mov	r0, r3
 8004e66:	f04f 0100 	mov.w	r1, #0
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	1894      	adds	r4, r2, r2
 8004e70:	623c      	str	r4, [r7, #32]
 8004e72:	415b      	adcs	r3, r3
 8004e74:	627b      	str	r3, [r7, #36]	; 0x24
 8004e76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e7a:	1812      	adds	r2, r2, r0
 8004e7c:	eb41 0303 	adc.w	r3, r1, r3
 8004e80:	f04f 0400 	mov.w	r4, #0
 8004e84:	f04f 0500 	mov.w	r5, #0
 8004e88:	00dd      	lsls	r5, r3, #3
 8004e8a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e8e:	00d4      	lsls	r4, r2, #3
 8004e90:	4622      	mov	r2, r4
 8004e92:	462b      	mov	r3, r5
 8004e94:	1814      	adds	r4, r2, r0
 8004e96:	653c      	str	r4, [r7, #80]	; 0x50
 8004e98:	414b      	adcs	r3, r1
 8004e9a:	657b      	str	r3, [r7, #84]	; 0x54
 8004e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	f04f 0300 	mov.w	r3, #0
 8004ea6:	1891      	adds	r1, r2, r2
 8004ea8:	61b9      	str	r1, [r7, #24]
 8004eaa:	415b      	adcs	r3, r3
 8004eac:	61fb      	str	r3, [r7, #28]
 8004eae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004eb2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004eb6:	f7fb feef 	bl	8000c98 <__aeabi_uldivmod>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	4b6c      	ldr	r3, [pc, #432]	; (8005070 <UART_SetConfig+0x38c>)
 8004ec0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ec4:	095b      	lsrs	r3, r3, #5
 8004ec6:	2164      	movs	r1, #100	; 0x64
 8004ec8:	fb01 f303 	mul.w	r3, r1, r3
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	3332      	adds	r3, #50	; 0x32
 8004ed2:	4a67      	ldr	r2, [pc, #412]	; (8005070 <UART_SetConfig+0x38c>)
 8004ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed8:	095b      	lsrs	r3, r3, #5
 8004eda:	f003 0207 	and.w	r2, r3, #7
 8004ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4432      	add	r2, r6
 8004ee4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ee6:	e0b9      	b.n	800505c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ee8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eea:	461c      	mov	r4, r3
 8004eec:	f04f 0500 	mov.w	r5, #0
 8004ef0:	4622      	mov	r2, r4
 8004ef2:	462b      	mov	r3, r5
 8004ef4:	1891      	adds	r1, r2, r2
 8004ef6:	6139      	str	r1, [r7, #16]
 8004ef8:	415b      	adcs	r3, r3
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f00:	1912      	adds	r2, r2, r4
 8004f02:	eb45 0303 	adc.w	r3, r5, r3
 8004f06:	f04f 0000 	mov.w	r0, #0
 8004f0a:	f04f 0100 	mov.w	r1, #0
 8004f0e:	00d9      	lsls	r1, r3, #3
 8004f10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f14:	00d0      	lsls	r0, r2, #3
 8004f16:	4602      	mov	r2, r0
 8004f18:	460b      	mov	r3, r1
 8004f1a:	eb12 0804 	adds.w	r8, r2, r4
 8004f1e:	eb43 0905 	adc.w	r9, r3, r5
 8004f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f04f 0100 	mov.w	r1, #0
 8004f2c:	f04f 0200 	mov.w	r2, #0
 8004f30:	f04f 0300 	mov.w	r3, #0
 8004f34:	008b      	lsls	r3, r1, #2
 8004f36:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f3a:	0082      	lsls	r2, r0, #2
 8004f3c:	4640      	mov	r0, r8
 8004f3e:	4649      	mov	r1, r9
 8004f40:	f7fb feaa 	bl	8000c98 <__aeabi_uldivmod>
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4b49      	ldr	r3, [pc, #292]	; (8005070 <UART_SetConfig+0x38c>)
 8004f4a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f4e:	095b      	lsrs	r3, r3, #5
 8004f50:	011e      	lsls	r6, r3, #4
 8004f52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f54:	4618      	mov	r0, r3
 8004f56:	f04f 0100 	mov.w	r1, #0
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	1894      	adds	r4, r2, r2
 8004f60:	60bc      	str	r4, [r7, #8]
 8004f62:	415b      	adcs	r3, r3
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f6a:	1812      	adds	r2, r2, r0
 8004f6c:	eb41 0303 	adc.w	r3, r1, r3
 8004f70:	f04f 0400 	mov.w	r4, #0
 8004f74:	f04f 0500 	mov.w	r5, #0
 8004f78:	00dd      	lsls	r5, r3, #3
 8004f7a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f7e:	00d4      	lsls	r4, r2, #3
 8004f80:	4622      	mov	r2, r4
 8004f82:	462b      	mov	r3, r5
 8004f84:	1814      	adds	r4, r2, r0
 8004f86:	64bc      	str	r4, [r7, #72]	; 0x48
 8004f88:	414b      	adcs	r3, r1
 8004f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f04f 0100 	mov.w	r1, #0
 8004f96:	f04f 0200 	mov.w	r2, #0
 8004f9a:	f04f 0300 	mov.w	r3, #0
 8004f9e:	008b      	lsls	r3, r1, #2
 8004fa0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004fa4:	0082      	lsls	r2, r0, #2
 8004fa6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004faa:	f7fb fe75 	bl	8000c98 <__aeabi_uldivmod>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	4b2f      	ldr	r3, [pc, #188]	; (8005070 <UART_SetConfig+0x38c>)
 8004fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8004fb8:	095b      	lsrs	r3, r3, #5
 8004fba:	2164      	movs	r1, #100	; 0x64
 8004fbc:	fb01 f303 	mul.w	r3, r1, r3
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	3332      	adds	r3, #50	; 0x32
 8004fc6:	4a2a      	ldr	r2, [pc, #168]	; (8005070 <UART_SetConfig+0x38c>)
 8004fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fcc:	095b      	lsrs	r3, r3, #5
 8004fce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fd2:	441e      	add	r6, r3
 8004fd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f04f 0100 	mov.w	r1, #0
 8004fdc:	4602      	mov	r2, r0
 8004fde:	460b      	mov	r3, r1
 8004fe0:	1894      	adds	r4, r2, r2
 8004fe2:	603c      	str	r4, [r7, #0]
 8004fe4:	415b      	adcs	r3, r3
 8004fe6:	607b      	str	r3, [r7, #4]
 8004fe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fec:	1812      	adds	r2, r2, r0
 8004fee:	eb41 0303 	adc.w	r3, r1, r3
 8004ff2:	f04f 0400 	mov.w	r4, #0
 8004ff6:	f04f 0500 	mov.w	r5, #0
 8004ffa:	00dd      	lsls	r5, r3, #3
 8004ffc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005000:	00d4      	lsls	r4, r2, #3
 8005002:	4622      	mov	r2, r4
 8005004:	462b      	mov	r3, r5
 8005006:	eb12 0a00 	adds.w	sl, r2, r0
 800500a:	eb43 0b01 	adc.w	fp, r3, r1
 800500e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	4618      	mov	r0, r3
 8005014:	f04f 0100 	mov.w	r1, #0
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	f04f 0300 	mov.w	r3, #0
 8005020:	008b      	lsls	r3, r1, #2
 8005022:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005026:	0082      	lsls	r2, r0, #2
 8005028:	4650      	mov	r0, sl
 800502a:	4659      	mov	r1, fp
 800502c:	f7fb fe34 	bl	8000c98 <__aeabi_uldivmod>
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	4b0e      	ldr	r3, [pc, #56]	; (8005070 <UART_SetConfig+0x38c>)
 8005036:	fba3 1302 	umull	r1, r3, r3, r2
 800503a:	095b      	lsrs	r3, r3, #5
 800503c:	2164      	movs	r1, #100	; 0x64
 800503e:	fb01 f303 	mul.w	r3, r1, r3
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	011b      	lsls	r3, r3, #4
 8005046:	3332      	adds	r3, #50	; 0x32
 8005048:	4a09      	ldr	r2, [pc, #36]	; (8005070 <UART_SetConfig+0x38c>)
 800504a:	fba2 2303 	umull	r2, r3, r2, r3
 800504e:	095b      	lsrs	r3, r3, #5
 8005050:	f003 020f 	and.w	r2, r3, #15
 8005054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4432      	add	r2, r6
 800505a:	609a      	str	r2, [r3, #8]
}
 800505c:	bf00      	nop
 800505e:	377c      	adds	r7, #124	; 0x7c
 8005060:	46bd      	mov	sp, r7
 8005062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005066:	bf00      	nop
 8005068:	40011000 	.word	0x40011000
 800506c:	40011400 	.word	0x40011400
 8005070:	51eb851f 	.word	0x51eb851f

08005074 <__NVIC_SetPriority>:
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	4603      	mov	r3, r0
 800507c:	6039      	str	r1, [r7, #0]
 800507e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005084:	2b00      	cmp	r3, #0
 8005086:	db0a      	blt.n	800509e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	b2da      	uxtb	r2, r3
 800508c:	490c      	ldr	r1, [pc, #48]	; (80050c0 <__NVIC_SetPriority+0x4c>)
 800508e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005092:	0112      	lsls	r2, r2, #4
 8005094:	b2d2      	uxtb	r2, r2
 8005096:	440b      	add	r3, r1
 8005098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800509c:	e00a      	b.n	80050b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	4908      	ldr	r1, [pc, #32]	; (80050c4 <__NVIC_SetPriority+0x50>)
 80050a4:	79fb      	ldrb	r3, [r7, #7]
 80050a6:	f003 030f 	and.w	r3, r3, #15
 80050aa:	3b04      	subs	r3, #4
 80050ac:	0112      	lsls	r2, r2, #4
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	440b      	add	r3, r1
 80050b2:	761a      	strb	r2, [r3, #24]
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	e000e100 	.word	0xe000e100
 80050c4:	e000ed00 	.word	0xe000ed00

080050c8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80050cc:	4b05      	ldr	r3, [pc, #20]	; (80050e4 <SysTick_Handler+0x1c>)
 80050ce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80050d0:	f001 fcfe 	bl	8006ad0 <xTaskGetSchedulerState>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d001      	beq.n	80050de <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80050da:	f002 fae5 	bl	80076a8 <xPortSysTickHandler>
  }
}
 80050de:	bf00      	nop
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	e000e010 	.word	0xe000e010

080050e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80050ec:	2100      	movs	r1, #0
 80050ee:	f06f 0004 	mvn.w	r0, #4
 80050f2:	f7ff ffbf 	bl	8005074 <__NVIC_SetPriority>
#endif
}
 80050f6:	bf00      	nop
 80050f8:	bd80      	pop	{r7, pc}
	...

080050fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005102:	f3ef 8305 	mrs	r3, IPSR
 8005106:	603b      	str	r3, [r7, #0]
  return(result);
 8005108:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800510e:	f06f 0305 	mvn.w	r3, #5
 8005112:	607b      	str	r3, [r7, #4]
 8005114:	e00c      	b.n	8005130 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005116:	4b0a      	ldr	r3, [pc, #40]	; (8005140 <osKernelInitialize+0x44>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d105      	bne.n	800512a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800511e:	4b08      	ldr	r3, [pc, #32]	; (8005140 <osKernelInitialize+0x44>)
 8005120:	2201      	movs	r2, #1
 8005122:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005124:	2300      	movs	r3, #0
 8005126:	607b      	str	r3, [r7, #4]
 8005128:	e002      	b.n	8005130 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800512a:	f04f 33ff 	mov.w	r3, #4294967295
 800512e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005130:	687b      	ldr	r3, [r7, #4]
}
 8005132:	4618      	mov	r0, r3
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	20000620 	.word	0x20000620

08005144 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800514a:	f3ef 8305 	mrs	r3, IPSR
 800514e:	603b      	str	r3, [r7, #0]
  return(result);
 8005150:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005156:	f06f 0305 	mvn.w	r3, #5
 800515a:	607b      	str	r3, [r7, #4]
 800515c:	e010      	b.n	8005180 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800515e:	4b0b      	ldr	r3, [pc, #44]	; (800518c <osKernelStart+0x48>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d109      	bne.n	800517a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005166:	f7ff ffbf 	bl	80050e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800516a:	4b08      	ldr	r3, [pc, #32]	; (800518c <osKernelStart+0x48>)
 800516c:	2202      	movs	r2, #2
 800516e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005170:	f001 f866 	bl	8006240 <vTaskStartScheduler>
      stat = osOK;
 8005174:	2300      	movs	r3, #0
 8005176:	607b      	str	r3, [r7, #4]
 8005178:	e002      	b.n	8005180 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800517a:	f04f 33ff 	mov.w	r3, #4294967295
 800517e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005180:	687b      	ldr	r3, [r7, #4]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	20000620 	.word	0x20000620

08005190 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005190:	b580      	push	{r7, lr}
 8005192:	b08e      	sub	sp, #56	; 0x38
 8005194:	af04      	add	r7, sp, #16
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800519c:	2300      	movs	r3, #0
 800519e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051a0:	f3ef 8305 	mrs	r3, IPSR
 80051a4:	617b      	str	r3, [r7, #20]
  return(result);
 80051a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d17e      	bne.n	80052aa <osThreadNew+0x11a>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d07b      	beq.n	80052aa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80051b2:	2340      	movs	r3, #64	; 0x40
 80051b4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80051b6:	2318      	movs	r3, #24
 80051b8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80051ba:	2300      	movs	r3, #0
 80051bc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80051be:	f04f 33ff 	mov.w	r3, #4294967295
 80051c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d045      	beq.n	8005256 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d002      	beq.n	80051d8 <osThreadNew+0x48>
        name = attr->name;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d002      	beq.n	80051e6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d008      	beq.n	80051fe <osThreadNew+0x6e>
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	2b38      	cmp	r3, #56	; 0x38
 80051f0:	d805      	bhi.n	80051fe <osThreadNew+0x6e>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <osThreadNew+0x72>
        return (NULL);
 80051fe:	2300      	movs	r3, #0
 8005200:	e054      	b.n	80052ac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	089b      	lsrs	r3, r3, #2
 8005210:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00e      	beq.n	8005238 <osThreadNew+0xa8>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	2b5b      	cmp	r3, #91	; 0x5b
 8005220:	d90a      	bls.n	8005238 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005226:	2b00      	cmp	r3, #0
 8005228:	d006      	beq.n	8005238 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d002      	beq.n	8005238 <osThreadNew+0xa8>
        mem = 1;
 8005232:	2301      	movs	r3, #1
 8005234:	61bb      	str	r3, [r7, #24]
 8005236:	e010      	b.n	800525a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10c      	bne.n	800525a <osThreadNew+0xca>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d108      	bne.n	800525a <osThreadNew+0xca>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d104      	bne.n	800525a <osThreadNew+0xca>
          mem = 0;
 8005250:	2300      	movs	r3, #0
 8005252:	61bb      	str	r3, [r7, #24]
 8005254:	e001      	b.n	800525a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005256:	2300      	movs	r3, #0
 8005258:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d110      	bne.n	8005282 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005268:	9202      	str	r2, [sp, #8]
 800526a:	9301      	str	r3, [sp, #4]
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	6a3a      	ldr	r2, [r7, #32]
 8005274:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f000 fe0c 	bl	8005e94 <xTaskCreateStatic>
 800527c:	4603      	mov	r3, r0
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	e013      	b.n	80052aa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d110      	bne.n	80052aa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005288:	6a3b      	ldr	r3, [r7, #32]
 800528a:	b29a      	uxth	r2, r3
 800528c:	f107 0310 	add.w	r3, r7, #16
 8005290:	9301      	str	r3, [sp, #4]
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f000 fe57 	bl	8005f4e <xTaskCreate>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d001      	beq.n	80052aa <osThreadNew+0x11a>
            hTask = NULL;
 80052a6:	2300      	movs	r3, #0
 80052a8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80052aa:	693b      	ldr	r3, [r7, #16]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3728      	adds	r7, #40	; 0x28
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052bc:	f3ef 8305 	mrs	r3, IPSR
 80052c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80052c2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d003      	beq.n	80052d0 <osDelay+0x1c>
    stat = osErrorISR;
 80052c8:	f06f 0305 	mvn.w	r3, #5
 80052cc:	60fb      	str	r3, [r7, #12]
 80052ce:	e007      	b.n	80052e0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80052d0:	2300      	movs	r3, #0
 80052d2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d002      	beq.n	80052e0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 ff7c 	bl	80061d8 <vTaskDelay>
    }
  }

  return (stat);
 80052e0:	68fb      	ldr	r3, [r7, #12]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
	...

080052ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4a07      	ldr	r2, [pc, #28]	; (8005318 <vApplicationGetIdleTaskMemory+0x2c>)
 80052fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	4a06      	ldr	r2, [pc, #24]	; (800531c <vApplicationGetIdleTaskMemory+0x30>)
 8005302:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2240      	movs	r2, #64	; 0x40
 8005308:	601a      	str	r2, [r3, #0]
}
 800530a:	bf00      	nop
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	20000624 	.word	0x20000624
 800531c:	20000680 	.word	0x20000680

08005320 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4a07      	ldr	r2, [pc, #28]	; (800534c <vApplicationGetTimerTaskMemory+0x2c>)
 8005330:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	4a06      	ldr	r2, [pc, #24]	; (8005350 <vApplicationGetTimerTaskMemory+0x30>)
 8005336:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2280      	movs	r2, #128	; 0x80
 800533c:	601a      	str	r2, [r3, #0]
}
 800533e:	bf00      	nop
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	20000780 	.word	0x20000780
 8005350:	200007dc 	.word	0x200007dc

08005354 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f103 0208 	add.w	r2, r3, #8
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f04f 32ff 	mov.w	r2, #4294967295
 800536c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f103 0208 	add.w	r2, r3, #8
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f103 0208 	add.w	r2, r3, #8
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80053a2:	bf00      	nop
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053ae:	b480      	push	{r7}
 80053b0:	b085      	sub	sp, #20
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	1c5a      	adds	r2, r3, #1
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	601a      	str	r2, [r3, #0]
}
 80053ea:	bf00      	nop
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053f6:	b480      	push	{r7}
 80053f8:	b085      	sub	sp, #20
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
 80053fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540c:	d103      	bne.n	8005416 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	e00c      	b.n	8005430 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	3308      	adds	r3, #8
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	e002      	b.n	8005424 <vListInsert+0x2e>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	429a      	cmp	r2, r3
 800542e:	d2f6      	bcs.n	800541e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	1c5a      	adds	r2, r3, #1
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	601a      	str	r2, [r3, #0]
}
 800545c:	bf00      	nop
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	6892      	ldr	r2, [r2, #8]
 800547e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	6852      	ldr	r2, [r2, #4]
 8005488:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	429a      	cmp	r2, r3
 8005492:	d103      	bne.n	800549c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	1e5a      	subs	r2, r3, #1
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3714      	adds	r7, #20
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10a      	bne.n	80054e6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80054d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80054e2:	bf00      	nop
 80054e4:	e7fe      	b.n	80054e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80054e6:	f002 f84d 	bl	8007584 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f2:	68f9      	ldr	r1, [r7, #12]
 80054f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054f6:	fb01 f303 	mul.w	r3, r1, r3
 80054fa:	441a      	add	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005516:	3b01      	subs	r3, #1
 8005518:	68f9      	ldr	r1, [r7, #12]
 800551a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800551c:	fb01 f303 	mul.w	r3, r1, r3
 8005520:	441a      	add	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	22ff      	movs	r2, #255	; 0xff
 800552a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	22ff      	movs	r2, #255	; 0xff
 8005532:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d114      	bne.n	8005566 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d01a      	beq.n	800557a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	3310      	adds	r3, #16
 8005548:	4618      	mov	r0, r3
 800554a:	f001 f903 	bl	8006754 <xTaskRemoveFromEventList>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d012      	beq.n	800557a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005554:	4b0c      	ldr	r3, [pc, #48]	; (8005588 <xQueueGenericReset+0xcc>)
 8005556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	f3bf 8f6f 	isb	sy
 8005564:	e009      	b.n	800557a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	3310      	adds	r3, #16
 800556a:	4618      	mov	r0, r3
 800556c:	f7ff fef2 	bl	8005354 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	3324      	adds	r3, #36	; 0x24
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff feed 	bl	8005354 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800557a:	f002 f833 	bl	80075e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800557e:	2301      	movs	r3, #1
}
 8005580:	4618      	mov	r0, r3
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	e000ed04 	.word	0xe000ed04

0800558c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800558c:	b580      	push	{r7, lr}
 800558e:	b08e      	sub	sp, #56	; 0x38
 8005590:	af02      	add	r7, sp, #8
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
 8005598:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10a      	bne.n	80055b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80055a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a4:	f383 8811 	msr	BASEPRI, r3
 80055a8:	f3bf 8f6f 	isb	sy
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80055b2:	bf00      	nop
 80055b4:	e7fe      	b.n	80055b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10a      	bne.n	80055d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80055bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c0:	f383 8811 	msr	BASEPRI, r3
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80055ce:	bf00      	nop
 80055d0:	e7fe      	b.n	80055d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d002      	beq.n	80055de <xQueueGenericCreateStatic+0x52>
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <xQueueGenericCreateStatic+0x56>
 80055de:	2301      	movs	r3, #1
 80055e0:	e000      	b.n	80055e4 <xQueueGenericCreateStatic+0x58>
 80055e2:	2300      	movs	r3, #0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10a      	bne.n	80055fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80055e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ec:	f383 8811 	msr	BASEPRI, r3
 80055f0:	f3bf 8f6f 	isb	sy
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	623b      	str	r3, [r7, #32]
}
 80055fa:	bf00      	nop
 80055fc:	e7fe      	b.n	80055fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d102      	bne.n	800560a <xQueueGenericCreateStatic+0x7e>
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <xQueueGenericCreateStatic+0x82>
 800560a:	2301      	movs	r3, #1
 800560c:	e000      	b.n	8005610 <xQueueGenericCreateStatic+0x84>
 800560e:	2300      	movs	r3, #0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10a      	bne.n	800562a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005618:	f383 8811 	msr	BASEPRI, r3
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	61fb      	str	r3, [r7, #28]
}
 8005626:	bf00      	nop
 8005628:	e7fe      	b.n	8005628 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800562a:	2350      	movs	r3, #80	; 0x50
 800562c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2b50      	cmp	r3, #80	; 0x50
 8005632:	d00a      	beq.n	800564a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	61bb      	str	r3, [r7, #24]
}
 8005646:	bf00      	nop
 8005648:	e7fe      	b.n	8005648 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800564a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00d      	beq.n	8005672 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800565e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	4613      	mov	r3, r2
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	68b9      	ldr	r1, [r7, #8]
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f000 f805 	bl	800567c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005674:	4618      	mov	r0, r3
 8005676:	3730      	adds	r7, #48	; 0x30
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
 8005688:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d103      	bne.n	8005698 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	601a      	str	r2, [r3, #0]
 8005696:	e002      	b.n	800569e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056aa:	2101      	movs	r1, #1
 80056ac:	69b8      	ldr	r0, [r7, #24]
 80056ae:	f7ff ff05 	bl	80054bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	78fa      	ldrb	r2, [r7, #3]
 80056b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80056ba:	bf00      	nop
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
	...

080056c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b08e      	sub	sp, #56	; 0x38
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
 80056d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80056d2:	2300      	movs	r3, #0
 80056d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80056da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10a      	bne.n	80056f6 <xQueueGenericSend+0x32>
	__asm volatile
 80056e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80056f2:	bf00      	nop
 80056f4:	e7fe      	b.n	80056f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d103      	bne.n	8005704 <xQueueGenericSend+0x40>
 80056fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <xQueueGenericSend+0x44>
 8005704:	2301      	movs	r3, #1
 8005706:	e000      	b.n	800570a <xQueueGenericSend+0x46>
 8005708:	2300      	movs	r3, #0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10a      	bne.n	8005724 <xQueueGenericSend+0x60>
	__asm volatile
 800570e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005712:	f383 8811 	msr	BASEPRI, r3
 8005716:	f3bf 8f6f 	isb	sy
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005720:	bf00      	nop
 8005722:	e7fe      	b.n	8005722 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	2b02      	cmp	r3, #2
 8005728:	d103      	bne.n	8005732 <xQueueGenericSend+0x6e>
 800572a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572e:	2b01      	cmp	r3, #1
 8005730:	d101      	bne.n	8005736 <xQueueGenericSend+0x72>
 8005732:	2301      	movs	r3, #1
 8005734:	e000      	b.n	8005738 <xQueueGenericSend+0x74>
 8005736:	2300      	movs	r3, #0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10a      	bne.n	8005752 <xQueueGenericSend+0x8e>
	__asm volatile
 800573c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005740:	f383 8811 	msr	BASEPRI, r3
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	623b      	str	r3, [r7, #32]
}
 800574e:	bf00      	nop
 8005750:	e7fe      	b.n	8005750 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005752:	f001 f9bd 	bl	8006ad0 <xTaskGetSchedulerState>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d102      	bne.n	8005762 <xQueueGenericSend+0x9e>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <xQueueGenericSend+0xa2>
 8005762:	2301      	movs	r3, #1
 8005764:	e000      	b.n	8005768 <xQueueGenericSend+0xa4>
 8005766:	2300      	movs	r3, #0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10a      	bne.n	8005782 <xQueueGenericSend+0xbe>
	__asm volatile
 800576c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005770:	f383 8811 	msr	BASEPRI, r3
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	61fb      	str	r3, [r7, #28]
}
 800577e:	bf00      	nop
 8005780:	e7fe      	b.n	8005780 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005782:	f001 feff 	bl	8007584 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800578a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800578e:	429a      	cmp	r2, r3
 8005790:	d302      	bcc.n	8005798 <xQueueGenericSend+0xd4>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b02      	cmp	r3, #2
 8005796:	d129      	bne.n	80057ec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	68b9      	ldr	r1, [r7, #8]
 800579c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800579e:	f000 fa0b 	bl	8005bb8 <prvCopyDataToQueue>
 80057a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d010      	beq.n	80057ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ae:	3324      	adds	r3, #36	; 0x24
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 ffcf 	bl	8006754 <xTaskRemoveFromEventList>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d013      	beq.n	80057e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80057bc:	4b3f      	ldr	r3, [pc, #252]	; (80058bc <xQueueGenericSend+0x1f8>)
 80057be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057c2:	601a      	str	r2, [r3, #0]
 80057c4:	f3bf 8f4f 	dsb	sy
 80057c8:	f3bf 8f6f 	isb	sy
 80057cc:	e00a      	b.n	80057e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80057ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d007      	beq.n	80057e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80057d4:	4b39      	ldr	r3, [pc, #228]	; (80058bc <xQueueGenericSend+0x1f8>)
 80057d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057da:	601a      	str	r2, [r3, #0]
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80057e4:	f001 fefe 	bl	80075e4 <vPortExitCritical>
				return pdPASS;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e063      	b.n	80058b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d103      	bne.n	80057fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057f2:	f001 fef7 	bl	80075e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80057f6:	2300      	movs	r3, #0
 80057f8:	e05c      	b.n	80058b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d106      	bne.n	800580e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005800:	f107 0314 	add.w	r3, r7, #20
 8005804:	4618      	mov	r0, r3
 8005806:	f001 f809 	bl	800681c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800580a:	2301      	movs	r3, #1
 800580c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800580e:	f001 fee9 	bl	80075e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005812:	f000 fd7b 	bl	800630c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005816:	f001 feb5 	bl	8007584 <vPortEnterCritical>
 800581a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005820:	b25b      	sxtb	r3, r3
 8005822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005826:	d103      	bne.n	8005830 <xQueueGenericSend+0x16c>
 8005828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005832:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005836:	b25b      	sxtb	r3, r3
 8005838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583c:	d103      	bne.n	8005846 <xQueueGenericSend+0x182>
 800583e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005846:	f001 fecd 	bl	80075e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800584a:	1d3a      	adds	r2, r7, #4
 800584c:	f107 0314 	add.w	r3, r7, #20
 8005850:	4611      	mov	r1, r2
 8005852:	4618      	mov	r0, r3
 8005854:	f000 fff8 	bl	8006848 <xTaskCheckForTimeOut>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d124      	bne.n	80058a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800585e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005860:	f000 faa2 	bl	8005da8 <prvIsQueueFull>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d018      	beq.n	800589c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800586a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586c:	3310      	adds	r3, #16
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	4611      	mov	r1, r2
 8005872:	4618      	mov	r0, r3
 8005874:	f000 ff1e 	bl	80066b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800587a:	f000 fa2d 	bl	8005cd8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800587e:	f000 fd53 	bl	8006328 <xTaskResumeAll>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	f47f af7c 	bne.w	8005782 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800588a:	4b0c      	ldr	r3, [pc, #48]	; (80058bc <xQueueGenericSend+0x1f8>)
 800588c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	f3bf 8f4f 	dsb	sy
 8005896:	f3bf 8f6f 	isb	sy
 800589a:	e772      	b.n	8005782 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800589c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800589e:	f000 fa1b 	bl	8005cd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058a2:	f000 fd41 	bl	8006328 <xTaskResumeAll>
 80058a6:	e76c      	b.n	8005782 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80058a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058aa:	f000 fa15 	bl	8005cd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058ae:	f000 fd3b 	bl	8006328 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80058b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3738      	adds	r7, #56	; 0x38
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	e000ed04 	.word	0xe000ed04

080058c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b090      	sub	sp, #64	; 0x40
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
 80058cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80058d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10a      	bne.n	80058ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80058d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058dc:	f383 8811 	msr	BASEPRI, r3
 80058e0:	f3bf 8f6f 	isb	sy
 80058e4:	f3bf 8f4f 	dsb	sy
 80058e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80058ea:	bf00      	nop
 80058ec:	e7fe      	b.n	80058ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d103      	bne.n	80058fc <xQueueGenericSendFromISR+0x3c>
 80058f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <xQueueGenericSendFromISR+0x40>
 80058fc:	2301      	movs	r3, #1
 80058fe:	e000      	b.n	8005902 <xQueueGenericSendFromISR+0x42>
 8005900:	2300      	movs	r3, #0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10a      	bne.n	800591c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005918:	bf00      	nop
 800591a:	e7fe      	b.n	800591a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	2b02      	cmp	r3, #2
 8005920:	d103      	bne.n	800592a <xQueueGenericSendFromISR+0x6a>
 8005922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005926:	2b01      	cmp	r3, #1
 8005928:	d101      	bne.n	800592e <xQueueGenericSendFromISR+0x6e>
 800592a:	2301      	movs	r3, #1
 800592c:	e000      	b.n	8005930 <xQueueGenericSendFromISR+0x70>
 800592e:	2300      	movs	r3, #0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d10a      	bne.n	800594a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005938:	f383 8811 	msr	BASEPRI, r3
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	f3bf 8f4f 	dsb	sy
 8005944:	623b      	str	r3, [r7, #32]
}
 8005946:	bf00      	nop
 8005948:	e7fe      	b.n	8005948 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800594a:	f001 fefd 	bl	8007748 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800594e:	f3ef 8211 	mrs	r2, BASEPRI
 8005952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005956:	f383 8811 	msr	BASEPRI, r3
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	61fa      	str	r2, [r7, #28]
 8005964:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005966:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005968:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800596a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800596e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005972:	429a      	cmp	r2, r3
 8005974:	d302      	bcc.n	800597c <xQueueGenericSendFromISR+0xbc>
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b02      	cmp	r3, #2
 800597a:	d12f      	bne.n	80059dc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800597c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	68b9      	ldr	r1, [r7, #8]
 8005990:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005992:	f000 f911 	bl	8005bb8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005996:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800599a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599e:	d112      	bne.n	80059c6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d016      	beq.n	80059d6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059aa:	3324      	adds	r3, #36	; 0x24
 80059ac:	4618      	mov	r0, r3
 80059ae:	f000 fed1 	bl	8006754 <xTaskRemoveFromEventList>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00e      	beq.n	80059d6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00b      	beq.n	80059d6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	e007      	b.n	80059d6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80059ca:	3301      	adds	r3, #1
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	b25a      	sxtb	r2, r3
 80059d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80059d6:	2301      	movs	r3, #1
 80059d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80059da:	e001      	b.n	80059e0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80059dc:	2300      	movs	r3, #0
 80059de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80059ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3740      	adds	r7, #64	; 0x40
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
	...

080059f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b08c      	sub	sp, #48	; 0x30
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a04:	2300      	movs	r3, #0
 8005a06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10a      	bne.n	8005a28 <xQueueReceive+0x30>
	__asm volatile
 8005a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a16:	f383 8811 	msr	BASEPRI, r3
 8005a1a:	f3bf 8f6f 	isb	sy
 8005a1e:	f3bf 8f4f 	dsb	sy
 8005a22:	623b      	str	r3, [r7, #32]
}
 8005a24:	bf00      	nop
 8005a26:	e7fe      	b.n	8005a26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d103      	bne.n	8005a36 <xQueueReceive+0x3e>
 8005a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <xQueueReceive+0x42>
 8005a36:	2301      	movs	r3, #1
 8005a38:	e000      	b.n	8005a3c <xQueueReceive+0x44>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10a      	bne.n	8005a56 <xQueueReceive+0x5e>
	__asm volatile
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	61fb      	str	r3, [r7, #28]
}
 8005a52:	bf00      	nop
 8005a54:	e7fe      	b.n	8005a54 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a56:	f001 f83b 	bl	8006ad0 <xTaskGetSchedulerState>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d102      	bne.n	8005a66 <xQueueReceive+0x6e>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d101      	bne.n	8005a6a <xQueueReceive+0x72>
 8005a66:	2301      	movs	r3, #1
 8005a68:	e000      	b.n	8005a6c <xQueueReceive+0x74>
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10a      	bne.n	8005a86 <xQueueReceive+0x8e>
	__asm volatile
 8005a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a74:	f383 8811 	msr	BASEPRI, r3
 8005a78:	f3bf 8f6f 	isb	sy
 8005a7c:	f3bf 8f4f 	dsb	sy
 8005a80:	61bb      	str	r3, [r7, #24]
}
 8005a82:	bf00      	nop
 8005a84:	e7fe      	b.n	8005a84 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a86:	f001 fd7d 	bl	8007584 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d01f      	beq.n	8005ad6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a96:	68b9      	ldr	r1, [r7, #8]
 8005a98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a9a:	f000 f8f7 	bl	8005c8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	1e5a      	subs	r2, r3, #1
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00f      	beq.n	8005ace <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab0:	3310      	adds	r3, #16
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 fe4e 	bl	8006754 <xTaskRemoveFromEventList>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d007      	beq.n	8005ace <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005abe:	4b3d      	ldr	r3, [pc, #244]	; (8005bb4 <xQueueReceive+0x1bc>)
 8005ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	f3bf 8f4f 	dsb	sy
 8005aca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ace:	f001 fd89 	bl	80075e4 <vPortExitCritical>
				return pdPASS;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e069      	b.n	8005baa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d103      	bne.n	8005ae4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005adc:	f001 fd82 	bl	80075e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	e062      	b.n	8005baa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d106      	bne.n	8005af8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005aea:	f107 0310 	add.w	r3, r7, #16
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 fe94 	bl	800681c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005af4:	2301      	movs	r3, #1
 8005af6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005af8:	f001 fd74 	bl	80075e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005afc:	f000 fc06 	bl	800630c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b00:	f001 fd40 	bl	8007584 <vPortEnterCritical>
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b0a:	b25b      	sxtb	r3, r3
 8005b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b10:	d103      	bne.n	8005b1a <xQueueReceive+0x122>
 8005b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b20:	b25b      	sxtb	r3, r3
 8005b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b26:	d103      	bne.n	8005b30 <xQueueReceive+0x138>
 8005b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b30:	f001 fd58 	bl	80075e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b34:	1d3a      	adds	r2, r7, #4
 8005b36:	f107 0310 	add.w	r3, r7, #16
 8005b3a:	4611      	mov	r1, r2
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f000 fe83 	bl	8006848 <xTaskCheckForTimeOut>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d123      	bne.n	8005b90 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b4a:	f000 f917 	bl	8005d7c <prvIsQueueEmpty>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d017      	beq.n	8005b84 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b56:	3324      	adds	r3, #36	; 0x24
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	4611      	mov	r1, r2
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f000 fda9 	bl	80066b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b64:	f000 f8b8 	bl	8005cd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b68:	f000 fbde 	bl	8006328 <xTaskResumeAll>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d189      	bne.n	8005a86 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005b72:	4b10      	ldr	r3, [pc, #64]	; (8005bb4 <xQueueReceive+0x1bc>)
 8005b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b78:	601a      	str	r2, [r3, #0]
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	e780      	b.n	8005a86 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b86:	f000 f8a7 	bl	8005cd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b8a:	f000 fbcd 	bl	8006328 <xTaskResumeAll>
 8005b8e:	e77a      	b.n	8005a86 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b92:	f000 f8a1 	bl	8005cd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b96:	f000 fbc7 	bl	8006328 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b9c:	f000 f8ee 	bl	8005d7c <prvIsQueueEmpty>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f43f af6f 	beq.w	8005a86 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ba8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3730      	adds	r7, #48	; 0x30
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	e000ed04 	.word	0xe000ed04

08005bb8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bcc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10d      	bne.n	8005bf2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d14d      	bne.n	8005c7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 ff92 	bl	8006b0c <xTaskPriorityDisinherit>
 8005be8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	609a      	str	r2, [r3, #8]
 8005bf0:	e043      	b.n	8005c7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d119      	bne.n	8005c2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6858      	ldr	r0, [r3, #4]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c00:	461a      	mov	r2, r3
 8005c02:	68b9      	ldr	r1, [r7, #8]
 8005c04:	f001 fff4 	bl	8007bf0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c10:	441a      	add	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d32b      	bcc.n	8005c7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	605a      	str	r2, [r3, #4]
 8005c2a:	e026      	b.n	8005c7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	68d8      	ldr	r0, [r3, #12]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c34:	461a      	mov	r2, r3
 8005c36:	68b9      	ldr	r1, [r7, #8]
 8005c38:	f001 ffda 	bl	8007bf0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	68da      	ldr	r2, [r3, #12]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c44:	425b      	negs	r3, r3
 8005c46:	441a      	add	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	68da      	ldr	r2, [r3, #12]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d207      	bcs.n	8005c68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	689a      	ldr	r2, [r3, #8]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c60:	425b      	negs	r3, r3
 8005c62:	441a      	add	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d105      	bne.n	8005c7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d002      	beq.n	8005c7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	3b01      	subs	r3, #1
 8005c78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	1c5a      	adds	r2, r3, #1
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c82:	697b      	ldr	r3, [r7, #20]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3718      	adds	r7, #24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d018      	beq.n	8005cd0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68da      	ldr	r2, [r3, #12]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca6:	441a      	add	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68da      	ldr	r2, [r3, #12]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d303      	bcc.n	8005cc0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68d9      	ldr	r1, [r3, #12]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc8:	461a      	mov	r2, r3
 8005cca:	6838      	ldr	r0, [r7, #0]
 8005ccc:	f001 ff90 	bl	8007bf0 <memcpy>
	}
}
 8005cd0:	bf00      	nop
 8005cd2:	3708      	adds	r7, #8
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ce0:	f001 fc50 	bl	8007584 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cec:	e011      	b.n	8005d12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d012      	beq.n	8005d1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	3324      	adds	r3, #36	; 0x24
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 fd2a 	bl	8006754 <xTaskRemoveFromEventList>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d001      	beq.n	8005d0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d06:	f000 fe01 	bl	800690c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d0a:	7bfb      	ldrb	r3, [r7, #15]
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	dce9      	bgt.n	8005cee <prvUnlockQueue+0x16>
 8005d1a:	e000      	b.n	8005d1e <prvUnlockQueue+0x46>
					break;
 8005d1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	22ff      	movs	r2, #255	; 0xff
 8005d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005d26:	f001 fc5d 	bl	80075e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d2a:	f001 fc2b 	bl	8007584 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d36:	e011      	b.n	8005d5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d012      	beq.n	8005d66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	3310      	adds	r3, #16
 8005d44:	4618      	mov	r0, r3
 8005d46:	f000 fd05 	bl	8006754 <xTaskRemoveFromEventList>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d50:	f000 fddc 	bl	800690c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d54:	7bbb      	ldrb	r3, [r7, #14]
 8005d56:	3b01      	subs	r3, #1
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	dce9      	bgt.n	8005d38 <prvUnlockQueue+0x60>
 8005d64:	e000      	b.n	8005d68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	22ff      	movs	r2, #255	; 0xff
 8005d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d70:	f001 fc38 	bl	80075e4 <vPortExitCritical>
}
 8005d74:	bf00      	nop
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d84:	f001 fbfe 	bl	8007584 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d102      	bne.n	8005d96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d90:	2301      	movs	r3, #1
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	e001      	b.n	8005d9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d96:	2300      	movs	r3, #0
 8005d98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d9a:	f001 fc23 	bl	80075e4 <vPortExitCritical>

	return xReturn;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005db0:	f001 fbe8 	bl	8007584 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d102      	bne.n	8005dc6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	60fb      	str	r3, [r7, #12]
 8005dc4:	e001      	b.n	8005dca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005dca:	f001 fc0b 	bl	80075e4 <vPortExitCritical>

	return xReturn;
 8005dce:	68fb      	ldr	r3, [r7, #12]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005de2:	2300      	movs	r3, #0
 8005de4:	60fb      	str	r3, [r7, #12]
 8005de6:	e014      	b.n	8005e12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005de8:	4a0f      	ldr	r2, [pc, #60]	; (8005e28 <vQueueAddToRegistry+0x50>)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10b      	bne.n	8005e0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005df4:	490c      	ldr	r1, [pc, #48]	; (8005e28 <vQueueAddToRegistry+0x50>)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	683a      	ldr	r2, [r7, #0]
 8005dfa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005dfe:	4a0a      	ldr	r2, [pc, #40]	; (8005e28 <vQueueAddToRegistry+0x50>)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	4413      	add	r3, r2
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e0a:	e006      	b.n	8005e1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	60fb      	str	r3, [r7, #12]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2b07      	cmp	r3, #7
 8005e16:	d9e7      	bls.n	8005de8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e18:	bf00      	nop
 8005e1a:	bf00      	nop
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	20004fe8 	.word	0x20004fe8

08005e2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e3c:	f001 fba2 	bl	8007584 <vPortEnterCritical>
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e46:	b25b      	sxtb	r3, r3
 8005e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4c:	d103      	bne.n	8005e56 <vQueueWaitForMessageRestricted+0x2a>
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e5c:	b25b      	sxtb	r3, r3
 8005e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e62:	d103      	bne.n	8005e6c <vQueueWaitForMessageRestricted+0x40>
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e6c:	f001 fbba 	bl	80075e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d106      	bne.n	8005e86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	3324      	adds	r3, #36	; 0x24
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	68b9      	ldr	r1, [r7, #8]
 8005e80:	4618      	mov	r0, r3
 8005e82:	f000 fc3b 	bl	80066fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005e86:	6978      	ldr	r0, [r7, #20]
 8005e88:	f7ff ff26 	bl	8005cd8 <prvUnlockQueue>
	}
 8005e8c:	bf00      	nop
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b08e      	sub	sp, #56	; 0x38
 8005e98:	af04      	add	r7, sp, #16
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
 8005ea0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10a      	bne.n	8005ebe <xTaskCreateStatic+0x2a>
	__asm volatile
 8005ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eac:	f383 8811 	msr	BASEPRI, r3
 8005eb0:	f3bf 8f6f 	isb	sy
 8005eb4:	f3bf 8f4f 	dsb	sy
 8005eb8:	623b      	str	r3, [r7, #32]
}
 8005eba:	bf00      	nop
 8005ebc:	e7fe      	b.n	8005ebc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10a      	bne.n	8005eda <xTaskCreateStatic+0x46>
	__asm volatile
 8005ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	61fb      	str	r3, [r7, #28]
}
 8005ed6:	bf00      	nop
 8005ed8:	e7fe      	b.n	8005ed8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005eda:	235c      	movs	r3, #92	; 0x5c
 8005edc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	2b5c      	cmp	r3, #92	; 0x5c
 8005ee2:	d00a      	beq.n	8005efa <xTaskCreateStatic+0x66>
	__asm volatile
 8005ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee8:	f383 8811 	msr	BASEPRI, r3
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	61bb      	str	r3, [r7, #24]
}
 8005ef6:	bf00      	nop
 8005ef8:	e7fe      	b.n	8005ef8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005efa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d01e      	beq.n	8005f40 <xTaskCreateStatic+0xac>
 8005f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d01b      	beq.n	8005f40 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f10:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f14:	2202      	movs	r2, #2
 8005f16:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	9303      	str	r3, [sp, #12]
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	9302      	str	r3, [sp, #8]
 8005f22:	f107 0314 	add.w	r3, r7, #20
 8005f26:	9301      	str	r3, [sp, #4]
 8005f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	68b9      	ldr	r1, [r7, #8]
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f000 f850 	bl	8005fd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f3a:	f000 f8dd 	bl	80060f8 <prvAddNewTaskToReadyList>
 8005f3e:	e001      	b.n	8005f44 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005f40:	2300      	movs	r3, #0
 8005f42:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f44:	697b      	ldr	r3, [r7, #20]
	}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3728      	adds	r7, #40	; 0x28
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b08c      	sub	sp, #48	; 0x30
 8005f52:	af04      	add	r7, sp, #16
 8005f54:	60f8      	str	r0, [r7, #12]
 8005f56:	60b9      	str	r1, [r7, #8]
 8005f58:	603b      	str	r3, [r7, #0]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f5e:	88fb      	ldrh	r3, [r7, #6]
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4618      	mov	r0, r3
 8005f64:	f001 fc30 	bl	80077c8 <pvPortMalloc>
 8005f68:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00e      	beq.n	8005f8e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f70:	205c      	movs	r0, #92	; 0x5c
 8005f72:	f001 fc29 	bl	80077c8 <pvPortMalloc>
 8005f76:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	631a      	str	r2, [r3, #48]	; 0x30
 8005f84:	e005      	b.n	8005f92 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f86:	6978      	ldr	r0, [r7, #20]
 8005f88:	f001 fcea 	bl	8007960 <vPortFree>
 8005f8c:	e001      	b.n	8005f92 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d017      	beq.n	8005fc8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005fa0:	88fa      	ldrh	r2, [r7, #6]
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	9303      	str	r3, [sp, #12]
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	9302      	str	r3, [sp, #8]
 8005faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fac:	9301      	str	r3, [sp, #4]
 8005fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	68b9      	ldr	r1, [r7, #8]
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f000 f80e 	bl	8005fd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fbc:	69f8      	ldr	r0, [r7, #28]
 8005fbe:	f000 f89b 	bl	80060f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	61bb      	str	r3, [r7, #24]
 8005fc6:	e002      	b.n	8005fce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fcc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005fce:	69bb      	ldr	r3, [r7, #24]
	}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3720      	adds	r7, #32
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b088      	sub	sp, #32
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
 8005fe4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	461a      	mov	r2, r3
 8005ff0:	21a5      	movs	r1, #165	; 0xa5
 8005ff2:	f001 fe0b 	bl	8007c0c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006000:	3b01      	subs	r3, #1
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	f023 0307 	bic.w	r3, r3, #7
 800600e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	f003 0307 	and.w	r3, r3, #7
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00a      	beq.n	8006030 <prvInitialiseNewTask+0x58>
	__asm volatile
 800601a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	617b      	str	r3, [r7, #20]
}
 800602c:	bf00      	nop
 800602e:	e7fe      	b.n	800602e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d01f      	beq.n	8006076 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006036:	2300      	movs	r3, #0
 8006038:	61fb      	str	r3, [r7, #28]
 800603a:	e012      	b.n	8006062 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	4413      	add	r3, r2
 8006042:	7819      	ldrb	r1, [r3, #0]
 8006044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	4413      	add	r3, r2
 800604a:	3334      	adds	r3, #52	; 0x34
 800604c:	460a      	mov	r2, r1
 800604e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	4413      	add	r3, r2
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d006      	beq.n	800606a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	3301      	adds	r3, #1
 8006060:	61fb      	str	r3, [r7, #28]
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	2b0f      	cmp	r3, #15
 8006066:	d9e9      	bls.n	800603c <prvInitialiseNewTask+0x64>
 8006068:	e000      	b.n	800606c <prvInitialiseNewTask+0x94>
			{
				break;
 800606a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800606c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606e:	2200      	movs	r2, #0
 8006070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006074:	e003      	b.n	800607e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800607e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006080:	2b37      	cmp	r3, #55	; 0x37
 8006082:	d901      	bls.n	8006088 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006084:	2337      	movs	r3, #55	; 0x37
 8006086:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800608c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800608e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006092:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006096:	2200      	movs	r2, #0
 8006098:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800609a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609c:	3304      	adds	r3, #4
 800609e:	4618      	mov	r0, r3
 80060a0:	f7ff f978 	bl	8005394 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a6:	3318      	adds	r3, #24
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7ff f973 	bl	8005394 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80060ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80060ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80060be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80060c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c6:	2200      	movs	r2, #0
 80060c8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80060ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	68f9      	ldr	r1, [r7, #12]
 80060d6:	69b8      	ldr	r0, [r7, #24]
 80060d8:	f001 f928 	bl	800732c <pxPortInitialiseStack>
 80060dc:	4602      	mov	r2, r0
 80060de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80060e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d002      	beq.n	80060ee <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060ee:	bf00      	nop
 80060f0:	3720      	adds	r7, #32
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
	...

080060f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006100:	f001 fa40 	bl	8007584 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006104:	4b2d      	ldr	r3, [pc, #180]	; (80061bc <prvAddNewTaskToReadyList+0xc4>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3301      	adds	r3, #1
 800610a:	4a2c      	ldr	r2, [pc, #176]	; (80061bc <prvAddNewTaskToReadyList+0xc4>)
 800610c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800610e:	4b2c      	ldr	r3, [pc, #176]	; (80061c0 <prvAddNewTaskToReadyList+0xc8>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d109      	bne.n	800612a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006116:	4a2a      	ldr	r2, [pc, #168]	; (80061c0 <prvAddNewTaskToReadyList+0xc8>)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800611c:	4b27      	ldr	r3, [pc, #156]	; (80061bc <prvAddNewTaskToReadyList+0xc4>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d110      	bne.n	8006146 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006124:	f000 fc16 	bl	8006954 <prvInitialiseTaskLists>
 8006128:	e00d      	b.n	8006146 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800612a:	4b26      	ldr	r3, [pc, #152]	; (80061c4 <prvAddNewTaskToReadyList+0xcc>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d109      	bne.n	8006146 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006132:	4b23      	ldr	r3, [pc, #140]	; (80061c0 <prvAddNewTaskToReadyList+0xc8>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613c:	429a      	cmp	r2, r3
 800613e:	d802      	bhi.n	8006146 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006140:	4a1f      	ldr	r2, [pc, #124]	; (80061c0 <prvAddNewTaskToReadyList+0xc8>)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006146:	4b20      	ldr	r3, [pc, #128]	; (80061c8 <prvAddNewTaskToReadyList+0xd0>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	3301      	adds	r3, #1
 800614c:	4a1e      	ldr	r2, [pc, #120]	; (80061c8 <prvAddNewTaskToReadyList+0xd0>)
 800614e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006150:	4b1d      	ldr	r3, [pc, #116]	; (80061c8 <prvAddNewTaskToReadyList+0xd0>)
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800615c:	4b1b      	ldr	r3, [pc, #108]	; (80061cc <prvAddNewTaskToReadyList+0xd4>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	429a      	cmp	r2, r3
 8006162:	d903      	bls.n	800616c <prvAddNewTaskToReadyList+0x74>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006168:	4a18      	ldr	r2, [pc, #96]	; (80061cc <prvAddNewTaskToReadyList+0xd4>)
 800616a:	6013      	str	r3, [r2, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006170:	4613      	mov	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	4a15      	ldr	r2, [pc, #84]	; (80061d0 <prvAddNewTaskToReadyList+0xd8>)
 800617a:	441a      	add	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	3304      	adds	r3, #4
 8006180:	4619      	mov	r1, r3
 8006182:	4610      	mov	r0, r2
 8006184:	f7ff f913 	bl	80053ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006188:	f001 fa2c 	bl	80075e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800618c:	4b0d      	ldr	r3, [pc, #52]	; (80061c4 <prvAddNewTaskToReadyList+0xcc>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00e      	beq.n	80061b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006194:	4b0a      	ldr	r3, [pc, #40]	; (80061c0 <prvAddNewTaskToReadyList+0xc8>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619e:	429a      	cmp	r2, r3
 80061a0:	d207      	bcs.n	80061b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80061a2:	4b0c      	ldr	r3, [pc, #48]	; (80061d4 <prvAddNewTaskToReadyList+0xdc>)
 80061a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061a8:	601a      	str	r2, [r3, #0]
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061b2:	bf00      	nop
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	20000eb0 	.word	0x20000eb0
 80061c0:	200009dc 	.word	0x200009dc
 80061c4:	20000ebc 	.word	0x20000ebc
 80061c8:	20000ecc 	.word	0x20000ecc
 80061cc:	20000eb8 	.word	0x20000eb8
 80061d0:	200009e0 	.word	0x200009e0
 80061d4:	e000ed04 	.word	0xe000ed04

080061d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80061e0:	2300      	movs	r3, #0
 80061e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d017      	beq.n	800621a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80061ea:	4b13      	ldr	r3, [pc, #76]	; (8006238 <vTaskDelay+0x60>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00a      	beq.n	8006208 <vTaskDelay+0x30>
	__asm volatile
 80061f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	60bb      	str	r3, [r7, #8]
}
 8006204:	bf00      	nop
 8006206:	e7fe      	b.n	8006206 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006208:	f000 f880 	bl	800630c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800620c:	2100      	movs	r1, #0
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 fcea 	bl	8006be8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006214:	f000 f888 	bl	8006328 <xTaskResumeAll>
 8006218:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d107      	bne.n	8006230 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006220:	4b06      	ldr	r3, [pc, #24]	; (800623c <vTaskDelay+0x64>)
 8006222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006226:	601a      	str	r2, [r3, #0]
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006230:	bf00      	nop
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	20000ed8 	.word	0x20000ed8
 800623c:	e000ed04 	.word	0xe000ed04

08006240 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b08a      	sub	sp, #40	; 0x28
 8006244:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006246:	2300      	movs	r3, #0
 8006248:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800624a:	2300      	movs	r3, #0
 800624c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800624e:	463a      	mov	r2, r7
 8006250:	1d39      	adds	r1, r7, #4
 8006252:	f107 0308 	add.w	r3, r7, #8
 8006256:	4618      	mov	r0, r3
 8006258:	f7ff f848 	bl	80052ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800625c:	6839      	ldr	r1, [r7, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	9202      	str	r2, [sp, #8]
 8006264:	9301      	str	r3, [sp, #4]
 8006266:	2300      	movs	r3, #0
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	2300      	movs	r3, #0
 800626c:	460a      	mov	r2, r1
 800626e:	4921      	ldr	r1, [pc, #132]	; (80062f4 <vTaskStartScheduler+0xb4>)
 8006270:	4821      	ldr	r0, [pc, #132]	; (80062f8 <vTaskStartScheduler+0xb8>)
 8006272:	f7ff fe0f 	bl	8005e94 <xTaskCreateStatic>
 8006276:	4603      	mov	r3, r0
 8006278:	4a20      	ldr	r2, [pc, #128]	; (80062fc <vTaskStartScheduler+0xbc>)
 800627a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800627c:	4b1f      	ldr	r3, [pc, #124]	; (80062fc <vTaskStartScheduler+0xbc>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d002      	beq.n	800628a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006284:	2301      	movs	r3, #1
 8006286:	617b      	str	r3, [r7, #20]
 8006288:	e001      	b.n	800628e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800628a:	2300      	movs	r3, #0
 800628c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d102      	bne.n	800629a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006294:	f000 fcfc 	bl	8006c90 <xTimerCreateTimerTask>
 8006298:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d116      	bne.n	80062ce <vTaskStartScheduler+0x8e>
	__asm volatile
 80062a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	613b      	str	r3, [r7, #16]
}
 80062b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80062b4:	4b12      	ldr	r3, [pc, #72]	; (8006300 <vTaskStartScheduler+0xc0>)
 80062b6:	f04f 32ff 	mov.w	r2, #4294967295
 80062ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80062bc:	4b11      	ldr	r3, [pc, #68]	; (8006304 <vTaskStartScheduler+0xc4>)
 80062be:	2201      	movs	r2, #1
 80062c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80062c2:	4b11      	ldr	r3, [pc, #68]	; (8006308 <vTaskStartScheduler+0xc8>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80062c8:	f001 f8ba 	bl	8007440 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80062cc:	e00e      	b.n	80062ec <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d4:	d10a      	bne.n	80062ec <vTaskStartScheduler+0xac>
	__asm volatile
 80062d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062da:	f383 8811 	msr	BASEPRI, r3
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f3bf 8f4f 	dsb	sy
 80062e6:	60fb      	str	r3, [r7, #12]
}
 80062e8:	bf00      	nop
 80062ea:	e7fe      	b.n	80062ea <vTaskStartScheduler+0xaa>
}
 80062ec:	bf00      	nop
 80062ee:	3718      	adds	r7, #24
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	0800ce34 	.word	0x0800ce34
 80062f8:	08006925 	.word	0x08006925
 80062fc:	20000ed4 	.word	0x20000ed4
 8006300:	20000ed0 	.word	0x20000ed0
 8006304:	20000ebc 	.word	0x20000ebc
 8006308:	20000eb4 	.word	0x20000eb4

0800630c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800630c:	b480      	push	{r7}
 800630e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006310:	4b04      	ldr	r3, [pc, #16]	; (8006324 <vTaskSuspendAll+0x18>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	3301      	adds	r3, #1
 8006316:	4a03      	ldr	r2, [pc, #12]	; (8006324 <vTaskSuspendAll+0x18>)
 8006318:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800631a:	bf00      	nop
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr
 8006324:	20000ed8 	.word	0x20000ed8

08006328 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800632e:	2300      	movs	r3, #0
 8006330:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006332:	2300      	movs	r3, #0
 8006334:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006336:	4b42      	ldr	r3, [pc, #264]	; (8006440 <xTaskResumeAll+0x118>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d10a      	bne.n	8006354 <xTaskResumeAll+0x2c>
	__asm volatile
 800633e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	603b      	str	r3, [r7, #0]
}
 8006350:	bf00      	nop
 8006352:	e7fe      	b.n	8006352 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006354:	f001 f916 	bl	8007584 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006358:	4b39      	ldr	r3, [pc, #228]	; (8006440 <xTaskResumeAll+0x118>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3b01      	subs	r3, #1
 800635e:	4a38      	ldr	r2, [pc, #224]	; (8006440 <xTaskResumeAll+0x118>)
 8006360:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006362:	4b37      	ldr	r3, [pc, #220]	; (8006440 <xTaskResumeAll+0x118>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d162      	bne.n	8006430 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800636a:	4b36      	ldr	r3, [pc, #216]	; (8006444 <xTaskResumeAll+0x11c>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d05e      	beq.n	8006430 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006372:	e02f      	b.n	80063d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006374:	4b34      	ldr	r3, [pc, #208]	; (8006448 <xTaskResumeAll+0x120>)
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	3318      	adds	r3, #24
 8006380:	4618      	mov	r0, r3
 8006382:	f7ff f871 	bl	8005468 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	3304      	adds	r3, #4
 800638a:	4618      	mov	r0, r3
 800638c:	f7ff f86c 	bl	8005468 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006394:	4b2d      	ldr	r3, [pc, #180]	; (800644c <xTaskResumeAll+0x124>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	429a      	cmp	r2, r3
 800639a:	d903      	bls.n	80063a4 <xTaskResumeAll+0x7c>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a0:	4a2a      	ldr	r2, [pc, #168]	; (800644c <xTaskResumeAll+0x124>)
 80063a2:	6013      	str	r3, [r2, #0]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a8:	4613      	mov	r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4a27      	ldr	r2, [pc, #156]	; (8006450 <xTaskResumeAll+0x128>)
 80063b2:	441a      	add	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	3304      	adds	r3, #4
 80063b8:	4619      	mov	r1, r3
 80063ba:	4610      	mov	r0, r2
 80063bc:	f7fe fff7 	bl	80053ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c4:	4b23      	ldr	r3, [pc, #140]	; (8006454 <xTaskResumeAll+0x12c>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d302      	bcc.n	80063d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80063ce:	4b22      	ldr	r3, [pc, #136]	; (8006458 <xTaskResumeAll+0x130>)
 80063d0:	2201      	movs	r2, #1
 80063d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063d4:	4b1c      	ldr	r3, [pc, #112]	; (8006448 <xTaskResumeAll+0x120>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1cb      	bne.n	8006374 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d001      	beq.n	80063e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80063e2:	f000 fb55 	bl	8006a90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80063e6:	4b1d      	ldr	r3, [pc, #116]	; (800645c <xTaskResumeAll+0x134>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d010      	beq.n	8006414 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80063f2:	f000 f847 	bl	8006484 <xTaskIncrementTick>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d002      	beq.n	8006402 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80063fc:	4b16      	ldr	r3, [pc, #88]	; (8006458 <xTaskResumeAll+0x130>)
 80063fe:	2201      	movs	r2, #1
 8006400:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	3b01      	subs	r3, #1
 8006406:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1f1      	bne.n	80063f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800640e:	4b13      	ldr	r3, [pc, #76]	; (800645c <xTaskResumeAll+0x134>)
 8006410:	2200      	movs	r2, #0
 8006412:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006414:	4b10      	ldr	r3, [pc, #64]	; (8006458 <xTaskResumeAll+0x130>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d009      	beq.n	8006430 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800641c:	2301      	movs	r3, #1
 800641e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006420:	4b0f      	ldr	r3, [pc, #60]	; (8006460 <xTaskResumeAll+0x138>)
 8006422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006426:	601a      	str	r2, [r3, #0]
 8006428:	f3bf 8f4f 	dsb	sy
 800642c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006430:	f001 f8d8 	bl	80075e4 <vPortExitCritical>

	return xAlreadyYielded;
 8006434:	68bb      	ldr	r3, [r7, #8]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	20000ed8 	.word	0x20000ed8
 8006444:	20000eb0 	.word	0x20000eb0
 8006448:	20000e70 	.word	0x20000e70
 800644c:	20000eb8 	.word	0x20000eb8
 8006450:	200009e0 	.word	0x200009e0
 8006454:	200009dc 	.word	0x200009dc
 8006458:	20000ec4 	.word	0x20000ec4
 800645c:	20000ec0 	.word	0x20000ec0
 8006460:	e000ed04 	.word	0xe000ed04

08006464 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800646a:	4b05      	ldr	r3, [pc, #20]	; (8006480 <xTaskGetTickCount+0x1c>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006470:	687b      	ldr	r3, [r7, #4]
}
 8006472:	4618      	mov	r0, r3
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	20000eb4 	.word	0x20000eb4

08006484 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800648a:	2300      	movs	r3, #0
 800648c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800648e:	4b4f      	ldr	r3, [pc, #316]	; (80065cc <xTaskIncrementTick+0x148>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	f040 808f 	bne.w	80065b6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006498:	4b4d      	ldr	r3, [pc, #308]	; (80065d0 <xTaskIncrementTick+0x14c>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	3301      	adds	r3, #1
 800649e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80064a0:	4a4b      	ldr	r2, [pc, #300]	; (80065d0 <xTaskIncrementTick+0x14c>)
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d120      	bne.n	80064ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80064ac:	4b49      	ldr	r3, [pc, #292]	; (80065d4 <xTaskIncrementTick+0x150>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00a      	beq.n	80064cc <xTaskIncrementTick+0x48>
	__asm volatile
 80064b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ba:	f383 8811 	msr	BASEPRI, r3
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	603b      	str	r3, [r7, #0]
}
 80064c8:	bf00      	nop
 80064ca:	e7fe      	b.n	80064ca <xTaskIncrementTick+0x46>
 80064cc:	4b41      	ldr	r3, [pc, #260]	; (80065d4 <xTaskIncrementTick+0x150>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	60fb      	str	r3, [r7, #12]
 80064d2:	4b41      	ldr	r3, [pc, #260]	; (80065d8 <xTaskIncrementTick+0x154>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a3f      	ldr	r2, [pc, #252]	; (80065d4 <xTaskIncrementTick+0x150>)
 80064d8:	6013      	str	r3, [r2, #0]
 80064da:	4a3f      	ldr	r2, [pc, #252]	; (80065d8 <xTaskIncrementTick+0x154>)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6013      	str	r3, [r2, #0]
 80064e0:	4b3e      	ldr	r3, [pc, #248]	; (80065dc <xTaskIncrementTick+0x158>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	3301      	adds	r3, #1
 80064e6:	4a3d      	ldr	r2, [pc, #244]	; (80065dc <xTaskIncrementTick+0x158>)
 80064e8:	6013      	str	r3, [r2, #0]
 80064ea:	f000 fad1 	bl	8006a90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80064ee:	4b3c      	ldr	r3, [pc, #240]	; (80065e0 <xTaskIncrementTick+0x15c>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d349      	bcc.n	800658c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064f8:	4b36      	ldr	r3, [pc, #216]	; (80065d4 <xTaskIncrementTick+0x150>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d104      	bne.n	800650c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006502:	4b37      	ldr	r3, [pc, #220]	; (80065e0 <xTaskIncrementTick+0x15c>)
 8006504:	f04f 32ff 	mov.w	r2, #4294967295
 8006508:	601a      	str	r2, [r3, #0]
					break;
 800650a:	e03f      	b.n	800658c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800650c:	4b31      	ldr	r3, [pc, #196]	; (80065d4 <xTaskIncrementTick+0x150>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	429a      	cmp	r2, r3
 8006522:	d203      	bcs.n	800652c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006524:	4a2e      	ldr	r2, [pc, #184]	; (80065e0 <xTaskIncrementTick+0x15c>)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800652a:	e02f      	b.n	800658c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	3304      	adds	r3, #4
 8006530:	4618      	mov	r0, r3
 8006532:	f7fe ff99 	bl	8005468 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800653a:	2b00      	cmp	r3, #0
 800653c:	d004      	beq.n	8006548 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	3318      	adds	r3, #24
 8006542:	4618      	mov	r0, r3
 8006544:	f7fe ff90 	bl	8005468 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800654c:	4b25      	ldr	r3, [pc, #148]	; (80065e4 <xTaskIncrementTick+0x160>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	429a      	cmp	r2, r3
 8006552:	d903      	bls.n	800655c <xTaskIncrementTick+0xd8>
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006558:	4a22      	ldr	r2, [pc, #136]	; (80065e4 <xTaskIncrementTick+0x160>)
 800655a:	6013      	str	r3, [r2, #0]
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006560:	4613      	mov	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4a1f      	ldr	r2, [pc, #124]	; (80065e8 <xTaskIncrementTick+0x164>)
 800656a:	441a      	add	r2, r3
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	3304      	adds	r3, #4
 8006570:	4619      	mov	r1, r3
 8006572:	4610      	mov	r0, r2
 8006574:	f7fe ff1b 	bl	80053ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800657c:	4b1b      	ldr	r3, [pc, #108]	; (80065ec <xTaskIncrementTick+0x168>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006582:	429a      	cmp	r2, r3
 8006584:	d3b8      	bcc.n	80064f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006586:	2301      	movs	r3, #1
 8006588:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800658a:	e7b5      	b.n	80064f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800658c:	4b17      	ldr	r3, [pc, #92]	; (80065ec <xTaskIncrementTick+0x168>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006592:	4915      	ldr	r1, [pc, #84]	; (80065e8 <xTaskIncrementTick+0x164>)
 8006594:	4613      	mov	r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	4413      	add	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	440b      	add	r3, r1
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d901      	bls.n	80065a8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80065a4:	2301      	movs	r3, #1
 80065a6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80065a8:	4b11      	ldr	r3, [pc, #68]	; (80065f0 <xTaskIncrementTick+0x16c>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d007      	beq.n	80065c0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80065b0:	2301      	movs	r3, #1
 80065b2:	617b      	str	r3, [r7, #20]
 80065b4:	e004      	b.n	80065c0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80065b6:	4b0f      	ldr	r3, [pc, #60]	; (80065f4 <xTaskIncrementTick+0x170>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	3301      	adds	r3, #1
 80065bc:	4a0d      	ldr	r2, [pc, #52]	; (80065f4 <xTaskIncrementTick+0x170>)
 80065be:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80065c0:	697b      	ldr	r3, [r7, #20]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3718      	adds	r7, #24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	20000ed8 	.word	0x20000ed8
 80065d0:	20000eb4 	.word	0x20000eb4
 80065d4:	20000e68 	.word	0x20000e68
 80065d8:	20000e6c 	.word	0x20000e6c
 80065dc:	20000ec8 	.word	0x20000ec8
 80065e0:	20000ed0 	.word	0x20000ed0
 80065e4:	20000eb8 	.word	0x20000eb8
 80065e8:	200009e0 	.word	0x200009e0
 80065ec:	200009dc 	.word	0x200009dc
 80065f0:	20000ec4 	.word	0x20000ec4
 80065f4:	20000ec0 	.word	0x20000ec0

080065f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80065fe:	4b28      	ldr	r3, [pc, #160]	; (80066a0 <vTaskSwitchContext+0xa8>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d003      	beq.n	800660e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006606:	4b27      	ldr	r3, [pc, #156]	; (80066a4 <vTaskSwitchContext+0xac>)
 8006608:	2201      	movs	r2, #1
 800660a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800660c:	e041      	b.n	8006692 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800660e:	4b25      	ldr	r3, [pc, #148]	; (80066a4 <vTaskSwitchContext+0xac>)
 8006610:	2200      	movs	r2, #0
 8006612:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006614:	4b24      	ldr	r3, [pc, #144]	; (80066a8 <vTaskSwitchContext+0xb0>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	60fb      	str	r3, [r7, #12]
 800661a:	e010      	b.n	800663e <vTaskSwitchContext+0x46>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10a      	bne.n	8006638 <vTaskSwitchContext+0x40>
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	607b      	str	r3, [r7, #4]
}
 8006634:	bf00      	nop
 8006636:	e7fe      	b.n	8006636 <vTaskSwitchContext+0x3e>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	3b01      	subs	r3, #1
 800663c:	60fb      	str	r3, [r7, #12]
 800663e:	491b      	ldr	r1, [pc, #108]	; (80066ac <vTaskSwitchContext+0xb4>)
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	4613      	mov	r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	4413      	add	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	440b      	add	r3, r1
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d0e4      	beq.n	800661c <vTaskSwitchContext+0x24>
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	4613      	mov	r3, r2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	4a13      	ldr	r2, [pc, #76]	; (80066ac <vTaskSwitchContext+0xb4>)
 800665e:	4413      	add	r3, r2
 8006660:	60bb      	str	r3, [r7, #8]
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	685a      	ldr	r2, [r3, #4]
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	605a      	str	r2, [r3, #4]
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	685a      	ldr	r2, [r3, #4]
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	3308      	adds	r3, #8
 8006674:	429a      	cmp	r2, r3
 8006676:	d104      	bne.n	8006682 <vTaskSwitchContext+0x8a>
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	605a      	str	r2, [r3, #4]
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	4a09      	ldr	r2, [pc, #36]	; (80066b0 <vTaskSwitchContext+0xb8>)
 800668a:	6013      	str	r3, [r2, #0]
 800668c:	4a06      	ldr	r2, [pc, #24]	; (80066a8 <vTaskSwitchContext+0xb0>)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6013      	str	r3, [r2, #0]
}
 8006692:	bf00      	nop
 8006694:	3714      	adds	r7, #20
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	20000ed8 	.word	0x20000ed8
 80066a4:	20000ec4 	.word	0x20000ec4
 80066a8:	20000eb8 	.word	0x20000eb8
 80066ac:	200009e0 	.word	0x200009e0
 80066b0:	200009dc 	.word	0x200009dc

080066b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10a      	bne.n	80066da <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80066c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c8:	f383 8811 	msr	BASEPRI, r3
 80066cc:	f3bf 8f6f 	isb	sy
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	60fb      	str	r3, [r7, #12]
}
 80066d6:	bf00      	nop
 80066d8:	e7fe      	b.n	80066d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066da:	4b07      	ldr	r3, [pc, #28]	; (80066f8 <vTaskPlaceOnEventList+0x44>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	3318      	adds	r3, #24
 80066e0:	4619      	mov	r1, r3
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f7fe fe87 	bl	80053f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80066e8:	2101      	movs	r1, #1
 80066ea:	6838      	ldr	r0, [r7, #0]
 80066ec:	f000 fa7c 	bl	8006be8 <prvAddCurrentTaskToDelayedList>
}
 80066f0:	bf00      	nop
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	200009dc 	.word	0x200009dc

080066fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b086      	sub	sp, #24
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10a      	bne.n	8006724 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800670e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006712:	f383 8811 	msr	BASEPRI, r3
 8006716:	f3bf 8f6f 	isb	sy
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	617b      	str	r3, [r7, #20]
}
 8006720:	bf00      	nop
 8006722:	e7fe      	b.n	8006722 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006724:	4b0a      	ldr	r3, [pc, #40]	; (8006750 <vTaskPlaceOnEventListRestricted+0x54>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	3318      	adds	r3, #24
 800672a:	4619      	mov	r1, r3
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f7fe fe3e 	bl	80053ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d002      	beq.n	800673e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006738:	f04f 33ff 	mov.w	r3, #4294967295
 800673c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800673e:	6879      	ldr	r1, [r7, #4]
 8006740:	68b8      	ldr	r0, [r7, #8]
 8006742:	f000 fa51 	bl	8006be8 <prvAddCurrentTaskToDelayedList>
	}
 8006746:	bf00      	nop
 8006748:	3718      	adds	r7, #24
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	200009dc 	.word	0x200009dc

08006754 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b086      	sub	sp, #24
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d10a      	bne.n	8006780 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800676a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676e:	f383 8811 	msr	BASEPRI, r3
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	60fb      	str	r3, [r7, #12]
}
 800677c:	bf00      	nop
 800677e:	e7fe      	b.n	800677e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	3318      	adds	r3, #24
 8006784:	4618      	mov	r0, r3
 8006786:	f7fe fe6f 	bl	8005468 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800678a:	4b1e      	ldr	r3, [pc, #120]	; (8006804 <xTaskRemoveFromEventList+0xb0>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d11d      	bne.n	80067ce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	3304      	adds	r3, #4
 8006796:	4618      	mov	r0, r3
 8006798:	f7fe fe66 	bl	8005468 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a0:	4b19      	ldr	r3, [pc, #100]	; (8006808 <xTaskRemoveFromEventList+0xb4>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d903      	bls.n	80067b0 <xTaskRemoveFromEventList+0x5c>
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ac:	4a16      	ldr	r2, [pc, #88]	; (8006808 <xTaskRemoveFromEventList+0xb4>)
 80067ae:	6013      	str	r3, [r2, #0]
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b4:	4613      	mov	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4a13      	ldr	r2, [pc, #76]	; (800680c <xTaskRemoveFromEventList+0xb8>)
 80067be:	441a      	add	r2, r3
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	3304      	adds	r3, #4
 80067c4:	4619      	mov	r1, r3
 80067c6:	4610      	mov	r0, r2
 80067c8:	f7fe fdf1 	bl	80053ae <vListInsertEnd>
 80067cc:	e005      	b.n	80067da <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	3318      	adds	r3, #24
 80067d2:	4619      	mov	r1, r3
 80067d4:	480e      	ldr	r0, [pc, #56]	; (8006810 <xTaskRemoveFromEventList+0xbc>)
 80067d6:	f7fe fdea 	bl	80053ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067de:	4b0d      	ldr	r3, [pc, #52]	; (8006814 <xTaskRemoveFromEventList+0xc0>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d905      	bls.n	80067f4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80067e8:	2301      	movs	r3, #1
 80067ea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80067ec:	4b0a      	ldr	r3, [pc, #40]	; (8006818 <xTaskRemoveFromEventList+0xc4>)
 80067ee:	2201      	movs	r2, #1
 80067f0:	601a      	str	r2, [r3, #0]
 80067f2:	e001      	b.n	80067f8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80067f4:	2300      	movs	r3, #0
 80067f6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80067f8:	697b      	ldr	r3, [r7, #20]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	20000ed8 	.word	0x20000ed8
 8006808:	20000eb8 	.word	0x20000eb8
 800680c:	200009e0 	.word	0x200009e0
 8006810:	20000e70 	.word	0x20000e70
 8006814:	200009dc 	.word	0x200009dc
 8006818:	20000ec4 	.word	0x20000ec4

0800681c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006824:	4b06      	ldr	r3, [pc, #24]	; (8006840 <vTaskInternalSetTimeOutState+0x24>)
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800682c:	4b05      	ldr	r3, [pc, #20]	; (8006844 <vTaskInternalSetTimeOutState+0x28>)
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	605a      	str	r2, [r3, #4]
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr
 8006840:	20000ec8 	.word	0x20000ec8
 8006844:	20000eb4 	.word	0x20000eb4

08006848 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b088      	sub	sp, #32
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10a      	bne.n	800686e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685c:	f383 8811 	msr	BASEPRI, r3
 8006860:	f3bf 8f6f 	isb	sy
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	613b      	str	r3, [r7, #16]
}
 800686a:	bf00      	nop
 800686c:	e7fe      	b.n	800686c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10a      	bne.n	800688a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006878:	f383 8811 	msr	BASEPRI, r3
 800687c:	f3bf 8f6f 	isb	sy
 8006880:	f3bf 8f4f 	dsb	sy
 8006884:	60fb      	str	r3, [r7, #12]
}
 8006886:	bf00      	nop
 8006888:	e7fe      	b.n	8006888 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800688a:	f000 fe7b 	bl	8007584 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800688e:	4b1d      	ldr	r3, [pc, #116]	; (8006904 <xTaskCheckForTimeOut+0xbc>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	69ba      	ldr	r2, [r7, #24]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a6:	d102      	bne.n	80068ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80068a8:	2300      	movs	r3, #0
 80068aa:	61fb      	str	r3, [r7, #28]
 80068ac:	e023      	b.n	80068f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	4b15      	ldr	r3, [pc, #84]	; (8006908 <xTaskCheckForTimeOut+0xc0>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d007      	beq.n	80068ca <xTaskCheckForTimeOut+0x82>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	69ba      	ldr	r2, [r7, #24]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d302      	bcc.n	80068ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80068c4:	2301      	movs	r3, #1
 80068c6:	61fb      	str	r3, [r7, #28]
 80068c8:	e015      	b.n	80068f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d20b      	bcs.n	80068ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	1ad2      	subs	r2, r2, r3
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f7ff ff9b 	bl	800681c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80068e6:	2300      	movs	r3, #0
 80068e8:	61fb      	str	r3, [r7, #28]
 80068ea:	e004      	b.n	80068f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	2200      	movs	r2, #0
 80068f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80068f2:	2301      	movs	r3, #1
 80068f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80068f6:	f000 fe75 	bl	80075e4 <vPortExitCritical>

	return xReturn;
 80068fa:	69fb      	ldr	r3, [r7, #28]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3720      	adds	r7, #32
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	20000eb4 	.word	0x20000eb4
 8006908:	20000ec8 	.word	0x20000ec8

0800690c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800690c:	b480      	push	{r7}
 800690e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006910:	4b03      	ldr	r3, [pc, #12]	; (8006920 <vTaskMissedYield+0x14>)
 8006912:	2201      	movs	r2, #1
 8006914:	601a      	str	r2, [r3, #0]
}
 8006916:	bf00      	nop
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	20000ec4 	.word	0x20000ec4

08006924 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800692c:	f000 f852 	bl	80069d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006930:	4b06      	ldr	r3, [pc, #24]	; (800694c <prvIdleTask+0x28>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d9f9      	bls.n	800692c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006938:	4b05      	ldr	r3, [pc, #20]	; (8006950 <prvIdleTask+0x2c>)
 800693a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800693e:	601a      	str	r2, [r3, #0]
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006948:	e7f0      	b.n	800692c <prvIdleTask+0x8>
 800694a:	bf00      	nop
 800694c:	200009e0 	.word	0x200009e0
 8006950:	e000ed04 	.word	0xe000ed04

08006954 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800695a:	2300      	movs	r3, #0
 800695c:	607b      	str	r3, [r7, #4]
 800695e:	e00c      	b.n	800697a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	4613      	mov	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4a12      	ldr	r2, [pc, #72]	; (80069b4 <prvInitialiseTaskLists+0x60>)
 800696c:	4413      	add	r3, r2
 800696e:	4618      	mov	r0, r3
 8006970:	f7fe fcf0 	bl	8005354 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	3301      	adds	r3, #1
 8006978:	607b      	str	r3, [r7, #4]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2b37      	cmp	r3, #55	; 0x37
 800697e:	d9ef      	bls.n	8006960 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006980:	480d      	ldr	r0, [pc, #52]	; (80069b8 <prvInitialiseTaskLists+0x64>)
 8006982:	f7fe fce7 	bl	8005354 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006986:	480d      	ldr	r0, [pc, #52]	; (80069bc <prvInitialiseTaskLists+0x68>)
 8006988:	f7fe fce4 	bl	8005354 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800698c:	480c      	ldr	r0, [pc, #48]	; (80069c0 <prvInitialiseTaskLists+0x6c>)
 800698e:	f7fe fce1 	bl	8005354 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006992:	480c      	ldr	r0, [pc, #48]	; (80069c4 <prvInitialiseTaskLists+0x70>)
 8006994:	f7fe fcde 	bl	8005354 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006998:	480b      	ldr	r0, [pc, #44]	; (80069c8 <prvInitialiseTaskLists+0x74>)
 800699a:	f7fe fcdb 	bl	8005354 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800699e:	4b0b      	ldr	r3, [pc, #44]	; (80069cc <prvInitialiseTaskLists+0x78>)
 80069a0:	4a05      	ldr	r2, [pc, #20]	; (80069b8 <prvInitialiseTaskLists+0x64>)
 80069a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80069a4:	4b0a      	ldr	r3, [pc, #40]	; (80069d0 <prvInitialiseTaskLists+0x7c>)
 80069a6:	4a05      	ldr	r2, [pc, #20]	; (80069bc <prvInitialiseTaskLists+0x68>)
 80069a8:	601a      	str	r2, [r3, #0]
}
 80069aa:	bf00      	nop
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	200009e0 	.word	0x200009e0
 80069b8:	20000e40 	.word	0x20000e40
 80069bc:	20000e54 	.word	0x20000e54
 80069c0:	20000e70 	.word	0x20000e70
 80069c4:	20000e84 	.word	0x20000e84
 80069c8:	20000e9c 	.word	0x20000e9c
 80069cc:	20000e68 	.word	0x20000e68
 80069d0:	20000e6c 	.word	0x20000e6c

080069d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069da:	e019      	b.n	8006a10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80069dc:	f000 fdd2 	bl	8007584 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069e0:	4b10      	ldr	r3, [pc, #64]	; (8006a24 <prvCheckTasksWaitingTermination+0x50>)
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	3304      	adds	r3, #4
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7fe fd3b 	bl	8005468 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80069f2:	4b0d      	ldr	r3, [pc, #52]	; (8006a28 <prvCheckTasksWaitingTermination+0x54>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3b01      	subs	r3, #1
 80069f8:	4a0b      	ldr	r2, [pc, #44]	; (8006a28 <prvCheckTasksWaitingTermination+0x54>)
 80069fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80069fc:	4b0b      	ldr	r3, [pc, #44]	; (8006a2c <prvCheckTasksWaitingTermination+0x58>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	3b01      	subs	r3, #1
 8006a02:	4a0a      	ldr	r2, [pc, #40]	; (8006a2c <prvCheckTasksWaitingTermination+0x58>)
 8006a04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a06:	f000 fded 	bl	80075e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f810 	bl	8006a30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a10:	4b06      	ldr	r3, [pc, #24]	; (8006a2c <prvCheckTasksWaitingTermination+0x58>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1e1      	bne.n	80069dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a18:	bf00      	nop
 8006a1a:	bf00      	nop
 8006a1c:	3708      	adds	r7, #8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	20000e84 	.word	0x20000e84
 8006a28:	20000eb0 	.word	0x20000eb0
 8006a2c:	20000e98 	.word	0x20000e98

08006a30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d108      	bne.n	8006a54 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 ff8a 	bl	8007960 <vPortFree>
				vPortFree( pxTCB );
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 ff87 	bl	8007960 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a52:	e018      	b.n	8006a86 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d103      	bne.n	8006a66 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 ff7e 	bl	8007960 <vPortFree>
	}
 8006a64:	e00f      	b.n	8006a86 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d00a      	beq.n	8006a86 <prvDeleteTCB+0x56>
	__asm volatile
 8006a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a74:	f383 8811 	msr	BASEPRI, r3
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	60fb      	str	r3, [r7, #12]
}
 8006a82:	bf00      	nop
 8006a84:	e7fe      	b.n	8006a84 <prvDeleteTCB+0x54>
	}
 8006a86:	bf00      	nop
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
	...

08006a90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a96:	4b0c      	ldr	r3, [pc, #48]	; (8006ac8 <prvResetNextTaskUnblockTime+0x38>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d104      	bne.n	8006aaa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006aa0:	4b0a      	ldr	r3, [pc, #40]	; (8006acc <prvResetNextTaskUnblockTime+0x3c>)
 8006aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8006aa6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006aa8:	e008      	b.n	8006abc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aaa:	4b07      	ldr	r3, [pc, #28]	; (8006ac8 <prvResetNextTaskUnblockTime+0x38>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	4a04      	ldr	r2, [pc, #16]	; (8006acc <prvResetNextTaskUnblockTime+0x3c>)
 8006aba:	6013      	str	r3, [r2, #0]
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	20000e68 	.word	0x20000e68
 8006acc:	20000ed0 	.word	0x20000ed0

08006ad0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006ad6:	4b0b      	ldr	r3, [pc, #44]	; (8006b04 <xTaskGetSchedulerState+0x34>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d102      	bne.n	8006ae4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	607b      	str	r3, [r7, #4]
 8006ae2:	e008      	b.n	8006af6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ae4:	4b08      	ldr	r3, [pc, #32]	; (8006b08 <xTaskGetSchedulerState+0x38>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d102      	bne.n	8006af2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006aec:	2302      	movs	r3, #2
 8006aee:	607b      	str	r3, [r7, #4]
 8006af0:	e001      	b.n	8006af6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006af2:	2300      	movs	r3, #0
 8006af4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006af6:	687b      	ldr	r3, [r7, #4]
	}
 8006af8:	4618      	mov	r0, r3
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr
 8006b04:	20000ebc 	.word	0x20000ebc
 8006b08:	20000ed8 	.word	0x20000ed8

08006b0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d056      	beq.n	8006bd0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006b22:	4b2e      	ldr	r3, [pc, #184]	; (8006bdc <xTaskPriorityDisinherit+0xd0>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d00a      	beq.n	8006b42 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b30:	f383 8811 	msr	BASEPRI, r3
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	60fb      	str	r3, [r7, #12]
}
 8006b3e:	bf00      	nop
 8006b40:	e7fe      	b.n	8006b40 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10a      	bne.n	8006b60 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4e:	f383 8811 	msr	BASEPRI, r3
 8006b52:	f3bf 8f6f 	isb	sy
 8006b56:	f3bf 8f4f 	dsb	sy
 8006b5a:	60bb      	str	r3, [r7, #8]
}
 8006b5c:	bf00      	nop
 8006b5e:	e7fe      	b.n	8006b5e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b64:	1e5a      	subs	r2, r3, #1
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d02c      	beq.n	8006bd0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d128      	bne.n	8006bd0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	3304      	adds	r3, #4
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7fe fc70 	bl	8005468 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b94:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba0:	4b0f      	ldr	r3, [pc, #60]	; (8006be0 <xTaskPriorityDisinherit+0xd4>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d903      	bls.n	8006bb0 <xTaskPriorityDisinherit+0xa4>
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bac:	4a0c      	ldr	r2, [pc, #48]	; (8006be0 <xTaskPriorityDisinherit+0xd4>)
 8006bae:	6013      	str	r3, [r2, #0]
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4413      	add	r3, r2
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4a09      	ldr	r2, [pc, #36]	; (8006be4 <xTaskPriorityDisinherit+0xd8>)
 8006bbe:	441a      	add	r2, r3
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	3304      	adds	r3, #4
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	4610      	mov	r0, r2
 8006bc8:	f7fe fbf1 	bl	80053ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006bd0:	697b      	ldr	r3, [r7, #20]
	}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3718      	adds	r7, #24
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	200009dc 	.word	0x200009dc
 8006be0:	20000eb8 	.word	0x20000eb8
 8006be4:	200009e0 	.word	0x200009e0

08006be8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006bf2:	4b21      	ldr	r3, [pc, #132]	; (8006c78 <prvAddCurrentTaskToDelayedList+0x90>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bf8:	4b20      	ldr	r3, [pc, #128]	; (8006c7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3304      	adds	r3, #4
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7fe fc32 	bl	8005468 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c0a:	d10a      	bne.n	8006c22 <prvAddCurrentTaskToDelayedList+0x3a>
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d007      	beq.n	8006c22 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c12:	4b1a      	ldr	r3, [pc, #104]	; (8006c7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	3304      	adds	r3, #4
 8006c18:	4619      	mov	r1, r3
 8006c1a:	4819      	ldr	r0, [pc, #100]	; (8006c80 <prvAddCurrentTaskToDelayedList+0x98>)
 8006c1c:	f7fe fbc7 	bl	80053ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c20:	e026      	b.n	8006c70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4413      	add	r3, r2
 8006c28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c2a:	4b14      	ldr	r3, [pc, #80]	; (8006c7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d209      	bcs.n	8006c4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c3a:	4b12      	ldr	r3, [pc, #72]	; (8006c84 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	4b0f      	ldr	r3, [pc, #60]	; (8006c7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	3304      	adds	r3, #4
 8006c44:	4619      	mov	r1, r3
 8006c46:	4610      	mov	r0, r2
 8006c48:	f7fe fbd5 	bl	80053f6 <vListInsert>
}
 8006c4c:	e010      	b.n	8006c70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c4e:	4b0e      	ldr	r3, [pc, #56]	; (8006c88 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	4b0a      	ldr	r3, [pc, #40]	; (8006c7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	3304      	adds	r3, #4
 8006c58:	4619      	mov	r1, r3
 8006c5a:	4610      	mov	r0, r2
 8006c5c:	f7fe fbcb 	bl	80053f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c60:	4b0a      	ldr	r3, [pc, #40]	; (8006c8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d202      	bcs.n	8006c70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006c6a:	4a08      	ldr	r2, [pc, #32]	; (8006c8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	6013      	str	r3, [r2, #0]
}
 8006c70:	bf00      	nop
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	20000eb4 	.word	0x20000eb4
 8006c7c:	200009dc 	.word	0x200009dc
 8006c80:	20000e9c 	.word	0x20000e9c
 8006c84:	20000e6c 	.word	0x20000e6c
 8006c88:	20000e68 	.word	0x20000e68
 8006c8c:	20000ed0 	.word	0x20000ed0

08006c90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b08a      	sub	sp, #40	; 0x28
 8006c94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006c96:	2300      	movs	r3, #0
 8006c98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006c9a:	f000 fb07 	bl	80072ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006c9e:	4b1c      	ldr	r3, [pc, #112]	; (8006d10 <xTimerCreateTimerTask+0x80>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d021      	beq.n	8006cea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006caa:	2300      	movs	r3, #0
 8006cac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006cae:	1d3a      	adds	r2, r7, #4
 8006cb0:	f107 0108 	add.w	r1, r7, #8
 8006cb4:	f107 030c 	add.w	r3, r7, #12
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7fe fb31 	bl	8005320 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006cbe:	6879      	ldr	r1, [r7, #4]
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	9202      	str	r2, [sp, #8]
 8006cc6:	9301      	str	r3, [sp, #4]
 8006cc8:	2302      	movs	r3, #2
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	2300      	movs	r3, #0
 8006cce:	460a      	mov	r2, r1
 8006cd0:	4910      	ldr	r1, [pc, #64]	; (8006d14 <xTimerCreateTimerTask+0x84>)
 8006cd2:	4811      	ldr	r0, [pc, #68]	; (8006d18 <xTimerCreateTimerTask+0x88>)
 8006cd4:	f7ff f8de 	bl	8005e94 <xTaskCreateStatic>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	4a10      	ldr	r2, [pc, #64]	; (8006d1c <xTimerCreateTimerTask+0x8c>)
 8006cdc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006cde:	4b0f      	ldr	r3, [pc, #60]	; (8006d1c <xTimerCreateTimerTask+0x8c>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d001      	beq.n	8006cea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10a      	bne.n	8006d06 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf4:	f383 8811 	msr	BASEPRI, r3
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	613b      	str	r3, [r7, #16]
}
 8006d02:	bf00      	nop
 8006d04:	e7fe      	b.n	8006d04 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006d06:	697b      	ldr	r3, [r7, #20]
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3718      	adds	r7, #24
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	20000f0c 	.word	0x20000f0c
 8006d14:	0800ce3c 	.word	0x0800ce3c
 8006d18:	08006e55 	.word	0x08006e55
 8006d1c:	20000f10 	.word	0x20000f10

08006d20 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b08a      	sub	sp, #40	; 0x28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
 8006d2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10a      	bne.n	8006d4e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3c:	f383 8811 	msr	BASEPRI, r3
 8006d40:	f3bf 8f6f 	isb	sy
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	623b      	str	r3, [r7, #32]
}
 8006d4a:	bf00      	nop
 8006d4c:	e7fe      	b.n	8006d4c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006d4e:	4b1a      	ldr	r3, [pc, #104]	; (8006db8 <xTimerGenericCommand+0x98>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d02a      	beq.n	8006dac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	2b05      	cmp	r3, #5
 8006d66:	dc18      	bgt.n	8006d9a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d68:	f7ff feb2 	bl	8006ad0 <xTaskGetSchedulerState>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d109      	bne.n	8006d86 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d72:	4b11      	ldr	r3, [pc, #68]	; (8006db8 <xTimerGenericCommand+0x98>)
 8006d74:	6818      	ldr	r0, [r3, #0]
 8006d76:	f107 0110 	add.w	r1, r7, #16
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d7e:	f7fe fca1 	bl	80056c4 <xQueueGenericSend>
 8006d82:	6278      	str	r0, [r7, #36]	; 0x24
 8006d84:	e012      	b.n	8006dac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d86:	4b0c      	ldr	r3, [pc, #48]	; (8006db8 <xTimerGenericCommand+0x98>)
 8006d88:	6818      	ldr	r0, [r3, #0]
 8006d8a:	f107 0110 	add.w	r1, r7, #16
 8006d8e:	2300      	movs	r3, #0
 8006d90:	2200      	movs	r2, #0
 8006d92:	f7fe fc97 	bl	80056c4 <xQueueGenericSend>
 8006d96:	6278      	str	r0, [r7, #36]	; 0x24
 8006d98:	e008      	b.n	8006dac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d9a:	4b07      	ldr	r3, [pc, #28]	; (8006db8 <xTimerGenericCommand+0x98>)
 8006d9c:	6818      	ldr	r0, [r3, #0]
 8006d9e:	f107 0110 	add.w	r1, r7, #16
 8006da2:	2300      	movs	r3, #0
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	f7fe fd8b 	bl	80058c0 <xQueueGenericSendFromISR>
 8006daa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3728      	adds	r7, #40	; 0x28
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	20000f0c 	.word	0x20000f0c

08006dbc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b088      	sub	sp, #32
 8006dc0:	af02      	add	r7, sp, #8
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dc6:	4b22      	ldr	r3, [pc, #136]	; (8006e50 <prvProcessExpiredTimer+0x94>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	3304      	adds	r3, #4
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7fe fb47 	bl	8005468 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006de0:	f003 0304 	and.w	r3, r3, #4
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d022      	beq.n	8006e2e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	699a      	ldr	r2, [r3, #24]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	18d1      	adds	r1, r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	6978      	ldr	r0, [r7, #20]
 8006df6:	f000 f8d1 	bl	8006f9c <prvInsertTimerInActiveList>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d01f      	beq.n	8006e40 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e00:	2300      	movs	r3, #0
 8006e02:	9300      	str	r3, [sp, #0]
 8006e04:	2300      	movs	r3, #0
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	2100      	movs	r1, #0
 8006e0a:	6978      	ldr	r0, [r7, #20]
 8006e0c:	f7ff ff88 	bl	8006d20 <xTimerGenericCommand>
 8006e10:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d113      	bne.n	8006e40 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1c:	f383 8811 	msr	BASEPRI, r3
 8006e20:	f3bf 8f6f 	isb	sy
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	60fb      	str	r3, [r7, #12]
}
 8006e2a:	bf00      	nop
 8006e2c:	e7fe      	b.n	8006e2c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e34:	f023 0301 	bic.w	r3, r3, #1
 8006e38:	b2da      	uxtb	r2, r3
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	6a1b      	ldr	r3, [r3, #32]
 8006e44:	6978      	ldr	r0, [r7, #20]
 8006e46:	4798      	blx	r3
}
 8006e48:	bf00      	nop
 8006e4a:	3718      	adds	r7, #24
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	20000f04 	.word	0x20000f04

08006e54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e5c:	f107 0308 	add.w	r3, r7, #8
 8006e60:	4618      	mov	r0, r3
 8006e62:	f000 f857 	bl	8006f14 <prvGetNextExpireTime>
 8006e66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f000 f803 	bl	8006e78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006e72:	f000 f8d5 	bl	8007020 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e76:	e7f1      	b.n	8006e5c <prvTimerTask+0x8>

08006e78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e82:	f7ff fa43 	bl	800630c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e86:	f107 0308 	add.w	r3, r7, #8
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 f866 	bl	8006f5c <prvSampleTimeNow>
 8006e90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d130      	bne.n	8006efa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10a      	bne.n	8006eb4 <prvProcessTimerOrBlockTask+0x3c>
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d806      	bhi.n	8006eb4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006ea6:	f7ff fa3f 	bl	8006328 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006eaa:	68f9      	ldr	r1, [r7, #12]
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f7ff ff85 	bl	8006dbc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006eb2:	e024      	b.n	8006efe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d008      	beq.n	8006ecc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006eba:	4b13      	ldr	r3, [pc, #76]	; (8006f08 <prvProcessTimerOrBlockTask+0x90>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d101      	bne.n	8006ec8 <prvProcessTimerOrBlockTask+0x50>
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e000      	b.n	8006eca <prvProcessTimerOrBlockTask+0x52>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ecc:	4b0f      	ldr	r3, [pc, #60]	; (8006f0c <prvProcessTimerOrBlockTask+0x94>)
 8006ece:	6818      	ldr	r0, [r3, #0]
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	4619      	mov	r1, r3
 8006eda:	f7fe ffa7 	bl	8005e2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006ede:	f7ff fa23 	bl	8006328 <xTaskResumeAll>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d10a      	bne.n	8006efe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006ee8:	4b09      	ldr	r3, [pc, #36]	; (8006f10 <prvProcessTimerOrBlockTask+0x98>)
 8006eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eee:	601a      	str	r2, [r3, #0]
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	f3bf 8f6f 	isb	sy
}
 8006ef8:	e001      	b.n	8006efe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006efa:	f7ff fa15 	bl	8006328 <xTaskResumeAll>
}
 8006efe:	bf00      	nop
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	20000f08 	.word	0x20000f08
 8006f0c:	20000f0c 	.word	0x20000f0c
 8006f10:	e000ed04 	.word	0xe000ed04

08006f14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006f1c:	4b0e      	ldr	r3, [pc, #56]	; (8006f58 <prvGetNextExpireTime+0x44>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d101      	bne.n	8006f2a <prvGetNextExpireTime+0x16>
 8006f26:	2201      	movs	r2, #1
 8006f28:	e000      	b.n	8006f2c <prvGetNextExpireTime+0x18>
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d105      	bne.n	8006f44 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f38:	4b07      	ldr	r3, [pc, #28]	; (8006f58 <prvGetNextExpireTime+0x44>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	60fb      	str	r3, [r7, #12]
 8006f42:	e001      	b.n	8006f48 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006f44:	2300      	movs	r3, #0
 8006f46:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006f48:	68fb      	ldr	r3, [r7, #12]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	20000f04 	.word	0x20000f04

08006f5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006f64:	f7ff fa7e 	bl	8006464 <xTaskGetTickCount>
 8006f68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006f6a:	4b0b      	ldr	r3, [pc, #44]	; (8006f98 <prvSampleTimeNow+0x3c>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d205      	bcs.n	8006f80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006f74:	f000 f936 	bl	80071e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	601a      	str	r2, [r3, #0]
 8006f7e:	e002      	b.n	8006f86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f86:	4a04      	ldr	r2, [pc, #16]	; (8006f98 <prvSampleTimeNow+0x3c>)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	20000f14 	.word	0x20000f14

08006f9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
 8006fa8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006faa:	2300      	movs	r3, #0
 8006fac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d812      	bhi.n	8006fe8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	1ad2      	subs	r2, r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d302      	bcc.n	8006fd6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	617b      	str	r3, [r7, #20]
 8006fd4:	e01b      	b.n	800700e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006fd6:	4b10      	ldr	r3, [pc, #64]	; (8007018 <prvInsertTimerInActiveList+0x7c>)
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	3304      	adds	r3, #4
 8006fde:	4619      	mov	r1, r3
 8006fe0:	4610      	mov	r0, r2
 8006fe2:	f7fe fa08 	bl	80053f6 <vListInsert>
 8006fe6:	e012      	b.n	800700e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d206      	bcs.n	8006ffe <prvInsertTimerInActiveList+0x62>
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d302      	bcc.n	8006ffe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	617b      	str	r3, [r7, #20]
 8006ffc:	e007      	b.n	800700e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ffe:	4b07      	ldr	r3, [pc, #28]	; (800701c <prvInsertTimerInActiveList+0x80>)
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	3304      	adds	r3, #4
 8007006:	4619      	mov	r1, r3
 8007008:	4610      	mov	r0, r2
 800700a:	f7fe f9f4 	bl	80053f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800700e:	697b      	ldr	r3, [r7, #20]
}
 8007010:	4618      	mov	r0, r3
 8007012:	3718      	adds	r7, #24
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	20000f08 	.word	0x20000f08
 800701c:	20000f04 	.word	0x20000f04

08007020 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b08e      	sub	sp, #56	; 0x38
 8007024:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007026:	e0ca      	b.n	80071be <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	da18      	bge.n	8007060 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800702e:	1d3b      	adds	r3, r7, #4
 8007030:	3304      	adds	r3, #4
 8007032:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10a      	bne.n	8007050 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800703a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703e:	f383 8811 	msr	BASEPRI, r3
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	61fb      	str	r3, [r7, #28]
}
 800704c:	bf00      	nop
 800704e:	e7fe      	b.n	800704e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007056:	6850      	ldr	r0, [r2, #4]
 8007058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800705a:	6892      	ldr	r2, [r2, #8]
 800705c:	4611      	mov	r1, r2
 800705e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	f2c0 80aa 	blt.w	80071bc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800706c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d004      	beq.n	800707e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007076:	3304      	adds	r3, #4
 8007078:	4618      	mov	r0, r3
 800707a:	f7fe f9f5 	bl	8005468 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800707e:	463b      	mov	r3, r7
 8007080:	4618      	mov	r0, r3
 8007082:	f7ff ff6b 	bl	8006f5c <prvSampleTimeNow>
 8007086:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b09      	cmp	r3, #9
 800708c:	f200 8097 	bhi.w	80071be <prvProcessReceivedCommands+0x19e>
 8007090:	a201      	add	r2, pc, #4	; (adr r2, 8007098 <prvProcessReceivedCommands+0x78>)
 8007092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007096:	bf00      	nop
 8007098:	080070c1 	.word	0x080070c1
 800709c:	080070c1 	.word	0x080070c1
 80070a0:	080070c1 	.word	0x080070c1
 80070a4:	08007135 	.word	0x08007135
 80070a8:	08007149 	.word	0x08007149
 80070ac:	08007193 	.word	0x08007193
 80070b0:	080070c1 	.word	0x080070c1
 80070b4:	080070c1 	.word	0x080070c1
 80070b8:	08007135 	.word	0x08007135
 80070bc:	08007149 	.word	0x08007149
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80070c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070c6:	f043 0301 	orr.w	r3, r3, #1
 80070ca:	b2da      	uxtb	r2, r3
 80070cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80070d2:	68ba      	ldr	r2, [r7, #8]
 80070d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	18d1      	adds	r1, r2, r3
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070e0:	f7ff ff5c 	bl	8006f9c <prvInsertTimerInActiveList>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d069      	beq.n	80071be <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070f8:	f003 0304 	and.w	r3, r3, #4
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d05e      	beq.n	80071be <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	441a      	add	r2, r3
 8007108:	2300      	movs	r3, #0
 800710a:	9300      	str	r3, [sp, #0]
 800710c:	2300      	movs	r3, #0
 800710e:	2100      	movs	r1, #0
 8007110:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007112:	f7ff fe05 	bl	8006d20 <xTimerGenericCommand>
 8007116:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007118:	6a3b      	ldr	r3, [r7, #32]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d14f      	bne.n	80071be <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	61bb      	str	r3, [r7, #24]
}
 8007130:	bf00      	nop
 8007132:	e7fe      	b.n	8007132 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007136:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800713a:	f023 0301 	bic.w	r3, r3, #1
 800713e:	b2da      	uxtb	r2, r3
 8007140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007142:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007146:	e03a      	b.n	80071be <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800714e:	f043 0301 	orr.w	r3, r3, #1
 8007152:	b2da      	uxtb	r2, r3
 8007154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007156:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10a      	bne.n	800717e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716c:	f383 8811 	msr	BASEPRI, r3
 8007170:	f3bf 8f6f 	isb	sy
 8007174:	f3bf 8f4f 	dsb	sy
 8007178:	617b      	str	r3, [r7, #20]
}
 800717a:	bf00      	nop
 800717c:	e7fe      	b.n	800717c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800717e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007180:	699a      	ldr	r2, [r3, #24]
 8007182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007184:	18d1      	adds	r1, r2, r3
 8007186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800718a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800718c:	f7ff ff06 	bl	8006f9c <prvInsertTimerInActiveList>
					break;
 8007190:	e015      	b.n	80071be <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007194:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007198:	f003 0302 	and.w	r3, r3, #2
 800719c:	2b00      	cmp	r3, #0
 800719e:	d103      	bne.n	80071a8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80071a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071a2:	f000 fbdd 	bl	8007960 <vPortFree>
 80071a6:	e00a      	b.n	80071be <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071ae:	f023 0301 	bic.w	r3, r3, #1
 80071b2:	b2da      	uxtb	r2, r3
 80071b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80071ba:	e000      	b.n	80071be <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80071bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80071be:	4b08      	ldr	r3, [pc, #32]	; (80071e0 <prvProcessReceivedCommands+0x1c0>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	1d39      	adds	r1, r7, #4
 80071c4:	2200      	movs	r2, #0
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fe fc16 	bl	80059f8 <xQueueReceive>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f47f af2a 	bne.w	8007028 <prvProcessReceivedCommands+0x8>
	}
}
 80071d4:	bf00      	nop
 80071d6:	bf00      	nop
 80071d8:	3730      	adds	r7, #48	; 0x30
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	20000f0c 	.word	0x20000f0c

080071e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b088      	sub	sp, #32
 80071e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071ea:	e048      	b.n	800727e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071ec:	4b2d      	ldr	r3, [pc, #180]	; (80072a4 <prvSwitchTimerLists+0xc0>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071f6:	4b2b      	ldr	r3, [pc, #172]	; (80072a4 <prvSwitchTimerLists+0xc0>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	3304      	adds	r3, #4
 8007204:	4618      	mov	r0, r3
 8007206:	f7fe f92f 	bl	8005468 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6a1b      	ldr	r3, [r3, #32]
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007218:	f003 0304 	and.w	r3, r3, #4
 800721c:	2b00      	cmp	r3, #0
 800721e:	d02e      	beq.n	800727e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	4413      	add	r3, r2
 8007228:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	429a      	cmp	r2, r3
 8007230:	d90e      	bls.n	8007250 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800723e:	4b19      	ldr	r3, [pc, #100]	; (80072a4 <prvSwitchTimerLists+0xc0>)
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	3304      	adds	r3, #4
 8007246:	4619      	mov	r1, r3
 8007248:	4610      	mov	r0, r2
 800724a:	f7fe f8d4 	bl	80053f6 <vListInsert>
 800724e:	e016      	b.n	800727e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007250:	2300      	movs	r3, #0
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	2300      	movs	r3, #0
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	2100      	movs	r1, #0
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f7ff fd60 	bl	8006d20 <xTimerGenericCommand>
 8007260:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d10a      	bne.n	800727e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726c:	f383 8811 	msr	BASEPRI, r3
 8007270:	f3bf 8f6f 	isb	sy
 8007274:	f3bf 8f4f 	dsb	sy
 8007278:	603b      	str	r3, [r7, #0]
}
 800727a:	bf00      	nop
 800727c:	e7fe      	b.n	800727c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800727e:	4b09      	ldr	r3, [pc, #36]	; (80072a4 <prvSwitchTimerLists+0xc0>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1b1      	bne.n	80071ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007288:	4b06      	ldr	r3, [pc, #24]	; (80072a4 <prvSwitchTimerLists+0xc0>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800728e:	4b06      	ldr	r3, [pc, #24]	; (80072a8 <prvSwitchTimerLists+0xc4>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a04      	ldr	r2, [pc, #16]	; (80072a4 <prvSwitchTimerLists+0xc0>)
 8007294:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007296:	4a04      	ldr	r2, [pc, #16]	; (80072a8 <prvSwitchTimerLists+0xc4>)
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	6013      	str	r3, [r2, #0]
}
 800729c:	bf00      	nop
 800729e:	3718      	adds	r7, #24
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	20000f04 	.word	0x20000f04
 80072a8:	20000f08 	.word	0x20000f08

080072ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80072b2:	f000 f967 	bl	8007584 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80072b6:	4b15      	ldr	r3, [pc, #84]	; (800730c <prvCheckForValidListAndQueue+0x60>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d120      	bne.n	8007300 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80072be:	4814      	ldr	r0, [pc, #80]	; (8007310 <prvCheckForValidListAndQueue+0x64>)
 80072c0:	f7fe f848 	bl	8005354 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80072c4:	4813      	ldr	r0, [pc, #76]	; (8007314 <prvCheckForValidListAndQueue+0x68>)
 80072c6:	f7fe f845 	bl	8005354 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80072ca:	4b13      	ldr	r3, [pc, #76]	; (8007318 <prvCheckForValidListAndQueue+0x6c>)
 80072cc:	4a10      	ldr	r2, [pc, #64]	; (8007310 <prvCheckForValidListAndQueue+0x64>)
 80072ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80072d0:	4b12      	ldr	r3, [pc, #72]	; (800731c <prvCheckForValidListAndQueue+0x70>)
 80072d2:	4a10      	ldr	r2, [pc, #64]	; (8007314 <prvCheckForValidListAndQueue+0x68>)
 80072d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80072d6:	2300      	movs	r3, #0
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	4b11      	ldr	r3, [pc, #68]	; (8007320 <prvCheckForValidListAndQueue+0x74>)
 80072dc:	4a11      	ldr	r2, [pc, #68]	; (8007324 <prvCheckForValidListAndQueue+0x78>)
 80072de:	2110      	movs	r1, #16
 80072e0:	200a      	movs	r0, #10
 80072e2:	f7fe f953 	bl	800558c <xQueueGenericCreateStatic>
 80072e6:	4603      	mov	r3, r0
 80072e8:	4a08      	ldr	r2, [pc, #32]	; (800730c <prvCheckForValidListAndQueue+0x60>)
 80072ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80072ec:	4b07      	ldr	r3, [pc, #28]	; (800730c <prvCheckForValidListAndQueue+0x60>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d005      	beq.n	8007300 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80072f4:	4b05      	ldr	r3, [pc, #20]	; (800730c <prvCheckForValidListAndQueue+0x60>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	490b      	ldr	r1, [pc, #44]	; (8007328 <prvCheckForValidListAndQueue+0x7c>)
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7fe fd6c 	bl	8005dd8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007300:	f000 f970 	bl	80075e4 <vPortExitCritical>
}
 8007304:	bf00      	nop
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	20000f0c 	.word	0x20000f0c
 8007310:	20000edc 	.word	0x20000edc
 8007314:	20000ef0 	.word	0x20000ef0
 8007318:	20000f04 	.word	0x20000f04
 800731c:	20000f08 	.word	0x20000f08
 8007320:	20000fb8 	.word	0x20000fb8
 8007324:	20000f18 	.word	0x20000f18
 8007328:	0800ce44 	.word	0x0800ce44

0800732c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	3b04      	subs	r3, #4
 800733c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007344:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	3b04      	subs	r3, #4
 800734a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	f023 0201 	bic.w	r2, r3, #1
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	3b04      	subs	r3, #4
 800735a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800735c:	4a0c      	ldr	r2, [pc, #48]	; (8007390 <pxPortInitialiseStack+0x64>)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	3b14      	subs	r3, #20
 8007366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	3b04      	subs	r3, #4
 8007372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f06f 0202 	mvn.w	r2, #2
 800737a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	3b20      	subs	r3, #32
 8007380:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007382:	68fb      	ldr	r3, [r7, #12]
}
 8007384:	4618      	mov	r0, r3
 8007386:	3714      	adds	r7, #20
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	08007395 	.word	0x08007395

08007394 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800739a:	2300      	movs	r3, #0
 800739c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800739e:	4b12      	ldr	r3, [pc, #72]	; (80073e8 <prvTaskExitError+0x54>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a6:	d00a      	beq.n	80073be <prvTaskExitError+0x2a>
	__asm volatile
 80073a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ac:	f383 8811 	msr	BASEPRI, r3
 80073b0:	f3bf 8f6f 	isb	sy
 80073b4:	f3bf 8f4f 	dsb	sy
 80073b8:	60fb      	str	r3, [r7, #12]
}
 80073ba:	bf00      	nop
 80073bc:	e7fe      	b.n	80073bc <prvTaskExitError+0x28>
	__asm volatile
 80073be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c2:	f383 8811 	msr	BASEPRI, r3
 80073c6:	f3bf 8f6f 	isb	sy
 80073ca:	f3bf 8f4f 	dsb	sy
 80073ce:	60bb      	str	r3, [r7, #8]
}
 80073d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80073d2:	bf00      	nop
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d0fc      	beq.n	80073d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80073da:	bf00      	nop
 80073dc:	bf00      	nop
 80073de:	3714      	adds	r7, #20
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr
 80073e8:	2000001c 	.word	0x2000001c
 80073ec:	00000000 	.word	0x00000000

080073f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80073f0:	4b07      	ldr	r3, [pc, #28]	; (8007410 <pxCurrentTCBConst2>)
 80073f2:	6819      	ldr	r1, [r3, #0]
 80073f4:	6808      	ldr	r0, [r1, #0]
 80073f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073fa:	f380 8809 	msr	PSP, r0
 80073fe:	f3bf 8f6f 	isb	sy
 8007402:	f04f 0000 	mov.w	r0, #0
 8007406:	f380 8811 	msr	BASEPRI, r0
 800740a:	4770      	bx	lr
 800740c:	f3af 8000 	nop.w

08007410 <pxCurrentTCBConst2>:
 8007410:	200009dc 	.word	0x200009dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007414:	bf00      	nop
 8007416:	bf00      	nop

08007418 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007418:	4808      	ldr	r0, [pc, #32]	; (800743c <prvPortStartFirstTask+0x24>)
 800741a:	6800      	ldr	r0, [r0, #0]
 800741c:	6800      	ldr	r0, [r0, #0]
 800741e:	f380 8808 	msr	MSP, r0
 8007422:	f04f 0000 	mov.w	r0, #0
 8007426:	f380 8814 	msr	CONTROL, r0
 800742a:	b662      	cpsie	i
 800742c:	b661      	cpsie	f
 800742e:	f3bf 8f4f 	dsb	sy
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	df00      	svc	0
 8007438:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800743a:	bf00      	nop
 800743c:	e000ed08 	.word	0xe000ed08

08007440 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b086      	sub	sp, #24
 8007444:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007446:	4b46      	ldr	r3, [pc, #280]	; (8007560 <xPortStartScheduler+0x120>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a46      	ldr	r2, [pc, #280]	; (8007564 <xPortStartScheduler+0x124>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d10a      	bne.n	8007466 <xPortStartScheduler+0x26>
	__asm volatile
 8007450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007454:	f383 8811 	msr	BASEPRI, r3
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	613b      	str	r3, [r7, #16]
}
 8007462:	bf00      	nop
 8007464:	e7fe      	b.n	8007464 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007466:	4b3e      	ldr	r3, [pc, #248]	; (8007560 <xPortStartScheduler+0x120>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a3f      	ldr	r2, [pc, #252]	; (8007568 <xPortStartScheduler+0x128>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d10a      	bne.n	8007486 <xPortStartScheduler+0x46>
	__asm volatile
 8007470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	60fb      	str	r3, [r7, #12]
}
 8007482:	bf00      	nop
 8007484:	e7fe      	b.n	8007484 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007486:	4b39      	ldr	r3, [pc, #228]	; (800756c <xPortStartScheduler+0x12c>)
 8007488:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	b2db      	uxtb	r3, r3
 8007490:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	22ff      	movs	r2, #255	; 0xff
 8007496:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	b2db      	uxtb	r3, r3
 800749e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80074a0:	78fb      	ldrb	r3, [r7, #3]
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80074a8:	b2da      	uxtb	r2, r3
 80074aa:	4b31      	ldr	r3, [pc, #196]	; (8007570 <xPortStartScheduler+0x130>)
 80074ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80074ae:	4b31      	ldr	r3, [pc, #196]	; (8007574 <xPortStartScheduler+0x134>)
 80074b0:	2207      	movs	r2, #7
 80074b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074b4:	e009      	b.n	80074ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80074b6:	4b2f      	ldr	r3, [pc, #188]	; (8007574 <xPortStartScheduler+0x134>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	3b01      	subs	r3, #1
 80074bc:	4a2d      	ldr	r2, [pc, #180]	; (8007574 <xPortStartScheduler+0x134>)
 80074be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80074c0:	78fb      	ldrb	r3, [r7, #3]
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	005b      	lsls	r3, r3, #1
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074ca:	78fb      	ldrb	r3, [r7, #3]
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074d2:	2b80      	cmp	r3, #128	; 0x80
 80074d4:	d0ef      	beq.n	80074b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80074d6:	4b27      	ldr	r3, [pc, #156]	; (8007574 <xPortStartScheduler+0x134>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f1c3 0307 	rsb	r3, r3, #7
 80074de:	2b04      	cmp	r3, #4
 80074e0:	d00a      	beq.n	80074f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80074e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e6:	f383 8811 	msr	BASEPRI, r3
 80074ea:	f3bf 8f6f 	isb	sy
 80074ee:	f3bf 8f4f 	dsb	sy
 80074f2:	60bb      	str	r3, [r7, #8]
}
 80074f4:	bf00      	nop
 80074f6:	e7fe      	b.n	80074f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80074f8:	4b1e      	ldr	r3, [pc, #120]	; (8007574 <xPortStartScheduler+0x134>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	021b      	lsls	r3, r3, #8
 80074fe:	4a1d      	ldr	r2, [pc, #116]	; (8007574 <xPortStartScheduler+0x134>)
 8007500:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007502:	4b1c      	ldr	r3, [pc, #112]	; (8007574 <xPortStartScheduler+0x134>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800750a:	4a1a      	ldr	r2, [pc, #104]	; (8007574 <xPortStartScheduler+0x134>)
 800750c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	b2da      	uxtb	r2, r3
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007516:	4b18      	ldr	r3, [pc, #96]	; (8007578 <xPortStartScheduler+0x138>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a17      	ldr	r2, [pc, #92]	; (8007578 <xPortStartScheduler+0x138>)
 800751c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007520:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007522:	4b15      	ldr	r3, [pc, #84]	; (8007578 <xPortStartScheduler+0x138>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a14      	ldr	r2, [pc, #80]	; (8007578 <xPortStartScheduler+0x138>)
 8007528:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800752c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800752e:	f000 f8dd 	bl	80076ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007532:	4b12      	ldr	r3, [pc, #72]	; (800757c <xPortStartScheduler+0x13c>)
 8007534:	2200      	movs	r2, #0
 8007536:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007538:	f000 f8fc 	bl	8007734 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800753c:	4b10      	ldr	r3, [pc, #64]	; (8007580 <xPortStartScheduler+0x140>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a0f      	ldr	r2, [pc, #60]	; (8007580 <xPortStartScheduler+0x140>)
 8007542:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007546:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007548:	f7ff ff66 	bl	8007418 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800754c:	f7ff f854 	bl	80065f8 <vTaskSwitchContext>
	prvTaskExitError();
 8007550:	f7ff ff20 	bl	8007394 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3718      	adds	r7, #24
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	e000ed00 	.word	0xe000ed00
 8007564:	410fc271 	.word	0x410fc271
 8007568:	410fc270 	.word	0x410fc270
 800756c:	e000e400 	.word	0xe000e400
 8007570:	20001008 	.word	0x20001008
 8007574:	2000100c 	.word	0x2000100c
 8007578:	e000ed20 	.word	0xe000ed20
 800757c:	2000001c 	.word	0x2000001c
 8007580:	e000ef34 	.word	0xe000ef34

08007584 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
	__asm volatile
 800758a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758e:	f383 8811 	msr	BASEPRI, r3
 8007592:	f3bf 8f6f 	isb	sy
 8007596:	f3bf 8f4f 	dsb	sy
 800759a:	607b      	str	r3, [r7, #4]
}
 800759c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800759e:	4b0f      	ldr	r3, [pc, #60]	; (80075dc <vPortEnterCritical+0x58>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3301      	adds	r3, #1
 80075a4:	4a0d      	ldr	r2, [pc, #52]	; (80075dc <vPortEnterCritical+0x58>)
 80075a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80075a8:	4b0c      	ldr	r3, [pc, #48]	; (80075dc <vPortEnterCritical+0x58>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d10f      	bne.n	80075d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80075b0:	4b0b      	ldr	r3, [pc, #44]	; (80075e0 <vPortEnterCritical+0x5c>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00a      	beq.n	80075d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80075ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075be:	f383 8811 	msr	BASEPRI, r3
 80075c2:	f3bf 8f6f 	isb	sy
 80075c6:	f3bf 8f4f 	dsb	sy
 80075ca:	603b      	str	r3, [r7, #0]
}
 80075cc:	bf00      	nop
 80075ce:	e7fe      	b.n	80075ce <vPortEnterCritical+0x4a>
	}
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr
 80075dc:	2000001c 	.word	0x2000001c
 80075e0:	e000ed04 	.word	0xe000ed04

080075e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80075ea:	4b12      	ldr	r3, [pc, #72]	; (8007634 <vPortExitCritical+0x50>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d10a      	bne.n	8007608 <vPortExitCritical+0x24>
	__asm volatile
 80075f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f6:	f383 8811 	msr	BASEPRI, r3
 80075fa:	f3bf 8f6f 	isb	sy
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	607b      	str	r3, [r7, #4]
}
 8007604:	bf00      	nop
 8007606:	e7fe      	b.n	8007606 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007608:	4b0a      	ldr	r3, [pc, #40]	; (8007634 <vPortExitCritical+0x50>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	3b01      	subs	r3, #1
 800760e:	4a09      	ldr	r2, [pc, #36]	; (8007634 <vPortExitCritical+0x50>)
 8007610:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007612:	4b08      	ldr	r3, [pc, #32]	; (8007634 <vPortExitCritical+0x50>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d105      	bne.n	8007626 <vPortExitCritical+0x42>
 800761a:	2300      	movs	r3, #0
 800761c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	f383 8811 	msr	BASEPRI, r3
}
 8007624:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007626:	bf00      	nop
 8007628:	370c      	adds	r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	2000001c 	.word	0x2000001c
	...

08007640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007640:	f3ef 8009 	mrs	r0, PSP
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	4b15      	ldr	r3, [pc, #84]	; (80076a0 <pxCurrentTCBConst>)
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	f01e 0f10 	tst.w	lr, #16
 8007650:	bf08      	it	eq
 8007652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765a:	6010      	str	r0, [r2, #0]
 800765c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007660:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007664:	f380 8811 	msr	BASEPRI, r0
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	f3bf 8f6f 	isb	sy
 8007670:	f7fe ffc2 	bl	80065f8 <vTaskSwitchContext>
 8007674:	f04f 0000 	mov.w	r0, #0
 8007678:	f380 8811 	msr	BASEPRI, r0
 800767c:	bc09      	pop	{r0, r3}
 800767e:	6819      	ldr	r1, [r3, #0]
 8007680:	6808      	ldr	r0, [r1, #0]
 8007682:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007686:	f01e 0f10 	tst.w	lr, #16
 800768a:	bf08      	it	eq
 800768c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007690:	f380 8809 	msr	PSP, r0
 8007694:	f3bf 8f6f 	isb	sy
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	f3af 8000 	nop.w

080076a0 <pxCurrentTCBConst>:
 80076a0:	200009dc 	.word	0x200009dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop

080076a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
	__asm volatile
 80076ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b2:	f383 8811 	msr	BASEPRI, r3
 80076b6:	f3bf 8f6f 	isb	sy
 80076ba:	f3bf 8f4f 	dsb	sy
 80076be:	607b      	str	r3, [r7, #4]
}
 80076c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80076c2:	f7fe fedf 	bl	8006484 <xTaskIncrementTick>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d003      	beq.n	80076d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80076cc:	4b06      	ldr	r3, [pc, #24]	; (80076e8 <xPortSysTickHandler+0x40>)
 80076ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076d2:	601a      	str	r2, [r3, #0]
 80076d4:	2300      	movs	r3, #0
 80076d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	f383 8811 	msr	BASEPRI, r3
}
 80076de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80076e0:	bf00      	nop
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	e000ed04 	.word	0xe000ed04

080076ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80076ec:	b480      	push	{r7}
 80076ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80076f0:	4b0b      	ldr	r3, [pc, #44]	; (8007720 <vPortSetupTimerInterrupt+0x34>)
 80076f2:	2200      	movs	r2, #0
 80076f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80076f6:	4b0b      	ldr	r3, [pc, #44]	; (8007724 <vPortSetupTimerInterrupt+0x38>)
 80076f8:	2200      	movs	r2, #0
 80076fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80076fc:	4b0a      	ldr	r3, [pc, #40]	; (8007728 <vPortSetupTimerInterrupt+0x3c>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a0a      	ldr	r2, [pc, #40]	; (800772c <vPortSetupTimerInterrupt+0x40>)
 8007702:	fba2 2303 	umull	r2, r3, r2, r3
 8007706:	099b      	lsrs	r3, r3, #6
 8007708:	4a09      	ldr	r2, [pc, #36]	; (8007730 <vPortSetupTimerInterrupt+0x44>)
 800770a:	3b01      	subs	r3, #1
 800770c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800770e:	4b04      	ldr	r3, [pc, #16]	; (8007720 <vPortSetupTimerInterrupt+0x34>)
 8007710:	2207      	movs	r2, #7
 8007712:	601a      	str	r2, [r3, #0]
}
 8007714:	bf00      	nop
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	e000e010 	.word	0xe000e010
 8007724:	e000e018 	.word	0xe000e018
 8007728:	20000010 	.word	0x20000010
 800772c:	10624dd3 	.word	0x10624dd3
 8007730:	e000e014 	.word	0xe000e014

08007734 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007734:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007744 <vPortEnableVFP+0x10>
 8007738:	6801      	ldr	r1, [r0, #0]
 800773a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800773e:	6001      	str	r1, [r0, #0]
 8007740:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007742:	bf00      	nop
 8007744:	e000ed88 	.word	0xe000ed88

08007748 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800774e:	f3ef 8305 	mrs	r3, IPSR
 8007752:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2b0f      	cmp	r3, #15
 8007758:	d914      	bls.n	8007784 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800775a:	4a17      	ldr	r2, [pc, #92]	; (80077b8 <vPortValidateInterruptPriority+0x70>)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	4413      	add	r3, r2
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007764:	4b15      	ldr	r3, [pc, #84]	; (80077bc <vPortValidateInterruptPriority+0x74>)
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	7afa      	ldrb	r2, [r7, #11]
 800776a:	429a      	cmp	r2, r3
 800776c:	d20a      	bcs.n	8007784 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	607b      	str	r3, [r7, #4]
}
 8007780:	bf00      	nop
 8007782:	e7fe      	b.n	8007782 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007784:	4b0e      	ldr	r3, [pc, #56]	; (80077c0 <vPortValidateInterruptPriority+0x78>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800778c:	4b0d      	ldr	r3, [pc, #52]	; (80077c4 <vPortValidateInterruptPriority+0x7c>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	429a      	cmp	r2, r3
 8007792:	d90a      	bls.n	80077aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007798:	f383 8811 	msr	BASEPRI, r3
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	603b      	str	r3, [r7, #0]
}
 80077a6:	bf00      	nop
 80077a8:	e7fe      	b.n	80077a8 <vPortValidateInterruptPriority+0x60>
	}
 80077aa:	bf00      	nop
 80077ac:	3714      	adds	r7, #20
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	e000e3f0 	.word	0xe000e3f0
 80077bc:	20001008 	.word	0x20001008
 80077c0:	e000ed0c 	.word	0xe000ed0c
 80077c4:	2000100c 	.word	0x2000100c

080077c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b08a      	sub	sp, #40	; 0x28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80077d0:	2300      	movs	r3, #0
 80077d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80077d4:	f7fe fd9a 	bl	800630c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80077d8:	4b5b      	ldr	r3, [pc, #364]	; (8007948 <pvPortMalloc+0x180>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d101      	bne.n	80077e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80077e0:	f000 f920 	bl	8007a24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80077e4:	4b59      	ldr	r3, [pc, #356]	; (800794c <pvPortMalloc+0x184>)
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4013      	ands	r3, r2
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f040 8093 	bne.w	8007918 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d01d      	beq.n	8007834 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80077f8:	2208      	movs	r2, #8
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4413      	add	r3, r2
 80077fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f003 0307 	and.w	r3, r3, #7
 8007806:	2b00      	cmp	r3, #0
 8007808:	d014      	beq.n	8007834 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f023 0307 	bic.w	r3, r3, #7
 8007810:	3308      	adds	r3, #8
 8007812:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f003 0307 	and.w	r3, r3, #7
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00a      	beq.n	8007834 <pvPortMalloc+0x6c>
	__asm volatile
 800781e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	617b      	str	r3, [r7, #20]
}
 8007830:	bf00      	nop
 8007832:	e7fe      	b.n	8007832 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d06e      	beq.n	8007918 <pvPortMalloc+0x150>
 800783a:	4b45      	ldr	r3, [pc, #276]	; (8007950 <pvPortMalloc+0x188>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	429a      	cmp	r2, r3
 8007842:	d869      	bhi.n	8007918 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007844:	4b43      	ldr	r3, [pc, #268]	; (8007954 <pvPortMalloc+0x18c>)
 8007846:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007848:	4b42      	ldr	r3, [pc, #264]	; (8007954 <pvPortMalloc+0x18c>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800784e:	e004      	b.n	800785a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	429a      	cmp	r2, r3
 8007862:	d903      	bls.n	800786c <pvPortMalloc+0xa4>
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1f1      	bne.n	8007850 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800786c:	4b36      	ldr	r3, [pc, #216]	; (8007948 <pvPortMalloc+0x180>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007872:	429a      	cmp	r2, r3
 8007874:	d050      	beq.n	8007918 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007876:	6a3b      	ldr	r3, [r7, #32]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2208      	movs	r2, #8
 800787c:	4413      	add	r3, r2
 800787e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	6a3b      	ldr	r3, [r7, #32]
 8007886:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	1ad2      	subs	r2, r2, r3
 8007890:	2308      	movs	r3, #8
 8007892:	005b      	lsls	r3, r3, #1
 8007894:	429a      	cmp	r2, r3
 8007896:	d91f      	bls.n	80078d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4413      	add	r3, r2
 800789e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	f003 0307 	and.w	r3, r3, #7
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00a      	beq.n	80078c0 <pvPortMalloc+0xf8>
	__asm volatile
 80078aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ae:	f383 8811 	msr	BASEPRI, r3
 80078b2:	f3bf 8f6f 	isb	sy
 80078b6:	f3bf 8f4f 	dsb	sy
 80078ba:	613b      	str	r3, [r7, #16]
}
 80078bc:	bf00      	nop
 80078be:	e7fe      	b.n	80078be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	685a      	ldr	r2, [r3, #4]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	1ad2      	subs	r2, r2, r3
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80078cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80078d2:	69b8      	ldr	r0, [r7, #24]
 80078d4:	f000 f908 	bl	8007ae8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80078d8:	4b1d      	ldr	r3, [pc, #116]	; (8007950 <pvPortMalloc+0x188>)
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	4a1b      	ldr	r2, [pc, #108]	; (8007950 <pvPortMalloc+0x188>)
 80078e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80078e6:	4b1a      	ldr	r3, [pc, #104]	; (8007950 <pvPortMalloc+0x188>)
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	4b1b      	ldr	r3, [pc, #108]	; (8007958 <pvPortMalloc+0x190>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d203      	bcs.n	80078fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80078f2:	4b17      	ldr	r3, [pc, #92]	; (8007950 <pvPortMalloc+0x188>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a18      	ldr	r2, [pc, #96]	; (8007958 <pvPortMalloc+0x190>)
 80078f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80078fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fc:	685a      	ldr	r2, [r3, #4]
 80078fe:	4b13      	ldr	r3, [pc, #76]	; (800794c <pvPortMalloc+0x184>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	431a      	orrs	r2, r3
 8007904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007906:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	2200      	movs	r2, #0
 800790c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800790e:	4b13      	ldr	r3, [pc, #76]	; (800795c <pvPortMalloc+0x194>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	3301      	adds	r3, #1
 8007914:	4a11      	ldr	r2, [pc, #68]	; (800795c <pvPortMalloc+0x194>)
 8007916:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007918:	f7fe fd06 	bl	8006328 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	f003 0307 	and.w	r3, r3, #7
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00a      	beq.n	800793c <pvPortMalloc+0x174>
	__asm volatile
 8007926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792a:	f383 8811 	msr	BASEPRI, r3
 800792e:	f3bf 8f6f 	isb	sy
 8007932:	f3bf 8f4f 	dsb	sy
 8007936:	60fb      	str	r3, [r7, #12]
}
 8007938:	bf00      	nop
 800793a:	e7fe      	b.n	800793a <pvPortMalloc+0x172>
	return pvReturn;
 800793c:	69fb      	ldr	r3, [r7, #28]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3728      	adds	r7, #40	; 0x28
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	20004c18 	.word	0x20004c18
 800794c:	20004c2c 	.word	0x20004c2c
 8007950:	20004c1c 	.word	0x20004c1c
 8007954:	20004c10 	.word	0x20004c10
 8007958:	20004c20 	.word	0x20004c20
 800795c:	20004c24 	.word	0x20004c24

08007960 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d04d      	beq.n	8007a0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007972:	2308      	movs	r3, #8
 8007974:	425b      	negs	r3, r3
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	4413      	add	r3, r2
 800797a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	685a      	ldr	r2, [r3, #4]
 8007984:	4b24      	ldr	r3, [pc, #144]	; (8007a18 <vPortFree+0xb8>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4013      	ands	r3, r2
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10a      	bne.n	80079a4 <vPortFree+0x44>
	__asm volatile
 800798e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007992:	f383 8811 	msr	BASEPRI, r3
 8007996:	f3bf 8f6f 	isb	sy
 800799a:	f3bf 8f4f 	dsb	sy
 800799e:	60fb      	str	r3, [r7, #12]
}
 80079a0:	bf00      	nop
 80079a2:	e7fe      	b.n	80079a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00a      	beq.n	80079c2 <vPortFree+0x62>
	__asm volatile
 80079ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b0:	f383 8811 	msr	BASEPRI, r3
 80079b4:	f3bf 8f6f 	isb	sy
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	60bb      	str	r3, [r7, #8]
}
 80079be:	bf00      	nop
 80079c0:	e7fe      	b.n	80079c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	685a      	ldr	r2, [r3, #4]
 80079c6:	4b14      	ldr	r3, [pc, #80]	; (8007a18 <vPortFree+0xb8>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4013      	ands	r3, r2
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d01e      	beq.n	8007a0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d11a      	bne.n	8007a0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	4b0e      	ldr	r3, [pc, #56]	; (8007a18 <vPortFree+0xb8>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	43db      	mvns	r3, r3
 80079e2:	401a      	ands	r2, r3
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80079e8:	f7fe fc90 	bl	800630c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	685a      	ldr	r2, [r3, #4]
 80079f0:	4b0a      	ldr	r3, [pc, #40]	; (8007a1c <vPortFree+0xbc>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4413      	add	r3, r2
 80079f6:	4a09      	ldr	r2, [pc, #36]	; (8007a1c <vPortFree+0xbc>)
 80079f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80079fa:	6938      	ldr	r0, [r7, #16]
 80079fc:	f000 f874 	bl	8007ae8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007a00:	4b07      	ldr	r3, [pc, #28]	; (8007a20 <vPortFree+0xc0>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	3301      	adds	r3, #1
 8007a06:	4a06      	ldr	r2, [pc, #24]	; (8007a20 <vPortFree+0xc0>)
 8007a08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007a0a:	f7fe fc8d 	bl	8006328 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a0e:	bf00      	nop
 8007a10:	3718      	adds	r7, #24
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	20004c2c 	.word	0x20004c2c
 8007a1c:	20004c1c 	.word	0x20004c1c
 8007a20:	20004c28 	.word	0x20004c28

08007a24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007a2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a30:	4b27      	ldr	r3, [pc, #156]	; (8007ad0 <prvHeapInit+0xac>)
 8007a32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f003 0307 	and.w	r3, r3, #7
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00c      	beq.n	8007a58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	3307      	adds	r3, #7
 8007a42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f023 0307 	bic.w	r3, r3, #7
 8007a4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	4a1f      	ldr	r2, [pc, #124]	; (8007ad0 <prvHeapInit+0xac>)
 8007a54:	4413      	add	r3, r2
 8007a56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a5c:	4a1d      	ldr	r2, [pc, #116]	; (8007ad4 <prvHeapInit+0xb0>)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a62:	4b1c      	ldr	r3, [pc, #112]	; (8007ad4 <prvHeapInit+0xb0>)
 8007a64:	2200      	movs	r2, #0
 8007a66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a70:	2208      	movs	r2, #8
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	1a9b      	subs	r3, r3, r2
 8007a76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f023 0307 	bic.w	r3, r3, #7
 8007a7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	4a15      	ldr	r2, [pc, #84]	; (8007ad8 <prvHeapInit+0xb4>)
 8007a84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a86:	4b14      	ldr	r3, [pc, #80]	; (8007ad8 <prvHeapInit+0xb4>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a8e:	4b12      	ldr	r3, [pc, #72]	; (8007ad8 <prvHeapInit+0xb4>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2200      	movs	r2, #0
 8007a94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	1ad2      	subs	r2, r2, r3
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007aa4:	4b0c      	ldr	r3, [pc, #48]	; (8007ad8 <prvHeapInit+0xb4>)
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	4a0a      	ldr	r2, [pc, #40]	; (8007adc <prvHeapInit+0xb8>)
 8007ab2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	4a09      	ldr	r2, [pc, #36]	; (8007ae0 <prvHeapInit+0xbc>)
 8007aba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007abc:	4b09      	ldr	r3, [pc, #36]	; (8007ae4 <prvHeapInit+0xc0>)
 8007abe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ac2:	601a      	str	r2, [r3, #0]
}
 8007ac4:	bf00      	nop
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr
 8007ad0:	20001010 	.word	0x20001010
 8007ad4:	20004c10 	.word	0x20004c10
 8007ad8:	20004c18 	.word	0x20004c18
 8007adc:	20004c20 	.word	0x20004c20
 8007ae0:	20004c1c 	.word	0x20004c1c
 8007ae4:	20004c2c 	.word	0x20004c2c

08007ae8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007af0:	4b28      	ldr	r3, [pc, #160]	; (8007b94 <prvInsertBlockIntoFreeList+0xac>)
 8007af2:	60fb      	str	r3, [r7, #12]
 8007af4:	e002      	b.n	8007afc <prvInsertBlockIntoFreeList+0x14>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	60fb      	str	r3, [r7, #12]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d8f7      	bhi.n	8007af6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	4413      	add	r3, r2
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d108      	bne.n	8007b2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	441a      	add	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	441a      	add	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d118      	bne.n	8007b70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	4b15      	ldr	r3, [pc, #84]	; (8007b98 <prvInsertBlockIntoFreeList+0xb0>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d00d      	beq.n	8007b66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	685a      	ldr	r2, [r3, #4]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	441a      	add	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	601a      	str	r2, [r3, #0]
 8007b64:	e008      	b.n	8007b78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b66:	4b0c      	ldr	r3, [pc, #48]	; (8007b98 <prvInsertBlockIntoFreeList+0xb0>)
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	601a      	str	r2, [r3, #0]
 8007b6e:	e003      	b.n	8007b78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d002      	beq.n	8007b86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b86:	bf00      	nop
 8007b88:	3714      	adds	r7, #20
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	20004c10 	.word	0x20004c10
 8007b98:	20004c18 	.word	0x20004c18

08007b9c <__errno>:
 8007b9c:	4b01      	ldr	r3, [pc, #4]	; (8007ba4 <__errno+0x8>)
 8007b9e:	6818      	ldr	r0, [r3, #0]
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	20000020 	.word	0x20000020

08007ba8 <__libc_init_array>:
 8007ba8:	b570      	push	{r4, r5, r6, lr}
 8007baa:	4d0d      	ldr	r5, [pc, #52]	; (8007be0 <__libc_init_array+0x38>)
 8007bac:	4c0d      	ldr	r4, [pc, #52]	; (8007be4 <__libc_init_array+0x3c>)
 8007bae:	1b64      	subs	r4, r4, r5
 8007bb0:	10a4      	asrs	r4, r4, #2
 8007bb2:	2600      	movs	r6, #0
 8007bb4:	42a6      	cmp	r6, r4
 8007bb6:	d109      	bne.n	8007bcc <__libc_init_array+0x24>
 8007bb8:	4d0b      	ldr	r5, [pc, #44]	; (8007be8 <__libc_init_array+0x40>)
 8007bba:	4c0c      	ldr	r4, [pc, #48]	; (8007bec <__libc_init_array+0x44>)
 8007bbc:	f005 f882 	bl	800ccc4 <_init>
 8007bc0:	1b64      	subs	r4, r4, r5
 8007bc2:	10a4      	asrs	r4, r4, #2
 8007bc4:	2600      	movs	r6, #0
 8007bc6:	42a6      	cmp	r6, r4
 8007bc8:	d105      	bne.n	8007bd6 <__libc_init_array+0x2e>
 8007bca:	bd70      	pop	{r4, r5, r6, pc}
 8007bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bd0:	4798      	blx	r3
 8007bd2:	3601      	adds	r6, #1
 8007bd4:	e7ee      	b.n	8007bb4 <__libc_init_array+0xc>
 8007bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bda:	4798      	blx	r3
 8007bdc:	3601      	adds	r6, #1
 8007bde:	e7f2      	b.n	8007bc6 <__libc_init_array+0x1e>
 8007be0:	0800e874 	.word	0x0800e874
 8007be4:	0800e874 	.word	0x0800e874
 8007be8:	0800e874 	.word	0x0800e874
 8007bec:	0800e878 	.word	0x0800e878

08007bf0 <memcpy>:
 8007bf0:	440a      	add	r2, r1
 8007bf2:	4291      	cmp	r1, r2
 8007bf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bf8:	d100      	bne.n	8007bfc <memcpy+0xc>
 8007bfa:	4770      	bx	lr
 8007bfc:	b510      	push	{r4, lr}
 8007bfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c06:	4291      	cmp	r1, r2
 8007c08:	d1f9      	bne.n	8007bfe <memcpy+0xe>
 8007c0a:	bd10      	pop	{r4, pc}

08007c0c <memset>:
 8007c0c:	4402      	add	r2, r0
 8007c0e:	4603      	mov	r3, r0
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d100      	bne.n	8007c16 <memset+0xa>
 8007c14:	4770      	bx	lr
 8007c16:	f803 1b01 	strb.w	r1, [r3], #1
 8007c1a:	e7f9      	b.n	8007c10 <memset+0x4>

08007c1c <__cvt>:
 8007c1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c20:	ec55 4b10 	vmov	r4, r5, d0
 8007c24:	2d00      	cmp	r5, #0
 8007c26:	460e      	mov	r6, r1
 8007c28:	4619      	mov	r1, r3
 8007c2a:	462b      	mov	r3, r5
 8007c2c:	bfbb      	ittet	lt
 8007c2e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007c32:	461d      	movlt	r5, r3
 8007c34:	2300      	movge	r3, #0
 8007c36:	232d      	movlt	r3, #45	; 0x2d
 8007c38:	700b      	strb	r3, [r1, #0]
 8007c3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c3c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007c40:	4691      	mov	r9, r2
 8007c42:	f023 0820 	bic.w	r8, r3, #32
 8007c46:	bfbc      	itt	lt
 8007c48:	4622      	movlt	r2, r4
 8007c4a:	4614      	movlt	r4, r2
 8007c4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c50:	d005      	beq.n	8007c5e <__cvt+0x42>
 8007c52:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007c56:	d100      	bne.n	8007c5a <__cvt+0x3e>
 8007c58:	3601      	adds	r6, #1
 8007c5a:	2102      	movs	r1, #2
 8007c5c:	e000      	b.n	8007c60 <__cvt+0x44>
 8007c5e:	2103      	movs	r1, #3
 8007c60:	ab03      	add	r3, sp, #12
 8007c62:	9301      	str	r3, [sp, #4]
 8007c64:	ab02      	add	r3, sp, #8
 8007c66:	9300      	str	r3, [sp, #0]
 8007c68:	ec45 4b10 	vmov	d0, r4, r5
 8007c6c:	4653      	mov	r3, sl
 8007c6e:	4632      	mov	r2, r6
 8007c70:	f001 fe5a 	bl	8009928 <_dtoa_r>
 8007c74:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007c78:	4607      	mov	r7, r0
 8007c7a:	d102      	bne.n	8007c82 <__cvt+0x66>
 8007c7c:	f019 0f01 	tst.w	r9, #1
 8007c80:	d022      	beq.n	8007cc8 <__cvt+0xac>
 8007c82:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c86:	eb07 0906 	add.w	r9, r7, r6
 8007c8a:	d110      	bne.n	8007cae <__cvt+0x92>
 8007c8c:	783b      	ldrb	r3, [r7, #0]
 8007c8e:	2b30      	cmp	r3, #48	; 0x30
 8007c90:	d10a      	bne.n	8007ca8 <__cvt+0x8c>
 8007c92:	2200      	movs	r2, #0
 8007c94:	2300      	movs	r3, #0
 8007c96:	4620      	mov	r0, r4
 8007c98:	4629      	mov	r1, r5
 8007c9a:	f7f8 ff1d 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c9e:	b918      	cbnz	r0, 8007ca8 <__cvt+0x8c>
 8007ca0:	f1c6 0601 	rsb	r6, r6, #1
 8007ca4:	f8ca 6000 	str.w	r6, [sl]
 8007ca8:	f8da 3000 	ldr.w	r3, [sl]
 8007cac:	4499      	add	r9, r3
 8007cae:	2200      	movs	r2, #0
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	4629      	mov	r1, r5
 8007cb6:	f7f8 ff0f 	bl	8000ad8 <__aeabi_dcmpeq>
 8007cba:	b108      	cbz	r0, 8007cc0 <__cvt+0xa4>
 8007cbc:	f8cd 900c 	str.w	r9, [sp, #12]
 8007cc0:	2230      	movs	r2, #48	; 0x30
 8007cc2:	9b03      	ldr	r3, [sp, #12]
 8007cc4:	454b      	cmp	r3, r9
 8007cc6:	d307      	bcc.n	8007cd8 <__cvt+0xbc>
 8007cc8:	9b03      	ldr	r3, [sp, #12]
 8007cca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ccc:	1bdb      	subs	r3, r3, r7
 8007cce:	4638      	mov	r0, r7
 8007cd0:	6013      	str	r3, [r2, #0]
 8007cd2:	b004      	add	sp, #16
 8007cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cd8:	1c59      	adds	r1, r3, #1
 8007cda:	9103      	str	r1, [sp, #12]
 8007cdc:	701a      	strb	r2, [r3, #0]
 8007cde:	e7f0      	b.n	8007cc2 <__cvt+0xa6>

08007ce0 <__exponent>:
 8007ce0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2900      	cmp	r1, #0
 8007ce6:	bfb8      	it	lt
 8007ce8:	4249      	neglt	r1, r1
 8007cea:	f803 2b02 	strb.w	r2, [r3], #2
 8007cee:	bfb4      	ite	lt
 8007cf0:	222d      	movlt	r2, #45	; 0x2d
 8007cf2:	222b      	movge	r2, #43	; 0x2b
 8007cf4:	2909      	cmp	r1, #9
 8007cf6:	7042      	strb	r2, [r0, #1]
 8007cf8:	dd2a      	ble.n	8007d50 <__exponent+0x70>
 8007cfa:	f10d 0407 	add.w	r4, sp, #7
 8007cfe:	46a4      	mov	ip, r4
 8007d00:	270a      	movs	r7, #10
 8007d02:	46a6      	mov	lr, r4
 8007d04:	460a      	mov	r2, r1
 8007d06:	fb91 f6f7 	sdiv	r6, r1, r7
 8007d0a:	fb07 1516 	mls	r5, r7, r6, r1
 8007d0e:	3530      	adds	r5, #48	; 0x30
 8007d10:	2a63      	cmp	r2, #99	; 0x63
 8007d12:	f104 34ff 	add.w	r4, r4, #4294967295
 8007d16:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007d1a:	4631      	mov	r1, r6
 8007d1c:	dcf1      	bgt.n	8007d02 <__exponent+0x22>
 8007d1e:	3130      	adds	r1, #48	; 0x30
 8007d20:	f1ae 0502 	sub.w	r5, lr, #2
 8007d24:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007d28:	1c44      	adds	r4, r0, #1
 8007d2a:	4629      	mov	r1, r5
 8007d2c:	4561      	cmp	r1, ip
 8007d2e:	d30a      	bcc.n	8007d46 <__exponent+0x66>
 8007d30:	f10d 0209 	add.w	r2, sp, #9
 8007d34:	eba2 020e 	sub.w	r2, r2, lr
 8007d38:	4565      	cmp	r5, ip
 8007d3a:	bf88      	it	hi
 8007d3c:	2200      	movhi	r2, #0
 8007d3e:	4413      	add	r3, r2
 8007d40:	1a18      	subs	r0, r3, r0
 8007d42:	b003      	add	sp, #12
 8007d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d4a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007d4e:	e7ed      	b.n	8007d2c <__exponent+0x4c>
 8007d50:	2330      	movs	r3, #48	; 0x30
 8007d52:	3130      	adds	r1, #48	; 0x30
 8007d54:	7083      	strb	r3, [r0, #2]
 8007d56:	70c1      	strb	r1, [r0, #3]
 8007d58:	1d03      	adds	r3, r0, #4
 8007d5a:	e7f1      	b.n	8007d40 <__exponent+0x60>

08007d5c <_printf_float>:
 8007d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d60:	ed2d 8b02 	vpush	{d8}
 8007d64:	b08d      	sub	sp, #52	; 0x34
 8007d66:	460c      	mov	r4, r1
 8007d68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007d6c:	4616      	mov	r6, r2
 8007d6e:	461f      	mov	r7, r3
 8007d70:	4605      	mov	r5, r0
 8007d72:	f002 ff35 	bl	800abe0 <_localeconv_r>
 8007d76:	f8d0 a000 	ldr.w	sl, [r0]
 8007d7a:	4650      	mov	r0, sl
 8007d7c:	f7f8 fa30 	bl	80001e0 <strlen>
 8007d80:	2300      	movs	r3, #0
 8007d82:	930a      	str	r3, [sp, #40]	; 0x28
 8007d84:	6823      	ldr	r3, [r4, #0]
 8007d86:	9305      	str	r3, [sp, #20]
 8007d88:	f8d8 3000 	ldr.w	r3, [r8]
 8007d8c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007d90:	3307      	adds	r3, #7
 8007d92:	f023 0307 	bic.w	r3, r3, #7
 8007d96:	f103 0208 	add.w	r2, r3, #8
 8007d9a:	f8c8 2000 	str.w	r2, [r8]
 8007d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007da6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007daa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007dae:	9307      	str	r3, [sp, #28]
 8007db0:	f8cd 8018 	str.w	r8, [sp, #24]
 8007db4:	ee08 0a10 	vmov	s16, r0
 8007db8:	4b9f      	ldr	r3, [pc, #636]	; (8008038 <_printf_float+0x2dc>)
 8007dba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8007dc2:	f7f8 febb 	bl	8000b3c <__aeabi_dcmpun>
 8007dc6:	bb88      	cbnz	r0, 8007e2c <_printf_float+0xd0>
 8007dc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dcc:	4b9a      	ldr	r3, [pc, #616]	; (8008038 <_printf_float+0x2dc>)
 8007dce:	f04f 32ff 	mov.w	r2, #4294967295
 8007dd2:	f7f8 fe95 	bl	8000b00 <__aeabi_dcmple>
 8007dd6:	bb48      	cbnz	r0, 8007e2c <_printf_float+0xd0>
 8007dd8:	2200      	movs	r2, #0
 8007dda:	2300      	movs	r3, #0
 8007ddc:	4640      	mov	r0, r8
 8007dde:	4649      	mov	r1, r9
 8007de0:	f7f8 fe84 	bl	8000aec <__aeabi_dcmplt>
 8007de4:	b110      	cbz	r0, 8007dec <_printf_float+0x90>
 8007de6:	232d      	movs	r3, #45	; 0x2d
 8007de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dec:	4b93      	ldr	r3, [pc, #588]	; (800803c <_printf_float+0x2e0>)
 8007dee:	4894      	ldr	r0, [pc, #592]	; (8008040 <_printf_float+0x2e4>)
 8007df0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007df4:	bf94      	ite	ls
 8007df6:	4698      	movls	r8, r3
 8007df8:	4680      	movhi	r8, r0
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	6123      	str	r3, [r4, #16]
 8007dfe:	9b05      	ldr	r3, [sp, #20]
 8007e00:	f023 0204 	bic.w	r2, r3, #4
 8007e04:	6022      	str	r2, [r4, #0]
 8007e06:	f04f 0900 	mov.w	r9, #0
 8007e0a:	9700      	str	r7, [sp, #0]
 8007e0c:	4633      	mov	r3, r6
 8007e0e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007e10:	4621      	mov	r1, r4
 8007e12:	4628      	mov	r0, r5
 8007e14:	f000 f9d8 	bl	80081c8 <_printf_common>
 8007e18:	3001      	adds	r0, #1
 8007e1a:	f040 8090 	bne.w	8007f3e <_printf_float+0x1e2>
 8007e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e22:	b00d      	add	sp, #52	; 0x34
 8007e24:	ecbd 8b02 	vpop	{d8}
 8007e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e2c:	4642      	mov	r2, r8
 8007e2e:	464b      	mov	r3, r9
 8007e30:	4640      	mov	r0, r8
 8007e32:	4649      	mov	r1, r9
 8007e34:	f7f8 fe82 	bl	8000b3c <__aeabi_dcmpun>
 8007e38:	b140      	cbz	r0, 8007e4c <_printf_float+0xf0>
 8007e3a:	464b      	mov	r3, r9
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	bfbc      	itt	lt
 8007e40:	232d      	movlt	r3, #45	; 0x2d
 8007e42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007e46:	487f      	ldr	r0, [pc, #508]	; (8008044 <_printf_float+0x2e8>)
 8007e48:	4b7f      	ldr	r3, [pc, #508]	; (8008048 <_printf_float+0x2ec>)
 8007e4a:	e7d1      	b.n	8007df0 <_printf_float+0x94>
 8007e4c:	6863      	ldr	r3, [r4, #4]
 8007e4e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007e52:	9206      	str	r2, [sp, #24]
 8007e54:	1c5a      	adds	r2, r3, #1
 8007e56:	d13f      	bne.n	8007ed8 <_printf_float+0x17c>
 8007e58:	2306      	movs	r3, #6
 8007e5a:	6063      	str	r3, [r4, #4]
 8007e5c:	9b05      	ldr	r3, [sp, #20]
 8007e5e:	6861      	ldr	r1, [r4, #4]
 8007e60:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007e64:	2300      	movs	r3, #0
 8007e66:	9303      	str	r3, [sp, #12]
 8007e68:	ab0a      	add	r3, sp, #40	; 0x28
 8007e6a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007e6e:	ab09      	add	r3, sp, #36	; 0x24
 8007e70:	ec49 8b10 	vmov	d0, r8, r9
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	6022      	str	r2, [r4, #0]
 8007e78:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	f7ff fecd 	bl	8007c1c <__cvt>
 8007e82:	9b06      	ldr	r3, [sp, #24]
 8007e84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e86:	2b47      	cmp	r3, #71	; 0x47
 8007e88:	4680      	mov	r8, r0
 8007e8a:	d108      	bne.n	8007e9e <_printf_float+0x142>
 8007e8c:	1cc8      	adds	r0, r1, #3
 8007e8e:	db02      	blt.n	8007e96 <_printf_float+0x13a>
 8007e90:	6863      	ldr	r3, [r4, #4]
 8007e92:	4299      	cmp	r1, r3
 8007e94:	dd41      	ble.n	8007f1a <_printf_float+0x1be>
 8007e96:	f1ab 0b02 	sub.w	fp, fp, #2
 8007e9a:	fa5f fb8b 	uxtb.w	fp, fp
 8007e9e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ea2:	d820      	bhi.n	8007ee6 <_printf_float+0x18a>
 8007ea4:	3901      	subs	r1, #1
 8007ea6:	465a      	mov	r2, fp
 8007ea8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007eac:	9109      	str	r1, [sp, #36]	; 0x24
 8007eae:	f7ff ff17 	bl	8007ce0 <__exponent>
 8007eb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007eb4:	1813      	adds	r3, r2, r0
 8007eb6:	2a01      	cmp	r2, #1
 8007eb8:	4681      	mov	r9, r0
 8007eba:	6123      	str	r3, [r4, #16]
 8007ebc:	dc02      	bgt.n	8007ec4 <_printf_float+0x168>
 8007ebe:	6822      	ldr	r2, [r4, #0]
 8007ec0:	07d2      	lsls	r2, r2, #31
 8007ec2:	d501      	bpl.n	8007ec8 <_printf_float+0x16c>
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	6123      	str	r3, [r4, #16]
 8007ec8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d09c      	beq.n	8007e0a <_printf_float+0xae>
 8007ed0:	232d      	movs	r3, #45	; 0x2d
 8007ed2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ed6:	e798      	b.n	8007e0a <_printf_float+0xae>
 8007ed8:	9a06      	ldr	r2, [sp, #24]
 8007eda:	2a47      	cmp	r2, #71	; 0x47
 8007edc:	d1be      	bne.n	8007e5c <_printf_float+0x100>
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1bc      	bne.n	8007e5c <_printf_float+0x100>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e7b9      	b.n	8007e5a <_printf_float+0xfe>
 8007ee6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007eea:	d118      	bne.n	8007f1e <_printf_float+0x1c2>
 8007eec:	2900      	cmp	r1, #0
 8007eee:	6863      	ldr	r3, [r4, #4]
 8007ef0:	dd0b      	ble.n	8007f0a <_printf_float+0x1ae>
 8007ef2:	6121      	str	r1, [r4, #16]
 8007ef4:	b913      	cbnz	r3, 8007efc <_printf_float+0x1a0>
 8007ef6:	6822      	ldr	r2, [r4, #0]
 8007ef8:	07d0      	lsls	r0, r2, #31
 8007efa:	d502      	bpl.n	8007f02 <_printf_float+0x1a6>
 8007efc:	3301      	adds	r3, #1
 8007efe:	440b      	add	r3, r1
 8007f00:	6123      	str	r3, [r4, #16]
 8007f02:	65a1      	str	r1, [r4, #88]	; 0x58
 8007f04:	f04f 0900 	mov.w	r9, #0
 8007f08:	e7de      	b.n	8007ec8 <_printf_float+0x16c>
 8007f0a:	b913      	cbnz	r3, 8007f12 <_printf_float+0x1b6>
 8007f0c:	6822      	ldr	r2, [r4, #0]
 8007f0e:	07d2      	lsls	r2, r2, #31
 8007f10:	d501      	bpl.n	8007f16 <_printf_float+0x1ba>
 8007f12:	3302      	adds	r3, #2
 8007f14:	e7f4      	b.n	8007f00 <_printf_float+0x1a4>
 8007f16:	2301      	movs	r3, #1
 8007f18:	e7f2      	b.n	8007f00 <_printf_float+0x1a4>
 8007f1a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007f1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f20:	4299      	cmp	r1, r3
 8007f22:	db05      	blt.n	8007f30 <_printf_float+0x1d4>
 8007f24:	6823      	ldr	r3, [r4, #0]
 8007f26:	6121      	str	r1, [r4, #16]
 8007f28:	07d8      	lsls	r0, r3, #31
 8007f2a:	d5ea      	bpl.n	8007f02 <_printf_float+0x1a6>
 8007f2c:	1c4b      	adds	r3, r1, #1
 8007f2e:	e7e7      	b.n	8007f00 <_printf_float+0x1a4>
 8007f30:	2900      	cmp	r1, #0
 8007f32:	bfd4      	ite	le
 8007f34:	f1c1 0202 	rsble	r2, r1, #2
 8007f38:	2201      	movgt	r2, #1
 8007f3a:	4413      	add	r3, r2
 8007f3c:	e7e0      	b.n	8007f00 <_printf_float+0x1a4>
 8007f3e:	6823      	ldr	r3, [r4, #0]
 8007f40:	055a      	lsls	r2, r3, #21
 8007f42:	d407      	bmi.n	8007f54 <_printf_float+0x1f8>
 8007f44:	6923      	ldr	r3, [r4, #16]
 8007f46:	4642      	mov	r2, r8
 8007f48:	4631      	mov	r1, r6
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	47b8      	blx	r7
 8007f4e:	3001      	adds	r0, #1
 8007f50:	d12c      	bne.n	8007fac <_printf_float+0x250>
 8007f52:	e764      	b.n	8007e1e <_printf_float+0xc2>
 8007f54:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f58:	f240 80e0 	bls.w	800811c <_printf_float+0x3c0>
 8007f5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f60:	2200      	movs	r2, #0
 8007f62:	2300      	movs	r3, #0
 8007f64:	f7f8 fdb8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	d034      	beq.n	8007fd6 <_printf_float+0x27a>
 8007f6c:	4a37      	ldr	r2, [pc, #220]	; (800804c <_printf_float+0x2f0>)
 8007f6e:	2301      	movs	r3, #1
 8007f70:	4631      	mov	r1, r6
 8007f72:	4628      	mov	r0, r5
 8007f74:	47b8      	blx	r7
 8007f76:	3001      	adds	r0, #1
 8007f78:	f43f af51 	beq.w	8007e1e <_printf_float+0xc2>
 8007f7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f80:	429a      	cmp	r2, r3
 8007f82:	db02      	blt.n	8007f8a <_printf_float+0x22e>
 8007f84:	6823      	ldr	r3, [r4, #0]
 8007f86:	07d8      	lsls	r0, r3, #31
 8007f88:	d510      	bpl.n	8007fac <_printf_float+0x250>
 8007f8a:	ee18 3a10 	vmov	r3, s16
 8007f8e:	4652      	mov	r2, sl
 8007f90:	4631      	mov	r1, r6
 8007f92:	4628      	mov	r0, r5
 8007f94:	47b8      	blx	r7
 8007f96:	3001      	adds	r0, #1
 8007f98:	f43f af41 	beq.w	8007e1e <_printf_float+0xc2>
 8007f9c:	f04f 0800 	mov.w	r8, #0
 8007fa0:	f104 091a 	add.w	r9, r4, #26
 8007fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	4543      	cmp	r3, r8
 8007faa:	dc09      	bgt.n	8007fc0 <_printf_float+0x264>
 8007fac:	6823      	ldr	r3, [r4, #0]
 8007fae:	079b      	lsls	r3, r3, #30
 8007fb0:	f100 8105 	bmi.w	80081be <_printf_float+0x462>
 8007fb4:	68e0      	ldr	r0, [r4, #12]
 8007fb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fb8:	4298      	cmp	r0, r3
 8007fba:	bfb8      	it	lt
 8007fbc:	4618      	movlt	r0, r3
 8007fbe:	e730      	b.n	8007e22 <_printf_float+0xc6>
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	464a      	mov	r2, r9
 8007fc4:	4631      	mov	r1, r6
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	47b8      	blx	r7
 8007fca:	3001      	adds	r0, #1
 8007fcc:	f43f af27 	beq.w	8007e1e <_printf_float+0xc2>
 8007fd0:	f108 0801 	add.w	r8, r8, #1
 8007fd4:	e7e6      	b.n	8007fa4 <_printf_float+0x248>
 8007fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	dc39      	bgt.n	8008050 <_printf_float+0x2f4>
 8007fdc:	4a1b      	ldr	r2, [pc, #108]	; (800804c <_printf_float+0x2f0>)
 8007fde:	2301      	movs	r3, #1
 8007fe0:	4631      	mov	r1, r6
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	47b8      	blx	r7
 8007fe6:	3001      	adds	r0, #1
 8007fe8:	f43f af19 	beq.w	8007e1e <_printf_float+0xc2>
 8007fec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	d102      	bne.n	8007ffa <_printf_float+0x29e>
 8007ff4:	6823      	ldr	r3, [r4, #0]
 8007ff6:	07d9      	lsls	r1, r3, #31
 8007ff8:	d5d8      	bpl.n	8007fac <_printf_float+0x250>
 8007ffa:	ee18 3a10 	vmov	r3, s16
 8007ffe:	4652      	mov	r2, sl
 8008000:	4631      	mov	r1, r6
 8008002:	4628      	mov	r0, r5
 8008004:	47b8      	blx	r7
 8008006:	3001      	adds	r0, #1
 8008008:	f43f af09 	beq.w	8007e1e <_printf_float+0xc2>
 800800c:	f04f 0900 	mov.w	r9, #0
 8008010:	f104 0a1a 	add.w	sl, r4, #26
 8008014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008016:	425b      	negs	r3, r3
 8008018:	454b      	cmp	r3, r9
 800801a:	dc01      	bgt.n	8008020 <_printf_float+0x2c4>
 800801c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800801e:	e792      	b.n	8007f46 <_printf_float+0x1ea>
 8008020:	2301      	movs	r3, #1
 8008022:	4652      	mov	r2, sl
 8008024:	4631      	mov	r1, r6
 8008026:	4628      	mov	r0, r5
 8008028:	47b8      	blx	r7
 800802a:	3001      	adds	r0, #1
 800802c:	f43f aef7 	beq.w	8007e1e <_printf_float+0xc2>
 8008030:	f109 0901 	add.w	r9, r9, #1
 8008034:	e7ee      	b.n	8008014 <_printf_float+0x2b8>
 8008036:	bf00      	nop
 8008038:	7fefffff 	.word	0x7fefffff
 800803c:	0800e3a8 	.word	0x0800e3a8
 8008040:	0800e3ac 	.word	0x0800e3ac
 8008044:	0800e3b4 	.word	0x0800e3b4
 8008048:	0800e3b0 	.word	0x0800e3b0
 800804c:	0800e7b9 	.word	0x0800e7b9
 8008050:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008052:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008054:	429a      	cmp	r2, r3
 8008056:	bfa8      	it	ge
 8008058:	461a      	movge	r2, r3
 800805a:	2a00      	cmp	r2, #0
 800805c:	4691      	mov	r9, r2
 800805e:	dc37      	bgt.n	80080d0 <_printf_float+0x374>
 8008060:	f04f 0b00 	mov.w	fp, #0
 8008064:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008068:	f104 021a 	add.w	r2, r4, #26
 800806c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800806e:	9305      	str	r3, [sp, #20]
 8008070:	eba3 0309 	sub.w	r3, r3, r9
 8008074:	455b      	cmp	r3, fp
 8008076:	dc33      	bgt.n	80080e0 <_printf_float+0x384>
 8008078:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800807c:	429a      	cmp	r2, r3
 800807e:	db3b      	blt.n	80080f8 <_printf_float+0x39c>
 8008080:	6823      	ldr	r3, [r4, #0]
 8008082:	07da      	lsls	r2, r3, #31
 8008084:	d438      	bmi.n	80080f8 <_printf_float+0x39c>
 8008086:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008088:	9b05      	ldr	r3, [sp, #20]
 800808a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800808c:	1ad3      	subs	r3, r2, r3
 800808e:	eba2 0901 	sub.w	r9, r2, r1
 8008092:	4599      	cmp	r9, r3
 8008094:	bfa8      	it	ge
 8008096:	4699      	movge	r9, r3
 8008098:	f1b9 0f00 	cmp.w	r9, #0
 800809c:	dc35      	bgt.n	800810a <_printf_float+0x3ae>
 800809e:	f04f 0800 	mov.w	r8, #0
 80080a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080a6:	f104 0a1a 	add.w	sl, r4, #26
 80080aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080ae:	1a9b      	subs	r3, r3, r2
 80080b0:	eba3 0309 	sub.w	r3, r3, r9
 80080b4:	4543      	cmp	r3, r8
 80080b6:	f77f af79 	ble.w	8007fac <_printf_float+0x250>
 80080ba:	2301      	movs	r3, #1
 80080bc:	4652      	mov	r2, sl
 80080be:	4631      	mov	r1, r6
 80080c0:	4628      	mov	r0, r5
 80080c2:	47b8      	blx	r7
 80080c4:	3001      	adds	r0, #1
 80080c6:	f43f aeaa 	beq.w	8007e1e <_printf_float+0xc2>
 80080ca:	f108 0801 	add.w	r8, r8, #1
 80080ce:	e7ec      	b.n	80080aa <_printf_float+0x34e>
 80080d0:	4613      	mov	r3, r2
 80080d2:	4631      	mov	r1, r6
 80080d4:	4642      	mov	r2, r8
 80080d6:	4628      	mov	r0, r5
 80080d8:	47b8      	blx	r7
 80080da:	3001      	adds	r0, #1
 80080dc:	d1c0      	bne.n	8008060 <_printf_float+0x304>
 80080de:	e69e      	b.n	8007e1e <_printf_float+0xc2>
 80080e0:	2301      	movs	r3, #1
 80080e2:	4631      	mov	r1, r6
 80080e4:	4628      	mov	r0, r5
 80080e6:	9205      	str	r2, [sp, #20]
 80080e8:	47b8      	blx	r7
 80080ea:	3001      	adds	r0, #1
 80080ec:	f43f ae97 	beq.w	8007e1e <_printf_float+0xc2>
 80080f0:	9a05      	ldr	r2, [sp, #20]
 80080f2:	f10b 0b01 	add.w	fp, fp, #1
 80080f6:	e7b9      	b.n	800806c <_printf_float+0x310>
 80080f8:	ee18 3a10 	vmov	r3, s16
 80080fc:	4652      	mov	r2, sl
 80080fe:	4631      	mov	r1, r6
 8008100:	4628      	mov	r0, r5
 8008102:	47b8      	blx	r7
 8008104:	3001      	adds	r0, #1
 8008106:	d1be      	bne.n	8008086 <_printf_float+0x32a>
 8008108:	e689      	b.n	8007e1e <_printf_float+0xc2>
 800810a:	9a05      	ldr	r2, [sp, #20]
 800810c:	464b      	mov	r3, r9
 800810e:	4442      	add	r2, r8
 8008110:	4631      	mov	r1, r6
 8008112:	4628      	mov	r0, r5
 8008114:	47b8      	blx	r7
 8008116:	3001      	adds	r0, #1
 8008118:	d1c1      	bne.n	800809e <_printf_float+0x342>
 800811a:	e680      	b.n	8007e1e <_printf_float+0xc2>
 800811c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800811e:	2a01      	cmp	r2, #1
 8008120:	dc01      	bgt.n	8008126 <_printf_float+0x3ca>
 8008122:	07db      	lsls	r3, r3, #31
 8008124:	d538      	bpl.n	8008198 <_printf_float+0x43c>
 8008126:	2301      	movs	r3, #1
 8008128:	4642      	mov	r2, r8
 800812a:	4631      	mov	r1, r6
 800812c:	4628      	mov	r0, r5
 800812e:	47b8      	blx	r7
 8008130:	3001      	adds	r0, #1
 8008132:	f43f ae74 	beq.w	8007e1e <_printf_float+0xc2>
 8008136:	ee18 3a10 	vmov	r3, s16
 800813a:	4652      	mov	r2, sl
 800813c:	4631      	mov	r1, r6
 800813e:	4628      	mov	r0, r5
 8008140:	47b8      	blx	r7
 8008142:	3001      	adds	r0, #1
 8008144:	f43f ae6b 	beq.w	8007e1e <_printf_float+0xc2>
 8008148:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800814c:	2200      	movs	r2, #0
 800814e:	2300      	movs	r3, #0
 8008150:	f7f8 fcc2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008154:	b9d8      	cbnz	r0, 800818e <_printf_float+0x432>
 8008156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008158:	f108 0201 	add.w	r2, r8, #1
 800815c:	3b01      	subs	r3, #1
 800815e:	4631      	mov	r1, r6
 8008160:	4628      	mov	r0, r5
 8008162:	47b8      	blx	r7
 8008164:	3001      	adds	r0, #1
 8008166:	d10e      	bne.n	8008186 <_printf_float+0x42a>
 8008168:	e659      	b.n	8007e1e <_printf_float+0xc2>
 800816a:	2301      	movs	r3, #1
 800816c:	4652      	mov	r2, sl
 800816e:	4631      	mov	r1, r6
 8008170:	4628      	mov	r0, r5
 8008172:	47b8      	blx	r7
 8008174:	3001      	adds	r0, #1
 8008176:	f43f ae52 	beq.w	8007e1e <_printf_float+0xc2>
 800817a:	f108 0801 	add.w	r8, r8, #1
 800817e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008180:	3b01      	subs	r3, #1
 8008182:	4543      	cmp	r3, r8
 8008184:	dcf1      	bgt.n	800816a <_printf_float+0x40e>
 8008186:	464b      	mov	r3, r9
 8008188:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800818c:	e6dc      	b.n	8007f48 <_printf_float+0x1ec>
 800818e:	f04f 0800 	mov.w	r8, #0
 8008192:	f104 0a1a 	add.w	sl, r4, #26
 8008196:	e7f2      	b.n	800817e <_printf_float+0x422>
 8008198:	2301      	movs	r3, #1
 800819a:	4642      	mov	r2, r8
 800819c:	e7df      	b.n	800815e <_printf_float+0x402>
 800819e:	2301      	movs	r3, #1
 80081a0:	464a      	mov	r2, r9
 80081a2:	4631      	mov	r1, r6
 80081a4:	4628      	mov	r0, r5
 80081a6:	47b8      	blx	r7
 80081a8:	3001      	adds	r0, #1
 80081aa:	f43f ae38 	beq.w	8007e1e <_printf_float+0xc2>
 80081ae:	f108 0801 	add.w	r8, r8, #1
 80081b2:	68e3      	ldr	r3, [r4, #12]
 80081b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081b6:	1a5b      	subs	r3, r3, r1
 80081b8:	4543      	cmp	r3, r8
 80081ba:	dcf0      	bgt.n	800819e <_printf_float+0x442>
 80081bc:	e6fa      	b.n	8007fb4 <_printf_float+0x258>
 80081be:	f04f 0800 	mov.w	r8, #0
 80081c2:	f104 0919 	add.w	r9, r4, #25
 80081c6:	e7f4      	b.n	80081b2 <_printf_float+0x456>

080081c8 <_printf_common>:
 80081c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081cc:	4616      	mov	r6, r2
 80081ce:	4699      	mov	r9, r3
 80081d0:	688a      	ldr	r2, [r1, #8]
 80081d2:	690b      	ldr	r3, [r1, #16]
 80081d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081d8:	4293      	cmp	r3, r2
 80081da:	bfb8      	it	lt
 80081dc:	4613      	movlt	r3, r2
 80081de:	6033      	str	r3, [r6, #0]
 80081e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081e4:	4607      	mov	r7, r0
 80081e6:	460c      	mov	r4, r1
 80081e8:	b10a      	cbz	r2, 80081ee <_printf_common+0x26>
 80081ea:	3301      	adds	r3, #1
 80081ec:	6033      	str	r3, [r6, #0]
 80081ee:	6823      	ldr	r3, [r4, #0]
 80081f0:	0699      	lsls	r1, r3, #26
 80081f2:	bf42      	ittt	mi
 80081f4:	6833      	ldrmi	r3, [r6, #0]
 80081f6:	3302      	addmi	r3, #2
 80081f8:	6033      	strmi	r3, [r6, #0]
 80081fa:	6825      	ldr	r5, [r4, #0]
 80081fc:	f015 0506 	ands.w	r5, r5, #6
 8008200:	d106      	bne.n	8008210 <_printf_common+0x48>
 8008202:	f104 0a19 	add.w	sl, r4, #25
 8008206:	68e3      	ldr	r3, [r4, #12]
 8008208:	6832      	ldr	r2, [r6, #0]
 800820a:	1a9b      	subs	r3, r3, r2
 800820c:	42ab      	cmp	r3, r5
 800820e:	dc26      	bgt.n	800825e <_printf_common+0x96>
 8008210:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008214:	1e13      	subs	r3, r2, #0
 8008216:	6822      	ldr	r2, [r4, #0]
 8008218:	bf18      	it	ne
 800821a:	2301      	movne	r3, #1
 800821c:	0692      	lsls	r2, r2, #26
 800821e:	d42b      	bmi.n	8008278 <_printf_common+0xb0>
 8008220:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008224:	4649      	mov	r1, r9
 8008226:	4638      	mov	r0, r7
 8008228:	47c0      	blx	r8
 800822a:	3001      	adds	r0, #1
 800822c:	d01e      	beq.n	800826c <_printf_common+0xa4>
 800822e:	6823      	ldr	r3, [r4, #0]
 8008230:	68e5      	ldr	r5, [r4, #12]
 8008232:	6832      	ldr	r2, [r6, #0]
 8008234:	f003 0306 	and.w	r3, r3, #6
 8008238:	2b04      	cmp	r3, #4
 800823a:	bf08      	it	eq
 800823c:	1aad      	subeq	r5, r5, r2
 800823e:	68a3      	ldr	r3, [r4, #8]
 8008240:	6922      	ldr	r2, [r4, #16]
 8008242:	bf0c      	ite	eq
 8008244:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008248:	2500      	movne	r5, #0
 800824a:	4293      	cmp	r3, r2
 800824c:	bfc4      	itt	gt
 800824e:	1a9b      	subgt	r3, r3, r2
 8008250:	18ed      	addgt	r5, r5, r3
 8008252:	2600      	movs	r6, #0
 8008254:	341a      	adds	r4, #26
 8008256:	42b5      	cmp	r5, r6
 8008258:	d11a      	bne.n	8008290 <_printf_common+0xc8>
 800825a:	2000      	movs	r0, #0
 800825c:	e008      	b.n	8008270 <_printf_common+0xa8>
 800825e:	2301      	movs	r3, #1
 8008260:	4652      	mov	r2, sl
 8008262:	4649      	mov	r1, r9
 8008264:	4638      	mov	r0, r7
 8008266:	47c0      	blx	r8
 8008268:	3001      	adds	r0, #1
 800826a:	d103      	bne.n	8008274 <_printf_common+0xac>
 800826c:	f04f 30ff 	mov.w	r0, #4294967295
 8008270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008274:	3501      	adds	r5, #1
 8008276:	e7c6      	b.n	8008206 <_printf_common+0x3e>
 8008278:	18e1      	adds	r1, r4, r3
 800827a:	1c5a      	adds	r2, r3, #1
 800827c:	2030      	movs	r0, #48	; 0x30
 800827e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008282:	4422      	add	r2, r4
 8008284:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008288:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800828c:	3302      	adds	r3, #2
 800828e:	e7c7      	b.n	8008220 <_printf_common+0x58>
 8008290:	2301      	movs	r3, #1
 8008292:	4622      	mov	r2, r4
 8008294:	4649      	mov	r1, r9
 8008296:	4638      	mov	r0, r7
 8008298:	47c0      	blx	r8
 800829a:	3001      	adds	r0, #1
 800829c:	d0e6      	beq.n	800826c <_printf_common+0xa4>
 800829e:	3601      	adds	r6, #1
 80082a0:	e7d9      	b.n	8008256 <_printf_common+0x8e>
	...

080082a4 <_printf_i>:
 80082a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082a8:	460c      	mov	r4, r1
 80082aa:	4691      	mov	r9, r2
 80082ac:	7e27      	ldrb	r7, [r4, #24]
 80082ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80082b0:	2f78      	cmp	r7, #120	; 0x78
 80082b2:	4680      	mov	r8, r0
 80082b4:	469a      	mov	sl, r3
 80082b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082ba:	d807      	bhi.n	80082cc <_printf_i+0x28>
 80082bc:	2f62      	cmp	r7, #98	; 0x62
 80082be:	d80a      	bhi.n	80082d6 <_printf_i+0x32>
 80082c0:	2f00      	cmp	r7, #0
 80082c2:	f000 80d8 	beq.w	8008476 <_printf_i+0x1d2>
 80082c6:	2f58      	cmp	r7, #88	; 0x58
 80082c8:	f000 80a3 	beq.w	8008412 <_printf_i+0x16e>
 80082cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80082d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082d4:	e03a      	b.n	800834c <_printf_i+0xa8>
 80082d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082da:	2b15      	cmp	r3, #21
 80082dc:	d8f6      	bhi.n	80082cc <_printf_i+0x28>
 80082de:	a001      	add	r0, pc, #4	; (adr r0, 80082e4 <_printf_i+0x40>)
 80082e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80082e4:	0800833d 	.word	0x0800833d
 80082e8:	08008351 	.word	0x08008351
 80082ec:	080082cd 	.word	0x080082cd
 80082f0:	080082cd 	.word	0x080082cd
 80082f4:	080082cd 	.word	0x080082cd
 80082f8:	080082cd 	.word	0x080082cd
 80082fc:	08008351 	.word	0x08008351
 8008300:	080082cd 	.word	0x080082cd
 8008304:	080082cd 	.word	0x080082cd
 8008308:	080082cd 	.word	0x080082cd
 800830c:	080082cd 	.word	0x080082cd
 8008310:	0800845d 	.word	0x0800845d
 8008314:	08008381 	.word	0x08008381
 8008318:	0800843f 	.word	0x0800843f
 800831c:	080082cd 	.word	0x080082cd
 8008320:	080082cd 	.word	0x080082cd
 8008324:	0800847f 	.word	0x0800847f
 8008328:	080082cd 	.word	0x080082cd
 800832c:	08008381 	.word	0x08008381
 8008330:	080082cd 	.word	0x080082cd
 8008334:	080082cd 	.word	0x080082cd
 8008338:	08008447 	.word	0x08008447
 800833c:	680b      	ldr	r3, [r1, #0]
 800833e:	1d1a      	adds	r2, r3, #4
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	600a      	str	r2, [r1, #0]
 8008344:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008348:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800834c:	2301      	movs	r3, #1
 800834e:	e0a3      	b.n	8008498 <_printf_i+0x1f4>
 8008350:	6825      	ldr	r5, [r4, #0]
 8008352:	6808      	ldr	r0, [r1, #0]
 8008354:	062e      	lsls	r6, r5, #24
 8008356:	f100 0304 	add.w	r3, r0, #4
 800835a:	d50a      	bpl.n	8008372 <_printf_i+0xce>
 800835c:	6805      	ldr	r5, [r0, #0]
 800835e:	600b      	str	r3, [r1, #0]
 8008360:	2d00      	cmp	r5, #0
 8008362:	da03      	bge.n	800836c <_printf_i+0xc8>
 8008364:	232d      	movs	r3, #45	; 0x2d
 8008366:	426d      	negs	r5, r5
 8008368:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800836c:	485e      	ldr	r0, [pc, #376]	; (80084e8 <_printf_i+0x244>)
 800836e:	230a      	movs	r3, #10
 8008370:	e019      	b.n	80083a6 <_printf_i+0x102>
 8008372:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008376:	6805      	ldr	r5, [r0, #0]
 8008378:	600b      	str	r3, [r1, #0]
 800837a:	bf18      	it	ne
 800837c:	b22d      	sxthne	r5, r5
 800837e:	e7ef      	b.n	8008360 <_printf_i+0xbc>
 8008380:	680b      	ldr	r3, [r1, #0]
 8008382:	6825      	ldr	r5, [r4, #0]
 8008384:	1d18      	adds	r0, r3, #4
 8008386:	6008      	str	r0, [r1, #0]
 8008388:	0628      	lsls	r0, r5, #24
 800838a:	d501      	bpl.n	8008390 <_printf_i+0xec>
 800838c:	681d      	ldr	r5, [r3, #0]
 800838e:	e002      	b.n	8008396 <_printf_i+0xf2>
 8008390:	0669      	lsls	r1, r5, #25
 8008392:	d5fb      	bpl.n	800838c <_printf_i+0xe8>
 8008394:	881d      	ldrh	r5, [r3, #0]
 8008396:	4854      	ldr	r0, [pc, #336]	; (80084e8 <_printf_i+0x244>)
 8008398:	2f6f      	cmp	r7, #111	; 0x6f
 800839a:	bf0c      	ite	eq
 800839c:	2308      	moveq	r3, #8
 800839e:	230a      	movne	r3, #10
 80083a0:	2100      	movs	r1, #0
 80083a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083a6:	6866      	ldr	r6, [r4, #4]
 80083a8:	60a6      	str	r6, [r4, #8]
 80083aa:	2e00      	cmp	r6, #0
 80083ac:	bfa2      	ittt	ge
 80083ae:	6821      	ldrge	r1, [r4, #0]
 80083b0:	f021 0104 	bicge.w	r1, r1, #4
 80083b4:	6021      	strge	r1, [r4, #0]
 80083b6:	b90d      	cbnz	r5, 80083bc <_printf_i+0x118>
 80083b8:	2e00      	cmp	r6, #0
 80083ba:	d04d      	beq.n	8008458 <_printf_i+0x1b4>
 80083bc:	4616      	mov	r6, r2
 80083be:	fbb5 f1f3 	udiv	r1, r5, r3
 80083c2:	fb03 5711 	mls	r7, r3, r1, r5
 80083c6:	5dc7      	ldrb	r7, [r0, r7]
 80083c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083cc:	462f      	mov	r7, r5
 80083ce:	42bb      	cmp	r3, r7
 80083d0:	460d      	mov	r5, r1
 80083d2:	d9f4      	bls.n	80083be <_printf_i+0x11a>
 80083d4:	2b08      	cmp	r3, #8
 80083d6:	d10b      	bne.n	80083f0 <_printf_i+0x14c>
 80083d8:	6823      	ldr	r3, [r4, #0]
 80083da:	07df      	lsls	r7, r3, #31
 80083dc:	d508      	bpl.n	80083f0 <_printf_i+0x14c>
 80083de:	6923      	ldr	r3, [r4, #16]
 80083e0:	6861      	ldr	r1, [r4, #4]
 80083e2:	4299      	cmp	r1, r3
 80083e4:	bfde      	ittt	le
 80083e6:	2330      	movle	r3, #48	; 0x30
 80083e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083f0:	1b92      	subs	r2, r2, r6
 80083f2:	6122      	str	r2, [r4, #16]
 80083f4:	f8cd a000 	str.w	sl, [sp]
 80083f8:	464b      	mov	r3, r9
 80083fa:	aa03      	add	r2, sp, #12
 80083fc:	4621      	mov	r1, r4
 80083fe:	4640      	mov	r0, r8
 8008400:	f7ff fee2 	bl	80081c8 <_printf_common>
 8008404:	3001      	adds	r0, #1
 8008406:	d14c      	bne.n	80084a2 <_printf_i+0x1fe>
 8008408:	f04f 30ff 	mov.w	r0, #4294967295
 800840c:	b004      	add	sp, #16
 800840e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008412:	4835      	ldr	r0, [pc, #212]	; (80084e8 <_printf_i+0x244>)
 8008414:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008418:	6823      	ldr	r3, [r4, #0]
 800841a:	680e      	ldr	r6, [r1, #0]
 800841c:	061f      	lsls	r7, r3, #24
 800841e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008422:	600e      	str	r6, [r1, #0]
 8008424:	d514      	bpl.n	8008450 <_printf_i+0x1ac>
 8008426:	07d9      	lsls	r1, r3, #31
 8008428:	bf44      	itt	mi
 800842a:	f043 0320 	orrmi.w	r3, r3, #32
 800842e:	6023      	strmi	r3, [r4, #0]
 8008430:	b91d      	cbnz	r5, 800843a <_printf_i+0x196>
 8008432:	6823      	ldr	r3, [r4, #0]
 8008434:	f023 0320 	bic.w	r3, r3, #32
 8008438:	6023      	str	r3, [r4, #0]
 800843a:	2310      	movs	r3, #16
 800843c:	e7b0      	b.n	80083a0 <_printf_i+0xfc>
 800843e:	6823      	ldr	r3, [r4, #0]
 8008440:	f043 0320 	orr.w	r3, r3, #32
 8008444:	6023      	str	r3, [r4, #0]
 8008446:	2378      	movs	r3, #120	; 0x78
 8008448:	4828      	ldr	r0, [pc, #160]	; (80084ec <_printf_i+0x248>)
 800844a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800844e:	e7e3      	b.n	8008418 <_printf_i+0x174>
 8008450:	065e      	lsls	r6, r3, #25
 8008452:	bf48      	it	mi
 8008454:	b2ad      	uxthmi	r5, r5
 8008456:	e7e6      	b.n	8008426 <_printf_i+0x182>
 8008458:	4616      	mov	r6, r2
 800845a:	e7bb      	b.n	80083d4 <_printf_i+0x130>
 800845c:	680b      	ldr	r3, [r1, #0]
 800845e:	6826      	ldr	r6, [r4, #0]
 8008460:	6960      	ldr	r0, [r4, #20]
 8008462:	1d1d      	adds	r5, r3, #4
 8008464:	600d      	str	r5, [r1, #0]
 8008466:	0635      	lsls	r5, r6, #24
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	d501      	bpl.n	8008470 <_printf_i+0x1cc>
 800846c:	6018      	str	r0, [r3, #0]
 800846e:	e002      	b.n	8008476 <_printf_i+0x1d2>
 8008470:	0671      	lsls	r1, r6, #25
 8008472:	d5fb      	bpl.n	800846c <_printf_i+0x1c8>
 8008474:	8018      	strh	r0, [r3, #0]
 8008476:	2300      	movs	r3, #0
 8008478:	6123      	str	r3, [r4, #16]
 800847a:	4616      	mov	r6, r2
 800847c:	e7ba      	b.n	80083f4 <_printf_i+0x150>
 800847e:	680b      	ldr	r3, [r1, #0]
 8008480:	1d1a      	adds	r2, r3, #4
 8008482:	600a      	str	r2, [r1, #0]
 8008484:	681e      	ldr	r6, [r3, #0]
 8008486:	6862      	ldr	r2, [r4, #4]
 8008488:	2100      	movs	r1, #0
 800848a:	4630      	mov	r0, r6
 800848c:	f7f7 feb0 	bl	80001f0 <memchr>
 8008490:	b108      	cbz	r0, 8008496 <_printf_i+0x1f2>
 8008492:	1b80      	subs	r0, r0, r6
 8008494:	6060      	str	r0, [r4, #4]
 8008496:	6863      	ldr	r3, [r4, #4]
 8008498:	6123      	str	r3, [r4, #16]
 800849a:	2300      	movs	r3, #0
 800849c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084a0:	e7a8      	b.n	80083f4 <_printf_i+0x150>
 80084a2:	6923      	ldr	r3, [r4, #16]
 80084a4:	4632      	mov	r2, r6
 80084a6:	4649      	mov	r1, r9
 80084a8:	4640      	mov	r0, r8
 80084aa:	47d0      	blx	sl
 80084ac:	3001      	adds	r0, #1
 80084ae:	d0ab      	beq.n	8008408 <_printf_i+0x164>
 80084b0:	6823      	ldr	r3, [r4, #0]
 80084b2:	079b      	lsls	r3, r3, #30
 80084b4:	d413      	bmi.n	80084de <_printf_i+0x23a>
 80084b6:	68e0      	ldr	r0, [r4, #12]
 80084b8:	9b03      	ldr	r3, [sp, #12]
 80084ba:	4298      	cmp	r0, r3
 80084bc:	bfb8      	it	lt
 80084be:	4618      	movlt	r0, r3
 80084c0:	e7a4      	b.n	800840c <_printf_i+0x168>
 80084c2:	2301      	movs	r3, #1
 80084c4:	4632      	mov	r2, r6
 80084c6:	4649      	mov	r1, r9
 80084c8:	4640      	mov	r0, r8
 80084ca:	47d0      	blx	sl
 80084cc:	3001      	adds	r0, #1
 80084ce:	d09b      	beq.n	8008408 <_printf_i+0x164>
 80084d0:	3501      	adds	r5, #1
 80084d2:	68e3      	ldr	r3, [r4, #12]
 80084d4:	9903      	ldr	r1, [sp, #12]
 80084d6:	1a5b      	subs	r3, r3, r1
 80084d8:	42ab      	cmp	r3, r5
 80084da:	dcf2      	bgt.n	80084c2 <_printf_i+0x21e>
 80084dc:	e7eb      	b.n	80084b6 <_printf_i+0x212>
 80084de:	2500      	movs	r5, #0
 80084e0:	f104 0619 	add.w	r6, r4, #25
 80084e4:	e7f5      	b.n	80084d2 <_printf_i+0x22e>
 80084e6:	bf00      	nop
 80084e8:	0800e3b8 	.word	0x0800e3b8
 80084ec:	0800e3c9 	.word	0x0800e3c9

080084f0 <_scanf_float>:
 80084f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f4:	b087      	sub	sp, #28
 80084f6:	4617      	mov	r7, r2
 80084f8:	9303      	str	r3, [sp, #12]
 80084fa:	688b      	ldr	r3, [r1, #8]
 80084fc:	1e5a      	subs	r2, r3, #1
 80084fe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008502:	bf83      	ittte	hi
 8008504:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008508:	195b      	addhi	r3, r3, r5
 800850a:	9302      	strhi	r3, [sp, #8]
 800850c:	2300      	movls	r3, #0
 800850e:	bf86      	itte	hi
 8008510:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008514:	608b      	strhi	r3, [r1, #8]
 8008516:	9302      	strls	r3, [sp, #8]
 8008518:	680b      	ldr	r3, [r1, #0]
 800851a:	468b      	mov	fp, r1
 800851c:	2500      	movs	r5, #0
 800851e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008522:	f84b 3b1c 	str.w	r3, [fp], #28
 8008526:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800852a:	4680      	mov	r8, r0
 800852c:	460c      	mov	r4, r1
 800852e:	465e      	mov	r6, fp
 8008530:	46aa      	mov	sl, r5
 8008532:	46a9      	mov	r9, r5
 8008534:	9501      	str	r5, [sp, #4]
 8008536:	68a2      	ldr	r2, [r4, #8]
 8008538:	b152      	cbz	r2, 8008550 <_scanf_float+0x60>
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	2b4e      	cmp	r3, #78	; 0x4e
 8008540:	d864      	bhi.n	800860c <_scanf_float+0x11c>
 8008542:	2b40      	cmp	r3, #64	; 0x40
 8008544:	d83c      	bhi.n	80085c0 <_scanf_float+0xd0>
 8008546:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800854a:	b2c8      	uxtb	r0, r1
 800854c:	280e      	cmp	r0, #14
 800854e:	d93a      	bls.n	80085c6 <_scanf_float+0xd6>
 8008550:	f1b9 0f00 	cmp.w	r9, #0
 8008554:	d003      	beq.n	800855e <_scanf_float+0x6e>
 8008556:	6823      	ldr	r3, [r4, #0]
 8008558:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800855c:	6023      	str	r3, [r4, #0]
 800855e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008562:	f1ba 0f01 	cmp.w	sl, #1
 8008566:	f200 8113 	bhi.w	8008790 <_scanf_float+0x2a0>
 800856a:	455e      	cmp	r6, fp
 800856c:	f200 8105 	bhi.w	800877a <_scanf_float+0x28a>
 8008570:	2501      	movs	r5, #1
 8008572:	4628      	mov	r0, r5
 8008574:	b007      	add	sp, #28
 8008576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800857a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800857e:	2a0d      	cmp	r2, #13
 8008580:	d8e6      	bhi.n	8008550 <_scanf_float+0x60>
 8008582:	a101      	add	r1, pc, #4	; (adr r1, 8008588 <_scanf_float+0x98>)
 8008584:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008588:	080086c7 	.word	0x080086c7
 800858c:	08008551 	.word	0x08008551
 8008590:	08008551 	.word	0x08008551
 8008594:	08008551 	.word	0x08008551
 8008598:	08008727 	.word	0x08008727
 800859c:	080086ff 	.word	0x080086ff
 80085a0:	08008551 	.word	0x08008551
 80085a4:	08008551 	.word	0x08008551
 80085a8:	080086d5 	.word	0x080086d5
 80085ac:	08008551 	.word	0x08008551
 80085b0:	08008551 	.word	0x08008551
 80085b4:	08008551 	.word	0x08008551
 80085b8:	08008551 	.word	0x08008551
 80085bc:	0800868d 	.word	0x0800868d
 80085c0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80085c4:	e7db      	b.n	800857e <_scanf_float+0x8e>
 80085c6:	290e      	cmp	r1, #14
 80085c8:	d8c2      	bhi.n	8008550 <_scanf_float+0x60>
 80085ca:	a001      	add	r0, pc, #4	; (adr r0, 80085d0 <_scanf_float+0xe0>)
 80085cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80085d0:	0800867f 	.word	0x0800867f
 80085d4:	08008551 	.word	0x08008551
 80085d8:	0800867f 	.word	0x0800867f
 80085dc:	08008713 	.word	0x08008713
 80085e0:	08008551 	.word	0x08008551
 80085e4:	0800862d 	.word	0x0800862d
 80085e8:	08008669 	.word	0x08008669
 80085ec:	08008669 	.word	0x08008669
 80085f0:	08008669 	.word	0x08008669
 80085f4:	08008669 	.word	0x08008669
 80085f8:	08008669 	.word	0x08008669
 80085fc:	08008669 	.word	0x08008669
 8008600:	08008669 	.word	0x08008669
 8008604:	08008669 	.word	0x08008669
 8008608:	08008669 	.word	0x08008669
 800860c:	2b6e      	cmp	r3, #110	; 0x6e
 800860e:	d809      	bhi.n	8008624 <_scanf_float+0x134>
 8008610:	2b60      	cmp	r3, #96	; 0x60
 8008612:	d8b2      	bhi.n	800857a <_scanf_float+0x8a>
 8008614:	2b54      	cmp	r3, #84	; 0x54
 8008616:	d077      	beq.n	8008708 <_scanf_float+0x218>
 8008618:	2b59      	cmp	r3, #89	; 0x59
 800861a:	d199      	bne.n	8008550 <_scanf_float+0x60>
 800861c:	2d07      	cmp	r5, #7
 800861e:	d197      	bne.n	8008550 <_scanf_float+0x60>
 8008620:	2508      	movs	r5, #8
 8008622:	e029      	b.n	8008678 <_scanf_float+0x188>
 8008624:	2b74      	cmp	r3, #116	; 0x74
 8008626:	d06f      	beq.n	8008708 <_scanf_float+0x218>
 8008628:	2b79      	cmp	r3, #121	; 0x79
 800862a:	e7f6      	b.n	800861a <_scanf_float+0x12a>
 800862c:	6821      	ldr	r1, [r4, #0]
 800862e:	05c8      	lsls	r0, r1, #23
 8008630:	d51a      	bpl.n	8008668 <_scanf_float+0x178>
 8008632:	9b02      	ldr	r3, [sp, #8]
 8008634:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008638:	6021      	str	r1, [r4, #0]
 800863a:	f109 0901 	add.w	r9, r9, #1
 800863e:	b11b      	cbz	r3, 8008648 <_scanf_float+0x158>
 8008640:	3b01      	subs	r3, #1
 8008642:	3201      	adds	r2, #1
 8008644:	9302      	str	r3, [sp, #8]
 8008646:	60a2      	str	r2, [r4, #8]
 8008648:	68a3      	ldr	r3, [r4, #8]
 800864a:	3b01      	subs	r3, #1
 800864c:	60a3      	str	r3, [r4, #8]
 800864e:	6923      	ldr	r3, [r4, #16]
 8008650:	3301      	adds	r3, #1
 8008652:	6123      	str	r3, [r4, #16]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	3b01      	subs	r3, #1
 8008658:	2b00      	cmp	r3, #0
 800865a:	607b      	str	r3, [r7, #4]
 800865c:	f340 8084 	ble.w	8008768 <_scanf_float+0x278>
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	3301      	adds	r3, #1
 8008664:	603b      	str	r3, [r7, #0]
 8008666:	e766      	b.n	8008536 <_scanf_float+0x46>
 8008668:	eb1a 0f05 	cmn.w	sl, r5
 800866c:	f47f af70 	bne.w	8008550 <_scanf_float+0x60>
 8008670:	6822      	ldr	r2, [r4, #0]
 8008672:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008676:	6022      	str	r2, [r4, #0]
 8008678:	f806 3b01 	strb.w	r3, [r6], #1
 800867c:	e7e4      	b.n	8008648 <_scanf_float+0x158>
 800867e:	6822      	ldr	r2, [r4, #0]
 8008680:	0610      	lsls	r0, r2, #24
 8008682:	f57f af65 	bpl.w	8008550 <_scanf_float+0x60>
 8008686:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800868a:	e7f4      	b.n	8008676 <_scanf_float+0x186>
 800868c:	f1ba 0f00 	cmp.w	sl, #0
 8008690:	d10e      	bne.n	80086b0 <_scanf_float+0x1c0>
 8008692:	f1b9 0f00 	cmp.w	r9, #0
 8008696:	d10e      	bne.n	80086b6 <_scanf_float+0x1c6>
 8008698:	6822      	ldr	r2, [r4, #0]
 800869a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800869e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80086a2:	d108      	bne.n	80086b6 <_scanf_float+0x1c6>
 80086a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80086a8:	6022      	str	r2, [r4, #0]
 80086aa:	f04f 0a01 	mov.w	sl, #1
 80086ae:	e7e3      	b.n	8008678 <_scanf_float+0x188>
 80086b0:	f1ba 0f02 	cmp.w	sl, #2
 80086b4:	d055      	beq.n	8008762 <_scanf_float+0x272>
 80086b6:	2d01      	cmp	r5, #1
 80086b8:	d002      	beq.n	80086c0 <_scanf_float+0x1d0>
 80086ba:	2d04      	cmp	r5, #4
 80086bc:	f47f af48 	bne.w	8008550 <_scanf_float+0x60>
 80086c0:	3501      	adds	r5, #1
 80086c2:	b2ed      	uxtb	r5, r5
 80086c4:	e7d8      	b.n	8008678 <_scanf_float+0x188>
 80086c6:	f1ba 0f01 	cmp.w	sl, #1
 80086ca:	f47f af41 	bne.w	8008550 <_scanf_float+0x60>
 80086ce:	f04f 0a02 	mov.w	sl, #2
 80086d2:	e7d1      	b.n	8008678 <_scanf_float+0x188>
 80086d4:	b97d      	cbnz	r5, 80086f6 <_scanf_float+0x206>
 80086d6:	f1b9 0f00 	cmp.w	r9, #0
 80086da:	f47f af3c 	bne.w	8008556 <_scanf_float+0x66>
 80086de:	6822      	ldr	r2, [r4, #0]
 80086e0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80086e4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80086e8:	f47f af39 	bne.w	800855e <_scanf_float+0x6e>
 80086ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80086f0:	6022      	str	r2, [r4, #0]
 80086f2:	2501      	movs	r5, #1
 80086f4:	e7c0      	b.n	8008678 <_scanf_float+0x188>
 80086f6:	2d03      	cmp	r5, #3
 80086f8:	d0e2      	beq.n	80086c0 <_scanf_float+0x1d0>
 80086fa:	2d05      	cmp	r5, #5
 80086fc:	e7de      	b.n	80086bc <_scanf_float+0x1cc>
 80086fe:	2d02      	cmp	r5, #2
 8008700:	f47f af26 	bne.w	8008550 <_scanf_float+0x60>
 8008704:	2503      	movs	r5, #3
 8008706:	e7b7      	b.n	8008678 <_scanf_float+0x188>
 8008708:	2d06      	cmp	r5, #6
 800870a:	f47f af21 	bne.w	8008550 <_scanf_float+0x60>
 800870e:	2507      	movs	r5, #7
 8008710:	e7b2      	b.n	8008678 <_scanf_float+0x188>
 8008712:	6822      	ldr	r2, [r4, #0]
 8008714:	0591      	lsls	r1, r2, #22
 8008716:	f57f af1b 	bpl.w	8008550 <_scanf_float+0x60>
 800871a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800871e:	6022      	str	r2, [r4, #0]
 8008720:	f8cd 9004 	str.w	r9, [sp, #4]
 8008724:	e7a8      	b.n	8008678 <_scanf_float+0x188>
 8008726:	6822      	ldr	r2, [r4, #0]
 8008728:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800872c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008730:	d006      	beq.n	8008740 <_scanf_float+0x250>
 8008732:	0550      	lsls	r0, r2, #21
 8008734:	f57f af0c 	bpl.w	8008550 <_scanf_float+0x60>
 8008738:	f1b9 0f00 	cmp.w	r9, #0
 800873c:	f43f af0f 	beq.w	800855e <_scanf_float+0x6e>
 8008740:	0591      	lsls	r1, r2, #22
 8008742:	bf58      	it	pl
 8008744:	9901      	ldrpl	r1, [sp, #4]
 8008746:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800874a:	bf58      	it	pl
 800874c:	eba9 0101 	subpl.w	r1, r9, r1
 8008750:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008754:	bf58      	it	pl
 8008756:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800875a:	6022      	str	r2, [r4, #0]
 800875c:	f04f 0900 	mov.w	r9, #0
 8008760:	e78a      	b.n	8008678 <_scanf_float+0x188>
 8008762:	f04f 0a03 	mov.w	sl, #3
 8008766:	e787      	b.n	8008678 <_scanf_float+0x188>
 8008768:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800876c:	4639      	mov	r1, r7
 800876e:	4640      	mov	r0, r8
 8008770:	4798      	blx	r3
 8008772:	2800      	cmp	r0, #0
 8008774:	f43f aedf 	beq.w	8008536 <_scanf_float+0x46>
 8008778:	e6ea      	b.n	8008550 <_scanf_float+0x60>
 800877a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800877e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008782:	463a      	mov	r2, r7
 8008784:	4640      	mov	r0, r8
 8008786:	4798      	blx	r3
 8008788:	6923      	ldr	r3, [r4, #16]
 800878a:	3b01      	subs	r3, #1
 800878c:	6123      	str	r3, [r4, #16]
 800878e:	e6ec      	b.n	800856a <_scanf_float+0x7a>
 8008790:	1e6b      	subs	r3, r5, #1
 8008792:	2b06      	cmp	r3, #6
 8008794:	d825      	bhi.n	80087e2 <_scanf_float+0x2f2>
 8008796:	2d02      	cmp	r5, #2
 8008798:	d836      	bhi.n	8008808 <_scanf_float+0x318>
 800879a:	455e      	cmp	r6, fp
 800879c:	f67f aee8 	bls.w	8008570 <_scanf_float+0x80>
 80087a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087a4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087a8:	463a      	mov	r2, r7
 80087aa:	4640      	mov	r0, r8
 80087ac:	4798      	blx	r3
 80087ae:	6923      	ldr	r3, [r4, #16]
 80087b0:	3b01      	subs	r3, #1
 80087b2:	6123      	str	r3, [r4, #16]
 80087b4:	e7f1      	b.n	800879a <_scanf_float+0x2aa>
 80087b6:	9802      	ldr	r0, [sp, #8]
 80087b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087bc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80087c0:	9002      	str	r0, [sp, #8]
 80087c2:	463a      	mov	r2, r7
 80087c4:	4640      	mov	r0, r8
 80087c6:	4798      	blx	r3
 80087c8:	6923      	ldr	r3, [r4, #16]
 80087ca:	3b01      	subs	r3, #1
 80087cc:	6123      	str	r3, [r4, #16]
 80087ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087d2:	fa5f fa8a 	uxtb.w	sl, sl
 80087d6:	f1ba 0f02 	cmp.w	sl, #2
 80087da:	d1ec      	bne.n	80087b6 <_scanf_float+0x2c6>
 80087dc:	3d03      	subs	r5, #3
 80087de:	b2ed      	uxtb	r5, r5
 80087e0:	1b76      	subs	r6, r6, r5
 80087e2:	6823      	ldr	r3, [r4, #0]
 80087e4:	05da      	lsls	r2, r3, #23
 80087e6:	d52f      	bpl.n	8008848 <_scanf_float+0x358>
 80087e8:	055b      	lsls	r3, r3, #21
 80087ea:	d510      	bpl.n	800880e <_scanf_float+0x31e>
 80087ec:	455e      	cmp	r6, fp
 80087ee:	f67f aebf 	bls.w	8008570 <_scanf_float+0x80>
 80087f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087fa:	463a      	mov	r2, r7
 80087fc:	4640      	mov	r0, r8
 80087fe:	4798      	blx	r3
 8008800:	6923      	ldr	r3, [r4, #16]
 8008802:	3b01      	subs	r3, #1
 8008804:	6123      	str	r3, [r4, #16]
 8008806:	e7f1      	b.n	80087ec <_scanf_float+0x2fc>
 8008808:	46aa      	mov	sl, r5
 800880a:	9602      	str	r6, [sp, #8]
 800880c:	e7df      	b.n	80087ce <_scanf_float+0x2de>
 800880e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008812:	6923      	ldr	r3, [r4, #16]
 8008814:	2965      	cmp	r1, #101	; 0x65
 8008816:	f103 33ff 	add.w	r3, r3, #4294967295
 800881a:	f106 35ff 	add.w	r5, r6, #4294967295
 800881e:	6123      	str	r3, [r4, #16]
 8008820:	d00c      	beq.n	800883c <_scanf_float+0x34c>
 8008822:	2945      	cmp	r1, #69	; 0x45
 8008824:	d00a      	beq.n	800883c <_scanf_float+0x34c>
 8008826:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800882a:	463a      	mov	r2, r7
 800882c:	4640      	mov	r0, r8
 800882e:	4798      	blx	r3
 8008830:	6923      	ldr	r3, [r4, #16]
 8008832:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008836:	3b01      	subs	r3, #1
 8008838:	1eb5      	subs	r5, r6, #2
 800883a:	6123      	str	r3, [r4, #16]
 800883c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008840:	463a      	mov	r2, r7
 8008842:	4640      	mov	r0, r8
 8008844:	4798      	blx	r3
 8008846:	462e      	mov	r6, r5
 8008848:	6825      	ldr	r5, [r4, #0]
 800884a:	f015 0510 	ands.w	r5, r5, #16
 800884e:	d158      	bne.n	8008902 <_scanf_float+0x412>
 8008850:	7035      	strb	r5, [r6, #0]
 8008852:	6823      	ldr	r3, [r4, #0]
 8008854:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800885c:	d11c      	bne.n	8008898 <_scanf_float+0x3a8>
 800885e:	9b01      	ldr	r3, [sp, #4]
 8008860:	454b      	cmp	r3, r9
 8008862:	eba3 0209 	sub.w	r2, r3, r9
 8008866:	d124      	bne.n	80088b2 <_scanf_float+0x3c2>
 8008868:	2200      	movs	r2, #0
 800886a:	4659      	mov	r1, fp
 800886c:	4640      	mov	r0, r8
 800886e:	f000 ff21 	bl	80096b4 <_strtod_r>
 8008872:	9b03      	ldr	r3, [sp, #12]
 8008874:	6821      	ldr	r1, [r4, #0]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f011 0f02 	tst.w	r1, #2
 800887c:	ec57 6b10 	vmov	r6, r7, d0
 8008880:	f103 0204 	add.w	r2, r3, #4
 8008884:	d020      	beq.n	80088c8 <_scanf_float+0x3d8>
 8008886:	9903      	ldr	r1, [sp, #12]
 8008888:	600a      	str	r2, [r1, #0]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	e9c3 6700 	strd	r6, r7, [r3]
 8008890:	68e3      	ldr	r3, [r4, #12]
 8008892:	3301      	adds	r3, #1
 8008894:	60e3      	str	r3, [r4, #12]
 8008896:	e66c      	b.n	8008572 <_scanf_float+0x82>
 8008898:	9b04      	ldr	r3, [sp, #16]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d0e4      	beq.n	8008868 <_scanf_float+0x378>
 800889e:	9905      	ldr	r1, [sp, #20]
 80088a0:	230a      	movs	r3, #10
 80088a2:	462a      	mov	r2, r5
 80088a4:	3101      	adds	r1, #1
 80088a6:	4640      	mov	r0, r8
 80088a8:	f000 ff8e 	bl	80097c8 <_strtol_r>
 80088ac:	9b04      	ldr	r3, [sp, #16]
 80088ae:	9e05      	ldr	r6, [sp, #20]
 80088b0:	1ac2      	subs	r2, r0, r3
 80088b2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80088b6:	429e      	cmp	r6, r3
 80088b8:	bf28      	it	cs
 80088ba:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80088be:	4912      	ldr	r1, [pc, #72]	; (8008908 <_scanf_float+0x418>)
 80088c0:	4630      	mov	r0, r6
 80088c2:	f000 f82b 	bl	800891c <siprintf>
 80088c6:	e7cf      	b.n	8008868 <_scanf_float+0x378>
 80088c8:	f011 0f04 	tst.w	r1, #4
 80088cc:	9903      	ldr	r1, [sp, #12]
 80088ce:	600a      	str	r2, [r1, #0]
 80088d0:	d1db      	bne.n	800888a <_scanf_float+0x39a>
 80088d2:	f8d3 8000 	ldr.w	r8, [r3]
 80088d6:	ee10 2a10 	vmov	r2, s0
 80088da:	ee10 0a10 	vmov	r0, s0
 80088de:	463b      	mov	r3, r7
 80088e0:	4639      	mov	r1, r7
 80088e2:	f7f8 f92b 	bl	8000b3c <__aeabi_dcmpun>
 80088e6:	b128      	cbz	r0, 80088f4 <_scanf_float+0x404>
 80088e8:	4808      	ldr	r0, [pc, #32]	; (800890c <_scanf_float+0x41c>)
 80088ea:	f000 f811 	bl	8008910 <nanf>
 80088ee:	ed88 0a00 	vstr	s0, [r8]
 80088f2:	e7cd      	b.n	8008890 <_scanf_float+0x3a0>
 80088f4:	4630      	mov	r0, r6
 80088f6:	4639      	mov	r1, r7
 80088f8:	f7f8 f97e 	bl	8000bf8 <__aeabi_d2f>
 80088fc:	f8c8 0000 	str.w	r0, [r8]
 8008900:	e7c6      	b.n	8008890 <_scanf_float+0x3a0>
 8008902:	2500      	movs	r5, #0
 8008904:	e635      	b.n	8008572 <_scanf_float+0x82>
 8008906:	bf00      	nop
 8008908:	0800e3da 	.word	0x0800e3da
 800890c:	0800e80b 	.word	0x0800e80b

08008910 <nanf>:
 8008910:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008918 <nanf+0x8>
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	7fc00000 	.word	0x7fc00000

0800891c <siprintf>:
 800891c:	b40e      	push	{r1, r2, r3}
 800891e:	b500      	push	{lr}
 8008920:	b09c      	sub	sp, #112	; 0x70
 8008922:	ab1d      	add	r3, sp, #116	; 0x74
 8008924:	9002      	str	r0, [sp, #8]
 8008926:	9006      	str	r0, [sp, #24]
 8008928:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800892c:	4809      	ldr	r0, [pc, #36]	; (8008954 <siprintf+0x38>)
 800892e:	9107      	str	r1, [sp, #28]
 8008930:	9104      	str	r1, [sp, #16]
 8008932:	4909      	ldr	r1, [pc, #36]	; (8008958 <siprintf+0x3c>)
 8008934:	f853 2b04 	ldr.w	r2, [r3], #4
 8008938:	9105      	str	r1, [sp, #20]
 800893a:	6800      	ldr	r0, [r0, #0]
 800893c:	9301      	str	r3, [sp, #4]
 800893e:	a902      	add	r1, sp, #8
 8008940:	f002 ff4e 	bl	800b7e0 <_svfiprintf_r>
 8008944:	9b02      	ldr	r3, [sp, #8]
 8008946:	2200      	movs	r2, #0
 8008948:	701a      	strb	r2, [r3, #0]
 800894a:	b01c      	add	sp, #112	; 0x70
 800894c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008950:	b003      	add	sp, #12
 8008952:	4770      	bx	lr
 8008954:	20000020 	.word	0x20000020
 8008958:	ffff0208 	.word	0xffff0208

0800895c <siscanf>:
 800895c:	b40e      	push	{r1, r2, r3}
 800895e:	b510      	push	{r4, lr}
 8008960:	b09f      	sub	sp, #124	; 0x7c
 8008962:	ac21      	add	r4, sp, #132	; 0x84
 8008964:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008968:	f854 2b04 	ldr.w	r2, [r4], #4
 800896c:	9201      	str	r2, [sp, #4]
 800896e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008972:	9004      	str	r0, [sp, #16]
 8008974:	9008      	str	r0, [sp, #32]
 8008976:	f7f7 fc33 	bl	80001e0 <strlen>
 800897a:	4b0c      	ldr	r3, [pc, #48]	; (80089ac <siscanf+0x50>)
 800897c:	9005      	str	r0, [sp, #20]
 800897e:	9009      	str	r0, [sp, #36]	; 0x24
 8008980:	930d      	str	r3, [sp, #52]	; 0x34
 8008982:	480b      	ldr	r0, [pc, #44]	; (80089b0 <siscanf+0x54>)
 8008984:	9a01      	ldr	r2, [sp, #4]
 8008986:	6800      	ldr	r0, [r0, #0]
 8008988:	9403      	str	r4, [sp, #12]
 800898a:	2300      	movs	r3, #0
 800898c:	9311      	str	r3, [sp, #68]	; 0x44
 800898e:	9316      	str	r3, [sp, #88]	; 0x58
 8008990:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008994:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008998:	a904      	add	r1, sp, #16
 800899a:	4623      	mov	r3, r4
 800899c:	f003 f87a 	bl	800ba94 <__ssvfiscanf_r>
 80089a0:	b01f      	add	sp, #124	; 0x7c
 80089a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089a6:	b003      	add	sp, #12
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop
 80089ac:	080089d7 	.word	0x080089d7
 80089b0:	20000020 	.word	0x20000020

080089b4 <__sread>:
 80089b4:	b510      	push	{r4, lr}
 80089b6:	460c      	mov	r4, r1
 80089b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089bc:	f003 fb2e 	bl	800c01c <_read_r>
 80089c0:	2800      	cmp	r0, #0
 80089c2:	bfab      	itete	ge
 80089c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089c6:	89a3      	ldrhlt	r3, [r4, #12]
 80089c8:	181b      	addge	r3, r3, r0
 80089ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089ce:	bfac      	ite	ge
 80089d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80089d2:	81a3      	strhlt	r3, [r4, #12]
 80089d4:	bd10      	pop	{r4, pc}

080089d6 <__seofread>:
 80089d6:	2000      	movs	r0, #0
 80089d8:	4770      	bx	lr

080089da <__swrite>:
 80089da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089de:	461f      	mov	r7, r3
 80089e0:	898b      	ldrh	r3, [r1, #12]
 80089e2:	05db      	lsls	r3, r3, #23
 80089e4:	4605      	mov	r5, r0
 80089e6:	460c      	mov	r4, r1
 80089e8:	4616      	mov	r6, r2
 80089ea:	d505      	bpl.n	80089f8 <__swrite+0x1e>
 80089ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089f0:	2302      	movs	r3, #2
 80089f2:	2200      	movs	r2, #0
 80089f4:	f002 f8f8 	bl	800abe8 <_lseek_r>
 80089f8:	89a3      	ldrh	r3, [r4, #12]
 80089fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a02:	81a3      	strh	r3, [r4, #12]
 8008a04:	4632      	mov	r2, r6
 8008a06:	463b      	mov	r3, r7
 8008a08:	4628      	mov	r0, r5
 8008a0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a0e:	f000 bedd 	b.w	80097cc <_write_r>

08008a12 <__sseek>:
 8008a12:	b510      	push	{r4, lr}
 8008a14:	460c      	mov	r4, r1
 8008a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a1a:	f002 f8e5 	bl	800abe8 <_lseek_r>
 8008a1e:	1c43      	adds	r3, r0, #1
 8008a20:	89a3      	ldrh	r3, [r4, #12]
 8008a22:	bf15      	itete	ne
 8008a24:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a2e:	81a3      	strheq	r3, [r4, #12]
 8008a30:	bf18      	it	ne
 8008a32:	81a3      	strhne	r3, [r4, #12]
 8008a34:	bd10      	pop	{r4, pc}

08008a36 <__sclose>:
 8008a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a3a:	f000 bed9 	b.w	80097f0 <_close_r>

08008a3e <strncmp>:
 8008a3e:	b510      	push	{r4, lr}
 8008a40:	b16a      	cbz	r2, 8008a5e <strncmp+0x20>
 8008a42:	3901      	subs	r1, #1
 8008a44:	1884      	adds	r4, r0, r2
 8008a46:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008a4a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d103      	bne.n	8008a5a <strncmp+0x1c>
 8008a52:	42a0      	cmp	r0, r4
 8008a54:	d001      	beq.n	8008a5a <strncmp+0x1c>
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1f5      	bne.n	8008a46 <strncmp+0x8>
 8008a5a:	1a98      	subs	r0, r3, r2
 8008a5c:	bd10      	pop	{r4, pc}
 8008a5e:	4610      	mov	r0, r2
 8008a60:	e7fc      	b.n	8008a5c <strncmp+0x1e>

08008a62 <sulp>:
 8008a62:	b570      	push	{r4, r5, r6, lr}
 8008a64:	4604      	mov	r4, r0
 8008a66:	460d      	mov	r5, r1
 8008a68:	ec45 4b10 	vmov	d0, r4, r5
 8008a6c:	4616      	mov	r6, r2
 8008a6e:	f002 fc53 	bl	800b318 <__ulp>
 8008a72:	ec51 0b10 	vmov	r0, r1, d0
 8008a76:	b17e      	cbz	r6, 8008a98 <sulp+0x36>
 8008a78:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008a7c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	dd09      	ble.n	8008a98 <sulp+0x36>
 8008a84:	051b      	lsls	r3, r3, #20
 8008a86:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008a8a:	2400      	movs	r4, #0
 8008a8c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008a90:	4622      	mov	r2, r4
 8008a92:	462b      	mov	r3, r5
 8008a94:	f7f7 fdb8 	bl	8000608 <__aeabi_dmul>
 8008a98:	bd70      	pop	{r4, r5, r6, pc}
 8008a9a:	0000      	movs	r0, r0
 8008a9c:	0000      	movs	r0, r0
	...

08008aa0 <_strtod_l>:
 8008aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa4:	b0a3      	sub	sp, #140	; 0x8c
 8008aa6:	461f      	mov	r7, r3
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	931e      	str	r3, [sp, #120]	; 0x78
 8008aac:	4ba4      	ldr	r3, [pc, #656]	; (8008d40 <_strtod_l+0x2a0>)
 8008aae:	9219      	str	r2, [sp, #100]	; 0x64
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	9307      	str	r3, [sp, #28]
 8008ab4:	4604      	mov	r4, r0
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	4688      	mov	r8, r1
 8008aba:	f7f7 fb91 	bl	80001e0 <strlen>
 8008abe:	f04f 0a00 	mov.w	sl, #0
 8008ac2:	4605      	mov	r5, r0
 8008ac4:	f04f 0b00 	mov.w	fp, #0
 8008ac8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008acc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ace:	781a      	ldrb	r2, [r3, #0]
 8008ad0:	2a2b      	cmp	r2, #43	; 0x2b
 8008ad2:	d04c      	beq.n	8008b6e <_strtod_l+0xce>
 8008ad4:	d839      	bhi.n	8008b4a <_strtod_l+0xaa>
 8008ad6:	2a0d      	cmp	r2, #13
 8008ad8:	d832      	bhi.n	8008b40 <_strtod_l+0xa0>
 8008ada:	2a08      	cmp	r2, #8
 8008adc:	d832      	bhi.n	8008b44 <_strtod_l+0xa4>
 8008ade:	2a00      	cmp	r2, #0
 8008ae0:	d03c      	beq.n	8008b5c <_strtod_l+0xbc>
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	930e      	str	r3, [sp, #56]	; 0x38
 8008ae6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008ae8:	7833      	ldrb	r3, [r6, #0]
 8008aea:	2b30      	cmp	r3, #48	; 0x30
 8008aec:	f040 80b4 	bne.w	8008c58 <_strtod_l+0x1b8>
 8008af0:	7873      	ldrb	r3, [r6, #1]
 8008af2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008af6:	2b58      	cmp	r3, #88	; 0x58
 8008af8:	d16c      	bne.n	8008bd4 <_strtod_l+0x134>
 8008afa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008afc:	9301      	str	r3, [sp, #4]
 8008afe:	ab1e      	add	r3, sp, #120	; 0x78
 8008b00:	9702      	str	r7, [sp, #8]
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	4a8f      	ldr	r2, [pc, #572]	; (8008d44 <_strtod_l+0x2a4>)
 8008b06:	ab1f      	add	r3, sp, #124	; 0x7c
 8008b08:	a91d      	add	r1, sp, #116	; 0x74
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	f001 fd60 	bl	800a5d0 <__gethex>
 8008b10:	f010 0707 	ands.w	r7, r0, #7
 8008b14:	4605      	mov	r5, r0
 8008b16:	d005      	beq.n	8008b24 <_strtod_l+0x84>
 8008b18:	2f06      	cmp	r7, #6
 8008b1a:	d12a      	bne.n	8008b72 <_strtod_l+0xd2>
 8008b1c:	3601      	adds	r6, #1
 8008b1e:	2300      	movs	r3, #0
 8008b20:	961d      	str	r6, [sp, #116]	; 0x74
 8008b22:	930e      	str	r3, [sp, #56]	; 0x38
 8008b24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	f040 8596 	bne.w	8009658 <_strtod_l+0xbb8>
 8008b2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b2e:	b1db      	cbz	r3, 8008b68 <_strtod_l+0xc8>
 8008b30:	4652      	mov	r2, sl
 8008b32:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008b36:	ec43 2b10 	vmov	d0, r2, r3
 8008b3a:	b023      	add	sp, #140	; 0x8c
 8008b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b40:	2a20      	cmp	r2, #32
 8008b42:	d1ce      	bne.n	8008ae2 <_strtod_l+0x42>
 8008b44:	3301      	adds	r3, #1
 8008b46:	931d      	str	r3, [sp, #116]	; 0x74
 8008b48:	e7c0      	b.n	8008acc <_strtod_l+0x2c>
 8008b4a:	2a2d      	cmp	r2, #45	; 0x2d
 8008b4c:	d1c9      	bne.n	8008ae2 <_strtod_l+0x42>
 8008b4e:	2201      	movs	r2, #1
 8008b50:	920e      	str	r2, [sp, #56]	; 0x38
 8008b52:	1c5a      	adds	r2, r3, #1
 8008b54:	921d      	str	r2, [sp, #116]	; 0x74
 8008b56:	785b      	ldrb	r3, [r3, #1]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1c4      	bne.n	8008ae6 <_strtod_l+0x46>
 8008b5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b5e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	f040 8576 	bne.w	8009654 <_strtod_l+0xbb4>
 8008b68:	4652      	mov	r2, sl
 8008b6a:	465b      	mov	r3, fp
 8008b6c:	e7e3      	b.n	8008b36 <_strtod_l+0x96>
 8008b6e:	2200      	movs	r2, #0
 8008b70:	e7ee      	b.n	8008b50 <_strtod_l+0xb0>
 8008b72:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008b74:	b13a      	cbz	r2, 8008b86 <_strtod_l+0xe6>
 8008b76:	2135      	movs	r1, #53	; 0x35
 8008b78:	a820      	add	r0, sp, #128	; 0x80
 8008b7a:	f002 fcd8 	bl	800b52e <__copybits>
 8008b7e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008b80:	4620      	mov	r0, r4
 8008b82:	f002 f89d 	bl	800acc0 <_Bfree>
 8008b86:	3f01      	subs	r7, #1
 8008b88:	2f05      	cmp	r7, #5
 8008b8a:	d807      	bhi.n	8008b9c <_strtod_l+0xfc>
 8008b8c:	e8df f007 	tbb	[pc, r7]
 8008b90:	1d180b0e 	.word	0x1d180b0e
 8008b94:	030e      	.short	0x030e
 8008b96:	f04f 0b00 	mov.w	fp, #0
 8008b9a:	46da      	mov	sl, fp
 8008b9c:	0728      	lsls	r0, r5, #28
 8008b9e:	d5c1      	bpl.n	8008b24 <_strtod_l+0x84>
 8008ba0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008ba4:	e7be      	b.n	8008b24 <_strtod_l+0x84>
 8008ba6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8008baa:	e7f7      	b.n	8008b9c <_strtod_l+0xfc>
 8008bac:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8008bb0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008bb2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008bb6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008bba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008bbe:	e7ed      	b.n	8008b9c <_strtod_l+0xfc>
 8008bc0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8008d48 <_strtod_l+0x2a8>
 8008bc4:	f04f 0a00 	mov.w	sl, #0
 8008bc8:	e7e8      	b.n	8008b9c <_strtod_l+0xfc>
 8008bca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008bce:	f04f 3aff 	mov.w	sl, #4294967295
 8008bd2:	e7e3      	b.n	8008b9c <_strtod_l+0xfc>
 8008bd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008bd6:	1c5a      	adds	r2, r3, #1
 8008bd8:	921d      	str	r2, [sp, #116]	; 0x74
 8008bda:	785b      	ldrb	r3, [r3, #1]
 8008bdc:	2b30      	cmp	r3, #48	; 0x30
 8008bde:	d0f9      	beq.n	8008bd4 <_strtod_l+0x134>
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d09f      	beq.n	8008b24 <_strtod_l+0x84>
 8008be4:	2301      	movs	r3, #1
 8008be6:	f04f 0900 	mov.w	r9, #0
 8008bea:	9304      	str	r3, [sp, #16]
 8008bec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008bee:	930a      	str	r3, [sp, #40]	; 0x28
 8008bf0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008bf4:	464f      	mov	r7, r9
 8008bf6:	220a      	movs	r2, #10
 8008bf8:	981d      	ldr	r0, [sp, #116]	; 0x74
 8008bfa:	7806      	ldrb	r6, [r0, #0]
 8008bfc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008c00:	b2d9      	uxtb	r1, r3
 8008c02:	2909      	cmp	r1, #9
 8008c04:	d92a      	bls.n	8008c5c <_strtod_l+0x1bc>
 8008c06:	9907      	ldr	r1, [sp, #28]
 8008c08:	462a      	mov	r2, r5
 8008c0a:	f7ff ff18 	bl	8008a3e <strncmp>
 8008c0e:	b398      	cbz	r0, 8008c78 <_strtod_l+0x1d8>
 8008c10:	2000      	movs	r0, #0
 8008c12:	4633      	mov	r3, r6
 8008c14:	463d      	mov	r5, r7
 8008c16:	9007      	str	r0, [sp, #28]
 8008c18:	4602      	mov	r2, r0
 8008c1a:	2b65      	cmp	r3, #101	; 0x65
 8008c1c:	d001      	beq.n	8008c22 <_strtod_l+0x182>
 8008c1e:	2b45      	cmp	r3, #69	; 0x45
 8008c20:	d118      	bne.n	8008c54 <_strtod_l+0x1b4>
 8008c22:	b91d      	cbnz	r5, 8008c2c <_strtod_l+0x18c>
 8008c24:	9b04      	ldr	r3, [sp, #16]
 8008c26:	4303      	orrs	r3, r0
 8008c28:	d098      	beq.n	8008b5c <_strtod_l+0xbc>
 8008c2a:	2500      	movs	r5, #0
 8008c2c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008c30:	f108 0301 	add.w	r3, r8, #1
 8008c34:	931d      	str	r3, [sp, #116]	; 0x74
 8008c36:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008c3a:	2b2b      	cmp	r3, #43	; 0x2b
 8008c3c:	d075      	beq.n	8008d2a <_strtod_l+0x28a>
 8008c3e:	2b2d      	cmp	r3, #45	; 0x2d
 8008c40:	d07b      	beq.n	8008d3a <_strtod_l+0x29a>
 8008c42:	f04f 0c00 	mov.w	ip, #0
 8008c46:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008c4a:	2909      	cmp	r1, #9
 8008c4c:	f240 8082 	bls.w	8008d54 <_strtod_l+0x2b4>
 8008c50:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008c54:	2600      	movs	r6, #0
 8008c56:	e09d      	b.n	8008d94 <_strtod_l+0x2f4>
 8008c58:	2300      	movs	r3, #0
 8008c5a:	e7c4      	b.n	8008be6 <_strtod_l+0x146>
 8008c5c:	2f08      	cmp	r7, #8
 8008c5e:	bfd8      	it	le
 8008c60:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008c62:	f100 0001 	add.w	r0, r0, #1
 8008c66:	bfda      	itte	le
 8008c68:	fb02 3301 	mlale	r3, r2, r1, r3
 8008c6c:	9309      	strle	r3, [sp, #36]	; 0x24
 8008c6e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008c72:	3701      	adds	r7, #1
 8008c74:	901d      	str	r0, [sp, #116]	; 0x74
 8008c76:	e7bf      	b.n	8008bf8 <_strtod_l+0x158>
 8008c78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c7a:	195a      	adds	r2, r3, r5
 8008c7c:	921d      	str	r2, [sp, #116]	; 0x74
 8008c7e:	5d5b      	ldrb	r3, [r3, r5]
 8008c80:	2f00      	cmp	r7, #0
 8008c82:	d037      	beq.n	8008cf4 <_strtod_l+0x254>
 8008c84:	9007      	str	r0, [sp, #28]
 8008c86:	463d      	mov	r5, r7
 8008c88:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008c8c:	2a09      	cmp	r2, #9
 8008c8e:	d912      	bls.n	8008cb6 <_strtod_l+0x216>
 8008c90:	2201      	movs	r2, #1
 8008c92:	e7c2      	b.n	8008c1a <_strtod_l+0x17a>
 8008c94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c96:	1c5a      	adds	r2, r3, #1
 8008c98:	921d      	str	r2, [sp, #116]	; 0x74
 8008c9a:	785b      	ldrb	r3, [r3, #1]
 8008c9c:	3001      	adds	r0, #1
 8008c9e:	2b30      	cmp	r3, #48	; 0x30
 8008ca0:	d0f8      	beq.n	8008c94 <_strtod_l+0x1f4>
 8008ca2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008ca6:	2a08      	cmp	r2, #8
 8008ca8:	f200 84db 	bhi.w	8009662 <_strtod_l+0xbc2>
 8008cac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008cae:	9007      	str	r0, [sp, #28]
 8008cb0:	2000      	movs	r0, #0
 8008cb2:	920a      	str	r2, [sp, #40]	; 0x28
 8008cb4:	4605      	mov	r5, r0
 8008cb6:	3b30      	subs	r3, #48	; 0x30
 8008cb8:	f100 0201 	add.w	r2, r0, #1
 8008cbc:	d014      	beq.n	8008ce8 <_strtod_l+0x248>
 8008cbe:	9907      	ldr	r1, [sp, #28]
 8008cc0:	4411      	add	r1, r2
 8008cc2:	9107      	str	r1, [sp, #28]
 8008cc4:	462a      	mov	r2, r5
 8008cc6:	eb00 0e05 	add.w	lr, r0, r5
 8008cca:	210a      	movs	r1, #10
 8008ccc:	4572      	cmp	r2, lr
 8008cce:	d113      	bne.n	8008cf8 <_strtod_l+0x258>
 8008cd0:	182a      	adds	r2, r5, r0
 8008cd2:	2a08      	cmp	r2, #8
 8008cd4:	f105 0501 	add.w	r5, r5, #1
 8008cd8:	4405      	add	r5, r0
 8008cda:	dc1c      	bgt.n	8008d16 <_strtod_l+0x276>
 8008cdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008cde:	220a      	movs	r2, #10
 8008ce0:	fb02 3301 	mla	r3, r2, r1, r3
 8008ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008cea:	1c59      	adds	r1, r3, #1
 8008cec:	911d      	str	r1, [sp, #116]	; 0x74
 8008cee:	785b      	ldrb	r3, [r3, #1]
 8008cf0:	4610      	mov	r0, r2
 8008cf2:	e7c9      	b.n	8008c88 <_strtod_l+0x1e8>
 8008cf4:	4638      	mov	r0, r7
 8008cf6:	e7d2      	b.n	8008c9e <_strtod_l+0x1fe>
 8008cf8:	2a08      	cmp	r2, #8
 8008cfa:	dc04      	bgt.n	8008d06 <_strtod_l+0x266>
 8008cfc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008cfe:	434e      	muls	r6, r1
 8008d00:	9609      	str	r6, [sp, #36]	; 0x24
 8008d02:	3201      	adds	r2, #1
 8008d04:	e7e2      	b.n	8008ccc <_strtod_l+0x22c>
 8008d06:	f102 0c01 	add.w	ip, r2, #1
 8008d0a:	f1bc 0f10 	cmp.w	ip, #16
 8008d0e:	bfd8      	it	le
 8008d10:	fb01 f909 	mulle.w	r9, r1, r9
 8008d14:	e7f5      	b.n	8008d02 <_strtod_l+0x262>
 8008d16:	2d10      	cmp	r5, #16
 8008d18:	bfdc      	itt	le
 8008d1a:	220a      	movle	r2, #10
 8008d1c:	fb02 3909 	mlale	r9, r2, r9, r3
 8008d20:	e7e1      	b.n	8008ce6 <_strtod_l+0x246>
 8008d22:	2300      	movs	r3, #0
 8008d24:	9307      	str	r3, [sp, #28]
 8008d26:	2201      	movs	r2, #1
 8008d28:	e77c      	b.n	8008c24 <_strtod_l+0x184>
 8008d2a:	f04f 0c00 	mov.w	ip, #0
 8008d2e:	f108 0302 	add.w	r3, r8, #2
 8008d32:	931d      	str	r3, [sp, #116]	; 0x74
 8008d34:	f898 3002 	ldrb.w	r3, [r8, #2]
 8008d38:	e785      	b.n	8008c46 <_strtod_l+0x1a6>
 8008d3a:	f04f 0c01 	mov.w	ip, #1
 8008d3e:	e7f6      	b.n	8008d2e <_strtod_l+0x28e>
 8008d40:	0800e630 	.word	0x0800e630
 8008d44:	0800e3e0 	.word	0x0800e3e0
 8008d48:	7ff00000 	.word	0x7ff00000
 8008d4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d4e:	1c59      	adds	r1, r3, #1
 8008d50:	911d      	str	r1, [sp, #116]	; 0x74
 8008d52:	785b      	ldrb	r3, [r3, #1]
 8008d54:	2b30      	cmp	r3, #48	; 0x30
 8008d56:	d0f9      	beq.n	8008d4c <_strtod_l+0x2ac>
 8008d58:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8008d5c:	2908      	cmp	r1, #8
 8008d5e:	f63f af79 	bhi.w	8008c54 <_strtod_l+0x1b4>
 8008d62:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008d66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d68:	9308      	str	r3, [sp, #32]
 8008d6a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d6c:	1c59      	adds	r1, r3, #1
 8008d6e:	911d      	str	r1, [sp, #116]	; 0x74
 8008d70:	785b      	ldrb	r3, [r3, #1]
 8008d72:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8008d76:	2e09      	cmp	r6, #9
 8008d78:	d937      	bls.n	8008dea <_strtod_l+0x34a>
 8008d7a:	9e08      	ldr	r6, [sp, #32]
 8008d7c:	1b89      	subs	r1, r1, r6
 8008d7e:	2908      	cmp	r1, #8
 8008d80:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008d84:	dc02      	bgt.n	8008d8c <_strtod_l+0x2ec>
 8008d86:	4576      	cmp	r6, lr
 8008d88:	bfa8      	it	ge
 8008d8a:	4676      	movge	r6, lr
 8008d8c:	f1bc 0f00 	cmp.w	ip, #0
 8008d90:	d000      	beq.n	8008d94 <_strtod_l+0x2f4>
 8008d92:	4276      	negs	r6, r6
 8008d94:	2d00      	cmp	r5, #0
 8008d96:	d14f      	bne.n	8008e38 <_strtod_l+0x398>
 8008d98:	9904      	ldr	r1, [sp, #16]
 8008d9a:	4301      	orrs	r1, r0
 8008d9c:	f47f aec2 	bne.w	8008b24 <_strtod_l+0x84>
 8008da0:	2a00      	cmp	r2, #0
 8008da2:	f47f aedb 	bne.w	8008b5c <_strtod_l+0xbc>
 8008da6:	2b69      	cmp	r3, #105	; 0x69
 8008da8:	d027      	beq.n	8008dfa <_strtod_l+0x35a>
 8008daa:	dc24      	bgt.n	8008df6 <_strtod_l+0x356>
 8008dac:	2b49      	cmp	r3, #73	; 0x49
 8008dae:	d024      	beq.n	8008dfa <_strtod_l+0x35a>
 8008db0:	2b4e      	cmp	r3, #78	; 0x4e
 8008db2:	f47f aed3 	bne.w	8008b5c <_strtod_l+0xbc>
 8008db6:	499e      	ldr	r1, [pc, #632]	; (8009030 <_strtod_l+0x590>)
 8008db8:	a81d      	add	r0, sp, #116	; 0x74
 8008dba:	f001 fe61 	bl	800aa80 <__match>
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	f43f aecc 	beq.w	8008b5c <_strtod_l+0xbc>
 8008dc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	2b28      	cmp	r3, #40	; 0x28
 8008dca:	d12d      	bne.n	8008e28 <_strtod_l+0x388>
 8008dcc:	4999      	ldr	r1, [pc, #612]	; (8009034 <_strtod_l+0x594>)
 8008dce:	aa20      	add	r2, sp, #128	; 0x80
 8008dd0:	a81d      	add	r0, sp, #116	; 0x74
 8008dd2:	f001 fe69 	bl	800aaa8 <__hexnan>
 8008dd6:	2805      	cmp	r0, #5
 8008dd8:	d126      	bne.n	8008e28 <_strtod_l+0x388>
 8008dda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ddc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008de0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008de4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008de8:	e69c      	b.n	8008b24 <_strtod_l+0x84>
 8008dea:	210a      	movs	r1, #10
 8008dec:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008df0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008df4:	e7b9      	b.n	8008d6a <_strtod_l+0x2ca>
 8008df6:	2b6e      	cmp	r3, #110	; 0x6e
 8008df8:	e7db      	b.n	8008db2 <_strtod_l+0x312>
 8008dfa:	498f      	ldr	r1, [pc, #572]	; (8009038 <_strtod_l+0x598>)
 8008dfc:	a81d      	add	r0, sp, #116	; 0x74
 8008dfe:	f001 fe3f 	bl	800aa80 <__match>
 8008e02:	2800      	cmp	r0, #0
 8008e04:	f43f aeaa 	beq.w	8008b5c <_strtod_l+0xbc>
 8008e08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e0a:	498c      	ldr	r1, [pc, #560]	; (800903c <_strtod_l+0x59c>)
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	a81d      	add	r0, sp, #116	; 0x74
 8008e10:	931d      	str	r3, [sp, #116]	; 0x74
 8008e12:	f001 fe35 	bl	800aa80 <__match>
 8008e16:	b910      	cbnz	r0, 8008e1e <_strtod_l+0x37e>
 8008e18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	931d      	str	r3, [sp, #116]	; 0x74
 8008e1e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800904c <_strtod_l+0x5ac>
 8008e22:	f04f 0a00 	mov.w	sl, #0
 8008e26:	e67d      	b.n	8008b24 <_strtod_l+0x84>
 8008e28:	4885      	ldr	r0, [pc, #532]	; (8009040 <_strtod_l+0x5a0>)
 8008e2a:	f003 f909 	bl	800c040 <nan>
 8008e2e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008e32:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008e36:	e675      	b.n	8008b24 <_strtod_l+0x84>
 8008e38:	9b07      	ldr	r3, [sp, #28]
 8008e3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e3c:	1af3      	subs	r3, r6, r3
 8008e3e:	2f00      	cmp	r7, #0
 8008e40:	bf08      	it	eq
 8008e42:	462f      	moveq	r7, r5
 8008e44:	2d10      	cmp	r5, #16
 8008e46:	9308      	str	r3, [sp, #32]
 8008e48:	46a8      	mov	r8, r5
 8008e4a:	bfa8      	it	ge
 8008e4c:	f04f 0810 	movge.w	r8, #16
 8008e50:	f7f7 fb60 	bl	8000514 <__aeabi_ui2d>
 8008e54:	2d09      	cmp	r5, #9
 8008e56:	4682      	mov	sl, r0
 8008e58:	468b      	mov	fp, r1
 8008e5a:	dd13      	ble.n	8008e84 <_strtod_l+0x3e4>
 8008e5c:	4b79      	ldr	r3, [pc, #484]	; (8009044 <_strtod_l+0x5a4>)
 8008e5e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008e62:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008e66:	f7f7 fbcf 	bl	8000608 <__aeabi_dmul>
 8008e6a:	4682      	mov	sl, r0
 8008e6c:	4648      	mov	r0, r9
 8008e6e:	468b      	mov	fp, r1
 8008e70:	f7f7 fb50 	bl	8000514 <__aeabi_ui2d>
 8008e74:	4602      	mov	r2, r0
 8008e76:	460b      	mov	r3, r1
 8008e78:	4650      	mov	r0, sl
 8008e7a:	4659      	mov	r1, fp
 8008e7c:	f7f7 fa0e 	bl	800029c <__adddf3>
 8008e80:	4682      	mov	sl, r0
 8008e82:	468b      	mov	fp, r1
 8008e84:	2d0f      	cmp	r5, #15
 8008e86:	dc38      	bgt.n	8008efa <_strtod_l+0x45a>
 8008e88:	9b08      	ldr	r3, [sp, #32]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	f43f ae4a 	beq.w	8008b24 <_strtod_l+0x84>
 8008e90:	dd24      	ble.n	8008edc <_strtod_l+0x43c>
 8008e92:	2b16      	cmp	r3, #22
 8008e94:	dc0b      	bgt.n	8008eae <_strtod_l+0x40e>
 8008e96:	4d6b      	ldr	r5, [pc, #428]	; (8009044 <_strtod_l+0x5a4>)
 8008e98:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008e9c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008ea0:	4652      	mov	r2, sl
 8008ea2:	465b      	mov	r3, fp
 8008ea4:	f7f7 fbb0 	bl	8000608 <__aeabi_dmul>
 8008ea8:	4682      	mov	sl, r0
 8008eaa:	468b      	mov	fp, r1
 8008eac:	e63a      	b.n	8008b24 <_strtod_l+0x84>
 8008eae:	9a08      	ldr	r2, [sp, #32]
 8008eb0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	db20      	blt.n	8008efa <_strtod_l+0x45a>
 8008eb8:	4c62      	ldr	r4, [pc, #392]	; (8009044 <_strtod_l+0x5a4>)
 8008eba:	f1c5 050f 	rsb	r5, r5, #15
 8008ebe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008ec2:	4652      	mov	r2, sl
 8008ec4:	465b      	mov	r3, fp
 8008ec6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008eca:	f7f7 fb9d 	bl	8000608 <__aeabi_dmul>
 8008ece:	9b08      	ldr	r3, [sp, #32]
 8008ed0:	1b5d      	subs	r5, r3, r5
 8008ed2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008ed6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008eda:	e7e3      	b.n	8008ea4 <_strtod_l+0x404>
 8008edc:	9b08      	ldr	r3, [sp, #32]
 8008ede:	3316      	adds	r3, #22
 8008ee0:	db0b      	blt.n	8008efa <_strtod_l+0x45a>
 8008ee2:	9b07      	ldr	r3, [sp, #28]
 8008ee4:	4a57      	ldr	r2, [pc, #348]	; (8009044 <_strtod_l+0x5a4>)
 8008ee6:	1b9e      	subs	r6, r3, r6
 8008ee8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008eec:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ef0:	4650      	mov	r0, sl
 8008ef2:	4659      	mov	r1, fp
 8008ef4:	f7f7 fcb2 	bl	800085c <__aeabi_ddiv>
 8008ef8:	e7d6      	b.n	8008ea8 <_strtod_l+0x408>
 8008efa:	9b08      	ldr	r3, [sp, #32]
 8008efc:	eba5 0808 	sub.w	r8, r5, r8
 8008f00:	4498      	add	r8, r3
 8008f02:	f1b8 0f00 	cmp.w	r8, #0
 8008f06:	dd71      	ble.n	8008fec <_strtod_l+0x54c>
 8008f08:	f018 030f 	ands.w	r3, r8, #15
 8008f0c:	d00a      	beq.n	8008f24 <_strtod_l+0x484>
 8008f0e:	494d      	ldr	r1, [pc, #308]	; (8009044 <_strtod_l+0x5a4>)
 8008f10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008f14:	4652      	mov	r2, sl
 8008f16:	465b      	mov	r3, fp
 8008f18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f1c:	f7f7 fb74 	bl	8000608 <__aeabi_dmul>
 8008f20:	4682      	mov	sl, r0
 8008f22:	468b      	mov	fp, r1
 8008f24:	f038 080f 	bics.w	r8, r8, #15
 8008f28:	d04d      	beq.n	8008fc6 <_strtod_l+0x526>
 8008f2a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008f2e:	dd22      	ble.n	8008f76 <_strtod_l+0x4d6>
 8008f30:	2500      	movs	r5, #0
 8008f32:	462e      	mov	r6, r5
 8008f34:	9509      	str	r5, [sp, #36]	; 0x24
 8008f36:	9507      	str	r5, [sp, #28]
 8008f38:	2322      	movs	r3, #34	; 0x22
 8008f3a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800904c <_strtod_l+0x5ac>
 8008f3e:	6023      	str	r3, [r4, #0]
 8008f40:	f04f 0a00 	mov.w	sl, #0
 8008f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	f43f adec 	beq.w	8008b24 <_strtod_l+0x84>
 8008f4c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f001 feb6 	bl	800acc0 <_Bfree>
 8008f54:	9907      	ldr	r1, [sp, #28]
 8008f56:	4620      	mov	r0, r4
 8008f58:	f001 feb2 	bl	800acc0 <_Bfree>
 8008f5c:	4631      	mov	r1, r6
 8008f5e:	4620      	mov	r0, r4
 8008f60:	f001 feae 	bl	800acc0 <_Bfree>
 8008f64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f66:	4620      	mov	r0, r4
 8008f68:	f001 feaa 	bl	800acc0 <_Bfree>
 8008f6c:	4629      	mov	r1, r5
 8008f6e:	4620      	mov	r0, r4
 8008f70:	f001 fea6 	bl	800acc0 <_Bfree>
 8008f74:	e5d6      	b.n	8008b24 <_strtod_l+0x84>
 8008f76:	2300      	movs	r3, #0
 8008f78:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008f7c:	4650      	mov	r0, sl
 8008f7e:	4659      	mov	r1, fp
 8008f80:	4699      	mov	r9, r3
 8008f82:	f1b8 0f01 	cmp.w	r8, #1
 8008f86:	dc21      	bgt.n	8008fcc <_strtod_l+0x52c>
 8008f88:	b10b      	cbz	r3, 8008f8e <_strtod_l+0x4ee>
 8008f8a:	4682      	mov	sl, r0
 8008f8c:	468b      	mov	fp, r1
 8008f8e:	4b2e      	ldr	r3, [pc, #184]	; (8009048 <_strtod_l+0x5a8>)
 8008f90:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008f94:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008f98:	4652      	mov	r2, sl
 8008f9a:	465b      	mov	r3, fp
 8008f9c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008fa0:	f7f7 fb32 	bl	8000608 <__aeabi_dmul>
 8008fa4:	4b29      	ldr	r3, [pc, #164]	; (800904c <_strtod_l+0x5ac>)
 8008fa6:	460a      	mov	r2, r1
 8008fa8:	400b      	ands	r3, r1
 8008faa:	4929      	ldr	r1, [pc, #164]	; (8009050 <_strtod_l+0x5b0>)
 8008fac:	428b      	cmp	r3, r1
 8008fae:	4682      	mov	sl, r0
 8008fb0:	d8be      	bhi.n	8008f30 <_strtod_l+0x490>
 8008fb2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008fb6:	428b      	cmp	r3, r1
 8008fb8:	bf86      	itte	hi
 8008fba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009054 <_strtod_l+0x5b4>
 8008fbe:	f04f 3aff 	movhi.w	sl, #4294967295
 8008fc2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	9304      	str	r3, [sp, #16]
 8008fca:	e081      	b.n	80090d0 <_strtod_l+0x630>
 8008fcc:	f018 0f01 	tst.w	r8, #1
 8008fd0:	d007      	beq.n	8008fe2 <_strtod_l+0x542>
 8008fd2:	4b1d      	ldr	r3, [pc, #116]	; (8009048 <_strtod_l+0x5a8>)
 8008fd4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fdc:	f7f7 fb14 	bl	8000608 <__aeabi_dmul>
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	f109 0901 	add.w	r9, r9, #1
 8008fe6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008fea:	e7ca      	b.n	8008f82 <_strtod_l+0x4e2>
 8008fec:	d0eb      	beq.n	8008fc6 <_strtod_l+0x526>
 8008fee:	f1c8 0800 	rsb	r8, r8, #0
 8008ff2:	f018 020f 	ands.w	r2, r8, #15
 8008ff6:	d00a      	beq.n	800900e <_strtod_l+0x56e>
 8008ff8:	4b12      	ldr	r3, [pc, #72]	; (8009044 <_strtod_l+0x5a4>)
 8008ffa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ffe:	4650      	mov	r0, sl
 8009000:	4659      	mov	r1, fp
 8009002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009006:	f7f7 fc29 	bl	800085c <__aeabi_ddiv>
 800900a:	4682      	mov	sl, r0
 800900c:	468b      	mov	fp, r1
 800900e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009012:	d0d8      	beq.n	8008fc6 <_strtod_l+0x526>
 8009014:	f1b8 0f1f 	cmp.w	r8, #31
 8009018:	dd1e      	ble.n	8009058 <_strtod_l+0x5b8>
 800901a:	2500      	movs	r5, #0
 800901c:	462e      	mov	r6, r5
 800901e:	9509      	str	r5, [sp, #36]	; 0x24
 8009020:	9507      	str	r5, [sp, #28]
 8009022:	2322      	movs	r3, #34	; 0x22
 8009024:	f04f 0a00 	mov.w	sl, #0
 8009028:	f04f 0b00 	mov.w	fp, #0
 800902c:	6023      	str	r3, [r4, #0]
 800902e:	e789      	b.n	8008f44 <_strtod_l+0x4a4>
 8009030:	0800e3b5 	.word	0x0800e3b5
 8009034:	0800e3f4 	.word	0x0800e3f4
 8009038:	0800e3ad 	.word	0x0800e3ad
 800903c:	0800e534 	.word	0x0800e534
 8009040:	0800e80b 	.word	0x0800e80b
 8009044:	0800e6d0 	.word	0x0800e6d0
 8009048:	0800e6a8 	.word	0x0800e6a8
 800904c:	7ff00000 	.word	0x7ff00000
 8009050:	7ca00000 	.word	0x7ca00000
 8009054:	7fefffff 	.word	0x7fefffff
 8009058:	f018 0310 	ands.w	r3, r8, #16
 800905c:	bf18      	it	ne
 800905e:	236a      	movne	r3, #106	; 0x6a
 8009060:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8009418 <_strtod_l+0x978>
 8009064:	9304      	str	r3, [sp, #16]
 8009066:	4650      	mov	r0, sl
 8009068:	4659      	mov	r1, fp
 800906a:	2300      	movs	r3, #0
 800906c:	f018 0f01 	tst.w	r8, #1
 8009070:	d004      	beq.n	800907c <_strtod_l+0x5dc>
 8009072:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009076:	f7f7 fac7 	bl	8000608 <__aeabi_dmul>
 800907a:	2301      	movs	r3, #1
 800907c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009080:	f109 0908 	add.w	r9, r9, #8
 8009084:	d1f2      	bne.n	800906c <_strtod_l+0x5cc>
 8009086:	b10b      	cbz	r3, 800908c <_strtod_l+0x5ec>
 8009088:	4682      	mov	sl, r0
 800908a:	468b      	mov	fp, r1
 800908c:	9b04      	ldr	r3, [sp, #16]
 800908e:	b1bb      	cbz	r3, 80090c0 <_strtod_l+0x620>
 8009090:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009094:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009098:	2b00      	cmp	r3, #0
 800909a:	4659      	mov	r1, fp
 800909c:	dd10      	ble.n	80090c0 <_strtod_l+0x620>
 800909e:	2b1f      	cmp	r3, #31
 80090a0:	f340 8128 	ble.w	80092f4 <_strtod_l+0x854>
 80090a4:	2b34      	cmp	r3, #52	; 0x34
 80090a6:	bfde      	ittt	le
 80090a8:	3b20      	suble	r3, #32
 80090aa:	f04f 32ff 	movle.w	r2, #4294967295
 80090ae:	fa02 f303 	lslle.w	r3, r2, r3
 80090b2:	f04f 0a00 	mov.w	sl, #0
 80090b6:	bfcc      	ite	gt
 80090b8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80090bc:	ea03 0b01 	andle.w	fp, r3, r1
 80090c0:	2200      	movs	r2, #0
 80090c2:	2300      	movs	r3, #0
 80090c4:	4650      	mov	r0, sl
 80090c6:	4659      	mov	r1, fp
 80090c8:	f7f7 fd06 	bl	8000ad8 <__aeabi_dcmpeq>
 80090cc:	2800      	cmp	r0, #0
 80090ce:	d1a4      	bne.n	800901a <_strtod_l+0x57a>
 80090d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090d2:	9300      	str	r3, [sp, #0]
 80090d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80090d6:	462b      	mov	r3, r5
 80090d8:	463a      	mov	r2, r7
 80090da:	4620      	mov	r0, r4
 80090dc:	f001 fe5c 	bl	800ad98 <__s2b>
 80090e0:	9009      	str	r0, [sp, #36]	; 0x24
 80090e2:	2800      	cmp	r0, #0
 80090e4:	f43f af24 	beq.w	8008f30 <_strtod_l+0x490>
 80090e8:	9b07      	ldr	r3, [sp, #28]
 80090ea:	1b9e      	subs	r6, r3, r6
 80090ec:	9b08      	ldr	r3, [sp, #32]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	bfb4      	ite	lt
 80090f2:	4633      	movlt	r3, r6
 80090f4:	2300      	movge	r3, #0
 80090f6:	9310      	str	r3, [sp, #64]	; 0x40
 80090f8:	9b08      	ldr	r3, [sp, #32]
 80090fa:	2500      	movs	r5, #0
 80090fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009100:	9318      	str	r3, [sp, #96]	; 0x60
 8009102:	462e      	mov	r6, r5
 8009104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009106:	4620      	mov	r0, r4
 8009108:	6859      	ldr	r1, [r3, #4]
 800910a:	f001 fd99 	bl	800ac40 <_Balloc>
 800910e:	9007      	str	r0, [sp, #28]
 8009110:	2800      	cmp	r0, #0
 8009112:	f43f af11 	beq.w	8008f38 <_strtod_l+0x498>
 8009116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009118:	691a      	ldr	r2, [r3, #16]
 800911a:	3202      	adds	r2, #2
 800911c:	f103 010c 	add.w	r1, r3, #12
 8009120:	0092      	lsls	r2, r2, #2
 8009122:	300c      	adds	r0, #12
 8009124:	f7fe fd64 	bl	8007bf0 <memcpy>
 8009128:	ec4b ab10 	vmov	d0, sl, fp
 800912c:	aa20      	add	r2, sp, #128	; 0x80
 800912e:	a91f      	add	r1, sp, #124	; 0x7c
 8009130:	4620      	mov	r0, r4
 8009132:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8009136:	f002 f96b 	bl	800b410 <__d2b>
 800913a:	901e      	str	r0, [sp, #120]	; 0x78
 800913c:	2800      	cmp	r0, #0
 800913e:	f43f aefb 	beq.w	8008f38 <_strtod_l+0x498>
 8009142:	2101      	movs	r1, #1
 8009144:	4620      	mov	r0, r4
 8009146:	f001 fec1 	bl	800aecc <__i2b>
 800914a:	4606      	mov	r6, r0
 800914c:	2800      	cmp	r0, #0
 800914e:	f43f aef3 	beq.w	8008f38 <_strtod_l+0x498>
 8009152:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009154:	9904      	ldr	r1, [sp, #16]
 8009156:	2b00      	cmp	r3, #0
 8009158:	bfab      	itete	ge
 800915a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800915c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800915e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8009160:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8009164:	bfac      	ite	ge
 8009166:	eb03 0902 	addge.w	r9, r3, r2
 800916a:	1ad7      	sublt	r7, r2, r3
 800916c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800916e:	eba3 0801 	sub.w	r8, r3, r1
 8009172:	4490      	add	r8, r2
 8009174:	4ba3      	ldr	r3, [pc, #652]	; (8009404 <_strtod_l+0x964>)
 8009176:	f108 38ff 	add.w	r8, r8, #4294967295
 800917a:	4598      	cmp	r8, r3
 800917c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009180:	f280 80cc 	bge.w	800931c <_strtod_l+0x87c>
 8009184:	eba3 0308 	sub.w	r3, r3, r8
 8009188:	2b1f      	cmp	r3, #31
 800918a:	eba2 0203 	sub.w	r2, r2, r3
 800918e:	f04f 0101 	mov.w	r1, #1
 8009192:	f300 80b6 	bgt.w	8009302 <_strtod_l+0x862>
 8009196:	fa01 f303 	lsl.w	r3, r1, r3
 800919a:	9311      	str	r3, [sp, #68]	; 0x44
 800919c:	2300      	movs	r3, #0
 800919e:	930c      	str	r3, [sp, #48]	; 0x30
 80091a0:	eb09 0802 	add.w	r8, r9, r2
 80091a4:	9b04      	ldr	r3, [sp, #16]
 80091a6:	45c1      	cmp	r9, r8
 80091a8:	4417      	add	r7, r2
 80091aa:	441f      	add	r7, r3
 80091ac:	464b      	mov	r3, r9
 80091ae:	bfa8      	it	ge
 80091b0:	4643      	movge	r3, r8
 80091b2:	42bb      	cmp	r3, r7
 80091b4:	bfa8      	it	ge
 80091b6:	463b      	movge	r3, r7
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	bfc2      	ittt	gt
 80091bc:	eba8 0803 	subgt.w	r8, r8, r3
 80091c0:	1aff      	subgt	r7, r7, r3
 80091c2:	eba9 0903 	subgt.w	r9, r9, r3
 80091c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	dd17      	ble.n	80091fc <_strtod_l+0x75c>
 80091cc:	4631      	mov	r1, r6
 80091ce:	461a      	mov	r2, r3
 80091d0:	4620      	mov	r0, r4
 80091d2:	f001 ff37 	bl	800b044 <__pow5mult>
 80091d6:	4606      	mov	r6, r0
 80091d8:	2800      	cmp	r0, #0
 80091da:	f43f aead 	beq.w	8008f38 <_strtod_l+0x498>
 80091de:	4601      	mov	r1, r0
 80091e0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80091e2:	4620      	mov	r0, r4
 80091e4:	f001 fe88 	bl	800aef8 <__multiply>
 80091e8:	900f      	str	r0, [sp, #60]	; 0x3c
 80091ea:	2800      	cmp	r0, #0
 80091ec:	f43f aea4 	beq.w	8008f38 <_strtod_l+0x498>
 80091f0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80091f2:	4620      	mov	r0, r4
 80091f4:	f001 fd64 	bl	800acc0 <_Bfree>
 80091f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091fa:	931e      	str	r3, [sp, #120]	; 0x78
 80091fc:	f1b8 0f00 	cmp.w	r8, #0
 8009200:	f300 8091 	bgt.w	8009326 <_strtod_l+0x886>
 8009204:	9b08      	ldr	r3, [sp, #32]
 8009206:	2b00      	cmp	r3, #0
 8009208:	dd08      	ble.n	800921c <_strtod_l+0x77c>
 800920a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800920c:	9907      	ldr	r1, [sp, #28]
 800920e:	4620      	mov	r0, r4
 8009210:	f001 ff18 	bl	800b044 <__pow5mult>
 8009214:	9007      	str	r0, [sp, #28]
 8009216:	2800      	cmp	r0, #0
 8009218:	f43f ae8e 	beq.w	8008f38 <_strtod_l+0x498>
 800921c:	2f00      	cmp	r7, #0
 800921e:	dd08      	ble.n	8009232 <_strtod_l+0x792>
 8009220:	9907      	ldr	r1, [sp, #28]
 8009222:	463a      	mov	r2, r7
 8009224:	4620      	mov	r0, r4
 8009226:	f001 ff67 	bl	800b0f8 <__lshift>
 800922a:	9007      	str	r0, [sp, #28]
 800922c:	2800      	cmp	r0, #0
 800922e:	f43f ae83 	beq.w	8008f38 <_strtod_l+0x498>
 8009232:	f1b9 0f00 	cmp.w	r9, #0
 8009236:	dd08      	ble.n	800924a <_strtod_l+0x7aa>
 8009238:	4631      	mov	r1, r6
 800923a:	464a      	mov	r2, r9
 800923c:	4620      	mov	r0, r4
 800923e:	f001 ff5b 	bl	800b0f8 <__lshift>
 8009242:	4606      	mov	r6, r0
 8009244:	2800      	cmp	r0, #0
 8009246:	f43f ae77 	beq.w	8008f38 <_strtod_l+0x498>
 800924a:	9a07      	ldr	r2, [sp, #28]
 800924c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800924e:	4620      	mov	r0, r4
 8009250:	f001 ffda 	bl	800b208 <__mdiff>
 8009254:	4605      	mov	r5, r0
 8009256:	2800      	cmp	r0, #0
 8009258:	f43f ae6e 	beq.w	8008f38 <_strtod_l+0x498>
 800925c:	68c3      	ldr	r3, [r0, #12]
 800925e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009260:	2300      	movs	r3, #0
 8009262:	60c3      	str	r3, [r0, #12]
 8009264:	4631      	mov	r1, r6
 8009266:	f001 ffb3 	bl	800b1d0 <__mcmp>
 800926a:	2800      	cmp	r0, #0
 800926c:	da65      	bge.n	800933a <_strtod_l+0x89a>
 800926e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009270:	ea53 030a 	orrs.w	r3, r3, sl
 8009274:	f040 8087 	bne.w	8009386 <_strtod_l+0x8e6>
 8009278:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800927c:	2b00      	cmp	r3, #0
 800927e:	f040 8082 	bne.w	8009386 <_strtod_l+0x8e6>
 8009282:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009286:	0d1b      	lsrs	r3, r3, #20
 8009288:	051b      	lsls	r3, r3, #20
 800928a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800928e:	d97a      	bls.n	8009386 <_strtod_l+0x8e6>
 8009290:	696b      	ldr	r3, [r5, #20]
 8009292:	b913      	cbnz	r3, 800929a <_strtod_l+0x7fa>
 8009294:	692b      	ldr	r3, [r5, #16]
 8009296:	2b01      	cmp	r3, #1
 8009298:	dd75      	ble.n	8009386 <_strtod_l+0x8e6>
 800929a:	4629      	mov	r1, r5
 800929c:	2201      	movs	r2, #1
 800929e:	4620      	mov	r0, r4
 80092a0:	f001 ff2a 	bl	800b0f8 <__lshift>
 80092a4:	4631      	mov	r1, r6
 80092a6:	4605      	mov	r5, r0
 80092a8:	f001 ff92 	bl	800b1d0 <__mcmp>
 80092ac:	2800      	cmp	r0, #0
 80092ae:	dd6a      	ble.n	8009386 <_strtod_l+0x8e6>
 80092b0:	9904      	ldr	r1, [sp, #16]
 80092b2:	4a55      	ldr	r2, [pc, #340]	; (8009408 <_strtod_l+0x968>)
 80092b4:	465b      	mov	r3, fp
 80092b6:	2900      	cmp	r1, #0
 80092b8:	f000 8085 	beq.w	80093c6 <_strtod_l+0x926>
 80092bc:	ea02 010b 	and.w	r1, r2, fp
 80092c0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80092c4:	dc7f      	bgt.n	80093c6 <_strtod_l+0x926>
 80092c6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80092ca:	f77f aeaa 	ble.w	8009022 <_strtod_l+0x582>
 80092ce:	4a4f      	ldr	r2, [pc, #316]	; (800940c <_strtod_l+0x96c>)
 80092d0:	2300      	movs	r3, #0
 80092d2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80092d6:	4650      	mov	r0, sl
 80092d8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80092dc:	4659      	mov	r1, fp
 80092de:	f7f7 f993 	bl	8000608 <__aeabi_dmul>
 80092e2:	460b      	mov	r3, r1
 80092e4:	4303      	orrs	r3, r0
 80092e6:	bf08      	it	eq
 80092e8:	2322      	moveq	r3, #34	; 0x22
 80092ea:	4682      	mov	sl, r0
 80092ec:	468b      	mov	fp, r1
 80092ee:	bf08      	it	eq
 80092f0:	6023      	streq	r3, [r4, #0]
 80092f2:	e62b      	b.n	8008f4c <_strtod_l+0x4ac>
 80092f4:	f04f 32ff 	mov.w	r2, #4294967295
 80092f8:	fa02 f303 	lsl.w	r3, r2, r3
 80092fc:	ea03 0a0a 	and.w	sl, r3, sl
 8009300:	e6de      	b.n	80090c0 <_strtod_l+0x620>
 8009302:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009306:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800930a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800930e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009312:	fa01 f308 	lsl.w	r3, r1, r8
 8009316:	930c      	str	r3, [sp, #48]	; 0x30
 8009318:	9111      	str	r1, [sp, #68]	; 0x44
 800931a:	e741      	b.n	80091a0 <_strtod_l+0x700>
 800931c:	2300      	movs	r3, #0
 800931e:	930c      	str	r3, [sp, #48]	; 0x30
 8009320:	2301      	movs	r3, #1
 8009322:	9311      	str	r3, [sp, #68]	; 0x44
 8009324:	e73c      	b.n	80091a0 <_strtod_l+0x700>
 8009326:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009328:	4642      	mov	r2, r8
 800932a:	4620      	mov	r0, r4
 800932c:	f001 fee4 	bl	800b0f8 <__lshift>
 8009330:	901e      	str	r0, [sp, #120]	; 0x78
 8009332:	2800      	cmp	r0, #0
 8009334:	f47f af66 	bne.w	8009204 <_strtod_l+0x764>
 8009338:	e5fe      	b.n	8008f38 <_strtod_l+0x498>
 800933a:	465f      	mov	r7, fp
 800933c:	d16e      	bne.n	800941c <_strtod_l+0x97c>
 800933e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009340:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009344:	b342      	cbz	r2, 8009398 <_strtod_l+0x8f8>
 8009346:	4a32      	ldr	r2, [pc, #200]	; (8009410 <_strtod_l+0x970>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d128      	bne.n	800939e <_strtod_l+0x8fe>
 800934c:	9b04      	ldr	r3, [sp, #16]
 800934e:	4650      	mov	r0, sl
 8009350:	b1eb      	cbz	r3, 800938e <_strtod_l+0x8ee>
 8009352:	4a2d      	ldr	r2, [pc, #180]	; (8009408 <_strtod_l+0x968>)
 8009354:	403a      	ands	r2, r7
 8009356:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800935a:	f04f 31ff 	mov.w	r1, #4294967295
 800935e:	d819      	bhi.n	8009394 <_strtod_l+0x8f4>
 8009360:	0d12      	lsrs	r2, r2, #20
 8009362:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009366:	fa01 f303 	lsl.w	r3, r1, r3
 800936a:	4298      	cmp	r0, r3
 800936c:	d117      	bne.n	800939e <_strtod_l+0x8fe>
 800936e:	4b29      	ldr	r3, [pc, #164]	; (8009414 <_strtod_l+0x974>)
 8009370:	429f      	cmp	r7, r3
 8009372:	d102      	bne.n	800937a <_strtod_l+0x8da>
 8009374:	3001      	adds	r0, #1
 8009376:	f43f addf 	beq.w	8008f38 <_strtod_l+0x498>
 800937a:	4b23      	ldr	r3, [pc, #140]	; (8009408 <_strtod_l+0x968>)
 800937c:	403b      	ands	r3, r7
 800937e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009382:	f04f 0a00 	mov.w	sl, #0
 8009386:	9b04      	ldr	r3, [sp, #16]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d1a0      	bne.n	80092ce <_strtod_l+0x82e>
 800938c:	e5de      	b.n	8008f4c <_strtod_l+0x4ac>
 800938e:	f04f 33ff 	mov.w	r3, #4294967295
 8009392:	e7ea      	b.n	800936a <_strtod_l+0x8ca>
 8009394:	460b      	mov	r3, r1
 8009396:	e7e8      	b.n	800936a <_strtod_l+0x8ca>
 8009398:	ea53 030a 	orrs.w	r3, r3, sl
 800939c:	d088      	beq.n	80092b0 <_strtod_l+0x810>
 800939e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093a0:	b1db      	cbz	r3, 80093da <_strtod_l+0x93a>
 80093a2:	423b      	tst	r3, r7
 80093a4:	d0ef      	beq.n	8009386 <_strtod_l+0x8e6>
 80093a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093a8:	9a04      	ldr	r2, [sp, #16]
 80093aa:	4650      	mov	r0, sl
 80093ac:	4659      	mov	r1, fp
 80093ae:	b1c3      	cbz	r3, 80093e2 <_strtod_l+0x942>
 80093b0:	f7ff fb57 	bl	8008a62 <sulp>
 80093b4:	4602      	mov	r2, r0
 80093b6:	460b      	mov	r3, r1
 80093b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80093bc:	f7f6 ff6e 	bl	800029c <__adddf3>
 80093c0:	4682      	mov	sl, r0
 80093c2:	468b      	mov	fp, r1
 80093c4:	e7df      	b.n	8009386 <_strtod_l+0x8e6>
 80093c6:	4013      	ands	r3, r2
 80093c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80093cc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80093d0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80093d4:	f04f 3aff 	mov.w	sl, #4294967295
 80093d8:	e7d5      	b.n	8009386 <_strtod_l+0x8e6>
 80093da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80093dc:	ea13 0f0a 	tst.w	r3, sl
 80093e0:	e7e0      	b.n	80093a4 <_strtod_l+0x904>
 80093e2:	f7ff fb3e 	bl	8008a62 <sulp>
 80093e6:	4602      	mov	r2, r0
 80093e8:	460b      	mov	r3, r1
 80093ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80093ee:	f7f6 ff53 	bl	8000298 <__aeabi_dsub>
 80093f2:	2200      	movs	r2, #0
 80093f4:	2300      	movs	r3, #0
 80093f6:	4682      	mov	sl, r0
 80093f8:	468b      	mov	fp, r1
 80093fa:	f7f7 fb6d 	bl	8000ad8 <__aeabi_dcmpeq>
 80093fe:	2800      	cmp	r0, #0
 8009400:	d0c1      	beq.n	8009386 <_strtod_l+0x8e6>
 8009402:	e60e      	b.n	8009022 <_strtod_l+0x582>
 8009404:	fffffc02 	.word	0xfffffc02
 8009408:	7ff00000 	.word	0x7ff00000
 800940c:	39500000 	.word	0x39500000
 8009410:	000fffff 	.word	0x000fffff
 8009414:	7fefffff 	.word	0x7fefffff
 8009418:	0800e408 	.word	0x0800e408
 800941c:	4631      	mov	r1, r6
 800941e:	4628      	mov	r0, r5
 8009420:	f002 f852 	bl	800b4c8 <__ratio>
 8009424:	ec59 8b10 	vmov	r8, r9, d0
 8009428:	ee10 0a10 	vmov	r0, s0
 800942c:	2200      	movs	r2, #0
 800942e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009432:	4649      	mov	r1, r9
 8009434:	f7f7 fb64 	bl	8000b00 <__aeabi_dcmple>
 8009438:	2800      	cmp	r0, #0
 800943a:	d07c      	beq.n	8009536 <_strtod_l+0xa96>
 800943c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800943e:	2b00      	cmp	r3, #0
 8009440:	d04c      	beq.n	80094dc <_strtod_l+0xa3c>
 8009442:	4b95      	ldr	r3, [pc, #596]	; (8009698 <_strtod_l+0xbf8>)
 8009444:	2200      	movs	r2, #0
 8009446:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800944a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009698 <_strtod_l+0xbf8>
 800944e:	f04f 0800 	mov.w	r8, #0
 8009452:	4b92      	ldr	r3, [pc, #584]	; (800969c <_strtod_l+0xbfc>)
 8009454:	403b      	ands	r3, r7
 8009456:	9311      	str	r3, [sp, #68]	; 0x44
 8009458:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800945a:	4b91      	ldr	r3, [pc, #580]	; (80096a0 <_strtod_l+0xc00>)
 800945c:	429a      	cmp	r2, r3
 800945e:	f040 80b2 	bne.w	80095c6 <_strtod_l+0xb26>
 8009462:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009466:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800946a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800946e:	ec4b ab10 	vmov	d0, sl, fp
 8009472:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8009476:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800947a:	f001 ff4d 	bl	800b318 <__ulp>
 800947e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009482:	ec53 2b10 	vmov	r2, r3, d0
 8009486:	f7f7 f8bf 	bl	8000608 <__aeabi_dmul>
 800948a:	4652      	mov	r2, sl
 800948c:	465b      	mov	r3, fp
 800948e:	f7f6 ff05 	bl	800029c <__adddf3>
 8009492:	460b      	mov	r3, r1
 8009494:	4981      	ldr	r1, [pc, #516]	; (800969c <_strtod_l+0xbfc>)
 8009496:	4a83      	ldr	r2, [pc, #524]	; (80096a4 <_strtod_l+0xc04>)
 8009498:	4019      	ands	r1, r3
 800949a:	4291      	cmp	r1, r2
 800949c:	4682      	mov	sl, r0
 800949e:	d95e      	bls.n	800955e <_strtod_l+0xabe>
 80094a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094a2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d103      	bne.n	80094b2 <_strtod_l+0xa12>
 80094aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094ac:	3301      	adds	r3, #1
 80094ae:	f43f ad43 	beq.w	8008f38 <_strtod_l+0x498>
 80094b2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80096b0 <_strtod_l+0xc10>
 80094b6:	f04f 3aff 	mov.w	sl, #4294967295
 80094ba:	991e      	ldr	r1, [sp, #120]	; 0x78
 80094bc:	4620      	mov	r0, r4
 80094be:	f001 fbff 	bl	800acc0 <_Bfree>
 80094c2:	9907      	ldr	r1, [sp, #28]
 80094c4:	4620      	mov	r0, r4
 80094c6:	f001 fbfb 	bl	800acc0 <_Bfree>
 80094ca:	4631      	mov	r1, r6
 80094cc:	4620      	mov	r0, r4
 80094ce:	f001 fbf7 	bl	800acc0 <_Bfree>
 80094d2:	4629      	mov	r1, r5
 80094d4:	4620      	mov	r0, r4
 80094d6:	f001 fbf3 	bl	800acc0 <_Bfree>
 80094da:	e613      	b.n	8009104 <_strtod_l+0x664>
 80094dc:	f1ba 0f00 	cmp.w	sl, #0
 80094e0:	d11b      	bne.n	800951a <_strtod_l+0xa7a>
 80094e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094e6:	b9f3      	cbnz	r3, 8009526 <_strtod_l+0xa86>
 80094e8:	4b6b      	ldr	r3, [pc, #428]	; (8009698 <_strtod_l+0xbf8>)
 80094ea:	2200      	movs	r2, #0
 80094ec:	4640      	mov	r0, r8
 80094ee:	4649      	mov	r1, r9
 80094f0:	f7f7 fafc 	bl	8000aec <__aeabi_dcmplt>
 80094f4:	b9d0      	cbnz	r0, 800952c <_strtod_l+0xa8c>
 80094f6:	4640      	mov	r0, r8
 80094f8:	4649      	mov	r1, r9
 80094fa:	4b6b      	ldr	r3, [pc, #428]	; (80096a8 <_strtod_l+0xc08>)
 80094fc:	2200      	movs	r2, #0
 80094fe:	f7f7 f883 	bl	8000608 <__aeabi_dmul>
 8009502:	4680      	mov	r8, r0
 8009504:	4689      	mov	r9, r1
 8009506:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800950a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800950e:	931b      	str	r3, [sp, #108]	; 0x6c
 8009510:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8009514:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009518:	e79b      	b.n	8009452 <_strtod_l+0x9b2>
 800951a:	f1ba 0f01 	cmp.w	sl, #1
 800951e:	d102      	bne.n	8009526 <_strtod_l+0xa86>
 8009520:	2f00      	cmp	r7, #0
 8009522:	f43f ad7e 	beq.w	8009022 <_strtod_l+0x582>
 8009526:	4b61      	ldr	r3, [pc, #388]	; (80096ac <_strtod_l+0xc0c>)
 8009528:	2200      	movs	r2, #0
 800952a:	e78c      	b.n	8009446 <_strtod_l+0x9a6>
 800952c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80096a8 <_strtod_l+0xc08>
 8009530:	f04f 0800 	mov.w	r8, #0
 8009534:	e7e7      	b.n	8009506 <_strtod_l+0xa66>
 8009536:	4b5c      	ldr	r3, [pc, #368]	; (80096a8 <_strtod_l+0xc08>)
 8009538:	4640      	mov	r0, r8
 800953a:	4649      	mov	r1, r9
 800953c:	2200      	movs	r2, #0
 800953e:	f7f7 f863 	bl	8000608 <__aeabi_dmul>
 8009542:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009544:	4680      	mov	r8, r0
 8009546:	4689      	mov	r9, r1
 8009548:	b933      	cbnz	r3, 8009558 <_strtod_l+0xab8>
 800954a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800954e:	9012      	str	r0, [sp, #72]	; 0x48
 8009550:	9313      	str	r3, [sp, #76]	; 0x4c
 8009552:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009556:	e7dd      	b.n	8009514 <_strtod_l+0xa74>
 8009558:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800955c:	e7f9      	b.n	8009552 <_strtod_l+0xab2>
 800955e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009562:	9b04      	ldr	r3, [sp, #16]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d1a8      	bne.n	80094ba <_strtod_l+0xa1a>
 8009568:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800956c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800956e:	0d1b      	lsrs	r3, r3, #20
 8009570:	051b      	lsls	r3, r3, #20
 8009572:	429a      	cmp	r2, r3
 8009574:	d1a1      	bne.n	80094ba <_strtod_l+0xa1a>
 8009576:	4640      	mov	r0, r8
 8009578:	4649      	mov	r1, r9
 800957a:	f7f7 fba5 	bl	8000cc8 <__aeabi_d2lz>
 800957e:	f7f7 f815 	bl	80005ac <__aeabi_l2d>
 8009582:	4602      	mov	r2, r0
 8009584:	460b      	mov	r3, r1
 8009586:	4640      	mov	r0, r8
 8009588:	4649      	mov	r1, r9
 800958a:	f7f6 fe85 	bl	8000298 <__aeabi_dsub>
 800958e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009590:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009594:	ea43 030a 	orr.w	r3, r3, sl
 8009598:	4313      	orrs	r3, r2
 800959a:	4680      	mov	r8, r0
 800959c:	4689      	mov	r9, r1
 800959e:	d053      	beq.n	8009648 <_strtod_l+0xba8>
 80095a0:	a335      	add	r3, pc, #212	; (adr r3, 8009678 <_strtod_l+0xbd8>)
 80095a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a6:	f7f7 faa1 	bl	8000aec <__aeabi_dcmplt>
 80095aa:	2800      	cmp	r0, #0
 80095ac:	f47f acce 	bne.w	8008f4c <_strtod_l+0x4ac>
 80095b0:	a333      	add	r3, pc, #204	; (adr r3, 8009680 <_strtod_l+0xbe0>)
 80095b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b6:	4640      	mov	r0, r8
 80095b8:	4649      	mov	r1, r9
 80095ba:	f7f7 fab5 	bl	8000b28 <__aeabi_dcmpgt>
 80095be:	2800      	cmp	r0, #0
 80095c0:	f43f af7b 	beq.w	80094ba <_strtod_l+0xa1a>
 80095c4:	e4c2      	b.n	8008f4c <_strtod_l+0x4ac>
 80095c6:	9b04      	ldr	r3, [sp, #16]
 80095c8:	b333      	cbz	r3, 8009618 <_strtod_l+0xb78>
 80095ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80095d0:	d822      	bhi.n	8009618 <_strtod_l+0xb78>
 80095d2:	a32d      	add	r3, pc, #180	; (adr r3, 8009688 <_strtod_l+0xbe8>)
 80095d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d8:	4640      	mov	r0, r8
 80095da:	4649      	mov	r1, r9
 80095dc:	f7f7 fa90 	bl	8000b00 <__aeabi_dcmple>
 80095e0:	b1a0      	cbz	r0, 800960c <_strtod_l+0xb6c>
 80095e2:	4649      	mov	r1, r9
 80095e4:	4640      	mov	r0, r8
 80095e6:	f7f7 fae7 	bl	8000bb8 <__aeabi_d2uiz>
 80095ea:	2801      	cmp	r0, #1
 80095ec:	bf38      	it	cc
 80095ee:	2001      	movcc	r0, #1
 80095f0:	f7f6 ff90 	bl	8000514 <__aeabi_ui2d>
 80095f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095f6:	4680      	mov	r8, r0
 80095f8:	4689      	mov	r9, r1
 80095fa:	bb13      	cbnz	r3, 8009642 <_strtod_l+0xba2>
 80095fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009600:	9014      	str	r0, [sp, #80]	; 0x50
 8009602:	9315      	str	r3, [sp, #84]	; 0x54
 8009604:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009608:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800960c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800960e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009610:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009614:	1a9b      	subs	r3, r3, r2
 8009616:	930d      	str	r3, [sp, #52]	; 0x34
 8009618:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800961c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009620:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009624:	f001 fe78 	bl	800b318 <__ulp>
 8009628:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800962c:	ec53 2b10 	vmov	r2, r3, d0
 8009630:	f7f6 ffea 	bl	8000608 <__aeabi_dmul>
 8009634:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009638:	f7f6 fe30 	bl	800029c <__adddf3>
 800963c:	4682      	mov	sl, r0
 800963e:	468b      	mov	fp, r1
 8009640:	e78f      	b.n	8009562 <_strtod_l+0xac2>
 8009642:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8009646:	e7dd      	b.n	8009604 <_strtod_l+0xb64>
 8009648:	a311      	add	r3, pc, #68	; (adr r3, 8009690 <_strtod_l+0xbf0>)
 800964a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964e:	f7f7 fa4d 	bl	8000aec <__aeabi_dcmplt>
 8009652:	e7b4      	b.n	80095be <_strtod_l+0xb1e>
 8009654:	2300      	movs	r3, #0
 8009656:	930e      	str	r3, [sp, #56]	; 0x38
 8009658:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800965a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800965c:	6013      	str	r3, [r2, #0]
 800965e:	f7ff ba65 	b.w	8008b2c <_strtod_l+0x8c>
 8009662:	2b65      	cmp	r3, #101	; 0x65
 8009664:	f43f ab5d 	beq.w	8008d22 <_strtod_l+0x282>
 8009668:	2b45      	cmp	r3, #69	; 0x45
 800966a:	f43f ab5a 	beq.w	8008d22 <_strtod_l+0x282>
 800966e:	2201      	movs	r2, #1
 8009670:	f7ff bb92 	b.w	8008d98 <_strtod_l+0x2f8>
 8009674:	f3af 8000 	nop.w
 8009678:	94a03595 	.word	0x94a03595
 800967c:	3fdfffff 	.word	0x3fdfffff
 8009680:	35afe535 	.word	0x35afe535
 8009684:	3fe00000 	.word	0x3fe00000
 8009688:	ffc00000 	.word	0xffc00000
 800968c:	41dfffff 	.word	0x41dfffff
 8009690:	94a03595 	.word	0x94a03595
 8009694:	3fcfffff 	.word	0x3fcfffff
 8009698:	3ff00000 	.word	0x3ff00000
 800969c:	7ff00000 	.word	0x7ff00000
 80096a0:	7fe00000 	.word	0x7fe00000
 80096a4:	7c9fffff 	.word	0x7c9fffff
 80096a8:	3fe00000 	.word	0x3fe00000
 80096ac:	bff00000 	.word	0xbff00000
 80096b0:	7fefffff 	.word	0x7fefffff

080096b4 <_strtod_r>:
 80096b4:	4b01      	ldr	r3, [pc, #4]	; (80096bc <_strtod_r+0x8>)
 80096b6:	f7ff b9f3 	b.w	8008aa0 <_strtod_l>
 80096ba:	bf00      	nop
 80096bc:	20000088 	.word	0x20000088

080096c0 <_strtol_l.isra.0>:
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096c6:	d001      	beq.n	80096cc <_strtol_l.isra.0+0xc>
 80096c8:	2b24      	cmp	r3, #36	; 0x24
 80096ca:	d906      	bls.n	80096da <_strtol_l.isra.0+0x1a>
 80096cc:	f7fe fa66 	bl	8007b9c <__errno>
 80096d0:	2316      	movs	r3, #22
 80096d2:	6003      	str	r3, [r0, #0]
 80096d4:	2000      	movs	r0, #0
 80096d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096da:	4f3a      	ldr	r7, [pc, #232]	; (80097c4 <_strtol_l.isra.0+0x104>)
 80096dc:	468e      	mov	lr, r1
 80096de:	4676      	mov	r6, lr
 80096e0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80096e4:	5de5      	ldrb	r5, [r4, r7]
 80096e6:	f015 0508 	ands.w	r5, r5, #8
 80096ea:	d1f8      	bne.n	80096de <_strtol_l.isra.0+0x1e>
 80096ec:	2c2d      	cmp	r4, #45	; 0x2d
 80096ee:	d134      	bne.n	800975a <_strtol_l.isra.0+0x9a>
 80096f0:	f89e 4000 	ldrb.w	r4, [lr]
 80096f4:	f04f 0801 	mov.w	r8, #1
 80096f8:	f106 0e02 	add.w	lr, r6, #2
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d05c      	beq.n	80097ba <_strtol_l.isra.0+0xfa>
 8009700:	2b10      	cmp	r3, #16
 8009702:	d10c      	bne.n	800971e <_strtol_l.isra.0+0x5e>
 8009704:	2c30      	cmp	r4, #48	; 0x30
 8009706:	d10a      	bne.n	800971e <_strtol_l.isra.0+0x5e>
 8009708:	f89e 4000 	ldrb.w	r4, [lr]
 800970c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009710:	2c58      	cmp	r4, #88	; 0x58
 8009712:	d14d      	bne.n	80097b0 <_strtol_l.isra.0+0xf0>
 8009714:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009718:	2310      	movs	r3, #16
 800971a:	f10e 0e02 	add.w	lr, lr, #2
 800971e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8009722:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009726:	2600      	movs	r6, #0
 8009728:	fbbc f9f3 	udiv	r9, ip, r3
 800972c:	4635      	mov	r5, r6
 800972e:	fb03 ca19 	mls	sl, r3, r9, ip
 8009732:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009736:	2f09      	cmp	r7, #9
 8009738:	d818      	bhi.n	800976c <_strtol_l.isra.0+0xac>
 800973a:	463c      	mov	r4, r7
 800973c:	42a3      	cmp	r3, r4
 800973e:	dd24      	ble.n	800978a <_strtol_l.isra.0+0xca>
 8009740:	2e00      	cmp	r6, #0
 8009742:	db1f      	blt.n	8009784 <_strtol_l.isra.0+0xc4>
 8009744:	45a9      	cmp	r9, r5
 8009746:	d31d      	bcc.n	8009784 <_strtol_l.isra.0+0xc4>
 8009748:	d101      	bne.n	800974e <_strtol_l.isra.0+0x8e>
 800974a:	45a2      	cmp	sl, r4
 800974c:	db1a      	blt.n	8009784 <_strtol_l.isra.0+0xc4>
 800974e:	fb05 4503 	mla	r5, r5, r3, r4
 8009752:	2601      	movs	r6, #1
 8009754:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009758:	e7eb      	b.n	8009732 <_strtol_l.isra.0+0x72>
 800975a:	2c2b      	cmp	r4, #43	; 0x2b
 800975c:	bf08      	it	eq
 800975e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8009762:	46a8      	mov	r8, r5
 8009764:	bf08      	it	eq
 8009766:	f106 0e02 	addeq.w	lr, r6, #2
 800976a:	e7c7      	b.n	80096fc <_strtol_l.isra.0+0x3c>
 800976c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009770:	2f19      	cmp	r7, #25
 8009772:	d801      	bhi.n	8009778 <_strtol_l.isra.0+0xb8>
 8009774:	3c37      	subs	r4, #55	; 0x37
 8009776:	e7e1      	b.n	800973c <_strtol_l.isra.0+0x7c>
 8009778:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800977c:	2f19      	cmp	r7, #25
 800977e:	d804      	bhi.n	800978a <_strtol_l.isra.0+0xca>
 8009780:	3c57      	subs	r4, #87	; 0x57
 8009782:	e7db      	b.n	800973c <_strtol_l.isra.0+0x7c>
 8009784:	f04f 36ff 	mov.w	r6, #4294967295
 8009788:	e7e4      	b.n	8009754 <_strtol_l.isra.0+0x94>
 800978a:	2e00      	cmp	r6, #0
 800978c:	da05      	bge.n	800979a <_strtol_l.isra.0+0xda>
 800978e:	2322      	movs	r3, #34	; 0x22
 8009790:	6003      	str	r3, [r0, #0]
 8009792:	4665      	mov	r5, ip
 8009794:	b942      	cbnz	r2, 80097a8 <_strtol_l.isra.0+0xe8>
 8009796:	4628      	mov	r0, r5
 8009798:	e79d      	b.n	80096d6 <_strtol_l.isra.0+0x16>
 800979a:	f1b8 0f00 	cmp.w	r8, #0
 800979e:	d000      	beq.n	80097a2 <_strtol_l.isra.0+0xe2>
 80097a0:	426d      	negs	r5, r5
 80097a2:	2a00      	cmp	r2, #0
 80097a4:	d0f7      	beq.n	8009796 <_strtol_l.isra.0+0xd6>
 80097a6:	b10e      	cbz	r6, 80097ac <_strtol_l.isra.0+0xec>
 80097a8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80097ac:	6011      	str	r1, [r2, #0]
 80097ae:	e7f2      	b.n	8009796 <_strtol_l.isra.0+0xd6>
 80097b0:	2430      	movs	r4, #48	; 0x30
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1b3      	bne.n	800971e <_strtol_l.isra.0+0x5e>
 80097b6:	2308      	movs	r3, #8
 80097b8:	e7b1      	b.n	800971e <_strtol_l.isra.0+0x5e>
 80097ba:	2c30      	cmp	r4, #48	; 0x30
 80097bc:	d0a4      	beq.n	8009708 <_strtol_l.isra.0+0x48>
 80097be:	230a      	movs	r3, #10
 80097c0:	e7ad      	b.n	800971e <_strtol_l.isra.0+0x5e>
 80097c2:	bf00      	nop
 80097c4:	0800e431 	.word	0x0800e431

080097c8 <_strtol_r>:
 80097c8:	f7ff bf7a 	b.w	80096c0 <_strtol_l.isra.0>

080097cc <_write_r>:
 80097cc:	b538      	push	{r3, r4, r5, lr}
 80097ce:	4d07      	ldr	r5, [pc, #28]	; (80097ec <_write_r+0x20>)
 80097d0:	4604      	mov	r4, r0
 80097d2:	4608      	mov	r0, r1
 80097d4:	4611      	mov	r1, r2
 80097d6:	2200      	movs	r2, #0
 80097d8:	602a      	str	r2, [r5, #0]
 80097da:	461a      	mov	r2, r3
 80097dc:	f7f8 fd1f 	bl	800221e <_write>
 80097e0:	1c43      	adds	r3, r0, #1
 80097e2:	d102      	bne.n	80097ea <_write_r+0x1e>
 80097e4:	682b      	ldr	r3, [r5, #0]
 80097e6:	b103      	cbz	r3, 80097ea <_write_r+0x1e>
 80097e8:	6023      	str	r3, [r4, #0]
 80097ea:	bd38      	pop	{r3, r4, r5, pc}
 80097ec:	20005028 	.word	0x20005028

080097f0 <_close_r>:
 80097f0:	b538      	push	{r3, r4, r5, lr}
 80097f2:	4d06      	ldr	r5, [pc, #24]	; (800980c <_close_r+0x1c>)
 80097f4:	2300      	movs	r3, #0
 80097f6:	4604      	mov	r4, r0
 80097f8:	4608      	mov	r0, r1
 80097fa:	602b      	str	r3, [r5, #0]
 80097fc:	f7f8 fd2b 	bl	8002256 <_close>
 8009800:	1c43      	adds	r3, r0, #1
 8009802:	d102      	bne.n	800980a <_close_r+0x1a>
 8009804:	682b      	ldr	r3, [r5, #0]
 8009806:	b103      	cbz	r3, 800980a <_close_r+0x1a>
 8009808:	6023      	str	r3, [r4, #0]
 800980a:	bd38      	pop	{r3, r4, r5, pc}
 800980c:	20005028 	.word	0x20005028

08009810 <quorem>:
 8009810:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009814:	6903      	ldr	r3, [r0, #16]
 8009816:	690c      	ldr	r4, [r1, #16]
 8009818:	42a3      	cmp	r3, r4
 800981a:	4607      	mov	r7, r0
 800981c:	f2c0 8081 	blt.w	8009922 <quorem+0x112>
 8009820:	3c01      	subs	r4, #1
 8009822:	f101 0814 	add.w	r8, r1, #20
 8009826:	f100 0514 	add.w	r5, r0, #20
 800982a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800982e:	9301      	str	r3, [sp, #4]
 8009830:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009834:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009838:	3301      	adds	r3, #1
 800983a:	429a      	cmp	r2, r3
 800983c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009840:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009844:	fbb2 f6f3 	udiv	r6, r2, r3
 8009848:	d331      	bcc.n	80098ae <quorem+0x9e>
 800984a:	f04f 0e00 	mov.w	lr, #0
 800984e:	4640      	mov	r0, r8
 8009850:	46ac      	mov	ip, r5
 8009852:	46f2      	mov	sl, lr
 8009854:	f850 2b04 	ldr.w	r2, [r0], #4
 8009858:	b293      	uxth	r3, r2
 800985a:	fb06 e303 	mla	r3, r6, r3, lr
 800985e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009862:	b29b      	uxth	r3, r3
 8009864:	ebaa 0303 	sub.w	r3, sl, r3
 8009868:	0c12      	lsrs	r2, r2, #16
 800986a:	f8dc a000 	ldr.w	sl, [ip]
 800986e:	fb06 e202 	mla	r2, r6, r2, lr
 8009872:	fa13 f38a 	uxtah	r3, r3, sl
 8009876:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800987a:	fa1f fa82 	uxth.w	sl, r2
 800987e:	f8dc 2000 	ldr.w	r2, [ip]
 8009882:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009886:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800988a:	b29b      	uxth	r3, r3
 800988c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009890:	4581      	cmp	r9, r0
 8009892:	f84c 3b04 	str.w	r3, [ip], #4
 8009896:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800989a:	d2db      	bcs.n	8009854 <quorem+0x44>
 800989c:	f855 300b 	ldr.w	r3, [r5, fp]
 80098a0:	b92b      	cbnz	r3, 80098ae <quorem+0x9e>
 80098a2:	9b01      	ldr	r3, [sp, #4]
 80098a4:	3b04      	subs	r3, #4
 80098a6:	429d      	cmp	r5, r3
 80098a8:	461a      	mov	r2, r3
 80098aa:	d32e      	bcc.n	800990a <quorem+0xfa>
 80098ac:	613c      	str	r4, [r7, #16]
 80098ae:	4638      	mov	r0, r7
 80098b0:	f001 fc8e 	bl	800b1d0 <__mcmp>
 80098b4:	2800      	cmp	r0, #0
 80098b6:	db24      	blt.n	8009902 <quorem+0xf2>
 80098b8:	3601      	adds	r6, #1
 80098ba:	4628      	mov	r0, r5
 80098bc:	f04f 0c00 	mov.w	ip, #0
 80098c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80098c4:	f8d0 e000 	ldr.w	lr, [r0]
 80098c8:	b293      	uxth	r3, r2
 80098ca:	ebac 0303 	sub.w	r3, ip, r3
 80098ce:	0c12      	lsrs	r2, r2, #16
 80098d0:	fa13 f38e 	uxtah	r3, r3, lr
 80098d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80098d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80098dc:	b29b      	uxth	r3, r3
 80098de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098e2:	45c1      	cmp	r9, r8
 80098e4:	f840 3b04 	str.w	r3, [r0], #4
 80098e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80098ec:	d2e8      	bcs.n	80098c0 <quorem+0xb0>
 80098ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098f6:	b922      	cbnz	r2, 8009902 <quorem+0xf2>
 80098f8:	3b04      	subs	r3, #4
 80098fa:	429d      	cmp	r5, r3
 80098fc:	461a      	mov	r2, r3
 80098fe:	d30a      	bcc.n	8009916 <quorem+0x106>
 8009900:	613c      	str	r4, [r7, #16]
 8009902:	4630      	mov	r0, r6
 8009904:	b003      	add	sp, #12
 8009906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800990a:	6812      	ldr	r2, [r2, #0]
 800990c:	3b04      	subs	r3, #4
 800990e:	2a00      	cmp	r2, #0
 8009910:	d1cc      	bne.n	80098ac <quorem+0x9c>
 8009912:	3c01      	subs	r4, #1
 8009914:	e7c7      	b.n	80098a6 <quorem+0x96>
 8009916:	6812      	ldr	r2, [r2, #0]
 8009918:	3b04      	subs	r3, #4
 800991a:	2a00      	cmp	r2, #0
 800991c:	d1f0      	bne.n	8009900 <quorem+0xf0>
 800991e:	3c01      	subs	r4, #1
 8009920:	e7eb      	b.n	80098fa <quorem+0xea>
 8009922:	2000      	movs	r0, #0
 8009924:	e7ee      	b.n	8009904 <quorem+0xf4>
	...

08009928 <_dtoa_r>:
 8009928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800992c:	ed2d 8b02 	vpush	{d8}
 8009930:	ec57 6b10 	vmov	r6, r7, d0
 8009934:	b095      	sub	sp, #84	; 0x54
 8009936:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009938:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800993c:	9105      	str	r1, [sp, #20]
 800993e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009942:	4604      	mov	r4, r0
 8009944:	9209      	str	r2, [sp, #36]	; 0x24
 8009946:	930f      	str	r3, [sp, #60]	; 0x3c
 8009948:	b975      	cbnz	r5, 8009968 <_dtoa_r+0x40>
 800994a:	2010      	movs	r0, #16
 800994c:	f001 f95e 	bl	800ac0c <malloc>
 8009950:	4602      	mov	r2, r0
 8009952:	6260      	str	r0, [r4, #36]	; 0x24
 8009954:	b920      	cbnz	r0, 8009960 <_dtoa_r+0x38>
 8009956:	4bb2      	ldr	r3, [pc, #712]	; (8009c20 <_dtoa_r+0x2f8>)
 8009958:	21ea      	movs	r1, #234	; 0xea
 800995a:	48b2      	ldr	r0, [pc, #712]	; (8009c24 <_dtoa_r+0x2fc>)
 800995c:	f002 fc88 	bl	800c270 <__assert_func>
 8009960:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009964:	6005      	str	r5, [r0, #0]
 8009966:	60c5      	str	r5, [r0, #12]
 8009968:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800996a:	6819      	ldr	r1, [r3, #0]
 800996c:	b151      	cbz	r1, 8009984 <_dtoa_r+0x5c>
 800996e:	685a      	ldr	r2, [r3, #4]
 8009970:	604a      	str	r2, [r1, #4]
 8009972:	2301      	movs	r3, #1
 8009974:	4093      	lsls	r3, r2
 8009976:	608b      	str	r3, [r1, #8]
 8009978:	4620      	mov	r0, r4
 800997a:	f001 f9a1 	bl	800acc0 <_Bfree>
 800997e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009980:	2200      	movs	r2, #0
 8009982:	601a      	str	r2, [r3, #0]
 8009984:	1e3b      	subs	r3, r7, #0
 8009986:	bfb9      	ittee	lt
 8009988:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800998c:	9303      	strlt	r3, [sp, #12]
 800998e:	2300      	movge	r3, #0
 8009990:	f8c8 3000 	strge.w	r3, [r8]
 8009994:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009998:	4ba3      	ldr	r3, [pc, #652]	; (8009c28 <_dtoa_r+0x300>)
 800999a:	bfbc      	itt	lt
 800999c:	2201      	movlt	r2, #1
 800999e:	f8c8 2000 	strlt.w	r2, [r8]
 80099a2:	ea33 0309 	bics.w	r3, r3, r9
 80099a6:	d11b      	bne.n	80099e0 <_dtoa_r+0xb8>
 80099a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80099aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80099ae:	6013      	str	r3, [r2, #0]
 80099b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80099b4:	4333      	orrs	r3, r6
 80099b6:	f000 857a 	beq.w	800a4ae <_dtoa_r+0xb86>
 80099ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099bc:	b963      	cbnz	r3, 80099d8 <_dtoa_r+0xb0>
 80099be:	4b9b      	ldr	r3, [pc, #620]	; (8009c2c <_dtoa_r+0x304>)
 80099c0:	e024      	b.n	8009a0c <_dtoa_r+0xe4>
 80099c2:	4b9b      	ldr	r3, [pc, #620]	; (8009c30 <_dtoa_r+0x308>)
 80099c4:	9300      	str	r3, [sp, #0]
 80099c6:	3308      	adds	r3, #8
 80099c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80099ca:	6013      	str	r3, [r2, #0]
 80099cc:	9800      	ldr	r0, [sp, #0]
 80099ce:	b015      	add	sp, #84	; 0x54
 80099d0:	ecbd 8b02 	vpop	{d8}
 80099d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d8:	4b94      	ldr	r3, [pc, #592]	; (8009c2c <_dtoa_r+0x304>)
 80099da:	9300      	str	r3, [sp, #0]
 80099dc:	3303      	adds	r3, #3
 80099de:	e7f3      	b.n	80099c8 <_dtoa_r+0xa0>
 80099e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80099e4:	2200      	movs	r2, #0
 80099e6:	ec51 0b17 	vmov	r0, r1, d7
 80099ea:	2300      	movs	r3, #0
 80099ec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80099f0:	f7f7 f872 	bl	8000ad8 <__aeabi_dcmpeq>
 80099f4:	4680      	mov	r8, r0
 80099f6:	b158      	cbz	r0, 8009a10 <_dtoa_r+0xe8>
 80099f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80099fa:	2301      	movs	r3, #1
 80099fc:	6013      	str	r3, [r2, #0]
 80099fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	f000 8551 	beq.w	800a4a8 <_dtoa_r+0xb80>
 8009a06:	488b      	ldr	r0, [pc, #556]	; (8009c34 <_dtoa_r+0x30c>)
 8009a08:	6018      	str	r0, [r3, #0]
 8009a0a:	1e43      	subs	r3, r0, #1
 8009a0c:	9300      	str	r3, [sp, #0]
 8009a0e:	e7dd      	b.n	80099cc <_dtoa_r+0xa4>
 8009a10:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009a14:	aa12      	add	r2, sp, #72	; 0x48
 8009a16:	a913      	add	r1, sp, #76	; 0x4c
 8009a18:	4620      	mov	r0, r4
 8009a1a:	f001 fcf9 	bl	800b410 <__d2b>
 8009a1e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009a22:	4683      	mov	fp, r0
 8009a24:	2d00      	cmp	r5, #0
 8009a26:	d07c      	beq.n	8009b22 <_dtoa_r+0x1fa>
 8009a28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a2a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009a2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a32:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009a36:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009a3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009a3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009a42:	4b7d      	ldr	r3, [pc, #500]	; (8009c38 <_dtoa_r+0x310>)
 8009a44:	2200      	movs	r2, #0
 8009a46:	4630      	mov	r0, r6
 8009a48:	4639      	mov	r1, r7
 8009a4a:	f7f6 fc25 	bl	8000298 <__aeabi_dsub>
 8009a4e:	a36e      	add	r3, pc, #440	; (adr r3, 8009c08 <_dtoa_r+0x2e0>)
 8009a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a54:	f7f6 fdd8 	bl	8000608 <__aeabi_dmul>
 8009a58:	a36d      	add	r3, pc, #436	; (adr r3, 8009c10 <_dtoa_r+0x2e8>)
 8009a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5e:	f7f6 fc1d 	bl	800029c <__adddf3>
 8009a62:	4606      	mov	r6, r0
 8009a64:	4628      	mov	r0, r5
 8009a66:	460f      	mov	r7, r1
 8009a68:	f7f6 fd64 	bl	8000534 <__aeabi_i2d>
 8009a6c:	a36a      	add	r3, pc, #424	; (adr r3, 8009c18 <_dtoa_r+0x2f0>)
 8009a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a72:	f7f6 fdc9 	bl	8000608 <__aeabi_dmul>
 8009a76:	4602      	mov	r2, r0
 8009a78:	460b      	mov	r3, r1
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	4639      	mov	r1, r7
 8009a7e:	f7f6 fc0d 	bl	800029c <__adddf3>
 8009a82:	4606      	mov	r6, r0
 8009a84:	460f      	mov	r7, r1
 8009a86:	f7f7 f86f 	bl	8000b68 <__aeabi_d2iz>
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	4682      	mov	sl, r0
 8009a8e:	2300      	movs	r3, #0
 8009a90:	4630      	mov	r0, r6
 8009a92:	4639      	mov	r1, r7
 8009a94:	f7f7 f82a 	bl	8000aec <__aeabi_dcmplt>
 8009a98:	b148      	cbz	r0, 8009aae <_dtoa_r+0x186>
 8009a9a:	4650      	mov	r0, sl
 8009a9c:	f7f6 fd4a 	bl	8000534 <__aeabi_i2d>
 8009aa0:	4632      	mov	r2, r6
 8009aa2:	463b      	mov	r3, r7
 8009aa4:	f7f7 f818 	bl	8000ad8 <__aeabi_dcmpeq>
 8009aa8:	b908      	cbnz	r0, 8009aae <_dtoa_r+0x186>
 8009aaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009aae:	f1ba 0f16 	cmp.w	sl, #22
 8009ab2:	d854      	bhi.n	8009b5e <_dtoa_r+0x236>
 8009ab4:	4b61      	ldr	r3, [pc, #388]	; (8009c3c <_dtoa_r+0x314>)
 8009ab6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009ac2:	f7f7 f813 	bl	8000aec <__aeabi_dcmplt>
 8009ac6:	2800      	cmp	r0, #0
 8009ac8:	d04b      	beq.n	8009b62 <_dtoa_r+0x23a>
 8009aca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ace:	2300      	movs	r3, #0
 8009ad0:	930e      	str	r3, [sp, #56]	; 0x38
 8009ad2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ad4:	1b5d      	subs	r5, r3, r5
 8009ad6:	1e6b      	subs	r3, r5, #1
 8009ad8:	9304      	str	r3, [sp, #16]
 8009ada:	bf43      	ittte	mi
 8009adc:	2300      	movmi	r3, #0
 8009ade:	f1c5 0801 	rsbmi	r8, r5, #1
 8009ae2:	9304      	strmi	r3, [sp, #16]
 8009ae4:	f04f 0800 	movpl.w	r8, #0
 8009ae8:	f1ba 0f00 	cmp.w	sl, #0
 8009aec:	db3b      	blt.n	8009b66 <_dtoa_r+0x23e>
 8009aee:	9b04      	ldr	r3, [sp, #16]
 8009af0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009af4:	4453      	add	r3, sl
 8009af6:	9304      	str	r3, [sp, #16]
 8009af8:	2300      	movs	r3, #0
 8009afa:	9306      	str	r3, [sp, #24]
 8009afc:	9b05      	ldr	r3, [sp, #20]
 8009afe:	2b09      	cmp	r3, #9
 8009b00:	d869      	bhi.n	8009bd6 <_dtoa_r+0x2ae>
 8009b02:	2b05      	cmp	r3, #5
 8009b04:	bfc4      	itt	gt
 8009b06:	3b04      	subgt	r3, #4
 8009b08:	9305      	strgt	r3, [sp, #20]
 8009b0a:	9b05      	ldr	r3, [sp, #20]
 8009b0c:	f1a3 0302 	sub.w	r3, r3, #2
 8009b10:	bfcc      	ite	gt
 8009b12:	2500      	movgt	r5, #0
 8009b14:	2501      	movle	r5, #1
 8009b16:	2b03      	cmp	r3, #3
 8009b18:	d869      	bhi.n	8009bee <_dtoa_r+0x2c6>
 8009b1a:	e8df f003 	tbb	[pc, r3]
 8009b1e:	4e2c      	.short	0x4e2c
 8009b20:	5a4c      	.short	0x5a4c
 8009b22:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009b26:	441d      	add	r5, r3
 8009b28:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009b2c:	2b20      	cmp	r3, #32
 8009b2e:	bfc1      	itttt	gt
 8009b30:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009b34:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009b38:	fa09 f303 	lslgt.w	r3, r9, r3
 8009b3c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009b40:	bfda      	itte	le
 8009b42:	f1c3 0320 	rsble	r3, r3, #32
 8009b46:	fa06 f003 	lslle.w	r0, r6, r3
 8009b4a:	4318      	orrgt	r0, r3
 8009b4c:	f7f6 fce2 	bl	8000514 <__aeabi_ui2d>
 8009b50:	2301      	movs	r3, #1
 8009b52:	4606      	mov	r6, r0
 8009b54:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009b58:	3d01      	subs	r5, #1
 8009b5a:	9310      	str	r3, [sp, #64]	; 0x40
 8009b5c:	e771      	b.n	8009a42 <_dtoa_r+0x11a>
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e7b6      	b.n	8009ad0 <_dtoa_r+0x1a8>
 8009b62:	900e      	str	r0, [sp, #56]	; 0x38
 8009b64:	e7b5      	b.n	8009ad2 <_dtoa_r+0x1aa>
 8009b66:	f1ca 0300 	rsb	r3, sl, #0
 8009b6a:	9306      	str	r3, [sp, #24]
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	eba8 080a 	sub.w	r8, r8, sl
 8009b72:	930d      	str	r3, [sp, #52]	; 0x34
 8009b74:	e7c2      	b.n	8009afc <_dtoa_r+0x1d4>
 8009b76:	2300      	movs	r3, #0
 8009b78:	9308      	str	r3, [sp, #32]
 8009b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	dc39      	bgt.n	8009bf4 <_dtoa_r+0x2cc>
 8009b80:	f04f 0901 	mov.w	r9, #1
 8009b84:	f8cd 9004 	str.w	r9, [sp, #4]
 8009b88:	464b      	mov	r3, r9
 8009b8a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009b8e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009b90:	2200      	movs	r2, #0
 8009b92:	6042      	str	r2, [r0, #4]
 8009b94:	2204      	movs	r2, #4
 8009b96:	f102 0614 	add.w	r6, r2, #20
 8009b9a:	429e      	cmp	r6, r3
 8009b9c:	6841      	ldr	r1, [r0, #4]
 8009b9e:	d92f      	bls.n	8009c00 <_dtoa_r+0x2d8>
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	f001 f84d 	bl	800ac40 <_Balloc>
 8009ba6:	9000      	str	r0, [sp, #0]
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	d14b      	bne.n	8009c44 <_dtoa_r+0x31c>
 8009bac:	4b24      	ldr	r3, [pc, #144]	; (8009c40 <_dtoa_r+0x318>)
 8009bae:	4602      	mov	r2, r0
 8009bb0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009bb4:	e6d1      	b.n	800995a <_dtoa_r+0x32>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e7de      	b.n	8009b78 <_dtoa_r+0x250>
 8009bba:	2300      	movs	r3, #0
 8009bbc:	9308      	str	r3, [sp, #32]
 8009bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bc0:	eb0a 0903 	add.w	r9, sl, r3
 8009bc4:	f109 0301 	add.w	r3, r9, #1
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	9301      	str	r3, [sp, #4]
 8009bcc:	bfb8      	it	lt
 8009bce:	2301      	movlt	r3, #1
 8009bd0:	e7dd      	b.n	8009b8e <_dtoa_r+0x266>
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	e7f2      	b.n	8009bbc <_dtoa_r+0x294>
 8009bd6:	2501      	movs	r5, #1
 8009bd8:	2300      	movs	r3, #0
 8009bda:	9305      	str	r3, [sp, #20]
 8009bdc:	9508      	str	r5, [sp, #32]
 8009bde:	f04f 39ff 	mov.w	r9, #4294967295
 8009be2:	2200      	movs	r2, #0
 8009be4:	f8cd 9004 	str.w	r9, [sp, #4]
 8009be8:	2312      	movs	r3, #18
 8009bea:	9209      	str	r2, [sp, #36]	; 0x24
 8009bec:	e7cf      	b.n	8009b8e <_dtoa_r+0x266>
 8009bee:	2301      	movs	r3, #1
 8009bf0:	9308      	str	r3, [sp, #32]
 8009bf2:	e7f4      	b.n	8009bde <_dtoa_r+0x2b6>
 8009bf4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009bf8:	f8cd 9004 	str.w	r9, [sp, #4]
 8009bfc:	464b      	mov	r3, r9
 8009bfe:	e7c6      	b.n	8009b8e <_dtoa_r+0x266>
 8009c00:	3101      	adds	r1, #1
 8009c02:	6041      	str	r1, [r0, #4]
 8009c04:	0052      	lsls	r2, r2, #1
 8009c06:	e7c6      	b.n	8009b96 <_dtoa_r+0x26e>
 8009c08:	636f4361 	.word	0x636f4361
 8009c0c:	3fd287a7 	.word	0x3fd287a7
 8009c10:	8b60c8b3 	.word	0x8b60c8b3
 8009c14:	3fc68a28 	.word	0x3fc68a28
 8009c18:	509f79fb 	.word	0x509f79fb
 8009c1c:	3fd34413 	.word	0x3fd34413
 8009c20:	0800e53e 	.word	0x0800e53e
 8009c24:	0800e555 	.word	0x0800e555
 8009c28:	7ff00000 	.word	0x7ff00000
 8009c2c:	0800e53a 	.word	0x0800e53a
 8009c30:	0800e531 	.word	0x0800e531
 8009c34:	0800e7ba 	.word	0x0800e7ba
 8009c38:	3ff80000 	.word	0x3ff80000
 8009c3c:	0800e6d0 	.word	0x0800e6d0
 8009c40:	0800e5b4 	.word	0x0800e5b4
 8009c44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c46:	9a00      	ldr	r2, [sp, #0]
 8009c48:	601a      	str	r2, [r3, #0]
 8009c4a:	9b01      	ldr	r3, [sp, #4]
 8009c4c:	2b0e      	cmp	r3, #14
 8009c4e:	f200 80ad 	bhi.w	8009dac <_dtoa_r+0x484>
 8009c52:	2d00      	cmp	r5, #0
 8009c54:	f000 80aa 	beq.w	8009dac <_dtoa_r+0x484>
 8009c58:	f1ba 0f00 	cmp.w	sl, #0
 8009c5c:	dd36      	ble.n	8009ccc <_dtoa_r+0x3a4>
 8009c5e:	4ac3      	ldr	r2, [pc, #780]	; (8009f6c <_dtoa_r+0x644>)
 8009c60:	f00a 030f 	and.w	r3, sl, #15
 8009c64:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009c68:	ed93 7b00 	vldr	d7, [r3]
 8009c6c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009c70:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009c74:	eeb0 8a47 	vmov.f32	s16, s14
 8009c78:	eef0 8a67 	vmov.f32	s17, s15
 8009c7c:	d016      	beq.n	8009cac <_dtoa_r+0x384>
 8009c7e:	4bbc      	ldr	r3, [pc, #752]	; (8009f70 <_dtoa_r+0x648>)
 8009c80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009c84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009c88:	f7f6 fde8 	bl	800085c <__aeabi_ddiv>
 8009c8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c90:	f007 070f 	and.w	r7, r7, #15
 8009c94:	2503      	movs	r5, #3
 8009c96:	4eb6      	ldr	r6, [pc, #728]	; (8009f70 <_dtoa_r+0x648>)
 8009c98:	b957      	cbnz	r7, 8009cb0 <_dtoa_r+0x388>
 8009c9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c9e:	ec53 2b18 	vmov	r2, r3, d8
 8009ca2:	f7f6 fddb 	bl	800085c <__aeabi_ddiv>
 8009ca6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009caa:	e029      	b.n	8009d00 <_dtoa_r+0x3d8>
 8009cac:	2502      	movs	r5, #2
 8009cae:	e7f2      	b.n	8009c96 <_dtoa_r+0x36e>
 8009cb0:	07f9      	lsls	r1, r7, #31
 8009cb2:	d508      	bpl.n	8009cc6 <_dtoa_r+0x39e>
 8009cb4:	ec51 0b18 	vmov	r0, r1, d8
 8009cb8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009cbc:	f7f6 fca4 	bl	8000608 <__aeabi_dmul>
 8009cc0:	ec41 0b18 	vmov	d8, r0, r1
 8009cc4:	3501      	adds	r5, #1
 8009cc6:	107f      	asrs	r7, r7, #1
 8009cc8:	3608      	adds	r6, #8
 8009cca:	e7e5      	b.n	8009c98 <_dtoa_r+0x370>
 8009ccc:	f000 80a6 	beq.w	8009e1c <_dtoa_r+0x4f4>
 8009cd0:	f1ca 0600 	rsb	r6, sl, #0
 8009cd4:	4ba5      	ldr	r3, [pc, #660]	; (8009f6c <_dtoa_r+0x644>)
 8009cd6:	4fa6      	ldr	r7, [pc, #664]	; (8009f70 <_dtoa_r+0x648>)
 8009cd8:	f006 020f 	and.w	r2, r6, #15
 8009cdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009ce8:	f7f6 fc8e 	bl	8000608 <__aeabi_dmul>
 8009cec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cf0:	1136      	asrs	r6, r6, #4
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	2502      	movs	r5, #2
 8009cf6:	2e00      	cmp	r6, #0
 8009cf8:	f040 8085 	bne.w	8009e06 <_dtoa_r+0x4de>
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d1d2      	bne.n	8009ca6 <_dtoa_r+0x37e>
 8009d00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	f000 808c 	beq.w	8009e20 <_dtoa_r+0x4f8>
 8009d08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009d0c:	4b99      	ldr	r3, [pc, #612]	; (8009f74 <_dtoa_r+0x64c>)
 8009d0e:	2200      	movs	r2, #0
 8009d10:	4630      	mov	r0, r6
 8009d12:	4639      	mov	r1, r7
 8009d14:	f7f6 feea 	bl	8000aec <__aeabi_dcmplt>
 8009d18:	2800      	cmp	r0, #0
 8009d1a:	f000 8081 	beq.w	8009e20 <_dtoa_r+0x4f8>
 8009d1e:	9b01      	ldr	r3, [sp, #4]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d07d      	beq.n	8009e20 <_dtoa_r+0x4f8>
 8009d24:	f1b9 0f00 	cmp.w	r9, #0
 8009d28:	dd3c      	ble.n	8009da4 <_dtoa_r+0x47c>
 8009d2a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009d2e:	9307      	str	r3, [sp, #28]
 8009d30:	2200      	movs	r2, #0
 8009d32:	4b91      	ldr	r3, [pc, #580]	; (8009f78 <_dtoa_r+0x650>)
 8009d34:	4630      	mov	r0, r6
 8009d36:	4639      	mov	r1, r7
 8009d38:	f7f6 fc66 	bl	8000608 <__aeabi_dmul>
 8009d3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d40:	3501      	adds	r5, #1
 8009d42:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009d46:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	f7f6 fbf2 	bl	8000534 <__aeabi_i2d>
 8009d50:	4632      	mov	r2, r6
 8009d52:	463b      	mov	r3, r7
 8009d54:	f7f6 fc58 	bl	8000608 <__aeabi_dmul>
 8009d58:	4b88      	ldr	r3, [pc, #544]	; (8009f7c <_dtoa_r+0x654>)
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f7f6 fa9e 	bl	800029c <__adddf3>
 8009d60:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009d64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d68:	9303      	str	r3, [sp, #12]
 8009d6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d15c      	bne.n	8009e2a <_dtoa_r+0x502>
 8009d70:	4b83      	ldr	r3, [pc, #524]	; (8009f80 <_dtoa_r+0x658>)
 8009d72:	2200      	movs	r2, #0
 8009d74:	4630      	mov	r0, r6
 8009d76:	4639      	mov	r1, r7
 8009d78:	f7f6 fa8e 	bl	8000298 <__aeabi_dsub>
 8009d7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d80:	4606      	mov	r6, r0
 8009d82:	460f      	mov	r7, r1
 8009d84:	f7f6 fed0 	bl	8000b28 <__aeabi_dcmpgt>
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	f040 8296 	bne.w	800a2ba <_dtoa_r+0x992>
 8009d8e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009d92:	4630      	mov	r0, r6
 8009d94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d98:	4639      	mov	r1, r7
 8009d9a:	f7f6 fea7 	bl	8000aec <__aeabi_dcmplt>
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	f040 8288 	bne.w	800a2b4 <_dtoa_r+0x98c>
 8009da4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009da8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009dac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	f2c0 8158 	blt.w	800a064 <_dtoa_r+0x73c>
 8009db4:	f1ba 0f0e 	cmp.w	sl, #14
 8009db8:	f300 8154 	bgt.w	800a064 <_dtoa_r+0x73c>
 8009dbc:	4b6b      	ldr	r3, [pc, #428]	; (8009f6c <_dtoa_r+0x644>)
 8009dbe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009dc2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	f280 80e3 	bge.w	8009f94 <_dtoa_r+0x66c>
 8009dce:	9b01      	ldr	r3, [sp, #4]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	f300 80df 	bgt.w	8009f94 <_dtoa_r+0x66c>
 8009dd6:	f040 826d 	bne.w	800a2b4 <_dtoa_r+0x98c>
 8009dda:	4b69      	ldr	r3, [pc, #420]	; (8009f80 <_dtoa_r+0x658>)
 8009ddc:	2200      	movs	r2, #0
 8009dde:	4640      	mov	r0, r8
 8009de0:	4649      	mov	r1, r9
 8009de2:	f7f6 fc11 	bl	8000608 <__aeabi_dmul>
 8009de6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009dea:	f7f6 fe93 	bl	8000b14 <__aeabi_dcmpge>
 8009dee:	9e01      	ldr	r6, [sp, #4]
 8009df0:	4637      	mov	r7, r6
 8009df2:	2800      	cmp	r0, #0
 8009df4:	f040 8243 	bne.w	800a27e <_dtoa_r+0x956>
 8009df8:	9d00      	ldr	r5, [sp, #0]
 8009dfa:	2331      	movs	r3, #49	; 0x31
 8009dfc:	f805 3b01 	strb.w	r3, [r5], #1
 8009e00:	f10a 0a01 	add.w	sl, sl, #1
 8009e04:	e23f      	b.n	800a286 <_dtoa_r+0x95e>
 8009e06:	07f2      	lsls	r2, r6, #31
 8009e08:	d505      	bpl.n	8009e16 <_dtoa_r+0x4ee>
 8009e0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e0e:	f7f6 fbfb 	bl	8000608 <__aeabi_dmul>
 8009e12:	3501      	adds	r5, #1
 8009e14:	2301      	movs	r3, #1
 8009e16:	1076      	asrs	r6, r6, #1
 8009e18:	3708      	adds	r7, #8
 8009e1a:	e76c      	b.n	8009cf6 <_dtoa_r+0x3ce>
 8009e1c:	2502      	movs	r5, #2
 8009e1e:	e76f      	b.n	8009d00 <_dtoa_r+0x3d8>
 8009e20:	9b01      	ldr	r3, [sp, #4]
 8009e22:	f8cd a01c 	str.w	sl, [sp, #28]
 8009e26:	930c      	str	r3, [sp, #48]	; 0x30
 8009e28:	e78d      	b.n	8009d46 <_dtoa_r+0x41e>
 8009e2a:	9900      	ldr	r1, [sp, #0]
 8009e2c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009e2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e30:	4b4e      	ldr	r3, [pc, #312]	; (8009f6c <_dtoa_r+0x644>)
 8009e32:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009e36:	4401      	add	r1, r0
 8009e38:	9102      	str	r1, [sp, #8]
 8009e3a:	9908      	ldr	r1, [sp, #32]
 8009e3c:	eeb0 8a47 	vmov.f32	s16, s14
 8009e40:	eef0 8a67 	vmov.f32	s17, s15
 8009e44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e48:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e4c:	2900      	cmp	r1, #0
 8009e4e:	d045      	beq.n	8009edc <_dtoa_r+0x5b4>
 8009e50:	494c      	ldr	r1, [pc, #304]	; (8009f84 <_dtoa_r+0x65c>)
 8009e52:	2000      	movs	r0, #0
 8009e54:	f7f6 fd02 	bl	800085c <__aeabi_ddiv>
 8009e58:	ec53 2b18 	vmov	r2, r3, d8
 8009e5c:	f7f6 fa1c 	bl	8000298 <__aeabi_dsub>
 8009e60:	9d00      	ldr	r5, [sp, #0]
 8009e62:	ec41 0b18 	vmov	d8, r0, r1
 8009e66:	4639      	mov	r1, r7
 8009e68:	4630      	mov	r0, r6
 8009e6a:	f7f6 fe7d 	bl	8000b68 <__aeabi_d2iz>
 8009e6e:	900c      	str	r0, [sp, #48]	; 0x30
 8009e70:	f7f6 fb60 	bl	8000534 <__aeabi_i2d>
 8009e74:	4602      	mov	r2, r0
 8009e76:	460b      	mov	r3, r1
 8009e78:	4630      	mov	r0, r6
 8009e7a:	4639      	mov	r1, r7
 8009e7c:	f7f6 fa0c 	bl	8000298 <__aeabi_dsub>
 8009e80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e82:	3330      	adds	r3, #48	; 0x30
 8009e84:	f805 3b01 	strb.w	r3, [r5], #1
 8009e88:	ec53 2b18 	vmov	r2, r3, d8
 8009e8c:	4606      	mov	r6, r0
 8009e8e:	460f      	mov	r7, r1
 8009e90:	f7f6 fe2c 	bl	8000aec <__aeabi_dcmplt>
 8009e94:	2800      	cmp	r0, #0
 8009e96:	d165      	bne.n	8009f64 <_dtoa_r+0x63c>
 8009e98:	4632      	mov	r2, r6
 8009e9a:	463b      	mov	r3, r7
 8009e9c:	4935      	ldr	r1, [pc, #212]	; (8009f74 <_dtoa_r+0x64c>)
 8009e9e:	2000      	movs	r0, #0
 8009ea0:	f7f6 f9fa 	bl	8000298 <__aeabi_dsub>
 8009ea4:	ec53 2b18 	vmov	r2, r3, d8
 8009ea8:	f7f6 fe20 	bl	8000aec <__aeabi_dcmplt>
 8009eac:	2800      	cmp	r0, #0
 8009eae:	f040 80b9 	bne.w	800a024 <_dtoa_r+0x6fc>
 8009eb2:	9b02      	ldr	r3, [sp, #8]
 8009eb4:	429d      	cmp	r5, r3
 8009eb6:	f43f af75 	beq.w	8009da4 <_dtoa_r+0x47c>
 8009eba:	4b2f      	ldr	r3, [pc, #188]	; (8009f78 <_dtoa_r+0x650>)
 8009ebc:	ec51 0b18 	vmov	r0, r1, d8
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f7f6 fba1 	bl	8000608 <__aeabi_dmul>
 8009ec6:	4b2c      	ldr	r3, [pc, #176]	; (8009f78 <_dtoa_r+0x650>)
 8009ec8:	ec41 0b18 	vmov	d8, r0, r1
 8009ecc:	2200      	movs	r2, #0
 8009ece:	4630      	mov	r0, r6
 8009ed0:	4639      	mov	r1, r7
 8009ed2:	f7f6 fb99 	bl	8000608 <__aeabi_dmul>
 8009ed6:	4606      	mov	r6, r0
 8009ed8:	460f      	mov	r7, r1
 8009eda:	e7c4      	b.n	8009e66 <_dtoa_r+0x53e>
 8009edc:	ec51 0b17 	vmov	r0, r1, d7
 8009ee0:	f7f6 fb92 	bl	8000608 <__aeabi_dmul>
 8009ee4:	9b02      	ldr	r3, [sp, #8]
 8009ee6:	9d00      	ldr	r5, [sp, #0]
 8009ee8:	930c      	str	r3, [sp, #48]	; 0x30
 8009eea:	ec41 0b18 	vmov	d8, r0, r1
 8009eee:	4639      	mov	r1, r7
 8009ef0:	4630      	mov	r0, r6
 8009ef2:	f7f6 fe39 	bl	8000b68 <__aeabi_d2iz>
 8009ef6:	9011      	str	r0, [sp, #68]	; 0x44
 8009ef8:	f7f6 fb1c 	bl	8000534 <__aeabi_i2d>
 8009efc:	4602      	mov	r2, r0
 8009efe:	460b      	mov	r3, r1
 8009f00:	4630      	mov	r0, r6
 8009f02:	4639      	mov	r1, r7
 8009f04:	f7f6 f9c8 	bl	8000298 <__aeabi_dsub>
 8009f08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f0a:	3330      	adds	r3, #48	; 0x30
 8009f0c:	f805 3b01 	strb.w	r3, [r5], #1
 8009f10:	9b02      	ldr	r3, [sp, #8]
 8009f12:	429d      	cmp	r5, r3
 8009f14:	4606      	mov	r6, r0
 8009f16:	460f      	mov	r7, r1
 8009f18:	f04f 0200 	mov.w	r2, #0
 8009f1c:	d134      	bne.n	8009f88 <_dtoa_r+0x660>
 8009f1e:	4b19      	ldr	r3, [pc, #100]	; (8009f84 <_dtoa_r+0x65c>)
 8009f20:	ec51 0b18 	vmov	r0, r1, d8
 8009f24:	f7f6 f9ba 	bl	800029c <__adddf3>
 8009f28:	4602      	mov	r2, r0
 8009f2a:	460b      	mov	r3, r1
 8009f2c:	4630      	mov	r0, r6
 8009f2e:	4639      	mov	r1, r7
 8009f30:	f7f6 fdfa 	bl	8000b28 <__aeabi_dcmpgt>
 8009f34:	2800      	cmp	r0, #0
 8009f36:	d175      	bne.n	800a024 <_dtoa_r+0x6fc>
 8009f38:	ec53 2b18 	vmov	r2, r3, d8
 8009f3c:	4911      	ldr	r1, [pc, #68]	; (8009f84 <_dtoa_r+0x65c>)
 8009f3e:	2000      	movs	r0, #0
 8009f40:	f7f6 f9aa 	bl	8000298 <__aeabi_dsub>
 8009f44:	4602      	mov	r2, r0
 8009f46:	460b      	mov	r3, r1
 8009f48:	4630      	mov	r0, r6
 8009f4a:	4639      	mov	r1, r7
 8009f4c:	f7f6 fdce 	bl	8000aec <__aeabi_dcmplt>
 8009f50:	2800      	cmp	r0, #0
 8009f52:	f43f af27 	beq.w	8009da4 <_dtoa_r+0x47c>
 8009f56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f58:	1e6b      	subs	r3, r5, #1
 8009f5a:	930c      	str	r3, [sp, #48]	; 0x30
 8009f5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009f60:	2b30      	cmp	r3, #48	; 0x30
 8009f62:	d0f8      	beq.n	8009f56 <_dtoa_r+0x62e>
 8009f64:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009f68:	e04a      	b.n	800a000 <_dtoa_r+0x6d8>
 8009f6a:	bf00      	nop
 8009f6c:	0800e6d0 	.word	0x0800e6d0
 8009f70:	0800e6a8 	.word	0x0800e6a8
 8009f74:	3ff00000 	.word	0x3ff00000
 8009f78:	40240000 	.word	0x40240000
 8009f7c:	401c0000 	.word	0x401c0000
 8009f80:	40140000 	.word	0x40140000
 8009f84:	3fe00000 	.word	0x3fe00000
 8009f88:	4baf      	ldr	r3, [pc, #700]	; (800a248 <_dtoa_r+0x920>)
 8009f8a:	f7f6 fb3d 	bl	8000608 <__aeabi_dmul>
 8009f8e:	4606      	mov	r6, r0
 8009f90:	460f      	mov	r7, r1
 8009f92:	e7ac      	b.n	8009eee <_dtoa_r+0x5c6>
 8009f94:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009f98:	9d00      	ldr	r5, [sp, #0]
 8009f9a:	4642      	mov	r2, r8
 8009f9c:	464b      	mov	r3, r9
 8009f9e:	4630      	mov	r0, r6
 8009fa0:	4639      	mov	r1, r7
 8009fa2:	f7f6 fc5b 	bl	800085c <__aeabi_ddiv>
 8009fa6:	f7f6 fddf 	bl	8000b68 <__aeabi_d2iz>
 8009faa:	9002      	str	r0, [sp, #8]
 8009fac:	f7f6 fac2 	bl	8000534 <__aeabi_i2d>
 8009fb0:	4642      	mov	r2, r8
 8009fb2:	464b      	mov	r3, r9
 8009fb4:	f7f6 fb28 	bl	8000608 <__aeabi_dmul>
 8009fb8:	4602      	mov	r2, r0
 8009fba:	460b      	mov	r3, r1
 8009fbc:	4630      	mov	r0, r6
 8009fbe:	4639      	mov	r1, r7
 8009fc0:	f7f6 f96a 	bl	8000298 <__aeabi_dsub>
 8009fc4:	9e02      	ldr	r6, [sp, #8]
 8009fc6:	9f01      	ldr	r7, [sp, #4]
 8009fc8:	3630      	adds	r6, #48	; 0x30
 8009fca:	f805 6b01 	strb.w	r6, [r5], #1
 8009fce:	9e00      	ldr	r6, [sp, #0]
 8009fd0:	1bae      	subs	r6, r5, r6
 8009fd2:	42b7      	cmp	r7, r6
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	d137      	bne.n	800a04a <_dtoa_r+0x722>
 8009fda:	f7f6 f95f 	bl	800029c <__adddf3>
 8009fde:	4642      	mov	r2, r8
 8009fe0:	464b      	mov	r3, r9
 8009fe2:	4606      	mov	r6, r0
 8009fe4:	460f      	mov	r7, r1
 8009fe6:	f7f6 fd9f 	bl	8000b28 <__aeabi_dcmpgt>
 8009fea:	b9c8      	cbnz	r0, 800a020 <_dtoa_r+0x6f8>
 8009fec:	4642      	mov	r2, r8
 8009fee:	464b      	mov	r3, r9
 8009ff0:	4630      	mov	r0, r6
 8009ff2:	4639      	mov	r1, r7
 8009ff4:	f7f6 fd70 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ff8:	b110      	cbz	r0, 800a000 <_dtoa_r+0x6d8>
 8009ffa:	9b02      	ldr	r3, [sp, #8]
 8009ffc:	07d9      	lsls	r1, r3, #31
 8009ffe:	d40f      	bmi.n	800a020 <_dtoa_r+0x6f8>
 800a000:	4620      	mov	r0, r4
 800a002:	4659      	mov	r1, fp
 800a004:	f000 fe5c 	bl	800acc0 <_Bfree>
 800a008:	2300      	movs	r3, #0
 800a00a:	702b      	strb	r3, [r5, #0]
 800a00c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a00e:	f10a 0001 	add.w	r0, sl, #1
 800a012:	6018      	str	r0, [r3, #0]
 800a014:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a016:	2b00      	cmp	r3, #0
 800a018:	f43f acd8 	beq.w	80099cc <_dtoa_r+0xa4>
 800a01c:	601d      	str	r5, [r3, #0]
 800a01e:	e4d5      	b.n	80099cc <_dtoa_r+0xa4>
 800a020:	f8cd a01c 	str.w	sl, [sp, #28]
 800a024:	462b      	mov	r3, r5
 800a026:	461d      	mov	r5, r3
 800a028:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a02c:	2a39      	cmp	r2, #57	; 0x39
 800a02e:	d108      	bne.n	800a042 <_dtoa_r+0x71a>
 800a030:	9a00      	ldr	r2, [sp, #0]
 800a032:	429a      	cmp	r2, r3
 800a034:	d1f7      	bne.n	800a026 <_dtoa_r+0x6fe>
 800a036:	9a07      	ldr	r2, [sp, #28]
 800a038:	9900      	ldr	r1, [sp, #0]
 800a03a:	3201      	adds	r2, #1
 800a03c:	9207      	str	r2, [sp, #28]
 800a03e:	2230      	movs	r2, #48	; 0x30
 800a040:	700a      	strb	r2, [r1, #0]
 800a042:	781a      	ldrb	r2, [r3, #0]
 800a044:	3201      	adds	r2, #1
 800a046:	701a      	strb	r2, [r3, #0]
 800a048:	e78c      	b.n	8009f64 <_dtoa_r+0x63c>
 800a04a:	4b7f      	ldr	r3, [pc, #508]	; (800a248 <_dtoa_r+0x920>)
 800a04c:	2200      	movs	r2, #0
 800a04e:	f7f6 fadb 	bl	8000608 <__aeabi_dmul>
 800a052:	2200      	movs	r2, #0
 800a054:	2300      	movs	r3, #0
 800a056:	4606      	mov	r6, r0
 800a058:	460f      	mov	r7, r1
 800a05a:	f7f6 fd3d 	bl	8000ad8 <__aeabi_dcmpeq>
 800a05e:	2800      	cmp	r0, #0
 800a060:	d09b      	beq.n	8009f9a <_dtoa_r+0x672>
 800a062:	e7cd      	b.n	800a000 <_dtoa_r+0x6d8>
 800a064:	9a08      	ldr	r2, [sp, #32]
 800a066:	2a00      	cmp	r2, #0
 800a068:	f000 80c4 	beq.w	800a1f4 <_dtoa_r+0x8cc>
 800a06c:	9a05      	ldr	r2, [sp, #20]
 800a06e:	2a01      	cmp	r2, #1
 800a070:	f300 80a8 	bgt.w	800a1c4 <_dtoa_r+0x89c>
 800a074:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a076:	2a00      	cmp	r2, #0
 800a078:	f000 80a0 	beq.w	800a1bc <_dtoa_r+0x894>
 800a07c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a080:	9e06      	ldr	r6, [sp, #24]
 800a082:	4645      	mov	r5, r8
 800a084:	9a04      	ldr	r2, [sp, #16]
 800a086:	2101      	movs	r1, #1
 800a088:	441a      	add	r2, r3
 800a08a:	4620      	mov	r0, r4
 800a08c:	4498      	add	r8, r3
 800a08e:	9204      	str	r2, [sp, #16]
 800a090:	f000 ff1c 	bl	800aecc <__i2b>
 800a094:	4607      	mov	r7, r0
 800a096:	2d00      	cmp	r5, #0
 800a098:	dd0b      	ble.n	800a0b2 <_dtoa_r+0x78a>
 800a09a:	9b04      	ldr	r3, [sp, #16]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	dd08      	ble.n	800a0b2 <_dtoa_r+0x78a>
 800a0a0:	42ab      	cmp	r3, r5
 800a0a2:	9a04      	ldr	r2, [sp, #16]
 800a0a4:	bfa8      	it	ge
 800a0a6:	462b      	movge	r3, r5
 800a0a8:	eba8 0803 	sub.w	r8, r8, r3
 800a0ac:	1aed      	subs	r5, r5, r3
 800a0ae:	1ad3      	subs	r3, r2, r3
 800a0b0:	9304      	str	r3, [sp, #16]
 800a0b2:	9b06      	ldr	r3, [sp, #24]
 800a0b4:	b1fb      	cbz	r3, 800a0f6 <_dtoa_r+0x7ce>
 800a0b6:	9b08      	ldr	r3, [sp, #32]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	f000 809f 	beq.w	800a1fc <_dtoa_r+0x8d4>
 800a0be:	2e00      	cmp	r6, #0
 800a0c0:	dd11      	ble.n	800a0e6 <_dtoa_r+0x7be>
 800a0c2:	4639      	mov	r1, r7
 800a0c4:	4632      	mov	r2, r6
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	f000 ffbc 	bl	800b044 <__pow5mult>
 800a0cc:	465a      	mov	r2, fp
 800a0ce:	4601      	mov	r1, r0
 800a0d0:	4607      	mov	r7, r0
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	f000 ff10 	bl	800aef8 <__multiply>
 800a0d8:	4659      	mov	r1, fp
 800a0da:	9007      	str	r0, [sp, #28]
 800a0dc:	4620      	mov	r0, r4
 800a0de:	f000 fdef 	bl	800acc0 <_Bfree>
 800a0e2:	9b07      	ldr	r3, [sp, #28]
 800a0e4:	469b      	mov	fp, r3
 800a0e6:	9b06      	ldr	r3, [sp, #24]
 800a0e8:	1b9a      	subs	r2, r3, r6
 800a0ea:	d004      	beq.n	800a0f6 <_dtoa_r+0x7ce>
 800a0ec:	4659      	mov	r1, fp
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	f000 ffa8 	bl	800b044 <__pow5mult>
 800a0f4:	4683      	mov	fp, r0
 800a0f6:	2101      	movs	r1, #1
 800a0f8:	4620      	mov	r0, r4
 800a0fa:	f000 fee7 	bl	800aecc <__i2b>
 800a0fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a100:	2b00      	cmp	r3, #0
 800a102:	4606      	mov	r6, r0
 800a104:	dd7c      	ble.n	800a200 <_dtoa_r+0x8d8>
 800a106:	461a      	mov	r2, r3
 800a108:	4601      	mov	r1, r0
 800a10a:	4620      	mov	r0, r4
 800a10c:	f000 ff9a 	bl	800b044 <__pow5mult>
 800a110:	9b05      	ldr	r3, [sp, #20]
 800a112:	2b01      	cmp	r3, #1
 800a114:	4606      	mov	r6, r0
 800a116:	dd76      	ble.n	800a206 <_dtoa_r+0x8de>
 800a118:	2300      	movs	r3, #0
 800a11a:	9306      	str	r3, [sp, #24]
 800a11c:	6933      	ldr	r3, [r6, #16]
 800a11e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a122:	6918      	ldr	r0, [r3, #16]
 800a124:	f000 fe82 	bl	800ae2c <__hi0bits>
 800a128:	f1c0 0020 	rsb	r0, r0, #32
 800a12c:	9b04      	ldr	r3, [sp, #16]
 800a12e:	4418      	add	r0, r3
 800a130:	f010 001f 	ands.w	r0, r0, #31
 800a134:	f000 8086 	beq.w	800a244 <_dtoa_r+0x91c>
 800a138:	f1c0 0320 	rsb	r3, r0, #32
 800a13c:	2b04      	cmp	r3, #4
 800a13e:	dd7f      	ble.n	800a240 <_dtoa_r+0x918>
 800a140:	f1c0 001c 	rsb	r0, r0, #28
 800a144:	9b04      	ldr	r3, [sp, #16]
 800a146:	4403      	add	r3, r0
 800a148:	4480      	add	r8, r0
 800a14a:	4405      	add	r5, r0
 800a14c:	9304      	str	r3, [sp, #16]
 800a14e:	f1b8 0f00 	cmp.w	r8, #0
 800a152:	dd05      	ble.n	800a160 <_dtoa_r+0x838>
 800a154:	4659      	mov	r1, fp
 800a156:	4642      	mov	r2, r8
 800a158:	4620      	mov	r0, r4
 800a15a:	f000 ffcd 	bl	800b0f8 <__lshift>
 800a15e:	4683      	mov	fp, r0
 800a160:	9b04      	ldr	r3, [sp, #16]
 800a162:	2b00      	cmp	r3, #0
 800a164:	dd05      	ble.n	800a172 <_dtoa_r+0x84a>
 800a166:	4631      	mov	r1, r6
 800a168:	461a      	mov	r2, r3
 800a16a:	4620      	mov	r0, r4
 800a16c:	f000 ffc4 	bl	800b0f8 <__lshift>
 800a170:	4606      	mov	r6, r0
 800a172:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a174:	2b00      	cmp	r3, #0
 800a176:	d069      	beq.n	800a24c <_dtoa_r+0x924>
 800a178:	4631      	mov	r1, r6
 800a17a:	4658      	mov	r0, fp
 800a17c:	f001 f828 	bl	800b1d0 <__mcmp>
 800a180:	2800      	cmp	r0, #0
 800a182:	da63      	bge.n	800a24c <_dtoa_r+0x924>
 800a184:	2300      	movs	r3, #0
 800a186:	4659      	mov	r1, fp
 800a188:	220a      	movs	r2, #10
 800a18a:	4620      	mov	r0, r4
 800a18c:	f000 fdba 	bl	800ad04 <__multadd>
 800a190:	9b08      	ldr	r3, [sp, #32]
 800a192:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a196:	4683      	mov	fp, r0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	f000 818f 	beq.w	800a4bc <_dtoa_r+0xb94>
 800a19e:	4639      	mov	r1, r7
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	220a      	movs	r2, #10
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	f000 fdad 	bl	800ad04 <__multadd>
 800a1aa:	f1b9 0f00 	cmp.w	r9, #0
 800a1ae:	4607      	mov	r7, r0
 800a1b0:	f300 808e 	bgt.w	800a2d0 <_dtoa_r+0x9a8>
 800a1b4:	9b05      	ldr	r3, [sp, #20]
 800a1b6:	2b02      	cmp	r3, #2
 800a1b8:	dc50      	bgt.n	800a25c <_dtoa_r+0x934>
 800a1ba:	e089      	b.n	800a2d0 <_dtoa_r+0x9a8>
 800a1bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a1c2:	e75d      	b.n	800a080 <_dtoa_r+0x758>
 800a1c4:	9b01      	ldr	r3, [sp, #4]
 800a1c6:	1e5e      	subs	r6, r3, #1
 800a1c8:	9b06      	ldr	r3, [sp, #24]
 800a1ca:	42b3      	cmp	r3, r6
 800a1cc:	bfbf      	itttt	lt
 800a1ce:	9b06      	ldrlt	r3, [sp, #24]
 800a1d0:	9606      	strlt	r6, [sp, #24]
 800a1d2:	1af2      	sublt	r2, r6, r3
 800a1d4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a1d6:	bfb6      	itet	lt
 800a1d8:	189b      	addlt	r3, r3, r2
 800a1da:	1b9e      	subge	r6, r3, r6
 800a1dc:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a1de:	9b01      	ldr	r3, [sp, #4]
 800a1e0:	bfb8      	it	lt
 800a1e2:	2600      	movlt	r6, #0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	bfb5      	itete	lt
 800a1e8:	eba8 0503 	sublt.w	r5, r8, r3
 800a1ec:	9b01      	ldrge	r3, [sp, #4]
 800a1ee:	2300      	movlt	r3, #0
 800a1f0:	4645      	movge	r5, r8
 800a1f2:	e747      	b.n	800a084 <_dtoa_r+0x75c>
 800a1f4:	9e06      	ldr	r6, [sp, #24]
 800a1f6:	9f08      	ldr	r7, [sp, #32]
 800a1f8:	4645      	mov	r5, r8
 800a1fa:	e74c      	b.n	800a096 <_dtoa_r+0x76e>
 800a1fc:	9a06      	ldr	r2, [sp, #24]
 800a1fe:	e775      	b.n	800a0ec <_dtoa_r+0x7c4>
 800a200:	9b05      	ldr	r3, [sp, #20]
 800a202:	2b01      	cmp	r3, #1
 800a204:	dc18      	bgt.n	800a238 <_dtoa_r+0x910>
 800a206:	9b02      	ldr	r3, [sp, #8]
 800a208:	b9b3      	cbnz	r3, 800a238 <_dtoa_r+0x910>
 800a20a:	9b03      	ldr	r3, [sp, #12]
 800a20c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a210:	b9a3      	cbnz	r3, 800a23c <_dtoa_r+0x914>
 800a212:	9b03      	ldr	r3, [sp, #12]
 800a214:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a218:	0d1b      	lsrs	r3, r3, #20
 800a21a:	051b      	lsls	r3, r3, #20
 800a21c:	b12b      	cbz	r3, 800a22a <_dtoa_r+0x902>
 800a21e:	9b04      	ldr	r3, [sp, #16]
 800a220:	3301      	adds	r3, #1
 800a222:	9304      	str	r3, [sp, #16]
 800a224:	f108 0801 	add.w	r8, r8, #1
 800a228:	2301      	movs	r3, #1
 800a22a:	9306      	str	r3, [sp, #24]
 800a22c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a22e:	2b00      	cmp	r3, #0
 800a230:	f47f af74 	bne.w	800a11c <_dtoa_r+0x7f4>
 800a234:	2001      	movs	r0, #1
 800a236:	e779      	b.n	800a12c <_dtoa_r+0x804>
 800a238:	2300      	movs	r3, #0
 800a23a:	e7f6      	b.n	800a22a <_dtoa_r+0x902>
 800a23c:	9b02      	ldr	r3, [sp, #8]
 800a23e:	e7f4      	b.n	800a22a <_dtoa_r+0x902>
 800a240:	d085      	beq.n	800a14e <_dtoa_r+0x826>
 800a242:	4618      	mov	r0, r3
 800a244:	301c      	adds	r0, #28
 800a246:	e77d      	b.n	800a144 <_dtoa_r+0x81c>
 800a248:	40240000 	.word	0x40240000
 800a24c:	9b01      	ldr	r3, [sp, #4]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	dc38      	bgt.n	800a2c4 <_dtoa_r+0x99c>
 800a252:	9b05      	ldr	r3, [sp, #20]
 800a254:	2b02      	cmp	r3, #2
 800a256:	dd35      	ble.n	800a2c4 <_dtoa_r+0x99c>
 800a258:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a25c:	f1b9 0f00 	cmp.w	r9, #0
 800a260:	d10d      	bne.n	800a27e <_dtoa_r+0x956>
 800a262:	4631      	mov	r1, r6
 800a264:	464b      	mov	r3, r9
 800a266:	2205      	movs	r2, #5
 800a268:	4620      	mov	r0, r4
 800a26a:	f000 fd4b 	bl	800ad04 <__multadd>
 800a26e:	4601      	mov	r1, r0
 800a270:	4606      	mov	r6, r0
 800a272:	4658      	mov	r0, fp
 800a274:	f000 ffac 	bl	800b1d0 <__mcmp>
 800a278:	2800      	cmp	r0, #0
 800a27a:	f73f adbd 	bgt.w	8009df8 <_dtoa_r+0x4d0>
 800a27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a280:	9d00      	ldr	r5, [sp, #0]
 800a282:	ea6f 0a03 	mvn.w	sl, r3
 800a286:	f04f 0800 	mov.w	r8, #0
 800a28a:	4631      	mov	r1, r6
 800a28c:	4620      	mov	r0, r4
 800a28e:	f000 fd17 	bl	800acc0 <_Bfree>
 800a292:	2f00      	cmp	r7, #0
 800a294:	f43f aeb4 	beq.w	800a000 <_dtoa_r+0x6d8>
 800a298:	f1b8 0f00 	cmp.w	r8, #0
 800a29c:	d005      	beq.n	800a2aa <_dtoa_r+0x982>
 800a29e:	45b8      	cmp	r8, r7
 800a2a0:	d003      	beq.n	800a2aa <_dtoa_r+0x982>
 800a2a2:	4641      	mov	r1, r8
 800a2a4:	4620      	mov	r0, r4
 800a2a6:	f000 fd0b 	bl	800acc0 <_Bfree>
 800a2aa:	4639      	mov	r1, r7
 800a2ac:	4620      	mov	r0, r4
 800a2ae:	f000 fd07 	bl	800acc0 <_Bfree>
 800a2b2:	e6a5      	b.n	800a000 <_dtoa_r+0x6d8>
 800a2b4:	2600      	movs	r6, #0
 800a2b6:	4637      	mov	r7, r6
 800a2b8:	e7e1      	b.n	800a27e <_dtoa_r+0x956>
 800a2ba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a2bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a2c0:	4637      	mov	r7, r6
 800a2c2:	e599      	b.n	8009df8 <_dtoa_r+0x4d0>
 800a2c4:	9b08      	ldr	r3, [sp, #32]
 800a2c6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	f000 80fd 	beq.w	800a4ca <_dtoa_r+0xba2>
 800a2d0:	2d00      	cmp	r5, #0
 800a2d2:	dd05      	ble.n	800a2e0 <_dtoa_r+0x9b8>
 800a2d4:	4639      	mov	r1, r7
 800a2d6:	462a      	mov	r2, r5
 800a2d8:	4620      	mov	r0, r4
 800a2da:	f000 ff0d 	bl	800b0f8 <__lshift>
 800a2de:	4607      	mov	r7, r0
 800a2e0:	9b06      	ldr	r3, [sp, #24]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d05c      	beq.n	800a3a0 <_dtoa_r+0xa78>
 800a2e6:	6879      	ldr	r1, [r7, #4]
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	f000 fca9 	bl	800ac40 <_Balloc>
 800a2ee:	4605      	mov	r5, r0
 800a2f0:	b928      	cbnz	r0, 800a2fe <_dtoa_r+0x9d6>
 800a2f2:	4b80      	ldr	r3, [pc, #512]	; (800a4f4 <_dtoa_r+0xbcc>)
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a2fa:	f7ff bb2e 	b.w	800995a <_dtoa_r+0x32>
 800a2fe:	693a      	ldr	r2, [r7, #16]
 800a300:	3202      	adds	r2, #2
 800a302:	0092      	lsls	r2, r2, #2
 800a304:	f107 010c 	add.w	r1, r7, #12
 800a308:	300c      	adds	r0, #12
 800a30a:	f7fd fc71 	bl	8007bf0 <memcpy>
 800a30e:	2201      	movs	r2, #1
 800a310:	4629      	mov	r1, r5
 800a312:	4620      	mov	r0, r4
 800a314:	f000 fef0 	bl	800b0f8 <__lshift>
 800a318:	9b00      	ldr	r3, [sp, #0]
 800a31a:	3301      	adds	r3, #1
 800a31c:	9301      	str	r3, [sp, #4]
 800a31e:	9b00      	ldr	r3, [sp, #0]
 800a320:	444b      	add	r3, r9
 800a322:	9307      	str	r3, [sp, #28]
 800a324:	9b02      	ldr	r3, [sp, #8]
 800a326:	f003 0301 	and.w	r3, r3, #1
 800a32a:	46b8      	mov	r8, r7
 800a32c:	9306      	str	r3, [sp, #24]
 800a32e:	4607      	mov	r7, r0
 800a330:	9b01      	ldr	r3, [sp, #4]
 800a332:	4631      	mov	r1, r6
 800a334:	3b01      	subs	r3, #1
 800a336:	4658      	mov	r0, fp
 800a338:	9302      	str	r3, [sp, #8]
 800a33a:	f7ff fa69 	bl	8009810 <quorem>
 800a33e:	4603      	mov	r3, r0
 800a340:	3330      	adds	r3, #48	; 0x30
 800a342:	9004      	str	r0, [sp, #16]
 800a344:	4641      	mov	r1, r8
 800a346:	4658      	mov	r0, fp
 800a348:	9308      	str	r3, [sp, #32]
 800a34a:	f000 ff41 	bl	800b1d0 <__mcmp>
 800a34e:	463a      	mov	r2, r7
 800a350:	4681      	mov	r9, r0
 800a352:	4631      	mov	r1, r6
 800a354:	4620      	mov	r0, r4
 800a356:	f000 ff57 	bl	800b208 <__mdiff>
 800a35a:	68c2      	ldr	r2, [r0, #12]
 800a35c:	9b08      	ldr	r3, [sp, #32]
 800a35e:	4605      	mov	r5, r0
 800a360:	bb02      	cbnz	r2, 800a3a4 <_dtoa_r+0xa7c>
 800a362:	4601      	mov	r1, r0
 800a364:	4658      	mov	r0, fp
 800a366:	f000 ff33 	bl	800b1d0 <__mcmp>
 800a36a:	9b08      	ldr	r3, [sp, #32]
 800a36c:	4602      	mov	r2, r0
 800a36e:	4629      	mov	r1, r5
 800a370:	4620      	mov	r0, r4
 800a372:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a376:	f000 fca3 	bl	800acc0 <_Bfree>
 800a37a:	9b05      	ldr	r3, [sp, #20]
 800a37c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a37e:	9d01      	ldr	r5, [sp, #4]
 800a380:	ea43 0102 	orr.w	r1, r3, r2
 800a384:	9b06      	ldr	r3, [sp, #24]
 800a386:	430b      	orrs	r3, r1
 800a388:	9b08      	ldr	r3, [sp, #32]
 800a38a:	d10d      	bne.n	800a3a8 <_dtoa_r+0xa80>
 800a38c:	2b39      	cmp	r3, #57	; 0x39
 800a38e:	d029      	beq.n	800a3e4 <_dtoa_r+0xabc>
 800a390:	f1b9 0f00 	cmp.w	r9, #0
 800a394:	dd01      	ble.n	800a39a <_dtoa_r+0xa72>
 800a396:	9b04      	ldr	r3, [sp, #16]
 800a398:	3331      	adds	r3, #49	; 0x31
 800a39a:	9a02      	ldr	r2, [sp, #8]
 800a39c:	7013      	strb	r3, [r2, #0]
 800a39e:	e774      	b.n	800a28a <_dtoa_r+0x962>
 800a3a0:	4638      	mov	r0, r7
 800a3a2:	e7b9      	b.n	800a318 <_dtoa_r+0x9f0>
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	e7e2      	b.n	800a36e <_dtoa_r+0xa46>
 800a3a8:	f1b9 0f00 	cmp.w	r9, #0
 800a3ac:	db06      	blt.n	800a3bc <_dtoa_r+0xa94>
 800a3ae:	9905      	ldr	r1, [sp, #20]
 800a3b0:	ea41 0909 	orr.w	r9, r1, r9
 800a3b4:	9906      	ldr	r1, [sp, #24]
 800a3b6:	ea59 0101 	orrs.w	r1, r9, r1
 800a3ba:	d120      	bne.n	800a3fe <_dtoa_r+0xad6>
 800a3bc:	2a00      	cmp	r2, #0
 800a3be:	ddec      	ble.n	800a39a <_dtoa_r+0xa72>
 800a3c0:	4659      	mov	r1, fp
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	4620      	mov	r0, r4
 800a3c6:	9301      	str	r3, [sp, #4]
 800a3c8:	f000 fe96 	bl	800b0f8 <__lshift>
 800a3cc:	4631      	mov	r1, r6
 800a3ce:	4683      	mov	fp, r0
 800a3d0:	f000 fefe 	bl	800b1d0 <__mcmp>
 800a3d4:	2800      	cmp	r0, #0
 800a3d6:	9b01      	ldr	r3, [sp, #4]
 800a3d8:	dc02      	bgt.n	800a3e0 <_dtoa_r+0xab8>
 800a3da:	d1de      	bne.n	800a39a <_dtoa_r+0xa72>
 800a3dc:	07da      	lsls	r2, r3, #31
 800a3de:	d5dc      	bpl.n	800a39a <_dtoa_r+0xa72>
 800a3e0:	2b39      	cmp	r3, #57	; 0x39
 800a3e2:	d1d8      	bne.n	800a396 <_dtoa_r+0xa6e>
 800a3e4:	9a02      	ldr	r2, [sp, #8]
 800a3e6:	2339      	movs	r3, #57	; 0x39
 800a3e8:	7013      	strb	r3, [r2, #0]
 800a3ea:	462b      	mov	r3, r5
 800a3ec:	461d      	mov	r5, r3
 800a3ee:	3b01      	subs	r3, #1
 800a3f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a3f4:	2a39      	cmp	r2, #57	; 0x39
 800a3f6:	d050      	beq.n	800a49a <_dtoa_r+0xb72>
 800a3f8:	3201      	adds	r2, #1
 800a3fa:	701a      	strb	r2, [r3, #0]
 800a3fc:	e745      	b.n	800a28a <_dtoa_r+0x962>
 800a3fe:	2a00      	cmp	r2, #0
 800a400:	dd03      	ble.n	800a40a <_dtoa_r+0xae2>
 800a402:	2b39      	cmp	r3, #57	; 0x39
 800a404:	d0ee      	beq.n	800a3e4 <_dtoa_r+0xabc>
 800a406:	3301      	adds	r3, #1
 800a408:	e7c7      	b.n	800a39a <_dtoa_r+0xa72>
 800a40a:	9a01      	ldr	r2, [sp, #4]
 800a40c:	9907      	ldr	r1, [sp, #28]
 800a40e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a412:	428a      	cmp	r2, r1
 800a414:	d02a      	beq.n	800a46c <_dtoa_r+0xb44>
 800a416:	4659      	mov	r1, fp
 800a418:	2300      	movs	r3, #0
 800a41a:	220a      	movs	r2, #10
 800a41c:	4620      	mov	r0, r4
 800a41e:	f000 fc71 	bl	800ad04 <__multadd>
 800a422:	45b8      	cmp	r8, r7
 800a424:	4683      	mov	fp, r0
 800a426:	f04f 0300 	mov.w	r3, #0
 800a42a:	f04f 020a 	mov.w	r2, #10
 800a42e:	4641      	mov	r1, r8
 800a430:	4620      	mov	r0, r4
 800a432:	d107      	bne.n	800a444 <_dtoa_r+0xb1c>
 800a434:	f000 fc66 	bl	800ad04 <__multadd>
 800a438:	4680      	mov	r8, r0
 800a43a:	4607      	mov	r7, r0
 800a43c:	9b01      	ldr	r3, [sp, #4]
 800a43e:	3301      	adds	r3, #1
 800a440:	9301      	str	r3, [sp, #4]
 800a442:	e775      	b.n	800a330 <_dtoa_r+0xa08>
 800a444:	f000 fc5e 	bl	800ad04 <__multadd>
 800a448:	4639      	mov	r1, r7
 800a44a:	4680      	mov	r8, r0
 800a44c:	2300      	movs	r3, #0
 800a44e:	220a      	movs	r2, #10
 800a450:	4620      	mov	r0, r4
 800a452:	f000 fc57 	bl	800ad04 <__multadd>
 800a456:	4607      	mov	r7, r0
 800a458:	e7f0      	b.n	800a43c <_dtoa_r+0xb14>
 800a45a:	f1b9 0f00 	cmp.w	r9, #0
 800a45e:	9a00      	ldr	r2, [sp, #0]
 800a460:	bfcc      	ite	gt
 800a462:	464d      	movgt	r5, r9
 800a464:	2501      	movle	r5, #1
 800a466:	4415      	add	r5, r2
 800a468:	f04f 0800 	mov.w	r8, #0
 800a46c:	4659      	mov	r1, fp
 800a46e:	2201      	movs	r2, #1
 800a470:	4620      	mov	r0, r4
 800a472:	9301      	str	r3, [sp, #4]
 800a474:	f000 fe40 	bl	800b0f8 <__lshift>
 800a478:	4631      	mov	r1, r6
 800a47a:	4683      	mov	fp, r0
 800a47c:	f000 fea8 	bl	800b1d0 <__mcmp>
 800a480:	2800      	cmp	r0, #0
 800a482:	dcb2      	bgt.n	800a3ea <_dtoa_r+0xac2>
 800a484:	d102      	bne.n	800a48c <_dtoa_r+0xb64>
 800a486:	9b01      	ldr	r3, [sp, #4]
 800a488:	07db      	lsls	r3, r3, #31
 800a48a:	d4ae      	bmi.n	800a3ea <_dtoa_r+0xac2>
 800a48c:	462b      	mov	r3, r5
 800a48e:	461d      	mov	r5, r3
 800a490:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a494:	2a30      	cmp	r2, #48	; 0x30
 800a496:	d0fa      	beq.n	800a48e <_dtoa_r+0xb66>
 800a498:	e6f7      	b.n	800a28a <_dtoa_r+0x962>
 800a49a:	9a00      	ldr	r2, [sp, #0]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d1a5      	bne.n	800a3ec <_dtoa_r+0xac4>
 800a4a0:	f10a 0a01 	add.w	sl, sl, #1
 800a4a4:	2331      	movs	r3, #49	; 0x31
 800a4a6:	e779      	b.n	800a39c <_dtoa_r+0xa74>
 800a4a8:	4b13      	ldr	r3, [pc, #76]	; (800a4f8 <_dtoa_r+0xbd0>)
 800a4aa:	f7ff baaf 	b.w	8009a0c <_dtoa_r+0xe4>
 800a4ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	f47f aa86 	bne.w	80099c2 <_dtoa_r+0x9a>
 800a4b6:	4b11      	ldr	r3, [pc, #68]	; (800a4fc <_dtoa_r+0xbd4>)
 800a4b8:	f7ff baa8 	b.w	8009a0c <_dtoa_r+0xe4>
 800a4bc:	f1b9 0f00 	cmp.w	r9, #0
 800a4c0:	dc03      	bgt.n	800a4ca <_dtoa_r+0xba2>
 800a4c2:	9b05      	ldr	r3, [sp, #20]
 800a4c4:	2b02      	cmp	r3, #2
 800a4c6:	f73f aec9 	bgt.w	800a25c <_dtoa_r+0x934>
 800a4ca:	9d00      	ldr	r5, [sp, #0]
 800a4cc:	4631      	mov	r1, r6
 800a4ce:	4658      	mov	r0, fp
 800a4d0:	f7ff f99e 	bl	8009810 <quorem>
 800a4d4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a4d8:	f805 3b01 	strb.w	r3, [r5], #1
 800a4dc:	9a00      	ldr	r2, [sp, #0]
 800a4de:	1aaa      	subs	r2, r5, r2
 800a4e0:	4591      	cmp	r9, r2
 800a4e2:	ddba      	ble.n	800a45a <_dtoa_r+0xb32>
 800a4e4:	4659      	mov	r1, fp
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	220a      	movs	r2, #10
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	f000 fc0a 	bl	800ad04 <__multadd>
 800a4f0:	4683      	mov	fp, r0
 800a4f2:	e7eb      	b.n	800a4cc <_dtoa_r+0xba4>
 800a4f4:	0800e5b4 	.word	0x0800e5b4
 800a4f8:	0800e7b9 	.word	0x0800e7b9
 800a4fc:	0800e531 	.word	0x0800e531

0800a500 <rshift>:
 800a500:	6903      	ldr	r3, [r0, #16]
 800a502:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a506:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a50a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a50e:	f100 0414 	add.w	r4, r0, #20
 800a512:	dd45      	ble.n	800a5a0 <rshift+0xa0>
 800a514:	f011 011f 	ands.w	r1, r1, #31
 800a518:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a51c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a520:	d10c      	bne.n	800a53c <rshift+0x3c>
 800a522:	f100 0710 	add.w	r7, r0, #16
 800a526:	4629      	mov	r1, r5
 800a528:	42b1      	cmp	r1, r6
 800a52a:	d334      	bcc.n	800a596 <rshift+0x96>
 800a52c:	1a9b      	subs	r3, r3, r2
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	1eea      	subs	r2, r5, #3
 800a532:	4296      	cmp	r6, r2
 800a534:	bf38      	it	cc
 800a536:	2300      	movcc	r3, #0
 800a538:	4423      	add	r3, r4
 800a53a:	e015      	b.n	800a568 <rshift+0x68>
 800a53c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a540:	f1c1 0820 	rsb	r8, r1, #32
 800a544:	40cf      	lsrs	r7, r1
 800a546:	f105 0e04 	add.w	lr, r5, #4
 800a54a:	46a1      	mov	r9, r4
 800a54c:	4576      	cmp	r6, lr
 800a54e:	46f4      	mov	ip, lr
 800a550:	d815      	bhi.n	800a57e <rshift+0x7e>
 800a552:	1a9b      	subs	r3, r3, r2
 800a554:	009a      	lsls	r2, r3, #2
 800a556:	3a04      	subs	r2, #4
 800a558:	3501      	adds	r5, #1
 800a55a:	42ae      	cmp	r6, r5
 800a55c:	bf38      	it	cc
 800a55e:	2200      	movcc	r2, #0
 800a560:	18a3      	adds	r3, r4, r2
 800a562:	50a7      	str	r7, [r4, r2]
 800a564:	b107      	cbz	r7, 800a568 <rshift+0x68>
 800a566:	3304      	adds	r3, #4
 800a568:	1b1a      	subs	r2, r3, r4
 800a56a:	42a3      	cmp	r3, r4
 800a56c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a570:	bf08      	it	eq
 800a572:	2300      	moveq	r3, #0
 800a574:	6102      	str	r2, [r0, #16]
 800a576:	bf08      	it	eq
 800a578:	6143      	streq	r3, [r0, #20]
 800a57a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a57e:	f8dc c000 	ldr.w	ip, [ip]
 800a582:	fa0c fc08 	lsl.w	ip, ip, r8
 800a586:	ea4c 0707 	orr.w	r7, ip, r7
 800a58a:	f849 7b04 	str.w	r7, [r9], #4
 800a58e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a592:	40cf      	lsrs	r7, r1
 800a594:	e7da      	b.n	800a54c <rshift+0x4c>
 800a596:	f851 cb04 	ldr.w	ip, [r1], #4
 800a59a:	f847 cf04 	str.w	ip, [r7, #4]!
 800a59e:	e7c3      	b.n	800a528 <rshift+0x28>
 800a5a0:	4623      	mov	r3, r4
 800a5a2:	e7e1      	b.n	800a568 <rshift+0x68>

0800a5a4 <__hexdig_fun>:
 800a5a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a5a8:	2b09      	cmp	r3, #9
 800a5aa:	d802      	bhi.n	800a5b2 <__hexdig_fun+0xe>
 800a5ac:	3820      	subs	r0, #32
 800a5ae:	b2c0      	uxtb	r0, r0
 800a5b0:	4770      	bx	lr
 800a5b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a5b6:	2b05      	cmp	r3, #5
 800a5b8:	d801      	bhi.n	800a5be <__hexdig_fun+0x1a>
 800a5ba:	3847      	subs	r0, #71	; 0x47
 800a5bc:	e7f7      	b.n	800a5ae <__hexdig_fun+0xa>
 800a5be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a5c2:	2b05      	cmp	r3, #5
 800a5c4:	d801      	bhi.n	800a5ca <__hexdig_fun+0x26>
 800a5c6:	3827      	subs	r0, #39	; 0x27
 800a5c8:	e7f1      	b.n	800a5ae <__hexdig_fun+0xa>
 800a5ca:	2000      	movs	r0, #0
 800a5cc:	4770      	bx	lr
	...

0800a5d0 <__gethex>:
 800a5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d4:	ed2d 8b02 	vpush	{d8}
 800a5d8:	b089      	sub	sp, #36	; 0x24
 800a5da:	ee08 0a10 	vmov	s16, r0
 800a5de:	9304      	str	r3, [sp, #16]
 800a5e0:	4bbc      	ldr	r3, [pc, #752]	; (800a8d4 <__gethex+0x304>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	9301      	str	r3, [sp, #4]
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	468b      	mov	fp, r1
 800a5ea:	4690      	mov	r8, r2
 800a5ec:	f7f5 fdf8 	bl	80001e0 <strlen>
 800a5f0:	9b01      	ldr	r3, [sp, #4]
 800a5f2:	f8db 2000 	ldr.w	r2, [fp]
 800a5f6:	4403      	add	r3, r0
 800a5f8:	4682      	mov	sl, r0
 800a5fa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a5fe:	9305      	str	r3, [sp, #20]
 800a600:	1c93      	adds	r3, r2, #2
 800a602:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a606:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a60a:	32fe      	adds	r2, #254	; 0xfe
 800a60c:	18d1      	adds	r1, r2, r3
 800a60e:	461f      	mov	r7, r3
 800a610:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a614:	9100      	str	r1, [sp, #0]
 800a616:	2830      	cmp	r0, #48	; 0x30
 800a618:	d0f8      	beq.n	800a60c <__gethex+0x3c>
 800a61a:	f7ff ffc3 	bl	800a5a4 <__hexdig_fun>
 800a61e:	4604      	mov	r4, r0
 800a620:	2800      	cmp	r0, #0
 800a622:	d13a      	bne.n	800a69a <__gethex+0xca>
 800a624:	9901      	ldr	r1, [sp, #4]
 800a626:	4652      	mov	r2, sl
 800a628:	4638      	mov	r0, r7
 800a62a:	f7fe fa08 	bl	8008a3e <strncmp>
 800a62e:	4605      	mov	r5, r0
 800a630:	2800      	cmp	r0, #0
 800a632:	d168      	bne.n	800a706 <__gethex+0x136>
 800a634:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a638:	eb07 060a 	add.w	r6, r7, sl
 800a63c:	f7ff ffb2 	bl	800a5a4 <__hexdig_fun>
 800a640:	2800      	cmp	r0, #0
 800a642:	d062      	beq.n	800a70a <__gethex+0x13a>
 800a644:	4633      	mov	r3, r6
 800a646:	7818      	ldrb	r0, [r3, #0]
 800a648:	2830      	cmp	r0, #48	; 0x30
 800a64a:	461f      	mov	r7, r3
 800a64c:	f103 0301 	add.w	r3, r3, #1
 800a650:	d0f9      	beq.n	800a646 <__gethex+0x76>
 800a652:	f7ff ffa7 	bl	800a5a4 <__hexdig_fun>
 800a656:	2301      	movs	r3, #1
 800a658:	fab0 f480 	clz	r4, r0
 800a65c:	0964      	lsrs	r4, r4, #5
 800a65e:	4635      	mov	r5, r6
 800a660:	9300      	str	r3, [sp, #0]
 800a662:	463a      	mov	r2, r7
 800a664:	4616      	mov	r6, r2
 800a666:	3201      	adds	r2, #1
 800a668:	7830      	ldrb	r0, [r6, #0]
 800a66a:	f7ff ff9b 	bl	800a5a4 <__hexdig_fun>
 800a66e:	2800      	cmp	r0, #0
 800a670:	d1f8      	bne.n	800a664 <__gethex+0x94>
 800a672:	9901      	ldr	r1, [sp, #4]
 800a674:	4652      	mov	r2, sl
 800a676:	4630      	mov	r0, r6
 800a678:	f7fe f9e1 	bl	8008a3e <strncmp>
 800a67c:	b980      	cbnz	r0, 800a6a0 <__gethex+0xd0>
 800a67e:	b94d      	cbnz	r5, 800a694 <__gethex+0xc4>
 800a680:	eb06 050a 	add.w	r5, r6, sl
 800a684:	462a      	mov	r2, r5
 800a686:	4616      	mov	r6, r2
 800a688:	3201      	adds	r2, #1
 800a68a:	7830      	ldrb	r0, [r6, #0]
 800a68c:	f7ff ff8a 	bl	800a5a4 <__hexdig_fun>
 800a690:	2800      	cmp	r0, #0
 800a692:	d1f8      	bne.n	800a686 <__gethex+0xb6>
 800a694:	1bad      	subs	r5, r5, r6
 800a696:	00ad      	lsls	r5, r5, #2
 800a698:	e004      	b.n	800a6a4 <__gethex+0xd4>
 800a69a:	2400      	movs	r4, #0
 800a69c:	4625      	mov	r5, r4
 800a69e:	e7e0      	b.n	800a662 <__gethex+0x92>
 800a6a0:	2d00      	cmp	r5, #0
 800a6a2:	d1f7      	bne.n	800a694 <__gethex+0xc4>
 800a6a4:	7833      	ldrb	r3, [r6, #0]
 800a6a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a6aa:	2b50      	cmp	r3, #80	; 0x50
 800a6ac:	d13b      	bne.n	800a726 <__gethex+0x156>
 800a6ae:	7873      	ldrb	r3, [r6, #1]
 800a6b0:	2b2b      	cmp	r3, #43	; 0x2b
 800a6b2:	d02c      	beq.n	800a70e <__gethex+0x13e>
 800a6b4:	2b2d      	cmp	r3, #45	; 0x2d
 800a6b6:	d02e      	beq.n	800a716 <__gethex+0x146>
 800a6b8:	1c71      	adds	r1, r6, #1
 800a6ba:	f04f 0900 	mov.w	r9, #0
 800a6be:	7808      	ldrb	r0, [r1, #0]
 800a6c0:	f7ff ff70 	bl	800a5a4 <__hexdig_fun>
 800a6c4:	1e43      	subs	r3, r0, #1
 800a6c6:	b2db      	uxtb	r3, r3
 800a6c8:	2b18      	cmp	r3, #24
 800a6ca:	d82c      	bhi.n	800a726 <__gethex+0x156>
 800a6cc:	f1a0 0210 	sub.w	r2, r0, #16
 800a6d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a6d4:	f7ff ff66 	bl	800a5a4 <__hexdig_fun>
 800a6d8:	1e43      	subs	r3, r0, #1
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	2b18      	cmp	r3, #24
 800a6de:	d91d      	bls.n	800a71c <__gethex+0x14c>
 800a6e0:	f1b9 0f00 	cmp.w	r9, #0
 800a6e4:	d000      	beq.n	800a6e8 <__gethex+0x118>
 800a6e6:	4252      	negs	r2, r2
 800a6e8:	4415      	add	r5, r2
 800a6ea:	f8cb 1000 	str.w	r1, [fp]
 800a6ee:	b1e4      	cbz	r4, 800a72a <__gethex+0x15a>
 800a6f0:	9b00      	ldr	r3, [sp, #0]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	bf14      	ite	ne
 800a6f6:	2700      	movne	r7, #0
 800a6f8:	2706      	moveq	r7, #6
 800a6fa:	4638      	mov	r0, r7
 800a6fc:	b009      	add	sp, #36	; 0x24
 800a6fe:	ecbd 8b02 	vpop	{d8}
 800a702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a706:	463e      	mov	r6, r7
 800a708:	4625      	mov	r5, r4
 800a70a:	2401      	movs	r4, #1
 800a70c:	e7ca      	b.n	800a6a4 <__gethex+0xd4>
 800a70e:	f04f 0900 	mov.w	r9, #0
 800a712:	1cb1      	adds	r1, r6, #2
 800a714:	e7d3      	b.n	800a6be <__gethex+0xee>
 800a716:	f04f 0901 	mov.w	r9, #1
 800a71a:	e7fa      	b.n	800a712 <__gethex+0x142>
 800a71c:	230a      	movs	r3, #10
 800a71e:	fb03 0202 	mla	r2, r3, r2, r0
 800a722:	3a10      	subs	r2, #16
 800a724:	e7d4      	b.n	800a6d0 <__gethex+0x100>
 800a726:	4631      	mov	r1, r6
 800a728:	e7df      	b.n	800a6ea <__gethex+0x11a>
 800a72a:	1bf3      	subs	r3, r6, r7
 800a72c:	3b01      	subs	r3, #1
 800a72e:	4621      	mov	r1, r4
 800a730:	2b07      	cmp	r3, #7
 800a732:	dc0b      	bgt.n	800a74c <__gethex+0x17c>
 800a734:	ee18 0a10 	vmov	r0, s16
 800a738:	f000 fa82 	bl	800ac40 <_Balloc>
 800a73c:	4604      	mov	r4, r0
 800a73e:	b940      	cbnz	r0, 800a752 <__gethex+0x182>
 800a740:	4b65      	ldr	r3, [pc, #404]	; (800a8d8 <__gethex+0x308>)
 800a742:	4602      	mov	r2, r0
 800a744:	21de      	movs	r1, #222	; 0xde
 800a746:	4865      	ldr	r0, [pc, #404]	; (800a8dc <__gethex+0x30c>)
 800a748:	f001 fd92 	bl	800c270 <__assert_func>
 800a74c:	3101      	adds	r1, #1
 800a74e:	105b      	asrs	r3, r3, #1
 800a750:	e7ee      	b.n	800a730 <__gethex+0x160>
 800a752:	f100 0914 	add.w	r9, r0, #20
 800a756:	f04f 0b00 	mov.w	fp, #0
 800a75a:	f1ca 0301 	rsb	r3, sl, #1
 800a75e:	f8cd 9008 	str.w	r9, [sp, #8]
 800a762:	f8cd b000 	str.w	fp, [sp]
 800a766:	9306      	str	r3, [sp, #24]
 800a768:	42b7      	cmp	r7, r6
 800a76a:	d340      	bcc.n	800a7ee <__gethex+0x21e>
 800a76c:	9802      	ldr	r0, [sp, #8]
 800a76e:	9b00      	ldr	r3, [sp, #0]
 800a770:	f840 3b04 	str.w	r3, [r0], #4
 800a774:	eba0 0009 	sub.w	r0, r0, r9
 800a778:	1080      	asrs	r0, r0, #2
 800a77a:	0146      	lsls	r6, r0, #5
 800a77c:	6120      	str	r0, [r4, #16]
 800a77e:	4618      	mov	r0, r3
 800a780:	f000 fb54 	bl	800ae2c <__hi0bits>
 800a784:	1a30      	subs	r0, r6, r0
 800a786:	f8d8 6000 	ldr.w	r6, [r8]
 800a78a:	42b0      	cmp	r0, r6
 800a78c:	dd63      	ble.n	800a856 <__gethex+0x286>
 800a78e:	1b87      	subs	r7, r0, r6
 800a790:	4639      	mov	r1, r7
 800a792:	4620      	mov	r0, r4
 800a794:	f000 feee 	bl	800b574 <__any_on>
 800a798:	4682      	mov	sl, r0
 800a79a:	b1a8      	cbz	r0, 800a7c8 <__gethex+0x1f8>
 800a79c:	1e7b      	subs	r3, r7, #1
 800a79e:	1159      	asrs	r1, r3, #5
 800a7a0:	f003 021f 	and.w	r2, r3, #31
 800a7a4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a7a8:	f04f 0a01 	mov.w	sl, #1
 800a7ac:	fa0a f202 	lsl.w	r2, sl, r2
 800a7b0:	420a      	tst	r2, r1
 800a7b2:	d009      	beq.n	800a7c8 <__gethex+0x1f8>
 800a7b4:	4553      	cmp	r3, sl
 800a7b6:	dd05      	ble.n	800a7c4 <__gethex+0x1f4>
 800a7b8:	1eb9      	subs	r1, r7, #2
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	f000 feda 	bl	800b574 <__any_on>
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	d145      	bne.n	800a850 <__gethex+0x280>
 800a7c4:	f04f 0a02 	mov.w	sl, #2
 800a7c8:	4639      	mov	r1, r7
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	f7ff fe98 	bl	800a500 <rshift>
 800a7d0:	443d      	add	r5, r7
 800a7d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a7d6:	42ab      	cmp	r3, r5
 800a7d8:	da4c      	bge.n	800a874 <__gethex+0x2a4>
 800a7da:	ee18 0a10 	vmov	r0, s16
 800a7de:	4621      	mov	r1, r4
 800a7e0:	f000 fa6e 	bl	800acc0 <_Bfree>
 800a7e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	6013      	str	r3, [r2, #0]
 800a7ea:	27a3      	movs	r7, #163	; 0xa3
 800a7ec:	e785      	b.n	800a6fa <__gethex+0x12a>
 800a7ee:	1e73      	subs	r3, r6, #1
 800a7f0:	9a05      	ldr	r2, [sp, #20]
 800a7f2:	9303      	str	r3, [sp, #12]
 800a7f4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d019      	beq.n	800a830 <__gethex+0x260>
 800a7fc:	f1bb 0f20 	cmp.w	fp, #32
 800a800:	d107      	bne.n	800a812 <__gethex+0x242>
 800a802:	9b02      	ldr	r3, [sp, #8]
 800a804:	9a00      	ldr	r2, [sp, #0]
 800a806:	f843 2b04 	str.w	r2, [r3], #4
 800a80a:	9302      	str	r3, [sp, #8]
 800a80c:	2300      	movs	r3, #0
 800a80e:	9300      	str	r3, [sp, #0]
 800a810:	469b      	mov	fp, r3
 800a812:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a816:	f7ff fec5 	bl	800a5a4 <__hexdig_fun>
 800a81a:	9b00      	ldr	r3, [sp, #0]
 800a81c:	f000 000f 	and.w	r0, r0, #15
 800a820:	fa00 f00b 	lsl.w	r0, r0, fp
 800a824:	4303      	orrs	r3, r0
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	f10b 0b04 	add.w	fp, fp, #4
 800a82c:	9b03      	ldr	r3, [sp, #12]
 800a82e:	e00d      	b.n	800a84c <__gethex+0x27c>
 800a830:	9b03      	ldr	r3, [sp, #12]
 800a832:	9a06      	ldr	r2, [sp, #24]
 800a834:	4413      	add	r3, r2
 800a836:	42bb      	cmp	r3, r7
 800a838:	d3e0      	bcc.n	800a7fc <__gethex+0x22c>
 800a83a:	4618      	mov	r0, r3
 800a83c:	9901      	ldr	r1, [sp, #4]
 800a83e:	9307      	str	r3, [sp, #28]
 800a840:	4652      	mov	r2, sl
 800a842:	f7fe f8fc 	bl	8008a3e <strncmp>
 800a846:	9b07      	ldr	r3, [sp, #28]
 800a848:	2800      	cmp	r0, #0
 800a84a:	d1d7      	bne.n	800a7fc <__gethex+0x22c>
 800a84c:	461e      	mov	r6, r3
 800a84e:	e78b      	b.n	800a768 <__gethex+0x198>
 800a850:	f04f 0a03 	mov.w	sl, #3
 800a854:	e7b8      	b.n	800a7c8 <__gethex+0x1f8>
 800a856:	da0a      	bge.n	800a86e <__gethex+0x29e>
 800a858:	1a37      	subs	r7, r6, r0
 800a85a:	4621      	mov	r1, r4
 800a85c:	ee18 0a10 	vmov	r0, s16
 800a860:	463a      	mov	r2, r7
 800a862:	f000 fc49 	bl	800b0f8 <__lshift>
 800a866:	1bed      	subs	r5, r5, r7
 800a868:	4604      	mov	r4, r0
 800a86a:	f100 0914 	add.w	r9, r0, #20
 800a86e:	f04f 0a00 	mov.w	sl, #0
 800a872:	e7ae      	b.n	800a7d2 <__gethex+0x202>
 800a874:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a878:	42a8      	cmp	r0, r5
 800a87a:	dd72      	ble.n	800a962 <__gethex+0x392>
 800a87c:	1b45      	subs	r5, r0, r5
 800a87e:	42ae      	cmp	r6, r5
 800a880:	dc36      	bgt.n	800a8f0 <__gethex+0x320>
 800a882:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a886:	2b02      	cmp	r3, #2
 800a888:	d02a      	beq.n	800a8e0 <__gethex+0x310>
 800a88a:	2b03      	cmp	r3, #3
 800a88c:	d02c      	beq.n	800a8e8 <__gethex+0x318>
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d115      	bne.n	800a8be <__gethex+0x2ee>
 800a892:	42ae      	cmp	r6, r5
 800a894:	d113      	bne.n	800a8be <__gethex+0x2ee>
 800a896:	2e01      	cmp	r6, #1
 800a898:	d10b      	bne.n	800a8b2 <__gethex+0x2e2>
 800a89a:	9a04      	ldr	r2, [sp, #16]
 800a89c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a8a0:	6013      	str	r3, [r2, #0]
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	6123      	str	r3, [r4, #16]
 800a8a6:	f8c9 3000 	str.w	r3, [r9]
 800a8aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a8ac:	2762      	movs	r7, #98	; 0x62
 800a8ae:	601c      	str	r4, [r3, #0]
 800a8b0:	e723      	b.n	800a6fa <__gethex+0x12a>
 800a8b2:	1e71      	subs	r1, r6, #1
 800a8b4:	4620      	mov	r0, r4
 800a8b6:	f000 fe5d 	bl	800b574 <__any_on>
 800a8ba:	2800      	cmp	r0, #0
 800a8bc:	d1ed      	bne.n	800a89a <__gethex+0x2ca>
 800a8be:	ee18 0a10 	vmov	r0, s16
 800a8c2:	4621      	mov	r1, r4
 800a8c4:	f000 f9fc 	bl	800acc0 <_Bfree>
 800a8c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	6013      	str	r3, [r2, #0]
 800a8ce:	2750      	movs	r7, #80	; 0x50
 800a8d0:	e713      	b.n	800a6fa <__gethex+0x12a>
 800a8d2:	bf00      	nop
 800a8d4:	0800e630 	.word	0x0800e630
 800a8d8:	0800e5b4 	.word	0x0800e5b4
 800a8dc:	0800e5c5 	.word	0x0800e5c5
 800a8e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d1eb      	bne.n	800a8be <__gethex+0x2ee>
 800a8e6:	e7d8      	b.n	800a89a <__gethex+0x2ca>
 800a8e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d1d5      	bne.n	800a89a <__gethex+0x2ca>
 800a8ee:	e7e6      	b.n	800a8be <__gethex+0x2ee>
 800a8f0:	1e6f      	subs	r7, r5, #1
 800a8f2:	f1ba 0f00 	cmp.w	sl, #0
 800a8f6:	d131      	bne.n	800a95c <__gethex+0x38c>
 800a8f8:	b127      	cbz	r7, 800a904 <__gethex+0x334>
 800a8fa:	4639      	mov	r1, r7
 800a8fc:	4620      	mov	r0, r4
 800a8fe:	f000 fe39 	bl	800b574 <__any_on>
 800a902:	4682      	mov	sl, r0
 800a904:	117b      	asrs	r3, r7, #5
 800a906:	2101      	movs	r1, #1
 800a908:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a90c:	f007 071f 	and.w	r7, r7, #31
 800a910:	fa01 f707 	lsl.w	r7, r1, r7
 800a914:	421f      	tst	r7, r3
 800a916:	4629      	mov	r1, r5
 800a918:	4620      	mov	r0, r4
 800a91a:	bf18      	it	ne
 800a91c:	f04a 0a02 	orrne.w	sl, sl, #2
 800a920:	1b76      	subs	r6, r6, r5
 800a922:	f7ff fded 	bl	800a500 <rshift>
 800a926:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a92a:	2702      	movs	r7, #2
 800a92c:	f1ba 0f00 	cmp.w	sl, #0
 800a930:	d048      	beq.n	800a9c4 <__gethex+0x3f4>
 800a932:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a936:	2b02      	cmp	r3, #2
 800a938:	d015      	beq.n	800a966 <__gethex+0x396>
 800a93a:	2b03      	cmp	r3, #3
 800a93c:	d017      	beq.n	800a96e <__gethex+0x39e>
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d109      	bne.n	800a956 <__gethex+0x386>
 800a942:	f01a 0f02 	tst.w	sl, #2
 800a946:	d006      	beq.n	800a956 <__gethex+0x386>
 800a948:	f8d9 0000 	ldr.w	r0, [r9]
 800a94c:	ea4a 0a00 	orr.w	sl, sl, r0
 800a950:	f01a 0f01 	tst.w	sl, #1
 800a954:	d10e      	bne.n	800a974 <__gethex+0x3a4>
 800a956:	f047 0710 	orr.w	r7, r7, #16
 800a95a:	e033      	b.n	800a9c4 <__gethex+0x3f4>
 800a95c:	f04f 0a01 	mov.w	sl, #1
 800a960:	e7d0      	b.n	800a904 <__gethex+0x334>
 800a962:	2701      	movs	r7, #1
 800a964:	e7e2      	b.n	800a92c <__gethex+0x35c>
 800a966:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a968:	f1c3 0301 	rsb	r3, r3, #1
 800a96c:	9315      	str	r3, [sp, #84]	; 0x54
 800a96e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a970:	2b00      	cmp	r3, #0
 800a972:	d0f0      	beq.n	800a956 <__gethex+0x386>
 800a974:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a978:	f104 0314 	add.w	r3, r4, #20
 800a97c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a980:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a984:	f04f 0c00 	mov.w	ip, #0
 800a988:	4618      	mov	r0, r3
 800a98a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a98e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a992:	d01c      	beq.n	800a9ce <__gethex+0x3fe>
 800a994:	3201      	adds	r2, #1
 800a996:	6002      	str	r2, [r0, #0]
 800a998:	2f02      	cmp	r7, #2
 800a99a:	f104 0314 	add.w	r3, r4, #20
 800a99e:	d13f      	bne.n	800aa20 <__gethex+0x450>
 800a9a0:	f8d8 2000 	ldr.w	r2, [r8]
 800a9a4:	3a01      	subs	r2, #1
 800a9a6:	42b2      	cmp	r2, r6
 800a9a8:	d10a      	bne.n	800a9c0 <__gethex+0x3f0>
 800a9aa:	1171      	asrs	r1, r6, #5
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a9b2:	f006 061f 	and.w	r6, r6, #31
 800a9b6:	fa02 f606 	lsl.w	r6, r2, r6
 800a9ba:	421e      	tst	r6, r3
 800a9bc:	bf18      	it	ne
 800a9be:	4617      	movne	r7, r2
 800a9c0:	f047 0720 	orr.w	r7, r7, #32
 800a9c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a9c6:	601c      	str	r4, [r3, #0]
 800a9c8:	9b04      	ldr	r3, [sp, #16]
 800a9ca:	601d      	str	r5, [r3, #0]
 800a9cc:	e695      	b.n	800a6fa <__gethex+0x12a>
 800a9ce:	4299      	cmp	r1, r3
 800a9d0:	f843 cc04 	str.w	ip, [r3, #-4]
 800a9d4:	d8d8      	bhi.n	800a988 <__gethex+0x3b8>
 800a9d6:	68a3      	ldr	r3, [r4, #8]
 800a9d8:	459b      	cmp	fp, r3
 800a9da:	db19      	blt.n	800aa10 <__gethex+0x440>
 800a9dc:	6861      	ldr	r1, [r4, #4]
 800a9de:	ee18 0a10 	vmov	r0, s16
 800a9e2:	3101      	adds	r1, #1
 800a9e4:	f000 f92c 	bl	800ac40 <_Balloc>
 800a9e8:	4681      	mov	r9, r0
 800a9ea:	b918      	cbnz	r0, 800a9f4 <__gethex+0x424>
 800a9ec:	4b1a      	ldr	r3, [pc, #104]	; (800aa58 <__gethex+0x488>)
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	2184      	movs	r1, #132	; 0x84
 800a9f2:	e6a8      	b.n	800a746 <__gethex+0x176>
 800a9f4:	6922      	ldr	r2, [r4, #16]
 800a9f6:	3202      	adds	r2, #2
 800a9f8:	f104 010c 	add.w	r1, r4, #12
 800a9fc:	0092      	lsls	r2, r2, #2
 800a9fe:	300c      	adds	r0, #12
 800aa00:	f7fd f8f6 	bl	8007bf0 <memcpy>
 800aa04:	4621      	mov	r1, r4
 800aa06:	ee18 0a10 	vmov	r0, s16
 800aa0a:	f000 f959 	bl	800acc0 <_Bfree>
 800aa0e:	464c      	mov	r4, r9
 800aa10:	6923      	ldr	r3, [r4, #16]
 800aa12:	1c5a      	adds	r2, r3, #1
 800aa14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa18:	6122      	str	r2, [r4, #16]
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	615a      	str	r2, [r3, #20]
 800aa1e:	e7bb      	b.n	800a998 <__gethex+0x3c8>
 800aa20:	6922      	ldr	r2, [r4, #16]
 800aa22:	455a      	cmp	r2, fp
 800aa24:	dd0b      	ble.n	800aa3e <__gethex+0x46e>
 800aa26:	2101      	movs	r1, #1
 800aa28:	4620      	mov	r0, r4
 800aa2a:	f7ff fd69 	bl	800a500 <rshift>
 800aa2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa32:	3501      	adds	r5, #1
 800aa34:	42ab      	cmp	r3, r5
 800aa36:	f6ff aed0 	blt.w	800a7da <__gethex+0x20a>
 800aa3a:	2701      	movs	r7, #1
 800aa3c:	e7c0      	b.n	800a9c0 <__gethex+0x3f0>
 800aa3e:	f016 061f 	ands.w	r6, r6, #31
 800aa42:	d0fa      	beq.n	800aa3a <__gethex+0x46a>
 800aa44:	449a      	add	sl, r3
 800aa46:	f1c6 0620 	rsb	r6, r6, #32
 800aa4a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800aa4e:	f000 f9ed 	bl	800ae2c <__hi0bits>
 800aa52:	42b0      	cmp	r0, r6
 800aa54:	dbe7      	blt.n	800aa26 <__gethex+0x456>
 800aa56:	e7f0      	b.n	800aa3a <__gethex+0x46a>
 800aa58:	0800e5b4 	.word	0x0800e5b4

0800aa5c <L_shift>:
 800aa5c:	f1c2 0208 	rsb	r2, r2, #8
 800aa60:	0092      	lsls	r2, r2, #2
 800aa62:	b570      	push	{r4, r5, r6, lr}
 800aa64:	f1c2 0620 	rsb	r6, r2, #32
 800aa68:	6843      	ldr	r3, [r0, #4]
 800aa6a:	6804      	ldr	r4, [r0, #0]
 800aa6c:	fa03 f506 	lsl.w	r5, r3, r6
 800aa70:	432c      	orrs	r4, r5
 800aa72:	40d3      	lsrs	r3, r2
 800aa74:	6004      	str	r4, [r0, #0]
 800aa76:	f840 3f04 	str.w	r3, [r0, #4]!
 800aa7a:	4288      	cmp	r0, r1
 800aa7c:	d3f4      	bcc.n	800aa68 <L_shift+0xc>
 800aa7e:	bd70      	pop	{r4, r5, r6, pc}

0800aa80 <__match>:
 800aa80:	b530      	push	{r4, r5, lr}
 800aa82:	6803      	ldr	r3, [r0, #0]
 800aa84:	3301      	adds	r3, #1
 800aa86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa8a:	b914      	cbnz	r4, 800aa92 <__match+0x12>
 800aa8c:	6003      	str	r3, [r0, #0]
 800aa8e:	2001      	movs	r0, #1
 800aa90:	bd30      	pop	{r4, r5, pc}
 800aa92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa96:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800aa9a:	2d19      	cmp	r5, #25
 800aa9c:	bf98      	it	ls
 800aa9e:	3220      	addls	r2, #32
 800aaa0:	42a2      	cmp	r2, r4
 800aaa2:	d0f0      	beq.n	800aa86 <__match+0x6>
 800aaa4:	2000      	movs	r0, #0
 800aaa6:	e7f3      	b.n	800aa90 <__match+0x10>

0800aaa8 <__hexnan>:
 800aaa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaac:	680b      	ldr	r3, [r1, #0]
 800aaae:	6801      	ldr	r1, [r0, #0]
 800aab0:	115e      	asrs	r6, r3, #5
 800aab2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aab6:	f013 031f 	ands.w	r3, r3, #31
 800aaba:	b087      	sub	sp, #28
 800aabc:	bf18      	it	ne
 800aabe:	3604      	addne	r6, #4
 800aac0:	2500      	movs	r5, #0
 800aac2:	1f37      	subs	r7, r6, #4
 800aac4:	4682      	mov	sl, r0
 800aac6:	4690      	mov	r8, r2
 800aac8:	9301      	str	r3, [sp, #4]
 800aaca:	f846 5c04 	str.w	r5, [r6, #-4]
 800aace:	46b9      	mov	r9, r7
 800aad0:	463c      	mov	r4, r7
 800aad2:	9502      	str	r5, [sp, #8]
 800aad4:	46ab      	mov	fp, r5
 800aad6:	784a      	ldrb	r2, [r1, #1]
 800aad8:	1c4b      	adds	r3, r1, #1
 800aada:	9303      	str	r3, [sp, #12]
 800aadc:	b342      	cbz	r2, 800ab30 <__hexnan+0x88>
 800aade:	4610      	mov	r0, r2
 800aae0:	9105      	str	r1, [sp, #20]
 800aae2:	9204      	str	r2, [sp, #16]
 800aae4:	f7ff fd5e 	bl	800a5a4 <__hexdig_fun>
 800aae8:	2800      	cmp	r0, #0
 800aaea:	d14f      	bne.n	800ab8c <__hexnan+0xe4>
 800aaec:	9a04      	ldr	r2, [sp, #16]
 800aaee:	9905      	ldr	r1, [sp, #20]
 800aaf0:	2a20      	cmp	r2, #32
 800aaf2:	d818      	bhi.n	800ab26 <__hexnan+0x7e>
 800aaf4:	9b02      	ldr	r3, [sp, #8]
 800aaf6:	459b      	cmp	fp, r3
 800aaf8:	dd13      	ble.n	800ab22 <__hexnan+0x7a>
 800aafa:	454c      	cmp	r4, r9
 800aafc:	d206      	bcs.n	800ab0c <__hexnan+0x64>
 800aafe:	2d07      	cmp	r5, #7
 800ab00:	dc04      	bgt.n	800ab0c <__hexnan+0x64>
 800ab02:	462a      	mov	r2, r5
 800ab04:	4649      	mov	r1, r9
 800ab06:	4620      	mov	r0, r4
 800ab08:	f7ff ffa8 	bl	800aa5c <L_shift>
 800ab0c:	4544      	cmp	r4, r8
 800ab0e:	d950      	bls.n	800abb2 <__hexnan+0x10a>
 800ab10:	2300      	movs	r3, #0
 800ab12:	f1a4 0904 	sub.w	r9, r4, #4
 800ab16:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab1a:	f8cd b008 	str.w	fp, [sp, #8]
 800ab1e:	464c      	mov	r4, r9
 800ab20:	461d      	mov	r5, r3
 800ab22:	9903      	ldr	r1, [sp, #12]
 800ab24:	e7d7      	b.n	800aad6 <__hexnan+0x2e>
 800ab26:	2a29      	cmp	r2, #41	; 0x29
 800ab28:	d156      	bne.n	800abd8 <__hexnan+0x130>
 800ab2a:	3102      	adds	r1, #2
 800ab2c:	f8ca 1000 	str.w	r1, [sl]
 800ab30:	f1bb 0f00 	cmp.w	fp, #0
 800ab34:	d050      	beq.n	800abd8 <__hexnan+0x130>
 800ab36:	454c      	cmp	r4, r9
 800ab38:	d206      	bcs.n	800ab48 <__hexnan+0xa0>
 800ab3a:	2d07      	cmp	r5, #7
 800ab3c:	dc04      	bgt.n	800ab48 <__hexnan+0xa0>
 800ab3e:	462a      	mov	r2, r5
 800ab40:	4649      	mov	r1, r9
 800ab42:	4620      	mov	r0, r4
 800ab44:	f7ff ff8a 	bl	800aa5c <L_shift>
 800ab48:	4544      	cmp	r4, r8
 800ab4a:	d934      	bls.n	800abb6 <__hexnan+0x10e>
 800ab4c:	f1a8 0204 	sub.w	r2, r8, #4
 800ab50:	4623      	mov	r3, r4
 800ab52:	f853 1b04 	ldr.w	r1, [r3], #4
 800ab56:	f842 1f04 	str.w	r1, [r2, #4]!
 800ab5a:	429f      	cmp	r7, r3
 800ab5c:	d2f9      	bcs.n	800ab52 <__hexnan+0xaa>
 800ab5e:	1b3b      	subs	r3, r7, r4
 800ab60:	f023 0303 	bic.w	r3, r3, #3
 800ab64:	3304      	adds	r3, #4
 800ab66:	3401      	adds	r4, #1
 800ab68:	3e03      	subs	r6, #3
 800ab6a:	42b4      	cmp	r4, r6
 800ab6c:	bf88      	it	hi
 800ab6e:	2304      	movhi	r3, #4
 800ab70:	4443      	add	r3, r8
 800ab72:	2200      	movs	r2, #0
 800ab74:	f843 2b04 	str.w	r2, [r3], #4
 800ab78:	429f      	cmp	r7, r3
 800ab7a:	d2fb      	bcs.n	800ab74 <__hexnan+0xcc>
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	b91b      	cbnz	r3, 800ab88 <__hexnan+0xe0>
 800ab80:	4547      	cmp	r7, r8
 800ab82:	d127      	bne.n	800abd4 <__hexnan+0x12c>
 800ab84:	2301      	movs	r3, #1
 800ab86:	603b      	str	r3, [r7, #0]
 800ab88:	2005      	movs	r0, #5
 800ab8a:	e026      	b.n	800abda <__hexnan+0x132>
 800ab8c:	3501      	adds	r5, #1
 800ab8e:	2d08      	cmp	r5, #8
 800ab90:	f10b 0b01 	add.w	fp, fp, #1
 800ab94:	dd06      	ble.n	800aba4 <__hexnan+0xfc>
 800ab96:	4544      	cmp	r4, r8
 800ab98:	d9c3      	bls.n	800ab22 <__hexnan+0x7a>
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	f844 3c04 	str.w	r3, [r4, #-4]
 800aba0:	2501      	movs	r5, #1
 800aba2:	3c04      	subs	r4, #4
 800aba4:	6822      	ldr	r2, [r4, #0]
 800aba6:	f000 000f 	and.w	r0, r0, #15
 800abaa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800abae:	6022      	str	r2, [r4, #0]
 800abb0:	e7b7      	b.n	800ab22 <__hexnan+0x7a>
 800abb2:	2508      	movs	r5, #8
 800abb4:	e7b5      	b.n	800ab22 <__hexnan+0x7a>
 800abb6:	9b01      	ldr	r3, [sp, #4]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d0df      	beq.n	800ab7c <__hexnan+0xd4>
 800abbc:	f04f 32ff 	mov.w	r2, #4294967295
 800abc0:	f1c3 0320 	rsb	r3, r3, #32
 800abc4:	fa22 f303 	lsr.w	r3, r2, r3
 800abc8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800abcc:	401a      	ands	r2, r3
 800abce:	f846 2c04 	str.w	r2, [r6, #-4]
 800abd2:	e7d3      	b.n	800ab7c <__hexnan+0xd4>
 800abd4:	3f04      	subs	r7, #4
 800abd6:	e7d1      	b.n	800ab7c <__hexnan+0xd4>
 800abd8:	2004      	movs	r0, #4
 800abda:	b007      	add	sp, #28
 800abdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800abe0 <_localeconv_r>:
 800abe0:	4800      	ldr	r0, [pc, #0]	; (800abe4 <_localeconv_r+0x4>)
 800abe2:	4770      	bx	lr
 800abe4:	20000178 	.word	0x20000178

0800abe8 <_lseek_r>:
 800abe8:	b538      	push	{r3, r4, r5, lr}
 800abea:	4d07      	ldr	r5, [pc, #28]	; (800ac08 <_lseek_r+0x20>)
 800abec:	4604      	mov	r4, r0
 800abee:	4608      	mov	r0, r1
 800abf0:	4611      	mov	r1, r2
 800abf2:	2200      	movs	r2, #0
 800abf4:	602a      	str	r2, [r5, #0]
 800abf6:	461a      	mov	r2, r3
 800abf8:	f7f7 fb54 	bl	80022a4 <_lseek>
 800abfc:	1c43      	adds	r3, r0, #1
 800abfe:	d102      	bne.n	800ac06 <_lseek_r+0x1e>
 800ac00:	682b      	ldr	r3, [r5, #0]
 800ac02:	b103      	cbz	r3, 800ac06 <_lseek_r+0x1e>
 800ac04:	6023      	str	r3, [r4, #0]
 800ac06:	bd38      	pop	{r3, r4, r5, pc}
 800ac08:	20005028 	.word	0x20005028

0800ac0c <malloc>:
 800ac0c:	4b02      	ldr	r3, [pc, #8]	; (800ac18 <malloc+0xc>)
 800ac0e:	4601      	mov	r1, r0
 800ac10:	6818      	ldr	r0, [r3, #0]
 800ac12:	f000 bd2f 	b.w	800b674 <_malloc_r>
 800ac16:	bf00      	nop
 800ac18:	20000020 	.word	0x20000020

0800ac1c <__ascii_mbtowc>:
 800ac1c:	b082      	sub	sp, #8
 800ac1e:	b901      	cbnz	r1, 800ac22 <__ascii_mbtowc+0x6>
 800ac20:	a901      	add	r1, sp, #4
 800ac22:	b142      	cbz	r2, 800ac36 <__ascii_mbtowc+0x1a>
 800ac24:	b14b      	cbz	r3, 800ac3a <__ascii_mbtowc+0x1e>
 800ac26:	7813      	ldrb	r3, [r2, #0]
 800ac28:	600b      	str	r3, [r1, #0]
 800ac2a:	7812      	ldrb	r2, [r2, #0]
 800ac2c:	1e10      	subs	r0, r2, #0
 800ac2e:	bf18      	it	ne
 800ac30:	2001      	movne	r0, #1
 800ac32:	b002      	add	sp, #8
 800ac34:	4770      	bx	lr
 800ac36:	4610      	mov	r0, r2
 800ac38:	e7fb      	b.n	800ac32 <__ascii_mbtowc+0x16>
 800ac3a:	f06f 0001 	mvn.w	r0, #1
 800ac3e:	e7f8      	b.n	800ac32 <__ascii_mbtowc+0x16>

0800ac40 <_Balloc>:
 800ac40:	b570      	push	{r4, r5, r6, lr}
 800ac42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ac44:	4604      	mov	r4, r0
 800ac46:	460d      	mov	r5, r1
 800ac48:	b976      	cbnz	r6, 800ac68 <_Balloc+0x28>
 800ac4a:	2010      	movs	r0, #16
 800ac4c:	f7ff ffde 	bl	800ac0c <malloc>
 800ac50:	4602      	mov	r2, r0
 800ac52:	6260      	str	r0, [r4, #36]	; 0x24
 800ac54:	b920      	cbnz	r0, 800ac60 <_Balloc+0x20>
 800ac56:	4b18      	ldr	r3, [pc, #96]	; (800acb8 <_Balloc+0x78>)
 800ac58:	4818      	ldr	r0, [pc, #96]	; (800acbc <_Balloc+0x7c>)
 800ac5a:	2166      	movs	r1, #102	; 0x66
 800ac5c:	f001 fb08 	bl	800c270 <__assert_func>
 800ac60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac64:	6006      	str	r6, [r0, #0]
 800ac66:	60c6      	str	r6, [r0, #12]
 800ac68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ac6a:	68f3      	ldr	r3, [r6, #12]
 800ac6c:	b183      	cbz	r3, 800ac90 <_Balloc+0x50>
 800ac6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac70:	68db      	ldr	r3, [r3, #12]
 800ac72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac76:	b9b8      	cbnz	r0, 800aca8 <_Balloc+0x68>
 800ac78:	2101      	movs	r1, #1
 800ac7a:	fa01 f605 	lsl.w	r6, r1, r5
 800ac7e:	1d72      	adds	r2, r6, #5
 800ac80:	0092      	lsls	r2, r2, #2
 800ac82:	4620      	mov	r0, r4
 800ac84:	f000 fc97 	bl	800b5b6 <_calloc_r>
 800ac88:	b160      	cbz	r0, 800aca4 <_Balloc+0x64>
 800ac8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ac8e:	e00e      	b.n	800acae <_Balloc+0x6e>
 800ac90:	2221      	movs	r2, #33	; 0x21
 800ac92:	2104      	movs	r1, #4
 800ac94:	4620      	mov	r0, r4
 800ac96:	f000 fc8e 	bl	800b5b6 <_calloc_r>
 800ac9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac9c:	60f0      	str	r0, [r6, #12]
 800ac9e:	68db      	ldr	r3, [r3, #12]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d1e4      	bne.n	800ac6e <_Balloc+0x2e>
 800aca4:	2000      	movs	r0, #0
 800aca6:	bd70      	pop	{r4, r5, r6, pc}
 800aca8:	6802      	ldr	r2, [r0, #0]
 800acaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800acae:	2300      	movs	r3, #0
 800acb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800acb4:	e7f7      	b.n	800aca6 <_Balloc+0x66>
 800acb6:	bf00      	nop
 800acb8:	0800e53e 	.word	0x0800e53e
 800acbc:	0800e644 	.word	0x0800e644

0800acc0 <_Bfree>:
 800acc0:	b570      	push	{r4, r5, r6, lr}
 800acc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800acc4:	4605      	mov	r5, r0
 800acc6:	460c      	mov	r4, r1
 800acc8:	b976      	cbnz	r6, 800ace8 <_Bfree+0x28>
 800acca:	2010      	movs	r0, #16
 800accc:	f7ff ff9e 	bl	800ac0c <malloc>
 800acd0:	4602      	mov	r2, r0
 800acd2:	6268      	str	r0, [r5, #36]	; 0x24
 800acd4:	b920      	cbnz	r0, 800ace0 <_Bfree+0x20>
 800acd6:	4b09      	ldr	r3, [pc, #36]	; (800acfc <_Bfree+0x3c>)
 800acd8:	4809      	ldr	r0, [pc, #36]	; (800ad00 <_Bfree+0x40>)
 800acda:	218a      	movs	r1, #138	; 0x8a
 800acdc:	f001 fac8 	bl	800c270 <__assert_func>
 800ace0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ace4:	6006      	str	r6, [r0, #0]
 800ace6:	60c6      	str	r6, [r0, #12]
 800ace8:	b13c      	cbz	r4, 800acfa <_Bfree+0x3a>
 800acea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800acec:	6862      	ldr	r2, [r4, #4]
 800acee:	68db      	ldr	r3, [r3, #12]
 800acf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800acf4:	6021      	str	r1, [r4, #0]
 800acf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800acfa:	bd70      	pop	{r4, r5, r6, pc}
 800acfc:	0800e53e 	.word	0x0800e53e
 800ad00:	0800e644 	.word	0x0800e644

0800ad04 <__multadd>:
 800ad04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad08:	690e      	ldr	r6, [r1, #16]
 800ad0a:	4607      	mov	r7, r0
 800ad0c:	4698      	mov	r8, r3
 800ad0e:	460c      	mov	r4, r1
 800ad10:	f101 0014 	add.w	r0, r1, #20
 800ad14:	2300      	movs	r3, #0
 800ad16:	6805      	ldr	r5, [r0, #0]
 800ad18:	b2a9      	uxth	r1, r5
 800ad1a:	fb02 8101 	mla	r1, r2, r1, r8
 800ad1e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ad22:	0c2d      	lsrs	r5, r5, #16
 800ad24:	fb02 c505 	mla	r5, r2, r5, ip
 800ad28:	b289      	uxth	r1, r1
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ad30:	429e      	cmp	r6, r3
 800ad32:	f840 1b04 	str.w	r1, [r0], #4
 800ad36:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ad3a:	dcec      	bgt.n	800ad16 <__multadd+0x12>
 800ad3c:	f1b8 0f00 	cmp.w	r8, #0
 800ad40:	d022      	beq.n	800ad88 <__multadd+0x84>
 800ad42:	68a3      	ldr	r3, [r4, #8]
 800ad44:	42b3      	cmp	r3, r6
 800ad46:	dc19      	bgt.n	800ad7c <__multadd+0x78>
 800ad48:	6861      	ldr	r1, [r4, #4]
 800ad4a:	4638      	mov	r0, r7
 800ad4c:	3101      	adds	r1, #1
 800ad4e:	f7ff ff77 	bl	800ac40 <_Balloc>
 800ad52:	4605      	mov	r5, r0
 800ad54:	b928      	cbnz	r0, 800ad62 <__multadd+0x5e>
 800ad56:	4602      	mov	r2, r0
 800ad58:	4b0d      	ldr	r3, [pc, #52]	; (800ad90 <__multadd+0x8c>)
 800ad5a:	480e      	ldr	r0, [pc, #56]	; (800ad94 <__multadd+0x90>)
 800ad5c:	21b5      	movs	r1, #181	; 0xb5
 800ad5e:	f001 fa87 	bl	800c270 <__assert_func>
 800ad62:	6922      	ldr	r2, [r4, #16]
 800ad64:	3202      	adds	r2, #2
 800ad66:	f104 010c 	add.w	r1, r4, #12
 800ad6a:	0092      	lsls	r2, r2, #2
 800ad6c:	300c      	adds	r0, #12
 800ad6e:	f7fc ff3f 	bl	8007bf0 <memcpy>
 800ad72:	4621      	mov	r1, r4
 800ad74:	4638      	mov	r0, r7
 800ad76:	f7ff ffa3 	bl	800acc0 <_Bfree>
 800ad7a:	462c      	mov	r4, r5
 800ad7c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ad80:	3601      	adds	r6, #1
 800ad82:	f8c3 8014 	str.w	r8, [r3, #20]
 800ad86:	6126      	str	r6, [r4, #16]
 800ad88:	4620      	mov	r0, r4
 800ad8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad8e:	bf00      	nop
 800ad90:	0800e5b4 	.word	0x0800e5b4
 800ad94:	0800e644 	.word	0x0800e644

0800ad98 <__s2b>:
 800ad98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad9c:	460c      	mov	r4, r1
 800ad9e:	4615      	mov	r5, r2
 800ada0:	461f      	mov	r7, r3
 800ada2:	2209      	movs	r2, #9
 800ada4:	3308      	adds	r3, #8
 800ada6:	4606      	mov	r6, r0
 800ada8:	fb93 f3f2 	sdiv	r3, r3, r2
 800adac:	2100      	movs	r1, #0
 800adae:	2201      	movs	r2, #1
 800adb0:	429a      	cmp	r2, r3
 800adb2:	db09      	blt.n	800adc8 <__s2b+0x30>
 800adb4:	4630      	mov	r0, r6
 800adb6:	f7ff ff43 	bl	800ac40 <_Balloc>
 800adba:	b940      	cbnz	r0, 800adce <__s2b+0x36>
 800adbc:	4602      	mov	r2, r0
 800adbe:	4b19      	ldr	r3, [pc, #100]	; (800ae24 <__s2b+0x8c>)
 800adc0:	4819      	ldr	r0, [pc, #100]	; (800ae28 <__s2b+0x90>)
 800adc2:	21ce      	movs	r1, #206	; 0xce
 800adc4:	f001 fa54 	bl	800c270 <__assert_func>
 800adc8:	0052      	lsls	r2, r2, #1
 800adca:	3101      	adds	r1, #1
 800adcc:	e7f0      	b.n	800adb0 <__s2b+0x18>
 800adce:	9b08      	ldr	r3, [sp, #32]
 800add0:	6143      	str	r3, [r0, #20]
 800add2:	2d09      	cmp	r5, #9
 800add4:	f04f 0301 	mov.w	r3, #1
 800add8:	6103      	str	r3, [r0, #16]
 800adda:	dd16      	ble.n	800ae0a <__s2b+0x72>
 800addc:	f104 0909 	add.w	r9, r4, #9
 800ade0:	46c8      	mov	r8, r9
 800ade2:	442c      	add	r4, r5
 800ade4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ade8:	4601      	mov	r1, r0
 800adea:	3b30      	subs	r3, #48	; 0x30
 800adec:	220a      	movs	r2, #10
 800adee:	4630      	mov	r0, r6
 800adf0:	f7ff ff88 	bl	800ad04 <__multadd>
 800adf4:	45a0      	cmp	r8, r4
 800adf6:	d1f5      	bne.n	800ade4 <__s2b+0x4c>
 800adf8:	f1a5 0408 	sub.w	r4, r5, #8
 800adfc:	444c      	add	r4, r9
 800adfe:	1b2d      	subs	r5, r5, r4
 800ae00:	1963      	adds	r3, r4, r5
 800ae02:	42bb      	cmp	r3, r7
 800ae04:	db04      	blt.n	800ae10 <__s2b+0x78>
 800ae06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae0a:	340a      	adds	r4, #10
 800ae0c:	2509      	movs	r5, #9
 800ae0e:	e7f6      	b.n	800adfe <__s2b+0x66>
 800ae10:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ae14:	4601      	mov	r1, r0
 800ae16:	3b30      	subs	r3, #48	; 0x30
 800ae18:	220a      	movs	r2, #10
 800ae1a:	4630      	mov	r0, r6
 800ae1c:	f7ff ff72 	bl	800ad04 <__multadd>
 800ae20:	e7ee      	b.n	800ae00 <__s2b+0x68>
 800ae22:	bf00      	nop
 800ae24:	0800e5b4 	.word	0x0800e5b4
 800ae28:	0800e644 	.word	0x0800e644

0800ae2c <__hi0bits>:
 800ae2c:	0c03      	lsrs	r3, r0, #16
 800ae2e:	041b      	lsls	r3, r3, #16
 800ae30:	b9d3      	cbnz	r3, 800ae68 <__hi0bits+0x3c>
 800ae32:	0400      	lsls	r0, r0, #16
 800ae34:	2310      	movs	r3, #16
 800ae36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ae3a:	bf04      	itt	eq
 800ae3c:	0200      	lsleq	r0, r0, #8
 800ae3e:	3308      	addeq	r3, #8
 800ae40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ae44:	bf04      	itt	eq
 800ae46:	0100      	lsleq	r0, r0, #4
 800ae48:	3304      	addeq	r3, #4
 800ae4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ae4e:	bf04      	itt	eq
 800ae50:	0080      	lsleq	r0, r0, #2
 800ae52:	3302      	addeq	r3, #2
 800ae54:	2800      	cmp	r0, #0
 800ae56:	db05      	blt.n	800ae64 <__hi0bits+0x38>
 800ae58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ae5c:	f103 0301 	add.w	r3, r3, #1
 800ae60:	bf08      	it	eq
 800ae62:	2320      	moveq	r3, #32
 800ae64:	4618      	mov	r0, r3
 800ae66:	4770      	bx	lr
 800ae68:	2300      	movs	r3, #0
 800ae6a:	e7e4      	b.n	800ae36 <__hi0bits+0xa>

0800ae6c <__lo0bits>:
 800ae6c:	6803      	ldr	r3, [r0, #0]
 800ae6e:	f013 0207 	ands.w	r2, r3, #7
 800ae72:	4601      	mov	r1, r0
 800ae74:	d00b      	beq.n	800ae8e <__lo0bits+0x22>
 800ae76:	07da      	lsls	r2, r3, #31
 800ae78:	d424      	bmi.n	800aec4 <__lo0bits+0x58>
 800ae7a:	0798      	lsls	r0, r3, #30
 800ae7c:	bf49      	itett	mi
 800ae7e:	085b      	lsrmi	r3, r3, #1
 800ae80:	089b      	lsrpl	r3, r3, #2
 800ae82:	2001      	movmi	r0, #1
 800ae84:	600b      	strmi	r3, [r1, #0]
 800ae86:	bf5c      	itt	pl
 800ae88:	600b      	strpl	r3, [r1, #0]
 800ae8a:	2002      	movpl	r0, #2
 800ae8c:	4770      	bx	lr
 800ae8e:	b298      	uxth	r0, r3
 800ae90:	b9b0      	cbnz	r0, 800aec0 <__lo0bits+0x54>
 800ae92:	0c1b      	lsrs	r3, r3, #16
 800ae94:	2010      	movs	r0, #16
 800ae96:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ae9a:	bf04      	itt	eq
 800ae9c:	0a1b      	lsreq	r3, r3, #8
 800ae9e:	3008      	addeq	r0, #8
 800aea0:	071a      	lsls	r2, r3, #28
 800aea2:	bf04      	itt	eq
 800aea4:	091b      	lsreq	r3, r3, #4
 800aea6:	3004      	addeq	r0, #4
 800aea8:	079a      	lsls	r2, r3, #30
 800aeaa:	bf04      	itt	eq
 800aeac:	089b      	lsreq	r3, r3, #2
 800aeae:	3002      	addeq	r0, #2
 800aeb0:	07da      	lsls	r2, r3, #31
 800aeb2:	d403      	bmi.n	800aebc <__lo0bits+0x50>
 800aeb4:	085b      	lsrs	r3, r3, #1
 800aeb6:	f100 0001 	add.w	r0, r0, #1
 800aeba:	d005      	beq.n	800aec8 <__lo0bits+0x5c>
 800aebc:	600b      	str	r3, [r1, #0]
 800aebe:	4770      	bx	lr
 800aec0:	4610      	mov	r0, r2
 800aec2:	e7e8      	b.n	800ae96 <__lo0bits+0x2a>
 800aec4:	2000      	movs	r0, #0
 800aec6:	4770      	bx	lr
 800aec8:	2020      	movs	r0, #32
 800aeca:	4770      	bx	lr

0800aecc <__i2b>:
 800aecc:	b510      	push	{r4, lr}
 800aece:	460c      	mov	r4, r1
 800aed0:	2101      	movs	r1, #1
 800aed2:	f7ff feb5 	bl	800ac40 <_Balloc>
 800aed6:	4602      	mov	r2, r0
 800aed8:	b928      	cbnz	r0, 800aee6 <__i2b+0x1a>
 800aeda:	4b05      	ldr	r3, [pc, #20]	; (800aef0 <__i2b+0x24>)
 800aedc:	4805      	ldr	r0, [pc, #20]	; (800aef4 <__i2b+0x28>)
 800aede:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aee2:	f001 f9c5 	bl	800c270 <__assert_func>
 800aee6:	2301      	movs	r3, #1
 800aee8:	6144      	str	r4, [r0, #20]
 800aeea:	6103      	str	r3, [r0, #16]
 800aeec:	bd10      	pop	{r4, pc}
 800aeee:	bf00      	nop
 800aef0:	0800e5b4 	.word	0x0800e5b4
 800aef4:	0800e644 	.word	0x0800e644

0800aef8 <__multiply>:
 800aef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aefc:	4614      	mov	r4, r2
 800aefe:	690a      	ldr	r2, [r1, #16]
 800af00:	6923      	ldr	r3, [r4, #16]
 800af02:	429a      	cmp	r2, r3
 800af04:	bfb8      	it	lt
 800af06:	460b      	movlt	r3, r1
 800af08:	460d      	mov	r5, r1
 800af0a:	bfbc      	itt	lt
 800af0c:	4625      	movlt	r5, r4
 800af0e:	461c      	movlt	r4, r3
 800af10:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800af14:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800af18:	68ab      	ldr	r3, [r5, #8]
 800af1a:	6869      	ldr	r1, [r5, #4]
 800af1c:	eb0a 0709 	add.w	r7, sl, r9
 800af20:	42bb      	cmp	r3, r7
 800af22:	b085      	sub	sp, #20
 800af24:	bfb8      	it	lt
 800af26:	3101      	addlt	r1, #1
 800af28:	f7ff fe8a 	bl	800ac40 <_Balloc>
 800af2c:	b930      	cbnz	r0, 800af3c <__multiply+0x44>
 800af2e:	4602      	mov	r2, r0
 800af30:	4b42      	ldr	r3, [pc, #264]	; (800b03c <__multiply+0x144>)
 800af32:	4843      	ldr	r0, [pc, #268]	; (800b040 <__multiply+0x148>)
 800af34:	f240 115d 	movw	r1, #349	; 0x15d
 800af38:	f001 f99a 	bl	800c270 <__assert_func>
 800af3c:	f100 0614 	add.w	r6, r0, #20
 800af40:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800af44:	4633      	mov	r3, r6
 800af46:	2200      	movs	r2, #0
 800af48:	4543      	cmp	r3, r8
 800af4a:	d31e      	bcc.n	800af8a <__multiply+0x92>
 800af4c:	f105 0c14 	add.w	ip, r5, #20
 800af50:	f104 0314 	add.w	r3, r4, #20
 800af54:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800af58:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800af5c:	9202      	str	r2, [sp, #8]
 800af5e:	ebac 0205 	sub.w	r2, ip, r5
 800af62:	3a15      	subs	r2, #21
 800af64:	f022 0203 	bic.w	r2, r2, #3
 800af68:	3204      	adds	r2, #4
 800af6a:	f105 0115 	add.w	r1, r5, #21
 800af6e:	458c      	cmp	ip, r1
 800af70:	bf38      	it	cc
 800af72:	2204      	movcc	r2, #4
 800af74:	9201      	str	r2, [sp, #4]
 800af76:	9a02      	ldr	r2, [sp, #8]
 800af78:	9303      	str	r3, [sp, #12]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d808      	bhi.n	800af90 <__multiply+0x98>
 800af7e:	2f00      	cmp	r7, #0
 800af80:	dc55      	bgt.n	800b02e <__multiply+0x136>
 800af82:	6107      	str	r7, [r0, #16]
 800af84:	b005      	add	sp, #20
 800af86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af8a:	f843 2b04 	str.w	r2, [r3], #4
 800af8e:	e7db      	b.n	800af48 <__multiply+0x50>
 800af90:	f8b3 a000 	ldrh.w	sl, [r3]
 800af94:	f1ba 0f00 	cmp.w	sl, #0
 800af98:	d020      	beq.n	800afdc <__multiply+0xe4>
 800af9a:	f105 0e14 	add.w	lr, r5, #20
 800af9e:	46b1      	mov	r9, r6
 800afa0:	2200      	movs	r2, #0
 800afa2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800afa6:	f8d9 b000 	ldr.w	fp, [r9]
 800afaa:	b2a1      	uxth	r1, r4
 800afac:	fa1f fb8b 	uxth.w	fp, fp
 800afb0:	fb0a b101 	mla	r1, sl, r1, fp
 800afb4:	4411      	add	r1, r2
 800afb6:	f8d9 2000 	ldr.w	r2, [r9]
 800afba:	0c24      	lsrs	r4, r4, #16
 800afbc:	0c12      	lsrs	r2, r2, #16
 800afbe:	fb0a 2404 	mla	r4, sl, r4, r2
 800afc2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800afc6:	b289      	uxth	r1, r1
 800afc8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800afcc:	45f4      	cmp	ip, lr
 800afce:	f849 1b04 	str.w	r1, [r9], #4
 800afd2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800afd6:	d8e4      	bhi.n	800afa2 <__multiply+0xaa>
 800afd8:	9901      	ldr	r1, [sp, #4]
 800afda:	5072      	str	r2, [r6, r1]
 800afdc:	9a03      	ldr	r2, [sp, #12]
 800afde:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800afe2:	3304      	adds	r3, #4
 800afe4:	f1b9 0f00 	cmp.w	r9, #0
 800afe8:	d01f      	beq.n	800b02a <__multiply+0x132>
 800afea:	6834      	ldr	r4, [r6, #0]
 800afec:	f105 0114 	add.w	r1, r5, #20
 800aff0:	46b6      	mov	lr, r6
 800aff2:	f04f 0a00 	mov.w	sl, #0
 800aff6:	880a      	ldrh	r2, [r1, #0]
 800aff8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800affc:	fb09 b202 	mla	r2, r9, r2, fp
 800b000:	4492      	add	sl, r2
 800b002:	b2a4      	uxth	r4, r4
 800b004:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b008:	f84e 4b04 	str.w	r4, [lr], #4
 800b00c:	f851 4b04 	ldr.w	r4, [r1], #4
 800b010:	f8be 2000 	ldrh.w	r2, [lr]
 800b014:	0c24      	lsrs	r4, r4, #16
 800b016:	fb09 2404 	mla	r4, r9, r4, r2
 800b01a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b01e:	458c      	cmp	ip, r1
 800b020:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b024:	d8e7      	bhi.n	800aff6 <__multiply+0xfe>
 800b026:	9a01      	ldr	r2, [sp, #4]
 800b028:	50b4      	str	r4, [r6, r2]
 800b02a:	3604      	adds	r6, #4
 800b02c:	e7a3      	b.n	800af76 <__multiply+0x7e>
 800b02e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b032:	2b00      	cmp	r3, #0
 800b034:	d1a5      	bne.n	800af82 <__multiply+0x8a>
 800b036:	3f01      	subs	r7, #1
 800b038:	e7a1      	b.n	800af7e <__multiply+0x86>
 800b03a:	bf00      	nop
 800b03c:	0800e5b4 	.word	0x0800e5b4
 800b040:	0800e644 	.word	0x0800e644

0800b044 <__pow5mult>:
 800b044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b048:	4615      	mov	r5, r2
 800b04a:	f012 0203 	ands.w	r2, r2, #3
 800b04e:	4606      	mov	r6, r0
 800b050:	460f      	mov	r7, r1
 800b052:	d007      	beq.n	800b064 <__pow5mult+0x20>
 800b054:	4c25      	ldr	r4, [pc, #148]	; (800b0ec <__pow5mult+0xa8>)
 800b056:	3a01      	subs	r2, #1
 800b058:	2300      	movs	r3, #0
 800b05a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b05e:	f7ff fe51 	bl	800ad04 <__multadd>
 800b062:	4607      	mov	r7, r0
 800b064:	10ad      	asrs	r5, r5, #2
 800b066:	d03d      	beq.n	800b0e4 <__pow5mult+0xa0>
 800b068:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b06a:	b97c      	cbnz	r4, 800b08c <__pow5mult+0x48>
 800b06c:	2010      	movs	r0, #16
 800b06e:	f7ff fdcd 	bl	800ac0c <malloc>
 800b072:	4602      	mov	r2, r0
 800b074:	6270      	str	r0, [r6, #36]	; 0x24
 800b076:	b928      	cbnz	r0, 800b084 <__pow5mult+0x40>
 800b078:	4b1d      	ldr	r3, [pc, #116]	; (800b0f0 <__pow5mult+0xac>)
 800b07a:	481e      	ldr	r0, [pc, #120]	; (800b0f4 <__pow5mult+0xb0>)
 800b07c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b080:	f001 f8f6 	bl	800c270 <__assert_func>
 800b084:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b088:	6004      	str	r4, [r0, #0]
 800b08a:	60c4      	str	r4, [r0, #12]
 800b08c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b090:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b094:	b94c      	cbnz	r4, 800b0aa <__pow5mult+0x66>
 800b096:	f240 2171 	movw	r1, #625	; 0x271
 800b09a:	4630      	mov	r0, r6
 800b09c:	f7ff ff16 	bl	800aecc <__i2b>
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b0a6:	4604      	mov	r4, r0
 800b0a8:	6003      	str	r3, [r0, #0]
 800b0aa:	f04f 0900 	mov.w	r9, #0
 800b0ae:	07eb      	lsls	r3, r5, #31
 800b0b0:	d50a      	bpl.n	800b0c8 <__pow5mult+0x84>
 800b0b2:	4639      	mov	r1, r7
 800b0b4:	4622      	mov	r2, r4
 800b0b6:	4630      	mov	r0, r6
 800b0b8:	f7ff ff1e 	bl	800aef8 <__multiply>
 800b0bc:	4639      	mov	r1, r7
 800b0be:	4680      	mov	r8, r0
 800b0c0:	4630      	mov	r0, r6
 800b0c2:	f7ff fdfd 	bl	800acc0 <_Bfree>
 800b0c6:	4647      	mov	r7, r8
 800b0c8:	106d      	asrs	r5, r5, #1
 800b0ca:	d00b      	beq.n	800b0e4 <__pow5mult+0xa0>
 800b0cc:	6820      	ldr	r0, [r4, #0]
 800b0ce:	b938      	cbnz	r0, 800b0e0 <__pow5mult+0x9c>
 800b0d0:	4622      	mov	r2, r4
 800b0d2:	4621      	mov	r1, r4
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	f7ff ff0f 	bl	800aef8 <__multiply>
 800b0da:	6020      	str	r0, [r4, #0]
 800b0dc:	f8c0 9000 	str.w	r9, [r0]
 800b0e0:	4604      	mov	r4, r0
 800b0e2:	e7e4      	b.n	800b0ae <__pow5mult+0x6a>
 800b0e4:	4638      	mov	r0, r7
 800b0e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0ea:	bf00      	nop
 800b0ec:	0800e798 	.word	0x0800e798
 800b0f0:	0800e53e 	.word	0x0800e53e
 800b0f4:	0800e644 	.word	0x0800e644

0800b0f8 <__lshift>:
 800b0f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0fc:	460c      	mov	r4, r1
 800b0fe:	6849      	ldr	r1, [r1, #4]
 800b100:	6923      	ldr	r3, [r4, #16]
 800b102:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b106:	68a3      	ldr	r3, [r4, #8]
 800b108:	4607      	mov	r7, r0
 800b10a:	4691      	mov	r9, r2
 800b10c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b110:	f108 0601 	add.w	r6, r8, #1
 800b114:	42b3      	cmp	r3, r6
 800b116:	db0b      	blt.n	800b130 <__lshift+0x38>
 800b118:	4638      	mov	r0, r7
 800b11a:	f7ff fd91 	bl	800ac40 <_Balloc>
 800b11e:	4605      	mov	r5, r0
 800b120:	b948      	cbnz	r0, 800b136 <__lshift+0x3e>
 800b122:	4602      	mov	r2, r0
 800b124:	4b28      	ldr	r3, [pc, #160]	; (800b1c8 <__lshift+0xd0>)
 800b126:	4829      	ldr	r0, [pc, #164]	; (800b1cc <__lshift+0xd4>)
 800b128:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b12c:	f001 f8a0 	bl	800c270 <__assert_func>
 800b130:	3101      	adds	r1, #1
 800b132:	005b      	lsls	r3, r3, #1
 800b134:	e7ee      	b.n	800b114 <__lshift+0x1c>
 800b136:	2300      	movs	r3, #0
 800b138:	f100 0114 	add.w	r1, r0, #20
 800b13c:	f100 0210 	add.w	r2, r0, #16
 800b140:	4618      	mov	r0, r3
 800b142:	4553      	cmp	r3, sl
 800b144:	db33      	blt.n	800b1ae <__lshift+0xb6>
 800b146:	6920      	ldr	r0, [r4, #16]
 800b148:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b14c:	f104 0314 	add.w	r3, r4, #20
 800b150:	f019 091f 	ands.w	r9, r9, #31
 800b154:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b158:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b15c:	d02b      	beq.n	800b1b6 <__lshift+0xbe>
 800b15e:	f1c9 0e20 	rsb	lr, r9, #32
 800b162:	468a      	mov	sl, r1
 800b164:	2200      	movs	r2, #0
 800b166:	6818      	ldr	r0, [r3, #0]
 800b168:	fa00 f009 	lsl.w	r0, r0, r9
 800b16c:	4302      	orrs	r2, r0
 800b16e:	f84a 2b04 	str.w	r2, [sl], #4
 800b172:	f853 2b04 	ldr.w	r2, [r3], #4
 800b176:	459c      	cmp	ip, r3
 800b178:	fa22 f20e 	lsr.w	r2, r2, lr
 800b17c:	d8f3      	bhi.n	800b166 <__lshift+0x6e>
 800b17e:	ebac 0304 	sub.w	r3, ip, r4
 800b182:	3b15      	subs	r3, #21
 800b184:	f023 0303 	bic.w	r3, r3, #3
 800b188:	3304      	adds	r3, #4
 800b18a:	f104 0015 	add.w	r0, r4, #21
 800b18e:	4584      	cmp	ip, r0
 800b190:	bf38      	it	cc
 800b192:	2304      	movcc	r3, #4
 800b194:	50ca      	str	r2, [r1, r3]
 800b196:	b10a      	cbz	r2, 800b19c <__lshift+0xa4>
 800b198:	f108 0602 	add.w	r6, r8, #2
 800b19c:	3e01      	subs	r6, #1
 800b19e:	4638      	mov	r0, r7
 800b1a0:	612e      	str	r6, [r5, #16]
 800b1a2:	4621      	mov	r1, r4
 800b1a4:	f7ff fd8c 	bl	800acc0 <_Bfree>
 800b1a8:	4628      	mov	r0, r5
 800b1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1ae:	f842 0f04 	str.w	r0, [r2, #4]!
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	e7c5      	b.n	800b142 <__lshift+0x4a>
 800b1b6:	3904      	subs	r1, #4
 800b1b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1bc:	f841 2f04 	str.w	r2, [r1, #4]!
 800b1c0:	459c      	cmp	ip, r3
 800b1c2:	d8f9      	bhi.n	800b1b8 <__lshift+0xc0>
 800b1c4:	e7ea      	b.n	800b19c <__lshift+0xa4>
 800b1c6:	bf00      	nop
 800b1c8:	0800e5b4 	.word	0x0800e5b4
 800b1cc:	0800e644 	.word	0x0800e644

0800b1d0 <__mcmp>:
 800b1d0:	b530      	push	{r4, r5, lr}
 800b1d2:	6902      	ldr	r2, [r0, #16]
 800b1d4:	690c      	ldr	r4, [r1, #16]
 800b1d6:	1b12      	subs	r2, r2, r4
 800b1d8:	d10e      	bne.n	800b1f8 <__mcmp+0x28>
 800b1da:	f100 0314 	add.w	r3, r0, #20
 800b1de:	3114      	adds	r1, #20
 800b1e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b1e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b1e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b1ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b1f0:	42a5      	cmp	r5, r4
 800b1f2:	d003      	beq.n	800b1fc <__mcmp+0x2c>
 800b1f4:	d305      	bcc.n	800b202 <__mcmp+0x32>
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	4610      	mov	r0, r2
 800b1fa:	bd30      	pop	{r4, r5, pc}
 800b1fc:	4283      	cmp	r3, r0
 800b1fe:	d3f3      	bcc.n	800b1e8 <__mcmp+0x18>
 800b200:	e7fa      	b.n	800b1f8 <__mcmp+0x28>
 800b202:	f04f 32ff 	mov.w	r2, #4294967295
 800b206:	e7f7      	b.n	800b1f8 <__mcmp+0x28>

0800b208 <__mdiff>:
 800b208:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b20c:	460c      	mov	r4, r1
 800b20e:	4606      	mov	r6, r0
 800b210:	4611      	mov	r1, r2
 800b212:	4620      	mov	r0, r4
 800b214:	4617      	mov	r7, r2
 800b216:	f7ff ffdb 	bl	800b1d0 <__mcmp>
 800b21a:	1e05      	subs	r5, r0, #0
 800b21c:	d110      	bne.n	800b240 <__mdiff+0x38>
 800b21e:	4629      	mov	r1, r5
 800b220:	4630      	mov	r0, r6
 800b222:	f7ff fd0d 	bl	800ac40 <_Balloc>
 800b226:	b930      	cbnz	r0, 800b236 <__mdiff+0x2e>
 800b228:	4b39      	ldr	r3, [pc, #228]	; (800b310 <__mdiff+0x108>)
 800b22a:	4602      	mov	r2, r0
 800b22c:	f240 2132 	movw	r1, #562	; 0x232
 800b230:	4838      	ldr	r0, [pc, #224]	; (800b314 <__mdiff+0x10c>)
 800b232:	f001 f81d 	bl	800c270 <__assert_func>
 800b236:	2301      	movs	r3, #1
 800b238:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b23c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b240:	bfa4      	itt	ge
 800b242:	463b      	movge	r3, r7
 800b244:	4627      	movge	r7, r4
 800b246:	4630      	mov	r0, r6
 800b248:	6879      	ldr	r1, [r7, #4]
 800b24a:	bfa6      	itte	ge
 800b24c:	461c      	movge	r4, r3
 800b24e:	2500      	movge	r5, #0
 800b250:	2501      	movlt	r5, #1
 800b252:	f7ff fcf5 	bl	800ac40 <_Balloc>
 800b256:	b920      	cbnz	r0, 800b262 <__mdiff+0x5a>
 800b258:	4b2d      	ldr	r3, [pc, #180]	; (800b310 <__mdiff+0x108>)
 800b25a:	4602      	mov	r2, r0
 800b25c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b260:	e7e6      	b.n	800b230 <__mdiff+0x28>
 800b262:	693e      	ldr	r6, [r7, #16]
 800b264:	60c5      	str	r5, [r0, #12]
 800b266:	6925      	ldr	r5, [r4, #16]
 800b268:	f107 0114 	add.w	r1, r7, #20
 800b26c:	f104 0914 	add.w	r9, r4, #20
 800b270:	f100 0e14 	add.w	lr, r0, #20
 800b274:	f107 0210 	add.w	r2, r7, #16
 800b278:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b27c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b280:	46f2      	mov	sl, lr
 800b282:	2700      	movs	r7, #0
 800b284:	f859 3b04 	ldr.w	r3, [r9], #4
 800b288:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b28c:	fa1f f883 	uxth.w	r8, r3
 800b290:	fa17 f78b 	uxtah	r7, r7, fp
 800b294:	0c1b      	lsrs	r3, r3, #16
 800b296:	eba7 0808 	sub.w	r8, r7, r8
 800b29a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b29e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b2a2:	fa1f f888 	uxth.w	r8, r8
 800b2a6:	141f      	asrs	r7, r3, #16
 800b2a8:	454d      	cmp	r5, r9
 800b2aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b2ae:	f84a 3b04 	str.w	r3, [sl], #4
 800b2b2:	d8e7      	bhi.n	800b284 <__mdiff+0x7c>
 800b2b4:	1b2b      	subs	r3, r5, r4
 800b2b6:	3b15      	subs	r3, #21
 800b2b8:	f023 0303 	bic.w	r3, r3, #3
 800b2bc:	3304      	adds	r3, #4
 800b2be:	3415      	adds	r4, #21
 800b2c0:	42a5      	cmp	r5, r4
 800b2c2:	bf38      	it	cc
 800b2c4:	2304      	movcc	r3, #4
 800b2c6:	4419      	add	r1, r3
 800b2c8:	4473      	add	r3, lr
 800b2ca:	469e      	mov	lr, r3
 800b2cc:	460d      	mov	r5, r1
 800b2ce:	4565      	cmp	r5, ip
 800b2d0:	d30e      	bcc.n	800b2f0 <__mdiff+0xe8>
 800b2d2:	f10c 0203 	add.w	r2, ip, #3
 800b2d6:	1a52      	subs	r2, r2, r1
 800b2d8:	f022 0203 	bic.w	r2, r2, #3
 800b2dc:	3903      	subs	r1, #3
 800b2de:	458c      	cmp	ip, r1
 800b2e0:	bf38      	it	cc
 800b2e2:	2200      	movcc	r2, #0
 800b2e4:	441a      	add	r2, r3
 800b2e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b2ea:	b17b      	cbz	r3, 800b30c <__mdiff+0x104>
 800b2ec:	6106      	str	r6, [r0, #16]
 800b2ee:	e7a5      	b.n	800b23c <__mdiff+0x34>
 800b2f0:	f855 8b04 	ldr.w	r8, [r5], #4
 800b2f4:	fa17 f488 	uxtah	r4, r7, r8
 800b2f8:	1422      	asrs	r2, r4, #16
 800b2fa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b2fe:	b2a4      	uxth	r4, r4
 800b300:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b304:	f84e 4b04 	str.w	r4, [lr], #4
 800b308:	1417      	asrs	r7, r2, #16
 800b30a:	e7e0      	b.n	800b2ce <__mdiff+0xc6>
 800b30c:	3e01      	subs	r6, #1
 800b30e:	e7ea      	b.n	800b2e6 <__mdiff+0xde>
 800b310:	0800e5b4 	.word	0x0800e5b4
 800b314:	0800e644 	.word	0x0800e644

0800b318 <__ulp>:
 800b318:	b082      	sub	sp, #8
 800b31a:	ed8d 0b00 	vstr	d0, [sp]
 800b31e:	9b01      	ldr	r3, [sp, #4]
 800b320:	4912      	ldr	r1, [pc, #72]	; (800b36c <__ulp+0x54>)
 800b322:	4019      	ands	r1, r3
 800b324:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b328:	2900      	cmp	r1, #0
 800b32a:	dd05      	ble.n	800b338 <__ulp+0x20>
 800b32c:	2200      	movs	r2, #0
 800b32e:	460b      	mov	r3, r1
 800b330:	ec43 2b10 	vmov	d0, r2, r3
 800b334:	b002      	add	sp, #8
 800b336:	4770      	bx	lr
 800b338:	4249      	negs	r1, r1
 800b33a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b33e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b342:	f04f 0200 	mov.w	r2, #0
 800b346:	f04f 0300 	mov.w	r3, #0
 800b34a:	da04      	bge.n	800b356 <__ulp+0x3e>
 800b34c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b350:	fa41 f300 	asr.w	r3, r1, r0
 800b354:	e7ec      	b.n	800b330 <__ulp+0x18>
 800b356:	f1a0 0114 	sub.w	r1, r0, #20
 800b35a:	291e      	cmp	r1, #30
 800b35c:	bfda      	itte	le
 800b35e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b362:	fa20 f101 	lsrle.w	r1, r0, r1
 800b366:	2101      	movgt	r1, #1
 800b368:	460a      	mov	r2, r1
 800b36a:	e7e1      	b.n	800b330 <__ulp+0x18>
 800b36c:	7ff00000 	.word	0x7ff00000

0800b370 <__b2d>:
 800b370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b372:	6905      	ldr	r5, [r0, #16]
 800b374:	f100 0714 	add.w	r7, r0, #20
 800b378:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b37c:	1f2e      	subs	r6, r5, #4
 800b37e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b382:	4620      	mov	r0, r4
 800b384:	f7ff fd52 	bl	800ae2c <__hi0bits>
 800b388:	f1c0 0320 	rsb	r3, r0, #32
 800b38c:	280a      	cmp	r0, #10
 800b38e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b40c <__b2d+0x9c>
 800b392:	600b      	str	r3, [r1, #0]
 800b394:	dc14      	bgt.n	800b3c0 <__b2d+0x50>
 800b396:	f1c0 0e0b 	rsb	lr, r0, #11
 800b39a:	fa24 f10e 	lsr.w	r1, r4, lr
 800b39e:	42b7      	cmp	r7, r6
 800b3a0:	ea41 030c 	orr.w	r3, r1, ip
 800b3a4:	bf34      	ite	cc
 800b3a6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b3aa:	2100      	movcs	r1, #0
 800b3ac:	3015      	adds	r0, #21
 800b3ae:	fa04 f000 	lsl.w	r0, r4, r0
 800b3b2:	fa21 f10e 	lsr.w	r1, r1, lr
 800b3b6:	ea40 0201 	orr.w	r2, r0, r1
 800b3ba:	ec43 2b10 	vmov	d0, r2, r3
 800b3be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3c0:	42b7      	cmp	r7, r6
 800b3c2:	bf3a      	itte	cc
 800b3c4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b3c8:	f1a5 0608 	subcc.w	r6, r5, #8
 800b3cc:	2100      	movcs	r1, #0
 800b3ce:	380b      	subs	r0, #11
 800b3d0:	d017      	beq.n	800b402 <__b2d+0x92>
 800b3d2:	f1c0 0c20 	rsb	ip, r0, #32
 800b3d6:	fa04 f500 	lsl.w	r5, r4, r0
 800b3da:	42be      	cmp	r6, r7
 800b3dc:	fa21 f40c 	lsr.w	r4, r1, ip
 800b3e0:	ea45 0504 	orr.w	r5, r5, r4
 800b3e4:	bf8c      	ite	hi
 800b3e6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b3ea:	2400      	movls	r4, #0
 800b3ec:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b3f0:	fa01 f000 	lsl.w	r0, r1, r0
 800b3f4:	fa24 f40c 	lsr.w	r4, r4, ip
 800b3f8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b3fc:	ea40 0204 	orr.w	r2, r0, r4
 800b400:	e7db      	b.n	800b3ba <__b2d+0x4a>
 800b402:	ea44 030c 	orr.w	r3, r4, ip
 800b406:	460a      	mov	r2, r1
 800b408:	e7d7      	b.n	800b3ba <__b2d+0x4a>
 800b40a:	bf00      	nop
 800b40c:	3ff00000 	.word	0x3ff00000

0800b410 <__d2b>:
 800b410:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b414:	4689      	mov	r9, r1
 800b416:	2101      	movs	r1, #1
 800b418:	ec57 6b10 	vmov	r6, r7, d0
 800b41c:	4690      	mov	r8, r2
 800b41e:	f7ff fc0f 	bl	800ac40 <_Balloc>
 800b422:	4604      	mov	r4, r0
 800b424:	b930      	cbnz	r0, 800b434 <__d2b+0x24>
 800b426:	4602      	mov	r2, r0
 800b428:	4b25      	ldr	r3, [pc, #148]	; (800b4c0 <__d2b+0xb0>)
 800b42a:	4826      	ldr	r0, [pc, #152]	; (800b4c4 <__d2b+0xb4>)
 800b42c:	f240 310a 	movw	r1, #778	; 0x30a
 800b430:	f000 ff1e 	bl	800c270 <__assert_func>
 800b434:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b438:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b43c:	bb35      	cbnz	r5, 800b48c <__d2b+0x7c>
 800b43e:	2e00      	cmp	r6, #0
 800b440:	9301      	str	r3, [sp, #4]
 800b442:	d028      	beq.n	800b496 <__d2b+0x86>
 800b444:	4668      	mov	r0, sp
 800b446:	9600      	str	r6, [sp, #0]
 800b448:	f7ff fd10 	bl	800ae6c <__lo0bits>
 800b44c:	9900      	ldr	r1, [sp, #0]
 800b44e:	b300      	cbz	r0, 800b492 <__d2b+0x82>
 800b450:	9a01      	ldr	r2, [sp, #4]
 800b452:	f1c0 0320 	rsb	r3, r0, #32
 800b456:	fa02 f303 	lsl.w	r3, r2, r3
 800b45a:	430b      	orrs	r3, r1
 800b45c:	40c2      	lsrs	r2, r0
 800b45e:	6163      	str	r3, [r4, #20]
 800b460:	9201      	str	r2, [sp, #4]
 800b462:	9b01      	ldr	r3, [sp, #4]
 800b464:	61a3      	str	r3, [r4, #24]
 800b466:	2b00      	cmp	r3, #0
 800b468:	bf14      	ite	ne
 800b46a:	2202      	movne	r2, #2
 800b46c:	2201      	moveq	r2, #1
 800b46e:	6122      	str	r2, [r4, #16]
 800b470:	b1d5      	cbz	r5, 800b4a8 <__d2b+0x98>
 800b472:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b476:	4405      	add	r5, r0
 800b478:	f8c9 5000 	str.w	r5, [r9]
 800b47c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b480:	f8c8 0000 	str.w	r0, [r8]
 800b484:	4620      	mov	r0, r4
 800b486:	b003      	add	sp, #12
 800b488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b48c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b490:	e7d5      	b.n	800b43e <__d2b+0x2e>
 800b492:	6161      	str	r1, [r4, #20]
 800b494:	e7e5      	b.n	800b462 <__d2b+0x52>
 800b496:	a801      	add	r0, sp, #4
 800b498:	f7ff fce8 	bl	800ae6c <__lo0bits>
 800b49c:	9b01      	ldr	r3, [sp, #4]
 800b49e:	6163      	str	r3, [r4, #20]
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	6122      	str	r2, [r4, #16]
 800b4a4:	3020      	adds	r0, #32
 800b4a6:	e7e3      	b.n	800b470 <__d2b+0x60>
 800b4a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b4ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b4b0:	f8c9 0000 	str.w	r0, [r9]
 800b4b4:	6918      	ldr	r0, [r3, #16]
 800b4b6:	f7ff fcb9 	bl	800ae2c <__hi0bits>
 800b4ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b4be:	e7df      	b.n	800b480 <__d2b+0x70>
 800b4c0:	0800e5b4 	.word	0x0800e5b4
 800b4c4:	0800e644 	.word	0x0800e644

0800b4c8 <__ratio>:
 800b4c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4cc:	4688      	mov	r8, r1
 800b4ce:	4669      	mov	r1, sp
 800b4d0:	4681      	mov	r9, r0
 800b4d2:	f7ff ff4d 	bl	800b370 <__b2d>
 800b4d6:	a901      	add	r1, sp, #4
 800b4d8:	4640      	mov	r0, r8
 800b4da:	ec55 4b10 	vmov	r4, r5, d0
 800b4de:	f7ff ff47 	bl	800b370 <__b2d>
 800b4e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b4e6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b4ea:	eba3 0c02 	sub.w	ip, r3, r2
 800b4ee:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b4f2:	1a9b      	subs	r3, r3, r2
 800b4f4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b4f8:	ec51 0b10 	vmov	r0, r1, d0
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	bfd6      	itet	le
 800b500:	460a      	movle	r2, r1
 800b502:	462a      	movgt	r2, r5
 800b504:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b508:	468b      	mov	fp, r1
 800b50a:	462f      	mov	r7, r5
 800b50c:	bfd4      	ite	le
 800b50e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b512:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b516:	4620      	mov	r0, r4
 800b518:	ee10 2a10 	vmov	r2, s0
 800b51c:	465b      	mov	r3, fp
 800b51e:	4639      	mov	r1, r7
 800b520:	f7f5 f99c 	bl	800085c <__aeabi_ddiv>
 800b524:	ec41 0b10 	vmov	d0, r0, r1
 800b528:	b003      	add	sp, #12
 800b52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b52e <__copybits>:
 800b52e:	3901      	subs	r1, #1
 800b530:	b570      	push	{r4, r5, r6, lr}
 800b532:	1149      	asrs	r1, r1, #5
 800b534:	6914      	ldr	r4, [r2, #16]
 800b536:	3101      	adds	r1, #1
 800b538:	f102 0314 	add.w	r3, r2, #20
 800b53c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b540:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b544:	1f05      	subs	r5, r0, #4
 800b546:	42a3      	cmp	r3, r4
 800b548:	d30c      	bcc.n	800b564 <__copybits+0x36>
 800b54a:	1aa3      	subs	r3, r4, r2
 800b54c:	3b11      	subs	r3, #17
 800b54e:	f023 0303 	bic.w	r3, r3, #3
 800b552:	3211      	adds	r2, #17
 800b554:	42a2      	cmp	r2, r4
 800b556:	bf88      	it	hi
 800b558:	2300      	movhi	r3, #0
 800b55a:	4418      	add	r0, r3
 800b55c:	2300      	movs	r3, #0
 800b55e:	4288      	cmp	r0, r1
 800b560:	d305      	bcc.n	800b56e <__copybits+0x40>
 800b562:	bd70      	pop	{r4, r5, r6, pc}
 800b564:	f853 6b04 	ldr.w	r6, [r3], #4
 800b568:	f845 6f04 	str.w	r6, [r5, #4]!
 800b56c:	e7eb      	b.n	800b546 <__copybits+0x18>
 800b56e:	f840 3b04 	str.w	r3, [r0], #4
 800b572:	e7f4      	b.n	800b55e <__copybits+0x30>

0800b574 <__any_on>:
 800b574:	f100 0214 	add.w	r2, r0, #20
 800b578:	6900      	ldr	r0, [r0, #16]
 800b57a:	114b      	asrs	r3, r1, #5
 800b57c:	4298      	cmp	r0, r3
 800b57e:	b510      	push	{r4, lr}
 800b580:	db11      	blt.n	800b5a6 <__any_on+0x32>
 800b582:	dd0a      	ble.n	800b59a <__any_on+0x26>
 800b584:	f011 011f 	ands.w	r1, r1, #31
 800b588:	d007      	beq.n	800b59a <__any_on+0x26>
 800b58a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b58e:	fa24 f001 	lsr.w	r0, r4, r1
 800b592:	fa00 f101 	lsl.w	r1, r0, r1
 800b596:	428c      	cmp	r4, r1
 800b598:	d10b      	bne.n	800b5b2 <__any_on+0x3e>
 800b59a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d803      	bhi.n	800b5aa <__any_on+0x36>
 800b5a2:	2000      	movs	r0, #0
 800b5a4:	bd10      	pop	{r4, pc}
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	e7f7      	b.n	800b59a <__any_on+0x26>
 800b5aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b5ae:	2900      	cmp	r1, #0
 800b5b0:	d0f5      	beq.n	800b59e <__any_on+0x2a>
 800b5b2:	2001      	movs	r0, #1
 800b5b4:	e7f6      	b.n	800b5a4 <__any_on+0x30>

0800b5b6 <_calloc_r>:
 800b5b6:	b513      	push	{r0, r1, r4, lr}
 800b5b8:	434a      	muls	r2, r1
 800b5ba:	4611      	mov	r1, r2
 800b5bc:	9201      	str	r2, [sp, #4]
 800b5be:	f000 f859 	bl	800b674 <_malloc_r>
 800b5c2:	4604      	mov	r4, r0
 800b5c4:	b118      	cbz	r0, 800b5ce <_calloc_r+0x18>
 800b5c6:	9a01      	ldr	r2, [sp, #4]
 800b5c8:	2100      	movs	r1, #0
 800b5ca:	f7fc fb1f 	bl	8007c0c <memset>
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	b002      	add	sp, #8
 800b5d2:	bd10      	pop	{r4, pc}

0800b5d4 <_free_r>:
 800b5d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5d6:	2900      	cmp	r1, #0
 800b5d8:	d048      	beq.n	800b66c <_free_r+0x98>
 800b5da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5de:	9001      	str	r0, [sp, #4]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	f1a1 0404 	sub.w	r4, r1, #4
 800b5e6:	bfb8      	it	lt
 800b5e8:	18e4      	addlt	r4, r4, r3
 800b5ea:	f001 f845 	bl	800c678 <__malloc_lock>
 800b5ee:	4a20      	ldr	r2, [pc, #128]	; (800b670 <_free_r+0x9c>)
 800b5f0:	9801      	ldr	r0, [sp, #4]
 800b5f2:	6813      	ldr	r3, [r2, #0]
 800b5f4:	4615      	mov	r5, r2
 800b5f6:	b933      	cbnz	r3, 800b606 <_free_r+0x32>
 800b5f8:	6063      	str	r3, [r4, #4]
 800b5fa:	6014      	str	r4, [r2, #0]
 800b5fc:	b003      	add	sp, #12
 800b5fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b602:	f001 b83f 	b.w	800c684 <__malloc_unlock>
 800b606:	42a3      	cmp	r3, r4
 800b608:	d90b      	bls.n	800b622 <_free_r+0x4e>
 800b60a:	6821      	ldr	r1, [r4, #0]
 800b60c:	1862      	adds	r2, r4, r1
 800b60e:	4293      	cmp	r3, r2
 800b610:	bf04      	itt	eq
 800b612:	681a      	ldreq	r2, [r3, #0]
 800b614:	685b      	ldreq	r3, [r3, #4]
 800b616:	6063      	str	r3, [r4, #4]
 800b618:	bf04      	itt	eq
 800b61a:	1852      	addeq	r2, r2, r1
 800b61c:	6022      	streq	r2, [r4, #0]
 800b61e:	602c      	str	r4, [r5, #0]
 800b620:	e7ec      	b.n	800b5fc <_free_r+0x28>
 800b622:	461a      	mov	r2, r3
 800b624:	685b      	ldr	r3, [r3, #4]
 800b626:	b10b      	cbz	r3, 800b62c <_free_r+0x58>
 800b628:	42a3      	cmp	r3, r4
 800b62a:	d9fa      	bls.n	800b622 <_free_r+0x4e>
 800b62c:	6811      	ldr	r1, [r2, #0]
 800b62e:	1855      	adds	r5, r2, r1
 800b630:	42a5      	cmp	r5, r4
 800b632:	d10b      	bne.n	800b64c <_free_r+0x78>
 800b634:	6824      	ldr	r4, [r4, #0]
 800b636:	4421      	add	r1, r4
 800b638:	1854      	adds	r4, r2, r1
 800b63a:	42a3      	cmp	r3, r4
 800b63c:	6011      	str	r1, [r2, #0]
 800b63e:	d1dd      	bne.n	800b5fc <_free_r+0x28>
 800b640:	681c      	ldr	r4, [r3, #0]
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	6053      	str	r3, [r2, #4]
 800b646:	4421      	add	r1, r4
 800b648:	6011      	str	r1, [r2, #0]
 800b64a:	e7d7      	b.n	800b5fc <_free_r+0x28>
 800b64c:	d902      	bls.n	800b654 <_free_r+0x80>
 800b64e:	230c      	movs	r3, #12
 800b650:	6003      	str	r3, [r0, #0]
 800b652:	e7d3      	b.n	800b5fc <_free_r+0x28>
 800b654:	6825      	ldr	r5, [r4, #0]
 800b656:	1961      	adds	r1, r4, r5
 800b658:	428b      	cmp	r3, r1
 800b65a:	bf04      	itt	eq
 800b65c:	6819      	ldreq	r1, [r3, #0]
 800b65e:	685b      	ldreq	r3, [r3, #4]
 800b660:	6063      	str	r3, [r4, #4]
 800b662:	bf04      	itt	eq
 800b664:	1949      	addeq	r1, r1, r5
 800b666:	6021      	streq	r1, [r4, #0]
 800b668:	6054      	str	r4, [r2, #4]
 800b66a:	e7c7      	b.n	800b5fc <_free_r+0x28>
 800b66c:	b003      	add	sp, #12
 800b66e:	bd30      	pop	{r4, r5, pc}
 800b670:	20004c30 	.word	0x20004c30

0800b674 <_malloc_r>:
 800b674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b676:	1ccd      	adds	r5, r1, #3
 800b678:	f025 0503 	bic.w	r5, r5, #3
 800b67c:	3508      	adds	r5, #8
 800b67e:	2d0c      	cmp	r5, #12
 800b680:	bf38      	it	cc
 800b682:	250c      	movcc	r5, #12
 800b684:	2d00      	cmp	r5, #0
 800b686:	4606      	mov	r6, r0
 800b688:	db01      	blt.n	800b68e <_malloc_r+0x1a>
 800b68a:	42a9      	cmp	r1, r5
 800b68c:	d903      	bls.n	800b696 <_malloc_r+0x22>
 800b68e:	230c      	movs	r3, #12
 800b690:	6033      	str	r3, [r6, #0]
 800b692:	2000      	movs	r0, #0
 800b694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b696:	f000 ffef 	bl	800c678 <__malloc_lock>
 800b69a:	4921      	ldr	r1, [pc, #132]	; (800b720 <_malloc_r+0xac>)
 800b69c:	680a      	ldr	r2, [r1, #0]
 800b69e:	4614      	mov	r4, r2
 800b6a0:	b99c      	cbnz	r4, 800b6ca <_malloc_r+0x56>
 800b6a2:	4f20      	ldr	r7, [pc, #128]	; (800b724 <_malloc_r+0xb0>)
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	b923      	cbnz	r3, 800b6b2 <_malloc_r+0x3e>
 800b6a8:	4621      	mov	r1, r4
 800b6aa:	4630      	mov	r0, r6
 800b6ac:	f000 fcd0 	bl	800c050 <_sbrk_r>
 800b6b0:	6038      	str	r0, [r7, #0]
 800b6b2:	4629      	mov	r1, r5
 800b6b4:	4630      	mov	r0, r6
 800b6b6:	f000 fccb 	bl	800c050 <_sbrk_r>
 800b6ba:	1c43      	adds	r3, r0, #1
 800b6bc:	d123      	bne.n	800b706 <_malloc_r+0x92>
 800b6be:	230c      	movs	r3, #12
 800b6c0:	6033      	str	r3, [r6, #0]
 800b6c2:	4630      	mov	r0, r6
 800b6c4:	f000 ffde 	bl	800c684 <__malloc_unlock>
 800b6c8:	e7e3      	b.n	800b692 <_malloc_r+0x1e>
 800b6ca:	6823      	ldr	r3, [r4, #0]
 800b6cc:	1b5b      	subs	r3, r3, r5
 800b6ce:	d417      	bmi.n	800b700 <_malloc_r+0x8c>
 800b6d0:	2b0b      	cmp	r3, #11
 800b6d2:	d903      	bls.n	800b6dc <_malloc_r+0x68>
 800b6d4:	6023      	str	r3, [r4, #0]
 800b6d6:	441c      	add	r4, r3
 800b6d8:	6025      	str	r5, [r4, #0]
 800b6da:	e004      	b.n	800b6e6 <_malloc_r+0x72>
 800b6dc:	6863      	ldr	r3, [r4, #4]
 800b6de:	42a2      	cmp	r2, r4
 800b6e0:	bf0c      	ite	eq
 800b6e2:	600b      	streq	r3, [r1, #0]
 800b6e4:	6053      	strne	r3, [r2, #4]
 800b6e6:	4630      	mov	r0, r6
 800b6e8:	f000 ffcc 	bl	800c684 <__malloc_unlock>
 800b6ec:	f104 000b 	add.w	r0, r4, #11
 800b6f0:	1d23      	adds	r3, r4, #4
 800b6f2:	f020 0007 	bic.w	r0, r0, #7
 800b6f6:	1ac2      	subs	r2, r0, r3
 800b6f8:	d0cc      	beq.n	800b694 <_malloc_r+0x20>
 800b6fa:	1a1b      	subs	r3, r3, r0
 800b6fc:	50a3      	str	r3, [r4, r2]
 800b6fe:	e7c9      	b.n	800b694 <_malloc_r+0x20>
 800b700:	4622      	mov	r2, r4
 800b702:	6864      	ldr	r4, [r4, #4]
 800b704:	e7cc      	b.n	800b6a0 <_malloc_r+0x2c>
 800b706:	1cc4      	adds	r4, r0, #3
 800b708:	f024 0403 	bic.w	r4, r4, #3
 800b70c:	42a0      	cmp	r0, r4
 800b70e:	d0e3      	beq.n	800b6d8 <_malloc_r+0x64>
 800b710:	1a21      	subs	r1, r4, r0
 800b712:	4630      	mov	r0, r6
 800b714:	f000 fc9c 	bl	800c050 <_sbrk_r>
 800b718:	3001      	adds	r0, #1
 800b71a:	d1dd      	bne.n	800b6d8 <_malloc_r+0x64>
 800b71c:	e7cf      	b.n	800b6be <_malloc_r+0x4a>
 800b71e:	bf00      	nop
 800b720:	20004c30 	.word	0x20004c30
 800b724:	20004c34 	.word	0x20004c34

0800b728 <__ssputs_r>:
 800b728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b72c:	688e      	ldr	r6, [r1, #8]
 800b72e:	429e      	cmp	r6, r3
 800b730:	4682      	mov	sl, r0
 800b732:	460c      	mov	r4, r1
 800b734:	4690      	mov	r8, r2
 800b736:	461f      	mov	r7, r3
 800b738:	d838      	bhi.n	800b7ac <__ssputs_r+0x84>
 800b73a:	898a      	ldrh	r2, [r1, #12]
 800b73c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b740:	d032      	beq.n	800b7a8 <__ssputs_r+0x80>
 800b742:	6825      	ldr	r5, [r4, #0]
 800b744:	6909      	ldr	r1, [r1, #16]
 800b746:	eba5 0901 	sub.w	r9, r5, r1
 800b74a:	6965      	ldr	r5, [r4, #20]
 800b74c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b750:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b754:	3301      	adds	r3, #1
 800b756:	444b      	add	r3, r9
 800b758:	106d      	asrs	r5, r5, #1
 800b75a:	429d      	cmp	r5, r3
 800b75c:	bf38      	it	cc
 800b75e:	461d      	movcc	r5, r3
 800b760:	0553      	lsls	r3, r2, #21
 800b762:	d531      	bpl.n	800b7c8 <__ssputs_r+0xa0>
 800b764:	4629      	mov	r1, r5
 800b766:	f7ff ff85 	bl	800b674 <_malloc_r>
 800b76a:	4606      	mov	r6, r0
 800b76c:	b950      	cbnz	r0, 800b784 <__ssputs_r+0x5c>
 800b76e:	230c      	movs	r3, #12
 800b770:	f8ca 3000 	str.w	r3, [sl]
 800b774:	89a3      	ldrh	r3, [r4, #12]
 800b776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b77a:	81a3      	strh	r3, [r4, #12]
 800b77c:	f04f 30ff 	mov.w	r0, #4294967295
 800b780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b784:	6921      	ldr	r1, [r4, #16]
 800b786:	464a      	mov	r2, r9
 800b788:	f7fc fa32 	bl	8007bf0 <memcpy>
 800b78c:	89a3      	ldrh	r3, [r4, #12]
 800b78e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b796:	81a3      	strh	r3, [r4, #12]
 800b798:	6126      	str	r6, [r4, #16]
 800b79a:	6165      	str	r5, [r4, #20]
 800b79c:	444e      	add	r6, r9
 800b79e:	eba5 0509 	sub.w	r5, r5, r9
 800b7a2:	6026      	str	r6, [r4, #0]
 800b7a4:	60a5      	str	r5, [r4, #8]
 800b7a6:	463e      	mov	r6, r7
 800b7a8:	42be      	cmp	r6, r7
 800b7aa:	d900      	bls.n	800b7ae <__ssputs_r+0x86>
 800b7ac:	463e      	mov	r6, r7
 800b7ae:	4632      	mov	r2, r6
 800b7b0:	6820      	ldr	r0, [r4, #0]
 800b7b2:	4641      	mov	r1, r8
 800b7b4:	f000 ff46 	bl	800c644 <memmove>
 800b7b8:	68a3      	ldr	r3, [r4, #8]
 800b7ba:	6822      	ldr	r2, [r4, #0]
 800b7bc:	1b9b      	subs	r3, r3, r6
 800b7be:	4432      	add	r2, r6
 800b7c0:	60a3      	str	r3, [r4, #8]
 800b7c2:	6022      	str	r2, [r4, #0]
 800b7c4:	2000      	movs	r0, #0
 800b7c6:	e7db      	b.n	800b780 <__ssputs_r+0x58>
 800b7c8:	462a      	mov	r2, r5
 800b7ca:	f000 ff61 	bl	800c690 <_realloc_r>
 800b7ce:	4606      	mov	r6, r0
 800b7d0:	2800      	cmp	r0, #0
 800b7d2:	d1e1      	bne.n	800b798 <__ssputs_r+0x70>
 800b7d4:	6921      	ldr	r1, [r4, #16]
 800b7d6:	4650      	mov	r0, sl
 800b7d8:	f7ff fefc 	bl	800b5d4 <_free_r>
 800b7dc:	e7c7      	b.n	800b76e <__ssputs_r+0x46>
	...

0800b7e0 <_svfiprintf_r>:
 800b7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e4:	4698      	mov	r8, r3
 800b7e6:	898b      	ldrh	r3, [r1, #12]
 800b7e8:	061b      	lsls	r3, r3, #24
 800b7ea:	b09d      	sub	sp, #116	; 0x74
 800b7ec:	4607      	mov	r7, r0
 800b7ee:	460d      	mov	r5, r1
 800b7f0:	4614      	mov	r4, r2
 800b7f2:	d50e      	bpl.n	800b812 <_svfiprintf_r+0x32>
 800b7f4:	690b      	ldr	r3, [r1, #16]
 800b7f6:	b963      	cbnz	r3, 800b812 <_svfiprintf_r+0x32>
 800b7f8:	2140      	movs	r1, #64	; 0x40
 800b7fa:	f7ff ff3b 	bl	800b674 <_malloc_r>
 800b7fe:	6028      	str	r0, [r5, #0]
 800b800:	6128      	str	r0, [r5, #16]
 800b802:	b920      	cbnz	r0, 800b80e <_svfiprintf_r+0x2e>
 800b804:	230c      	movs	r3, #12
 800b806:	603b      	str	r3, [r7, #0]
 800b808:	f04f 30ff 	mov.w	r0, #4294967295
 800b80c:	e0d1      	b.n	800b9b2 <_svfiprintf_r+0x1d2>
 800b80e:	2340      	movs	r3, #64	; 0x40
 800b810:	616b      	str	r3, [r5, #20]
 800b812:	2300      	movs	r3, #0
 800b814:	9309      	str	r3, [sp, #36]	; 0x24
 800b816:	2320      	movs	r3, #32
 800b818:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b81c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b820:	2330      	movs	r3, #48	; 0x30
 800b822:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b9cc <_svfiprintf_r+0x1ec>
 800b826:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b82a:	f04f 0901 	mov.w	r9, #1
 800b82e:	4623      	mov	r3, r4
 800b830:	469a      	mov	sl, r3
 800b832:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b836:	b10a      	cbz	r2, 800b83c <_svfiprintf_r+0x5c>
 800b838:	2a25      	cmp	r2, #37	; 0x25
 800b83a:	d1f9      	bne.n	800b830 <_svfiprintf_r+0x50>
 800b83c:	ebba 0b04 	subs.w	fp, sl, r4
 800b840:	d00b      	beq.n	800b85a <_svfiprintf_r+0x7a>
 800b842:	465b      	mov	r3, fp
 800b844:	4622      	mov	r2, r4
 800b846:	4629      	mov	r1, r5
 800b848:	4638      	mov	r0, r7
 800b84a:	f7ff ff6d 	bl	800b728 <__ssputs_r>
 800b84e:	3001      	adds	r0, #1
 800b850:	f000 80aa 	beq.w	800b9a8 <_svfiprintf_r+0x1c8>
 800b854:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b856:	445a      	add	r2, fp
 800b858:	9209      	str	r2, [sp, #36]	; 0x24
 800b85a:	f89a 3000 	ldrb.w	r3, [sl]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	f000 80a2 	beq.w	800b9a8 <_svfiprintf_r+0x1c8>
 800b864:	2300      	movs	r3, #0
 800b866:	f04f 32ff 	mov.w	r2, #4294967295
 800b86a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b86e:	f10a 0a01 	add.w	sl, sl, #1
 800b872:	9304      	str	r3, [sp, #16]
 800b874:	9307      	str	r3, [sp, #28]
 800b876:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b87a:	931a      	str	r3, [sp, #104]	; 0x68
 800b87c:	4654      	mov	r4, sl
 800b87e:	2205      	movs	r2, #5
 800b880:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b884:	4851      	ldr	r0, [pc, #324]	; (800b9cc <_svfiprintf_r+0x1ec>)
 800b886:	f7f4 fcb3 	bl	80001f0 <memchr>
 800b88a:	9a04      	ldr	r2, [sp, #16]
 800b88c:	b9d8      	cbnz	r0, 800b8c6 <_svfiprintf_r+0xe6>
 800b88e:	06d0      	lsls	r0, r2, #27
 800b890:	bf44      	itt	mi
 800b892:	2320      	movmi	r3, #32
 800b894:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b898:	0711      	lsls	r1, r2, #28
 800b89a:	bf44      	itt	mi
 800b89c:	232b      	movmi	r3, #43	; 0x2b
 800b89e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8a2:	f89a 3000 	ldrb.w	r3, [sl]
 800b8a6:	2b2a      	cmp	r3, #42	; 0x2a
 800b8a8:	d015      	beq.n	800b8d6 <_svfiprintf_r+0xf6>
 800b8aa:	9a07      	ldr	r2, [sp, #28]
 800b8ac:	4654      	mov	r4, sl
 800b8ae:	2000      	movs	r0, #0
 800b8b0:	f04f 0c0a 	mov.w	ip, #10
 800b8b4:	4621      	mov	r1, r4
 800b8b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8ba:	3b30      	subs	r3, #48	; 0x30
 800b8bc:	2b09      	cmp	r3, #9
 800b8be:	d94e      	bls.n	800b95e <_svfiprintf_r+0x17e>
 800b8c0:	b1b0      	cbz	r0, 800b8f0 <_svfiprintf_r+0x110>
 800b8c2:	9207      	str	r2, [sp, #28]
 800b8c4:	e014      	b.n	800b8f0 <_svfiprintf_r+0x110>
 800b8c6:	eba0 0308 	sub.w	r3, r0, r8
 800b8ca:	fa09 f303 	lsl.w	r3, r9, r3
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	9304      	str	r3, [sp, #16]
 800b8d2:	46a2      	mov	sl, r4
 800b8d4:	e7d2      	b.n	800b87c <_svfiprintf_r+0x9c>
 800b8d6:	9b03      	ldr	r3, [sp, #12]
 800b8d8:	1d19      	adds	r1, r3, #4
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	9103      	str	r1, [sp, #12]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	bfbb      	ittet	lt
 800b8e2:	425b      	neglt	r3, r3
 800b8e4:	f042 0202 	orrlt.w	r2, r2, #2
 800b8e8:	9307      	strge	r3, [sp, #28]
 800b8ea:	9307      	strlt	r3, [sp, #28]
 800b8ec:	bfb8      	it	lt
 800b8ee:	9204      	strlt	r2, [sp, #16]
 800b8f0:	7823      	ldrb	r3, [r4, #0]
 800b8f2:	2b2e      	cmp	r3, #46	; 0x2e
 800b8f4:	d10c      	bne.n	800b910 <_svfiprintf_r+0x130>
 800b8f6:	7863      	ldrb	r3, [r4, #1]
 800b8f8:	2b2a      	cmp	r3, #42	; 0x2a
 800b8fa:	d135      	bne.n	800b968 <_svfiprintf_r+0x188>
 800b8fc:	9b03      	ldr	r3, [sp, #12]
 800b8fe:	1d1a      	adds	r2, r3, #4
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	9203      	str	r2, [sp, #12]
 800b904:	2b00      	cmp	r3, #0
 800b906:	bfb8      	it	lt
 800b908:	f04f 33ff 	movlt.w	r3, #4294967295
 800b90c:	3402      	adds	r4, #2
 800b90e:	9305      	str	r3, [sp, #20]
 800b910:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b9dc <_svfiprintf_r+0x1fc>
 800b914:	7821      	ldrb	r1, [r4, #0]
 800b916:	2203      	movs	r2, #3
 800b918:	4650      	mov	r0, sl
 800b91a:	f7f4 fc69 	bl	80001f0 <memchr>
 800b91e:	b140      	cbz	r0, 800b932 <_svfiprintf_r+0x152>
 800b920:	2340      	movs	r3, #64	; 0x40
 800b922:	eba0 000a 	sub.w	r0, r0, sl
 800b926:	fa03 f000 	lsl.w	r0, r3, r0
 800b92a:	9b04      	ldr	r3, [sp, #16]
 800b92c:	4303      	orrs	r3, r0
 800b92e:	3401      	adds	r4, #1
 800b930:	9304      	str	r3, [sp, #16]
 800b932:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b936:	4826      	ldr	r0, [pc, #152]	; (800b9d0 <_svfiprintf_r+0x1f0>)
 800b938:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b93c:	2206      	movs	r2, #6
 800b93e:	f7f4 fc57 	bl	80001f0 <memchr>
 800b942:	2800      	cmp	r0, #0
 800b944:	d038      	beq.n	800b9b8 <_svfiprintf_r+0x1d8>
 800b946:	4b23      	ldr	r3, [pc, #140]	; (800b9d4 <_svfiprintf_r+0x1f4>)
 800b948:	bb1b      	cbnz	r3, 800b992 <_svfiprintf_r+0x1b2>
 800b94a:	9b03      	ldr	r3, [sp, #12]
 800b94c:	3307      	adds	r3, #7
 800b94e:	f023 0307 	bic.w	r3, r3, #7
 800b952:	3308      	adds	r3, #8
 800b954:	9303      	str	r3, [sp, #12]
 800b956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b958:	4433      	add	r3, r6
 800b95a:	9309      	str	r3, [sp, #36]	; 0x24
 800b95c:	e767      	b.n	800b82e <_svfiprintf_r+0x4e>
 800b95e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b962:	460c      	mov	r4, r1
 800b964:	2001      	movs	r0, #1
 800b966:	e7a5      	b.n	800b8b4 <_svfiprintf_r+0xd4>
 800b968:	2300      	movs	r3, #0
 800b96a:	3401      	adds	r4, #1
 800b96c:	9305      	str	r3, [sp, #20]
 800b96e:	4619      	mov	r1, r3
 800b970:	f04f 0c0a 	mov.w	ip, #10
 800b974:	4620      	mov	r0, r4
 800b976:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b97a:	3a30      	subs	r2, #48	; 0x30
 800b97c:	2a09      	cmp	r2, #9
 800b97e:	d903      	bls.n	800b988 <_svfiprintf_r+0x1a8>
 800b980:	2b00      	cmp	r3, #0
 800b982:	d0c5      	beq.n	800b910 <_svfiprintf_r+0x130>
 800b984:	9105      	str	r1, [sp, #20]
 800b986:	e7c3      	b.n	800b910 <_svfiprintf_r+0x130>
 800b988:	fb0c 2101 	mla	r1, ip, r1, r2
 800b98c:	4604      	mov	r4, r0
 800b98e:	2301      	movs	r3, #1
 800b990:	e7f0      	b.n	800b974 <_svfiprintf_r+0x194>
 800b992:	ab03      	add	r3, sp, #12
 800b994:	9300      	str	r3, [sp, #0]
 800b996:	462a      	mov	r2, r5
 800b998:	4b0f      	ldr	r3, [pc, #60]	; (800b9d8 <_svfiprintf_r+0x1f8>)
 800b99a:	a904      	add	r1, sp, #16
 800b99c:	4638      	mov	r0, r7
 800b99e:	f7fc f9dd 	bl	8007d5c <_printf_float>
 800b9a2:	1c42      	adds	r2, r0, #1
 800b9a4:	4606      	mov	r6, r0
 800b9a6:	d1d6      	bne.n	800b956 <_svfiprintf_r+0x176>
 800b9a8:	89ab      	ldrh	r3, [r5, #12]
 800b9aa:	065b      	lsls	r3, r3, #25
 800b9ac:	f53f af2c 	bmi.w	800b808 <_svfiprintf_r+0x28>
 800b9b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9b2:	b01d      	add	sp, #116	; 0x74
 800b9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b8:	ab03      	add	r3, sp, #12
 800b9ba:	9300      	str	r3, [sp, #0]
 800b9bc:	462a      	mov	r2, r5
 800b9be:	4b06      	ldr	r3, [pc, #24]	; (800b9d8 <_svfiprintf_r+0x1f8>)
 800b9c0:	a904      	add	r1, sp, #16
 800b9c2:	4638      	mov	r0, r7
 800b9c4:	f7fc fc6e 	bl	80082a4 <_printf_i>
 800b9c8:	e7eb      	b.n	800b9a2 <_svfiprintf_r+0x1c2>
 800b9ca:	bf00      	nop
 800b9cc:	0800e7a4 	.word	0x0800e7a4
 800b9d0:	0800e7ae 	.word	0x0800e7ae
 800b9d4:	08007d5d 	.word	0x08007d5d
 800b9d8:	0800b729 	.word	0x0800b729
 800b9dc:	0800e7aa 	.word	0x0800e7aa

0800b9e0 <_sungetc_r>:
 800b9e0:	b538      	push	{r3, r4, r5, lr}
 800b9e2:	1c4b      	adds	r3, r1, #1
 800b9e4:	4614      	mov	r4, r2
 800b9e6:	d103      	bne.n	800b9f0 <_sungetc_r+0x10>
 800b9e8:	f04f 35ff 	mov.w	r5, #4294967295
 800b9ec:	4628      	mov	r0, r5
 800b9ee:	bd38      	pop	{r3, r4, r5, pc}
 800b9f0:	8993      	ldrh	r3, [r2, #12]
 800b9f2:	f023 0320 	bic.w	r3, r3, #32
 800b9f6:	8193      	strh	r3, [r2, #12]
 800b9f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b9fa:	6852      	ldr	r2, [r2, #4]
 800b9fc:	b2cd      	uxtb	r5, r1
 800b9fe:	b18b      	cbz	r3, 800ba24 <_sungetc_r+0x44>
 800ba00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ba02:	4293      	cmp	r3, r2
 800ba04:	dd08      	ble.n	800ba18 <_sungetc_r+0x38>
 800ba06:	6823      	ldr	r3, [r4, #0]
 800ba08:	1e5a      	subs	r2, r3, #1
 800ba0a:	6022      	str	r2, [r4, #0]
 800ba0c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ba10:	6863      	ldr	r3, [r4, #4]
 800ba12:	3301      	adds	r3, #1
 800ba14:	6063      	str	r3, [r4, #4]
 800ba16:	e7e9      	b.n	800b9ec <_sungetc_r+0xc>
 800ba18:	4621      	mov	r1, r4
 800ba1a:	f000 fbe1 	bl	800c1e0 <__submore>
 800ba1e:	2800      	cmp	r0, #0
 800ba20:	d0f1      	beq.n	800ba06 <_sungetc_r+0x26>
 800ba22:	e7e1      	b.n	800b9e8 <_sungetc_r+0x8>
 800ba24:	6921      	ldr	r1, [r4, #16]
 800ba26:	6823      	ldr	r3, [r4, #0]
 800ba28:	b151      	cbz	r1, 800ba40 <_sungetc_r+0x60>
 800ba2a:	4299      	cmp	r1, r3
 800ba2c:	d208      	bcs.n	800ba40 <_sungetc_r+0x60>
 800ba2e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ba32:	42a9      	cmp	r1, r5
 800ba34:	d104      	bne.n	800ba40 <_sungetc_r+0x60>
 800ba36:	3b01      	subs	r3, #1
 800ba38:	3201      	adds	r2, #1
 800ba3a:	6023      	str	r3, [r4, #0]
 800ba3c:	6062      	str	r2, [r4, #4]
 800ba3e:	e7d5      	b.n	800b9ec <_sungetc_r+0xc>
 800ba40:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800ba44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba48:	6363      	str	r3, [r4, #52]	; 0x34
 800ba4a:	2303      	movs	r3, #3
 800ba4c:	63a3      	str	r3, [r4, #56]	; 0x38
 800ba4e:	4623      	mov	r3, r4
 800ba50:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ba54:	6023      	str	r3, [r4, #0]
 800ba56:	2301      	movs	r3, #1
 800ba58:	e7dc      	b.n	800ba14 <_sungetc_r+0x34>

0800ba5a <__ssrefill_r>:
 800ba5a:	b510      	push	{r4, lr}
 800ba5c:	460c      	mov	r4, r1
 800ba5e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ba60:	b169      	cbz	r1, 800ba7e <__ssrefill_r+0x24>
 800ba62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba66:	4299      	cmp	r1, r3
 800ba68:	d001      	beq.n	800ba6e <__ssrefill_r+0x14>
 800ba6a:	f7ff fdb3 	bl	800b5d4 <_free_r>
 800ba6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ba70:	6063      	str	r3, [r4, #4]
 800ba72:	2000      	movs	r0, #0
 800ba74:	6360      	str	r0, [r4, #52]	; 0x34
 800ba76:	b113      	cbz	r3, 800ba7e <__ssrefill_r+0x24>
 800ba78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ba7a:	6023      	str	r3, [r4, #0]
 800ba7c:	bd10      	pop	{r4, pc}
 800ba7e:	6923      	ldr	r3, [r4, #16]
 800ba80:	6023      	str	r3, [r4, #0]
 800ba82:	2300      	movs	r3, #0
 800ba84:	6063      	str	r3, [r4, #4]
 800ba86:	89a3      	ldrh	r3, [r4, #12]
 800ba88:	f043 0320 	orr.w	r3, r3, #32
 800ba8c:	81a3      	strh	r3, [r4, #12]
 800ba8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ba92:	e7f3      	b.n	800ba7c <__ssrefill_r+0x22>

0800ba94 <__ssvfiscanf_r>:
 800ba94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba98:	460c      	mov	r4, r1
 800ba9a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800ba9e:	2100      	movs	r1, #0
 800baa0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800baa4:	49b2      	ldr	r1, [pc, #712]	; (800bd70 <__ssvfiscanf_r+0x2dc>)
 800baa6:	91a0      	str	r1, [sp, #640]	; 0x280
 800baa8:	f10d 0804 	add.w	r8, sp, #4
 800baac:	49b1      	ldr	r1, [pc, #708]	; (800bd74 <__ssvfiscanf_r+0x2e0>)
 800baae:	4fb2      	ldr	r7, [pc, #712]	; (800bd78 <__ssvfiscanf_r+0x2e4>)
 800bab0:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800bd7c <__ssvfiscanf_r+0x2e8>
 800bab4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800bab8:	4606      	mov	r6, r0
 800baba:	91a1      	str	r1, [sp, #644]	; 0x284
 800babc:	9300      	str	r3, [sp, #0]
 800babe:	f892 a000 	ldrb.w	sl, [r2]
 800bac2:	f1ba 0f00 	cmp.w	sl, #0
 800bac6:	f000 8151 	beq.w	800bd6c <__ssvfiscanf_r+0x2d8>
 800baca:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800bace:	f013 0308 	ands.w	r3, r3, #8
 800bad2:	f102 0501 	add.w	r5, r2, #1
 800bad6:	d019      	beq.n	800bb0c <__ssvfiscanf_r+0x78>
 800bad8:	6863      	ldr	r3, [r4, #4]
 800bada:	2b00      	cmp	r3, #0
 800badc:	dd0f      	ble.n	800bafe <__ssvfiscanf_r+0x6a>
 800bade:	6823      	ldr	r3, [r4, #0]
 800bae0:	781a      	ldrb	r2, [r3, #0]
 800bae2:	5cba      	ldrb	r2, [r7, r2]
 800bae4:	0712      	lsls	r2, r2, #28
 800bae6:	d401      	bmi.n	800baec <__ssvfiscanf_r+0x58>
 800bae8:	462a      	mov	r2, r5
 800baea:	e7e8      	b.n	800babe <__ssvfiscanf_r+0x2a>
 800baec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800baee:	3201      	adds	r2, #1
 800baf0:	9245      	str	r2, [sp, #276]	; 0x114
 800baf2:	6862      	ldr	r2, [r4, #4]
 800baf4:	3301      	adds	r3, #1
 800baf6:	3a01      	subs	r2, #1
 800baf8:	6062      	str	r2, [r4, #4]
 800bafa:	6023      	str	r3, [r4, #0]
 800bafc:	e7ec      	b.n	800bad8 <__ssvfiscanf_r+0x44>
 800bafe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bb00:	4621      	mov	r1, r4
 800bb02:	4630      	mov	r0, r6
 800bb04:	4798      	blx	r3
 800bb06:	2800      	cmp	r0, #0
 800bb08:	d0e9      	beq.n	800bade <__ssvfiscanf_r+0x4a>
 800bb0a:	e7ed      	b.n	800bae8 <__ssvfiscanf_r+0x54>
 800bb0c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800bb10:	f040 8083 	bne.w	800bc1a <__ssvfiscanf_r+0x186>
 800bb14:	9341      	str	r3, [sp, #260]	; 0x104
 800bb16:	9343      	str	r3, [sp, #268]	; 0x10c
 800bb18:	7853      	ldrb	r3, [r2, #1]
 800bb1a:	2b2a      	cmp	r3, #42	; 0x2a
 800bb1c:	bf02      	ittt	eq
 800bb1e:	2310      	moveq	r3, #16
 800bb20:	1c95      	addeq	r5, r2, #2
 800bb22:	9341      	streq	r3, [sp, #260]	; 0x104
 800bb24:	220a      	movs	r2, #10
 800bb26:	46ab      	mov	fp, r5
 800bb28:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800bb2c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800bb30:	2b09      	cmp	r3, #9
 800bb32:	d91d      	bls.n	800bb70 <__ssvfiscanf_r+0xdc>
 800bb34:	4891      	ldr	r0, [pc, #580]	; (800bd7c <__ssvfiscanf_r+0x2e8>)
 800bb36:	2203      	movs	r2, #3
 800bb38:	f7f4 fb5a 	bl	80001f0 <memchr>
 800bb3c:	b140      	cbz	r0, 800bb50 <__ssvfiscanf_r+0xbc>
 800bb3e:	2301      	movs	r3, #1
 800bb40:	eba0 0009 	sub.w	r0, r0, r9
 800bb44:	fa03 f000 	lsl.w	r0, r3, r0
 800bb48:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bb4a:	4318      	orrs	r0, r3
 800bb4c:	9041      	str	r0, [sp, #260]	; 0x104
 800bb4e:	465d      	mov	r5, fp
 800bb50:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bb54:	2b78      	cmp	r3, #120	; 0x78
 800bb56:	d806      	bhi.n	800bb66 <__ssvfiscanf_r+0xd2>
 800bb58:	2b57      	cmp	r3, #87	; 0x57
 800bb5a:	d810      	bhi.n	800bb7e <__ssvfiscanf_r+0xea>
 800bb5c:	2b25      	cmp	r3, #37	; 0x25
 800bb5e:	d05c      	beq.n	800bc1a <__ssvfiscanf_r+0x186>
 800bb60:	d856      	bhi.n	800bc10 <__ssvfiscanf_r+0x17c>
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d074      	beq.n	800bc50 <__ssvfiscanf_r+0x1bc>
 800bb66:	2303      	movs	r3, #3
 800bb68:	9347      	str	r3, [sp, #284]	; 0x11c
 800bb6a:	230a      	movs	r3, #10
 800bb6c:	9342      	str	r3, [sp, #264]	; 0x108
 800bb6e:	e081      	b.n	800bc74 <__ssvfiscanf_r+0x1e0>
 800bb70:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bb72:	fb02 1303 	mla	r3, r2, r3, r1
 800bb76:	3b30      	subs	r3, #48	; 0x30
 800bb78:	9343      	str	r3, [sp, #268]	; 0x10c
 800bb7a:	465d      	mov	r5, fp
 800bb7c:	e7d3      	b.n	800bb26 <__ssvfiscanf_r+0x92>
 800bb7e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800bb82:	2a20      	cmp	r2, #32
 800bb84:	d8ef      	bhi.n	800bb66 <__ssvfiscanf_r+0xd2>
 800bb86:	a101      	add	r1, pc, #4	; (adr r1, 800bb8c <__ssvfiscanf_r+0xf8>)
 800bb88:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bb8c:	0800bc5f 	.word	0x0800bc5f
 800bb90:	0800bb67 	.word	0x0800bb67
 800bb94:	0800bb67 	.word	0x0800bb67
 800bb98:	0800bcbd 	.word	0x0800bcbd
 800bb9c:	0800bb67 	.word	0x0800bb67
 800bba0:	0800bb67 	.word	0x0800bb67
 800bba4:	0800bb67 	.word	0x0800bb67
 800bba8:	0800bb67 	.word	0x0800bb67
 800bbac:	0800bb67 	.word	0x0800bb67
 800bbb0:	0800bb67 	.word	0x0800bb67
 800bbb4:	0800bb67 	.word	0x0800bb67
 800bbb8:	0800bcd3 	.word	0x0800bcd3
 800bbbc:	0800bca9 	.word	0x0800bca9
 800bbc0:	0800bc17 	.word	0x0800bc17
 800bbc4:	0800bc17 	.word	0x0800bc17
 800bbc8:	0800bc17 	.word	0x0800bc17
 800bbcc:	0800bb67 	.word	0x0800bb67
 800bbd0:	0800bcad 	.word	0x0800bcad
 800bbd4:	0800bb67 	.word	0x0800bb67
 800bbd8:	0800bb67 	.word	0x0800bb67
 800bbdc:	0800bb67 	.word	0x0800bb67
 800bbe0:	0800bb67 	.word	0x0800bb67
 800bbe4:	0800bce3 	.word	0x0800bce3
 800bbe8:	0800bcb5 	.word	0x0800bcb5
 800bbec:	0800bc57 	.word	0x0800bc57
 800bbf0:	0800bb67 	.word	0x0800bb67
 800bbf4:	0800bb67 	.word	0x0800bb67
 800bbf8:	0800bcdf 	.word	0x0800bcdf
 800bbfc:	0800bb67 	.word	0x0800bb67
 800bc00:	0800bca9 	.word	0x0800bca9
 800bc04:	0800bb67 	.word	0x0800bb67
 800bc08:	0800bb67 	.word	0x0800bb67
 800bc0c:	0800bc5f 	.word	0x0800bc5f
 800bc10:	3b45      	subs	r3, #69	; 0x45
 800bc12:	2b02      	cmp	r3, #2
 800bc14:	d8a7      	bhi.n	800bb66 <__ssvfiscanf_r+0xd2>
 800bc16:	2305      	movs	r3, #5
 800bc18:	e02b      	b.n	800bc72 <__ssvfiscanf_r+0x1de>
 800bc1a:	6863      	ldr	r3, [r4, #4]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	dd0d      	ble.n	800bc3c <__ssvfiscanf_r+0x1a8>
 800bc20:	6823      	ldr	r3, [r4, #0]
 800bc22:	781a      	ldrb	r2, [r3, #0]
 800bc24:	4552      	cmp	r2, sl
 800bc26:	f040 80a1 	bne.w	800bd6c <__ssvfiscanf_r+0x2d8>
 800bc2a:	3301      	adds	r3, #1
 800bc2c:	6862      	ldr	r2, [r4, #4]
 800bc2e:	6023      	str	r3, [r4, #0]
 800bc30:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bc32:	3a01      	subs	r2, #1
 800bc34:	3301      	adds	r3, #1
 800bc36:	6062      	str	r2, [r4, #4]
 800bc38:	9345      	str	r3, [sp, #276]	; 0x114
 800bc3a:	e755      	b.n	800bae8 <__ssvfiscanf_r+0x54>
 800bc3c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bc3e:	4621      	mov	r1, r4
 800bc40:	4630      	mov	r0, r6
 800bc42:	4798      	blx	r3
 800bc44:	2800      	cmp	r0, #0
 800bc46:	d0eb      	beq.n	800bc20 <__ssvfiscanf_r+0x18c>
 800bc48:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bc4a:	2800      	cmp	r0, #0
 800bc4c:	f040 8084 	bne.w	800bd58 <__ssvfiscanf_r+0x2c4>
 800bc50:	f04f 30ff 	mov.w	r0, #4294967295
 800bc54:	e086      	b.n	800bd64 <__ssvfiscanf_r+0x2d0>
 800bc56:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bc58:	f042 0220 	orr.w	r2, r2, #32
 800bc5c:	9241      	str	r2, [sp, #260]	; 0x104
 800bc5e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bc60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc64:	9241      	str	r2, [sp, #260]	; 0x104
 800bc66:	2210      	movs	r2, #16
 800bc68:	2b6f      	cmp	r3, #111	; 0x6f
 800bc6a:	9242      	str	r2, [sp, #264]	; 0x108
 800bc6c:	bf34      	ite	cc
 800bc6e:	2303      	movcc	r3, #3
 800bc70:	2304      	movcs	r3, #4
 800bc72:	9347      	str	r3, [sp, #284]	; 0x11c
 800bc74:	6863      	ldr	r3, [r4, #4]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	dd41      	ble.n	800bcfe <__ssvfiscanf_r+0x26a>
 800bc7a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bc7c:	0659      	lsls	r1, r3, #25
 800bc7e:	d404      	bmi.n	800bc8a <__ssvfiscanf_r+0x1f6>
 800bc80:	6823      	ldr	r3, [r4, #0]
 800bc82:	781a      	ldrb	r2, [r3, #0]
 800bc84:	5cba      	ldrb	r2, [r7, r2]
 800bc86:	0712      	lsls	r2, r2, #28
 800bc88:	d440      	bmi.n	800bd0c <__ssvfiscanf_r+0x278>
 800bc8a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bc8c:	2b02      	cmp	r3, #2
 800bc8e:	dc4f      	bgt.n	800bd30 <__ssvfiscanf_r+0x29c>
 800bc90:	466b      	mov	r3, sp
 800bc92:	4622      	mov	r2, r4
 800bc94:	a941      	add	r1, sp, #260	; 0x104
 800bc96:	4630      	mov	r0, r6
 800bc98:	f000 f874 	bl	800bd84 <_scanf_chars>
 800bc9c:	2801      	cmp	r0, #1
 800bc9e:	d065      	beq.n	800bd6c <__ssvfiscanf_r+0x2d8>
 800bca0:	2802      	cmp	r0, #2
 800bca2:	f47f af21 	bne.w	800bae8 <__ssvfiscanf_r+0x54>
 800bca6:	e7cf      	b.n	800bc48 <__ssvfiscanf_r+0x1b4>
 800bca8:	220a      	movs	r2, #10
 800bcaa:	e7dd      	b.n	800bc68 <__ssvfiscanf_r+0x1d4>
 800bcac:	2300      	movs	r3, #0
 800bcae:	9342      	str	r3, [sp, #264]	; 0x108
 800bcb0:	2303      	movs	r3, #3
 800bcb2:	e7de      	b.n	800bc72 <__ssvfiscanf_r+0x1de>
 800bcb4:	2308      	movs	r3, #8
 800bcb6:	9342      	str	r3, [sp, #264]	; 0x108
 800bcb8:	2304      	movs	r3, #4
 800bcba:	e7da      	b.n	800bc72 <__ssvfiscanf_r+0x1de>
 800bcbc:	4629      	mov	r1, r5
 800bcbe:	4640      	mov	r0, r8
 800bcc0:	f000 f9d6 	bl	800c070 <__sccl>
 800bcc4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bcc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcca:	9341      	str	r3, [sp, #260]	; 0x104
 800bccc:	4605      	mov	r5, r0
 800bcce:	2301      	movs	r3, #1
 800bcd0:	e7cf      	b.n	800bc72 <__ssvfiscanf_r+0x1de>
 800bcd2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bcd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcd8:	9341      	str	r3, [sp, #260]	; 0x104
 800bcda:	2300      	movs	r3, #0
 800bcdc:	e7c9      	b.n	800bc72 <__ssvfiscanf_r+0x1de>
 800bcde:	2302      	movs	r3, #2
 800bce0:	e7c7      	b.n	800bc72 <__ssvfiscanf_r+0x1de>
 800bce2:	9841      	ldr	r0, [sp, #260]	; 0x104
 800bce4:	06c3      	lsls	r3, r0, #27
 800bce6:	f53f aeff 	bmi.w	800bae8 <__ssvfiscanf_r+0x54>
 800bcea:	9b00      	ldr	r3, [sp, #0]
 800bcec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bcee:	1d19      	adds	r1, r3, #4
 800bcf0:	9100      	str	r1, [sp, #0]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	07c0      	lsls	r0, r0, #31
 800bcf6:	bf4c      	ite	mi
 800bcf8:	801a      	strhmi	r2, [r3, #0]
 800bcfa:	601a      	strpl	r2, [r3, #0]
 800bcfc:	e6f4      	b.n	800bae8 <__ssvfiscanf_r+0x54>
 800bcfe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bd00:	4621      	mov	r1, r4
 800bd02:	4630      	mov	r0, r6
 800bd04:	4798      	blx	r3
 800bd06:	2800      	cmp	r0, #0
 800bd08:	d0b7      	beq.n	800bc7a <__ssvfiscanf_r+0x1e6>
 800bd0a:	e79d      	b.n	800bc48 <__ssvfiscanf_r+0x1b4>
 800bd0c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bd0e:	3201      	adds	r2, #1
 800bd10:	9245      	str	r2, [sp, #276]	; 0x114
 800bd12:	6862      	ldr	r2, [r4, #4]
 800bd14:	3a01      	subs	r2, #1
 800bd16:	2a00      	cmp	r2, #0
 800bd18:	6062      	str	r2, [r4, #4]
 800bd1a:	dd02      	ble.n	800bd22 <__ssvfiscanf_r+0x28e>
 800bd1c:	3301      	adds	r3, #1
 800bd1e:	6023      	str	r3, [r4, #0]
 800bd20:	e7ae      	b.n	800bc80 <__ssvfiscanf_r+0x1ec>
 800bd22:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bd24:	4621      	mov	r1, r4
 800bd26:	4630      	mov	r0, r6
 800bd28:	4798      	blx	r3
 800bd2a:	2800      	cmp	r0, #0
 800bd2c:	d0a8      	beq.n	800bc80 <__ssvfiscanf_r+0x1ec>
 800bd2e:	e78b      	b.n	800bc48 <__ssvfiscanf_r+0x1b4>
 800bd30:	2b04      	cmp	r3, #4
 800bd32:	dc06      	bgt.n	800bd42 <__ssvfiscanf_r+0x2ae>
 800bd34:	466b      	mov	r3, sp
 800bd36:	4622      	mov	r2, r4
 800bd38:	a941      	add	r1, sp, #260	; 0x104
 800bd3a:	4630      	mov	r0, r6
 800bd3c:	f000 f87a 	bl	800be34 <_scanf_i>
 800bd40:	e7ac      	b.n	800bc9c <__ssvfiscanf_r+0x208>
 800bd42:	4b0f      	ldr	r3, [pc, #60]	; (800bd80 <__ssvfiscanf_r+0x2ec>)
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	f43f aecf 	beq.w	800bae8 <__ssvfiscanf_r+0x54>
 800bd4a:	466b      	mov	r3, sp
 800bd4c:	4622      	mov	r2, r4
 800bd4e:	a941      	add	r1, sp, #260	; 0x104
 800bd50:	4630      	mov	r0, r6
 800bd52:	f7fc fbcd 	bl	80084f0 <_scanf_float>
 800bd56:	e7a1      	b.n	800bc9c <__ssvfiscanf_r+0x208>
 800bd58:	89a3      	ldrh	r3, [r4, #12]
 800bd5a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bd5e:	bf18      	it	ne
 800bd60:	f04f 30ff 	movne.w	r0, #4294967295
 800bd64:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800bd68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd6c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bd6e:	e7f9      	b.n	800bd64 <__ssvfiscanf_r+0x2d0>
 800bd70:	0800b9e1 	.word	0x0800b9e1
 800bd74:	0800ba5b 	.word	0x0800ba5b
 800bd78:	0800e431 	.word	0x0800e431
 800bd7c:	0800e7aa 	.word	0x0800e7aa
 800bd80:	080084f1 	.word	0x080084f1

0800bd84 <_scanf_chars>:
 800bd84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd88:	4615      	mov	r5, r2
 800bd8a:	688a      	ldr	r2, [r1, #8]
 800bd8c:	4680      	mov	r8, r0
 800bd8e:	460c      	mov	r4, r1
 800bd90:	b932      	cbnz	r2, 800bda0 <_scanf_chars+0x1c>
 800bd92:	698a      	ldr	r2, [r1, #24]
 800bd94:	2a00      	cmp	r2, #0
 800bd96:	bf0c      	ite	eq
 800bd98:	2201      	moveq	r2, #1
 800bd9a:	f04f 32ff 	movne.w	r2, #4294967295
 800bd9e:	608a      	str	r2, [r1, #8]
 800bda0:	6822      	ldr	r2, [r4, #0]
 800bda2:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800be30 <_scanf_chars+0xac>
 800bda6:	06d1      	lsls	r1, r2, #27
 800bda8:	bf5f      	itttt	pl
 800bdaa:	681a      	ldrpl	r2, [r3, #0]
 800bdac:	1d11      	addpl	r1, r2, #4
 800bdae:	6019      	strpl	r1, [r3, #0]
 800bdb0:	6816      	ldrpl	r6, [r2, #0]
 800bdb2:	2700      	movs	r7, #0
 800bdb4:	69a0      	ldr	r0, [r4, #24]
 800bdb6:	b188      	cbz	r0, 800bddc <_scanf_chars+0x58>
 800bdb8:	2801      	cmp	r0, #1
 800bdba:	d107      	bne.n	800bdcc <_scanf_chars+0x48>
 800bdbc:	682b      	ldr	r3, [r5, #0]
 800bdbe:	781a      	ldrb	r2, [r3, #0]
 800bdc0:	6963      	ldr	r3, [r4, #20]
 800bdc2:	5c9b      	ldrb	r3, [r3, r2]
 800bdc4:	b953      	cbnz	r3, 800bddc <_scanf_chars+0x58>
 800bdc6:	bb27      	cbnz	r7, 800be12 <_scanf_chars+0x8e>
 800bdc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdcc:	2802      	cmp	r0, #2
 800bdce:	d120      	bne.n	800be12 <_scanf_chars+0x8e>
 800bdd0:	682b      	ldr	r3, [r5, #0]
 800bdd2:	781b      	ldrb	r3, [r3, #0]
 800bdd4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800bdd8:	071b      	lsls	r3, r3, #28
 800bdda:	d41a      	bmi.n	800be12 <_scanf_chars+0x8e>
 800bddc:	6823      	ldr	r3, [r4, #0]
 800bdde:	06da      	lsls	r2, r3, #27
 800bde0:	bf5e      	ittt	pl
 800bde2:	682b      	ldrpl	r3, [r5, #0]
 800bde4:	781b      	ldrbpl	r3, [r3, #0]
 800bde6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800bdea:	682a      	ldr	r2, [r5, #0]
 800bdec:	686b      	ldr	r3, [r5, #4]
 800bdee:	3201      	adds	r2, #1
 800bdf0:	602a      	str	r2, [r5, #0]
 800bdf2:	68a2      	ldr	r2, [r4, #8]
 800bdf4:	3b01      	subs	r3, #1
 800bdf6:	3a01      	subs	r2, #1
 800bdf8:	606b      	str	r3, [r5, #4]
 800bdfa:	3701      	adds	r7, #1
 800bdfc:	60a2      	str	r2, [r4, #8]
 800bdfe:	b142      	cbz	r2, 800be12 <_scanf_chars+0x8e>
 800be00:	2b00      	cmp	r3, #0
 800be02:	dcd7      	bgt.n	800bdb4 <_scanf_chars+0x30>
 800be04:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800be08:	4629      	mov	r1, r5
 800be0a:	4640      	mov	r0, r8
 800be0c:	4798      	blx	r3
 800be0e:	2800      	cmp	r0, #0
 800be10:	d0d0      	beq.n	800bdb4 <_scanf_chars+0x30>
 800be12:	6823      	ldr	r3, [r4, #0]
 800be14:	f013 0310 	ands.w	r3, r3, #16
 800be18:	d105      	bne.n	800be26 <_scanf_chars+0xa2>
 800be1a:	68e2      	ldr	r2, [r4, #12]
 800be1c:	3201      	adds	r2, #1
 800be1e:	60e2      	str	r2, [r4, #12]
 800be20:	69a2      	ldr	r2, [r4, #24]
 800be22:	b102      	cbz	r2, 800be26 <_scanf_chars+0xa2>
 800be24:	7033      	strb	r3, [r6, #0]
 800be26:	6923      	ldr	r3, [r4, #16]
 800be28:	441f      	add	r7, r3
 800be2a:	6127      	str	r7, [r4, #16]
 800be2c:	2000      	movs	r0, #0
 800be2e:	e7cb      	b.n	800bdc8 <_scanf_chars+0x44>
 800be30:	0800e431 	.word	0x0800e431

0800be34 <_scanf_i>:
 800be34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be38:	4698      	mov	r8, r3
 800be3a:	4b74      	ldr	r3, [pc, #464]	; (800c00c <_scanf_i+0x1d8>)
 800be3c:	460c      	mov	r4, r1
 800be3e:	4682      	mov	sl, r0
 800be40:	4616      	mov	r6, r2
 800be42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800be46:	b087      	sub	sp, #28
 800be48:	ab03      	add	r3, sp, #12
 800be4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800be4e:	4b70      	ldr	r3, [pc, #448]	; (800c010 <_scanf_i+0x1dc>)
 800be50:	69a1      	ldr	r1, [r4, #24]
 800be52:	4a70      	ldr	r2, [pc, #448]	; (800c014 <_scanf_i+0x1e0>)
 800be54:	2903      	cmp	r1, #3
 800be56:	bf18      	it	ne
 800be58:	461a      	movne	r2, r3
 800be5a:	68a3      	ldr	r3, [r4, #8]
 800be5c:	9201      	str	r2, [sp, #4]
 800be5e:	1e5a      	subs	r2, r3, #1
 800be60:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800be64:	bf88      	it	hi
 800be66:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800be6a:	4627      	mov	r7, r4
 800be6c:	bf82      	ittt	hi
 800be6e:	eb03 0905 	addhi.w	r9, r3, r5
 800be72:	f240 135d 	movwhi	r3, #349	; 0x15d
 800be76:	60a3      	strhi	r3, [r4, #8]
 800be78:	f857 3b1c 	ldr.w	r3, [r7], #28
 800be7c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800be80:	bf98      	it	ls
 800be82:	f04f 0900 	movls.w	r9, #0
 800be86:	6023      	str	r3, [r4, #0]
 800be88:	463d      	mov	r5, r7
 800be8a:	f04f 0b00 	mov.w	fp, #0
 800be8e:	6831      	ldr	r1, [r6, #0]
 800be90:	ab03      	add	r3, sp, #12
 800be92:	7809      	ldrb	r1, [r1, #0]
 800be94:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800be98:	2202      	movs	r2, #2
 800be9a:	f7f4 f9a9 	bl	80001f0 <memchr>
 800be9e:	b328      	cbz	r0, 800beec <_scanf_i+0xb8>
 800bea0:	f1bb 0f01 	cmp.w	fp, #1
 800bea4:	d159      	bne.n	800bf5a <_scanf_i+0x126>
 800bea6:	6862      	ldr	r2, [r4, #4]
 800bea8:	b92a      	cbnz	r2, 800beb6 <_scanf_i+0x82>
 800beaa:	6822      	ldr	r2, [r4, #0]
 800beac:	2308      	movs	r3, #8
 800beae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800beb2:	6063      	str	r3, [r4, #4]
 800beb4:	6022      	str	r2, [r4, #0]
 800beb6:	6822      	ldr	r2, [r4, #0]
 800beb8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800bebc:	6022      	str	r2, [r4, #0]
 800bebe:	68a2      	ldr	r2, [r4, #8]
 800bec0:	1e51      	subs	r1, r2, #1
 800bec2:	60a1      	str	r1, [r4, #8]
 800bec4:	b192      	cbz	r2, 800beec <_scanf_i+0xb8>
 800bec6:	6832      	ldr	r2, [r6, #0]
 800bec8:	1c51      	adds	r1, r2, #1
 800beca:	6031      	str	r1, [r6, #0]
 800becc:	7812      	ldrb	r2, [r2, #0]
 800bece:	f805 2b01 	strb.w	r2, [r5], #1
 800bed2:	6872      	ldr	r2, [r6, #4]
 800bed4:	3a01      	subs	r2, #1
 800bed6:	2a00      	cmp	r2, #0
 800bed8:	6072      	str	r2, [r6, #4]
 800beda:	dc07      	bgt.n	800beec <_scanf_i+0xb8>
 800bedc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800bee0:	4631      	mov	r1, r6
 800bee2:	4650      	mov	r0, sl
 800bee4:	4790      	blx	r2
 800bee6:	2800      	cmp	r0, #0
 800bee8:	f040 8085 	bne.w	800bff6 <_scanf_i+0x1c2>
 800beec:	f10b 0b01 	add.w	fp, fp, #1
 800bef0:	f1bb 0f03 	cmp.w	fp, #3
 800bef4:	d1cb      	bne.n	800be8e <_scanf_i+0x5a>
 800bef6:	6863      	ldr	r3, [r4, #4]
 800bef8:	b90b      	cbnz	r3, 800befe <_scanf_i+0xca>
 800befa:	230a      	movs	r3, #10
 800befc:	6063      	str	r3, [r4, #4]
 800befe:	6863      	ldr	r3, [r4, #4]
 800bf00:	4945      	ldr	r1, [pc, #276]	; (800c018 <_scanf_i+0x1e4>)
 800bf02:	6960      	ldr	r0, [r4, #20]
 800bf04:	1ac9      	subs	r1, r1, r3
 800bf06:	f000 f8b3 	bl	800c070 <__sccl>
 800bf0a:	f04f 0b00 	mov.w	fp, #0
 800bf0e:	68a3      	ldr	r3, [r4, #8]
 800bf10:	6822      	ldr	r2, [r4, #0]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d03d      	beq.n	800bf92 <_scanf_i+0x15e>
 800bf16:	6831      	ldr	r1, [r6, #0]
 800bf18:	6960      	ldr	r0, [r4, #20]
 800bf1a:	f891 c000 	ldrb.w	ip, [r1]
 800bf1e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800bf22:	2800      	cmp	r0, #0
 800bf24:	d035      	beq.n	800bf92 <_scanf_i+0x15e>
 800bf26:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800bf2a:	d124      	bne.n	800bf76 <_scanf_i+0x142>
 800bf2c:	0510      	lsls	r0, r2, #20
 800bf2e:	d522      	bpl.n	800bf76 <_scanf_i+0x142>
 800bf30:	f10b 0b01 	add.w	fp, fp, #1
 800bf34:	f1b9 0f00 	cmp.w	r9, #0
 800bf38:	d003      	beq.n	800bf42 <_scanf_i+0x10e>
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	f109 39ff 	add.w	r9, r9, #4294967295
 800bf40:	60a3      	str	r3, [r4, #8]
 800bf42:	6873      	ldr	r3, [r6, #4]
 800bf44:	3b01      	subs	r3, #1
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	6073      	str	r3, [r6, #4]
 800bf4a:	dd1b      	ble.n	800bf84 <_scanf_i+0x150>
 800bf4c:	6833      	ldr	r3, [r6, #0]
 800bf4e:	3301      	adds	r3, #1
 800bf50:	6033      	str	r3, [r6, #0]
 800bf52:	68a3      	ldr	r3, [r4, #8]
 800bf54:	3b01      	subs	r3, #1
 800bf56:	60a3      	str	r3, [r4, #8]
 800bf58:	e7d9      	b.n	800bf0e <_scanf_i+0xda>
 800bf5a:	f1bb 0f02 	cmp.w	fp, #2
 800bf5e:	d1ae      	bne.n	800bebe <_scanf_i+0x8a>
 800bf60:	6822      	ldr	r2, [r4, #0]
 800bf62:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800bf66:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800bf6a:	d1bf      	bne.n	800beec <_scanf_i+0xb8>
 800bf6c:	2310      	movs	r3, #16
 800bf6e:	6063      	str	r3, [r4, #4]
 800bf70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bf74:	e7a2      	b.n	800bebc <_scanf_i+0x88>
 800bf76:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800bf7a:	6022      	str	r2, [r4, #0]
 800bf7c:	780b      	ldrb	r3, [r1, #0]
 800bf7e:	f805 3b01 	strb.w	r3, [r5], #1
 800bf82:	e7de      	b.n	800bf42 <_scanf_i+0x10e>
 800bf84:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bf88:	4631      	mov	r1, r6
 800bf8a:	4650      	mov	r0, sl
 800bf8c:	4798      	blx	r3
 800bf8e:	2800      	cmp	r0, #0
 800bf90:	d0df      	beq.n	800bf52 <_scanf_i+0x11e>
 800bf92:	6823      	ldr	r3, [r4, #0]
 800bf94:	05d9      	lsls	r1, r3, #23
 800bf96:	d50d      	bpl.n	800bfb4 <_scanf_i+0x180>
 800bf98:	42bd      	cmp	r5, r7
 800bf9a:	d909      	bls.n	800bfb0 <_scanf_i+0x17c>
 800bf9c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bfa0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bfa4:	4632      	mov	r2, r6
 800bfa6:	4650      	mov	r0, sl
 800bfa8:	4798      	blx	r3
 800bfaa:	f105 39ff 	add.w	r9, r5, #4294967295
 800bfae:	464d      	mov	r5, r9
 800bfb0:	42bd      	cmp	r5, r7
 800bfb2:	d028      	beq.n	800c006 <_scanf_i+0x1d2>
 800bfb4:	6822      	ldr	r2, [r4, #0]
 800bfb6:	f012 0210 	ands.w	r2, r2, #16
 800bfba:	d113      	bne.n	800bfe4 <_scanf_i+0x1b0>
 800bfbc:	702a      	strb	r2, [r5, #0]
 800bfbe:	6863      	ldr	r3, [r4, #4]
 800bfc0:	9e01      	ldr	r6, [sp, #4]
 800bfc2:	4639      	mov	r1, r7
 800bfc4:	4650      	mov	r0, sl
 800bfc6:	47b0      	blx	r6
 800bfc8:	f8d8 3000 	ldr.w	r3, [r8]
 800bfcc:	6821      	ldr	r1, [r4, #0]
 800bfce:	1d1a      	adds	r2, r3, #4
 800bfd0:	f8c8 2000 	str.w	r2, [r8]
 800bfd4:	f011 0f20 	tst.w	r1, #32
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	d00f      	beq.n	800bffc <_scanf_i+0x1c8>
 800bfdc:	6018      	str	r0, [r3, #0]
 800bfde:	68e3      	ldr	r3, [r4, #12]
 800bfe0:	3301      	adds	r3, #1
 800bfe2:	60e3      	str	r3, [r4, #12]
 800bfe4:	1bed      	subs	r5, r5, r7
 800bfe6:	44ab      	add	fp, r5
 800bfe8:	6925      	ldr	r5, [r4, #16]
 800bfea:	445d      	add	r5, fp
 800bfec:	6125      	str	r5, [r4, #16]
 800bfee:	2000      	movs	r0, #0
 800bff0:	b007      	add	sp, #28
 800bff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bff6:	f04f 0b00 	mov.w	fp, #0
 800bffa:	e7ca      	b.n	800bf92 <_scanf_i+0x15e>
 800bffc:	07ca      	lsls	r2, r1, #31
 800bffe:	bf4c      	ite	mi
 800c000:	8018      	strhmi	r0, [r3, #0]
 800c002:	6018      	strpl	r0, [r3, #0]
 800c004:	e7eb      	b.n	800bfde <_scanf_i+0x1aa>
 800c006:	2001      	movs	r0, #1
 800c008:	e7f2      	b.n	800bff0 <_scanf_i+0x1bc>
 800c00a:	bf00      	nop
 800c00c:	0800ce4c 	.word	0x0800ce4c
 800c010:	0800c1dd 	.word	0x0800c1dd
 800c014:	080097c9 	.word	0x080097c9
 800c018:	0800e7ce 	.word	0x0800e7ce

0800c01c <_read_r>:
 800c01c:	b538      	push	{r3, r4, r5, lr}
 800c01e:	4d07      	ldr	r5, [pc, #28]	; (800c03c <_read_r+0x20>)
 800c020:	4604      	mov	r4, r0
 800c022:	4608      	mov	r0, r1
 800c024:	4611      	mov	r1, r2
 800c026:	2200      	movs	r2, #0
 800c028:	602a      	str	r2, [r5, #0]
 800c02a:	461a      	mov	r2, r3
 800c02c:	f7f6 f8da 	bl	80021e4 <_read>
 800c030:	1c43      	adds	r3, r0, #1
 800c032:	d102      	bne.n	800c03a <_read_r+0x1e>
 800c034:	682b      	ldr	r3, [r5, #0]
 800c036:	b103      	cbz	r3, 800c03a <_read_r+0x1e>
 800c038:	6023      	str	r3, [r4, #0]
 800c03a:	bd38      	pop	{r3, r4, r5, pc}
 800c03c:	20005028 	.word	0x20005028

0800c040 <nan>:
 800c040:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c048 <nan+0x8>
 800c044:	4770      	bx	lr
 800c046:	bf00      	nop
 800c048:	00000000 	.word	0x00000000
 800c04c:	7ff80000 	.word	0x7ff80000

0800c050 <_sbrk_r>:
 800c050:	b538      	push	{r3, r4, r5, lr}
 800c052:	4d06      	ldr	r5, [pc, #24]	; (800c06c <_sbrk_r+0x1c>)
 800c054:	2300      	movs	r3, #0
 800c056:	4604      	mov	r4, r0
 800c058:	4608      	mov	r0, r1
 800c05a:	602b      	str	r3, [r5, #0]
 800c05c:	f7f6 f930 	bl	80022c0 <_sbrk>
 800c060:	1c43      	adds	r3, r0, #1
 800c062:	d102      	bne.n	800c06a <_sbrk_r+0x1a>
 800c064:	682b      	ldr	r3, [r5, #0]
 800c066:	b103      	cbz	r3, 800c06a <_sbrk_r+0x1a>
 800c068:	6023      	str	r3, [r4, #0]
 800c06a:	bd38      	pop	{r3, r4, r5, pc}
 800c06c:	20005028 	.word	0x20005028

0800c070 <__sccl>:
 800c070:	b570      	push	{r4, r5, r6, lr}
 800c072:	780b      	ldrb	r3, [r1, #0]
 800c074:	4604      	mov	r4, r0
 800c076:	2b5e      	cmp	r3, #94	; 0x5e
 800c078:	bf0b      	itete	eq
 800c07a:	784b      	ldrbeq	r3, [r1, #1]
 800c07c:	1c48      	addne	r0, r1, #1
 800c07e:	1c88      	addeq	r0, r1, #2
 800c080:	2200      	movne	r2, #0
 800c082:	bf08      	it	eq
 800c084:	2201      	moveq	r2, #1
 800c086:	1e61      	subs	r1, r4, #1
 800c088:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c08c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c090:	42a9      	cmp	r1, r5
 800c092:	d1fb      	bne.n	800c08c <__sccl+0x1c>
 800c094:	b90b      	cbnz	r3, 800c09a <__sccl+0x2a>
 800c096:	3801      	subs	r0, #1
 800c098:	bd70      	pop	{r4, r5, r6, pc}
 800c09a:	f082 0101 	eor.w	r1, r2, #1
 800c09e:	54e1      	strb	r1, [r4, r3]
 800c0a0:	1c42      	adds	r2, r0, #1
 800c0a2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800c0a6:	2d2d      	cmp	r5, #45	; 0x2d
 800c0a8:	f102 36ff 	add.w	r6, r2, #4294967295
 800c0ac:	4610      	mov	r0, r2
 800c0ae:	d006      	beq.n	800c0be <__sccl+0x4e>
 800c0b0:	2d5d      	cmp	r5, #93	; 0x5d
 800c0b2:	d0f1      	beq.n	800c098 <__sccl+0x28>
 800c0b4:	b90d      	cbnz	r5, 800c0ba <__sccl+0x4a>
 800c0b6:	4630      	mov	r0, r6
 800c0b8:	e7ee      	b.n	800c098 <__sccl+0x28>
 800c0ba:	462b      	mov	r3, r5
 800c0bc:	e7ef      	b.n	800c09e <__sccl+0x2e>
 800c0be:	7816      	ldrb	r6, [r2, #0]
 800c0c0:	2e5d      	cmp	r6, #93	; 0x5d
 800c0c2:	d0fa      	beq.n	800c0ba <__sccl+0x4a>
 800c0c4:	42b3      	cmp	r3, r6
 800c0c6:	dcf8      	bgt.n	800c0ba <__sccl+0x4a>
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3001      	adds	r0, #1
 800c0cc:	4286      	cmp	r6, r0
 800c0ce:	5421      	strb	r1, [r4, r0]
 800c0d0:	dcfb      	bgt.n	800c0ca <__sccl+0x5a>
 800c0d2:	43d8      	mvns	r0, r3
 800c0d4:	4430      	add	r0, r6
 800c0d6:	1c5d      	adds	r5, r3, #1
 800c0d8:	42b3      	cmp	r3, r6
 800c0da:	bfa8      	it	ge
 800c0dc:	2000      	movge	r0, #0
 800c0de:	182b      	adds	r3, r5, r0
 800c0e0:	3202      	adds	r2, #2
 800c0e2:	e7de      	b.n	800c0a2 <__sccl+0x32>

0800c0e4 <_strtoul_l.isra.0>:
 800c0e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c0e8:	4e3b      	ldr	r6, [pc, #236]	; (800c1d8 <_strtoul_l.isra.0+0xf4>)
 800c0ea:	4686      	mov	lr, r0
 800c0ec:	468c      	mov	ip, r1
 800c0ee:	4660      	mov	r0, ip
 800c0f0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c0f4:	5da5      	ldrb	r5, [r4, r6]
 800c0f6:	f015 0508 	ands.w	r5, r5, #8
 800c0fa:	d1f8      	bne.n	800c0ee <_strtoul_l.isra.0+0xa>
 800c0fc:	2c2d      	cmp	r4, #45	; 0x2d
 800c0fe:	d134      	bne.n	800c16a <_strtoul_l.isra.0+0x86>
 800c100:	f89c 4000 	ldrb.w	r4, [ip]
 800c104:	f04f 0801 	mov.w	r8, #1
 800c108:	f100 0c02 	add.w	ip, r0, #2
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d05e      	beq.n	800c1ce <_strtoul_l.isra.0+0xea>
 800c110:	2b10      	cmp	r3, #16
 800c112:	d10c      	bne.n	800c12e <_strtoul_l.isra.0+0x4a>
 800c114:	2c30      	cmp	r4, #48	; 0x30
 800c116:	d10a      	bne.n	800c12e <_strtoul_l.isra.0+0x4a>
 800c118:	f89c 0000 	ldrb.w	r0, [ip]
 800c11c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c120:	2858      	cmp	r0, #88	; 0x58
 800c122:	d14f      	bne.n	800c1c4 <_strtoul_l.isra.0+0xe0>
 800c124:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800c128:	2310      	movs	r3, #16
 800c12a:	f10c 0c02 	add.w	ip, ip, #2
 800c12e:	f04f 37ff 	mov.w	r7, #4294967295
 800c132:	2500      	movs	r5, #0
 800c134:	fbb7 f7f3 	udiv	r7, r7, r3
 800c138:	fb03 f907 	mul.w	r9, r3, r7
 800c13c:	ea6f 0909 	mvn.w	r9, r9
 800c140:	4628      	mov	r0, r5
 800c142:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800c146:	2e09      	cmp	r6, #9
 800c148:	d818      	bhi.n	800c17c <_strtoul_l.isra.0+0x98>
 800c14a:	4634      	mov	r4, r6
 800c14c:	42a3      	cmp	r3, r4
 800c14e:	dd24      	ble.n	800c19a <_strtoul_l.isra.0+0xb6>
 800c150:	2d00      	cmp	r5, #0
 800c152:	db1f      	blt.n	800c194 <_strtoul_l.isra.0+0xb0>
 800c154:	4287      	cmp	r7, r0
 800c156:	d31d      	bcc.n	800c194 <_strtoul_l.isra.0+0xb0>
 800c158:	d101      	bne.n	800c15e <_strtoul_l.isra.0+0x7a>
 800c15a:	45a1      	cmp	r9, r4
 800c15c:	db1a      	blt.n	800c194 <_strtoul_l.isra.0+0xb0>
 800c15e:	fb00 4003 	mla	r0, r0, r3, r4
 800c162:	2501      	movs	r5, #1
 800c164:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c168:	e7eb      	b.n	800c142 <_strtoul_l.isra.0+0x5e>
 800c16a:	2c2b      	cmp	r4, #43	; 0x2b
 800c16c:	bf08      	it	eq
 800c16e:	f89c 4000 	ldrbeq.w	r4, [ip]
 800c172:	46a8      	mov	r8, r5
 800c174:	bf08      	it	eq
 800c176:	f100 0c02 	addeq.w	ip, r0, #2
 800c17a:	e7c7      	b.n	800c10c <_strtoul_l.isra.0+0x28>
 800c17c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800c180:	2e19      	cmp	r6, #25
 800c182:	d801      	bhi.n	800c188 <_strtoul_l.isra.0+0xa4>
 800c184:	3c37      	subs	r4, #55	; 0x37
 800c186:	e7e1      	b.n	800c14c <_strtoul_l.isra.0+0x68>
 800c188:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800c18c:	2e19      	cmp	r6, #25
 800c18e:	d804      	bhi.n	800c19a <_strtoul_l.isra.0+0xb6>
 800c190:	3c57      	subs	r4, #87	; 0x57
 800c192:	e7db      	b.n	800c14c <_strtoul_l.isra.0+0x68>
 800c194:	f04f 35ff 	mov.w	r5, #4294967295
 800c198:	e7e4      	b.n	800c164 <_strtoul_l.isra.0+0x80>
 800c19a:	2d00      	cmp	r5, #0
 800c19c:	da07      	bge.n	800c1ae <_strtoul_l.isra.0+0xca>
 800c19e:	2322      	movs	r3, #34	; 0x22
 800c1a0:	f8ce 3000 	str.w	r3, [lr]
 800c1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a8:	b942      	cbnz	r2, 800c1bc <_strtoul_l.isra.0+0xd8>
 800c1aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1ae:	f1b8 0f00 	cmp.w	r8, #0
 800c1b2:	d000      	beq.n	800c1b6 <_strtoul_l.isra.0+0xd2>
 800c1b4:	4240      	negs	r0, r0
 800c1b6:	2a00      	cmp	r2, #0
 800c1b8:	d0f7      	beq.n	800c1aa <_strtoul_l.isra.0+0xc6>
 800c1ba:	b10d      	cbz	r5, 800c1c0 <_strtoul_l.isra.0+0xdc>
 800c1bc:	f10c 31ff 	add.w	r1, ip, #4294967295
 800c1c0:	6011      	str	r1, [r2, #0]
 800c1c2:	e7f2      	b.n	800c1aa <_strtoul_l.isra.0+0xc6>
 800c1c4:	2430      	movs	r4, #48	; 0x30
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d1b1      	bne.n	800c12e <_strtoul_l.isra.0+0x4a>
 800c1ca:	2308      	movs	r3, #8
 800c1cc:	e7af      	b.n	800c12e <_strtoul_l.isra.0+0x4a>
 800c1ce:	2c30      	cmp	r4, #48	; 0x30
 800c1d0:	d0a2      	beq.n	800c118 <_strtoul_l.isra.0+0x34>
 800c1d2:	230a      	movs	r3, #10
 800c1d4:	e7ab      	b.n	800c12e <_strtoul_l.isra.0+0x4a>
 800c1d6:	bf00      	nop
 800c1d8:	0800e431 	.word	0x0800e431

0800c1dc <_strtoul_r>:
 800c1dc:	f7ff bf82 	b.w	800c0e4 <_strtoul_l.isra.0>

0800c1e0 <__submore>:
 800c1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1e4:	460c      	mov	r4, r1
 800c1e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c1e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c1ec:	4299      	cmp	r1, r3
 800c1ee:	d11d      	bne.n	800c22c <__submore+0x4c>
 800c1f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c1f4:	f7ff fa3e 	bl	800b674 <_malloc_r>
 800c1f8:	b918      	cbnz	r0, 800c202 <__submore+0x22>
 800c1fa:	f04f 30ff 	mov.w	r0, #4294967295
 800c1fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c206:	63a3      	str	r3, [r4, #56]	; 0x38
 800c208:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c20c:	6360      	str	r0, [r4, #52]	; 0x34
 800c20e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c212:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c216:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c21a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c21e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c222:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c226:	6020      	str	r0, [r4, #0]
 800c228:	2000      	movs	r0, #0
 800c22a:	e7e8      	b.n	800c1fe <__submore+0x1e>
 800c22c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c22e:	0077      	lsls	r7, r6, #1
 800c230:	463a      	mov	r2, r7
 800c232:	f000 fa2d 	bl	800c690 <_realloc_r>
 800c236:	4605      	mov	r5, r0
 800c238:	2800      	cmp	r0, #0
 800c23a:	d0de      	beq.n	800c1fa <__submore+0x1a>
 800c23c:	eb00 0806 	add.w	r8, r0, r6
 800c240:	4601      	mov	r1, r0
 800c242:	4632      	mov	r2, r6
 800c244:	4640      	mov	r0, r8
 800c246:	f7fb fcd3 	bl	8007bf0 <memcpy>
 800c24a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c24e:	f8c4 8000 	str.w	r8, [r4]
 800c252:	e7e9      	b.n	800c228 <__submore+0x48>

0800c254 <__ascii_wctomb>:
 800c254:	b149      	cbz	r1, 800c26a <__ascii_wctomb+0x16>
 800c256:	2aff      	cmp	r2, #255	; 0xff
 800c258:	bf85      	ittet	hi
 800c25a:	238a      	movhi	r3, #138	; 0x8a
 800c25c:	6003      	strhi	r3, [r0, #0]
 800c25e:	700a      	strbls	r2, [r1, #0]
 800c260:	f04f 30ff 	movhi.w	r0, #4294967295
 800c264:	bf98      	it	ls
 800c266:	2001      	movls	r0, #1
 800c268:	4770      	bx	lr
 800c26a:	4608      	mov	r0, r1
 800c26c:	4770      	bx	lr
	...

0800c270 <__assert_func>:
 800c270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c272:	4614      	mov	r4, r2
 800c274:	461a      	mov	r2, r3
 800c276:	4b09      	ldr	r3, [pc, #36]	; (800c29c <__assert_func+0x2c>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4605      	mov	r5, r0
 800c27c:	68d8      	ldr	r0, [r3, #12]
 800c27e:	b14c      	cbz	r4, 800c294 <__assert_func+0x24>
 800c280:	4b07      	ldr	r3, [pc, #28]	; (800c2a0 <__assert_func+0x30>)
 800c282:	9100      	str	r1, [sp, #0]
 800c284:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c288:	4906      	ldr	r1, [pc, #24]	; (800c2a4 <__assert_func+0x34>)
 800c28a:	462b      	mov	r3, r5
 800c28c:	f000 f9a6 	bl	800c5dc <fiprintf>
 800c290:	f000 fc3e 	bl	800cb10 <abort>
 800c294:	4b04      	ldr	r3, [pc, #16]	; (800c2a8 <__assert_func+0x38>)
 800c296:	461c      	mov	r4, r3
 800c298:	e7f3      	b.n	800c282 <__assert_func+0x12>
 800c29a:	bf00      	nop
 800c29c:	20000020 	.word	0x20000020
 800c2a0:	0800e7d0 	.word	0x0800e7d0
 800c2a4:	0800e7dd 	.word	0x0800e7dd
 800c2a8:	0800e80b 	.word	0x0800e80b

0800c2ac <__sflush_r>:
 800c2ac:	898a      	ldrh	r2, [r1, #12]
 800c2ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2b2:	4605      	mov	r5, r0
 800c2b4:	0710      	lsls	r0, r2, #28
 800c2b6:	460c      	mov	r4, r1
 800c2b8:	d458      	bmi.n	800c36c <__sflush_r+0xc0>
 800c2ba:	684b      	ldr	r3, [r1, #4]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	dc05      	bgt.n	800c2cc <__sflush_r+0x20>
 800c2c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	dc02      	bgt.n	800c2cc <__sflush_r+0x20>
 800c2c6:	2000      	movs	r0, #0
 800c2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2ce:	2e00      	cmp	r6, #0
 800c2d0:	d0f9      	beq.n	800c2c6 <__sflush_r+0x1a>
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c2d8:	682f      	ldr	r7, [r5, #0]
 800c2da:	602b      	str	r3, [r5, #0]
 800c2dc:	d032      	beq.n	800c344 <__sflush_r+0x98>
 800c2de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c2e0:	89a3      	ldrh	r3, [r4, #12]
 800c2e2:	075a      	lsls	r2, r3, #29
 800c2e4:	d505      	bpl.n	800c2f2 <__sflush_r+0x46>
 800c2e6:	6863      	ldr	r3, [r4, #4]
 800c2e8:	1ac0      	subs	r0, r0, r3
 800c2ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c2ec:	b10b      	cbz	r3, 800c2f2 <__sflush_r+0x46>
 800c2ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c2f0:	1ac0      	subs	r0, r0, r3
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2f8:	6a21      	ldr	r1, [r4, #32]
 800c2fa:	4628      	mov	r0, r5
 800c2fc:	47b0      	blx	r6
 800c2fe:	1c43      	adds	r3, r0, #1
 800c300:	89a3      	ldrh	r3, [r4, #12]
 800c302:	d106      	bne.n	800c312 <__sflush_r+0x66>
 800c304:	6829      	ldr	r1, [r5, #0]
 800c306:	291d      	cmp	r1, #29
 800c308:	d82c      	bhi.n	800c364 <__sflush_r+0xb8>
 800c30a:	4a2a      	ldr	r2, [pc, #168]	; (800c3b4 <__sflush_r+0x108>)
 800c30c:	40ca      	lsrs	r2, r1
 800c30e:	07d6      	lsls	r6, r2, #31
 800c310:	d528      	bpl.n	800c364 <__sflush_r+0xb8>
 800c312:	2200      	movs	r2, #0
 800c314:	6062      	str	r2, [r4, #4]
 800c316:	04d9      	lsls	r1, r3, #19
 800c318:	6922      	ldr	r2, [r4, #16]
 800c31a:	6022      	str	r2, [r4, #0]
 800c31c:	d504      	bpl.n	800c328 <__sflush_r+0x7c>
 800c31e:	1c42      	adds	r2, r0, #1
 800c320:	d101      	bne.n	800c326 <__sflush_r+0x7a>
 800c322:	682b      	ldr	r3, [r5, #0]
 800c324:	b903      	cbnz	r3, 800c328 <__sflush_r+0x7c>
 800c326:	6560      	str	r0, [r4, #84]	; 0x54
 800c328:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c32a:	602f      	str	r7, [r5, #0]
 800c32c:	2900      	cmp	r1, #0
 800c32e:	d0ca      	beq.n	800c2c6 <__sflush_r+0x1a>
 800c330:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c334:	4299      	cmp	r1, r3
 800c336:	d002      	beq.n	800c33e <__sflush_r+0x92>
 800c338:	4628      	mov	r0, r5
 800c33a:	f7ff f94b 	bl	800b5d4 <_free_r>
 800c33e:	2000      	movs	r0, #0
 800c340:	6360      	str	r0, [r4, #52]	; 0x34
 800c342:	e7c1      	b.n	800c2c8 <__sflush_r+0x1c>
 800c344:	6a21      	ldr	r1, [r4, #32]
 800c346:	2301      	movs	r3, #1
 800c348:	4628      	mov	r0, r5
 800c34a:	47b0      	blx	r6
 800c34c:	1c41      	adds	r1, r0, #1
 800c34e:	d1c7      	bne.n	800c2e0 <__sflush_r+0x34>
 800c350:	682b      	ldr	r3, [r5, #0]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d0c4      	beq.n	800c2e0 <__sflush_r+0x34>
 800c356:	2b1d      	cmp	r3, #29
 800c358:	d001      	beq.n	800c35e <__sflush_r+0xb2>
 800c35a:	2b16      	cmp	r3, #22
 800c35c:	d101      	bne.n	800c362 <__sflush_r+0xb6>
 800c35e:	602f      	str	r7, [r5, #0]
 800c360:	e7b1      	b.n	800c2c6 <__sflush_r+0x1a>
 800c362:	89a3      	ldrh	r3, [r4, #12]
 800c364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c368:	81a3      	strh	r3, [r4, #12]
 800c36a:	e7ad      	b.n	800c2c8 <__sflush_r+0x1c>
 800c36c:	690f      	ldr	r7, [r1, #16]
 800c36e:	2f00      	cmp	r7, #0
 800c370:	d0a9      	beq.n	800c2c6 <__sflush_r+0x1a>
 800c372:	0793      	lsls	r3, r2, #30
 800c374:	680e      	ldr	r6, [r1, #0]
 800c376:	bf08      	it	eq
 800c378:	694b      	ldreq	r3, [r1, #20]
 800c37a:	600f      	str	r7, [r1, #0]
 800c37c:	bf18      	it	ne
 800c37e:	2300      	movne	r3, #0
 800c380:	eba6 0807 	sub.w	r8, r6, r7
 800c384:	608b      	str	r3, [r1, #8]
 800c386:	f1b8 0f00 	cmp.w	r8, #0
 800c38a:	dd9c      	ble.n	800c2c6 <__sflush_r+0x1a>
 800c38c:	6a21      	ldr	r1, [r4, #32]
 800c38e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c390:	4643      	mov	r3, r8
 800c392:	463a      	mov	r2, r7
 800c394:	4628      	mov	r0, r5
 800c396:	47b0      	blx	r6
 800c398:	2800      	cmp	r0, #0
 800c39a:	dc06      	bgt.n	800c3aa <__sflush_r+0xfe>
 800c39c:	89a3      	ldrh	r3, [r4, #12]
 800c39e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3a2:	81a3      	strh	r3, [r4, #12]
 800c3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3a8:	e78e      	b.n	800c2c8 <__sflush_r+0x1c>
 800c3aa:	4407      	add	r7, r0
 800c3ac:	eba8 0800 	sub.w	r8, r8, r0
 800c3b0:	e7e9      	b.n	800c386 <__sflush_r+0xda>
 800c3b2:	bf00      	nop
 800c3b4:	20400001 	.word	0x20400001

0800c3b8 <_fflush_r>:
 800c3b8:	b538      	push	{r3, r4, r5, lr}
 800c3ba:	690b      	ldr	r3, [r1, #16]
 800c3bc:	4605      	mov	r5, r0
 800c3be:	460c      	mov	r4, r1
 800c3c0:	b913      	cbnz	r3, 800c3c8 <_fflush_r+0x10>
 800c3c2:	2500      	movs	r5, #0
 800c3c4:	4628      	mov	r0, r5
 800c3c6:	bd38      	pop	{r3, r4, r5, pc}
 800c3c8:	b118      	cbz	r0, 800c3d2 <_fflush_r+0x1a>
 800c3ca:	6983      	ldr	r3, [r0, #24]
 800c3cc:	b90b      	cbnz	r3, 800c3d2 <_fflush_r+0x1a>
 800c3ce:	f000 f887 	bl	800c4e0 <__sinit>
 800c3d2:	4b14      	ldr	r3, [pc, #80]	; (800c424 <_fflush_r+0x6c>)
 800c3d4:	429c      	cmp	r4, r3
 800c3d6:	d11b      	bne.n	800c410 <_fflush_r+0x58>
 800c3d8:	686c      	ldr	r4, [r5, #4]
 800c3da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d0ef      	beq.n	800c3c2 <_fflush_r+0xa>
 800c3e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c3e4:	07d0      	lsls	r0, r2, #31
 800c3e6:	d404      	bmi.n	800c3f2 <_fflush_r+0x3a>
 800c3e8:	0599      	lsls	r1, r3, #22
 800c3ea:	d402      	bmi.n	800c3f2 <_fflush_r+0x3a>
 800c3ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3ee:	f000 f927 	bl	800c640 <__retarget_lock_acquire_recursive>
 800c3f2:	4628      	mov	r0, r5
 800c3f4:	4621      	mov	r1, r4
 800c3f6:	f7ff ff59 	bl	800c2ac <__sflush_r>
 800c3fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c3fc:	07da      	lsls	r2, r3, #31
 800c3fe:	4605      	mov	r5, r0
 800c400:	d4e0      	bmi.n	800c3c4 <_fflush_r+0xc>
 800c402:	89a3      	ldrh	r3, [r4, #12]
 800c404:	059b      	lsls	r3, r3, #22
 800c406:	d4dd      	bmi.n	800c3c4 <_fflush_r+0xc>
 800c408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c40a:	f000 f91a 	bl	800c642 <__retarget_lock_release_recursive>
 800c40e:	e7d9      	b.n	800c3c4 <_fflush_r+0xc>
 800c410:	4b05      	ldr	r3, [pc, #20]	; (800c428 <_fflush_r+0x70>)
 800c412:	429c      	cmp	r4, r3
 800c414:	d101      	bne.n	800c41a <_fflush_r+0x62>
 800c416:	68ac      	ldr	r4, [r5, #8]
 800c418:	e7df      	b.n	800c3da <_fflush_r+0x22>
 800c41a:	4b04      	ldr	r3, [pc, #16]	; (800c42c <_fflush_r+0x74>)
 800c41c:	429c      	cmp	r4, r3
 800c41e:	bf08      	it	eq
 800c420:	68ec      	ldreq	r4, [r5, #12]
 800c422:	e7da      	b.n	800c3da <_fflush_r+0x22>
 800c424:	0800e82c 	.word	0x0800e82c
 800c428:	0800e84c 	.word	0x0800e84c
 800c42c:	0800e80c 	.word	0x0800e80c

0800c430 <std>:
 800c430:	2300      	movs	r3, #0
 800c432:	b510      	push	{r4, lr}
 800c434:	4604      	mov	r4, r0
 800c436:	e9c0 3300 	strd	r3, r3, [r0]
 800c43a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c43e:	6083      	str	r3, [r0, #8]
 800c440:	8181      	strh	r1, [r0, #12]
 800c442:	6643      	str	r3, [r0, #100]	; 0x64
 800c444:	81c2      	strh	r2, [r0, #14]
 800c446:	6183      	str	r3, [r0, #24]
 800c448:	4619      	mov	r1, r3
 800c44a:	2208      	movs	r2, #8
 800c44c:	305c      	adds	r0, #92	; 0x5c
 800c44e:	f7fb fbdd 	bl	8007c0c <memset>
 800c452:	4b05      	ldr	r3, [pc, #20]	; (800c468 <std+0x38>)
 800c454:	6263      	str	r3, [r4, #36]	; 0x24
 800c456:	4b05      	ldr	r3, [pc, #20]	; (800c46c <std+0x3c>)
 800c458:	62a3      	str	r3, [r4, #40]	; 0x28
 800c45a:	4b05      	ldr	r3, [pc, #20]	; (800c470 <std+0x40>)
 800c45c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c45e:	4b05      	ldr	r3, [pc, #20]	; (800c474 <std+0x44>)
 800c460:	6224      	str	r4, [r4, #32]
 800c462:	6323      	str	r3, [r4, #48]	; 0x30
 800c464:	bd10      	pop	{r4, pc}
 800c466:	bf00      	nop
 800c468:	080089b5 	.word	0x080089b5
 800c46c:	080089db 	.word	0x080089db
 800c470:	08008a13 	.word	0x08008a13
 800c474:	08008a37 	.word	0x08008a37

0800c478 <_cleanup_r>:
 800c478:	4901      	ldr	r1, [pc, #4]	; (800c480 <_cleanup_r+0x8>)
 800c47a:	f000 b8c1 	b.w	800c600 <_fwalk_reent>
 800c47e:	bf00      	nop
 800c480:	0800c3b9 	.word	0x0800c3b9

0800c484 <__sfmoreglue>:
 800c484:	b570      	push	{r4, r5, r6, lr}
 800c486:	1e4a      	subs	r2, r1, #1
 800c488:	2568      	movs	r5, #104	; 0x68
 800c48a:	4355      	muls	r5, r2
 800c48c:	460e      	mov	r6, r1
 800c48e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c492:	f7ff f8ef 	bl	800b674 <_malloc_r>
 800c496:	4604      	mov	r4, r0
 800c498:	b140      	cbz	r0, 800c4ac <__sfmoreglue+0x28>
 800c49a:	2100      	movs	r1, #0
 800c49c:	e9c0 1600 	strd	r1, r6, [r0]
 800c4a0:	300c      	adds	r0, #12
 800c4a2:	60a0      	str	r0, [r4, #8]
 800c4a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c4a8:	f7fb fbb0 	bl	8007c0c <memset>
 800c4ac:	4620      	mov	r0, r4
 800c4ae:	bd70      	pop	{r4, r5, r6, pc}

0800c4b0 <__sfp_lock_acquire>:
 800c4b0:	4801      	ldr	r0, [pc, #4]	; (800c4b8 <__sfp_lock_acquire+0x8>)
 800c4b2:	f000 b8c5 	b.w	800c640 <__retarget_lock_acquire_recursive>
 800c4b6:	bf00      	nop
 800c4b8:	20005034 	.word	0x20005034

0800c4bc <__sfp_lock_release>:
 800c4bc:	4801      	ldr	r0, [pc, #4]	; (800c4c4 <__sfp_lock_release+0x8>)
 800c4be:	f000 b8c0 	b.w	800c642 <__retarget_lock_release_recursive>
 800c4c2:	bf00      	nop
 800c4c4:	20005034 	.word	0x20005034

0800c4c8 <__sinit_lock_acquire>:
 800c4c8:	4801      	ldr	r0, [pc, #4]	; (800c4d0 <__sinit_lock_acquire+0x8>)
 800c4ca:	f000 b8b9 	b.w	800c640 <__retarget_lock_acquire_recursive>
 800c4ce:	bf00      	nop
 800c4d0:	2000502f 	.word	0x2000502f

0800c4d4 <__sinit_lock_release>:
 800c4d4:	4801      	ldr	r0, [pc, #4]	; (800c4dc <__sinit_lock_release+0x8>)
 800c4d6:	f000 b8b4 	b.w	800c642 <__retarget_lock_release_recursive>
 800c4da:	bf00      	nop
 800c4dc:	2000502f 	.word	0x2000502f

0800c4e0 <__sinit>:
 800c4e0:	b510      	push	{r4, lr}
 800c4e2:	4604      	mov	r4, r0
 800c4e4:	f7ff fff0 	bl	800c4c8 <__sinit_lock_acquire>
 800c4e8:	69a3      	ldr	r3, [r4, #24]
 800c4ea:	b11b      	cbz	r3, 800c4f4 <__sinit+0x14>
 800c4ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4f0:	f7ff bff0 	b.w	800c4d4 <__sinit_lock_release>
 800c4f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c4f8:	6523      	str	r3, [r4, #80]	; 0x50
 800c4fa:	4b13      	ldr	r3, [pc, #76]	; (800c548 <__sinit+0x68>)
 800c4fc:	4a13      	ldr	r2, [pc, #76]	; (800c54c <__sinit+0x6c>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	62a2      	str	r2, [r4, #40]	; 0x28
 800c502:	42a3      	cmp	r3, r4
 800c504:	bf04      	itt	eq
 800c506:	2301      	moveq	r3, #1
 800c508:	61a3      	streq	r3, [r4, #24]
 800c50a:	4620      	mov	r0, r4
 800c50c:	f000 f820 	bl	800c550 <__sfp>
 800c510:	6060      	str	r0, [r4, #4]
 800c512:	4620      	mov	r0, r4
 800c514:	f000 f81c 	bl	800c550 <__sfp>
 800c518:	60a0      	str	r0, [r4, #8]
 800c51a:	4620      	mov	r0, r4
 800c51c:	f000 f818 	bl	800c550 <__sfp>
 800c520:	2200      	movs	r2, #0
 800c522:	60e0      	str	r0, [r4, #12]
 800c524:	2104      	movs	r1, #4
 800c526:	6860      	ldr	r0, [r4, #4]
 800c528:	f7ff ff82 	bl	800c430 <std>
 800c52c:	68a0      	ldr	r0, [r4, #8]
 800c52e:	2201      	movs	r2, #1
 800c530:	2109      	movs	r1, #9
 800c532:	f7ff ff7d 	bl	800c430 <std>
 800c536:	68e0      	ldr	r0, [r4, #12]
 800c538:	2202      	movs	r2, #2
 800c53a:	2112      	movs	r1, #18
 800c53c:	f7ff ff78 	bl	800c430 <std>
 800c540:	2301      	movs	r3, #1
 800c542:	61a3      	str	r3, [r4, #24]
 800c544:	e7d2      	b.n	800c4ec <__sinit+0xc>
 800c546:	bf00      	nop
 800c548:	0800e3a4 	.word	0x0800e3a4
 800c54c:	0800c479 	.word	0x0800c479

0800c550 <__sfp>:
 800c550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c552:	4607      	mov	r7, r0
 800c554:	f7ff ffac 	bl	800c4b0 <__sfp_lock_acquire>
 800c558:	4b1e      	ldr	r3, [pc, #120]	; (800c5d4 <__sfp+0x84>)
 800c55a:	681e      	ldr	r6, [r3, #0]
 800c55c:	69b3      	ldr	r3, [r6, #24]
 800c55e:	b913      	cbnz	r3, 800c566 <__sfp+0x16>
 800c560:	4630      	mov	r0, r6
 800c562:	f7ff ffbd 	bl	800c4e0 <__sinit>
 800c566:	3648      	adds	r6, #72	; 0x48
 800c568:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c56c:	3b01      	subs	r3, #1
 800c56e:	d503      	bpl.n	800c578 <__sfp+0x28>
 800c570:	6833      	ldr	r3, [r6, #0]
 800c572:	b30b      	cbz	r3, 800c5b8 <__sfp+0x68>
 800c574:	6836      	ldr	r6, [r6, #0]
 800c576:	e7f7      	b.n	800c568 <__sfp+0x18>
 800c578:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c57c:	b9d5      	cbnz	r5, 800c5b4 <__sfp+0x64>
 800c57e:	4b16      	ldr	r3, [pc, #88]	; (800c5d8 <__sfp+0x88>)
 800c580:	60e3      	str	r3, [r4, #12]
 800c582:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c586:	6665      	str	r5, [r4, #100]	; 0x64
 800c588:	f000 f859 	bl	800c63e <__retarget_lock_init_recursive>
 800c58c:	f7ff ff96 	bl	800c4bc <__sfp_lock_release>
 800c590:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c594:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c598:	6025      	str	r5, [r4, #0]
 800c59a:	61a5      	str	r5, [r4, #24]
 800c59c:	2208      	movs	r2, #8
 800c59e:	4629      	mov	r1, r5
 800c5a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c5a4:	f7fb fb32 	bl	8007c0c <memset>
 800c5a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c5ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5b4:	3468      	adds	r4, #104	; 0x68
 800c5b6:	e7d9      	b.n	800c56c <__sfp+0x1c>
 800c5b8:	2104      	movs	r1, #4
 800c5ba:	4638      	mov	r0, r7
 800c5bc:	f7ff ff62 	bl	800c484 <__sfmoreglue>
 800c5c0:	4604      	mov	r4, r0
 800c5c2:	6030      	str	r0, [r6, #0]
 800c5c4:	2800      	cmp	r0, #0
 800c5c6:	d1d5      	bne.n	800c574 <__sfp+0x24>
 800c5c8:	f7ff ff78 	bl	800c4bc <__sfp_lock_release>
 800c5cc:	230c      	movs	r3, #12
 800c5ce:	603b      	str	r3, [r7, #0]
 800c5d0:	e7ee      	b.n	800c5b0 <__sfp+0x60>
 800c5d2:	bf00      	nop
 800c5d4:	0800e3a4 	.word	0x0800e3a4
 800c5d8:	ffff0001 	.word	0xffff0001

0800c5dc <fiprintf>:
 800c5dc:	b40e      	push	{r1, r2, r3}
 800c5de:	b503      	push	{r0, r1, lr}
 800c5e0:	4601      	mov	r1, r0
 800c5e2:	ab03      	add	r3, sp, #12
 800c5e4:	4805      	ldr	r0, [pc, #20]	; (800c5fc <fiprintf+0x20>)
 800c5e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5ea:	6800      	ldr	r0, [r0, #0]
 800c5ec:	9301      	str	r3, [sp, #4]
 800c5ee:	f000 f89f 	bl	800c730 <_vfiprintf_r>
 800c5f2:	b002      	add	sp, #8
 800c5f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5f8:	b003      	add	sp, #12
 800c5fa:	4770      	bx	lr
 800c5fc:	20000020 	.word	0x20000020

0800c600 <_fwalk_reent>:
 800c600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c604:	4606      	mov	r6, r0
 800c606:	4688      	mov	r8, r1
 800c608:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c60c:	2700      	movs	r7, #0
 800c60e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c612:	f1b9 0901 	subs.w	r9, r9, #1
 800c616:	d505      	bpl.n	800c624 <_fwalk_reent+0x24>
 800c618:	6824      	ldr	r4, [r4, #0]
 800c61a:	2c00      	cmp	r4, #0
 800c61c:	d1f7      	bne.n	800c60e <_fwalk_reent+0xe>
 800c61e:	4638      	mov	r0, r7
 800c620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c624:	89ab      	ldrh	r3, [r5, #12]
 800c626:	2b01      	cmp	r3, #1
 800c628:	d907      	bls.n	800c63a <_fwalk_reent+0x3a>
 800c62a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c62e:	3301      	adds	r3, #1
 800c630:	d003      	beq.n	800c63a <_fwalk_reent+0x3a>
 800c632:	4629      	mov	r1, r5
 800c634:	4630      	mov	r0, r6
 800c636:	47c0      	blx	r8
 800c638:	4307      	orrs	r7, r0
 800c63a:	3568      	adds	r5, #104	; 0x68
 800c63c:	e7e9      	b.n	800c612 <_fwalk_reent+0x12>

0800c63e <__retarget_lock_init_recursive>:
 800c63e:	4770      	bx	lr

0800c640 <__retarget_lock_acquire_recursive>:
 800c640:	4770      	bx	lr

0800c642 <__retarget_lock_release_recursive>:
 800c642:	4770      	bx	lr

0800c644 <memmove>:
 800c644:	4288      	cmp	r0, r1
 800c646:	b510      	push	{r4, lr}
 800c648:	eb01 0402 	add.w	r4, r1, r2
 800c64c:	d902      	bls.n	800c654 <memmove+0x10>
 800c64e:	4284      	cmp	r4, r0
 800c650:	4623      	mov	r3, r4
 800c652:	d807      	bhi.n	800c664 <memmove+0x20>
 800c654:	1e43      	subs	r3, r0, #1
 800c656:	42a1      	cmp	r1, r4
 800c658:	d008      	beq.n	800c66c <memmove+0x28>
 800c65a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c65e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c662:	e7f8      	b.n	800c656 <memmove+0x12>
 800c664:	4402      	add	r2, r0
 800c666:	4601      	mov	r1, r0
 800c668:	428a      	cmp	r2, r1
 800c66a:	d100      	bne.n	800c66e <memmove+0x2a>
 800c66c:	bd10      	pop	{r4, pc}
 800c66e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c672:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c676:	e7f7      	b.n	800c668 <memmove+0x24>

0800c678 <__malloc_lock>:
 800c678:	4801      	ldr	r0, [pc, #4]	; (800c680 <__malloc_lock+0x8>)
 800c67a:	f7ff bfe1 	b.w	800c640 <__retarget_lock_acquire_recursive>
 800c67e:	bf00      	nop
 800c680:	20005030 	.word	0x20005030

0800c684 <__malloc_unlock>:
 800c684:	4801      	ldr	r0, [pc, #4]	; (800c68c <__malloc_unlock+0x8>)
 800c686:	f7ff bfdc 	b.w	800c642 <__retarget_lock_release_recursive>
 800c68a:	bf00      	nop
 800c68c:	20005030 	.word	0x20005030

0800c690 <_realloc_r>:
 800c690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c692:	4607      	mov	r7, r0
 800c694:	4614      	mov	r4, r2
 800c696:	460e      	mov	r6, r1
 800c698:	b921      	cbnz	r1, 800c6a4 <_realloc_r+0x14>
 800c69a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c69e:	4611      	mov	r1, r2
 800c6a0:	f7fe bfe8 	b.w	800b674 <_malloc_r>
 800c6a4:	b922      	cbnz	r2, 800c6b0 <_realloc_r+0x20>
 800c6a6:	f7fe ff95 	bl	800b5d4 <_free_r>
 800c6aa:	4625      	mov	r5, r4
 800c6ac:	4628      	mov	r0, r5
 800c6ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6b0:	f000 fa9a 	bl	800cbe8 <_malloc_usable_size_r>
 800c6b4:	42a0      	cmp	r0, r4
 800c6b6:	d20f      	bcs.n	800c6d8 <_realloc_r+0x48>
 800c6b8:	4621      	mov	r1, r4
 800c6ba:	4638      	mov	r0, r7
 800c6bc:	f7fe ffda 	bl	800b674 <_malloc_r>
 800c6c0:	4605      	mov	r5, r0
 800c6c2:	2800      	cmp	r0, #0
 800c6c4:	d0f2      	beq.n	800c6ac <_realloc_r+0x1c>
 800c6c6:	4631      	mov	r1, r6
 800c6c8:	4622      	mov	r2, r4
 800c6ca:	f7fb fa91 	bl	8007bf0 <memcpy>
 800c6ce:	4631      	mov	r1, r6
 800c6d0:	4638      	mov	r0, r7
 800c6d2:	f7fe ff7f 	bl	800b5d4 <_free_r>
 800c6d6:	e7e9      	b.n	800c6ac <_realloc_r+0x1c>
 800c6d8:	4635      	mov	r5, r6
 800c6da:	e7e7      	b.n	800c6ac <_realloc_r+0x1c>

0800c6dc <__sfputc_r>:
 800c6dc:	6893      	ldr	r3, [r2, #8]
 800c6de:	3b01      	subs	r3, #1
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	b410      	push	{r4}
 800c6e4:	6093      	str	r3, [r2, #8]
 800c6e6:	da08      	bge.n	800c6fa <__sfputc_r+0x1e>
 800c6e8:	6994      	ldr	r4, [r2, #24]
 800c6ea:	42a3      	cmp	r3, r4
 800c6ec:	db01      	blt.n	800c6f2 <__sfputc_r+0x16>
 800c6ee:	290a      	cmp	r1, #10
 800c6f0:	d103      	bne.n	800c6fa <__sfputc_r+0x1e>
 800c6f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6f6:	f000 b94b 	b.w	800c990 <__swbuf_r>
 800c6fa:	6813      	ldr	r3, [r2, #0]
 800c6fc:	1c58      	adds	r0, r3, #1
 800c6fe:	6010      	str	r0, [r2, #0]
 800c700:	7019      	strb	r1, [r3, #0]
 800c702:	4608      	mov	r0, r1
 800c704:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c708:	4770      	bx	lr

0800c70a <__sfputs_r>:
 800c70a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c70c:	4606      	mov	r6, r0
 800c70e:	460f      	mov	r7, r1
 800c710:	4614      	mov	r4, r2
 800c712:	18d5      	adds	r5, r2, r3
 800c714:	42ac      	cmp	r4, r5
 800c716:	d101      	bne.n	800c71c <__sfputs_r+0x12>
 800c718:	2000      	movs	r0, #0
 800c71a:	e007      	b.n	800c72c <__sfputs_r+0x22>
 800c71c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c720:	463a      	mov	r2, r7
 800c722:	4630      	mov	r0, r6
 800c724:	f7ff ffda 	bl	800c6dc <__sfputc_r>
 800c728:	1c43      	adds	r3, r0, #1
 800c72a:	d1f3      	bne.n	800c714 <__sfputs_r+0xa>
 800c72c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c730 <_vfiprintf_r>:
 800c730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c734:	460d      	mov	r5, r1
 800c736:	b09d      	sub	sp, #116	; 0x74
 800c738:	4614      	mov	r4, r2
 800c73a:	4698      	mov	r8, r3
 800c73c:	4606      	mov	r6, r0
 800c73e:	b118      	cbz	r0, 800c748 <_vfiprintf_r+0x18>
 800c740:	6983      	ldr	r3, [r0, #24]
 800c742:	b90b      	cbnz	r3, 800c748 <_vfiprintf_r+0x18>
 800c744:	f7ff fecc 	bl	800c4e0 <__sinit>
 800c748:	4b89      	ldr	r3, [pc, #548]	; (800c970 <_vfiprintf_r+0x240>)
 800c74a:	429d      	cmp	r5, r3
 800c74c:	d11b      	bne.n	800c786 <_vfiprintf_r+0x56>
 800c74e:	6875      	ldr	r5, [r6, #4]
 800c750:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c752:	07d9      	lsls	r1, r3, #31
 800c754:	d405      	bmi.n	800c762 <_vfiprintf_r+0x32>
 800c756:	89ab      	ldrh	r3, [r5, #12]
 800c758:	059a      	lsls	r2, r3, #22
 800c75a:	d402      	bmi.n	800c762 <_vfiprintf_r+0x32>
 800c75c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c75e:	f7ff ff6f 	bl	800c640 <__retarget_lock_acquire_recursive>
 800c762:	89ab      	ldrh	r3, [r5, #12]
 800c764:	071b      	lsls	r3, r3, #28
 800c766:	d501      	bpl.n	800c76c <_vfiprintf_r+0x3c>
 800c768:	692b      	ldr	r3, [r5, #16]
 800c76a:	b9eb      	cbnz	r3, 800c7a8 <_vfiprintf_r+0x78>
 800c76c:	4629      	mov	r1, r5
 800c76e:	4630      	mov	r0, r6
 800c770:	f000 f960 	bl	800ca34 <__swsetup_r>
 800c774:	b1c0      	cbz	r0, 800c7a8 <_vfiprintf_r+0x78>
 800c776:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c778:	07dc      	lsls	r4, r3, #31
 800c77a:	d50e      	bpl.n	800c79a <_vfiprintf_r+0x6a>
 800c77c:	f04f 30ff 	mov.w	r0, #4294967295
 800c780:	b01d      	add	sp, #116	; 0x74
 800c782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c786:	4b7b      	ldr	r3, [pc, #492]	; (800c974 <_vfiprintf_r+0x244>)
 800c788:	429d      	cmp	r5, r3
 800c78a:	d101      	bne.n	800c790 <_vfiprintf_r+0x60>
 800c78c:	68b5      	ldr	r5, [r6, #8]
 800c78e:	e7df      	b.n	800c750 <_vfiprintf_r+0x20>
 800c790:	4b79      	ldr	r3, [pc, #484]	; (800c978 <_vfiprintf_r+0x248>)
 800c792:	429d      	cmp	r5, r3
 800c794:	bf08      	it	eq
 800c796:	68f5      	ldreq	r5, [r6, #12]
 800c798:	e7da      	b.n	800c750 <_vfiprintf_r+0x20>
 800c79a:	89ab      	ldrh	r3, [r5, #12]
 800c79c:	0598      	lsls	r0, r3, #22
 800c79e:	d4ed      	bmi.n	800c77c <_vfiprintf_r+0x4c>
 800c7a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7a2:	f7ff ff4e 	bl	800c642 <__retarget_lock_release_recursive>
 800c7a6:	e7e9      	b.n	800c77c <_vfiprintf_r+0x4c>
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	9309      	str	r3, [sp, #36]	; 0x24
 800c7ac:	2320      	movs	r3, #32
 800c7ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7b6:	2330      	movs	r3, #48	; 0x30
 800c7b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c97c <_vfiprintf_r+0x24c>
 800c7bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7c0:	f04f 0901 	mov.w	r9, #1
 800c7c4:	4623      	mov	r3, r4
 800c7c6:	469a      	mov	sl, r3
 800c7c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7cc:	b10a      	cbz	r2, 800c7d2 <_vfiprintf_r+0xa2>
 800c7ce:	2a25      	cmp	r2, #37	; 0x25
 800c7d0:	d1f9      	bne.n	800c7c6 <_vfiprintf_r+0x96>
 800c7d2:	ebba 0b04 	subs.w	fp, sl, r4
 800c7d6:	d00b      	beq.n	800c7f0 <_vfiprintf_r+0xc0>
 800c7d8:	465b      	mov	r3, fp
 800c7da:	4622      	mov	r2, r4
 800c7dc:	4629      	mov	r1, r5
 800c7de:	4630      	mov	r0, r6
 800c7e0:	f7ff ff93 	bl	800c70a <__sfputs_r>
 800c7e4:	3001      	adds	r0, #1
 800c7e6:	f000 80aa 	beq.w	800c93e <_vfiprintf_r+0x20e>
 800c7ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7ec:	445a      	add	r2, fp
 800c7ee:	9209      	str	r2, [sp, #36]	; 0x24
 800c7f0:	f89a 3000 	ldrb.w	r3, [sl]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	f000 80a2 	beq.w	800c93e <_vfiprintf_r+0x20e>
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	f04f 32ff 	mov.w	r2, #4294967295
 800c800:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c804:	f10a 0a01 	add.w	sl, sl, #1
 800c808:	9304      	str	r3, [sp, #16]
 800c80a:	9307      	str	r3, [sp, #28]
 800c80c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c810:	931a      	str	r3, [sp, #104]	; 0x68
 800c812:	4654      	mov	r4, sl
 800c814:	2205      	movs	r2, #5
 800c816:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c81a:	4858      	ldr	r0, [pc, #352]	; (800c97c <_vfiprintf_r+0x24c>)
 800c81c:	f7f3 fce8 	bl	80001f0 <memchr>
 800c820:	9a04      	ldr	r2, [sp, #16]
 800c822:	b9d8      	cbnz	r0, 800c85c <_vfiprintf_r+0x12c>
 800c824:	06d1      	lsls	r1, r2, #27
 800c826:	bf44      	itt	mi
 800c828:	2320      	movmi	r3, #32
 800c82a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c82e:	0713      	lsls	r3, r2, #28
 800c830:	bf44      	itt	mi
 800c832:	232b      	movmi	r3, #43	; 0x2b
 800c834:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c838:	f89a 3000 	ldrb.w	r3, [sl]
 800c83c:	2b2a      	cmp	r3, #42	; 0x2a
 800c83e:	d015      	beq.n	800c86c <_vfiprintf_r+0x13c>
 800c840:	9a07      	ldr	r2, [sp, #28]
 800c842:	4654      	mov	r4, sl
 800c844:	2000      	movs	r0, #0
 800c846:	f04f 0c0a 	mov.w	ip, #10
 800c84a:	4621      	mov	r1, r4
 800c84c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c850:	3b30      	subs	r3, #48	; 0x30
 800c852:	2b09      	cmp	r3, #9
 800c854:	d94e      	bls.n	800c8f4 <_vfiprintf_r+0x1c4>
 800c856:	b1b0      	cbz	r0, 800c886 <_vfiprintf_r+0x156>
 800c858:	9207      	str	r2, [sp, #28]
 800c85a:	e014      	b.n	800c886 <_vfiprintf_r+0x156>
 800c85c:	eba0 0308 	sub.w	r3, r0, r8
 800c860:	fa09 f303 	lsl.w	r3, r9, r3
 800c864:	4313      	orrs	r3, r2
 800c866:	9304      	str	r3, [sp, #16]
 800c868:	46a2      	mov	sl, r4
 800c86a:	e7d2      	b.n	800c812 <_vfiprintf_r+0xe2>
 800c86c:	9b03      	ldr	r3, [sp, #12]
 800c86e:	1d19      	adds	r1, r3, #4
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	9103      	str	r1, [sp, #12]
 800c874:	2b00      	cmp	r3, #0
 800c876:	bfbb      	ittet	lt
 800c878:	425b      	neglt	r3, r3
 800c87a:	f042 0202 	orrlt.w	r2, r2, #2
 800c87e:	9307      	strge	r3, [sp, #28]
 800c880:	9307      	strlt	r3, [sp, #28]
 800c882:	bfb8      	it	lt
 800c884:	9204      	strlt	r2, [sp, #16]
 800c886:	7823      	ldrb	r3, [r4, #0]
 800c888:	2b2e      	cmp	r3, #46	; 0x2e
 800c88a:	d10c      	bne.n	800c8a6 <_vfiprintf_r+0x176>
 800c88c:	7863      	ldrb	r3, [r4, #1]
 800c88e:	2b2a      	cmp	r3, #42	; 0x2a
 800c890:	d135      	bne.n	800c8fe <_vfiprintf_r+0x1ce>
 800c892:	9b03      	ldr	r3, [sp, #12]
 800c894:	1d1a      	adds	r2, r3, #4
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	9203      	str	r2, [sp, #12]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	bfb8      	it	lt
 800c89e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c8a2:	3402      	adds	r4, #2
 800c8a4:	9305      	str	r3, [sp, #20]
 800c8a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c98c <_vfiprintf_r+0x25c>
 800c8aa:	7821      	ldrb	r1, [r4, #0]
 800c8ac:	2203      	movs	r2, #3
 800c8ae:	4650      	mov	r0, sl
 800c8b0:	f7f3 fc9e 	bl	80001f0 <memchr>
 800c8b4:	b140      	cbz	r0, 800c8c8 <_vfiprintf_r+0x198>
 800c8b6:	2340      	movs	r3, #64	; 0x40
 800c8b8:	eba0 000a 	sub.w	r0, r0, sl
 800c8bc:	fa03 f000 	lsl.w	r0, r3, r0
 800c8c0:	9b04      	ldr	r3, [sp, #16]
 800c8c2:	4303      	orrs	r3, r0
 800c8c4:	3401      	adds	r4, #1
 800c8c6:	9304      	str	r3, [sp, #16]
 800c8c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8cc:	482c      	ldr	r0, [pc, #176]	; (800c980 <_vfiprintf_r+0x250>)
 800c8ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8d2:	2206      	movs	r2, #6
 800c8d4:	f7f3 fc8c 	bl	80001f0 <memchr>
 800c8d8:	2800      	cmp	r0, #0
 800c8da:	d03f      	beq.n	800c95c <_vfiprintf_r+0x22c>
 800c8dc:	4b29      	ldr	r3, [pc, #164]	; (800c984 <_vfiprintf_r+0x254>)
 800c8de:	bb1b      	cbnz	r3, 800c928 <_vfiprintf_r+0x1f8>
 800c8e0:	9b03      	ldr	r3, [sp, #12]
 800c8e2:	3307      	adds	r3, #7
 800c8e4:	f023 0307 	bic.w	r3, r3, #7
 800c8e8:	3308      	adds	r3, #8
 800c8ea:	9303      	str	r3, [sp, #12]
 800c8ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8ee:	443b      	add	r3, r7
 800c8f0:	9309      	str	r3, [sp, #36]	; 0x24
 800c8f2:	e767      	b.n	800c7c4 <_vfiprintf_r+0x94>
 800c8f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8f8:	460c      	mov	r4, r1
 800c8fa:	2001      	movs	r0, #1
 800c8fc:	e7a5      	b.n	800c84a <_vfiprintf_r+0x11a>
 800c8fe:	2300      	movs	r3, #0
 800c900:	3401      	adds	r4, #1
 800c902:	9305      	str	r3, [sp, #20]
 800c904:	4619      	mov	r1, r3
 800c906:	f04f 0c0a 	mov.w	ip, #10
 800c90a:	4620      	mov	r0, r4
 800c90c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c910:	3a30      	subs	r2, #48	; 0x30
 800c912:	2a09      	cmp	r2, #9
 800c914:	d903      	bls.n	800c91e <_vfiprintf_r+0x1ee>
 800c916:	2b00      	cmp	r3, #0
 800c918:	d0c5      	beq.n	800c8a6 <_vfiprintf_r+0x176>
 800c91a:	9105      	str	r1, [sp, #20]
 800c91c:	e7c3      	b.n	800c8a6 <_vfiprintf_r+0x176>
 800c91e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c922:	4604      	mov	r4, r0
 800c924:	2301      	movs	r3, #1
 800c926:	e7f0      	b.n	800c90a <_vfiprintf_r+0x1da>
 800c928:	ab03      	add	r3, sp, #12
 800c92a:	9300      	str	r3, [sp, #0]
 800c92c:	462a      	mov	r2, r5
 800c92e:	4b16      	ldr	r3, [pc, #88]	; (800c988 <_vfiprintf_r+0x258>)
 800c930:	a904      	add	r1, sp, #16
 800c932:	4630      	mov	r0, r6
 800c934:	f7fb fa12 	bl	8007d5c <_printf_float>
 800c938:	4607      	mov	r7, r0
 800c93a:	1c78      	adds	r0, r7, #1
 800c93c:	d1d6      	bne.n	800c8ec <_vfiprintf_r+0x1bc>
 800c93e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c940:	07d9      	lsls	r1, r3, #31
 800c942:	d405      	bmi.n	800c950 <_vfiprintf_r+0x220>
 800c944:	89ab      	ldrh	r3, [r5, #12]
 800c946:	059a      	lsls	r2, r3, #22
 800c948:	d402      	bmi.n	800c950 <_vfiprintf_r+0x220>
 800c94a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c94c:	f7ff fe79 	bl	800c642 <__retarget_lock_release_recursive>
 800c950:	89ab      	ldrh	r3, [r5, #12]
 800c952:	065b      	lsls	r3, r3, #25
 800c954:	f53f af12 	bmi.w	800c77c <_vfiprintf_r+0x4c>
 800c958:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c95a:	e711      	b.n	800c780 <_vfiprintf_r+0x50>
 800c95c:	ab03      	add	r3, sp, #12
 800c95e:	9300      	str	r3, [sp, #0]
 800c960:	462a      	mov	r2, r5
 800c962:	4b09      	ldr	r3, [pc, #36]	; (800c988 <_vfiprintf_r+0x258>)
 800c964:	a904      	add	r1, sp, #16
 800c966:	4630      	mov	r0, r6
 800c968:	f7fb fc9c 	bl	80082a4 <_printf_i>
 800c96c:	e7e4      	b.n	800c938 <_vfiprintf_r+0x208>
 800c96e:	bf00      	nop
 800c970:	0800e82c 	.word	0x0800e82c
 800c974:	0800e84c 	.word	0x0800e84c
 800c978:	0800e80c 	.word	0x0800e80c
 800c97c:	0800e7a4 	.word	0x0800e7a4
 800c980:	0800e7ae 	.word	0x0800e7ae
 800c984:	08007d5d 	.word	0x08007d5d
 800c988:	0800c70b 	.word	0x0800c70b
 800c98c:	0800e7aa 	.word	0x0800e7aa

0800c990 <__swbuf_r>:
 800c990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c992:	460e      	mov	r6, r1
 800c994:	4614      	mov	r4, r2
 800c996:	4605      	mov	r5, r0
 800c998:	b118      	cbz	r0, 800c9a2 <__swbuf_r+0x12>
 800c99a:	6983      	ldr	r3, [r0, #24]
 800c99c:	b90b      	cbnz	r3, 800c9a2 <__swbuf_r+0x12>
 800c99e:	f7ff fd9f 	bl	800c4e0 <__sinit>
 800c9a2:	4b21      	ldr	r3, [pc, #132]	; (800ca28 <__swbuf_r+0x98>)
 800c9a4:	429c      	cmp	r4, r3
 800c9a6:	d12b      	bne.n	800ca00 <__swbuf_r+0x70>
 800c9a8:	686c      	ldr	r4, [r5, #4]
 800c9aa:	69a3      	ldr	r3, [r4, #24]
 800c9ac:	60a3      	str	r3, [r4, #8]
 800c9ae:	89a3      	ldrh	r3, [r4, #12]
 800c9b0:	071a      	lsls	r2, r3, #28
 800c9b2:	d52f      	bpl.n	800ca14 <__swbuf_r+0x84>
 800c9b4:	6923      	ldr	r3, [r4, #16]
 800c9b6:	b36b      	cbz	r3, 800ca14 <__swbuf_r+0x84>
 800c9b8:	6923      	ldr	r3, [r4, #16]
 800c9ba:	6820      	ldr	r0, [r4, #0]
 800c9bc:	1ac0      	subs	r0, r0, r3
 800c9be:	6963      	ldr	r3, [r4, #20]
 800c9c0:	b2f6      	uxtb	r6, r6
 800c9c2:	4283      	cmp	r3, r0
 800c9c4:	4637      	mov	r7, r6
 800c9c6:	dc04      	bgt.n	800c9d2 <__swbuf_r+0x42>
 800c9c8:	4621      	mov	r1, r4
 800c9ca:	4628      	mov	r0, r5
 800c9cc:	f7ff fcf4 	bl	800c3b8 <_fflush_r>
 800c9d0:	bb30      	cbnz	r0, 800ca20 <__swbuf_r+0x90>
 800c9d2:	68a3      	ldr	r3, [r4, #8]
 800c9d4:	3b01      	subs	r3, #1
 800c9d6:	60a3      	str	r3, [r4, #8]
 800c9d8:	6823      	ldr	r3, [r4, #0]
 800c9da:	1c5a      	adds	r2, r3, #1
 800c9dc:	6022      	str	r2, [r4, #0]
 800c9de:	701e      	strb	r6, [r3, #0]
 800c9e0:	6963      	ldr	r3, [r4, #20]
 800c9e2:	3001      	adds	r0, #1
 800c9e4:	4283      	cmp	r3, r0
 800c9e6:	d004      	beq.n	800c9f2 <__swbuf_r+0x62>
 800c9e8:	89a3      	ldrh	r3, [r4, #12]
 800c9ea:	07db      	lsls	r3, r3, #31
 800c9ec:	d506      	bpl.n	800c9fc <__swbuf_r+0x6c>
 800c9ee:	2e0a      	cmp	r6, #10
 800c9f0:	d104      	bne.n	800c9fc <__swbuf_r+0x6c>
 800c9f2:	4621      	mov	r1, r4
 800c9f4:	4628      	mov	r0, r5
 800c9f6:	f7ff fcdf 	bl	800c3b8 <_fflush_r>
 800c9fa:	b988      	cbnz	r0, 800ca20 <__swbuf_r+0x90>
 800c9fc:	4638      	mov	r0, r7
 800c9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca00:	4b0a      	ldr	r3, [pc, #40]	; (800ca2c <__swbuf_r+0x9c>)
 800ca02:	429c      	cmp	r4, r3
 800ca04:	d101      	bne.n	800ca0a <__swbuf_r+0x7a>
 800ca06:	68ac      	ldr	r4, [r5, #8]
 800ca08:	e7cf      	b.n	800c9aa <__swbuf_r+0x1a>
 800ca0a:	4b09      	ldr	r3, [pc, #36]	; (800ca30 <__swbuf_r+0xa0>)
 800ca0c:	429c      	cmp	r4, r3
 800ca0e:	bf08      	it	eq
 800ca10:	68ec      	ldreq	r4, [r5, #12]
 800ca12:	e7ca      	b.n	800c9aa <__swbuf_r+0x1a>
 800ca14:	4621      	mov	r1, r4
 800ca16:	4628      	mov	r0, r5
 800ca18:	f000 f80c 	bl	800ca34 <__swsetup_r>
 800ca1c:	2800      	cmp	r0, #0
 800ca1e:	d0cb      	beq.n	800c9b8 <__swbuf_r+0x28>
 800ca20:	f04f 37ff 	mov.w	r7, #4294967295
 800ca24:	e7ea      	b.n	800c9fc <__swbuf_r+0x6c>
 800ca26:	bf00      	nop
 800ca28:	0800e82c 	.word	0x0800e82c
 800ca2c:	0800e84c 	.word	0x0800e84c
 800ca30:	0800e80c 	.word	0x0800e80c

0800ca34 <__swsetup_r>:
 800ca34:	4b32      	ldr	r3, [pc, #200]	; (800cb00 <__swsetup_r+0xcc>)
 800ca36:	b570      	push	{r4, r5, r6, lr}
 800ca38:	681d      	ldr	r5, [r3, #0]
 800ca3a:	4606      	mov	r6, r0
 800ca3c:	460c      	mov	r4, r1
 800ca3e:	b125      	cbz	r5, 800ca4a <__swsetup_r+0x16>
 800ca40:	69ab      	ldr	r3, [r5, #24]
 800ca42:	b913      	cbnz	r3, 800ca4a <__swsetup_r+0x16>
 800ca44:	4628      	mov	r0, r5
 800ca46:	f7ff fd4b 	bl	800c4e0 <__sinit>
 800ca4a:	4b2e      	ldr	r3, [pc, #184]	; (800cb04 <__swsetup_r+0xd0>)
 800ca4c:	429c      	cmp	r4, r3
 800ca4e:	d10f      	bne.n	800ca70 <__swsetup_r+0x3c>
 800ca50:	686c      	ldr	r4, [r5, #4]
 800ca52:	89a3      	ldrh	r3, [r4, #12]
 800ca54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca58:	0719      	lsls	r1, r3, #28
 800ca5a:	d42c      	bmi.n	800cab6 <__swsetup_r+0x82>
 800ca5c:	06dd      	lsls	r5, r3, #27
 800ca5e:	d411      	bmi.n	800ca84 <__swsetup_r+0x50>
 800ca60:	2309      	movs	r3, #9
 800ca62:	6033      	str	r3, [r6, #0]
 800ca64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ca68:	81a3      	strh	r3, [r4, #12]
 800ca6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ca6e:	e03e      	b.n	800caee <__swsetup_r+0xba>
 800ca70:	4b25      	ldr	r3, [pc, #148]	; (800cb08 <__swsetup_r+0xd4>)
 800ca72:	429c      	cmp	r4, r3
 800ca74:	d101      	bne.n	800ca7a <__swsetup_r+0x46>
 800ca76:	68ac      	ldr	r4, [r5, #8]
 800ca78:	e7eb      	b.n	800ca52 <__swsetup_r+0x1e>
 800ca7a:	4b24      	ldr	r3, [pc, #144]	; (800cb0c <__swsetup_r+0xd8>)
 800ca7c:	429c      	cmp	r4, r3
 800ca7e:	bf08      	it	eq
 800ca80:	68ec      	ldreq	r4, [r5, #12]
 800ca82:	e7e6      	b.n	800ca52 <__swsetup_r+0x1e>
 800ca84:	0758      	lsls	r0, r3, #29
 800ca86:	d512      	bpl.n	800caae <__swsetup_r+0x7a>
 800ca88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca8a:	b141      	cbz	r1, 800ca9e <__swsetup_r+0x6a>
 800ca8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca90:	4299      	cmp	r1, r3
 800ca92:	d002      	beq.n	800ca9a <__swsetup_r+0x66>
 800ca94:	4630      	mov	r0, r6
 800ca96:	f7fe fd9d 	bl	800b5d4 <_free_r>
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	6363      	str	r3, [r4, #52]	; 0x34
 800ca9e:	89a3      	ldrh	r3, [r4, #12]
 800caa0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800caa4:	81a3      	strh	r3, [r4, #12]
 800caa6:	2300      	movs	r3, #0
 800caa8:	6063      	str	r3, [r4, #4]
 800caaa:	6923      	ldr	r3, [r4, #16]
 800caac:	6023      	str	r3, [r4, #0]
 800caae:	89a3      	ldrh	r3, [r4, #12]
 800cab0:	f043 0308 	orr.w	r3, r3, #8
 800cab4:	81a3      	strh	r3, [r4, #12]
 800cab6:	6923      	ldr	r3, [r4, #16]
 800cab8:	b94b      	cbnz	r3, 800cace <__swsetup_r+0x9a>
 800caba:	89a3      	ldrh	r3, [r4, #12]
 800cabc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cac4:	d003      	beq.n	800cace <__swsetup_r+0x9a>
 800cac6:	4621      	mov	r1, r4
 800cac8:	4630      	mov	r0, r6
 800caca:	f000 f84d 	bl	800cb68 <__smakebuf_r>
 800cace:	89a0      	ldrh	r0, [r4, #12]
 800cad0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cad4:	f010 0301 	ands.w	r3, r0, #1
 800cad8:	d00a      	beq.n	800caf0 <__swsetup_r+0xbc>
 800cada:	2300      	movs	r3, #0
 800cadc:	60a3      	str	r3, [r4, #8]
 800cade:	6963      	ldr	r3, [r4, #20]
 800cae0:	425b      	negs	r3, r3
 800cae2:	61a3      	str	r3, [r4, #24]
 800cae4:	6923      	ldr	r3, [r4, #16]
 800cae6:	b943      	cbnz	r3, 800cafa <__swsetup_r+0xc6>
 800cae8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800caec:	d1ba      	bne.n	800ca64 <__swsetup_r+0x30>
 800caee:	bd70      	pop	{r4, r5, r6, pc}
 800caf0:	0781      	lsls	r1, r0, #30
 800caf2:	bf58      	it	pl
 800caf4:	6963      	ldrpl	r3, [r4, #20]
 800caf6:	60a3      	str	r3, [r4, #8]
 800caf8:	e7f4      	b.n	800cae4 <__swsetup_r+0xb0>
 800cafa:	2000      	movs	r0, #0
 800cafc:	e7f7      	b.n	800caee <__swsetup_r+0xba>
 800cafe:	bf00      	nop
 800cb00:	20000020 	.word	0x20000020
 800cb04:	0800e82c 	.word	0x0800e82c
 800cb08:	0800e84c 	.word	0x0800e84c
 800cb0c:	0800e80c 	.word	0x0800e80c

0800cb10 <abort>:
 800cb10:	b508      	push	{r3, lr}
 800cb12:	2006      	movs	r0, #6
 800cb14:	f000 f898 	bl	800cc48 <raise>
 800cb18:	2001      	movs	r0, #1
 800cb1a:	f7f5 fb59 	bl	80021d0 <_exit>

0800cb1e <__swhatbuf_r>:
 800cb1e:	b570      	push	{r4, r5, r6, lr}
 800cb20:	460e      	mov	r6, r1
 800cb22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb26:	2900      	cmp	r1, #0
 800cb28:	b096      	sub	sp, #88	; 0x58
 800cb2a:	4614      	mov	r4, r2
 800cb2c:	461d      	mov	r5, r3
 800cb2e:	da07      	bge.n	800cb40 <__swhatbuf_r+0x22>
 800cb30:	2300      	movs	r3, #0
 800cb32:	602b      	str	r3, [r5, #0]
 800cb34:	89b3      	ldrh	r3, [r6, #12]
 800cb36:	061a      	lsls	r2, r3, #24
 800cb38:	d410      	bmi.n	800cb5c <__swhatbuf_r+0x3e>
 800cb3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb3e:	e00e      	b.n	800cb5e <__swhatbuf_r+0x40>
 800cb40:	466a      	mov	r2, sp
 800cb42:	f000 f89d 	bl	800cc80 <_fstat_r>
 800cb46:	2800      	cmp	r0, #0
 800cb48:	dbf2      	blt.n	800cb30 <__swhatbuf_r+0x12>
 800cb4a:	9a01      	ldr	r2, [sp, #4]
 800cb4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cb50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cb54:	425a      	negs	r2, r3
 800cb56:	415a      	adcs	r2, r3
 800cb58:	602a      	str	r2, [r5, #0]
 800cb5a:	e7ee      	b.n	800cb3a <__swhatbuf_r+0x1c>
 800cb5c:	2340      	movs	r3, #64	; 0x40
 800cb5e:	2000      	movs	r0, #0
 800cb60:	6023      	str	r3, [r4, #0]
 800cb62:	b016      	add	sp, #88	; 0x58
 800cb64:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cb68 <__smakebuf_r>:
 800cb68:	898b      	ldrh	r3, [r1, #12]
 800cb6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb6c:	079d      	lsls	r5, r3, #30
 800cb6e:	4606      	mov	r6, r0
 800cb70:	460c      	mov	r4, r1
 800cb72:	d507      	bpl.n	800cb84 <__smakebuf_r+0x1c>
 800cb74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cb78:	6023      	str	r3, [r4, #0]
 800cb7a:	6123      	str	r3, [r4, #16]
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	6163      	str	r3, [r4, #20]
 800cb80:	b002      	add	sp, #8
 800cb82:	bd70      	pop	{r4, r5, r6, pc}
 800cb84:	ab01      	add	r3, sp, #4
 800cb86:	466a      	mov	r2, sp
 800cb88:	f7ff ffc9 	bl	800cb1e <__swhatbuf_r>
 800cb8c:	9900      	ldr	r1, [sp, #0]
 800cb8e:	4605      	mov	r5, r0
 800cb90:	4630      	mov	r0, r6
 800cb92:	f7fe fd6f 	bl	800b674 <_malloc_r>
 800cb96:	b948      	cbnz	r0, 800cbac <__smakebuf_r+0x44>
 800cb98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb9c:	059a      	lsls	r2, r3, #22
 800cb9e:	d4ef      	bmi.n	800cb80 <__smakebuf_r+0x18>
 800cba0:	f023 0303 	bic.w	r3, r3, #3
 800cba4:	f043 0302 	orr.w	r3, r3, #2
 800cba8:	81a3      	strh	r3, [r4, #12]
 800cbaa:	e7e3      	b.n	800cb74 <__smakebuf_r+0xc>
 800cbac:	4b0d      	ldr	r3, [pc, #52]	; (800cbe4 <__smakebuf_r+0x7c>)
 800cbae:	62b3      	str	r3, [r6, #40]	; 0x28
 800cbb0:	89a3      	ldrh	r3, [r4, #12]
 800cbb2:	6020      	str	r0, [r4, #0]
 800cbb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbb8:	81a3      	strh	r3, [r4, #12]
 800cbba:	9b00      	ldr	r3, [sp, #0]
 800cbbc:	6163      	str	r3, [r4, #20]
 800cbbe:	9b01      	ldr	r3, [sp, #4]
 800cbc0:	6120      	str	r0, [r4, #16]
 800cbc2:	b15b      	cbz	r3, 800cbdc <__smakebuf_r+0x74>
 800cbc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbc8:	4630      	mov	r0, r6
 800cbca:	f000 f86b 	bl	800cca4 <_isatty_r>
 800cbce:	b128      	cbz	r0, 800cbdc <__smakebuf_r+0x74>
 800cbd0:	89a3      	ldrh	r3, [r4, #12]
 800cbd2:	f023 0303 	bic.w	r3, r3, #3
 800cbd6:	f043 0301 	orr.w	r3, r3, #1
 800cbda:	81a3      	strh	r3, [r4, #12]
 800cbdc:	89a0      	ldrh	r0, [r4, #12]
 800cbde:	4305      	orrs	r5, r0
 800cbe0:	81a5      	strh	r5, [r4, #12]
 800cbe2:	e7cd      	b.n	800cb80 <__smakebuf_r+0x18>
 800cbe4:	0800c479 	.word	0x0800c479

0800cbe8 <_malloc_usable_size_r>:
 800cbe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbec:	1f18      	subs	r0, r3, #4
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	bfbc      	itt	lt
 800cbf2:	580b      	ldrlt	r3, [r1, r0]
 800cbf4:	18c0      	addlt	r0, r0, r3
 800cbf6:	4770      	bx	lr

0800cbf8 <_raise_r>:
 800cbf8:	291f      	cmp	r1, #31
 800cbfa:	b538      	push	{r3, r4, r5, lr}
 800cbfc:	4604      	mov	r4, r0
 800cbfe:	460d      	mov	r5, r1
 800cc00:	d904      	bls.n	800cc0c <_raise_r+0x14>
 800cc02:	2316      	movs	r3, #22
 800cc04:	6003      	str	r3, [r0, #0]
 800cc06:	f04f 30ff 	mov.w	r0, #4294967295
 800cc0a:	bd38      	pop	{r3, r4, r5, pc}
 800cc0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cc0e:	b112      	cbz	r2, 800cc16 <_raise_r+0x1e>
 800cc10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cc14:	b94b      	cbnz	r3, 800cc2a <_raise_r+0x32>
 800cc16:	4620      	mov	r0, r4
 800cc18:	f000 f830 	bl	800cc7c <_getpid_r>
 800cc1c:	462a      	mov	r2, r5
 800cc1e:	4601      	mov	r1, r0
 800cc20:	4620      	mov	r0, r4
 800cc22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc26:	f000 b817 	b.w	800cc58 <_kill_r>
 800cc2a:	2b01      	cmp	r3, #1
 800cc2c:	d00a      	beq.n	800cc44 <_raise_r+0x4c>
 800cc2e:	1c59      	adds	r1, r3, #1
 800cc30:	d103      	bne.n	800cc3a <_raise_r+0x42>
 800cc32:	2316      	movs	r3, #22
 800cc34:	6003      	str	r3, [r0, #0]
 800cc36:	2001      	movs	r0, #1
 800cc38:	e7e7      	b.n	800cc0a <_raise_r+0x12>
 800cc3a:	2400      	movs	r4, #0
 800cc3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cc40:	4628      	mov	r0, r5
 800cc42:	4798      	blx	r3
 800cc44:	2000      	movs	r0, #0
 800cc46:	e7e0      	b.n	800cc0a <_raise_r+0x12>

0800cc48 <raise>:
 800cc48:	4b02      	ldr	r3, [pc, #8]	; (800cc54 <raise+0xc>)
 800cc4a:	4601      	mov	r1, r0
 800cc4c:	6818      	ldr	r0, [r3, #0]
 800cc4e:	f7ff bfd3 	b.w	800cbf8 <_raise_r>
 800cc52:	bf00      	nop
 800cc54:	20000020 	.word	0x20000020

0800cc58 <_kill_r>:
 800cc58:	b538      	push	{r3, r4, r5, lr}
 800cc5a:	4d07      	ldr	r5, [pc, #28]	; (800cc78 <_kill_r+0x20>)
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	4604      	mov	r4, r0
 800cc60:	4608      	mov	r0, r1
 800cc62:	4611      	mov	r1, r2
 800cc64:	602b      	str	r3, [r5, #0]
 800cc66:	f7f5 faa3 	bl	80021b0 <_kill>
 800cc6a:	1c43      	adds	r3, r0, #1
 800cc6c:	d102      	bne.n	800cc74 <_kill_r+0x1c>
 800cc6e:	682b      	ldr	r3, [r5, #0]
 800cc70:	b103      	cbz	r3, 800cc74 <_kill_r+0x1c>
 800cc72:	6023      	str	r3, [r4, #0]
 800cc74:	bd38      	pop	{r3, r4, r5, pc}
 800cc76:	bf00      	nop
 800cc78:	20005028 	.word	0x20005028

0800cc7c <_getpid_r>:
 800cc7c:	f7f5 ba90 	b.w	80021a0 <_getpid>

0800cc80 <_fstat_r>:
 800cc80:	b538      	push	{r3, r4, r5, lr}
 800cc82:	4d07      	ldr	r5, [pc, #28]	; (800cca0 <_fstat_r+0x20>)
 800cc84:	2300      	movs	r3, #0
 800cc86:	4604      	mov	r4, r0
 800cc88:	4608      	mov	r0, r1
 800cc8a:	4611      	mov	r1, r2
 800cc8c:	602b      	str	r3, [r5, #0]
 800cc8e:	f7f5 faee 	bl	800226e <_fstat>
 800cc92:	1c43      	adds	r3, r0, #1
 800cc94:	d102      	bne.n	800cc9c <_fstat_r+0x1c>
 800cc96:	682b      	ldr	r3, [r5, #0]
 800cc98:	b103      	cbz	r3, 800cc9c <_fstat_r+0x1c>
 800cc9a:	6023      	str	r3, [r4, #0]
 800cc9c:	bd38      	pop	{r3, r4, r5, pc}
 800cc9e:	bf00      	nop
 800cca0:	20005028 	.word	0x20005028

0800cca4 <_isatty_r>:
 800cca4:	b538      	push	{r3, r4, r5, lr}
 800cca6:	4d06      	ldr	r5, [pc, #24]	; (800ccc0 <_isatty_r+0x1c>)
 800cca8:	2300      	movs	r3, #0
 800ccaa:	4604      	mov	r4, r0
 800ccac:	4608      	mov	r0, r1
 800ccae:	602b      	str	r3, [r5, #0]
 800ccb0:	f7f5 faed 	bl	800228e <_isatty>
 800ccb4:	1c43      	adds	r3, r0, #1
 800ccb6:	d102      	bne.n	800ccbe <_isatty_r+0x1a>
 800ccb8:	682b      	ldr	r3, [r5, #0]
 800ccba:	b103      	cbz	r3, 800ccbe <_isatty_r+0x1a>
 800ccbc:	6023      	str	r3, [r4, #0]
 800ccbe:	bd38      	pop	{r3, r4, r5, pc}
 800ccc0:	20005028 	.word	0x20005028

0800ccc4 <_init>:
 800ccc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccc6:	bf00      	nop
 800ccc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccca:	bc08      	pop	{r3}
 800cccc:	469e      	mov	lr, r3
 800ccce:	4770      	bx	lr

0800ccd0 <_fini>:
 800ccd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccd2:	bf00      	nop
 800ccd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccd6:	bc08      	pop	{r3}
 800ccd8:	469e      	mov	lr, r3
 800ccda:	4770      	bx	lr
