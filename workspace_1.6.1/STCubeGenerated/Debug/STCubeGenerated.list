
STCubeGenerated.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d30c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d9c  0800d4b0  0800d4b0  0001d4b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e24c  0800e24c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800e24c  0800e24c  0001e24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e254  0800e254  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e254  0800e254  0001e254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e258  0800e258  0001e258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800e25c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005138  200001ec  0800e448  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005324  0800e448  00025324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002951e  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005310  00000000  00000000  0004973a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e78  00000000  00000000  0004ea50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c98  00000000  00000000  000508c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c5d9  00000000  00000000  00052560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000238b5  00000000  00000000  0006eb39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f924  00000000  00000000  000923ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00131d12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009834  00000000  00000000  00131d68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d494 	.word	0x0800d494

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	0800d494 	.word	0x0800d494

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001000:	4a08      	ldr	r2, [pc, #32]	; (8001024 <MX_FREERTOS_Init+0x28>)
 8001002:	2100      	movs	r1, #0
 8001004:	4808      	ldr	r0, [pc, #32]	; (8001028 <MX_FREERTOS_Init+0x2c>)
 8001006:	f004 fcad 	bl	8005964 <osThreadNew>
 800100a:	4603      	mov	r3, r0
 800100c:	4a07      	ldr	r2, [pc, #28]	; (800102c <MX_FREERTOS_Init+0x30>)
 800100e:	6013      	str	r3, [r2, #0]

  /* creation of Gps */
  GpsHandle = osThreadNew(GpsTask, NULL, &Gps_attributes);
 8001010:	4a07      	ldr	r2, [pc, #28]	; (8001030 <MX_FREERTOS_Init+0x34>)
 8001012:	2100      	movs	r1, #0
 8001014:	4807      	ldr	r0, [pc, #28]	; (8001034 <MX_FREERTOS_Init+0x38>)
 8001016:	f004 fca5 	bl	8005964 <osThreadNew>
 800101a:	4603      	mov	r3, r0
 800101c:	4a06      	ldr	r2, [pc, #24]	; (8001038 <MX_FREERTOS_Init+0x3c>)
 800101e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	0800dd24 	.word	0x0800dd24
 8001028:	0800103d 	.word	0x0800103d
 800102c:	20004c30 	.word	0x20004c30
 8001030:	0800dd48 	.word	0x0800dd48
 8001034:	0800104d 	.word	0x0800104d
 8001038:	20004c34 	.word	0x20004c34

0800103c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001044:	2001      	movs	r0, #1
 8001046:	f004 fd1f 	bl	8005a88 <osDelay>
 800104a:	e7fb      	b.n	8001044 <StartDefaultTask+0x8>

0800104c <GpsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GpsTask */
void GpsTask(void *argument)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	  	char data [10];
	  	uint32_t mask;

		//HAL_UART_Receive_IT(&huart1, data, 10);

	  	SSD1306_GotoXY (0,0);
 8001054:	2100      	movs	r1, #0
 8001056:	2000      	movs	r0, #0
 8001058:	f000 fe2c 	bl	8001cb4 <SSD1306_GotoXY>
	  	SSD1306_Puts ("LAT:", &Font_7x10, 1);
 800105c:	2201      	movs	r2, #1
 800105e:	4941      	ldr	r1, [pc, #260]	; (8001164 <GpsTask+0x118>)
 8001060:	4841      	ldr	r0, [pc, #260]	; (8001168 <GpsTask+0x11c>)
 8001062:	f000 febd 	bl	8001de0 <SSD1306_Puts>

	  	SSD1306_GotoXY (40, 0);
 8001066:	2100      	movs	r1, #0
 8001068:	2028      	movs	r0, #40	; 0x28
 800106a:	f000 fe23 	bl	8001cb4 <SSD1306_GotoXY>
	  	sprintf(numbers, "%f", GPS.dec_latitude);
 800106e:	4b3f      	ldr	r3, [pc, #252]	; (800116c <GpsTask+0x120>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fa70 	bl	8000558 <__aeabi_f2d>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	f107 0018 	add.w	r0, r7, #24
 8001080:	493b      	ldr	r1, [pc, #236]	; (8001170 <GpsTask+0x124>)
 8001082:	f008 f833 	bl	80090ec <siprintf>
	  	SSD1306_Puts(numbers, &Font_7x10, 1);
 8001086:	f107 0318 	add.w	r3, r7, #24
 800108a:	2201      	movs	r2, #1
 800108c:	4935      	ldr	r1, [pc, #212]	; (8001164 <GpsTask+0x118>)
 800108e:	4618      	mov	r0, r3
 8001090:	f000 fea6 	bl	8001de0 <SSD1306_Puts>

	  	SSD1306_GotoXY (0,14);
 8001094:	210e      	movs	r1, #14
 8001096:	2000      	movs	r0, #0
 8001098:	f000 fe0c 	bl	8001cb4 <SSD1306_GotoXY>
	  	SSD1306_Puts ("LONG:", &Font_7x10, 1);
 800109c:	2201      	movs	r2, #1
 800109e:	4931      	ldr	r1, [pc, #196]	; (8001164 <GpsTask+0x118>)
 80010a0:	4834      	ldr	r0, [pc, #208]	; (8001174 <GpsTask+0x128>)
 80010a2:	f000 fe9d 	bl	8001de0 <SSD1306_Puts>

	  	SSD1306_GotoXY (40, 14);
 80010a6:	210e      	movs	r1, #14
 80010a8:	2028      	movs	r0, #40	; 0x28
 80010aa:	f000 fe03 	bl	8001cb4 <SSD1306_GotoXY>
	  	sprintf(numbers, "%f", GPS.dec_longitude);
 80010ae:	4b2f      	ldr	r3, [pc, #188]	; (800116c <GpsTask+0x120>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fa50 	bl	8000558 <__aeabi_f2d>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	f107 0018 	add.w	r0, r7, #24
 80010c0:	492b      	ldr	r1, [pc, #172]	; (8001170 <GpsTask+0x124>)
 80010c2:	f008 f813 	bl	80090ec <siprintf>
		SSD1306_Puts(numbers, &Font_7x10, 1);
 80010c6:	f107 0318 	add.w	r3, r7, #24
 80010ca:	2201      	movs	r2, #1
 80010cc:	4925      	ldr	r1, [pc, #148]	; (8001164 <GpsTask+0x118>)
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 fe86 	bl	8001de0 <SSD1306_Puts>

	  	SSD1306_GotoXY (0,28);
 80010d4:	211c      	movs	r1, #28
 80010d6:	2000      	movs	r0, #0
 80010d8:	f000 fdec 	bl	8001cb4 <SSD1306_GotoXY>
		SSD1306_Puts ("KMPH:", &Font_7x10, 1);
 80010dc:	2201      	movs	r2, #1
 80010de:	4921      	ldr	r1, [pc, #132]	; (8001164 <GpsTask+0x118>)
 80010e0:	4825      	ldr	r0, [pc, #148]	; (8001178 <GpsTask+0x12c>)
 80010e2:	f000 fe7d 	bl	8001de0 <SSD1306_Puts>

		SSD1306_GotoXY (40, 28);
 80010e6:	211c      	movs	r1, #28
 80010e8:	2028      	movs	r0, #40	; 0x28
 80010ea:	f000 fde3 	bl	8001cb4 <SSD1306_GotoXY>
		sprintf(numbers, "%f", GPS.speed_km);
 80010ee:	4b1f      	ldr	r3, [pc, #124]	; (800116c <GpsTask+0x120>)
 80010f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fa30 	bl	8000558 <__aeabi_f2d>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	f107 0018 	add.w	r0, r7, #24
 8001100:	491b      	ldr	r1, [pc, #108]	; (8001170 <GpsTask+0x124>)
 8001102:	f007 fff3 	bl	80090ec <siprintf>
		SSD1306_Puts(numbers, &Font_7x10, 1);
 8001106:	f107 0318 	add.w	r3, r7, #24
 800110a:	2201      	movs	r2, #1
 800110c:	4915      	ldr	r1, [pc, #84]	; (8001164 <GpsTask+0x118>)
 800110e:	4618      	mov	r0, r3
 8001110:	f000 fe66 	bl	8001de0 <SSD1306_Puts>

		SSD1306_GotoXY (0,42);
 8001114:	212a      	movs	r1, #42	; 0x2a
 8001116:	2000      	movs	r0, #0
 8001118:	f000 fdcc 	bl	8001cb4 <SSD1306_GotoXY>
		SSD1306_Puts ("TIME:", &Font_7x10, 1);
 800111c:	2201      	movs	r2, #1
 800111e:	4911      	ldr	r1, [pc, #68]	; (8001164 <GpsTask+0x118>)
 8001120:	4816      	ldr	r0, [pc, #88]	; (800117c <GpsTask+0x130>)
 8001122:	f000 fe5d 	bl	8001de0 <SSD1306_Puts>

		SSD1306_GotoXY (40, 42);
 8001126:	212a      	movs	r1, #42	; 0x2a
 8001128:	2028      	movs	r0, #40	; 0x28
 800112a:	f000 fdc3 	bl	8001cb4 <SSD1306_GotoXY>
		sprintf(numbers, "%T", GPS.utc_time);
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <GpsTask+0x120>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fa10 	bl	8000558 <__aeabi_f2d>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	f107 0018 	add.w	r0, r7, #24
 8001140:	490f      	ldr	r1, [pc, #60]	; (8001180 <GpsTask+0x134>)
 8001142:	f007 ffd3 	bl	80090ec <siprintf>
		SSD1306_Puts(numbers , &Font_7x10, 1);
 8001146:	f107 0318 	add.w	r3, r7, #24
 800114a:	2201      	movs	r2, #1
 800114c:	4905      	ldr	r1, [pc, #20]	; (8001164 <GpsTask+0x118>)
 800114e:	4618      	mov	r0, r3
 8001150:	f000 fe46 	bl	8001de0 <SSD1306_Puts>

	  	SSD1306_UpdateScreen();
 8001154:	f000 fd08 	bl	8001b68 <SSD1306_UpdateScreen>



	  	osDelay(500);
 8001158:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800115c:	f004 fc94 	bl	8005a88 <osDelay>
  {
 8001160:	e778      	b.n	8001054 <GpsTask+0x8>
 8001162:	bf00      	nop
 8001164:	20000000 	.word	0x20000000
 8001168:	0800d4c0 	.word	0x0800d4c0
 800116c:	20004c38 	.word	0x20004c38
 8001170:	0800d4c8 	.word	0x0800d4c8
 8001174:	0800d4cc 	.word	0x0800d4cc
 8001178:	0800d4d4 	.word	0x0800d4d4
 800117c:	0800d4dc 	.word	0x0800d4dc
 8001180:	0800d4e4 	.word	0x0800d4e4

08001184 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	; 0x28
 8001188:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	4b2d      	ldr	r3, [pc, #180]	; (8001254 <MX_GPIO_Init+0xd0>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a2c      	ldr	r2, [pc, #176]	; (8001254 <MX_GPIO_Init+0xd0>)
 80011a4:	f043 0304 	orr.w	r3, r3, #4
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b2a      	ldr	r3, [pc, #168]	; (8001254 <MX_GPIO_Init+0xd0>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0304 	and.w	r3, r3, #4
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b26      	ldr	r3, [pc, #152]	; (8001254 <MX_GPIO_Init+0xd0>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a25      	ldr	r2, [pc, #148]	; (8001254 <MX_GPIO_Init+0xd0>)
 80011c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b23      	ldr	r3, [pc, #140]	; (8001254 <MX_GPIO_Init+0xd0>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <MX_GPIO_Init+0xd0>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a1e      	ldr	r2, [pc, #120]	; (8001254 <MX_GPIO_Init+0xd0>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <MX_GPIO_Init+0xd0>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	4b18      	ldr	r3, [pc, #96]	; (8001254 <MX_GPIO_Init+0xd0>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a17      	ldr	r2, [pc, #92]	; (8001254 <MX_GPIO_Init+0xd0>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <MX_GPIO_Init+0xd0>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	f240 3102 	movw	r1, #770	; 0x302
 8001210:	4811      	ldr	r0, [pc, #68]	; (8001258 <MX_GPIO_Init+0xd4>)
 8001212:	f001 fc8b 	bl	8002b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9;
 8001216:	f240 3302 	movw	r3, #770	; 0x302
 800121a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121c:	2301      	movs	r3, #1
 800121e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	480a      	ldr	r0, [pc, #40]	; (8001258 <MX_GPIO_Init+0xd4>)
 8001230:	f001 faf8 	bl	8002824 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001234:	2304      	movs	r3, #4
 8001236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001238:	2300      	movs	r3, #0
 800123a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4619      	mov	r1, r3
 8001246:	4804      	ldr	r0, [pc, #16]	; (8001258 <MX_GPIO_Init+0xd4>)
 8001248:	f001 faec 	bl	8002824 <HAL_GPIO_Init>

}
 800124c:	bf00      	nop
 800124e:	3728      	adds	r7, #40	; 0x28
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40023800 	.word	0x40023800
 8001258:	40020400 	.word	0x40020400

0800125c <GPS_Init>:
	CDC_Transmit_FS((unsigned char *) buf, (uint16_t) strlen(buf));
}
#endif

void GPS_Init()
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8001260:	2201      	movs	r2, #1
 8001262:	4903      	ldr	r1, [pc, #12]	; (8001270 <GPS_Init+0x14>)
 8001264:	4803      	ldr	r0, [pc, #12]	; (8001274 <GPS_Init+0x18>)
 8001266:	f003 fafa 	bl	800485e <HAL_UART_Receive_IT>
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000208 	.word	0x20000208
 8001274:	20004e84 	.word	0x20004e84

08001278 <GPS_UART_CallBack>:


void GPS_UART_CallBack(){
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 800127e:	4b25      	ldr	r3, [pc, #148]	; (8001314 <GPS_UART_CallBack+0x9c>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b0a      	cmp	r3, #10
 8001284:	d010      	beq.n	80012a8 <GPS_UART_CallBack+0x30>
 8001286:	4b24      	ldr	r3, [pc, #144]	; (8001318 <GPS_UART_CallBack+0xa0>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	b25b      	sxtb	r3, r3
 800128c:	2b00      	cmp	r3, #0
 800128e:	db0b      	blt.n	80012a8 <GPS_UART_CallBack+0x30>
		rx_buffer[rx_index++] = rx_data;
 8001290:	4b21      	ldr	r3, [pc, #132]	; (8001318 <GPS_UART_CallBack+0xa0>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	1c5a      	adds	r2, r3, #1
 8001296:	b2d1      	uxtb	r1, r2
 8001298:	4a1f      	ldr	r2, [pc, #124]	; (8001318 <GPS_UART_CallBack+0xa0>)
 800129a:	7011      	strb	r1, [r2, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <GPS_UART_CallBack+0x9c>)
 80012a0:	7819      	ldrb	r1, [r3, #0]
 80012a2:	4b1e      	ldr	r3, [pc, #120]	; (800131c <GPS_UART_CallBack+0xa4>)
 80012a4:	5499      	strb	r1, [r3, r2]
 80012a6:	e02c      	b.n	8001302 <GPS_UART_CallBack+0x8a>
	} else {

		uint8_t j = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	71fb      	strb	r3, [r7, #7]
		for(uint8_t i = 0; i < sizeof(rx_buffer); i++)
 80012ac:	2300      	movs	r3, #0
 80012ae:	71bb      	strb	r3, [r7, #6]
 80012b0:	e010      	b.n	80012d4 <GPS_UART_CallBack+0x5c>
		{
			rx_buffer_single[i] = rx_buffer[j];
 80012b2:	79fa      	ldrb	r2, [r7, #7]
 80012b4:	79bb      	ldrb	r3, [r7, #6]
 80012b6:	4919      	ldr	r1, [pc, #100]	; (800131c <GPS_UART_CallBack+0xa4>)
 80012b8:	5c89      	ldrb	r1, [r1, r2]
 80012ba:	4a19      	ldr	r2, [pc, #100]	; (8001320 <GPS_UART_CallBack+0xa8>)
 80012bc:	54d1      	strb	r1, [r2, r3]
			j += 2;
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	3302      	adds	r3, #2
 80012c2:	71fb      	strb	r3, [r7, #7]
			if(rx_buffer[j] == '\n') break;
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	4a15      	ldr	r2, [pc, #84]	; (800131c <GPS_UART_CallBack+0xa4>)
 80012c8:	5cd3      	ldrb	r3, [r2, r3]
 80012ca:	2b0a      	cmp	r3, #10
 80012cc:	d007      	beq.n	80012de <GPS_UART_CallBack+0x66>
		for(uint8_t i = 0; i < sizeof(rx_buffer); i++)
 80012ce:	79bb      	ldrb	r3, [r7, #6]
 80012d0:	3301      	adds	r3, #1
 80012d2:	71bb      	strb	r3, [r7, #6]
 80012d4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	daea      	bge.n	80012b2 <GPS_UART_CallBack+0x3a>
 80012dc:	e000      	b.n	80012e0 <GPS_UART_CallBack+0x68>
			if(rx_buffer[j] == '\n') break;
 80012de:	bf00      	nop

		#if (GPS_DEBUG == 1)
		GPS_print((char*)rx_buffer_single);
		#endif

		if(GPS_validate((char*) rx_buffer_single))
 80012e0:	480f      	ldr	r0, [pc, #60]	; (8001320 <GPS_UART_CallBack+0xa8>)
 80012e2:	f000 f821 	bl	8001328 <GPS_validate>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d002      	beq.n	80012f2 <GPS_UART_CallBack+0x7a>
			GPS_parse((char*) rx_buffer_single);
 80012ec:	480c      	ldr	r0, [pc, #48]	; (8001320 <GPS_UART_CallBack+0xa8>)
 80012ee:	f000 f885 	bl	80013fc <GPS_parse>
		rx_index = 0;
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <GPS_UART_CallBack+0xa0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer_single, 0, sizeof(rx_buffer_single));
 80012f8:	2280      	movs	r2, #128	; 0x80
 80012fa:	2100      	movs	r1, #0
 80012fc:	4808      	ldr	r0, [pc, #32]	; (8001320 <GPS_UART_CallBack+0xa8>)
 80012fe:	f007 f86d 	bl	80083dc <memset>
	}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8001302:	2201      	movs	r2, #1
 8001304:	4903      	ldr	r1, [pc, #12]	; (8001314 <GPS_UART_CallBack+0x9c>)
 8001306:	4807      	ldr	r0, [pc, #28]	; (8001324 <GPS_UART_CallBack+0xac>)
 8001308:	f003 faa9 	bl	800485e <HAL_UART_Receive_IT>

}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000208 	.word	0x20000208
 8001318:	20000209 	.word	0x20000209
 800131c:	20004c90 	.word	0x20004c90
 8001320:	20004d10 	.word	0x20004d10
 8001324:	20004e84 	.word	0x20004e84

08001328 <GPS_validate>:


int GPS_validate(char *nmeastr){
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8001334:	2300      	movs	r3, #0
 8001336:	613b      	str	r3, [r7, #16]

    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8001338:	f44f 7100 	mov.w	r1, #512	; 0x200
 800133c:	482d      	ldr	r0, [pc, #180]	; (80013f4 <GPS_validate+0xcc>)
 800133e:	f001 fc0e 	bl	8002b5e <HAL_GPIO_TogglePin>
    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	4413      	add	r3, r2
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b24      	cmp	r3, #36	; 0x24
 800134c:	d103      	bne.n	8001356 <GPS_validate+0x2e>
        i++;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	3301      	adds	r3, #1
 8001352:	617b      	str	r3, [r7, #20]
    else
        return 0;


    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001354:	e00c      	b.n	8001370 <GPS_validate+0x48>
        return 0;
 8001356:	2300      	movs	r3, #0
 8001358:	e047      	b.n	80013ea <GPS_validate+0xc2>
        calculated_check ^= nmeastr[i];// calculate the checksum
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	4413      	add	r3, r2
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4053      	eors	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        i++;
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	3301      	adds	r3, #1
 800136e:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d008      	beq.n	800138e <GPS_validate+0x66>
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b2a      	cmp	r3, #42	; 0x2a
 8001386:	d002      	beq.n	800138e <GPS_validate+0x66>
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	2b4a      	cmp	r3, #74	; 0x4a
 800138c:	dde5      	ble.n	800135a <GPS_validate+0x32>
    }

    if(i >= 75){
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	2b4a      	cmp	r3, #74	; 0x4a
 8001392:	dd01      	ble.n	8001398 <GPS_validate+0x70>
        return 0;// the string was too long so return an error
 8001394:	2300      	movs	r3, #0
 8001396:	e028      	b.n	80013ea <GPS_validate+0xc2>
    }

    if (nmeastr[i] == '*'){
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b2a      	cmp	r3, #42	; 0x2a
 80013a2:	d119      	bne.n	80013d8 <GPS_validate+0xb0>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	3301      	adds	r3, #1
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	4413      	add	r3, r2
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	3302      	adds	r3, #2
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	4413      	add	r3, r2
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 80013c0:	f107 0308 	add.w	r3, r7, #8
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	490c      	ldr	r1, [pc, #48]	; (80013f8 <GPS_validate+0xd0>)
 80013c8:	4618      	mov	r0, r3
 80013ca:	f007 fe8f 	bl	80090ec <siprintf>

    return((checkcalcstr[0] == check[0])
 80013ce:	7a3a      	ldrb	r2, [r7, #8]
 80013d0:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d108      	bne.n	80013e8 <GPS_validate+0xc0>
 80013d6:	e001      	b.n	80013dc <GPS_validate+0xb4>
        return 0;// no checksum separator found there for invalid
 80013d8:	2300      	movs	r3, #0
 80013da:	e006      	b.n	80013ea <GPS_validate+0xc2>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80013dc:	7a7a      	ldrb	r2, [r7, #9]
 80013de:	7b7b      	ldrb	r3, [r7, #13]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d101      	bne.n	80013e8 <GPS_validate+0xc0>
 80013e4:	2301      	movs	r3, #1
 80013e6:	e000      	b.n	80013ea <GPS_validate+0xc2>
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40020400 	.word	0x40020400
 80013f8:	0800d4e8 	.word	0x0800d4e8

080013fc <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af08      	add	r7, sp, #32
 8001402:	6078      	str	r0, [r7, #4]

    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 8001404:	2206      	movs	r2, #6
 8001406:	4953      	ldr	r1, [pc, #332]	; (8001554 <GPS_parse+0x158>)
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f007 ff00 	bl	800920e <strncmp>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d118      	bne.n	8001446 <GPS_parse+0x4a>

    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8001414:	4b50      	ldr	r3, [pc, #320]	; (8001558 <GPS_parse+0x15c>)
 8001416:	9307      	str	r3, [sp, #28]
 8001418:	4b50      	ldr	r3, [pc, #320]	; (800155c <GPS_parse+0x160>)
 800141a:	9306      	str	r3, [sp, #24]
 800141c:	4b50      	ldr	r3, [pc, #320]	; (8001560 <GPS_parse+0x164>)
 800141e:	9305      	str	r3, [sp, #20]
 8001420:	4b50      	ldr	r3, [pc, #320]	; (8001564 <GPS_parse+0x168>)
 8001422:	9304      	str	r3, [sp, #16]
 8001424:	4b50      	ldr	r3, [pc, #320]	; (8001568 <GPS_parse+0x16c>)
 8001426:	9303      	str	r3, [sp, #12]
 8001428:	4b50      	ldr	r3, [pc, #320]	; (800156c <GPS_parse+0x170>)
 800142a:	9302      	str	r3, [sp, #8]
 800142c:	4b50      	ldr	r3, [pc, #320]	; (8001570 <GPS_parse+0x174>)
 800142e:	9301      	str	r3, [sp, #4]
 8001430:	4b50      	ldr	r3, [pc, #320]	; (8001574 <GPS_parse+0x178>)
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	4b50      	ldr	r3, [pc, #320]	; (8001578 <GPS_parse+0x17c>)
 8001436:	4a51      	ldr	r2, [pc, #324]	; (800157c <GPS_parse+0x180>)
 8001438:	4951      	ldr	r1, [pc, #324]	; (8001580 <GPS_parse+0x184>)
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f007 fe76 	bl	800912c <siscanf>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	e082      	b.n	800154c <GPS_parse+0x150>
    		return;
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 8001446:	2206      	movs	r2, #6
 8001448:	494e      	ldr	r1, [pc, #312]	; (8001584 <GPS_parse+0x188>)
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f007 fedf 	bl	800920e <strncmp>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d114      	bne.n	8001480 <GPS_parse+0x84>

    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 8001456:	4b4c      	ldr	r3, [pc, #304]	; (8001588 <GPS_parse+0x18c>)
 8001458:	9305      	str	r3, [sp, #20]
 800145a:	4b4c      	ldr	r3, [pc, #304]	; (800158c <GPS_parse+0x190>)
 800145c:	9304      	str	r3, [sp, #16]
 800145e:	4b4c      	ldr	r3, [pc, #304]	; (8001590 <GPS_parse+0x194>)
 8001460:	9303      	str	r3, [sp, #12]
 8001462:	4b42      	ldr	r3, [pc, #264]	; (800156c <GPS_parse+0x170>)
 8001464:	9302      	str	r3, [sp, #8]
 8001466:	4b42      	ldr	r3, [pc, #264]	; (8001570 <GPS_parse+0x174>)
 8001468:	9301      	str	r3, [sp, #4]
 800146a:	4b42      	ldr	r3, [pc, #264]	; (8001574 <GPS_parse+0x178>)
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	4b42      	ldr	r3, [pc, #264]	; (8001578 <GPS_parse+0x17c>)
 8001470:	4a42      	ldr	r2, [pc, #264]	; (800157c <GPS_parse+0x180>)
 8001472:	4948      	ldr	r1, [pc, #288]	; (8001594 <GPS_parse+0x198>)
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f007 fe59 	bl	800912c <siscanf>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	e065      	b.n	800154c <GPS_parse+0x150>
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 8001480:	2206      	movs	r2, #6
 8001482:	4945      	ldr	r1, [pc, #276]	; (8001598 <GPS_parse+0x19c>)
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f007 fec2 	bl	800920e <strncmp>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d12f      	bne.n	80014f0 <GPS_parse+0xf4>

        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 8001490:	4b42      	ldr	r3, [pc, #264]	; (800159c <GPS_parse+0x1a0>)
 8001492:	9303      	str	r3, [sp, #12]
 8001494:	4b39      	ldr	r3, [pc, #228]	; (800157c <GPS_parse+0x180>)
 8001496:	9302      	str	r3, [sp, #8]
 8001498:	4b34      	ldr	r3, [pc, #208]	; (800156c <GPS_parse+0x170>)
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	4b34      	ldr	r3, [pc, #208]	; (8001570 <GPS_parse+0x174>)
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	4b34      	ldr	r3, [pc, #208]	; (8001574 <GPS_parse+0x178>)
 80014a2:	4a35      	ldr	r2, [pc, #212]	; (8001578 <GPS_parse+0x17c>)
 80014a4:	493e      	ldr	r1, [pc, #248]	; (80015a0 <GPS_parse+0x1a4>)
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f007 fe40 	bl	800912c <siscanf>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	dd0e      	ble.n	80014d0 <GPS_parse+0xd4>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80014b2:	4b3c      	ldr	r3, [pc, #240]	; (80015a4 <GPS_parse+0x1a8>)
 80014b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80014b8:	4b3a      	ldr	r3, [pc, #232]	; (80015a4 <GPS_parse+0x1a8>)
 80014ba:	7e1b      	ldrb	r3, [r3, #24]
 80014bc:	4618      	mov	r0, r3
 80014be:	eeb0 0a67 	vmov.f32	s0, s15
 80014c2:	f000 f883 	bl	80015cc <GPS_nmea_to_dec>
 80014c6:	eef0 7a40 	vmov.f32	s15, s0
 80014ca:	4b36      	ldr	r3, [pc, #216]	; (80015a4 <GPS_parse+0x1a8>)
 80014cc:	edc3 7a01 	vstr	s15, [r3, #4]
			GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80014d0:	4b34      	ldr	r3, [pc, #208]	; (80015a4 <GPS_parse+0x1a8>)
 80014d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80014d6:	4b33      	ldr	r3, [pc, #204]	; (80015a4 <GPS_parse+0x1a8>)
 80014d8:	7e5b      	ldrb	r3, [r3, #25]
 80014da:	4618      	mov	r0, r3
 80014dc:	eeb0 0a67 	vmov.f32	s0, s15
 80014e0:	f000 f874 	bl	80015cc <GPS_nmea_to_dec>
 80014e4:	eef0 7a40 	vmov.f32	s15, s0
 80014e8:	4b2e      	ldr	r3, [pc, #184]	; (80015a4 <GPS_parse+0x1a8>)
 80014ea:	edc3 7a00 	vstr	s15, [r3]
        	return;
 80014ee:	e02d      	b.n	800154c <GPS_parse+0x150>
    }
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 80014f0:	2206      	movs	r2, #6
 80014f2:	492d      	ldr	r1, [pc, #180]	; (80015a8 <GPS_parse+0x1ac>)
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f007 fe8a 	bl	800920e <strncmp>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d125      	bne.n	800154c <GPS_parse+0x150>

        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8001500:	4b2a      	ldr	r3, [pc, #168]	; (80015ac <GPS_parse+0x1b0>)
 8001502:	9305      	str	r3, [sp, #20]
 8001504:	4b2a      	ldr	r3, [pc, #168]	; (80015b0 <GPS_parse+0x1b4>)
 8001506:	9304      	str	r3, [sp, #16]
 8001508:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <GPS_parse+0x1b8>)
 800150a:	9303      	str	r3, [sp, #12]
 800150c:	4b20      	ldr	r3, [pc, #128]	; (8001590 <GPS_parse+0x194>)
 800150e:	9302      	str	r3, [sp, #8]
 8001510:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <GPS_parse+0x1bc>)
 8001512:	9301      	str	r3, [sp, #4]
 8001514:	4b29      	ldr	r3, [pc, #164]	; (80015bc <GPS_parse+0x1c0>)
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	4b29      	ldr	r3, [pc, #164]	; (80015c0 <GPS_parse+0x1c4>)
 800151a:	4a2a      	ldr	r2, [pc, #168]	; (80015c4 <GPS_parse+0x1c8>)
 800151c:	492a      	ldr	r1, [pc, #168]	; (80015c8 <GPS_parse+0x1cc>)
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f007 fe04 	bl	800912c <siscanf>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	dd0f      	ble.n	800154a <GPS_parse+0x14e>
            GPS.speed_km = GPS_nmea_to_dec(GPS.speed_km, GPS.speed_km_unit);
 800152a:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <GPS_parse+0x1a8>)
 800152c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001530:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <GPS_parse+0x1a8>)
 8001532:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001536:	4618      	mov	r0, r3
 8001538:	eeb0 0a67 	vmov.f32	s0, s15
 800153c:	f000 f846 	bl	80015cc <GPS_nmea_to_dec>
 8001540:	eef0 7a40 	vmov.f32	s15, s0
 8001544:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <GPS_parse+0x1a8>)
 8001546:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
        	return;
 800154a:	bf00      	nop
    }
}
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	0800d4f0 	.word	0x0800d4f0
 8001558:	20004c64 	.word	0x20004c64
 800155c:	20004c60 	.word	0x20004c60
 8001560:	20004c5c 	.word	0x20004c5c
 8001564:	20004c58 	.word	0x20004c58
 8001568:	20004c54 	.word	0x20004c54
 800156c:	20004c51 	.word	0x20004c51
 8001570:	20004c44 	.word	0x20004c44
 8001574:	20004c50 	.word	0x20004c50
 8001578:	20004c48 	.word	0x20004c48
 800157c:	20004c4c 	.word	0x20004c4c
 8001580:	0800d4f8 	.word	0x0800d4f8
 8001584:	0800d520 	.word	0x0800d520
 8001588:	20004c70 	.word	0x20004c70
 800158c:	20004c6c 	.word	0x20004c6c
 8001590:	20004c68 	.word	0x20004c68
 8001594:	0800d528 	.word	0x0800d528
 8001598:	0800d548 	.word	0x0800d548
 800159c:	20004c74 	.word	0x20004c74
 80015a0:	0800d550 	.word	0x0800d550
 80015a4:	20004c38 	.word	0x20004c38
 80015a8:	0800d56c 	.word	0x0800d56c
 80015ac:	20004c8c 	.word	0x20004c8c
 80015b0:	20004c88 	.word	0x20004c88
 80015b4:	20004c85 	.word	0x20004c85
 80015b8:	20004c84 	.word	0x20004c84
 80015bc:	20004c80 	.word	0x20004c80
 80015c0:	20004c7c 	.word	0x20004c7c
 80015c4:	20004c78 	.word	0x20004c78
 80015c8:	0800d574 	.word	0x0800d574

080015cc <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 80015cc:	b480      	push	{r7}
 80015ce:	b087      	sub	sp, #28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	ed87 0a01 	vstr	s0, [r7, #4]
 80015d6:	4603      	mov	r3, r0
 80015d8:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 80015da:	ed97 7a01 	vldr	s14, [r7, #4]
 80015de:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001660 <GPS_nmea_to_dec+0x94>
 80015e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015ea:	ee17 3a90 	vmov	r3, s15
 80015ee:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	2264      	movs	r2, #100	; 0x64
 80015f4:	fb02 f303 	mul.w	r3, r2, r3
 80015f8:	ee07 3a90 	vmov	s15, r3
 80015fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001600:	ed97 7a01 	vldr	s14, [r7, #4]
 8001604:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001608:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 800160c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001610:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001664 <GPS_nmea_to_dec+0x98>
 8001614:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001618:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	ee07 3a90 	vmov	s15, r3
 8001622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001626:	ed97 7a02 	vldr	s14, [r7, #8]
 800162a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800162e:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8001632:	78fb      	ldrb	r3, [r7, #3]
 8001634:	2b53      	cmp	r3, #83	; 0x53
 8001636:	d002      	beq.n	800163e <GPS_nmea_to_dec+0x72>
 8001638:	78fb      	ldrb	r3, [r7, #3]
 800163a:	2b57      	cmp	r3, #87	; 0x57
 800163c:	d105      	bne.n	800164a <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 800163e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001642:	eef1 7a67 	vneg.f32	s15, s15
 8001646:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	ee07 3a90 	vmov	s15, r3
}
 8001650:	eeb0 0a67 	vmov.f32	s0, s15
 8001654:	371c      	adds	r7, #28
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	42c80000 	.word	0x42c80000
 8001664:	42700000 	.word	0x42700000

08001668 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <MX_I2C1_Init+0x50>)
 800166e:	4a13      	ldr	r2, [pc, #76]	; (80016bc <MX_I2C1_Init+0x54>)
 8001670:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <MX_I2C1_Init+0x50>)
 8001674:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <MX_I2C1_Init+0x58>)
 8001676:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <MX_I2C1_Init+0x50>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <MX_I2C1_Init+0x50>)
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <MX_I2C1_Init+0x50>)
 8001686:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800168a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <MX_I2C1_Init+0x50>)
 800168e:	2200      	movs	r2, #0
 8001690:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <MX_I2C1_Init+0x50>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001698:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <MX_I2C1_Init+0x50>)
 800169a:	2200      	movs	r2, #0
 800169c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <MX_I2C1_Init+0x50>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016a4:	4804      	ldr	r0, [pc, #16]	; (80016b8 <MX_I2C1_Init+0x50>)
 80016a6:	f001 fa75 	bl	8002b94 <HAL_I2C_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016b0:	f000 f912 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20004d90 	.word	0x20004d90
 80016bc:	40005400 	.word	0x40005400
 80016c0:	00061a80 	.word	0x00061a80

080016c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	; 0x28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a19      	ldr	r2, [pc, #100]	; (8001748 <HAL_I2C_MspInit+0x84>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d12b      	bne.n	800173e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	4b18      	ldr	r3, [pc, #96]	; (800174c <HAL_I2C_MspInit+0x88>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a17      	ldr	r2, [pc, #92]	; (800174c <HAL_I2C_MspInit+0x88>)
 80016f0:	f043 0302 	orr.w	r3, r3, #2
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <HAL_I2C_MspInit+0x88>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001702:	23c0      	movs	r3, #192	; 0xc0
 8001704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001706:	2312      	movs	r3, #18
 8001708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800170a:	2301      	movs	r3, #1
 800170c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170e:	2303      	movs	r3, #3
 8001710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001712:	2304      	movs	r3, #4
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	4619      	mov	r1, r3
 800171c:	480c      	ldr	r0, [pc, #48]	; (8001750 <HAL_I2C_MspInit+0x8c>)
 800171e:	f001 f881 	bl	8002824 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <HAL_I2C_MspInit+0x88>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	4a08      	ldr	r2, [pc, #32]	; (800174c <HAL_I2C_MspInit+0x88>)
 800172c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001730:	6413      	str	r3, [r2, #64]	; 0x40
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_I2C_MspInit+0x88>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800173e:	bf00      	nop
 8001740:	3728      	adds	r7, #40	; 0x28
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40005400 	.word	0x40005400
 800174c:	40023800 	.word	0x40023800
 8001750:	40020400 	.word	0x40020400

08001754 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	GPS_UART_CallBack();
 800175c:	f7ff fd8c 	bl	8001278 <GPS_UART_CallBack>
}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800176c:	f000 fe80 	bl	8002470 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001770:	f000 f826 	bl	80017c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001774:	f7ff fd06 	bl	8001184 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001778:	f7ff ff76 	bl	8001668 <MX_I2C1_Init>
  MX_SPI1_Init();
 800177c:	f000 f8b2 	bl	80018e4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001780:	f000 fd60 	bl	8002244 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001784:	f000 fdd0 	bl	8002328 <MX_USB_OTG_FS_PCD_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001788:	f000 f888 	bl	800189c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  GPS_Init();
 800178c:	f7ff fd66 	bl	800125c <GPS_Init>
  SSD1306_Init();
 8001790:	f000 f926 	bl	80019e0 <SSD1306_Init>
  SSD1306_Clear();
 8001794:	f000 fb49 	bl	8001e2a <SSD1306_Clear>
  SSD1306_UpdateScreen();
 8001798:	f000 f9e6 	bl	8001b68 <SSD1306_UpdateScreen>

  __HAL_UART_ENABLE_IT(&huart1, UART_FLAG_RXNE);
 800179c:	4b07      	ldr	r3, [pc, #28]	; (80017bc <main+0x54>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	695a      	ldr	r2, [r3, #20]
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <main+0x54>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f042 0220 	orr.w	r2, r2, #32
 80017aa:	615a      	str	r2, [r3, #20]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80017ac:	f004 f890 	bl	80058d0 <osKernelInitialize>
  MX_FREERTOS_Init();
 80017b0:	f7ff fc24 	bl	8000ffc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80017b4:	f004 f8b0 	bl	8005918 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <main+0x50>
 80017ba:	bf00      	nop
 80017bc:	20004e84 	.word	0x20004e84

080017c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b094      	sub	sp, #80	; 0x50
 80017c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017c6:	f107 0320 	add.w	r3, r7, #32
 80017ca:	2230      	movs	r2, #48	; 0x30
 80017cc:	2100      	movs	r1, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f006 fe04 	bl	80083dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017d4:	f107 030c 	add.w	r3, r7, #12
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e4:	2300      	movs	r3, #0
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	4b2a      	ldr	r3, [pc, #168]	; (8001894 <SystemClock_Config+0xd4>)
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	4a29      	ldr	r2, [pc, #164]	; (8001894 <SystemClock_Config+0xd4>)
 80017ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f2:	6413      	str	r3, [r2, #64]	; 0x40
 80017f4:	4b27      	ldr	r3, [pc, #156]	; (8001894 <SystemClock_Config+0xd4>)
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001800:	2300      	movs	r3, #0
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	4b24      	ldr	r3, [pc, #144]	; (8001898 <SystemClock_Config+0xd8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800180c:	4a22      	ldr	r2, [pc, #136]	; (8001898 <SystemClock_Config+0xd8>)
 800180e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	4b20      	ldr	r3, [pc, #128]	; (8001898 <SystemClock_Config+0xd8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001820:	2303      	movs	r3, #3
 8001822:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001824:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800182a:	2301      	movs	r3, #1
 800182c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800182e:	2310      	movs	r3, #16
 8001830:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001832:	2302      	movs	r3, #2
 8001834:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001836:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800183a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800183c:	230f      	movs	r3, #15
 800183e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001840:	2390      	movs	r3, #144	; 0x90
 8001842:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001844:	2302      	movs	r3, #2
 8001846:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001848:	2305      	movs	r3, #5
 800184a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800184c:	f107 0320 	add.w	r3, r7, #32
 8001850:	4618      	mov	r0, r3
 8001852:	f002 f835 	bl	80038c0 <HAL_RCC_OscConfig>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800185c:	f000 f83c 	bl	80018d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001860:	230f      	movs	r3, #15
 8001862:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001864:	2300      	movs	r3, #0
 8001866:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800186c:	2300      	movs	r3, #0
 800186e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	2100      	movs	r1, #0
 800187a:	4618      	mov	r0, r3
 800187c:	f002 fa98 	bl	8003db0 <HAL_RCC_ClockConfig>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001886:	f000 f827 	bl	80018d8 <Error_Handler>
  }
}
 800188a:	bf00      	nop
 800188c:	3750      	adds	r7, #80	; 0x50
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800
 8001898:	40007000 	.word	0x40007000

0800189c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80018a0:	2200      	movs	r2, #0
 80018a2:	2100      	movs	r1, #0
 80018a4:	2025      	movs	r0, #37	; 0x25
 80018a6:	f000 ff01 	bl	80026ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018aa:	2025      	movs	r0, #37	; 0x25
 80018ac:	f000 ff1a 	bl	80026e4 <HAL_NVIC_EnableIRQ>
}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d101      	bne.n	80018ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018c6:	f000 fdf5 	bl	80024b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40000400 	.word	0x40000400

080018d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018dc:	b672      	cpsid	i
}
 80018de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <Error_Handler+0x8>
	...

080018e4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80018e8:	4b17      	ldr	r3, [pc, #92]	; (8001948 <MX_SPI1_Init+0x64>)
 80018ea:	4a18      	ldr	r2, [pc, #96]	; (800194c <MX_SPI1_Init+0x68>)
 80018ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018ee:	4b16      	ldr	r3, [pc, #88]	; (8001948 <MX_SPI1_Init+0x64>)
 80018f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018f6:	4b14      	ldr	r3, [pc, #80]	; (8001948 <MX_SPI1_Init+0x64>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <MX_SPI1_Init+0x64>)
 80018fe:	2200      	movs	r2, #0
 8001900:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <MX_SPI1_Init+0x64>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <MX_SPI1_Init+0x64>)
 800190a:	2200      	movs	r2, #0
 800190c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <MX_SPI1_Init+0x64>)
 8001910:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001914:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001916:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <MX_SPI1_Init+0x64>)
 8001918:	2200      	movs	r2, #0
 800191a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800191c:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <MX_SPI1_Init+0x64>)
 800191e:	2200      	movs	r2, #0
 8001920:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <MX_SPI1_Init+0x64>)
 8001924:	2200      	movs	r2, #0
 8001926:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001928:	4b07      	ldr	r3, [pc, #28]	; (8001948 <MX_SPI1_Init+0x64>)
 800192a:	2200      	movs	r2, #0
 800192c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MX_SPI1_Init+0x64>)
 8001930:	220a      	movs	r2, #10
 8001932:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001934:	4804      	ldr	r0, [pc, #16]	; (8001948 <MX_SPI1_Init+0x64>)
 8001936:	f002 fc3d 	bl	80041b4 <HAL_SPI_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001940:	f7ff ffca 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20004de4 	.word	0x20004de4
 800194c:	40013000 	.word	0x40013000

08001950 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08a      	sub	sp, #40	; 0x28
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a19      	ldr	r2, [pc, #100]	; (80019d4 <HAL_SPI_MspInit+0x84>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d12c      	bne.n	80019cc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	4b18      	ldr	r3, [pc, #96]	; (80019d8 <HAL_SPI_MspInit+0x88>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197a:	4a17      	ldr	r2, [pc, #92]	; (80019d8 <HAL_SPI_MspInit+0x88>)
 800197c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001980:	6453      	str	r3, [r2, #68]	; 0x44
 8001982:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <HAL_SPI_MspInit+0x88>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001986:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <HAL_SPI_MspInit+0x88>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a10      	ldr	r2, [pc, #64]	; (80019d8 <HAL_SPI_MspInit+0x88>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <HAL_SPI_MspInit+0x88>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 80019aa:	f248 03e0 	movw	r3, #32992	; 0x80e0
 80019ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b8:	2303      	movs	r3, #3
 80019ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019bc:	2305      	movs	r3, #5
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	4619      	mov	r1, r3
 80019c6:	4805      	ldr	r0, [pc, #20]	; (80019dc <HAL_SPI_MspInit+0x8c>)
 80019c8:	f000 ff2c 	bl	8002824 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80019cc:	bf00      	nop
 80019ce:	3728      	adds	r7, #40	; 0x28
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40013000 	.word	0x40013000
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40020000 	.word	0x40020000

080019e0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80019e6:	f000 fa29 	bl	8001e3c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80019ea:	f644 6320 	movw	r3, #20000	; 0x4e20
 80019ee:	2201      	movs	r2, #1
 80019f0:	2178      	movs	r1, #120	; 0x78
 80019f2:	485b      	ldr	r0, [pc, #364]	; (8001b60 <SSD1306_Init+0x180>)
 80019f4:	f001 fb10 	bl	8003018 <HAL_I2C_IsDeviceReady>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	e0a9      	b.n	8001b56 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001a02:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001a06:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a08:	e002      	b.n	8001a10 <SSD1306_Init+0x30>
		p--;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f9      	bne.n	8001a0a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001a16:	22ae      	movs	r2, #174	; 0xae
 8001a18:	2100      	movs	r1, #0
 8001a1a:	2078      	movs	r0, #120	; 0x78
 8001a1c:	f000 fa6c 	bl	8001ef8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001a20:	2220      	movs	r2, #32
 8001a22:	2100      	movs	r1, #0
 8001a24:	2078      	movs	r0, #120	; 0x78
 8001a26:	f000 fa67 	bl	8001ef8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001a2a:	2210      	movs	r2, #16
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	2078      	movs	r0, #120	; 0x78
 8001a30:	f000 fa62 	bl	8001ef8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001a34:	22b0      	movs	r2, #176	; 0xb0
 8001a36:	2100      	movs	r1, #0
 8001a38:	2078      	movs	r0, #120	; 0x78
 8001a3a:	f000 fa5d 	bl	8001ef8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001a3e:	22c8      	movs	r2, #200	; 0xc8
 8001a40:	2100      	movs	r1, #0
 8001a42:	2078      	movs	r0, #120	; 0x78
 8001a44:	f000 fa58 	bl	8001ef8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	2078      	movs	r0, #120	; 0x78
 8001a4e:	f000 fa53 	bl	8001ef8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001a52:	2210      	movs	r2, #16
 8001a54:	2100      	movs	r1, #0
 8001a56:	2078      	movs	r0, #120	; 0x78
 8001a58:	f000 fa4e 	bl	8001ef8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001a5c:	2240      	movs	r2, #64	; 0x40
 8001a5e:	2100      	movs	r1, #0
 8001a60:	2078      	movs	r0, #120	; 0x78
 8001a62:	f000 fa49 	bl	8001ef8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001a66:	2281      	movs	r2, #129	; 0x81
 8001a68:	2100      	movs	r1, #0
 8001a6a:	2078      	movs	r0, #120	; 0x78
 8001a6c:	f000 fa44 	bl	8001ef8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001a70:	22ff      	movs	r2, #255	; 0xff
 8001a72:	2100      	movs	r1, #0
 8001a74:	2078      	movs	r0, #120	; 0x78
 8001a76:	f000 fa3f 	bl	8001ef8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001a7a:	22a1      	movs	r2, #161	; 0xa1
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	2078      	movs	r0, #120	; 0x78
 8001a80:	f000 fa3a 	bl	8001ef8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001a84:	22a6      	movs	r2, #166	; 0xa6
 8001a86:	2100      	movs	r1, #0
 8001a88:	2078      	movs	r0, #120	; 0x78
 8001a8a:	f000 fa35 	bl	8001ef8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001a8e:	22a8      	movs	r2, #168	; 0xa8
 8001a90:	2100      	movs	r1, #0
 8001a92:	2078      	movs	r0, #120	; 0x78
 8001a94:	f000 fa30 	bl	8001ef8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001a98:	223f      	movs	r2, #63	; 0x3f
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	2078      	movs	r0, #120	; 0x78
 8001a9e:	f000 fa2b 	bl	8001ef8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001aa2:	22a4      	movs	r2, #164	; 0xa4
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	2078      	movs	r0, #120	; 0x78
 8001aa8:	f000 fa26 	bl	8001ef8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001aac:	22d3      	movs	r2, #211	; 0xd3
 8001aae:	2100      	movs	r1, #0
 8001ab0:	2078      	movs	r0, #120	; 0x78
 8001ab2:	f000 fa21 	bl	8001ef8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2100      	movs	r1, #0
 8001aba:	2078      	movs	r0, #120	; 0x78
 8001abc:	f000 fa1c 	bl	8001ef8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001ac0:	22d5      	movs	r2, #213	; 0xd5
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	2078      	movs	r0, #120	; 0x78
 8001ac6:	f000 fa17 	bl	8001ef8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001aca:	22f0      	movs	r2, #240	; 0xf0
 8001acc:	2100      	movs	r1, #0
 8001ace:	2078      	movs	r0, #120	; 0x78
 8001ad0:	f000 fa12 	bl	8001ef8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001ad4:	22d9      	movs	r2, #217	; 0xd9
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	2078      	movs	r0, #120	; 0x78
 8001ada:	f000 fa0d 	bl	8001ef8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001ade:	2222      	movs	r2, #34	; 0x22
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	2078      	movs	r0, #120	; 0x78
 8001ae4:	f000 fa08 	bl	8001ef8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001ae8:	22da      	movs	r2, #218	; 0xda
 8001aea:	2100      	movs	r1, #0
 8001aec:	2078      	movs	r0, #120	; 0x78
 8001aee:	f000 fa03 	bl	8001ef8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001af2:	2212      	movs	r2, #18
 8001af4:	2100      	movs	r1, #0
 8001af6:	2078      	movs	r0, #120	; 0x78
 8001af8:	f000 f9fe 	bl	8001ef8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001afc:	22db      	movs	r2, #219	; 0xdb
 8001afe:	2100      	movs	r1, #0
 8001b00:	2078      	movs	r0, #120	; 0x78
 8001b02:	f000 f9f9 	bl	8001ef8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001b06:	2220      	movs	r2, #32
 8001b08:	2100      	movs	r1, #0
 8001b0a:	2078      	movs	r0, #120	; 0x78
 8001b0c:	f000 f9f4 	bl	8001ef8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001b10:	228d      	movs	r2, #141	; 0x8d
 8001b12:	2100      	movs	r1, #0
 8001b14:	2078      	movs	r0, #120	; 0x78
 8001b16:	f000 f9ef 	bl	8001ef8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001b1a:	2214      	movs	r2, #20
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	2078      	movs	r0, #120	; 0x78
 8001b20:	f000 f9ea 	bl	8001ef8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001b24:	22af      	movs	r2, #175	; 0xaf
 8001b26:	2100      	movs	r1, #0
 8001b28:	2078      	movs	r0, #120	; 0x78
 8001b2a:	f000 f9e5 	bl	8001ef8 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001b2e:	222e      	movs	r2, #46	; 0x2e
 8001b30:	2100      	movs	r1, #0
 8001b32:	2078      	movs	r0, #120	; 0x78
 8001b34:	f000 f9e0 	bl	8001ef8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001b38:	2000      	movs	r0, #0
 8001b3a:	f000 f843 	bl	8001bc4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001b3e:	f000 f813 	bl	8001b68 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001b42:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <SSD1306_Init+0x184>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <SSD1306_Init+0x184>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001b4e:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <SSD1306_Init+0x184>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001b54:	2301      	movs	r3, #1
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20004d90 	.word	0x20004d90
 8001b64:	2000060c 	.word	0x2000060c

08001b68 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001b6e:	2300      	movs	r3, #0
 8001b70:	71fb      	strb	r3, [r7, #7]
 8001b72:	e01d      	b.n	8001bb0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	3b50      	subs	r3, #80	; 0x50
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	2078      	movs	r0, #120	; 0x78
 8001b80:	f000 f9ba 	bl	8001ef8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001b84:	2200      	movs	r2, #0
 8001b86:	2100      	movs	r1, #0
 8001b88:	2078      	movs	r0, #120	; 0x78
 8001b8a:	f000 f9b5 	bl	8001ef8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001b8e:	2210      	movs	r2, #16
 8001b90:	2100      	movs	r1, #0
 8001b92:	2078      	movs	r0, #120	; 0x78
 8001b94:	f000 f9b0 	bl	8001ef8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	01db      	lsls	r3, r3, #7
 8001b9c:	4a08      	ldr	r2, [pc, #32]	; (8001bc0 <SSD1306_UpdateScreen+0x58>)
 8001b9e:	441a      	add	r2, r3
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	2140      	movs	r1, #64	; 0x40
 8001ba4:	2078      	movs	r0, #120	; 0x78
 8001ba6:	f000 f95f 	bl	8001e68 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	3301      	adds	r3, #1
 8001bae:	71fb      	strb	r3, [r7, #7]
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	2b07      	cmp	r3, #7
 8001bb4:	d9de      	bls.n	8001b74 <SSD1306_UpdateScreen+0xc>
	}
}
 8001bb6:	bf00      	nop
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	2000020c 	.word	0x2000020c

08001bc4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <SSD1306_Fill+0x14>
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	e000      	b.n	8001bda <SSD1306_Fill+0x16>
 8001bd8:	23ff      	movs	r3, #255	; 0xff
 8001bda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bde:	4619      	mov	r1, r3
 8001be0:	4803      	ldr	r0, [pc, #12]	; (8001bf0 <SSD1306_Fill+0x2c>)
 8001be2:	f006 fbfb 	bl	80083dc <memset>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	2000020c 	.word	0x2000020c

08001bf4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	80fb      	strh	r3, [r7, #6]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	80bb      	strh	r3, [r7, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	70fb      	strb	r3, [r7, #3]
	if (
 8001c06:	88fb      	ldrh	r3, [r7, #6]
 8001c08:	2b7f      	cmp	r3, #127	; 0x7f
 8001c0a:	d848      	bhi.n	8001c9e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001c0c:	88bb      	ldrh	r3, [r7, #4]
 8001c0e:	2b3f      	cmp	r3, #63	; 0x3f
 8001c10:	d845      	bhi.n	8001c9e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001c12:	4b26      	ldr	r3, [pc, #152]	; (8001cac <SSD1306_DrawPixel+0xb8>)
 8001c14:	791b      	ldrb	r3, [r3, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d006      	beq.n	8001c28 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001c1a:	78fb      	ldrb	r3, [r7, #3]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	bf0c      	ite	eq
 8001c20:	2301      	moveq	r3, #1
 8001c22:	2300      	movne	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001c28:	78fb      	ldrb	r3, [r7, #3]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d11a      	bne.n	8001c64 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001c2e:	88fa      	ldrh	r2, [r7, #6]
 8001c30:	88bb      	ldrh	r3, [r7, #4]
 8001c32:	08db      	lsrs	r3, r3, #3
 8001c34:	b298      	uxth	r0, r3
 8001c36:	4603      	mov	r3, r0
 8001c38:	01db      	lsls	r3, r3, #7
 8001c3a:	4413      	add	r3, r2
 8001c3c:	4a1c      	ldr	r2, [pc, #112]	; (8001cb0 <SSD1306_DrawPixel+0xbc>)
 8001c3e:	5cd3      	ldrb	r3, [r2, r3]
 8001c40:	b25a      	sxtb	r2, r3
 8001c42:	88bb      	ldrh	r3, [r7, #4]
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	2101      	movs	r1, #1
 8001c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4e:	b25b      	sxtb	r3, r3
 8001c50:	4313      	orrs	r3, r2
 8001c52:	b259      	sxtb	r1, r3
 8001c54:	88fa      	ldrh	r2, [r7, #6]
 8001c56:	4603      	mov	r3, r0
 8001c58:	01db      	lsls	r3, r3, #7
 8001c5a:	4413      	add	r3, r2
 8001c5c:	b2c9      	uxtb	r1, r1
 8001c5e:	4a14      	ldr	r2, [pc, #80]	; (8001cb0 <SSD1306_DrawPixel+0xbc>)
 8001c60:	54d1      	strb	r1, [r2, r3]
 8001c62:	e01d      	b.n	8001ca0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001c64:	88fa      	ldrh	r2, [r7, #6]
 8001c66:	88bb      	ldrh	r3, [r7, #4]
 8001c68:	08db      	lsrs	r3, r3, #3
 8001c6a:	b298      	uxth	r0, r3
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	01db      	lsls	r3, r3, #7
 8001c70:	4413      	add	r3, r2
 8001c72:	4a0f      	ldr	r2, [pc, #60]	; (8001cb0 <SSD1306_DrawPixel+0xbc>)
 8001c74:	5cd3      	ldrb	r3, [r2, r3]
 8001c76:	b25a      	sxtb	r2, r3
 8001c78:	88bb      	ldrh	r3, [r7, #4]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	2101      	movs	r1, #1
 8001c80:	fa01 f303 	lsl.w	r3, r1, r3
 8001c84:	b25b      	sxtb	r3, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	b25b      	sxtb	r3, r3
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	b259      	sxtb	r1, r3
 8001c8e:	88fa      	ldrh	r2, [r7, #6]
 8001c90:	4603      	mov	r3, r0
 8001c92:	01db      	lsls	r3, r3, #7
 8001c94:	4413      	add	r3, r2
 8001c96:	b2c9      	uxtb	r1, r1
 8001c98:	4a05      	ldr	r2, [pc, #20]	; (8001cb0 <SSD1306_DrawPixel+0xbc>)
 8001c9a:	54d1      	strb	r1, [r2, r3]
 8001c9c:	e000      	b.n	8001ca0 <SSD1306_DrawPixel+0xac>
		return;
 8001c9e:	bf00      	nop
	}
}
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	2000060c 	.word	0x2000060c
 8001cb0:	2000020c 	.word	0x2000020c

08001cb4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	460a      	mov	r2, r1
 8001cbe:	80fb      	strh	r3, [r7, #6]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001cc4:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <SSD1306_GotoXY+0x28>)
 8001cc6:	88fb      	ldrh	r3, [r7, #6]
 8001cc8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001cca:	4a04      	ldr	r2, [pc, #16]	; (8001cdc <SSD1306_GotoXY+0x28>)
 8001ccc:	88bb      	ldrh	r3, [r7, #4]
 8001cce:	8053      	strh	r3, [r2, #2]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	2000060c 	.word	0x2000060c

08001ce0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	71fb      	strb	r3, [r7, #7]
 8001cec:	4613      	mov	r3, r2
 8001cee:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001cf0:	4b3a      	ldr	r3, [pc, #232]	; (8001ddc <SSD1306_Putc+0xfc>)
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	4413      	add	r3, r2
	if (
 8001cfc:	2b7f      	cmp	r3, #127	; 0x7f
 8001cfe:	dc07      	bgt.n	8001d10 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001d00:	4b36      	ldr	r3, [pc, #216]	; (8001ddc <SSD1306_Putc+0xfc>)
 8001d02:	885b      	ldrh	r3, [r3, #2]
 8001d04:	461a      	mov	r2, r3
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	785b      	ldrb	r3, [r3, #1]
 8001d0a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001d0c:	2b3f      	cmp	r3, #63	; 0x3f
 8001d0e:	dd01      	ble.n	8001d14 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	e05e      	b.n	8001dd2 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	e04b      	b.n	8001db2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	3b20      	subs	r3, #32
 8001d22:	6839      	ldr	r1, [r7, #0]
 8001d24:	7849      	ldrb	r1, [r1, #1]
 8001d26:	fb01 f303 	mul.w	r3, r1, r3
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	440b      	add	r3, r1
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	4413      	add	r3, r2
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001d38:	2300      	movs	r3, #0
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	e030      	b.n	8001da0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d010      	beq.n	8001d70 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001d4e:	4b23      	ldr	r3, [pc, #140]	; (8001ddc <SSD1306_Putc+0xfc>)
 8001d50:	881a      	ldrh	r2, [r3, #0]
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	4413      	add	r3, r2
 8001d58:	b298      	uxth	r0, r3
 8001d5a:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <SSD1306_Putc+0xfc>)
 8001d5c:	885a      	ldrh	r2, [r3, #2]
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	4413      	add	r3, r2
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	79ba      	ldrb	r2, [r7, #6]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f7ff ff43 	bl	8001bf4 <SSD1306_DrawPixel>
 8001d6e:	e014      	b.n	8001d9a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001d70:	4b1a      	ldr	r3, [pc, #104]	; (8001ddc <SSD1306_Putc+0xfc>)
 8001d72:	881a      	ldrh	r2, [r3, #0]
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	4413      	add	r3, r2
 8001d7a:	b298      	uxth	r0, r3
 8001d7c:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <SSD1306_Putc+0xfc>)
 8001d7e:	885a      	ldrh	r2, [r3, #2]
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	4413      	add	r3, r2
 8001d86:	b299      	uxth	r1, r3
 8001d88:	79bb      	ldrb	r3, [r7, #6]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	bf0c      	ite	eq
 8001d8e:	2301      	moveq	r3, #1
 8001d90:	2300      	movne	r3, #0
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	461a      	mov	r2, r3
 8001d96:	f7ff ff2d 	bl	8001bf4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d3c8      	bcc.n	8001d3e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	3301      	adds	r3, #1
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	785b      	ldrb	r3, [r3, #1]
 8001db6:	461a      	mov	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d3ad      	bcc.n	8001d1a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001dbe:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <SSD1306_Putc+0xfc>)
 8001dc0:	881a      	ldrh	r2, [r3, #0]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	4413      	add	r3, r2
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	4b03      	ldr	r3, [pc, #12]	; (8001ddc <SSD1306_Putc+0xfc>)
 8001dce:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	2000060c 	.word	0x2000060c

08001de0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	4613      	mov	r3, r2
 8001dec:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001dee:	e012      	b.n	8001e16 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	79fa      	ldrb	r2, [r7, #7]
 8001df6:	68b9      	ldr	r1, [r7, #8]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff71 	bl	8001ce0 <SSD1306_Putc>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	461a      	mov	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d002      	beq.n	8001e10 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	e008      	b.n	8001e22 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	3301      	adds	r3, #1
 8001e14:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1e8      	bne.n	8001df0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	781b      	ldrb	r3, [r3, #0]
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f7ff fec8 	bl	8001bc4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001e34:	f7ff fe98 	bl	8001b68 <SSD1306_UpdateScreen>
}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001e42:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <ssd1306_I2C_Init+0x28>)
 8001e44:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001e46:	e002      	b.n	8001e4e <ssd1306_I2C_Init+0x12>
		p--;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1f9      	bne.n	8001e48 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001e54:	bf00      	nop
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	0003d090 	.word	0x0003d090

08001e68 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001e68:	b590      	push	{r4, r7, lr}
 8001e6a:	b0c7      	sub	sp, #284	; 0x11c
 8001e6c:	af02      	add	r7, sp, #8
 8001e6e:	4604      	mov	r4, r0
 8001e70:	4608      	mov	r0, r1
 8001e72:	4639      	mov	r1, r7
 8001e74:	600a      	str	r2, [r1, #0]
 8001e76:	4619      	mov	r1, r3
 8001e78:	1dfb      	adds	r3, r7, #7
 8001e7a:	4622      	mov	r2, r4
 8001e7c:	701a      	strb	r2, [r3, #0]
 8001e7e:	1dbb      	adds	r3, r7, #6
 8001e80:	4602      	mov	r2, r0
 8001e82:	701a      	strb	r2, [r3, #0]
 8001e84:	1d3b      	adds	r3, r7, #4
 8001e86:	460a      	mov	r2, r1
 8001e88:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001e8a:	f107 030c 	add.w	r3, r7, #12
 8001e8e:	1dba      	adds	r2, r7, #6
 8001e90:	7812      	ldrb	r2, [r2, #0]
 8001e92:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001e94:	2300      	movs	r3, #0
 8001e96:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001e9a:	e010      	b.n	8001ebe <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001e9c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001ea0:	463a      	mov	r2, r7
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	441a      	add	r2, r3
 8001ea6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001eaa:	3301      	adds	r3, #1
 8001eac:	7811      	ldrb	r1, [r2, #0]
 8001eae:	f107 020c 	add.w	r2, r7, #12
 8001eb2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001eb4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001eb8:	3301      	adds	r3, #1
 8001eba:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001ebe:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	1d3a      	adds	r2, r7, #4
 8001ec6:	8812      	ldrh	r2, [r2, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d8e7      	bhi.n	8001e9c <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001ecc:	1dfb      	adds	r3, r7, #7
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	b299      	uxth	r1, r3
 8001ed2:	1d3b      	adds	r3, r7, #4
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	f107 020c 	add.w	r2, r7, #12
 8001ede:	200a      	movs	r0, #10
 8001ee0:	9000      	str	r0, [sp, #0]
 8001ee2:	4804      	ldr	r0, [pc, #16]	; (8001ef4 <ssd1306_I2C_WriteMulti+0x8c>)
 8001ee4:	f000 ff9a 	bl	8002e1c <HAL_I2C_Master_Transmit>
}
 8001ee8:	bf00      	nop
 8001eea:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd90      	pop	{r4, r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20004d90 	.word	0x20004d90

08001ef8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af02      	add	r7, sp, #8
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
 8001f02:	460b      	mov	r3, r1
 8001f04:	71bb      	strb	r3, [r7, #6]
 8001f06:	4613      	mov	r3, r2
 8001f08:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001f0a:	79bb      	ldrb	r3, [r7, #6]
 8001f0c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001f0e:	797b      	ldrb	r3, [r7, #5]
 8001f10:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	b299      	uxth	r1, r3
 8001f16:	f107 020c 	add.w	r2, r7, #12
 8001f1a:	230a      	movs	r3, #10
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	2302      	movs	r3, #2
 8001f20:	4803      	ldr	r0, [pc, #12]	; (8001f30 <ssd1306_I2C_Write+0x38>)
 8001f22:	f000 ff7b 	bl	8002e1c <HAL_I2C_Master_Transmit>
}
 8001f26:	bf00      	nop
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20004d90 	.word	0x20004d90

08001f34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	607b      	str	r3, [r7, #4]
 8001f3e:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <HAL_MspInit+0x54>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	4a11      	ldr	r2, [pc, #68]	; (8001f88 <HAL_MspInit+0x54>)
 8001f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f48:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4a:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <HAL_MspInit+0x54>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f52:	607b      	str	r3, [r7, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	603b      	str	r3, [r7, #0]
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_MspInit+0x54>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	4a0a      	ldr	r2, [pc, #40]	; (8001f88 <HAL_MspInit+0x54>)
 8001f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f64:	6413      	str	r3, [r2, #64]	; 0x40
 8001f66:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <HAL_MspInit+0x54>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f72:	2200      	movs	r2, #0
 8001f74:	210f      	movs	r1, #15
 8001f76:	f06f 0001 	mvn.w	r0, #1
 8001f7a:	f000 fb97 	bl	80026ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40023800 	.word	0x40023800

08001f8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08c      	sub	sp, #48	; 0x30
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	201d      	movs	r0, #29
 8001fa2:	f000 fb83 	bl	80026ac <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fa6:	201d      	movs	r0, #29
 8001fa8:	f000 fb9c 	bl	80026e4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001fac:	2300      	movs	r3, #0
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	4b1e      	ldr	r3, [pc, #120]	; (800202c <HAL_InitTick+0xa0>)
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	4a1d      	ldr	r2, [pc, #116]	; (800202c <HAL_InitTick+0xa0>)
 8001fb6:	f043 0302 	orr.w	r3, r3, #2
 8001fba:	6413      	str	r3, [r2, #64]	; 0x40
 8001fbc:	4b1b      	ldr	r3, [pc, #108]	; (800202c <HAL_InitTick+0xa0>)
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fc8:	f107 0210 	add.w	r2, r7, #16
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f002 f8bc 	bl	8004150 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001fd8:	f002 f892 	bl	8004100 <HAL_RCC_GetPCLK1Freq>
 8001fdc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe0:	4a13      	ldr	r2, [pc, #76]	; (8002030 <HAL_InitTick+0xa4>)
 8001fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe6:	0c9b      	lsrs	r3, r3, #18
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001fec:	4b11      	ldr	r3, [pc, #68]	; (8002034 <HAL_InitTick+0xa8>)
 8001fee:	4a12      	ldr	r2, [pc, #72]	; (8002038 <HAL_InitTick+0xac>)
 8001ff0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001ff2:	4b10      	ldr	r3, [pc, #64]	; (8002034 <HAL_InitTick+0xa8>)
 8001ff4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ff8:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001ffa:	4a0e      	ldr	r2, [pc, #56]	; (8002034 <HAL_InitTick+0xa8>)
 8001ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffe:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <HAL_InitTick+0xa8>)
 8002002:	2200      	movs	r2, #0
 8002004:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_InitTick+0xa8>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 800200c:	4809      	ldr	r0, [pc, #36]	; (8002034 <HAL_InitTick+0xa8>)
 800200e:	f002 f95a 	bl	80042c6 <HAL_TIM_Base_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d104      	bne.n	8002022 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8002018:	4806      	ldr	r0, [pc, #24]	; (8002034 <HAL_InitTick+0xa8>)
 800201a:	f002 f9ad 	bl	8004378 <HAL_TIM_Base_Start_IT>
 800201e:	4603      	mov	r3, r0
 8002020:	e000      	b.n	8002024 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
}
 8002024:	4618      	mov	r0, r3
 8002026:	3730      	adds	r7, #48	; 0x30
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40023800 	.word	0x40023800
 8002030:	431bde83 	.word	0x431bde83
 8002034:	20004e3c 	.word	0x20004e3c
 8002038:	40000400 	.word	0x40000400

0800203c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002040:	e7fe      	b.n	8002040 <NMI_Handler+0x4>

08002042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002046:	e7fe      	b.n	8002046 <HardFault_Handler+0x4>

08002048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800204c:	e7fe      	b.n	800204c <MemManage_Handler+0x4>

0800204e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002052:	e7fe      	b.n	8002052 <BusFault_Handler+0x4>

08002054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002058:	e7fe      	b.n	8002058 <UsageFault_Handler+0x4>

0800205a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800206c:	4802      	ldr	r0, [pc, #8]	; (8002078 <TIM3_IRQHandler+0x10>)
 800206e:	f002 f9e5 	bl	800443c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20004e3c 	.word	0x20004e3c

0800207c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  HAL_UART_RxCpltCallback(&huart1);
 8002080:	4803      	ldr	r0, [pc, #12]	; (8002090 <USART1_IRQHandler+0x14>)
 8002082:	f7ff fb67 	bl	8001754 <HAL_UART_RxCpltCallback>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002086:	4802      	ldr	r0, [pc, #8]	; (8002090 <USART1_IRQHandler+0x14>)
 8002088:	f002 fc1a 	bl	80048c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  //GPS_CallBack();
  /* USER CODE END USART1_IRQn 1 */
}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20004e84 	.word	0x20004e84

08002094 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
	return 1;
 8002098:	2301      	movs	r3, #1
}
 800209a:	4618      	mov	r0, r3
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <_kill>:

int _kill(int pid, int sig)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020ae:	f006 f95d 	bl	800836c <__errno>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2216      	movs	r2, #22
 80020b6:	601a      	str	r2, [r3, #0]
	return -1;
 80020b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <_exit>:

void _exit (int status)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020cc:	f04f 31ff 	mov.w	r1, #4294967295
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff ffe7 	bl	80020a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80020d6:	e7fe      	b.n	80020d6 <_exit+0x12>

080020d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	e00a      	b.n	8002100 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020ea:	f3af 8000 	nop.w
 80020ee:	4601      	mov	r1, r0
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	1c5a      	adds	r2, r3, #1
 80020f4:	60ba      	str	r2, [r7, #8]
 80020f6:	b2ca      	uxtb	r2, r1
 80020f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	3301      	adds	r3, #1
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	429a      	cmp	r2, r3
 8002106:	dbf0      	blt.n	80020ea <_read+0x12>
	}

return len;
 8002108:	687b      	ldr	r3, [r7, #4]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b086      	sub	sp, #24
 8002116:	af00      	add	r7, sp, #0
 8002118:	60f8      	str	r0, [r7, #12]
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	e009      	b.n	8002138 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	60ba      	str	r2, [r7, #8]
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	3301      	adds	r3, #1
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	429a      	cmp	r2, r3
 800213e:	dbf1      	blt.n	8002124 <_write+0x12>
	}
	return len;
 8002140:	687b      	ldr	r3, [r7, #4]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <_close>:

int _close(int file)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
	return -1;
 8002152:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002156:	4618      	mov	r0, r3
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002172:	605a      	str	r2, [r3, #4]
	return 0;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <_isatty>:

int _isatty(int file)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
	return 1;
 800218a:	2301      	movs	r3, #1
}
 800218c:	4618      	mov	r0, r3
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
	return 0;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
	...

080021b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021bc:	4a14      	ldr	r2, [pc, #80]	; (8002210 <_sbrk+0x5c>)
 80021be:	4b15      	ldr	r3, [pc, #84]	; (8002214 <_sbrk+0x60>)
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c8:	4b13      	ldr	r3, [pc, #76]	; (8002218 <_sbrk+0x64>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d102      	bne.n	80021d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021d0:	4b11      	ldr	r3, [pc, #68]	; (8002218 <_sbrk+0x64>)
 80021d2:	4a12      	ldr	r2, [pc, #72]	; (800221c <_sbrk+0x68>)
 80021d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021d6:	4b10      	ldr	r3, [pc, #64]	; (8002218 <_sbrk+0x64>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4413      	add	r3, r2
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d207      	bcs.n	80021f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021e4:	f006 f8c2 	bl	800836c <__errno>
 80021e8:	4603      	mov	r3, r0
 80021ea:	220c      	movs	r2, #12
 80021ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ee:	f04f 33ff 	mov.w	r3, #4294967295
 80021f2:	e009      	b.n	8002208 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021f4:	4b08      	ldr	r3, [pc, #32]	; (8002218 <_sbrk+0x64>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021fa:	4b07      	ldr	r3, [pc, #28]	; (8002218 <_sbrk+0x64>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	4a05      	ldr	r2, [pc, #20]	; (8002218 <_sbrk+0x64>)
 8002204:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002206:	68fb      	ldr	r3, [r7, #12]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20010000 	.word	0x20010000
 8002214:	00000400 	.word	0x00000400
 8002218:	20000614 	.word	0x20000614
 800221c:	20005328 	.word	0x20005328

08002220 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002224:	4b06      	ldr	r3, [pc, #24]	; (8002240 <SystemInit+0x20>)
 8002226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222a:	4a05      	ldr	r2, [pc, #20]	; (8002240 <SystemInit+0x20>)
 800222c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002230:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002248:	4b11      	ldr	r3, [pc, #68]	; (8002290 <MX_USART1_UART_Init+0x4c>)
 800224a:	4a12      	ldr	r2, [pc, #72]	; (8002294 <MX_USART1_UART_Init+0x50>)
 800224c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800224e:	4b10      	ldr	r3, [pc, #64]	; (8002290 <MX_USART1_UART_Init+0x4c>)
 8002250:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002254:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002256:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <MX_USART1_UART_Init+0x4c>)
 8002258:	2200      	movs	r2, #0
 800225a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800225c:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <MX_USART1_UART_Init+0x4c>)
 800225e:	2200      	movs	r2, #0
 8002260:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002262:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <MX_USART1_UART_Init+0x4c>)
 8002264:	2200      	movs	r2, #0
 8002266:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002268:	4b09      	ldr	r3, [pc, #36]	; (8002290 <MX_USART1_UART_Init+0x4c>)
 800226a:	220c      	movs	r2, #12
 800226c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800226e:	4b08      	ldr	r3, [pc, #32]	; (8002290 <MX_USART1_UART_Init+0x4c>)
 8002270:	2200      	movs	r2, #0
 8002272:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <MX_USART1_UART_Init+0x4c>)
 8002276:	2200      	movs	r2, #0
 8002278:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800227a:	4805      	ldr	r0, [pc, #20]	; (8002290 <MX_USART1_UART_Init+0x4c>)
 800227c:	f002 faa2 	bl	80047c4 <HAL_UART_Init>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002286:	f7ff fb27 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20004e84 	.word	0x20004e84
 8002294:	40011000 	.word	0x40011000

08002298 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08a      	sub	sp, #40	; 0x28
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a0:	f107 0314 	add.w	r3, r7, #20
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a19      	ldr	r2, [pc, #100]	; (800231c <HAL_UART_MspInit+0x84>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d12c      	bne.n	8002314 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	4b18      	ldr	r3, [pc, #96]	; (8002320 <HAL_UART_MspInit+0x88>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	4a17      	ldr	r2, [pc, #92]	; (8002320 <HAL_UART_MspInit+0x88>)
 80022c4:	f043 0310 	orr.w	r3, r3, #16
 80022c8:	6453      	str	r3, [r2, #68]	; 0x44
 80022ca:	4b15      	ldr	r3, [pc, #84]	; (8002320 <HAL_UART_MspInit+0x88>)
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	f003 0310 	and.w	r3, r3, #16
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	4b11      	ldr	r3, [pc, #68]	; (8002320 <HAL_UART_MspInit+0x88>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	4a10      	ldr	r2, [pc, #64]	; (8002320 <HAL_UART_MspInit+0x88>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	6313      	str	r3, [r2, #48]	; 0x30
 80022e6:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <HAL_UART_MspInit+0x88>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f8:	2302      	movs	r3, #2
 80022fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002300:	2303      	movs	r3, #3
 8002302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002304:	2307      	movs	r3, #7
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	4619      	mov	r1, r3
 800230e:	4805      	ldr	r0, [pc, #20]	; (8002324 <HAL_UART_MspInit+0x8c>)
 8002310:	f000 fa88 	bl	8002824 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002314:	bf00      	nop
 8002316:	3728      	adds	r7, #40	; 0x28
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40011000 	.word	0x40011000
 8002320:	40023800 	.word	0x40023800
 8002324:	40020000 	.word	0x40020000

08002328 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800232c:	4b14      	ldr	r3, [pc, #80]	; (8002380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800232e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002332:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002334:	4b12      	ldr	r3, [pc, #72]	; (8002380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002336:	2204      	movs	r2, #4
 8002338:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800233a:	4b11      	ldr	r3, [pc, #68]	; (8002380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800233c:	2202      	movs	r2, #2
 800233e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002340:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002342:	2200      	movs	r2, #0
 8002344:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002346:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002348:	2202      	movs	r2, #2
 800234a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800234e:	2200      	movs	r2, #0
 8002350:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002352:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002354:	2200      	movs	r2, #0
 8002356:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002358:	4b09      	ldr	r3, [pc, #36]	; (8002380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800235a:	2200      	movs	r2, #0
 800235c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800235e:	4b08      	ldr	r3, [pc, #32]	; (8002380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002360:	2200      	movs	r2, #0
 8002362:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002364:	4b06      	ldr	r3, [pc, #24]	; (8002380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002366:	2200      	movs	r2, #0
 8002368:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800236a:	4805      	ldr	r0, [pc, #20]	; (8002380 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800236c:	f001 f98b 	bl	8003686 <HAL_PCD_Init>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002376:	f7ff faaf 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20004ec8 	.word	0x20004ec8

08002384 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08a      	sub	sp, #40	; 0x28
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238c:	f107 0314 	add.w	r3, r7, #20
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]
 800239a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023a4:	d132      	bne.n	800240c <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	4b1a      	ldr	r3, [pc, #104]	; (8002414 <HAL_PCD_MspInit+0x90>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	4a19      	ldr	r2, [pc, #100]	; (8002414 <HAL_PCD_MspInit+0x90>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	6313      	str	r3, [r2, #48]	; 0x30
 80023b6:	4b17      	ldr	r3, [pc, #92]	; (8002414 <HAL_PCD_MspInit+0x90>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80023c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80023c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c8:	2302      	movs	r3, #2
 80023ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d0:	2303      	movs	r3, #3
 80023d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80023d4:	230a      	movs	r3, #10
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d8:	f107 0314 	add.w	r3, r7, #20
 80023dc:	4619      	mov	r1, r3
 80023de:	480e      	ldr	r0, [pc, #56]	; (8002418 <HAL_PCD_MspInit+0x94>)
 80023e0:	f000 fa20 	bl	8002824 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <HAL_PCD_MspInit+0x90>)
 80023e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e8:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <HAL_PCD_MspInit+0x90>)
 80023ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023ee:	6353      	str	r3, [r2, #52]	; 0x34
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	4b07      	ldr	r3, [pc, #28]	; (8002414 <HAL_PCD_MspInit+0x90>)
 80023f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f8:	4a06      	ldr	r2, [pc, #24]	; (8002414 <HAL_PCD_MspInit+0x90>)
 80023fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023fe:	6453      	str	r3, [r2, #68]	; 0x44
 8002400:	4b04      	ldr	r3, [pc, #16]	; (8002414 <HAL_PCD_MspInit+0x90>)
 8002402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800240c:	bf00      	nop
 800240e:	3728      	adds	r7, #40	; 0x28
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40023800 	.word	0x40023800
 8002418:	40020000 	.word	0x40020000

0800241c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800241c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002454 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002420:	480d      	ldr	r0, [pc, #52]	; (8002458 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002422:	490e      	ldr	r1, [pc, #56]	; (800245c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002424:	4a0e      	ldr	r2, [pc, #56]	; (8002460 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002428:	e002      	b.n	8002430 <LoopCopyDataInit>

0800242a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800242a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800242c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800242e:	3304      	adds	r3, #4

08002430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002434:	d3f9      	bcc.n	800242a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002436:	4a0b      	ldr	r2, [pc, #44]	; (8002464 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002438:	4c0b      	ldr	r4, [pc, #44]	; (8002468 <LoopFillZerobss+0x26>)
  movs r3, #0
 800243a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800243c:	e001      	b.n	8002442 <LoopFillZerobss>

0800243e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800243e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002440:	3204      	adds	r2, #4

08002442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002444:	d3fb      	bcc.n	800243e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002446:	f7ff feeb 	bl	8002220 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800244a:	f005 ff95 	bl	8008378 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800244e:	f7ff f98b 	bl	8001768 <main>
  bx  lr    
 8002452:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002454:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800245c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002460:	0800e25c 	.word	0x0800e25c
  ldr r2, =_sbss
 8002464:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002468:	20005324 	.word	0x20005324

0800246c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800246c:	e7fe      	b.n	800246c <ADC_IRQHandler>
	...

08002470 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002474:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <HAL_Init+0x40>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a0d      	ldr	r2, [pc, #52]	; (80024b0 <HAL_Init+0x40>)
 800247a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800247e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_Init+0x40>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <HAL_Init+0x40>)
 8002486:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800248a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800248c:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <HAL_Init+0x40>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a07      	ldr	r2, [pc, #28]	; (80024b0 <HAL_Init+0x40>)
 8002492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002496:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002498:	2003      	movs	r0, #3
 800249a:	f000 f8fc 	bl	8002696 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800249e:	2000      	movs	r0, #0
 80024a0:	f7ff fd74 	bl	8001f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024a4:	f7ff fd46 	bl	8001f34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40023c00 	.word	0x40023c00

080024b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_IncTick+0x20>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_IncTick+0x24>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4413      	add	r3, r2
 80024c4:	4a04      	ldr	r2, [pc, #16]	; (80024d8 <HAL_IncTick+0x24>)
 80024c6:	6013      	str	r3, [r2, #0]
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	20000010 	.word	0x20000010
 80024d8:	200052d0 	.word	0x200052d0

080024dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return uwTick;
 80024e0:	4b03      	ldr	r3, [pc, #12]	; (80024f0 <HAL_GetTick+0x14>)
 80024e2:	681b      	ldr	r3, [r3, #0]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	200052d0 	.word	0x200052d0

080024f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024fc:	f7ff ffee 	bl	80024dc <HAL_GetTick>
 8002500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250c:	d005      	beq.n	800251a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800250e:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <HAL_Delay+0x44>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4413      	add	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800251a:	bf00      	nop
 800251c:	f7ff ffde 	bl	80024dc <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	429a      	cmp	r2, r3
 800252a:	d8f7      	bhi.n	800251c <HAL_Delay+0x28>
  {
  }
}
 800252c:	bf00      	nop
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000010 	.word	0x20000010

0800253c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <__NVIC_SetPriorityGrouping+0x44>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002558:	4013      	ands	r3, r2
 800255a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800256c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800256e:	4a04      	ldr	r2, [pc, #16]	; (8002580 <__NVIC_SetPriorityGrouping+0x44>)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	60d3      	str	r3, [r2, #12]
}
 8002574:	bf00      	nop
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002588:	4b04      	ldr	r3, [pc, #16]	; (800259c <__NVIC_GetPriorityGrouping+0x18>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	0a1b      	lsrs	r3, r3, #8
 800258e:	f003 0307 	and.w	r3, r3, #7
}
 8002592:	4618      	mov	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	db0b      	blt.n	80025ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	f003 021f 	and.w	r2, r3, #31
 80025b8:	4907      	ldr	r1, [pc, #28]	; (80025d8 <__NVIC_EnableIRQ+0x38>)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	095b      	lsrs	r3, r3, #5
 80025c0:	2001      	movs	r0, #1
 80025c2:	fa00 f202 	lsl.w	r2, r0, r2
 80025c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	e000e100 	.word	0xe000e100

080025dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	6039      	str	r1, [r7, #0]
 80025e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	db0a      	blt.n	8002606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	490c      	ldr	r1, [pc, #48]	; (8002628 <__NVIC_SetPriority+0x4c>)
 80025f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fa:	0112      	lsls	r2, r2, #4
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	440b      	add	r3, r1
 8002600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002604:	e00a      	b.n	800261c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	b2da      	uxtb	r2, r3
 800260a:	4908      	ldr	r1, [pc, #32]	; (800262c <__NVIC_SetPriority+0x50>)
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	3b04      	subs	r3, #4
 8002614:	0112      	lsls	r2, r2, #4
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	440b      	add	r3, r1
 800261a:	761a      	strb	r2, [r3, #24]
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	e000e100 	.word	0xe000e100
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002630:	b480      	push	{r7}
 8002632:	b089      	sub	sp, #36	; 0x24
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f1c3 0307 	rsb	r3, r3, #7
 800264a:	2b04      	cmp	r3, #4
 800264c:	bf28      	it	cs
 800264e:	2304      	movcs	r3, #4
 8002650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	3304      	adds	r3, #4
 8002656:	2b06      	cmp	r3, #6
 8002658:	d902      	bls.n	8002660 <NVIC_EncodePriority+0x30>
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3b03      	subs	r3, #3
 800265e:	e000      	b.n	8002662 <NVIC_EncodePriority+0x32>
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002664:	f04f 32ff 	mov.w	r2, #4294967295
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43da      	mvns	r2, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	401a      	ands	r2, r3
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002678:	f04f 31ff 	mov.w	r1, #4294967295
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	fa01 f303 	lsl.w	r3, r1, r3
 8002682:	43d9      	mvns	r1, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002688:	4313      	orrs	r3, r2
         );
}
 800268a:	4618      	mov	r0, r3
 800268c:	3724      	adds	r7, #36	; 0x24
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff ff4c 	bl	800253c <__NVIC_SetPriorityGrouping>
}
 80026a4:	bf00      	nop
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
 80026b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026be:	f7ff ff61 	bl	8002584 <__NVIC_GetPriorityGrouping>
 80026c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	68b9      	ldr	r1, [r7, #8]
 80026c8:	6978      	ldr	r0, [r7, #20]
 80026ca:	f7ff ffb1 	bl	8002630 <NVIC_EncodePriority>
 80026ce:	4602      	mov	r2, r0
 80026d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026d4:	4611      	mov	r1, r2
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff ff80 	bl	80025dc <__NVIC_SetPriority>
}
 80026dc:	bf00      	nop
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff ff54 	bl	80025a0 <__NVIC_EnableIRQ>
}
 80026f8:	bf00      	nop
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800270e:	f7ff fee5 	bl	80024dc <HAL_GetTick>
 8002712:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d008      	beq.n	8002732 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2280      	movs	r2, #128	; 0x80
 8002724:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e052      	b.n	80027d8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0216 	bic.w	r2, r2, #22
 8002740:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695a      	ldr	r2, [r3, #20]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002750:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	2b00      	cmp	r3, #0
 8002758:	d103      	bne.n	8002762 <HAL_DMA_Abort+0x62>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800275e:	2b00      	cmp	r3, #0
 8002760:	d007      	beq.n	8002772 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0208 	bic.w	r2, r2, #8
 8002770:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0201 	bic.w	r2, r2, #1
 8002780:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002782:	e013      	b.n	80027ac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002784:	f7ff feaa 	bl	80024dc <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b05      	cmp	r3, #5
 8002790:	d90c      	bls.n	80027ac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2220      	movs	r2, #32
 8002796:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2203      	movs	r2, #3
 80027a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e015      	b.n	80027d8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1e4      	bne.n	8002784 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027be:	223f      	movs	r2, #63	; 0x3f
 80027c0:	409a      	lsls	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d004      	beq.n	80027fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2280      	movs	r2, #128	; 0x80
 80027f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e00c      	b.n	8002818 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2205      	movs	r2, #5
 8002802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0201 	bic.w	r2, r2, #1
 8002814:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002824:	b480      	push	{r7}
 8002826:	b089      	sub	sp, #36	; 0x24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002832:	2300      	movs	r3, #0
 8002834:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002836:	2300      	movs	r3, #0
 8002838:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800283a:	2300      	movs	r3, #0
 800283c:	61fb      	str	r3, [r7, #28]
 800283e:	e159      	b.n	8002af4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002840:	2201      	movs	r2, #1
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	4013      	ands	r3, r2
 8002852:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	429a      	cmp	r2, r3
 800285a:	f040 8148 	bne.w	8002aee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	2b01      	cmp	r3, #1
 8002868:	d005      	beq.n	8002876 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002872:	2b02      	cmp	r3, #2
 8002874:	d130      	bne.n	80028d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	2203      	movs	r2, #3
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43db      	mvns	r3, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4013      	ands	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4313      	orrs	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028ac:	2201      	movs	r2, #1
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4013      	ands	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	091b      	lsrs	r3, r3, #4
 80028c2:	f003 0201 	and.w	r2, r3, #1
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 0303 	and.w	r3, r3, #3
 80028e0:	2b03      	cmp	r3, #3
 80028e2:	d017      	beq.n	8002914 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	2203      	movs	r2, #3
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4013      	ands	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4313      	orrs	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d123      	bne.n	8002968 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	08da      	lsrs	r2, r3, #3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3208      	adds	r2, #8
 8002928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800292c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	220f      	movs	r2, #15
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4013      	ands	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	691a      	ldr	r2, [r3, #16]
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	08da      	lsrs	r2, r3, #3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3208      	adds	r2, #8
 8002962:	69b9      	ldr	r1, [r7, #24]
 8002964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	2203      	movs	r2, #3
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 0203 	and.w	r2, r3, #3
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4313      	orrs	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 80a2 	beq.w	8002aee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	4b57      	ldr	r3, [pc, #348]	; (8002b0c <HAL_GPIO_Init+0x2e8>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	4a56      	ldr	r2, [pc, #344]	; (8002b0c <HAL_GPIO_Init+0x2e8>)
 80029b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b8:	6453      	str	r3, [r2, #68]	; 0x44
 80029ba:	4b54      	ldr	r3, [pc, #336]	; (8002b0c <HAL_GPIO_Init+0x2e8>)
 80029bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029c6:	4a52      	ldr	r2, [pc, #328]	; (8002b10 <HAL_GPIO_Init+0x2ec>)
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	089b      	lsrs	r3, r3, #2
 80029cc:	3302      	adds	r3, #2
 80029ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	220f      	movs	r2, #15
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43db      	mvns	r3, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4013      	ands	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a49      	ldr	r2, [pc, #292]	; (8002b14 <HAL_GPIO_Init+0x2f0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d019      	beq.n	8002a26 <HAL_GPIO_Init+0x202>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a48      	ldr	r2, [pc, #288]	; (8002b18 <HAL_GPIO_Init+0x2f4>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d013      	beq.n	8002a22 <HAL_GPIO_Init+0x1fe>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a47      	ldr	r2, [pc, #284]	; (8002b1c <HAL_GPIO_Init+0x2f8>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d00d      	beq.n	8002a1e <HAL_GPIO_Init+0x1fa>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a46      	ldr	r2, [pc, #280]	; (8002b20 <HAL_GPIO_Init+0x2fc>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d007      	beq.n	8002a1a <HAL_GPIO_Init+0x1f6>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a45      	ldr	r2, [pc, #276]	; (8002b24 <HAL_GPIO_Init+0x300>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d101      	bne.n	8002a16 <HAL_GPIO_Init+0x1f2>
 8002a12:	2304      	movs	r3, #4
 8002a14:	e008      	b.n	8002a28 <HAL_GPIO_Init+0x204>
 8002a16:	2307      	movs	r3, #7
 8002a18:	e006      	b.n	8002a28 <HAL_GPIO_Init+0x204>
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e004      	b.n	8002a28 <HAL_GPIO_Init+0x204>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e002      	b.n	8002a28 <HAL_GPIO_Init+0x204>
 8002a22:	2301      	movs	r3, #1
 8002a24:	e000      	b.n	8002a28 <HAL_GPIO_Init+0x204>
 8002a26:	2300      	movs	r3, #0
 8002a28:	69fa      	ldr	r2, [r7, #28]
 8002a2a:	f002 0203 	and.w	r2, r2, #3
 8002a2e:	0092      	lsls	r2, r2, #2
 8002a30:	4093      	lsls	r3, r2
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a38:	4935      	ldr	r1, [pc, #212]	; (8002b10 <HAL_GPIO_Init+0x2ec>)
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	089b      	lsrs	r3, r3, #2
 8002a3e:	3302      	adds	r3, #2
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a46:	4b38      	ldr	r3, [pc, #224]	; (8002b28 <HAL_GPIO_Init+0x304>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4013      	ands	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a6a:	4a2f      	ldr	r2, [pc, #188]	; (8002b28 <HAL_GPIO_Init+0x304>)
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a70:	4b2d      	ldr	r3, [pc, #180]	; (8002b28 <HAL_GPIO_Init+0x304>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a94:	4a24      	ldr	r2, [pc, #144]	; (8002b28 <HAL_GPIO_Init+0x304>)
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a9a:	4b23      	ldr	r3, [pc, #140]	; (8002b28 <HAL_GPIO_Init+0x304>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002abe:	4a1a      	ldr	r2, [pc, #104]	; (8002b28 <HAL_GPIO_Init+0x304>)
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ac4:	4b18      	ldr	r3, [pc, #96]	; (8002b28 <HAL_GPIO_Init+0x304>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ae8:	4a0f      	ldr	r2, [pc, #60]	; (8002b28 <HAL_GPIO_Init+0x304>)
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	3301      	adds	r3, #1
 8002af2:	61fb      	str	r3, [r7, #28]
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	2b0f      	cmp	r3, #15
 8002af8:	f67f aea2 	bls.w	8002840 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002afc:	bf00      	nop
 8002afe:	bf00      	nop
 8002b00:	3724      	adds	r7, #36	; 0x24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40013800 	.word	0x40013800
 8002b14:	40020000 	.word	0x40020000
 8002b18:	40020400 	.word	0x40020400
 8002b1c:	40020800 	.word	0x40020800
 8002b20:	40020c00 	.word	0x40020c00
 8002b24:	40021000 	.word	0x40021000
 8002b28:	40013c00 	.word	0x40013c00

08002b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	807b      	strh	r3, [r7, #2]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b3c:	787b      	ldrb	r3, [r7, #1]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b42:	887a      	ldrh	r2, [r7, #2]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b48:	e003      	b.n	8002b52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b4a:	887b      	ldrh	r3, [r7, #2]
 8002b4c:	041a      	lsls	r2, r3, #16
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	619a      	str	r2, [r3, #24]
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b085      	sub	sp, #20
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	460b      	mov	r3, r1
 8002b68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b70:	887a      	ldrh	r2, [r7, #2]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4013      	ands	r3, r2
 8002b76:	041a      	lsls	r2, r3, #16
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	43d9      	mvns	r1, r3
 8002b7c:	887b      	ldrh	r3, [r7, #2]
 8002b7e:	400b      	ands	r3, r1
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	619a      	str	r2, [r3, #24]
}
 8002b86:	bf00      	nop
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
	...

08002b94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e12b      	b.n	8002dfe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d106      	bne.n	8002bc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7fe fd82 	bl	80016c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2224      	movs	r2, #36	; 0x24
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0201 	bic.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002be6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bf6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bf8:	f001 fa82 	bl	8004100 <HAL_RCC_GetPCLK1Freq>
 8002bfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	4a81      	ldr	r2, [pc, #516]	; (8002e08 <HAL_I2C_Init+0x274>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d807      	bhi.n	8002c18 <HAL_I2C_Init+0x84>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4a80      	ldr	r2, [pc, #512]	; (8002e0c <HAL_I2C_Init+0x278>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	bf94      	ite	ls
 8002c10:	2301      	movls	r3, #1
 8002c12:	2300      	movhi	r3, #0
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	e006      	b.n	8002c26 <HAL_I2C_Init+0x92>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	4a7d      	ldr	r2, [pc, #500]	; (8002e10 <HAL_I2C_Init+0x27c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	bf94      	ite	ls
 8002c20:	2301      	movls	r3, #1
 8002c22:	2300      	movhi	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e0e7      	b.n	8002dfe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	4a78      	ldr	r2, [pc, #480]	; (8002e14 <HAL_I2C_Init+0x280>)
 8002c32:	fba2 2303 	umull	r2, r3, r2, r3
 8002c36:	0c9b      	lsrs	r3, r3, #18
 8002c38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	4a6a      	ldr	r2, [pc, #424]	; (8002e08 <HAL_I2C_Init+0x274>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d802      	bhi.n	8002c68 <HAL_I2C_Init+0xd4>
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	3301      	adds	r3, #1
 8002c66:	e009      	b.n	8002c7c <HAL_I2C_Init+0xe8>
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c6e:	fb02 f303 	mul.w	r3, r2, r3
 8002c72:	4a69      	ldr	r2, [pc, #420]	; (8002e18 <HAL_I2C_Init+0x284>)
 8002c74:	fba2 2303 	umull	r2, r3, r2, r3
 8002c78:	099b      	lsrs	r3, r3, #6
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6812      	ldr	r2, [r2, #0]
 8002c80:	430b      	orrs	r3, r1
 8002c82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	495c      	ldr	r1, [pc, #368]	; (8002e08 <HAL_I2C_Init+0x274>)
 8002c98:	428b      	cmp	r3, r1
 8002c9a:	d819      	bhi.n	8002cd0 <HAL_I2C_Init+0x13c>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	1e59      	subs	r1, r3, #1
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002caa:	1c59      	adds	r1, r3, #1
 8002cac:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002cb0:	400b      	ands	r3, r1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <HAL_I2C_Init+0x138>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	1e59      	subs	r1, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cca:	e051      	b.n	8002d70 <HAL_I2C_Init+0x1dc>
 8002ccc:	2304      	movs	r3, #4
 8002cce:	e04f      	b.n	8002d70 <HAL_I2C_Init+0x1dc>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d111      	bne.n	8002cfc <HAL_I2C_Init+0x168>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	1e58      	subs	r0, r3, #1
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6859      	ldr	r1, [r3, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	440b      	add	r3, r1
 8002ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cea:	3301      	adds	r3, #1
 8002cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf0c      	ite	eq
 8002cf4:	2301      	moveq	r3, #1
 8002cf6:	2300      	movne	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	e012      	b.n	8002d22 <HAL_I2C_Init+0x18e>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	1e58      	subs	r0, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6859      	ldr	r1, [r3, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	0099      	lsls	r1, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d12:	3301      	adds	r3, #1
 8002d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	bf0c      	ite	eq
 8002d1c:	2301      	moveq	r3, #1
 8002d1e:	2300      	movne	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_I2C_Init+0x196>
 8002d26:	2301      	movs	r3, #1
 8002d28:	e022      	b.n	8002d70 <HAL_I2C_Init+0x1dc>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10e      	bne.n	8002d50 <HAL_I2C_Init+0x1bc>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	1e58      	subs	r0, r3, #1
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6859      	ldr	r1, [r3, #4]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	440b      	add	r3, r1
 8002d40:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d44:	3301      	adds	r3, #1
 8002d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d4e:	e00f      	b.n	8002d70 <HAL_I2C_Init+0x1dc>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	1e58      	subs	r0, r3, #1
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6859      	ldr	r1, [r3, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	0099      	lsls	r1, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d66:	3301      	adds	r3, #1
 8002d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	6809      	ldr	r1, [r1, #0]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69da      	ldr	r2, [r3, #28]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6911      	ldr	r1, [r2, #16]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	68d2      	ldr	r2, [r2, #12]
 8002daa:	4311      	orrs	r1, r2
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6812      	ldr	r2, [r2, #0]
 8002db0:	430b      	orrs	r3, r1
 8002db2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2220      	movs	r2, #32
 8002dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	000186a0 	.word	0x000186a0
 8002e0c:	001e847f 	.word	0x001e847f
 8002e10:	003d08ff 	.word	0x003d08ff
 8002e14:	431bde83 	.word	0x431bde83
 8002e18:	10624dd3 	.word	0x10624dd3

08002e1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b088      	sub	sp, #32
 8002e20:	af02      	add	r7, sp, #8
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	607a      	str	r2, [r7, #4]
 8002e26:	461a      	mov	r2, r3
 8002e28:	460b      	mov	r3, r1
 8002e2a:	817b      	strh	r3, [r7, #10]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e30:	f7ff fb54 	bl	80024dc <HAL_GetTick>
 8002e34:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b20      	cmp	r3, #32
 8002e40:	f040 80e0 	bne.w	8003004 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	2319      	movs	r3, #25
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	4970      	ldr	r1, [pc, #448]	; (8003010 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 fa92 	bl	8003378 <I2C_WaitOnFlagUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e0d3      	b.n	8003006 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d101      	bne.n	8002e6c <HAL_I2C_Master_Transmit+0x50>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	e0cc      	b.n	8003006 <HAL_I2C_Master_Transmit+0x1ea>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d007      	beq.n	8002e92 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f042 0201 	orr.w	r2, r2, #1
 8002e90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ea0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2221      	movs	r2, #33	; 0x21
 8002ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2210      	movs	r2, #16
 8002eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	893a      	ldrh	r2, [r7, #8]
 8002ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4a50      	ldr	r2, [pc, #320]	; (8003014 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ed2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ed4:	8979      	ldrh	r1, [r7, #10]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	6a3a      	ldr	r2, [r7, #32]
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 f9ca 	bl	8003274 <I2C_MasterRequestWrite>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e08d      	b.n	8003006 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eea:	2300      	movs	r3, #0
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	613b      	str	r3, [r7, #16]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f00:	e066      	b.n	8002fd0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	6a39      	ldr	r1, [r7, #32]
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 fb0c 	bl	8003524 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00d      	beq.n	8002f2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d107      	bne.n	8002f2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e06b      	b.n	8003006 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	781a      	ldrb	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	1c5a      	adds	r2, r3, #1
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d11b      	bne.n	8002fa4 <HAL_I2C_Master_Transmit+0x188>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d017      	beq.n	8002fa4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	781a      	ldrb	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	6a39      	ldr	r1, [r7, #32]
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 fafc 	bl	80035a6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00d      	beq.n	8002fd0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d107      	bne.n	8002fcc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e01a      	b.n	8003006 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d194      	bne.n	8002f02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2220      	movs	r2, #32
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003000:	2300      	movs	r3, #0
 8003002:	e000      	b.n	8003006 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003004:	2302      	movs	r3, #2
  }
}
 8003006:	4618      	mov	r0, r3
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	00100002 	.word	0x00100002
 8003014:	ffff0000 	.word	0xffff0000

08003018 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08a      	sub	sp, #40	; 0x28
 800301c:	af02      	add	r7, sp, #8
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	607a      	str	r2, [r7, #4]
 8003022:	603b      	str	r3, [r7, #0]
 8003024:	460b      	mov	r3, r1
 8003026:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003028:	f7ff fa58 	bl	80024dc <HAL_GetTick>
 800302c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800302e:	2301      	movs	r3, #1
 8003030:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b20      	cmp	r3, #32
 800303c:	f040 8111 	bne.w	8003262 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	2319      	movs	r3, #25
 8003046:	2201      	movs	r2, #1
 8003048:	4988      	ldr	r1, [pc, #544]	; (800326c <HAL_I2C_IsDeviceReady+0x254>)
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 f994 	bl	8003378 <I2C_WaitOnFlagUntilTimeout>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003056:	2302      	movs	r3, #2
 8003058:	e104      	b.n	8003264 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_I2C_IsDeviceReady+0x50>
 8003064:	2302      	movs	r3, #2
 8003066:	e0fd      	b.n	8003264 <HAL_I2C_IsDeviceReady+0x24c>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b01      	cmp	r3, #1
 800307c:	d007      	beq.n	800308e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f042 0201 	orr.w	r2, r2, #1
 800308c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800309c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2224      	movs	r2, #36	; 0x24
 80030a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4a70      	ldr	r2, [pc, #448]	; (8003270 <HAL_I2C_IsDeviceReady+0x258>)
 80030b0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030c0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 f952 	bl	8003378 <I2C_WaitOnFlagUntilTimeout>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00d      	beq.n	80030f6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030e8:	d103      	bne.n	80030f2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030f0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e0b6      	b.n	8003264 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030f6:	897b      	ldrh	r3, [r7, #10]
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	461a      	mov	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003104:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003106:	f7ff f9e9 	bl	80024dc <HAL_GetTick>
 800310a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b02      	cmp	r3, #2
 8003118:	bf0c      	ite	eq
 800311a:	2301      	moveq	r3, #1
 800311c:	2300      	movne	r3, #0
 800311e:	b2db      	uxtb	r3, r3
 8003120:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800312c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003130:	bf0c      	ite	eq
 8003132:	2301      	moveq	r3, #1
 8003134:	2300      	movne	r3, #0
 8003136:	b2db      	uxtb	r3, r3
 8003138:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800313a:	e025      	b.n	8003188 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800313c:	f7ff f9ce 	bl	80024dc <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d302      	bcc.n	8003152 <HAL_I2C_IsDeviceReady+0x13a>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d103      	bne.n	800315a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	22a0      	movs	r2, #160	; 0xa0
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b02      	cmp	r3, #2
 8003166:	bf0c      	ite	eq
 8003168:	2301      	moveq	r3, #1
 800316a:	2300      	movne	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800317e:	bf0c      	ite	eq
 8003180:	2301      	moveq	r3, #1
 8003182:	2300      	movne	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2ba0      	cmp	r3, #160	; 0xa0
 8003192:	d005      	beq.n	80031a0 <HAL_I2C_IsDeviceReady+0x188>
 8003194:	7dfb      	ldrb	r3, [r7, #23]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d102      	bne.n	80031a0 <HAL_I2C_IsDeviceReady+0x188>
 800319a:	7dbb      	ldrb	r3, [r7, #22]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0cd      	beq.n	800313c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d129      	bne.n	800320a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031c6:	2300      	movs	r3, #0
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	613b      	str	r3, [r7, #16]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	613b      	str	r3, [r7, #16]
 80031da:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	2319      	movs	r3, #25
 80031e2:	2201      	movs	r2, #1
 80031e4:	4921      	ldr	r1, [pc, #132]	; (800326c <HAL_I2C_IsDeviceReady+0x254>)
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 f8c6 	bl	8003378 <I2C_WaitOnFlagUntilTimeout>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e036      	b.n	8003264 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2220      	movs	r2, #32
 80031fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	e02c      	b.n	8003264 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003218:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003222:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	2319      	movs	r3, #25
 800322a:	2201      	movs	r2, #1
 800322c:	490f      	ldr	r1, [pc, #60]	; (800326c <HAL_I2C_IsDeviceReady+0x254>)
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 f8a2 	bl	8003378 <I2C_WaitOnFlagUntilTimeout>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e012      	b.n	8003264 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	3301      	adds	r3, #1
 8003242:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	429a      	cmp	r2, r3
 800324a:	f4ff af32 	bcc.w	80030b2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2220      	movs	r2, #32
 8003252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003262:	2302      	movs	r3, #2
  }
}
 8003264:	4618      	mov	r0, r3
 8003266:	3720      	adds	r7, #32
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	00100002 	.word	0x00100002
 8003270:	ffff0000 	.word	0xffff0000

08003274 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af02      	add	r7, sp, #8
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	607a      	str	r2, [r7, #4]
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	460b      	mov	r3, r1
 8003282:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003288:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2b08      	cmp	r3, #8
 800328e:	d006      	beq.n	800329e <I2C_MasterRequestWrite+0x2a>
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d003      	beq.n	800329e <I2C_MasterRequestWrite+0x2a>
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800329c:	d108      	bne.n	80032b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	e00b      	b.n	80032c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b4:	2b12      	cmp	r3, #18
 80032b6:	d107      	bne.n	80032c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f000 f84f 	bl	8003378 <I2C_WaitOnFlagUntilTimeout>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00d      	beq.n	80032fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ee:	d103      	bne.n	80032f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e035      	b.n	8003368 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003304:	d108      	bne.n	8003318 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003306:	897b      	ldrh	r3, [r7, #10]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	461a      	mov	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003314:	611a      	str	r2, [r3, #16]
 8003316:	e01b      	b.n	8003350 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003318:	897b      	ldrh	r3, [r7, #10]
 800331a:	11db      	asrs	r3, r3, #7
 800331c:	b2db      	uxtb	r3, r3
 800331e:	f003 0306 	and.w	r3, r3, #6
 8003322:	b2db      	uxtb	r3, r3
 8003324:	f063 030f 	orn	r3, r3, #15
 8003328:	b2da      	uxtb	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	490e      	ldr	r1, [pc, #56]	; (8003370 <I2C_MasterRequestWrite+0xfc>)
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 f875 	bl	8003426 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e010      	b.n	8003368 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003346:	897b      	ldrh	r3, [r7, #10]
 8003348:	b2da      	uxtb	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	4907      	ldr	r1, [pc, #28]	; (8003374 <I2C_MasterRequestWrite+0x100>)
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 f865 	bl	8003426 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	00010008 	.word	0x00010008
 8003374:	00010002 	.word	0x00010002

08003378 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	4613      	mov	r3, r2
 8003386:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003388:	e025      	b.n	80033d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003390:	d021      	beq.n	80033d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003392:	f7ff f8a3 	bl	80024dc <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d302      	bcc.n	80033a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d116      	bne.n	80033d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	f043 0220 	orr.w	r2, r3, #32
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e023      	b.n	800341e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	0c1b      	lsrs	r3, r3, #16
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d10d      	bne.n	80033fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	43da      	mvns	r2, r3
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	4013      	ands	r3, r2
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	bf0c      	ite	eq
 80033f2:	2301      	moveq	r3, #1
 80033f4:	2300      	movne	r3, #0
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	461a      	mov	r2, r3
 80033fa:	e00c      	b.n	8003416 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	43da      	mvns	r2, r3
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	4013      	ands	r3, r2
 8003408:	b29b      	uxth	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	bf0c      	ite	eq
 800340e:	2301      	moveq	r3, #1
 8003410:	2300      	movne	r3, #0
 8003412:	b2db      	uxtb	r3, r3
 8003414:	461a      	mov	r2, r3
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	429a      	cmp	r2, r3
 800341a:	d0b6      	beq.n	800338a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
 800342c:	60f8      	str	r0, [r7, #12]
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	607a      	str	r2, [r7, #4]
 8003432:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003434:	e051      	b.n	80034da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003444:	d123      	bne.n	800348e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003454:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800345e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2220      	movs	r2, #32
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f043 0204 	orr.w	r2, r3, #4
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e046      	b.n	800351c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003494:	d021      	beq.n	80034da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003496:	f7ff f821 	bl	80024dc <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d302      	bcc.n	80034ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d116      	bne.n	80034da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	f043 0220 	orr.w	r2, r3, #32
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e020      	b.n	800351c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	0c1b      	lsrs	r3, r3, #16
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d10c      	bne.n	80034fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	43da      	mvns	r2, r3
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	4013      	ands	r3, r2
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	bf14      	ite	ne
 80034f6:	2301      	movne	r3, #1
 80034f8:	2300      	moveq	r3, #0
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	e00b      	b.n	8003516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	43da      	mvns	r2, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	4013      	ands	r3, r2
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	bf14      	ite	ne
 8003510:	2301      	movne	r3, #1
 8003512:	2300      	moveq	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d18d      	bne.n	8003436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003530:	e02d      	b.n	800358e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 f878 	bl	8003628 <I2C_IsAcknowledgeFailed>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e02d      	b.n	800359e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003548:	d021      	beq.n	800358e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800354a:	f7fe ffc7 	bl	80024dc <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	429a      	cmp	r2, r3
 8003558:	d302      	bcc.n	8003560 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d116      	bne.n	800358e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2220      	movs	r2, #32
 800356a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f043 0220 	orr.w	r2, r3, #32
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e007      	b.n	800359e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003598:	2b80      	cmp	r3, #128	; 0x80
 800359a:	d1ca      	bne.n	8003532 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b084      	sub	sp, #16
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	60f8      	str	r0, [r7, #12]
 80035ae:	60b9      	str	r1, [r7, #8]
 80035b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035b2:	e02d      	b.n	8003610 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 f837 	bl	8003628 <I2C_IsAcknowledgeFailed>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e02d      	b.n	8003620 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ca:	d021      	beq.n	8003610 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035cc:	f7fe ff86 	bl	80024dc <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d302      	bcc.n	80035e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d116      	bne.n	8003610 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	f043 0220 	orr.w	r2, r3, #32
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e007      	b.n	8003620 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	f003 0304 	and.w	r3, r3, #4
 800361a:	2b04      	cmp	r3, #4
 800361c:	d1ca      	bne.n	80035b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800363a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800363e:	d11b      	bne.n	8003678 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003648:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	f043 0204 	orr.w	r2, r3, #4
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e000      	b.n	800367a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003686:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003688:	b08f      	sub	sp, #60	; 0x3c
 800368a:	af0a      	add	r7, sp, #40	; 0x28
 800368c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e10f      	b.n	80038b8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d106      	bne.n	80036b8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7fe fe66 	bl	8002384 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2203      	movs	r2, #3
 80036bc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d102      	bne.n	80036d2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f001 fe61 	bl	800539e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	603b      	str	r3, [r7, #0]
 80036e2:	687e      	ldr	r6, [r7, #4]
 80036e4:	466d      	mov	r5, sp
 80036e6:	f106 0410 	add.w	r4, r6, #16
 80036ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80036fa:	1d33      	adds	r3, r6, #4
 80036fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036fe:	6838      	ldr	r0, [r7, #0]
 8003700:	f001 fdec 	bl	80052dc <USB_CoreInit>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d005      	beq.n	8003716 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2202      	movs	r2, #2
 800370e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e0d0      	b.n	80038b8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2100      	movs	r1, #0
 800371c:	4618      	mov	r0, r3
 800371e:	f001 fe4f 	bl	80053c0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003722:	2300      	movs	r3, #0
 8003724:	73fb      	strb	r3, [r7, #15]
 8003726:	e04a      	b.n	80037be <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003728:	7bfa      	ldrb	r2, [r7, #15]
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	4613      	mov	r3, r2
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	1a9b      	subs	r3, r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	333d      	adds	r3, #61	; 0x3d
 8003738:	2201      	movs	r2, #1
 800373a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800373c:	7bfa      	ldrb	r2, [r7, #15]
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	4613      	mov	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	333c      	adds	r3, #60	; 0x3c
 800374c:	7bfa      	ldrb	r2, [r7, #15]
 800374e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003750:	7bfa      	ldrb	r2, [r7, #15]
 8003752:	7bfb      	ldrb	r3, [r7, #15]
 8003754:	b298      	uxth	r0, r3
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	4613      	mov	r3, r2
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	1a9b      	subs	r3, r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	3342      	adds	r3, #66	; 0x42
 8003764:	4602      	mov	r2, r0
 8003766:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003768:	7bfa      	ldrb	r2, [r7, #15]
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	1a9b      	subs	r3, r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	333f      	adds	r3, #63	; 0x3f
 8003778:	2200      	movs	r2, #0
 800377a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800377c:	7bfa      	ldrb	r2, [r7, #15]
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	4613      	mov	r3, r2
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	1a9b      	subs	r3, r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	3344      	adds	r3, #68	; 0x44
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003790:	7bfa      	ldrb	r2, [r7, #15]
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	4613      	mov	r3, r2
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	1a9b      	subs	r3, r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	3348      	adds	r3, #72	; 0x48
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037a4:	7bfa      	ldrb	r2, [r7, #15]
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	4613      	mov	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	1a9b      	subs	r3, r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	440b      	add	r3, r1
 80037b2:	3350      	adds	r3, #80	; 0x50
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
 80037ba:	3301      	adds	r3, #1
 80037bc:	73fb      	strb	r3, [r7, #15]
 80037be:	7bfa      	ldrb	r2, [r7, #15]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d3af      	bcc.n	8003728 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037c8:	2300      	movs	r3, #0
 80037ca:	73fb      	strb	r3, [r7, #15]
 80037cc:	e044      	b.n	8003858 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037ce:	7bfa      	ldrb	r2, [r7, #15]
 80037d0:	6879      	ldr	r1, [r7, #4]
 80037d2:	4613      	mov	r3, r2
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	1a9b      	subs	r3, r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	440b      	add	r3, r1
 80037dc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80037e0:	2200      	movs	r2, #0
 80037e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037e4:	7bfa      	ldrb	r2, [r7, #15]
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	4613      	mov	r3, r2
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	1a9b      	subs	r3, r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80037f6:	7bfa      	ldrb	r2, [r7, #15]
 80037f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037fa:	7bfa      	ldrb	r2, [r7, #15]
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	4613      	mov	r3, r2
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	1a9b      	subs	r3, r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	440b      	add	r3, r1
 8003808:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800380c:	2200      	movs	r2, #0
 800380e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003810:	7bfa      	ldrb	r2, [r7, #15]
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	4613      	mov	r3, r2
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	1a9b      	subs	r3, r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003826:	7bfa      	ldrb	r2, [r7, #15]
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	1a9b      	subs	r3, r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	440b      	add	r3, r1
 8003834:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800383c:	7bfa      	ldrb	r2, [r7, #15]
 800383e:	6879      	ldr	r1, [r7, #4]
 8003840:	4613      	mov	r3, r2
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	1a9b      	subs	r3, r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	440b      	add	r3, r1
 800384a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	3301      	adds	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
 8003858:	7bfa      	ldrb	r2, [r7, #15]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	429a      	cmp	r2, r3
 8003860:	d3b5      	bcc.n	80037ce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	603b      	str	r3, [r7, #0]
 8003868:	687e      	ldr	r6, [r7, #4]
 800386a:	466d      	mov	r5, sp
 800386c:	f106 0410 	add.w	r4, r6, #16
 8003870:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003872:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003874:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003876:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003878:	e894 0003 	ldmia.w	r4, {r0, r1}
 800387c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003880:	1d33      	adds	r3, r6, #4
 8003882:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003884:	6838      	ldr	r0, [r7, #0]
 8003886:	f001 fdc5 	bl	8005414 <USB_DevInit>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d005      	beq.n	800389c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e00d      	b.n	80038b8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f001 ff74 	bl	800579e <USB_DevDisconnect>

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e264      	b.n	8003d9c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d075      	beq.n	80039ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038de:	4ba3      	ldr	r3, [pc, #652]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 030c 	and.w	r3, r3, #12
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d00c      	beq.n	8003904 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ea:	4ba0      	ldr	r3, [pc, #640]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038f2:	2b08      	cmp	r3, #8
 80038f4:	d112      	bne.n	800391c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038f6:	4b9d      	ldr	r3, [pc, #628]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003902:	d10b      	bne.n	800391c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003904:	4b99      	ldr	r3, [pc, #612]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d05b      	beq.n	80039c8 <HAL_RCC_OscConfig+0x108>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d157      	bne.n	80039c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e23f      	b.n	8003d9c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003924:	d106      	bne.n	8003934 <HAL_RCC_OscConfig+0x74>
 8003926:	4b91      	ldr	r3, [pc, #580]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a90      	ldr	r2, [pc, #576]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 800392c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	e01d      	b.n	8003970 <HAL_RCC_OscConfig+0xb0>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800393c:	d10c      	bne.n	8003958 <HAL_RCC_OscConfig+0x98>
 800393e:	4b8b      	ldr	r3, [pc, #556]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a8a      	ldr	r2, [pc, #552]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	4b88      	ldr	r3, [pc, #544]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a87      	ldr	r2, [pc, #540]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	e00b      	b.n	8003970 <HAL_RCC_OscConfig+0xb0>
 8003958:	4b84      	ldr	r3, [pc, #528]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a83      	ldr	r2, [pc, #524]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 800395e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003962:	6013      	str	r3, [r2, #0]
 8003964:	4b81      	ldr	r3, [pc, #516]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a80      	ldr	r2, [pc, #512]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 800396a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800396e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d013      	beq.n	80039a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003978:	f7fe fdb0 	bl	80024dc <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003980:	f7fe fdac 	bl	80024dc <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b64      	cmp	r3, #100	; 0x64
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e204      	b.n	8003d9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003992:	4b76      	ldr	r3, [pc, #472]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0f0      	beq.n	8003980 <HAL_RCC_OscConfig+0xc0>
 800399e:	e014      	b.n	80039ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a0:	f7fe fd9c 	bl	80024dc <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039a8:	f7fe fd98 	bl	80024dc <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b64      	cmp	r3, #100	; 0x64
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e1f0      	b.n	8003d9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ba:	4b6c      	ldr	r3, [pc, #432]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f0      	bne.n	80039a8 <HAL_RCC_OscConfig+0xe8>
 80039c6:	e000      	b.n	80039ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d063      	beq.n	8003a9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039d6:	4b65      	ldr	r3, [pc, #404]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 030c 	and.w	r3, r3, #12
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00b      	beq.n	80039fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039e2:	4b62      	ldr	r3, [pc, #392]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d11c      	bne.n	8003a28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ee:	4b5f      	ldr	r3, [pc, #380]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d116      	bne.n	8003a28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039fa:	4b5c      	ldr	r3, [pc, #368]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d005      	beq.n	8003a12 <HAL_RCC_OscConfig+0x152>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d001      	beq.n	8003a12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e1c4      	b.n	8003d9c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a12:	4b56      	ldr	r3, [pc, #344]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	4952      	ldr	r1, [pc, #328]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a26:	e03a      	b.n	8003a9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d020      	beq.n	8003a72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a30:	4b4f      	ldr	r3, [pc, #316]	; (8003b70 <HAL_RCC_OscConfig+0x2b0>)
 8003a32:	2201      	movs	r2, #1
 8003a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a36:	f7fe fd51 	bl	80024dc <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a3e:	f7fe fd4d 	bl	80024dc <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e1a5      	b.n	8003d9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a50:	4b46      	ldr	r3, [pc, #280]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0f0      	beq.n	8003a3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5c:	4b43      	ldr	r3, [pc, #268]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	4940      	ldr	r1, [pc, #256]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	600b      	str	r3, [r1, #0]
 8003a70:	e015      	b.n	8003a9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a72:	4b3f      	ldr	r3, [pc, #252]	; (8003b70 <HAL_RCC_OscConfig+0x2b0>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a78:	f7fe fd30 	bl	80024dc <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a80:	f7fe fd2c 	bl	80024dc <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e184      	b.n	8003d9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a92:	4b36      	ldr	r3, [pc, #216]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1f0      	bne.n	8003a80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0308 	and.w	r3, r3, #8
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d030      	beq.n	8003b0c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d016      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ab2:	4b30      	ldr	r3, [pc, #192]	; (8003b74 <HAL_RCC_OscConfig+0x2b4>)
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab8:	f7fe fd10 	bl	80024dc <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ac0:	f7fe fd0c 	bl	80024dc <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e164      	b.n	8003d9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ad2:	4b26      	ldr	r3, [pc, #152]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0f0      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x200>
 8003ade:	e015      	b.n	8003b0c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ae0:	4b24      	ldr	r3, [pc, #144]	; (8003b74 <HAL_RCC_OscConfig+0x2b4>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae6:	f7fe fcf9 	bl	80024dc <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aec:	e008      	b.n	8003b00 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aee:	f7fe fcf5 	bl	80024dc <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e14d      	b.n	8003d9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b00:	4b1a      	ldr	r3, [pc, #104]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1f0      	bne.n	8003aee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 80a0 	beq.w	8003c5a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b1e:	4b13      	ldr	r3, [pc, #76]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10f      	bne.n	8003b4a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60bb      	str	r3, [r7, #8]
 8003b2e:	4b0f      	ldr	r3, [pc, #60]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	4a0e      	ldr	r2, [pc, #56]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b38:	6413      	str	r3, [r2, #64]	; 0x40
 8003b3a:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <HAL_RCC_OscConfig+0x2ac>)
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b42:	60bb      	str	r3, [r7, #8]
 8003b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b46:	2301      	movs	r3, #1
 8003b48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4a:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <HAL_RCC_OscConfig+0x2b8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d121      	bne.n	8003b9a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b56:	4b08      	ldr	r3, [pc, #32]	; (8003b78 <HAL_RCC_OscConfig+0x2b8>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a07      	ldr	r2, [pc, #28]	; (8003b78 <HAL_RCC_OscConfig+0x2b8>)
 8003b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b62:	f7fe fcbb 	bl	80024dc <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b68:	e011      	b.n	8003b8e <HAL_RCC_OscConfig+0x2ce>
 8003b6a:	bf00      	nop
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	42470000 	.word	0x42470000
 8003b74:	42470e80 	.word	0x42470e80
 8003b78:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b7c:	f7fe fcae 	bl	80024dc <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e106      	b.n	8003d9c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8e:	4b85      	ldr	r3, [pc, #532]	; (8003da4 <HAL_RCC_OscConfig+0x4e4>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0f0      	beq.n	8003b7c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d106      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x2f0>
 8003ba2:	4b81      	ldr	r3, [pc, #516]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba6:	4a80      	ldr	r2, [pc, #512]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003ba8:	f043 0301 	orr.w	r3, r3, #1
 8003bac:	6713      	str	r3, [r2, #112]	; 0x70
 8003bae:	e01c      	b.n	8003bea <HAL_RCC_OscConfig+0x32a>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	2b05      	cmp	r3, #5
 8003bb6:	d10c      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x312>
 8003bb8:	4b7b      	ldr	r3, [pc, #492]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbc:	4a7a      	ldr	r2, [pc, #488]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003bbe:	f043 0304 	orr.w	r3, r3, #4
 8003bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc4:	4b78      	ldr	r3, [pc, #480]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc8:	4a77      	ldr	r2, [pc, #476]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003bca:	f043 0301 	orr.w	r3, r3, #1
 8003bce:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd0:	e00b      	b.n	8003bea <HAL_RCC_OscConfig+0x32a>
 8003bd2:	4b75      	ldr	r3, [pc, #468]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd6:	4a74      	ldr	r2, [pc, #464]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003bd8:	f023 0301 	bic.w	r3, r3, #1
 8003bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8003bde:	4b72      	ldr	r3, [pc, #456]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be2:	4a71      	ldr	r2, [pc, #452]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003be4:	f023 0304 	bic.w	r3, r3, #4
 8003be8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d015      	beq.n	8003c1e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf2:	f7fe fc73 	bl	80024dc <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf8:	e00a      	b.n	8003c10 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bfa:	f7fe fc6f 	bl	80024dc <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e0c5      	b.n	8003d9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c10:	4b65      	ldr	r3, [pc, #404]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0ee      	beq.n	8003bfa <HAL_RCC_OscConfig+0x33a>
 8003c1c:	e014      	b.n	8003c48 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c1e:	f7fe fc5d 	bl	80024dc <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c24:	e00a      	b.n	8003c3c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c26:	f7fe fc59 	bl	80024dc <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e0af      	b.n	8003d9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c3c:	4b5a      	ldr	r3, [pc, #360]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1ee      	bne.n	8003c26 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c48:	7dfb      	ldrb	r3, [r7, #23]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d105      	bne.n	8003c5a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c4e:	4b56      	ldr	r3, [pc, #344]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	4a55      	ldr	r2, [pc, #340]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 809b 	beq.w	8003d9a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c64:	4b50      	ldr	r3, [pc, #320]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f003 030c 	and.w	r3, r3, #12
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d05c      	beq.n	8003d2a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d141      	bne.n	8003cfc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c78:	4b4c      	ldr	r3, [pc, #304]	; (8003dac <HAL_RCC_OscConfig+0x4ec>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7e:	f7fe fc2d 	bl	80024dc <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c84:	e008      	b.n	8003c98 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c86:	f7fe fc29 	bl	80024dc <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e081      	b.n	8003d9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c98:	4b43      	ldr	r3, [pc, #268]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1f0      	bne.n	8003c86 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	69da      	ldr	r2, [r3, #28]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	431a      	orrs	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	019b      	lsls	r3, r3, #6
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cba:	085b      	lsrs	r3, r3, #1
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	041b      	lsls	r3, r3, #16
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc6:	061b      	lsls	r3, r3, #24
 8003cc8:	4937      	ldr	r1, [pc, #220]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cce:	4b37      	ldr	r3, [pc, #220]	; (8003dac <HAL_RCC_OscConfig+0x4ec>)
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd4:	f7fe fc02 	bl	80024dc <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cdc:	f7fe fbfe 	bl	80024dc <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e056      	b.n	8003d9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cee:	4b2e      	ldr	r3, [pc, #184]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0f0      	beq.n	8003cdc <HAL_RCC_OscConfig+0x41c>
 8003cfa:	e04e      	b.n	8003d9a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cfc:	4b2b      	ldr	r3, [pc, #172]	; (8003dac <HAL_RCC_OscConfig+0x4ec>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d02:	f7fe fbeb 	bl	80024dc <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d0a:	f7fe fbe7 	bl	80024dc <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e03f      	b.n	8003d9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1c:	4b22      	ldr	r3, [pc, #136]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1f0      	bne.n	8003d0a <HAL_RCC_OscConfig+0x44a>
 8003d28:	e037      	b.n	8003d9a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d101      	bne.n	8003d36 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e032      	b.n	8003d9c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d36:	4b1c      	ldr	r3, [pc, #112]	; (8003da8 <HAL_RCC_OscConfig+0x4e8>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d028      	beq.n	8003d96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d121      	bne.n	8003d96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d11a      	bne.n	8003d96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d66:	4013      	ands	r3, r2
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d6c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d111      	bne.n	8003d96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7c:	085b      	lsrs	r3, r3, #1
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d107      	bne.n	8003d96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d001      	beq.n	8003d9a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e000      	b.n	8003d9c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3718      	adds	r7, #24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40007000 	.word	0x40007000
 8003da8:	40023800 	.word	0x40023800
 8003dac:	42470060 	.word	0x42470060

08003db0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e0cc      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dc4:	4b68      	ldr	r3, [pc, #416]	; (8003f68 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d90c      	bls.n	8003dec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd2:	4b65      	ldr	r3, [pc, #404]	; (8003f68 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dda:	4b63      	ldr	r3, [pc, #396]	; (8003f68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d001      	beq.n	8003dec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e0b8      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d020      	beq.n	8003e3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d005      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e04:	4b59      	ldr	r3, [pc, #356]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	4a58      	ldr	r2, [pc, #352]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0308 	and.w	r3, r3, #8
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d005      	beq.n	8003e28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e1c:	4b53      	ldr	r3, [pc, #332]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	4a52      	ldr	r2, [pc, #328]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e28:	4b50      	ldr	r3, [pc, #320]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	494d      	ldr	r1, [pc, #308]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d044      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d107      	bne.n	8003e5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e4e:	4b47      	ldr	r3, [pc, #284]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d119      	bne.n	8003e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e07f      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d003      	beq.n	8003e6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e6a:	2b03      	cmp	r3, #3
 8003e6c:	d107      	bne.n	8003e7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e6e:	4b3f      	ldr	r3, [pc, #252]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d109      	bne.n	8003e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e06f      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e7e:	4b3b      	ldr	r3, [pc, #236]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e067      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e8e:	4b37      	ldr	r3, [pc, #220]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f023 0203 	bic.w	r2, r3, #3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	4934      	ldr	r1, [pc, #208]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ea0:	f7fe fb1c 	bl	80024dc <HAL_GetTick>
 8003ea4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea6:	e00a      	b.n	8003ebe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea8:	f7fe fb18 	bl	80024dc <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e04f      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ebe:	4b2b      	ldr	r3, [pc, #172]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 020c 	and.w	r2, r3, #12
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d1eb      	bne.n	8003ea8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ed0:	4b25      	ldr	r3, [pc, #148]	; (8003f68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d20c      	bcs.n	8003ef8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ede:	4b22      	ldr	r3, [pc, #136]	; (8003f68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	b2d2      	uxtb	r2, r2
 8003ee4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee6:	4b20      	ldr	r3, [pc, #128]	; (8003f68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d001      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e032      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d008      	beq.n	8003f16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f04:	4b19      	ldr	r3, [pc, #100]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	4916      	ldr	r1, [pc, #88]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d009      	beq.n	8003f36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f22:	4b12      	ldr	r3, [pc, #72]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	490e      	ldr	r1, [pc, #56]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f36:	f000 f821 	bl	8003f7c <HAL_RCC_GetSysClockFreq>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <HAL_RCC_ClockConfig+0x1bc>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	091b      	lsrs	r3, r3, #4
 8003f42:	f003 030f 	and.w	r3, r3, #15
 8003f46:	490a      	ldr	r1, [pc, #40]	; (8003f70 <HAL_RCC_ClockConfig+0x1c0>)
 8003f48:	5ccb      	ldrb	r3, [r1, r3]
 8003f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f4e:	4a09      	ldr	r2, [pc, #36]	; (8003f74 <HAL_RCC_ClockConfig+0x1c4>)
 8003f50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f52:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <HAL_RCC_ClockConfig+0x1c8>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fe f818 	bl	8001f8c <HAL_InitTick>

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	40023c00 	.word	0x40023c00
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	0800dd6c 	.word	0x0800dd6c
 8003f74:	20000008 	.word	0x20000008
 8003f78:	2000000c 	.word	0x2000000c

08003f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f7c:	b5b0      	push	{r4, r5, r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f82:	2100      	movs	r1, #0
 8003f84:	6079      	str	r1, [r7, #4]
 8003f86:	2100      	movs	r1, #0
 8003f88:	60f9      	str	r1, [r7, #12]
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f8e:	2100      	movs	r1, #0
 8003f90:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f92:	4952      	ldr	r1, [pc, #328]	; (80040dc <HAL_RCC_GetSysClockFreq+0x160>)
 8003f94:	6889      	ldr	r1, [r1, #8]
 8003f96:	f001 010c 	and.w	r1, r1, #12
 8003f9a:	2908      	cmp	r1, #8
 8003f9c:	d00d      	beq.n	8003fba <HAL_RCC_GetSysClockFreq+0x3e>
 8003f9e:	2908      	cmp	r1, #8
 8003fa0:	f200 8094 	bhi.w	80040cc <HAL_RCC_GetSysClockFreq+0x150>
 8003fa4:	2900      	cmp	r1, #0
 8003fa6:	d002      	beq.n	8003fae <HAL_RCC_GetSysClockFreq+0x32>
 8003fa8:	2904      	cmp	r1, #4
 8003faa:	d003      	beq.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x38>
 8003fac:	e08e      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fae:	4b4c      	ldr	r3, [pc, #304]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x164>)
 8003fb0:	60bb      	str	r3, [r7, #8]
       break;
 8003fb2:	e08e      	b.n	80040d2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fb4:	4b4b      	ldr	r3, [pc, #300]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003fb6:	60bb      	str	r3, [r7, #8]
      break;
 8003fb8:	e08b      	b.n	80040d2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fba:	4948      	ldr	r1, [pc, #288]	; (80040dc <HAL_RCC_GetSysClockFreq+0x160>)
 8003fbc:	6849      	ldr	r1, [r1, #4]
 8003fbe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003fc2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fc4:	4945      	ldr	r1, [pc, #276]	; (80040dc <HAL_RCC_GetSysClockFreq+0x160>)
 8003fc6:	6849      	ldr	r1, [r1, #4]
 8003fc8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003fcc:	2900      	cmp	r1, #0
 8003fce:	d024      	beq.n	800401a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fd0:	4942      	ldr	r1, [pc, #264]	; (80040dc <HAL_RCC_GetSysClockFreq+0x160>)
 8003fd2:	6849      	ldr	r1, [r1, #4]
 8003fd4:	0989      	lsrs	r1, r1, #6
 8003fd6:	4608      	mov	r0, r1
 8003fd8:	f04f 0100 	mov.w	r1, #0
 8003fdc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003fe0:	f04f 0500 	mov.w	r5, #0
 8003fe4:	ea00 0204 	and.w	r2, r0, r4
 8003fe8:	ea01 0305 	and.w	r3, r1, r5
 8003fec:	493d      	ldr	r1, [pc, #244]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003fee:	fb01 f003 	mul.w	r0, r1, r3
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	fb01 f102 	mul.w	r1, r1, r2
 8003ff8:	1844      	adds	r4, r0, r1
 8003ffa:	493a      	ldr	r1, [pc, #232]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003ffc:	fba2 0101 	umull	r0, r1, r2, r1
 8004000:	1863      	adds	r3, r4, r1
 8004002:	4619      	mov	r1, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	461a      	mov	r2, r3
 8004008:	f04f 0300 	mov.w	r3, #0
 800400c:	f7fc fe44 	bl	8000c98 <__aeabi_uldivmod>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4613      	mov	r3, r2
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	e04a      	b.n	80040b0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800401a:	4b30      	ldr	r3, [pc, #192]	; (80040dc <HAL_RCC_GetSysClockFreq+0x160>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	099b      	lsrs	r3, r3, #6
 8004020:	461a      	mov	r2, r3
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	f240 10ff 	movw	r0, #511	; 0x1ff
 800402a:	f04f 0100 	mov.w	r1, #0
 800402e:	ea02 0400 	and.w	r4, r2, r0
 8004032:	ea03 0501 	and.w	r5, r3, r1
 8004036:	4620      	mov	r0, r4
 8004038:	4629      	mov	r1, r5
 800403a:	f04f 0200 	mov.w	r2, #0
 800403e:	f04f 0300 	mov.w	r3, #0
 8004042:	014b      	lsls	r3, r1, #5
 8004044:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004048:	0142      	lsls	r2, r0, #5
 800404a:	4610      	mov	r0, r2
 800404c:	4619      	mov	r1, r3
 800404e:	1b00      	subs	r0, r0, r4
 8004050:	eb61 0105 	sbc.w	r1, r1, r5
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	f04f 0300 	mov.w	r3, #0
 800405c:	018b      	lsls	r3, r1, #6
 800405e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004062:	0182      	lsls	r2, r0, #6
 8004064:	1a12      	subs	r2, r2, r0
 8004066:	eb63 0301 	sbc.w	r3, r3, r1
 800406a:	f04f 0000 	mov.w	r0, #0
 800406e:	f04f 0100 	mov.w	r1, #0
 8004072:	00d9      	lsls	r1, r3, #3
 8004074:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004078:	00d0      	lsls	r0, r2, #3
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	1912      	adds	r2, r2, r4
 8004080:	eb45 0303 	adc.w	r3, r5, r3
 8004084:	f04f 0000 	mov.w	r0, #0
 8004088:	f04f 0100 	mov.w	r1, #0
 800408c:	0299      	lsls	r1, r3, #10
 800408e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004092:	0290      	lsls	r0, r2, #10
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	4610      	mov	r0, r2
 800409a:	4619      	mov	r1, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	461a      	mov	r2, r3
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	f7fc fdf8 	bl	8000c98 <__aeabi_uldivmod>
 80040a8:	4602      	mov	r2, r0
 80040aa:	460b      	mov	r3, r1
 80040ac:	4613      	mov	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040b0:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <HAL_RCC_GetSysClockFreq+0x160>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	0c1b      	lsrs	r3, r3, #16
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	3301      	adds	r3, #1
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c8:	60bb      	str	r3, [r7, #8]
      break;
 80040ca:	e002      	b.n	80040d2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040cc:	4b04      	ldr	r3, [pc, #16]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x164>)
 80040ce:	60bb      	str	r3, [r7, #8]
      break;
 80040d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040d2:	68bb      	ldr	r3, [r7, #8]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bdb0      	pop	{r4, r5, r7, pc}
 80040dc:	40023800 	.word	0x40023800
 80040e0:	00f42400 	.word	0x00f42400
 80040e4:	017d7840 	.word	0x017d7840

080040e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040ec:	4b03      	ldr	r3, [pc, #12]	; (80040fc <HAL_RCC_GetHCLKFreq+0x14>)
 80040ee:	681b      	ldr	r3, [r3, #0]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	20000008 	.word	0x20000008

08004100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004104:	f7ff fff0 	bl	80040e8 <HAL_RCC_GetHCLKFreq>
 8004108:	4602      	mov	r2, r0
 800410a:	4b05      	ldr	r3, [pc, #20]	; (8004120 <HAL_RCC_GetPCLK1Freq+0x20>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	0a9b      	lsrs	r3, r3, #10
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	4903      	ldr	r1, [pc, #12]	; (8004124 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004116:	5ccb      	ldrb	r3, [r1, r3]
 8004118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800411c:	4618      	mov	r0, r3
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40023800 	.word	0x40023800
 8004124:	0800dd7c 	.word	0x0800dd7c

08004128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800412c:	f7ff ffdc 	bl	80040e8 <HAL_RCC_GetHCLKFreq>
 8004130:	4602      	mov	r2, r0
 8004132:	4b05      	ldr	r3, [pc, #20]	; (8004148 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	0b5b      	lsrs	r3, r3, #13
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	4903      	ldr	r1, [pc, #12]	; (800414c <HAL_RCC_GetPCLK2Freq+0x24>)
 800413e:	5ccb      	ldrb	r3, [r1, r3]
 8004140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004144:	4618      	mov	r0, r3
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40023800 	.word	0x40023800
 800414c:	0800dd7c 	.word	0x0800dd7c

08004150 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	220f      	movs	r2, #15
 800415e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004160:	4b12      	ldr	r3, [pc, #72]	; (80041ac <HAL_RCC_GetClockConfig+0x5c>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 0203 	and.w	r2, r3, #3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800416c:	4b0f      	ldr	r3, [pc, #60]	; (80041ac <HAL_RCC_GetClockConfig+0x5c>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004178:	4b0c      	ldr	r3, [pc, #48]	; (80041ac <HAL_RCC_GetClockConfig+0x5c>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004184:	4b09      	ldr	r3, [pc, #36]	; (80041ac <HAL_RCC_GetClockConfig+0x5c>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	08db      	lsrs	r3, r3, #3
 800418a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004192:	4b07      	ldr	r3, [pc, #28]	; (80041b0 <HAL_RCC_GetClockConfig+0x60>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0207 	and.w	r2, r3, #7
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	601a      	str	r2, [r3, #0]
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	40023800 	.word	0x40023800
 80041b0:	40023c00 	.word	0x40023c00

080041b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e07b      	b.n	80042be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d108      	bne.n	80041e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041d6:	d009      	beq.n	80041ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	61da      	str	r2, [r3, #28]
 80041de:	e005      	b.n	80041ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7fd fba2 	bl	8001950 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004222:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004234:	431a      	orrs	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	431a      	orrs	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800425c:	431a      	orrs	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004270:	ea42 0103 	orr.w	r1, r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004278:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	0c1b      	lsrs	r3, r3, #16
 800428a:	f003 0104 	and.w	r1, r3, #4
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	f003 0210 	and.w	r2, r3, #16
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	69da      	ldr	r2, [r3, #28]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b082      	sub	sp, #8
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e041      	b.n	800435c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d106      	bne.n	80042f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f839 	bl	8004364 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2202      	movs	r2, #2
 80042f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	3304      	adds	r3, #4
 8004302:	4619      	mov	r1, r3
 8004304:	4610      	mov	r0, r2
 8004306:	f000 f9c9 	bl	800469c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3708      	adds	r7, #8
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b01      	cmp	r3, #1
 800438a:	d001      	beq.n	8004390 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e044      	b.n	800441a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0201 	orr.w	r2, r2, #1
 80043a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a1e      	ldr	r2, [pc, #120]	; (8004428 <HAL_TIM_Base_Start_IT+0xb0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d018      	beq.n	80043e4 <HAL_TIM_Base_Start_IT+0x6c>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ba:	d013      	beq.n	80043e4 <HAL_TIM_Base_Start_IT+0x6c>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a1a      	ldr	r2, [pc, #104]	; (800442c <HAL_TIM_Base_Start_IT+0xb4>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00e      	beq.n	80043e4 <HAL_TIM_Base_Start_IT+0x6c>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a19      	ldr	r2, [pc, #100]	; (8004430 <HAL_TIM_Base_Start_IT+0xb8>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d009      	beq.n	80043e4 <HAL_TIM_Base_Start_IT+0x6c>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a17      	ldr	r2, [pc, #92]	; (8004434 <HAL_TIM_Base_Start_IT+0xbc>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d004      	beq.n	80043e4 <HAL_TIM_Base_Start_IT+0x6c>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a16      	ldr	r2, [pc, #88]	; (8004438 <HAL_TIM_Base_Start_IT+0xc0>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d111      	bne.n	8004408 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2b06      	cmp	r3, #6
 80043f4:	d010      	beq.n	8004418 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f042 0201 	orr.w	r2, r2, #1
 8004404:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004406:	e007      	b.n	8004418 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0201 	orr.w	r2, r2, #1
 8004416:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40010000 	.word	0x40010000
 800442c:	40000400 	.word	0x40000400
 8004430:	40000800 	.word	0x40000800
 8004434:	40000c00 	.word	0x40000c00
 8004438:	40014000 	.word	0x40014000

0800443c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b02      	cmp	r3, #2
 8004450:	d122      	bne.n	8004498 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b02      	cmp	r3, #2
 800445e:	d11b      	bne.n	8004498 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f06f 0202 	mvn.w	r2, #2
 8004468:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	f003 0303 	and.w	r3, r3, #3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f8ee 	bl	8004660 <HAL_TIM_IC_CaptureCallback>
 8004484:	e005      	b.n	8004492 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f8e0 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f8f1 	bl	8004674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	f003 0304 	and.w	r3, r3, #4
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d122      	bne.n	80044ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	d11b      	bne.n	80044ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f06f 0204 	mvn.w	r2, #4
 80044bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2202      	movs	r2, #2
 80044c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f8c4 	bl	8004660 <HAL_TIM_IC_CaptureCallback>
 80044d8:	e005      	b.n	80044e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f8b6 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f8c7 	bl	8004674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	f003 0308 	and.w	r3, r3, #8
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d122      	bne.n	8004540 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f003 0308 	and.w	r3, r3, #8
 8004504:	2b08      	cmp	r3, #8
 8004506:	d11b      	bne.n	8004540 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f06f 0208 	mvn.w	r2, #8
 8004510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2204      	movs	r2, #4
 8004516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	f003 0303 	and.w	r3, r3, #3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f89a 	bl	8004660 <HAL_TIM_IC_CaptureCallback>
 800452c:	e005      	b.n	800453a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f88c 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f89d 	bl	8004674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	f003 0310 	and.w	r3, r3, #16
 800454a:	2b10      	cmp	r3, #16
 800454c:	d122      	bne.n	8004594 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	2b10      	cmp	r3, #16
 800455a:	d11b      	bne.n	8004594 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f06f 0210 	mvn.w	r2, #16
 8004564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2208      	movs	r2, #8
 800456a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f870 	bl	8004660 <HAL_TIM_IC_CaptureCallback>
 8004580:	e005      	b.n	800458e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f862 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f873 	bl	8004674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d10e      	bne.n	80045c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d107      	bne.n	80045c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f06f 0201 	mvn.w	r2, #1
 80045b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7fd f97a 	bl	80018b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ca:	2b80      	cmp	r3, #128	; 0x80
 80045cc:	d10e      	bne.n	80045ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d8:	2b80      	cmp	r3, #128	; 0x80
 80045da:	d107      	bne.n	80045ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f8e2 	bl	80047b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f6:	2b40      	cmp	r3, #64	; 0x40
 80045f8:	d10e      	bne.n	8004618 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004604:	2b40      	cmp	r3, #64	; 0x40
 8004606:	d107      	bne.n	8004618 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f838 	bl	8004688 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f003 0320 	and.w	r3, r3, #32
 8004622:	2b20      	cmp	r3, #32
 8004624:	d10e      	bne.n	8004644 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f003 0320 	and.w	r3, r3, #32
 8004630:	2b20      	cmp	r3, #32
 8004632:	d107      	bne.n	8004644 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f06f 0220 	mvn.w	r2, #32
 800463c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f8ac 	bl	800479c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004644:	bf00      	nop
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a34      	ldr	r2, [pc, #208]	; (8004780 <TIM_Base_SetConfig+0xe4>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d00f      	beq.n	80046d4 <TIM_Base_SetConfig+0x38>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ba:	d00b      	beq.n	80046d4 <TIM_Base_SetConfig+0x38>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a31      	ldr	r2, [pc, #196]	; (8004784 <TIM_Base_SetConfig+0xe8>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d007      	beq.n	80046d4 <TIM_Base_SetConfig+0x38>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a30      	ldr	r2, [pc, #192]	; (8004788 <TIM_Base_SetConfig+0xec>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d003      	beq.n	80046d4 <TIM_Base_SetConfig+0x38>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a2f      	ldr	r2, [pc, #188]	; (800478c <TIM_Base_SetConfig+0xf0>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d108      	bne.n	80046e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a25      	ldr	r2, [pc, #148]	; (8004780 <TIM_Base_SetConfig+0xe4>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d01b      	beq.n	8004726 <TIM_Base_SetConfig+0x8a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f4:	d017      	beq.n	8004726 <TIM_Base_SetConfig+0x8a>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a22      	ldr	r2, [pc, #136]	; (8004784 <TIM_Base_SetConfig+0xe8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d013      	beq.n	8004726 <TIM_Base_SetConfig+0x8a>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a21      	ldr	r2, [pc, #132]	; (8004788 <TIM_Base_SetConfig+0xec>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00f      	beq.n	8004726 <TIM_Base_SetConfig+0x8a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a20      	ldr	r2, [pc, #128]	; (800478c <TIM_Base_SetConfig+0xf0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00b      	beq.n	8004726 <TIM_Base_SetConfig+0x8a>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a1f      	ldr	r2, [pc, #124]	; (8004790 <TIM_Base_SetConfig+0xf4>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d007      	beq.n	8004726 <TIM_Base_SetConfig+0x8a>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a1e      	ldr	r2, [pc, #120]	; (8004794 <TIM_Base_SetConfig+0xf8>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d003      	beq.n	8004726 <TIM_Base_SetConfig+0x8a>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a1d      	ldr	r2, [pc, #116]	; (8004798 <TIM_Base_SetConfig+0xfc>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d108      	bne.n	8004738 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800472c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	4313      	orrs	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a08      	ldr	r2, [pc, #32]	; (8004780 <TIM_Base_SetConfig+0xe4>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d103      	bne.n	800476c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	691a      	ldr	r2, [r3, #16]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	615a      	str	r2, [r3, #20]
}
 8004772:	bf00      	nop
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	40010000 	.word	0x40010000
 8004784:	40000400 	.word	0x40000400
 8004788:	40000800 	.word	0x40000800
 800478c:	40000c00 	.word	0x40000c00
 8004790:	40014000 	.word	0x40014000
 8004794:	40014400 	.word	0x40014400
 8004798:	40014800 	.word	0x40014800

0800479c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e03f      	b.n	8004856 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d106      	bne.n	80047f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7fd fd54 	bl	8002298 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2224      	movs	r2, #36	; 0x24
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004806:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 fb9f 	bl	8004f4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	691a      	ldr	r2, [r3, #16]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800481c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695a      	ldr	r2, [r3, #20]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800482c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800483c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2220      	movs	r2, #32
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2220      	movs	r2, #32
 8004850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3708      	adds	r7, #8
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b084      	sub	sp, #16
 8004862:	af00      	add	r7, sp, #0
 8004864:	60f8      	str	r0, [r7, #12]
 8004866:	60b9      	str	r1, [r7, #8]
 8004868:	4613      	mov	r3, r2
 800486a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b20      	cmp	r3, #32
 8004876:	d11d      	bne.n	80048b4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d002      	beq.n	8004884 <HAL_UART_Receive_IT+0x26>
 800487e:	88fb      	ldrh	r3, [r7, #6]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e016      	b.n	80048b6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800488e:	2b01      	cmp	r3, #1
 8004890:	d101      	bne.n	8004896 <HAL_UART_Receive_IT+0x38>
 8004892:	2302      	movs	r3, #2
 8004894:	e00f      	b.n	80048b6 <HAL_UART_Receive_IT+0x58>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80048a4:	88fb      	ldrh	r3, [r7, #6]
 80048a6:	461a      	mov	r2, r3
 80048a8:	68b9      	ldr	r1, [r7, #8]
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 f9d4 	bl	8004c58 <UART_Start_Receive_IT>
 80048b0:	4603      	mov	r3, r0
 80048b2:	e000      	b.n	80048b6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80048b4:	2302      	movs	r3, #2
  }
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
	...

080048c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08a      	sub	sp, #40	; 0x28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80048e0:	2300      	movs	r3, #0
 80048e2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80048e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ea:	f003 030f 	and.w	r3, r3, #15
 80048ee:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10d      	bne.n	8004912 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	f003 0320 	and.w	r3, r3, #32
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d008      	beq.n	8004912 <HAL_UART_IRQHandler+0x52>
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	f003 0320 	and.w	r3, r3, #32
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 fa87 	bl	8004e1e <UART_Receive_IT>
      return;
 8004910:	e17c      	b.n	8004c0c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 80b1 	beq.w	8004a7c <HAL_UART_IRQHandler+0x1bc>
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b00      	cmp	r3, #0
 8004922:	d105      	bne.n	8004930 <HAL_UART_IRQHandler+0x70>
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800492a:	2b00      	cmp	r3, #0
 800492c:	f000 80a6 	beq.w	8004a7c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <HAL_UART_IRQHandler+0x90>
 800493a:	6a3b      	ldr	r3, [r7, #32]
 800493c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004940:	2b00      	cmp	r3, #0
 8004942:	d005      	beq.n	8004950 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004948:	f043 0201 	orr.w	r2, r3, #1
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004952:	f003 0304 	and.w	r3, r3, #4
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <HAL_UART_IRQHandler+0xb0>
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b00      	cmp	r3, #0
 8004962:	d005      	beq.n	8004970 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004968:	f043 0202 	orr.w	r2, r3, #2
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00a      	beq.n	8004990 <HAL_UART_IRQHandler+0xd0>
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	d005      	beq.n	8004990 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004988:	f043 0204 	orr.w	r2, r3, #4
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00f      	beq.n	80049ba <HAL_UART_IRQHandler+0xfa>
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	f003 0320 	and.w	r3, r3, #32
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d104      	bne.n	80049ae <HAL_UART_IRQHandler+0xee>
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d005      	beq.n	80049ba <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	f043 0208 	orr.w	r2, r3, #8
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 811f 	beq.w	8004c02 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c6:	f003 0320 	and.w	r3, r3, #32
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d007      	beq.n	80049de <HAL_UART_IRQHandler+0x11e>
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	f003 0320 	and.w	r3, r3, #32
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d002      	beq.n	80049de <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 fa20 	bl	8004e1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e8:	2b40      	cmp	r3, #64	; 0x40
 80049ea:	bf0c      	ite	eq
 80049ec:	2301      	moveq	r3, #1
 80049ee:	2300      	movne	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f8:	f003 0308 	and.w	r3, r3, #8
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d102      	bne.n	8004a06 <HAL_UART_IRQHandler+0x146>
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d031      	beq.n	8004a6a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f960 	bl	8004ccc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a16:	2b40      	cmp	r3, #64	; 0x40
 8004a18:	d123      	bne.n	8004a62 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	695a      	ldr	r2, [r3, #20]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a28:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d013      	beq.n	8004a5a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a36:	4a77      	ldr	r2, [pc, #476]	; (8004c14 <HAL_UART_IRQHandler+0x354>)
 8004a38:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fd fece 	bl	80027e0 <HAL_DMA_Abort_IT>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d016      	beq.n	8004a78 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a54:	4610      	mov	r0, r2
 8004a56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a58:	e00e      	b.n	8004a78 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f8e6 	bl	8004c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a60:	e00a      	b.n	8004a78 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f8e2 	bl	8004c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a68:	e006      	b.n	8004a78 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f8de 	bl	8004c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004a76:	e0c4      	b.n	8004c02 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a78:	bf00      	nop
    return;
 8004a7a:	e0c2      	b.n	8004c02 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	f040 80a2 	bne.w	8004bca <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	f003 0310 	and.w	r3, r3, #16
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 809c 	beq.w	8004bca <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004a92:	6a3b      	ldr	r3, [r7, #32]
 8004a94:	f003 0310 	and.w	r3, r3, #16
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 8096 	beq.w	8004bca <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	60fb      	str	r3, [r7, #12]
 8004ab2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004abe:	2b40      	cmp	r3, #64	; 0x40
 8004ac0:	d14f      	bne.n	8004b62 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004acc:	8a3b      	ldrh	r3, [r7, #16]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 8099 	beq.w	8004c06 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ad8:	8a3a      	ldrh	r2, [r7, #16]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	f080 8093 	bcs.w	8004c06 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	8a3a      	ldrh	r2, [r7, #16]
 8004ae4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004af0:	d02b      	beq.n	8004b4a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68da      	ldr	r2, [r3, #12]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b00:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	695a      	ldr	r2, [r3, #20]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0201 	bic.w	r2, r2, #1
 8004b10:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	695a      	ldr	r2, [r3, #20]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b20:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0210 	bic.w	r2, r2, #16
 8004b3e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7fd fddb 	bl	8002700 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	4619      	mov	r1, r3
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f870 	bl	8004c40 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004b60:	e051      	b.n	8004c06 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d047      	beq.n	8004c0a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004b7a:	8a7b      	ldrh	r3, [r7, #18]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d044      	beq.n	8004c0a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68da      	ldr	r2, [r3, #12]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b8e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695a      	ldr	r2, [r3, #20]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 0201 	bic.w	r2, r2, #1
 8004b9e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68da      	ldr	r2, [r3, #12]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 0210 	bic.w	r2, r2, #16
 8004bbc:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bbe:	8a7b      	ldrh	r3, [r7, #18]
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f83c 	bl	8004c40 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004bc8:	e01f      	b.n	8004c0a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d008      	beq.n	8004be6 <HAL_UART_IRQHandler+0x326>
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f8b5 	bl	8004d4e <UART_Transmit_IT>
    return;
 8004be4:	e012      	b.n	8004c0c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00d      	beq.n	8004c0c <HAL_UART_IRQHandler+0x34c>
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d008      	beq.n	8004c0c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f8f7 	bl	8004dee <UART_EndTransmit_IT>
    return;
 8004c00:	e004      	b.n	8004c0c <HAL_UART_IRQHandler+0x34c>
    return;
 8004c02:	bf00      	nop
 8004c04:	e002      	b.n	8004c0c <HAL_UART_IRQHandler+0x34c>
      return;
 8004c06:	bf00      	nop
 8004c08:	e000      	b.n	8004c0c <HAL_UART_IRQHandler+0x34c>
      return;
 8004c0a:	bf00      	nop
  }
}
 8004c0c:	3728      	adds	r7, #40	; 0x28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	08004d27 	.word	0x08004d27

08004c18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	460b      	mov	r3, r1
 8004c4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	4613      	mov	r3, r2
 8004c64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	88fa      	ldrh	r2, [r7, #6]
 8004c70:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	88fa      	ldrh	r2, [r7, #6]
 8004c76:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2222      	movs	r2, #34	; 0x22
 8004c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68da      	ldr	r2, [r3, #12]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c9c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	695a      	ldr	r2, [r3, #20]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f042 0201 	orr.w	r2, r2, #1
 8004cac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68da      	ldr	r2, [r3, #12]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f042 0220 	orr.w	r2, r2, #32
 8004cbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68da      	ldr	r2, [r3, #12]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ce2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695a      	ldr	r2, [r3, #20]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 0201 	bic.w	r2, r2, #1
 8004cf2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d107      	bne.n	8004d0c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68da      	ldr	r2, [r3, #12]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0210 	bic.w	r2, r2, #16
 8004d0a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d1a:	bf00      	nop
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b084      	sub	sp, #16
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f7ff ff73 	bl	8004c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d46:	bf00      	nop
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b085      	sub	sp, #20
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b21      	cmp	r3, #33	; 0x21
 8004d60:	d13e      	bne.n	8004de0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d6a:	d114      	bne.n	8004d96 <UART_Transmit_IT+0x48>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d110      	bne.n	8004d96 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	881b      	ldrh	r3, [r3, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d88:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	1c9a      	adds	r2, r3, #2
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	621a      	str	r2, [r3, #32]
 8004d94:	e008      	b.n	8004da8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	1c59      	adds	r1, r3, #1
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	6211      	str	r1, [r2, #32]
 8004da0:	781a      	ldrb	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	4619      	mov	r1, r3
 8004db6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10f      	bne.n	8004ddc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68da      	ldr	r2, [r3, #12]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68da      	ldr	r2, [r3, #12]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dda:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	e000      	b.n	8004de2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004de0:	2302      	movs	r3, #2
  }
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3714      	adds	r7, #20
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b082      	sub	sp, #8
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68da      	ldr	r2, [r3, #12]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7ff ff02 	bl	8004c18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b084      	sub	sp, #16
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b22      	cmp	r3, #34	; 0x22
 8004e30:	f040 8087 	bne.w	8004f42 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e3c:	d117      	bne.n	8004e6e <UART_Receive_IT+0x50>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d113      	bne.n	8004e6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e46:	2300      	movs	r3, #0
 8004e48:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e66:	1c9a      	adds	r2, r3, #2
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	629a      	str	r2, [r3, #40]	; 0x28
 8004e6c:	e026      	b.n	8004ebc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e72:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004e74:	2300      	movs	r3, #0
 8004e76:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e80:	d007      	beq.n	8004e92 <UART_Receive_IT+0x74>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10a      	bne.n	8004ea0 <UART_Receive_IT+0x82>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d106      	bne.n	8004ea0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	b2da      	uxtb	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	701a      	strb	r2, [r3, #0]
 8004e9e:	e008      	b.n	8004eb2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	4619      	mov	r1, r3
 8004eca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d136      	bne.n	8004f3e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68da      	ldr	r2, [r3, #12]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f022 0220 	bic.w	r2, r2, #32
 8004ede:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68da      	ldr	r2, [r3, #12]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004eee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	695a      	ldr	r2, [r3, #20]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 0201 	bic.w	r2, r2, #1
 8004efe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2220      	movs	r2, #32
 8004f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d10e      	bne.n	8004f2e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0210 	bic.w	r2, r2, #16
 8004f1e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f24:	4619      	mov	r1, r3
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7ff fe8a 	bl	8004c40 <HAL_UARTEx_RxEventCallback>
 8004f2c:	e002      	b.n	8004f34 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7fc fc10 	bl	8001754 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	e002      	b.n	8004f44 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	e000      	b.n	8004f44 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004f42:	2302      	movs	r3, #2
  }
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f50:	b09f      	sub	sp, #124	; 0x7c
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f62:	68d9      	ldr	r1, [r3, #12]
 8004f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	ea40 0301 	orr.w	r3, r0, r1
 8004f6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f70:	689a      	ldr	r2, [r3, #8]
 8004f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	431a      	orrs	r2, r3
 8004f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	431a      	orrs	r2, r3
 8004f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f90:	f021 010c 	bic.w	r1, r1, #12
 8004f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f9a:	430b      	orrs	r3, r1
 8004f9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004faa:	6999      	ldr	r1, [r3, #24]
 8004fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	ea40 0301 	orr.w	r3, r0, r1
 8004fb4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	4bc5      	ldr	r3, [pc, #788]	; (80052d0 <UART_SetConfig+0x384>)
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d004      	beq.n	8004fca <UART_SetConfig+0x7e>
 8004fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	4bc3      	ldr	r3, [pc, #780]	; (80052d4 <UART_SetConfig+0x388>)
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d103      	bne.n	8004fd2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fca:	f7ff f8ad 	bl	8004128 <HAL_RCC_GetPCLK2Freq>
 8004fce:	6778      	str	r0, [r7, #116]	; 0x74
 8004fd0:	e002      	b.n	8004fd8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fd2:	f7ff f895 	bl	8004100 <HAL_RCC_GetPCLK1Freq>
 8004fd6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fe0:	f040 80b6 	bne.w	8005150 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fe4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fe6:	461c      	mov	r4, r3
 8004fe8:	f04f 0500 	mov.w	r5, #0
 8004fec:	4622      	mov	r2, r4
 8004fee:	462b      	mov	r3, r5
 8004ff0:	1891      	adds	r1, r2, r2
 8004ff2:	6439      	str	r1, [r7, #64]	; 0x40
 8004ff4:	415b      	adcs	r3, r3
 8004ff6:	647b      	str	r3, [r7, #68]	; 0x44
 8004ff8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ffc:	1912      	adds	r2, r2, r4
 8004ffe:	eb45 0303 	adc.w	r3, r5, r3
 8005002:	f04f 0000 	mov.w	r0, #0
 8005006:	f04f 0100 	mov.w	r1, #0
 800500a:	00d9      	lsls	r1, r3, #3
 800500c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005010:	00d0      	lsls	r0, r2, #3
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	1911      	adds	r1, r2, r4
 8005018:	6639      	str	r1, [r7, #96]	; 0x60
 800501a:	416b      	adcs	r3, r5
 800501c:	667b      	str	r3, [r7, #100]	; 0x64
 800501e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	461a      	mov	r2, r3
 8005024:	f04f 0300 	mov.w	r3, #0
 8005028:	1891      	adds	r1, r2, r2
 800502a:	63b9      	str	r1, [r7, #56]	; 0x38
 800502c:	415b      	adcs	r3, r3
 800502e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005030:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005034:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005038:	f7fb fe2e 	bl	8000c98 <__aeabi_uldivmod>
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	4ba5      	ldr	r3, [pc, #660]	; (80052d8 <UART_SetConfig+0x38c>)
 8005042:	fba3 2302 	umull	r2, r3, r3, r2
 8005046:	095b      	lsrs	r3, r3, #5
 8005048:	011e      	lsls	r6, r3, #4
 800504a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800504c:	461c      	mov	r4, r3
 800504e:	f04f 0500 	mov.w	r5, #0
 8005052:	4622      	mov	r2, r4
 8005054:	462b      	mov	r3, r5
 8005056:	1891      	adds	r1, r2, r2
 8005058:	6339      	str	r1, [r7, #48]	; 0x30
 800505a:	415b      	adcs	r3, r3
 800505c:	637b      	str	r3, [r7, #52]	; 0x34
 800505e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005062:	1912      	adds	r2, r2, r4
 8005064:	eb45 0303 	adc.w	r3, r5, r3
 8005068:	f04f 0000 	mov.w	r0, #0
 800506c:	f04f 0100 	mov.w	r1, #0
 8005070:	00d9      	lsls	r1, r3, #3
 8005072:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005076:	00d0      	lsls	r0, r2, #3
 8005078:	4602      	mov	r2, r0
 800507a:	460b      	mov	r3, r1
 800507c:	1911      	adds	r1, r2, r4
 800507e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005080:	416b      	adcs	r3, r5
 8005082:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	461a      	mov	r2, r3
 800508a:	f04f 0300 	mov.w	r3, #0
 800508e:	1891      	adds	r1, r2, r2
 8005090:	62b9      	str	r1, [r7, #40]	; 0x28
 8005092:	415b      	adcs	r3, r3
 8005094:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005096:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800509a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800509e:	f7fb fdfb 	bl	8000c98 <__aeabi_uldivmod>
 80050a2:	4602      	mov	r2, r0
 80050a4:	460b      	mov	r3, r1
 80050a6:	4b8c      	ldr	r3, [pc, #560]	; (80052d8 <UART_SetConfig+0x38c>)
 80050a8:	fba3 1302 	umull	r1, r3, r3, r2
 80050ac:	095b      	lsrs	r3, r3, #5
 80050ae:	2164      	movs	r1, #100	; 0x64
 80050b0:	fb01 f303 	mul.w	r3, r1, r3
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	3332      	adds	r3, #50	; 0x32
 80050ba:	4a87      	ldr	r2, [pc, #540]	; (80052d8 <UART_SetConfig+0x38c>)
 80050bc:	fba2 2303 	umull	r2, r3, r2, r3
 80050c0:	095b      	lsrs	r3, r3, #5
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050c8:	441e      	add	r6, r3
 80050ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050cc:	4618      	mov	r0, r3
 80050ce:	f04f 0100 	mov.w	r1, #0
 80050d2:	4602      	mov	r2, r0
 80050d4:	460b      	mov	r3, r1
 80050d6:	1894      	adds	r4, r2, r2
 80050d8:	623c      	str	r4, [r7, #32]
 80050da:	415b      	adcs	r3, r3
 80050dc:	627b      	str	r3, [r7, #36]	; 0x24
 80050de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050e2:	1812      	adds	r2, r2, r0
 80050e4:	eb41 0303 	adc.w	r3, r1, r3
 80050e8:	f04f 0400 	mov.w	r4, #0
 80050ec:	f04f 0500 	mov.w	r5, #0
 80050f0:	00dd      	lsls	r5, r3, #3
 80050f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80050f6:	00d4      	lsls	r4, r2, #3
 80050f8:	4622      	mov	r2, r4
 80050fa:	462b      	mov	r3, r5
 80050fc:	1814      	adds	r4, r2, r0
 80050fe:	653c      	str	r4, [r7, #80]	; 0x50
 8005100:	414b      	adcs	r3, r1
 8005102:	657b      	str	r3, [r7, #84]	; 0x54
 8005104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	461a      	mov	r2, r3
 800510a:	f04f 0300 	mov.w	r3, #0
 800510e:	1891      	adds	r1, r2, r2
 8005110:	61b9      	str	r1, [r7, #24]
 8005112:	415b      	adcs	r3, r3
 8005114:	61fb      	str	r3, [r7, #28]
 8005116:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800511a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800511e:	f7fb fdbb 	bl	8000c98 <__aeabi_uldivmod>
 8005122:	4602      	mov	r2, r0
 8005124:	460b      	mov	r3, r1
 8005126:	4b6c      	ldr	r3, [pc, #432]	; (80052d8 <UART_SetConfig+0x38c>)
 8005128:	fba3 1302 	umull	r1, r3, r3, r2
 800512c:	095b      	lsrs	r3, r3, #5
 800512e:	2164      	movs	r1, #100	; 0x64
 8005130:	fb01 f303 	mul.w	r3, r1, r3
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	3332      	adds	r3, #50	; 0x32
 800513a:	4a67      	ldr	r2, [pc, #412]	; (80052d8 <UART_SetConfig+0x38c>)
 800513c:	fba2 2303 	umull	r2, r3, r2, r3
 8005140:	095b      	lsrs	r3, r3, #5
 8005142:	f003 0207 	and.w	r2, r3, #7
 8005146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4432      	add	r2, r6
 800514c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800514e:	e0b9      	b.n	80052c4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005150:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005152:	461c      	mov	r4, r3
 8005154:	f04f 0500 	mov.w	r5, #0
 8005158:	4622      	mov	r2, r4
 800515a:	462b      	mov	r3, r5
 800515c:	1891      	adds	r1, r2, r2
 800515e:	6139      	str	r1, [r7, #16]
 8005160:	415b      	adcs	r3, r3
 8005162:	617b      	str	r3, [r7, #20]
 8005164:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005168:	1912      	adds	r2, r2, r4
 800516a:	eb45 0303 	adc.w	r3, r5, r3
 800516e:	f04f 0000 	mov.w	r0, #0
 8005172:	f04f 0100 	mov.w	r1, #0
 8005176:	00d9      	lsls	r1, r3, #3
 8005178:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800517c:	00d0      	lsls	r0, r2, #3
 800517e:	4602      	mov	r2, r0
 8005180:	460b      	mov	r3, r1
 8005182:	eb12 0804 	adds.w	r8, r2, r4
 8005186:	eb43 0905 	adc.w	r9, r3, r5
 800518a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	4618      	mov	r0, r3
 8005190:	f04f 0100 	mov.w	r1, #0
 8005194:	f04f 0200 	mov.w	r2, #0
 8005198:	f04f 0300 	mov.w	r3, #0
 800519c:	008b      	lsls	r3, r1, #2
 800519e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80051a2:	0082      	lsls	r2, r0, #2
 80051a4:	4640      	mov	r0, r8
 80051a6:	4649      	mov	r1, r9
 80051a8:	f7fb fd76 	bl	8000c98 <__aeabi_uldivmod>
 80051ac:	4602      	mov	r2, r0
 80051ae:	460b      	mov	r3, r1
 80051b0:	4b49      	ldr	r3, [pc, #292]	; (80052d8 <UART_SetConfig+0x38c>)
 80051b2:	fba3 2302 	umull	r2, r3, r3, r2
 80051b6:	095b      	lsrs	r3, r3, #5
 80051b8:	011e      	lsls	r6, r3, #4
 80051ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051bc:	4618      	mov	r0, r3
 80051be:	f04f 0100 	mov.w	r1, #0
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	1894      	adds	r4, r2, r2
 80051c8:	60bc      	str	r4, [r7, #8]
 80051ca:	415b      	adcs	r3, r3
 80051cc:	60fb      	str	r3, [r7, #12]
 80051ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051d2:	1812      	adds	r2, r2, r0
 80051d4:	eb41 0303 	adc.w	r3, r1, r3
 80051d8:	f04f 0400 	mov.w	r4, #0
 80051dc:	f04f 0500 	mov.w	r5, #0
 80051e0:	00dd      	lsls	r5, r3, #3
 80051e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80051e6:	00d4      	lsls	r4, r2, #3
 80051e8:	4622      	mov	r2, r4
 80051ea:	462b      	mov	r3, r5
 80051ec:	1814      	adds	r4, r2, r0
 80051ee:	64bc      	str	r4, [r7, #72]	; 0x48
 80051f0:	414b      	adcs	r3, r1
 80051f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f04f 0100 	mov.w	r1, #0
 80051fe:	f04f 0200 	mov.w	r2, #0
 8005202:	f04f 0300 	mov.w	r3, #0
 8005206:	008b      	lsls	r3, r1, #2
 8005208:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800520c:	0082      	lsls	r2, r0, #2
 800520e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005212:	f7fb fd41 	bl	8000c98 <__aeabi_uldivmod>
 8005216:	4602      	mov	r2, r0
 8005218:	460b      	mov	r3, r1
 800521a:	4b2f      	ldr	r3, [pc, #188]	; (80052d8 <UART_SetConfig+0x38c>)
 800521c:	fba3 1302 	umull	r1, r3, r3, r2
 8005220:	095b      	lsrs	r3, r3, #5
 8005222:	2164      	movs	r1, #100	; 0x64
 8005224:	fb01 f303 	mul.w	r3, r1, r3
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	011b      	lsls	r3, r3, #4
 800522c:	3332      	adds	r3, #50	; 0x32
 800522e:	4a2a      	ldr	r2, [pc, #168]	; (80052d8 <UART_SetConfig+0x38c>)
 8005230:	fba2 2303 	umull	r2, r3, r2, r3
 8005234:	095b      	lsrs	r3, r3, #5
 8005236:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800523a:	441e      	add	r6, r3
 800523c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800523e:	4618      	mov	r0, r3
 8005240:	f04f 0100 	mov.w	r1, #0
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	1894      	adds	r4, r2, r2
 800524a:	603c      	str	r4, [r7, #0]
 800524c:	415b      	adcs	r3, r3
 800524e:	607b      	str	r3, [r7, #4]
 8005250:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005254:	1812      	adds	r2, r2, r0
 8005256:	eb41 0303 	adc.w	r3, r1, r3
 800525a:	f04f 0400 	mov.w	r4, #0
 800525e:	f04f 0500 	mov.w	r5, #0
 8005262:	00dd      	lsls	r5, r3, #3
 8005264:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005268:	00d4      	lsls	r4, r2, #3
 800526a:	4622      	mov	r2, r4
 800526c:	462b      	mov	r3, r5
 800526e:	eb12 0a00 	adds.w	sl, r2, r0
 8005272:	eb43 0b01 	adc.w	fp, r3, r1
 8005276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	4618      	mov	r0, r3
 800527c:	f04f 0100 	mov.w	r1, #0
 8005280:	f04f 0200 	mov.w	r2, #0
 8005284:	f04f 0300 	mov.w	r3, #0
 8005288:	008b      	lsls	r3, r1, #2
 800528a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800528e:	0082      	lsls	r2, r0, #2
 8005290:	4650      	mov	r0, sl
 8005292:	4659      	mov	r1, fp
 8005294:	f7fb fd00 	bl	8000c98 <__aeabi_uldivmod>
 8005298:	4602      	mov	r2, r0
 800529a:	460b      	mov	r3, r1
 800529c:	4b0e      	ldr	r3, [pc, #56]	; (80052d8 <UART_SetConfig+0x38c>)
 800529e:	fba3 1302 	umull	r1, r3, r3, r2
 80052a2:	095b      	lsrs	r3, r3, #5
 80052a4:	2164      	movs	r1, #100	; 0x64
 80052a6:	fb01 f303 	mul.w	r3, r1, r3
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	3332      	adds	r3, #50	; 0x32
 80052b0:	4a09      	ldr	r2, [pc, #36]	; (80052d8 <UART_SetConfig+0x38c>)
 80052b2:	fba2 2303 	umull	r2, r3, r2, r3
 80052b6:	095b      	lsrs	r3, r3, #5
 80052b8:	f003 020f 	and.w	r2, r3, #15
 80052bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4432      	add	r2, r6
 80052c2:	609a      	str	r2, [r3, #8]
}
 80052c4:	bf00      	nop
 80052c6:	377c      	adds	r7, #124	; 0x7c
 80052c8:	46bd      	mov	sp, r7
 80052ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ce:	bf00      	nop
 80052d0:	40011000 	.word	0x40011000
 80052d4:	40011400 	.word	0x40011400
 80052d8:	51eb851f 	.word	0x51eb851f

080052dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052dc:	b084      	sub	sp, #16
 80052de:	b580      	push	{r7, lr}
 80052e0:	b084      	sub	sp, #16
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	f107 001c 	add.w	r0, r7, #28
 80052ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d122      	bne.n	800533a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005308:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800531c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800531e:	2b01      	cmp	r3, #1
 8005320:	d105      	bne.n	800532e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 fa56 	bl	80057e0 <USB_CoreReset>
 8005334:	4603      	mov	r3, r0
 8005336:	73fb      	strb	r3, [r7, #15]
 8005338:	e01a      	b.n	8005370 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fa4a 	bl	80057e0 <USB_CoreReset>
 800534c:	4603      	mov	r3, r0
 800534e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005352:	2b00      	cmp	r3, #0
 8005354:	d106      	bne.n	8005364 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	639a      	str	r2, [r3, #56]	; 0x38
 8005362:	e005      	b.n	8005370 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005368:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005372:	2b01      	cmp	r3, #1
 8005374:	d10b      	bne.n	800538e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f043 0206 	orr.w	r2, r3, #6
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f043 0220 	orr.w	r2, r3, #32
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800538e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005390:	4618      	mov	r0, r3
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800539a:	b004      	add	sp, #16
 800539c:	4770      	bx	lr

0800539e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800539e:	b480      	push	{r7}
 80053a0:	b083      	sub	sp, #12
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f023 0201 	bic.w	r2, r3, #1
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	460b      	mov	r3, r1
 80053ca:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80053d8:	78fb      	ldrb	r3, [r7, #3]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d106      	bne.n	80053ec <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	60da      	str	r2, [r3, #12]
 80053ea:	e00b      	b.n	8005404 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80053ec:	78fb      	ldrb	r3, [r7, #3]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d106      	bne.n	8005400 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	60da      	str	r2, [r3, #12]
 80053fe:	e001      	b.n	8005404 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e003      	b.n	800540c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005404:	2032      	movs	r0, #50	; 0x32
 8005406:	f7fd f875 	bl	80024f4 <HAL_Delay>

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005414:	b084      	sub	sp, #16
 8005416:	b580      	push	{r7, lr}
 8005418:	b086      	sub	sp, #24
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
 800541e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005422:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005426:	2300      	movs	r3, #0
 8005428:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800542e:	2300      	movs	r3, #0
 8005430:	613b      	str	r3, [r7, #16]
 8005432:	e009      	b.n	8005448 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	3340      	adds	r3, #64	; 0x40
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4413      	add	r3, r2
 800543e:	2200      	movs	r2, #0
 8005440:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	3301      	adds	r3, #1
 8005446:	613b      	str	r3, [r7, #16]
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	2b0e      	cmp	r3, #14
 800544c:	d9f2      	bls.n	8005434 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800544e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005450:	2b00      	cmp	r3, #0
 8005452:	d11c      	bne.n	800548e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005462:	f043 0302 	orr.w	r3, r3, #2
 8005466:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005478:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005484:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	639a      	str	r2, [r3, #56]	; 0x38
 800548c:	e00b      	b.n	80054a6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005492:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054ac:	461a      	mov	r2, r3
 80054ae:	2300      	movs	r3, #0
 80054b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b8:	4619      	mov	r1, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c0:	461a      	mov	r2, r3
 80054c2:	680b      	ldr	r3, [r1, #0]
 80054c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d10c      	bne.n	80054e6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80054cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d104      	bne.n	80054dc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80054d2:	2100      	movs	r1, #0
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 f949 	bl	800576c <USB_SetDevSpeed>
 80054da:	e008      	b.n	80054ee <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80054dc:	2101      	movs	r1, #1
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f944 	bl	800576c <USB_SetDevSpeed>
 80054e4:	e003      	b.n	80054ee <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80054e6:	2103      	movs	r1, #3
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f93f 	bl	800576c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80054ee:	2110      	movs	r1, #16
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 f8f3 	bl	80056dc <USB_FlushTxFifo>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 f911 	bl	8005728 <USB_FlushRxFifo>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005516:	461a      	mov	r2, r3
 8005518:	2300      	movs	r3, #0
 800551a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005522:	461a      	mov	r2, r3
 8005524:	2300      	movs	r3, #0
 8005526:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800552e:	461a      	mov	r2, r3
 8005530:	2300      	movs	r3, #0
 8005532:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005534:	2300      	movs	r3, #0
 8005536:	613b      	str	r3, [r7, #16]
 8005538:	e043      	b.n	80055c2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	4413      	add	r3, r2
 8005542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800554c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005550:	d118      	bne.n	8005584 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10a      	bne.n	800556e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4413      	add	r3, r2
 8005560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005564:	461a      	mov	r2, r3
 8005566:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800556a:	6013      	str	r3, [r2, #0]
 800556c:	e013      	b.n	8005596 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4413      	add	r3, r2
 8005576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557a:	461a      	mov	r2, r3
 800557c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005580:	6013      	str	r3, [r2, #0]
 8005582:	e008      	b.n	8005596 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005590:	461a      	mov	r2, r3
 8005592:	2300      	movs	r3, #0
 8005594:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	015a      	lsls	r2, r3, #5
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	4413      	add	r3, r2
 800559e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a2:	461a      	mov	r2, r3
 80055a4:	2300      	movs	r3, #0
 80055a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b4:	461a      	mov	r2, r3
 80055b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	3301      	adds	r3, #1
 80055c0:	613b      	str	r3, [r7, #16]
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d3b7      	bcc.n	800553a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055ca:	2300      	movs	r3, #0
 80055cc:	613b      	str	r3, [r7, #16]
 80055ce:	e043      	b.n	8005658 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055e6:	d118      	bne.n	800561a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10a      	bne.n	8005604 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	015a      	lsls	r2, r3, #5
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055fa:	461a      	mov	r2, r3
 80055fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005600:	6013      	str	r3, [r2, #0]
 8005602:	e013      	b.n	800562c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	015a      	lsls	r2, r3, #5
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	4413      	add	r3, r2
 800560c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005610:	461a      	mov	r2, r3
 8005612:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005616:	6013      	str	r3, [r2, #0]
 8005618:	e008      	b.n	800562c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	015a      	lsls	r2, r3, #5
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	4413      	add	r3, r2
 8005622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005626:	461a      	mov	r2, r3
 8005628:	2300      	movs	r3, #0
 800562a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	4413      	add	r3, r2
 8005634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005638:	461a      	mov	r2, r3
 800563a:	2300      	movs	r3, #0
 800563c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	4413      	add	r3, r2
 8005646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564a:	461a      	mov	r2, r3
 800564c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005650:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	3301      	adds	r3, #1
 8005656:	613b      	str	r3, [r7, #16]
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	429a      	cmp	r2, r3
 800565e:	d3b7      	bcc.n	80055d0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800566e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005672:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005680:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005684:	2b00      	cmp	r3, #0
 8005686:	d105      	bne.n	8005694 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	f043 0210 	orr.w	r2, r3, #16
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	699a      	ldr	r2, [r3, #24]
 8005698:	4b0f      	ldr	r3, [pc, #60]	; (80056d8 <USB_DevInit+0x2c4>)
 800569a:	4313      	orrs	r3, r2
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80056a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d005      	beq.n	80056b2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	f043 0208 	orr.w	r2, r3, #8
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80056b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d107      	bne.n	80056c8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056c0:	f043 0304 	orr.w	r3, r3, #4
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80056c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3718      	adds	r7, #24
 80056ce:	46bd      	mov	sp, r7
 80056d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056d4:	b004      	add	sp, #16
 80056d6:	4770      	bx	lr
 80056d8:	803c3800 	.word	0x803c3800

080056dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80056e6:	2300      	movs	r3, #0
 80056e8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	019b      	lsls	r3, r3, #6
 80056ee:	f043 0220 	orr.w	r2, r3, #32
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	3301      	adds	r3, #1
 80056fa:	60fb      	str	r3, [r7, #12]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4a09      	ldr	r2, [pc, #36]	; (8005724 <USB_FlushTxFifo+0x48>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d901      	bls.n	8005708 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e006      	b.n	8005716 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	f003 0320 	and.w	r3, r3, #32
 8005710:	2b20      	cmp	r3, #32
 8005712:	d0f0      	beq.n	80056f6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	00030d40 	.word	0x00030d40

08005728 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005730:	2300      	movs	r3, #0
 8005732:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2210      	movs	r2, #16
 8005738:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	3301      	adds	r3, #1
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4a09      	ldr	r2, [pc, #36]	; (8005768 <USB_FlushRxFifo+0x40>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d901      	bls.n	800574c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e006      	b.n	800575a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	f003 0310 	and.w	r3, r3, #16
 8005754:	2b10      	cmp	r3, #16
 8005756:	d0f0      	beq.n	800573a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	00030d40 	.word	0x00030d40

0800576c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	460b      	mov	r3, r1
 8005776:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	78fb      	ldrb	r3, [r7, #3]
 8005786:	68f9      	ldr	r1, [r7, #12]
 8005788:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800578c:	4313      	orrs	r3, r2
 800578e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3714      	adds	r7, #20
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800579e:	b480      	push	{r7}
 80057a0:	b085      	sub	sp, #20
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80057b8:	f023 0303 	bic.w	r3, r3, #3
 80057bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057cc:	f043 0302 	orr.w	r3, r3, #2
 80057d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80057e8:	2300      	movs	r3, #0
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	3301      	adds	r3, #1
 80057f0:	60fb      	str	r3, [r7, #12]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4a13      	ldr	r2, [pc, #76]	; (8005844 <USB_CoreReset+0x64>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d901      	bls.n	80057fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e01b      	b.n	8005836 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	2b00      	cmp	r3, #0
 8005804:	daf2      	bge.n	80057ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005806:	2300      	movs	r3, #0
 8005808:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	f043 0201 	orr.w	r2, r3, #1
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	3301      	adds	r3, #1
 800581a:	60fb      	str	r3, [r7, #12]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4a09      	ldr	r2, [pc, #36]	; (8005844 <USB_CoreReset+0x64>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d901      	bls.n	8005828 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e006      	b.n	8005836 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	2b01      	cmp	r3, #1
 8005832:	d0f0      	beq.n	8005816 <USB_CoreReset+0x36>

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	00030d40 	.word	0x00030d40

08005848 <__NVIC_SetPriority>:
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	4603      	mov	r3, r0
 8005850:	6039      	str	r1, [r7, #0]
 8005852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005858:	2b00      	cmp	r3, #0
 800585a:	db0a      	blt.n	8005872 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	b2da      	uxtb	r2, r3
 8005860:	490c      	ldr	r1, [pc, #48]	; (8005894 <__NVIC_SetPriority+0x4c>)
 8005862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005866:	0112      	lsls	r2, r2, #4
 8005868:	b2d2      	uxtb	r2, r2
 800586a:	440b      	add	r3, r1
 800586c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005870:	e00a      	b.n	8005888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	b2da      	uxtb	r2, r3
 8005876:	4908      	ldr	r1, [pc, #32]	; (8005898 <__NVIC_SetPriority+0x50>)
 8005878:	79fb      	ldrb	r3, [r7, #7]
 800587a:	f003 030f 	and.w	r3, r3, #15
 800587e:	3b04      	subs	r3, #4
 8005880:	0112      	lsls	r2, r2, #4
 8005882:	b2d2      	uxtb	r2, r2
 8005884:	440b      	add	r3, r1
 8005886:	761a      	strb	r2, [r3, #24]
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr
 8005894:	e000e100 	.word	0xe000e100
 8005898:	e000ed00 	.word	0xe000ed00

0800589c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80058a0:	4b05      	ldr	r3, [pc, #20]	; (80058b8 <SysTick_Handler+0x1c>)
 80058a2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80058a4:	f001 fcfe 	bl	80072a4 <xTaskGetSchedulerState>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d001      	beq.n	80058b2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80058ae:	f002 fae3 	bl	8007e78 <xPortSysTickHandler>
  }
}
 80058b2:	bf00      	nop
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	e000e010 	.word	0xe000e010

080058bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80058bc:	b580      	push	{r7, lr}
 80058be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80058c0:	2100      	movs	r1, #0
 80058c2:	f06f 0004 	mvn.w	r0, #4
 80058c6:	f7ff ffbf 	bl	8005848 <__NVIC_SetPriority>
#endif
}
 80058ca:	bf00      	nop
 80058cc:	bd80      	pop	{r7, pc}
	...

080058d0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058d6:	f3ef 8305 	mrs	r3, IPSR
 80058da:	603b      	str	r3, [r7, #0]
  return(result);
 80058dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80058e2:	f06f 0305 	mvn.w	r3, #5
 80058e6:	607b      	str	r3, [r7, #4]
 80058e8:	e00c      	b.n	8005904 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80058ea:	4b0a      	ldr	r3, [pc, #40]	; (8005914 <osKernelInitialize+0x44>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d105      	bne.n	80058fe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80058f2:	4b08      	ldr	r3, [pc, #32]	; (8005914 <osKernelInitialize+0x44>)
 80058f4:	2201      	movs	r2, #1
 80058f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80058f8:	2300      	movs	r3, #0
 80058fa:	607b      	str	r3, [r7, #4]
 80058fc:	e002      	b.n	8005904 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80058fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005902:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005904:	687b      	ldr	r3, [r7, #4]
}
 8005906:	4618      	mov	r0, r3
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	20000618 	.word	0x20000618

08005918 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800591e:	f3ef 8305 	mrs	r3, IPSR
 8005922:	603b      	str	r3, [r7, #0]
  return(result);
 8005924:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005926:	2b00      	cmp	r3, #0
 8005928:	d003      	beq.n	8005932 <osKernelStart+0x1a>
    stat = osErrorISR;
 800592a:	f06f 0305 	mvn.w	r3, #5
 800592e:	607b      	str	r3, [r7, #4]
 8005930:	e010      	b.n	8005954 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005932:	4b0b      	ldr	r3, [pc, #44]	; (8005960 <osKernelStart+0x48>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d109      	bne.n	800594e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800593a:	f7ff ffbf 	bl	80058bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800593e:	4b08      	ldr	r3, [pc, #32]	; (8005960 <osKernelStart+0x48>)
 8005940:	2202      	movs	r2, #2
 8005942:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005944:	f001 f866 	bl	8006a14 <vTaskStartScheduler>
      stat = osOK;
 8005948:	2300      	movs	r3, #0
 800594a:	607b      	str	r3, [r7, #4]
 800594c:	e002      	b.n	8005954 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800594e:	f04f 33ff 	mov.w	r3, #4294967295
 8005952:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005954:	687b      	ldr	r3, [r7, #4]
}
 8005956:	4618      	mov	r0, r3
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	20000618 	.word	0x20000618

08005964 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005964:	b580      	push	{r7, lr}
 8005966:	b08e      	sub	sp, #56	; 0x38
 8005968:	af04      	add	r7, sp, #16
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005970:	2300      	movs	r3, #0
 8005972:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005974:	f3ef 8305 	mrs	r3, IPSR
 8005978:	617b      	str	r3, [r7, #20]
  return(result);
 800597a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800597c:	2b00      	cmp	r3, #0
 800597e:	d17e      	bne.n	8005a7e <osThreadNew+0x11a>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d07b      	beq.n	8005a7e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005986:	2340      	movs	r3, #64	; 0x40
 8005988:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800598a:	2318      	movs	r3, #24
 800598c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800598e:	2300      	movs	r3, #0
 8005990:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005992:	f04f 33ff 	mov.w	r3, #4294967295
 8005996:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d045      	beq.n	8005a2a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d002      	beq.n	80059ac <osThreadNew+0x48>
        name = attr->name;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d002      	beq.n	80059ba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d008      	beq.n	80059d2 <osThreadNew+0x6e>
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	2b38      	cmp	r3, #56	; 0x38
 80059c4:	d805      	bhi.n	80059d2 <osThreadNew+0x6e>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <osThreadNew+0x72>
        return (NULL);
 80059d2:	2300      	movs	r3, #0
 80059d4:	e054      	b.n	8005a80 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	089b      	lsrs	r3, r3, #2
 80059e4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00e      	beq.n	8005a0c <osThreadNew+0xa8>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	2b5b      	cmp	r3, #91	; 0x5b
 80059f4:	d90a      	bls.n	8005a0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d006      	beq.n	8005a0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d002      	beq.n	8005a0c <osThreadNew+0xa8>
        mem = 1;
 8005a06:	2301      	movs	r3, #1
 8005a08:	61bb      	str	r3, [r7, #24]
 8005a0a:	e010      	b.n	8005a2e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d10c      	bne.n	8005a2e <osThreadNew+0xca>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d108      	bne.n	8005a2e <osThreadNew+0xca>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d104      	bne.n	8005a2e <osThreadNew+0xca>
          mem = 0;
 8005a24:	2300      	movs	r3, #0
 8005a26:	61bb      	str	r3, [r7, #24]
 8005a28:	e001      	b.n	8005a2e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d110      	bne.n	8005a56 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a3c:	9202      	str	r2, [sp, #8]
 8005a3e:	9301      	str	r3, [sp, #4]
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	6a3a      	ldr	r2, [r7, #32]
 8005a48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f000 fe0c 	bl	8006668 <xTaskCreateStatic>
 8005a50:	4603      	mov	r3, r0
 8005a52:	613b      	str	r3, [r7, #16]
 8005a54:	e013      	b.n	8005a7e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d110      	bne.n	8005a7e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	f107 0310 	add.w	r3, r7, #16
 8005a64:	9301      	str	r3, [sp, #4]
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f000 fe57 	bl	8006722 <xTaskCreate>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d001      	beq.n	8005a7e <osThreadNew+0x11a>
            hTask = NULL;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005a7e:	693b      	ldr	r3, [r7, #16]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3728      	adds	r7, #40	; 0x28
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a90:	f3ef 8305 	mrs	r3, IPSR
 8005a94:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a96:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d003      	beq.n	8005aa4 <osDelay+0x1c>
    stat = osErrorISR;
 8005a9c:	f06f 0305 	mvn.w	r3, #5
 8005aa0:	60fb      	str	r3, [r7, #12]
 8005aa2:	e007      	b.n	8005ab4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d002      	beq.n	8005ab4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 ff7c 	bl	80069ac <vTaskDelay>
    }
  }

  return (stat);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3710      	adds	r7, #16
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
	...

08005ac0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	4a07      	ldr	r2, [pc, #28]	; (8005aec <vApplicationGetIdleTaskMemory+0x2c>)
 8005ad0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	4a06      	ldr	r2, [pc, #24]	; (8005af0 <vApplicationGetIdleTaskMemory+0x30>)
 8005ad6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2240      	movs	r2, #64	; 0x40
 8005adc:	601a      	str	r2, [r3, #0]
}
 8005ade:	bf00      	nop
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	2000061c 	.word	0x2000061c
 8005af0:	20000678 	.word	0x20000678

08005af4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	4a07      	ldr	r2, [pc, #28]	; (8005b20 <vApplicationGetTimerTaskMemory+0x2c>)
 8005b04:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	4a06      	ldr	r2, [pc, #24]	; (8005b24 <vApplicationGetTimerTaskMemory+0x30>)
 8005b0a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2280      	movs	r2, #128	; 0x80
 8005b10:	601a      	str	r2, [r3, #0]
}
 8005b12:	bf00      	nop
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	20000778 	.word	0x20000778
 8005b24:	200007d4 	.word	0x200007d4

08005b28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f103 0208 	add.w	r2, r3, #8
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f103 0208 	add.w	r2, r3, #8
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f103 0208 	add.w	r2, r3, #8
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b76:	bf00      	nop
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b82:	b480      	push	{r7}
 8005b84:	b085      	sub	sp, #20
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
 8005b8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	689a      	ldr	r2, [r3, #8]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	683a      	ldr	r2, [r7, #0]
 8005ba6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	1c5a      	adds	r2, r3, #1
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	601a      	str	r2, [r3, #0]
}
 8005bbe:	bf00      	nop
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b085      	sub	sp, #20
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
 8005bd2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be0:	d103      	bne.n	8005bea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	60fb      	str	r3, [r7, #12]
 8005be8:	e00c      	b.n	8005c04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	3308      	adds	r3, #8
 8005bee:	60fb      	str	r3, [r7, #12]
 8005bf0:	e002      	b.n	8005bf8 <vListInsert+0x2e>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	60fb      	str	r3, [r7, #12]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d2f6      	bcs.n	8005bf2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	1c5a      	adds	r2, r3, #1
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	601a      	str	r2, [r3, #0]
}
 8005c30:	bf00      	nop
 8005c32:	3714      	adds	r7, #20
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	6892      	ldr	r2, [r2, #8]
 8005c52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	6852      	ldr	r2, [r2, #4]
 8005c5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d103      	bne.n	8005c70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689a      	ldr	r2, [r3, #8]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	1e5a      	subs	r2, r3, #1
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10a      	bne.n	8005cba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca8:	f383 8811 	msr	BASEPRI, r3
 8005cac:	f3bf 8f6f 	isb	sy
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005cb6:	bf00      	nop
 8005cb8:	e7fe      	b.n	8005cb8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005cba:	f002 f84b 	bl	8007d54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc6:	68f9      	ldr	r1, [r7, #12]
 8005cc8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005cca:	fb01 f303 	mul.w	r3, r1, r3
 8005cce:	441a      	add	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cea:	3b01      	subs	r3, #1
 8005cec:	68f9      	ldr	r1, [r7, #12]
 8005cee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005cf0:	fb01 f303 	mul.w	r3, r1, r3
 8005cf4:	441a      	add	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	22ff      	movs	r2, #255	; 0xff
 8005cfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	22ff      	movs	r2, #255	; 0xff
 8005d06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d114      	bne.n	8005d3a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d01a      	beq.n	8005d4e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	3310      	adds	r3, #16
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f001 f903 	bl	8006f28 <xTaskRemoveFromEventList>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d012      	beq.n	8005d4e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005d28:	4b0c      	ldr	r3, [pc, #48]	; (8005d5c <xQueueGenericReset+0xcc>)
 8005d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d2e:	601a      	str	r2, [r3, #0]
 8005d30:	f3bf 8f4f 	dsb	sy
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	e009      	b.n	8005d4e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	3310      	adds	r3, #16
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7ff fef2 	bl	8005b28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	3324      	adds	r3, #36	; 0x24
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7ff feed 	bl	8005b28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005d4e:	f002 f831 	bl	8007db4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005d52:	2301      	movs	r3, #1
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	e000ed04 	.word	0xe000ed04

08005d60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b08e      	sub	sp, #56	; 0x38
 8005d64:	af02      	add	r7, sp, #8
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
 8005d6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10a      	bne.n	8005d8a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d78:	f383 8811 	msr	BASEPRI, r3
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d86:	bf00      	nop
 8005d88:	e7fe      	b.n	8005d88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10a      	bne.n	8005da6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d94:	f383 8811 	msr	BASEPRI, r3
 8005d98:	f3bf 8f6f 	isb	sy
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005da2:	bf00      	nop
 8005da4:	e7fe      	b.n	8005da4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d002      	beq.n	8005db2 <xQueueGenericCreateStatic+0x52>
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d001      	beq.n	8005db6 <xQueueGenericCreateStatic+0x56>
 8005db2:	2301      	movs	r3, #1
 8005db4:	e000      	b.n	8005db8 <xQueueGenericCreateStatic+0x58>
 8005db6:	2300      	movs	r3, #0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10a      	bne.n	8005dd2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	623b      	str	r3, [r7, #32]
}
 8005dce:	bf00      	nop
 8005dd0:	e7fe      	b.n	8005dd0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d102      	bne.n	8005dde <xQueueGenericCreateStatic+0x7e>
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <xQueueGenericCreateStatic+0x82>
 8005dde:	2301      	movs	r3, #1
 8005de0:	e000      	b.n	8005de4 <xQueueGenericCreateStatic+0x84>
 8005de2:	2300      	movs	r3, #0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10a      	bne.n	8005dfe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dec:	f383 8811 	msr	BASEPRI, r3
 8005df0:	f3bf 8f6f 	isb	sy
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	61fb      	str	r3, [r7, #28]
}
 8005dfa:	bf00      	nop
 8005dfc:	e7fe      	b.n	8005dfc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005dfe:	2350      	movs	r3, #80	; 0x50
 8005e00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	2b50      	cmp	r3, #80	; 0x50
 8005e06:	d00a      	beq.n	8005e1e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0c:	f383 8811 	msr	BASEPRI, r3
 8005e10:	f3bf 8f6f 	isb	sy
 8005e14:	f3bf 8f4f 	dsb	sy
 8005e18:	61bb      	str	r3, [r7, #24]
}
 8005e1a:	bf00      	nop
 8005e1c:	e7fe      	b.n	8005e1c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005e1e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00d      	beq.n	8005e46 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e32:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	68b9      	ldr	r1, [r7, #8]
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f000 f805 	bl	8005e50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3730      	adds	r7, #48	; 0x30
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
 8005e5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d103      	bne.n	8005e6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	69ba      	ldr	r2, [r7, #24]
 8005e68:	601a      	str	r2, [r3, #0]
 8005e6a:	e002      	b.n	8005e72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e7e:	2101      	movs	r1, #1
 8005e80:	69b8      	ldr	r0, [r7, #24]
 8005e82:	f7ff ff05 	bl	8005c90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	78fa      	ldrb	r2, [r7, #3]
 8005e8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005e8e:	bf00      	nop
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
	...

08005e98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b08e      	sub	sp, #56	; 0x38
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
 8005ea4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10a      	bne.n	8005eca <xQueueGenericSend+0x32>
	__asm volatile
 8005eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb8:	f383 8811 	msr	BASEPRI, r3
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ec6:	bf00      	nop
 8005ec8:	e7fe      	b.n	8005ec8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d103      	bne.n	8005ed8 <xQueueGenericSend+0x40>
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <xQueueGenericSend+0x44>
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e000      	b.n	8005ede <xQueueGenericSend+0x46>
 8005edc:	2300      	movs	r3, #0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10a      	bne.n	8005ef8 <xQueueGenericSend+0x60>
	__asm volatile
 8005ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee6:	f383 8811 	msr	BASEPRI, r3
 8005eea:	f3bf 8f6f 	isb	sy
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ef4:	bf00      	nop
 8005ef6:	e7fe      	b.n	8005ef6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d103      	bne.n	8005f06 <xQueueGenericSend+0x6e>
 8005efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d101      	bne.n	8005f0a <xQueueGenericSend+0x72>
 8005f06:	2301      	movs	r3, #1
 8005f08:	e000      	b.n	8005f0c <xQueueGenericSend+0x74>
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10a      	bne.n	8005f26 <xQueueGenericSend+0x8e>
	__asm volatile
 8005f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f14:	f383 8811 	msr	BASEPRI, r3
 8005f18:	f3bf 8f6f 	isb	sy
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	623b      	str	r3, [r7, #32]
}
 8005f22:	bf00      	nop
 8005f24:	e7fe      	b.n	8005f24 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f26:	f001 f9bd 	bl	80072a4 <xTaskGetSchedulerState>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d102      	bne.n	8005f36 <xQueueGenericSend+0x9e>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <xQueueGenericSend+0xa2>
 8005f36:	2301      	movs	r3, #1
 8005f38:	e000      	b.n	8005f3c <xQueueGenericSend+0xa4>
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10a      	bne.n	8005f56 <xQueueGenericSend+0xbe>
	__asm volatile
 8005f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	61fb      	str	r3, [r7, #28]
}
 8005f52:	bf00      	nop
 8005f54:	e7fe      	b.n	8005f54 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f56:	f001 fefd 	bl	8007d54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d302      	bcc.n	8005f6c <xQueueGenericSend+0xd4>
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d129      	bne.n	8005fc0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f6c:	683a      	ldr	r2, [r7, #0]
 8005f6e:	68b9      	ldr	r1, [r7, #8]
 8005f70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f72:	f000 fa0b 	bl	800638c <prvCopyDataToQueue>
 8005f76:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d010      	beq.n	8005fa2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f82:	3324      	adds	r3, #36	; 0x24
 8005f84:	4618      	mov	r0, r3
 8005f86:	f000 ffcf 	bl	8006f28 <xTaskRemoveFromEventList>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d013      	beq.n	8005fb8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005f90:	4b3f      	ldr	r3, [pc, #252]	; (8006090 <xQueueGenericSend+0x1f8>)
 8005f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	e00a      	b.n	8005fb8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d007      	beq.n	8005fb8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005fa8:	4b39      	ldr	r3, [pc, #228]	; (8006090 <xQueueGenericSend+0x1f8>)
 8005faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005fb8:	f001 fefc 	bl	8007db4 <vPortExitCritical>
				return pdPASS;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e063      	b.n	8006088 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d103      	bne.n	8005fce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005fc6:	f001 fef5 	bl	8007db4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	e05c      	b.n	8006088 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d106      	bne.n	8005fe2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005fd4:	f107 0314 	add.w	r3, r7, #20
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f001 f809 	bl	8006ff0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005fe2:	f001 fee7 	bl	8007db4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005fe6:	f000 fd7b 	bl	8006ae0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fea:	f001 feb3 	bl	8007d54 <vPortEnterCritical>
 8005fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ff4:	b25b      	sxtb	r3, r3
 8005ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ffa:	d103      	bne.n	8006004 <xQueueGenericSend+0x16c>
 8005ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006006:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800600a:	b25b      	sxtb	r3, r3
 800600c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006010:	d103      	bne.n	800601a <xQueueGenericSend+0x182>
 8006012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006014:	2200      	movs	r2, #0
 8006016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800601a:	f001 fecb 	bl	8007db4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800601e:	1d3a      	adds	r2, r7, #4
 8006020:	f107 0314 	add.w	r3, r7, #20
 8006024:	4611      	mov	r1, r2
 8006026:	4618      	mov	r0, r3
 8006028:	f000 fff8 	bl	800701c <xTaskCheckForTimeOut>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d124      	bne.n	800607c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006032:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006034:	f000 faa2 	bl	800657c <prvIsQueueFull>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d018      	beq.n	8006070 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800603e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006040:	3310      	adds	r3, #16
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	4611      	mov	r1, r2
 8006046:	4618      	mov	r0, r3
 8006048:	f000 ff1e 	bl	8006e88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800604c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800604e:	f000 fa2d 	bl	80064ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006052:	f000 fd53 	bl	8006afc <xTaskResumeAll>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	f47f af7c 	bne.w	8005f56 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800605e:	4b0c      	ldr	r3, [pc, #48]	; (8006090 <xQueueGenericSend+0x1f8>)
 8006060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	e772      	b.n	8005f56 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006070:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006072:	f000 fa1b 	bl	80064ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006076:	f000 fd41 	bl	8006afc <xTaskResumeAll>
 800607a:	e76c      	b.n	8005f56 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800607c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800607e:	f000 fa15 	bl	80064ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006082:	f000 fd3b 	bl	8006afc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006086:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006088:	4618      	mov	r0, r3
 800608a:	3738      	adds	r7, #56	; 0x38
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	e000ed04 	.word	0xe000ed04

08006094 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b090      	sub	sp, #64	; 0x40
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
 80060a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80060a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d10a      	bne.n	80060c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80060ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80060be:	bf00      	nop
 80060c0:	e7fe      	b.n	80060c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d103      	bne.n	80060d0 <xQueueGenericSendFromISR+0x3c>
 80060c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d101      	bne.n	80060d4 <xQueueGenericSendFromISR+0x40>
 80060d0:	2301      	movs	r3, #1
 80060d2:	e000      	b.n	80060d6 <xQueueGenericSendFromISR+0x42>
 80060d4:	2300      	movs	r3, #0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10a      	bne.n	80060f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80060da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060de:	f383 8811 	msr	BASEPRI, r3
 80060e2:	f3bf 8f6f 	isb	sy
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060ec:	bf00      	nop
 80060ee:	e7fe      	b.n	80060ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d103      	bne.n	80060fe <xQueueGenericSendFromISR+0x6a>
 80060f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d101      	bne.n	8006102 <xQueueGenericSendFromISR+0x6e>
 80060fe:	2301      	movs	r3, #1
 8006100:	e000      	b.n	8006104 <xQueueGenericSendFromISR+0x70>
 8006102:	2300      	movs	r3, #0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10a      	bne.n	800611e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610c:	f383 8811 	msr	BASEPRI, r3
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	623b      	str	r3, [r7, #32]
}
 800611a:	bf00      	nop
 800611c:	e7fe      	b.n	800611c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800611e:	f001 fefb 	bl	8007f18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006122:	f3ef 8211 	mrs	r2, BASEPRI
 8006126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612a:	f383 8811 	msr	BASEPRI, r3
 800612e:	f3bf 8f6f 	isb	sy
 8006132:	f3bf 8f4f 	dsb	sy
 8006136:	61fa      	str	r2, [r7, #28]
 8006138:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800613a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800613c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800613e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006140:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006146:	429a      	cmp	r2, r3
 8006148:	d302      	bcc.n	8006150 <xQueueGenericSendFromISR+0xbc>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b02      	cmp	r3, #2
 800614e:	d12f      	bne.n	80061b0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006152:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800615a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006160:	683a      	ldr	r2, [r7, #0]
 8006162:	68b9      	ldr	r1, [r7, #8]
 8006164:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006166:	f000 f911 	bl	800638c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800616a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800616e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006172:	d112      	bne.n	800619a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006178:	2b00      	cmp	r3, #0
 800617a:	d016      	beq.n	80061aa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800617c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617e:	3324      	adds	r3, #36	; 0x24
 8006180:	4618      	mov	r0, r3
 8006182:	f000 fed1 	bl	8006f28 <xTaskRemoveFromEventList>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00e      	beq.n	80061aa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00b      	beq.n	80061aa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	601a      	str	r2, [r3, #0]
 8006198:	e007      	b.n	80061aa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800619a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800619e:	3301      	adds	r3, #1
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	b25a      	sxtb	r2, r3
 80061a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80061aa:	2301      	movs	r3, #1
 80061ac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80061ae:	e001      	b.n	80061b4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80061b0:	2300      	movs	r3, #0
 80061b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80061be:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80061c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3740      	adds	r7, #64	; 0x40
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
	...

080061cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b08c      	sub	sp, #48	; 0x30
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80061d8:	2300      	movs	r3, #0
 80061da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80061e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10a      	bne.n	80061fc <xQueueReceive+0x30>
	__asm volatile
 80061e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ea:	f383 8811 	msr	BASEPRI, r3
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f3bf 8f4f 	dsb	sy
 80061f6:	623b      	str	r3, [r7, #32]
}
 80061f8:	bf00      	nop
 80061fa:	e7fe      	b.n	80061fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d103      	bne.n	800620a <xQueueReceive+0x3e>
 8006202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <xQueueReceive+0x42>
 800620a:	2301      	movs	r3, #1
 800620c:	e000      	b.n	8006210 <xQueueReceive+0x44>
 800620e:	2300      	movs	r3, #0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10a      	bne.n	800622a <xQueueReceive+0x5e>
	__asm volatile
 8006214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006218:	f383 8811 	msr	BASEPRI, r3
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	61fb      	str	r3, [r7, #28]
}
 8006226:	bf00      	nop
 8006228:	e7fe      	b.n	8006228 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800622a:	f001 f83b 	bl	80072a4 <xTaskGetSchedulerState>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d102      	bne.n	800623a <xQueueReceive+0x6e>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d101      	bne.n	800623e <xQueueReceive+0x72>
 800623a:	2301      	movs	r3, #1
 800623c:	e000      	b.n	8006240 <xQueueReceive+0x74>
 800623e:	2300      	movs	r3, #0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10a      	bne.n	800625a <xQueueReceive+0x8e>
	__asm volatile
 8006244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006248:	f383 8811 	msr	BASEPRI, r3
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	61bb      	str	r3, [r7, #24]
}
 8006256:	bf00      	nop
 8006258:	e7fe      	b.n	8006258 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800625a:	f001 fd7b 	bl	8007d54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800625e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006262:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	2b00      	cmp	r3, #0
 8006268:	d01f      	beq.n	80062aa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800626a:	68b9      	ldr	r1, [r7, #8]
 800626c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800626e:	f000 f8f7 	bl	8006460 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	1e5a      	subs	r2, r3, #1
 8006276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006278:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800627a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00f      	beq.n	80062a2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006284:	3310      	adds	r3, #16
 8006286:	4618      	mov	r0, r3
 8006288:	f000 fe4e 	bl	8006f28 <xTaskRemoveFromEventList>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d007      	beq.n	80062a2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006292:	4b3d      	ldr	r3, [pc, #244]	; (8006388 <xQueueReceive+0x1bc>)
 8006294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062a2:	f001 fd87 	bl	8007db4 <vPortExitCritical>
				return pdPASS;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e069      	b.n	800637e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d103      	bne.n	80062b8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062b0:	f001 fd80 	bl	8007db4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80062b4:	2300      	movs	r3, #0
 80062b6:	e062      	b.n	800637e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d106      	bne.n	80062cc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062be:	f107 0310 	add.w	r3, r7, #16
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 fe94 	bl	8006ff0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062c8:	2301      	movs	r3, #1
 80062ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062cc:	f001 fd72 	bl	8007db4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062d0:	f000 fc06 	bl	8006ae0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062d4:	f001 fd3e 	bl	8007d54 <vPortEnterCritical>
 80062d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062de:	b25b      	sxtb	r3, r3
 80062e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e4:	d103      	bne.n	80062ee <xQueueReceive+0x122>
 80062e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062f4:	b25b      	sxtb	r3, r3
 80062f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062fa:	d103      	bne.n	8006304 <xQueueReceive+0x138>
 80062fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006304:	f001 fd56 	bl	8007db4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006308:	1d3a      	adds	r2, r7, #4
 800630a:	f107 0310 	add.w	r3, r7, #16
 800630e:	4611      	mov	r1, r2
 8006310:	4618      	mov	r0, r3
 8006312:	f000 fe83 	bl	800701c <xTaskCheckForTimeOut>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d123      	bne.n	8006364 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800631c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800631e:	f000 f917 	bl	8006550 <prvIsQueueEmpty>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d017      	beq.n	8006358 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632a:	3324      	adds	r3, #36	; 0x24
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	4611      	mov	r1, r2
 8006330:	4618      	mov	r0, r3
 8006332:	f000 fda9 	bl	8006e88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006338:	f000 f8b8 	bl	80064ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800633c:	f000 fbde 	bl	8006afc <xTaskResumeAll>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d189      	bne.n	800625a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006346:	4b10      	ldr	r3, [pc, #64]	; (8006388 <xQueueReceive+0x1bc>)
 8006348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800634c:	601a      	str	r2, [r3, #0]
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	f3bf 8f6f 	isb	sy
 8006356:	e780      	b.n	800625a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800635a:	f000 f8a7 	bl	80064ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800635e:	f000 fbcd 	bl	8006afc <xTaskResumeAll>
 8006362:	e77a      	b.n	800625a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006364:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006366:	f000 f8a1 	bl	80064ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800636a:	f000 fbc7 	bl	8006afc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800636e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006370:	f000 f8ee 	bl	8006550 <prvIsQueueEmpty>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	f43f af6f 	beq.w	800625a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800637c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800637e:	4618      	mov	r0, r3
 8006380:	3730      	adds	r7, #48	; 0x30
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	e000ed04 	.word	0xe000ed04

0800638c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006398:	2300      	movs	r3, #0
 800639a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10d      	bne.n	80063c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d14d      	bne.n	800644e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f000 ff92 	bl	80072e0 <xTaskPriorityDisinherit>
 80063bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	609a      	str	r2, [r3, #8]
 80063c4:	e043      	b.n	800644e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d119      	bne.n	8006400 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6858      	ldr	r0, [r3, #4]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d4:	461a      	mov	r2, r3
 80063d6:	68b9      	ldr	r1, [r7, #8]
 80063d8:	f001 fff2 	bl	80083c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	685a      	ldr	r2, [r3, #4]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e4:	441a      	add	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d32b      	bcc.n	800644e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	605a      	str	r2, [r3, #4]
 80063fe:	e026      	b.n	800644e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	68d8      	ldr	r0, [r3, #12]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006408:	461a      	mov	r2, r3
 800640a:	68b9      	ldr	r1, [r7, #8]
 800640c:	f001 ffd8 	bl	80083c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	68da      	ldr	r2, [r3, #12]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006418:	425b      	negs	r3, r3
 800641a:	441a      	add	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	68da      	ldr	r2, [r3, #12]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	429a      	cmp	r2, r3
 800642a:	d207      	bcs.n	800643c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	689a      	ldr	r2, [r3, #8]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006434:	425b      	negs	r3, r3
 8006436:	441a      	add	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b02      	cmp	r3, #2
 8006440:	d105      	bne.n	800644e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	3b01      	subs	r3, #1
 800644c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	1c5a      	adds	r2, r3, #1
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006456:	697b      	ldr	r3, [r7, #20]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3718      	adds	r7, #24
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646e:	2b00      	cmp	r3, #0
 8006470:	d018      	beq.n	80064a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68da      	ldr	r2, [r3, #12]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647a:	441a      	add	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68da      	ldr	r2, [r3, #12]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	429a      	cmp	r2, r3
 800648a:	d303      	bcc.n	8006494 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68d9      	ldr	r1, [r3, #12]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649c:	461a      	mov	r2, r3
 800649e:	6838      	ldr	r0, [r7, #0]
 80064a0:	f001 ff8e 	bl	80083c0 <memcpy>
	}
}
 80064a4:	bf00      	nop
 80064a6:	3708      	adds	r7, #8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80064b4:	f001 fc4e 	bl	8007d54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064c0:	e011      	b.n	80064e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d012      	beq.n	80064f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	3324      	adds	r3, #36	; 0x24
 80064ce:	4618      	mov	r0, r3
 80064d0:	f000 fd2a 	bl	8006f28 <xTaskRemoveFromEventList>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80064da:	f000 fe01 	bl	80070e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80064de:	7bfb      	ldrb	r3, [r7, #15]
 80064e0:	3b01      	subs	r3, #1
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	dce9      	bgt.n	80064c2 <prvUnlockQueue+0x16>
 80064ee:	e000      	b.n	80064f2 <prvUnlockQueue+0x46>
					break;
 80064f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	22ff      	movs	r2, #255	; 0xff
 80064f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80064fa:	f001 fc5b 	bl	8007db4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80064fe:	f001 fc29 	bl	8007d54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006508:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800650a:	e011      	b.n	8006530 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d012      	beq.n	800653a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	3310      	adds	r3, #16
 8006518:	4618      	mov	r0, r3
 800651a:	f000 fd05 	bl	8006f28 <xTaskRemoveFromEventList>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d001      	beq.n	8006528 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006524:	f000 fddc 	bl	80070e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006528:	7bbb      	ldrb	r3, [r7, #14]
 800652a:	3b01      	subs	r3, #1
 800652c:	b2db      	uxtb	r3, r3
 800652e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006530:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006534:	2b00      	cmp	r3, #0
 8006536:	dce9      	bgt.n	800650c <prvUnlockQueue+0x60>
 8006538:	e000      	b.n	800653c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800653a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	22ff      	movs	r2, #255	; 0xff
 8006540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006544:	f001 fc36 	bl	8007db4 <vPortExitCritical>
}
 8006548:	bf00      	nop
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006558:	f001 fbfc 	bl	8007d54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006560:	2b00      	cmp	r3, #0
 8006562:	d102      	bne.n	800656a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006564:	2301      	movs	r3, #1
 8006566:	60fb      	str	r3, [r7, #12]
 8006568:	e001      	b.n	800656e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800656a:	2300      	movs	r3, #0
 800656c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800656e:	f001 fc21 	bl	8007db4 <vPortExitCritical>

	return xReturn;
 8006572:	68fb      	ldr	r3, [r7, #12]
}
 8006574:	4618      	mov	r0, r3
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006584:	f001 fbe6 	bl	8007d54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006590:	429a      	cmp	r2, r3
 8006592:	d102      	bne.n	800659a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006594:	2301      	movs	r3, #1
 8006596:	60fb      	str	r3, [r7, #12]
 8006598:	e001      	b.n	800659e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800659a:	2300      	movs	r3, #0
 800659c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800659e:	f001 fc09 	bl	8007db4 <vPortExitCritical>

	return xReturn;
 80065a2:	68fb      	ldr	r3, [r7, #12]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065b6:	2300      	movs	r3, #0
 80065b8:	60fb      	str	r3, [r7, #12]
 80065ba:	e014      	b.n	80065e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80065bc:	4a0f      	ldr	r2, [pc, #60]	; (80065fc <vQueueAddToRegistry+0x50>)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10b      	bne.n	80065e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80065c8:	490c      	ldr	r1, [pc, #48]	; (80065fc <vQueueAddToRegistry+0x50>)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80065d2:	4a0a      	ldr	r2, [pc, #40]	; (80065fc <vQueueAddToRegistry+0x50>)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	00db      	lsls	r3, r3, #3
 80065d8:	4413      	add	r3, r2
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80065de:	e006      	b.n	80065ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	3301      	adds	r3, #1
 80065e4:	60fb      	str	r3, [r7, #12]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2b07      	cmp	r3, #7
 80065ea:	d9e7      	bls.n	80065bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80065ec:	bf00      	nop
 80065ee:	bf00      	nop
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	200052d4 	.word	0x200052d4

08006600 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006600:	b580      	push	{r7, lr}
 8006602:	b086      	sub	sp, #24
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006610:	f001 fba0 	bl	8007d54 <vPortEnterCritical>
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800661a:	b25b      	sxtb	r3, r3
 800661c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006620:	d103      	bne.n	800662a <vQueueWaitForMessageRestricted+0x2a>
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006630:	b25b      	sxtb	r3, r3
 8006632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006636:	d103      	bne.n	8006640 <vQueueWaitForMessageRestricted+0x40>
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006640:	f001 fbb8 	bl	8007db4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006648:	2b00      	cmp	r3, #0
 800664a:	d106      	bne.n	800665a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	3324      	adds	r3, #36	; 0x24
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	68b9      	ldr	r1, [r7, #8]
 8006654:	4618      	mov	r0, r3
 8006656:	f000 fc3b 	bl	8006ed0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800665a:	6978      	ldr	r0, [r7, #20]
 800665c:	f7ff ff26 	bl	80064ac <prvUnlockQueue>
	}
 8006660:	bf00      	nop
 8006662:	3718      	adds	r7, #24
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006668:	b580      	push	{r7, lr}
 800666a:	b08e      	sub	sp, #56	; 0x38
 800666c:	af04      	add	r7, sp, #16
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10a      	bne.n	8006692 <xTaskCreateStatic+0x2a>
	__asm volatile
 800667c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006680:	f383 8811 	msr	BASEPRI, r3
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	623b      	str	r3, [r7, #32]
}
 800668e:	bf00      	nop
 8006690:	e7fe      	b.n	8006690 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006694:	2b00      	cmp	r3, #0
 8006696:	d10a      	bne.n	80066ae <xTaskCreateStatic+0x46>
	__asm volatile
 8006698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669c:	f383 8811 	msr	BASEPRI, r3
 80066a0:	f3bf 8f6f 	isb	sy
 80066a4:	f3bf 8f4f 	dsb	sy
 80066a8:	61fb      	str	r3, [r7, #28]
}
 80066aa:	bf00      	nop
 80066ac:	e7fe      	b.n	80066ac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80066ae:	235c      	movs	r3, #92	; 0x5c
 80066b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	2b5c      	cmp	r3, #92	; 0x5c
 80066b6:	d00a      	beq.n	80066ce <xTaskCreateStatic+0x66>
	__asm volatile
 80066b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066bc:	f383 8811 	msr	BASEPRI, r3
 80066c0:	f3bf 8f6f 	isb	sy
 80066c4:	f3bf 8f4f 	dsb	sy
 80066c8:	61bb      	str	r3, [r7, #24]
}
 80066ca:	bf00      	nop
 80066cc:	e7fe      	b.n	80066cc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80066ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80066d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d01e      	beq.n	8006714 <xTaskCreateStatic+0xac>
 80066d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d01b      	beq.n	8006714 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066de:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80066e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066e4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80066e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e8:	2202      	movs	r2, #2
 80066ea:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80066ee:	2300      	movs	r3, #0
 80066f0:	9303      	str	r3, [sp, #12]
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f4:	9302      	str	r3, [sp, #8]
 80066f6:	f107 0314 	add.w	r3, r7, #20
 80066fa:	9301      	str	r3, [sp, #4]
 80066fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fe:	9300      	str	r3, [sp, #0]
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	68b9      	ldr	r1, [r7, #8]
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f000 f850 	bl	80067ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800670c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800670e:	f000 f8dd 	bl	80068cc <prvAddNewTaskToReadyList>
 8006712:	e001      	b.n	8006718 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006714:	2300      	movs	r3, #0
 8006716:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006718:	697b      	ldr	r3, [r7, #20]
	}
 800671a:	4618      	mov	r0, r3
 800671c:	3728      	adds	r7, #40	; 0x28
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006722:	b580      	push	{r7, lr}
 8006724:	b08c      	sub	sp, #48	; 0x30
 8006726:	af04      	add	r7, sp, #16
 8006728:	60f8      	str	r0, [r7, #12]
 800672a:	60b9      	str	r1, [r7, #8]
 800672c:	603b      	str	r3, [r7, #0]
 800672e:	4613      	mov	r3, r2
 8006730:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006732:	88fb      	ldrh	r3, [r7, #6]
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4618      	mov	r0, r3
 8006738:	f001 fc2e 	bl	8007f98 <pvPortMalloc>
 800673c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00e      	beq.n	8006762 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006744:	205c      	movs	r0, #92	; 0x5c
 8006746:	f001 fc27 	bl	8007f98 <pvPortMalloc>
 800674a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	631a      	str	r2, [r3, #48]	; 0x30
 8006758:	e005      	b.n	8006766 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800675a:	6978      	ldr	r0, [r7, #20]
 800675c:	f001 fce8 	bl	8008130 <vPortFree>
 8006760:	e001      	b.n	8006766 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006762:	2300      	movs	r3, #0
 8006764:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d017      	beq.n	800679c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006774:	88fa      	ldrh	r2, [r7, #6]
 8006776:	2300      	movs	r3, #0
 8006778:	9303      	str	r3, [sp, #12]
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	9302      	str	r3, [sp, #8]
 800677e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006780:	9301      	str	r3, [sp, #4]
 8006782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006784:	9300      	str	r3, [sp, #0]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	68b9      	ldr	r1, [r7, #8]
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f000 f80e 	bl	80067ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006790:	69f8      	ldr	r0, [r7, #28]
 8006792:	f000 f89b 	bl	80068cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006796:	2301      	movs	r3, #1
 8006798:	61bb      	str	r3, [r7, #24]
 800679a:	e002      	b.n	80067a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800679c:	f04f 33ff 	mov.w	r3, #4294967295
 80067a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80067a2:	69bb      	ldr	r3, [r7, #24]
	}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3720      	adds	r7, #32
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b088      	sub	sp, #32
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
 80067b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80067ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	461a      	mov	r2, r3
 80067c4:	21a5      	movs	r1, #165	; 0xa5
 80067c6:	f001 fe09 	bl	80083dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80067ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80067d4:	3b01      	subs	r3, #1
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	4413      	add	r3, r2
 80067da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	f023 0307 	bic.w	r3, r3, #7
 80067e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	f003 0307 	and.w	r3, r3, #7
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00a      	beq.n	8006804 <prvInitialiseNewTask+0x58>
	__asm volatile
 80067ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f2:	f383 8811 	msr	BASEPRI, r3
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	617b      	str	r3, [r7, #20]
}
 8006800:	bf00      	nop
 8006802:	e7fe      	b.n	8006802 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d01f      	beq.n	800684a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800680a:	2300      	movs	r3, #0
 800680c:	61fb      	str	r3, [r7, #28]
 800680e:	e012      	b.n	8006836 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	4413      	add	r3, r2
 8006816:	7819      	ldrb	r1, [r3, #0]
 8006818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	4413      	add	r3, r2
 800681e:	3334      	adds	r3, #52	; 0x34
 8006820:	460a      	mov	r2, r1
 8006822:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	4413      	add	r3, r2
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d006      	beq.n	800683e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	3301      	adds	r3, #1
 8006834:	61fb      	str	r3, [r7, #28]
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	2b0f      	cmp	r3, #15
 800683a:	d9e9      	bls.n	8006810 <prvInitialiseNewTask+0x64>
 800683c:	e000      	b.n	8006840 <prvInitialiseNewTask+0x94>
			{
				break;
 800683e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006842:	2200      	movs	r2, #0
 8006844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006848:	e003      	b.n	8006852 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800684a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684c:	2200      	movs	r2, #0
 800684e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006854:	2b37      	cmp	r3, #55	; 0x37
 8006856:	d901      	bls.n	800685c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006858:	2337      	movs	r3, #55	; 0x37
 800685a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800685c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006860:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006866:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686a:	2200      	movs	r2, #0
 800686c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800686e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006870:	3304      	adds	r3, #4
 8006872:	4618      	mov	r0, r3
 8006874:	f7ff f978 	bl	8005b68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687a:	3318      	adds	r3, #24
 800687c:	4618      	mov	r0, r3
 800687e:	f7ff f973 	bl	8005b68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006886:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800688e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006890:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006896:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689a:	2200      	movs	r2, #0
 800689c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800689e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80068a6:	683a      	ldr	r2, [r7, #0]
 80068a8:	68f9      	ldr	r1, [r7, #12]
 80068aa:	69b8      	ldr	r0, [r7, #24]
 80068ac:	f001 f928 	bl	8007b00 <pxPortInitialiseStack>
 80068b0:	4602      	mov	r2, r0
 80068b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80068b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d002      	beq.n	80068c2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80068bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068c2:	bf00      	nop
 80068c4:	3720      	adds	r7, #32
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
	...

080068cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80068d4:	f001 fa3e 	bl	8007d54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80068d8:	4b2d      	ldr	r3, [pc, #180]	; (8006990 <prvAddNewTaskToReadyList+0xc4>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	3301      	adds	r3, #1
 80068de:	4a2c      	ldr	r2, [pc, #176]	; (8006990 <prvAddNewTaskToReadyList+0xc4>)
 80068e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80068e2:	4b2c      	ldr	r3, [pc, #176]	; (8006994 <prvAddNewTaskToReadyList+0xc8>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d109      	bne.n	80068fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80068ea:	4a2a      	ldr	r2, [pc, #168]	; (8006994 <prvAddNewTaskToReadyList+0xc8>)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80068f0:	4b27      	ldr	r3, [pc, #156]	; (8006990 <prvAddNewTaskToReadyList+0xc4>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d110      	bne.n	800691a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80068f8:	f000 fc16 	bl	8007128 <prvInitialiseTaskLists>
 80068fc:	e00d      	b.n	800691a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80068fe:	4b26      	ldr	r3, [pc, #152]	; (8006998 <prvAddNewTaskToReadyList+0xcc>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d109      	bne.n	800691a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006906:	4b23      	ldr	r3, [pc, #140]	; (8006994 <prvAddNewTaskToReadyList+0xc8>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006910:	429a      	cmp	r2, r3
 8006912:	d802      	bhi.n	800691a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006914:	4a1f      	ldr	r2, [pc, #124]	; (8006994 <prvAddNewTaskToReadyList+0xc8>)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800691a:	4b20      	ldr	r3, [pc, #128]	; (800699c <prvAddNewTaskToReadyList+0xd0>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	3301      	adds	r3, #1
 8006920:	4a1e      	ldr	r2, [pc, #120]	; (800699c <prvAddNewTaskToReadyList+0xd0>)
 8006922:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006924:	4b1d      	ldr	r3, [pc, #116]	; (800699c <prvAddNewTaskToReadyList+0xd0>)
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006930:	4b1b      	ldr	r3, [pc, #108]	; (80069a0 <prvAddNewTaskToReadyList+0xd4>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	429a      	cmp	r2, r3
 8006936:	d903      	bls.n	8006940 <prvAddNewTaskToReadyList+0x74>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693c:	4a18      	ldr	r2, [pc, #96]	; (80069a0 <prvAddNewTaskToReadyList+0xd4>)
 800693e:	6013      	str	r3, [r2, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006944:	4613      	mov	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4a15      	ldr	r2, [pc, #84]	; (80069a4 <prvAddNewTaskToReadyList+0xd8>)
 800694e:	441a      	add	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	3304      	adds	r3, #4
 8006954:	4619      	mov	r1, r3
 8006956:	4610      	mov	r0, r2
 8006958:	f7ff f913 	bl	8005b82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800695c:	f001 fa2a 	bl	8007db4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006960:	4b0d      	ldr	r3, [pc, #52]	; (8006998 <prvAddNewTaskToReadyList+0xcc>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00e      	beq.n	8006986 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006968:	4b0a      	ldr	r3, [pc, #40]	; (8006994 <prvAddNewTaskToReadyList+0xc8>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006972:	429a      	cmp	r2, r3
 8006974:	d207      	bcs.n	8006986 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006976:	4b0c      	ldr	r3, [pc, #48]	; (80069a8 <prvAddNewTaskToReadyList+0xdc>)
 8006978:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800697c:	601a      	str	r2, [r3, #0]
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006986:	bf00      	nop
 8006988:	3708      	adds	r7, #8
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	20000ea8 	.word	0x20000ea8
 8006994:	200009d4 	.word	0x200009d4
 8006998:	20000eb4 	.word	0x20000eb4
 800699c:	20000ec4 	.word	0x20000ec4
 80069a0:	20000eb0 	.word	0x20000eb0
 80069a4:	200009d8 	.word	0x200009d8
 80069a8:	e000ed04 	.word	0xe000ed04

080069ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80069b4:	2300      	movs	r3, #0
 80069b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d017      	beq.n	80069ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80069be:	4b13      	ldr	r3, [pc, #76]	; (8006a0c <vTaskDelay+0x60>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00a      	beq.n	80069dc <vTaskDelay+0x30>
	__asm volatile
 80069c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ca:	f383 8811 	msr	BASEPRI, r3
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	60bb      	str	r3, [r7, #8]
}
 80069d8:	bf00      	nop
 80069da:	e7fe      	b.n	80069da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80069dc:	f000 f880 	bl	8006ae0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80069e0:	2100      	movs	r1, #0
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fcea 	bl	80073bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80069e8:	f000 f888 	bl	8006afc <xTaskResumeAll>
 80069ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d107      	bne.n	8006a04 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80069f4:	4b06      	ldr	r3, [pc, #24]	; (8006a10 <vTaskDelay+0x64>)
 80069f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069fa:	601a      	str	r2, [r3, #0]
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a04:	bf00      	nop
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	20000ed0 	.word	0x20000ed0
 8006a10:	e000ed04 	.word	0xe000ed04

08006a14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b08a      	sub	sp, #40	; 0x28
 8006a18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a22:	463a      	mov	r2, r7
 8006a24:	1d39      	adds	r1, r7, #4
 8006a26:	f107 0308 	add.w	r3, r7, #8
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7ff f848 	bl	8005ac0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a30:	6839      	ldr	r1, [r7, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	9202      	str	r2, [sp, #8]
 8006a38:	9301      	str	r3, [sp, #4]
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	2300      	movs	r3, #0
 8006a40:	460a      	mov	r2, r1
 8006a42:	4921      	ldr	r1, [pc, #132]	; (8006ac8 <vTaskStartScheduler+0xb4>)
 8006a44:	4821      	ldr	r0, [pc, #132]	; (8006acc <vTaskStartScheduler+0xb8>)
 8006a46:	f7ff fe0f 	bl	8006668 <xTaskCreateStatic>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	4a20      	ldr	r2, [pc, #128]	; (8006ad0 <vTaskStartScheduler+0xbc>)
 8006a4e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a50:	4b1f      	ldr	r3, [pc, #124]	; (8006ad0 <vTaskStartScheduler+0xbc>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d002      	beq.n	8006a5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	617b      	str	r3, [r7, #20]
 8006a5c:	e001      	b.n	8006a62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d102      	bne.n	8006a6e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006a68:	f000 fcfc 	bl	8007464 <xTimerCreateTimerTask>
 8006a6c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d116      	bne.n	8006aa2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a78:	f383 8811 	msr	BASEPRI, r3
 8006a7c:	f3bf 8f6f 	isb	sy
 8006a80:	f3bf 8f4f 	dsb	sy
 8006a84:	613b      	str	r3, [r7, #16]
}
 8006a86:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006a88:	4b12      	ldr	r3, [pc, #72]	; (8006ad4 <vTaskStartScheduler+0xc0>)
 8006a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a8e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a90:	4b11      	ldr	r3, [pc, #68]	; (8006ad8 <vTaskStartScheduler+0xc4>)
 8006a92:	2201      	movs	r2, #1
 8006a94:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006a96:	4b11      	ldr	r3, [pc, #68]	; (8006adc <vTaskStartScheduler+0xc8>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006a9c:	f001 f8b8 	bl	8007c10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006aa0:	e00e      	b.n	8006ac0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa8:	d10a      	bne.n	8006ac0 <vTaskStartScheduler+0xac>
	__asm volatile
 8006aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	60fb      	str	r3, [r7, #12]
}
 8006abc:	bf00      	nop
 8006abe:	e7fe      	b.n	8006abe <vTaskStartScheduler+0xaa>
}
 8006ac0:	bf00      	nop
 8006ac2:	3718      	adds	r7, #24
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	0800d594 	.word	0x0800d594
 8006acc:	080070f9 	.word	0x080070f9
 8006ad0:	20000ecc 	.word	0x20000ecc
 8006ad4:	20000ec8 	.word	0x20000ec8
 8006ad8:	20000eb4 	.word	0x20000eb4
 8006adc:	20000eac 	.word	0x20000eac

08006ae0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006ae4:	4b04      	ldr	r3, [pc, #16]	; (8006af8 <vTaskSuspendAll+0x18>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	4a03      	ldr	r2, [pc, #12]	; (8006af8 <vTaskSuspendAll+0x18>)
 8006aec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006aee:	bf00      	nop
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	20000ed0 	.word	0x20000ed0

08006afc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b02:	2300      	movs	r3, #0
 8006b04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b06:	2300      	movs	r3, #0
 8006b08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b0a:	4b42      	ldr	r3, [pc, #264]	; (8006c14 <xTaskResumeAll+0x118>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10a      	bne.n	8006b28 <xTaskResumeAll+0x2c>
	__asm volatile
 8006b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b16:	f383 8811 	msr	BASEPRI, r3
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	603b      	str	r3, [r7, #0]
}
 8006b24:	bf00      	nop
 8006b26:	e7fe      	b.n	8006b26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b28:	f001 f914 	bl	8007d54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b2c:	4b39      	ldr	r3, [pc, #228]	; (8006c14 <xTaskResumeAll+0x118>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	3b01      	subs	r3, #1
 8006b32:	4a38      	ldr	r2, [pc, #224]	; (8006c14 <xTaskResumeAll+0x118>)
 8006b34:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b36:	4b37      	ldr	r3, [pc, #220]	; (8006c14 <xTaskResumeAll+0x118>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d162      	bne.n	8006c04 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b3e:	4b36      	ldr	r3, [pc, #216]	; (8006c18 <xTaskResumeAll+0x11c>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d05e      	beq.n	8006c04 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b46:	e02f      	b.n	8006ba8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b48:	4b34      	ldr	r3, [pc, #208]	; (8006c1c <xTaskResumeAll+0x120>)
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	3318      	adds	r3, #24
 8006b54:	4618      	mov	r0, r3
 8006b56:	f7ff f871 	bl	8005c3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7ff f86c 	bl	8005c3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b68:	4b2d      	ldr	r3, [pc, #180]	; (8006c20 <xTaskResumeAll+0x124>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d903      	bls.n	8006b78 <xTaskResumeAll+0x7c>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b74:	4a2a      	ldr	r2, [pc, #168]	; (8006c20 <xTaskResumeAll+0x124>)
 8006b76:	6013      	str	r3, [r2, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4a27      	ldr	r2, [pc, #156]	; (8006c24 <xTaskResumeAll+0x128>)
 8006b86:	441a      	add	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	3304      	adds	r3, #4
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	4610      	mov	r0, r2
 8006b90:	f7fe fff7 	bl	8005b82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b98:	4b23      	ldr	r3, [pc, #140]	; (8006c28 <xTaskResumeAll+0x12c>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d302      	bcc.n	8006ba8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006ba2:	4b22      	ldr	r3, [pc, #136]	; (8006c2c <xTaskResumeAll+0x130>)
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ba8:	4b1c      	ldr	r3, [pc, #112]	; (8006c1c <xTaskResumeAll+0x120>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1cb      	bne.n	8006b48 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006bb6:	f000 fb55 	bl	8007264 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006bba:	4b1d      	ldr	r3, [pc, #116]	; (8006c30 <xTaskResumeAll+0x134>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d010      	beq.n	8006be8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006bc6:	f000 f847 	bl	8006c58 <xTaskIncrementTick>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d002      	beq.n	8006bd6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006bd0:	4b16      	ldr	r3, [pc, #88]	; (8006c2c <xTaskResumeAll+0x130>)
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1f1      	bne.n	8006bc6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006be2:	4b13      	ldr	r3, [pc, #76]	; (8006c30 <xTaskResumeAll+0x134>)
 8006be4:	2200      	movs	r2, #0
 8006be6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006be8:	4b10      	ldr	r3, [pc, #64]	; (8006c2c <xTaskResumeAll+0x130>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d009      	beq.n	8006c04 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006bf4:	4b0f      	ldr	r3, [pc, #60]	; (8006c34 <xTaskResumeAll+0x138>)
 8006bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bfa:	601a      	str	r2, [r3, #0]
 8006bfc:	f3bf 8f4f 	dsb	sy
 8006c00:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c04:	f001 f8d6 	bl	8007db4 <vPortExitCritical>

	return xAlreadyYielded;
 8006c08:	68bb      	ldr	r3, [r7, #8]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	20000ed0 	.word	0x20000ed0
 8006c18:	20000ea8 	.word	0x20000ea8
 8006c1c:	20000e68 	.word	0x20000e68
 8006c20:	20000eb0 	.word	0x20000eb0
 8006c24:	200009d8 	.word	0x200009d8
 8006c28:	200009d4 	.word	0x200009d4
 8006c2c:	20000ebc 	.word	0x20000ebc
 8006c30:	20000eb8 	.word	0x20000eb8
 8006c34:	e000ed04 	.word	0xe000ed04

08006c38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006c3e:	4b05      	ldr	r3, [pc, #20]	; (8006c54 <xTaskGetTickCount+0x1c>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006c44:	687b      	ldr	r3, [r7, #4]
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	20000eac 	.word	0x20000eac

08006c58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b086      	sub	sp, #24
 8006c5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c62:	4b4f      	ldr	r3, [pc, #316]	; (8006da0 <xTaskIncrementTick+0x148>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	f040 808f 	bne.w	8006d8a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c6c:	4b4d      	ldr	r3, [pc, #308]	; (8006da4 <xTaskIncrementTick+0x14c>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	3301      	adds	r3, #1
 8006c72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c74:	4a4b      	ldr	r2, [pc, #300]	; (8006da4 <xTaskIncrementTick+0x14c>)
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d120      	bne.n	8006cc2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006c80:	4b49      	ldr	r3, [pc, #292]	; (8006da8 <xTaskIncrementTick+0x150>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00a      	beq.n	8006ca0 <xTaskIncrementTick+0x48>
	__asm volatile
 8006c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8e:	f383 8811 	msr	BASEPRI, r3
 8006c92:	f3bf 8f6f 	isb	sy
 8006c96:	f3bf 8f4f 	dsb	sy
 8006c9a:	603b      	str	r3, [r7, #0]
}
 8006c9c:	bf00      	nop
 8006c9e:	e7fe      	b.n	8006c9e <xTaskIncrementTick+0x46>
 8006ca0:	4b41      	ldr	r3, [pc, #260]	; (8006da8 <xTaskIncrementTick+0x150>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	60fb      	str	r3, [r7, #12]
 8006ca6:	4b41      	ldr	r3, [pc, #260]	; (8006dac <xTaskIncrementTick+0x154>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a3f      	ldr	r2, [pc, #252]	; (8006da8 <xTaskIncrementTick+0x150>)
 8006cac:	6013      	str	r3, [r2, #0]
 8006cae:	4a3f      	ldr	r2, [pc, #252]	; (8006dac <xTaskIncrementTick+0x154>)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6013      	str	r3, [r2, #0]
 8006cb4:	4b3e      	ldr	r3, [pc, #248]	; (8006db0 <xTaskIncrementTick+0x158>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	4a3d      	ldr	r2, [pc, #244]	; (8006db0 <xTaskIncrementTick+0x158>)
 8006cbc:	6013      	str	r3, [r2, #0]
 8006cbe:	f000 fad1 	bl	8007264 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006cc2:	4b3c      	ldr	r3, [pc, #240]	; (8006db4 <xTaskIncrementTick+0x15c>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d349      	bcc.n	8006d60 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ccc:	4b36      	ldr	r3, [pc, #216]	; (8006da8 <xTaskIncrementTick+0x150>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d104      	bne.n	8006ce0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cd6:	4b37      	ldr	r3, [pc, #220]	; (8006db4 <xTaskIncrementTick+0x15c>)
 8006cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8006cdc:	601a      	str	r2, [r3, #0]
					break;
 8006cde:	e03f      	b.n	8006d60 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ce0:	4b31      	ldr	r3, [pc, #196]	; (8006da8 <xTaskIncrementTick+0x150>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d203      	bcs.n	8006d00 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006cf8:	4a2e      	ldr	r2, [pc, #184]	; (8006db4 <xTaskIncrementTick+0x15c>)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006cfe:	e02f      	b.n	8006d60 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	3304      	adds	r3, #4
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7fe ff99 	bl	8005c3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d004      	beq.n	8006d1c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	3318      	adds	r3, #24
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7fe ff90 	bl	8005c3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d20:	4b25      	ldr	r3, [pc, #148]	; (8006db8 <xTaskIncrementTick+0x160>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d903      	bls.n	8006d30 <xTaskIncrementTick+0xd8>
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2c:	4a22      	ldr	r2, [pc, #136]	; (8006db8 <xTaskIncrementTick+0x160>)
 8006d2e:	6013      	str	r3, [r2, #0]
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d34:	4613      	mov	r3, r2
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	4413      	add	r3, r2
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	4a1f      	ldr	r2, [pc, #124]	; (8006dbc <xTaskIncrementTick+0x164>)
 8006d3e:	441a      	add	r2, r3
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	3304      	adds	r3, #4
 8006d44:	4619      	mov	r1, r3
 8006d46:	4610      	mov	r0, r2
 8006d48:	f7fe ff1b 	bl	8005b82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d50:	4b1b      	ldr	r3, [pc, #108]	; (8006dc0 <xTaskIncrementTick+0x168>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d3b8      	bcc.n	8006ccc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d5e:	e7b5      	b.n	8006ccc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d60:	4b17      	ldr	r3, [pc, #92]	; (8006dc0 <xTaskIncrementTick+0x168>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d66:	4915      	ldr	r1, [pc, #84]	; (8006dbc <xTaskIncrementTick+0x164>)
 8006d68:	4613      	mov	r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	440b      	add	r3, r1
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d901      	bls.n	8006d7c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006d7c:	4b11      	ldr	r3, [pc, #68]	; (8006dc4 <xTaskIncrementTick+0x16c>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d007      	beq.n	8006d94 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006d84:	2301      	movs	r3, #1
 8006d86:	617b      	str	r3, [r7, #20]
 8006d88:	e004      	b.n	8006d94 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006d8a:	4b0f      	ldr	r3, [pc, #60]	; (8006dc8 <xTaskIncrementTick+0x170>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	4a0d      	ldr	r2, [pc, #52]	; (8006dc8 <xTaskIncrementTick+0x170>)
 8006d92:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006d94:	697b      	ldr	r3, [r7, #20]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3718      	adds	r7, #24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	20000ed0 	.word	0x20000ed0
 8006da4:	20000eac 	.word	0x20000eac
 8006da8:	20000e60 	.word	0x20000e60
 8006dac:	20000e64 	.word	0x20000e64
 8006db0:	20000ec0 	.word	0x20000ec0
 8006db4:	20000ec8 	.word	0x20000ec8
 8006db8:	20000eb0 	.word	0x20000eb0
 8006dbc:	200009d8 	.word	0x200009d8
 8006dc0:	200009d4 	.word	0x200009d4
 8006dc4:	20000ebc 	.word	0x20000ebc
 8006dc8:	20000eb8 	.word	0x20000eb8

08006dcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006dd2:	4b28      	ldr	r3, [pc, #160]	; (8006e74 <vTaskSwitchContext+0xa8>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d003      	beq.n	8006de2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006dda:	4b27      	ldr	r3, [pc, #156]	; (8006e78 <vTaskSwitchContext+0xac>)
 8006ddc:	2201      	movs	r2, #1
 8006dde:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006de0:	e041      	b.n	8006e66 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006de2:	4b25      	ldr	r3, [pc, #148]	; (8006e78 <vTaskSwitchContext+0xac>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006de8:	4b24      	ldr	r3, [pc, #144]	; (8006e7c <vTaskSwitchContext+0xb0>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	60fb      	str	r3, [r7, #12]
 8006dee:	e010      	b.n	8006e12 <vTaskSwitchContext+0x46>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10a      	bne.n	8006e0c <vTaskSwitchContext+0x40>
	__asm volatile
 8006df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfa:	f383 8811 	msr	BASEPRI, r3
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	f3bf 8f4f 	dsb	sy
 8006e06:	607b      	str	r3, [r7, #4]
}
 8006e08:	bf00      	nop
 8006e0a:	e7fe      	b.n	8006e0a <vTaskSwitchContext+0x3e>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	60fb      	str	r3, [r7, #12]
 8006e12:	491b      	ldr	r1, [pc, #108]	; (8006e80 <vTaskSwitchContext+0xb4>)
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	4613      	mov	r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4413      	add	r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	440b      	add	r3, r1
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d0e4      	beq.n	8006df0 <vTaskSwitchContext+0x24>
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	4613      	mov	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4413      	add	r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4a13      	ldr	r2, [pc, #76]	; (8006e80 <vTaskSwitchContext+0xb4>)
 8006e32:	4413      	add	r3, r2
 8006e34:	60bb      	str	r3, [r7, #8]
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	605a      	str	r2, [r3, #4]
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	685a      	ldr	r2, [r3, #4]
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	3308      	adds	r3, #8
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d104      	bne.n	8006e56 <vTaskSwitchContext+0x8a>
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	685a      	ldr	r2, [r3, #4]
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	605a      	str	r2, [r3, #4]
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	4a09      	ldr	r2, [pc, #36]	; (8006e84 <vTaskSwitchContext+0xb8>)
 8006e5e:	6013      	str	r3, [r2, #0]
 8006e60:	4a06      	ldr	r2, [pc, #24]	; (8006e7c <vTaskSwitchContext+0xb0>)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6013      	str	r3, [r2, #0]
}
 8006e66:	bf00      	nop
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	20000ed0 	.word	0x20000ed0
 8006e78:	20000ebc 	.word	0x20000ebc
 8006e7c:	20000eb0 	.word	0x20000eb0
 8006e80:	200009d8 	.word	0x200009d8
 8006e84:	200009d4 	.word	0x200009d4

08006e88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d10a      	bne.n	8006eae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9c:	f383 8811 	msr	BASEPRI, r3
 8006ea0:	f3bf 8f6f 	isb	sy
 8006ea4:	f3bf 8f4f 	dsb	sy
 8006ea8:	60fb      	str	r3, [r7, #12]
}
 8006eaa:	bf00      	nop
 8006eac:	e7fe      	b.n	8006eac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006eae:	4b07      	ldr	r3, [pc, #28]	; (8006ecc <vTaskPlaceOnEventList+0x44>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	3318      	adds	r3, #24
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f7fe fe87 	bl	8005bca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ebc:	2101      	movs	r1, #1
 8006ebe:	6838      	ldr	r0, [r7, #0]
 8006ec0:	f000 fa7c 	bl	80073bc <prvAddCurrentTaskToDelayedList>
}
 8006ec4:	bf00      	nop
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	200009d4 	.word	0x200009d4

08006ed0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b086      	sub	sp, #24
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10a      	bne.n	8006ef8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee6:	f383 8811 	msr	BASEPRI, r3
 8006eea:	f3bf 8f6f 	isb	sy
 8006eee:	f3bf 8f4f 	dsb	sy
 8006ef2:	617b      	str	r3, [r7, #20]
}
 8006ef4:	bf00      	nop
 8006ef6:	e7fe      	b.n	8006ef6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ef8:	4b0a      	ldr	r3, [pc, #40]	; (8006f24 <vTaskPlaceOnEventListRestricted+0x54>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3318      	adds	r3, #24
 8006efe:	4619      	mov	r1, r3
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f7fe fe3e 	bl	8005b82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d002      	beq.n	8006f12 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f10:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006f12:	6879      	ldr	r1, [r7, #4]
 8006f14:	68b8      	ldr	r0, [r7, #8]
 8006f16:	f000 fa51 	bl	80073bc <prvAddCurrentTaskToDelayedList>
	}
 8006f1a:	bf00      	nop
 8006f1c:	3718      	adds	r7, #24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	200009d4 	.word	0x200009d4

08006f28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10a      	bne.n	8006f54 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	60fb      	str	r3, [r7, #12]
}
 8006f50:	bf00      	nop
 8006f52:	e7fe      	b.n	8006f52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	3318      	adds	r3, #24
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7fe fe6f 	bl	8005c3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f5e:	4b1e      	ldr	r3, [pc, #120]	; (8006fd8 <xTaskRemoveFromEventList+0xb0>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d11d      	bne.n	8006fa2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	3304      	adds	r3, #4
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fe fe66 	bl	8005c3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f74:	4b19      	ldr	r3, [pc, #100]	; (8006fdc <xTaskRemoveFromEventList+0xb4>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d903      	bls.n	8006f84 <xTaskRemoveFromEventList+0x5c>
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f80:	4a16      	ldr	r2, [pc, #88]	; (8006fdc <xTaskRemoveFromEventList+0xb4>)
 8006f82:	6013      	str	r3, [r2, #0]
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f88:	4613      	mov	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	4a13      	ldr	r2, [pc, #76]	; (8006fe0 <xTaskRemoveFromEventList+0xb8>)
 8006f92:	441a      	add	r2, r3
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	3304      	adds	r3, #4
 8006f98:	4619      	mov	r1, r3
 8006f9a:	4610      	mov	r0, r2
 8006f9c:	f7fe fdf1 	bl	8005b82 <vListInsertEnd>
 8006fa0:	e005      	b.n	8006fae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	3318      	adds	r3, #24
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	480e      	ldr	r0, [pc, #56]	; (8006fe4 <xTaskRemoveFromEventList+0xbc>)
 8006faa:	f7fe fdea 	bl	8005b82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb2:	4b0d      	ldr	r3, [pc, #52]	; (8006fe8 <xTaskRemoveFromEventList+0xc0>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d905      	bls.n	8006fc8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006fc0:	4b0a      	ldr	r3, [pc, #40]	; (8006fec <xTaskRemoveFromEventList+0xc4>)
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	601a      	str	r2, [r3, #0]
 8006fc6:	e001      	b.n	8006fcc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006fcc:	697b      	ldr	r3, [r7, #20]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3718      	adds	r7, #24
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	20000ed0 	.word	0x20000ed0
 8006fdc:	20000eb0 	.word	0x20000eb0
 8006fe0:	200009d8 	.word	0x200009d8
 8006fe4:	20000e68 	.word	0x20000e68
 8006fe8:	200009d4 	.word	0x200009d4
 8006fec:	20000ebc 	.word	0x20000ebc

08006ff0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ff8:	4b06      	ldr	r3, [pc, #24]	; (8007014 <vTaskInternalSetTimeOutState+0x24>)
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007000:	4b05      	ldr	r3, [pc, #20]	; (8007018 <vTaskInternalSetTimeOutState+0x28>)
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	605a      	str	r2, [r3, #4]
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr
 8007014:	20000ec0 	.word	0x20000ec0
 8007018:	20000eac 	.word	0x20000eac

0800701c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b088      	sub	sp, #32
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10a      	bne.n	8007042 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800702c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	613b      	str	r3, [r7, #16]
}
 800703e:	bf00      	nop
 8007040:	e7fe      	b.n	8007040 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10a      	bne.n	800705e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704c:	f383 8811 	msr	BASEPRI, r3
 8007050:	f3bf 8f6f 	isb	sy
 8007054:	f3bf 8f4f 	dsb	sy
 8007058:	60fb      	str	r3, [r7, #12]
}
 800705a:	bf00      	nop
 800705c:	e7fe      	b.n	800705c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800705e:	f000 fe79 	bl	8007d54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007062:	4b1d      	ldr	r3, [pc, #116]	; (80070d8 <xTaskCheckForTimeOut+0xbc>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	69ba      	ldr	r2, [r7, #24]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800707a:	d102      	bne.n	8007082 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800707c:	2300      	movs	r3, #0
 800707e:	61fb      	str	r3, [r7, #28]
 8007080:	e023      	b.n	80070ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	4b15      	ldr	r3, [pc, #84]	; (80070dc <xTaskCheckForTimeOut+0xc0>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	429a      	cmp	r2, r3
 800708c:	d007      	beq.n	800709e <xTaskCheckForTimeOut+0x82>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	69ba      	ldr	r2, [r7, #24]
 8007094:	429a      	cmp	r2, r3
 8007096:	d302      	bcc.n	800709e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007098:	2301      	movs	r3, #1
 800709a:	61fb      	str	r3, [r7, #28]
 800709c:	e015      	b.n	80070ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	697a      	ldr	r2, [r7, #20]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d20b      	bcs.n	80070c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	1ad2      	subs	r2, r2, r3
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f7ff ff9b 	bl	8006ff0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80070ba:	2300      	movs	r3, #0
 80070bc:	61fb      	str	r3, [r7, #28]
 80070be:	e004      	b.n	80070ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	2200      	movs	r2, #0
 80070c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80070c6:	2301      	movs	r3, #1
 80070c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80070ca:	f000 fe73 	bl	8007db4 <vPortExitCritical>

	return xReturn;
 80070ce:	69fb      	ldr	r3, [r7, #28]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3720      	adds	r7, #32
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	20000eac 	.word	0x20000eac
 80070dc:	20000ec0 	.word	0x20000ec0

080070e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80070e0:	b480      	push	{r7}
 80070e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80070e4:	4b03      	ldr	r3, [pc, #12]	; (80070f4 <vTaskMissedYield+0x14>)
 80070e6:	2201      	movs	r2, #1
 80070e8:	601a      	str	r2, [r3, #0]
}
 80070ea:	bf00      	nop
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr
 80070f4:	20000ebc 	.word	0x20000ebc

080070f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007100:	f000 f852 	bl	80071a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007104:	4b06      	ldr	r3, [pc, #24]	; (8007120 <prvIdleTask+0x28>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d9f9      	bls.n	8007100 <prvIdleTask+0x8>
			{
				taskYIELD();
 800710c:	4b05      	ldr	r3, [pc, #20]	; (8007124 <prvIdleTask+0x2c>)
 800710e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007112:	601a      	str	r2, [r3, #0]
 8007114:	f3bf 8f4f 	dsb	sy
 8007118:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800711c:	e7f0      	b.n	8007100 <prvIdleTask+0x8>
 800711e:	bf00      	nop
 8007120:	200009d8 	.word	0x200009d8
 8007124:	e000ed04 	.word	0xe000ed04

08007128 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800712e:	2300      	movs	r3, #0
 8007130:	607b      	str	r3, [r7, #4]
 8007132:	e00c      	b.n	800714e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	4613      	mov	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	4a12      	ldr	r2, [pc, #72]	; (8007188 <prvInitialiseTaskLists+0x60>)
 8007140:	4413      	add	r3, r2
 8007142:	4618      	mov	r0, r3
 8007144:	f7fe fcf0 	bl	8005b28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	3301      	adds	r3, #1
 800714c:	607b      	str	r3, [r7, #4]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2b37      	cmp	r3, #55	; 0x37
 8007152:	d9ef      	bls.n	8007134 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007154:	480d      	ldr	r0, [pc, #52]	; (800718c <prvInitialiseTaskLists+0x64>)
 8007156:	f7fe fce7 	bl	8005b28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800715a:	480d      	ldr	r0, [pc, #52]	; (8007190 <prvInitialiseTaskLists+0x68>)
 800715c:	f7fe fce4 	bl	8005b28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007160:	480c      	ldr	r0, [pc, #48]	; (8007194 <prvInitialiseTaskLists+0x6c>)
 8007162:	f7fe fce1 	bl	8005b28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007166:	480c      	ldr	r0, [pc, #48]	; (8007198 <prvInitialiseTaskLists+0x70>)
 8007168:	f7fe fcde 	bl	8005b28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800716c:	480b      	ldr	r0, [pc, #44]	; (800719c <prvInitialiseTaskLists+0x74>)
 800716e:	f7fe fcdb 	bl	8005b28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007172:	4b0b      	ldr	r3, [pc, #44]	; (80071a0 <prvInitialiseTaskLists+0x78>)
 8007174:	4a05      	ldr	r2, [pc, #20]	; (800718c <prvInitialiseTaskLists+0x64>)
 8007176:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007178:	4b0a      	ldr	r3, [pc, #40]	; (80071a4 <prvInitialiseTaskLists+0x7c>)
 800717a:	4a05      	ldr	r2, [pc, #20]	; (8007190 <prvInitialiseTaskLists+0x68>)
 800717c:	601a      	str	r2, [r3, #0]
}
 800717e:	bf00      	nop
 8007180:	3708      	adds	r7, #8
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	200009d8 	.word	0x200009d8
 800718c:	20000e38 	.word	0x20000e38
 8007190:	20000e4c 	.word	0x20000e4c
 8007194:	20000e68 	.word	0x20000e68
 8007198:	20000e7c 	.word	0x20000e7c
 800719c:	20000e94 	.word	0x20000e94
 80071a0:	20000e60 	.word	0x20000e60
 80071a4:	20000e64 	.word	0x20000e64

080071a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071ae:	e019      	b.n	80071e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80071b0:	f000 fdd0 	bl	8007d54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071b4:	4b10      	ldr	r3, [pc, #64]	; (80071f8 <prvCheckTasksWaitingTermination+0x50>)
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	3304      	adds	r3, #4
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7fe fd3b 	bl	8005c3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80071c6:	4b0d      	ldr	r3, [pc, #52]	; (80071fc <prvCheckTasksWaitingTermination+0x54>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	3b01      	subs	r3, #1
 80071cc:	4a0b      	ldr	r2, [pc, #44]	; (80071fc <prvCheckTasksWaitingTermination+0x54>)
 80071ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80071d0:	4b0b      	ldr	r3, [pc, #44]	; (8007200 <prvCheckTasksWaitingTermination+0x58>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	3b01      	subs	r3, #1
 80071d6:	4a0a      	ldr	r2, [pc, #40]	; (8007200 <prvCheckTasksWaitingTermination+0x58>)
 80071d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80071da:	f000 fdeb 	bl	8007db4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f810 	bl	8007204 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071e4:	4b06      	ldr	r3, [pc, #24]	; (8007200 <prvCheckTasksWaitingTermination+0x58>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1e1      	bne.n	80071b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80071ec:	bf00      	nop
 80071ee:	bf00      	nop
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	20000e7c 	.word	0x20000e7c
 80071fc:	20000ea8 	.word	0x20000ea8
 8007200:	20000e90 	.word	0x20000e90

08007204 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007212:	2b00      	cmp	r3, #0
 8007214:	d108      	bne.n	8007228 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721a:	4618      	mov	r0, r3
 800721c:	f000 ff88 	bl	8008130 <vPortFree>
				vPortFree( pxTCB );
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 ff85 	bl	8008130 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007226:	e018      	b.n	800725a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800722e:	2b01      	cmp	r3, #1
 8007230:	d103      	bne.n	800723a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 ff7c 	bl	8008130 <vPortFree>
	}
 8007238:	e00f      	b.n	800725a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007240:	2b02      	cmp	r3, #2
 8007242:	d00a      	beq.n	800725a <prvDeleteTCB+0x56>
	__asm volatile
 8007244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007248:	f383 8811 	msr	BASEPRI, r3
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	60fb      	str	r3, [r7, #12]
}
 8007256:	bf00      	nop
 8007258:	e7fe      	b.n	8007258 <prvDeleteTCB+0x54>
	}
 800725a:	bf00      	nop
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
	...

08007264 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800726a:	4b0c      	ldr	r3, [pc, #48]	; (800729c <prvResetNextTaskUnblockTime+0x38>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d104      	bne.n	800727e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007274:	4b0a      	ldr	r3, [pc, #40]	; (80072a0 <prvResetNextTaskUnblockTime+0x3c>)
 8007276:	f04f 32ff 	mov.w	r2, #4294967295
 800727a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800727c:	e008      	b.n	8007290 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800727e:	4b07      	ldr	r3, [pc, #28]	; (800729c <prvResetNextTaskUnblockTime+0x38>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	4a04      	ldr	r2, [pc, #16]	; (80072a0 <prvResetNextTaskUnblockTime+0x3c>)
 800728e:	6013      	str	r3, [r2, #0]
}
 8007290:	bf00      	nop
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr
 800729c:	20000e60 	.word	0x20000e60
 80072a0:	20000ec8 	.word	0x20000ec8

080072a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80072aa:	4b0b      	ldr	r3, [pc, #44]	; (80072d8 <xTaskGetSchedulerState+0x34>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d102      	bne.n	80072b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80072b2:	2301      	movs	r3, #1
 80072b4:	607b      	str	r3, [r7, #4]
 80072b6:	e008      	b.n	80072ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072b8:	4b08      	ldr	r3, [pc, #32]	; (80072dc <xTaskGetSchedulerState+0x38>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d102      	bne.n	80072c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80072c0:	2302      	movs	r3, #2
 80072c2:	607b      	str	r3, [r7, #4]
 80072c4:	e001      	b.n	80072ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80072c6:	2300      	movs	r3, #0
 80072c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80072ca:	687b      	ldr	r3, [r7, #4]
	}
 80072cc:	4618      	mov	r0, r3
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	20000eb4 	.word	0x20000eb4
 80072dc:	20000ed0 	.word	0x20000ed0

080072e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b086      	sub	sp, #24
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80072ec:	2300      	movs	r3, #0
 80072ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d056      	beq.n	80073a4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80072f6:	4b2e      	ldr	r3, [pc, #184]	; (80073b0 <xTaskPriorityDisinherit+0xd0>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d00a      	beq.n	8007316 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	60fb      	str	r3, [r7, #12]
}
 8007312:	bf00      	nop
 8007314:	e7fe      	b.n	8007314 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800731a:	2b00      	cmp	r3, #0
 800731c:	d10a      	bne.n	8007334 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	60bb      	str	r3, [r7, #8]
}
 8007330:	bf00      	nop
 8007332:	e7fe      	b.n	8007332 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007338:	1e5a      	subs	r2, r3, #1
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007346:	429a      	cmp	r2, r3
 8007348:	d02c      	beq.n	80073a4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800734e:	2b00      	cmp	r3, #0
 8007350:	d128      	bne.n	80073a4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	3304      	adds	r3, #4
 8007356:	4618      	mov	r0, r3
 8007358:	f7fe fc70 	bl	8005c3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007368:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007374:	4b0f      	ldr	r3, [pc, #60]	; (80073b4 <xTaskPriorityDisinherit+0xd4>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	429a      	cmp	r2, r3
 800737a:	d903      	bls.n	8007384 <xTaskPriorityDisinherit+0xa4>
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007380:	4a0c      	ldr	r2, [pc, #48]	; (80073b4 <xTaskPriorityDisinherit+0xd4>)
 8007382:	6013      	str	r3, [r2, #0]
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007388:	4613      	mov	r3, r2
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	4413      	add	r3, r2
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4a09      	ldr	r2, [pc, #36]	; (80073b8 <xTaskPriorityDisinherit+0xd8>)
 8007392:	441a      	add	r2, r3
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	3304      	adds	r3, #4
 8007398:	4619      	mov	r1, r3
 800739a:	4610      	mov	r0, r2
 800739c:	f7fe fbf1 	bl	8005b82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80073a0:	2301      	movs	r3, #1
 80073a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80073a4:	697b      	ldr	r3, [r7, #20]
	}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3718      	adds	r7, #24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	200009d4 	.word	0x200009d4
 80073b4:	20000eb0 	.word	0x20000eb0
 80073b8:	200009d8 	.word	0x200009d8

080073bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80073c6:	4b21      	ldr	r3, [pc, #132]	; (800744c <prvAddCurrentTaskToDelayedList+0x90>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073cc:	4b20      	ldr	r3, [pc, #128]	; (8007450 <prvAddCurrentTaskToDelayedList+0x94>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	3304      	adds	r3, #4
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7fe fc32 	bl	8005c3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073de:	d10a      	bne.n	80073f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d007      	beq.n	80073f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073e6:	4b1a      	ldr	r3, [pc, #104]	; (8007450 <prvAddCurrentTaskToDelayedList+0x94>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	3304      	adds	r3, #4
 80073ec:	4619      	mov	r1, r3
 80073ee:	4819      	ldr	r0, [pc, #100]	; (8007454 <prvAddCurrentTaskToDelayedList+0x98>)
 80073f0:	f7fe fbc7 	bl	8005b82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80073f4:	e026      	b.n	8007444 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4413      	add	r3, r2
 80073fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80073fe:	4b14      	ldr	r3, [pc, #80]	; (8007450 <prvAddCurrentTaskToDelayedList+0x94>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007406:	68ba      	ldr	r2, [r7, #8]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	429a      	cmp	r2, r3
 800740c:	d209      	bcs.n	8007422 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800740e:	4b12      	ldr	r3, [pc, #72]	; (8007458 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	4b0f      	ldr	r3, [pc, #60]	; (8007450 <prvAddCurrentTaskToDelayedList+0x94>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	3304      	adds	r3, #4
 8007418:	4619      	mov	r1, r3
 800741a:	4610      	mov	r0, r2
 800741c:	f7fe fbd5 	bl	8005bca <vListInsert>
}
 8007420:	e010      	b.n	8007444 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007422:	4b0e      	ldr	r3, [pc, #56]	; (800745c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	4b0a      	ldr	r3, [pc, #40]	; (8007450 <prvAddCurrentTaskToDelayedList+0x94>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	3304      	adds	r3, #4
 800742c:	4619      	mov	r1, r3
 800742e:	4610      	mov	r0, r2
 8007430:	f7fe fbcb 	bl	8005bca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007434:	4b0a      	ldr	r3, [pc, #40]	; (8007460 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68ba      	ldr	r2, [r7, #8]
 800743a:	429a      	cmp	r2, r3
 800743c:	d202      	bcs.n	8007444 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800743e:	4a08      	ldr	r2, [pc, #32]	; (8007460 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	6013      	str	r3, [r2, #0]
}
 8007444:	bf00      	nop
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}
 800744c:	20000eac 	.word	0x20000eac
 8007450:	200009d4 	.word	0x200009d4
 8007454:	20000e94 	.word	0x20000e94
 8007458:	20000e64 	.word	0x20000e64
 800745c:	20000e60 	.word	0x20000e60
 8007460:	20000ec8 	.word	0x20000ec8

08007464 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b08a      	sub	sp, #40	; 0x28
 8007468:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800746a:	2300      	movs	r3, #0
 800746c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800746e:	f000 fb07 	bl	8007a80 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007472:	4b1c      	ldr	r3, [pc, #112]	; (80074e4 <xTimerCreateTimerTask+0x80>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d021      	beq.n	80074be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800747a:	2300      	movs	r3, #0
 800747c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800747e:	2300      	movs	r3, #0
 8007480:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007482:	1d3a      	adds	r2, r7, #4
 8007484:	f107 0108 	add.w	r1, r7, #8
 8007488:	f107 030c 	add.w	r3, r7, #12
 800748c:	4618      	mov	r0, r3
 800748e:	f7fe fb31 	bl	8005af4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007492:	6879      	ldr	r1, [r7, #4]
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	9202      	str	r2, [sp, #8]
 800749a:	9301      	str	r3, [sp, #4]
 800749c:	2302      	movs	r3, #2
 800749e:	9300      	str	r3, [sp, #0]
 80074a0:	2300      	movs	r3, #0
 80074a2:	460a      	mov	r2, r1
 80074a4:	4910      	ldr	r1, [pc, #64]	; (80074e8 <xTimerCreateTimerTask+0x84>)
 80074a6:	4811      	ldr	r0, [pc, #68]	; (80074ec <xTimerCreateTimerTask+0x88>)
 80074a8:	f7ff f8de 	bl	8006668 <xTaskCreateStatic>
 80074ac:	4603      	mov	r3, r0
 80074ae:	4a10      	ldr	r2, [pc, #64]	; (80074f0 <xTimerCreateTimerTask+0x8c>)
 80074b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80074b2:	4b0f      	ldr	r3, [pc, #60]	; (80074f0 <xTimerCreateTimerTask+0x8c>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d001      	beq.n	80074be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80074ba:	2301      	movs	r3, #1
 80074bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d10a      	bne.n	80074da <xTimerCreateTimerTask+0x76>
	__asm volatile
 80074c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c8:	f383 8811 	msr	BASEPRI, r3
 80074cc:	f3bf 8f6f 	isb	sy
 80074d0:	f3bf 8f4f 	dsb	sy
 80074d4:	613b      	str	r3, [r7, #16]
}
 80074d6:	bf00      	nop
 80074d8:	e7fe      	b.n	80074d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80074da:	697b      	ldr	r3, [r7, #20]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3718      	adds	r7, #24
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	20000f04 	.word	0x20000f04
 80074e8:	0800d59c 	.word	0x0800d59c
 80074ec:	08007629 	.word	0x08007629
 80074f0:	20000f08 	.word	0x20000f08

080074f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b08a      	sub	sp, #40	; 0x28
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
 8007500:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007502:	2300      	movs	r3, #0
 8007504:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d10a      	bne.n	8007522 <xTimerGenericCommand+0x2e>
	__asm volatile
 800750c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007510:	f383 8811 	msr	BASEPRI, r3
 8007514:	f3bf 8f6f 	isb	sy
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	623b      	str	r3, [r7, #32]
}
 800751e:	bf00      	nop
 8007520:	e7fe      	b.n	8007520 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007522:	4b1a      	ldr	r3, [pc, #104]	; (800758c <xTimerGenericCommand+0x98>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d02a      	beq.n	8007580 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	2b05      	cmp	r3, #5
 800753a:	dc18      	bgt.n	800756e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800753c:	f7ff feb2 	bl	80072a4 <xTaskGetSchedulerState>
 8007540:	4603      	mov	r3, r0
 8007542:	2b02      	cmp	r3, #2
 8007544:	d109      	bne.n	800755a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007546:	4b11      	ldr	r3, [pc, #68]	; (800758c <xTimerGenericCommand+0x98>)
 8007548:	6818      	ldr	r0, [r3, #0]
 800754a:	f107 0110 	add.w	r1, r7, #16
 800754e:	2300      	movs	r3, #0
 8007550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007552:	f7fe fca1 	bl	8005e98 <xQueueGenericSend>
 8007556:	6278      	str	r0, [r7, #36]	; 0x24
 8007558:	e012      	b.n	8007580 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800755a:	4b0c      	ldr	r3, [pc, #48]	; (800758c <xTimerGenericCommand+0x98>)
 800755c:	6818      	ldr	r0, [r3, #0]
 800755e:	f107 0110 	add.w	r1, r7, #16
 8007562:	2300      	movs	r3, #0
 8007564:	2200      	movs	r2, #0
 8007566:	f7fe fc97 	bl	8005e98 <xQueueGenericSend>
 800756a:	6278      	str	r0, [r7, #36]	; 0x24
 800756c:	e008      	b.n	8007580 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800756e:	4b07      	ldr	r3, [pc, #28]	; (800758c <xTimerGenericCommand+0x98>)
 8007570:	6818      	ldr	r0, [r3, #0]
 8007572:	f107 0110 	add.w	r1, r7, #16
 8007576:	2300      	movs	r3, #0
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	f7fe fd8b 	bl	8006094 <xQueueGenericSendFromISR>
 800757e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007582:	4618      	mov	r0, r3
 8007584:	3728      	adds	r7, #40	; 0x28
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	20000f04 	.word	0x20000f04

08007590 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b088      	sub	sp, #32
 8007594:	af02      	add	r7, sp, #8
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800759a:	4b22      	ldr	r3, [pc, #136]	; (8007624 <prvProcessExpiredTimer+0x94>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	3304      	adds	r3, #4
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7fe fb47 	bl	8005c3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075b4:	f003 0304 	and.w	r3, r3, #4
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d022      	beq.n	8007602 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	699a      	ldr	r2, [r3, #24]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	18d1      	adds	r1, r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	6978      	ldr	r0, [r7, #20]
 80075ca:	f000 f8d1 	bl	8007770 <prvInsertTimerInActiveList>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d01f      	beq.n	8007614 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075d4:	2300      	movs	r3, #0
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	2300      	movs	r3, #0
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	2100      	movs	r1, #0
 80075de:	6978      	ldr	r0, [r7, #20]
 80075e0:	f7ff ff88 	bl	80074f4 <xTimerGenericCommand>
 80075e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d113      	bne.n	8007614 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80075ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f0:	f383 8811 	msr	BASEPRI, r3
 80075f4:	f3bf 8f6f 	isb	sy
 80075f8:	f3bf 8f4f 	dsb	sy
 80075fc:	60fb      	str	r3, [r7, #12]
}
 80075fe:	bf00      	nop
 8007600:	e7fe      	b.n	8007600 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007608:	f023 0301 	bic.w	r3, r3, #1
 800760c:	b2da      	uxtb	r2, r3
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	6a1b      	ldr	r3, [r3, #32]
 8007618:	6978      	ldr	r0, [r7, #20]
 800761a:	4798      	blx	r3
}
 800761c:	bf00      	nop
 800761e:	3718      	adds	r7, #24
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	20000efc 	.word	0x20000efc

08007628 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007630:	f107 0308 	add.w	r3, r7, #8
 8007634:	4618      	mov	r0, r3
 8007636:	f000 f857 	bl	80076e8 <prvGetNextExpireTime>
 800763a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	4619      	mov	r1, r3
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f000 f803 	bl	800764c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007646:	f000 f8d5 	bl	80077f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800764a:	e7f1      	b.n	8007630 <prvTimerTask+0x8>

0800764c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007656:	f7ff fa43 	bl	8006ae0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800765a:	f107 0308 	add.w	r3, r7, #8
 800765e:	4618      	mov	r0, r3
 8007660:	f000 f866 	bl	8007730 <prvSampleTimeNow>
 8007664:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d130      	bne.n	80076ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10a      	bne.n	8007688 <prvProcessTimerOrBlockTask+0x3c>
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	429a      	cmp	r2, r3
 8007678:	d806      	bhi.n	8007688 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800767a:	f7ff fa3f 	bl	8006afc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800767e:	68f9      	ldr	r1, [r7, #12]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f7ff ff85 	bl	8007590 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007686:	e024      	b.n	80076d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d008      	beq.n	80076a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800768e:	4b13      	ldr	r3, [pc, #76]	; (80076dc <prvProcessTimerOrBlockTask+0x90>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d101      	bne.n	800769c <prvProcessTimerOrBlockTask+0x50>
 8007698:	2301      	movs	r3, #1
 800769a:	e000      	b.n	800769e <prvProcessTimerOrBlockTask+0x52>
 800769c:	2300      	movs	r3, #0
 800769e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80076a0:	4b0f      	ldr	r3, [pc, #60]	; (80076e0 <prvProcessTimerOrBlockTask+0x94>)
 80076a2:	6818      	ldr	r0, [r3, #0]
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	4619      	mov	r1, r3
 80076ae:	f7fe ffa7 	bl	8006600 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80076b2:	f7ff fa23 	bl	8006afc <xTaskResumeAll>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d10a      	bne.n	80076d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80076bc:	4b09      	ldr	r3, [pc, #36]	; (80076e4 <prvProcessTimerOrBlockTask+0x98>)
 80076be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076c2:	601a      	str	r2, [r3, #0]
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	f3bf 8f6f 	isb	sy
}
 80076cc:	e001      	b.n	80076d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80076ce:	f7ff fa15 	bl	8006afc <xTaskResumeAll>
}
 80076d2:	bf00      	nop
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	20000f00 	.word	0x20000f00
 80076e0:	20000f04 	.word	0x20000f04
 80076e4:	e000ed04 	.word	0xe000ed04

080076e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80076f0:	4b0e      	ldr	r3, [pc, #56]	; (800772c <prvGetNextExpireTime+0x44>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <prvGetNextExpireTime+0x16>
 80076fa:	2201      	movs	r2, #1
 80076fc:	e000      	b.n	8007700 <prvGetNextExpireTime+0x18>
 80076fe:	2200      	movs	r2, #0
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d105      	bne.n	8007718 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800770c:	4b07      	ldr	r3, [pc, #28]	; (800772c <prvGetNextExpireTime+0x44>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	60fb      	str	r3, [r7, #12]
 8007716:	e001      	b.n	800771c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007718:	2300      	movs	r3, #0
 800771a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800771c:	68fb      	ldr	r3, [r7, #12]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3714      	adds	r7, #20
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	20000efc 	.word	0x20000efc

08007730 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007738:	f7ff fa7e 	bl	8006c38 <xTaskGetTickCount>
 800773c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800773e:	4b0b      	ldr	r3, [pc, #44]	; (800776c <prvSampleTimeNow+0x3c>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	429a      	cmp	r2, r3
 8007746:	d205      	bcs.n	8007754 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007748:	f000 f936 	bl	80079b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	601a      	str	r2, [r3, #0]
 8007752:	e002      	b.n	800775a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800775a:	4a04      	ldr	r2, [pc, #16]	; (800776c <prvSampleTimeNow+0x3c>)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007760:	68fb      	ldr	r3, [r7, #12]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	20000f0c 	.word	0x20000f0c

08007770 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
 800777c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800777e:	2300      	movs	r3, #0
 8007780:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	429a      	cmp	r2, r3
 8007794:	d812      	bhi.n	80077bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	1ad2      	subs	r2, r2, r3
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	699b      	ldr	r3, [r3, #24]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d302      	bcc.n	80077aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80077a4:	2301      	movs	r3, #1
 80077a6:	617b      	str	r3, [r7, #20]
 80077a8:	e01b      	b.n	80077e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80077aa:	4b10      	ldr	r3, [pc, #64]	; (80077ec <prvInsertTimerInActiveList+0x7c>)
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	3304      	adds	r3, #4
 80077b2:	4619      	mov	r1, r3
 80077b4:	4610      	mov	r0, r2
 80077b6:	f7fe fa08 	bl	8005bca <vListInsert>
 80077ba:	e012      	b.n	80077e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d206      	bcs.n	80077d2 <prvInsertTimerInActiveList+0x62>
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d302      	bcc.n	80077d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80077cc:	2301      	movs	r3, #1
 80077ce:	617b      	str	r3, [r7, #20]
 80077d0:	e007      	b.n	80077e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80077d2:	4b07      	ldr	r3, [pc, #28]	; (80077f0 <prvInsertTimerInActiveList+0x80>)
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	3304      	adds	r3, #4
 80077da:	4619      	mov	r1, r3
 80077dc:	4610      	mov	r0, r2
 80077de:	f7fe f9f4 	bl	8005bca <vListInsert>
		}
	}

	return xProcessTimerNow;
 80077e2:	697b      	ldr	r3, [r7, #20]
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3718      	adds	r7, #24
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	20000f00 	.word	0x20000f00
 80077f0:	20000efc 	.word	0x20000efc

080077f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b08e      	sub	sp, #56	; 0x38
 80077f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80077fa:	e0ca      	b.n	8007992 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	da18      	bge.n	8007834 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007802:	1d3b      	adds	r3, r7, #4
 8007804:	3304      	adds	r3, #4
 8007806:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10a      	bne.n	8007824 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800780e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007812:	f383 8811 	msr	BASEPRI, r3
 8007816:	f3bf 8f6f 	isb	sy
 800781a:	f3bf 8f4f 	dsb	sy
 800781e:	61fb      	str	r3, [r7, #28]
}
 8007820:	bf00      	nop
 8007822:	e7fe      	b.n	8007822 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800782a:	6850      	ldr	r0, [r2, #4]
 800782c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800782e:	6892      	ldr	r2, [r2, #8]
 8007830:	4611      	mov	r1, r2
 8007832:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	f2c0 80aa 	blt.w	8007990 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007842:	695b      	ldr	r3, [r3, #20]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d004      	beq.n	8007852 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784a:	3304      	adds	r3, #4
 800784c:	4618      	mov	r0, r3
 800784e:	f7fe f9f5 	bl	8005c3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007852:	463b      	mov	r3, r7
 8007854:	4618      	mov	r0, r3
 8007856:	f7ff ff6b 	bl	8007730 <prvSampleTimeNow>
 800785a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2b09      	cmp	r3, #9
 8007860:	f200 8097 	bhi.w	8007992 <prvProcessReceivedCommands+0x19e>
 8007864:	a201      	add	r2, pc, #4	; (adr r2, 800786c <prvProcessReceivedCommands+0x78>)
 8007866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786a:	bf00      	nop
 800786c:	08007895 	.word	0x08007895
 8007870:	08007895 	.word	0x08007895
 8007874:	08007895 	.word	0x08007895
 8007878:	08007909 	.word	0x08007909
 800787c:	0800791d 	.word	0x0800791d
 8007880:	08007967 	.word	0x08007967
 8007884:	08007895 	.word	0x08007895
 8007888:	08007895 	.word	0x08007895
 800788c:	08007909 	.word	0x08007909
 8007890:	0800791d 	.word	0x0800791d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007896:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800789a:	f043 0301 	orr.w	r3, r3, #1
 800789e:	b2da      	uxtb	r2, r3
 80078a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80078a6:	68ba      	ldr	r2, [r7, #8]
 80078a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	18d1      	adds	r1, r2, r3
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078b4:	f7ff ff5c 	bl	8007770 <prvInsertTimerInActiveList>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d069      	beq.n	8007992 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c0:	6a1b      	ldr	r3, [r3, #32]
 80078c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078cc:	f003 0304 	and.w	r3, r3, #4
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d05e      	beq.n	8007992 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	441a      	add	r2, r3
 80078dc:	2300      	movs	r3, #0
 80078de:	9300      	str	r3, [sp, #0]
 80078e0:	2300      	movs	r3, #0
 80078e2:	2100      	movs	r1, #0
 80078e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078e6:	f7ff fe05 	bl	80074f4 <xTimerGenericCommand>
 80078ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80078ec:	6a3b      	ldr	r3, [r7, #32]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d14f      	bne.n	8007992 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80078f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f6:	f383 8811 	msr	BASEPRI, r3
 80078fa:	f3bf 8f6f 	isb	sy
 80078fe:	f3bf 8f4f 	dsb	sy
 8007902:	61bb      	str	r3, [r7, #24]
}
 8007904:	bf00      	nop
 8007906:	e7fe      	b.n	8007906 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800790e:	f023 0301 	bic.w	r3, r3, #1
 8007912:	b2da      	uxtb	r2, r3
 8007914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007916:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800791a:	e03a      	b.n	8007992 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800791c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007922:	f043 0301 	orr.w	r3, r3, #1
 8007926:	b2da      	uxtb	r2, r3
 8007928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800792e:	68ba      	ldr	r2, [r7, #8]
 8007930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007932:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007936:	699b      	ldr	r3, [r3, #24]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d10a      	bne.n	8007952 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800793c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007940:	f383 8811 	msr	BASEPRI, r3
 8007944:	f3bf 8f6f 	isb	sy
 8007948:	f3bf 8f4f 	dsb	sy
 800794c:	617b      	str	r3, [r7, #20]
}
 800794e:	bf00      	nop
 8007950:	e7fe      	b.n	8007950 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007954:	699a      	ldr	r2, [r3, #24]
 8007956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007958:	18d1      	adds	r1, r2, r3
 800795a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800795e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007960:	f7ff ff06 	bl	8007770 <prvInsertTimerInActiveList>
					break;
 8007964:	e015      	b.n	8007992 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007968:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800796c:	f003 0302 	and.w	r3, r3, #2
 8007970:	2b00      	cmp	r3, #0
 8007972:	d103      	bne.n	800797c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007976:	f000 fbdb 	bl	8008130 <vPortFree>
 800797a:	e00a      	b.n	8007992 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800797c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007982:	f023 0301 	bic.w	r3, r3, #1
 8007986:	b2da      	uxtb	r2, r3
 8007988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800798e:	e000      	b.n	8007992 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007990:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007992:	4b08      	ldr	r3, [pc, #32]	; (80079b4 <prvProcessReceivedCommands+0x1c0>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	1d39      	adds	r1, r7, #4
 8007998:	2200      	movs	r2, #0
 800799a:	4618      	mov	r0, r3
 800799c:	f7fe fc16 	bl	80061cc <xQueueReceive>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f47f af2a 	bne.w	80077fc <prvProcessReceivedCommands+0x8>
	}
}
 80079a8:	bf00      	nop
 80079aa:	bf00      	nop
 80079ac:	3730      	adds	r7, #48	; 0x30
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	20000f04 	.word	0x20000f04

080079b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b088      	sub	sp, #32
 80079bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079be:	e048      	b.n	8007a52 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079c0:	4b2d      	ldr	r3, [pc, #180]	; (8007a78 <prvSwitchTimerLists+0xc0>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079ca:	4b2b      	ldr	r3, [pc, #172]	; (8007a78 <prvSwitchTimerLists+0xc0>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	3304      	adds	r3, #4
 80079d8:	4618      	mov	r0, r3
 80079da:	f7fe f92f 	bl	8005c3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	6a1b      	ldr	r3, [r3, #32]
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079ec:	f003 0304 	and.w	r3, r3, #4
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d02e      	beq.n	8007a52 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	693a      	ldr	r2, [r7, #16]
 80079fa:	4413      	add	r3, r2
 80079fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d90e      	bls.n	8007a24 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	68ba      	ldr	r2, [r7, #8]
 8007a0a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	68fa      	ldr	r2, [r7, #12]
 8007a10:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a12:	4b19      	ldr	r3, [pc, #100]	; (8007a78 <prvSwitchTimerLists+0xc0>)
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	3304      	adds	r3, #4
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	4610      	mov	r0, r2
 8007a1e:	f7fe f8d4 	bl	8005bca <vListInsert>
 8007a22:	e016      	b.n	8007a52 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a24:	2300      	movs	r3, #0
 8007a26:	9300      	str	r3, [sp, #0]
 8007a28:	2300      	movs	r3, #0
 8007a2a:	693a      	ldr	r2, [r7, #16]
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f7ff fd60 	bl	80074f4 <xTimerGenericCommand>
 8007a34:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d10a      	bne.n	8007a52 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a40:	f383 8811 	msr	BASEPRI, r3
 8007a44:	f3bf 8f6f 	isb	sy
 8007a48:	f3bf 8f4f 	dsb	sy
 8007a4c:	603b      	str	r3, [r7, #0]
}
 8007a4e:	bf00      	nop
 8007a50:	e7fe      	b.n	8007a50 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a52:	4b09      	ldr	r3, [pc, #36]	; (8007a78 <prvSwitchTimerLists+0xc0>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1b1      	bne.n	80079c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007a5c:	4b06      	ldr	r3, [pc, #24]	; (8007a78 <prvSwitchTimerLists+0xc0>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007a62:	4b06      	ldr	r3, [pc, #24]	; (8007a7c <prvSwitchTimerLists+0xc4>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a04      	ldr	r2, [pc, #16]	; (8007a78 <prvSwitchTimerLists+0xc0>)
 8007a68:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007a6a:	4a04      	ldr	r2, [pc, #16]	; (8007a7c <prvSwitchTimerLists+0xc4>)
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	6013      	str	r3, [r2, #0]
}
 8007a70:	bf00      	nop
 8007a72:	3718      	adds	r7, #24
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	20000efc 	.word	0x20000efc
 8007a7c:	20000f00 	.word	0x20000f00

08007a80 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007a86:	f000 f965 	bl	8007d54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007a8a:	4b15      	ldr	r3, [pc, #84]	; (8007ae0 <prvCheckForValidListAndQueue+0x60>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d120      	bne.n	8007ad4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007a92:	4814      	ldr	r0, [pc, #80]	; (8007ae4 <prvCheckForValidListAndQueue+0x64>)
 8007a94:	f7fe f848 	bl	8005b28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007a98:	4813      	ldr	r0, [pc, #76]	; (8007ae8 <prvCheckForValidListAndQueue+0x68>)
 8007a9a:	f7fe f845 	bl	8005b28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007a9e:	4b13      	ldr	r3, [pc, #76]	; (8007aec <prvCheckForValidListAndQueue+0x6c>)
 8007aa0:	4a10      	ldr	r2, [pc, #64]	; (8007ae4 <prvCheckForValidListAndQueue+0x64>)
 8007aa2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007aa4:	4b12      	ldr	r3, [pc, #72]	; (8007af0 <prvCheckForValidListAndQueue+0x70>)
 8007aa6:	4a10      	ldr	r2, [pc, #64]	; (8007ae8 <prvCheckForValidListAndQueue+0x68>)
 8007aa8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007aaa:	2300      	movs	r3, #0
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	4b11      	ldr	r3, [pc, #68]	; (8007af4 <prvCheckForValidListAndQueue+0x74>)
 8007ab0:	4a11      	ldr	r2, [pc, #68]	; (8007af8 <prvCheckForValidListAndQueue+0x78>)
 8007ab2:	2110      	movs	r1, #16
 8007ab4:	200a      	movs	r0, #10
 8007ab6:	f7fe f953 	bl	8005d60 <xQueueGenericCreateStatic>
 8007aba:	4603      	mov	r3, r0
 8007abc:	4a08      	ldr	r2, [pc, #32]	; (8007ae0 <prvCheckForValidListAndQueue+0x60>)
 8007abe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007ac0:	4b07      	ldr	r3, [pc, #28]	; (8007ae0 <prvCheckForValidListAndQueue+0x60>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d005      	beq.n	8007ad4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007ac8:	4b05      	ldr	r3, [pc, #20]	; (8007ae0 <prvCheckForValidListAndQueue+0x60>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	490b      	ldr	r1, [pc, #44]	; (8007afc <prvCheckForValidListAndQueue+0x7c>)
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7fe fd6c 	bl	80065ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ad4:	f000 f96e 	bl	8007db4 <vPortExitCritical>
}
 8007ad8:	bf00      	nop
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	20000f04 	.word	0x20000f04
 8007ae4:	20000ed4 	.word	0x20000ed4
 8007ae8:	20000ee8 	.word	0x20000ee8
 8007aec:	20000efc 	.word	0x20000efc
 8007af0:	20000f00 	.word	0x20000f00
 8007af4:	20000fb0 	.word	0x20000fb0
 8007af8:	20000f10 	.word	0x20000f10
 8007afc:	0800d5a4 	.word	0x0800d5a4

08007b00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	3b04      	subs	r3, #4
 8007b10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007b18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	3b04      	subs	r3, #4
 8007b1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	f023 0201 	bic.w	r2, r3, #1
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	3b04      	subs	r3, #4
 8007b2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b30:	4a0c      	ldr	r2, [pc, #48]	; (8007b64 <pxPortInitialiseStack+0x64>)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	3b14      	subs	r3, #20
 8007b3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	3b04      	subs	r3, #4
 8007b46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f06f 0202 	mvn.w	r2, #2
 8007b4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	3b20      	subs	r3, #32
 8007b54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b56:	68fb      	ldr	r3, [r7, #12]
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3714      	adds	r7, #20
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr
 8007b64:	08007b69 	.word	0x08007b69

08007b68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b72:	4b12      	ldr	r3, [pc, #72]	; (8007bbc <prvTaskExitError+0x54>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b7a:	d00a      	beq.n	8007b92 <prvTaskExitError+0x2a>
	__asm volatile
 8007b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b80:	f383 8811 	msr	BASEPRI, r3
 8007b84:	f3bf 8f6f 	isb	sy
 8007b88:	f3bf 8f4f 	dsb	sy
 8007b8c:	60fb      	str	r3, [r7, #12]
}
 8007b8e:	bf00      	nop
 8007b90:	e7fe      	b.n	8007b90 <prvTaskExitError+0x28>
	__asm volatile
 8007b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b96:	f383 8811 	msr	BASEPRI, r3
 8007b9a:	f3bf 8f6f 	isb	sy
 8007b9e:	f3bf 8f4f 	dsb	sy
 8007ba2:	60bb      	str	r3, [r7, #8]
}
 8007ba4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ba6:	bf00      	nop
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d0fc      	beq.n	8007ba8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007bae:	bf00      	nop
 8007bb0:	bf00      	nop
 8007bb2:	3714      	adds	r7, #20
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr
 8007bbc:	20000014 	.word	0x20000014

08007bc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007bc0:	4b07      	ldr	r3, [pc, #28]	; (8007be0 <pxCurrentTCBConst2>)
 8007bc2:	6819      	ldr	r1, [r3, #0]
 8007bc4:	6808      	ldr	r0, [r1, #0]
 8007bc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bca:	f380 8809 	msr	PSP, r0
 8007bce:	f3bf 8f6f 	isb	sy
 8007bd2:	f04f 0000 	mov.w	r0, #0
 8007bd6:	f380 8811 	msr	BASEPRI, r0
 8007bda:	4770      	bx	lr
 8007bdc:	f3af 8000 	nop.w

08007be0 <pxCurrentTCBConst2>:
 8007be0:	200009d4 	.word	0x200009d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007be4:	bf00      	nop
 8007be6:	bf00      	nop

08007be8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007be8:	4808      	ldr	r0, [pc, #32]	; (8007c0c <prvPortStartFirstTask+0x24>)
 8007bea:	6800      	ldr	r0, [r0, #0]
 8007bec:	6800      	ldr	r0, [r0, #0]
 8007bee:	f380 8808 	msr	MSP, r0
 8007bf2:	f04f 0000 	mov.w	r0, #0
 8007bf6:	f380 8814 	msr	CONTROL, r0
 8007bfa:	b662      	cpsie	i
 8007bfc:	b661      	cpsie	f
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	f3bf 8f6f 	isb	sy
 8007c06:	df00      	svc	0
 8007c08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c0a:	bf00      	nop
 8007c0c:	e000ed08 	.word	0xe000ed08

08007c10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c16:	4b46      	ldr	r3, [pc, #280]	; (8007d30 <xPortStartScheduler+0x120>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a46      	ldr	r2, [pc, #280]	; (8007d34 <xPortStartScheduler+0x124>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d10a      	bne.n	8007c36 <xPortStartScheduler+0x26>
	__asm volatile
 8007c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c24:	f383 8811 	msr	BASEPRI, r3
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	613b      	str	r3, [r7, #16]
}
 8007c32:	bf00      	nop
 8007c34:	e7fe      	b.n	8007c34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c36:	4b3e      	ldr	r3, [pc, #248]	; (8007d30 <xPortStartScheduler+0x120>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a3f      	ldr	r2, [pc, #252]	; (8007d38 <xPortStartScheduler+0x128>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d10a      	bne.n	8007c56 <xPortStartScheduler+0x46>
	__asm volatile
 8007c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c44:	f383 8811 	msr	BASEPRI, r3
 8007c48:	f3bf 8f6f 	isb	sy
 8007c4c:	f3bf 8f4f 	dsb	sy
 8007c50:	60fb      	str	r3, [r7, #12]
}
 8007c52:	bf00      	nop
 8007c54:	e7fe      	b.n	8007c54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c56:	4b39      	ldr	r3, [pc, #228]	; (8007d3c <xPortStartScheduler+0x12c>)
 8007c58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	22ff      	movs	r2, #255	; 0xff
 8007c66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c70:	78fb      	ldrb	r3, [r7, #3]
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007c78:	b2da      	uxtb	r2, r3
 8007c7a:	4b31      	ldr	r3, [pc, #196]	; (8007d40 <xPortStartScheduler+0x130>)
 8007c7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c7e:	4b31      	ldr	r3, [pc, #196]	; (8007d44 <xPortStartScheduler+0x134>)
 8007c80:	2207      	movs	r2, #7
 8007c82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c84:	e009      	b.n	8007c9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007c86:	4b2f      	ldr	r3, [pc, #188]	; (8007d44 <xPortStartScheduler+0x134>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	4a2d      	ldr	r2, [pc, #180]	; (8007d44 <xPortStartScheduler+0x134>)
 8007c8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c90:	78fb      	ldrb	r3, [r7, #3]
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	005b      	lsls	r3, r3, #1
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c9a:	78fb      	ldrb	r3, [r7, #3]
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ca2:	2b80      	cmp	r3, #128	; 0x80
 8007ca4:	d0ef      	beq.n	8007c86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ca6:	4b27      	ldr	r3, [pc, #156]	; (8007d44 <xPortStartScheduler+0x134>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f1c3 0307 	rsb	r3, r3, #7
 8007cae:	2b04      	cmp	r3, #4
 8007cb0:	d00a      	beq.n	8007cc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb6:	f383 8811 	msr	BASEPRI, r3
 8007cba:	f3bf 8f6f 	isb	sy
 8007cbe:	f3bf 8f4f 	dsb	sy
 8007cc2:	60bb      	str	r3, [r7, #8]
}
 8007cc4:	bf00      	nop
 8007cc6:	e7fe      	b.n	8007cc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007cc8:	4b1e      	ldr	r3, [pc, #120]	; (8007d44 <xPortStartScheduler+0x134>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	021b      	lsls	r3, r3, #8
 8007cce:	4a1d      	ldr	r2, [pc, #116]	; (8007d44 <xPortStartScheduler+0x134>)
 8007cd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007cd2:	4b1c      	ldr	r3, [pc, #112]	; (8007d44 <xPortStartScheduler+0x134>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007cda:	4a1a      	ldr	r2, [pc, #104]	; (8007d44 <xPortStartScheduler+0x134>)
 8007cdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	b2da      	uxtb	r2, r3
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ce6:	4b18      	ldr	r3, [pc, #96]	; (8007d48 <xPortStartScheduler+0x138>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a17      	ldr	r2, [pc, #92]	; (8007d48 <xPortStartScheduler+0x138>)
 8007cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007cf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007cf2:	4b15      	ldr	r3, [pc, #84]	; (8007d48 <xPortStartScheduler+0x138>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a14      	ldr	r2, [pc, #80]	; (8007d48 <xPortStartScheduler+0x138>)
 8007cf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007cfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007cfe:	f000 f8dd 	bl	8007ebc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d02:	4b12      	ldr	r3, [pc, #72]	; (8007d4c <xPortStartScheduler+0x13c>)
 8007d04:	2200      	movs	r2, #0
 8007d06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d08:	f000 f8fc 	bl	8007f04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d0c:	4b10      	ldr	r3, [pc, #64]	; (8007d50 <xPortStartScheduler+0x140>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a0f      	ldr	r2, [pc, #60]	; (8007d50 <xPortStartScheduler+0x140>)
 8007d12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007d16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d18:	f7ff ff66 	bl	8007be8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d1c:	f7ff f856 	bl	8006dcc <vTaskSwitchContext>
	prvTaskExitError();
 8007d20:	f7ff ff22 	bl	8007b68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3718      	adds	r7, #24
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	e000ed00 	.word	0xe000ed00
 8007d34:	410fc271 	.word	0x410fc271
 8007d38:	410fc270 	.word	0x410fc270
 8007d3c:	e000e400 	.word	0xe000e400
 8007d40:	20001000 	.word	0x20001000
 8007d44:	20001004 	.word	0x20001004
 8007d48:	e000ed20 	.word	0xe000ed20
 8007d4c:	20000014 	.word	0x20000014
 8007d50:	e000ef34 	.word	0xe000ef34

08007d54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
	__asm volatile
 8007d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5e:	f383 8811 	msr	BASEPRI, r3
 8007d62:	f3bf 8f6f 	isb	sy
 8007d66:	f3bf 8f4f 	dsb	sy
 8007d6a:	607b      	str	r3, [r7, #4]
}
 8007d6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d6e:	4b0f      	ldr	r3, [pc, #60]	; (8007dac <vPortEnterCritical+0x58>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	3301      	adds	r3, #1
 8007d74:	4a0d      	ldr	r2, [pc, #52]	; (8007dac <vPortEnterCritical+0x58>)
 8007d76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d78:	4b0c      	ldr	r3, [pc, #48]	; (8007dac <vPortEnterCritical+0x58>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d10f      	bne.n	8007da0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d80:	4b0b      	ldr	r3, [pc, #44]	; (8007db0 <vPortEnterCritical+0x5c>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00a      	beq.n	8007da0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8e:	f383 8811 	msr	BASEPRI, r3
 8007d92:	f3bf 8f6f 	isb	sy
 8007d96:	f3bf 8f4f 	dsb	sy
 8007d9a:	603b      	str	r3, [r7, #0]
}
 8007d9c:	bf00      	nop
 8007d9e:	e7fe      	b.n	8007d9e <vPortEnterCritical+0x4a>
	}
}
 8007da0:	bf00      	nop
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr
 8007dac:	20000014 	.word	0x20000014
 8007db0:	e000ed04 	.word	0xe000ed04

08007db4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007dba:	4b12      	ldr	r3, [pc, #72]	; (8007e04 <vPortExitCritical+0x50>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d10a      	bne.n	8007dd8 <vPortExitCritical+0x24>
	__asm volatile
 8007dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc6:	f383 8811 	msr	BASEPRI, r3
 8007dca:	f3bf 8f6f 	isb	sy
 8007dce:	f3bf 8f4f 	dsb	sy
 8007dd2:	607b      	str	r3, [r7, #4]
}
 8007dd4:	bf00      	nop
 8007dd6:	e7fe      	b.n	8007dd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007dd8:	4b0a      	ldr	r3, [pc, #40]	; (8007e04 <vPortExitCritical+0x50>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	4a09      	ldr	r2, [pc, #36]	; (8007e04 <vPortExitCritical+0x50>)
 8007de0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007de2:	4b08      	ldr	r3, [pc, #32]	; (8007e04 <vPortExitCritical+0x50>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d105      	bne.n	8007df6 <vPortExitCritical+0x42>
 8007dea:	2300      	movs	r3, #0
 8007dec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	f383 8811 	msr	BASEPRI, r3
}
 8007df4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007df6:	bf00      	nop
 8007df8:	370c      	adds	r7, #12
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	20000014 	.word	0x20000014
	...

08007e10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e10:	f3ef 8009 	mrs	r0, PSP
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	4b15      	ldr	r3, [pc, #84]	; (8007e70 <pxCurrentTCBConst>)
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	f01e 0f10 	tst.w	lr, #16
 8007e20:	bf08      	it	eq
 8007e22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e2a:	6010      	str	r0, [r2, #0]
 8007e2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e34:	f380 8811 	msr	BASEPRI, r0
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	f3bf 8f6f 	isb	sy
 8007e40:	f7fe ffc4 	bl	8006dcc <vTaskSwitchContext>
 8007e44:	f04f 0000 	mov.w	r0, #0
 8007e48:	f380 8811 	msr	BASEPRI, r0
 8007e4c:	bc09      	pop	{r0, r3}
 8007e4e:	6819      	ldr	r1, [r3, #0]
 8007e50:	6808      	ldr	r0, [r1, #0]
 8007e52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e56:	f01e 0f10 	tst.w	lr, #16
 8007e5a:	bf08      	it	eq
 8007e5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e60:	f380 8809 	msr	PSP, r0
 8007e64:	f3bf 8f6f 	isb	sy
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	f3af 8000 	nop.w

08007e70 <pxCurrentTCBConst>:
 8007e70:	200009d4 	.word	0x200009d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e74:	bf00      	nop
 8007e76:	bf00      	nop

08007e78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e82:	f383 8811 	msr	BASEPRI, r3
 8007e86:	f3bf 8f6f 	isb	sy
 8007e8a:	f3bf 8f4f 	dsb	sy
 8007e8e:	607b      	str	r3, [r7, #4]
}
 8007e90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e92:	f7fe fee1 	bl	8006c58 <xTaskIncrementTick>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d003      	beq.n	8007ea4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e9c:	4b06      	ldr	r3, [pc, #24]	; (8007eb8 <xPortSysTickHandler+0x40>)
 8007e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ea2:	601a      	str	r2, [r3, #0]
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	f383 8811 	msr	BASEPRI, r3
}
 8007eae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007eb0:	bf00      	nop
 8007eb2:	3708      	adds	r7, #8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	e000ed04 	.word	0xe000ed04

08007ebc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ec0:	4b0b      	ldr	r3, [pc, #44]	; (8007ef0 <vPortSetupTimerInterrupt+0x34>)
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ec6:	4b0b      	ldr	r3, [pc, #44]	; (8007ef4 <vPortSetupTimerInterrupt+0x38>)
 8007ec8:	2200      	movs	r2, #0
 8007eca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007ecc:	4b0a      	ldr	r3, [pc, #40]	; (8007ef8 <vPortSetupTimerInterrupt+0x3c>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a0a      	ldr	r2, [pc, #40]	; (8007efc <vPortSetupTimerInterrupt+0x40>)
 8007ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ed6:	099b      	lsrs	r3, r3, #6
 8007ed8:	4a09      	ldr	r2, [pc, #36]	; (8007f00 <vPortSetupTimerInterrupt+0x44>)
 8007eda:	3b01      	subs	r3, #1
 8007edc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007ede:	4b04      	ldr	r3, [pc, #16]	; (8007ef0 <vPortSetupTimerInterrupt+0x34>)
 8007ee0:	2207      	movs	r2, #7
 8007ee2:	601a      	str	r2, [r3, #0]
}
 8007ee4:	bf00      	nop
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	e000e010 	.word	0xe000e010
 8007ef4:	e000e018 	.word	0xe000e018
 8007ef8:	20000008 	.word	0x20000008
 8007efc:	10624dd3 	.word	0x10624dd3
 8007f00:	e000e014 	.word	0xe000e014

08007f04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007f14 <vPortEnableVFP+0x10>
 8007f08:	6801      	ldr	r1, [r0, #0]
 8007f0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007f0e:	6001      	str	r1, [r0, #0]
 8007f10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f12:	bf00      	nop
 8007f14:	e000ed88 	.word	0xe000ed88

08007f18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f1e:	f3ef 8305 	mrs	r3, IPSR
 8007f22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2b0f      	cmp	r3, #15
 8007f28:	d914      	bls.n	8007f54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f2a:	4a17      	ldr	r2, [pc, #92]	; (8007f88 <vPortValidateInterruptPriority+0x70>)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	4413      	add	r3, r2
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f34:	4b15      	ldr	r3, [pc, #84]	; (8007f8c <vPortValidateInterruptPriority+0x74>)
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	7afa      	ldrb	r2, [r7, #11]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d20a      	bcs.n	8007f54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f42:	f383 8811 	msr	BASEPRI, r3
 8007f46:	f3bf 8f6f 	isb	sy
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	607b      	str	r3, [r7, #4]
}
 8007f50:	bf00      	nop
 8007f52:	e7fe      	b.n	8007f52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f54:	4b0e      	ldr	r3, [pc, #56]	; (8007f90 <vPortValidateInterruptPriority+0x78>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f5c:	4b0d      	ldr	r3, [pc, #52]	; (8007f94 <vPortValidateInterruptPriority+0x7c>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d90a      	bls.n	8007f7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f68:	f383 8811 	msr	BASEPRI, r3
 8007f6c:	f3bf 8f6f 	isb	sy
 8007f70:	f3bf 8f4f 	dsb	sy
 8007f74:	603b      	str	r3, [r7, #0]
}
 8007f76:	bf00      	nop
 8007f78:	e7fe      	b.n	8007f78 <vPortValidateInterruptPriority+0x60>
	}
 8007f7a:	bf00      	nop
 8007f7c:	3714      	adds	r7, #20
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop
 8007f88:	e000e3f0 	.word	0xe000e3f0
 8007f8c:	20001000 	.word	0x20001000
 8007f90:	e000ed0c 	.word	0xe000ed0c
 8007f94:	20001004 	.word	0x20001004

08007f98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b08a      	sub	sp, #40	; 0x28
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007fa4:	f7fe fd9c 	bl	8006ae0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007fa8:	4b5b      	ldr	r3, [pc, #364]	; (8008118 <pvPortMalloc+0x180>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d101      	bne.n	8007fb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007fb0:	f000 f920 	bl	80081f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007fb4:	4b59      	ldr	r3, [pc, #356]	; (800811c <pvPortMalloc+0x184>)
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4013      	ands	r3, r2
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	f040 8093 	bne.w	80080e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d01d      	beq.n	8008004 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007fc8:	2208      	movs	r2, #8
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4413      	add	r3, r2
 8007fce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f003 0307 	and.w	r3, r3, #7
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d014      	beq.n	8008004 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f023 0307 	bic.w	r3, r3, #7
 8007fe0:	3308      	adds	r3, #8
 8007fe2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f003 0307 	and.w	r3, r3, #7
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00a      	beq.n	8008004 <pvPortMalloc+0x6c>
	__asm volatile
 8007fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff2:	f383 8811 	msr	BASEPRI, r3
 8007ff6:	f3bf 8f6f 	isb	sy
 8007ffa:	f3bf 8f4f 	dsb	sy
 8007ffe:	617b      	str	r3, [r7, #20]
}
 8008000:	bf00      	nop
 8008002:	e7fe      	b.n	8008002 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d06e      	beq.n	80080e8 <pvPortMalloc+0x150>
 800800a:	4b45      	ldr	r3, [pc, #276]	; (8008120 <pvPortMalloc+0x188>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	429a      	cmp	r2, r3
 8008012:	d869      	bhi.n	80080e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008014:	4b43      	ldr	r3, [pc, #268]	; (8008124 <pvPortMalloc+0x18c>)
 8008016:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008018:	4b42      	ldr	r3, [pc, #264]	; (8008124 <pvPortMalloc+0x18c>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800801e:	e004      	b.n	800802a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008022:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800802a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	429a      	cmp	r2, r3
 8008032:	d903      	bls.n	800803c <pvPortMalloc+0xa4>
 8008034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1f1      	bne.n	8008020 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800803c:	4b36      	ldr	r3, [pc, #216]	; (8008118 <pvPortMalloc+0x180>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008042:	429a      	cmp	r2, r3
 8008044:	d050      	beq.n	80080e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2208      	movs	r2, #8
 800804c:	4413      	add	r3, r2
 800804e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	6a3b      	ldr	r3, [r7, #32]
 8008056:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805a:	685a      	ldr	r2, [r3, #4]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	1ad2      	subs	r2, r2, r3
 8008060:	2308      	movs	r3, #8
 8008062:	005b      	lsls	r3, r3, #1
 8008064:	429a      	cmp	r2, r3
 8008066:	d91f      	bls.n	80080a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4413      	add	r3, r2
 800806e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	f003 0307 	and.w	r3, r3, #7
 8008076:	2b00      	cmp	r3, #0
 8008078:	d00a      	beq.n	8008090 <pvPortMalloc+0xf8>
	__asm volatile
 800807a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807e:	f383 8811 	msr	BASEPRI, r3
 8008082:	f3bf 8f6f 	isb	sy
 8008086:	f3bf 8f4f 	dsb	sy
 800808a:	613b      	str	r3, [r7, #16]
}
 800808c:	bf00      	nop
 800808e:	e7fe      	b.n	800808e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	685a      	ldr	r2, [r3, #4]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	1ad2      	subs	r2, r2, r3
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800809c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80080a2:	69b8      	ldr	r0, [r7, #24]
 80080a4:	f000 f908 	bl	80082b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80080a8:	4b1d      	ldr	r3, [pc, #116]	; (8008120 <pvPortMalloc+0x188>)
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	4a1b      	ldr	r2, [pc, #108]	; (8008120 <pvPortMalloc+0x188>)
 80080b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80080b6:	4b1a      	ldr	r3, [pc, #104]	; (8008120 <pvPortMalloc+0x188>)
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	4b1b      	ldr	r3, [pc, #108]	; (8008128 <pvPortMalloc+0x190>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d203      	bcs.n	80080ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80080c2:	4b17      	ldr	r3, [pc, #92]	; (8008120 <pvPortMalloc+0x188>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a18      	ldr	r2, [pc, #96]	; (8008128 <pvPortMalloc+0x190>)
 80080c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80080ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	4b13      	ldr	r3, [pc, #76]	; (800811c <pvPortMalloc+0x184>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	431a      	orrs	r2, r3
 80080d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80080d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080da:	2200      	movs	r2, #0
 80080dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80080de:	4b13      	ldr	r3, [pc, #76]	; (800812c <pvPortMalloc+0x194>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	3301      	adds	r3, #1
 80080e4:	4a11      	ldr	r2, [pc, #68]	; (800812c <pvPortMalloc+0x194>)
 80080e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80080e8:	f7fe fd08 	bl	8006afc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	f003 0307 	and.w	r3, r3, #7
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00a      	beq.n	800810c <pvPortMalloc+0x174>
	__asm volatile
 80080f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fa:	f383 8811 	msr	BASEPRI, r3
 80080fe:	f3bf 8f6f 	isb	sy
 8008102:	f3bf 8f4f 	dsb	sy
 8008106:	60fb      	str	r3, [r7, #12]
}
 8008108:	bf00      	nop
 800810a:	e7fe      	b.n	800810a <pvPortMalloc+0x172>
	return pvReturn;
 800810c:	69fb      	ldr	r3, [r7, #28]
}
 800810e:	4618      	mov	r0, r3
 8008110:	3728      	adds	r7, #40	; 0x28
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	20004c10 	.word	0x20004c10
 800811c:	20004c24 	.word	0x20004c24
 8008120:	20004c14 	.word	0x20004c14
 8008124:	20004c08 	.word	0x20004c08
 8008128:	20004c18 	.word	0x20004c18
 800812c:	20004c1c 	.word	0x20004c1c

08008130 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b086      	sub	sp, #24
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d04d      	beq.n	80081de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008142:	2308      	movs	r3, #8
 8008144:	425b      	negs	r3, r3
 8008146:	697a      	ldr	r2, [r7, #20]
 8008148:	4413      	add	r3, r2
 800814a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	685a      	ldr	r2, [r3, #4]
 8008154:	4b24      	ldr	r3, [pc, #144]	; (80081e8 <vPortFree+0xb8>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4013      	ands	r3, r2
 800815a:	2b00      	cmp	r3, #0
 800815c:	d10a      	bne.n	8008174 <vPortFree+0x44>
	__asm volatile
 800815e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008162:	f383 8811 	msr	BASEPRI, r3
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	60fb      	str	r3, [r7, #12]
}
 8008170:	bf00      	nop
 8008172:	e7fe      	b.n	8008172 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00a      	beq.n	8008192 <vPortFree+0x62>
	__asm volatile
 800817c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008180:	f383 8811 	msr	BASEPRI, r3
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	60bb      	str	r3, [r7, #8]
}
 800818e:	bf00      	nop
 8008190:	e7fe      	b.n	8008190 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	685a      	ldr	r2, [r3, #4]
 8008196:	4b14      	ldr	r3, [pc, #80]	; (80081e8 <vPortFree+0xb8>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4013      	ands	r3, r2
 800819c:	2b00      	cmp	r3, #0
 800819e:	d01e      	beq.n	80081de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d11a      	bne.n	80081de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	685a      	ldr	r2, [r3, #4]
 80081ac:	4b0e      	ldr	r3, [pc, #56]	; (80081e8 <vPortFree+0xb8>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	43db      	mvns	r3, r3
 80081b2:	401a      	ands	r2, r3
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80081b8:	f7fe fc92 	bl	8006ae0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	685a      	ldr	r2, [r3, #4]
 80081c0:	4b0a      	ldr	r3, [pc, #40]	; (80081ec <vPortFree+0xbc>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4413      	add	r3, r2
 80081c6:	4a09      	ldr	r2, [pc, #36]	; (80081ec <vPortFree+0xbc>)
 80081c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80081ca:	6938      	ldr	r0, [r7, #16]
 80081cc:	f000 f874 	bl	80082b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80081d0:	4b07      	ldr	r3, [pc, #28]	; (80081f0 <vPortFree+0xc0>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	3301      	adds	r3, #1
 80081d6:	4a06      	ldr	r2, [pc, #24]	; (80081f0 <vPortFree+0xc0>)
 80081d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80081da:	f7fe fc8f 	bl	8006afc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80081de:	bf00      	nop
 80081e0:	3718      	adds	r7, #24
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	20004c24 	.word	0x20004c24
 80081ec:	20004c14 	.word	0x20004c14
 80081f0:	20004c20 	.word	0x20004c20

080081f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80081fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80081fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008200:	4b27      	ldr	r3, [pc, #156]	; (80082a0 <prvHeapInit+0xac>)
 8008202:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f003 0307 	and.w	r3, r3, #7
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00c      	beq.n	8008228 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	3307      	adds	r3, #7
 8008212:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f023 0307 	bic.w	r3, r3, #7
 800821a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800821c:	68ba      	ldr	r2, [r7, #8]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	4a1f      	ldr	r2, [pc, #124]	; (80082a0 <prvHeapInit+0xac>)
 8008224:	4413      	add	r3, r2
 8008226:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800822c:	4a1d      	ldr	r2, [pc, #116]	; (80082a4 <prvHeapInit+0xb0>)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008232:	4b1c      	ldr	r3, [pc, #112]	; (80082a4 <prvHeapInit+0xb0>)
 8008234:	2200      	movs	r2, #0
 8008236:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	4413      	add	r3, r2
 800823e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008240:	2208      	movs	r2, #8
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	1a9b      	subs	r3, r3, r2
 8008246:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f023 0307 	bic.w	r3, r3, #7
 800824e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	4a15      	ldr	r2, [pc, #84]	; (80082a8 <prvHeapInit+0xb4>)
 8008254:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008256:	4b14      	ldr	r3, [pc, #80]	; (80082a8 <prvHeapInit+0xb4>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2200      	movs	r2, #0
 800825c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800825e:	4b12      	ldr	r3, [pc, #72]	; (80082a8 <prvHeapInit+0xb4>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2200      	movs	r2, #0
 8008264:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	1ad2      	subs	r2, r2, r3
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008274:	4b0c      	ldr	r3, [pc, #48]	; (80082a8 <prvHeapInit+0xb4>)
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	4a0a      	ldr	r2, [pc, #40]	; (80082ac <prvHeapInit+0xb8>)
 8008282:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	4a09      	ldr	r2, [pc, #36]	; (80082b0 <prvHeapInit+0xbc>)
 800828a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800828c:	4b09      	ldr	r3, [pc, #36]	; (80082b4 <prvHeapInit+0xc0>)
 800828e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008292:	601a      	str	r2, [r3, #0]
}
 8008294:	bf00      	nop
 8008296:	3714      	adds	r7, #20
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr
 80082a0:	20001008 	.word	0x20001008
 80082a4:	20004c08 	.word	0x20004c08
 80082a8:	20004c10 	.word	0x20004c10
 80082ac:	20004c18 	.word	0x20004c18
 80082b0:	20004c14 	.word	0x20004c14
 80082b4:	20004c24 	.word	0x20004c24

080082b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80082b8:	b480      	push	{r7}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80082c0:	4b28      	ldr	r3, [pc, #160]	; (8008364 <prvInsertBlockIntoFreeList+0xac>)
 80082c2:	60fb      	str	r3, [r7, #12]
 80082c4:	e002      	b.n	80082cc <prvInsertBlockIntoFreeList+0x14>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	60fb      	str	r3, [r7, #12]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d8f7      	bhi.n	80082c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	68ba      	ldr	r2, [r7, #8]
 80082e0:	4413      	add	r3, r2
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d108      	bne.n	80082fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	685a      	ldr	r2, [r3, #4]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	441a      	add	r2, r3
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	441a      	add	r2, r3
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	429a      	cmp	r2, r3
 800830c:	d118      	bne.n	8008340 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	4b15      	ldr	r3, [pc, #84]	; (8008368 <prvInsertBlockIntoFreeList+0xb0>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	429a      	cmp	r2, r3
 8008318:	d00d      	beq.n	8008336 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	685a      	ldr	r2, [r3, #4]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	441a      	add	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	601a      	str	r2, [r3, #0]
 8008334:	e008      	b.n	8008348 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008336:	4b0c      	ldr	r3, [pc, #48]	; (8008368 <prvInsertBlockIntoFreeList+0xb0>)
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	601a      	str	r2, [r3, #0]
 800833e:	e003      	b.n	8008348 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	429a      	cmp	r2, r3
 800834e:	d002      	beq.n	8008356 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008356:	bf00      	nop
 8008358:	3714      	adds	r7, #20
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	20004c08 	.word	0x20004c08
 8008368:	20004c10 	.word	0x20004c10

0800836c <__errno>:
 800836c:	4b01      	ldr	r3, [pc, #4]	; (8008374 <__errno+0x8>)
 800836e:	6818      	ldr	r0, [r3, #0]
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	20000018 	.word	0x20000018

08008378 <__libc_init_array>:
 8008378:	b570      	push	{r4, r5, r6, lr}
 800837a:	4d0d      	ldr	r5, [pc, #52]	; (80083b0 <__libc_init_array+0x38>)
 800837c:	4c0d      	ldr	r4, [pc, #52]	; (80083b4 <__libc_init_array+0x3c>)
 800837e:	1b64      	subs	r4, r4, r5
 8008380:	10a4      	asrs	r4, r4, #2
 8008382:	2600      	movs	r6, #0
 8008384:	42a6      	cmp	r6, r4
 8008386:	d109      	bne.n	800839c <__libc_init_array+0x24>
 8008388:	4d0b      	ldr	r5, [pc, #44]	; (80083b8 <__libc_init_array+0x40>)
 800838a:	4c0c      	ldr	r4, [pc, #48]	; (80083bc <__libc_init_array+0x44>)
 800838c:	f005 f882 	bl	800d494 <_init>
 8008390:	1b64      	subs	r4, r4, r5
 8008392:	10a4      	asrs	r4, r4, #2
 8008394:	2600      	movs	r6, #0
 8008396:	42a6      	cmp	r6, r4
 8008398:	d105      	bne.n	80083a6 <__libc_init_array+0x2e>
 800839a:	bd70      	pop	{r4, r5, r6, pc}
 800839c:	f855 3b04 	ldr.w	r3, [r5], #4
 80083a0:	4798      	blx	r3
 80083a2:	3601      	adds	r6, #1
 80083a4:	e7ee      	b.n	8008384 <__libc_init_array+0xc>
 80083a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80083aa:	4798      	blx	r3
 80083ac:	3601      	adds	r6, #1
 80083ae:	e7f2      	b.n	8008396 <__libc_init_array+0x1e>
 80083b0:	0800e254 	.word	0x0800e254
 80083b4:	0800e254 	.word	0x0800e254
 80083b8:	0800e254 	.word	0x0800e254
 80083bc:	0800e258 	.word	0x0800e258

080083c0 <memcpy>:
 80083c0:	440a      	add	r2, r1
 80083c2:	4291      	cmp	r1, r2
 80083c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80083c8:	d100      	bne.n	80083cc <memcpy+0xc>
 80083ca:	4770      	bx	lr
 80083cc:	b510      	push	{r4, lr}
 80083ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083d6:	4291      	cmp	r1, r2
 80083d8:	d1f9      	bne.n	80083ce <memcpy+0xe>
 80083da:	bd10      	pop	{r4, pc}

080083dc <memset>:
 80083dc:	4402      	add	r2, r0
 80083de:	4603      	mov	r3, r0
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d100      	bne.n	80083e6 <memset+0xa>
 80083e4:	4770      	bx	lr
 80083e6:	f803 1b01 	strb.w	r1, [r3], #1
 80083ea:	e7f9      	b.n	80083e0 <memset+0x4>

080083ec <__cvt>:
 80083ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083f0:	ec55 4b10 	vmov	r4, r5, d0
 80083f4:	2d00      	cmp	r5, #0
 80083f6:	460e      	mov	r6, r1
 80083f8:	4619      	mov	r1, r3
 80083fa:	462b      	mov	r3, r5
 80083fc:	bfbb      	ittet	lt
 80083fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008402:	461d      	movlt	r5, r3
 8008404:	2300      	movge	r3, #0
 8008406:	232d      	movlt	r3, #45	; 0x2d
 8008408:	700b      	strb	r3, [r1, #0]
 800840a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800840c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008410:	4691      	mov	r9, r2
 8008412:	f023 0820 	bic.w	r8, r3, #32
 8008416:	bfbc      	itt	lt
 8008418:	4622      	movlt	r2, r4
 800841a:	4614      	movlt	r4, r2
 800841c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008420:	d005      	beq.n	800842e <__cvt+0x42>
 8008422:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008426:	d100      	bne.n	800842a <__cvt+0x3e>
 8008428:	3601      	adds	r6, #1
 800842a:	2102      	movs	r1, #2
 800842c:	e000      	b.n	8008430 <__cvt+0x44>
 800842e:	2103      	movs	r1, #3
 8008430:	ab03      	add	r3, sp, #12
 8008432:	9301      	str	r3, [sp, #4]
 8008434:	ab02      	add	r3, sp, #8
 8008436:	9300      	str	r3, [sp, #0]
 8008438:	ec45 4b10 	vmov	d0, r4, r5
 800843c:	4653      	mov	r3, sl
 800843e:	4632      	mov	r2, r6
 8008440:	f001 fe5a 	bl	800a0f8 <_dtoa_r>
 8008444:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008448:	4607      	mov	r7, r0
 800844a:	d102      	bne.n	8008452 <__cvt+0x66>
 800844c:	f019 0f01 	tst.w	r9, #1
 8008450:	d022      	beq.n	8008498 <__cvt+0xac>
 8008452:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008456:	eb07 0906 	add.w	r9, r7, r6
 800845a:	d110      	bne.n	800847e <__cvt+0x92>
 800845c:	783b      	ldrb	r3, [r7, #0]
 800845e:	2b30      	cmp	r3, #48	; 0x30
 8008460:	d10a      	bne.n	8008478 <__cvt+0x8c>
 8008462:	2200      	movs	r2, #0
 8008464:	2300      	movs	r3, #0
 8008466:	4620      	mov	r0, r4
 8008468:	4629      	mov	r1, r5
 800846a:	f7f8 fb35 	bl	8000ad8 <__aeabi_dcmpeq>
 800846e:	b918      	cbnz	r0, 8008478 <__cvt+0x8c>
 8008470:	f1c6 0601 	rsb	r6, r6, #1
 8008474:	f8ca 6000 	str.w	r6, [sl]
 8008478:	f8da 3000 	ldr.w	r3, [sl]
 800847c:	4499      	add	r9, r3
 800847e:	2200      	movs	r2, #0
 8008480:	2300      	movs	r3, #0
 8008482:	4620      	mov	r0, r4
 8008484:	4629      	mov	r1, r5
 8008486:	f7f8 fb27 	bl	8000ad8 <__aeabi_dcmpeq>
 800848a:	b108      	cbz	r0, 8008490 <__cvt+0xa4>
 800848c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008490:	2230      	movs	r2, #48	; 0x30
 8008492:	9b03      	ldr	r3, [sp, #12]
 8008494:	454b      	cmp	r3, r9
 8008496:	d307      	bcc.n	80084a8 <__cvt+0xbc>
 8008498:	9b03      	ldr	r3, [sp, #12]
 800849a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800849c:	1bdb      	subs	r3, r3, r7
 800849e:	4638      	mov	r0, r7
 80084a0:	6013      	str	r3, [r2, #0]
 80084a2:	b004      	add	sp, #16
 80084a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084a8:	1c59      	adds	r1, r3, #1
 80084aa:	9103      	str	r1, [sp, #12]
 80084ac:	701a      	strb	r2, [r3, #0]
 80084ae:	e7f0      	b.n	8008492 <__cvt+0xa6>

080084b0 <__exponent>:
 80084b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084b2:	4603      	mov	r3, r0
 80084b4:	2900      	cmp	r1, #0
 80084b6:	bfb8      	it	lt
 80084b8:	4249      	neglt	r1, r1
 80084ba:	f803 2b02 	strb.w	r2, [r3], #2
 80084be:	bfb4      	ite	lt
 80084c0:	222d      	movlt	r2, #45	; 0x2d
 80084c2:	222b      	movge	r2, #43	; 0x2b
 80084c4:	2909      	cmp	r1, #9
 80084c6:	7042      	strb	r2, [r0, #1]
 80084c8:	dd2a      	ble.n	8008520 <__exponent+0x70>
 80084ca:	f10d 0407 	add.w	r4, sp, #7
 80084ce:	46a4      	mov	ip, r4
 80084d0:	270a      	movs	r7, #10
 80084d2:	46a6      	mov	lr, r4
 80084d4:	460a      	mov	r2, r1
 80084d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80084da:	fb07 1516 	mls	r5, r7, r6, r1
 80084de:	3530      	adds	r5, #48	; 0x30
 80084e0:	2a63      	cmp	r2, #99	; 0x63
 80084e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80084e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80084ea:	4631      	mov	r1, r6
 80084ec:	dcf1      	bgt.n	80084d2 <__exponent+0x22>
 80084ee:	3130      	adds	r1, #48	; 0x30
 80084f0:	f1ae 0502 	sub.w	r5, lr, #2
 80084f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80084f8:	1c44      	adds	r4, r0, #1
 80084fa:	4629      	mov	r1, r5
 80084fc:	4561      	cmp	r1, ip
 80084fe:	d30a      	bcc.n	8008516 <__exponent+0x66>
 8008500:	f10d 0209 	add.w	r2, sp, #9
 8008504:	eba2 020e 	sub.w	r2, r2, lr
 8008508:	4565      	cmp	r5, ip
 800850a:	bf88      	it	hi
 800850c:	2200      	movhi	r2, #0
 800850e:	4413      	add	r3, r2
 8008510:	1a18      	subs	r0, r3, r0
 8008512:	b003      	add	sp, #12
 8008514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008516:	f811 2b01 	ldrb.w	r2, [r1], #1
 800851a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800851e:	e7ed      	b.n	80084fc <__exponent+0x4c>
 8008520:	2330      	movs	r3, #48	; 0x30
 8008522:	3130      	adds	r1, #48	; 0x30
 8008524:	7083      	strb	r3, [r0, #2]
 8008526:	70c1      	strb	r1, [r0, #3]
 8008528:	1d03      	adds	r3, r0, #4
 800852a:	e7f1      	b.n	8008510 <__exponent+0x60>

0800852c <_printf_float>:
 800852c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008530:	ed2d 8b02 	vpush	{d8}
 8008534:	b08d      	sub	sp, #52	; 0x34
 8008536:	460c      	mov	r4, r1
 8008538:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800853c:	4616      	mov	r6, r2
 800853e:	461f      	mov	r7, r3
 8008540:	4605      	mov	r5, r0
 8008542:	f002 ff35 	bl	800b3b0 <_localeconv_r>
 8008546:	f8d0 a000 	ldr.w	sl, [r0]
 800854a:	4650      	mov	r0, sl
 800854c:	f7f7 fe48 	bl	80001e0 <strlen>
 8008550:	2300      	movs	r3, #0
 8008552:	930a      	str	r3, [sp, #40]	; 0x28
 8008554:	6823      	ldr	r3, [r4, #0]
 8008556:	9305      	str	r3, [sp, #20]
 8008558:	f8d8 3000 	ldr.w	r3, [r8]
 800855c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008560:	3307      	adds	r3, #7
 8008562:	f023 0307 	bic.w	r3, r3, #7
 8008566:	f103 0208 	add.w	r2, r3, #8
 800856a:	f8c8 2000 	str.w	r2, [r8]
 800856e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008572:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008576:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800857a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800857e:	9307      	str	r3, [sp, #28]
 8008580:	f8cd 8018 	str.w	r8, [sp, #24]
 8008584:	ee08 0a10 	vmov	s16, r0
 8008588:	4b9f      	ldr	r3, [pc, #636]	; (8008808 <_printf_float+0x2dc>)
 800858a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800858e:	f04f 32ff 	mov.w	r2, #4294967295
 8008592:	f7f8 fad3 	bl	8000b3c <__aeabi_dcmpun>
 8008596:	bb88      	cbnz	r0, 80085fc <_printf_float+0xd0>
 8008598:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800859c:	4b9a      	ldr	r3, [pc, #616]	; (8008808 <_printf_float+0x2dc>)
 800859e:	f04f 32ff 	mov.w	r2, #4294967295
 80085a2:	f7f8 faad 	bl	8000b00 <__aeabi_dcmple>
 80085a6:	bb48      	cbnz	r0, 80085fc <_printf_float+0xd0>
 80085a8:	2200      	movs	r2, #0
 80085aa:	2300      	movs	r3, #0
 80085ac:	4640      	mov	r0, r8
 80085ae:	4649      	mov	r1, r9
 80085b0:	f7f8 fa9c 	bl	8000aec <__aeabi_dcmplt>
 80085b4:	b110      	cbz	r0, 80085bc <_printf_float+0x90>
 80085b6:	232d      	movs	r3, #45	; 0x2d
 80085b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085bc:	4b93      	ldr	r3, [pc, #588]	; (800880c <_printf_float+0x2e0>)
 80085be:	4894      	ldr	r0, [pc, #592]	; (8008810 <_printf_float+0x2e4>)
 80085c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80085c4:	bf94      	ite	ls
 80085c6:	4698      	movls	r8, r3
 80085c8:	4680      	movhi	r8, r0
 80085ca:	2303      	movs	r3, #3
 80085cc:	6123      	str	r3, [r4, #16]
 80085ce:	9b05      	ldr	r3, [sp, #20]
 80085d0:	f023 0204 	bic.w	r2, r3, #4
 80085d4:	6022      	str	r2, [r4, #0]
 80085d6:	f04f 0900 	mov.w	r9, #0
 80085da:	9700      	str	r7, [sp, #0]
 80085dc:	4633      	mov	r3, r6
 80085de:	aa0b      	add	r2, sp, #44	; 0x2c
 80085e0:	4621      	mov	r1, r4
 80085e2:	4628      	mov	r0, r5
 80085e4:	f000 f9d8 	bl	8008998 <_printf_common>
 80085e8:	3001      	adds	r0, #1
 80085ea:	f040 8090 	bne.w	800870e <_printf_float+0x1e2>
 80085ee:	f04f 30ff 	mov.w	r0, #4294967295
 80085f2:	b00d      	add	sp, #52	; 0x34
 80085f4:	ecbd 8b02 	vpop	{d8}
 80085f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085fc:	4642      	mov	r2, r8
 80085fe:	464b      	mov	r3, r9
 8008600:	4640      	mov	r0, r8
 8008602:	4649      	mov	r1, r9
 8008604:	f7f8 fa9a 	bl	8000b3c <__aeabi_dcmpun>
 8008608:	b140      	cbz	r0, 800861c <_printf_float+0xf0>
 800860a:	464b      	mov	r3, r9
 800860c:	2b00      	cmp	r3, #0
 800860e:	bfbc      	itt	lt
 8008610:	232d      	movlt	r3, #45	; 0x2d
 8008612:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008616:	487f      	ldr	r0, [pc, #508]	; (8008814 <_printf_float+0x2e8>)
 8008618:	4b7f      	ldr	r3, [pc, #508]	; (8008818 <_printf_float+0x2ec>)
 800861a:	e7d1      	b.n	80085c0 <_printf_float+0x94>
 800861c:	6863      	ldr	r3, [r4, #4]
 800861e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008622:	9206      	str	r2, [sp, #24]
 8008624:	1c5a      	adds	r2, r3, #1
 8008626:	d13f      	bne.n	80086a8 <_printf_float+0x17c>
 8008628:	2306      	movs	r3, #6
 800862a:	6063      	str	r3, [r4, #4]
 800862c:	9b05      	ldr	r3, [sp, #20]
 800862e:	6861      	ldr	r1, [r4, #4]
 8008630:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008634:	2300      	movs	r3, #0
 8008636:	9303      	str	r3, [sp, #12]
 8008638:	ab0a      	add	r3, sp, #40	; 0x28
 800863a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800863e:	ab09      	add	r3, sp, #36	; 0x24
 8008640:	ec49 8b10 	vmov	d0, r8, r9
 8008644:	9300      	str	r3, [sp, #0]
 8008646:	6022      	str	r2, [r4, #0]
 8008648:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800864c:	4628      	mov	r0, r5
 800864e:	f7ff fecd 	bl	80083ec <__cvt>
 8008652:	9b06      	ldr	r3, [sp, #24]
 8008654:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008656:	2b47      	cmp	r3, #71	; 0x47
 8008658:	4680      	mov	r8, r0
 800865a:	d108      	bne.n	800866e <_printf_float+0x142>
 800865c:	1cc8      	adds	r0, r1, #3
 800865e:	db02      	blt.n	8008666 <_printf_float+0x13a>
 8008660:	6863      	ldr	r3, [r4, #4]
 8008662:	4299      	cmp	r1, r3
 8008664:	dd41      	ble.n	80086ea <_printf_float+0x1be>
 8008666:	f1ab 0b02 	sub.w	fp, fp, #2
 800866a:	fa5f fb8b 	uxtb.w	fp, fp
 800866e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008672:	d820      	bhi.n	80086b6 <_printf_float+0x18a>
 8008674:	3901      	subs	r1, #1
 8008676:	465a      	mov	r2, fp
 8008678:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800867c:	9109      	str	r1, [sp, #36]	; 0x24
 800867e:	f7ff ff17 	bl	80084b0 <__exponent>
 8008682:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008684:	1813      	adds	r3, r2, r0
 8008686:	2a01      	cmp	r2, #1
 8008688:	4681      	mov	r9, r0
 800868a:	6123      	str	r3, [r4, #16]
 800868c:	dc02      	bgt.n	8008694 <_printf_float+0x168>
 800868e:	6822      	ldr	r2, [r4, #0]
 8008690:	07d2      	lsls	r2, r2, #31
 8008692:	d501      	bpl.n	8008698 <_printf_float+0x16c>
 8008694:	3301      	adds	r3, #1
 8008696:	6123      	str	r3, [r4, #16]
 8008698:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800869c:	2b00      	cmp	r3, #0
 800869e:	d09c      	beq.n	80085da <_printf_float+0xae>
 80086a0:	232d      	movs	r3, #45	; 0x2d
 80086a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086a6:	e798      	b.n	80085da <_printf_float+0xae>
 80086a8:	9a06      	ldr	r2, [sp, #24]
 80086aa:	2a47      	cmp	r2, #71	; 0x47
 80086ac:	d1be      	bne.n	800862c <_printf_float+0x100>
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1bc      	bne.n	800862c <_printf_float+0x100>
 80086b2:	2301      	movs	r3, #1
 80086b4:	e7b9      	b.n	800862a <_printf_float+0xfe>
 80086b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80086ba:	d118      	bne.n	80086ee <_printf_float+0x1c2>
 80086bc:	2900      	cmp	r1, #0
 80086be:	6863      	ldr	r3, [r4, #4]
 80086c0:	dd0b      	ble.n	80086da <_printf_float+0x1ae>
 80086c2:	6121      	str	r1, [r4, #16]
 80086c4:	b913      	cbnz	r3, 80086cc <_printf_float+0x1a0>
 80086c6:	6822      	ldr	r2, [r4, #0]
 80086c8:	07d0      	lsls	r0, r2, #31
 80086ca:	d502      	bpl.n	80086d2 <_printf_float+0x1a6>
 80086cc:	3301      	adds	r3, #1
 80086ce:	440b      	add	r3, r1
 80086d0:	6123      	str	r3, [r4, #16]
 80086d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80086d4:	f04f 0900 	mov.w	r9, #0
 80086d8:	e7de      	b.n	8008698 <_printf_float+0x16c>
 80086da:	b913      	cbnz	r3, 80086e2 <_printf_float+0x1b6>
 80086dc:	6822      	ldr	r2, [r4, #0]
 80086de:	07d2      	lsls	r2, r2, #31
 80086e0:	d501      	bpl.n	80086e6 <_printf_float+0x1ba>
 80086e2:	3302      	adds	r3, #2
 80086e4:	e7f4      	b.n	80086d0 <_printf_float+0x1a4>
 80086e6:	2301      	movs	r3, #1
 80086e8:	e7f2      	b.n	80086d0 <_printf_float+0x1a4>
 80086ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80086ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086f0:	4299      	cmp	r1, r3
 80086f2:	db05      	blt.n	8008700 <_printf_float+0x1d4>
 80086f4:	6823      	ldr	r3, [r4, #0]
 80086f6:	6121      	str	r1, [r4, #16]
 80086f8:	07d8      	lsls	r0, r3, #31
 80086fa:	d5ea      	bpl.n	80086d2 <_printf_float+0x1a6>
 80086fc:	1c4b      	adds	r3, r1, #1
 80086fe:	e7e7      	b.n	80086d0 <_printf_float+0x1a4>
 8008700:	2900      	cmp	r1, #0
 8008702:	bfd4      	ite	le
 8008704:	f1c1 0202 	rsble	r2, r1, #2
 8008708:	2201      	movgt	r2, #1
 800870a:	4413      	add	r3, r2
 800870c:	e7e0      	b.n	80086d0 <_printf_float+0x1a4>
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	055a      	lsls	r2, r3, #21
 8008712:	d407      	bmi.n	8008724 <_printf_float+0x1f8>
 8008714:	6923      	ldr	r3, [r4, #16]
 8008716:	4642      	mov	r2, r8
 8008718:	4631      	mov	r1, r6
 800871a:	4628      	mov	r0, r5
 800871c:	47b8      	blx	r7
 800871e:	3001      	adds	r0, #1
 8008720:	d12c      	bne.n	800877c <_printf_float+0x250>
 8008722:	e764      	b.n	80085ee <_printf_float+0xc2>
 8008724:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008728:	f240 80e0 	bls.w	80088ec <_printf_float+0x3c0>
 800872c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008730:	2200      	movs	r2, #0
 8008732:	2300      	movs	r3, #0
 8008734:	f7f8 f9d0 	bl	8000ad8 <__aeabi_dcmpeq>
 8008738:	2800      	cmp	r0, #0
 800873a:	d034      	beq.n	80087a6 <_printf_float+0x27a>
 800873c:	4a37      	ldr	r2, [pc, #220]	; (800881c <_printf_float+0x2f0>)
 800873e:	2301      	movs	r3, #1
 8008740:	4631      	mov	r1, r6
 8008742:	4628      	mov	r0, r5
 8008744:	47b8      	blx	r7
 8008746:	3001      	adds	r0, #1
 8008748:	f43f af51 	beq.w	80085ee <_printf_float+0xc2>
 800874c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008750:	429a      	cmp	r2, r3
 8008752:	db02      	blt.n	800875a <_printf_float+0x22e>
 8008754:	6823      	ldr	r3, [r4, #0]
 8008756:	07d8      	lsls	r0, r3, #31
 8008758:	d510      	bpl.n	800877c <_printf_float+0x250>
 800875a:	ee18 3a10 	vmov	r3, s16
 800875e:	4652      	mov	r2, sl
 8008760:	4631      	mov	r1, r6
 8008762:	4628      	mov	r0, r5
 8008764:	47b8      	blx	r7
 8008766:	3001      	adds	r0, #1
 8008768:	f43f af41 	beq.w	80085ee <_printf_float+0xc2>
 800876c:	f04f 0800 	mov.w	r8, #0
 8008770:	f104 091a 	add.w	r9, r4, #26
 8008774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008776:	3b01      	subs	r3, #1
 8008778:	4543      	cmp	r3, r8
 800877a:	dc09      	bgt.n	8008790 <_printf_float+0x264>
 800877c:	6823      	ldr	r3, [r4, #0]
 800877e:	079b      	lsls	r3, r3, #30
 8008780:	f100 8105 	bmi.w	800898e <_printf_float+0x462>
 8008784:	68e0      	ldr	r0, [r4, #12]
 8008786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008788:	4298      	cmp	r0, r3
 800878a:	bfb8      	it	lt
 800878c:	4618      	movlt	r0, r3
 800878e:	e730      	b.n	80085f2 <_printf_float+0xc6>
 8008790:	2301      	movs	r3, #1
 8008792:	464a      	mov	r2, r9
 8008794:	4631      	mov	r1, r6
 8008796:	4628      	mov	r0, r5
 8008798:	47b8      	blx	r7
 800879a:	3001      	adds	r0, #1
 800879c:	f43f af27 	beq.w	80085ee <_printf_float+0xc2>
 80087a0:	f108 0801 	add.w	r8, r8, #1
 80087a4:	e7e6      	b.n	8008774 <_printf_float+0x248>
 80087a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	dc39      	bgt.n	8008820 <_printf_float+0x2f4>
 80087ac:	4a1b      	ldr	r2, [pc, #108]	; (800881c <_printf_float+0x2f0>)
 80087ae:	2301      	movs	r3, #1
 80087b0:	4631      	mov	r1, r6
 80087b2:	4628      	mov	r0, r5
 80087b4:	47b8      	blx	r7
 80087b6:	3001      	adds	r0, #1
 80087b8:	f43f af19 	beq.w	80085ee <_printf_float+0xc2>
 80087bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087c0:	4313      	orrs	r3, r2
 80087c2:	d102      	bne.n	80087ca <_printf_float+0x29e>
 80087c4:	6823      	ldr	r3, [r4, #0]
 80087c6:	07d9      	lsls	r1, r3, #31
 80087c8:	d5d8      	bpl.n	800877c <_printf_float+0x250>
 80087ca:	ee18 3a10 	vmov	r3, s16
 80087ce:	4652      	mov	r2, sl
 80087d0:	4631      	mov	r1, r6
 80087d2:	4628      	mov	r0, r5
 80087d4:	47b8      	blx	r7
 80087d6:	3001      	adds	r0, #1
 80087d8:	f43f af09 	beq.w	80085ee <_printf_float+0xc2>
 80087dc:	f04f 0900 	mov.w	r9, #0
 80087e0:	f104 0a1a 	add.w	sl, r4, #26
 80087e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087e6:	425b      	negs	r3, r3
 80087e8:	454b      	cmp	r3, r9
 80087ea:	dc01      	bgt.n	80087f0 <_printf_float+0x2c4>
 80087ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ee:	e792      	b.n	8008716 <_printf_float+0x1ea>
 80087f0:	2301      	movs	r3, #1
 80087f2:	4652      	mov	r2, sl
 80087f4:	4631      	mov	r1, r6
 80087f6:	4628      	mov	r0, r5
 80087f8:	47b8      	blx	r7
 80087fa:	3001      	adds	r0, #1
 80087fc:	f43f aef7 	beq.w	80085ee <_printf_float+0xc2>
 8008800:	f109 0901 	add.w	r9, r9, #1
 8008804:	e7ee      	b.n	80087e4 <_printf_float+0x2b8>
 8008806:	bf00      	nop
 8008808:	7fefffff 	.word	0x7fefffff
 800880c:	0800dd88 	.word	0x0800dd88
 8008810:	0800dd8c 	.word	0x0800dd8c
 8008814:	0800dd94 	.word	0x0800dd94
 8008818:	0800dd90 	.word	0x0800dd90
 800881c:	0800e199 	.word	0x0800e199
 8008820:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008822:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008824:	429a      	cmp	r2, r3
 8008826:	bfa8      	it	ge
 8008828:	461a      	movge	r2, r3
 800882a:	2a00      	cmp	r2, #0
 800882c:	4691      	mov	r9, r2
 800882e:	dc37      	bgt.n	80088a0 <_printf_float+0x374>
 8008830:	f04f 0b00 	mov.w	fp, #0
 8008834:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008838:	f104 021a 	add.w	r2, r4, #26
 800883c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800883e:	9305      	str	r3, [sp, #20]
 8008840:	eba3 0309 	sub.w	r3, r3, r9
 8008844:	455b      	cmp	r3, fp
 8008846:	dc33      	bgt.n	80088b0 <_printf_float+0x384>
 8008848:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800884c:	429a      	cmp	r2, r3
 800884e:	db3b      	blt.n	80088c8 <_printf_float+0x39c>
 8008850:	6823      	ldr	r3, [r4, #0]
 8008852:	07da      	lsls	r2, r3, #31
 8008854:	d438      	bmi.n	80088c8 <_printf_float+0x39c>
 8008856:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008858:	9b05      	ldr	r3, [sp, #20]
 800885a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800885c:	1ad3      	subs	r3, r2, r3
 800885e:	eba2 0901 	sub.w	r9, r2, r1
 8008862:	4599      	cmp	r9, r3
 8008864:	bfa8      	it	ge
 8008866:	4699      	movge	r9, r3
 8008868:	f1b9 0f00 	cmp.w	r9, #0
 800886c:	dc35      	bgt.n	80088da <_printf_float+0x3ae>
 800886e:	f04f 0800 	mov.w	r8, #0
 8008872:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008876:	f104 0a1a 	add.w	sl, r4, #26
 800887a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800887e:	1a9b      	subs	r3, r3, r2
 8008880:	eba3 0309 	sub.w	r3, r3, r9
 8008884:	4543      	cmp	r3, r8
 8008886:	f77f af79 	ble.w	800877c <_printf_float+0x250>
 800888a:	2301      	movs	r3, #1
 800888c:	4652      	mov	r2, sl
 800888e:	4631      	mov	r1, r6
 8008890:	4628      	mov	r0, r5
 8008892:	47b8      	blx	r7
 8008894:	3001      	adds	r0, #1
 8008896:	f43f aeaa 	beq.w	80085ee <_printf_float+0xc2>
 800889a:	f108 0801 	add.w	r8, r8, #1
 800889e:	e7ec      	b.n	800887a <_printf_float+0x34e>
 80088a0:	4613      	mov	r3, r2
 80088a2:	4631      	mov	r1, r6
 80088a4:	4642      	mov	r2, r8
 80088a6:	4628      	mov	r0, r5
 80088a8:	47b8      	blx	r7
 80088aa:	3001      	adds	r0, #1
 80088ac:	d1c0      	bne.n	8008830 <_printf_float+0x304>
 80088ae:	e69e      	b.n	80085ee <_printf_float+0xc2>
 80088b0:	2301      	movs	r3, #1
 80088b2:	4631      	mov	r1, r6
 80088b4:	4628      	mov	r0, r5
 80088b6:	9205      	str	r2, [sp, #20]
 80088b8:	47b8      	blx	r7
 80088ba:	3001      	adds	r0, #1
 80088bc:	f43f ae97 	beq.w	80085ee <_printf_float+0xc2>
 80088c0:	9a05      	ldr	r2, [sp, #20]
 80088c2:	f10b 0b01 	add.w	fp, fp, #1
 80088c6:	e7b9      	b.n	800883c <_printf_float+0x310>
 80088c8:	ee18 3a10 	vmov	r3, s16
 80088cc:	4652      	mov	r2, sl
 80088ce:	4631      	mov	r1, r6
 80088d0:	4628      	mov	r0, r5
 80088d2:	47b8      	blx	r7
 80088d4:	3001      	adds	r0, #1
 80088d6:	d1be      	bne.n	8008856 <_printf_float+0x32a>
 80088d8:	e689      	b.n	80085ee <_printf_float+0xc2>
 80088da:	9a05      	ldr	r2, [sp, #20]
 80088dc:	464b      	mov	r3, r9
 80088de:	4442      	add	r2, r8
 80088e0:	4631      	mov	r1, r6
 80088e2:	4628      	mov	r0, r5
 80088e4:	47b8      	blx	r7
 80088e6:	3001      	adds	r0, #1
 80088e8:	d1c1      	bne.n	800886e <_printf_float+0x342>
 80088ea:	e680      	b.n	80085ee <_printf_float+0xc2>
 80088ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088ee:	2a01      	cmp	r2, #1
 80088f0:	dc01      	bgt.n	80088f6 <_printf_float+0x3ca>
 80088f2:	07db      	lsls	r3, r3, #31
 80088f4:	d538      	bpl.n	8008968 <_printf_float+0x43c>
 80088f6:	2301      	movs	r3, #1
 80088f8:	4642      	mov	r2, r8
 80088fa:	4631      	mov	r1, r6
 80088fc:	4628      	mov	r0, r5
 80088fe:	47b8      	blx	r7
 8008900:	3001      	adds	r0, #1
 8008902:	f43f ae74 	beq.w	80085ee <_printf_float+0xc2>
 8008906:	ee18 3a10 	vmov	r3, s16
 800890a:	4652      	mov	r2, sl
 800890c:	4631      	mov	r1, r6
 800890e:	4628      	mov	r0, r5
 8008910:	47b8      	blx	r7
 8008912:	3001      	adds	r0, #1
 8008914:	f43f ae6b 	beq.w	80085ee <_printf_float+0xc2>
 8008918:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800891c:	2200      	movs	r2, #0
 800891e:	2300      	movs	r3, #0
 8008920:	f7f8 f8da 	bl	8000ad8 <__aeabi_dcmpeq>
 8008924:	b9d8      	cbnz	r0, 800895e <_printf_float+0x432>
 8008926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008928:	f108 0201 	add.w	r2, r8, #1
 800892c:	3b01      	subs	r3, #1
 800892e:	4631      	mov	r1, r6
 8008930:	4628      	mov	r0, r5
 8008932:	47b8      	blx	r7
 8008934:	3001      	adds	r0, #1
 8008936:	d10e      	bne.n	8008956 <_printf_float+0x42a>
 8008938:	e659      	b.n	80085ee <_printf_float+0xc2>
 800893a:	2301      	movs	r3, #1
 800893c:	4652      	mov	r2, sl
 800893e:	4631      	mov	r1, r6
 8008940:	4628      	mov	r0, r5
 8008942:	47b8      	blx	r7
 8008944:	3001      	adds	r0, #1
 8008946:	f43f ae52 	beq.w	80085ee <_printf_float+0xc2>
 800894a:	f108 0801 	add.w	r8, r8, #1
 800894e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008950:	3b01      	subs	r3, #1
 8008952:	4543      	cmp	r3, r8
 8008954:	dcf1      	bgt.n	800893a <_printf_float+0x40e>
 8008956:	464b      	mov	r3, r9
 8008958:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800895c:	e6dc      	b.n	8008718 <_printf_float+0x1ec>
 800895e:	f04f 0800 	mov.w	r8, #0
 8008962:	f104 0a1a 	add.w	sl, r4, #26
 8008966:	e7f2      	b.n	800894e <_printf_float+0x422>
 8008968:	2301      	movs	r3, #1
 800896a:	4642      	mov	r2, r8
 800896c:	e7df      	b.n	800892e <_printf_float+0x402>
 800896e:	2301      	movs	r3, #1
 8008970:	464a      	mov	r2, r9
 8008972:	4631      	mov	r1, r6
 8008974:	4628      	mov	r0, r5
 8008976:	47b8      	blx	r7
 8008978:	3001      	adds	r0, #1
 800897a:	f43f ae38 	beq.w	80085ee <_printf_float+0xc2>
 800897e:	f108 0801 	add.w	r8, r8, #1
 8008982:	68e3      	ldr	r3, [r4, #12]
 8008984:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008986:	1a5b      	subs	r3, r3, r1
 8008988:	4543      	cmp	r3, r8
 800898a:	dcf0      	bgt.n	800896e <_printf_float+0x442>
 800898c:	e6fa      	b.n	8008784 <_printf_float+0x258>
 800898e:	f04f 0800 	mov.w	r8, #0
 8008992:	f104 0919 	add.w	r9, r4, #25
 8008996:	e7f4      	b.n	8008982 <_printf_float+0x456>

08008998 <_printf_common>:
 8008998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800899c:	4616      	mov	r6, r2
 800899e:	4699      	mov	r9, r3
 80089a0:	688a      	ldr	r2, [r1, #8]
 80089a2:	690b      	ldr	r3, [r1, #16]
 80089a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089a8:	4293      	cmp	r3, r2
 80089aa:	bfb8      	it	lt
 80089ac:	4613      	movlt	r3, r2
 80089ae:	6033      	str	r3, [r6, #0]
 80089b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089b4:	4607      	mov	r7, r0
 80089b6:	460c      	mov	r4, r1
 80089b8:	b10a      	cbz	r2, 80089be <_printf_common+0x26>
 80089ba:	3301      	adds	r3, #1
 80089bc:	6033      	str	r3, [r6, #0]
 80089be:	6823      	ldr	r3, [r4, #0]
 80089c0:	0699      	lsls	r1, r3, #26
 80089c2:	bf42      	ittt	mi
 80089c4:	6833      	ldrmi	r3, [r6, #0]
 80089c6:	3302      	addmi	r3, #2
 80089c8:	6033      	strmi	r3, [r6, #0]
 80089ca:	6825      	ldr	r5, [r4, #0]
 80089cc:	f015 0506 	ands.w	r5, r5, #6
 80089d0:	d106      	bne.n	80089e0 <_printf_common+0x48>
 80089d2:	f104 0a19 	add.w	sl, r4, #25
 80089d6:	68e3      	ldr	r3, [r4, #12]
 80089d8:	6832      	ldr	r2, [r6, #0]
 80089da:	1a9b      	subs	r3, r3, r2
 80089dc:	42ab      	cmp	r3, r5
 80089de:	dc26      	bgt.n	8008a2e <_printf_common+0x96>
 80089e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80089e4:	1e13      	subs	r3, r2, #0
 80089e6:	6822      	ldr	r2, [r4, #0]
 80089e8:	bf18      	it	ne
 80089ea:	2301      	movne	r3, #1
 80089ec:	0692      	lsls	r2, r2, #26
 80089ee:	d42b      	bmi.n	8008a48 <_printf_common+0xb0>
 80089f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089f4:	4649      	mov	r1, r9
 80089f6:	4638      	mov	r0, r7
 80089f8:	47c0      	blx	r8
 80089fa:	3001      	adds	r0, #1
 80089fc:	d01e      	beq.n	8008a3c <_printf_common+0xa4>
 80089fe:	6823      	ldr	r3, [r4, #0]
 8008a00:	68e5      	ldr	r5, [r4, #12]
 8008a02:	6832      	ldr	r2, [r6, #0]
 8008a04:	f003 0306 	and.w	r3, r3, #6
 8008a08:	2b04      	cmp	r3, #4
 8008a0a:	bf08      	it	eq
 8008a0c:	1aad      	subeq	r5, r5, r2
 8008a0e:	68a3      	ldr	r3, [r4, #8]
 8008a10:	6922      	ldr	r2, [r4, #16]
 8008a12:	bf0c      	ite	eq
 8008a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a18:	2500      	movne	r5, #0
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	bfc4      	itt	gt
 8008a1e:	1a9b      	subgt	r3, r3, r2
 8008a20:	18ed      	addgt	r5, r5, r3
 8008a22:	2600      	movs	r6, #0
 8008a24:	341a      	adds	r4, #26
 8008a26:	42b5      	cmp	r5, r6
 8008a28:	d11a      	bne.n	8008a60 <_printf_common+0xc8>
 8008a2a:	2000      	movs	r0, #0
 8008a2c:	e008      	b.n	8008a40 <_printf_common+0xa8>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	4652      	mov	r2, sl
 8008a32:	4649      	mov	r1, r9
 8008a34:	4638      	mov	r0, r7
 8008a36:	47c0      	blx	r8
 8008a38:	3001      	adds	r0, #1
 8008a3a:	d103      	bne.n	8008a44 <_printf_common+0xac>
 8008a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a44:	3501      	adds	r5, #1
 8008a46:	e7c6      	b.n	80089d6 <_printf_common+0x3e>
 8008a48:	18e1      	adds	r1, r4, r3
 8008a4a:	1c5a      	adds	r2, r3, #1
 8008a4c:	2030      	movs	r0, #48	; 0x30
 8008a4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a52:	4422      	add	r2, r4
 8008a54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a5c:	3302      	adds	r3, #2
 8008a5e:	e7c7      	b.n	80089f0 <_printf_common+0x58>
 8008a60:	2301      	movs	r3, #1
 8008a62:	4622      	mov	r2, r4
 8008a64:	4649      	mov	r1, r9
 8008a66:	4638      	mov	r0, r7
 8008a68:	47c0      	blx	r8
 8008a6a:	3001      	adds	r0, #1
 8008a6c:	d0e6      	beq.n	8008a3c <_printf_common+0xa4>
 8008a6e:	3601      	adds	r6, #1
 8008a70:	e7d9      	b.n	8008a26 <_printf_common+0x8e>
	...

08008a74 <_printf_i>:
 8008a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a78:	460c      	mov	r4, r1
 8008a7a:	4691      	mov	r9, r2
 8008a7c:	7e27      	ldrb	r7, [r4, #24]
 8008a7e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008a80:	2f78      	cmp	r7, #120	; 0x78
 8008a82:	4680      	mov	r8, r0
 8008a84:	469a      	mov	sl, r3
 8008a86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a8a:	d807      	bhi.n	8008a9c <_printf_i+0x28>
 8008a8c:	2f62      	cmp	r7, #98	; 0x62
 8008a8e:	d80a      	bhi.n	8008aa6 <_printf_i+0x32>
 8008a90:	2f00      	cmp	r7, #0
 8008a92:	f000 80d8 	beq.w	8008c46 <_printf_i+0x1d2>
 8008a96:	2f58      	cmp	r7, #88	; 0x58
 8008a98:	f000 80a3 	beq.w	8008be2 <_printf_i+0x16e>
 8008a9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008aa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008aa4:	e03a      	b.n	8008b1c <_printf_i+0xa8>
 8008aa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008aaa:	2b15      	cmp	r3, #21
 8008aac:	d8f6      	bhi.n	8008a9c <_printf_i+0x28>
 8008aae:	a001      	add	r0, pc, #4	; (adr r0, 8008ab4 <_printf_i+0x40>)
 8008ab0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008ab4:	08008b0d 	.word	0x08008b0d
 8008ab8:	08008b21 	.word	0x08008b21
 8008abc:	08008a9d 	.word	0x08008a9d
 8008ac0:	08008a9d 	.word	0x08008a9d
 8008ac4:	08008a9d 	.word	0x08008a9d
 8008ac8:	08008a9d 	.word	0x08008a9d
 8008acc:	08008b21 	.word	0x08008b21
 8008ad0:	08008a9d 	.word	0x08008a9d
 8008ad4:	08008a9d 	.word	0x08008a9d
 8008ad8:	08008a9d 	.word	0x08008a9d
 8008adc:	08008a9d 	.word	0x08008a9d
 8008ae0:	08008c2d 	.word	0x08008c2d
 8008ae4:	08008b51 	.word	0x08008b51
 8008ae8:	08008c0f 	.word	0x08008c0f
 8008aec:	08008a9d 	.word	0x08008a9d
 8008af0:	08008a9d 	.word	0x08008a9d
 8008af4:	08008c4f 	.word	0x08008c4f
 8008af8:	08008a9d 	.word	0x08008a9d
 8008afc:	08008b51 	.word	0x08008b51
 8008b00:	08008a9d 	.word	0x08008a9d
 8008b04:	08008a9d 	.word	0x08008a9d
 8008b08:	08008c17 	.word	0x08008c17
 8008b0c:	680b      	ldr	r3, [r1, #0]
 8008b0e:	1d1a      	adds	r2, r3, #4
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	600a      	str	r2, [r1, #0]
 8008b14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008b18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e0a3      	b.n	8008c68 <_printf_i+0x1f4>
 8008b20:	6825      	ldr	r5, [r4, #0]
 8008b22:	6808      	ldr	r0, [r1, #0]
 8008b24:	062e      	lsls	r6, r5, #24
 8008b26:	f100 0304 	add.w	r3, r0, #4
 8008b2a:	d50a      	bpl.n	8008b42 <_printf_i+0xce>
 8008b2c:	6805      	ldr	r5, [r0, #0]
 8008b2e:	600b      	str	r3, [r1, #0]
 8008b30:	2d00      	cmp	r5, #0
 8008b32:	da03      	bge.n	8008b3c <_printf_i+0xc8>
 8008b34:	232d      	movs	r3, #45	; 0x2d
 8008b36:	426d      	negs	r5, r5
 8008b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b3c:	485e      	ldr	r0, [pc, #376]	; (8008cb8 <_printf_i+0x244>)
 8008b3e:	230a      	movs	r3, #10
 8008b40:	e019      	b.n	8008b76 <_printf_i+0x102>
 8008b42:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008b46:	6805      	ldr	r5, [r0, #0]
 8008b48:	600b      	str	r3, [r1, #0]
 8008b4a:	bf18      	it	ne
 8008b4c:	b22d      	sxthne	r5, r5
 8008b4e:	e7ef      	b.n	8008b30 <_printf_i+0xbc>
 8008b50:	680b      	ldr	r3, [r1, #0]
 8008b52:	6825      	ldr	r5, [r4, #0]
 8008b54:	1d18      	adds	r0, r3, #4
 8008b56:	6008      	str	r0, [r1, #0]
 8008b58:	0628      	lsls	r0, r5, #24
 8008b5a:	d501      	bpl.n	8008b60 <_printf_i+0xec>
 8008b5c:	681d      	ldr	r5, [r3, #0]
 8008b5e:	e002      	b.n	8008b66 <_printf_i+0xf2>
 8008b60:	0669      	lsls	r1, r5, #25
 8008b62:	d5fb      	bpl.n	8008b5c <_printf_i+0xe8>
 8008b64:	881d      	ldrh	r5, [r3, #0]
 8008b66:	4854      	ldr	r0, [pc, #336]	; (8008cb8 <_printf_i+0x244>)
 8008b68:	2f6f      	cmp	r7, #111	; 0x6f
 8008b6a:	bf0c      	ite	eq
 8008b6c:	2308      	moveq	r3, #8
 8008b6e:	230a      	movne	r3, #10
 8008b70:	2100      	movs	r1, #0
 8008b72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b76:	6866      	ldr	r6, [r4, #4]
 8008b78:	60a6      	str	r6, [r4, #8]
 8008b7a:	2e00      	cmp	r6, #0
 8008b7c:	bfa2      	ittt	ge
 8008b7e:	6821      	ldrge	r1, [r4, #0]
 8008b80:	f021 0104 	bicge.w	r1, r1, #4
 8008b84:	6021      	strge	r1, [r4, #0]
 8008b86:	b90d      	cbnz	r5, 8008b8c <_printf_i+0x118>
 8008b88:	2e00      	cmp	r6, #0
 8008b8a:	d04d      	beq.n	8008c28 <_printf_i+0x1b4>
 8008b8c:	4616      	mov	r6, r2
 8008b8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b92:	fb03 5711 	mls	r7, r3, r1, r5
 8008b96:	5dc7      	ldrb	r7, [r0, r7]
 8008b98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b9c:	462f      	mov	r7, r5
 8008b9e:	42bb      	cmp	r3, r7
 8008ba0:	460d      	mov	r5, r1
 8008ba2:	d9f4      	bls.n	8008b8e <_printf_i+0x11a>
 8008ba4:	2b08      	cmp	r3, #8
 8008ba6:	d10b      	bne.n	8008bc0 <_printf_i+0x14c>
 8008ba8:	6823      	ldr	r3, [r4, #0]
 8008baa:	07df      	lsls	r7, r3, #31
 8008bac:	d508      	bpl.n	8008bc0 <_printf_i+0x14c>
 8008bae:	6923      	ldr	r3, [r4, #16]
 8008bb0:	6861      	ldr	r1, [r4, #4]
 8008bb2:	4299      	cmp	r1, r3
 8008bb4:	bfde      	ittt	le
 8008bb6:	2330      	movle	r3, #48	; 0x30
 8008bb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008bbc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008bc0:	1b92      	subs	r2, r2, r6
 8008bc2:	6122      	str	r2, [r4, #16]
 8008bc4:	f8cd a000 	str.w	sl, [sp]
 8008bc8:	464b      	mov	r3, r9
 8008bca:	aa03      	add	r2, sp, #12
 8008bcc:	4621      	mov	r1, r4
 8008bce:	4640      	mov	r0, r8
 8008bd0:	f7ff fee2 	bl	8008998 <_printf_common>
 8008bd4:	3001      	adds	r0, #1
 8008bd6:	d14c      	bne.n	8008c72 <_printf_i+0x1fe>
 8008bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bdc:	b004      	add	sp, #16
 8008bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be2:	4835      	ldr	r0, [pc, #212]	; (8008cb8 <_printf_i+0x244>)
 8008be4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008be8:	6823      	ldr	r3, [r4, #0]
 8008bea:	680e      	ldr	r6, [r1, #0]
 8008bec:	061f      	lsls	r7, r3, #24
 8008bee:	f856 5b04 	ldr.w	r5, [r6], #4
 8008bf2:	600e      	str	r6, [r1, #0]
 8008bf4:	d514      	bpl.n	8008c20 <_printf_i+0x1ac>
 8008bf6:	07d9      	lsls	r1, r3, #31
 8008bf8:	bf44      	itt	mi
 8008bfa:	f043 0320 	orrmi.w	r3, r3, #32
 8008bfe:	6023      	strmi	r3, [r4, #0]
 8008c00:	b91d      	cbnz	r5, 8008c0a <_printf_i+0x196>
 8008c02:	6823      	ldr	r3, [r4, #0]
 8008c04:	f023 0320 	bic.w	r3, r3, #32
 8008c08:	6023      	str	r3, [r4, #0]
 8008c0a:	2310      	movs	r3, #16
 8008c0c:	e7b0      	b.n	8008b70 <_printf_i+0xfc>
 8008c0e:	6823      	ldr	r3, [r4, #0]
 8008c10:	f043 0320 	orr.w	r3, r3, #32
 8008c14:	6023      	str	r3, [r4, #0]
 8008c16:	2378      	movs	r3, #120	; 0x78
 8008c18:	4828      	ldr	r0, [pc, #160]	; (8008cbc <_printf_i+0x248>)
 8008c1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c1e:	e7e3      	b.n	8008be8 <_printf_i+0x174>
 8008c20:	065e      	lsls	r6, r3, #25
 8008c22:	bf48      	it	mi
 8008c24:	b2ad      	uxthmi	r5, r5
 8008c26:	e7e6      	b.n	8008bf6 <_printf_i+0x182>
 8008c28:	4616      	mov	r6, r2
 8008c2a:	e7bb      	b.n	8008ba4 <_printf_i+0x130>
 8008c2c:	680b      	ldr	r3, [r1, #0]
 8008c2e:	6826      	ldr	r6, [r4, #0]
 8008c30:	6960      	ldr	r0, [r4, #20]
 8008c32:	1d1d      	adds	r5, r3, #4
 8008c34:	600d      	str	r5, [r1, #0]
 8008c36:	0635      	lsls	r5, r6, #24
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	d501      	bpl.n	8008c40 <_printf_i+0x1cc>
 8008c3c:	6018      	str	r0, [r3, #0]
 8008c3e:	e002      	b.n	8008c46 <_printf_i+0x1d2>
 8008c40:	0671      	lsls	r1, r6, #25
 8008c42:	d5fb      	bpl.n	8008c3c <_printf_i+0x1c8>
 8008c44:	8018      	strh	r0, [r3, #0]
 8008c46:	2300      	movs	r3, #0
 8008c48:	6123      	str	r3, [r4, #16]
 8008c4a:	4616      	mov	r6, r2
 8008c4c:	e7ba      	b.n	8008bc4 <_printf_i+0x150>
 8008c4e:	680b      	ldr	r3, [r1, #0]
 8008c50:	1d1a      	adds	r2, r3, #4
 8008c52:	600a      	str	r2, [r1, #0]
 8008c54:	681e      	ldr	r6, [r3, #0]
 8008c56:	6862      	ldr	r2, [r4, #4]
 8008c58:	2100      	movs	r1, #0
 8008c5a:	4630      	mov	r0, r6
 8008c5c:	f7f7 fac8 	bl	80001f0 <memchr>
 8008c60:	b108      	cbz	r0, 8008c66 <_printf_i+0x1f2>
 8008c62:	1b80      	subs	r0, r0, r6
 8008c64:	6060      	str	r0, [r4, #4]
 8008c66:	6863      	ldr	r3, [r4, #4]
 8008c68:	6123      	str	r3, [r4, #16]
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c70:	e7a8      	b.n	8008bc4 <_printf_i+0x150>
 8008c72:	6923      	ldr	r3, [r4, #16]
 8008c74:	4632      	mov	r2, r6
 8008c76:	4649      	mov	r1, r9
 8008c78:	4640      	mov	r0, r8
 8008c7a:	47d0      	blx	sl
 8008c7c:	3001      	adds	r0, #1
 8008c7e:	d0ab      	beq.n	8008bd8 <_printf_i+0x164>
 8008c80:	6823      	ldr	r3, [r4, #0]
 8008c82:	079b      	lsls	r3, r3, #30
 8008c84:	d413      	bmi.n	8008cae <_printf_i+0x23a>
 8008c86:	68e0      	ldr	r0, [r4, #12]
 8008c88:	9b03      	ldr	r3, [sp, #12]
 8008c8a:	4298      	cmp	r0, r3
 8008c8c:	bfb8      	it	lt
 8008c8e:	4618      	movlt	r0, r3
 8008c90:	e7a4      	b.n	8008bdc <_printf_i+0x168>
 8008c92:	2301      	movs	r3, #1
 8008c94:	4632      	mov	r2, r6
 8008c96:	4649      	mov	r1, r9
 8008c98:	4640      	mov	r0, r8
 8008c9a:	47d0      	blx	sl
 8008c9c:	3001      	adds	r0, #1
 8008c9e:	d09b      	beq.n	8008bd8 <_printf_i+0x164>
 8008ca0:	3501      	adds	r5, #1
 8008ca2:	68e3      	ldr	r3, [r4, #12]
 8008ca4:	9903      	ldr	r1, [sp, #12]
 8008ca6:	1a5b      	subs	r3, r3, r1
 8008ca8:	42ab      	cmp	r3, r5
 8008caa:	dcf2      	bgt.n	8008c92 <_printf_i+0x21e>
 8008cac:	e7eb      	b.n	8008c86 <_printf_i+0x212>
 8008cae:	2500      	movs	r5, #0
 8008cb0:	f104 0619 	add.w	r6, r4, #25
 8008cb4:	e7f5      	b.n	8008ca2 <_printf_i+0x22e>
 8008cb6:	bf00      	nop
 8008cb8:	0800dd98 	.word	0x0800dd98
 8008cbc:	0800dda9 	.word	0x0800dda9

08008cc0 <_scanf_float>:
 8008cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc4:	b087      	sub	sp, #28
 8008cc6:	4617      	mov	r7, r2
 8008cc8:	9303      	str	r3, [sp, #12]
 8008cca:	688b      	ldr	r3, [r1, #8]
 8008ccc:	1e5a      	subs	r2, r3, #1
 8008cce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008cd2:	bf83      	ittte	hi
 8008cd4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008cd8:	195b      	addhi	r3, r3, r5
 8008cda:	9302      	strhi	r3, [sp, #8]
 8008cdc:	2300      	movls	r3, #0
 8008cde:	bf86      	itte	hi
 8008ce0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008ce4:	608b      	strhi	r3, [r1, #8]
 8008ce6:	9302      	strls	r3, [sp, #8]
 8008ce8:	680b      	ldr	r3, [r1, #0]
 8008cea:	468b      	mov	fp, r1
 8008cec:	2500      	movs	r5, #0
 8008cee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008cf2:	f84b 3b1c 	str.w	r3, [fp], #28
 8008cf6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008cfa:	4680      	mov	r8, r0
 8008cfc:	460c      	mov	r4, r1
 8008cfe:	465e      	mov	r6, fp
 8008d00:	46aa      	mov	sl, r5
 8008d02:	46a9      	mov	r9, r5
 8008d04:	9501      	str	r5, [sp, #4]
 8008d06:	68a2      	ldr	r2, [r4, #8]
 8008d08:	b152      	cbz	r2, 8008d20 <_scanf_float+0x60>
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	2b4e      	cmp	r3, #78	; 0x4e
 8008d10:	d864      	bhi.n	8008ddc <_scanf_float+0x11c>
 8008d12:	2b40      	cmp	r3, #64	; 0x40
 8008d14:	d83c      	bhi.n	8008d90 <_scanf_float+0xd0>
 8008d16:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008d1a:	b2c8      	uxtb	r0, r1
 8008d1c:	280e      	cmp	r0, #14
 8008d1e:	d93a      	bls.n	8008d96 <_scanf_float+0xd6>
 8008d20:	f1b9 0f00 	cmp.w	r9, #0
 8008d24:	d003      	beq.n	8008d2e <_scanf_float+0x6e>
 8008d26:	6823      	ldr	r3, [r4, #0]
 8008d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d2c:	6023      	str	r3, [r4, #0]
 8008d2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d32:	f1ba 0f01 	cmp.w	sl, #1
 8008d36:	f200 8113 	bhi.w	8008f60 <_scanf_float+0x2a0>
 8008d3a:	455e      	cmp	r6, fp
 8008d3c:	f200 8105 	bhi.w	8008f4a <_scanf_float+0x28a>
 8008d40:	2501      	movs	r5, #1
 8008d42:	4628      	mov	r0, r5
 8008d44:	b007      	add	sp, #28
 8008d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d4a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008d4e:	2a0d      	cmp	r2, #13
 8008d50:	d8e6      	bhi.n	8008d20 <_scanf_float+0x60>
 8008d52:	a101      	add	r1, pc, #4	; (adr r1, 8008d58 <_scanf_float+0x98>)
 8008d54:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008d58:	08008e97 	.word	0x08008e97
 8008d5c:	08008d21 	.word	0x08008d21
 8008d60:	08008d21 	.word	0x08008d21
 8008d64:	08008d21 	.word	0x08008d21
 8008d68:	08008ef7 	.word	0x08008ef7
 8008d6c:	08008ecf 	.word	0x08008ecf
 8008d70:	08008d21 	.word	0x08008d21
 8008d74:	08008d21 	.word	0x08008d21
 8008d78:	08008ea5 	.word	0x08008ea5
 8008d7c:	08008d21 	.word	0x08008d21
 8008d80:	08008d21 	.word	0x08008d21
 8008d84:	08008d21 	.word	0x08008d21
 8008d88:	08008d21 	.word	0x08008d21
 8008d8c:	08008e5d 	.word	0x08008e5d
 8008d90:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008d94:	e7db      	b.n	8008d4e <_scanf_float+0x8e>
 8008d96:	290e      	cmp	r1, #14
 8008d98:	d8c2      	bhi.n	8008d20 <_scanf_float+0x60>
 8008d9a:	a001      	add	r0, pc, #4	; (adr r0, 8008da0 <_scanf_float+0xe0>)
 8008d9c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008da0:	08008e4f 	.word	0x08008e4f
 8008da4:	08008d21 	.word	0x08008d21
 8008da8:	08008e4f 	.word	0x08008e4f
 8008dac:	08008ee3 	.word	0x08008ee3
 8008db0:	08008d21 	.word	0x08008d21
 8008db4:	08008dfd 	.word	0x08008dfd
 8008db8:	08008e39 	.word	0x08008e39
 8008dbc:	08008e39 	.word	0x08008e39
 8008dc0:	08008e39 	.word	0x08008e39
 8008dc4:	08008e39 	.word	0x08008e39
 8008dc8:	08008e39 	.word	0x08008e39
 8008dcc:	08008e39 	.word	0x08008e39
 8008dd0:	08008e39 	.word	0x08008e39
 8008dd4:	08008e39 	.word	0x08008e39
 8008dd8:	08008e39 	.word	0x08008e39
 8008ddc:	2b6e      	cmp	r3, #110	; 0x6e
 8008dde:	d809      	bhi.n	8008df4 <_scanf_float+0x134>
 8008de0:	2b60      	cmp	r3, #96	; 0x60
 8008de2:	d8b2      	bhi.n	8008d4a <_scanf_float+0x8a>
 8008de4:	2b54      	cmp	r3, #84	; 0x54
 8008de6:	d077      	beq.n	8008ed8 <_scanf_float+0x218>
 8008de8:	2b59      	cmp	r3, #89	; 0x59
 8008dea:	d199      	bne.n	8008d20 <_scanf_float+0x60>
 8008dec:	2d07      	cmp	r5, #7
 8008dee:	d197      	bne.n	8008d20 <_scanf_float+0x60>
 8008df0:	2508      	movs	r5, #8
 8008df2:	e029      	b.n	8008e48 <_scanf_float+0x188>
 8008df4:	2b74      	cmp	r3, #116	; 0x74
 8008df6:	d06f      	beq.n	8008ed8 <_scanf_float+0x218>
 8008df8:	2b79      	cmp	r3, #121	; 0x79
 8008dfa:	e7f6      	b.n	8008dea <_scanf_float+0x12a>
 8008dfc:	6821      	ldr	r1, [r4, #0]
 8008dfe:	05c8      	lsls	r0, r1, #23
 8008e00:	d51a      	bpl.n	8008e38 <_scanf_float+0x178>
 8008e02:	9b02      	ldr	r3, [sp, #8]
 8008e04:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008e08:	6021      	str	r1, [r4, #0]
 8008e0a:	f109 0901 	add.w	r9, r9, #1
 8008e0e:	b11b      	cbz	r3, 8008e18 <_scanf_float+0x158>
 8008e10:	3b01      	subs	r3, #1
 8008e12:	3201      	adds	r2, #1
 8008e14:	9302      	str	r3, [sp, #8]
 8008e16:	60a2      	str	r2, [r4, #8]
 8008e18:	68a3      	ldr	r3, [r4, #8]
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	60a3      	str	r3, [r4, #8]
 8008e1e:	6923      	ldr	r3, [r4, #16]
 8008e20:	3301      	adds	r3, #1
 8008e22:	6123      	str	r3, [r4, #16]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	3b01      	subs	r3, #1
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	607b      	str	r3, [r7, #4]
 8008e2c:	f340 8084 	ble.w	8008f38 <_scanf_float+0x278>
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	3301      	adds	r3, #1
 8008e34:	603b      	str	r3, [r7, #0]
 8008e36:	e766      	b.n	8008d06 <_scanf_float+0x46>
 8008e38:	eb1a 0f05 	cmn.w	sl, r5
 8008e3c:	f47f af70 	bne.w	8008d20 <_scanf_float+0x60>
 8008e40:	6822      	ldr	r2, [r4, #0]
 8008e42:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008e46:	6022      	str	r2, [r4, #0]
 8008e48:	f806 3b01 	strb.w	r3, [r6], #1
 8008e4c:	e7e4      	b.n	8008e18 <_scanf_float+0x158>
 8008e4e:	6822      	ldr	r2, [r4, #0]
 8008e50:	0610      	lsls	r0, r2, #24
 8008e52:	f57f af65 	bpl.w	8008d20 <_scanf_float+0x60>
 8008e56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e5a:	e7f4      	b.n	8008e46 <_scanf_float+0x186>
 8008e5c:	f1ba 0f00 	cmp.w	sl, #0
 8008e60:	d10e      	bne.n	8008e80 <_scanf_float+0x1c0>
 8008e62:	f1b9 0f00 	cmp.w	r9, #0
 8008e66:	d10e      	bne.n	8008e86 <_scanf_float+0x1c6>
 8008e68:	6822      	ldr	r2, [r4, #0]
 8008e6a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008e6e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008e72:	d108      	bne.n	8008e86 <_scanf_float+0x1c6>
 8008e74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008e78:	6022      	str	r2, [r4, #0]
 8008e7a:	f04f 0a01 	mov.w	sl, #1
 8008e7e:	e7e3      	b.n	8008e48 <_scanf_float+0x188>
 8008e80:	f1ba 0f02 	cmp.w	sl, #2
 8008e84:	d055      	beq.n	8008f32 <_scanf_float+0x272>
 8008e86:	2d01      	cmp	r5, #1
 8008e88:	d002      	beq.n	8008e90 <_scanf_float+0x1d0>
 8008e8a:	2d04      	cmp	r5, #4
 8008e8c:	f47f af48 	bne.w	8008d20 <_scanf_float+0x60>
 8008e90:	3501      	adds	r5, #1
 8008e92:	b2ed      	uxtb	r5, r5
 8008e94:	e7d8      	b.n	8008e48 <_scanf_float+0x188>
 8008e96:	f1ba 0f01 	cmp.w	sl, #1
 8008e9a:	f47f af41 	bne.w	8008d20 <_scanf_float+0x60>
 8008e9e:	f04f 0a02 	mov.w	sl, #2
 8008ea2:	e7d1      	b.n	8008e48 <_scanf_float+0x188>
 8008ea4:	b97d      	cbnz	r5, 8008ec6 <_scanf_float+0x206>
 8008ea6:	f1b9 0f00 	cmp.w	r9, #0
 8008eaa:	f47f af3c 	bne.w	8008d26 <_scanf_float+0x66>
 8008eae:	6822      	ldr	r2, [r4, #0]
 8008eb0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008eb4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008eb8:	f47f af39 	bne.w	8008d2e <_scanf_float+0x6e>
 8008ebc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008ec0:	6022      	str	r2, [r4, #0]
 8008ec2:	2501      	movs	r5, #1
 8008ec4:	e7c0      	b.n	8008e48 <_scanf_float+0x188>
 8008ec6:	2d03      	cmp	r5, #3
 8008ec8:	d0e2      	beq.n	8008e90 <_scanf_float+0x1d0>
 8008eca:	2d05      	cmp	r5, #5
 8008ecc:	e7de      	b.n	8008e8c <_scanf_float+0x1cc>
 8008ece:	2d02      	cmp	r5, #2
 8008ed0:	f47f af26 	bne.w	8008d20 <_scanf_float+0x60>
 8008ed4:	2503      	movs	r5, #3
 8008ed6:	e7b7      	b.n	8008e48 <_scanf_float+0x188>
 8008ed8:	2d06      	cmp	r5, #6
 8008eda:	f47f af21 	bne.w	8008d20 <_scanf_float+0x60>
 8008ede:	2507      	movs	r5, #7
 8008ee0:	e7b2      	b.n	8008e48 <_scanf_float+0x188>
 8008ee2:	6822      	ldr	r2, [r4, #0]
 8008ee4:	0591      	lsls	r1, r2, #22
 8008ee6:	f57f af1b 	bpl.w	8008d20 <_scanf_float+0x60>
 8008eea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008eee:	6022      	str	r2, [r4, #0]
 8008ef0:	f8cd 9004 	str.w	r9, [sp, #4]
 8008ef4:	e7a8      	b.n	8008e48 <_scanf_float+0x188>
 8008ef6:	6822      	ldr	r2, [r4, #0]
 8008ef8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008efc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008f00:	d006      	beq.n	8008f10 <_scanf_float+0x250>
 8008f02:	0550      	lsls	r0, r2, #21
 8008f04:	f57f af0c 	bpl.w	8008d20 <_scanf_float+0x60>
 8008f08:	f1b9 0f00 	cmp.w	r9, #0
 8008f0c:	f43f af0f 	beq.w	8008d2e <_scanf_float+0x6e>
 8008f10:	0591      	lsls	r1, r2, #22
 8008f12:	bf58      	it	pl
 8008f14:	9901      	ldrpl	r1, [sp, #4]
 8008f16:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008f1a:	bf58      	it	pl
 8008f1c:	eba9 0101 	subpl.w	r1, r9, r1
 8008f20:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008f24:	bf58      	it	pl
 8008f26:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008f2a:	6022      	str	r2, [r4, #0]
 8008f2c:	f04f 0900 	mov.w	r9, #0
 8008f30:	e78a      	b.n	8008e48 <_scanf_float+0x188>
 8008f32:	f04f 0a03 	mov.w	sl, #3
 8008f36:	e787      	b.n	8008e48 <_scanf_float+0x188>
 8008f38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008f3c:	4639      	mov	r1, r7
 8008f3e:	4640      	mov	r0, r8
 8008f40:	4798      	blx	r3
 8008f42:	2800      	cmp	r0, #0
 8008f44:	f43f aedf 	beq.w	8008d06 <_scanf_float+0x46>
 8008f48:	e6ea      	b.n	8008d20 <_scanf_float+0x60>
 8008f4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f52:	463a      	mov	r2, r7
 8008f54:	4640      	mov	r0, r8
 8008f56:	4798      	blx	r3
 8008f58:	6923      	ldr	r3, [r4, #16]
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	6123      	str	r3, [r4, #16]
 8008f5e:	e6ec      	b.n	8008d3a <_scanf_float+0x7a>
 8008f60:	1e6b      	subs	r3, r5, #1
 8008f62:	2b06      	cmp	r3, #6
 8008f64:	d825      	bhi.n	8008fb2 <_scanf_float+0x2f2>
 8008f66:	2d02      	cmp	r5, #2
 8008f68:	d836      	bhi.n	8008fd8 <_scanf_float+0x318>
 8008f6a:	455e      	cmp	r6, fp
 8008f6c:	f67f aee8 	bls.w	8008d40 <_scanf_float+0x80>
 8008f70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f74:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f78:	463a      	mov	r2, r7
 8008f7a:	4640      	mov	r0, r8
 8008f7c:	4798      	blx	r3
 8008f7e:	6923      	ldr	r3, [r4, #16]
 8008f80:	3b01      	subs	r3, #1
 8008f82:	6123      	str	r3, [r4, #16]
 8008f84:	e7f1      	b.n	8008f6a <_scanf_float+0x2aa>
 8008f86:	9802      	ldr	r0, [sp, #8]
 8008f88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f8c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008f90:	9002      	str	r0, [sp, #8]
 8008f92:	463a      	mov	r2, r7
 8008f94:	4640      	mov	r0, r8
 8008f96:	4798      	blx	r3
 8008f98:	6923      	ldr	r3, [r4, #16]
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	6123      	str	r3, [r4, #16]
 8008f9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fa2:	fa5f fa8a 	uxtb.w	sl, sl
 8008fa6:	f1ba 0f02 	cmp.w	sl, #2
 8008faa:	d1ec      	bne.n	8008f86 <_scanf_float+0x2c6>
 8008fac:	3d03      	subs	r5, #3
 8008fae:	b2ed      	uxtb	r5, r5
 8008fb0:	1b76      	subs	r6, r6, r5
 8008fb2:	6823      	ldr	r3, [r4, #0]
 8008fb4:	05da      	lsls	r2, r3, #23
 8008fb6:	d52f      	bpl.n	8009018 <_scanf_float+0x358>
 8008fb8:	055b      	lsls	r3, r3, #21
 8008fba:	d510      	bpl.n	8008fde <_scanf_float+0x31e>
 8008fbc:	455e      	cmp	r6, fp
 8008fbe:	f67f aebf 	bls.w	8008d40 <_scanf_float+0x80>
 8008fc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008fc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008fca:	463a      	mov	r2, r7
 8008fcc:	4640      	mov	r0, r8
 8008fce:	4798      	blx	r3
 8008fd0:	6923      	ldr	r3, [r4, #16]
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	6123      	str	r3, [r4, #16]
 8008fd6:	e7f1      	b.n	8008fbc <_scanf_float+0x2fc>
 8008fd8:	46aa      	mov	sl, r5
 8008fda:	9602      	str	r6, [sp, #8]
 8008fdc:	e7df      	b.n	8008f9e <_scanf_float+0x2de>
 8008fde:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008fe2:	6923      	ldr	r3, [r4, #16]
 8008fe4:	2965      	cmp	r1, #101	; 0x65
 8008fe6:	f103 33ff 	add.w	r3, r3, #4294967295
 8008fea:	f106 35ff 	add.w	r5, r6, #4294967295
 8008fee:	6123      	str	r3, [r4, #16]
 8008ff0:	d00c      	beq.n	800900c <_scanf_float+0x34c>
 8008ff2:	2945      	cmp	r1, #69	; 0x45
 8008ff4:	d00a      	beq.n	800900c <_scanf_float+0x34c>
 8008ff6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ffa:	463a      	mov	r2, r7
 8008ffc:	4640      	mov	r0, r8
 8008ffe:	4798      	blx	r3
 8009000:	6923      	ldr	r3, [r4, #16]
 8009002:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009006:	3b01      	subs	r3, #1
 8009008:	1eb5      	subs	r5, r6, #2
 800900a:	6123      	str	r3, [r4, #16]
 800900c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009010:	463a      	mov	r2, r7
 8009012:	4640      	mov	r0, r8
 8009014:	4798      	blx	r3
 8009016:	462e      	mov	r6, r5
 8009018:	6825      	ldr	r5, [r4, #0]
 800901a:	f015 0510 	ands.w	r5, r5, #16
 800901e:	d158      	bne.n	80090d2 <_scanf_float+0x412>
 8009020:	7035      	strb	r5, [r6, #0]
 8009022:	6823      	ldr	r3, [r4, #0]
 8009024:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800902c:	d11c      	bne.n	8009068 <_scanf_float+0x3a8>
 800902e:	9b01      	ldr	r3, [sp, #4]
 8009030:	454b      	cmp	r3, r9
 8009032:	eba3 0209 	sub.w	r2, r3, r9
 8009036:	d124      	bne.n	8009082 <_scanf_float+0x3c2>
 8009038:	2200      	movs	r2, #0
 800903a:	4659      	mov	r1, fp
 800903c:	4640      	mov	r0, r8
 800903e:	f000 ff21 	bl	8009e84 <_strtod_r>
 8009042:	9b03      	ldr	r3, [sp, #12]
 8009044:	6821      	ldr	r1, [r4, #0]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f011 0f02 	tst.w	r1, #2
 800904c:	ec57 6b10 	vmov	r6, r7, d0
 8009050:	f103 0204 	add.w	r2, r3, #4
 8009054:	d020      	beq.n	8009098 <_scanf_float+0x3d8>
 8009056:	9903      	ldr	r1, [sp, #12]
 8009058:	600a      	str	r2, [r1, #0]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	e9c3 6700 	strd	r6, r7, [r3]
 8009060:	68e3      	ldr	r3, [r4, #12]
 8009062:	3301      	adds	r3, #1
 8009064:	60e3      	str	r3, [r4, #12]
 8009066:	e66c      	b.n	8008d42 <_scanf_float+0x82>
 8009068:	9b04      	ldr	r3, [sp, #16]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d0e4      	beq.n	8009038 <_scanf_float+0x378>
 800906e:	9905      	ldr	r1, [sp, #20]
 8009070:	230a      	movs	r3, #10
 8009072:	462a      	mov	r2, r5
 8009074:	3101      	adds	r1, #1
 8009076:	4640      	mov	r0, r8
 8009078:	f000 ff8e 	bl	8009f98 <_strtol_r>
 800907c:	9b04      	ldr	r3, [sp, #16]
 800907e:	9e05      	ldr	r6, [sp, #20]
 8009080:	1ac2      	subs	r2, r0, r3
 8009082:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009086:	429e      	cmp	r6, r3
 8009088:	bf28      	it	cs
 800908a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800908e:	4912      	ldr	r1, [pc, #72]	; (80090d8 <_scanf_float+0x418>)
 8009090:	4630      	mov	r0, r6
 8009092:	f000 f82b 	bl	80090ec <siprintf>
 8009096:	e7cf      	b.n	8009038 <_scanf_float+0x378>
 8009098:	f011 0f04 	tst.w	r1, #4
 800909c:	9903      	ldr	r1, [sp, #12]
 800909e:	600a      	str	r2, [r1, #0]
 80090a0:	d1db      	bne.n	800905a <_scanf_float+0x39a>
 80090a2:	f8d3 8000 	ldr.w	r8, [r3]
 80090a6:	ee10 2a10 	vmov	r2, s0
 80090aa:	ee10 0a10 	vmov	r0, s0
 80090ae:	463b      	mov	r3, r7
 80090b0:	4639      	mov	r1, r7
 80090b2:	f7f7 fd43 	bl	8000b3c <__aeabi_dcmpun>
 80090b6:	b128      	cbz	r0, 80090c4 <_scanf_float+0x404>
 80090b8:	4808      	ldr	r0, [pc, #32]	; (80090dc <_scanf_float+0x41c>)
 80090ba:	f000 f811 	bl	80090e0 <nanf>
 80090be:	ed88 0a00 	vstr	s0, [r8]
 80090c2:	e7cd      	b.n	8009060 <_scanf_float+0x3a0>
 80090c4:	4630      	mov	r0, r6
 80090c6:	4639      	mov	r1, r7
 80090c8:	f7f7 fd96 	bl	8000bf8 <__aeabi_d2f>
 80090cc:	f8c8 0000 	str.w	r0, [r8]
 80090d0:	e7c6      	b.n	8009060 <_scanf_float+0x3a0>
 80090d2:	2500      	movs	r5, #0
 80090d4:	e635      	b.n	8008d42 <_scanf_float+0x82>
 80090d6:	bf00      	nop
 80090d8:	0800ddba 	.word	0x0800ddba
 80090dc:	0800e1eb 	.word	0x0800e1eb

080090e0 <nanf>:
 80090e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80090e8 <nanf+0x8>
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	7fc00000 	.word	0x7fc00000

080090ec <siprintf>:
 80090ec:	b40e      	push	{r1, r2, r3}
 80090ee:	b500      	push	{lr}
 80090f0:	b09c      	sub	sp, #112	; 0x70
 80090f2:	ab1d      	add	r3, sp, #116	; 0x74
 80090f4:	9002      	str	r0, [sp, #8]
 80090f6:	9006      	str	r0, [sp, #24]
 80090f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80090fc:	4809      	ldr	r0, [pc, #36]	; (8009124 <siprintf+0x38>)
 80090fe:	9107      	str	r1, [sp, #28]
 8009100:	9104      	str	r1, [sp, #16]
 8009102:	4909      	ldr	r1, [pc, #36]	; (8009128 <siprintf+0x3c>)
 8009104:	f853 2b04 	ldr.w	r2, [r3], #4
 8009108:	9105      	str	r1, [sp, #20]
 800910a:	6800      	ldr	r0, [r0, #0]
 800910c:	9301      	str	r3, [sp, #4]
 800910e:	a902      	add	r1, sp, #8
 8009110:	f002 ff4e 	bl	800bfb0 <_svfiprintf_r>
 8009114:	9b02      	ldr	r3, [sp, #8]
 8009116:	2200      	movs	r2, #0
 8009118:	701a      	strb	r2, [r3, #0]
 800911a:	b01c      	add	sp, #112	; 0x70
 800911c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009120:	b003      	add	sp, #12
 8009122:	4770      	bx	lr
 8009124:	20000018 	.word	0x20000018
 8009128:	ffff0208 	.word	0xffff0208

0800912c <siscanf>:
 800912c:	b40e      	push	{r1, r2, r3}
 800912e:	b510      	push	{r4, lr}
 8009130:	b09f      	sub	sp, #124	; 0x7c
 8009132:	ac21      	add	r4, sp, #132	; 0x84
 8009134:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009138:	f854 2b04 	ldr.w	r2, [r4], #4
 800913c:	9201      	str	r2, [sp, #4]
 800913e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8009142:	9004      	str	r0, [sp, #16]
 8009144:	9008      	str	r0, [sp, #32]
 8009146:	f7f7 f84b 	bl	80001e0 <strlen>
 800914a:	4b0c      	ldr	r3, [pc, #48]	; (800917c <siscanf+0x50>)
 800914c:	9005      	str	r0, [sp, #20]
 800914e:	9009      	str	r0, [sp, #36]	; 0x24
 8009150:	930d      	str	r3, [sp, #52]	; 0x34
 8009152:	480b      	ldr	r0, [pc, #44]	; (8009180 <siscanf+0x54>)
 8009154:	9a01      	ldr	r2, [sp, #4]
 8009156:	6800      	ldr	r0, [r0, #0]
 8009158:	9403      	str	r4, [sp, #12]
 800915a:	2300      	movs	r3, #0
 800915c:	9311      	str	r3, [sp, #68]	; 0x44
 800915e:	9316      	str	r3, [sp, #88]	; 0x58
 8009160:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009164:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009168:	a904      	add	r1, sp, #16
 800916a:	4623      	mov	r3, r4
 800916c:	f003 f87a 	bl	800c264 <__ssvfiscanf_r>
 8009170:	b01f      	add	sp, #124	; 0x7c
 8009172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009176:	b003      	add	sp, #12
 8009178:	4770      	bx	lr
 800917a:	bf00      	nop
 800917c:	080091a7 	.word	0x080091a7
 8009180:	20000018 	.word	0x20000018

08009184 <__sread>:
 8009184:	b510      	push	{r4, lr}
 8009186:	460c      	mov	r4, r1
 8009188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800918c:	f003 fb2e 	bl	800c7ec <_read_r>
 8009190:	2800      	cmp	r0, #0
 8009192:	bfab      	itete	ge
 8009194:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009196:	89a3      	ldrhlt	r3, [r4, #12]
 8009198:	181b      	addge	r3, r3, r0
 800919a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800919e:	bfac      	ite	ge
 80091a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80091a2:	81a3      	strhlt	r3, [r4, #12]
 80091a4:	bd10      	pop	{r4, pc}

080091a6 <__seofread>:
 80091a6:	2000      	movs	r0, #0
 80091a8:	4770      	bx	lr

080091aa <__swrite>:
 80091aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091ae:	461f      	mov	r7, r3
 80091b0:	898b      	ldrh	r3, [r1, #12]
 80091b2:	05db      	lsls	r3, r3, #23
 80091b4:	4605      	mov	r5, r0
 80091b6:	460c      	mov	r4, r1
 80091b8:	4616      	mov	r6, r2
 80091ba:	d505      	bpl.n	80091c8 <__swrite+0x1e>
 80091bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091c0:	2302      	movs	r3, #2
 80091c2:	2200      	movs	r2, #0
 80091c4:	f002 f8f8 	bl	800b3b8 <_lseek_r>
 80091c8:	89a3      	ldrh	r3, [r4, #12]
 80091ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091d2:	81a3      	strh	r3, [r4, #12]
 80091d4:	4632      	mov	r2, r6
 80091d6:	463b      	mov	r3, r7
 80091d8:	4628      	mov	r0, r5
 80091da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091de:	f000 bedd 	b.w	8009f9c <_write_r>

080091e2 <__sseek>:
 80091e2:	b510      	push	{r4, lr}
 80091e4:	460c      	mov	r4, r1
 80091e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091ea:	f002 f8e5 	bl	800b3b8 <_lseek_r>
 80091ee:	1c43      	adds	r3, r0, #1
 80091f0:	89a3      	ldrh	r3, [r4, #12]
 80091f2:	bf15      	itete	ne
 80091f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80091f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80091fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80091fe:	81a3      	strheq	r3, [r4, #12]
 8009200:	bf18      	it	ne
 8009202:	81a3      	strhne	r3, [r4, #12]
 8009204:	bd10      	pop	{r4, pc}

08009206 <__sclose>:
 8009206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800920a:	f000 bed9 	b.w	8009fc0 <_close_r>

0800920e <strncmp>:
 800920e:	b510      	push	{r4, lr}
 8009210:	b16a      	cbz	r2, 800922e <strncmp+0x20>
 8009212:	3901      	subs	r1, #1
 8009214:	1884      	adds	r4, r0, r2
 8009216:	f810 3b01 	ldrb.w	r3, [r0], #1
 800921a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800921e:	4293      	cmp	r3, r2
 8009220:	d103      	bne.n	800922a <strncmp+0x1c>
 8009222:	42a0      	cmp	r0, r4
 8009224:	d001      	beq.n	800922a <strncmp+0x1c>
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1f5      	bne.n	8009216 <strncmp+0x8>
 800922a:	1a98      	subs	r0, r3, r2
 800922c:	bd10      	pop	{r4, pc}
 800922e:	4610      	mov	r0, r2
 8009230:	e7fc      	b.n	800922c <strncmp+0x1e>

08009232 <sulp>:
 8009232:	b570      	push	{r4, r5, r6, lr}
 8009234:	4604      	mov	r4, r0
 8009236:	460d      	mov	r5, r1
 8009238:	ec45 4b10 	vmov	d0, r4, r5
 800923c:	4616      	mov	r6, r2
 800923e:	f002 fc53 	bl	800bae8 <__ulp>
 8009242:	ec51 0b10 	vmov	r0, r1, d0
 8009246:	b17e      	cbz	r6, 8009268 <sulp+0x36>
 8009248:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800924c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009250:	2b00      	cmp	r3, #0
 8009252:	dd09      	ble.n	8009268 <sulp+0x36>
 8009254:	051b      	lsls	r3, r3, #20
 8009256:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800925a:	2400      	movs	r4, #0
 800925c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009260:	4622      	mov	r2, r4
 8009262:	462b      	mov	r3, r5
 8009264:	f7f7 f9d0 	bl	8000608 <__aeabi_dmul>
 8009268:	bd70      	pop	{r4, r5, r6, pc}
 800926a:	0000      	movs	r0, r0
 800926c:	0000      	movs	r0, r0
	...

08009270 <_strtod_l>:
 8009270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009274:	b0a3      	sub	sp, #140	; 0x8c
 8009276:	461f      	mov	r7, r3
 8009278:	2300      	movs	r3, #0
 800927a:	931e      	str	r3, [sp, #120]	; 0x78
 800927c:	4ba4      	ldr	r3, [pc, #656]	; (8009510 <_strtod_l+0x2a0>)
 800927e:	9219      	str	r2, [sp, #100]	; 0x64
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	9307      	str	r3, [sp, #28]
 8009284:	4604      	mov	r4, r0
 8009286:	4618      	mov	r0, r3
 8009288:	4688      	mov	r8, r1
 800928a:	f7f6 ffa9 	bl	80001e0 <strlen>
 800928e:	f04f 0a00 	mov.w	sl, #0
 8009292:	4605      	mov	r5, r0
 8009294:	f04f 0b00 	mov.w	fp, #0
 8009298:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800929c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800929e:	781a      	ldrb	r2, [r3, #0]
 80092a0:	2a2b      	cmp	r2, #43	; 0x2b
 80092a2:	d04c      	beq.n	800933e <_strtod_l+0xce>
 80092a4:	d839      	bhi.n	800931a <_strtod_l+0xaa>
 80092a6:	2a0d      	cmp	r2, #13
 80092a8:	d832      	bhi.n	8009310 <_strtod_l+0xa0>
 80092aa:	2a08      	cmp	r2, #8
 80092ac:	d832      	bhi.n	8009314 <_strtod_l+0xa4>
 80092ae:	2a00      	cmp	r2, #0
 80092b0:	d03c      	beq.n	800932c <_strtod_l+0xbc>
 80092b2:	2300      	movs	r3, #0
 80092b4:	930e      	str	r3, [sp, #56]	; 0x38
 80092b6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80092b8:	7833      	ldrb	r3, [r6, #0]
 80092ba:	2b30      	cmp	r3, #48	; 0x30
 80092bc:	f040 80b4 	bne.w	8009428 <_strtod_l+0x1b8>
 80092c0:	7873      	ldrb	r3, [r6, #1]
 80092c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80092c6:	2b58      	cmp	r3, #88	; 0x58
 80092c8:	d16c      	bne.n	80093a4 <_strtod_l+0x134>
 80092ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092cc:	9301      	str	r3, [sp, #4]
 80092ce:	ab1e      	add	r3, sp, #120	; 0x78
 80092d0:	9702      	str	r7, [sp, #8]
 80092d2:	9300      	str	r3, [sp, #0]
 80092d4:	4a8f      	ldr	r2, [pc, #572]	; (8009514 <_strtod_l+0x2a4>)
 80092d6:	ab1f      	add	r3, sp, #124	; 0x7c
 80092d8:	a91d      	add	r1, sp, #116	; 0x74
 80092da:	4620      	mov	r0, r4
 80092dc:	f001 fd60 	bl	800ada0 <__gethex>
 80092e0:	f010 0707 	ands.w	r7, r0, #7
 80092e4:	4605      	mov	r5, r0
 80092e6:	d005      	beq.n	80092f4 <_strtod_l+0x84>
 80092e8:	2f06      	cmp	r7, #6
 80092ea:	d12a      	bne.n	8009342 <_strtod_l+0xd2>
 80092ec:	3601      	adds	r6, #1
 80092ee:	2300      	movs	r3, #0
 80092f0:	961d      	str	r6, [sp, #116]	; 0x74
 80092f2:	930e      	str	r3, [sp, #56]	; 0x38
 80092f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	f040 8596 	bne.w	8009e28 <_strtod_l+0xbb8>
 80092fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092fe:	b1db      	cbz	r3, 8009338 <_strtod_l+0xc8>
 8009300:	4652      	mov	r2, sl
 8009302:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009306:	ec43 2b10 	vmov	d0, r2, r3
 800930a:	b023      	add	sp, #140	; 0x8c
 800930c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009310:	2a20      	cmp	r2, #32
 8009312:	d1ce      	bne.n	80092b2 <_strtod_l+0x42>
 8009314:	3301      	adds	r3, #1
 8009316:	931d      	str	r3, [sp, #116]	; 0x74
 8009318:	e7c0      	b.n	800929c <_strtod_l+0x2c>
 800931a:	2a2d      	cmp	r2, #45	; 0x2d
 800931c:	d1c9      	bne.n	80092b2 <_strtod_l+0x42>
 800931e:	2201      	movs	r2, #1
 8009320:	920e      	str	r2, [sp, #56]	; 0x38
 8009322:	1c5a      	adds	r2, r3, #1
 8009324:	921d      	str	r2, [sp, #116]	; 0x74
 8009326:	785b      	ldrb	r3, [r3, #1]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1c4      	bne.n	80092b6 <_strtod_l+0x46>
 800932c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800932e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009332:	2b00      	cmp	r3, #0
 8009334:	f040 8576 	bne.w	8009e24 <_strtod_l+0xbb4>
 8009338:	4652      	mov	r2, sl
 800933a:	465b      	mov	r3, fp
 800933c:	e7e3      	b.n	8009306 <_strtod_l+0x96>
 800933e:	2200      	movs	r2, #0
 8009340:	e7ee      	b.n	8009320 <_strtod_l+0xb0>
 8009342:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009344:	b13a      	cbz	r2, 8009356 <_strtod_l+0xe6>
 8009346:	2135      	movs	r1, #53	; 0x35
 8009348:	a820      	add	r0, sp, #128	; 0x80
 800934a:	f002 fcd8 	bl	800bcfe <__copybits>
 800934e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009350:	4620      	mov	r0, r4
 8009352:	f002 f89d 	bl	800b490 <_Bfree>
 8009356:	3f01      	subs	r7, #1
 8009358:	2f05      	cmp	r7, #5
 800935a:	d807      	bhi.n	800936c <_strtod_l+0xfc>
 800935c:	e8df f007 	tbb	[pc, r7]
 8009360:	1d180b0e 	.word	0x1d180b0e
 8009364:	030e      	.short	0x030e
 8009366:	f04f 0b00 	mov.w	fp, #0
 800936a:	46da      	mov	sl, fp
 800936c:	0728      	lsls	r0, r5, #28
 800936e:	d5c1      	bpl.n	80092f4 <_strtod_l+0x84>
 8009370:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009374:	e7be      	b.n	80092f4 <_strtod_l+0x84>
 8009376:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800937a:	e7f7      	b.n	800936c <_strtod_l+0xfc>
 800937c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8009380:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009382:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009386:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800938a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800938e:	e7ed      	b.n	800936c <_strtod_l+0xfc>
 8009390:	f8df b184 	ldr.w	fp, [pc, #388]	; 8009518 <_strtod_l+0x2a8>
 8009394:	f04f 0a00 	mov.w	sl, #0
 8009398:	e7e8      	b.n	800936c <_strtod_l+0xfc>
 800939a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800939e:	f04f 3aff 	mov.w	sl, #4294967295
 80093a2:	e7e3      	b.n	800936c <_strtod_l+0xfc>
 80093a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80093a6:	1c5a      	adds	r2, r3, #1
 80093a8:	921d      	str	r2, [sp, #116]	; 0x74
 80093aa:	785b      	ldrb	r3, [r3, #1]
 80093ac:	2b30      	cmp	r3, #48	; 0x30
 80093ae:	d0f9      	beq.n	80093a4 <_strtod_l+0x134>
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d09f      	beq.n	80092f4 <_strtod_l+0x84>
 80093b4:	2301      	movs	r3, #1
 80093b6:	f04f 0900 	mov.w	r9, #0
 80093ba:	9304      	str	r3, [sp, #16]
 80093bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80093be:	930a      	str	r3, [sp, #40]	; 0x28
 80093c0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80093c4:	464f      	mov	r7, r9
 80093c6:	220a      	movs	r2, #10
 80093c8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80093ca:	7806      	ldrb	r6, [r0, #0]
 80093cc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80093d0:	b2d9      	uxtb	r1, r3
 80093d2:	2909      	cmp	r1, #9
 80093d4:	d92a      	bls.n	800942c <_strtod_l+0x1bc>
 80093d6:	9907      	ldr	r1, [sp, #28]
 80093d8:	462a      	mov	r2, r5
 80093da:	f7ff ff18 	bl	800920e <strncmp>
 80093de:	b398      	cbz	r0, 8009448 <_strtod_l+0x1d8>
 80093e0:	2000      	movs	r0, #0
 80093e2:	4633      	mov	r3, r6
 80093e4:	463d      	mov	r5, r7
 80093e6:	9007      	str	r0, [sp, #28]
 80093e8:	4602      	mov	r2, r0
 80093ea:	2b65      	cmp	r3, #101	; 0x65
 80093ec:	d001      	beq.n	80093f2 <_strtod_l+0x182>
 80093ee:	2b45      	cmp	r3, #69	; 0x45
 80093f0:	d118      	bne.n	8009424 <_strtod_l+0x1b4>
 80093f2:	b91d      	cbnz	r5, 80093fc <_strtod_l+0x18c>
 80093f4:	9b04      	ldr	r3, [sp, #16]
 80093f6:	4303      	orrs	r3, r0
 80093f8:	d098      	beq.n	800932c <_strtod_l+0xbc>
 80093fa:	2500      	movs	r5, #0
 80093fc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8009400:	f108 0301 	add.w	r3, r8, #1
 8009404:	931d      	str	r3, [sp, #116]	; 0x74
 8009406:	f898 3001 	ldrb.w	r3, [r8, #1]
 800940a:	2b2b      	cmp	r3, #43	; 0x2b
 800940c:	d075      	beq.n	80094fa <_strtod_l+0x28a>
 800940e:	2b2d      	cmp	r3, #45	; 0x2d
 8009410:	d07b      	beq.n	800950a <_strtod_l+0x29a>
 8009412:	f04f 0c00 	mov.w	ip, #0
 8009416:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800941a:	2909      	cmp	r1, #9
 800941c:	f240 8082 	bls.w	8009524 <_strtod_l+0x2b4>
 8009420:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009424:	2600      	movs	r6, #0
 8009426:	e09d      	b.n	8009564 <_strtod_l+0x2f4>
 8009428:	2300      	movs	r3, #0
 800942a:	e7c4      	b.n	80093b6 <_strtod_l+0x146>
 800942c:	2f08      	cmp	r7, #8
 800942e:	bfd8      	it	le
 8009430:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009432:	f100 0001 	add.w	r0, r0, #1
 8009436:	bfda      	itte	le
 8009438:	fb02 3301 	mlale	r3, r2, r1, r3
 800943c:	9309      	strle	r3, [sp, #36]	; 0x24
 800943e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009442:	3701      	adds	r7, #1
 8009444:	901d      	str	r0, [sp, #116]	; 0x74
 8009446:	e7bf      	b.n	80093c8 <_strtod_l+0x158>
 8009448:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800944a:	195a      	adds	r2, r3, r5
 800944c:	921d      	str	r2, [sp, #116]	; 0x74
 800944e:	5d5b      	ldrb	r3, [r3, r5]
 8009450:	2f00      	cmp	r7, #0
 8009452:	d037      	beq.n	80094c4 <_strtod_l+0x254>
 8009454:	9007      	str	r0, [sp, #28]
 8009456:	463d      	mov	r5, r7
 8009458:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800945c:	2a09      	cmp	r2, #9
 800945e:	d912      	bls.n	8009486 <_strtod_l+0x216>
 8009460:	2201      	movs	r2, #1
 8009462:	e7c2      	b.n	80093ea <_strtod_l+0x17a>
 8009464:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009466:	1c5a      	adds	r2, r3, #1
 8009468:	921d      	str	r2, [sp, #116]	; 0x74
 800946a:	785b      	ldrb	r3, [r3, #1]
 800946c:	3001      	adds	r0, #1
 800946e:	2b30      	cmp	r3, #48	; 0x30
 8009470:	d0f8      	beq.n	8009464 <_strtod_l+0x1f4>
 8009472:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009476:	2a08      	cmp	r2, #8
 8009478:	f200 84db 	bhi.w	8009e32 <_strtod_l+0xbc2>
 800947c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800947e:	9007      	str	r0, [sp, #28]
 8009480:	2000      	movs	r0, #0
 8009482:	920a      	str	r2, [sp, #40]	; 0x28
 8009484:	4605      	mov	r5, r0
 8009486:	3b30      	subs	r3, #48	; 0x30
 8009488:	f100 0201 	add.w	r2, r0, #1
 800948c:	d014      	beq.n	80094b8 <_strtod_l+0x248>
 800948e:	9907      	ldr	r1, [sp, #28]
 8009490:	4411      	add	r1, r2
 8009492:	9107      	str	r1, [sp, #28]
 8009494:	462a      	mov	r2, r5
 8009496:	eb00 0e05 	add.w	lr, r0, r5
 800949a:	210a      	movs	r1, #10
 800949c:	4572      	cmp	r2, lr
 800949e:	d113      	bne.n	80094c8 <_strtod_l+0x258>
 80094a0:	182a      	adds	r2, r5, r0
 80094a2:	2a08      	cmp	r2, #8
 80094a4:	f105 0501 	add.w	r5, r5, #1
 80094a8:	4405      	add	r5, r0
 80094aa:	dc1c      	bgt.n	80094e6 <_strtod_l+0x276>
 80094ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094ae:	220a      	movs	r2, #10
 80094b0:	fb02 3301 	mla	r3, r2, r1, r3
 80094b4:	9309      	str	r3, [sp, #36]	; 0x24
 80094b6:	2200      	movs	r2, #0
 80094b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80094ba:	1c59      	adds	r1, r3, #1
 80094bc:	911d      	str	r1, [sp, #116]	; 0x74
 80094be:	785b      	ldrb	r3, [r3, #1]
 80094c0:	4610      	mov	r0, r2
 80094c2:	e7c9      	b.n	8009458 <_strtod_l+0x1e8>
 80094c4:	4638      	mov	r0, r7
 80094c6:	e7d2      	b.n	800946e <_strtod_l+0x1fe>
 80094c8:	2a08      	cmp	r2, #8
 80094ca:	dc04      	bgt.n	80094d6 <_strtod_l+0x266>
 80094cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80094ce:	434e      	muls	r6, r1
 80094d0:	9609      	str	r6, [sp, #36]	; 0x24
 80094d2:	3201      	adds	r2, #1
 80094d4:	e7e2      	b.n	800949c <_strtod_l+0x22c>
 80094d6:	f102 0c01 	add.w	ip, r2, #1
 80094da:	f1bc 0f10 	cmp.w	ip, #16
 80094de:	bfd8      	it	le
 80094e0:	fb01 f909 	mulle.w	r9, r1, r9
 80094e4:	e7f5      	b.n	80094d2 <_strtod_l+0x262>
 80094e6:	2d10      	cmp	r5, #16
 80094e8:	bfdc      	itt	le
 80094ea:	220a      	movle	r2, #10
 80094ec:	fb02 3909 	mlale	r9, r2, r9, r3
 80094f0:	e7e1      	b.n	80094b6 <_strtod_l+0x246>
 80094f2:	2300      	movs	r3, #0
 80094f4:	9307      	str	r3, [sp, #28]
 80094f6:	2201      	movs	r2, #1
 80094f8:	e77c      	b.n	80093f4 <_strtod_l+0x184>
 80094fa:	f04f 0c00 	mov.w	ip, #0
 80094fe:	f108 0302 	add.w	r3, r8, #2
 8009502:	931d      	str	r3, [sp, #116]	; 0x74
 8009504:	f898 3002 	ldrb.w	r3, [r8, #2]
 8009508:	e785      	b.n	8009416 <_strtod_l+0x1a6>
 800950a:	f04f 0c01 	mov.w	ip, #1
 800950e:	e7f6      	b.n	80094fe <_strtod_l+0x28e>
 8009510:	0800e010 	.word	0x0800e010
 8009514:	0800ddc0 	.word	0x0800ddc0
 8009518:	7ff00000 	.word	0x7ff00000
 800951c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800951e:	1c59      	adds	r1, r3, #1
 8009520:	911d      	str	r1, [sp, #116]	; 0x74
 8009522:	785b      	ldrb	r3, [r3, #1]
 8009524:	2b30      	cmp	r3, #48	; 0x30
 8009526:	d0f9      	beq.n	800951c <_strtod_l+0x2ac>
 8009528:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800952c:	2908      	cmp	r1, #8
 800952e:	f63f af79 	bhi.w	8009424 <_strtod_l+0x1b4>
 8009532:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009536:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009538:	9308      	str	r3, [sp, #32]
 800953a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800953c:	1c59      	adds	r1, r3, #1
 800953e:	911d      	str	r1, [sp, #116]	; 0x74
 8009540:	785b      	ldrb	r3, [r3, #1]
 8009542:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8009546:	2e09      	cmp	r6, #9
 8009548:	d937      	bls.n	80095ba <_strtod_l+0x34a>
 800954a:	9e08      	ldr	r6, [sp, #32]
 800954c:	1b89      	subs	r1, r1, r6
 800954e:	2908      	cmp	r1, #8
 8009550:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009554:	dc02      	bgt.n	800955c <_strtod_l+0x2ec>
 8009556:	4576      	cmp	r6, lr
 8009558:	bfa8      	it	ge
 800955a:	4676      	movge	r6, lr
 800955c:	f1bc 0f00 	cmp.w	ip, #0
 8009560:	d000      	beq.n	8009564 <_strtod_l+0x2f4>
 8009562:	4276      	negs	r6, r6
 8009564:	2d00      	cmp	r5, #0
 8009566:	d14f      	bne.n	8009608 <_strtod_l+0x398>
 8009568:	9904      	ldr	r1, [sp, #16]
 800956a:	4301      	orrs	r1, r0
 800956c:	f47f aec2 	bne.w	80092f4 <_strtod_l+0x84>
 8009570:	2a00      	cmp	r2, #0
 8009572:	f47f aedb 	bne.w	800932c <_strtod_l+0xbc>
 8009576:	2b69      	cmp	r3, #105	; 0x69
 8009578:	d027      	beq.n	80095ca <_strtod_l+0x35a>
 800957a:	dc24      	bgt.n	80095c6 <_strtod_l+0x356>
 800957c:	2b49      	cmp	r3, #73	; 0x49
 800957e:	d024      	beq.n	80095ca <_strtod_l+0x35a>
 8009580:	2b4e      	cmp	r3, #78	; 0x4e
 8009582:	f47f aed3 	bne.w	800932c <_strtod_l+0xbc>
 8009586:	499e      	ldr	r1, [pc, #632]	; (8009800 <_strtod_l+0x590>)
 8009588:	a81d      	add	r0, sp, #116	; 0x74
 800958a:	f001 fe61 	bl	800b250 <__match>
 800958e:	2800      	cmp	r0, #0
 8009590:	f43f aecc 	beq.w	800932c <_strtod_l+0xbc>
 8009594:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	2b28      	cmp	r3, #40	; 0x28
 800959a:	d12d      	bne.n	80095f8 <_strtod_l+0x388>
 800959c:	4999      	ldr	r1, [pc, #612]	; (8009804 <_strtod_l+0x594>)
 800959e:	aa20      	add	r2, sp, #128	; 0x80
 80095a0:	a81d      	add	r0, sp, #116	; 0x74
 80095a2:	f001 fe69 	bl	800b278 <__hexnan>
 80095a6:	2805      	cmp	r0, #5
 80095a8:	d126      	bne.n	80095f8 <_strtod_l+0x388>
 80095aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095ac:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80095b0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80095b4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80095b8:	e69c      	b.n	80092f4 <_strtod_l+0x84>
 80095ba:	210a      	movs	r1, #10
 80095bc:	fb01 3e0e 	mla	lr, r1, lr, r3
 80095c0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80095c4:	e7b9      	b.n	800953a <_strtod_l+0x2ca>
 80095c6:	2b6e      	cmp	r3, #110	; 0x6e
 80095c8:	e7db      	b.n	8009582 <_strtod_l+0x312>
 80095ca:	498f      	ldr	r1, [pc, #572]	; (8009808 <_strtod_l+0x598>)
 80095cc:	a81d      	add	r0, sp, #116	; 0x74
 80095ce:	f001 fe3f 	bl	800b250 <__match>
 80095d2:	2800      	cmp	r0, #0
 80095d4:	f43f aeaa 	beq.w	800932c <_strtod_l+0xbc>
 80095d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80095da:	498c      	ldr	r1, [pc, #560]	; (800980c <_strtod_l+0x59c>)
 80095dc:	3b01      	subs	r3, #1
 80095de:	a81d      	add	r0, sp, #116	; 0x74
 80095e0:	931d      	str	r3, [sp, #116]	; 0x74
 80095e2:	f001 fe35 	bl	800b250 <__match>
 80095e6:	b910      	cbnz	r0, 80095ee <_strtod_l+0x37e>
 80095e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80095ea:	3301      	adds	r3, #1
 80095ec:	931d      	str	r3, [sp, #116]	; 0x74
 80095ee:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800981c <_strtod_l+0x5ac>
 80095f2:	f04f 0a00 	mov.w	sl, #0
 80095f6:	e67d      	b.n	80092f4 <_strtod_l+0x84>
 80095f8:	4885      	ldr	r0, [pc, #532]	; (8009810 <_strtod_l+0x5a0>)
 80095fa:	f003 f909 	bl	800c810 <nan>
 80095fe:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009602:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009606:	e675      	b.n	80092f4 <_strtod_l+0x84>
 8009608:	9b07      	ldr	r3, [sp, #28]
 800960a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800960c:	1af3      	subs	r3, r6, r3
 800960e:	2f00      	cmp	r7, #0
 8009610:	bf08      	it	eq
 8009612:	462f      	moveq	r7, r5
 8009614:	2d10      	cmp	r5, #16
 8009616:	9308      	str	r3, [sp, #32]
 8009618:	46a8      	mov	r8, r5
 800961a:	bfa8      	it	ge
 800961c:	f04f 0810 	movge.w	r8, #16
 8009620:	f7f6 ff78 	bl	8000514 <__aeabi_ui2d>
 8009624:	2d09      	cmp	r5, #9
 8009626:	4682      	mov	sl, r0
 8009628:	468b      	mov	fp, r1
 800962a:	dd13      	ble.n	8009654 <_strtod_l+0x3e4>
 800962c:	4b79      	ldr	r3, [pc, #484]	; (8009814 <_strtod_l+0x5a4>)
 800962e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009632:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009636:	f7f6 ffe7 	bl	8000608 <__aeabi_dmul>
 800963a:	4682      	mov	sl, r0
 800963c:	4648      	mov	r0, r9
 800963e:	468b      	mov	fp, r1
 8009640:	f7f6 ff68 	bl	8000514 <__aeabi_ui2d>
 8009644:	4602      	mov	r2, r0
 8009646:	460b      	mov	r3, r1
 8009648:	4650      	mov	r0, sl
 800964a:	4659      	mov	r1, fp
 800964c:	f7f6 fe26 	bl	800029c <__adddf3>
 8009650:	4682      	mov	sl, r0
 8009652:	468b      	mov	fp, r1
 8009654:	2d0f      	cmp	r5, #15
 8009656:	dc38      	bgt.n	80096ca <_strtod_l+0x45a>
 8009658:	9b08      	ldr	r3, [sp, #32]
 800965a:	2b00      	cmp	r3, #0
 800965c:	f43f ae4a 	beq.w	80092f4 <_strtod_l+0x84>
 8009660:	dd24      	ble.n	80096ac <_strtod_l+0x43c>
 8009662:	2b16      	cmp	r3, #22
 8009664:	dc0b      	bgt.n	800967e <_strtod_l+0x40e>
 8009666:	4d6b      	ldr	r5, [pc, #428]	; (8009814 <_strtod_l+0x5a4>)
 8009668:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800966c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009670:	4652      	mov	r2, sl
 8009672:	465b      	mov	r3, fp
 8009674:	f7f6 ffc8 	bl	8000608 <__aeabi_dmul>
 8009678:	4682      	mov	sl, r0
 800967a:	468b      	mov	fp, r1
 800967c:	e63a      	b.n	80092f4 <_strtod_l+0x84>
 800967e:	9a08      	ldr	r2, [sp, #32]
 8009680:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009684:	4293      	cmp	r3, r2
 8009686:	db20      	blt.n	80096ca <_strtod_l+0x45a>
 8009688:	4c62      	ldr	r4, [pc, #392]	; (8009814 <_strtod_l+0x5a4>)
 800968a:	f1c5 050f 	rsb	r5, r5, #15
 800968e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009692:	4652      	mov	r2, sl
 8009694:	465b      	mov	r3, fp
 8009696:	e9d1 0100 	ldrd	r0, r1, [r1]
 800969a:	f7f6 ffb5 	bl	8000608 <__aeabi_dmul>
 800969e:	9b08      	ldr	r3, [sp, #32]
 80096a0:	1b5d      	subs	r5, r3, r5
 80096a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80096a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80096aa:	e7e3      	b.n	8009674 <_strtod_l+0x404>
 80096ac:	9b08      	ldr	r3, [sp, #32]
 80096ae:	3316      	adds	r3, #22
 80096b0:	db0b      	blt.n	80096ca <_strtod_l+0x45a>
 80096b2:	9b07      	ldr	r3, [sp, #28]
 80096b4:	4a57      	ldr	r2, [pc, #348]	; (8009814 <_strtod_l+0x5a4>)
 80096b6:	1b9e      	subs	r6, r3, r6
 80096b8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80096bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80096c0:	4650      	mov	r0, sl
 80096c2:	4659      	mov	r1, fp
 80096c4:	f7f7 f8ca 	bl	800085c <__aeabi_ddiv>
 80096c8:	e7d6      	b.n	8009678 <_strtod_l+0x408>
 80096ca:	9b08      	ldr	r3, [sp, #32]
 80096cc:	eba5 0808 	sub.w	r8, r5, r8
 80096d0:	4498      	add	r8, r3
 80096d2:	f1b8 0f00 	cmp.w	r8, #0
 80096d6:	dd71      	ble.n	80097bc <_strtod_l+0x54c>
 80096d8:	f018 030f 	ands.w	r3, r8, #15
 80096dc:	d00a      	beq.n	80096f4 <_strtod_l+0x484>
 80096de:	494d      	ldr	r1, [pc, #308]	; (8009814 <_strtod_l+0x5a4>)
 80096e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80096e4:	4652      	mov	r2, sl
 80096e6:	465b      	mov	r3, fp
 80096e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096ec:	f7f6 ff8c 	bl	8000608 <__aeabi_dmul>
 80096f0:	4682      	mov	sl, r0
 80096f2:	468b      	mov	fp, r1
 80096f4:	f038 080f 	bics.w	r8, r8, #15
 80096f8:	d04d      	beq.n	8009796 <_strtod_l+0x526>
 80096fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80096fe:	dd22      	ble.n	8009746 <_strtod_l+0x4d6>
 8009700:	2500      	movs	r5, #0
 8009702:	462e      	mov	r6, r5
 8009704:	9509      	str	r5, [sp, #36]	; 0x24
 8009706:	9507      	str	r5, [sp, #28]
 8009708:	2322      	movs	r3, #34	; 0x22
 800970a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800981c <_strtod_l+0x5ac>
 800970e:	6023      	str	r3, [r4, #0]
 8009710:	f04f 0a00 	mov.w	sl, #0
 8009714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009716:	2b00      	cmp	r3, #0
 8009718:	f43f adec 	beq.w	80092f4 <_strtod_l+0x84>
 800971c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800971e:	4620      	mov	r0, r4
 8009720:	f001 feb6 	bl	800b490 <_Bfree>
 8009724:	9907      	ldr	r1, [sp, #28]
 8009726:	4620      	mov	r0, r4
 8009728:	f001 feb2 	bl	800b490 <_Bfree>
 800972c:	4631      	mov	r1, r6
 800972e:	4620      	mov	r0, r4
 8009730:	f001 feae 	bl	800b490 <_Bfree>
 8009734:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009736:	4620      	mov	r0, r4
 8009738:	f001 feaa 	bl	800b490 <_Bfree>
 800973c:	4629      	mov	r1, r5
 800973e:	4620      	mov	r0, r4
 8009740:	f001 fea6 	bl	800b490 <_Bfree>
 8009744:	e5d6      	b.n	80092f4 <_strtod_l+0x84>
 8009746:	2300      	movs	r3, #0
 8009748:	ea4f 1828 	mov.w	r8, r8, asr #4
 800974c:	4650      	mov	r0, sl
 800974e:	4659      	mov	r1, fp
 8009750:	4699      	mov	r9, r3
 8009752:	f1b8 0f01 	cmp.w	r8, #1
 8009756:	dc21      	bgt.n	800979c <_strtod_l+0x52c>
 8009758:	b10b      	cbz	r3, 800975e <_strtod_l+0x4ee>
 800975a:	4682      	mov	sl, r0
 800975c:	468b      	mov	fp, r1
 800975e:	4b2e      	ldr	r3, [pc, #184]	; (8009818 <_strtod_l+0x5a8>)
 8009760:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009764:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009768:	4652      	mov	r2, sl
 800976a:	465b      	mov	r3, fp
 800976c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009770:	f7f6 ff4a 	bl	8000608 <__aeabi_dmul>
 8009774:	4b29      	ldr	r3, [pc, #164]	; (800981c <_strtod_l+0x5ac>)
 8009776:	460a      	mov	r2, r1
 8009778:	400b      	ands	r3, r1
 800977a:	4929      	ldr	r1, [pc, #164]	; (8009820 <_strtod_l+0x5b0>)
 800977c:	428b      	cmp	r3, r1
 800977e:	4682      	mov	sl, r0
 8009780:	d8be      	bhi.n	8009700 <_strtod_l+0x490>
 8009782:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009786:	428b      	cmp	r3, r1
 8009788:	bf86      	itte	hi
 800978a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009824 <_strtod_l+0x5b4>
 800978e:	f04f 3aff 	movhi.w	sl, #4294967295
 8009792:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009796:	2300      	movs	r3, #0
 8009798:	9304      	str	r3, [sp, #16]
 800979a:	e081      	b.n	80098a0 <_strtod_l+0x630>
 800979c:	f018 0f01 	tst.w	r8, #1
 80097a0:	d007      	beq.n	80097b2 <_strtod_l+0x542>
 80097a2:	4b1d      	ldr	r3, [pc, #116]	; (8009818 <_strtod_l+0x5a8>)
 80097a4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80097a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ac:	f7f6 ff2c 	bl	8000608 <__aeabi_dmul>
 80097b0:	2301      	movs	r3, #1
 80097b2:	f109 0901 	add.w	r9, r9, #1
 80097b6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80097ba:	e7ca      	b.n	8009752 <_strtod_l+0x4e2>
 80097bc:	d0eb      	beq.n	8009796 <_strtod_l+0x526>
 80097be:	f1c8 0800 	rsb	r8, r8, #0
 80097c2:	f018 020f 	ands.w	r2, r8, #15
 80097c6:	d00a      	beq.n	80097de <_strtod_l+0x56e>
 80097c8:	4b12      	ldr	r3, [pc, #72]	; (8009814 <_strtod_l+0x5a4>)
 80097ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097ce:	4650      	mov	r0, sl
 80097d0:	4659      	mov	r1, fp
 80097d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d6:	f7f7 f841 	bl	800085c <__aeabi_ddiv>
 80097da:	4682      	mov	sl, r0
 80097dc:	468b      	mov	fp, r1
 80097de:	ea5f 1828 	movs.w	r8, r8, asr #4
 80097e2:	d0d8      	beq.n	8009796 <_strtod_l+0x526>
 80097e4:	f1b8 0f1f 	cmp.w	r8, #31
 80097e8:	dd1e      	ble.n	8009828 <_strtod_l+0x5b8>
 80097ea:	2500      	movs	r5, #0
 80097ec:	462e      	mov	r6, r5
 80097ee:	9509      	str	r5, [sp, #36]	; 0x24
 80097f0:	9507      	str	r5, [sp, #28]
 80097f2:	2322      	movs	r3, #34	; 0x22
 80097f4:	f04f 0a00 	mov.w	sl, #0
 80097f8:	f04f 0b00 	mov.w	fp, #0
 80097fc:	6023      	str	r3, [r4, #0]
 80097fe:	e789      	b.n	8009714 <_strtod_l+0x4a4>
 8009800:	0800dd95 	.word	0x0800dd95
 8009804:	0800ddd4 	.word	0x0800ddd4
 8009808:	0800dd8d 	.word	0x0800dd8d
 800980c:	0800df14 	.word	0x0800df14
 8009810:	0800e1eb 	.word	0x0800e1eb
 8009814:	0800e0b0 	.word	0x0800e0b0
 8009818:	0800e088 	.word	0x0800e088
 800981c:	7ff00000 	.word	0x7ff00000
 8009820:	7ca00000 	.word	0x7ca00000
 8009824:	7fefffff 	.word	0x7fefffff
 8009828:	f018 0310 	ands.w	r3, r8, #16
 800982c:	bf18      	it	ne
 800982e:	236a      	movne	r3, #106	; 0x6a
 8009830:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8009be8 <_strtod_l+0x978>
 8009834:	9304      	str	r3, [sp, #16]
 8009836:	4650      	mov	r0, sl
 8009838:	4659      	mov	r1, fp
 800983a:	2300      	movs	r3, #0
 800983c:	f018 0f01 	tst.w	r8, #1
 8009840:	d004      	beq.n	800984c <_strtod_l+0x5dc>
 8009842:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009846:	f7f6 fedf 	bl	8000608 <__aeabi_dmul>
 800984a:	2301      	movs	r3, #1
 800984c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009850:	f109 0908 	add.w	r9, r9, #8
 8009854:	d1f2      	bne.n	800983c <_strtod_l+0x5cc>
 8009856:	b10b      	cbz	r3, 800985c <_strtod_l+0x5ec>
 8009858:	4682      	mov	sl, r0
 800985a:	468b      	mov	fp, r1
 800985c:	9b04      	ldr	r3, [sp, #16]
 800985e:	b1bb      	cbz	r3, 8009890 <_strtod_l+0x620>
 8009860:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009864:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009868:	2b00      	cmp	r3, #0
 800986a:	4659      	mov	r1, fp
 800986c:	dd10      	ble.n	8009890 <_strtod_l+0x620>
 800986e:	2b1f      	cmp	r3, #31
 8009870:	f340 8128 	ble.w	8009ac4 <_strtod_l+0x854>
 8009874:	2b34      	cmp	r3, #52	; 0x34
 8009876:	bfde      	ittt	le
 8009878:	3b20      	suble	r3, #32
 800987a:	f04f 32ff 	movle.w	r2, #4294967295
 800987e:	fa02 f303 	lslle.w	r3, r2, r3
 8009882:	f04f 0a00 	mov.w	sl, #0
 8009886:	bfcc      	ite	gt
 8009888:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800988c:	ea03 0b01 	andle.w	fp, r3, r1
 8009890:	2200      	movs	r2, #0
 8009892:	2300      	movs	r3, #0
 8009894:	4650      	mov	r0, sl
 8009896:	4659      	mov	r1, fp
 8009898:	f7f7 f91e 	bl	8000ad8 <__aeabi_dcmpeq>
 800989c:	2800      	cmp	r0, #0
 800989e:	d1a4      	bne.n	80097ea <_strtod_l+0x57a>
 80098a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098a2:	9300      	str	r3, [sp, #0]
 80098a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80098a6:	462b      	mov	r3, r5
 80098a8:	463a      	mov	r2, r7
 80098aa:	4620      	mov	r0, r4
 80098ac:	f001 fe5c 	bl	800b568 <__s2b>
 80098b0:	9009      	str	r0, [sp, #36]	; 0x24
 80098b2:	2800      	cmp	r0, #0
 80098b4:	f43f af24 	beq.w	8009700 <_strtod_l+0x490>
 80098b8:	9b07      	ldr	r3, [sp, #28]
 80098ba:	1b9e      	subs	r6, r3, r6
 80098bc:	9b08      	ldr	r3, [sp, #32]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	bfb4      	ite	lt
 80098c2:	4633      	movlt	r3, r6
 80098c4:	2300      	movge	r3, #0
 80098c6:	9310      	str	r3, [sp, #64]	; 0x40
 80098c8:	9b08      	ldr	r3, [sp, #32]
 80098ca:	2500      	movs	r5, #0
 80098cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80098d0:	9318      	str	r3, [sp, #96]	; 0x60
 80098d2:	462e      	mov	r6, r5
 80098d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098d6:	4620      	mov	r0, r4
 80098d8:	6859      	ldr	r1, [r3, #4]
 80098da:	f001 fd99 	bl	800b410 <_Balloc>
 80098de:	9007      	str	r0, [sp, #28]
 80098e0:	2800      	cmp	r0, #0
 80098e2:	f43f af11 	beq.w	8009708 <_strtod_l+0x498>
 80098e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098e8:	691a      	ldr	r2, [r3, #16]
 80098ea:	3202      	adds	r2, #2
 80098ec:	f103 010c 	add.w	r1, r3, #12
 80098f0:	0092      	lsls	r2, r2, #2
 80098f2:	300c      	adds	r0, #12
 80098f4:	f7fe fd64 	bl	80083c0 <memcpy>
 80098f8:	ec4b ab10 	vmov	d0, sl, fp
 80098fc:	aa20      	add	r2, sp, #128	; 0x80
 80098fe:	a91f      	add	r1, sp, #124	; 0x7c
 8009900:	4620      	mov	r0, r4
 8009902:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8009906:	f002 f96b 	bl	800bbe0 <__d2b>
 800990a:	901e      	str	r0, [sp, #120]	; 0x78
 800990c:	2800      	cmp	r0, #0
 800990e:	f43f aefb 	beq.w	8009708 <_strtod_l+0x498>
 8009912:	2101      	movs	r1, #1
 8009914:	4620      	mov	r0, r4
 8009916:	f001 fec1 	bl	800b69c <__i2b>
 800991a:	4606      	mov	r6, r0
 800991c:	2800      	cmp	r0, #0
 800991e:	f43f aef3 	beq.w	8009708 <_strtod_l+0x498>
 8009922:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009924:	9904      	ldr	r1, [sp, #16]
 8009926:	2b00      	cmp	r3, #0
 8009928:	bfab      	itete	ge
 800992a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800992c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800992e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8009930:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8009934:	bfac      	ite	ge
 8009936:	eb03 0902 	addge.w	r9, r3, r2
 800993a:	1ad7      	sublt	r7, r2, r3
 800993c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800993e:	eba3 0801 	sub.w	r8, r3, r1
 8009942:	4490      	add	r8, r2
 8009944:	4ba3      	ldr	r3, [pc, #652]	; (8009bd4 <_strtod_l+0x964>)
 8009946:	f108 38ff 	add.w	r8, r8, #4294967295
 800994a:	4598      	cmp	r8, r3
 800994c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009950:	f280 80cc 	bge.w	8009aec <_strtod_l+0x87c>
 8009954:	eba3 0308 	sub.w	r3, r3, r8
 8009958:	2b1f      	cmp	r3, #31
 800995a:	eba2 0203 	sub.w	r2, r2, r3
 800995e:	f04f 0101 	mov.w	r1, #1
 8009962:	f300 80b6 	bgt.w	8009ad2 <_strtod_l+0x862>
 8009966:	fa01 f303 	lsl.w	r3, r1, r3
 800996a:	9311      	str	r3, [sp, #68]	; 0x44
 800996c:	2300      	movs	r3, #0
 800996e:	930c      	str	r3, [sp, #48]	; 0x30
 8009970:	eb09 0802 	add.w	r8, r9, r2
 8009974:	9b04      	ldr	r3, [sp, #16]
 8009976:	45c1      	cmp	r9, r8
 8009978:	4417      	add	r7, r2
 800997a:	441f      	add	r7, r3
 800997c:	464b      	mov	r3, r9
 800997e:	bfa8      	it	ge
 8009980:	4643      	movge	r3, r8
 8009982:	42bb      	cmp	r3, r7
 8009984:	bfa8      	it	ge
 8009986:	463b      	movge	r3, r7
 8009988:	2b00      	cmp	r3, #0
 800998a:	bfc2      	ittt	gt
 800998c:	eba8 0803 	subgt.w	r8, r8, r3
 8009990:	1aff      	subgt	r7, r7, r3
 8009992:	eba9 0903 	subgt.w	r9, r9, r3
 8009996:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009998:	2b00      	cmp	r3, #0
 800999a:	dd17      	ble.n	80099cc <_strtod_l+0x75c>
 800999c:	4631      	mov	r1, r6
 800999e:	461a      	mov	r2, r3
 80099a0:	4620      	mov	r0, r4
 80099a2:	f001 ff37 	bl	800b814 <__pow5mult>
 80099a6:	4606      	mov	r6, r0
 80099a8:	2800      	cmp	r0, #0
 80099aa:	f43f aead 	beq.w	8009708 <_strtod_l+0x498>
 80099ae:	4601      	mov	r1, r0
 80099b0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80099b2:	4620      	mov	r0, r4
 80099b4:	f001 fe88 	bl	800b6c8 <__multiply>
 80099b8:	900f      	str	r0, [sp, #60]	; 0x3c
 80099ba:	2800      	cmp	r0, #0
 80099bc:	f43f aea4 	beq.w	8009708 <_strtod_l+0x498>
 80099c0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80099c2:	4620      	mov	r0, r4
 80099c4:	f001 fd64 	bl	800b490 <_Bfree>
 80099c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099ca:	931e      	str	r3, [sp, #120]	; 0x78
 80099cc:	f1b8 0f00 	cmp.w	r8, #0
 80099d0:	f300 8091 	bgt.w	8009af6 <_strtod_l+0x886>
 80099d4:	9b08      	ldr	r3, [sp, #32]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	dd08      	ble.n	80099ec <_strtod_l+0x77c>
 80099da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80099dc:	9907      	ldr	r1, [sp, #28]
 80099de:	4620      	mov	r0, r4
 80099e0:	f001 ff18 	bl	800b814 <__pow5mult>
 80099e4:	9007      	str	r0, [sp, #28]
 80099e6:	2800      	cmp	r0, #0
 80099e8:	f43f ae8e 	beq.w	8009708 <_strtod_l+0x498>
 80099ec:	2f00      	cmp	r7, #0
 80099ee:	dd08      	ble.n	8009a02 <_strtod_l+0x792>
 80099f0:	9907      	ldr	r1, [sp, #28]
 80099f2:	463a      	mov	r2, r7
 80099f4:	4620      	mov	r0, r4
 80099f6:	f001 ff67 	bl	800b8c8 <__lshift>
 80099fa:	9007      	str	r0, [sp, #28]
 80099fc:	2800      	cmp	r0, #0
 80099fe:	f43f ae83 	beq.w	8009708 <_strtod_l+0x498>
 8009a02:	f1b9 0f00 	cmp.w	r9, #0
 8009a06:	dd08      	ble.n	8009a1a <_strtod_l+0x7aa>
 8009a08:	4631      	mov	r1, r6
 8009a0a:	464a      	mov	r2, r9
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	f001 ff5b 	bl	800b8c8 <__lshift>
 8009a12:	4606      	mov	r6, r0
 8009a14:	2800      	cmp	r0, #0
 8009a16:	f43f ae77 	beq.w	8009708 <_strtod_l+0x498>
 8009a1a:	9a07      	ldr	r2, [sp, #28]
 8009a1c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009a1e:	4620      	mov	r0, r4
 8009a20:	f001 ffda 	bl	800b9d8 <__mdiff>
 8009a24:	4605      	mov	r5, r0
 8009a26:	2800      	cmp	r0, #0
 8009a28:	f43f ae6e 	beq.w	8009708 <_strtod_l+0x498>
 8009a2c:	68c3      	ldr	r3, [r0, #12]
 8009a2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a30:	2300      	movs	r3, #0
 8009a32:	60c3      	str	r3, [r0, #12]
 8009a34:	4631      	mov	r1, r6
 8009a36:	f001 ffb3 	bl	800b9a0 <__mcmp>
 8009a3a:	2800      	cmp	r0, #0
 8009a3c:	da65      	bge.n	8009b0a <_strtod_l+0x89a>
 8009a3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a40:	ea53 030a 	orrs.w	r3, r3, sl
 8009a44:	f040 8087 	bne.w	8009b56 <_strtod_l+0x8e6>
 8009a48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	f040 8082 	bne.w	8009b56 <_strtod_l+0x8e6>
 8009a52:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009a56:	0d1b      	lsrs	r3, r3, #20
 8009a58:	051b      	lsls	r3, r3, #20
 8009a5a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009a5e:	d97a      	bls.n	8009b56 <_strtod_l+0x8e6>
 8009a60:	696b      	ldr	r3, [r5, #20]
 8009a62:	b913      	cbnz	r3, 8009a6a <_strtod_l+0x7fa>
 8009a64:	692b      	ldr	r3, [r5, #16]
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	dd75      	ble.n	8009b56 <_strtod_l+0x8e6>
 8009a6a:	4629      	mov	r1, r5
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	4620      	mov	r0, r4
 8009a70:	f001 ff2a 	bl	800b8c8 <__lshift>
 8009a74:	4631      	mov	r1, r6
 8009a76:	4605      	mov	r5, r0
 8009a78:	f001 ff92 	bl	800b9a0 <__mcmp>
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	dd6a      	ble.n	8009b56 <_strtod_l+0x8e6>
 8009a80:	9904      	ldr	r1, [sp, #16]
 8009a82:	4a55      	ldr	r2, [pc, #340]	; (8009bd8 <_strtod_l+0x968>)
 8009a84:	465b      	mov	r3, fp
 8009a86:	2900      	cmp	r1, #0
 8009a88:	f000 8085 	beq.w	8009b96 <_strtod_l+0x926>
 8009a8c:	ea02 010b 	and.w	r1, r2, fp
 8009a90:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009a94:	dc7f      	bgt.n	8009b96 <_strtod_l+0x926>
 8009a96:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009a9a:	f77f aeaa 	ble.w	80097f2 <_strtod_l+0x582>
 8009a9e:	4a4f      	ldr	r2, [pc, #316]	; (8009bdc <_strtod_l+0x96c>)
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8009aa6:	4650      	mov	r0, sl
 8009aa8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8009aac:	4659      	mov	r1, fp
 8009aae:	f7f6 fdab 	bl	8000608 <__aeabi_dmul>
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	4303      	orrs	r3, r0
 8009ab6:	bf08      	it	eq
 8009ab8:	2322      	moveq	r3, #34	; 0x22
 8009aba:	4682      	mov	sl, r0
 8009abc:	468b      	mov	fp, r1
 8009abe:	bf08      	it	eq
 8009ac0:	6023      	streq	r3, [r4, #0]
 8009ac2:	e62b      	b.n	800971c <_strtod_l+0x4ac>
 8009ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8009acc:	ea03 0a0a 	and.w	sl, r3, sl
 8009ad0:	e6de      	b.n	8009890 <_strtod_l+0x620>
 8009ad2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009ad6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009ada:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009ade:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009ae2:	fa01 f308 	lsl.w	r3, r1, r8
 8009ae6:	930c      	str	r3, [sp, #48]	; 0x30
 8009ae8:	9111      	str	r1, [sp, #68]	; 0x44
 8009aea:	e741      	b.n	8009970 <_strtod_l+0x700>
 8009aec:	2300      	movs	r3, #0
 8009aee:	930c      	str	r3, [sp, #48]	; 0x30
 8009af0:	2301      	movs	r3, #1
 8009af2:	9311      	str	r3, [sp, #68]	; 0x44
 8009af4:	e73c      	b.n	8009970 <_strtod_l+0x700>
 8009af6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009af8:	4642      	mov	r2, r8
 8009afa:	4620      	mov	r0, r4
 8009afc:	f001 fee4 	bl	800b8c8 <__lshift>
 8009b00:	901e      	str	r0, [sp, #120]	; 0x78
 8009b02:	2800      	cmp	r0, #0
 8009b04:	f47f af66 	bne.w	80099d4 <_strtod_l+0x764>
 8009b08:	e5fe      	b.n	8009708 <_strtod_l+0x498>
 8009b0a:	465f      	mov	r7, fp
 8009b0c:	d16e      	bne.n	8009bec <_strtod_l+0x97c>
 8009b0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009b10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b14:	b342      	cbz	r2, 8009b68 <_strtod_l+0x8f8>
 8009b16:	4a32      	ldr	r2, [pc, #200]	; (8009be0 <_strtod_l+0x970>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d128      	bne.n	8009b6e <_strtod_l+0x8fe>
 8009b1c:	9b04      	ldr	r3, [sp, #16]
 8009b1e:	4650      	mov	r0, sl
 8009b20:	b1eb      	cbz	r3, 8009b5e <_strtod_l+0x8ee>
 8009b22:	4a2d      	ldr	r2, [pc, #180]	; (8009bd8 <_strtod_l+0x968>)
 8009b24:	403a      	ands	r2, r7
 8009b26:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009b2a:	f04f 31ff 	mov.w	r1, #4294967295
 8009b2e:	d819      	bhi.n	8009b64 <_strtod_l+0x8f4>
 8009b30:	0d12      	lsrs	r2, r2, #20
 8009b32:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009b36:	fa01 f303 	lsl.w	r3, r1, r3
 8009b3a:	4298      	cmp	r0, r3
 8009b3c:	d117      	bne.n	8009b6e <_strtod_l+0x8fe>
 8009b3e:	4b29      	ldr	r3, [pc, #164]	; (8009be4 <_strtod_l+0x974>)
 8009b40:	429f      	cmp	r7, r3
 8009b42:	d102      	bne.n	8009b4a <_strtod_l+0x8da>
 8009b44:	3001      	adds	r0, #1
 8009b46:	f43f addf 	beq.w	8009708 <_strtod_l+0x498>
 8009b4a:	4b23      	ldr	r3, [pc, #140]	; (8009bd8 <_strtod_l+0x968>)
 8009b4c:	403b      	ands	r3, r7
 8009b4e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009b52:	f04f 0a00 	mov.w	sl, #0
 8009b56:	9b04      	ldr	r3, [sp, #16]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d1a0      	bne.n	8009a9e <_strtod_l+0x82e>
 8009b5c:	e5de      	b.n	800971c <_strtod_l+0x4ac>
 8009b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8009b62:	e7ea      	b.n	8009b3a <_strtod_l+0x8ca>
 8009b64:	460b      	mov	r3, r1
 8009b66:	e7e8      	b.n	8009b3a <_strtod_l+0x8ca>
 8009b68:	ea53 030a 	orrs.w	r3, r3, sl
 8009b6c:	d088      	beq.n	8009a80 <_strtod_l+0x810>
 8009b6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b70:	b1db      	cbz	r3, 8009baa <_strtod_l+0x93a>
 8009b72:	423b      	tst	r3, r7
 8009b74:	d0ef      	beq.n	8009b56 <_strtod_l+0x8e6>
 8009b76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b78:	9a04      	ldr	r2, [sp, #16]
 8009b7a:	4650      	mov	r0, sl
 8009b7c:	4659      	mov	r1, fp
 8009b7e:	b1c3      	cbz	r3, 8009bb2 <_strtod_l+0x942>
 8009b80:	f7ff fb57 	bl	8009232 <sulp>
 8009b84:	4602      	mov	r2, r0
 8009b86:	460b      	mov	r3, r1
 8009b88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009b8c:	f7f6 fb86 	bl	800029c <__adddf3>
 8009b90:	4682      	mov	sl, r0
 8009b92:	468b      	mov	fp, r1
 8009b94:	e7df      	b.n	8009b56 <_strtod_l+0x8e6>
 8009b96:	4013      	ands	r3, r2
 8009b98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009b9c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009ba0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009ba4:	f04f 3aff 	mov.w	sl, #4294967295
 8009ba8:	e7d5      	b.n	8009b56 <_strtod_l+0x8e6>
 8009baa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009bac:	ea13 0f0a 	tst.w	r3, sl
 8009bb0:	e7e0      	b.n	8009b74 <_strtod_l+0x904>
 8009bb2:	f7ff fb3e 	bl	8009232 <sulp>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	460b      	mov	r3, r1
 8009bba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009bbe:	f7f6 fb6b 	bl	8000298 <__aeabi_dsub>
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	4682      	mov	sl, r0
 8009bc8:	468b      	mov	fp, r1
 8009bca:	f7f6 ff85 	bl	8000ad8 <__aeabi_dcmpeq>
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	d0c1      	beq.n	8009b56 <_strtod_l+0x8e6>
 8009bd2:	e60e      	b.n	80097f2 <_strtod_l+0x582>
 8009bd4:	fffffc02 	.word	0xfffffc02
 8009bd8:	7ff00000 	.word	0x7ff00000
 8009bdc:	39500000 	.word	0x39500000
 8009be0:	000fffff 	.word	0x000fffff
 8009be4:	7fefffff 	.word	0x7fefffff
 8009be8:	0800dde8 	.word	0x0800dde8
 8009bec:	4631      	mov	r1, r6
 8009bee:	4628      	mov	r0, r5
 8009bf0:	f002 f852 	bl	800bc98 <__ratio>
 8009bf4:	ec59 8b10 	vmov	r8, r9, d0
 8009bf8:	ee10 0a10 	vmov	r0, s0
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c02:	4649      	mov	r1, r9
 8009c04:	f7f6 ff7c 	bl	8000b00 <__aeabi_dcmple>
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	d07c      	beq.n	8009d06 <_strtod_l+0xa96>
 8009c0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d04c      	beq.n	8009cac <_strtod_l+0xa3c>
 8009c12:	4b95      	ldr	r3, [pc, #596]	; (8009e68 <_strtod_l+0xbf8>)
 8009c14:	2200      	movs	r2, #0
 8009c16:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009c1a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009e68 <_strtod_l+0xbf8>
 8009c1e:	f04f 0800 	mov.w	r8, #0
 8009c22:	4b92      	ldr	r3, [pc, #584]	; (8009e6c <_strtod_l+0xbfc>)
 8009c24:	403b      	ands	r3, r7
 8009c26:	9311      	str	r3, [sp, #68]	; 0x44
 8009c28:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009c2a:	4b91      	ldr	r3, [pc, #580]	; (8009e70 <_strtod_l+0xc00>)
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	f040 80b2 	bne.w	8009d96 <_strtod_l+0xb26>
 8009c32:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009c36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009c3a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009c3e:	ec4b ab10 	vmov	d0, sl, fp
 8009c42:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8009c46:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009c4a:	f001 ff4d 	bl	800bae8 <__ulp>
 8009c4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009c52:	ec53 2b10 	vmov	r2, r3, d0
 8009c56:	f7f6 fcd7 	bl	8000608 <__aeabi_dmul>
 8009c5a:	4652      	mov	r2, sl
 8009c5c:	465b      	mov	r3, fp
 8009c5e:	f7f6 fb1d 	bl	800029c <__adddf3>
 8009c62:	460b      	mov	r3, r1
 8009c64:	4981      	ldr	r1, [pc, #516]	; (8009e6c <_strtod_l+0xbfc>)
 8009c66:	4a83      	ldr	r2, [pc, #524]	; (8009e74 <_strtod_l+0xc04>)
 8009c68:	4019      	ands	r1, r3
 8009c6a:	4291      	cmp	r1, r2
 8009c6c:	4682      	mov	sl, r0
 8009c6e:	d95e      	bls.n	8009d2e <_strtod_l+0xabe>
 8009c70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c72:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d103      	bne.n	8009c82 <_strtod_l+0xa12>
 8009c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	f43f ad43 	beq.w	8009708 <_strtod_l+0x498>
 8009c82:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8009e80 <_strtod_l+0xc10>
 8009c86:	f04f 3aff 	mov.w	sl, #4294967295
 8009c8a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009c8c:	4620      	mov	r0, r4
 8009c8e:	f001 fbff 	bl	800b490 <_Bfree>
 8009c92:	9907      	ldr	r1, [sp, #28]
 8009c94:	4620      	mov	r0, r4
 8009c96:	f001 fbfb 	bl	800b490 <_Bfree>
 8009c9a:	4631      	mov	r1, r6
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	f001 fbf7 	bl	800b490 <_Bfree>
 8009ca2:	4629      	mov	r1, r5
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	f001 fbf3 	bl	800b490 <_Bfree>
 8009caa:	e613      	b.n	80098d4 <_strtod_l+0x664>
 8009cac:	f1ba 0f00 	cmp.w	sl, #0
 8009cb0:	d11b      	bne.n	8009cea <_strtod_l+0xa7a>
 8009cb2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009cb6:	b9f3      	cbnz	r3, 8009cf6 <_strtod_l+0xa86>
 8009cb8:	4b6b      	ldr	r3, [pc, #428]	; (8009e68 <_strtod_l+0xbf8>)
 8009cba:	2200      	movs	r2, #0
 8009cbc:	4640      	mov	r0, r8
 8009cbe:	4649      	mov	r1, r9
 8009cc0:	f7f6 ff14 	bl	8000aec <__aeabi_dcmplt>
 8009cc4:	b9d0      	cbnz	r0, 8009cfc <_strtod_l+0xa8c>
 8009cc6:	4640      	mov	r0, r8
 8009cc8:	4649      	mov	r1, r9
 8009cca:	4b6b      	ldr	r3, [pc, #428]	; (8009e78 <_strtod_l+0xc08>)
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f7f6 fc9b 	bl	8000608 <__aeabi_dmul>
 8009cd2:	4680      	mov	r8, r0
 8009cd4:	4689      	mov	r9, r1
 8009cd6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009cda:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8009cde:	931b      	str	r3, [sp, #108]	; 0x6c
 8009ce0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8009ce4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009ce8:	e79b      	b.n	8009c22 <_strtod_l+0x9b2>
 8009cea:	f1ba 0f01 	cmp.w	sl, #1
 8009cee:	d102      	bne.n	8009cf6 <_strtod_l+0xa86>
 8009cf0:	2f00      	cmp	r7, #0
 8009cf2:	f43f ad7e 	beq.w	80097f2 <_strtod_l+0x582>
 8009cf6:	4b61      	ldr	r3, [pc, #388]	; (8009e7c <_strtod_l+0xc0c>)
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	e78c      	b.n	8009c16 <_strtod_l+0x9a6>
 8009cfc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009e78 <_strtod_l+0xc08>
 8009d00:	f04f 0800 	mov.w	r8, #0
 8009d04:	e7e7      	b.n	8009cd6 <_strtod_l+0xa66>
 8009d06:	4b5c      	ldr	r3, [pc, #368]	; (8009e78 <_strtod_l+0xc08>)
 8009d08:	4640      	mov	r0, r8
 8009d0a:	4649      	mov	r1, r9
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f7f6 fc7b 	bl	8000608 <__aeabi_dmul>
 8009d12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d14:	4680      	mov	r8, r0
 8009d16:	4689      	mov	r9, r1
 8009d18:	b933      	cbnz	r3, 8009d28 <_strtod_l+0xab8>
 8009d1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d1e:	9012      	str	r0, [sp, #72]	; 0x48
 8009d20:	9313      	str	r3, [sp, #76]	; 0x4c
 8009d22:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009d26:	e7dd      	b.n	8009ce4 <_strtod_l+0xa74>
 8009d28:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8009d2c:	e7f9      	b.n	8009d22 <_strtod_l+0xab2>
 8009d2e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009d32:	9b04      	ldr	r3, [sp, #16]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d1a8      	bne.n	8009c8a <_strtod_l+0xa1a>
 8009d38:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009d3e:	0d1b      	lsrs	r3, r3, #20
 8009d40:	051b      	lsls	r3, r3, #20
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d1a1      	bne.n	8009c8a <_strtod_l+0xa1a>
 8009d46:	4640      	mov	r0, r8
 8009d48:	4649      	mov	r1, r9
 8009d4a:	f7f6 ffbd 	bl	8000cc8 <__aeabi_d2lz>
 8009d4e:	f7f6 fc2d 	bl	80005ac <__aeabi_l2d>
 8009d52:	4602      	mov	r2, r0
 8009d54:	460b      	mov	r3, r1
 8009d56:	4640      	mov	r0, r8
 8009d58:	4649      	mov	r1, r9
 8009d5a:	f7f6 fa9d 	bl	8000298 <__aeabi_dsub>
 8009d5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d64:	ea43 030a 	orr.w	r3, r3, sl
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	4680      	mov	r8, r0
 8009d6c:	4689      	mov	r9, r1
 8009d6e:	d053      	beq.n	8009e18 <_strtod_l+0xba8>
 8009d70:	a335      	add	r3, pc, #212	; (adr r3, 8009e48 <_strtod_l+0xbd8>)
 8009d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d76:	f7f6 feb9 	bl	8000aec <__aeabi_dcmplt>
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	f47f acce 	bne.w	800971c <_strtod_l+0x4ac>
 8009d80:	a333      	add	r3, pc, #204	; (adr r3, 8009e50 <_strtod_l+0xbe0>)
 8009d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d86:	4640      	mov	r0, r8
 8009d88:	4649      	mov	r1, r9
 8009d8a:	f7f6 fecd 	bl	8000b28 <__aeabi_dcmpgt>
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	f43f af7b 	beq.w	8009c8a <_strtod_l+0xa1a>
 8009d94:	e4c2      	b.n	800971c <_strtod_l+0x4ac>
 8009d96:	9b04      	ldr	r3, [sp, #16]
 8009d98:	b333      	cbz	r3, 8009de8 <_strtod_l+0xb78>
 8009d9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d9c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009da0:	d822      	bhi.n	8009de8 <_strtod_l+0xb78>
 8009da2:	a32d      	add	r3, pc, #180	; (adr r3, 8009e58 <_strtod_l+0xbe8>)
 8009da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da8:	4640      	mov	r0, r8
 8009daa:	4649      	mov	r1, r9
 8009dac:	f7f6 fea8 	bl	8000b00 <__aeabi_dcmple>
 8009db0:	b1a0      	cbz	r0, 8009ddc <_strtod_l+0xb6c>
 8009db2:	4649      	mov	r1, r9
 8009db4:	4640      	mov	r0, r8
 8009db6:	f7f6 feff 	bl	8000bb8 <__aeabi_d2uiz>
 8009dba:	2801      	cmp	r0, #1
 8009dbc:	bf38      	it	cc
 8009dbe:	2001      	movcc	r0, #1
 8009dc0:	f7f6 fba8 	bl	8000514 <__aeabi_ui2d>
 8009dc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009dc6:	4680      	mov	r8, r0
 8009dc8:	4689      	mov	r9, r1
 8009dca:	bb13      	cbnz	r3, 8009e12 <_strtod_l+0xba2>
 8009dcc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009dd0:	9014      	str	r0, [sp, #80]	; 0x50
 8009dd2:	9315      	str	r3, [sp, #84]	; 0x54
 8009dd4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009dd8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009ddc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dde:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009de0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009de4:	1a9b      	subs	r3, r3, r2
 8009de6:	930d      	str	r3, [sp, #52]	; 0x34
 8009de8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009dec:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009df0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009df4:	f001 fe78 	bl	800bae8 <__ulp>
 8009df8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009dfc:	ec53 2b10 	vmov	r2, r3, d0
 8009e00:	f7f6 fc02 	bl	8000608 <__aeabi_dmul>
 8009e04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009e08:	f7f6 fa48 	bl	800029c <__adddf3>
 8009e0c:	4682      	mov	sl, r0
 8009e0e:	468b      	mov	fp, r1
 8009e10:	e78f      	b.n	8009d32 <_strtod_l+0xac2>
 8009e12:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8009e16:	e7dd      	b.n	8009dd4 <_strtod_l+0xb64>
 8009e18:	a311      	add	r3, pc, #68	; (adr r3, 8009e60 <_strtod_l+0xbf0>)
 8009e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1e:	f7f6 fe65 	bl	8000aec <__aeabi_dcmplt>
 8009e22:	e7b4      	b.n	8009d8e <_strtod_l+0xb1e>
 8009e24:	2300      	movs	r3, #0
 8009e26:	930e      	str	r3, [sp, #56]	; 0x38
 8009e28:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009e2a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e2c:	6013      	str	r3, [r2, #0]
 8009e2e:	f7ff ba65 	b.w	80092fc <_strtod_l+0x8c>
 8009e32:	2b65      	cmp	r3, #101	; 0x65
 8009e34:	f43f ab5d 	beq.w	80094f2 <_strtod_l+0x282>
 8009e38:	2b45      	cmp	r3, #69	; 0x45
 8009e3a:	f43f ab5a 	beq.w	80094f2 <_strtod_l+0x282>
 8009e3e:	2201      	movs	r2, #1
 8009e40:	f7ff bb92 	b.w	8009568 <_strtod_l+0x2f8>
 8009e44:	f3af 8000 	nop.w
 8009e48:	94a03595 	.word	0x94a03595
 8009e4c:	3fdfffff 	.word	0x3fdfffff
 8009e50:	35afe535 	.word	0x35afe535
 8009e54:	3fe00000 	.word	0x3fe00000
 8009e58:	ffc00000 	.word	0xffc00000
 8009e5c:	41dfffff 	.word	0x41dfffff
 8009e60:	94a03595 	.word	0x94a03595
 8009e64:	3fcfffff 	.word	0x3fcfffff
 8009e68:	3ff00000 	.word	0x3ff00000
 8009e6c:	7ff00000 	.word	0x7ff00000
 8009e70:	7fe00000 	.word	0x7fe00000
 8009e74:	7c9fffff 	.word	0x7c9fffff
 8009e78:	3fe00000 	.word	0x3fe00000
 8009e7c:	bff00000 	.word	0xbff00000
 8009e80:	7fefffff 	.word	0x7fefffff

08009e84 <_strtod_r>:
 8009e84:	4b01      	ldr	r3, [pc, #4]	; (8009e8c <_strtod_r+0x8>)
 8009e86:	f7ff b9f3 	b.w	8009270 <_strtod_l>
 8009e8a:	bf00      	nop
 8009e8c:	20000080 	.word	0x20000080

08009e90 <_strtol_l.isra.0>:
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e96:	d001      	beq.n	8009e9c <_strtol_l.isra.0+0xc>
 8009e98:	2b24      	cmp	r3, #36	; 0x24
 8009e9a:	d906      	bls.n	8009eaa <_strtol_l.isra.0+0x1a>
 8009e9c:	f7fe fa66 	bl	800836c <__errno>
 8009ea0:	2316      	movs	r3, #22
 8009ea2:	6003      	str	r3, [r0, #0]
 8009ea4:	2000      	movs	r0, #0
 8009ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eaa:	4f3a      	ldr	r7, [pc, #232]	; (8009f94 <_strtol_l.isra.0+0x104>)
 8009eac:	468e      	mov	lr, r1
 8009eae:	4676      	mov	r6, lr
 8009eb0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009eb4:	5de5      	ldrb	r5, [r4, r7]
 8009eb6:	f015 0508 	ands.w	r5, r5, #8
 8009eba:	d1f8      	bne.n	8009eae <_strtol_l.isra.0+0x1e>
 8009ebc:	2c2d      	cmp	r4, #45	; 0x2d
 8009ebe:	d134      	bne.n	8009f2a <_strtol_l.isra.0+0x9a>
 8009ec0:	f89e 4000 	ldrb.w	r4, [lr]
 8009ec4:	f04f 0801 	mov.w	r8, #1
 8009ec8:	f106 0e02 	add.w	lr, r6, #2
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d05c      	beq.n	8009f8a <_strtol_l.isra.0+0xfa>
 8009ed0:	2b10      	cmp	r3, #16
 8009ed2:	d10c      	bne.n	8009eee <_strtol_l.isra.0+0x5e>
 8009ed4:	2c30      	cmp	r4, #48	; 0x30
 8009ed6:	d10a      	bne.n	8009eee <_strtol_l.isra.0+0x5e>
 8009ed8:	f89e 4000 	ldrb.w	r4, [lr]
 8009edc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009ee0:	2c58      	cmp	r4, #88	; 0x58
 8009ee2:	d14d      	bne.n	8009f80 <_strtol_l.isra.0+0xf0>
 8009ee4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009ee8:	2310      	movs	r3, #16
 8009eea:	f10e 0e02 	add.w	lr, lr, #2
 8009eee:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8009ef2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009ef6:	2600      	movs	r6, #0
 8009ef8:	fbbc f9f3 	udiv	r9, ip, r3
 8009efc:	4635      	mov	r5, r6
 8009efe:	fb03 ca19 	mls	sl, r3, r9, ip
 8009f02:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009f06:	2f09      	cmp	r7, #9
 8009f08:	d818      	bhi.n	8009f3c <_strtol_l.isra.0+0xac>
 8009f0a:	463c      	mov	r4, r7
 8009f0c:	42a3      	cmp	r3, r4
 8009f0e:	dd24      	ble.n	8009f5a <_strtol_l.isra.0+0xca>
 8009f10:	2e00      	cmp	r6, #0
 8009f12:	db1f      	blt.n	8009f54 <_strtol_l.isra.0+0xc4>
 8009f14:	45a9      	cmp	r9, r5
 8009f16:	d31d      	bcc.n	8009f54 <_strtol_l.isra.0+0xc4>
 8009f18:	d101      	bne.n	8009f1e <_strtol_l.isra.0+0x8e>
 8009f1a:	45a2      	cmp	sl, r4
 8009f1c:	db1a      	blt.n	8009f54 <_strtol_l.isra.0+0xc4>
 8009f1e:	fb05 4503 	mla	r5, r5, r3, r4
 8009f22:	2601      	movs	r6, #1
 8009f24:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009f28:	e7eb      	b.n	8009f02 <_strtol_l.isra.0+0x72>
 8009f2a:	2c2b      	cmp	r4, #43	; 0x2b
 8009f2c:	bf08      	it	eq
 8009f2e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8009f32:	46a8      	mov	r8, r5
 8009f34:	bf08      	it	eq
 8009f36:	f106 0e02 	addeq.w	lr, r6, #2
 8009f3a:	e7c7      	b.n	8009ecc <_strtol_l.isra.0+0x3c>
 8009f3c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009f40:	2f19      	cmp	r7, #25
 8009f42:	d801      	bhi.n	8009f48 <_strtol_l.isra.0+0xb8>
 8009f44:	3c37      	subs	r4, #55	; 0x37
 8009f46:	e7e1      	b.n	8009f0c <_strtol_l.isra.0+0x7c>
 8009f48:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009f4c:	2f19      	cmp	r7, #25
 8009f4e:	d804      	bhi.n	8009f5a <_strtol_l.isra.0+0xca>
 8009f50:	3c57      	subs	r4, #87	; 0x57
 8009f52:	e7db      	b.n	8009f0c <_strtol_l.isra.0+0x7c>
 8009f54:	f04f 36ff 	mov.w	r6, #4294967295
 8009f58:	e7e4      	b.n	8009f24 <_strtol_l.isra.0+0x94>
 8009f5a:	2e00      	cmp	r6, #0
 8009f5c:	da05      	bge.n	8009f6a <_strtol_l.isra.0+0xda>
 8009f5e:	2322      	movs	r3, #34	; 0x22
 8009f60:	6003      	str	r3, [r0, #0]
 8009f62:	4665      	mov	r5, ip
 8009f64:	b942      	cbnz	r2, 8009f78 <_strtol_l.isra.0+0xe8>
 8009f66:	4628      	mov	r0, r5
 8009f68:	e79d      	b.n	8009ea6 <_strtol_l.isra.0+0x16>
 8009f6a:	f1b8 0f00 	cmp.w	r8, #0
 8009f6e:	d000      	beq.n	8009f72 <_strtol_l.isra.0+0xe2>
 8009f70:	426d      	negs	r5, r5
 8009f72:	2a00      	cmp	r2, #0
 8009f74:	d0f7      	beq.n	8009f66 <_strtol_l.isra.0+0xd6>
 8009f76:	b10e      	cbz	r6, 8009f7c <_strtol_l.isra.0+0xec>
 8009f78:	f10e 31ff 	add.w	r1, lr, #4294967295
 8009f7c:	6011      	str	r1, [r2, #0]
 8009f7e:	e7f2      	b.n	8009f66 <_strtol_l.isra.0+0xd6>
 8009f80:	2430      	movs	r4, #48	; 0x30
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d1b3      	bne.n	8009eee <_strtol_l.isra.0+0x5e>
 8009f86:	2308      	movs	r3, #8
 8009f88:	e7b1      	b.n	8009eee <_strtol_l.isra.0+0x5e>
 8009f8a:	2c30      	cmp	r4, #48	; 0x30
 8009f8c:	d0a4      	beq.n	8009ed8 <_strtol_l.isra.0+0x48>
 8009f8e:	230a      	movs	r3, #10
 8009f90:	e7ad      	b.n	8009eee <_strtol_l.isra.0+0x5e>
 8009f92:	bf00      	nop
 8009f94:	0800de11 	.word	0x0800de11

08009f98 <_strtol_r>:
 8009f98:	f7ff bf7a 	b.w	8009e90 <_strtol_l.isra.0>

08009f9c <_write_r>:
 8009f9c:	b538      	push	{r3, r4, r5, lr}
 8009f9e:	4d07      	ldr	r5, [pc, #28]	; (8009fbc <_write_r+0x20>)
 8009fa0:	4604      	mov	r4, r0
 8009fa2:	4608      	mov	r0, r1
 8009fa4:	4611      	mov	r1, r2
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	602a      	str	r2, [r5, #0]
 8009faa:	461a      	mov	r2, r3
 8009fac:	f7f8 f8b1 	bl	8002112 <_write>
 8009fb0:	1c43      	adds	r3, r0, #1
 8009fb2:	d102      	bne.n	8009fba <_write_r+0x1e>
 8009fb4:	682b      	ldr	r3, [r5, #0]
 8009fb6:	b103      	cbz	r3, 8009fba <_write_r+0x1e>
 8009fb8:	6023      	str	r3, [r4, #0]
 8009fba:	bd38      	pop	{r3, r4, r5, pc}
 8009fbc:	20005314 	.word	0x20005314

08009fc0 <_close_r>:
 8009fc0:	b538      	push	{r3, r4, r5, lr}
 8009fc2:	4d06      	ldr	r5, [pc, #24]	; (8009fdc <_close_r+0x1c>)
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	4604      	mov	r4, r0
 8009fc8:	4608      	mov	r0, r1
 8009fca:	602b      	str	r3, [r5, #0]
 8009fcc:	f7f8 f8bd 	bl	800214a <_close>
 8009fd0:	1c43      	adds	r3, r0, #1
 8009fd2:	d102      	bne.n	8009fda <_close_r+0x1a>
 8009fd4:	682b      	ldr	r3, [r5, #0]
 8009fd6:	b103      	cbz	r3, 8009fda <_close_r+0x1a>
 8009fd8:	6023      	str	r3, [r4, #0]
 8009fda:	bd38      	pop	{r3, r4, r5, pc}
 8009fdc:	20005314 	.word	0x20005314

08009fe0 <quorem>:
 8009fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe4:	6903      	ldr	r3, [r0, #16]
 8009fe6:	690c      	ldr	r4, [r1, #16]
 8009fe8:	42a3      	cmp	r3, r4
 8009fea:	4607      	mov	r7, r0
 8009fec:	f2c0 8081 	blt.w	800a0f2 <quorem+0x112>
 8009ff0:	3c01      	subs	r4, #1
 8009ff2:	f101 0814 	add.w	r8, r1, #20
 8009ff6:	f100 0514 	add.w	r5, r0, #20
 8009ffa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ffe:	9301      	str	r3, [sp, #4]
 800a000:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a004:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a008:	3301      	adds	r3, #1
 800a00a:	429a      	cmp	r2, r3
 800a00c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a010:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a014:	fbb2 f6f3 	udiv	r6, r2, r3
 800a018:	d331      	bcc.n	800a07e <quorem+0x9e>
 800a01a:	f04f 0e00 	mov.w	lr, #0
 800a01e:	4640      	mov	r0, r8
 800a020:	46ac      	mov	ip, r5
 800a022:	46f2      	mov	sl, lr
 800a024:	f850 2b04 	ldr.w	r2, [r0], #4
 800a028:	b293      	uxth	r3, r2
 800a02a:	fb06 e303 	mla	r3, r6, r3, lr
 800a02e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a032:	b29b      	uxth	r3, r3
 800a034:	ebaa 0303 	sub.w	r3, sl, r3
 800a038:	0c12      	lsrs	r2, r2, #16
 800a03a:	f8dc a000 	ldr.w	sl, [ip]
 800a03e:	fb06 e202 	mla	r2, r6, r2, lr
 800a042:	fa13 f38a 	uxtah	r3, r3, sl
 800a046:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a04a:	fa1f fa82 	uxth.w	sl, r2
 800a04e:	f8dc 2000 	ldr.w	r2, [ip]
 800a052:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a056:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a060:	4581      	cmp	r9, r0
 800a062:	f84c 3b04 	str.w	r3, [ip], #4
 800a066:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a06a:	d2db      	bcs.n	800a024 <quorem+0x44>
 800a06c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a070:	b92b      	cbnz	r3, 800a07e <quorem+0x9e>
 800a072:	9b01      	ldr	r3, [sp, #4]
 800a074:	3b04      	subs	r3, #4
 800a076:	429d      	cmp	r5, r3
 800a078:	461a      	mov	r2, r3
 800a07a:	d32e      	bcc.n	800a0da <quorem+0xfa>
 800a07c:	613c      	str	r4, [r7, #16]
 800a07e:	4638      	mov	r0, r7
 800a080:	f001 fc8e 	bl	800b9a0 <__mcmp>
 800a084:	2800      	cmp	r0, #0
 800a086:	db24      	blt.n	800a0d2 <quorem+0xf2>
 800a088:	3601      	adds	r6, #1
 800a08a:	4628      	mov	r0, r5
 800a08c:	f04f 0c00 	mov.w	ip, #0
 800a090:	f858 2b04 	ldr.w	r2, [r8], #4
 800a094:	f8d0 e000 	ldr.w	lr, [r0]
 800a098:	b293      	uxth	r3, r2
 800a09a:	ebac 0303 	sub.w	r3, ip, r3
 800a09e:	0c12      	lsrs	r2, r2, #16
 800a0a0:	fa13 f38e 	uxtah	r3, r3, lr
 800a0a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a0a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0b2:	45c1      	cmp	r9, r8
 800a0b4:	f840 3b04 	str.w	r3, [r0], #4
 800a0b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a0bc:	d2e8      	bcs.n	800a090 <quorem+0xb0>
 800a0be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0c6:	b922      	cbnz	r2, 800a0d2 <quorem+0xf2>
 800a0c8:	3b04      	subs	r3, #4
 800a0ca:	429d      	cmp	r5, r3
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	d30a      	bcc.n	800a0e6 <quorem+0x106>
 800a0d0:	613c      	str	r4, [r7, #16]
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	b003      	add	sp, #12
 800a0d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0da:	6812      	ldr	r2, [r2, #0]
 800a0dc:	3b04      	subs	r3, #4
 800a0de:	2a00      	cmp	r2, #0
 800a0e0:	d1cc      	bne.n	800a07c <quorem+0x9c>
 800a0e2:	3c01      	subs	r4, #1
 800a0e4:	e7c7      	b.n	800a076 <quorem+0x96>
 800a0e6:	6812      	ldr	r2, [r2, #0]
 800a0e8:	3b04      	subs	r3, #4
 800a0ea:	2a00      	cmp	r2, #0
 800a0ec:	d1f0      	bne.n	800a0d0 <quorem+0xf0>
 800a0ee:	3c01      	subs	r4, #1
 800a0f0:	e7eb      	b.n	800a0ca <quorem+0xea>
 800a0f2:	2000      	movs	r0, #0
 800a0f4:	e7ee      	b.n	800a0d4 <quorem+0xf4>
	...

0800a0f8 <_dtoa_r>:
 800a0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0fc:	ed2d 8b02 	vpush	{d8}
 800a100:	ec57 6b10 	vmov	r6, r7, d0
 800a104:	b095      	sub	sp, #84	; 0x54
 800a106:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a108:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a10c:	9105      	str	r1, [sp, #20]
 800a10e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a112:	4604      	mov	r4, r0
 800a114:	9209      	str	r2, [sp, #36]	; 0x24
 800a116:	930f      	str	r3, [sp, #60]	; 0x3c
 800a118:	b975      	cbnz	r5, 800a138 <_dtoa_r+0x40>
 800a11a:	2010      	movs	r0, #16
 800a11c:	f001 f95e 	bl	800b3dc <malloc>
 800a120:	4602      	mov	r2, r0
 800a122:	6260      	str	r0, [r4, #36]	; 0x24
 800a124:	b920      	cbnz	r0, 800a130 <_dtoa_r+0x38>
 800a126:	4bb2      	ldr	r3, [pc, #712]	; (800a3f0 <_dtoa_r+0x2f8>)
 800a128:	21ea      	movs	r1, #234	; 0xea
 800a12a:	48b2      	ldr	r0, [pc, #712]	; (800a3f4 <_dtoa_r+0x2fc>)
 800a12c:	f002 fc88 	bl	800ca40 <__assert_func>
 800a130:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a134:	6005      	str	r5, [r0, #0]
 800a136:	60c5      	str	r5, [r0, #12]
 800a138:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a13a:	6819      	ldr	r1, [r3, #0]
 800a13c:	b151      	cbz	r1, 800a154 <_dtoa_r+0x5c>
 800a13e:	685a      	ldr	r2, [r3, #4]
 800a140:	604a      	str	r2, [r1, #4]
 800a142:	2301      	movs	r3, #1
 800a144:	4093      	lsls	r3, r2
 800a146:	608b      	str	r3, [r1, #8]
 800a148:	4620      	mov	r0, r4
 800a14a:	f001 f9a1 	bl	800b490 <_Bfree>
 800a14e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a150:	2200      	movs	r2, #0
 800a152:	601a      	str	r2, [r3, #0]
 800a154:	1e3b      	subs	r3, r7, #0
 800a156:	bfb9      	ittee	lt
 800a158:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a15c:	9303      	strlt	r3, [sp, #12]
 800a15e:	2300      	movge	r3, #0
 800a160:	f8c8 3000 	strge.w	r3, [r8]
 800a164:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a168:	4ba3      	ldr	r3, [pc, #652]	; (800a3f8 <_dtoa_r+0x300>)
 800a16a:	bfbc      	itt	lt
 800a16c:	2201      	movlt	r2, #1
 800a16e:	f8c8 2000 	strlt.w	r2, [r8]
 800a172:	ea33 0309 	bics.w	r3, r3, r9
 800a176:	d11b      	bne.n	800a1b0 <_dtoa_r+0xb8>
 800a178:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a17a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a17e:	6013      	str	r3, [r2, #0]
 800a180:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a184:	4333      	orrs	r3, r6
 800a186:	f000 857a 	beq.w	800ac7e <_dtoa_r+0xb86>
 800a18a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a18c:	b963      	cbnz	r3, 800a1a8 <_dtoa_r+0xb0>
 800a18e:	4b9b      	ldr	r3, [pc, #620]	; (800a3fc <_dtoa_r+0x304>)
 800a190:	e024      	b.n	800a1dc <_dtoa_r+0xe4>
 800a192:	4b9b      	ldr	r3, [pc, #620]	; (800a400 <_dtoa_r+0x308>)
 800a194:	9300      	str	r3, [sp, #0]
 800a196:	3308      	adds	r3, #8
 800a198:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a19a:	6013      	str	r3, [r2, #0]
 800a19c:	9800      	ldr	r0, [sp, #0]
 800a19e:	b015      	add	sp, #84	; 0x54
 800a1a0:	ecbd 8b02 	vpop	{d8}
 800a1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1a8:	4b94      	ldr	r3, [pc, #592]	; (800a3fc <_dtoa_r+0x304>)
 800a1aa:	9300      	str	r3, [sp, #0]
 800a1ac:	3303      	adds	r3, #3
 800a1ae:	e7f3      	b.n	800a198 <_dtoa_r+0xa0>
 800a1b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	ec51 0b17 	vmov	r0, r1, d7
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a1c0:	f7f6 fc8a 	bl	8000ad8 <__aeabi_dcmpeq>
 800a1c4:	4680      	mov	r8, r0
 800a1c6:	b158      	cbz	r0, 800a1e0 <_dtoa_r+0xe8>
 800a1c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	6013      	str	r3, [r2, #0]
 800a1ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	f000 8551 	beq.w	800ac78 <_dtoa_r+0xb80>
 800a1d6:	488b      	ldr	r0, [pc, #556]	; (800a404 <_dtoa_r+0x30c>)
 800a1d8:	6018      	str	r0, [r3, #0]
 800a1da:	1e43      	subs	r3, r0, #1
 800a1dc:	9300      	str	r3, [sp, #0]
 800a1de:	e7dd      	b.n	800a19c <_dtoa_r+0xa4>
 800a1e0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a1e4:	aa12      	add	r2, sp, #72	; 0x48
 800a1e6:	a913      	add	r1, sp, #76	; 0x4c
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	f001 fcf9 	bl	800bbe0 <__d2b>
 800a1ee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a1f2:	4683      	mov	fp, r0
 800a1f4:	2d00      	cmp	r5, #0
 800a1f6:	d07c      	beq.n	800a2f2 <_dtoa_r+0x1fa>
 800a1f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1fa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a1fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a202:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a206:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a20a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a20e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a212:	4b7d      	ldr	r3, [pc, #500]	; (800a408 <_dtoa_r+0x310>)
 800a214:	2200      	movs	r2, #0
 800a216:	4630      	mov	r0, r6
 800a218:	4639      	mov	r1, r7
 800a21a:	f7f6 f83d 	bl	8000298 <__aeabi_dsub>
 800a21e:	a36e      	add	r3, pc, #440	; (adr r3, 800a3d8 <_dtoa_r+0x2e0>)
 800a220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a224:	f7f6 f9f0 	bl	8000608 <__aeabi_dmul>
 800a228:	a36d      	add	r3, pc, #436	; (adr r3, 800a3e0 <_dtoa_r+0x2e8>)
 800a22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22e:	f7f6 f835 	bl	800029c <__adddf3>
 800a232:	4606      	mov	r6, r0
 800a234:	4628      	mov	r0, r5
 800a236:	460f      	mov	r7, r1
 800a238:	f7f6 f97c 	bl	8000534 <__aeabi_i2d>
 800a23c:	a36a      	add	r3, pc, #424	; (adr r3, 800a3e8 <_dtoa_r+0x2f0>)
 800a23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a242:	f7f6 f9e1 	bl	8000608 <__aeabi_dmul>
 800a246:	4602      	mov	r2, r0
 800a248:	460b      	mov	r3, r1
 800a24a:	4630      	mov	r0, r6
 800a24c:	4639      	mov	r1, r7
 800a24e:	f7f6 f825 	bl	800029c <__adddf3>
 800a252:	4606      	mov	r6, r0
 800a254:	460f      	mov	r7, r1
 800a256:	f7f6 fc87 	bl	8000b68 <__aeabi_d2iz>
 800a25a:	2200      	movs	r2, #0
 800a25c:	4682      	mov	sl, r0
 800a25e:	2300      	movs	r3, #0
 800a260:	4630      	mov	r0, r6
 800a262:	4639      	mov	r1, r7
 800a264:	f7f6 fc42 	bl	8000aec <__aeabi_dcmplt>
 800a268:	b148      	cbz	r0, 800a27e <_dtoa_r+0x186>
 800a26a:	4650      	mov	r0, sl
 800a26c:	f7f6 f962 	bl	8000534 <__aeabi_i2d>
 800a270:	4632      	mov	r2, r6
 800a272:	463b      	mov	r3, r7
 800a274:	f7f6 fc30 	bl	8000ad8 <__aeabi_dcmpeq>
 800a278:	b908      	cbnz	r0, 800a27e <_dtoa_r+0x186>
 800a27a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a27e:	f1ba 0f16 	cmp.w	sl, #22
 800a282:	d854      	bhi.n	800a32e <_dtoa_r+0x236>
 800a284:	4b61      	ldr	r3, [pc, #388]	; (800a40c <_dtoa_r+0x314>)
 800a286:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a292:	f7f6 fc2b 	bl	8000aec <__aeabi_dcmplt>
 800a296:	2800      	cmp	r0, #0
 800a298:	d04b      	beq.n	800a332 <_dtoa_r+0x23a>
 800a29a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a29e:	2300      	movs	r3, #0
 800a2a0:	930e      	str	r3, [sp, #56]	; 0x38
 800a2a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a2a4:	1b5d      	subs	r5, r3, r5
 800a2a6:	1e6b      	subs	r3, r5, #1
 800a2a8:	9304      	str	r3, [sp, #16]
 800a2aa:	bf43      	ittte	mi
 800a2ac:	2300      	movmi	r3, #0
 800a2ae:	f1c5 0801 	rsbmi	r8, r5, #1
 800a2b2:	9304      	strmi	r3, [sp, #16]
 800a2b4:	f04f 0800 	movpl.w	r8, #0
 800a2b8:	f1ba 0f00 	cmp.w	sl, #0
 800a2bc:	db3b      	blt.n	800a336 <_dtoa_r+0x23e>
 800a2be:	9b04      	ldr	r3, [sp, #16]
 800a2c0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a2c4:	4453      	add	r3, sl
 800a2c6:	9304      	str	r3, [sp, #16]
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	9306      	str	r3, [sp, #24]
 800a2cc:	9b05      	ldr	r3, [sp, #20]
 800a2ce:	2b09      	cmp	r3, #9
 800a2d0:	d869      	bhi.n	800a3a6 <_dtoa_r+0x2ae>
 800a2d2:	2b05      	cmp	r3, #5
 800a2d4:	bfc4      	itt	gt
 800a2d6:	3b04      	subgt	r3, #4
 800a2d8:	9305      	strgt	r3, [sp, #20]
 800a2da:	9b05      	ldr	r3, [sp, #20]
 800a2dc:	f1a3 0302 	sub.w	r3, r3, #2
 800a2e0:	bfcc      	ite	gt
 800a2e2:	2500      	movgt	r5, #0
 800a2e4:	2501      	movle	r5, #1
 800a2e6:	2b03      	cmp	r3, #3
 800a2e8:	d869      	bhi.n	800a3be <_dtoa_r+0x2c6>
 800a2ea:	e8df f003 	tbb	[pc, r3]
 800a2ee:	4e2c      	.short	0x4e2c
 800a2f0:	5a4c      	.short	0x5a4c
 800a2f2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a2f6:	441d      	add	r5, r3
 800a2f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a2fc:	2b20      	cmp	r3, #32
 800a2fe:	bfc1      	itttt	gt
 800a300:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a304:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a308:	fa09 f303 	lslgt.w	r3, r9, r3
 800a30c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a310:	bfda      	itte	le
 800a312:	f1c3 0320 	rsble	r3, r3, #32
 800a316:	fa06 f003 	lslle.w	r0, r6, r3
 800a31a:	4318      	orrgt	r0, r3
 800a31c:	f7f6 f8fa 	bl	8000514 <__aeabi_ui2d>
 800a320:	2301      	movs	r3, #1
 800a322:	4606      	mov	r6, r0
 800a324:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a328:	3d01      	subs	r5, #1
 800a32a:	9310      	str	r3, [sp, #64]	; 0x40
 800a32c:	e771      	b.n	800a212 <_dtoa_r+0x11a>
 800a32e:	2301      	movs	r3, #1
 800a330:	e7b6      	b.n	800a2a0 <_dtoa_r+0x1a8>
 800a332:	900e      	str	r0, [sp, #56]	; 0x38
 800a334:	e7b5      	b.n	800a2a2 <_dtoa_r+0x1aa>
 800a336:	f1ca 0300 	rsb	r3, sl, #0
 800a33a:	9306      	str	r3, [sp, #24]
 800a33c:	2300      	movs	r3, #0
 800a33e:	eba8 080a 	sub.w	r8, r8, sl
 800a342:	930d      	str	r3, [sp, #52]	; 0x34
 800a344:	e7c2      	b.n	800a2cc <_dtoa_r+0x1d4>
 800a346:	2300      	movs	r3, #0
 800a348:	9308      	str	r3, [sp, #32]
 800a34a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	dc39      	bgt.n	800a3c4 <_dtoa_r+0x2cc>
 800a350:	f04f 0901 	mov.w	r9, #1
 800a354:	f8cd 9004 	str.w	r9, [sp, #4]
 800a358:	464b      	mov	r3, r9
 800a35a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a35e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a360:	2200      	movs	r2, #0
 800a362:	6042      	str	r2, [r0, #4]
 800a364:	2204      	movs	r2, #4
 800a366:	f102 0614 	add.w	r6, r2, #20
 800a36a:	429e      	cmp	r6, r3
 800a36c:	6841      	ldr	r1, [r0, #4]
 800a36e:	d92f      	bls.n	800a3d0 <_dtoa_r+0x2d8>
 800a370:	4620      	mov	r0, r4
 800a372:	f001 f84d 	bl	800b410 <_Balloc>
 800a376:	9000      	str	r0, [sp, #0]
 800a378:	2800      	cmp	r0, #0
 800a37a:	d14b      	bne.n	800a414 <_dtoa_r+0x31c>
 800a37c:	4b24      	ldr	r3, [pc, #144]	; (800a410 <_dtoa_r+0x318>)
 800a37e:	4602      	mov	r2, r0
 800a380:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a384:	e6d1      	b.n	800a12a <_dtoa_r+0x32>
 800a386:	2301      	movs	r3, #1
 800a388:	e7de      	b.n	800a348 <_dtoa_r+0x250>
 800a38a:	2300      	movs	r3, #0
 800a38c:	9308      	str	r3, [sp, #32]
 800a38e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a390:	eb0a 0903 	add.w	r9, sl, r3
 800a394:	f109 0301 	add.w	r3, r9, #1
 800a398:	2b01      	cmp	r3, #1
 800a39a:	9301      	str	r3, [sp, #4]
 800a39c:	bfb8      	it	lt
 800a39e:	2301      	movlt	r3, #1
 800a3a0:	e7dd      	b.n	800a35e <_dtoa_r+0x266>
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	e7f2      	b.n	800a38c <_dtoa_r+0x294>
 800a3a6:	2501      	movs	r5, #1
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	9305      	str	r3, [sp, #20]
 800a3ac:	9508      	str	r5, [sp, #32]
 800a3ae:	f04f 39ff 	mov.w	r9, #4294967295
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a3b8:	2312      	movs	r3, #18
 800a3ba:	9209      	str	r2, [sp, #36]	; 0x24
 800a3bc:	e7cf      	b.n	800a35e <_dtoa_r+0x266>
 800a3be:	2301      	movs	r3, #1
 800a3c0:	9308      	str	r3, [sp, #32]
 800a3c2:	e7f4      	b.n	800a3ae <_dtoa_r+0x2b6>
 800a3c4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a3c8:	f8cd 9004 	str.w	r9, [sp, #4]
 800a3cc:	464b      	mov	r3, r9
 800a3ce:	e7c6      	b.n	800a35e <_dtoa_r+0x266>
 800a3d0:	3101      	adds	r1, #1
 800a3d2:	6041      	str	r1, [r0, #4]
 800a3d4:	0052      	lsls	r2, r2, #1
 800a3d6:	e7c6      	b.n	800a366 <_dtoa_r+0x26e>
 800a3d8:	636f4361 	.word	0x636f4361
 800a3dc:	3fd287a7 	.word	0x3fd287a7
 800a3e0:	8b60c8b3 	.word	0x8b60c8b3
 800a3e4:	3fc68a28 	.word	0x3fc68a28
 800a3e8:	509f79fb 	.word	0x509f79fb
 800a3ec:	3fd34413 	.word	0x3fd34413
 800a3f0:	0800df1e 	.word	0x0800df1e
 800a3f4:	0800df35 	.word	0x0800df35
 800a3f8:	7ff00000 	.word	0x7ff00000
 800a3fc:	0800df1a 	.word	0x0800df1a
 800a400:	0800df11 	.word	0x0800df11
 800a404:	0800e19a 	.word	0x0800e19a
 800a408:	3ff80000 	.word	0x3ff80000
 800a40c:	0800e0b0 	.word	0x0800e0b0
 800a410:	0800df94 	.word	0x0800df94
 800a414:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a416:	9a00      	ldr	r2, [sp, #0]
 800a418:	601a      	str	r2, [r3, #0]
 800a41a:	9b01      	ldr	r3, [sp, #4]
 800a41c:	2b0e      	cmp	r3, #14
 800a41e:	f200 80ad 	bhi.w	800a57c <_dtoa_r+0x484>
 800a422:	2d00      	cmp	r5, #0
 800a424:	f000 80aa 	beq.w	800a57c <_dtoa_r+0x484>
 800a428:	f1ba 0f00 	cmp.w	sl, #0
 800a42c:	dd36      	ble.n	800a49c <_dtoa_r+0x3a4>
 800a42e:	4ac3      	ldr	r2, [pc, #780]	; (800a73c <_dtoa_r+0x644>)
 800a430:	f00a 030f 	and.w	r3, sl, #15
 800a434:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a438:	ed93 7b00 	vldr	d7, [r3]
 800a43c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a440:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a444:	eeb0 8a47 	vmov.f32	s16, s14
 800a448:	eef0 8a67 	vmov.f32	s17, s15
 800a44c:	d016      	beq.n	800a47c <_dtoa_r+0x384>
 800a44e:	4bbc      	ldr	r3, [pc, #752]	; (800a740 <_dtoa_r+0x648>)
 800a450:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a454:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a458:	f7f6 fa00 	bl	800085c <__aeabi_ddiv>
 800a45c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a460:	f007 070f 	and.w	r7, r7, #15
 800a464:	2503      	movs	r5, #3
 800a466:	4eb6      	ldr	r6, [pc, #728]	; (800a740 <_dtoa_r+0x648>)
 800a468:	b957      	cbnz	r7, 800a480 <_dtoa_r+0x388>
 800a46a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a46e:	ec53 2b18 	vmov	r2, r3, d8
 800a472:	f7f6 f9f3 	bl	800085c <__aeabi_ddiv>
 800a476:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a47a:	e029      	b.n	800a4d0 <_dtoa_r+0x3d8>
 800a47c:	2502      	movs	r5, #2
 800a47e:	e7f2      	b.n	800a466 <_dtoa_r+0x36e>
 800a480:	07f9      	lsls	r1, r7, #31
 800a482:	d508      	bpl.n	800a496 <_dtoa_r+0x39e>
 800a484:	ec51 0b18 	vmov	r0, r1, d8
 800a488:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a48c:	f7f6 f8bc 	bl	8000608 <__aeabi_dmul>
 800a490:	ec41 0b18 	vmov	d8, r0, r1
 800a494:	3501      	adds	r5, #1
 800a496:	107f      	asrs	r7, r7, #1
 800a498:	3608      	adds	r6, #8
 800a49a:	e7e5      	b.n	800a468 <_dtoa_r+0x370>
 800a49c:	f000 80a6 	beq.w	800a5ec <_dtoa_r+0x4f4>
 800a4a0:	f1ca 0600 	rsb	r6, sl, #0
 800a4a4:	4ba5      	ldr	r3, [pc, #660]	; (800a73c <_dtoa_r+0x644>)
 800a4a6:	4fa6      	ldr	r7, [pc, #664]	; (800a740 <_dtoa_r+0x648>)
 800a4a8:	f006 020f 	and.w	r2, r6, #15
 800a4ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a4b8:	f7f6 f8a6 	bl	8000608 <__aeabi_dmul>
 800a4bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4c0:	1136      	asrs	r6, r6, #4
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	2502      	movs	r5, #2
 800a4c6:	2e00      	cmp	r6, #0
 800a4c8:	f040 8085 	bne.w	800a5d6 <_dtoa_r+0x4de>
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d1d2      	bne.n	800a476 <_dtoa_r+0x37e>
 800a4d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	f000 808c 	beq.w	800a5f0 <_dtoa_r+0x4f8>
 800a4d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a4dc:	4b99      	ldr	r3, [pc, #612]	; (800a744 <_dtoa_r+0x64c>)
 800a4de:	2200      	movs	r2, #0
 800a4e0:	4630      	mov	r0, r6
 800a4e2:	4639      	mov	r1, r7
 800a4e4:	f7f6 fb02 	bl	8000aec <__aeabi_dcmplt>
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	f000 8081 	beq.w	800a5f0 <_dtoa_r+0x4f8>
 800a4ee:	9b01      	ldr	r3, [sp, #4]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d07d      	beq.n	800a5f0 <_dtoa_r+0x4f8>
 800a4f4:	f1b9 0f00 	cmp.w	r9, #0
 800a4f8:	dd3c      	ble.n	800a574 <_dtoa_r+0x47c>
 800a4fa:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a4fe:	9307      	str	r3, [sp, #28]
 800a500:	2200      	movs	r2, #0
 800a502:	4b91      	ldr	r3, [pc, #580]	; (800a748 <_dtoa_r+0x650>)
 800a504:	4630      	mov	r0, r6
 800a506:	4639      	mov	r1, r7
 800a508:	f7f6 f87e 	bl	8000608 <__aeabi_dmul>
 800a50c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a510:	3501      	adds	r5, #1
 800a512:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a516:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a51a:	4628      	mov	r0, r5
 800a51c:	f7f6 f80a 	bl	8000534 <__aeabi_i2d>
 800a520:	4632      	mov	r2, r6
 800a522:	463b      	mov	r3, r7
 800a524:	f7f6 f870 	bl	8000608 <__aeabi_dmul>
 800a528:	4b88      	ldr	r3, [pc, #544]	; (800a74c <_dtoa_r+0x654>)
 800a52a:	2200      	movs	r2, #0
 800a52c:	f7f5 feb6 	bl	800029c <__adddf3>
 800a530:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a534:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a538:	9303      	str	r3, [sp, #12]
 800a53a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d15c      	bne.n	800a5fa <_dtoa_r+0x502>
 800a540:	4b83      	ldr	r3, [pc, #524]	; (800a750 <_dtoa_r+0x658>)
 800a542:	2200      	movs	r2, #0
 800a544:	4630      	mov	r0, r6
 800a546:	4639      	mov	r1, r7
 800a548:	f7f5 fea6 	bl	8000298 <__aeabi_dsub>
 800a54c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a550:	4606      	mov	r6, r0
 800a552:	460f      	mov	r7, r1
 800a554:	f7f6 fae8 	bl	8000b28 <__aeabi_dcmpgt>
 800a558:	2800      	cmp	r0, #0
 800a55a:	f040 8296 	bne.w	800aa8a <_dtoa_r+0x992>
 800a55e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a562:	4630      	mov	r0, r6
 800a564:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a568:	4639      	mov	r1, r7
 800a56a:	f7f6 fabf 	bl	8000aec <__aeabi_dcmplt>
 800a56e:	2800      	cmp	r0, #0
 800a570:	f040 8288 	bne.w	800aa84 <_dtoa_r+0x98c>
 800a574:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a578:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a57c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a57e:	2b00      	cmp	r3, #0
 800a580:	f2c0 8158 	blt.w	800a834 <_dtoa_r+0x73c>
 800a584:	f1ba 0f0e 	cmp.w	sl, #14
 800a588:	f300 8154 	bgt.w	800a834 <_dtoa_r+0x73c>
 800a58c:	4b6b      	ldr	r3, [pc, #428]	; (800a73c <_dtoa_r+0x644>)
 800a58e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a592:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a598:	2b00      	cmp	r3, #0
 800a59a:	f280 80e3 	bge.w	800a764 <_dtoa_r+0x66c>
 800a59e:	9b01      	ldr	r3, [sp, #4]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	f300 80df 	bgt.w	800a764 <_dtoa_r+0x66c>
 800a5a6:	f040 826d 	bne.w	800aa84 <_dtoa_r+0x98c>
 800a5aa:	4b69      	ldr	r3, [pc, #420]	; (800a750 <_dtoa_r+0x658>)
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	4640      	mov	r0, r8
 800a5b0:	4649      	mov	r1, r9
 800a5b2:	f7f6 f829 	bl	8000608 <__aeabi_dmul>
 800a5b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5ba:	f7f6 faab 	bl	8000b14 <__aeabi_dcmpge>
 800a5be:	9e01      	ldr	r6, [sp, #4]
 800a5c0:	4637      	mov	r7, r6
 800a5c2:	2800      	cmp	r0, #0
 800a5c4:	f040 8243 	bne.w	800aa4e <_dtoa_r+0x956>
 800a5c8:	9d00      	ldr	r5, [sp, #0]
 800a5ca:	2331      	movs	r3, #49	; 0x31
 800a5cc:	f805 3b01 	strb.w	r3, [r5], #1
 800a5d0:	f10a 0a01 	add.w	sl, sl, #1
 800a5d4:	e23f      	b.n	800aa56 <_dtoa_r+0x95e>
 800a5d6:	07f2      	lsls	r2, r6, #31
 800a5d8:	d505      	bpl.n	800a5e6 <_dtoa_r+0x4ee>
 800a5da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5de:	f7f6 f813 	bl	8000608 <__aeabi_dmul>
 800a5e2:	3501      	adds	r5, #1
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	1076      	asrs	r6, r6, #1
 800a5e8:	3708      	adds	r7, #8
 800a5ea:	e76c      	b.n	800a4c6 <_dtoa_r+0x3ce>
 800a5ec:	2502      	movs	r5, #2
 800a5ee:	e76f      	b.n	800a4d0 <_dtoa_r+0x3d8>
 800a5f0:	9b01      	ldr	r3, [sp, #4]
 800a5f2:	f8cd a01c 	str.w	sl, [sp, #28]
 800a5f6:	930c      	str	r3, [sp, #48]	; 0x30
 800a5f8:	e78d      	b.n	800a516 <_dtoa_r+0x41e>
 800a5fa:	9900      	ldr	r1, [sp, #0]
 800a5fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a5fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a600:	4b4e      	ldr	r3, [pc, #312]	; (800a73c <_dtoa_r+0x644>)
 800a602:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a606:	4401      	add	r1, r0
 800a608:	9102      	str	r1, [sp, #8]
 800a60a:	9908      	ldr	r1, [sp, #32]
 800a60c:	eeb0 8a47 	vmov.f32	s16, s14
 800a610:	eef0 8a67 	vmov.f32	s17, s15
 800a614:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a618:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a61c:	2900      	cmp	r1, #0
 800a61e:	d045      	beq.n	800a6ac <_dtoa_r+0x5b4>
 800a620:	494c      	ldr	r1, [pc, #304]	; (800a754 <_dtoa_r+0x65c>)
 800a622:	2000      	movs	r0, #0
 800a624:	f7f6 f91a 	bl	800085c <__aeabi_ddiv>
 800a628:	ec53 2b18 	vmov	r2, r3, d8
 800a62c:	f7f5 fe34 	bl	8000298 <__aeabi_dsub>
 800a630:	9d00      	ldr	r5, [sp, #0]
 800a632:	ec41 0b18 	vmov	d8, r0, r1
 800a636:	4639      	mov	r1, r7
 800a638:	4630      	mov	r0, r6
 800a63a:	f7f6 fa95 	bl	8000b68 <__aeabi_d2iz>
 800a63e:	900c      	str	r0, [sp, #48]	; 0x30
 800a640:	f7f5 ff78 	bl	8000534 <__aeabi_i2d>
 800a644:	4602      	mov	r2, r0
 800a646:	460b      	mov	r3, r1
 800a648:	4630      	mov	r0, r6
 800a64a:	4639      	mov	r1, r7
 800a64c:	f7f5 fe24 	bl	8000298 <__aeabi_dsub>
 800a650:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a652:	3330      	adds	r3, #48	; 0x30
 800a654:	f805 3b01 	strb.w	r3, [r5], #1
 800a658:	ec53 2b18 	vmov	r2, r3, d8
 800a65c:	4606      	mov	r6, r0
 800a65e:	460f      	mov	r7, r1
 800a660:	f7f6 fa44 	bl	8000aec <__aeabi_dcmplt>
 800a664:	2800      	cmp	r0, #0
 800a666:	d165      	bne.n	800a734 <_dtoa_r+0x63c>
 800a668:	4632      	mov	r2, r6
 800a66a:	463b      	mov	r3, r7
 800a66c:	4935      	ldr	r1, [pc, #212]	; (800a744 <_dtoa_r+0x64c>)
 800a66e:	2000      	movs	r0, #0
 800a670:	f7f5 fe12 	bl	8000298 <__aeabi_dsub>
 800a674:	ec53 2b18 	vmov	r2, r3, d8
 800a678:	f7f6 fa38 	bl	8000aec <__aeabi_dcmplt>
 800a67c:	2800      	cmp	r0, #0
 800a67e:	f040 80b9 	bne.w	800a7f4 <_dtoa_r+0x6fc>
 800a682:	9b02      	ldr	r3, [sp, #8]
 800a684:	429d      	cmp	r5, r3
 800a686:	f43f af75 	beq.w	800a574 <_dtoa_r+0x47c>
 800a68a:	4b2f      	ldr	r3, [pc, #188]	; (800a748 <_dtoa_r+0x650>)
 800a68c:	ec51 0b18 	vmov	r0, r1, d8
 800a690:	2200      	movs	r2, #0
 800a692:	f7f5 ffb9 	bl	8000608 <__aeabi_dmul>
 800a696:	4b2c      	ldr	r3, [pc, #176]	; (800a748 <_dtoa_r+0x650>)
 800a698:	ec41 0b18 	vmov	d8, r0, r1
 800a69c:	2200      	movs	r2, #0
 800a69e:	4630      	mov	r0, r6
 800a6a0:	4639      	mov	r1, r7
 800a6a2:	f7f5 ffb1 	bl	8000608 <__aeabi_dmul>
 800a6a6:	4606      	mov	r6, r0
 800a6a8:	460f      	mov	r7, r1
 800a6aa:	e7c4      	b.n	800a636 <_dtoa_r+0x53e>
 800a6ac:	ec51 0b17 	vmov	r0, r1, d7
 800a6b0:	f7f5 ffaa 	bl	8000608 <__aeabi_dmul>
 800a6b4:	9b02      	ldr	r3, [sp, #8]
 800a6b6:	9d00      	ldr	r5, [sp, #0]
 800a6b8:	930c      	str	r3, [sp, #48]	; 0x30
 800a6ba:	ec41 0b18 	vmov	d8, r0, r1
 800a6be:	4639      	mov	r1, r7
 800a6c0:	4630      	mov	r0, r6
 800a6c2:	f7f6 fa51 	bl	8000b68 <__aeabi_d2iz>
 800a6c6:	9011      	str	r0, [sp, #68]	; 0x44
 800a6c8:	f7f5 ff34 	bl	8000534 <__aeabi_i2d>
 800a6cc:	4602      	mov	r2, r0
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	4639      	mov	r1, r7
 800a6d4:	f7f5 fde0 	bl	8000298 <__aeabi_dsub>
 800a6d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6da:	3330      	adds	r3, #48	; 0x30
 800a6dc:	f805 3b01 	strb.w	r3, [r5], #1
 800a6e0:	9b02      	ldr	r3, [sp, #8]
 800a6e2:	429d      	cmp	r5, r3
 800a6e4:	4606      	mov	r6, r0
 800a6e6:	460f      	mov	r7, r1
 800a6e8:	f04f 0200 	mov.w	r2, #0
 800a6ec:	d134      	bne.n	800a758 <_dtoa_r+0x660>
 800a6ee:	4b19      	ldr	r3, [pc, #100]	; (800a754 <_dtoa_r+0x65c>)
 800a6f0:	ec51 0b18 	vmov	r0, r1, d8
 800a6f4:	f7f5 fdd2 	bl	800029c <__adddf3>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	4630      	mov	r0, r6
 800a6fe:	4639      	mov	r1, r7
 800a700:	f7f6 fa12 	bl	8000b28 <__aeabi_dcmpgt>
 800a704:	2800      	cmp	r0, #0
 800a706:	d175      	bne.n	800a7f4 <_dtoa_r+0x6fc>
 800a708:	ec53 2b18 	vmov	r2, r3, d8
 800a70c:	4911      	ldr	r1, [pc, #68]	; (800a754 <_dtoa_r+0x65c>)
 800a70e:	2000      	movs	r0, #0
 800a710:	f7f5 fdc2 	bl	8000298 <__aeabi_dsub>
 800a714:	4602      	mov	r2, r0
 800a716:	460b      	mov	r3, r1
 800a718:	4630      	mov	r0, r6
 800a71a:	4639      	mov	r1, r7
 800a71c:	f7f6 f9e6 	bl	8000aec <__aeabi_dcmplt>
 800a720:	2800      	cmp	r0, #0
 800a722:	f43f af27 	beq.w	800a574 <_dtoa_r+0x47c>
 800a726:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a728:	1e6b      	subs	r3, r5, #1
 800a72a:	930c      	str	r3, [sp, #48]	; 0x30
 800a72c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a730:	2b30      	cmp	r3, #48	; 0x30
 800a732:	d0f8      	beq.n	800a726 <_dtoa_r+0x62e>
 800a734:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a738:	e04a      	b.n	800a7d0 <_dtoa_r+0x6d8>
 800a73a:	bf00      	nop
 800a73c:	0800e0b0 	.word	0x0800e0b0
 800a740:	0800e088 	.word	0x0800e088
 800a744:	3ff00000 	.word	0x3ff00000
 800a748:	40240000 	.word	0x40240000
 800a74c:	401c0000 	.word	0x401c0000
 800a750:	40140000 	.word	0x40140000
 800a754:	3fe00000 	.word	0x3fe00000
 800a758:	4baf      	ldr	r3, [pc, #700]	; (800aa18 <_dtoa_r+0x920>)
 800a75a:	f7f5 ff55 	bl	8000608 <__aeabi_dmul>
 800a75e:	4606      	mov	r6, r0
 800a760:	460f      	mov	r7, r1
 800a762:	e7ac      	b.n	800a6be <_dtoa_r+0x5c6>
 800a764:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a768:	9d00      	ldr	r5, [sp, #0]
 800a76a:	4642      	mov	r2, r8
 800a76c:	464b      	mov	r3, r9
 800a76e:	4630      	mov	r0, r6
 800a770:	4639      	mov	r1, r7
 800a772:	f7f6 f873 	bl	800085c <__aeabi_ddiv>
 800a776:	f7f6 f9f7 	bl	8000b68 <__aeabi_d2iz>
 800a77a:	9002      	str	r0, [sp, #8]
 800a77c:	f7f5 feda 	bl	8000534 <__aeabi_i2d>
 800a780:	4642      	mov	r2, r8
 800a782:	464b      	mov	r3, r9
 800a784:	f7f5 ff40 	bl	8000608 <__aeabi_dmul>
 800a788:	4602      	mov	r2, r0
 800a78a:	460b      	mov	r3, r1
 800a78c:	4630      	mov	r0, r6
 800a78e:	4639      	mov	r1, r7
 800a790:	f7f5 fd82 	bl	8000298 <__aeabi_dsub>
 800a794:	9e02      	ldr	r6, [sp, #8]
 800a796:	9f01      	ldr	r7, [sp, #4]
 800a798:	3630      	adds	r6, #48	; 0x30
 800a79a:	f805 6b01 	strb.w	r6, [r5], #1
 800a79e:	9e00      	ldr	r6, [sp, #0]
 800a7a0:	1bae      	subs	r6, r5, r6
 800a7a2:	42b7      	cmp	r7, r6
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	460b      	mov	r3, r1
 800a7a8:	d137      	bne.n	800a81a <_dtoa_r+0x722>
 800a7aa:	f7f5 fd77 	bl	800029c <__adddf3>
 800a7ae:	4642      	mov	r2, r8
 800a7b0:	464b      	mov	r3, r9
 800a7b2:	4606      	mov	r6, r0
 800a7b4:	460f      	mov	r7, r1
 800a7b6:	f7f6 f9b7 	bl	8000b28 <__aeabi_dcmpgt>
 800a7ba:	b9c8      	cbnz	r0, 800a7f0 <_dtoa_r+0x6f8>
 800a7bc:	4642      	mov	r2, r8
 800a7be:	464b      	mov	r3, r9
 800a7c0:	4630      	mov	r0, r6
 800a7c2:	4639      	mov	r1, r7
 800a7c4:	f7f6 f988 	bl	8000ad8 <__aeabi_dcmpeq>
 800a7c8:	b110      	cbz	r0, 800a7d0 <_dtoa_r+0x6d8>
 800a7ca:	9b02      	ldr	r3, [sp, #8]
 800a7cc:	07d9      	lsls	r1, r3, #31
 800a7ce:	d40f      	bmi.n	800a7f0 <_dtoa_r+0x6f8>
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	4659      	mov	r1, fp
 800a7d4:	f000 fe5c 	bl	800b490 <_Bfree>
 800a7d8:	2300      	movs	r3, #0
 800a7da:	702b      	strb	r3, [r5, #0]
 800a7dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7de:	f10a 0001 	add.w	r0, sl, #1
 800a7e2:	6018      	str	r0, [r3, #0]
 800a7e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	f43f acd8 	beq.w	800a19c <_dtoa_r+0xa4>
 800a7ec:	601d      	str	r5, [r3, #0]
 800a7ee:	e4d5      	b.n	800a19c <_dtoa_r+0xa4>
 800a7f0:	f8cd a01c 	str.w	sl, [sp, #28]
 800a7f4:	462b      	mov	r3, r5
 800a7f6:	461d      	mov	r5, r3
 800a7f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7fc:	2a39      	cmp	r2, #57	; 0x39
 800a7fe:	d108      	bne.n	800a812 <_dtoa_r+0x71a>
 800a800:	9a00      	ldr	r2, [sp, #0]
 800a802:	429a      	cmp	r2, r3
 800a804:	d1f7      	bne.n	800a7f6 <_dtoa_r+0x6fe>
 800a806:	9a07      	ldr	r2, [sp, #28]
 800a808:	9900      	ldr	r1, [sp, #0]
 800a80a:	3201      	adds	r2, #1
 800a80c:	9207      	str	r2, [sp, #28]
 800a80e:	2230      	movs	r2, #48	; 0x30
 800a810:	700a      	strb	r2, [r1, #0]
 800a812:	781a      	ldrb	r2, [r3, #0]
 800a814:	3201      	adds	r2, #1
 800a816:	701a      	strb	r2, [r3, #0]
 800a818:	e78c      	b.n	800a734 <_dtoa_r+0x63c>
 800a81a:	4b7f      	ldr	r3, [pc, #508]	; (800aa18 <_dtoa_r+0x920>)
 800a81c:	2200      	movs	r2, #0
 800a81e:	f7f5 fef3 	bl	8000608 <__aeabi_dmul>
 800a822:	2200      	movs	r2, #0
 800a824:	2300      	movs	r3, #0
 800a826:	4606      	mov	r6, r0
 800a828:	460f      	mov	r7, r1
 800a82a:	f7f6 f955 	bl	8000ad8 <__aeabi_dcmpeq>
 800a82e:	2800      	cmp	r0, #0
 800a830:	d09b      	beq.n	800a76a <_dtoa_r+0x672>
 800a832:	e7cd      	b.n	800a7d0 <_dtoa_r+0x6d8>
 800a834:	9a08      	ldr	r2, [sp, #32]
 800a836:	2a00      	cmp	r2, #0
 800a838:	f000 80c4 	beq.w	800a9c4 <_dtoa_r+0x8cc>
 800a83c:	9a05      	ldr	r2, [sp, #20]
 800a83e:	2a01      	cmp	r2, #1
 800a840:	f300 80a8 	bgt.w	800a994 <_dtoa_r+0x89c>
 800a844:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a846:	2a00      	cmp	r2, #0
 800a848:	f000 80a0 	beq.w	800a98c <_dtoa_r+0x894>
 800a84c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a850:	9e06      	ldr	r6, [sp, #24]
 800a852:	4645      	mov	r5, r8
 800a854:	9a04      	ldr	r2, [sp, #16]
 800a856:	2101      	movs	r1, #1
 800a858:	441a      	add	r2, r3
 800a85a:	4620      	mov	r0, r4
 800a85c:	4498      	add	r8, r3
 800a85e:	9204      	str	r2, [sp, #16]
 800a860:	f000 ff1c 	bl	800b69c <__i2b>
 800a864:	4607      	mov	r7, r0
 800a866:	2d00      	cmp	r5, #0
 800a868:	dd0b      	ble.n	800a882 <_dtoa_r+0x78a>
 800a86a:	9b04      	ldr	r3, [sp, #16]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	dd08      	ble.n	800a882 <_dtoa_r+0x78a>
 800a870:	42ab      	cmp	r3, r5
 800a872:	9a04      	ldr	r2, [sp, #16]
 800a874:	bfa8      	it	ge
 800a876:	462b      	movge	r3, r5
 800a878:	eba8 0803 	sub.w	r8, r8, r3
 800a87c:	1aed      	subs	r5, r5, r3
 800a87e:	1ad3      	subs	r3, r2, r3
 800a880:	9304      	str	r3, [sp, #16]
 800a882:	9b06      	ldr	r3, [sp, #24]
 800a884:	b1fb      	cbz	r3, 800a8c6 <_dtoa_r+0x7ce>
 800a886:	9b08      	ldr	r3, [sp, #32]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	f000 809f 	beq.w	800a9cc <_dtoa_r+0x8d4>
 800a88e:	2e00      	cmp	r6, #0
 800a890:	dd11      	ble.n	800a8b6 <_dtoa_r+0x7be>
 800a892:	4639      	mov	r1, r7
 800a894:	4632      	mov	r2, r6
 800a896:	4620      	mov	r0, r4
 800a898:	f000 ffbc 	bl	800b814 <__pow5mult>
 800a89c:	465a      	mov	r2, fp
 800a89e:	4601      	mov	r1, r0
 800a8a0:	4607      	mov	r7, r0
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	f000 ff10 	bl	800b6c8 <__multiply>
 800a8a8:	4659      	mov	r1, fp
 800a8aa:	9007      	str	r0, [sp, #28]
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	f000 fdef 	bl	800b490 <_Bfree>
 800a8b2:	9b07      	ldr	r3, [sp, #28]
 800a8b4:	469b      	mov	fp, r3
 800a8b6:	9b06      	ldr	r3, [sp, #24]
 800a8b8:	1b9a      	subs	r2, r3, r6
 800a8ba:	d004      	beq.n	800a8c6 <_dtoa_r+0x7ce>
 800a8bc:	4659      	mov	r1, fp
 800a8be:	4620      	mov	r0, r4
 800a8c0:	f000 ffa8 	bl	800b814 <__pow5mult>
 800a8c4:	4683      	mov	fp, r0
 800a8c6:	2101      	movs	r1, #1
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	f000 fee7 	bl	800b69c <__i2b>
 800a8ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	4606      	mov	r6, r0
 800a8d4:	dd7c      	ble.n	800a9d0 <_dtoa_r+0x8d8>
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	4601      	mov	r1, r0
 800a8da:	4620      	mov	r0, r4
 800a8dc:	f000 ff9a 	bl	800b814 <__pow5mult>
 800a8e0:	9b05      	ldr	r3, [sp, #20]
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	4606      	mov	r6, r0
 800a8e6:	dd76      	ble.n	800a9d6 <_dtoa_r+0x8de>
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	9306      	str	r3, [sp, #24]
 800a8ec:	6933      	ldr	r3, [r6, #16]
 800a8ee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a8f2:	6918      	ldr	r0, [r3, #16]
 800a8f4:	f000 fe82 	bl	800b5fc <__hi0bits>
 800a8f8:	f1c0 0020 	rsb	r0, r0, #32
 800a8fc:	9b04      	ldr	r3, [sp, #16]
 800a8fe:	4418      	add	r0, r3
 800a900:	f010 001f 	ands.w	r0, r0, #31
 800a904:	f000 8086 	beq.w	800aa14 <_dtoa_r+0x91c>
 800a908:	f1c0 0320 	rsb	r3, r0, #32
 800a90c:	2b04      	cmp	r3, #4
 800a90e:	dd7f      	ble.n	800aa10 <_dtoa_r+0x918>
 800a910:	f1c0 001c 	rsb	r0, r0, #28
 800a914:	9b04      	ldr	r3, [sp, #16]
 800a916:	4403      	add	r3, r0
 800a918:	4480      	add	r8, r0
 800a91a:	4405      	add	r5, r0
 800a91c:	9304      	str	r3, [sp, #16]
 800a91e:	f1b8 0f00 	cmp.w	r8, #0
 800a922:	dd05      	ble.n	800a930 <_dtoa_r+0x838>
 800a924:	4659      	mov	r1, fp
 800a926:	4642      	mov	r2, r8
 800a928:	4620      	mov	r0, r4
 800a92a:	f000 ffcd 	bl	800b8c8 <__lshift>
 800a92e:	4683      	mov	fp, r0
 800a930:	9b04      	ldr	r3, [sp, #16]
 800a932:	2b00      	cmp	r3, #0
 800a934:	dd05      	ble.n	800a942 <_dtoa_r+0x84a>
 800a936:	4631      	mov	r1, r6
 800a938:	461a      	mov	r2, r3
 800a93a:	4620      	mov	r0, r4
 800a93c:	f000 ffc4 	bl	800b8c8 <__lshift>
 800a940:	4606      	mov	r6, r0
 800a942:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a944:	2b00      	cmp	r3, #0
 800a946:	d069      	beq.n	800aa1c <_dtoa_r+0x924>
 800a948:	4631      	mov	r1, r6
 800a94a:	4658      	mov	r0, fp
 800a94c:	f001 f828 	bl	800b9a0 <__mcmp>
 800a950:	2800      	cmp	r0, #0
 800a952:	da63      	bge.n	800aa1c <_dtoa_r+0x924>
 800a954:	2300      	movs	r3, #0
 800a956:	4659      	mov	r1, fp
 800a958:	220a      	movs	r2, #10
 800a95a:	4620      	mov	r0, r4
 800a95c:	f000 fdba 	bl	800b4d4 <__multadd>
 800a960:	9b08      	ldr	r3, [sp, #32]
 800a962:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a966:	4683      	mov	fp, r0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	f000 818f 	beq.w	800ac8c <_dtoa_r+0xb94>
 800a96e:	4639      	mov	r1, r7
 800a970:	2300      	movs	r3, #0
 800a972:	220a      	movs	r2, #10
 800a974:	4620      	mov	r0, r4
 800a976:	f000 fdad 	bl	800b4d4 <__multadd>
 800a97a:	f1b9 0f00 	cmp.w	r9, #0
 800a97e:	4607      	mov	r7, r0
 800a980:	f300 808e 	bgt.w	800aaa0 <_dtoa_r+0x9a8>
 800a984:	9b05      	ldr	r3, [sp, #20]
 800a986:	2b02      	cmp	r3, #2
 800a988:	dc50      	bgt.n	800aa2c <_dtoa_r+0x934>
 800a98a:	e089      	b.n	800aaa0 <_dtoa_r+0x9a8>
 800a98c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a98e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a992:	e75d      	b.n	800a850 <_dtoa_r+0x758>
 800a994:	9b01      	ldr	r3, [sp, #4]
 800a996:	1e5e      	subs	r6, r3, #1
 800a998:	9b06      	ldr	r3, [sp, #24]
 800a99a:	42b3      	cmp	r3, r6
 800a99c:	bfbf      	itttt	lt
 800a99e:	9b06      	ldrlt	r3, [sp, #24]
 800a9a0:	9606      	strlt	r6, [sp, #24]
 800a9a2:	1af2      	sublt	r2, r6, r3
 800a9a4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a9a6:	bfb6      	itet	lt
 800a9a8:	189b      	addlt	r3, r3, r2
 800a9aa:	1b9e      	subge	r6, r3, r6
 800a9ac:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a9ae:	9b01      	ldr	r3, [sp, #4]
 800a9b0:	bfb8      	it	lt
 800a9b2:	2600      	movlt	r6, #0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	bfb5      	itete	lt
 800a9b8:	eba8 0503 	sublt.w	r5, r8, r3
 800a9bc:	9b01      	ldrge	r3, [sp, #4]
 800a9be:	2300      	movlt	r3, #0
 800a9c0:	4645      	movge	r5, r8
 800a9c2:	e747      	b.n	800a854 <_dtoa_r+0x75c>
 800a9c4:	9e06      	ldr	r6, [sp, #24]
 800a9c6:	9f08      	ldr	r7, [sp, #32]
 800a9c8:	4645      	mov	r5, r8
 800a9ca:	e74c      	b.n	800a866 <_dtoa_r+0x76e>
 800a9cc:	9a06      	ldr	r2, [sp, #24]
 800a9ce:	e775      	b.n	800a8bc <_dtoa_r+0x7c4>
 800a9d0:	9b05      	ldr	r3, [sp, #20]
 800a9d2:	2b01      	cmp	r3, #1
 800a9d4:	dc18      	bgt.n	800aa08 <_dtoa_r+0x910>
 800a9d6:	9b02      	ldr	r3, [sp, #8]
 800a9d8:	b9b3      	cbnz	r3, 800aa08 <_dtoa_r+0x910>
 800a9da:	9b03      	ldr	r3, [sp, #12]
 800a9dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9e0:	b9a3      	cbnz	r3, 800aa0c <_dtoa_r+0x914>
 800a9e2:	9b03      	ldr	r3, [sp, #12]
 800a9e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a9e8:	0d1b      	lsrs	r3, r3, #20
 800a9ea:	051b      	lsls	r3, r3, #20
 800a9ec:	b12b      	cbz	r3, 800a9fa <_dtoa_r+0x902>
 800a9ee:	9b04      	ldr	r3, [sp, #16]
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	9304      	str	r3, [sp, #16]
 800a9f4:	f108 0801 	add.w	r8, r8, #1
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	9306      	str	r3, [sp, #24]
 800a9fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	f47f af74 	bne.w	800a8ec <_dtoa_r+0x7f4>
 800aa04:	2001      	movs	r0, #1
 800aa06:	e779      	b.n	800a8fc <_dtoa_r+0x804>
 800aa08:	2300      	movs	r3, #0
 800aa0a:	e7f6      	b.n	800a9fa <_dtoa_r+0x902>
 800aa0c:	9b02      	ldr	r3, [sp, #8]
 800aa0e:	e7f4      	b.n	800a9fa <_dtoa_r+0x902>
 800aa10:	d085      	beq.n	800a91e <_dtoa_r+0x826>
 800aa12:	4618      	mov	r0, r3
 800aa14:	301c      	adds	r0, #28
 800aa16:	e77d      	b.n	800a914 <_dtoa_r+0x81c>
 800aa18:	40240000 	.word	0x40240000
 800aa1c:	9b01      	ldr	r3, [sp, #4]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	dc38      	bgt.n	800aa94 <_dtoa_r+0x99c>
 800aa22:	9b05      	ldr	r3, [sp, #20]
 800aa24:	2b02      	cmp	r3, #2
 800aa26:	dd35      	ble.n	800aa94 <_dtoa_r+0x99c>
 800aa28:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800aa2c:	f1b9 0f00 	cmp.w	r9, #0
 800aa30:	d10d      	bne.n	800aa4e <_dtoa_r+0x956>
 800aa32:	4631      	mov	r1, r6
 800aa34:	464b      	mov	r3, r9
 800aa36:	2205      	movs	r2, #5
 800aa38:	4620      	mov	r0, r4
 800aa3a:	f000 fd4b 	bl	800b4d4 <__multadd>
 800aa3e:	4601      	mov	r1, r0
 800aa40:	4606      	mov	r6, r0
 800aa42:	4658      	mov	r0, fp
 800aa44:	f000 ffac 	bl	800b9a0 <__mcmp>
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	f73f adbd 	bgt.w	800a5c8 <_dtoa_r+0x4d0>
 800aa4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa50:	9d00      	ldr	r5, [sp, #0]
 800aa52:	ea6f 0a03 	mvn.w	sl, r3
 800aa56:	f04f 0800 	mov.w	r8, #0
 800aa5a:	4631      	mov	r1, r6
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	f000 fd17 	bl	800b490 <_Bfree>
 800aa62:	2f00      	cmp	r7, #0
 800aa64:	f43f aeb4 	beq.w	800a7d0 <_dtoa_r+0x6d8>
 800aa68:	f1b8 0f00 	cmp.w	r8, #0
 800aa6c:	d005      	beq.n	800aa7a <_dtoa_r+0x982>
 800aa6e:	45b8      	cmp	r8, r7
 800aa70:	d003      	beq.n	800aa7a <_dtoa_r+0x982>
 800aa72:	4641      	mov	r1, r8
 800aa74:	4620      	mov	r0, r4
 800aa76:	f000 fd0b 	bl	800b490 <_Bfree>
 800aa7a:	4639      	mov	r1, r7
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	f000 fd07 	bl	800b490 <_Bfree>
 800aa82:	e6a5      	b.n	800a7d0 <_dtoa_r+0x6d8>
 800aa84:	2600      	movs	r6, #0
 800aa86:	4637      	mov	r7, r6
 800aa88:	e7e1      	b.n	800aa4e <_dtoa_r+0x956>
 800aa8a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800aa8c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800aa90:	4637      	mov	r7, r6
 800aa92:	e599      	b.n	800a5c8 <_dtoa_r+0x4d0>
 800aa94:	9b08      	ldr	r3, [sp, #32]
 800aa96:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	f000 80fd 	beq.w	800ac9a <_dtoa_r+0xba2>
 800aaa0:	2d00      	cmp	r5, #0
 800aaa2:	dd05      	ble.n	800aab0 <_dtoa_r+0x9b8>
 800aaa4:	4639      	mov	r1, r7
 800aaa6:	462a      	mov	r2, r5
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f000 ff0d 	bl	800b8c8 <__lshift>
 800aaae:	4607      	mov	r7, r0
 800aab0:	9b06      	ldr	r3, [sp, #24]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d05c      	beq.n	800ab70 <_dtoa_r+0xa78>
 800aab6:	6879      	ldr	r1, [r7, #4]
 800aab8:	4620      	mov	r0, r4
 800aaba:	f000 fca9 	bl	800b410 <_Balloc>
 800aabe:	4605      	mov	r5, r0
 800aac0:	b928      	cbnz	r0, 800aace <_dtoa_r+0x9d6>
 800aac2:	4b80      	ldr	r3, [pc, #512]	; (800acc4 <_dtoa_r+0xbcc>)
 800aac4:	4602      	mov	r2, r0
 800aac6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800aaca:	f7ff bb2e 	b.w	800a12a <_dtoa_r+0x32>
 800aace:	693a      	ldr	r2, [r7, #16]
 800aad0:	3202      	adds	r2, #2
 800aad2:	0092      	lsls	r2, r2, #2
 800aad4:	f107 010c 	add.w	r1, r7, #12
 800aad8:	300c      	adds	r0, #12
 800aada:	f7fd fc71 	bl	80083c0 <memcpy>
 800aade:	2201      	movs	r2, #1
 800aae0:	4629      	mov	r1, r5
 800aae2:	4620      	mov	r0, r4
 800aae4:	f000 fef0 	bl	800b8c8 <__lshift>
 800aae8:	9b00      	ldr	r3, [sp, #0]
 800aaea:	3301      	adds	r3, #1
 800aaec:	9301      	str	r3, [sp, #4]
 800aaee:	9b00      	ldr	r3, [sp, #0]
 800aaf0:	444b      	add	r3, r9
 800aaf2:	9307      	str	r3, [sp, #28]
 800aaf4:	9b02      	ldr	r3, [sp, #8]
 800aaf6:	f003 0301 	and.w	r3, r3, #1
 800aafa:	46b8      	mov	r8, r7
 800aafc:	9306      	str	r3, [sp, #24]
 800aafe:	4607      	mov	r7, r0
 800ab00:	9b01      	ldr	r3, [sp, #4]
 800ab02:	4631      	mov	r1, r6
 800ab04:	3b01      	subs	r3, #1
 800ab06:	4658      	mov	r0, fp
 800ab08:	9302      	str	r3, [sp, #8]
 800ab0a:	f7ff fa69 	bl	8009fe0 <quorem>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	3330      	adds	r3, #48	; 0x30
 800ab12:	9004      	str	r0, [sp, #16]
 800ab14:	4641      	mov	r1, r8
 800ab16:	4658      	mov	r0, fp
 800ab18:	9308      	str	r3, [sp, #32]
 800ab1a:	f000 ff41 	bl	800b9a0 <__mcmp>
 800ab1e:	463a      	mov	r2, r7
 800ab20:	4681      	mov	r9, r0
 800ab22:	4631      	mov	r1, r6
 800ab24:	4620      	mov	r0, r4
 800ab26:	f000 ff57 	bl	800b9d8 <__mdiff>
 800ab2a:	68c2      	ldr	r2, [r0, #12]
 800ab2c:	9b08      	ldr	r3, [sp, #32]
 800ab2e:	4605      	mov	r5, r0
 800ab30:	bb02      	cbnz	r2, 800ab74 <_dtoa_r+0xa7c>
 800ab32:	4601      	mov	r1, r0
 800ab34:	4658      	mov	r0, fp
 800ab36:	f000 ff33 	bl	800b9a0 <__mcmp>
 800ab3a:	9b08      	ldr	r3, [sp, #32]
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	4629      	mov	r1, r5
 800ab40:	4620      	mov	r0, r4
 800ab42:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ab46:	f000 fca3 	bl	800b490 <_Bfree>
 800ab4a:	9b05      	ldr	r3, [sp, #20]
 800ab4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab4e:	9d01      	ldr	r5, [sp, #4]
 800ab50:	ea43 0102 	orr.w	r1, r3, r2
 800ab54:	9b06      	ldr	r3, [sp, #24]
 800ab56:	430b      	orrs	r3, r1
 800ab58:	9b08      	ldr	r3, [sp, #32]
 800ab5a:	d10d      	bne.n	800ab78 <_dtoa_r+0xa80>
 800ab5c:	2b39      	cmp	r3, #57	; 0x39
 800ab5e:	d029      	beq.n	800abb4 <_dtoa_r+0xabc>
 800ab60:	f1b9 0f00 	cmp.w	r9, #0
 800ab64:	dd01      	ble.n	800ab6a <_dtoa_r+0xa72>
 800ab66:	9b04      	ldr	r3, [sp, #16]
 800ab68:	3331      	adds	r3, #49	; 0x31
 800ab6a:	9a02      	ldr	r2, [sp, #8]
 800ab6c:	7013      	strb	r3, [r2, #0]
 800ab6e:	e774      	b.n	800aa5a <_dtoa_r+0x962>
 800ab70:	4638      	mov	r0, r7
 800ab72:	e7b9      	b.n	800aae8 <_dtoa_r+0x9f0>
 800ab74:	2201      	movs	r2, #1
 800ab76:	e7e2      	b.n	800ab3e <_dtoa_r+0xa46>
 800ab78:	f1b9 0f00 	cmp.w	r9, #0
 800ab7c:	db06      	blt.n	800ab8c <_dtoa_r+0xa94>
 800ab7e:	9905      	ldr	r1, [sp, #20]
 800ab80:	ea41 0909 	orr.w	r9, r1, r9
 800ab84:	9906      	ldr	r1, [sp, #24]
 800ab86:	ea59 0101 	orrs.w	r1, r9, r1
 800ab8a:	d120      	bne.n	800abce <_dtoa_r+0xad6>
 800ab8c:	2a00      	cmp	r2, #0
 800ab8e:	ddec      	ble.n	800ab6a <_dtoa_r+0xa72>
 800ab90:	4659      	mov	r1, fp
 800ab92:	2201      	movs	r2, #1
 800ab94:	4620      	mov	r0, r4
 800ab96:	9301      	str	r3, [sp, #4]
 800ab98:	f000 fe96 	bl	800b8c8 <__lshift>
 800ab9c:	4631      	mov	r1, r6
 800ab9e:	4683      	mov	fp, r0
 800aba0:	f000 fefe 	bl	800b9a0 <__mcmp>
 800aba4:	2800      	cmp	r0, #0
 800aba6:	9b01      	ldr	r3, [sp, #4]
 800aba8:	dc02      	bgt.n	800abb0 <_dtoa_r+0xab8>
 800abaa:	d1de      	bne.n	800ab6a <_dtoa_r+0xa72>
 800abac:	07da      	lsls	r2, r3, #31
 800abae:	d5dc      	bpl.n	800ab6a <_dtoa_r+0xa72>
 800abb0:	2b39      	cmp	r3, #57	; 0x39
 800abb2:	d1d8      	bne.n	800ab66 <_dtoa_r+0xa6e>
 800abb4:	9a02      	ldr	r2, [sp, #8]
 800abb6:	2339      	movs	r3, #57	; 0x39
 800abb8:	7013      	strb	r3, [r2, #0]
 800abba:	462b      	mov	r3, r5
 800abbc:	461d      	mov	r5, r3
 800abbe:	3b01      	subs	r3, #1
 800abc0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800abc4:	2a39      	cmp	r2, #57	; 0x39
 800abc6:	d050      	beq.n	800ac6a <_dtoa_r+0xb72>
 800abc8:	3201      	adds	r2, #1
 800abca:	701a      	strb	r2, [r3, #0]
 800abcc:	e745      	b.n	800aa5a <_dtoa_r+0x962>
 800abce:	2a00      	cmp	r2, #0
 800abd0:	dd03      	ble.n	800abda <_dtoa_r+0xae2>
 800abd2:	2b39      	cmp	r3, #57	; 0x39
 800abd4:	d0ee      	beq.n	800abb4 <_dtoa_r+0xabc>
 800abd6:	3301      	adds	r3, #1
 800abd8:	e7c7      	b.n	800ab6a <_dtoa_r+0xa72>
 800abda:	9a01      	ldr	r2, [sp, #4]
 800abdc:	9907      	ldr	r1, [sp, #28]
 800abde:	f802 3c01 	strb.w	r3, [r2, #-1]
 800abe2:	428a      	cmp	r2, r1
 800abe4:	d02a      	beq.n	800ac3c <_dtoa_r+0xb44>
 800abe6:	4659      	mov	r1, fp
 800abe8:	2300      	movs	r3, #0
 800abea:	220a      	movs	r2, #10
 800abec:	4620      	mov	r0, r4
 800abee:	f000 fc71 	bl	800b4d4 <__multadd>
 800abf2:	45b8      	cmp	r8, r7
 800abf4:	4683      	mov	fp, r0
 800abf6:	f04f 0300 	mov.w	r3, #0
 800abfa:	f04f 020a 	mov.w	r2, #10
 800abfe:	4641      	mov	r1, r8
 800ac00:	4620      	mov	r0, r4
 800ac02:	d107      	bne.n	800ac14 <_dtoa_r+0xb1c>
 800ac04:	f000 fc66 	bl	800b4d4 <__multadd>
 800ac08:	4680      	mov	r8, r0
 800ac0a:	4607      	mov	r7, r0
 800ac0c:	9b01      	ldr	r3, [sp, #4]
 800ac0e:	3301      	adds	r3, #1
 800ac10:	9301      	str	r3, [sp, #4]
 800ac12:	e775      	b.n	800ab00 <_dtoa_r+0xa08>
 800ac14:	f000 fc5e 	bl	800b4d4 <__multadd>
 800ac18:	4639      	mov	r1, r7
 800ac1a:	4680      	mov	r8, r0
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	220a      	movs	r2, #10
 800ac20:	4620      	mov	r0, r4
 800ac22:	f000 fc57 	bl	800b4d4 <__multadd>
 800ac26:	4607      	mov	r7, r0
 800ac28:	e7f0      	b.n	800ac0c <_dtoa_r+0xb14>
 800ac2a:	f1b9 0f00 	cmp.w	r9, #0
 800ac2e:	9a00      	ldr	r2, [sp, #0]
 800ac30:	bfcc      	ite	gt
 800ac32:	464d      	movgt	r5, r9
 800ac34:	2501      	movle	r5, #1
 800ac36:	4415      	add	r5, r2
 800ac38:	f04f 0800 	mov.w	r8, #0
 800ac3c:	4659      	mov	r1, fp
 800ac3e:	2201      	movs	r2, #1
 800ac40:	4620      	mov	r0, r4
 800ac42:	9301      	str	r3, [sp, #4]
 800ac44:	f000 fe40 	bl	800b8c8 <__lshift>
 800ac48:	4631      	mov	r1, r6
 800ac4a:	4683      	mov	fp, r0
 800ac4c:	f000 fea8 	bl	800b9a0 <__mcmp>
 800ac50:	2800      	cmp	r0, #0
 800ac52:	dcb2      	bgt.n	800abba <_dtoa_r+0xac2>
 800ac54:	d102      	bne.n	800ac5c <_dtoa_r+0xb64>
 800ac56:	9b01      	ldr	r3, [sp, #4]
 800ac58:	07db      	lsls	r3, r3, #31
 800ac5a:	d4ae      	bmi.n	800abba <_dtoa_r+0xac2>
 800ac5c:	462b      	mov	r3, r5
 800ac5e:	461d      	mov	r5, r3
 800ac60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac64:	2a30      	cmp	r2, #48	; 0x30
 800ac66:	d0fa      	beq.n	800ac5e <_dtoa_r+0xb66>
 800ac68:	e6f7      	b.n	800aa5a <_dtoa_r+0x962>
 800ac6a:	9a00      	ldr	r2, [sp, #0]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d1a5      	bne.n	800abbc <_dtoa_r+0xac4>
 800ac70:	f10a 0a01 	add.w	sl, sl, #1
 800ac74:	2331      	movs	r3, #49	; 0x31
 800ac76:	e779      	b.n	800ab6c <_dtoa_r+0xa74>
 800ac78:	4b13      	ldr	r3, [pc, #76]	; (800acc8 <_dtoa_r+0xbd0>)
 800ac7a:	f7ff baaf 	b.w	800a1dc <_dtoa_r+0xe4>
 800ac7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	f47f aa86 	bne.w	800a192 <_dtoa_r+0x9a>
 800ac86:	4b11      	ldr	r3, [pc, #68]	; (800accc <_dtoa_r+0xbd4>)
 800ac88:	f7ff baa8 	b.w	800a1dc <_dtoa_r+0xe4>
 800ac8c:	f1b9 0f00 	cmp.w	r9, #0
 800ac90:	dc03      	bgt.n	800ac9a <_dtoa_r+0xba2>
 800ac92:	9b05      	ldr	r3, [sp, #20]
 800ac94:	2b02      	cmp	r3, #2
 800ac96:	f73f aec9 	bgt.w	800aa2c <_dtoa_r+0x934>
 800ac9a:	9d00      	ldr	r5, [sp, #0]
 800ac9c:	4631      	mov	r1, r6
 800ac9e:	4658      	mov	r0, fp
 800aca0:	f7ff f99e 	bl	8009fe0 <quorem>
 800aca4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800aca8:	f805 3b01 	strb.w	r3, [r5], #1
 800acac:	9a00      	ldr	r2, [sp, #0]
 800acae:	1aaa      	subs	r2, r5, r2
 800acb0:	4591      	cmp	r9, r2
 800acb2:	ddba      	ble.n	800ac2a <_dtoa_r+0xb32>
 800acb4:	4659      	mov	r1, fp
 800acb6:	2300      	movs	r3, #0
 800acb8:	220a      	movs	r2, #10
 800acba:	4620      	mov	r0, r4
 800acbc:	f000 fc0a 	bl	800b4d4 <__multadd>
 800acc0:	4683      	mov	fp, r0
 800acc2:	e7eb      	b.n	800ac9c <_dtoa_r+0xba4>
 800acc4:	0800df94 	.word	0x0800df94
 800acc8:	0800e199 	.word	0x0800e199
 800accc:	0800df11 	.word	0x0800df11

0800acd0 <rshift>:
 800acd0:	6903      	ldr	r3, [r0, #16]
 800acd2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800acd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800acda:	ea4f 1261 	mov.w	r2, r1, asr #5
 800acde:	f100 0414 	add.w	r4, r0, #20
 800ace2:	dd45      	ble.n	800ad70 <rshift+0xa0>
 800ace4:	f011 011f 	ands.w	r1, r1, #31
 800ace8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800acec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800acf0:	d10c      	bne.n	800ad0c <rshift+0x3c>
 800acf2:	f100 0710 	add.w	r7, r0, #16
 800acf6:	4629      	mov	r1, r5
 800acf8:	42b1      	cmp	r1, r6
 800acfa:	d334      	bcc.n	800ad66 <rshift+0x96>
 800acfc:	1a9b      	subs	r3, r3, r2
 800acfe:	009b      	lsls	r3, r3, #2
 800ad00:	1eea      	subs	r2, r5, #3
 800ad02:	4296      	cmp	r6, r2
 800ad04:	bf38      	it	cc
 800ad06:	2300      	movcc	r3, #0
 800ad08:	4423      	add	r3, r4
 800ad0a:	e015      	b.n	800ad38 <rshift+0x68>
 800ad0c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ad10:	f1c1 0820 	rsb	r8, r1, #32
 800ad14:	40cf      	lsrs	r7, r1
 800ad16:	f105 0e04 	add.w	lr, r5, #4
 800ad1a:	46a1      	mov	r9, r4
 800ad1c:	4576      	cmp	r6, lr
 800ad1e:	46f4      	mov	ip, lr
 800ad20:	d815      	bhi.n	800ad4e <rshift+0x7e>
 800ad22:	1a9b      	subs	r3, r3, r2
 800ad24:	009a      	lsls	r2, r3, #2
 800ad26:	3a04      	subs	r2, #4
 800ad28:	3501      	adds	r5, #1
 800ad2a:	42ae      	cmp	r6, r5
 800ad2c:	bf38      	it	cc
 800ad2e:	2200      	movcc	r2, #0
 800ad30:	18a3      	adds	r3, r4, r2
 800ad32:	50a7      	str	r7, [r4, r2]
 800ad34:	b107      	cbz	r7, 800ad38 <rshift+0x68>
 800ad36:	3304      	adds	r3, #4
 800ad38:	1b1a      	subs	r2, r3, r4
 800ad3a:	42a3      	cmp	r3, r4
 800ad3c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ad40:	bf08      	it	eq
 800ad42:	2300      	moveq	r3, #0
 800ad44:	6102      	str	r2, [r0, #16]
 800ad46:	bf08      	it	eq
 800ad48:	6143      	streq	r3, [r0, #20]
 800ad4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad4e:	f8dc c000 	ldr.w	ip, [ip]
 800ad52:	fa0c fc08 	lsl.w	ip, ip, r8
 800ad56:	ea4c 0707 	orr.w	r7, ip, r7
 800ad5a:	f849 7b04 	str.w	r7, [r9], #4
 800ad5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ad62:	40cf      	lsrs	r7, r1
 800ad64:	e7da      	b.n	800ad1c <rshift+0x4c>
 800ad66:	f851 cb04 	ldr.w	ip, [r1], #4
 800ad6a:	f847 cf04 	str.w	ip, [r7, #4]!
 800ad6e:	e7c3      	b.n	800acf8 <rshift+0x28>
 800ad70:	4623      	mov	r3, r4
 800ad72:	e7e1      	b.n	800ad38 <rshift+0x68>

0800ad74 <__hexdig_fun>:
 800ad74:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ad78:	2b09      	cmp	r3, #9
 800ad7a:	d802      	bhi.n	800ad82 <__hexdig_fun+0xe>
 800ad7c:	3820      	subs	r0, #32
 800ad7e:	b2c0      	uxtb	r0, r0
 800ad80:	4770      	bx	lr
 800ad82:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ad86:	2b05      	cmp	r3, #5
 800ad88:	d801      	bhi.n	800ad8e <__hexdig_fun+0x1a>
 800ad8a:	3847      	subs	r0, #71	; 0x47
 800ad8c:	e7f7      	b.n	800ad7e <__hexdig_fun+0xa>
 800ad8e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ad92:	2b05      	cmp	r3, #5
 800ad94:	d801      	bhi.n	800ad9a <__hexdig_fun+0x26>
 800ad96:	3827      	subs	r0, #39	; 0x27
 800ad98:	e7f1      	b.n	800ad7e <__hexdig_fun+0xa>
 800ad9a:	2000      	movs	r0, #0
 800ad9c:	4770      	bx	lr
	...

0800ada0 <__gethex>:
 800ada0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada4:	ed2d 8b02 	vpush	{d8}
 800ada8:	b089      	sub	sp, #36	; 0x24
 800adaa:	ee08 0a10 	vmov	s16, r0
 800adae:	9304      	str	r3, [sp, #16]
 800adb0:	4bbc      	ldr	r3, [pc, #752]	; (800b0a4 <__gethex+0x304>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	9301      	str	r3, [sp, #4]
 800adb6:	4618      	mov	r0, r3
 800adb8:	468b      	mov	fp, r1
 800adba:	4690      	mov	r8, r2
 800adbc:	f7f5 fa10 	bl	80001e0 <strlen>
 800adc0:	9b01      	ldr	r3, [sp, #4]
 800adc2:	f8db 2000 	ldr.w	r2, [fp]
 800adc6:	4403      	add	r3, r0
 800adc8:	4682      	mov	sl, r0
 800adca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800adce:	9305      	str	r3, [sp, #20]
 800add0:	1c93      	adds	r3, r2, #2
 800add2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800add6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800adda:	32fe      	adds	r2, #254	; 0xfe
 800addc:	18d1      	adds	r1, r2, r3
 800adde:	461f      	mov	r7, r3
 800ade0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ade4:	9100      	str	r1, [sp, #0]
 800ade6:	2830      	cmp	r0, #48	; 0x30
 800ade8:	d0f8      	beq.n	800addc <__gethex+0x3c>
 800adea:	f7ff ffc3 	bl	800ad74 <__hexdig_fun>
 800adee:	4604      	mov	r4, r0
 800adf0:	2800      	cmp	r0, #0
 800adf2:	d13a      	bne.n	800ae6a <__gethex+0xca>
 800adf4:	9901      	ldr	r1, [sp, #4]
 800adf6:	4652      	mov	r2, sl
 800adf8:	4638      	mov	r0, r7
 800adfa:	f7fe fa08 	bl	800920e <strncmp>
 800adfe:	4605      	mov	r5, r0
 800ae00:	2800      	cmp	r0, #0
 800ae02:	d168      	bne.n	800aed6 <__gethex+0x136>
 800ae04:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ae08:	eb07 060a 	add.w	r6, r7, sl
 800ae0c:	f7ff ffb2 	bl	800ad74 <__hexdig_fun>
 800ae10:	2800      	cmp	r0, #0
 800ae12:	d062      	beq.n	800aeda <__gethex+0x13a>
 800ae14:	4633      	mov	r3, r6
 800ae16:	7818      	ldrb	r0, [r3, #0]
 800ae18:	2830      	cmp	r0, #48	; 0x30
 800ae1a:	461f      	mov	r7, r3
 800ae1c:	f103 0301 	add.w	r3, r3, #1
 800ae20:	d0f9      	beq.n	800ae16 <__gethex+0x76>
 800ae22:	f7ff ffa7 	bl	800ad74 <__hexdig_fun>
 800ae26:	2301      	movs	r3, #1
 800ae28:	fab0 f480 	clz	r4, r0
 800ae2c:	0964      	lsrs	r4, r4, #5
 800ae2e:	4635      	mov	r5, r6
 800ae30:	9300      	str	r3, [sp, #0]
 800ae32:	463a      	mov	r2, r7
 800ae34:	4616      	mov	r6, r2
 800ae36:	3201      	adds	r2, #1
 800ae38:	7830      	ldrb	r0, [r6, #0]
 800ae3a:	f7ff ff9b 	bl	800ad74 <__hexdig_fun>
 800ae3e:	2800      	cmp	r0, #0
 800ae40:	d1f8      	bne.n	800ae34 <__gethex+0x94>
 800ae42:	9901      	ldr	r1, [sp, #4]
 800ae44:	4652      	mov	r2, sl
 800ae46:	4630      	mov	r0, r6
 800ae48:	f7fe f9e1 	bl	800920e <strncmp>
 800ae4c:	b980      	cbnz	r0, 800ae70 <__gethex+0xd0>
 800ae4e:	b94d      	cbnz	r5, 800ae64 <__gethex+0xc4>
 800ae50:	eb06 050a 	add.w	r5, r6, sl
 800ae54:	462a      	mov	r2, r5
 800ae56:	4616      	mov	r6, r2
 800ae58:	3201      	adds	r2, #1
 800ae5a:	7830      	ldrb	r0, [r6, #0]
 800ae5c:	f7ff ff8a 	bl	800ad74 <__hexdig_fun>
 800ae60:	2800      	cmp	r0, #0
 800ae62:	d1f8      	bne.n	800ae56 <__gethex+0xb6>
 800ae64:	1bad      	subs	r5, r5, r6
 800ae66:	00ad      	lsls	r5, r5, #2
 800ae68:	e004      	b.n	800ae74 <__gethex+0xd4>
 800ae6a:	2400      	movs	r4, #0
 800ae6c:	4625      	mov	r5, r4
 800ae6e:	e7e0      	b.n	800ae32 <__gethex+0x92>
 800ae70:	2d00      	cmp	r5, #0
 800ae72:	d1f7      	bne.n	800ae64 <__gethex+0xc4>
 800ae74:	7833      	ldrb	r3, [r6, #0]
 800ae76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ae7a:	2b50      	cmp	r3, #80	; 0x50
 800ae7c:	d13b      	bne.n	800aef6 <__gethex+0x156>
 800ae7e:	7873      	ldrb	r3, [r6, #1]
 800ae80:	2b2b      	cmp	r3, #43	; 0x2b
 800ae82:	d02c      	beq.n	800aede <__gethex+0x13e>
 800ae84:	2b2d      	cmp	r3, #45	; 0x2d
 800ae86:	d02e      	beq.n	800aee6 <__gethex+0x146>
 800ae88:	1c71      	adds	r1, r6, #1
 800ae8a:	f04f 0900 	mov.w	r9, #0
 800ae8e:	7808      	ldrb	r0, [r1, #0]
 800ae90:	f7ff ff70 	bl	800ad74 <__hexdig_fun>
 800ae94:	1e43      	subs	r3, r0, #1
 800ae96:	b2db      	uxtb	r3, r3
 800ae98:	2b18      	cmp	r3, #24
 800ae9a:	d82c      	bhi.n	800aef6 <__gethex+0x156>
 800ae9c:	f1a0 0210 	sub.w	r2, r0, #16
 800aea0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aea4:	f7ff ff66 	bl	800ad74 <__hexdig_fun>
 800aea8:	1e43      	subs	r3, r0, #1
 800aeaa:	b2db      	uxtb	r3, r3
 800aeac:	2b18      	cmp	r3, #24
 800aeae:	d91d      	bls.n	800aeec <__gethex+0x14c>
 800aeb0:	f1b9 0f00 	cmp.w	r9, #0
 800aeb4:	d000      	beq.n	800aeb8 <__gethex+0x118>
 800aeb6:	4252      	negs	r2, r2
 800aeb8:	4415      	add	r5, r2
 800aeba:	f8cb 1000 	str.w	r1, [fp]
 800aebe:	b1e4      	cbz	r4, 800aefa <__gethex+0x15a>
 800aec0:	9b00      	ldr	r3, [sp, #0]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	bf14      	ite	ne
 800aec6:	2700      	movne	r7, #0
 800aec8:	2706      	moveq	r7, #6
 800aeca:	4638      	mov	r0, r7
 800aecc:	b009      	add	sp, #36	; 0x24
 800aece:	ecbd 8b02 	vpop	{d8}
 800aed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aed6:	463e      	mov	r6, r7
 800aed8:	4625      	mov	r5, r4
 800aeda:	2401      	movs	r4, #1
 800aedc:	e7ca      	b.n	800ae74 <__gethex+0xd4>
 800aede:	f04f 0900 	mov.w	r9, #0
 800aee2:	1cb1      	adds	r1, r6, #2
 800aee4:	e7d3      	b.n	800ae8e <__gethex+0xee>
 800aee6:	f04f 0901 	mov.w	r9, #1
 800aeea:	e7fa      	b.n	800aee2 <__gethex+0x142>
 800aeec:	230a      	movs	r3, #10
 800aeee:	fb03 0202 	mla	r2, r3, r2, r0
 800aef2:	3a10      	subs	r2, #16
 800aef4:	e7d4      	b.n	800aea0 <__gethex+0x100>
 800aef6:	4631      	mov	r1, r6
 800aef8:	e7df      	b.n	800aeba <__gethex+0x11a>
 800aefa:	1bf3      	subs	r3, r6, r7
 800aefc:	3b01      	subs	r3, #1
 800aefe:	4621      	mov	r1, r4
 800af00:	2b07      	cmp	r3, #7
 800af02:	dc0b      	bgt.n	800af1c <__gethex+0x17c>
 800af04:	ee18 0a10 	vmov	r0, s16
 800af08:	f000 fa82 	bl	800b410 <_Balloc>
 800af0c:	4604      	mov	r4, r0
 800af0e:	b940      	cbnz	r0, 800af22 <__gethex+0x182>
 800af10:	4b65      	ldr	r3, [pc, #404]	; (800b0a8 <__gethex+0x308>)
 800af12:	4602      	mov	r2, r0
 800af14:	21de      	movs	r1, #222	; 0xde
 800af16:	4865      	ldr	r0, [pc, #404]	; (800b0ac <__gethex+0x30c>)
 800af18:	f001 fd92 	bl	800ca40 <__assert_func>
 800af1c:	3101      	adds	r1, #1
 800af1e:	105b      	asrs	r3, r3, #1
 800af20:	e7ee      	b.n	800af00 <__gethex+0x160>
 800af22:	f100 0914 	add.w	r9, r0, #20
 800af26:	f04f 0b00 	mov.w	fp, #0
 800af2a:	f1ca 0301 	rsb	r3, sl, #1
 800af2e:	f8cd 9008 	str.w	r9, [sp, #8]
 800af32:	f8cd b000 	str.w	fp, [sp]
 800af36:	9306      	str	r3, [sp, #24]
 800af38:	42b7      	cmp	r7, r6
 800af3a:	d340      	bcc.n	800afbe <__gethex+0x21e>
 800af3c:	9802      	ldr	r0, [sp, #8]
 800af3e:	9b00      	ldr	r3, [sp, #0]
 800af40:	f840 3b04 	str.w	r3, [r0], #4
 800af44:	eba0 0009 	sub.w	r0, r0, r9
 800af48:	1080      	asrs	r0, r0, #2
 800af4a:	0146      	lsls	r6, r0, #5
 800af4c:	6120      	str	r0, [r4, #16]
 800af4e:	4618      	mov	r0, r3
 800af50:	f000 fb54 	bl	800b5fc <__hi0bits>
 800af54:	1a30      	subs	r0, r6, r0
 800af56:	f8d8 6000 	ldr.w	r6, [r8]
 800af5a:	42b0      	cmp	r0, r6
 800af5c:	dd63      	ble.n	800b026 <__gethex+0x286>
 800af5e:	1b87      	subs	r7, r0, r6
 800af60:	4639      	mov	r1, r7
 800af62:	4620      	mov	r0, r4
 800af64:	f000 feee 	bl	800bd44 <__any_on>
 800af68:	4682      	mov	sl, r0
 800af6a:	b1a8      	cbz	r0, 800af98 <__gethex+0x1f8>
 800af6c:	1e7b      	subs	r3, r7, #1
 800af6e:	1159      	asrs	r1, r3, #5
 800af70:	f003 021f 	and.w	r2, r3, #31
 800af74:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800af78:	f04f 0a01 	mov.w	sl, #1
 800af7c:	fa0a f202 	lsl.w	r2, sl, r2
 800af80:	420a      	tst	r2, r1
 800af82:	d009      	beq.n	800af98 <__gethex+0x1f8>
 800af84:	4553      	cmp	r3, sl
 800af86:	dd05      	ble.n	800af94 <__gethex+0x1f4>
 800af88:	1eb9      	subs	r1, r7, #2
 800af8a:	4620      	mov	r0, r4
 800af8c:	f000 feda 	bl	800bd44 <__any_on>
 800af90:	2800      	cmp	r0, #0
 800af92:	d145      	bne.n	800b020 <__gethex+0x280>
 800af94:	f04f 0a02 	mov.w	sl, #2
 800af98:	4639      	mov	r1, r7
 800af9a:	4620      	mov	r0, r4
 800af9c:	f7ff fe98 	bl	800acd0 <rshift>
 800afa0:	443d      	add	r5, r7
 800afa2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800afa6:	42ab      	cmp	r3, r5
 800afa8:	da4c      	bge.n	800b044 <__gethex+0x2a4>
 800afaa:	ee18 0a10 	vmov	r0, s16
 800afae:	4621      	mov	r1, r4
 800afb0:	f000 fa6e 	bl	800b490 <_Bfree>
 800afb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800afb6:	2300      	movs	r3, #0
 800afb8:	6013      	str	r3, [r2, #0]
 800afba:	27a3      	movs	r7, #163	; 0xa3
 800afbc:	e785      	b.n	800aeca <__gethex+0x12a>
 800afbe:	1e73      	subs	r3, r6, #1
 800afc0:	9a05      	ldr	r2, [sp, #20]
 800afc2:	9303      	str	r3, [sp, #12]
 800afc4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800afc8:	4293      	cmp	r3, r2
 800afca:	d019      	beq.n	800b000 <__gethex+0x260>
 800afcc:	f1bb 0f20 	cmp.w	fp, #32
 800afd0:	d107      	bne.n	800afe2 <__gethex+0x242>
 800afd2:	9b02      	ldr	r3, [sp, #8]
 800afd4:	9a00      	ldr	r2, [sp, #0]
 800afd6:	f843 2b04 	str.w	r2, [r3], #4
 800afda:	9302      	str	r3, [sp, #8]
 800afdc:	2300      	movs	r3, #0
 800afde:	9300      	str	r3, [sp, #0]
 800afe0:	469b      	mov	fp, r3
 800afe2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800afe6:	f7ff fec5 	bl	800ad74 <__hexdig_fun>
 800afea:	9b00      	ldr	r3, [sp, #0]
 800afec:	f000 000f 	and.w	r0, r0, #15
 800aff0:	fa00 f00b 	lsl.w	r0, r0, fp
 800aff4:	4303      	orrs	r3, r0
 800aff6:	9300      	str	r3, [sp, #0]
 800aff8:	f10b 0b04 	add.w	fp, fp, #4
 800affc:	9b03      	ldr	r3, [sp, #12]
 800affe:	e00d      	b.n	800b01c <__gethex+0x27c>
 800b000:	9b03      	ldr	r3, [sp, #12]
 800b002:	9a06      	ldr	r2, [sp, #24]
 800b004:	4413      	add	r3, r2
 800b006:	42bb      	cmp	r3, r7
 800b008:	d3e0      	bcc.n	800afcc <__gethex+0x22c>
 800b00a:	4618      	mov	r0, r3
 800b00c:	9901      	ldr	r1, [sp, #4]
 800b00e:	9307      	str	r3, [sp, #28]
 800b010:	4652      	mov	r2, sl
 800b012:	f7fe f8fc 	bl	800920e <strncmp>
 800b016:	9b07      	ldr	r3, [sp, #28]
 800b018:	2800      	cmp	r0, #0
 800b01a:	d1d7      	bne.n	800afcc <__gethex+0x22c>
 800b01c:	461e      	mov	r6, r3
 800b01e:	e78b      	b.n	800af38 <__gethex+0x198>
 800b020:	f04f 0a03 	mov.w	sl, #3
 800b024:	e7b8      	b.n	800af98 <__gethex+0x1f8>
 800b026:	da0a      	bge.n	800b03e <__gethex+0x29e>
 800b028:	1a37      	subs	r7, r6, r0
 800b02a:	4621      	mov	r1, r4
 800b02c:	ee18 0a10 	vmov	r0, s16
 800b030:	463a      	mov	r2, r7
 800b032:	f000 fc49 	bl	800b8c8 <__lshift>
 800b036:	1bed      	subs	r5, r5, r7
 800b038:	4604      	mov	r4, r0
 800b03a:	f100 0914 	add.w	r9, r0, #20
 800b03e:	f04f 0a00 	mov.w	sl, #0
 800b042:	e7ae      	b.n	800afa2 <__gethex+0x202>
 800b044:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b048:	42a8      	cmp	r0, r5
 800b04a:	dd72      	ble.n	800b132 <__gethex+0x392>
 800b04c:	1b45      	subs	r5, r0, r5
 800b04e:	42ae      	cmp	r6, r5
 800b050:	dc36      	bgt.n	800b0c0 <__gethex+0x320>
 800b052:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b056:	2b02      	cmp	r3, #2
 800b058:	d02a      	beq.n	800b0b0 <__gethex+0x310>
 800b05a:	2b03      	cmp	r3, #3
 800b05c:	d02c      	beq.n	800b0b8 <__gethex+0x318>
 800b05e:	2b01      	cmp	r3, #1
 800b060:	d115      	bne.n	800b08e <__gethex+0x2ee>
 800b062:	42ae      	cmp	r6, r5
 800b064:	d113      	bne.n	800b08e <__gethex+0x2ee>
 800b066:	2e01      	cmp	r6, #1
 800b068:	d10b      	bne.n	800b082 <__gethex+0x2e2>
 800b06a:	9a04      	ldr	r2, [sp, #16]
 800b06c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b070:	6013      	str	r3, [r2, #0]
 800b072:	2301      	movs	r3, #1
 800b074:	6123      	str	r3, [r4, #16]
 800b076:	f8c9 3000 	str.w	r3, [r9]
 800b07a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b07c:	2762      	movs	r7, #98	; 0x62
 800b07e:	601c      	str	r4, [r3, #0]
 800b080:	e723      	b.n	800aeca <__gethex+0x12a>
 800b082:	1e71      	subs	r1, r6, #1
 800b084:	4620      	mov	r0, r4
 800b086:	f000 fe5d 	bl	800bd44 <__any_on>
 800b08a:	2800      	cmp	r0, #0
 800b08c:	d1ed      	bne.n	800b06a <__gethex+0x2ca>
 800b08e:	ee18 0a10 	vmov	r0, s16
 800b092:	4621      	mov	r1, r4
 800b094:	f000 f9fc 	bl	800b490 <_Bfree>
 800b098:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b09a:	2300      	movs	r3, #0
 800b09c:	6013      	str	r3, [r2, #0]
 800b09e:	2750      	movs	r7, #80	; 0x50
 800b0a0:	e713      	b.n	800aeca <__gethex+0x12a>
 800b0a2:	bf00      	nop
 800b0a4:	0800e010 	.word	0x0800e010
 800b0a8:	0800df94 	.word	0x0800df94
 800b0ac:	0800dfa5 	.word	0x0800dfa5
 800b0b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d1eb      	bne.n	800b08e <__gethex+0x2ee>
 800b0b6:	e7d8      	b.n	800b06a <__gethex+0x2ca>
 800b0b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d1d5      	bne.n	800b06a <__gethex+0x2ca>
 800b0be:	e7e6      	b.n	800b08e <__gethex+0x2ee>
 800b0c0:	1e6f      	subs	r7, r5, #1
 800b0c2:	f1ba 0f00 	cmp.w	sl, #0
 800b0c6:	d131      	bne.n	800b12c <__gethex+0x38c>
 800b0c8:	b127      	cbz	r7, 800b0d4 <__gethex+0x334>
 800b0ca:	4639      	mov	r1, r7
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	f000 fe39 	bl	800bd44 <__any_on>
 800b0d2:	4682      	mov	sl, r0
 800b0d4:	117b      	asrs	r3, r7, #5
 800b0d6:	2101      	movs	r1, #1
 800b0d8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b0dc:	f007 071f 	and.w	r7, r7, #31
 800b0e0:	fa01 f707 	lsl.w	r7, r1, r7
 800b0e4:	421f      	tst	r7, r3
 800b0e6:	4629      	mov	r1, r5
 800b0e8:	4620      	mov	r0, r4
 800b0ea:	bf18      	it	ne
 800b0ec:	f04a 0a02 	orrne.w	sl, sl, #2
 800b0f0:	1b76      	subs	r6, r6, r5
 800b0f2:	f7ff fded 	bl	800acd0 <rshift>
 800b0f6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b0fa:	2702      	movs	r7, #2
 800b0fc:	f1ba 0f00 	cmp.w	sl, #0
 800b100:	d048      	beq.n	800b194 <__gethex+0x3f4>
 800b102:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b106:	2b02      	cmp	r3, #2
 800b108:	d015      	beq.n	800b136 <__gethex+0x396>
 800b10a:	2b03      	cmp	r3, #3
 800b10c:	d017      	beq.n	800b13e <__gethex+0x39e>
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d109      	bne.n	800b126 <__gethex+0x386>
 800b112:	f01a 0f02 	tst.w	sl, #2
 800b116:	d006      	beq.n	800b126 <__gethex+0x386>
 800b118:	f8d9 0000 	ldr.w	r0, [r9]
 800b11c:	ea4a 0a00 	orr.w	sl, sl, r0
 800b120:	f01a 0f01 	tst.w	sl, #1
 800b124:	d10e      	bne.n	800b144 <__gethex+0x3a4>
 800b126:	f047 0710 	orr.w	r7, r7, #16
 800b12a:	e033      	b.n	800b194 <__gethex+0x3f4>
 800b12c:	f04f 0a01 	mov.w	sl, #1
 800b130:	e7d0      	b.n	800b0d4 <__gethex+0x334>
 800b132:	2701      	movs	r7, #1
 800b134:	e7e2      	b.n	800b0fc <__gethex+0x35c>
 800b136:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b138:	f1c3 0301 	rsb	r3, r3, #1
 800b13c:	9315      	str	r3, [sp, #84]	; 0x54
 800b13e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b140:	2b00      	cmp	r3, #0
 800b142:	d0f0      	beq.n	800b126 <__gethex+0x386>
 800b144:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b148:	f104 0314 	add.w	r3, r4, #20
 800b14c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b150:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b154:	f04f 0c00 	mov.w	ip, #0
 800b158:	4618      	mov	r0, r3
 800b15a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b15e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b162:	d01c      	beq.n	800b19e <__gethex+0x3fe>
 800b164:	3201      	adds	r2, #1
 800b166:	6002      	str	r2, [r0, #0]
 800b168:	2f02      	cmp	r7, #2
 800b16a:	f104 0314 	add.w	r3, r4, #20
 800b16e:	d13f      	bne.n	800b1f0 <__gethex+0x450>
 800b170:	f8d8 2000 	ldr.w	r2, [r8]
 800b174:	3a01      	subs	r2, #1
 800b176:	42b2      	cmp	r2, r6
 800b178:	d10a      	bne.n	800b190 <__gethex+0x3f0>
 800b17a:	1171      	asrs	r1, r6, #5
 800b17c:	2201      	movs	r2, #1
 800b17e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b182:	f006 061f 	and.w	r6, r6, #31
 800b186:	fa02 f606 	lsl.w	r6, r2, r6
 800b18a:	421e      	tst	r6, r3
 800b18c:	bf18      	it	ne
 800b18e:	4617      	movne	r7, r2
 800b190:	f047 0720 	orr.w	r7, r7, #32
 800b194:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b196:	601c      	str	r4, [r3, #0]
 800b198:	9b04      	ldr	r3, [sp, #16]
 800b19a:	601d      	str	r5, [r3, #0]
 800b19c:	e695      	b.n	800aeca <__gethex+0x12a>
 800b19e:	4299      	cmp	r1, r3
 800b1a0:	f843 cc04 	str.w	ip, [r3, #-4]
 800b1a4:	d8d8      	bhi.n	800b158 <__gethex+0x3b8>
 800b1a6:	68a3      	ldr	r3, [r4, #8]
 800b1a8:	459b      	cmp	fp, r3
 800b1aa:	db19      	blt.n	800b1e0 <__gethex+0x440>
 800b1ac:	6861      	ldr	r1, [r4, #4]
 800b1ae:	ee18 0a10 	vmov	r0, s16
 800b1b2:	3101      	adds	r1, #1
 800b1b4:	f000 f92c 	bl	800b410 <_Balloc>
 800b1b8:	4681      	mov	r9, r0
 800b1ba:	b918      	cbnz	r0, 800b1c4 <__gethex+0x424>
 800b1bc:	4b1a      	ldr	r3, [pc, #104]	; (800b228 <__gethex+0x488>)
 800b1be:	4602      	mov	r2, r0
 800b1c0:	2184      	movs	r1, #132	; 0x84
 800b1c2:	e6a8      	b.n	800af16 <__gethex+0x176>
 800b1c4:	6922      	ldr	r2, [r4, #16]
 800b1c6:	3202      	adds	r2, #2
 800b1c8:	f104 010c 	add.w	r1, r4, #12
 800b1cc:	0092      	lsls	r2, r2, #2
 800b1ce:	300c      	adds	r0, #12
 800b1d0:	f7fd f8f6 	bl	80083c0 <memcpy>
 800b1d4:	4621      	mov	r1, r4
 800b1d6:	ee18 0a10 	vmov	r0, s16
 800b1da:	f000 f959 	bl	800b490 <_Bfree>
 800b1de:	464c      	mov	r4, r9
 800b1e0:	6923      	ldr	r3, [r4, #16]
 800b1e2:	1c5a      	adds	r2, r3, #1
 800b1e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b1e8:	6122      	str	r2, [r4, #16]
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	615a      	str	r2, [r3, #20]
 800b1ee:	e7bb      	b.n	800b168 <__gethex+0x3c8>
 800b1f0:	6922      	ldr	r2, [r4, #16]
 800b1f2:	455a      	cmp	r2, fp
 800b1f4:	dd0b      	ble.n	800b20e <__gethex+0x46e>
 800b1f6:	2101      	movs	r1, #1
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	f7ff fd69 	bl	800acd0 <rshift>
 800b1fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b202:	3501      	adds	r5, #1
 800b204:	42ab      	cmp	r3, r5
 800b206:	f6ff aed0 	blt.w	800afaa <__gethex+0x20a>
 800b20a:	2701      	movs	r7, #1
 800b20c:	e7c0      	b.n	800b190 <__gethex+0x3f0>
 800b20e:	f016 061f 	ands.w	r6, r6, #31
 800b212:	d0fa      	beq.n	800b20a <__gethex+0x46a>
 800b214:	449a      	add	sl, r3
 800b216:	f1c6 0620 	rsb	r6, r6, #32
 800b21a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b21e:	f000 f9ed 	bl	800b5fc <__hi0bits>
 800b222:	42b0      	cmp	r0, r6
 800b224:	dbe7      	blt.n	800b1f6 <__gethex+0x456>
 800b226:	e7f0      	b.n	800b20a <__gethex+0x46a>
 800b228:	0800df94 	.word	0x0800df94

0800b22c <L_shift>:
 800b22c:	f1c2 0208 	rsb	r2, r2, #8
 800b230:	0092      	lsls	r2, r2, #2
 800b232:	b570      	push	{r4, r5, r6, lr}
 800b234:	f1c2 0620 	rsb	r6, r2, #32
 800b238:	6843      	ldr	r3, [r0, #4]
 800b23a:	6804      	ldr	r4, [r0, #0]
 800b23c:	fa03 f506 	lsl.w	r5, r3, r6
 800b240:	432c      	orrs	r4, r5
 800b242:	40d3      	lsrs	r3, r2
 800b244:	6004      	str	r4, [r0, #0]
 800b246:	f840 3f04 	str.w	r3, [r0, #4]!
 800b24a:	4288      	cmp	r0, r1
 800b24c:	d3f4      	bcc.n	800b238 <L_shift+0xc>
 800b24e:	bd70      	pop	{r4, r5, r6, pc}

0800b250 <__match>:
 800b250:	b530      	push	{r4, r5, lr}
 800b252:	6803      	ldr	r3, [r0, #0]
 800b254:	3301      	adds	r3, #1
 800b256:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b25a:	b914      	cbnz	r4, 800b262 <__match+0x12>
 800b25c:	6003      	str	r3, [r0, #0]
 800b25e:	2001      	movs	r0, #1
 800b260:	bd30      	pop	{r4, r5, pc}
 800b262:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b266:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b26a:	2d19      	cmp	r5, #25
 800b26c:	bf98      	it	ls
 800b26e:	3220      	addls	r2, #32
 800b270:	42a2      	cmp	r2, r4
 800b272:	d0f0      	beq.n	800b256 <__match+0x6>
 800b274:	2000      	movs	r0, #0
 800b276:	e7f3      	b.n	800b260 <__match+0x10>

0800b278 <__hexnan>:
 800b278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b27c:	680b      	ldr	r3, [r1, #0]
 800b27e:	6801      	ldr	r1, [r0, #0]
 800b280:	115e      	asrs	r6, r3, #5
 800b282:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b286:	f013 031f 	ands.w	r3, r3, #31
 800b28a:	b087      	sub	sp, #28
 800b28c:	bf18      	it	ne
 800b28e:	3604      	addne	r6, #4
 800b290:	2500      	movs	r5, #0
 800b292:	1f37      	subs	r7, r6, #4
 800b294:	4682      	mov	sl, r0
 800b296:	4690      	mov	r8, r2
 800b298:	9301      	str	r3, [sp, #4]
 800b29a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b29e:	46b9      	mov	r9, r7
 800b2a0:	463c      	mov	r4, r7
 800b2a2:	9502      	str	r5, [sp, #8]
 800b2a4:	46ab      	mov	fp, r5
 800b2a6:	784a      	ldrb	r2, [r1, #1]
 800b2a8:	1c4b      	adds	r3, r1, #1
 800b2aa:	9303      	str	r3, [sp, #12]
 800b2ac:	b342      	cbz	r2, 800b300 <__hexnan+0x88>
 800b2ae:	4610      	mov	r0, r2
 800b2b0:	9105      	str	r1, [sp, #20]
 800b2b2:	9204      	str	r2, [sp, #16]
 800b2b4:	f7ff fd5e 	bl	800ad74 <__hexdig_fun>
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	d14f      	bne.n	800b35c <__hexnan+0xe4>
 800b2bc:	9a04      	ldr	r2, [sp, #16]
 800b2be:	9905      	ldr	r1, [sp, #20]
 800b2c0:	2a20      	cmp	r2, #32
 800b2c2:	d818      	bhi.n	800b2f6 <__hexnan+0x7e>
 800b2c4:	9b02      	ldr	r3, [sp, #8]
 800b2c6:	459b      	cmp	fp, r3
 800b2c8:	dd13      	ble.n	800b2f2 <__hexnan+0x7a>
 800b2ca:	454c      	cmp	r4, r9
 800b2cc:	d206      	bcs.n	800b2dc <__hexnan+0x64>
 800b2ce:	2d07      	cmp	r5, #7
 800b2d0:	dc04      	bgt.n	800b2dc <__hexnan+0x64>
 800b2d2:	462a      	mov	r2, r5
 800b2d4:	4649      	mov	r1, r9
 800b2d6:	4620      	mov	r0, r4
 800b2d8:	f7ff ffa8 	bl	800b22c <L_shift>
 800b2dc:	4544      	cmp	r4, r8
 800b2de:	d950      	bls.n	800b382 <__hexnan+0x10a>
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	f1a4 0904 	sub.w	r9, r4, #4
 800b2e6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b2ea:	f8cd b008 	str.w	fp, [sp, #8]
 800b2ee:	464c      	mov	r4, r9
 800b2f0:	461d      	mov	r5, r3
 800b2f2:	9903      	ldr	r1, [sp, #12]
 800b2f4:	e7d7      	b.n	800b2a6 <__hexnan+0x2e>
 800b2f6:	2a29      	cmp	r2, #41	; 0x29
 800b2f8:	d156      	bne.n	800b3a8 <__hexnan+0x130>
 800b2fa:	3102      	adds	r1, #2
 800b2fc:	f8ca 1000 	str.w	r1, [sl]
 800b300:	f1bb 0f00 	cmp.w	fp, #0
 800b304:	d050      	beq.n	800b3a8 <__hexnan+0x130>
 800b306:	454c      	cmp	r4, r9
 800b308:	d206      	bcs.n	800b318 <__hexnan+0xa0>
 800b30a:	2d07      	cmp	r5, #7
 800b30c:	dc04      	bgt.n	800b318 <__hexnan+0xa0>
 800b30e:	462a      	mov	r2, r5
 800b310:	4649      	mov	r1, r9
 800b312:	4620      	mov	r0, r4
 800b314:	f7ff ff8a 	bl	800b22c <L_shift>
 800b318:	4544      	cmp	r4, r8
 800b31a:	d934      	bls.n	800b386 <__hexnan+0x10e>
 800b31c:	f1a8 0204 	sub.w	r2, r8, #4
 800b320:	4623      	mov	r3, r4
 800b322:	f853 1b04 	ldr.w	r1, [r3], #4
 800b326:	f842 1f04 	str.w	r1, [r2, #4]!
 800b32a:	429f      	cmp	r7, r3
 800b32c:	d2f9      	bcs.n	800b322 <__hexnan+0xaa>
 800b32e:	1b3b      	subs	r3, r7, r4
 800b330:	f023 0303 	bic.w	r3, r3, #3
 800b334:	3304      	adds	r3, #4
 800b336:	3401      	adds	r4, #1
 800b338:	3e03      	subs	r6, #3
 800b33a:	42b4      	cmp	r4, r6
 800b33c:	bf88      	it	hi
 800b33e:	2304      	movhi	r3, #4
 800b340:	4443      	add	r3, r8
 800b342:	2200      	movs	r2, #0
 800b344:	f843 2b04 	str.w	r2, [r3], #4
 800b348:	429f      	cmp	r7, r3
 800b34a:	d2fb      	bcs.n	800b344 <__hexnan+0xcc>
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	b91b      	cbnz	r3, 800b358 <__hexnan+0xe0>
 800b350:	4547      	cmp	r7, r8
 800b352:	d127      	bne.n	800b3a4 <__hexnan+0x12c>
 800b354:	2301      	movs	r3, #1
 800b356:	603b      	str	r3, [r7, #0]
 800b358:	2005      	movs	r0, #5
 800b35a:	e026      	b.n	800b3aa <__hexnan+0x132>
 800b35c:	3501      	adds	r5, #1
 800b35e:	2d08      	cmp	r5, #8
 800b360:	f10b 0b01 	add.w	fp, fp, #1
 800b364:	dd06      	ble.n	800b374 <__hexnan+0xfc>
 800b366:	4544      	cmp	r4, r8
 800b368:	d9c3      	bls.n	800b2f2 <__hexnan+0x7a>
 800b36a:	2300      	movs	r3, #0
 800b36c:	f844 3c04 	str.w	r3, [r4, #-4]
 800b370:	2501      	movs	r5, #1
 800b372:	3c04      	subs	r4, #4
 800b374:	6822      	ldr	r2, [r4, #0]
 800b376:	f000 000f 	and.w	r0, r0, #15
 800b37a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b37e:	6022      	str	r2, [r4, #0]
 800b380:	e7b7      	b.n	800b2f2 <__hexnan+0x7a>
 800b382:	2508      	movs	r5, #8
 800b384:	e7b5      	b.n	800b2f2 <__hexnan+0x7a>
 800b386:	9b01      	ldr	r3, [sp, #4]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d0df      	beq.n	800b34c <__hexnan+0xd4>
 800b38c:	f04f 32ff 	mov.w	r2, #4294967295
 800b390:	f1c3 0320 	rsb	r3, r3, #32
 800b394:	fa22 f303 	lsr.w	r3, r2, r3
 800b398:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b39c:	401a      	ands	r2, r3
 800b39e:	f846 2c04 	str.w	r2, [r6, #-4]
 800b3a2:	e7d3      	b.n	800b34c <__hexnan+0xd4>
 800b3a4:	3f04      	subs	r7, #4
 800b3a6:	e7d1      	b.n	800b34c <__hexnan+0xd4>
 800b3a8:	2004      	movs	r0, #4
 800b3aa:	b007      	add	sp, #28
 800b3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b3b0 <_localeconv_r>:
 800b3b0:	4800      	ldr	r0, [pc, #0]	; (800b3b4 <_localeconv_r+0x4>)
 800b3b2:	4770      	bx	lr
 800b3b4:	20000170 	.word	0x20000170

0800b3b8 <_lseek_r>:
 800b3b8:	b538      	push	{r3, r4, r5, lr}
 800b3ba:	4d07      	ldr	r5, [pc, #28]	; (800b3d8 <_lseek_r+0x20>)
 800b3bc:	4604      	mov	r4, r0
 800b3be:	4608      	mov	r0, r1
 800b3c0:	4611      	mov	r1, r2
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	602a      	str	r2, [r5, #0]
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	f7f6 fee6 	bl	8002198 <_lseek>
 800b3cc:	1c43      	adds	r3, r0, #1
 800b3ce:	d102      	bne.n	800b3d6 <_lseek_r+0x1e>
 800b3d0:	682b      	ldr	r3, [r5, #0]
 800b3d2:	b103      	cbz	r3, 800b3d6 <_lseek_r+0x1e>
 800b3d4:	6023      	str	r3, [r4, #0]
 800b3d6:	bd38      	pop	{r3, r4, r5, pc}
 800b3d8:	20005314 	.word	0x20005314

0800b3dc <malloc>:
 800b3dc:	4b02      	ldr	r3, [pc, #8]	; (800b3e8 <malloc+0xc>)
 800b3de:	4601      	mov	r1, r0
 800b3e0:	6818      	ldr	r0, [r3, #0]
 800b3e2:	f000 bd2f 	b.w	800be44 <_malloc_r>
 800b3e6:	bf00      	nop
 800b3e8:	20000018 	.word	0x20000018

0800b3ec <__ascii_mbtowc>:
 800b3ec:	b082      	sub	sp, #8
 800b3ee:	b901      	cbnz	r1, 800b3f2 <__ascii_mbtowc+0x6>
 800b3f0:	a901      	add	r1, sp, #4
 800b3f2:	b142      	cbz	r2, 800b406 <__ascii_mbtowc+0x1a>
 800b3f4:	b14b      	cbz	r3, 800b40a <__ascii_mbtowc+0x1e>
 800b3f6:	7813      	ldrb	r3, [r2, #0]
 800b3f8:	600b      	str	r3, [r1, #0]
 800b3fa:	7812      	ldrb	r2, [r2, #0]
 800b3fc:	1e10      	subs	r0, r2, #0
 800b3fe:	bf18      	it	ne
 800b400:	2001      	movne	r0, #1
 800b402:	b002      	add	sp, #8
 800b404:	4770      	bx	lr
 800b406:	4610      	mov	r0, r2
 800b408:	e7fb      	b.n	800b402 <__ascii_mbtowc+0x16>
 800b40a:	f06f 0001 	mvn.w	r0, #1
 800b40e:	e7f8      	b.n	800b402 <__ascii_mbtowc+0x16>

0800b410 <_Balloc>:
 800b410:	b570      	push	{r4, r5, r6, lr}
 800b412:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b414:	4604      	mov	r4, r0
 800b416:	460d      	mov	r5, r1
 800b418:	b976      	cbnz	r6, 800b438 <_Balloc+0x28>
 800b41a:	2010      	movs	r0, #16
 800b41c:	f7ff ffde 	bl	800b3dc <malloc>
 800b420:	4602      	mov	r2, r0
 800b422:	6260      	str	r0, [r4, #36]	; 0x24
 800b424:	b920      	cbnz	r0, 800b430 <_Balloc+0x20>
 800b426:	4b18      	ldr	r3, [pc, #96]	; (800b488 <_Balloc+0x78>)
 800b428:	4818      	ldr	r0, [pc, #96]	; (800b48c <_Balloc+0x7c>)
 800b42a:	2166      	movs	r1, #102	; 0x66
 800b42c:	f001 fb08 	bl	800ca40 <__assert_func>
 800b430:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b434:	6006      	str	r6, [r0, #0]
 800b436:	60c6      	str	r6, [r0, #12]
 800b438:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b43a:	68f3      	ldr	r3, [r6, #12]
 800b43c:	b183      	cbz	r3, 800b460 <_Balloc+0x50>
 800b43e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b440:	68db      	ldr	r3, [r3, #12]
 800b442:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b446:	b9b8      	cbnz	r0, 800b478 <_Balloc+0x68>
 800b448:	2101      	movs	r1, #1
 800b44a:	fa01 f605 	lsl.w	r6, r1, r5
 800b44e:	1d72      	adds	r2, r6, #5
 800b450:	0092      	lsls	r2, r2, #2
 800b452:	4620      	mov	r0, r4
 800b454:	f000 fc97 	bl	800bd86 <_calloc_r>
 800b458:	b160      	cbz	r0, 800b474 <_Balloc+0x64>
 800b45a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b45e:	e00e      	b.n	800b47e <_Balloc+0x6e>
 800b460:	2221      	movs	r2, #33	; 0x21
 800b462:	2104      	movs	r1, #4
 800b464:	4620      	mov	r0, r4
 800b466:	f000 fc8e 	bl	800bd86 <_calloc_r>
 800b46a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b46c:	60f0      	str	r0, [r6, #12]
 800b46e:	68db      	ldr	r3, [r3, #12]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d1e4      	bne.n	800b43e <_Balloc+0x2e>
 800b474:	2000      	movs	r0, #0
 800b476:	bd70      	pop	{r4, r5, r6, pc}
 800b478:	6802      	ldr	r2, [r0, #0]
 800b47a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b47e:	2300      	movs	r3, #0
 800b480:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b484:	e7f7      	b.n	800b476 <_Balloc+0x66>
 800b486:	bf00      	nop
 800b488:	0800df1e 	.word	0x0800df1e
 800b48c:	0800e024 	.word	0x0800e024

0800b490 <_Bfree>:
 800b490:	b570      	push	{r4, r5, r6, lr}
 800b492:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b494:	4605      	mov	r5, r0
 800b496:	460c      	mov	r4, r1
 800b498:	b976      	cbnz	r6, 800b4b8 <_Bfree+0x28>
 800b49a:	2010      	movs	r0, #16
 800b49c:	f7ff ff9e 	bl	800b3dc <malloc>
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	6268      	str	r0, [r5, #36]	; 0x24
 800b4a4:	b920      	cbnz	r0, 800b4b0 <_Bfree+0x20>
 800b4a6:	4b09      	ldr	r3, [pc, #36]	; (800b4cc <_Bfree+0x3c>)
 800b4a8:	4809      	ldr	r0, [pc, #36]	; (800b4d0 <_Bfree+0x40>)
 800b4aa:	218a      	movs	r1, #138	; 0x8a
 800b4ac:	f001 fac8 	bl	800ca40 <__assert_func>
 800b4b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b4b4:	6006      	str	r6, [r0, #0]
 800b4b6:	60c6      	str	r6, [r0, #12]
 800b4b8:	b13c      	cbz	r4, 800b4ca <_Bfree+0x3a>
 800b4ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b4bc:	6862      	ldr	r2, [r4, #4]
 800b4be:	68db      	ldr	r3, [r3, #12]
 800b4c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b4c4:	6021      	str	r1, [r4, #0]
 800b4c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b4ca:	bd70      	pop	{r4, r5, r6, pc}
 800b4cc:	0800df1e 	.word	0x0800df1e
 800b4d0:	0800e024 	.word	0x0800e024

0800b4d4 <__multadd>:
 800b4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4d8:	690e      	ldr	r6, [r1, #16]
 800b4da:	4607      	mov	r7, r0
 800b4dc:	4698      	mov	r8, r3
 800b4de:	460c      	mov	r4, r1
 800b4e0:	f101 0014 	add.w	r0, r1, #20
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	6805      	ldr	r5, [r0, #0]
 800b4e8:	b2a9      	uxth	r1, r5
 800b4ea:	fb02 8101 	mla	r1, r2, r1, r8
 800b4ee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b4f2:	0c2d      	lsrs	r5, r5, #16
 800b4f4:	fb02 c505 	mla	r5, r2, r5, ip
 800b4f8:	b289      	uxth	r1, r1
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b500:	429e      	cmp	r6, r3
 800b502:	f840 1b04 	str.w	r1, [r0], #4
 800b506:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b50a:	dcec      	bgt.n	800b4e6 <__multadd+0x12>
 800b50c:	f1b8 0f00 	cmp.w	r8, #0
 800b510:	d022      	beq.n	800b558 <__multadd+0x84>
 800b512:	68a3      	ldr	r3, [r4, #8]
 800b514:	42b3      	cmp	r3, r6
 800b516:	dc19      	bgt.n	800b54c <__multadd+0x78>
 800b518:	6861      	ldr	r1, [r4, #4]
 800b51a:	4638      	mov	r0, r7
 800b51c:	3101      	adds	r1, #1
 800b51e:	f7ff ff77 	bl	800b410 <_Balloc>
 800b522:	4605      	mov	r5, r0
 800b524:	b928      	cbnz	r0, 800b532 <__multadd+0x5e>
 800b526:	4602      	mov	r2, r0
 800b528:	4b0d      	ldr	r3, [pc, #52]	; (800b560 <__multadd+0x8c>)
 800b52a:	480e      	ldr	r0, [pc, #56]	; (800b564 <__multadd+0x90>)
 800b52c:	21b5      	movs	r1, #181	; 0xb5
 800b52e:	f001 fa87 	bl	800ca40 <__assert_func>
 800b532:	6922      	ldr	r2, [r4, #16]
 800b534:	3202      	adds	r2, #2
 800b536:	f104 010c 	add.w	r1, r4, #12
 800b53a:	0092      	lsls	r2, r2, #2
 800b53c:	300c      	adds	r0, #12
 800b53e:	f7fc ff3f 	bl	80083c0 <memcpy>
 800b542:	4621      	mov	r1, r4
 800b544:	4638      	mov	r0, r7
 800b546:	f7ff ffa3 	bl	800b490 <_Bfree>
 800b54a:	462c      	mov	r4, r5
 800b54c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b550:	3601      	adds	r6, #1
 800b552:	f8c3 8014 	str.w	r8, [r3, #20]
 800b556:	6126      	str	r6, [r4, #16]
 800b558:	4620      	mov	r0, r4
 800b55a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b55e:	bf00      	nop
 800b560:	0800df94 	.word	0x0800df94
 800b564:	0800e024 	.word	0x0800e024

0800b568 <__s2b>:
 800b568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b56c:	460c      	mov	r4, r1
 800b56e:	4615      	mov	r5, r2
 800b570:	461f      	mov	r7, r3
 800b572:	2209      	movs	r2, #9
 800b574:	3308      	adds	r3, #8
 800b576:	4606      	mov	r6, r0
 800b578:	fb93 f3f2 	sdiv	r3, r3, r2
 800b57c:	2100      	movs	r1, #0
 800b57e:	2201      	movs	r2, #1
 800b580:	429a      	cmp	r2, r3
 800b582:	db09      	blt.n	800b598 <__s2b+0x30>
 800b584:	4630      	mov	r0, r6
 800b586:	f7ff ff43 	bl	800b410 <_Balloc>
 800b58a:	b940      	cbnz	r0, 800b59e <__s2b+0x36>
 800b58c:	4602      	mov	r2, r0
 800b58e:	4b19      	ldr	r3, [pc, #100]	; (800b5f4 <__s2b+0x8c>)
 800b590:	4819      	ldr	r0, [pc, #100]	; (800b5f8 <__s2b+0x90>)
 800b592:	21ce      	movs	r1, #206	; 0xce
 800b594:	f001 fa54 	bl	800ca40 <__assert_func>
 800b598:	0052      	lsls	r2, r2, #1
 800b59a:	3101      	adds	r1, #1
 800b59c:	e7f0      	b.n	800b580 <__s2b+0x18>
 800b59e:	9b08      	ldr	r3, [sp, #32]
 800b5a0:	6143      	str	r3, [r0, #20]
 800b5a2:	2d09      	cmp	r5, #9
 800b5a4:	f04f 0301 	mov.w	r3, #1
 800b5a8:	6103      	str	r3, [r0, #16]
 800b5aa:	dd16      	ble.n	800b5da <__s2b+0x72>
 800b5ac:	f104 0909 	add.w	r9, r4, #9
 800b5b0:	46c8      	mov	r8, r9
 800b5b2:	442c      	add	r4, r5
 800b5b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b5b8:	4601      	mov	r1, r0
 800b5ba:	3b30      	subs	r3, #48	; 0x30
 800b5bc:	220a      	movs	r2, #10
 800b5be:	4630      	mov	r0, r6
 800b5c0:	f7ff ff88 	bl	800b4d4 <__multadd>
 800b5c4:	45a0      	cmp	r8, r4
 800b5c6:	d1f5      	bne.n	800b5b4 <__s2b+0x4c>
 800b5c8:	f1a5 0408 	sub.w	r4, r5, #8
 800b5cc:	444c      	add	r4, r9
 800b5ce:	1b2d      	subs	r5, r5, r4
 800b5d0:	1963      	adds	r3, r4, r5
 800b5d2:	42bb      	cmp	r3, r7
 800b5d4:	db04      	blt.n	800b5e0 <__s2b+0x78>
 800b5d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5da:	340a      	adds	r4, #10
 800b5dc:	2509      	movs	r5, #9
 800b5de:	e7f6      	b.n	800b5ce <__s2b+0x66>
 800b5e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b5e4:	4601      	mov	r1, r0
 800b5e6:	3b30      	subs	r3, #48	; 0x30
 800b5e8:	220a      	movs	r2, #10
 800b5ea:	4630      	mov	r0, r6
 800b5ec:	f7ff ff72 	bl	800b4d4 <__multadd>
 800b5f0:	e7ee      	b.n	800b5d0 <__s2b+0x68>
 800b5f2:	bf00      	nop
 800b5f4:	0800df94 	.word	0x0800df94
 800b5f8:	0800e024 	.word	0x0800e024

0800b5fc <__hi0bits>:
 800b5fc:	0c03      	lsrs	r3, r0, #16
 800b5fe:	041b      	lsls	r3, r3, #16
 800b600:	b9d3      	cbnz	r3, 800b638 <__hi0bits+0x3c>
 800b602:	0400      	lsls	r0, r0, #16
 800b604:	2310      	movs	r3, #16
 800b606:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b60a:	bf04      	itt	eq
 800b60c:	0200      	lsleq	r0, r0, #8
 800b60e:	3308      	addeq	r3, #8
 800b610:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b614:	bf04      	itt	eq
 800b616:	0100      	lsleq	r0, r0, #4
 800b618:	3304      	addeq	r3, #4
 800b61a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b61e:	bf04      	itt	eq
 800b620:	0080      	lsleq	r0, r0, #2
 800b622:	3302      	addeq	r3, #2
 800b624:	2800      	cmp	r0, #0
 800b626:	db05      	blt.n	800b634 <__hi0bits+0x38>
 800b628:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b62c:	f103 0301 	add.w	r3, r3, #1
 800b630:	bf08      	it	eq
 800b632:	2320      	moveq	r3, #32
 800b634:	4618      	mov	r0, r3
 800b636:	4770      	bx	lr
 800b638:	2300      	movs	r3, #0
 800b63a:	e7e4      	b.n	800b606 <__hi0bits+0xa>

0800b63c <__lo0bits>:
 800b63c:	6803      	ldr	r3, [r0, #0]
 800b63e:	f013 0207 	ands.w	r2, r3, #7
 800b642:	4601      	mov	r1, r0
 800b644:	d00b      	beq.n	800b65e <__lo0bits+0x22>
 800b646:	07da      	lsls	r2, r3, #31
 800b648:	d424      	bmi.n	800b694 <__lo0bits+0x58>
 800b64a:	0798      	lsls	r0, r3, #30
 800b64c:	bf49      	itett	mi
 800b64e:	085b      	lsrmi	r3, r3, #1
 800b650:	089b      	lsrpl	r3, r3, #2
 800b652:	2001      	movmi	r0, #1
 800b654:	600b      	strmi	r3, [r1, #0]
 800b656:	bf5c      	itt	pl
 800b658:	600b      	strpl	r3, [r1, #0]
 800b65a:	2002      	movpl	r0, #2
 800b65c:	4770      	bx	lr
 800b65e:	b298      	uxth	r0, r3
 800b660:	b9b0      	cbnz	r0, 800b690 <__lo0bits+0x54>
 800b662:	0c1b      	lsrs	r3, r3, #16
 800b664:	2010      	movs	r0, #16
 800b666:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b66a:	bf04      	itt	eq
 800b66c:	0a1b      	lsreq	r3, r3, #8
 800b66e:	3008      	addeq	r0, #8
 800b670:	071a      	lsls	r2, r3, #28
 800b672:	bf04      	itt	eq
 800b674:	091b      	lsreq	r3, r3, #4
 800b676:	3004      	addeq	r0, #4
 800b678:	079a      	lsls	r2, r3, #30
 800b67a:	bf04      	itt	eq
 800b67c:	089b      	lsreq	r3, r3, #2
 800b67e:	3002      	addeq	r0, #2
 800b680:	07da      	lsls	r2, r3, #31
 800b682:	d403      	bmi.n	800b68c <__lo0bits+0x50>
 800b684:	085b      	lsrs	r3, r3, #1
 800b686:	f100 0001 	add.w	r0, r0, #1
 800b68a:	d005      	beq.n	800b698 <__lo0bits+0x5c>
 800b68c:	600b      	str	r3, [r1, #0]
 800b68e:	4770      	bx	lr
 800b690:	4610      	mov	r0, r2
 800b692:	e7e8      	b.n	800b666 <__lo0bits+0x2a>
 800b694:	2000      	movs	r0, #0
 800b696:	4770      	bx	lr
 800b698:	2020      	movs	r0, #32
 800b69a:	4770      	bx	lr

0800b69c <__i2b>:
 800b69c:	b510      	push	{r4, lr}
 800b69e:	460c      	mov	r4, r1
 800b6a0:	2101      	movs	r1, #1
 800b6a2:	f7ff feb5 	bl	800b410 <_Balloc>
 800b6a6:	4602      	mov	r2, r0
 800b6a8:	b928      	cbnz	r0, 800b6b6 <__i2b+0x1a>
 800b6aa:	4b05      	ldr	r3, [pc, #20]	; (800b6c0 <__i2b+0x24>)
 800b6ac:	4805      	ldr	r0, [pc, #20]	; (800b6c4 <__i2b+0x28>)
 800b6ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b6b2:	f001 f9c5 	bl	800ca40 <__assert_func>
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	6144      	str	r4, [r0, #20]
 800b6ba:	6103      	str	r3, [r0, #16]
 800b6bc:	bd10      	pop	{r4, pc}
 800b6be:	bf00      	nop
 800b6c0:	0800df94 	.word	0x0800df94
 800b6c4:	0800e024 	.word	0x0800e024

0800b6c8 <__multiply>:
 800b6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6cc:	4614      	mov	r4, r2
 800b6ce:	690a      	ldr	r2, [r1, #16]
 800b6d0:	6923      	ldr	r3, [r4, #16]
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	bfb8      	it	lt
 800b6d6:	460b      	movlt	r3, r1
 800b6d8:	460d      	mov	r5, r1
 800b6da:	bfbc      	itt	lt
 800b6dc:	4625      	movlt	r5, r4
 800b6de:	461c      	movlt	r4, r3
 800b6e0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b6e4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b6e8:	68ab      	ldr	r3, [r5, #8]
 800b6ea:	6869      	ldr	r1, [r5, #4]
 800b6ec:	eb0a 0709 	add.w	r7, sl, r9
 800b6f0:	42bb      	cmp	r3, r7
 800b6f2:	b085      	sub	sp, #20
 800b6f4:	bfb8      	it	lt
 800b6f6:	3101      	addlt	r1, #1
 800b6f8:	f7ff fe8a 	bl	800b410 <_Balloc>
 800b6fc:	b930      	cbnz	r0, 800b70c <__multiply+0x44>
 800b6fe:	4602      	mov	r2, r0
 800b700:	4b42      	ldr	r3, [pc, #264]	; (800b80c <__multiply+0x144>)
 800b702:	4843      	ldr	r0, [pc, #268]	; (800b810 <__multiply+0x148>)
 800b704:	f240 115d 	movw	r1, #349	; 0x15d
 800b708:	f001 f99a 	bl	800ca40 <__assert_func>
 800b70c:	f100 0614 	add.w	r6, r0, #20
 800b710:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b714:	4633      	mov	r3, r6
 800b716:	2200      	movs	r2, #0
 800b718:	4543      	cmp	r3, r8
 800b71a:	d31e      	bcc.n	800b75a <__multiply+0x92>
 800b71c:	f105 0c14 	add.w	ip, r5, #20
 800b720:	f104 0314 	add.w	r3, r4, #20
 800b724:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b728:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b72c:	9202      	str	r2, [sp, #8]
 800b72e:	ebac 0205 	sub.w	r2, ip, r5
 800b732:	3a15      	subs	r2, #21
 800b734:	f022 0203 	bic.w	r2, r2, #3
 800b738:	3204      	adds	r2, #4
 800b73a:	f105 0115 	add.w	r1, r5, #21
 800b73e:	458c      	cmp	ip, r1
 800b740:	bf38      	it	cc
 800b742:	2204      	movcc	r2, #4
 800b744:	9201      	str	r2, [sp, #4]
 800b746:	9a02      	ldr	r2, [sp, #8]
 800b748:	9303      	str	r3, [sp, #12]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d808      	bhi.n	800b760 <__multiply+0x98>
 800b74e:	2f00      	cmp	r7, #0
 800b750:	dc55      	bgt.n	800b7fe <__multiply+0x136>
 800b752:	6107      	str	r7, [r0, #16]
 800b754:	b005      	add	sp, #20
 800b756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b75a:	f843 2b04 	str.w	r2, [r3], #4
 800b75e:	e7db      	b.n	800b718 <__multiply+0x50>
 800b760:	f8b3 a000 	ldrh.w	sl, [r3]
 800b764:	f1ba 0f00 	cmp.w	sl, #0
 800b768:	d020      	beq.n	800b7ac <__multiply+0xe4>
 800b76a:	f105 0e14 	add.w	lr, r5, #20
 800b76e:	46b1      	mov	r9, r6
 800b770:	2200      	movs	r2, #0
 800b772:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b776:	f8d9 b000 	ldr.w	fp, [r9]
 800b77a:	b2a1      	uxth	r1, r4
 800b77c:	fa1f fb8b 	uxth.w	fp, fp
 800b780:	fb0a b101 	mla	r1, sl, r1, fp
 800b784:	4411      	add	r1, r2
 800b786:	f8d9 2000 	ldr.w	r2, [r9]
 800b78a:	0c24      	lsrs	r4, r4, #16
 800b78c:	0c12      	lsrs	r2, r2, #16
 800b78e:	fb0a 2404 	mla	r4, sl, r4, r2
 800b792:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b796:	b289      	uxth	r1, r1
 800b798:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b79c:	45f4      	cmp	ip, lr
 800b79e:	f849 1b04 	str.w	r1, [r9], #4
 800b7a2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b7a6:	d8e4      	bhi.n	800b772 <__multiply+0xaa>
 800b7a8:	9901      	ldr	r1, [sp, #4]
 800b7aa:	5072      	str	r2, [r6, r1]
 800b7ac:	9a03      	ldr	r2, [sp, #12]
 800b7ae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b7b2:	3304      	adds	r3, #4
 800b7b4:	f1b9 0f00 	cmp.w	r9, #0
 800b7b8:	d01f      	beq.n	800b7fa <__multiply+0x132>
 800b7ba:	6834      	ldr	r4, [r6, #0]
 800b7bc:	f105 0114 	add.w	r1, r5, #20
 800b7c0:	46b6      	mov	lr, r6
 800b7c2:	f04f 0a00 	mov.w	sl, #0
 800b7c6:	880a      	ldrh	r2, [r1, #0]
 800b7c8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b7cc:	fb09 b202 	mla	r2, r9, r2, fp
 800b7d0:	4492      	add	sl, r2
 800b7d2:	b2a4      	uxth	r4, r4
 800b7d4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b7d8:	f84e 4b04 	str.w	r4, [lr], #4
 800b7dc:	f851 4b04 	ldr.w	r4, [r1], #4
 800b7e0:	f8be 2000 	ldrh.w	r2, [lr]
 800b7e4:	0c24      	lsrs	r4, r4, #16
 800b7e6:	fb09 2404 	mla	r4, r9, r4, r2
 800b7ea:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b7ee:	458c      	cmp	ip, r1
 800b7f0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b7f4:	d8e7      	bhi.n	800b7c6 <__multiply+0xfe>
 800b7f6:	9a01      	ldr	r2, [sp, #4]
 800b7f8:	50b4      	str	r4, [r6, r2]
 800b7fa:	3604      	adds	r6, #4
 800b7fc:	e7a3      	b.n	800b746 <__multiply+0x7e>
 800b7fe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b802:	2b00      	cmp	r3, #0
 800b804:	d1a5      	bne.n	800b752 <__multiply+0x8a>
 800b806:	3f01      	subs	r7, #1
 800b808:	e7a1      	b.n	800b74e <__multiply+0x86>
 800b80a:	bf00      	nop
 800b80c:	0800df94 	.word	0x0800df94
 800b810:	0800e024 	.word	0x0800e024

0800b814 <__pow5mult>:
 800b814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b818:	4615      	mov	r5, r2
 800b81a:	f012 0203 	ands.w	r2, r2, #3
 800b81e:	4606      	mov	r6, r0
 800b820:	460f      	mov	r7, r1
 800b822:	d007      	beq.n	800b834 <__pow5mult+0x20>
 800b824:	4c25      	ldr	r4, [pc, #148]	; (800b8bc <__pow5mult+0xa8>)
 800b826:	3a01      	subs	r2, #1
 800b828:	2300      	movs	r3, #0
 800b82a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b82e:	f7ff fe51 	bl	800b4d4 <__multadd>
 800b832:	4607      	mov	r7, r0
 800b834:	10ad      	asrs	r5, r5, #2
 800b836:	d03d      	beq.n	800b8b4 <__pow5mult+0xa0>
 800b838:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b83a:	b97c      	cbnz	r4, 800b85c <__pow5mult+0x48>
 800b83c:	2010      	movs	r0, #16
 800b83e:	f7ff fdcd 	bl	800b3dc <malloc>
 800b842:	4602      	mov	r2, r0
 800b844:	6270      	str	r0, [r6, #36]	; 0x24
 800b846:	b928      	cbnz	r0, 800b854 <__pow5mult+0x40>
 800b848:	4b1d      	ldr	r3, [pc, #116]	; (800b8c0 <__pow5mult+0xac>)
 800b84a:	481e      	ldr	r0, [pc, #120]	; (800b8c4 <__pow5mult+0xb0>)
 800b84c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b850:	f001 f8f6 	bl	800ca40 <__assert_func>
 800b854:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b858:	6004      	str	r4, [r0, #0]
 800b85a:	60c4      	str	r4, [r0, #12]
 800b85c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b860:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b864:	b94c      	cbnz	r4, 800b87a <__pow5mult+0x66>
 800b866:	f240 2171 	movw	r1, #625	; 0x271
 800b86a:	4630      	mov	r0, r6
 800b86c:	f7ff ff16 	bl	800b69c <__i2b>
 800b870:	2300      	movs	r3, #0
 800b872:	f8c8 0008 	str.w	r0, [r8, #8]
 800b876:	4604      	mov	r4, r0
 800b878:	6003      	str	r3, [r0, #0]
 800b87a:	f04f 0900 	mov.w	r9, #0
 800b87e:	07eb      	lsls	r3, r5, #31
 800b880:	d50a      	bpl.n	800b898 <__pow5mult+0x84>
 800b882:	4639      	mov	r1, r7
 800b884:	4622      	mov	r2, r4
 800b886:	4630      	mov	r0, r6
 800b888:	f7ff ff1e 	bl	800b6c8 <__multiply>
 800b88c:	4639      	mov	r1, r7
 800b88e:	4680      	mov	r8, r0
 800b890:	4630      	mov	r0, r6
 800b892:	f7ff fdfd 	bl	800b490 <_Bfree>
 800b896:	4647      	mov	r7, r8
 800b898:	106d      	asrs	r5, r5, #1
 800b89a:	d00b      	beq.n	800b8b4 <__pow5mult+0xa0>
 800b89c:	6820      	ldr	r0, [r4, #0]
 800b89e:	b938      	cbnz	r0, 800b8b0 <__pow5mult+0x9c>
 800b8a0:	4622      	mov	r2, r4
 800b8a2:	4621      	mov	r1, r4
 800b8a4:	4630      	mov	r0, r6
 800b8a6:	f7ff ff0f 	bl	800b6c8 <__multiply>
 800b8aa:	6020      	str	r0, [r4, #0]
 800b8ac:	f8c0 9000 	str.w	r9, [r0]
 800b8b0:	4604      	mov	r4, r0
 800b8b2:	e7e4      	b.n	800b87e <__pow5mult+0x6a>
 800b8b4:	4638      	mov	r0, r7
 800b8b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8ba:	bf00      	nop
 800b8bc:	0800e178 	.word	0x0800e178
 800b8c0:	0800df1e 	.word	0x0800df1e
 800b8c4:	0800e024 	.word	0x0800e024

0800b8c8 <__lshift>:
 800b8c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8cc:	460c      	mov	r4, r1
 800b8ce:	6849      	ldr	r1, [r1, #4]
 800b8d0:	6923      	ldr	r3, [r4, #16]
 800b8d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b8d6:	68a3      	ldr	r3, [r4, #8]
 800b8d8:	4607      	mov	r7, r0
 800b8da:	4691      	mov	r9, r2
 800b8dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b8e0:	f108 0601 	add.w	r6, r8, #1
 800b8e4:	42b3      	cmp	r3, r6
 800b8e6:	db0b      	blt.n	800b900 <__lshift+0x38>
 800b8e8:	4638      	mov	r0, r7
 800b8ea:	f7ff fd91 	bl	800b410 <_Balloc>
 800b8ee:	4605      	mov	r5, r0
 800b8f0:	b948      	cbnz	r0, 800b906 <__lshift+0x3e>
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	4b28      	ldr	r3, [pc, #160]	; (800b998 <__lshift+0xd0>)
 800b8f6:	4829      	ldr	r0, [pc, #164]	; (800b99c <__lshift+0xd4>)
 800b8f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b8fc:	f001 f8a0 	bl	800ca40 <__assert_func>
 800b900:	3101      	adds	r1, #1
 800b902:	005b      	lsls	r3, r3, #1
 800b904:	e7ee      	b.n	800b8e4 <__lshift+0x1c>
 800b906:	2300      	movs	r3, #0
 800b908:	f100 0114 	add.w	r1, r0, #20
 800b90c:	f100 0210 	add.w	r2, r0, #16
 800b910:	4618      	mov	r0, r3
 800b912:	4553      	cmp	r3, sl
 800b914:	db33      	blt.n	800b97e <__lshift+0xb6>
 800b916:	6920      	ldr	r0, [r4, #16]
 800b918:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b91c:	f104 0314 	add.w	r3, r4, #20
 800b920:	f019 091f 	ands.w	r9, r9, #31
 800b924:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b928:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b92c:	d02b      	beq.n	800b986 <__lshift+0xbe>
 800b92e:	f1c9 0e20 	rsb	lr, r9, #32
 800b932:	468a      	mov	sl, r1
 800b934:	2200      	movs	r2, #0
 800b936:	6818      	ldr	r0, [r3, #0]
 800b938:	fa00 f009 	lsl.w	r0, r0, r9
 800b93c:	4302      	orrs	r2, r0
 800b93e:	f84a 2b04 	str.w	r2, [sl], #4
 800b942:	f853 2b04 	ldr.w	r2, [r3], #4
 800b946:	459c      	cmp	ip, r3
 800b948:	fa22 f20e 	lsr.w	r2, r2, lr
 800b94c:	d8f3      	bhi.n	800b936 <__lshift+0x6e>
 800b94e:	ebac 0304 	sub.w	r3, ip, r4
 800b952:	3b15      	subs	r3, #21
 800b954:	f023 0303 	bic.w	r3, r3, #3
 800b958:	3304      	adds	r3, #4
 800b95a:	f104 0015 	add.w	r0, r4, #21
 800b95e:	4584      	cmp	ip, r0
 800b960:	bf38      	it	cc
 800b962:	2304      	movcc	r3, #4
 800b964:	50ca      	str	r2, [r1, r3]
 800b966:	b10a      	cbz	r2, 800b96c <__lshift+0xa4>
 800b968:	f108 0602 	add.w	r6, r8, #2
 800b96c:	3e01      	subs	r6, #1
 800b96e:	4638      	mov	r0, r7
 800b970:	612e      	str	r6, [r5, #16]
 800b972:	4621      	mov	r1, r4
 800b974:	f7ff fd8c 	bl	800b490 <_Bfree>
 800b978:	4628      	mov	r0, r5
 800b97a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b97e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b982:	3301      	adds	r3, #1
 800b984:	e7c5      	b.n	800b912 <__lshift+0x4a>
 800b986:	3904      	subs	r1, #4
 800b988:	f853 2b04 	ldr.w	r2, [r3], #4
 800b98c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b990:	459c      	cmp	ip, r3
 800b992:	d8f9      	bhi.n	800b988 <__lshift+0xc0>
 800b994:	e7ea      	b.n	800b96c <__lshift+0xa4>
 800b996:	bf00      	nop
 800b998:	0800df94 	.word	0x0800df94
 800b99c:	0800e024 	.word	0x0800e024

0800b9a0 <__mcmp>:
 800b9a0:	b530      	push	{r4, r5, lr}
 800b9a2:	6902      	ldr	r2, [r0, #16]
 800b9a4:	690c      	ldr	r4, [r1, #16]
 800b9a6:	1b12      	subs	r2, r2, r4
 800b9a8:	d10e      	bne.n	800b9c8 <__mcmp+0x28>
 800b9aa:	f100 0314 	add.w	r3, r0, #20
 800b9ae:	3114      	adds	r1, #20
 800b9b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b9b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b9b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b9bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b9c0:	42a5      	cmp	r5, r4
 800b9c2:	d003      	beq.n	800b9cc <__mcmp+0x2c>
 800b9c4:	d305      	bcc.n	800b9d2 <__mcmp+0x32>
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	4610      	mov	r0, r2
 800b9ca:	bd30      	pop	{r4, r5, pc}
 800b9cc:	4283      	cmp	r3, r0
 800b9ce:	d3f3      	bcc.n	800b9b8 <__mcmp+0x18>
 800b9d0:	e7fa      	b.n	800b9c8 <__mcmp+0x28>
 800b9d2:	f04f 32ff 	mov.w	r2, #4294967295
 800b9d6:	e7f7      	b.n	800b9c8 <__mcmp+0x28>

0800b9d8 <__mdiff>:
 800b9d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9dc:	460c      	mov	r4, r1
 800b9de:	4606      	mov	r6, r0
 800b9e0:	4611      	mov	r1, r2
 800b9e2:	4620      	mov	r0, r4
 800b9e4:	4617      	mov	r7, r2
 800b9e6:	f7ff ffdb 	bl	800b9a0 <__mcmp>
 800b9ea:	1e05      	subs	r5, r0, #0
 800b9ec:	d110      	bne.n	800ba10 <__mdiff+0x38>
 800b9ee:	4629      	mov	r1, r5
 800b9f0:	4630      	mov	r0, r6
 800b9f2:	f7ff fd0d 	bl	800b410 <_Balloc>
 800b9f6:	b930      	cbnz	r0, 800ba06 <__mdiff+0x2e>
 800b9f8:	4b39      	ldr	r3, [pc, #228]	; (800bae0 <__mdiff+0x108>)
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	f240 2132 	movw	r1, #562	; 0x232
 800ba00:	4838      	ldr	r0, [pc, #224]	; (800bae4 <__mdiff+0x10c>)
 800ba02:	f001 f81d 	bl	800ca40 <__assert_func>
 800ba06:	2301      	movs	r3, #1
 800ba08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ba0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba10:	bfa4      	itt	ge
 800ba12:	463b      	movge	r3, r7
 800ba14:	4627      	movge	r7, r4
 800ba16:	4630      	mov	r0, r6
 800ba18:	6879      	ldr	r1, [r7, #4]
 800ba1a:	bfa6      	itte	ge
 800ba1c:	461c      	movge	r4, r3
 800ba1e:	2500      	movge	r5, #0
 800ba20:	2501      	movlt	r5, #1
 800ba22:	f7ff fcf5 	bl	800b410 <_Balloc>
 800ba26:	b920      	cbnz	r0, 800ba32 <__mdiff+0x5a>
 800ba28:	4b2d      	ldr	r3, [pc, #180]	; (800bae0 <__mdiff+0x108>)
 800ba2a:	4602      	mov	r2, r0
 800ba2c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ba30:	e7e6      	b.n	800ba00 <__mdiff+0x28>
 800ba32:	693e      	ldr	r6, [r7, #16]
 800ba34:	60c5      	str	r5, [r0, #12]
 800ba36:	6925      	ldr	r5, [r4, #16]
 800ba38:	f107 0114 	add.w	r1, r7, #20
 800ba3c:	f104 0914 	add.w	r9, r4, #20
 800ba40:	f100 0e14 	add.w	lr, r0, #20
 800ba44:	f107 0210 	add.w	r2, r7, #16
 800ba48:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ba4c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ba50:	46f2      	mov	sl, lr
 800ba52:	2700      	movs	r7, #0
 800ba54:	f859 3b04 	ldr.w	r3, [r9], #4
 800ba58:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ba5c:	fa1f f883 	uxth.w	r8, r3
 800ba60:	fa17 f78b 	uxtah	r7, r7, fp
 800ba64:	0c1b      	lsrs	r3, r3, #16
 800ba66:	eba7 0808 	sub.w	r8, r7, r8
 800ba6a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ba6e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ba72:	fa1f f888 	uxth.w	r8, r8
 800ba76:	141f      	asrs	r7, r3, #16
 800ba78:	454d      	cmp	r5, r9
 800ba7a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ba7e:	f84a 3b04 	str.w	r3, [sl], #4
 800ba82:	d8e7      	bhi.n	800ba54 <__mdiff+0x7c>
 800ba84:	1b2b      	subs	r3, r5, r4
 800ba86:	3b15      	subs	r3, #21
 800ba88:	f023 0303 	bic.w	r3, r3, #3
 800ba8c:	3304      	adds	r3, #4
 800ba8e:	3415      	adds	r4, #21
 800ba90:	42a5      	cmp	r5, r4
 800ba92:	bf38      	it	cc
 800ba94:	2304      	movcc	r3, #4
 800ba96:	4419      	add	r1, r3
 800ba98:	4473      	add	r3, lr
 800ba9a:	469e      	mov	lr, r3
 800ba9c:	460d      	mov	r5, r1
 800ba9e:	4565      	cmp	r5, ip
 800baa0:	d30e      	bcc.n	800bac0 <__mdiff+0xe8>
 800baa2:	f10c 0203 	add.w	r2, ip, #3
 800baa6:	1a52      	subs	r2, r2, r1
 800baa8:	f022 0203 	bic.w	r2, r2, #3
 800baac:	3903      	subs	r1, #3
 800baae:	458c      	cmp	ip, r1
 800bab0:	bf38      	it	cc
 800bab2:	2200      	movcc	r2, #0
 800bab4:	441a      	add	r2, r3
 800bab6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800baba:	b17b      	cbz	r3, 800badc <__mdiff+0x104>
 800babc:	6106      	str	r6, [r0, #16]
 800babe:	e7a5      	b.n	800ba0c <__mdiff+0x34>
 800bac0:	f855 8b04 	ldr.w	r8, [r5], #4
 800bac4:	fa17 f488 	uxtah	r4, r7, r8
 800bac8:	1422      	asrs	r2, r4, #16
 800baca:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800bace:	b2a4      	uxth	r4, r4
 800bad0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800bad4:	f84e 4b04 	str.w	r4, [lr], #4
 800bad8:	1417      	asrs	r7, r2, #16
 800bada:	e7e0      	b.n	800ba9e <__mdiff+0xc6>
 800badc:	3e01      	subs	r6, #1
 800bade:	e7ea      	b.n	800bab6 <__mdiff+0xde>
 800bae0:	0800df94 	.word	0x0800df94
 800bae4:	0800e024 	.word	0x0800e024

0800bae8 <__ulp>:
 800bae8:	b082      	sub	sp, #8
 800baea:	ed8d 0b00 	vstr	d0, [sp]
 800baee:	9b01      	ldr	r3, [sp, #4]
 800baf0:	4912      	ldr	r1, [pc, #72]	; (800bb3c <__ulp+0x54>)
 800baf2:	4019      	ands	r1, r3
 800baf4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800baf8:	2900      	cmp	r1, #0
 800bafa:	dd05      	ble.n	800bb08 <__ulp+0x20>
 800bafc:	2200      	movs	r2, #0
 800bafe:	460b      	mov	r3, r1
 800bb00:	ec43 2b10 	vmov	d0, r2, r3
 800bb04:	b002      	add	sp, #8
 800bb06:	4770      	bx	lr
 800bb08:	4249      	negs	r1, r1
 800bb0a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bb0e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bb12:	f04f 0200 	mov.w	r2, #0
 800bb16:	f04f 0300 	mov.w	r3, #0
 800bb1a:	da04      	bge.n	800bb26 <__ulp+0x3e>
 800bb1c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bb20:	fa41 f300 	asr.w	r3, r1, r0
 800bb24:	e7ec      	b.n	800bb00 <__ulp+0x18>
 800bb26:	f1a0 0114 	sub.w	r1, r0, #20
 800bb2a:	291e      	cmp	r1, #30
 800bb2c:	bfda      	itte	le
 800bb2e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bb32:	fa20 f101 	lsrle.w	r1, r0, r1
 800bb36:	2101      	movgt	r1, #1
 800bb38:	460a      	mov	r2, r1
 800bb3a:	e7e1      	b.n	800bb00 <__ulp+0x18>
 800bb3c:	7ff00000 	.word	0x7ff00000

0800bb40 <__b2d>:
 800bb40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb42:	6905      	ldr	r5, [r0, #16]
 800bb44:	f100 0714 	add.w	r7, r0, #20
 800bb48:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bb4c:	1f2e      	subs	r6, r5, #4
 800bb4e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bb52:	4620      	mov	r0, r4
 800bb54:	f7ff fd52 	bl	800b5fc <__hi0bits>
 800bb58:	f1c0 0320 	rsb	r3, r0, #32
 800bb5c:	280a      	cmp	r0, #10
 800bb5e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bbdc <__b2d+0x9c>
 800bb62:	600b      	str	r3, [r1, #0]
 800bb64:	dc14      	bgt.n	800bb90 <__b2d+0x50>
 800bb66:	f1c0 0e0b 	rsb	lr, r0, #11
 800bb6a:	fa24 f10e 	lsr.w	r1, r4, lr
 800bb6e:	42b7      	cmp	r7, r6
 800bb70:	ea41 030c 	orr.w	r3, r1, ip
 800bb74:	bf34      	ite	cc
 800bb76:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bb7a:	2100      	movcs	r1, #0
 800bb7c:	3015      	adds	r0, #21
 800bb7e:	fa04 f000 	lsl.w	r0, r4, r0
 800bb82:	fa21 f10e 	lsr.w	r1, r1, lr
 800bb86:	ea40 0201 	orr.w	r2, r0, r1
 800bb8a:	ec43 2b10 	vmov	d0, r2, r3
 800bb8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb90:	42b7      	cmp	r7, r6
 800bb92:	bf3a      	itte	cc
 800bb94:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bb98:	f1a5 0608 	subcc.w	r6, r5, #8
 800bb9c:	2100      	movcs	r1, #0
 800bb9e:	380b      	subs	r0, #11
 800bba0:	d017      	beq.n	800bbd2 <__b2d+0x92>
 800bba2:	f1c0 0c20 	rsb	ip, r0, #32
 800bba6:	fa04 f500 	lsl.w	r5, r4, r0
 800bbaa:	42be      	cmp	r6, r7
 800bbac:	fa21 f40c 	lsr.w	r4, r1, ip
 800bbb0:	ea45 0504 	orr.w	r5, r5, r4
 800bbb4:	bf8c      	ite	hi
 800bbb6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bbba:	2400      	movls	r4, #0
 800bbbc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bbc0:	fa01 f000 	lsl.w	r0, r1, r0
 800bbc4:	fa24 f40c 	lsr.w	r4, r4, ip
 800bbc8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bbcc:	ea40 0204 	orr.w	r2, r0, r4
 800bbd0:	e7db      	b.n	800bb8a <__b2d+0x4a>
 800bbd2:	ea44 030c 	orr.w	r3, r4, ip
 800bbd6:	460a      	mov	r2, r1
 800bbd8:	e7d7      	b.n	800bb8a <__b2d+0x4a>
 800bbda:	bf00      	nop
 800bbdc:	3ff00000 	.word	0x3ff00000

0800bbe0 <__d2b>:
 800bbe0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bbe4:	4689      	mov	r9, r1
 800bbe6:	2101      	movs	r1, #1
 800bbe8:	ec57 6b10 	vmov	r6, r7, d0
 800bbec:	4690      	mov	r8, r2
 800bbee:	f7ff fc0f 	bl	800b410 <_Balloc>
 800bbf2:	4604      	mov	r4, r0
 800bbf4:	b930      	cbnz	r0, 800bc04 <__d2b+0x24>
 800bbf6:	4602      	mov	r2, r0
 800bbf8:	4b25      	ldr	r3, [pc, #148]	; (800bc90 <__d2b+0xb0>)
 800bbfa:	4826      	ldr	r0, [pc, #152]	; (800bc94 <__d2b+0xb4>)
 800bbfc:	f240 310a 	movw	r1, #778	; 0x30a
 800bc00:	f000 ff1e 	bl	800ca40 <__assert_func>
 800bc04:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bc08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bc0c:	bb35      	cbnz	r5, 800bc5c <__d2b+0x7c>
 800bc0e:	2e00      	cmp	r6, #0
 800bc10:	9301      	str	r3, [sp, #4]
 800bc12:	d028      	beq.n	800bc66 <__d2b+0x86>
 800bc14:	4668      	mov	r0, sp
 800bc16:	9600      	str	r6, [sp, #0]
 800bc18:	f7ff fd10 	bl	800b63c <__lo0bits>
 800bc1c:	9900      	ldr	r1, [sp, #0]
 800bc1e:	b300      	cbz	r0, 800bc62 <__d2b+0x82>
 800bc20:	9a01      	ldr	r2, [sp, #4]
 800bc22:	f1c0 0320 	rsb	r3, r0, #32
 800bc26:	fa02 f303 	lsl.w	r3, r2, r3
 800bc2a:	430b      	orrs	r3, r1
 800bc2c:	40c2      	lsrs	r2, r0
 800bc2e:	6163      	str	r3, [r4, #20]
 800bc30:	9201      	str	r2, [sp, #4]
 800bc32:	9b01      	ldr	r3, [sp, #4]
 800bc34:	61a3      	str	r3, [r4, #24]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	bf14      	ite	ne
 800bc3a:	2202      	movne	r2, #2
 800bc3c:	2201      	moveq	r2, #1
 800bc3e:	6122      	str	r2, [r4, #16]
 800bc40:	b1d5      	cbz	r5, 800bc78 <__d2b+0x98>
 800bc42:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bc46:	4405      	add	r5, r0
 800bc48:	f8c9 5000 	str.w	r5, [r9]
 800bc4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bc50:	f8c8 0000 	str.w	r0, [r8]
 800bc54:	4620      	mov	r0, r4
 800bc56:	b003      	add	sp, #12
 800bc58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc60:	e7d5      	b.n	800bc0e <__d2b+0x2e>
 800bc62:	6161      	str	r1, [r4, #20]
 800bc64:	e7e5      	b.n	800bc32 <__d2b+0x52>
 800bc66:	a801      	add	r0, sp, #4
 800bc68:	f7ff fce8 	bl	800b63c <__lo0bits>
 800bc6c:	9b01      	ldr	r3, [sp, #4]
 800bc6e:	6163      	str	r3, [r4, #20]
 800bc70:	2201      	movs	r2, #1
 800bc72:	6122      	str	r2, [r4, #16]
 800bc74:	3020      	adds	r0, #32
 800bc76:	e7e3      	b.n	800bc40 <__d2b+0x60>
 800bc78:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bc7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bc80:	f8c9 0000 	str.w	r0, [r9]
 800bc84:	6918      	ldr	r0, [r3, #16]
 800bc86:	f7ff fcb9 	bl	800b5fc <__hi0bits>
 800bc8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bc8e:	e7df      	b.n	800bc50 <__d2b+0x70>
 800bc90:	0800df94 	.word	0x0800df94
 800bc94:	0800e024 	.word	0x0800e024

0800bc98 <__ratio>:
 800bc98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc9c:	4688      	mov	r8, r1
 800bc9e:	4669      	mov	r1, sp
 800bca0:	4681      	mov	r9, r0
 800bca2:	f7ff ff4d 	bl	800bb40 <__b2d>
 800bca6:	a901      	add	r1, sp, #4
 800bca8:	4640      	mov	r0, r8
 800bcaa:	ec55 4b10 	vmov	r4, r5, d0
 800bcae:	f7ff ff47 	bl	800bb40 <__b2d>
 800bcb2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bcb6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bcba:	eba3 0c02 	sub.w	ip, r3, r2
 800bcbe:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bcc2:	1a9b      	subs	r3, r3, r2
 800bcc4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bcc8:	ec51 0b10 	vmov	r0, r1, d0
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	bfd6      	itet	le
 800bcd0:	460a      	movle	r2, r1
 800bcd2:	462a      	movgt	r2, r5
 800bcd4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bcd8:	468b      	mov	fp, r1
 800bcda:	462f      	mov	r7, r5
 800bcdc:	bfd4      	ite	le
 800bcde:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bce2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bce6:	4620      	mov	r0, r4
 800bce8:	ee10 2a10 	vmov	r2, s0
 800bcec:	465b      	mov	r3, fp
 800bcee:	4639      	mov	r1, r7
 800bcf0:	f7f4 fdb4 	bl	800085c <__aeabi_ddiv>
 800bcf4:	ec41 0b10 	vmov	d0, r0, r1
 800bcf8:	b003      	add	sp, #12
 800bcfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bcfe <__copybits>:
 800bcfe:	3901      	subs	r1, #1
 800bd00:	b570      	push	{r4, r5, r6, lr}
 800bd02:	1149      	asrs	r1, r1, #5
 800bd04:	6914      	ldr	r4, [r2, #16]
 800bd06:	3101      	adds	r1, #1
 800bd08:	f102 0314 	add.w	r3, r2, #20
 800bd0c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bd10:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bd14:	1f05      	subs	r5, r0, #4
 800bd16:	42a3      	cmp	r3, r4
 800bd18:	d30c      	bcc.n	800bd34 <__copybits+0x36>
 800bd1a:	1aa3      	subs	r3, r4, r2
 800bd1c:	3b11      	subs	r3, #17
 800bd1e:	f023 0303 	bic.w	r3, r3, #3
 800bd22:	3211      	adds	r2, #17
 800bd24:	42a2      	cmp	r2, r4
 800bd26:	bf88      	it	hi
 800bd28:	2300      	movhi	r3, #0
 800bd2a:	4418      	add	r0, r3
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	4288      	cmp	r0, r1
 800bd30:	d305      	bcc.n	800bd3e <__copybits+0x40>
 800bd32:	bd70      	pop	{r4, r5, r6, pc}
 800bd34:	f853 6b04 	ldr.w	r6, [r3], #4
 800bd38:	f845 6f04 	str.w	r6, [r5, #4]!
 800bd3c:	e7eb      	b.n	800bd16 <__copybits+0x18>
 800bd3e:	f840 3b04 	str.w	r3, [r0], #4
 800bd42:	e7f4      	b.n	800bd2e <__copybits+0x30>

0800bd44 <__any_on>:
 800bd44:	f100 0214 	add.w	r2, r0, #20
 800bd48:	6900      	ldr	r0, [r0, #16]
 800bd4a:	114b      	asrs	r3, r1, #5
 800bd4c:	4298      	cmp	r0, r3
 800bd4e:	b510      	push	{r4, lr}
 800bd50:	db11      	blt.n	800bd76 <__any_on+0x32>
 800bd52:	dd0a      	ble.n	800bd6a <__any_on+0x26>
 800bd54:	f011 011f 	ands.w	r1, r1, #31
 800bd58:	d007      	beq.n	800bd6a <__any_on+0x26>
 800bd5a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bd5e:	fa24 f001 	lsr.w	r0, r4, r1
 800bd62:	fa00 f101 	lsl.w	r1, r0, r1
 800bd66:	428c      	cmp	r4, r1
 800bd68:	d10b      	bne.n	800bd82 <__any_on+0x3e>
 800bd6a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d803      	bhi.n	800bd7a <__any_on+0x36>
 800bd72:	2000      	movs	r0, #0
 800bd74:	bd10      	pop	{r4, pc}
 800bd76:	4603      	mov	r3, r0
 800bd78:	e7f7      	b.n	800bd6a <__any_on+0x26>
 800bd7a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bd7e:	2900      	cmp	r1, #0
 800bd80:	d0f5      	beq.n	800bd6e <__any_on+0x2a>
 800bd82:	2001      	movs	r0, #1
 800bd84:	e7f6      	b.n	800bd74 <__any_on+0x30>

0800bd86 <_calloc_r>:
 800bd86:	b513      	push	{r0, r1, r4, lr}
 800bd88:	434a      	muls	r2, r1
 800bd8a:	4611      	mov	r1, r2
 800bd8c:	9201      	str	r2, [sp, #4]
 800bd8e:	f000 f859 	bl	800be44 <_malloc_r>
 800bd92:	4604      	mov	r4, r0
 800bd94:	b118      	cbz	r0, 800bd9e <_calloc_r+0x18>
 800bd96:	9a01      	ldr	r2, [sp, #4]
 800bd98:	2100      	movs	r1, #0
 800bd9a:	f7fc fb1f 	bl	80083dc <memset>
 800bd9e:	4620      	mov	r0, r4
 800bda0:	b002      	add	sp, #8
 800bda2:	bd10      	pop	{r4, pc}

0800bda4 <_free_r>:
 800bda4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bda6:	2900      	cmp	r1, #0
 800bda8:	d048      	beq.n	800be3c <_free_r+0x98>
 800bdaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdae:	9001      	str	r0, [sp, #4]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	f1a1 0404 	sub.w	r4, r1, #4
 800bdb6:	bfb8      	it	lt
 800bdb8:	18e4      	addlt	r4, r4, r3
 800bdba:	f001 f845 	bl	800ce48 <__malloc_lock>
 800bdbe:	4a20      	ldr	r2, [pc, #128]	; (800be40 <_free_r+0x9c>)
 800bdc0:	9801      	ldr	r0, [sp, #4]
 800bdc2:	6813      	ldr	r3, [r2, #0]
 800bdc4:	4615      	mov	r5, r2
 800bdc6:	b933      	cbnz	r3, 800bdd6 <_free_r+0x32>
 800bdc8:	6063      	str	r3, [r4, #4]
 800bdca:	6014      	str	r4, [r2, #0]
 800bdcc:	b003      	add	sp, #12
 800bdce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bdd2:	f001 b83f 	b.w	800ce54 <__malloc_unlock>
 800bdd6:	42a3      	cmp	r3, r4
 800bdd8:	d90b      	bls.n	800bdf2 <_free_r+0x4e>
 800bdda:	6821      	ldr	r1, [r4, #0]
 800bddc:	1862      	adds	r2, r4, r1
 800bdde:	4293      	cmp	r3, r2
 800bde0:	bf04      	itt	eq
 800bde2:	681a      	ldreq	r2, [r3, #0]
 800bde4:	685b      	ldreq	r3, [r3, #4]
 800bde6:	6063      	str	r3, [r4, #4]
 800bde8:	bf04      	itt	eq
 800bdea:	1852      	addeq	r2, r2, r1
 800bdec:	6022      	streq	r2, [r4, #0]
 800bdee:	602c      	str	r4, [r5, #0]
 800bdf0:	e7ec      	b.n	800bdcc <_free_r+0x28>
 800bdf2:	461a      	mov	r2, r3
 800bdf4:	685b      	ldr	r3, [r3, #4]
 800bdf6:	b10b      	cbz	r3, 800bdfc <_free_r+0x58>
 800bdf8:	42a3      	cmp	r3, r4
 800bdfa:	d9fa      	bls.n	800bdf2 <_free_r+0x4e>
 800bdfc:	6811      	ldr	r1, [r2, #0]
 800bdfe:	1855      	adds	r5, r2, r1
 800be00:	42a5      	cmp	r5, r4
 800be02:	d10b      	bne.n	800be1c <_free_r+0x78>
 800be04:	6824      	ldr	r4, [r4, #0]
 800be06:	4421      	add	r1, r4
 800be08:	1854      	adds	r4, r2, r1
 800be0a:	42a3      	cmp	r3, r4
 800be0c:	6011      	str	r1, [r2, #0]
 800be0e:	d1dd      	bne.n	800bdcc <_free_r+0x28>
 800be10:	681c      	ldr	r4, [r3, #0]
 800be12:	685b      	ldr	r3, [r3, #4]
 800be14:	6053      	str	r3, [r2, #4]
 800be16:	4421      	add	r1, r4
 800be18:	6011      	str	r1, [r2, #0]
 800be1a:	e7d7      	b.n	800bdcc <_free_r+0x28>
 800be1c:	d902      	bls.n	800be24 <_free_r+0x80>
 800be1e:	230c      	movs	r3, #12
 800be20:	6003      	str	r3, [r0, #0]
 800be22:	e7d3      	b.n	800bdcc <_free_r+0x28>
 800be24:	6825      	ldr	r5, [r4, #0]
 800be26:	1961      	adds	r1, r4, r5
 800be28:	428b      	cmp	r3, r1
 800be2a:	bf04      	itt	eq
 800be2c:	6819      	ldreq	r1, [r3, #0]
 800be2e:	685b      	ldreq	r3, [r3, #4]
 800be30:	6063      	str	r3, [r4, #4]
 800be32:	bf04      	itt	eq
 800be34:	1949      	addeq	r1, r1, r5
 800be36:	6021      	streq	r1, [r4, #0]
 800be38:	6054      	str	r4, [r2, #4]
 800be3a:	e7c7      	b.n	800bdcc <_free_r+0x28>
 800be3c:	b003      	add	sp, #12
 800be3e:	bd30      	pop	{r4, r5, pc}
 800be40:	20004c28 	.word	0x20004c28

0800be44 <_malloc_r>:
 800be44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be46:	1ccd      	adds	r5, r1, #3
 800be48:	f025 0503 	bic.w	r5, r5, #3
 800be4c:	3508      	adds	r5, #8
 800be4e:	2d0c      	cmp	r5, #12
 800be50:	bf38      	it	cc
 800be52:	250c      	movcc	r5, #12
 800be54:	2d00      	cmp	r5, #0
 800be56:	4606      	mov	r6, r0
 800be58:	db01      	blt.n	800be5e <_malloc_r+0x1a>
 800be5a:	42a9      	cmp	r1, r5
 800be5c:	d903      	bls.n	800be66 <_malloc_r+0x22>
 800be5e:	230c      	movs	r3, #12
 800be60:	6033      	str	r3, [r6, #0]
 800be62:	2000      	movs	r0, #0
 800be64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be66:	f000 ffef 	bl	800ce48 <__malloc_lock>
 800be6a:	4921      	ldr	r1, [pc, #132]	; (800bef0 <_malloc_r+0xac>)
 800be6c:	680a      	ldr	r2, [r1, #0]
 800be6e:	4614      	mov	r4, r2
 800be70:	b99c      	cbnz	r4, 800be9a <_malloc_r+0x56>
 800be72:	4f20      	ldr	r7, [pc, #128]	; (800bef4 <_malloc_r+0xb0>)
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	b923      	cbnz	r3, 800be82 <_malloc_r+0x3e>
 800be78:	4621      	mov	r1, r4
 800be7a:	4630      	mov	r0, r6
 800be7c:	f000 fcd0 	bl	800c820 <_sbrk_r>
 800be80:	6038      	str	r0, [r7, #0]
 800be82:	4629      	mov	r1, r5
 800be84:	4630      	mov	r0, r6
 800be86:	f000 fccb 	bl	800c820 <_sbrk_r>
 800be8a:	1c43      	adds	r3, r0, #1
 800be8c:	d123      	bne.n	800bed6 <_malloc_r+0x92>
 800be8e:	230c      	movs	r3, #12
 800be90:	6033      	str	r3, [r6, #0]
 800be92:	4630      	mov	r0, r6
 800be94:	f000 ffde 	bl	800ce54 <__malloc_unlock>
 800be98:	e7e3      	b.n	800be62 <_malloc_r+0x1e>
 800be9a:	6823      	ldr	r3, [r4, #0]
 800be9c:	1b5b      	subs	r3, r3, r5
 800be9e:	d417      	bmi.n	800bed0 <_malloc_r+0x8c>
 800bea0:	2b0b      	cmp	r3, #11
 800bea2:	d903      	bls.n	800beac <_malloc_r+0x68>
 800bea4:	6023      	str	r3, [r4, #0]
 800bea6:	441c      	add	r4, r3
 800bea8:	6025      	str	r5, [r4, #0]
 800beaa:	e004      	b.n	800beb6 <_malloc_r+0x72>
 800beac:	6863      	ldr	r3, [r4, #4]
 800beae:	42a2      	cmp	r2, r4
 800beb0:	bf0c      	ite	eq
 800beb2:	600b      	streq	r3, [r1, #0]
 800beb4:	6053      	strne	r3, [r2, #4]
 800beb6:	4630      	mov	r0, r6
 800beb8:	f000 ffcc 	bl	800ce54 <__malloc_unlock>
 800bebc:	f104 000b 	add.w	r0, r4, #11
 800bec0:	1d23      	adds	r3, r4, #4
 800bec2:	f020 0007 	bic.w	r0, r0, #7
 800bec6:	1ac2      	subs	r2, r0, r3
 800bec8:	d0cc      	beq.n	800be64 <_malloc_r+0x20>
 800beca:	1a1b      	subs	r3, r3, r0
 800becc:	50a3      	str	r3, [r4, r2]
 800bece:	e7c9      	b.n	800be64 <_malloc_r+0x20>
 800bed0:	4622      	mov	r2, r4
 800bed2:	6864      	ldr	r4, [r4, #4]
 800bed4:	e7cc      	b.n	800be70 <_malloc_r+0x2c>
 800bed6:	1cc4      	adds	r4, r0, #3
 800bed8:	f024 0403 	bic.w	r4, r4, #3
 800bedc:	42a0      	cmp	r0, r4
 800bede:	d0e3      	beq.n	800bea8 <_malloc_r+0x64>
 800bee0:	1a21      	subs	r1, r4, r0
 800bee2:	4630      	mov	r0, r6
 800bee4:	f000 fc9c 	bl	800c820 <_sbrk_r>
 800bee8:	3001      	adds	r0, #1
 800beea:	d1dd      	bne.n	800bea8 <_malloc_r+0x64>
 800beec:	e7cf      	b.n	800be8e <_malloc_r+0x4a>
 800beee:	bf00      	nop
 800bef0:	20004c28 	.word	0x20004c28
 800bef4:	20004c2c 	.word	0x20004c2c

0800bef8 <__ssputs_r>:
 800bef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800befc:	688e      	ldr	r6, [r1, #8]
 800befe:	429e      	cmp	r6, r3
 800bf00:	4682      	mov	sl, r0
 800bf02:	460c      	mov	r4, r1
 800bf04:	4690      	mov	r8, r2
 800bf06:	461f      	mov	r7, r3
 800bf08:	d838      	bhi.n	800bf7c <__ssputs_r+0x84>
 800bf0a:	898a      	ldrh	r2, [r1, #12]
 800bf0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bf10:	d032      	beq.n	800bf78 <__ssputs_r+0x80>
 800bf12:	6825      	ldr	r5, [r4, #0]
 800bf14:	6909      	ldr	r1, [r1, #16]
 800bf16:	eba5 0901 	sub.w	r9, r5, r1
 800bf1a:	6965      	ldr	r5, [r4, #20]
 800bf1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bf24:	3301      	adds	r3, #1
 800bf26:	444b      	add	r3, r9
 800bf28:	106d      	asrs	r5, r5, #1
 800bf2a:	429d      	cmp	r5, r3
 800bf2c:	bf38      	it	cc
 800bf2e:	461d      	movcc	r5, r3
 800bf30:	0553      	lsls	r3, r2, #21
 800bf32:	d531      	bpl.n	800bf98 <__ssputs_r+0xa0>
 800bf34:	4629      	mov	r1, r5
 800bf36:	f7ff ff85 	bl	800be44 <_malloc_r>
 800bf3a:	4606      	mov	r6, r0
 800bf3c:	b950      	cbnz	r0, 800bf54 <__ssputs_r+0x5c>
 800bf3e:	230c      	movs	r3, #12
 800bf40:	f8ca 3000 	str.w	r3, [sl]
 800bf44:	89a3      	ldrh	r3, [r4, #12]
 800bf46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf4a:	81a3      	strh	r3, [r4, #12]
 800bf4c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf54:	6921      	ldr	r1, [r4, #16]
 800bf56:	464a      	mov	r2, r9
 800bf58:	f7fc fa32 	bl	80083c0 <memcpy>
 800bf5c:	89a3      	ldrh	r3, [r4, #12]
 800bf5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bf62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf66:	81a3      	strh	r3, [r4, #12]
 800bf68:	6126      	str	r6, [r4, #16]
 800bf6a:	6165      	str	r5, [r4, #20]
 800bf6c:	444e      	add	r6, r9
 800bf6e:	eba5 0509 	sub.w	r5, r5, r9
 800bf72:	6026      	str	r6, [r4, #0]
 800bf74:	60a5      	str	r5, [r4, #8]
 800bf76:	463e      	mov	r6, r7
 800bf78:	42be      	cmp	r6, r7
 800bf7a:	d900      	bls.n	800bf7e <__ssputs_r+0x86>
 800bf7c:	463e      	mov	r6, r7
 800bf7e:	4632      	mov	r2, r6
 800bf80:	6820      	ldr	r0, [r4, #0]
 800bf82:	4641      	mov	r1, r8
 800bf84:	f000 ff46 	bl	800ce14 <memmove>
 800bf88:	68a3      	ldr	r3, [r4, #8]
 800bf8a:	6822      	ldr	r2, [r4, #0]
 800bf8c:	1b9b      	subs	r3, r3, r6
 800bf8e:	4432      	add	r2, r6
 800bf90:	60a3      	str	r3, [r4, #8]
 800bf92:	6022      	str	r2, [r4, #0]
 800bf94:	2000      	movs	r0, #0
 800bf96:	e7db      	b.n	800bf50 <__ssputs_r+0x58>
 800bf98:	462a      	mov	r2, r5
 800bf9a:	f000 ff61 	bl	800ce60 <_realloc_r>
 800bf9e:	4606      	mov	r6, r0
 800bfa0:	2800      	cmp	r0, #0
 800bfa2:	d1e1      	bne.n	800bf68 <__ssputs_r+0x70>
 800bfa4:	6921      	ldr	r1, [r4, #16]
 800bfa6:	4650      	mov	r0, sl
 800bfa8:	f7ff fefc 	bl	800bda4 <_free_r>
 800bfac:	e7c7      	b.n	800bf3e <__ssputs_r+0x46>
	...

0800bfb0 <_svfiprintf_r>:
 800bfb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfb4:	4698      	mov	r8, r3
 800bfb6:	898b      	ldrh	r3, [r1, #12]
 800bfb8:	061b      	lsls	r3, r3, #24
 800bfba:	b09d      	sub	sp, #116	; 0x74
 800bfbc:	4607      	mov	r7, r0
 800bfbe:	460d      	mov	r5, r1
 800bfc0:	4614      	mov	r4, r2
 800bfc2:	d50e      	bpl.n	800bfe2 <_svfiprintf_r+0x32>
 800bfc4:	690b      	ldr	r3, [r1, #16]
 800bfc6:	b963      	cbnz	r3, 800bfe2 <_svfiprintf_r+0x32>
 800bfc8:	2140      	movs	r1, #64	; 0x40
 800bfca:	f7ff ff3b 	bl	800be44 <_malloc_r>
 800bfce:	6028      	str	r0, [r5, #0]
 800bfd0:	6128      	str	r0, [r5, #16]
 800bfd2:	b920      	cbnz	r0, 800bfde <_svfiprintf_r+0x2e>
 800bfd4:	230c      	movs	r3, #12
 800bfd6:	603b      	str	r3, [r7, #0]
 800bfd8:	f04f 30ff 	mov.w	r0, #4294967295
 800bfdc:	e0d1      	b.n	800c182 <_svfiprintf_r+0x1d2>
 800bfde:	2340      	movs	r3, #64	; 0x40
 800bfe0:	616b      	str	r3, [r5, #20]
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	9309      	str	r3, [sp, #36]	; 0x24
 800bfe6:	2320      	movs	r3, #32
 800bfe8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bfec:	f8cd 800c 	str.w	r8, [sp, #12]
 800bff0:	2330      	movs	r3, #48	; 0x30
 800bff2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c19c <_svfiprintf_r+0x1ec>
 800bff6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bffa:	f04f 0901 	mov.w	r9, #1
 800bffe:	4623      	mov	r3, r4
 800c000:	469a      	mov	sl, r3
 800c002:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c006:	b10a      	cbz	r2, 800c00c <_svfiprintf_r+0x5c>
 800c008:	2a25      	cmp	r2, #37	; 0x25
 800c00a:	d1f9      	bne.n	800c000 <_svfiprintf_r+0x50>
 800c00c:	ebba 0b04 	subs.w	fp, sl, r4
 800c010:	d00b      	beq.n	800c02a <_svfiprintf_r+0x7a>
 800c012:	465b      	mov	r3, fp
 800c014:	4622      	mov	r2, r4
 800c016:	4629      	mov	r1, r5
 800c018:	4638      	mov	r0, r7
 800c01a:	f7ff ff6d 	bl	800bef8 <__ssputs_r>
 800c01e:	3001      	adds	r0, #1
 800c020:	f000 80aa 	beq.w	800c178 <_svfiprintf_r+0x1c8>
 800c024:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c026:	445a      	add	r2, fp
 800c028:	9209      	str	r2, [sp, #36]	; 0x24
 800c02a:	f89a 3000 	ldrb.w	r3, [sl]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	f000 80a2 	beq.w	800c178 <_svfiprintf_r+0x1c8>
 800c034:	2300      	movs	r3, #0
 800c036:	f04f 32ff 	mov.w	r2, #4294967295
 800c03a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c03e:	f10a 0a01 	add.w	sl, sl, #1
 800c042:	9304      	str	r3, [sp, #16]
 800c044:	9307      	str	r3, [sp, #28]
 800c046:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c04a:	931a      	str	r3, [sp, #104]	; 0x68
 800c04c:	4654      	mov	r4, sl
 800c04e:	2205      	movs	r2, #5
 800c050:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c054:	4851      	ldr	r0, [pc, #324]	; (800c19c <_svfiprintf_r+0x1ec>)
 800c056:	f7f4 f8cb 	bl	80001f0 <memchr>
 800c05a:	9a04      	ldr	r2, [sp, #16]
 800c05c:	b9d8      	cbnz	r0, 800c096 <_svfiprintf_r+0xe6>
 800c05e:	06d0      	lsls	r0, r2, #27
 800c060:	bf44      	itt	mi
 800c062:	2320      	movmi	r3, #32
 800c064:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c068:	0711      	lsls	r1, r2, #28
 800c06a:	bf44      	itt	mi
 800c06c:	232b      	movmi	r3, #43	; 0x2b
 800c06e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c072:	f89a 3000 	ldrb.w	r3, [sl]
 800c076:	2b2a      	cmp	r3, #42	; 0x2a
 800c078:	d015      	beq.n	800c0a6 <_svfiprintf_r+0xf6>
 800c07a:	9a07      	ldr	r2, [sp, #28]
 800c07c:	4654      	mov	r4, sl
 800c07e:	2000      	movs	r0, #0
 800c080:	f04f 0c0a 	mov.w	ip, #10
 800c084:	4621      	mov	r1, r4
 800c086:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c08a:	3b30      	subs	r3, #48	; 0x30
 800c08c:	2b09      	cmp	r3, #9
 800c08e:	d94e      	bls.n	800c12e <_svfiprintf_r+0x17e>
 800c090:	b1b0      	cbz	r0, 800c0c0 <_svfiprintf_r+0x110>
 800c092:	9207      	str	r2, [sp, #28]
 800c094:	e014      	b.n	800c0c0 <_svfiprintf_r+0x110>
 800c096:	eba0 0308 	sub.w	r3, r0, r8
 800c09a:	fa09 f303 	lsl.w	r3, r9, r3
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	9304      	str	r3, [sp, #16]
 800c0a2:	46a2      	mov	sl, r4
 800c0a4:	e7d2      	b.n	800c04c <_svfiprintf_r+0x9c>
 800c0a6:	9b03      	ldr	r3, [sp, #12]
 800c0a8:	1d19      	adds	r1, r3, #4
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	9103      	str	r1, [sp, #12]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	bfbb      	ittet	lt
 800c0b2:	425b      	neglt	r3, r3
 800c0b4:	f042 0202 	orrlt.w	r2, r2, #2
 800c0b8:	9307      	strge	r3, [sp, #28]
 800c0ba:	9307      	strlt	r3, [sp, #28]
 800c0bc:	bfb8      	it	lt
 800c0be:	9204      	strlt	r2, [sp, #16]
 800c0c0:	7823      	ldrb	r3, [r4, #0]
 800c0c2:	2b2e      	cmp	r3, #46	; 0x2e
 800c0c4:	d10c      	bne.n	800c0e0 <_svfiprintf_r+0x130>
 800c0c6:	7863      	ldrb	r3, [r4, #1]
 800c0c8:	2b2a      	cmp	r3, #42	; 0x2a
 800c0ca:	d135      	bne.n	800c138 <_svfiprintf_r+0x188>
 800c0cc:	9b03      	ldr	r3, [sp, #12]
 800c0ce:	1d1a      	adds	r2, r3, #4
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	9203      	str	r2, [sp, #12]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	bfb8      	it	lt
 800c0d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c0dc:	3402      	adds	r4, #2
 800c0de:	9305      	str	r3, [sp, #20]
 800c0e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c1ac <_svfiprintf_r+0x1fc>
 800c0e4:	7821      	ldrb	r1, [r4, #0]
 800c0e6:	2203      	movs	r2, #3
 800c0e8:	4650      	mov	r0, sl
 800c0ea:	f7f4 f881 	bl	80001f0 <memchr>
 800c0ee:	b140      	cbz	r0, 800c102 <_svfiprintf_r+0x152>
 800c0f0:	2340      	movs	r3, #64	; 0x40
 800c0f2:	eba0 000a 	sub.w	r0, r0, sl
 800c0f6:	fa03 f000 	lsl.w	r0, r3, r0
 800c0fa:	9b04      	ldr	r3, [sp, #16]
 800c0fc:	4303      	orrs	r3, r0
 800c0fe:	3401      	adds	r4, #1
 800c100:	9304      	str	r3, [sp, #16]
 800c102:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c106:	4826      	ldr	r0, [pc, #152]	; (800c1a0 <_svfiprintf_r+0x1f0>)
 800c108:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c10c:	2206      	movs	r2, #6
 800c10e:	f7f4 f86f 	bl	80001f0 <memchr>
 800c112:	2800      	cmp	r0, #0
 800c114:	d038      	beq.n	800c188 <_svfiprintf_r+0x1d8>
 800c116:	4b23      	ldr	r3, [pc, #140]	; (800c1a4 <_svfiprintf_r+0x1f4>)
 800c118:	bb1b      	cbnz	r3, 800c162 <_svfiprintf_r+0x1b2>
 800c11a:	9b03      	ldr	r3, [sp, #12]
 800c11c:	3307      	adds	r3, #7
 800c11e:	f023 0307 	bic.w	r3, r3, #7
 800c122:	3308      	adds	r3, #8
 800c124:	9303      	str	r3, [sp, #12]
 800c126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c128:	4433      	add	r3, r6
 800c12a:	9309      	str	r3, [sp, #36]	; 0x24
 800c12c:	e767      	b.n	800bffe <_svfiprintf_r+0x4e>
 800c12e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c132:	460c      	mov	r4, r1
 800c134:	2001      	movs	r0, #1
 800c136:	e7a5      	b.n	800c084 <_svfiprintf_r+0xd4>
 800c138:	2300      	movs	r3, #0
 800c13a:	3401      	adds	r4, #1
 800c13c:	9305      	str	r3, [sp, #20]
 800c13e:	4619      	mov	r1, r3
 800c140:	f04f 0c0a 	mov.w	ip, #10
 800c144:	4620      	mov	r0, r4
 800c146:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c14a:	3a30      	subs	r2, #48	; 0x30
 800c14c:	2a09      	cmp	r2, #9
 800c14e:	d903      	bls.n	800c158 <_svfiprintf_r+0x1a8>
 800c150:	2b00      	cmp	r3, #0
 800c152:	d0c5      	beq.n	800c0e0 <_svfiprintf_r+0x130>
 800c154:	9105      	str	r1, [sp, #20]
 800c156:	e7c3      	b.n	800c0e0 <_svfiprintf_r+0x130>
 800c158:	fb0c 2101 	mla	r1, ip, r1, r2
 800c15c:	4604      	mov	r4, r0
 800c15e:	2301      	movs	r3, #1
 800c160:	e7f0      	b.n	800c144 <_svfiprintf_r+0x194>
 800c162:	ab03      	add	r3, sp, #12
 800c164:	9300      	str	r3, [sp, #0]
 800c166:	462a      	mov	r2, r5
 800c168:	4b0f      	ldr	r3, [pc, #60]	; (800c1a8 <_svfiprintf_r+0x1f8>)
 800c16a:	a904      	add	r1, sp, #16
 800c16c:	4638      	mov	r0, r7
 800c16e:	f7fc f9dd 	bl	800852c <_printf_float>
 800c172:	1c42      	adds	r2, r0, #1
 800c174:	4606      	mov	r6, r0
 800c176:	d1d6      	bne.n	800c126 <_svfiprintf_r+0x176>
 800c178:	89ab      	ldrh	r3, [r5, #12]
 800c17a:	065b      	lsls	r3, r3, #25
 800c17c:	f53f af2c 	bmi.w	800bfd8 <_svfiprintf_r+0x28>
 800c180:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c182:	b01d      	add	sp, #116	; 0x74
 800c184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c188:	ab03      	add	r3, sp, #12
 800c18a:	9300      	str	r3, [sp, #0]
 800c18c:	462a      	mov	r2, r5
 800c18e:	4b06      	ldr	r3, [pc, #24]	; (800c1a8 <_svfiprintf_r+0x1f8>)
 800c190:	a904      	add	r1, sp, #16
 800c192:	4638      	mov	r0, r7
 800c194:	f7fc fc6e 	bl	8008a74 <_printf_i>
 800c198:	e7eb      	b.n	800c172 <_svfiprintf_r+0x1c2>
 800c19a:	bf00      	nop
 800c19c:	0800e184 	.word	0x0800e184
 800c1a0:	0800e18e 	.word	0x0800e18e
 800c1a4:	0800852d 	.word	0x0800852d
 800c1a8:	0800bef9 	.word	0x0800bef9
 800c1ac:	0800e18a 	.word	0x0800e18a

0800c1b0 <_sungetc_r>:
 800c1b0:	b538      	push	{r3, r4, r5, lr}
 800c1b2:	1c4b      	adds	r3, r1, #1
 800c1b4:	4614      	mov	r4, r2
 800c1b6:	d103      	bne.n	800c1c0 <_sungetc_r+0x10>
 800c1b8:	f04f 35ff 	mov.w	r5, #4294967295
 800c1bc:	4628      	mov	r0, r5
 800c1be:	bd38      	pop	{r3, r4, r5, pc}
 800c1c0:	8993      	ldrh	r3, [r2, #12]
 800c1c2:	f023 0320 	bic.w	r3, r3, #32
 800c1c6:	8193      	strh	r3, [r2, #12]
 800c1c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1ca:	6852      	ldr	r2, [r2, #4]
 800c1cc:	b2cd      	uxtb	r5, r1
 800c1ce:	b18b      	cbz	r3, 800c1f4 <_sungetc_r+0x44>
 800c1d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	dd08      	ble.n	800c1e8 <_sungetc_r+0x38>
 800c1d6:	6823      	ldr	r3, [r4, #0]
 800c1d8:	1e5a      	subs	r2, r3, #1
 800c1da:	6022      	str	r2, [r4, #0]
 800c1dc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c1e0:	6863      	ldr	r3, [r4, #4]
 800c1e2:	3301      	adds	r3, #1
 800c1e4:	6063      	str	r3, [r4, #4]
 800c1e6:	e7e9      	b.n	800c1bc <_sungetc_r+0xc>
 800c1e8:	4621      	mov	r1, r4
 800c1ea:	f000 fbe1 	bl	800c9b0 <__submore>
 800c1ee:	2800      	cmp	r0, #0
 800c1f0:	d0f1      	beq.n	800c1d6 <_sungetc_r+0x26>
 800c1f2:	e7e1      	b.n	800c1b8 <_sungetc_r+0x8>
 800c1f4:	6921      	ldr	r1, [r4, #16]
 800c1f6:	6823      	ldr	r3, [r4, #0]
 800c1f8:	b151      	cbz	r1, 800c210 <_sungetc_r+0x60>
 800c1fa:	4299      	cmp	r1, r3
 800c1fc:	d208      	bcs.n	800c210 <_sungetc_r+0x60>
 800c1fe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c202:	42a9      	cmp	r1, r5
 800c204:	d104      	bne.n	800c210 <_sungetc_r+0x60>
 800c206:	3b01      	subs	r3, #1
 800c208:	3201      	adds	r2, #1
 800c20a:	6023      	str	r3, [r4, #0]
 800c20c:	6062      	str	r2, [r4, #4]
 800c20e:	e7d5      	b.n	800c1bc <_sungetc_r+0xc>
 800c210:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c214:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c218:	6363      	str	r3, [r4, #52]	; 0x34
 800c21a:	2303      	movs	r3, #3
 800c21c:	63a3      	str	r3, [r4, #56]	; 0x38
 800c21e:	4623      	mov	r3, r4
 800c220:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c224:	6023      	str	r3, [r4, #0]
 800c226:	2301      	movs	r3, #1
 800c228:	e7dc      	b.n	800c1e4 <_sungetc_r+0x34>

0800c22a <__ssrefill_r>:
 800c22a:	b510      	push	{r4, lr}
 800c22c:	460c      	mov	r4, r1
 800c22e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c230:	b169      	cbz	r1, 800c24e <__ssrefill_r+0x24>
 800c232:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c236:	4299      	cmp	r1, r3
 800c238:	d001      	beq.n	800c23e <__ssrefill_r+0x14>
 800c23a:	f7ff fdb3 	bl	800bda4 <_free_r>
 800c23e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c240:	6063      	str	r3, [r4, #4]
 800c242:	2000      	movs	r0, #0
 800c244:	6360      	str	r0, [r4, #52]	; 0x34
 800c246:	b113      	cbz	r3, 800c24e <__ssrefill_r+0x24>
 800c248:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c24a:	6023      	str	r3, [r4, #0]
 800c24c:	bd10      	pop	{r4, pc}
 800c24e:	6923      	ldr	r3, [r4, #16]
 800c250:	6023      	str	r3, [r4, #0]
 800c252:	2300      	movs	r3, #0
 800c254:	6063      	str	r3, [r4, #4]
 800c256:	89a3      	ldrh	r3, [r4, #12]
 800c258:	f043 0320 	orr.w	r3, r3, #32
 800c25c:	81a3      	strh	r3, [r4, #12]
 800c25e:	f04f 30ff 	mov.w	r0, #4294967295
 800c262:	e7f3      	b.n	800c24c <__ssrefill_r+0x22>

0800c264 <__ssvfiscanf_r>:
 800c264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c268:	460c      	mov	r4, r1
 800c26a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800c26e:	2100      	movs	r1, #0
 800c270:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c274:	49b2      	ldr	r1, [pc, #712]	; (800c540 <__ssvfiscanf_r+0x2dc>)
 800c276:	91a0      	str	r1, [sp, #640]	; 0x280
 800c278:	f10d 0804 	add.w	r8, sp, #4
 800c27c:	49b1      	ldr	r1, [pc, #708]	; (800c544 <__ssvfiscanf_r+0x2e0>)
 800c27e:	4fb2      	ldr	r7, [pc, #712]	; (800c548 <__ssvfiscanf_r+0x2e4>)
 800c280:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800c54c <__ssvfiscanf_r+0x2e8>
 800c284:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c288:	4606      	mov	r6, r0
 800c28a:	91a1      	str	r1, [sp, #644]	; 0x284
 800c28c:	9300      	str	r3, [sp, #0]
 800c28e:	f892 a000 	ldrb.w	sl, [r2]
 800c292:	f1ba 0f00 	cmp.w	sl, #0
 800c296:	f000 8151 	beq.w	800c53c <__ssvfiscanf_r+0x2d8>
 800c29a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800c29e:	f013 0308 	ands.w	r3, r3, #8
 800c2a2:	f102 0501 	add.w	r5, r2, #1
 800c2a6:	d019      	beq.n	800c2dc <__ssvfiscanf_r+0x78>
 800c2a8:	6863      	ldr	r3, [r4, #4]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	dd0f      	ble.n	800c2ce <__ssvfiscanf_r+0x6a>
 800c2ae:	6823      	ldr	r3, [r4, #0]
 800c2b0:	781a      	ldrb	r2, [r3, #0]
 800c2b2:	5cba      	ldrb	r2, [r7, r2]
 800c2b4:	0712      	lsls	r2, r2, #28
 800c2b6:	d401      	bmi.n	800c2bc <__ssvfiscanf_r+0x58>
 800c2b8:	462a      	mov	r2, r5
 800c2ba:	e7e8      	b.n	800c28e <__ssvfiscanf_r+0x2a>
 800c2bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c2be:	3201      	adds	r2, #1
 800c2c0:	9245      	str	r2, [sp, #276]	; 0x114
 800c2c2:	6862      	ldr	r2, [r4, #4]
 800c2c4:	3301      	adds	r3, #1
 800c2c6:	3a01      	subs	r2, #1
 800c2c8:	6062      	str	r2, [r4, #4]
 800c2ca:	6023      	str	r3, [r4, #0]
 800c2cc:	e7ec      	b.n	800c2a8 <__ssvfiscanf_r+0x44>
 800c2ce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c2d0:	4621      	mov	r1, r4
 800c2d2:	4630      	mov	r0, r6
 800c2d4:	4798      	blx	r3
 800c2d6:	2800      	cmp	r0, #0
 800c2d8:	d0e9      	beq.n	800c2ae <__ssvfiscanf_r+0x4a>
 800c2da:	e7ed      	b.n	800c2b8 <__ssvfiscanf_r+0x54>
 800c2dc:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800c2e0:	f040 8083 	bne.w	800c3ea <__ssvfiscanf_r+0x186>
 800c2e4:	9341      	str	r3, [sp, #260]	; 0x104
 800c2e6:	9343      	str	r3, [sp, #268]	; 0x10c
 800c2e8:	7853      	ldrb	r3, [r2, #1]
 800c2ea:	2b2a      	cmp	r3, #42	; 0x2a
 800c2ec:	bf02      	ittt	eq
 800c2ee:	2310      	moveq	r3, #16
 800c2f0:	1c95      	addeq	r5, r2, #2
 800c2f2:	9341      	streq	r3, [sp, #260]	; 0x104
 800c2f4:	220a      	movs	r2, #10
 800c2f6:	46ab      	mov	fp, r5
 800c2f8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800c2fc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c300:	2b09      	cmp	r3, #9
 800c302:	d91d      	bls.n	800c340 <__ssvfiscanf_r+0xdc>
 800c304:	4891      	ldr	r0, [pc, #580]	; (800c54c <__ssvfiscanf_r+0x2e8>)
 800c306:	2203      	movs	r2, #3
 800c308:	f7f3 ff72 	bl	80001f0 <memchr>
 800c30c:	b140      	cbz	r0, 800c320 <__ssvfiscanf_r+0xbc>
 800c30e:	2301      	movs	r3, #1
 800c310:	eba0 0009 	sub.w	r0, r0, r9
 800c314:	fa03 f000 	lsl.w	r0, r3, r0
 800c318:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c31a:	4318      	orrs	r0, r3
 800c31c:	9041      	str	r0, [sp, #260]	; 0x104
 800c31e:	465d      	mov	r5, fp
 800c320:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c324:	2b78      	cmp	r3, #120	; 0x78
 800c326:	d806      	bhi.n	800c336 <__ssvfiscanf_r+0xd2>
 800c328:	2b57      	cmp	r3, #87	; 0x57
 800c32a:	d810      	bhi.n	800c34e <__ssvfiscanf_r+0xea>
 800c32c:	2b25      	cmp	r3, #37	; 0x25
 800c32e:	d05c      	beq.n	800c3ea <__ssvfiscanf_r+0x186>
 800c330:	d856      	bhi.n	800c3e0 <__ssvfiscanf_r+0x17c>
 800c332:	2b00      	cmp	r3, #0
 800c334:	d074      	beq.n	800c420 <__ssvfiscanf_r+0x1bc>
 800c336:	2303      	movs	r3, #3
 800c338:	9347      	str	r3, [sp, #284]	; 0x11c
 800c33a:	230a      	movs	r3, #10
 800c33c:	9342      	str	r3, [sp, #264]	; 0x108
 800c33e:	e081      	b.n	800c444 <__ssvfiscanf_r+0x1e0>
 800c340:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c342:	fb02 1303 	mla	r3, r2, r3, r1
 800c346:	3b30      	subs	r3, #48	; 0x30
 800c348:	9343      	str	r3, [sp, #268]	; 0x10c
 800c34a:	465d      	mov	r5, fp
 800c34c:	e7d3      	b.n	800c2f6 <__ssvfiscanf_r+0x92>
 800c34e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c352:	2a20      	cmp	r2, #32
 800c354:	d8ef      	bhi.n	800c336 <__ssvfiscanf_r+0xd2>
 800c356:	a101      	add	r1, pc, #4	; (adr r1, 800c35c <__ssvfiscanf_r+0xf8>)
 800c358:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c35c:	0800c42f 	.word	0x0800c42f
 800c360:	0800c337 	.word	0x0800c337
 800c364:	0800c337 	.word	0x0800c337
 800c368:	0800c48d 	.word	0x0800c48d
 800c36c:	0800c337 	.word	0x0800c337
 800c370:	0800c337 	.word	0x0800c337
 800c374:	0800c337 	.word	0x0800c337
 800c378:	0800c337 	.word	0x0800c337
 800c37c:	0800c337 	.word	0x0800c337
 800c380:	0800c337 	.word	0x0800c337
 800c384:	0800c337 	.word	0x0800c337
 800c388:	0800c4a3 	.word	0x0800c4a3
 800c38c:	0800c479 	.word	0x0800c479
 800c390:	0800c3e7 	.word	0x0800c3e7
 800c394:	0800c3e7 	.word	0x0800c3e7
 800c398:	0800c3e7 	.word	0x0800c3e7
 800c39c:	0800c337 	.word	0x0800c337
 800c3a0:	0800c47d 	.word	0x0800c47d
 800c3a4:	0800c337 	.word	0x0800c337
 800c3a8:	0800c337 	.word	0x0800c337
 800c3ac:	0800c337 	.word	0x0800c337
 800c3b0:	0800c337 	.word	0x0800c337
 800c3b4:	0800c4b3 	.word	0x0800c4b3
 800c3b8:	0800c485 	.word	0x0800c485
 800c3bc:	0800c427 	.word	0x0800c427
 800c3c0:	0800c337 	.word	0x0800c337
 800c3c4:	0800c337 	.word	0x0800c337
 800c3c8:	0800c4af 	.word	0x0800c4af
 800c3cc:	0800c337 	.word	0x0800c337
 800c3d0:	0800c479 	.word	0x0800c479
 800c3d4:	0800c337 	.word	0x0800c337
 800c3d8:	0800c337 	.word	0x0800c337
 800c3dc:	0800c42f 	.word	0x0800c42f
 800c3e0:	3b45      	subs	r3, #69	; 0x45
 800c3e2:	2b02      	cmp	r3, #2
 800c3e4:	d8a7      	bhi.n	800c336 <__ssvfiscanf_r+0xd2>
 800c3e6:	2305      	movs	r3, #5
 800c3e8:	e02b      	b.n	800c442 <__ssvfiscanf_r+0x1de>
 800c3ea:	6863      	ldr	r3, [r4, #4]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	dd0d      	ble.n	800c40c <__ssvfiscanf_r+0x1a8>
 800c3f0:	6823      	ldr	r3, [r4, #0]
 800c3f2:	781a      	ldrb	r2, [r3, #0]
 800c3f4:	4552      	cmp	r2, sl
 800c3f6:	f040 80a1 	bne.w	800c53c <__ssvfiscanf_r+0x2d8>
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	6862      	ldr	r2, [r4, #4]
 800c3fe:	6023      	str	r3, [r4, #0]
 800c400:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c402:	3a01      	subs	r2, #1
 800c404:	3301      	adds	r3, #1
 800c406:	6062      	str	r2, [r4, #4]
 800c408:	9345      	str	r3, [sp, #276]	; 0x114
 800c40a:	e755      	b.n	800c2b8 <__ssvfiscanf_r+0x54>
 800c40c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c40e:	4621      	mov	r1, r4
 800c410:	4630      	mov	r0, r6
 800c412:	4798      	blx	r3
 800c414:	2800      	cmp	r0, #0
 800c416:	d0eb      	beq.n	800c3f0 <__ssvfiscanf_r+0x18c>
 800c418:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c41a:	2800      	cmp	r0, #0
 800c41c:	f040 8084 	bne.w	800c528 <__ssvfiscanf_r+0x2c4>
 800c420:	f04f 30ff 	mov.w	r0, #4294967295
 800c424:	e086      	b.n	800c534 <__ssvfiscanf_r+0x2d0>
 800c426:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c428:	f042 0220 	orr.w	r2, r2, #32
 800c42c:	9241      	str	r2, [sp, #260]	; 0x104
 800c42e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c430:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c434:	9241      	str	r2, [sp, #260]	; 0x104
 800c436:	2210      	movs	r2, #16
 800c438:	2b6f      	cmp	r3, #111	; 0x6f
 800c43a:	9242      	str	r2, [sp, #264]	; 0x108
 800c43c:	bf34      	ite	cc
 800c43e:	2303      	movcc	r3, #3
 800c440:	2304      	movcs	r3, #4
 800c442:	9347      	str	r3, [sp, #284]	; 0x11c
 800c444:	6863      	ldr	r3, [r4, #4]
 800c446:	2b00      	cmp	r3, #0
 800c448:	dd41      	ble.n	800c4ce <__ssvfiscanf_r+0x26a>
 800c44a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c44c:	0659      	lsls	r1, r3, #25
 800c44e:	d404      	bmi.n	800c45a <__ssvfiscanf_r+0x1f6>
 800c450:	6823      	ldr	r3, [r4, #0]
 800c452:	781a      	ldrb	r2, [r3, #0]
 800c454:	5cba      	ldrb	r2, [r7, r2]
 800c456:	0712      	lsls	r2, r2, #28
 800c458:	d440      	bmi.n	800c4dc <__ssvfiscanf_r+0x278>
 800c45a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c45c:	2b02      	cmp	r3, #2
 800c45e:	dc4f      	bgt.n	800c500 <__ssvfiscanf_r+0x29c>
 800c460:	466b      	mov	r3, sp
 800c462:	4622      	mov	r2, r4
 800c464:	a941      	add	r1, sp, #260	; 0x104
 800c466:	4630      	mov	r0, r6
 800c468:	f000 f874 	bl	800c554 <_scanf_chars>
 800c46c:	2801      	cmp	r0, #1
 800c46e:	d065      	beq.n	800c53c <__ssvfiscanf_r+0x2d8>
 800c470:	2802      	cmp	r0, #2
 800c472:	f47f af21 	bne.w	800c2b8 <__ssvfiscanf_r+0x54>
 800c476:	e7cf      	b.n	800c418 <__ssvfiscanf_r+0x1b4>
 800c478:	220a      	movs	r2, #10
 800c47a:	e7dd      	b.n	800c438 <__ssvfiscanf_r+0x1d4>
 800c47c:	2300      	movs	r3, #0
 800c47e:	9342      	str	r3, [sp, #264]	; 0x108
 800c480:	2303      	movs	r3, #3
 800c482:	e7de      	b.n	800c442 <__ssvfiscanf_r+0x1de>
 800c484:	2308      	movs	r3, #8
 800c486:	9342      	str	r3, [sp, #264]	; 0x108
 800c488:	2304      	movs	r3, #4
 800c48a:	e7da      	b.n	800c442 <__ssvfiscanf_r+0x1de>
 800c48c:	4629      	mov	r1, r5
 800c48e:	4640      	mov	r0, r8
 800c490:	f000 f9d6 	bl	800c840 <__sccl>
 800c494:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c496:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c49a:	9341      	str	r3, [sp, #260]	; 0x104
 800c49c:	4605      	mov	r5, r0
 800c49e:	2301      	movs	r3, #1
 800c4a0:	e7cf      	b.n	800c442 <__ssvfiscanf_r+0x1de>
 800c4a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c4a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4a8:	9341      	str	r3, [sp, #260]	; 0x104
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	e7c9      	b.n	800c442 <__ssvfiscanf_r+0x1de>
 800c4ae:	2302      	movs	r3, #2
 800c4b0:	e7c7      	b.n	800c442 <__ssvfiscanf_r+0x1de>
 800c4b2:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c4b4:	06c3      	lsls	r3, r0, #27
 800c4b6:	f53f aeff 	bmi.w	800c2b8 <__ssvfiscanf_r+0x54>
 800c4ba:	9b00      	ldr	r3, [sp, #0]
 800c4bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c4be:	1d19      	adds	r1, r3, #4
 800c4c0:	9100      	str	r1, [sp, #0]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	07c0      	lsls	r0, r0, #31
 800c4c6:	bf4c      	ite	mi
 800c4c8:	801a      	strhmi	r2, [r3, #0]
 800c4ca:	601a      	strpl	r2, [r3, #0]
 800c4cc:	e6f4      	b.n	800c2b8 <__ssvfiscanf_r+0x54>
 800c4ce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c4d0:	4621      	mov	r1, r4
 800c4d2:	4630      	mov	r0, r6
 800c4d4:	4798      	blx	r3
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	d0b7      	beq.n	800c44a <__ssvfiscanf_r+0x1e6>
 800c4da:	e79d      	b.n	800c418 <__ssvfiscanf_r+0x1b4>
 800c4dc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c4de:	3201      	adds	r2, #1
 800c4e0:	9245      	str	r2, [sp, #276]	; 0x114
 800c4e2:	6862      	ldr	r2, [r4, #4]
 800c4e4:	3a01      	subs	r2, #1
 800c4e6:	2a00      	cmp	r2, #0
 800c4e8:	6062      	str	r2, [r4, #4]
 800c4ea:	dd02      	ble.n	800c4f2 <__ssvfiscanf_r+0x28e>
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	6023      	str	r3, [r4, #0]
 800c4f0:	e7ae      	b.n	800c450 <__ssvfiscanf_r+0x1ec>
 800c4f2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c4f4:	4621      	mov	r1, r4
 800c4f6:	4630      	mov	r0, r6
 800c4f8:	4798      	blx	r3
 800c4fa:	2800      	cmp	r0, #0
 800c4fc:	d0a8      	beq.n	800c450 <__ssvfiscanf_r+0x1ec>
 800c4fe:	e78b      	b.n	800c418 <__ssvfiscanf_r+0x1b4>
 800c500:	2b04      	cmp	r3, #4
 800c502:	dc06      	bgt.n	800c512 <__ssvfiscanf_r+0x2ae>
 800c504:	466b      	mov	r3, sp
 800c506:	4622      	mov	r2, r4
 800c508:	a941      	add	r1, sp, #260	; 0x104
 800c50a:	4630      	mov	r0, r6
 800c50c:	f000 f87a 	bl	800c604 <_scanf_i>
 800c510:	e7ac      	b.n	800c46c <__ssvfiscanf_r+0x208>
 800c512:	4b0f      	ldr	r3, [pc, #60]	; (800c550 <__ssvfiscanf_r+0x2ec>)
 800c514:	2b00      	cmp	r3, #0
 800c516:	f43f aecf 	beq.w	800c2b8 <__ssvfiscanf_r+0x54>
 800c51a:	466b      	mov	r3, sp
 800c51c:	4622      	mov	r2, r4
 800c51e:	a941      	add	r1, sp, #260	; 0x104
 800c520:	4630      	mov	r0, r6
 800c522:	f7fc fbcd 	bl	8008cc0 <_scanf_float>
 800c526:	e7a1      	b.n	800c46c <__ssvfiscanf_r+0x208>
 800c528:	89a3      	ldrh	r3, [r4, #12]
 800c52a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c52e:	bf18      	it	ne
 800c530:	f04f 30ff 	movne.w	r0, #4294967295
 800c534:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800c538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c53c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c53e:	e7f9      	b.n	800c534 <__ssvfiscanf_r+0x2d0>
 800c540:	0800c1b1 	.word	0x0800c1b1
 800c544:	0800c22b 	.word	0x0800c22b
 800c548:	0800de11 	.word	0x0800de11
 800c54c:	0800e18a 	.word	0x0800e18a
 800c550:	08008cc1 	.word	0x08008cc1

0800c554 <_scanf_chars>:
 800c554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c558:	4615      	mov	r5, r2
 800c55a:	688a      	ldr	r2, [r1, #8]
 800c55c:	4680      	mov	r8, r0
 800c55e:	460c      	mov	r4, r1
 800c560:	b932      	cbnz	r2, 800c570 <_scanf_chars+0x1c>
 800c562:	698a      	ldr	r2, [r1, #24]
 800c564:	2a00      	cmp	r2, #0
 800c566:	bf0c      	ite	eq
 800c568:	2201      	moveq	r2, #1
 800c56a:	f04f 32ff 	movne.w	r2, #4294967295
 800c56e:	608a      	str	r2, [r1, #8]
 800c570:	6822      	ldr	r2, [r4, #0]
 800c572:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800c600 <_scanf_chars+0xac>
 800c576:	06d1      	lsls	r1, r2, #27
 800c578:	bf5f      	itttt	pl
 800c57a:	681a      	ldrpl	r2, [r3, #0]
 800c57c:	1d11      	addpl	r1, r2, #4
 800c57e:	6019      	strpl	r1, [r3, #0]
 800c580:	6816      	ldrpl	r6, [r2, #0]
 800c582:	2700      	movs	r7, #0
 800c584:	69a0      	ldr	r0, [r4, #24]
 800c586:	b188      	cbz	r0, 800c5ac <_scanf_chars+0x58>
 800c588:	2801      	cmp	r0, #1
 800c58a:	d107      	bne.n	800c59c <_scanf_chars+0x48>
 800c58c:	682b      	ldr	r3, [r5, #0]
 800c58e:	781a      	ldrb	r2, [r3, #0]
 800c590:	6963      	ldr	r3, [r4, #20]
 800c592:	5c9b      	ldrb	r3, [r3, r2]
 800c594:	b953      	cbnz	r3, 800c5ac <_scanf_chars+0x58>
 800c596:	bb27      	cbnz	r7, 800c5e2 <_scanf_chars+0x8e>
 800c598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c59c:	2802      	cmp	r0, #2
 800c59e:	d120      	bne.n	800c5e2 <_scanf_chars+0x8e>
 800c5a0:	682b      	ldr	r3, [r5, #0]
 800c5a2:	781b      	ldrb	r3, [r3, #0]
 800c5a4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c5a8:	071b      	lsls	r3, r3, #28
 800c5aa:	d41a      	bmi.n	800c5e2 <_scanf_chars+0x8e>
 800c5ac:	6823      	ldr	r3, [r4, #0]
 800c5ae:	06da      	lsls	r2, r3, #27
 800c5b0:	bf5e      	ittt	pl
 800c5b2:	682b      	ldrpl	r3, [r5, #0]
 800c5b4:	781b      	ldrbpl	r3, [r3, #0]
 800c5b6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c5ba:	682a      	ldr	r2, [r5, #0]
 800c5bc:	686b      	ldr	r3, [r5, #4]
 800c5be:	3201      	adds	r2, #1
 800c5c0:	602a      	str	r2, [r5, #0]
 800c5c2:	68a2      	ldr	r2, [r4, #8]
 800c5c4:	3b01      	subs	r3, #1
 800c5c6:	3a01      	subs	r2, #1
 800c5c8:	606b      	str	r3, [r5, #4]
 800c5ca:	3701      	adds	r7, #1
 800c5cc:	60a2      	str	r2, [r4, #8]
 800c5ce:	b142      	cbz	r2, 800c5e2 <_scanf_chars+0x8e>
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	dcd7      	bgt.n	800c584 <_scanf_chars+0x30>
 800c5d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c5d8:	4629      	mov	r1, r5
 800c5da:	4640      	mov	r0, r8
 800c5dc:	4798      	blx	r3
 800c5de:	2800      	cmp	r0, #0
 800c5e0:	d0d0      	beq.n	800c584 <_scanf_chars+0x30>
 800c5e2:	6823      	ldr	r3, [r4, #0]
 800c5e4:	f013 0310 	ands.w	r3, r3, #16
 800c5e8:	d105      	bne.n	800c5f6 <_scanf_chars+0xa2>
 800c5ea:	68e2      	ldr	r2, [r4, #12]
 800c5ec:	3201      	adds	r2, #1
 800c5ee:	60e2      	str	r2, [r4, #12]
 800c5f0:	69a2      	ldr	r2, [r4, #24]
 800c5f2:	b102      	cbz	r2, 800c5f6 <_scanf_chars+0xa2>
 800c5f4:	7033      	strb	r3, [r6, #0]
 800c5f6:	6923      	ldr	r3, [r4, #16]
 800c5f8:	441f      	add	r7, r3
 800c5fa:	6127      	str	r7, [r4, #16]
 800c5fc:	2000      	movs	r0, #0
 800c5fe:	e7cb      	b.n	800c598 <_scanf_chars+0x44>
 800c600:	0800de11 	.word	0x0800de11

0800c604 <_scanf_i>:
 800c604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c608:	4698      	mov	r8, r3
 800c60a:	4b74      	ldr	r3, [pc, #464]	; (800c7dc <_scanf_i+0x1d8>)
 800c60c:	460c      	mov	r4, r1
 800c60e:	4682      	mov	sl, r0
 800c610:	4616      	mov	r6, r2
 800c612:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c616:	b087      	sub	sp, #28
 800c618:	ab03      	add	r3, sp, #12
 800c61a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c61e:	4b70      	ldr	r3, [pc, #448]	; (800c7e0 <_scanf_i+0x1dc>)
 800c620:	69a1      	ldr	r1, [r4, #24]
 800c622:	4a70      	ldr	r2, [pc, #448]	; (800c7e4 <_scanf_i+0x1e0>)
 800c624:	2903      	cmp	r1, #3
 800c626:	bf18      	it	ne
 800c628:	461a      	movne	r2, r3
 800c62a:	68a3      	ldr	r3, [r4, #8]
 800c62c:	9201      	str	r2, [sp, #4]
 800c62e:	1e5a      	subs	r2, r3, #1
 800c630:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c634:	bf88      	it	hi
 800c636:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c63a:	4627      	mov	r7, r4
 800c63c:	bf82      	ittt	hi
 800c63e:	eb03 0905 	addhi.w	r9, r3, r5
 800c642:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c646:	60a3      	strhi	r3, [r4, #8]
 800c648:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c64c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c650:	bf98      	it	ls
 800c652:	f04f 0900 	movls.w	r9, #0
 800c656:	6023      	str	r3, [r4, #0]
 800c658:	463d      	mov	r5, r7
 800c65a:	f04f 0b00 	mov.w	fp, #0
 800c65e:	6831      	ldr	r1, [r6, #0]
 800c660:	ab03      	add	r3, sp, #12
 800c662:	7809      	ldrb	r1, [r1, #0]
 800c664:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c668:	2202      	movs	r2, #2
 800c66a:	f7f3 fdc1 	bl	80001f0 <memchr>
 800c66e:	b328      	cbz	r0, 800c6bc <_scanf_i+0xb8>
 800c670:	f1bb 0f01 	cmp.w	fp, #1
 800c674:	d159      	bne.n	800c72a <_scanf_i+0x126>
 800c676:	6862      	ldr	r2, [r4, #4]
 800c678:	b92a      	cbnz	r2, 800c686 <_scanf_i+0x82>
 800c67a:	6822      	ldr	r2, [r4, #0]
 800c67c:	2308      	movs	r3, #8
 800c67e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c682:	6063      	str	r3, [r4, #4]
 800c684:	6022      	str	r2, [r4, #0]
 800c686:	6822      	ldr	r2, [r4, #0]
 800c688:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c68c:	6022      	str	r2, [r4, #0]
 800c68e:	68a2      	ldr	r2, [r4, #8]
 800c690:	1e51      	subs	r1, r2, #1
 800c692:	60a1      	str	r1, [r4, #8]
 800c694:	b192      	cbz	r2, 800c6bc <_scanf_i+0xb8>
 800c696:	6832      	ldr	r2, [r6, #0]
 800c698:	1c51      	adds	r1, r2, #1
 800c69a:	6031      	str	r1, [r6, #0]
 800c69c:	7812      	ldrb	r2, [r2, #0]
 800c69e:	f805 2b01 	strb.w	r2, [r5], #1
 800c6a2:	6872      	ldr	r2, [r6, #4]
 800c6a4:	3a01      	subs	r2, #1
 800c6a6:	2a00      	cmp	r2, #0
 800c6a8:	6072      	str	r2, [r6, #4]
 800c6aa:	dc07      	bgt.n	800c6bc <_scanf_i+0xb8>
 800c6ac:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c6b0:	4631      	mov	r1, r6
 800c6b2:	4650      	mov	r0, sl
 800c6b4:	4790      	blx	r2
 800c6b6:	2800      	cmp	r0, #0
 800c6b8:	f040 8085 	bne.w	800c7c6 <_scanf_i+0x1c2>
 800c6bc:	f10b 0b01 	add.w	fp, fp, #1
 800c6c0:	f1bb 0f03 	cmp.w	fp, #3
 800c6c4:	d1cb      	bne.n	800c65e <_scanf_i+0x5a>
 800c6c6:	6863      	ldr	r3, [r4, #4]
 800c6c8:	b90b      	cbnz	r3, 800c6ce <_scanf_i+0xca>
 800c6ca:	230a      	movs	r3, #10
 800c6cc:	6063      	str	r3, [r4, #4]
 800c6ce:	6863      	ldr	r3, [r4, #4]
 800c6d0:	4945      	ldr	r1, [pc, #276]	; (800c7e8 <_scanf_i+0x1e4>)
 800c6d2:	6960      	ldr	r0, [r4, #20]
 800c6d4:	1ac9      	subs	r1, r1, r3
 800c6d6:	f000 f8b3 	bl	800c840 <__sccl>
 800c6da:	f04f 0b00 	mov.w	fp, #0
 800c6de:	68a3      	ldr	r3, [r4, #8]
 800c6e0:	6822      	ldr	r2, [r4, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d03d      	beq.n	800c762 <_scanf_i+0x15e>
 800c6e6:	6831      	ldr	r1, [r6, #0]
 800c6e8:	6960      	ldr	r0, [r4, #20]
 800c6ea:	f891 c000 	ldrb.w	ip, [r1]
 800c6ee:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c6f2:	2800      	cmp	r0, #0
 800c6f4:	d035      	beq.n	800c762 <_scanf_i+0x15e>
 800c6f6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c6fa:	d124      	bne.n	800c746 <_scanf_i+0x142>
 800c6fc:	0510      	lsls	r0, r2, #20
 800c6fe:	d522      	bpl.n	800c746 <_scanf_i+0x142>
 800c700:	f10b 0b01 	add.w	fp, fp, #1
 800c704:	f1b9 0f00 	cmp.w	r9, #0
 800c708:	d003      	beq.n	800c712 <_scanf_i+0x10e>
 800c70a:	3301      	adds	r3, #1
 800c70c:	f109 39ff 	add.w	r9, r9, #4294967295
 800c710:	60a3      	str	r3, [r4, #8]
 800c712:	6873      	ldr	r3, [r6, #4]
 800c714:	3b01      	subs	r3, #1
 800c716:	2b00      	cmp	r3, #0
 800c718:	6073      	str	r3, [r6, #4]
 800c71a:	dd1b      	ble.n	800c754 <_scanf_i+0x150>
 800c71c:	6833      	ldr	r3, [r6, #0]
 800c71e:	3301      	adds	r3, #1
 800c720:	6033      	str	r3, [r6, #0]
 800c722:	68a3      	ldr	r3, [r4, #8]
 800c724:	3b01      	subs	r3, #1
 800c726:	60a3      	str	r3, [r4, #8]
 800c728:	e7d9      	b.n	800c6de <_scanf_i+0xda>
 800c72a:	f1bb 0f02 	cmp.w	fp, #2
 800c72e:	d1ae      	bne.n	800c68e <_scanf_i+0x8a>
 800c730:	6822      	ldr	r2, [r4, #0]
 800c732:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c736:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c73a:	d1bf      	bne.n	800c6bc <_scanf_i+0xb8>
 800c73c:	2310      	movs	r3, #16
 800c73e:	6063      	str	r3, [r4, #4]
 800c740:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c744:	e7a2      	b.n	800c68c <_scanf_i+0x88>
 800c746:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c74a:	6022      	str	r2, [r4, #0]
 800c74c:	780b      	ldrb	r3, [r1, #0]
 800c74e:	f805 3b01 	strb.w	r3, [r5], #1
 800c752:	e7de      	b.n	800c712 <_scanf_i+0x10e>
 800c754:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c758:	4631      	mov	r1, r6
 800c75a:	4650      	mov	r0, sl
 800c75c:	4798      	blx	r3
 800c75e:	2800      	cmp	r0, #0
 800c760:	d0df      	beq.n	800c722 <_scanf_i+0x11e>
 800c762:	6823      	ldr	r3, [r4, #0]
 800c764:	05d9      	lsls	r1, r3, #23
 800c766:	d50d      	bpl.n	800c784 <_scanf_i+0x180>
 800c768:	42bd      	cmp	r5, r7
 800c76a:	d909      	bls.n	800c780 <_scanf_i+0x17c>
 800c76c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c770:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c774:	4632      	mov	r2, r6
 800c776:	4650      	mov	r0, sl
 800c778:	4798      	blx	r3
 800c77a:	f105 39ff 	add.w	r9, r5, #4294967295
 800c77e:	464d      	mov	r5, r9
 800c780:	42bd      	cmp	r5, r7
 800c782:	d028      	beq.n	800c7d6 <_scanf_i+0x1d2>
 800c784:	6822      	ldr	r2, [r4, #0]
 800c786:	f012 0210 	ands.w	r2, r2, #16
 800c78a:	d113      	bne.n	800c7b4 <_scanf_i+0x1b0>
 800c78c:	702a      	strb	r2, [r5, #0]
 800c78e:	6863      	ldr	r3, [r4, #4]
 800c790:	9e01      	ldr	r6, [sp, #4]
 800c792:	4639      	mov	r1, r7
 800c794:	4650      	mov	r0, sl
 800c796:	47b0      	blx	r6
 800c798:	f8d8 3000 	ldr.w	r3, [r8]
 800c79c:	6821      	ldr	r1, [r4, #0]
 800c79e:	1d1a      	adds	r2, r3, #4
 800c7a0:	f8c8 2000 	str.w	r2, [r8]
 800c7a4:	f011 0f20 	tst.w	r1, #32
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	d00f      	beq.n	800c7cc <_scanf_i+0x1c8>
 800c7ac:	6018      	str	r0, [r3, #0]
 800c7ae:	68e3      	ldr	r3, [r4, #12]
 800c7b0:	3301      	adds	r3, #1
 800c7b2:	60e3      	str	r3, [r4, #12]
 800c7b4:	1bed      	subs	r5, r5, r7
 800c7b6:	44ab      	add	fp, r5
 800c7b8:	6925      	ldr	r5, [r4, #16]
 800c7ba:	445d      	add	r5, fp
 800c7bc:	6125      	str	r5, [r4, #16]
 800c7be:	2000      	movs	r0, #0
 800c7c0:	b007      	add	sp, #28
 800c7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7c6:	f04f 0b00 	mov.w	fp, #0
 800c7ca:	e7ca      	b.n	800c762 <_scanf_i+0x15e>
 800c7cc:	07ca      	lsls	r2, r1, #31
 800c7ce:	bf4c      	ite	mi
 800c7d0:	8018      	strhmi	r0, [r3, #0]
 800c7d2:	6018      	strpl	r0, [r3, #0]
 800c7d4:	e7eb      	b.n	800c7ae <_scanf_i+0x1aa>
 800c7d6:	2001      	movs	r0, #1
 800c7d8:	e7f2      	b.n	800c7c0 <_scanf_i+0x1bc>
 800c7da:	bf00      	nop
 800c7dc:	0800d5ac 	.word	0x0800d5ac
 800c7e0:	0800c9ad 	.word	0x0800c9ad
 800c7e4:	08009f99 	.word	0x08009f99
 800c7e8:	0800e1ae 	.word	0x0800e1ae

0800c7ec <_read_r>:
 800c7ec:	b538      	push	{r3, r4, r5, lr}
 800c7ee:	4d07      	ldr	r5, [pc, #28]	; (800c80c <_read_r+0x20>)
 800c7f0:	4604      	mov	r4, r0
 800c7f2:	4608      	mov	r0, r1
 800c7f4:	4611      	mov	r1, r2
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	602a      	str	r2, [r5, #0]
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	f7f5 fc6c 	bl	80020d8 <_read>
 800c800:	1c43      	adds	r3, r0, #1
 800c802:	d102      	bne.n	800c80a <_read_r+0x1e>
 800c804:	682b      	ldr	r3, [r5, #0]
 800c806:	b103      	cbz	r3, 800c80a <_read_r+0x1e>
 800c808:	6023      	str	r3, [r4, #0]
 800c80a:	bd38      	pop	{r3, r4, r5, pc}
 800c80c:	20005314 	.word	0x20005314

0800c810 <nan>:
 800c810:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c818 <nan+0x8>
 800c814:	4770      	bx	lr
 800c816:	bf00      	nop
 800c818:	00000000 	.word	0x00000000
 800c81c:	7ff80000 	.word	0x7ff80000

0800c820 <_sbrk_r>:
 800c820:	b538      	push	{r3, r4, r5, lr}
 800c822:	4d06      	ldr	r5, [pc, #24]	; (800c83c <_sbrk_r+0x1c>)
 800c824:	2300      	movs	r3, #0
 800c826:	4604      	mov	r4, r0
 800c828:	4608      	mov	r0, r1
 800c82a:	602b      	str	r3, [r5, #0]
 800c82c:	f7f5 fcc2 	bl	80021b4 <_sbrk>
 800c830:	1c43      	adds	r3, r0, #1
 800c832:	d102      	bne.n	800c83a <_sbrk_r+0x1a>
 800c834:	682b      	ldr	r3, [r5, #0]
 800c836:	b103      	cbz	r3, 800c83a <_sbrk_r+0x1a>
 800c838:	6023      	str	r3, [r4, #0]
 800c83a:	bd38      	pop	{r3, r4, r5, pc}
 800c83c:	20005314 	.word	0x20005314

0800c840 <__sccl>:
 800c840:	b570      	push	{r4, r5, r6, lr}
 800c842:	780b      	ldrb	r3, [r1, #0]
 800c844:	4604      	mov	r4, r0
 800c846:	2b5e      	cmp	r3, #94	; 0x5e
 800c848:	bf0b      	itete	eq
 800c84a:	784b      	ldrbeq	r3, [r1, #1]
 800c84c:	1c48      	addne	r0, r1, #1
 800c84e:	1c88      	addeq	r0, r1, #2
 800c850:	2200      	movne	r2, #0
 800c852:	bf08      	it	eq
 800c854:	2201      	moveq	r2, #1
 800c856:	1e61      	subs	r1, r4, #1
 800c858:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c85c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c860:	42a9      	cmp	r1, r5
 800c862:	d1fb      	bne.n	800c85c <__sccl+0x1c>
 800c864:	b90b      	cbnz	r3, 800c86a <__sccl+0x2a>
 800c866:	3801      	subs	r0, #1
 800c868:	bd70      	pop	{r4, r5, r6, pc}
 800c86a:	f082 0101 	eor.w	r1, r2, #1
 800c86e:	54e1      	strb	r1, [r4, r3]
 800c870:	1c42      	adds	r2, r0, #1
 800c872:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800c876:	2d2d      	cmp	r5, #45	; 0x2d
 800c878:	f102 36ff 	add.w	r6, r2, #4294967295
 800c87c:	4610      	mov	r0, r2
 800c87e:	d006      	beq.n	800c88e <__sccl+0x4e>
 800c880:	2d5d      	cmp	r5, #93	; 0x5d
 800c882:	d0f1      	beq.n	800c868 <__sccl+0x28>
 800c884:	b90d      	cbnz	r5, 800c88a <__sccl+0x4a>
 800c886:	4630      	mov	r0, r6
 800c888:	e7ee      	b.n	800c868 <__sccl+0x28>
 800c88a:	462b      	mov	r3, r5
 800c88c:	e7ef      	b.n	800c86e <__sccl+0x2e>
 800c88e:	7816      	ldrb	r6, [r2, #0]
 800c890:	2e5d      	cmp	r6, #93	; 0x5d
 800c892:	d0fa      	beq.n	800c88a <__sccl+0x4a>
 800c894:	42b3      	cmp	r3, r6
 800c896:	dcf8      	bgt.n	800c88a <__sccl+0x4a>
 800c898:	4618      	mov	r0, r3
 800c89a:	3001      	adds	r0, #1
 800c89c:	4286      	cmp	r6, r0
 800c89e:	5421      	strb	r1, [r4, r0]
 800c8a0:	dcfb      	bgt.n	800c89a <__sccl+0x5a>
 800c8a2:	43d8      	mvns	r0, r3
 800c8a4:	4430      	add	r0, r6
 800c8a6:	1c5d      	adds	r5, r3, #1
 800c8a8:	42b3      	cmp	r3, r6
 800c8aa:	bfa8      	it	ge
 800c8ac:	2000      	movge	r0, #0
 800c8ae:	182b      	adds	r3, r5, r0
 800c8b0:	3202      	adds	r2, #2
 800c8b2:	e7de      	b.n	800c872 <__sccl+0x32>

0800c8b4 <_strtoul_l.isra.0>:
 800c8b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c8b8:	4e3b      	ldr	r6, [pc, #236]	; (800c9a8 <_strtoul_l.isra.0+0xf4>)
 800c8ba:	4686      	mov	lr, r0
 800c8bc:	468c      	mov	ip, r1
 800c8be:	4660      	mov	r0, ip
 800c8c0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c8c4:	5da5      	ldrb	r5, [r4, r6]
 800c8c6:	f015 0508 	ands.w	r5, r5, #8
 800c8ca:	d1f8      	bne.n	800c8be <_strtoul_l.isra.0+0xa>
 800c8cc:	2c2d      	cmp	r4, #45	; 0x2d
 800c8ce:	d134      	bne.n	800c93a <_strtoul_l.isra.0+0x86>
 800c8d0:	f89c 4000 	ldrb.w	r4, [ip]
 800c8d4:	f04f 0801 	mov.w	r8, #1
 800c8d8:	f100 0c02 	add.w	ip, r0, #2
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d05e      	beq.n	800c99e <_strtoul_l.isra.0+0xea>
 800c8e0:	2b10      	cmp	r3, #16
 800c8e2:	d10c      	bne.n	800c8fe <_strtoul_l.isra.0+0x4a>
 800c8e4:	2c30      	cmp	r4, #48	; 0x30
 800c8e6:	d10a      	bne.n	800c8fe <_strtoul_l.isra.0+0x4a>
 800c8e8:	f89c 0000 	ldrb.w	r0, [ip]
 800c8ec:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c8f0:	2858      	cmp	r0, #88	; 0x58
 800c8f2:	d14f      	bne.n	800c994 <_strtoul_l.isra.0+0xe0>
 800c8f4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800c8f8:	2310      	movs	r3, #16
 800c8fa:	f10c 0c02 	add.w	ip, ip, #2
 800c8fe:	f04f 37ff 	mov.w	r7, #4294967295
 800c902:	2500      	movs	r5, #0
 800c904:	fbb7 f7f3 	udiv	r7, r7, r3
 800c908:	fb03 f907 	mul.w	r9, r3, r7
 800c90c:	ea6f 0909 	mvn.w	r9, r9
 800c910:	4628      	mov	r0, r5
 800c912:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800c916:	2e09      	cmp	r6, #9
 800c918:	d818      	bhi.n	800c94c <_strtoul_l.isra.0+0x98>
 800c91a:	4634      	mov	r4, r6
 800c91c:	42a3      	cmp	r3, r4
 800c91e:	dd24      	ble.n	800c96a <_strtoul_l.isra.0+0xb6>
 800c920:	2d00      	cmp	r5, #0
 800c922:	db1f      	blt.n	800c964 <_strtoul_l.isra.0+0xb0>
 800c924:	4287      	cmp	r7, r0
 800c926:	d31d      	bcc.n	800c964 <_strtoul_l.isra.0+0xb0>
 800c928:	d101      	bne.n	800c92e <_strtoul_l.isra.0+0x7a>
 800c92a:	45a1      	cmp	r9, r4
 800c92c:	db1a      	blt.n	800c964 <_strtoul_l.isra.0+0xb0>
 800c92e:	fb00 4003 	mla	r0, r0, r3, r4
 800c932:	2501      	movs	r5, #1
 800c934:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c938:	e7eb      	b.n	800c912 <_strtoul_l.isra.0+0x5e>
 800c93a:	2c2b      	cmp	r4, #43	; 0x2b
 800c93c:	bf08      	it	eq
 800c93e:	f89c 4000 	ldrbeq.w	r4, [ip]
 800c942:	46a8      	mov	r8, r5
 800c944:	bf08      	it	eq
 800c946:	f100 0c02 	addeq.w	ip, r0, #2
 800c94a:	e7c7      	b.n	800c8dc <_strtoul_l.isra.0+0x28>
 800c94c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800c950:	2e19      	cmp	r6, #25
 800c952:	d801      	bhi.n	800c958 <_strtoul_l.isra.0+0xa4>
 800c954:	3c37      	subs	r4, #55	; 0x37
 800c956:	e7e1      	b.n	800c91c <_strtoul_l.isra.0+0x68>
 800c958:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800c95c:	2e19      	cmp	r6, #25
 800c95e:	d804      	bhi.n	800c96a <_strtoul_l.isra.0+0xb6>
 800c960:	3c57      	subs	r4, #87	; 0x57
 800c962:	e7db      	b.n	800c91c <_strtoul_l.isra.0+0x68>
 800c964:	f04f 35ff 	mov.w	r5, #4294967295
 800c968:	e7e4      	b.n	800c934 <_strtoul_l.isra.0+0x80>
 800c96a:	2d00      	cmp	r5, #0
 800c96c:	da07      	bge.n	800c97e <_strtoul_l.isra.0+0xca>
 800c96e:	2322      	movs	r3, #34	; 0x22
 800c970:	f8ce 3000 	str.w	r3, [lr]
 800c974:	f04f 30ff 	mov.w	r0, #4294967295
 800c978:	b942      	cbnz	r2, 800c98c <_strtoul_l.isra.0+0xd8>
 800c97a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c97e:	f1b8 0f00 	cmp.w	r8, #0
 800c982:	d000      	beq.n	800c986 <_strtoul_l.isra.0+0xd2>
 800c984:	4240      	negs	r0, r0
 800c986:	2a00      	cmp	r2, #0
 800c988:	d0f7      	beq.n	800c97a <_strtoul_l.isra.0+0xc6>
 800c98a:	b10d      	cbz	r5, 800c990 <_strtoul_l.isra.0+0xdc>
 800c98c:	f10c 31ff 	add.w	r1, ip, #4294967295
 800c990:	6011      	str	r1, [r2, #0]
 800c992:	e7f2      	b.n	800c97a <_strtoul_l.isra.0+0xc6>
 800c994:	2430      	movs	r4, #48	; 0x30
 800c996:	2b00      	cmp	r3, #0
 800c998:	d1b1      	bne.n	800c8fe <_strtoul_l.isra.0+0x4a>
 800c99a:	2308      	movs	r3, #8
 800c99c:	e7af      	b.n	800c8fe <_strtoul_l.isra.0+0x4a>
 800c99e:	2c30      	cmp	r4, #48	; 0x30
 800c9a0:	d0a2      	beq.n	800c8e8 <_strtoul_l.isra.0+0x34>
 800c9a2:	230a      	movs	r3, #10
 800c9a4:	e7ab      	b.n	800c8fe <_strtoul_l.isra.0+0x4a>
 800c9a6:	bf00      	nop
 800c9a8:	0800de11 	.word	0x0800de11

0800c9ac <_strtoul_r>:
 800c9ac:	f7ff bf82 	b.w	800c8b4 <_strtoul_l.isra.0>

0800c9b0 <__submore>:
 800c9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9b4:	460c      	mov	r4, r1
 800c9b6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c9b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9bc:	4299      	cmp	r1, r3
 800c9be:	d11d      	bne.n	800c9fc <__submore+0x4c>
 800c9c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c9c4:	f7ff fa3e 	bl	800be44 <_malloc_r>
 800c9c8:	b918      	cbnz	r0, 800c9d2 <__submore+0x22>
 800c9ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c9ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9d6:	63a3      	str	r3, [r4, #56]	; 0x38
 800c9d8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c9dc:	6360      	str	r0, [r4, #52]	; 0x34
 800c9de:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c9e2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c9e6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c9ea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c9ee:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c9f2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c9f6:	6020      	str	r0, [r4, #0]
 800c9f8:	2000      	movs	r0, #0
 800c9fa:	e7e8      	b.n	800c9ce <__submore+0x1e>
 800c9fc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c9fe:	0077      	lsls	r7, r6, #1
 800ca00:	463a      	mov	r2, r7
 800ca02:	f000 fa2d 	bl	800ce60 <_realloc_r>
 800ca06:	4605      	mov	r5, r0
 800ca08:	2800      	cmp	r0, #0
 800ca0a:	d0de      	beq.n	800c9ca <__submore+0x1a>
 800ca0c:	eb00 0806 	add.w	r8, r0, r6
 800ca10:	4601      	mov	r1, r0
 800ca12:	4632      	mov	r2, r6
 800ca14:	4640      	mov	r0, r8
 800ca16:	f7fb fcd3 	bl	80083c0 <memcpy>
 800ca1a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ca1e:	f8c4 8000 	str.w	r8, [r4]
 800ca22:	e7e9      	b.n	800c9f8 <__submore+0x48>

0800ca24 <__ascii_wctomb>:
 800ca24:	b149      	cbz	r1, 800ca3a <__ascii_wctomb+0x16>
 800ca26:	2aff      	cmp	r2, #255	; 0xff
 800ca28:	bf85      	ittet	hi
 800ca2a:	238a      	movhi	r3, #138	; 0x8a
 800ca2c:	6003      	strhi	r3, [r0, #0]
 800ca2e:	700a      	strbls	r2, [r1, #0]
 800ca30:	f04f 30ff 	movhi.w	r0, #4294967295
 800ca34:	bf98      	it	ls
 800ca36:	2001      	movls	r0, #1
 800ca38:	4770      	bx	lr
 800ca3a:	4608      	mov	r0, r1
 800ca3c:	4770      	bx	lr
	...

0800ca40 <__assert_func>:
 800ca40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca42:	4614      	mov	r4, r2
 800ca44:	461a      	mov	r2, r3
 800ca46:	4b09      	ldr	r3, [pc, #36]	; (800ca6c <__assert_func+0x2c>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4605      	mov	r5, r0
 800ca4c:	68d8      	ldr	r0, [r3, #12]
 800ca4e:	b14c      	cbz	r4, 800ca64 <__assert_func+0x24>
 800ca50:	4b07      	ldr	r3, [pc, #28]	; (800ca70 <__assert_func+0x30>)
 800ca52:	9100      	str	r1, [sp, #0]
 800ca54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca58:	4906      	ldr	r1, [pc, #24]	; (800ca74 <__assert_func+0x34>)
 800ca5a:	462b      	mov	r3, r5
 800ca5c:	f000 f9a6 	bl	800cdac <fiprintf>
 800ca60:	f000 fc3e 	bl	800d2e0 <abort>
 800ca64:	4b04      	ldr	r3, [pc, #16]	; (800ca78 <__assert_func+0x38>)
 800ca66:	461c      	mov	r4, r3
 800ca68:	e7f3      	b.n	800ca52 <__assert_func+0x12>
 800ca6a:	bf00      	nop
 800ca6c:	20000018 	.word	0x20000018
 800ca70:	0800e1b0 	.word	0x0800e1b0
 800ca74:	0800e1bd 	.word	0x0800e1bd
 800ca78:	0800e1eb 	.word	0x0800e1eb

0800ca7c <__sflush_r>:
 800ca7c:	898a      	ldrh	r2, [r1, #12]
 800ca7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca82:	4605      	mov	r5, r0
 800ca84:	0710      	lsls	r0, r2, #28
 800ca86:	460c      	mov	r4, r1
 800ca88:	d458      	bmi.n	800cb3c <__sflush_r+0xc0>
 800ca8a:	684b      	ldr	r3, [r1, #4]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	dc05      	bgt.n	800ca9c <__sflush_r+0x20>
 800ca90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	dc02      	bgt.n	800ca9c <__sflush_r+0x20>
 800ca96:	2000      	movs	r0, #0
 800ca98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca9e:	2e00      	cmp	r6, #0
 800caa0:	d0f9      	beq.n	800ca96 <__sflush_r+0x1a>
 800caa2:	2300      	movs	r3, #0
 800caa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800caa8:	682f      	ldr	r7, [r5, #0]
 800caaa:	602b      	str	r3, [r5, #0]
 800caac:	d032      	beq.n	800cb14 <__sflush_r+0x98>
 800caae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cab0:	89a3      	ldrh	r3, [r4, #12]
 800cab2:	075a      	lsls	r2, r3, #29
 800cab4:	d505      	bpl.n	800cac2 <__sflush_r+0x46>
 800cab6:	6863      	ldr	r3, [r4, #4]
 800cab8:	1ac0      	subs	r0, r0, r3
 800caba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cabc:	b10b      	cbz	r3, 800cac2 <__sflush_r+0x46>
 800cabe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cac0:	1ac0      	subs	r0, r0, r3
 800cac2:	2300      	movs	r3, #0
 800cac4:	4602      	mov	r2, r0
 800cac6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cac8:	6a21      	ldr	r1, [r4, #32]
 800caca:	4628      	mov	r0, r5
 800cacc:	47b0      	blx	r6
 800cace:	1c43      	adds	r3, r0, #1
 800cad0:	89a3      	ldrh	r3, [r4, #12]
 800cad2:	d106      	bne.n	800cae2 <__sflush_r+0x66>
 800cad4:	6829      	ldr	r1, [r5, #0]
 800cad6:	291d      	cmp	r1, #29
 800cad8:	d82c      	bhi.n	800cb34 <__sflush_r+0xb8>
 800cada:	4a2a      	ldr	r2, [pc, #168]	; (800cb84 <__sflush_r+0x108>)
 800cadc:	40ca      	lsrs	r2, r1
 800cade:	07d6      	lsls	r6, r2, #31
 800cae0:	d528      	bpl.n	800cb34 <__sflush_r+0xb8>
 800cae2:	2200      	movs	r2, #0
 800cae4:	6062      	str	r2, [r4, #4]
 800cae6:	04d9      	lsls	r1, r3, #19
 800cae8:	6922      	ldr	r2, [r4, #16]
 800caea:	6022      	str	r2, [r4, #0]
 800caec:	d504      	bpl.n	800caf8 <__sflush_r+0x7c>
 800caee:	1c42      	adds	r2, r0, #1
 800caf0:	d101      	bne.n	800caf6 <__sflush_r+0x7a>
 800caf2:	682b      	ldr	r3, [r5, #0]
 800caf4:	b903      	cbnz	r3, 800caf8 <__sflush_r+0x7c>
 800caf6:	6560      	str	r0, [r4, #84]	; 0x54
 800caf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cafa:	602f      	str	r7, [r5, #0]
 800cafc:	2900      	cmp	r1, #0
 800cafe:	d0ca      	beq.n	800ca96 <__sflush_r+0x1a>
 800cb00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb04:	4299      	cmp	r1, r3
 800cb06:	d002      	beq.n	800cb0e <__sflush_r+0x92>
 800cb08:	4628      	mov	r0, r5
 800cb0a:	f7ff f94b 	bl	800bda4 <_free_r>
 800cb0e:	2000      	movs	r0, #0
 800cb10:	6360      	str	r0, [r4, #52]	; 0x34
 800cb12:	e7c1      	b.n	800ca98 <__sflush_r+0x1c>
 800cb14:	6a21      	ldr	r1, [r4, #32]
 800cb16:	2301      	movs	r3, #1
 800cb18:	4628      	mov	r0, r5
 800cb1a:	47b0      	blx	r6
 800cb1c:	1c41      	adds	r1, r0, #1
 800cb1e:	d1c7      	bne.n	800cab0 <__sflush_r+0x34>
 800cb20:	682b      	ldr	r3, [r5, #0]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d0c4      	beq.n	800cab0 <__sflush_r+0x34>
 800cb26:	2b1d      	cmp	r3, #29
 800cb28:	d001      	beq.n	800cb2e <__sflush_r+0xb2>
 800cb2a:	2b16      	cmp	r3, #22
 800cb2c:	d101      	bne.n	800cb32 <__sflush_r+0xb6>
 800cb2e:	602f      	str	r7, [r5, #0]
 800cb30:	e7b1      	b.n	800ca96 <__sflush_r+0x1a>
 800cb32:	89a3      	ldrh	r3, [r4, #12]
 800cb34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb38:	81a3      	strh	r3, [r4, #12]
 800cb3a:	e7ad      	b.n	800ca98 <__sflush_r+0x1c>
 800cb3c:	690f      	ldr	r7, [r1, #16]
 800cb3e:	2f00      	cmp	r7, #0
 800cb40:	d0a9      	beq.n	800ca96 <__sflush_r+0x1a>
 800cb42:	0793      	lsls	r3, r2, #30
 800cb44:	680e      	ldr	r6, [r1, #0]
 800cb46:	bf08      	it	eq
 800cb48:	694b      	ldreq	r3, [r1, #20]
 800cb4a:	600f      	str	r7, [r1, #0]
 800cb4c:	bf18      	it	ne
 800cb4e:	2300      	movne	r3, #0
 800cb50:	eba6 0807 	sub.w	r8, r6, r7
 800cb54:	608b      	str	r3, [r1, #8]
 800cb56:	f1b8 0f00 	cmp.w	r8, #0
 800cb5a:	dd9c      	ble.n	800ca96 <__sflush_r+0x1a>
 800cb5c:	6a21      	ldr	r1, [r4, #32]
 800cb5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cb60:	4643      	mov	r3, r8
 800cb62:	463a      	mov	r2, r7
 800cb64:	4628      	mov	r0, r5
 800cb66:	47b0      	blx	r6
 800cb68:	2800      	cmp	r0, #0
 800cb6a:	dc06      	bgt.n	800cb7a <__sflush_r+0xfe>
 800cb6c:	89a3      	ldrh	r3, [r4, #12]
 800cb6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb72:	81a3      	strh	r3, [r4, #12]
 800cb74:	f04f 30ff 	mov.w	r0, #4294967295
 800cb78:	e78e      	b.n	800ca98 <__sflush_r+0x1c>
 800cb7a:	4407      	add	r7, r0
 800cb7c:	eba8 0800 	sub.w	r8, r8, r0
 800cb80:	e7e9      	b.n	800cb56 <__sflush_r+0xda>
 800cb82:	bf00      	nop
 800cb84:	20400001 	.word	0x20400001

0800cb88 <_fflush_r>:
 800cb88:	b538      	push	{r3, r4, r5, lr}
 800cb8a:	690b      	ldr	r3, [r1, #16]
 800cb8c:	4605      	mov	r5, r0
 800cb8e:	460c      	mov	r4, r1
 800cb90:	b913      	cbnz	r3, 800cb98 <_fflush_r+0x10>
 800cb92:	2500      	movs	r5, #0
 800cb94:	4628      	mov	r0, r5
 800cb96:	bd38      	pop	{r3, r4, r5, pc}
 800cb98:	b118      	cbz	r0, 800cba2 <_fflush_r+0x1a>
 800cb9a:	6983      	ldr	r3, [r0, #24]
 800cb9c:	b90b      	cbnz	r3, 800cba2 <_fflush_r+0x1a>
 800cb9e:	f000 f887 	bl	800ccb0 <__sinit>
 800cba2:	4b14      	ldr	r3, [pc, #80]	; (800cbf4 <_fflush_r+0x6c>)
 800cba4:	429c      	cmp	r4, r3
 800cba6:	d11b      	bne.n	800cbe0 <_fflush_r+0x58>
 800cba8:	686c      	ldr	r4, [r5, #4]
 800cbaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d0ef      	beq.n	800cb92 <_fflush_r+0xa>
 800cbb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cbb4:	07d0      	lsls	r0, r2, #31
 800cbb6:	d404      	bmi.n	800cbc2 <_fflush_r+0x3a>
 800cbb8:	0599      	lsls	r1, r3, #22
 800cbba:	d402      	bmi.n	800cbc2 <_fflush_r+0x3a>
 800cbbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbbe:	f000 f927 	bl	800ce10 <__retarget_lock_acquire_recursive>
 800cbc2:	4628      	mov	r0, r5
 800cbc4:	4621      	mov	r1, r4
 800cbc6:	f7ff ff59 	bl	800ca7c <__sflush_r>
 800cbca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbcc:	07da      	lsls	r2, r3, #31
 800cbce:	4605      	mov	r5, r0
 800cbd0:	d4e0      	bmi.n	800cb94 <_fflush_r+0xc>
 800cbd2:	89a3      	ldrh	r3, [r4, #12]
 800cbd4:	059b      	lsls	r3, r3, #22
 800cbd6:	d4dd      	bmi.n	800cb94 <_fflush_r+0xc>
 800cbd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbda:	f000 f91a 	bl	800ce12 <__retarget_lock_release_recursive>
 800cbde:	e7d9      	b.n	800cb94 <_fflush_r+0xc>
 800cbe0:	4b05      	ldr	r3, [pc, #20]	; (800cbf8 <_fflush_r+0x70>)
 800cbe2:	429c      	cmp	r4, r3
 800cbe4:	d101      	bne.n	800cbea <_fflush_r+0x62>
 800cbe6:	68ac      	ldr	r4, [r5, #8]
 800cbe8:	e7df      	b.n	800cbaa <_fflush_r+0x22>
 800cbea:	4b04      	ldr	r3, [pc, #16]	; (800cbfc <_fflush_r+0x74>)
 800cbec:	429c      	cmp	r4, r3
 800cbee:	bf08      	it	eq
 800cbf0:	68ec      	ldreq	r4, [r5, #12]
 800cbf2:	e7da      	b.n	800cbaa <_fflush_r+0x22>
 800cbf4:	0800e20c 	.word	0x0800e20c
 800cbf8:	0800e22c 	.word	0x0800e22c
 800cbfc:	0800e1ec 	.word	0x0800e1ec

0800cc00 <std>:
 800cc00:	2300      	movs	r3, #0
 800cc02:	b510      	push	{r4, lr}
 800cc04:	4604      	mov	r4, r0
 800cc06:	e9c0 3300 	strd	r3, r3, [r0]
 800cc0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc0e:	6083      	str	r3, [r0, #8]
 800cc10:	8181      	strh	r1, [r0, #12]
 800cc12:	6643      	str	r3, [r0, #100]	; 0x64
 800cc14:	81c2      	strh	r2, [r0, #14]
 800cc16:	6183      	str	r3, [r0, #24]
 800cc18:	4619      	mov	r1, r3
 800cc1a:	2208      	movs	r2, #8
 800cc1c:	305c      	adds	r0, #92	; 0x5c
 800cc1e:	f7fb fbdd 	bl	80083dc <memset>
 800cc22:	4b05      	ldr	r3, [pc, #20]	; (800cc38 <std+0x38>)
 800cc24:	6263      	str	r3, [r4, #36]	; 0x24
 800cc26:	4b05      	ldr	r3, [pc, #20]	; (800cc3c <std+0x3c>)
 800cc28:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc2a:	4b05      	ldr	r3, [pc, #20]	; (800cc40 <std+0x40>)
 800cc2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cc2e:	4b05      	ldr	r3, [pc, #20]	; (800cc44 <std+0x44>)
 800cc30:	6224      	str	r4, [r4, #32]
 800cc32:	6323      	str	r3, [r4, #48]	; 0x30
 800cc34:	bd10      	pop	{r4, pc}
 800cc36:	bf00      	nop
 800cc38:	08009185 	.word	0x08009185
 800cc3c:	080091ab 	.word	0x080091ab
 800cc40:	080091e3 	.word	0x080091e3
 800cc44:	08009207 	.word	0x08009207

0800cc48 <_cleanup_r>:
 800cc48:	4901      	ldr	r1, [pc, #4]	; (800cc50 <_cleanup_r+0x8>)
 800cc4a:	f000 b8c1 	b.w	800cdd0 <_fwalk_reent>
 800cc4e:	bf00      	nop
 800cc50:	0800cb89 	.word	0x0800cb89

0800cc54 <__sfmoreglue>:
 800cc54:	b570      	push	{r4, r5, r6, lr}
 800cc56:	1e4a      	subs	r2, r1, #1
 800cc58:	2568      	movs	r5, #104	; 0x68
 800cc5a:	4355      	muls	r5, r2
 800cc5c:	460e      	mov	r6, r1
 800cc5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cc62:	f7ff f8ef 	bl	800be44 <_malloc_r>
 800cc66:	4604      	mov	r4, r0
 800cc68:	b140      	cbz	r0, 800cc7c <__sfmoreglue+0x28>
 800cc6a:	2100      	movs	r1, #0
 800cc6c:	e9c0 1600 	strd	r1, r6, [r0]
 800cc70:	300c      	adds	r0, #12
 800cc72:	60a0      	str	r0, [r4, #8]
 800cc74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cc78:	f7fb fbb0 	bl	80083dc <memset>
 800cc7c:	4620      	mov	r0, r4
 800cc7e:	bd70      	pop	{r4, r5, r6, pc}

0800cc80 <__sfp_lock_acquire>:
 800cc80:	4801      	ldr	r0, [pc, #4]	; (800cc88 <__sfp_lock_acquire+0x8>)
 800cc82:	f000 b8c5 	b.w	800ce10 <__retarget_lock_acquire_recursive>
 800cc86:	bf00      	nop
 800cc88:	20005320 	.word	0x20005320

0800cc8c <__sfp_lock_release>:
 800cc8c:	4801      	ldr	r0, [pc, #4]	; (800cc94 <__sfp_lock_release+0x8>)
 800cc8e:	f000 b8c0 	b.w	800ce12 <__retarget_lock_release_recursive>
 800cc92:	bf00      	nop
 800cc94:	20005320 	.word	0x20005320

0800cc98 <__sinit_lock_acquire>:
 800cc98:	4801      	ldr	r0, [pc, #4]	; (800cca0 <__sinit_lock_acquire+0x8>)
 800cc9a:	f000 b8b9 	b.w	800ce10 <__retarget_lock_acquire_recursive>
 800cc9e:	bf00      	nop
 800cca0:	2000531b 	.word	0x2000531b

0800cca4 <__sinit_lock_release>:
 800cca4:	4801      	ldr	r0, [pc, #4]	; (800ccac <__sinit_lock_release+0x8>)
 800cca6:	f000 b8b4 	b.w	800ce12 <__retarget_lock_release_recursive>
 800ccaa:	bf00      	nop
 800ccac:	2000531b 	.word	0x2000531b

0800ccb0 <__sinit>:
 800ccb0:	b510      	push	{r4, lr}
 800ccb2:	4604      	mov	r4, r0
 800ccb4:	f7ff fff0 	bl	800cc98 <__sinit_lock_acquire>
 800ccb8:	69a3      	ldr	r3, [r4, #24]
 800ccba:	b11b      	cbz	r3, 800ccc4 <__sinit+0x14>
 800ccbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccc0:	f7ff bff0 	b.w	800cca4 <__sinit_lock_release>
 800ccc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ccc8:	6523      	str	r3, [r4, #80]	; 0x50
 800ccca:	4b13      	ldr	r3, [pc, #76]	; (800cd18 <__sinit+0x68>)
 800cccc:	4a13      	ldr	r2, [pc, #76]	; (800cd1c <__sinit+0x6c>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	62a2      	str	r2, [r4, #40]	; 0x28
 800ccd2:	42a3      	cmp	r3, r4
 800ccd4:	bf04      	itt	eq
 800ccd6:	2301      	moveq	r3, #1
 800ccd8:	61a3      	streq	r3, [r4, #24]
 800ccda:	4620      	mov	r0, r4
 800ccdc:	f000 f820 	bl	800cd20 <__sfp>
 800cce0:	6060      	str	r0, [r4, #4]
 800cce2:	4620      	mov	r0, r4
 800cce4:	f000 f81c 	bl	800cd20 <__sfp>
 800cce8:	60a0      	str	r0, [r4, #8]
 800ccea:	4620      	mov	r0, r4
 800ccec:	f000 f818 	bl	800cd20 <__sfp>
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	60e0      	str	r0, [r4, #12]
 800ccf4:	2104      	movs	r1, #4
 800ccf6:	6860      	ldr	r0, [r4, #4]
 800ccf8:	f7ff ff82 	bl	800cc00 <std>
 800ccfc:	68a0      	ldr	r0, [r4, #8]
 800ccfe:	2201      	movs	r2, #1
 800cd00:	2109      	movs	r1, #9
 800cd02:	f7ff ff7d 	bl	800cc00 <std>
 800cd06:	68e0      	ldr	r0, [r4, #12]
 800cd08:	2202      	movs	r2, #2
 800cd0a:	2112      	movs	r1, #18
 800cd0c:	f7ff ff78 	bl	800cc00 <std>
 800cd10:	2301      	movs	r3, #1
 800cd12:	61a3      	str	r3, [r4, #24]
 800cd14:	e7d2      	b.n	800ccbc <__sinit+0xc>
 800cd16:	bf00      	nop
 800cd18:	0800dd84 	.word	0x0800dd84
 800cd1c:	0800cc49 	.word	0x0800cc49

0800cd20 <__sfp>:
 800cd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd22:	4607      	mov	r7, r0
 800cd24:	f7ff ffac 	bl	800cc80 <__sfp_lock_acquire>
 800cd28:	4b1e      	ldr	r3, [pc, #120]	; (800cda4 <__sfp+0x84>)
 800cd2a:	681e      	ldr	r6, [r3, #0]
 800cd2c:	69b3      	ldr	r3, [r6, #24]
 800cd2e:	b913      	cbnz	r3, 800cd36 <__sfp+0x16>
 800cd30:	4630      	mov	r0, r6
 800cd32:	f7ff ffbd 	bl	800ccb0 <__sinit>
 800cd36:	3648      	adds	r6, #72	; 0x48
 800cd38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cd3c:	3b01      	subs	r3, #1
 800cd3e:	d503      	bpl.n	800cd48 <__sfp+0x28>
 800cd40:	6833      	ldr	r3, [r6, #0]
 800cd42:	b30b      	cbz	r3, 800cd88 <__sfp+0x68>
 800cd44:	6836      	ldr	r6, [r6, #0]
 800cd46:	e7f7      	b.n	800cd38 <__sfp+0x18>
 800cd48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cd4c:	b9d5      	cbnz	r5, 800cd84 <__sfp+0x64>
 800cd4e:	4b16      	ldr	r3, [pc, #88]	; (800cda8 <__sfp+0x88>)
 800cd50:	60e3      	str	r3, [r4, #12]
 800cd52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cd56:	6665      	str	r5, [r4, #100]	; 0x64
 800cd58:	f000 f859 	bl	800ce0e <__retarget_lock_init_recursive>
 800cd5c:	f7ff ff96 	bl	800cc8c <__sfp_lock_release>
 800cd60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cd64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cd68:	6025      	str	r5, [r4, #0]
 800cd6a:	61a5      	str	r5, [r4, #24]
 800cd6c:	2208      	movs	r2, #8
 800cd6e:	4629      	mov	r1, r5
 800cd70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cd74:	f7fb fb32 	bl	80083dc <memset>
 800cd78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cd7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cd80:	4620      	mov	r0, r4
 800cd82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd84:	3468      	adds	r4, #104	; 0x68
 800cd86:	e7d9      	b.n	800cd3c <__sfp+0x1c>
 800cd88:	2104      	movs	r1, #4
 800cd8a:	4638      	mov	r0, r7
 800cd8c:	f7ff ff62 	bl	800cc54 <__sfmoreglue>
 800cd90:	4604      	mov	r4, r0
 800cd92:	6030      	str	r0, [r6, #0]
 800cd94:	2800      	cmp	r0, #0
 800cd96:	d1d5      	bne.n	800cd44 <__sfp+0x24>
 800cd98:	f7ff ff78 	bl	800cc8c <__sfp_lock_release>
 800cd9c:	230c      	movs	r3, #12
 800cd9e:	603b      	str	r3, [r7, #0]
 800cda0:	e7ee      	b.n	800cd80 <__sfp+0x60>
 800cda2:	bf00      	nop
 800cda4:	0800dd84 	.word	0x0800dd84
 800cda8:	ffff0001 	.word	0xffff0001

0800cdac <fiprintf>:
 800cdac:	b40e      	push	{r1, r2, r3}
 800cdae:	b503      	push	{r0, r1, lr}
 800cdb0:	4601      	mov	r1, r0
 800cdb2:	ab03      	add	r3, sp, #12
 800cdb4:	4805      	ldr	r0, [pc, #20]	; (800cdcc <fiprintf+0x20>)
 800cdb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdba:	6800      	ldr	r0, [r0, #0]
 800cdbc:	9301      	str	r3, [sp, #4]
 800cdbe:	f000 f89f 	bl	800cf00 <_vfiprintf_r>
 800cdc2:	b002      	add	sp, #8
 800cdc4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdc8:	b003      	add	sp, #12
 800cdca:	4770      	bx	lr
 800cdcc:	20000018 	.word	0x20000018

0800cdd0 <_fwalk_reent>:
 800cdd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdd4:	4606      	mov	r6, r0
 800cdd6:	4688      	mov	r8, r1
 800cdd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cddc:	2700      	movs	r7, #0
 800cdde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cde2:	f1b9 0901 	subs.w	r9, r9, #1
 800cde6:	d505      	bpl.n	800cdf4 <_fwalk_reent+0x24>
 800cde8:	6824      	ldr	r4, [r4, #0]
 800cdea:	2c00      	cmp	r4, #0
 800cdec:	d1f7      	bne.n	800cdde <_fwalk_reent+0xe>
 800cdee:	4638      	mov	r0, r7
 800cdf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdf4:	89ab      	ldrh	r3, [r5, #12]
 800cdf6:	2b01      	cmp	r3, #1
 800cdf8:	d907      	bls.n	800ce0a <_fwalk_reent+0x3a>
 800cdfa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cdfe:	3301      	adds	r3, #1
 800ce00:	d003      	beq.n	800ce0a <_fwalk_reent+0x3a>
 800ce02:	4629      	mov	r1, r5
 800ce04:	4630      	mov	r0, r6
 800ce06:	47c0      	blx	r8
 800ce08:	4307      	orrs	r7, r0
 800ce0a:	3568      	adds	r5, #104	; 0x68
 800ce0c:	e7e9      	b.n	800cde2 <_fwalk_reent+0x12>

0800ce0e <__retarget_lock_init_recursive>:
 800ce0e:	4770      	bx	lr

0800ce10 <__retarget_lock_acquire_recursive>:
 800ce10:	4770      	bx	lr

0800ce12 <__retarget_lock_release_recursive>:
 800ce12:	4770      	bx	lr

0800ce14 <memmove>:
 800ce14:	4288      	cmp	r0, r1
 800ce16:	b510      	push	{r4, lr}
 800ce18:	eb01 0402 	add.w	r4, r1, r2
 800ce1c:	d902      	bls.n	800ce24 <memmove+0x10>
 800ce1e:	4284      	cmp	r4, r0
 800ce20:	4623      	mov	r3, r4
 800ce22:	d807      	bhi.n	800ce34 <memmove+0x20>
 800ce24:	1e43      	subs	r3, r0, #1
 800ce26:	42a1      	cmp	r1, r4
 800ce28:	d008      	beq.n	800ce3c <memmove+0x28>
 800ce2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce32:	e7f8      	b.n	800ce26 <memmove+0x12>
 800ce34:	4402      	add	r2, r0
 800ce36:	4601      	mov	r1, r0
 800ce38:	428a      	cmp	r2, r1
 800ce3a:	d100      	bne.n	800ce3e <memmove+0x2a>
 800ce3c:	bd10      	pop	{r4, pc}
 800ce3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce46:	e7f7      	b.n	800ce38 <memmove+0x24>

0800ce48 <__malloc_lock>:
 800ce48:	4801      	ldr	r0, [pc, #4]	; (800ce50 <__malloc_lock+0x8>)
 800ce4a:	f7ff bfe1 	b.w	800ce10 <__retarget_lock_acquire_recursive>
 800ce4e:	bf00      	nop
 800ce50:	2000531c 	.word	0x2000531c

0800ce54 <__malloc_unlock>:
 800ce54:	4801      	ldr	r0, [pc, #4]	; (800ce5c <__malloc_unlock+0x8>)
 800ce56:	f7ff bfdc 	b.w	800ce12 <__retarget_lock_release_recursive>
 800ce5a:	bf00      	nop
 800ce5c:	2000531c 	.word	0x2000531c

0800ce60 <_realloc_r>:
 800ce60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce62:	4607      	mov	r7, r0
 800ce64:	4614      	mov	r4, r2
 800ce66:	460e      	mov	r6, r1
 800ce68:	b921      	cbnz	r1, 800ce74 <_realloc_r+0x14>
 800ce6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ce6e:	4611      	mov	r1, r2
 800ce70:	f7fe bfe8 	b.w	800be44 <_malloc_r>
 800ce74:	b922      	cbnz	r2, 800ce80 <_realloc_r+0x20>
 800ce76:	f7fe ff95 	bl	800bda4 <_free_r>
 800ce7a:	4625      	mov	r5, r4
 800ce7c:	4628      	mov	r0, r5
 800ce7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce80:	f000 fa9a 	bl	800d3b8 <_malloc_usable_size_r>
 800ce84:	42a0      	cmp	r0, r4
 800ce86:	d20f      	bcs.n	800cea8 <_realloc_r+0x48>
 800ce88:	4621      	mov	r1, r4
 800ce8a:	4638      	mov	r0, r7
 800ce8c:	f7fe ffda 	bl	800be44 <_malloc_r>
 800ce90:	4605      	mov	r5, r0
 800ce92:	2800      	cmp	r0, #0
 800ce94:	d0f2      	beq.n	800ce7c <_realloc_r+0x1c>
 800ce96:	4631      	mov	r1, r6
 800ce98:	4622      	mov	r2, r4
 800ce9a:	f7fb fa91 	bl	80083c0 <memcpy>
 800ce9e:	4631      	mov	r1, r6
 800cea0:	4638      	mov	r0, r7
 800cea2:	f7fe ff7f 	bl	800bda4 <_free_r>
 800cea6:	e7e9      	b.n	800ce7c <_realloc_r+0x1c>
 800cea8:	4635      	mov	r5, r6
 800ceaa:	e7e7      	b.n	800ce7c <_realloc_r+0x1c>

0800ceac <__sfputc_r>:
 800ceac:	6893      	ldr	r3, [r2, #8]
 800ceae:	3b01      	subs	r3, #1
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	b410      	push	{r4}
 800ceb4:	6093      	str	r3, [r2, #8]
 800ceb6:	da08      	bge.n	800ceca <__sfputc_r+0x1e>
 800ceb8:	6994      	ldr	r4, [r2, #24]
 800ceba:	42a3      	cmp	r3, r4
 800cebc:	db01      	blt.n	800cec2 <__sfputc_r+0x16>
 800cebe:	290a      	cmp	r1, #10
 800cec0:	d103      	bne.n	800ceca <__sfputc_r+0x1e>
 800cec2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cec6:	f000 b94b 	b.w	800d160 <__swbuf_r>
 800ceca:	6813      	ldr	r3, [r2, #0]
 800cecc:	1c58      	adds	r0, r3, #1
 800cece:	6010      	str	r0, [r2, #0]
 800ced0:	7019      	strb	r1, [r3, #0]
 800ced2:	4608      	mov	r0, r1
 800ced4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ced8:	4770      	bx	lr

0800ceda <__sfputs_r>:
 800ceda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cedc:	4606      	mov	r6, r0
 800cede:	460f      	mov	r7, r1
 800cee0:	4614      	mov	r4, r2
 800cee2:	18d5      	adds	r5, r2, r3
 800cee4:	42ac      	cmp	r4, r5
 800cee6:	d101      	bne.n	800ceec <__sfputs_r+0x12>
 800cee8:	2000      	movs	r0, #0
 800ceea:	e007      	b.n	800cefc <__sfputs_r+0x22>
 800ceec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cef0:	463a      	mov	r2, r7
 800cef2:	4630      	mov	r0, r6
 800cef4:	f7ff ffda 	bl	800ceac <__sfputc_r>
 800cef8:	1c43      	adds	r3, r0, #1
 800cefa:	d1f3      	bne.n	800cee4 <__sfputs_r+0xa>
 800cefc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cf00 <_vfiprintf_r>:
 800cf00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf04:	460d      	mov	r5, r1
 800cf06:	b09d      	sub	sp, #116	; 0x74
 800cf08:	4614      	mov	r4, r2
 800cf0a:	4698      	mov	r8, r3
 800cf0c:	4606      	mov	r6, r0
 800cf0e:	b118      	cbz	r0, 800cf18 <_vfiprintf_r+0x18>
 800cf10:	6983      	ldr	r3, [r0, #24]
 800cf12:	b90b      	cbnz	r3, 800cf18 <_vfiprintf_r+0x18>
 800cf14:	f7ff fecc 	bl	800ccb0 <__sinit>
 800cf18:	4b89      	ldr	r3, [pc, #548]	; (800d140 <_vfiprintf_r+0x240>)
 800cf1a:	429d      	cmp	r5, r3
 800cf1c:	d11b      	bne.n	800cf56 <_vfiprintf_r+0x56>
 800cf1e:	6875      	ldr	r5, [r6, #4]
 800cf20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf22:	07d9      	lsls	r1, r3, #31
 800cf24:	d405      	bmi.n	800cf32 <_vfiprintf_r+0x32>
 800cf26:	89ab      	ldrh	r3, [r5, #12]
 800cf28:	059a      	lsls	r2, r3, #22
 800cf2a:	d402      	bmi.n	800cf32 <_vfiprintf_r+0x32>
 800cf2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf2e:	f7ff ff6f 	bl	800ce10 <__retarget_lock_acquire_recursive>
 800cf32:	89ab      	ldrh	r3, [r5, #12]
 800cf34:	071b      	lsls	r3, r3, #28
 800cf36:	d501      	bpl.n	800cf3c <_vfiprintf_r+0x3c>
 800cf38:	692b      	ldr	r3, [r5, #16]
 800cf3a:	b9eb      	cbnz	r3, 800cf78 <_vfiprintf_r+0x78>
 800cf3c:	4629      	mov	r1, r5
 800cf3e:	4630      	mov	r0, r6
 800cf40:	f000 f960 	bl	800d204 <__swsetup_r>
 800cf44:	b1c0      	cbz	r0, 800cf78 <_vfiprintf_r+0x78>
 800cf46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf48:	07dc      	lsls	r4, r3, #31
 800cf4a:	d50e      	bpl.n	800cf6a <_vfiprintf_r+0x6a>
 800cf4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf50:	b01d      	add	sp, #116	; 0x74
 800cf52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf56:	4b7b      	ldr	r3, [pc, #492]	; (800d144 <_vfiprintf_r+0x244>)
 800cf58:	429d      	cmp	r5, r3
 800cf5a:	d101      	bne.n	800cf60 <_vfiprintf_r+0x60>
 800cf5c:	68b5      	ldr	r5, [r6, #8]
 800cf5e:	e7df      	b.n	800cf20 <_vfiprintf_r+0x20>
 800cf60:	4b79      	ldr	r3, [pc, #484]	; (800d148 <_vfiprintf_r+0x248>)
 800cf62:	429d      	cmp	r5, r3
 800cf64:	bf08      	it	eq
 800cf66:	68f5      	ldreq	r5, [r6, #12]
 800cf68:	e7da      	b.n	800cf20 <_vfiprintf_r+0x20>
 800cf6a:	89ab      	ldrh	r3, [r5, #12]
 800cf6c:	0598      	lsls	r0, r3, #22
 800cf6e:	d4ed      	bmi.n	800cf4c <_vfiprintf_r+0x4c>
 800cf70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf72:	f7ff ff4e 	bl	800ce12 <__retarget_lock_release_recursive>
 800cf76:	e7e9      	b.n	800cf4c <_vfiprintf_r+0x4c>
 800cf78:	2300      	movs	r3, #0
 800cf7a:	9309      	str	r3, [sp, #36]	; 0x24
 800cf7c:	2320      	movs	r3, #32
 800cf7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf82:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf86:	2330      	movs	r3, #48	; 0x30
 800cf88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d14c <_vfiprintf_r+0x24c>
 800cf8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf90:	f04f 0901 	mov.w	r9, #1
 800cf94:	4623      	mov	r3, r4
 800cf96:	469a      	mov	sl, r3
 800cf98:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf9c:	b10a      	cbz	r2, 800cfa2 <_vfiprintf_r+0xa2>
 800cf9e:	2a25      	cmp	r2, #37	; 0x25
 800cfa0:	d1f9      	bne.n	800cf96 <_vfiprintf_r+0x96>
 800cfa2:	ebba 0b04 	subs.w	fp, sl, r4
 800cfa6:	d00b      	beq.n	800cfc0 <_vfiprintf_r+0xc0>
 800cfa8:	465b      	mov	r3, fp
 800cfaa:	4622      	mov	r2, r4
 800cfac:	4629      	mov	r1, r5
 800cfae:	4630      	mov	r0, r6
 800cfb0:	f7ff ff93 	bl	800ceda <__sfputs_r>
 800cfb4:	3001      	adds	r0, #1
 800cfb6:	f000 80aa 	beq.w	800d10e <_vfiprintf_r+0x20e>
 800cfba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfbc:	445a      	add	r2, fp
 800cfbe:	9209      	str	r2, [sp, #36]	; 0x24
 800cfc0:	f89a 3000 	ldrb.w	r3, [sl]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	f000 80a2 	beq.w	800d10e <_vfiprintf_r+0x20e>
 800cfca:	2300      	movs	r3, #0
 800cfcc:	f04f 32ff 	mov.w	r2, #4294967295
 800cfd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfd4:	f10a 0a01 	add.w	sl, sl, #1
 800cfd8:	9304      	str	r3, [sp, #16]
 800cfda:	9307      	str	r3, [sp, #28]
 800cfdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cfe0:	931a      	str	r3, [sp, #104]	; 0x68
 800cfe2:	4654      	mov	r4, sl
 800cfe4:	2205      	movs	r2, #5
 800cfe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfea:	4858      	ldr	r0, [pc, #352]	; (800d14c <_vfiprintf_r+0x24c>)
 800cfec:	f7f3 f900 	bl	80001f0 <memchr>
 800cff0:	9a04      	ldr	r2, [sp, #16]
 800cff2:	b9d8      	cbnz	r0, 800d02c <_vfiprintf_r+0x12c>
 800cff4:	06d1      	lsls	r1, r2, #27
 800cff6:	bf44      	itt	mi
 800cff8:	2320      	movmi	r3, #32
 800cffa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cffe:	0713      	lsls	r3, r2, #28
 800d000:	bf44      	itt	mi
 800d002:	232b      	movmi	r3, #43	; 0x2b
 800d004:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d008:	f89a 3000 	ldrb.w	r3, [sl]
 800d00c:	2b2a      	cmp	r3, #42	; 0x2a
 800d00e:	d015      	beq.n	800d03c <_vfiprintf_r+0x13c>
 800d010:	9a07      	ldr	r2, [sp, #28]
 800d012:	4654      	mov	r4, sl
 800d014:	2000      	movs	r0, #0
 800d016:	f04f 0c0a 	mov.w	ip, #10
 800d01a:	4621      	mov	r1, r4
 800d01c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d020:	3b30      	subs	r3, #48	; 0x30
 800d022:	2b09      	cmp	r3, #9
 800d024:	d94e      	bls.n	800d0c4 <_vfiprintf_r+0x1c4>
 800d026:	b1b0      	cbz	r0, 800d056 <_vfiprintf_r+0x156>
 800d028:	9207      	str	r2, [sp, #28]
 800d02a:	e014      	b.n	800d056 <_vfiprintf_r+0x156>
 800d02c:	eba0 0308 	sub.w	r3, r0, r8
 800d030:	fa09 f303 	lsl.w	r3, r9, r3
 800d034:	4313      	orrs	r3, r2
 800d036:	9304      	str	r3, [sp, #16]
 800d038:	46a2      	mov	sl, r4
 800d03a:	e7d2      	b.n	800cfe2 <_vfiprintf_r+0xe2>
 800d03c:	9b03      	ldr	r3, [sp, #12]
 800d03e:	1d19      	adds	r1, r3, #4
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	9103      	str	r1, [sp, #12]
 800d044:	2b00      	cmp	r3, #0
 800d046:	bfbb      	ittet	lt
 800d048:	425b      	neglt	r3, r3
 800d04a:	f042 0202 	orrlt.w	r2, r2, #2
 800d04e:	9307      	strge	r3, [sp, #28]
 800d050:	9307      	strlt	r3, [sp, #28]
 800d052:	bfb8      	it	lt
 800d054:	9204      	strlt	r2, [sp, #16]
 800d056:	7823      	ldrb	r3, [r4, #0]
 800d058:	2b2e      	cmp	r3, #46	; 0x2e
 800d05a:	d10c      	bne.n	800d076 <_vfiprintf_r+0x176>
 800d05c:	7863      	ldrb	r3, [r4, #1]
 800d05e:	2b2a      	cmp	r3, #42	; 0x2a
 800d060:	d135      	bne.n	800d0ce <_vfiprintf_r+0x1ce>
 800d062:	9b03      	ldr	r3, [sp, #12]
 800d064:	1d1a      	adds	r2, r3, #4
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	9203      	str	r2, [sp, #12]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	bfb8      	it	lt
 800d06e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d072:	3402      	adds	r4, #2
 800d074:	9305      	str	r3, [sp, #20]
 800d076:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d15c <_vfiprintf_r+0x25c>
 800d07a:	7821      	ldrb	r1, [r4, #0]
 800d07c:	2203      	movs	r2, #3
 800d07e:	4650      	mov	r0, sl
 800d080:	f7f3 f8b6 	bl	80001f0 <memchr>
 800d084:	b140      	cbz	r0, 800d098 <_vfiprintf_r+0x198>
 800d086:	2340      	movs	r3, #64	; 0x40
 800d088:	eba0 000a 	sub.w	r0, r0, sl
 800d08c:	fa03 f000 	lsl.w	r0, r3, r0
 800d090:	9b04      	ldr	r3, [sp, #16]
 800d092:	4303      	orrs	r3, r0
 800d094:	3401      	adds	r4, #1
 800d096:	9304      	str	r3, [sp, #16]
 800d098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d09c:	482c      	ldr	r0, [pc, #176]	; (800d150 <_vfiprintf_r+0x250>)
 800d09e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d0a2:	2206      	movs	r2, #6
 800d0a4:	f7f3 f8a4 	bl	80001f0 <memchr>
 800d0a8:	2800      	cmp	r0, #0
 800d0aa:	d03f      	beq.n	800d12c <_vfiprintf_r+0x22c>
 800d0ac:	4b29      	ldr	r3, [pc, #164]	; (800d154 <_vfiprintf_r+0x254>)
 800d0ae:	bb1b      	cbnz	r3, 800d0f8 <_vfiprintf_r+0x1f8>
 800d0b0:	9b03      	ldr	r3, [sp, #12]
 800d0b2:	3307      	adds	r3, #7
 800d0b4:	f023 0307 	bic.w	r3, r3, #7
 800d0b8:	3308      	adds	r3, #8
 800d0ba:	9303      	str	r3, [sp, #12]
 800d0bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0be:	443b      	add	r3, r7
 800d0c0:	9309      	str	r3, [sp, #36]	; 0x24
 800d0c2:	e767      	b.n	800cf94 <_vfiprintf_r+0x94>
 800d0c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0c8:	460c      	mov	r4, r1
 800d0ca:	2001      	movs	r0, #1
 800d0cc:	e7a5      	b.n	800d01a <_vfiprintf_r+0x11a>
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	3401      	adds	r4, #1
 800d0d2:	9305      	str	r3, [sp, #20]
 800d0d4:	4619      	mov	r1, r3
 800d0d6:	f04f 0c0a 	mov.w	ip, #10
 800d0da:	4620      	mov	r0, r4
 800d0dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0e0:	3a30      	subs	r2, #48	; 0x30
 800d0e2:	2a09      	cmp	r2, #9
 800d0e4:	d903      	bls.n	800d0ee <_vfiprintf_r+0x1ee>
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d0c5      	beq.n	800d076 <_vfiprintf_r+0x176>
 800d0ea:	9105      	str	r1, [sp, #20]
 800d0ec:	e7c3      	b.n	800d076 <_vfiprintf_r+0x176>
 800d0ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0f2:	4604      	mov	r4, r0
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	e7f0      	b.n	800d0da <_vfiprintf_r+0x1da>
 800d0f8:	ab03      	add	r3, sp, #12
 800d0fa:	9300      	str	r3, [sp, #0]
 800d0fc:	462a      	mov	r2, r5
 800d0fe:	4b16      	ldr	r3, [pc, #88]	; (800d158 <_vfiprintf_r+0x258>)
 800d100:	a904      	add	r1, sp, #16
 800d102:	4630      	mov	r0, r6
 800d104:	f7fb fa12 	bl	800852c <_printf_float>
 800d108:	4607      	mov	r7, r0
 800d10a:	1c78      	adds	r0, r7, #1
 800d10c:	d1d6      	bne.n	800d0bc <_vfiprintf_r+0x1bc>
 800d10e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d110:	07d9      	lsls	r1, r3, #31
 800d112:	d405      	bmi.n	800d120 <_vfiprintf_r+0x220>
 800d114:	89ab      	ldrh	r3, [r5, #12]
 800d116:	059a      	lsls	r2, r3, #22
 800d118:	d402      	bmi.n	800d120 <_vfiprintf_r+0x220>
 800d11a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d11c:	f7ff fe79 	bl	800ce12 <__retarget_lock_release_recursive>
 800d120:	89ab      	ldrh	r3, [r5, #12]
 800d122:	065b      	lsls	r3, r3, #25
 800d124:	f53f af12 	bmi.w	800cf4c <_vfiprintf_r+0x4c>
 800d128:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d12a:	e711      	b.n	800cf50 <_vfiprintf_r+0x50>
 800d12c:	ab03      	add	r3, sp, #12
 800d12e:	9300      	str	r3, [sp, #0]
 800d130:	462a      	mov	r2, r5
 800d132:	4b09      	ldr	r3, [pc, #36]	; (800d158 <_vfiprintf_r+0x258>)
 800d134:	a904      	add	r1, sp, #16
 800d136:	4630      	mov	r0, r6
 800d138:	f7fb fc9c 	bl	8008a74 <_printf_i>
 800d13c:	e7e4      	b.n	800d108 <_vfiprintf_r+0x208>
 800d13e:	bf00      	nop
 800d140:	0800e20c 	.word	0x0800e20c
 800d144:	0800e22c 	.word	0x0800e22c
 800d148:	0800e1ec 	.word	0x0800e1ec
 800d14c:	0800e184 	.word	0x0800e184
 800d150:	0800e18e 	.word	0x0800e18e
 800d154:	0800852d 	.word	0x0800852d
 800d158:	0800cedb 	.word	0x0800cedb
 800d15c:	0800e18a 	.word	0x0800e18a

0800d160 <__swbuf_r>:
 800d160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d162:	460e      	mov	r6, r1
 800d164:	4614      	mov	r4, r2
 800d166:	4605      	mov	r5, r0
 800d168:	b118      	cbz	r0, 800d172 <__swbuf_r+0x12>
 800d16a:	6983      	ldr	r3, [r0, #24]
 800d16c:	b90b      	cbnz	r3, 800d172 <__swbuf_r+0x12>
 800d16e:	f7ff fd9f 	bl	800ccb0 <__sinit>
 800d172:	4b21      	ldr	r3, [pc, #132]	; (800d1f8 <__swbuf_r+0x98>)
 800d174:	429c      	cmp	r4, r3
 800d176:	d12b      	bne.n	800d1d0 <__swbuf_r+0x70>
 800d178:	686c      	ldr	r4, [r5, #4]
 800d17a:	69a3      	ldr	r3, [r4, #24]
 800d17c:	60a3      	str	r3, [r4, #8]
 800d17e:	89a3      	ldrh	r3, [r4, #12]
 800d180:	071a      	lsls	r2, r3, #28
 800d182:	d52f      	bpl.n	800d1e4 <__swbuf_r+0x84>
 800d184:	6923      	ldr	r3, [r4, #16]
 800d186:	b36b      	cbz	r3, 800d1e4 <__swbuf_r+0x84>
 800d188:	6923      	ldr	r3, [r4, #16]
 800d18a:	6820      	ldr	r0, [r4, #0]
 800d18c:	1ac0      	subs	r0, r0, r3
 800d18e:	6963      	ldr	r3, [r4, #20]
 800d190:	b2f6      	uxtb	r6, r6
 800d192:	4283      	cmp	r3, r0
 800d194:	4637      	mov	r7, r6
 800d196:	dc04      	bgt.n	800d1a2 <__swbuf_r+0x42>
 800d198:	4621      	mov	r1, r4
 800d19a:	4628      	mov	r0, r5
 800d19c:	f7ff fcf4 	bl	800cb88 <_fflush_r>
 800d1a0:	bb30      	cbnz	r0, 800d1f0 <__swbuf_r+0x90>
 800d1a2:	68a3      	ldr	r3, [r4, #8]
 800d1a4:	3b01      	subs	r3, #1
 800d1a6:	60a3      	str	r3, [r4, #8]
 800d1a8:	6823      	ldr	r3, [r4, #0]
 800d1aa:	1c5a      	adds	r2, r3, #1
 800d1ac:	6022      	str	r2, [r4, #0]
 800d1ae:	701e      	strb	r6, [r3, #0]
 800d1b0:	6963      	ldr	r3, [r4, #20]
 800d1b2:	3001      	adds	r0, #1
 800d1b4:	4283      	cmp	r3, r0
 800d1b6:	d004      	beq.n	800d1c2 <__swbuf_r+0x62>
 800d1b8:	89a3      	ldrh	r3, [r4, #12]
 800d1ba:	07db      	lsls	r3, r3, #31
 800d1bc:	d506      	bpl.n	800d1cc <__swbuf_r+0x6c>
 800d1be:	2e0a      	cmp	r6, #10
 800d1c0:	d104      	bne.n	800d1cc <__swbuf_r+0x6c>
 800d1c2:	4621      	mov	r1, r4
 800d1c4:	4628      	mov	r0, r5
 800d1c6:	f7ff fcdf 	bl	800cb88 <_fflush_r>
 800d1ca:	b988      	cbnz	r0, 800d1f0 <__swbuf_r+0x90>
 800d1cc:	4638      	mov	r0, r7
 800d1ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1d0:	4b0a      	ldr	r3, [pc, #40]	; (800d1fc <__swbuf_r+0x9c>)
 800d1d2:	429c      	cmp	r4, r3
 800d1d4:	d101      	bne.n	800d1da <__swbuf_r+0x7a>
 800d1d6:	68ac      	ldr	r4, [r5, #8]
 800d1d8:	e7cf      	b.n	800d17a <__swbuf_r+0x1a>
 800d1da:	4b09      	ldr	r3, [pc, #36]	; (800d200 <__swbuf_r+0xa0>)
 800d1dc:	429c      	cmp	r4, r3
 800d1de:	bf08      	it	eq
 800d1e0:	68ec      	ldreq	r4, [r5, #12]
 800d1e2:	e7ca      	b.n	800d17a <__swbuf_r+0x1a>
 800d1e4:	4621      	mov	r1, r4
 800d1e6:	4628      	mov	r0, r5
 800d1e8:	f000 f80c 	bl	800d204 <__swsetup_r>
 800d1ec:	2800      	cmp	r0, #0
 800d1ee:	d0cb      	beq.n	800d188 <__swbuf_r+0x28>
 800d1f0:	f04f 37ff 	mov.w	r7, #4294967295
 800d1f4:	e7ea      	b.n	800d1cc <__swbuf_r+0x6c>
 800d1f6:	bf00      	nop
 800d1f8:	0800e20c 	.word	0x0800e20c
 800d1fc:	0800e22c 	.word	0x0800e22c
 800d200:	0800e1ec 	.word	0x0800e1ec

0800d204 <__swsetup_r>:
 800d204:	4b32      	ldr	r3, [pc, #200]	; (800d2d0 <__swsetup_r+0xcc>)
 800d206:	b570      	push	{r4, r5, r6, lr}
 800d208:	681d      	ldr	r5, [r3, #0]
 800d20a:	4606      	mov	r6, r0
 800d20c:	460c      	mov	r4, r1
 800d20e:	b125      	cbz	r5, 800d21a <__swsetup_r+0x16>
 800d210:	69ab      	ldr	r3, [r5, #24]
 800d212:	b913      	cbnz	r3, 800d21a <__swsetup_r+0x16>
 800d214:	4628      	mov	r0, r5
 800d216:	f7ff fd4b 	bl	800ccb0 <__sinit>
 800d21a:	4b2e      	ldr	r3, [pc, #184]	; (800d2d4 <__swsetup_r+0xd0>)
 800d21c:	429c      	cmp	r4, r3
 800d21e:	d10f      	bne.n	800d240 <__swsetup_r+0x3c>
 800d220:	686c      	ldr	r4, [r5, #4]
 800d222:	89a3      	ldrh	r3, [r4, #12]
 800d224:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d228:	0719      	lsls	r1, r3, #28
 800d22a:	d42c      	bmi.n	800d286 <__swsetup_r+0x82>
 800d22c:	06dd      	lsls	r5, r3, #27
 800d22e:	d411      	bmi.n	800d254 <__swsetup_r+0x50>
 800d230:	2309      	movs	r3, #9
 800d232:	6033      	str	r3, [r6, #0]
 800d234:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d238:	81a3      	strh	r3, [r4, #12]
 800d23a:	f04f 30ff 	mov.w	r0, #4294967295
 800d23e:	e03e      	b.n	800d2be <__swsetup_r+0xba>
 800d240:	4b25      	ldr	r3, [pc, #148]	; (800d2d8 <__swsetup_r+0xd4>)
 800d242:	429c      	cmp	r4, r3
 800d244:	d101      	bne.n	800d24a <__swsetup_r+0x46>
 800d246:	68ac      	ldr	r4, [r5, #8]
 800d248:	e7eb      	b.n	800d222 <__swsetup_r+0x1e>
 800d24a:	4b24      	ldr	r3, [pc, #144]	; (800d2dc <__swsetup_r+0xd8>)
 800d24c:	429c      	cmp	r4, r3
 800d24e:	bf08      	it	eq
 800d250:	68ec      	ldreq	r4, [r5, #12]
 800d252:	e7e6      	b.n	800d222 <__swsetup_r+0x1e>
 800d254:	0758      	lsls	r0, r3, #29
 800d256:	d512      	bpl.n	800d27e <__swsetup_r+0x7a>
 800d258:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d25a:	b141      	cbz	r1, 800d26e <__swsetup_r+0x6a>
 800d25c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d260:	4299      	cmp	r1, r3
 800d262:	d002      	beq.n	800d26a <__swsetup_r+0x66>
 800d264:	4630      	mov	r0, r6
 800d266:	f7fe fd9d 	bl	800bda4 <_free_r>
 800d26a:	2300      	movs	r3, #0
 800d26c:	6363      	str	r3, [r4, #52]	; 0x34
 800d26e:	89a3      	ldrh	r3, [r4, #12]
 800d270:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d274:	81a3      	strh	r3, [r4, #12]
 800d276:	2300      	movs	r3, #0
 800d278:	6063      	str	r3, [r4, #4]
 800d27a:	6923      	ldr	r3, [r4, #16]
 800d27c:	6023      	str	r3, [r4, #0]
 800d27e:	89a3      	ldrh	r3, [r4, #12]
 800d280:	f043 0308 	orr.w	r3, r3, #8
 800d284:	81a3      	strh	r3, [r4, #12]
 800d286:	6923      	ldr	r3, [r4, #16]
 800d288:	b94b      	cbnz	r3, 800d29e <__swsetup_r+0x9a>
 800d28a:	89a3      	ldrh	r3, [r4, #12]
 800d28c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d294:	d003      	beq.n	800d29e <__swsetup_r+0x9a>
 800d296:	4621      	mov	r1, r4
 800d298:	4630      	mov	r0, r6
 800d29a:	f000 f84d 	bl	800d338 <__smakebuf_r>
 800d29e:	89a0      	ldrh	r0, [r4, #12]
 800d2a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d2a4:	f010 0301 	ands.w	r3, r0, #1
 800d2a8:	d00a      	beq.n	800d2c0 <__swsetup_r+0xbc>
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	60a3      	str	r3, [r4, #8]
 800d2ae:	6963      	ldr	r3, [r4, #20]
 800d2b0:	425b      	negs	r3, r3
 800d2b2:	61a3      	str	r3, [r4, #24]
 800d2b4:	6923      	ldr	r3, [r4, #16]
 800d2b6:	b943      	cbnz	r3, 800d2ca <__swsetup_r+0xc6>
 800d2b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d2bc:	d1ba      	bne.n	800d234 <__swsetup_r+0x30>
 800d2be:	bd70      	pop	{r4, r5, r6, pc}
 800d2c0:	0781      	lsls	r1, r0, #30
 800d2c2:	bf58      	it	pl
 800d2c4:	6963      	ldrpl	r3, [r4, #20]
 800d2c6:	60a3      	str	r3, [r4, #8]
 800d2c8:	e7f4      	b.n	800d2b4 <__swsetup_r+0xb0>
 800d2ca:	2000      	movs	r0, #0
 800d2cc:	e7f7      	b.n	800d2be <__swsetup_r+0xba>
 800d2ce:	bf00      	nop
 800d2d0:	20000018 	.word	0x20000018
 800d2d4:	0800e20c 	.word	0x0800e20c
 800d2d8:	0800e22c 	.word	0x0800e22c
 800d2dc:	0800e1ec 	.word	0x0800e1ec

0800d2e0 <abort>:
 800d2e0:	b508      	push	{r3, lr}
 800d2e2:	2006      	movs	r0, #6
 800d2e4:	f000 f898 	bl	800d418 <raise>
 800d2e8:	2001      	movs	r0, #1
 800d2ea:	f7f4 feeb 	bl	80020c4 <_exit>

0800d2ee <__swhatbuf_r>:
 800d2ee:	b570      	push	{r4, r5, r6, lr}
 800d2f0:	460e      	mov	r6, r1
 800d2f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2f6:	2900      	cmp	r1, #0
 800d2f8:	b096      	sub	sp, #88	; 0x58
 800d2fa:	4614      	mov	r4, r2
 800d2fc:	461d      	mov	r5, r3
 800d2fe:	da07      	bge.n	800d310 <__swhatbuf_r+0x22>
 800d300:	2300      	movs	r3, #0
 800d302:	602b      	str	r3, [r5, #0]
 800d304:	89b3      	ldrh	r3, [r6, #12]
 800d306:	061a      	lsls	r2, r3, #24
 800d308:	d410      	bmi.n	800d32c <__swhatbuf_r+0x3e>
 800d30a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d30e:	e00e      	b.n	800d32e <__swhatbuf_r+0x40>
 800d310:	466a      	mov	r2, sp
 800d312:	f000 f89d 	bl	800d450 <_fstat_r>
 800d316:	2800      	cmp	r0, #0
 800d318:	dbf2      	blt.n	800d300 <__swhatbuf_r+0x12>
 800d31a:	9a01      	ldr	r2, [sp, #4]
 800d31c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d320:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d324:	425a      	negs	r2, r3
 800d326:	415a      	adcs	r2, r3
 800d328:	602a      	str	r2, [r5, #0]
 800d32a:	e7ee      	b.n	800d30a <__swhatbuf_r+0x1c>
 800d32c:	2340      	movs	r3, #64	; 0x40
 800d32e:	2000      	movs	r0, #0
 800d330:	6023      	str	r3, [r4, #0]
 800d332:	b016      	add	sp, #88	; 0x58
 800d334:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d338 <__smakebuf_r>:
 800d338:	898b      	ldrh	r3, [r1, #12]
 800d33a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d33c:	079d      	lsls	r5, r3, #30
 800d33e:	4606      	mov	r6, r0
 800d340:	460c      	mov	r4, r1
 800d342:	d507      	bpl.n	800d354 <__smakebuf_r+0x1c>
 800d344:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d348:	6023      	str	r3, [r4, #0]
 800d34a:	6123      	str	r3, [r4, #16]
 800d34c:	2301      	movs	r3, #1
 800d34e:	6163      	str	r3, [r4, #20]
 800d350:	b002      	add	sp, #8
 800d352:	bd70      	pop	{r4, r5, r6, pc}
 800d354:	ab01      	add	r3, sp, #4
 800d356:	466a      	mov	r2, sp
 800d358:	f7ff ffc9 	bl	800d2ee <__swhatbuf_r>
 800d35c:	9900      	ldr	r1, [sp, #0]
 800d35e:	4605      	mov	r5, r0
 800d360:	4630      	mov	r0, r6
 800d362:	f7fe fd6f 	bl	800be44 <_malloc_r>
 800d366:	b948      	cbnz	r0, 800d37c <__smakebuf_r+0x44>
 800d368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d36c:	059a      	lsls	r2, r3, #22
 800d36e:	d4ef      	bmi.n	800d350 <__smakebuf_r+0x18>
 800d370:	f023 0303 	bic.w	r3, r3, #3
 800d374:	f043 0302 	orr.w	r3, r3, #2
 800d378:	81a3      	strh	r3, [r4, #12]
 800d37a:	e7e3      	b.n	800d344 <__smakebuf_r+0xc>
 800d37c:	4b0d      	ldr	r3, [pc, #52]	; (800d3b4 <__smakebuf_r+0x7c>)
 800d37e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d380:	89a3      	ldrh	r3, [r4, #12]
 800d382:	6020      	str	r0, [r4, #0]
 800d384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d388:	81a3      	strh	r3, [r4, #12]
 800d38a:	9b00      	ldr	r3, [sp, #0]
 800d38c:	6163      	str	r3, [r4, #20]
 800d38e:	9b01      	ldr	r3, [sp, #4]
 800d390:	6120      	str	r0, [r4, #16]
 800d392:	b15b      	cbz	r3, 800d3ac <__smakebuf_r+0x74>
 800d394:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d398:	4630      	mov	r0, r6
 800d39a:	f000 f86b 	bl	800d474 <_isatty_r>
 800d39e:	b128      	cbz	r0, 800d3ac <__smakebuf_r+0x74>
 800d3a0:	89a3      	ldrh	r3, [r4, #12]
 800d3a2:	f023 0303 	bic.w	r3, r3, #3
 800d3a6:	f043 0301 	orr.w	r3, r3, #1
 800d3aa:	81a3      	strh	r3, [r4, #12]
 800d3ac:	89a0      	ldrh	r0, [r4, #12]
 800d3ae:	4305      	orrs	r5, r0
 800d3b0:	81a5      	strh	r5, [r4, #12]
 800d3b2:	e7cd      	b.n	800d350 <__smakebuf_r+0x18>
 800d3b4:	0800cc49 	.word	0x0800cc49

0800d3b8 <_malloc_usable_size_r>:
 800d3b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3bc:	1f18      	subs	r0, r3, #4
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	bfbc      	itt	lt
 800d3c2:	580b      	ldrlt	r3, [r1, r0]
 800d3c4:	18c0      	addlt	r0, r0, r3
 800d3c6:	4770      	bx	lr

0800d3c8 <_raise_r>:
 800d3c8:	291f      	cmp	r1, #31
 800d3ca:	b538      	push	{r3, r4, r5, lr}
 800d3cc:	4604      	mov	r4, r0
 800d3ce:	460d      	mov	r5, r1
 800d3d0:	d904      	bls.n	800d3dc <_raise_r+0x14>
 800d3d2:	2316      	movs	r3, #22
 800d3d4:	6003      	str	r3, [r0, #0]
 800d3d6:	f04f 30ff 	mov.w	r0, #4294967295
 800d3da:	bd38      	pop	{r3, r4, r5, pc}
 800d3dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d3de:	b112      	cbz	r2, 800d3e6 <_raise_r+0x1e>
 800d3e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d3e4:	b94b      	cbnz	r3, 800d3fa <_raise_r+0x32>
 800d3e6:	4620      	mov	r0, r4
 800d3e8:	f000 f830 	bl	800d44c <_getpid_r>
 800d3ec:	462a      	mov	r2, r5
 800d3ee:	4601      	mov	r1, r0
 800d3f0:	4620      	mov	r0, r4
 800d3f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3f6:	f000 b817 	b.w	800d428 <_kill_r>
 800d3fa:	2b01      	cmp	r3, #1
 800d3fc:	d00a      	beq.n	800d414 <_raise_r+0x4c>
 800d3fe:	1c59      	adds	r1, r3, #1
 800d400:	d103      	bne.n	800d40a <_raise_r+0x42>
 800d402:	2316      	movs	r3, #22
 800d404:	6003      	str	r3, [r0, #0]
 800d406:	2001      	movs	r0, #1
 800d408:	e7e7      	b.n	800d3da <_raise_r+0x12>
 800d40a:	2400      	movs	r4, #0
 800d40c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d410:	4628      	mov	r0, r5
 800d412:	4798      	blx	r3
 800d414:	2000      	movs	r0, #0
 800d416:	e7e0      	b.n	800d3da <_raise_r+0x12>

0800d418 <raise>:
 800d418:	4b02      	ldr	r3, [pc, #8]	; (800d424 <raise+0xc>)
 800d41a:	4601      	mov	r1, r0
 800d41c:	6818      	ldr	r0, [r3, #0]
 800d41e:	f7ff bfd3 	b.w	800d3c8 <_raise_r>
 800d422:	bf00      	nop
 800d424:	20000018 	.word	0x20000018

0800d428 <_kill_r>:
 800d428:	b538      	push	{r3, r4, r5, lr}
 800d42a:	4d07      	ldr	r5, [pc, #28]	; (800d448 <_kill_r+0x20>)
 800d42c:	2300      	movs	r3, #0
 800d42e:	4604      	mov	r4, r0
 800d430:	4608      	mov	r0, r1
 800d432:	4611      	mov	r1, r2
 800d434:	602b      	str	r3, [r5, #0]
 800d436:	f7f4 fe35 	bl	80020a4 <_kill>
 800d43a:	1c43      	adds	r3, r0, #1
 800d43c:	d102      	bne.n	800d444 <_kill_r+0x1c>
 800d43e:	682b      	ldr	r3, [r5, #0]
 800d440:	b103      	cbz	r3, 800d444 <_kill_r+0x1c>
 800d442:	6023      	str	r3, [r4, #0]
 800d444:	bd38      	pop	{r3, r4, r5, pc}
 800d446:	bf00      	nop
 800d448:	20005314 	.word	0x20005314

0800d44c <_getpid_r>:
 800d44c:	f7f4 be22 	b.w	8002094 <_getpid>

0800d450 <_fstat_r>:
 800d450:	b538      	push	{r3, r4, r5, lr}
 800d452:	4d07      	ldr	r5, [pc, #28]	; (800d470 <_fstat_r+0x20>)
 800d454:	2300      	movs	r3, #0
 800d456:	4604      	mov	r4, r0
 800d458:	4608      	mov	r0, r1
 800d45a:	4611      	mov	r1, r2
 800d45c:	602b      	str	r3, [r5, #0]
 800d45e:	f7f4 fe80 	bl	8002162 <_fstat>
 800d462:	1c43      	adds	r3, r0, #1
 800d464:	d102      	bne.n	800d46c <_fstat_r+0x1c>
 800d466:	682b      	ldr	r3, [r5, #0]
 800d468:	b103      	cbz	r3, 800d46c <_fstat_r+0x1c>
 800d46a:	6023      	str	r3, [r4, #0]
 800d46c:	bd38      	pop	{r3, r4, r5, pc}
 800d46e:	bf00      	nop
 800d470:	20005314 	.word	0x20005314

0800d474 <_isatty_r>:
 800d474:	b538      	push	{r3, r4, r5, lr}
 800d476:	4d06      	ldr	r5, [pc, #24]	; (800d490 <_isatty_r+0x1c>)
 800d478:	2300      	movs	r3, #0
 800d47a:	4604      	mov	r4, r0
 800d47c:	4608      	mov	r0, r1
 800d47e:	602b      	str	r3, [r5, #0]
 800d480:	f7f4 fe7f 	bl	8002182 <_isatty>
 800d484:	1c43      	adds	r3, r0, #1
 800d486:	d102      	bne.n	800d48e <_isatty_r+0x1a>
 800d488:	682b      	ldr	r3, [r5, #0]
 800d48a:	b103      	cbz	r3, 800d48e <_isatty_r+0x1a>
 800d48c:	6023      	str	r3, [r4, #0]
 800d48e:	bd38      	pop	{r3, r4, r5, pc}
 800d490:	20005314 	.word	0x20005314

0800d494 <_init>:
 800d494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d496:	bf00      	nop
 800d498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d49a:	bc08      	pop	{r3}
 800d49c:	469e      	mov	lr, r3
 800d49e:	4770      	bx	lr

0800d4a0 <_fini>:
 800d4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4a2:	bf00      	nop
 800d4a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4a6:	bc08      	pop	{r3}
 800d4a8:	469e      	mov	lr, r3
 800d4aa:	4770      	bx	lr
