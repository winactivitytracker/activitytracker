
STCubeGenerated.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca0c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e4c  0800cbb0  0800cbb0  0001cbb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f9fc  0800f9fc  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f9fc  0800f9fc  0001f9fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fa04  0800fa04  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fa04  0800fa04  0001fa04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fa08  0800fa08  0001fa08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800fa0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e3c  200001fc  0800fc08  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005038  0800fc08  00025038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002599f  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bf2  00000000  00000000  00045bcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b78  00000000  00000000  0004a7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019c8  00000000  00000000  0004c338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b932  00000000  00000000  0004dd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fdaa  00000000  00000000  00069632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d791  00000000  00000000  000893dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00126b6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ab4  00000000  00000000  00126bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001fc 	.word	0x200001fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cb94 	.word	0x0800cb94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000200 	.word	0x20000200
 80001dc:	0800cb94 	.word	0x0800cb94

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001000:	4a08      	ldr	r2, [pc, #32]	; (8001024 <MX_FREERTOS_Init+0x28>)
 8001002:	2100      	movs	r1, #0
 8001004:	4808      	ldr	r0, [pc, #32]	; (8001028 <MX_FREERTOS_Init+0x2c>)
 8001006:	f004 f829 	bl	800505c <osThreadNew>
 800100a:	4603      	mov	r3, r0
 800100c:	4a07      	ldr	r2, [pc, #28]	; (800102c <MX_FREERTOS_Init+0x30>)
 800100e:	6013      	str	r3, [r2, #0]

  /* creation of Gps */
  GpsHandle = osThreadNew(GpsTask, NULL, &Gps_attributes);
 8001010:	4a07      	ldr	r2, [pc, #28]	; (8001030 <MX_FREERTOS_Init+0x34>)
 8001012:	2100      	movs	r1, #0
 8001014:	4807      	ldr	r0, [pc, #28]	; (8001034 <MX_FREERTOS_Init+0x38>)
 8001016:	f004 f821 	bl	800505c <osThreadNew>
 800101a:	4603      	mov	r3, r0
 800101c:	4a06      	ldr	r2, [pc, #24]	; (8001038 <MX_FREERTOS_Init+0x3c>)
 800101e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	0800f4d0 	.word	0x0800f4d0
 8001028:	0800103d 	.word	0x0800103d
 800102c:	20004c40 	.word	0x20004c40
 8001030:	0800f4f4 	.word	0x0800f4f4
 8001034:	0800104d 	.word	0x0800104d
 8001038:	20004c44 	.word	0x20004c44

0800103c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001044:	2001      	movs	r0, #1
 8001046:	f004 f89b 	bl	8005180 <osDelay>
 800104a:	e7fb      	b.n	8001044 <StartDefaultTask+0x8>

0800104c <GpsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GpsTask */
void GpsTask(void *argument)
{
 800104c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800104e:	b0cb      	sub	sp, #300	; 0x12c
 8001050:	af04      	add	r7, sp, #16
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	6018      	str	r0, [r3, #0]
  {

	  char numbers[256];
		char data [10];

		SSD1306_GotoXY (0,0);
 8001056:	2100      	movs	r1, #0
 8001058:	2000      	movs	r0, #0
 800105a:	f000 fe0d 	bl	8001c78 <SSD1306_GotoXY>
		SSD1306_Puts ("R.A.T:", &Font_11x18, 1);
 800105e:	2201      	movs	r2, #1
 8001060:	4937      	ldr	r1, [pc, #220]	; (8001140 <GpsTask+0xf4>)
 8001062:	4838      	ldr	r0, [pc, #224]	; (8001144 <GpsTask+0xf8>)
 8001064:	f000 fe9e 	bl	8001da4 <SSD1306_Puts>

		SSD1306_GotoXY (0, 20);
 8001068:	2114      	movs	r1, #20
 800106a:	2000      	movs	r0, #0
 800106c:	f000 fe04 	bl	8001c78 <SSD1306_GotoXY>
		sprintf(numbers, "%.2f", GPS.speed_km);
 8001070:	4b35      	ldr	r3, [pc, #212]	; (8001148 <GpsTask+0xfc>)
 8001072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fa6f 	bl	8000558 <__aeabi_f2d>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	f107 0008 	add.w	r0, r7, #8
 8001082:	4932      	ldr	r1, [pc, #200]	; (800114c <GpsTask+0x100>)
 8001084:	f007 fbb2 	bl	80087ec <siprintf>
		SSD1306_Puts(numbers, &Font_16x26, 1);
 8001088:	f107 0308 	add.w	r3, r7, #8
 800108c:	2201      	movs	r2, #1
 800108e:	4930      	ldr	r1, [pc, #192]	; (8001150 <GpsTask+0x104>)
 8001090:	4618      	mov	r0, r3
 8001092:	f000 fe87 	bl	8001da4 <SSD1306_Puts>
		SSD1306_GotoXY (66,34);
 8001096:	2122      	movs	r1, #34	; 0x22
 8001098:	2042      	movs	r0, #66	; 0x42
 800109a:	f000 fded 	bl	8001c78 <SSD1306_GotoXY>
		SSD1306_Puts ("KMPH", &Font_7x10, 1);
 800109e:	2201      	movs	r2, #1
 80010a0:	492c      	ldr	r1, [pc, #176]	; (8001154 <GpsTask+0x108>)
 80010a2:	482d      	ldr	r0, [pc, #180]	; (8001158 <GpsTask+0x10c>)
 80010a4:	f000 fe7e 	bl	8001da4 <SSD1306_Puts>

		SSD1306_GotoXY (0, 45);
 80010a8:	212d      	movs	r1, #45	; 0x2d
 80010aa:	2000      	movs	r0, #0
 80010ac:	f000 fde4 	bl	8001c78 <SSD1306_GotoXY>
		float time = GPS.utc_time +20000;
 80010b0:	4b25      	ldr	r3, [pc, #148]	; (8001148 <GpsTask+0xfc>)
 80010b2:	edd3 7a06 	vldr	s15, [r3, #24]
 80010b6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800115c <GpsTask+0x110>
 80010ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010be:	edc7 7a45 	vstr	s15, [r7, #276]	; 0x114
		sprintf(numbers, "%f", time );
 80010c2:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 80010c6:	f7ff fa47 	bl	8000558 <__aeabi_f2d>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	f107 0008 	add.w	r0, r7, #8
 80010d2:	4923      	ldr	r1, [pc, #140]	; (8001160 <GpsTask+0x114>)
 80010d4:	f007 fb8a 	bl	80087ec <siprintf>
		sprintf(data, "%c%c:%c%c:%c%c", numbers[0], numbers[1], numbers[2], numbers[3], numbers[4], numbers[5]);
 80010d8:	f107 0308 	add.w	r3, r7, #8
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	461d      	mov	r5, r3
 80010e0:	f107 0308 	add.w	r3, r7, #8
 80010e4:	785b      	ldrb	r3, [r3, #1]
 80010e6:	461e      	mov	r6, r3
 80010e8:	f107 0308 	add.w	r3, r7, #8
 80010ec:	789b      	ldrb	r3, [r3, #2]
 80010ee:	461a      	mov	r2, r3
 80010f0:	f107 0308 	add.w	r3, r7, #8
 80010f4:	78db      	ldrb	r3, [r3, #3]
 80010f6:	4619      	mov	r1, r3
 80010f8:	f107 0308 	add.w	r3, r7, #8
 80010fc:	791b      	ldrb	r3, [r3, #4]
 80010fe:	461c      	mov	r4, r3
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	795b      	ldrb	r3, [r3, #5]
 8001106:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800110a:	9303      	str	r3, [sp, #12]
 800110c:	9402      	str	r4, [sp, #8]
 800110e:	9101      	str	r1, [sp, #4]
 8001110:	9200      	str	r2, [sp, #0]
 8001112:	4633      	mov	r3, r6
 8001114:	462a      	mov	r2, r5
 8001116:	4913      	ldr	r1, [pc, #76]	; (8001164 <GpsTask+0x118>)
 8001118:	f007 fb68 	bl	80087ec <siprintf>
		SSD1306_Puts(data, &Font_7x10, 1);
 800111c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001120:	2201      	movs	r2, #1
 8001122:	490c      	ldr	r1, [pc, #48]	; (8001154 <GpsTask+0x108>)
 8001124:	4618      	mov	r0, r3
 8001126:	f000 fe3d 	bl	8001da4 <SSD1306_Puts>

		SSD1306_UpdateScreen();
 800112a:	f000 fcff 	bl	8001b2c <SSD1306_UpdateScreen>

		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 800112e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001132:	480d      	ldr	r0, [pc, #52]	; (8001168 <GpsTask+0x11c>)
 8001134:	f001 fc61 	bl	80029fa <HAL_GPIO_TogglePin>
		osDelay(1);
 8001138:	2001      	movs	r0, #1
 800113a:	f004 f821 	bl	8005180 <osDelay>
  {
 800113e:	e78a      	b.n	8001056 <GpsTask+0xa>
 8001140:	20000008 	.word	0x20000008
 8001144:	0800cbc0 	.word	0x0800cbc0
 8001148:	20004c48 	.word	0x20004c48
 800114c:	0800cbc8 	.word	0x0800cbc8
 8001150:	20000010 	.word	0x20000010
 8001154:	20000000 	.word	0x20000000
 8001158:	0800cbd0 	.word	0x0800cbd0
 800115c:	469c4000 	.word	0x469c4000
 8001160:	0800cbd8 	.word	0x0800cbd8
 8001164:	0800cbdc 	.word	0x0800cbdc
 8001168:	40020400 	.word	0x40020400

0800116c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	4b2d      	ldr	r3, [pc, #180]	; (800123c <MX_GPIO_Init+0xd0>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a2c      	ldr	r2, [pc, #176]	; (800123c <MX_GPIO_Init+0xd0>)
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b2a      	ldr	r3, [pc, #168]	; (800123c <MX_GPIO_Init+0xd0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	4b26      	ldr	r3, [pc, #152]	; (800123c <MX_GPIO_Init+0xd0>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a25      	ldr	r2, [pc, #148]	; (800123c <MX_GPIO_Init+0xd0>)
 80011a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b23      	ldr	r3, [pc, #140]	; (800123c <MX_GPIO_Init+0xd0>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	4b1f      	ldr	r3, [pc, #124]	; (800123c <MX_GPIO_Init+0xd0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a1e      	ldr	r2, [pc, #120]	; (800123c <MX_GPIO_Init+0xd0>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <MX_GPIO_Init+0xd0>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <MX_GPIO_Init+0xd0>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a17      	ldr	r2, [pc, #92]	; (800123c <MX_GPIO_Init+0xd0>)
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <MX_GPIO_Init+0xd0>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	f240 3102 	movw	r1, #770	; 0x302
 80011f8:	4811      	ldr	r0, [pc, #68]	; (8001240 <MX_GPIO_Init+0xd4>)
 80011fa:	f001 fbe5 	bl	80029c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9;
 80011fe:	f240 3302 	movw	r3, #770	; 0x302
 8001202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001204:	2301      	movs	r3, #1
 8001206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4619      	mov	r1, r3
 8001216:	480a      	ldr	r0, [pc, #40]	; (8001240 <MX_GPIO_Init+0xd4>)
 8001218:	f001 fa52 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800121c:	2304      	movs	r3, #4
 800121e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001220:	2300      	movs	r3, #0
 8001222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	4804      	ldr	r0, [pc, #16]	; (8001240 <MX_GPIO_Init+0xd4>)
 8001230:	f001 fa46 	bl	80026c0 <HAL_GPIO_Init>

}
 8001234:	bf00      	nop
 8001236:	3728      	adds	r7, #40	; 0x28
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40023800 	.word	0x40023800
 8001240:	40020400 	.word	0x40020400

08001244 <GPS_Init>:
	CDC_Transmit_FS((unsigned char *) buf, (uint16_t) strlen(buf));
}
#endif

void GPS_Init()
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &GPS.rxTmp, 1);
 8001248:	2201      	movs	r2, #1
 800124a:	4903      	ldr	r1, [pc, #12]	; (8001258 <GPS_Init+0x14>)
 800124c:	4803      	ldr	r0, [pc, #12]	; (800125c <GPS_Init+0x18>)
 800124e:	f003 f938 	bl	80044c2 <HAL_UART_Receive_IT>
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20004ea4 	.word	0x20004ea4
 800125c:	20004fa0 	.word	0x20004fa0

08001260 <GPS_UART_CallBack>:


void GPS_UART_CallBack(){
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	GPS.LastTime=HAL_GetTick();
 8001264:	f001 f8ac 	bl	80023c0 <HAL_GetTick>
 8001268:	4603      	mov	r3, r0
 800126a:	4a35      	ldr	r2, [pc, #212]	; (8001340 <GPS_UART_CallBack+0xe0>)
 800126c:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
	static int i = 0;
	if(GPS.rxTmp != '\n' && GPS.rxIndex < sizeof(GPS.rxBuffer)-2)
 8001270:	4b33      	ldr	r3, [pc, #204]	; (8001340 <GPS_UART_CallBack+0xe0>)
 8001272:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8001276:	2b0a      	cmp	r3, #10
 8001278:	d044      	beq.n	8001304 <GPS_UART_CallBack+0xa4>
 800127a:	4b31      	ldr	r3, [pc, #196]	; (8001340 <GPS_UART_CallBack+0xe0>)
 800127c:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 8001280:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8001284:	d23e      	bcs.n	8001304 <GPS_UART_CallBack+0xa4>
	{
		if(i % 2)
 8001286:	4b2f      	ldr	r3, [pc, #188]	; (8001344 <GPS_UART_CallBack+0xe4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b00      	cmp	r3, #0
 8001290:	d032      	beq.n	80012f8 <GPS_UART_CallBack+0x98>
		{
			if(GPS.rxBuffer[GPS.rxIndex - 1]== ',' && GPS.rxTmp == ',') {  // check n-1 and n chr's for two ',,'
 8001292:	4b2b      	ldr	r3, [pc, #172]	; (8001340 <GPS_UART_CallBack+0xe0>)
 8001294:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 8001298:	3b01      	subs	r3, #1
 800129a:	4a29      	ldr	r2, [pc, #164]	; (8001340 <GPS_UART_CallBack+0xe0>)
 800129c:	4413      	add	r3, r2
 800129e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80012a2:	2b2c      	cmp	r3, #44	; 0x2c
 80012a4:	d115      	bne.n	80012d2 <GPS_UART_CallBack+0x72>
 80012a6:	4b26      	ldr	r3, [pc, #152]	; (8001340 <GPS_UART_CallBack+0xe0>)
 80012a8:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80012ac:	2b2c      	cmp	r3, #44	; 0x2c
 80012ae:	d110      	bne.n	80012d2 <GPS_UART_CallBack+0x72>
				GPS.rxBuffer[GPS.rxIndex] = '0';      // add a '0'
 80012b0:	4b23      	ldr	r3, [pc, #140]	; (8001340 <GPS_UART_CallBack+0xe0>)
 80012b2:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 80012b6:	461a      	mov	r2, r3
 80012b8:	4b21      	ldr	r3, [pc, #132]	; (8001340 <GPS_UART_CallBack+0xe0>)
 80012ba:	4413      	add	r3, r2
 80012bc:	2230      	movs	r2, #48	; 0x30
 80012be:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
				GPS.rxIndex++;
 80012c2:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <GPS_UART_CallBack+0xe0>)
 80012c4:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 80012c8:	3301      	adds	r3, #1
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <GPS_UART_CallBack+0xe0>)
 80012ce:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
			}

			GPS.rxBuffer[GPS.rxIndex] = GPS.rxTmp;
 80012d2:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <GPS_UART_CallBack+0xe0>)
 80012d4:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 80012d8:	4619      	mov	r1, r3
 80012da:	4b19      	ldr	r3, [pc, #100]	; (8001340 <GPS_UART_CallBack+0xe0>)
 80012dc:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 80012e0:	4b17      	ldr	r3, [pc, #92]	; (8001340 <GPS_UART_CallBack+0xe0>)
 80012e2:	440b      	add	r3, r1
 80012e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

			GPS.rxIndex++;
 80012e8:	4b15      	ldr	r3, [pc, #84]	; (8001340 <GPS_UART_CallBack+0xe0>)
 80012ea:	f8b3 325a 	ldrh.w	r3, [r3, #602]	; 0x25a
 80012ee:	3301      	adds	r3, #1
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <GPS_UART_CallBack+0xe0>)
 80012f4:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
		}
		i++;
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <GPS_UART_CallBack+0xe4>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	3301      	adds	r3, #1
 80012fe:	4a11      	ldr	r2, [pc, #68]	; (8001344 <GPS_UART_CallBack+0xe4>)
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	e015      	b.n	8001330 <GPS_UART_CallBack+0xd0>
	}
	else
	{

		if(GPS_validate((char*) GPS.rxBuffer))
 8001304:	4810      	ldr	r0, [pc, #64]	; (8001348 <GPS_UART_CallBack+0xe8>)
 8001306:	f000 f825 	bl	8001354 <GPS_validate>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d002      	beq.n	8001316 <GPS_UART_CallBack+0xb6>
			GPS_parse((char*) GPS.rxBuffer);
 8001310:	480d      	ldr	r0, [pc, #52]	; (8001348 <GPS_UART_CallBack+0xe8>)
 8001312:	f000 f881 	bl	8001418 <GPS_parse>
		GPS.rxIndex=0;
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <GPS_UART_CallBack+0xe0>)
 8001318:	2200      	movs	r2, #0
 800131a:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
		i = 0;
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <GPS_UART_CallBack+0xe4>)
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
		memset(GPS.rxBuffer, 0, sizeof(GPS.rxBuffer));
 8001324:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001328:	2100      	movs	r1, #0
 800132a:	4807      	ldr	r0, [pc, #28]	; (8001348 <GPS_UART_CallBack+0xe8>)
 800132c:	f006 fbd6 	bl	8007adc <memset>
	}
	HAL_UART_Receive_IT(GPS_USART, &GPS.rxTmp, 1);
 8001330:	2201      	movs	r2, #1
 8001332:	4906      	ldr	r1, [pc, #24]	; (800134c <GPS_UART_CallBack+0xec>)
 8001334:	4806      	ldr	r0, [pc, #24]	; (8001350 <GPS_UART_CallBack+0xf0>)
 8001336:	f003 f8c4 	bl	80044c2 <HAL_UART_Receive_IT>
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20004c48 	.word	0x20004c48
 8001344:	20000218 	.word	0x20000218
 8001348:	20004ca1 	.word	0x20004ca1
 800134c:	20004ea4 	.word	0x20004ea4
 8001350:	20004fa0 	.word	0x20004fa0

08001354 <GPS_validate>:


int GPS_validate(char *nmeastr){
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8001360:	2300      	movs	r3, #0
 8001362:	613b      	str	r3, [r7, #16]


    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	4413      	add	r3, r2
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b24      	cmp	r3, #36	; 0x24
 800136e:	d103      	bne.n	8001378 <GPS_validate+0x24>
        i++;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	3301      	adds	r3, #1
 8001374:	617b      	str	r3, [r7, #20]
    else
        return 0;


    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001376:	e00c      	b.n	8001392 <GPS_validate+0x3e>
        return 0;
 8001378:	2300      	movs	r3, #0
 800137a:	e047      	b.n	800140c <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	461a      	mov	r2, r3
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	4053      	eors	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        i++;
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	3301      	adds	r3, #1
 8001390:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	4413      	add	r3, r2
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d008      	beq.n	80013b0 <GPS_validate+0x5c>
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	4413      	add	r3, r2
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b2a      	cmp	r3, #42	; 0x2a
 80013a8:	d002      	beq.n	80013b0 <GPS_validate+0x5c>
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	2b4a      	cmp	r3, #74	; 0x4a
 80013ae:	dde5      	ble.n	800137c <GPS_validate+0x28>
    }

    if(i >= 75){
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	2b4a      	cmp	r3, #74	; 0x4a
 80013b4:	dd01      	ble.n	80013ba <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 80013b6:	2300      	movs	r3, #0
 80013b8:	e028      	b.n	800140c <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	4413      	add	r3, r2
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b2a      	cmp	r3, #42	; 0x2a
 80013c4:	d119      	bne.n	80013fa <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	3301      	adds	r3, #1
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	3302      	adds	r3, #2
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 80013e2:	f107 0308 	add.w	r3, r7, #8
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	490a      	ldr	r1, [pc, #40]	; (8001414 <GPS_validate+0xc0>)
 80013ea:	4618      	mov	r0, r3
 80013ec:	f007 f9fe 	bl	80087ec <siprintf>

    return((checkcalcstr[0] == check[0])
 80013f0:	7a3a      	ldrb	r2, [r7, #8]
 80013f2:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d108      	bne.n	800140a <GPS_validate+0xb6>
 80013f8:	e001      	b.n	80013fe <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 80013fa:	2300      	movs	r3, #0
 80013fc:	e006      	b.n	800140c <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80013fe:	7a7a      	ldrb	r2, [r7, #9]
 8001400:	7b7b      	ldrb	r3, [r7, #13]
 8001402:	429a      	cmp	r2, r3
 8001404:	d101      	bne.n	800140a <GPS_validate+0xb6>
 8001406:	2301      	movs	r3, #1
 8001408:	e000      	b.n	800140c <GPS_validate+0xb8>
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	0800cbec 	.word	0x0800cbec

08001418 <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	; 0x28
 800141c:	af08      	add	r7, sp, #32
 800141e:	6078      	str	r0, [r7, #4]



	   if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 8001420:	2206      	movs	r2, #6
 8001422:	494a      	ldr	r1, [pc, #296]	; (800154c <GPS_parse+0x134>)
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f007 fa72 	bl	800890e <strncmp>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d118      	bne.n	8001462 <GPS_parse+0x4a>

	    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1)
 8001430:	4b47      	ldr	r3, [pc, #284]	; (8001550 <GPS_parse+0x138>)
 8001432:	9307      	str	r3, [sp, #28]
 8001434:	4b47      	ldr	r3, [pc, #284]	; (8001554 <GPS_parse+0x13c>)
 8001436:	9306      	str	r3, [sp, #24]
 8001438:	4b47      	ldr	r3, [pc, #284]	; (8001558 <GPS_parse+0x140>)
 800143a:	9305      	str	r3, [sp, #20]
 800143c:	4b47      	ldr	r3, [pc, #284]	; (800155c <GPS_parse+0x144>)
 800143e:	9304      	str	r3, [sp, #16]
 8001440:	4b47      	ldr	r3, [pc, #284]	; (8001560 <GPS_parse+0x148>)
 8001442:	9303      	str	r3, [sp, #12]
 8001444:	4b47      	ldr	r3, [pc, #284]	; (8001564 <GPS_parse+0x14c>)
 8001446:	9302      	str	r3, [sp, #8]
 8001448:	4b47      	ldr	r3, [pc, #284]	; (8001568 <GPS_parse+0x150>)
 800144a:	9301      	str	r3, [sp, #4]
 800144c:	4b47      	ldr	r3, [pc, #284]	; (800156c <GPS_parse+0x154>)
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	4b47      	ldr	r3, [pc, #284]	; (8001570 <GPS_parse+0x158>)
 8001452:	4a48      	ldr	r2, [pc, #288]	; (8001574 <GPS_parse+0x15c>)
 8001454:	4948      	ldr	r1, [pc, #288]	; (8001578 <GPS_parse+0x160>)
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f007 f9e8 	bl	800882c <siscanf>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	e070      	b.n	8001544 <GPS_parse+0x12c>
	    		return;
	    }
	    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 8001462:	2206      	movs	r2, #6
 8001464:	4945      	ldr	r1, [pc, #276]	; (800157c <GPS_parse+0x164>)
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f007 fa51 	bl	800890e <strncmp>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d114      	bne.n	800149c <GPS_parse+0x84>

	    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 8001472:	4b43      	ldr	r3, [pc, #268]	; (8001580 <GPS_parse+0x168>)
 8001474:	9305      	str	r3, [sp, #20]
 8001476:	4b43      	ldr	r3, [pc, #268]	; (8001584 <GPS_parse+0x16c>)
 8001478:	9304      	str	r3, [sp, #16]
 800147a:	4b43      	ldr	r3, [pc, #268]	; (8001588 <GPS_parse+0x170>)
 800147c:	9303      	str	r3, [sp, #12]
 800147e:	4b39      	ldr	r3, [pc, #228]	; (8001564 <GPS_parse+0x14c>)
 8001480:	9302      	str	r3, [sp, #8]
 8001482:	4b39      	ldr	r3, [pc, #228]	; (8001568 <GPS_parse+0x150>)
 8001484:	9301      	str	r3, [sp, #4]
 8001486:	4b39      	ldr	r3, [pc, #228]	; (800156c <GPS_parse+0x154>)
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	4b39      	ldr	r3, [pc, #228]	; (8001570 <GPS_parse+0x158>)
 800148c:	4a39      	ldr	r2, [pc, #228]	; (8001574 <GPS_parse+0x15c>)
 800148e:	493f      	ldr	r1, [pc, #252]	; (800158c <GPS_parse+0x174>)
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f007 f9cb 	bl	800882c <siscanf>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	e053      	b.n	8001544 <GPS_parse+0x12c>
	    		return;
	    }
	    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 800149c:	2206      	movs	r2, #6
 800149e:	493c      	ldr	r1, [pc, #240]	; (8001590 <GPS_parse+0x178>)
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f007 fa34 	bl	800890e <strncmp>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d12f      	bne.n	800150c <GPS_parse+0xf4>

	        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 80014ac:	4b39      	ldr	r3, [pc, #228]	; (8001594 <GPS_parse+0x17c>)
 80014ae:	9303      	str	r3, [sp, #12]
 80014b0:	4b30      	ldr	r3, [pc, #192]	; (8001574 <GPS_parse+0x15c>)
 80014b2:	9302      	str	r3, [sp, #8]
 80014b4:	4b2b      	ldr	r3, [pc, #172]	; (8001564 <GPS_parse+0x14c>)
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <GPS_parse+0x150>)
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	4b2b      	ldr	r3, [pc, #172]	; (800156c <GPS_parse+0x154>)
 80014be:	4a2c      	ldr	r2, [pc, #176]	; (8001570 <GPS_parse+0x158>)
 80014c0:	4935      	ldr	r1, [pc, #212]	; (8001598 <GPS_parse+0x180>)
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f007 f9b2 	bl	800882c <siscanf>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	dd3a      	ble.n	8001544 <GPS_parse+0x12c>
	        {
				GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80014ce:	4b33      	ldr	r3, [pc, #204]	; (800159c <GPS_parse+0x184>)
 80014d0:	edd3 7a05 	vldr	s15, [r3, #20]
 80014d4:	4b31      	ldr	r3, [pc, #196]	; (800159c <GPS_parse+0x184>)
 80014d6:	7f1b      	ldrb	r3, [r3, #28]
 80014d8:	4618      	mov	r0, r3
 80014da:	eeb0 0a67 	vmov.f32	s0, s15
 80014de:	f000 f871 	bl	80015c4 <GPS_nmea_to_dec>
 80014e2:	eef0 7a40 	vmov.f32	s15, s0
 80014e6:	4b2d      	ldr	r3, [pc, #180]	; (800159c <GPS_parse+0x184>)
 80014e8:	edc3 7a01 	vstr	s15, [r3, #4]
				GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80014ec:	4b2b      	ldr	r3, [pc, #172]	; (800159c <GPS_parse+0x184>)
 80014ee:	edd3 7a04 	vldr	s15, [r3, #16]
 80014f2:	4b2a      	ldr	r3, [pc, #168]	; (800159c <GPS_parse+0x184>)
 80014f4:	7f5b      	ldrb	r3, [r3, #29]
 80014f6:	4618      	mov	r0, r3
 80014f8:	eeb0 0a67 	vmov.f32	s0, s15
 80014fc:	f000 f862 	bl	80015c4 <GPS_nmea_to_dec>
 8001500:	eef0 7a40 	vmov.f32	s15, s0
 8001504:	4b25      	ldr	r3, [pc, #148]	; (800159c <GPS_parse+0x184>)
 8001506:	edc3 7a00 	vstr	s15, [r3]

				return;
 800150a:	e01b      	b.n	8001544 <GPS_parse+0x12c>
			}
	    }
	    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 800150c:	2206      	movs	r2, #6
 800150e:	4924      	ldr	r1, [pc, #144]	; (80015a0 <GPS_parse+0x188>)
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f007 f9fc 	bl	800890e <strncmp>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d113      	bne.n	8001544 <GPS_parse+0x12c>

			if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 800151c:	4b21      	ldr	r3, [pc, #132]	; (80015a4 <GPS_parse+0x18c>)
 800151e:	9305      	str	r3, [sp, #20]
 8001520:	4b21      	ldr	r3, [pc, #132]	; (80015a8 <GPS_parse+0x190>)
 8001522:	9304      	str	r3, [sp, #16]
 8001524:	4b21      	ldr	r3, [pc, #132]	; (80015ac <GPS_parse+0x194>)
 8001526:	9303      	str	r3, [sp, #12]
 8001528:	4b17      	ldr	r3, [pc, #92]	; (8001588 <GPS_parse+0x170>)
 800152a:	9302      	str	r3, [sp, #8]
 800152c:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <GPS_parse+0x198>)
 800152e:	9301      	str	r3, [sp, #4]
 8001530:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <GPS_parse+0x19c>)
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <GPS_parse+0x1a0>)
 8001536:	4a21      	ldr	r2, [pc, #132]	; (80015bc <GPS_parse+0x1a4>)
 8001538:	4921      	ldr	r1, [pc, #132]	; (80015c0 <GPS_parse+0x1a8>)
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f007 f976 	bl	800882c <siscanf>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
				return;

	    }
	}
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	0800cbf4 	.word	0x0800cbf4
 8001550:	20004c78 	.word	0x20004c78
 8001554:	20004c74 	.word	0x20004c74
 8001558:	20004c70 	.word	0x20004c70
 800155c:	20004c6c 	.word	0x20004c6c
 8001560:	20004c68 	.word	0x20004c68
 8001564:	20004c65 	.word	0x20004c65
 8001568:	20004c58 	.word	0x20004c58
 800156c:	20004c64 	.word	0x20004c64
 8001570:	20004c5c 	.word	0x20004c5c
 8001574:	20004c60 	.word	0x20004c60
 8001578:	0800cbfc 	.word	0x0800cbfc
 800157c:	0800cc24 	.word	0x0800cc24
 8001580:	20004c84 	.word	0x20004c84
 8001584:	20004c80 	.word	0x20004c80
 8001588:	20004c7c 	.word	0x20004c7c
 800158c:	0800cc2c 	.word	0x0800cc2c
 8001590:	0800cc4c 	.word	0x0800cc4c
 8001594:	20004c88 	.word	0x20004c88
 8001598:	0800cc54 	.word	0x0800cc54
 800159c:	20004c48 	.word	0x20004c48
 80015a0:	0800cc70 	.word	0x0800cc70
 80015a4:	20004ca0 	.word	0x20004ca0
 80015a8:	20004c9c 	.word	0x20004c9c
 80015ac:	20004c99 	.word	0x20004c99
 80015b0:	20004c98 	.word	0x20004c98
 80015b4:	20004c94 	.word	0x20004c94
 80015b8:	20004c90 	.word	0x20004c90
 80015bc:	20004c8c 	.word	0x20004c8c
 80015c0:	0800cc78 	.word	0x0800cc78

080015c4 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 80015c4:	b480      	push	{r7}
 80015c6:	b087      	sub	sp, #28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80015ce:	4603      	mov	r3, r0
 80015d0:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 80015d2:	ed97 7a01 	vldr	s14, [r7, #4]
 80015d6:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001658 <GPS_nmea_to_dec+0x94>
 80015da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015e2:	ee17 3a90 	vmov	r3, s15
 80015e6:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	2264      	movs	r2, #100	; 0x64
 80015ec:	fb02 f303 	mul.w	r3, r2, r3
 80015f0:	ee07 3a90 	vmov	s15, r3
 80015f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f8:	ed97 7a01 	vldr	s14, [r7, #4]
 80015fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001600:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8001604:	ed97 7a03 	vldr	s14, [r7, #12]
 8001608:	eddf 6a14 	vldr	s13, [pc, #80]	; 800165c <GPS_nmea_to_dec+0x98>
 800160c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001610:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	ee07 3a90 	vmov	s15, r3
 800161a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800161e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001622:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001626:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 800162a:	78fb      	ldrb	r3, [r7, #3]
 800162c:	2b53      	cmp	r3, #83	; 0x53
 800162e:	d002      	beq.n	8001636 <GPS_nmea_to_dec+0x72>
 8001630:	78fb      	ldrb	r3, [r7, #3]
 8001632:	2b57      	cmp	r3, #87	; 0x57
 8001634:	d105      	bne.n	8001642 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8001636:	edd7 7a05 	vldr	s15, [r7, #20]
 800163a:	eef1 7a67 	vneg.f32	s15, s15
 800163e:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	ee07 3a90 	vmov	s15, r3
}
 8001648:	eeb0 0a67 	vmov.f32	s0, s15
 800164c:	371c      	adds	r7, #28
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	42c80000 	.word	0x42c80000
 800165c:	42700000 	.word	0x42700000

08001660 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <MX_I2C1_Init+0x50>)
 8001666:	4a13      	ldr	r2, [pc, #76]	; (80016b4 <MX_I2C1_Init+0x54>)
 8001668:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <MX_I2C1_Init+0x50>)
 800166c:	4a12      	ldr	r2, [pc, #72]	; (80016b8 <MX_I2C1_Init+0x58>)
 800166e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <MX_I2C1_Init+0x50>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <MX_I2C1_Init+0x50>)
 8001678:	2200      	movs	r2, #0
 800167a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <MX_I2C1_Init+0x50>)
 800167e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001682:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001684:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <MX_I2C1_Init+0x50>)
 8001686:	2200      	movs	r2, #0
 8001688:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <MX_I2C1_Init+0x50>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <MX_I2C1_Init+0x50>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <MX_I2C1_Init+0x50>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800169c:	4804      	ldr	r0, [pc, #16]	; (80016b0 <MX_I2C1_Init+0x50>)
 800169e:	f001 f9c7 	bl	8002a30 <HAL_I2C_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016a8:	f000 f8f8 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20004eac 	.word	0x20004eac
 80016b4:	40005400 	.word	0x40005400
 80016b8:	00061a80 	.word	0x00061a80

080016bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	; 0x28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a19      	ldr	r2, [pc, #100]	; (8001740 <HAL_I2C_MspInit+0x84>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d12b      	bne.n	8001736 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	4b18      	ldr	r3, [pc, #96]	; (8001744 <HAL_I2C_MspInit+0x88>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a17      	ldr	r2, [pc, #92]	; (8001744 <HAL_I2C_MspInit+0x88>)
 80016e8:	f043 0302 	orr.w	r3, r3, #2
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <HAL_I2C_MspInit+0x88>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016fa:	23c0      	movs	r3, #192	; 0xc0
 80016fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016fe:	2312      	movs	r3, #18
 8001700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001702:	2301      	movs	r3, #1
 8001704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001706:	2303      	movs	r3, #3
 8001708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800170a:	2304      	movs	r3, #4
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	480c      	ldr	r0, [pc, #48]	; (8001748 <HAL_I2C_MspInit+0x8c>)
 8001716:	f000 ffd3 	bl	80026c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <HAL_I2C_MspInit+0x88>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	4a08      	ldr	r2, [pc, #32]	; (8001744 <HAL_I2C_MspInit+0x88>)
 8001724:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001728:	6413      	str	r3, [r2, #64]	; 0x40
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_I2C_MspInit+0x88>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001736:	bf00      	nop
 8001738:	3728      	adds	r7, #40	; 0x28
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40005400 	.word	0x40005400
 8001744:	40023800 	.word	0x40023800
 8001748:	40020400 	.word	0x40020400

0800174c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001750:	f000 fe00 	bl	8002354 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001754:	f000 f824 	bl	80017a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001758:	f7ff fd08 	bl	800116c <MX_GPIO_Init>
  MX_I2C1_Init();
 800175c:	f7ff ff80 	bl	8001660 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001760:	f000 f8a2 	bl	80018a8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001764:	f000 fd5a 	bl	800221c <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001768:	f000 f87a 	bl	8001860 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  GPS_Init();
 800176c:	f7ff fd6a 	bl	8001244 <GPS_Init>
  SSD1306_Init();
 8001770:	f000 f918 	bl	80019a4 <SSD1306_Init>
  SSD1306_Clear();
 8001774:	f000 fb3b 	bl	8001dee <SSD1306_Clear>
  SSD1306_UpdateScreen();
 8001778:	f000 f9d8 	bl	8001b2c <SSD1306_UpdateScreen>

  __HAL_UART_ENABLE_IT(&huart1, UART_FLAG_RXNE);
 800177c:	4b07      	ldr	r3, [pc, #28]	; (800179c <main+0x50>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	695a      	ldr	r2, [r3, #20]
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <main+0x50>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f042 0220 	orr.w	r2, r2, #32
 800178a:	615a      	str	r2, [r3, #20]
 // LL_USART_EnableIT_RXNE(USART1);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800178c:	f003 fc1c 	bl	8004fc8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001790:	f7ff fc34 	bl	8000ffc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001794:	f003 fc3c 	bl	8005010 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001798:	e7fe      	b.n	8001798 <main+0x4c>
 800179a:	bf00      	nop
 800179c:	20004fa0 	.word	0x20004fa0

080017a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b094      	sub	sp, #80	; 0x50
 80017a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a6:	f107 0320 	add.w	r3, r7, #32
 80017aa:	2230      	movs	r2, #48	; 0x30
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f006 f994 	bl	8007adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b4:	f107 030c 	add.w	r3, r7, #12
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c4:	2300      	movs	r3, #0
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	4b23      	ldr	r3, [pc, #140]	; (8001858 <SystemClock_Config+0xb8>)
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	4a22      	ldr	r2, [pc, #136]	; (8001858 <SystemClock_Config+0xb8>)
 80017ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d2:	6413      	str	r3, [r2, #64]	; 0x40
 80017d4:	4b20      	ldr	r3, [pc, #128]	; (8001858 <SystemClock_Config+0xb8>)
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80017e0:	2300      	movs	r3, #0
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	4b1d      	ldr	r3, [pc, #116]	; (800185c <SystemClock_Config+0xbc>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017ec:	4a1b      	ldr	r2, [pc, #108]	; (800185c <SystemClock_Config+0xbc>)
 80017ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	4b19      	ldr	r3, [pc, #100]	; (800185c <SystemClock_Config+0xbc>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001800:	2302      	movs	r3, #2
 8001802:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001804:	2301      	movs	r3, #1
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001808:	2310      	movs	r3, #16
 800180a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800180c:	2300      	movs	r3, #0
 800180e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001810:	f107 0320 	add.w	r3, r7, #32
 8001814:	4618      	mov	r0, r3
 8001816:	f001 fe85 	bl	8003524 <HAL_RCC_OscConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001820:	f000 f83c 	bl	800189c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001824:	230f      	movs	r3, #15
 8001826:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001828:	2300      	movs	r3, #0
 800182a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001830:	2300      	movs	r3, #0
 8001832:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	2100      	movs	r1, #0
 800183e:	4618      	mov	r0, r3
 8001840:	f002 f8e8 	bl	8003a14 <HAL_RCC_ClockConfig>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800184a:	f000 f827 	bl	800189c <Error_Handler>
  }
}
 800184e:	bf00      	nop
 8001850:	3750      	adds	r7, #80	; 0x50
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40023800 	.word	0x40023800
 800185c:	40007000 	.word	0x40007000

08001860 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001864:	2200      	movs	r2, #0
 8001866:	2105      	movs	r1, #5
 8001868:	2025      	movs	r0, #37	; 0x25
 800186a:	f000 fe6d 	bl	8002548 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800186e:	2025      	movs	r0, #37	; 0x25
 8001870:	f000 fe86 	bl	8002580 <HAL_NVIC_EnableIRQ>
}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}

08001878 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a04      	ldr	r2, [pc, #16]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d101      	bne.n	800188e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800188a:	f000 fd85 	bl	8002398 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40000400 	.word	0x40000400

0800189c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a0:	b672      	cpsid	i
}
 80018a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a4:	e7fe      	b.n	80018a4 <Error_Handler+0x8>
	...

080018a8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80018ac:	4b17      	ldr	r3, [pc, #92]	; (800190c <MX_SPI1_Init+0x64>)
 80018ae:	4a18      	ldr	r2, [pc, #96]	; (8001910 <MX_SPI1_Init+0x68>)
 80018b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018b2:	4b16      	ldr	r3, [pc, #88]	; (800190c <MX_SPI1_Init+0x64>)
 80018b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018ba:	4b14      	ldr	r3, [pc, #80]	; (800190c <MX_SPI1_Init+0x64>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <MX_SPI1_Init+0x64>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <MX_SPI1_Init+0x64>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018cc:	4b0f      	ldr	r3, [pc, #60]	; (800190c <MX_SPI1_Init+0x64>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <MX_SPI1_Init+0x64>)
 80018d4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80018d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <MX_SPI1_Init+0x64>)
 80018dc:	2200      	movs	r2, #0
 80018de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018e0:	4b0a      	ldr	r3, [pc, #40]	; (800190c <MX_SPI1_Init+0x64>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <MX_SPI1_Init+0x64>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ec:	4b07      	ldr	r3, [pc, #28]	; (800190c <MX_SPI1_Init+0x64>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <MX_SPI1_Init+0x64>)
 80018f4:	220a      	movs	r2, #10
 80018f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018f8:	4804      	ldr	r0, [pc, #16]	; (800190c <MX_SPI1_Init+0x64>)
 80018fa:	f002 fa8d 	bl	8003e18 <HAL_SPI_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001904:	f7ff ffca 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20004f00 	.word	0x20004f00
 8001910:	40013000 	.word	0x40013000

08001914 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	; 0x28
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a19      	ldr	r2, [pc, #100]	; (8001998 <HAL_SPI_MspInit+0x84>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d12c      	bne.n	8001990 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	4b18      	ldr	r3, [pc, #96]	; (800199c <HAL_SPI_MspInit+0x88>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	4a17      	ldr	r2, [pc, #92]	; (800199c <HAL_SPI_MspInit+0x88>)
 8001940:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001944:	6453      	str	r3, [r2, #68]	; 0x44
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <HAL_SPI_MspInit+0x88>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	4b11      	ldr	r3, [pc, #68]	; (800199c <HAL_SPI_MspInit+0x88>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a10      	ldr	r2, [pc, #64]	; (800199c <HAL_SPI_MspInit+0x88>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <HAL_SPI_MspInit+0x88>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 800196e:	f248 03e0 	movw	r3, #32992	; 0x80e0
 8001972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197c:	2303      	movs	r3, #3
 800197e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001980:	2305      	movs	r3, #5
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	4619      	mov	r1, r3
 800198a:	4805      	ldr	r0, [pc, #20]	; (80019a0 <HAL_SPI_MspInit+0x8c>)
 800198c:	f000 fe98 	bl	80026c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001990:	bf00      	nop
 8001992:	3728      	adds	r7, #40	; 0x28
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40013000 	.word	0x40013000
 800199c:	40023800 	.word	0x40023800
 80019a0:	40020000 	.word	0x40020000

080019a4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80019aa:	f000 fa29 	bl	8001e00 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80019ae:	f644 6320 	movw	r3, #20000	; 0x4e20
 80019b2:	2201      	movs	r2, #1
 80019b4:	2178      	movs	r1, #120	; 0x78
 80019b6:	485b      	ldr	r0, [pc, #364]	; (8001b24 <SSD1306_Init+0x180>)
 80019b8:	f001 fa7c 	bl	8002eb4 <HAL_I2C_IsDeviceReady>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	e0a9      	b.n	8001b1a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80019c6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80019ca:	607b      	str	r3, [r7, #4]
	while(p>0)
 80019cc:	e002      	b.n	80019d4 <SSD1306_Init+0x30>
		p--;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f9      	bne.n	80019ce <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80019da:	22ae      	movs	r2, #174	; 0xae
 80019dc:	2100      	movs	r1, #0
 80019de:	2078      	movs	r0, #120	; 0x78
 80019e0:	f000 fa6c 	bl	8001ebc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80019e4:	2220      	movs	r2, #32
 80019e6:	2100      	movs	r1, #0
 80019e8:	2078      	movs	r0, #120	; 0x78
 80019ea:	f000 fa67 	bl	8001ebc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80019ee:	2210      	movs	r2, #16
 80019f0:	2100      	movs	r1, #0
 80019f2:	2078      	movs	r0, #120	; 0x78
 80019f4:	f000 fa62 	bl	8001ebc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80019f8:	22b0      	movs	r2, #176	; 0xb0
 80019fa:	2100      	movs	r1, #0
 80019fc:	2078      	movs	r0, #120	; 0x78
 80019fe:	f000 fa5d 	bl	8001ebc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001a02:	22c8      	movs	r2, #200	; 0xc8
 8001a04:	2100      	movs	r1, #0
 8001a06:	2078      	movs	r0, #120	; 0x78
 8001a08:	f000 fa58 	bl	8001ebc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2100      	movs	r1, #0
 8001a10:	2078      	movs	r0, #120	; 0x78
 8001a12:	f000 fa53 	bl	8001ebc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001a16:	2210      	movs	r2, #16
 8001a18:	2100      	movs	r1, #0
 8001a1a:	2078      	movs	r0, #120	; 0x78
 8001a1c:	f000 fa4e 	bl	8001ebc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001a20:	2240      	movs	r2, #64	; 0x40
 8001a22:	2100      	movs	r1, #0
 8001a24:	2078      	movs	r0, #120	; 0x78
 8001a26:	f000 fa49 	bl	8001ebc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001a2a:	2281      	movs	r2, #129	; 0x81
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	2078      	movs	r0, #120	; 0x78
 8001a30:	f000 fa44 	bl	8001ebc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001a34:	22ff      	movs	r2, #255	; 0xff
 8001a36:	2100      	movs	r1, #0
 8001a38:	2078      	movs	r0, #120	; 0x78
 8001a3a:	f000 fa3f 	bl	8001ebc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001a3e:	22a1      	movs	r2, #161	; 0xa1
 8001a40:	2100      	movs	r1, #0
 8001a42:	2078      	movs	r0, #120	; 0x78
 8001a44:	f000 fa3a 	bl	8001ebc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001a48:	22a6      	movs	r2, #166	; 0xa6
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	2078      	movs	r0, #120	; 0x78
 8001a4e:	f000 fa35 	bl	8001ebc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001a52:	22a8      	movs	r2, #168	; 0xa8
 8001a54:	2100      	movs	r1, #0
 8001a56:	2078      	movs	r0, #120	; 0x78
 8001a58:	f000 fa30 	bl	8001ebc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001a5c:	223f      	movs	r2, #63	; 0x3f
 8001a5e:	2100      	movs	r1, #0
 8001a60:	2078      	movs	r0, #120	; 0x78
 8001a62:	f000 fa2b 	bl	8001ebc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001a66:	22a4      	movs	r2, #164	; 0xa4
 8001a68:	2100      	movs	r1, #0
 8001a6a:	2078      	movs	r0, #120	; 0x78
 8001a6c:	f000 fa26 	bl	8001ebc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001a70:	22d3      	movs	r2, #211	; 0xd3
 8001a72:	2100      	movs	r1, #0
 8001a74:	2078      	movs	r0, #120	; 0x78
 8001a76:	f000 fa21 	bl	8001ebc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	2078      	movs	r0, #120	; 0x78
 8001a80:	f000 fa1c 	bl	8001ebc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001a84:	22d5      	movs	r2, #213	; 0xd5
 8001a86:	2100      	movs	r1, #0
 8001a88:	2078      	movs	r0, #120	; 0x78
 8001a8a:	f000 fa17 	bl	8001ebc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001a8e:	22f0      	movs	r2, #240	; 0xf0
 8001a90:	2100      	movs	r1, #0
 8001a92:	2078      	movs	r0, #120	; 0x78
 8001a94:	f000 fa12 	bl	8001ebc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001a98:	22d9      	movs	r2, #217	; 0xd9
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	2078      	movs	r0, #120	; 0x78
 8001a9e:	f000 fa0d 	bl	8001ebc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001aa2:	2222      	movs	r2, #34	; 0x22
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	2078      	movs	r0, #120	; 0x78
 8001aa8:	f000 fa08 	bl	8001ebc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001aac:	22da      	movs	r2, #218	; 0xda
 8001aae:	2100      	movs	r1, #0
 8001ab0:	2078      	movs	r0, #120	; 0x78
 8001ab2:	f000 fa03 	bl	8001ebc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001ab6:	2212      	movs	r2, #18
 8001ab8:	2100      	movs	r1, #0
 8001aba:	2078      	movs	r0, #120	; 0x78
 8001abc:	f000 f9fe 	bl	8001ebc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001ac0:	22db      	movs	r2, #219	; 0xdb
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	2078      	movs	r0, #120	; 0x78
 8001ac6:	f000 f9f9 	bl	8001ebc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001aca:	2220      	movs	r2, #32
 8001acc:	2100      	movs	r1, #0
 8001ace:	2078      	movs	r0, #120	; 0x78
 8001ad0:	f000 f9f4 	bl	8001ebc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001ad4:	228d      	movs	r2, #141	; 0x8d
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	2078      	movs	r0, #120	; 0x78
 8001ada:	f000 f9ef 	bl	8001ebc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001ade:	2214      	movs	r2, #20
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	2078      	movs	r0, #120	; 0x78
 8001ae4:	f000 f9ea 	bl	8001ebc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001ae8:	22af      	movs	r2, #175	; 0xaf
 8001aea:	2100      	movs	r1, #0
 8001aec:	2078      	movs	r0, #120	; 0x78
 8001aee:	f000 f9e5 	bl	8001ebc <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001af2:	222e      	movs	r2, #46	; 0x2e
 8001af4:	2100      	movs	r1, #0
 8001af6:	2078      	movs	r0, #120	; 0x78
 8001af8:	f000 f9e0 	bl	8001ebc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001afc:	2000      	movs	r0, #0
 8001afe:	f000 f843 	bl	8001b88 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001b02:	f000 f813 	bl	8001b2c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001b06:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <SSD1306_Init+0x184>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <SSD1306_Init+0x184>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001b12:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <SSD1306_Init+0x184>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001b18:	2301      	movs	r3, #1
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20004eac 	.word	0x20004eac
 8001b28:	2000061c 	.word	0x2000061c

08001b2c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001b32:	2300      	movs	r3, #0
 8001b34:	71fb      	strb	r3, [r7, #7]
 8001b36:	e01d      	b.n	8001b74 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	3b50      	subs	r3, #80	; 0x50
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	461a      	mov	r2, r3
 8001b40:	2100      	movs	r1, #0
 8001b42:	2078      	movs	r0, #120	; 0x78
 8001b44:	f000 f9ba 	bl	8001ebc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	2078      	movs	r0, #120	; 0x78
 8001b4e:	f000 f9b5 	bl	8001ebc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001b52:	2210      	movs	r2, #16
 8001b54:	2100      	movs	r1, #0
 8001b56:	2078      	movs	r0, #120	; 0x78
 8001b58:	f000 f9b0 	bl	8001ebc <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	01db      	lsls	r3, r3, #7
 8001b60:	4a08      	ldr	r2, [pc, #32]	; (8001b84 <SSD1306_UpdateScreen+0x58>)
 8001b62:	441a      	add	r2, r3
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	2140      	movs	r1, #64	; 0x40
 8001b68:	2078      	movs	r0, #120	; 0x78
 8001b6a:	f000 f95f 	bl	8001e2c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	3301      	adds	r3, #1
 8001b72:	71fb      	strb	r3, [r7, #7]
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	2b07      	cmp	r3, #7
 8001b78:	d9de      	bls.n	8001b38 <SSD1306_UpdateScreen+0xc>
	}
}
 8001b7a:	bf00      	nop
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	2000021c 	.word	0x2000021c

08001b88 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <SSD1306_Fill+0x14>
 8001b98:	2300      	movs	r3, #0
 8001b9a:	e000      	b.n	8001b9e <SSD1306_Fill+0x16>
 8001b9c:	23ff      	movs	r3, #255	; 0xff
 8001b9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4803      	ldr	r0, [pc, #12]	; (8001bb4 <SSD1306_Fill+0x2c>)
 8001ba6:	f005 ff99 	bl	8007adc <memset>
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	2000021c 	.word	0x2000021c

08001bb8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	80fb      	strh	r3, [r7, #6]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	80bb      	strh	r3, [r7, #4]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	70fb      	strb	r3, [r7, #3]
	if (
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	2b7f      	cmp	r3, #127	; 0x7f
 8001bce:	d848      	bhi.n	8001c62 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001bd0:	88bb      	ldrh	r3, [r7, #4]
 8001bd2:	2b3f      	cmp	r3, #63	; 0x3f
 8001bd4:	d845      	bhi.n	8001c62 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001bd6:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <SSD1306_DrawPixel+0xb8>)
 8001bd8:	791b      	ldrb	r3, [r3, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d006      	beq.n	8001bec <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001bde:	78fb      	ldrb	r3, [r7, #3]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bf0c      	ite	eq
 8001be4:	2301      	moveq	r3, #1
 8001be6:	2300      	movne	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001bec:	78fb      	ldrb	r3, [r7, #3]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d11a      	bne.n	8001c28 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001bf2:	88fa      	ldrh	r2, [r7, #6]
 8001bf4:	88bb      	ldrh	r3, [r7, #4]
 8001bf6:	08db      	lsrs	r3, r3, #3
 8001bf8:	b298      	uxth	r0, r3
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	01db      	lsls	r3, r3, #7
 8001bfe:	4413      	add	r3, r2
 8001c00:	4a1c      	ldr	r2, [pc, #112]	; (8001c74 <SSD1306_DrawPixel+0xbc>)
 8001c02:	5cd3      	ldrb	r3, [r2, r3]
 8001c04:	b25a      	sxtb	r2, r3
 8001c06:	88bb      	ldrh	r3, [r7, #4]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c12:	b25b      	sxtb	r3, r3
 8001c14:	4313      	orrs	r3, r2
 8001c16:	b259      	sxtb	r1, r3
 8001c18:	88fa      	ldrh	r2, [r7, #6]
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	01db      	lsls	r3, r3, #7
 8001c1e:	4413      	add	r3, r2
 8001c20:	b2c9      	uxtb	r1, r1
 8001c22:	4a14      	ldr	r2, [pc, #80]	; (8001c74 <SSD1306_DrawPixel+0xbc>)
 8001c24:	54d1      	strb	r1, [r2, r3]
 8001c26:	e01d      	b.n	8001c64 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001c28:	88fa      	ldrh	r2, [r7, #6]
 8001c2a:	88bb      	ldrh	r3, [r7, #4]
 8001c2c:	08db      	lsrs	r3, r3, #3
 8001c2e:	b298      	uxth	r0, r3
 8001c30:	4603      	mov	r3, r0
 8001c32:	01db      	lsls	r3, r3, #7
 8001c34:	4413      	add	r3, r2
 8001c36:	4a0f      	ldr	r2, [pc, #60]	; (8001c74 <SSD1306_DrawPixel+0xbc>)
 8001c38:	5cd3      	ldrb	r3, [r2, r3]
 8001c3a:	b25a      	sxtb	r2, r3
 8001c3c:	88bb      	ldrh	r3, [r7, #4]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	2101      	movs	r1, #1
 8001c44:	fa01 f303 	lsl.w	r3, r1, r3
 8001c48:	b25b      	sxtb	r3, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	b25b      	sxtb	r3, r3
 8001c4e:	4013      	ands	r3, r2
 8001c50:	b259      	sxtb	r1, r3
 8001c52:	88fa      	ldrh	r2, [r7, #6]
 8001c54:	4603      	mov	r3, r0
 8001c56:	01db      	lsls	r3, r3, #7
 8001c58:	4413      	add	r3, r2
 8001c5a:	b2c9      	uxtb	r1, r1
 8001c5c:	4a05      	ldr	r2, [pc, #20]	; (8001c74 <SSD1306_DrawPixel+0xbc>)
 8001c5e:	54d1      	strb	r1, [r2, r3]
 8001c60:	e000      	b.n	8001c64 <SSD1306_DrawPixel+0xac>
		return;
 8001c62:	bf00      	nop
	}
}
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	2000061c 	.word	0x2000061c
 8001c74:	2000021c 	.word	0x2000021c

08001c78 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	460a      	mov	r2, r1
 8001c82:	80fb      	strh	r3, [r7, #6]
 8001c84:	4613      	mov	r3, r2
 8001c86:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001c88:	4a05      	ldr	r2, [pc, #20]	; (8001ca0 <SSD1306_GotoXY+0x28>)
 8001c8a:	88fb      	ldrh	r3, [r7, #6]
 8001c8c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001c8e:	4a04      	ldr	r2, [pc, #16]	; (8001ca0 <SSD1306_GotoXY+0x28>)
 8001c90:	88bb      	ldrh	r3, [r7, #4]
 8001c92:	8053      	strh	r3, [r2, #2]
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	2000061c 	.word	0x2000061c

08001ca4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	6039      	str	r1, [r7, #0]
 8001cae:	71fb      	strb	r3, [r7, #7]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001cb4:	4b3a      	ldr	r3, [pc, #232]	; (8001da0 <SSD1306_Putc+0xfc>)
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	4413      	add	r3, r2
	if (
 8001cc0:	2b7f      	cmp	r3, #127	; 0x7f
 8001cc2:	dc07      	bgt.n	8001cd4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001cc4:	4b36      	ldr	r3, [pc, #216]	; (8001da0 <SSD1306_Putc+0xfc>)
 8001cc6:	885b      	ldrh	r3, [r3, #2]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	785b      	ldrb	r3, [r3, #1]
 8001cce:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001cd0:	2b3f      	cmp	r3, #63	; 0x3f
 8001cd2:	dd01      	ble.n	8001cd8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	e05e      	b.n	8001d96 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	e04b      	b.n	8001d76 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	3b20      	subs	r3, #32
 8001ce6:	6839      	ldr	r1, [r7, #0]
 8001ce8:	7849      	ldrb	r1, [r1, #1]
 8001cea:	fb01 f303 	mul.w	r3, r1, r3
 8001cee:	4619      	mov	r1, r3
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	440b      	add	r3, r1
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	e030      	b.n	8001d64 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d010      	beq.n	8001d34 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001d12:	4b23      	ldr	r3, [pc, #140]	; (8001da0 <SSD1306_Putc+0xfc>)
 8001d14:	881a      	ldrh	r2, [r3, #0]
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	b298      	uxth	r0, r3
 8001d1e:	4b20      	ldr	r3, [pc, #128]	; (8001da0 <SSD1306_Putc+0xfc>)
 8001d20:	885a      	ldrh	r2, [r3, #2]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	4413      	add	r3, r2
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	79ba      	ldrb	r2, [r7, #6]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f7ff ff43 	bl	8001bb8 <SSD1306_DrawPixel>
 8001d32:	e014      	b.n	8001d5e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001d34:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <SSD1306_Putc+0xfc>)
 8001d36:	881a      	ldrh	r2, [r3, #0]
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	b298      	uxth	r0, r3
 8001d40:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <SSD1306_Putc+0xfc>)
 8001d42:	885a      	ldrh	r2, [r3, #2]
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	4413      	add	r3, r2
 8001d4a:	b299      	uxth	r1, r3
 8001d4c:	79bb      	ldrb	r3, [r7, #6]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	bf0c      	ite	eq
 8001d52:	2301      	moveq	r3, #1
 8001d54:	2300      	movne	r3, #0
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	461a      	mov	r2, r3
 8001d5a:	f7ff ff2d 	bl	8001bb8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	3301      	adds	r3, #1
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d3c8      	bcc.n	8001d02 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	3301      	adds	r3, #1
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	785b      	ldrb	r3, [r3, #1]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d3ad      	bcc.n	8001cde <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001d82:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <SSD1306_Putc+0xfc>)
 8001d84:	881a      	ldrh	r2, [r3, #0]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <SSD1306_Putc+0xfc>)
 8001d92:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001d94:	79fb      	ldrb	r3, [r7, #7]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	2000061c 	.word	0x2000061c

08001da4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	4613      	mov	r3, r2
 8001db0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001db2:	e012      	b.n	8001dda <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	79fa      	ldrb	r2, [r7, #7]
 8001dba:	68b9      	ldr	r1, [r7, #8]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff71 	bl	8001ca4 <SSD1306_Putc>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d002      	beq.n	8001dd4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	e008      	b.n	8001de6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1e8      	bne.n	8001db4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	781b      	ldrb	r3, [r3, #0]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001df2:	2000      	movs	r0, #0
 8001df4:	f7ff fec8 	bl	8001b88 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001df8:	f7ff fe98 	bl	8001b2c <SSD1306_UpdateScreen>
}
 8001dfc:	bf00      	nop
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001e06:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <ssd1306_I2C_Init+0x28>)
 8001e08:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001e0a:	e002      	b.n	8001e12 <ssd1306_I2C_Init+0x12>
		p--;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1f9      	bne.n	8001e0c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	0003d090 	.word	0x0003d090

08001e2c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001e2c:	b590      	push	{r4, r7, lr}
 8001e2e:	b0c7      	sub	sp, #284	; 0x11c
 8001e30:	af02      	add	r7, sp, #8
 8001e32:	4604      	mov	r4, r0
 8001e34:	4608      	mov	r0, r1
 8001e36:	4639      	mov	r1, r7
 8001e38:	600a      	str	r2, [r1, #0]
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	1dfb      	adds	r3, r7, #7
 8001e3e:	4622      	mov	r2, r4
 8001e40:	701a      	strb	r2, [r3, #0]
 8001e42:	1dbb      	adds	r3, r7, #6
 8001e44:	4602      	mov	r2, r0
 8001e46:	701a      	strb	r2, [r3, #0]
 8001e48:	1d3b      	adds	r3, r7, #4
 8001e4a:	460a      	mov	r2, r1
 8001e4c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001e4e:	f107 030c 	add.w	r3, r7, #12
 8001e52:	1dba      	adds	r2, r7, #6
 8001e54:	7812      	ldrb	r2, [r2, #0]
 8001e56:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001e5e:	e010      	b.n	8001e82 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001e60:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001e64:	463a      	mov	r2, r7
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	441a      	add	r2, r3
 8001e6a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001e6e:	3301      	adds	r3, #1
 8001e70:	7811      	ldrb	r1, [r2, #0]
 8001e72:	f107 020c 	add.w	r2, r7, #12
 8001e76:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001e78:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001e82:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	1d3a      	adds	r2, r7, #4
 8001e8a:	8812      	ldrh	r2, [r2, #0]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d8e7      	bhi.n	8001e60 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001e90:	1dfb      	adds	r3, r7, #7
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	b299      	uxth	r1, r3
 8001e96:	1d3b      	adds	r3, r7, #4
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	f107 020c 	add.w	r2, r7, #12
 8001ea2:	200a      	movs	r0, #10
 8001ea4:	9000      	str	r0, [sp, #0]
 8001ea6:	4804      	ldr	r0, [pc, #16]	; (8001eb8 <ssd1306_I2C_WriteMulti+0x8c>)
 8001ea8:	f000 ff06 	bl	8002cb8 <HAL_I2C_Master_Transmit>
}
 8001eac:	bf00      	nop
 8001eae:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd90      	pop	{r4, r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20004eac 	.word	0x20004eac

08001ebc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af02      	add	r7, sp, #8
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	71fb      	strb	r3, [r7, #7]
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	71bb      	strb	r3, [r7, #6]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001ece:	79bb      	ldrb	r3, [r7, #6]
 8001ed0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001ed2:	797b      	ldrb	r3, [r7, #5]
 8001ed4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	b299      	uxth	r1, r3
 8001eda:	f107 020c 	add.w	r2, r7, #12
 8001ede:	230a      	movs	r3, #10
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	4803      	ldr	r0, [pc, #12]	; (8001ef4 <ssd1306_I2C_Write+0x38>)
 8001ee6:	f000 fee7 	bl	8002cb8 <HAL_I2C_Master_Transmit>
}
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20004eac 	.word	0x20004eac

08001ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <HAL_MspInit+0x54>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	4a11      	ldr	r2, [pc, #68]	; (8001f4c <HAL_MspInit+0x54>)
 8001f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0e:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <HAL_MspInit+0x54>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f16:	607b      	str	r3, [r7, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	603b      	str	r3, [r7, #0]
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_MspInit+0x54>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <HAL_MspInit+0x54>)
 8001f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f28:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <HAL_MspInit+0x54>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	210f      	movs	r1, #15
 8001f3a:	f06f 0001 	mvn.w	r0, #1
 8001f3e:	f000 fb03 	bl	8002548 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800

08001f50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08c      	sub	sp, #48	; 0x30
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8001f60:	2200      	movs	r2, #0
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	201d      	movs	r0, #29
 8001f66:	f000 faef 	bl	8002548 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f6a:	201d      	movs	r0, #29
 8001f6c:	f000 fb08 	bl	8002580 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	4b1e      	ldr	r3, [pc, #120]	; (8001ff0 <HAL_InitTick+0xa0>)
 8001f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f78:	4a1d      	ldr	r2, [pc, #116]	; (8001ff0 <HAL_InitTick+0xa0>)
 8001f7a:	f043 0302 	orr.w	r3, r3, #2
 8001f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f80:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <HAL_InitTick+0xa0>)
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f8c:	f107 0210 	add.w	r2, r7, #16
 8001f90:	f107 0314 	add.w	r3, r7, #20
 8001f94:	4611      	mov	r1, r2
 8001f96:	4618      	mov	r0, r3
 8001f98:	f001 ff0c 	bl	8003db4 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f9c:	f001 fee2 	bl	8003d64 <HAL_RCC_GetPCLK1Freq>
 8001fa0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa4:	4a13      	ldr	r2, [pc, #76]	; (8001ff4 <HAL_InitTick+0xa4>)
 8001fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001faa:	0c9b      	lsrs	r3, r3, #18
 8001fac:	3b01      	subs	r3, #1
 8001fae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001fb0:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <HAL_InitTick+0xa8>)
 8001fb2:	4a12      	ldr	r2, [pc, #72]	; (8001ffc <HAL_InitTick+0xac>)
 8001fb4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001fb6:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <HAL_InitTick+0xa8>)
 8001fb8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fbc:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001fbe:	4a0e      	ldr	r2, [pc, #56]	; (8001ff8 <HAL_InitTick+0xa8>)
 8001fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc2:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <HAL_InitTick+0xa8>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fca:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <HAL_InitTick+0xa8>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8001fd0:	4809      	ldr	r0, [pc, #36]	; (8001ff8 <HAL_InitTick+0xa8>)
 8001fd2:	f001 ffaa 	bl	8003f2a <HAL_TIM_Base_Init>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d104      	bne.n	8001fe6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8001fdc:	4806      	ldr	r0, [pc, #24]	; (8001ff8 <HAL_InitTick+0xa8>)
 8001fde:	f001 fffd 	bl	8003fdc <HAL_TIM_Base_Start_IT>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	e000      	b.n	8001fe8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3730      	adds	r7, #48	; 0x30
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	431bde83 	.word	0x431bde83
 8001ff8:	20004f58 	.word	0x20004f58
 8001ffc:	40000400 	.word	0x40000400

08002000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002004:	e7fe      	b.n	8002004 <NMI_Handler+0x4>

08002006 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800200a:	e7fe      	b.n	800200a <HardFault_Handler+0x4>

0800200c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002010:	e7fe      	b.n	8002010 <MemManage_Handler+0x4>

08002012 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002016:	e7fe      	b.n	8002016 <BusFault_Handler+0x4>

08002018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800201c:	e7fe      	b.n	800201c <UsageFault_Handler+0x4>

0800201e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002030:	4802      	ldr	r0, [pc, #8]	; (800203c <TIM3_IRQHandler+0x10>)
 8002032:	f002 f835 	bl	80040a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20004f58 	.word	0x20004f58

08002040 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  HAL_UART_RxCpltCallback(&huart1);
 8002044:	4803      	ldr	r0, [pc, #12]	; (8002054 <USART1_IRQHandler+0x14>)
 8002046:	f000 f807 	bl	8002058 <HAL_UART_RxCpltCallback>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800204a:	4802      	ldr	r0, [pc, #8]	; (8002054 <USART1_IRQHandler+0x14>)
 800204c:	f002 fa6a 	bl	8004524 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  //GPS_CallBack();
  /* USER CODE END USART1_IRQn 1 */
}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20004fa0 	.word	0x20004fa0

08002058 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
	GPS_UART_CallBack();
 8002060:	f7ff f8fe 	bl	8001260 <GPS_UART_CallBack>
}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
	return 1;
 8002070:	2301      	movs	r3, #1
}
 8002072:	4618      	mov	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <_kill>:

int _kill(int pid, int sig)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002086:	f005 fcf1 	bl	8007a6c <__errno>
 800208a:	4603      	mov	r3, r0
 800208c:	2216      	movs	r2, #22
 800208e:	601a      	str	r2, [r3, #0]
	return -1;
 8002090:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002094:	4618      	mov	r0, r3
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <_exit>:

void _exit (int status)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020a4:	f04f 31ff 	mov.w	r1, #4294967295
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff ffe7 	bl	800207c <_kill>
	while (1) {}		/* Make sure we hang here */
 80020ae:	e7fe      	b.n	80020ae <_exit+0x12>

080020b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	e00a      	b.n	80020d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020c2:	f3af 8000 	nop.w
 80020c6:	4601      	mov	r1, r0
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	1c5a      	adds	r2, r3, #1
 80020cc:	60ba      	str	r2, [r7, #8]
 80020ce:	b2ca      	uxtb	r2, r1
 80020d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	3301      	adds	r3, #1
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	429a      	cmp	r2, r3
 80020de:	dbf0      	blt.n	80020c2 <_read+0x12>
	}

return len;
 80020e0:	687b      	ldr	r3, [r7, #4]
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b086      	sub	sp, #24
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	60f8      	str	r0, [r7, #12]
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	e009      	b.n	8002110 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	1c5a      	adds	r2, r3, #1
 8002100:	60ba      	str	r2, [r7, #8]
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	3301      	adds	r3, #1
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	429a      	cmp	r2, r3
 8002116:	dbf1      	blt.n	80020fc <_write+0x12>
	}
	return len;
 8002118:	687b      	ldr	r3, [r7, #4]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <_close>:

int _close(int file)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
	return -1;
 800212a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800212e:	4618      	mov	r0, r3
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800214a:	605a      	str	r2, [r3, #4]
	return 0;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <_isatty>:

int _isatty(int file)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
	return 1;
 8002162:	2301      	movs	r3, #1
}
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
	return 0;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
	...

0800218c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002194:	4a14      	ldr	r2, [pc, #80]	; (80021e8 <_sbrk+0x5c>)
 8002196:	4b15      	ldr	r3, [pc, #84]	; (80021ec <_sbrk+0x60>)
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021a0:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <_sbrk+0x64>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d102      	bne.n	80021ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021a8:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <_sbrk+0x64>)
 80021aa:	4a12      	ldr	r2, [pc, #72]	; (80021f4 <_sbrk+0x68>)
 80021ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ae:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <_sbrk+0x64>)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4413      	add	r3, r2
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d207      	bcs.n	80021cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021bc:	f005 fc56 	bl	8007a6c <__errno>
 80021c0:	4603      	mov	r3, r0
 80021c2:	220c      	movs	r2, #12
 80021c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021c6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ca:	e009      	b.n	80021e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021cc:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <_sbrk+0x64>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021d2:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <_sbrk+0x64>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4413      	add	r3, r2
 80021da:	4a05      	ldr	r2, [pc, #20]	; (80021f0 <_sbrk+0x64>)
 80021dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021de:	68fb      	ldr	r3, [r7, #12]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20010000 	.word	0x20010000
 80021ec:	00000400 	.word	0x00000400
 80021f0:	20000624 	.word	0x20000624
 80021f4:	20005038 	.word	0x20005038

080021f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <SystemInit+0x20>)
 80021fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002202:	4a05      	ldr	r2, [pc, #20]	; (8002218 <SystemInit+0x20>)
 8002204:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002208:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002220:	4b11      	ldr	r3, [pc, #68]	; (8002268 <MX_USART1_UART_Init+0x4c>)
 8002222:	4a12      	ldr	r2, [pc, #72]	; (800226c <MX_USART1_UART_Init+0x50>)
 8002224:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002226:	4b10      	ldr	r3, [pc, #64]	; (8002268 <MX_USART1_UART_Init+0x4c>)
 8002228:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800222c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800222e:	4b0e      	ldr	r3, [pc, #56]	; (8002268 <MX_USART1_UART_Init+0x4c>)
 8002230:	2200      	movs	r2, #0
 8002232:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002234:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <MX_USART1_UART_Init+0x4c>)
 8002236:	2200      	movs	r2, #0
 8002238:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800223a:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <MX_USART1_UART_Init+0x4c>)
 800223c:	2200      	movs	r2, #0
 800223e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002240:	4b09      	ldr	r3, [pc, #36]	; (8002268 <MX_USART1_UART_Init+0x4c>)
 8002242:	220c      	movs	r2, #12
 8002244:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002246:	4b08      	ldr	r3, [pc, #32]	; (8002268 <MX_USART1_UART_Init+0x4c>)
 8002248:	2200      	movs	r2, #0
 800224a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <MX_USART1_UART_Init+0x4c>)
 800224e:	2200      	movs	r2, #0
 8002250:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002252:	4805      	ldr	r0, [pc, #20]	; (8002268 <MX_USART1_UART_Init+0x4c>)
 8002254:	f002 f8e8 	bl	8004428 <HAL_UART_Init>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800225e:	f7ff fb1d 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20004fa0 	.word	0x20004fa0
 800226c:	40011000 	.word	0x40011000

08002270 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08a      	sub	sp, #40	; 0x28
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	f107 0314 	add.w	r3, r7, #20
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a19      	ldr	r2, [pc, #100]	; (80022f4 <HAL_UART_MspInit+0x84>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d12c      	bne.n	80022ec <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	4b18      	ldr	r3, [pc, #96]	; (80022f8 <HAL_UART_MspInit+0x88>)
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	4a17      	ldr	r2, [pc, #92]	; (80022f8 <HAL_UART_MspInit+0x88>)
 800229c:	f043 0310 	orr.w	r3, r3, #16
 80022a0:	6453      	str	r3, [r2, #68]	; 0x44
 80022a2:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <HAL_UART_MspInit+0x88>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	f003 0310 	and.w	r3, r3, #16
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <HAL_UART_MspInit+0x88>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	4a10      	ldr	r2, [pc, #64]	; (80022f8 <HAL_UART_MspInit+0x88>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6313      	str	r3, [r2, #48]	; 0x30
 80022be:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <HAL_UART_MspInit+0x88>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d0:	2302      	movs	r3, #2
 80022d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d8:	2303      	movs	r3, #3
 80022da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022dc:	2307      	movs	r3, #7
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	4619      	mov	r1, r3
 80022e6:	4805      	ldr	r0, [pc, #20]	; (80022fc <HAL_UART_MspInit+0x8c>)
 80022e8:	f000 f9ea 	bl	80026c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80022ec:	bf00      	nop
 80022ee:	3728      	adds	r7, #40	; 0x28
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40011000 	.word	0x40011000
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40020000 	.word	0x40020000

08002300 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002300:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002338 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002304:	480d      	ldr	r0, [pc, #52]	; (800233c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002306:	490e      	ldr	r1, [pc, #56]	; (8002340 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002308:	4a0e      	ldr	r2, [pc, #56]	; (8002344 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800230a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800230c:	e002      	b.n	8002314 <LoopCopyDataInit>

0800230e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800230e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002312:	3304      	adds	r3, #4

08002314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002318:	d3f9      	bcc.n	800230e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800231a:	4a0b      	ldr	r2, [pc, #44]	; (8002348 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800231c:	4c0b      	ldr	r4, [pc, #44]	; (800234c <LoopFillZerobss+0x26>)
  movs r3, #0
 800231e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002320:	e001      	b.n	8002326 <LoopFillZerobss>

08002322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002324:	3204      	adds	r2, #4

08002326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002328:	d3fb      	bcc.n	8002322 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800232a:	f7ff ff65 	bl	80021f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800232e:	f005 fba3 	bl	8007a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002332:	f7ff fa0b 	bl	800174c <main>
  bx  lr    
 8002336:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002338:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800233c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002340:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002344:	0800fa0c 	.word	0x0800fa0c
  ldr r2, =_sbss
 8002348:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 800234c:	20005038 	.word	0x20005038

08002350 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002350:	e7fe      	b.n	8002350 <ADC_IRQHandler>
	...

08002354 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002358:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <HAL_Init+0x40>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a0d      	ldr	r2, [pc, #52]	; (8002394 <HAL_Init+0x40>)
 800235e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002362:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_Init+0x40>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <HAL_Init+0x40>)
 800236a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800236e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002370:	4b08      	ldr	r3, [pc, #32]	; (8002394 <HAL_Init+0x40>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a07      	ldr	r2, [pc, #28]	; (8002394 <HAL_Init+0x40>)
 8002376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800237c:	2003      	movs	r0, #3
 800237e:	f000 f8d8 	bl	8002532 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002382:	2000      	movs	r0, #0
 8002384:	f7ff fde4 	bl	8001f50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002388:	f7ff fdb6 	bl	8001ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40023c00 	.word	0x40023c00

08002398 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800239c:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <HAL_IncTick+0x20>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	461a      	mov	r2, r3
 80023a2:	4b06      	ldr	r3, [pc, #24]	; (80023bc <HAL_IncTick+0x24>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4413      	add	r3, r2
 80023a8:	4a04      	ldr	r2, [pc, #16]	; (80023bc <HAL_IncTick+0x24>)
 80023aa:	6013      	str	r3, [r2, #0]
}
 80023ac:	bf00      	nop
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	20000020 	.word	0x20000020
 80023bc:	20004fe4 	.word	0x20004fe4

080023c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return uwTick;
 80023c4:	4b03      	ldr	r3, [pc, #12]	; (80023d4 <HAL_GetTick+0x14>)
 80023c6:	681b      	ldr	r3, [r3, #0]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	20004fe4 	.word	0x20004fe4

080023d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <__NVIC_SetPriorityGrouping+0x44>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023f4:	4013      	ands	r3, r2
 80023f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002400:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800240a:	4a04      	ldr	r2, [pc, #16]	; (800241c <__NVIC_SetPriorityGrouping+0x44>)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	60d3      	str	r3, [r2, #12]
}
 8002410:	bf00      	nop
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002424:	4b04      	ldr	r3, [pc, #16]	; (8002438 <__NVIC_GetPriorityGrouping+0x18>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	0a1b      	lsrs	r3, r3, #8
 800242a:	f003 0307 	and.w	r3, r3, #7
}
 800242e:	4618      	mov	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	2b00      	cmp	r3, #0
 800244c:	db0b      	blt.n	8002466 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	f003 021f 	and.w	r2, r3, #31
 8002454:	4907      	ldr	r1, [pc, #28]	; (8002474 <__NVIC_EnableIRQ+0x38>)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	095b      	lsrs	r3, r3, #5
 800245c:	2001      	movs	r0, #1
 800245e:	fa00 f202 	lsl.w	r2, r0, r2
 8002462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	e000e100 	.word	0xe000e100

08002478 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	6039      	str	r1, [r7, #0]
 8002482:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002488:	2b00      	cmp	r3, #0
 800248a:	db0a      	blt.n	80024a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	b2da      	uxtb	r2, r3
 8002490:	490c      	ldr	r1, [pc, #48]	; (80024c4 <__NVIC_SetPriority+0x4c>)
 8002492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002496:	0112      	lsls	r2, r2, #4
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	440b      	add	r3, r1
 800249c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024a0:	e00a      	b.n	80024b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	4908      	ldr	r1, [pc, #32]	; (80024c8 <__NVIC_SetPriority+0x50>)
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	3b04      	subs	r3, #4
 80024b0:	0112      	lsls	r2, r2, #4
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	440b      	add	r3, r1
 80024b6:	761a      	strb	r2, [r3, #24]
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	e000e100 	.word	0xe000e100
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b089      	sub	sp, #36	; 0x24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f1c3 0307 	rsb	r3, r3, #7
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	bf28      	it	cs
 80024ea:	2304      	movcs	r3, #4
 80024ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	3304      	adds	r3, #4
 80024f2:	2b06      	cmp	r3, #6
 80024f4:	d902      	bls.n	80024fc <NVIC_EncodePriority+0x30>
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3b03      	subs	r3, #3
 80024fa:	e000      	b.n	80024fe <NVIC_EncodePriority+0x32>
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002500:	f04f 32ff 	mov.w	r2, #4294967295
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43da      	mvns	r2, r3
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	401a      	ands	r2, r3
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002514:	f04f 31ff 	mov.w	r1, #4294967295
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	fa01 f303 	lsl.w	r3, r1, r3
 800251e:	43d9      	mvns	r1, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002524:	4313      	orrs	r3, r2
         );
}
 8002526:	4618      	mov	r0, r3
 8002528:	3724      	adds	r7, #36	; 0x24
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff ff4c 	bl	80023d8 <__NVIC_SetPriorityGrouping>
}
 8002540:	bf00      	nop
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800255a:	f7ff ff61 	bl	8002420 <__NVIC_GetPriorityGrouping>
 800255e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	68b9      	ldr	r1, [r7, #8]
 8002564:	6978      	ldr	r0, [r7, #20]
 8002566:	f7ff ffb1 	bl	80024cc <NVIC_EncodePriority>
 800256a:	4602      	mov	r2, r0
 800256c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002570:	4611      	mov	r1, r2
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff ff80 	bl	8002478 <__NVIC_SetPriority>
}
 8002578:	bf00      	nop
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800258a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff ff54 	bl	800243c <__NVIC_EnableIRQ>
}
 8002594:	bf00      	nop
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025aa:	f7ff ff09 	bl	80023c0 <HAL_GetTick>
 80025ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d008      	beq.n	80025ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2280      	movs	r2, #128	; 0x80
 80025c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e052      	b.n	8002674 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0216 	bic.w	r2, r2, #22
 80025dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695a      	ldr	r2, [r3, #20]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d103      	bne.n	80025fe <HAL_DMA_Abort+0x62>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d007      	beq.n	800260e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0208 	bic.w	r2, r2, #8
 800260c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0201 	bic.w	r2, r2, #1
 800261c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800261e:	e013      	b.n	8002648 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002620:	f7ff fece 	bl	80023c0 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b05      	cmp	r3, #5
 800262c:	d90c      	bls.n	8002648 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2220      	movs	r2, #32
 8002632:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2203      	movs	r2, #3
 8002640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e015      	b.n	8002674 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1e4      	bne.n	8002620 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265a:	223f      	movs	r2, #63	; 0x3f
 800265c:	409a      	lsls	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d004      	beq.n	800269a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2280      	movs	r2, #128	; 0x80
 8002694:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e00c      	b.n	80026b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2205      	movs	r2, #5
 800269e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0201 	bic.w	r2, r2, #1
 80026b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b089      	sub	sp, #36	; 0x24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
 80026da:	e159      	b.n	8002990 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026dc:	2201      	movs	r2, #1
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	4013      	ands	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	f040 8148 	bne.w	800298a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	2b01      	cmp	r3, #1
 8002704:	d005      	beq.n	8002712 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800270e:	2b02      	cmp	r3, #2
 8002710:	d130      	bne.n	8002774 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	2203      	movs	r2, #3
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43db      	mvns	r3, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4013      	ands	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4313      	orrs	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002748:	2201      	movs	r2, #1
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4013      	ands	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	091b      	lsrs	r3, r3, #4
 800275e:	f003 0201 	and.w	r2, r3, #1
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	2b03      	cmp	r3, #3
 800277e:	d017      	beq.n	80027b0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	2203      	movs	r2, #3
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 0303 	and.w	r3, r3, #3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d123      	bne.n	8002804 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	08da      	lsrs	r2, r3, #3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3208      	adds	r2, #8
 80027c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	220f      	movs	r2, #15
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	691a      	ldr	r2, [r3, #16]
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	08da      	lsrs	r2, r3, #3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3208      	adds	r2, #8
 80027fe:	69b9      	ldr	r1, [r7, #24]
 8002800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	2203      	movs	r2, #3
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 0203 	and.w	r2, r3, #3
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 80a2 	beq.w	800298a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	4b57      	ldr	r3, [pc, #348]	; (80029a8 <HAL_GPIO_Init+0x2e8>)
 800284c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284e:	4a56      	ldr	r2, [pc, #344]	; (80029a8 <HAL_GPIO_Init+0x2e8>)
 8002850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002854:	6453      	str	r3, [r2, #68]	; 0x44
 8002856:	4b54      	ldr	r3, [pc, #336]	; (80029a8 <HAL_GPIO_Init+0x2e8>)
 8002858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002862:	4a52      	ldr	r2, [pc, #328]	; (80029ac <HAL_GPIO_Init+0x2ec>)
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	089b      	lsrs	r3, r3, #2
 8002868:	3302      	adds	r3, #2
 800286a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800286e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	220f      	movs	r2, #15
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43db      	mvns	r3, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4013      	ands	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a49      	ldr	r2, [pc, #292]	; (80029b0 <HAL_GPIO_Init+0x2f0>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d019      	beq.n	80028c2 <HAL_GPIO_Init+0x202>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a48      	ldr	r2, [pc, #288]	; (80029b4 <HAL_GPIO_Init+0x2f4>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d013      	beq.n	80028be <HAL_GPIO_Init+0x1fe>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a47      	ldr	r2, [pc, #284]	; (80029b8 <HAL_GPIO_Init+0x2f8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d00d      	beq.n	80028ba <HAL_GPIO_Init+0x1fa>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a46      	ldr	r2, [pc, #280]	; (80029bc <HAL_GPIO_Init+0x2fc>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d007      	beq.n	80028b6 <HAL_GPIO_Init+0x1f6>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a45      	ldr	r2, [pc, #276]	; (80029c0 <HAL_GPIO_Init+0x300>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d101      	bne.n	80028b2 <HAL_GPIO_Init+0x1f2>
 80028ae:	2304      	movs	r3, #4
 80028b0:	e008      	b.n	80028c4 <HAL_GPIO_Init+0x204>
 80028b2:	2307      	movs	r3, #7
 80028b4:	e006      	b.n	80028c4 <HAL_GPIO_Init+0x204>
 80028b6:	2303      	movs	r3, #3
 80028b8:	e004      	b.n	80028c4 <HAL_GPIO_Init+0x204>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e002      	b.n	80028c4 <HAL_GPIO_Init+0x204>
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <HAL_GPIO_Init+0x204>
 80028c2:	2300      	movs	r3, #0
 80028c4:	69fa      	ldr	r2, [r7, #28]
 80028c6:	f002 0203 	and.w	r2, r2, #3
 80028ca:	0092      	lsls	r2, r2, #2
 80028cc:	4093      	lsls	r3, r2
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028d4:	4935      	ldr	r1, [pc, #212]	; (80029ac <HAL_GPIO_Init+0x2ec>)
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	089b      	lsrs	r3, r3, #2
 80028da:	3302      	adds	r3, #2
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028e2:	4b38      	ldr	r3, [pc, #224]	; (80029c4 <HAL_GPIO_Init+0x304>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	43db      	mvns	r3, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4013      	ands	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002906:	4a2f      	ldr	r2, [pc, #188]	; (80029c4 <HAL_GPIO_Init+0x304>)
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800290c:	4b2d      	ldr	r3, [pc, #180]	; (80029c4 <HAL_GPIO_Init+0x304>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002930:	4a24      	ldr	r2, [pc, #144]	; (80029c4 <HAL_GPIO_Init+0x304>)
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002936:	4b23      	ldr	r3, [pc, #140]	; (80029c4 <HAL_GPIO_Init+0x304>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	43db      	mvns	r3, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4013      	ands	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800295a:	4a1a      	ldr	r2, [pc, #104]	; (80029c4 <HAL_GPIO_Init+0x304>)
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002960:	4b18      	ldr	r3, [pc, #96]	; (80029c4 <HAL_GPIO_Init+0x304>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	43db      	mvns	r3, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002984:	4a0f      	ldr	r2, [pc, #60]	; (80029c4 <HAL_GPIO_Init+0x304>)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3301      	adds	r3, #1
 800298e:	61fb      	str	r3, [r7, #28]
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	2b0f      	cmp	r3, #15
 8002994:	f67f aea2 	bls.w	80026dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002998:	bf00      	nop
 800299a:	bf00      	nop
 800299c:	3724      	adds	r7, #36	; 0x24
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40013800 	.word	0x40013800
 80029b0:	40020000 	.word	0x40020000
 80029b4:	40020400 	.word	0x40020400
 80029b8:	40020800 	.word	0x40020800
 80029bc:	40020c00 	.word	0x40020c00
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40013c00 	.word	0x40013c00

080029c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	807b      	strh	r3, [r7, #2]
 80029d4:	4613      	mov	r3, r2
 80029d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029d8:	787b      	ldrb	r3, [r7, #1]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029de:	887a      	ldrh	r2, [r7, #2]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029e4:	e003      	b.n	80029ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029e6:	887b      	ldrh	r3, [r7, #2]
 80029e8:	041a      	lsls	r2, r3, #16
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	619a      	str	r2, [r3, #24]
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b085      	sub	sp, #20
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	460b      	mov	r3, r1
 8002a04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a0c:	887a      	ldrh	r2, [r7, #2]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4013      	ands	r3, r2
 8002a12:	041a      	lsls	r2, r3, #16
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	43d9      	mvns	r1, r3
 8002a18:	887b      	ldrh	r3, [r7, #2]
 8002a1a:	400b      	ands	r3, r1
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	619a      	str	r2, [r3, #24]
}
 8002a22:	bf00      	nop
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
	...

08002a30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e12b      	b.n	8002c9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d106      	bne.n	8002a5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7fe fe30 	bl	80016bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2224      	movs	r2, #36	; 0x24
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0201 	bic.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a94:	f001 f966 	bl	8003d64 <HAL_RCC_GetPCLK1Freq>
 8002a98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	4a81      	ldr	r2, [pc, #516]	; (8002ca4 <HAL_I2C_Init+0x274>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d807      	bhi.n	8002ab4 <HAL_I2C_Init+0x84>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	4a80      	ldr	r2, [pc, #512]	; (8002ca8 <HAL_I2C_Init+0x278>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	bf94      	ite	ls
 8002aac:	2301      	movls	r3, #1
 8002aae:	2300      	movhi	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	e006      	b.n	8002ac2 <HAL_I2C_Init+0x92>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4a7d      	ldr	r2, [pc, #500]	; (8002cac <HAL_I2C_Init+0x27c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	bf94      	ite	ls
 8002abc:	2301      	movls	r3, #1
 8002abe:	2300      	movhi	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e0e7      	b.n	8002c9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	4a78      	ldr	r2, [pc, #480]	; (8002cb0 <HAL_I2C_Init+0x280>)
 8002ace:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad2:	0c9b      	lsrs	r3, r3, #18
 8002ad4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	4a6a      	ldr	r2, [pc, #424]	; (8002ca4 <HAL_I2C_Init+0x274>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d802      	bhi.n	8002b04 <HAL_I2C_Init+0xd4>
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	3301      	adds	r3, #1
 8002b02:	e009      	b.n	8002b18 <HAL_I2C_Init+0xe8>
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b0a:	fb02 f303 	mul.w	r3, r2, r3
 8002b0e:	4a69      	ldr	r2, [pc, #420]	; (8002cb4 <HAL_I2C_Init+0x284>)
 8002b10:	fba2 2303 	umull	r2, r3, r2, r3
 8002b14:	099b      	lsrs	r3, r3, #6
 8002b16:	3301      	adds	r3, #1
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	495c      	ldr	r1, [pc, #368]	; (8002ca4 <HAL_I2C_Init+0x274>)
 8002b34:	428b      	cmp	r3, r1
 8002b36:	d819      	bhi.n	8002b6c <HAL_I2C_Init+0x13c>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	1e59      	subs	r1, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b46:	1c59      	adds	r1, r3, #1
 8002b48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b4c:	400b      	ands	r3, r1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00a      	beq.n	8002b68 <HAL_I2C_Init+0x138>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	1e59      	subs	r1, r3, #1
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b60:	3301      	adds	r3, #1
 8002b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b66:	e051      	b.n	8002c0c <HAL_I2C_Init+0x1dc>
 8002b68:	2304      	movs	r3, #4
 8002b6a:	e04f      	b.n	8002c0c <HAL_I2C_Init+0x1dc>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d111      	bne.n	8002b98 <HAL_I2C_Init+0x168>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	1e58      	subs	r0, r3, #1
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6859      	ldr	r1, [r3, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	440b      	add	r3, r1
 8002b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b86:	3301      	adds	r3, #1
 8002b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	bf0c      	ite	eq
 8002b90:	2301      	moveq	r3, #1
 8002b92:	2300      	movne	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	e012      	b.n	8002bbe <HAL_I2C_Init+0x18e>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	1e58      	subs	r0, r3, #1
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6859      	ldr	r1, [r3, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	0099      	lsls	r1, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bae:	3301      	adds	r3, #1
 8002bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	bf0c      	ite	eq
 8002bb8:	2301      	moveq	r3, #1
 8002bba:	2300      	movne	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_I2C_Init+0x196>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e022      	b.n	8002c0c <HAL_I2C_Init+0x1dc>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10e      	bne.n	8002bec <HAL_I2C_Init+0x1bc>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1e58      	subs	r0, r3, #1
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6859      	ldr	r1, [r3, #4]
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	440b      	add	r3, r1
 8002bdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002be0:	3301      	adds	r3, #1
 8002be2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bea:	e00f      	b.n	8002c0c <HAL_I2C_Init+0x1dc>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	1e58      	subs	r0, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6859      	ldr	r1, [r3, #4]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	0099      	lsls	r1, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c02:	3301      	adds	r3, #1
 8002c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	6809      	ldr	r1, [r1, #0]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69da      	ldr	r2, [r3, #28]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6911      	ldr	r1, [r2, #16]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	68d2      	ldr	r2, [r2, #12]
 8002c46:	4311      	orrs	r1, r2
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6812      	ldr	r2, [r2, #0]
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695a      	ldr	r2, [r3, #20]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0201 	orr.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2220      	movs	r2, #32
 8002c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	000186a0 	.word	0x000186a0
 8002ca8:	001e847f 	.word	0x001e847f
 8002cac:	003d08ff 	.word	0x003d08ff
 8002cb0:	431bde83 	.word	0x431bde83
 8002cb4:	10624dd3 	.word	0x10624dd3

08002cb8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b088      	sub	sp, #32
 8002cbc:	af02      	add	r7, sp, #8
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	607a      	str	r2, [r7, #4]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	817b      	strh	r3, [r7, #10]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ccc:	f7ff fb78 	bl	80023c0 <HAL_GetTick>
 8002cd0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b20      	cmp	r3, #32
 8002cdc:	f040 80e0 	bne.w	8002ea0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	2319      	movs	r3, #25
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	4970      	ldr	r1, [pc, #448]	; (8002eac <HAL_I2C_Master_Transmit+0x1f4>)
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 fa92 	bl	8003214 <I2C_WaitOnFlagUntilTimeout>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	e0d3      	b.n	8002ea2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_I2C_Master_Transmit+0x50>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e0cc      	b.n	8002ea2 <HAL_I2C_Master_Transmit+0x1ea>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d007      	beq.n	8002d2e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 0201 	orr.w	r2, r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2221      	movs	r2, #33	; 0x21
 8002d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2210      	movs	r2, #16
 8002d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	893a      	ldrh	r2, [r7, #8]
 8002d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	4a50      	ldr	r2, [pc, #320]	; (8002eb0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d70:	8979      	ldrh	r1, [r7, #10]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	6a3a      	ldr	r2, [r7, #32]
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 f9ca 	bl	8003110 <I2C_MasterRequestWrite>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e08d      	b.n	8002ea2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d86:	2300      	movs	r3, #0
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d9c:	e066      	b.n	8002e6c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	6a39      	ldr	r1, [r7, #32]
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 fb0c 	bl	80033c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00d      	beq.n	8002dca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d107      	bne.n	8002dc6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e06b      	b.n	8002ea2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	781a      	ldrb	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d11b      	bne.n	8002e40 <HAL_I2C_Master_Transmit+0x188>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d017      	beq.n	8002e40 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	781a      	ldrb	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	6a39      	ldr	r1, [r7, #32]
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 fafc 	bl	8003442 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00d      	beq.n	8002e6c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d107      	bne.n	8002e68 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e66:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e01a      	b.n	8002ea2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d194      	bne.n	8002d9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	e000      	b.n	8002ea2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ea0:	2302      	movs	r3, #2
  }
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3718      	adds	r7, #24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	00100002 	.word	0x00100002
 8002eb0:	ffff0000 	.word	0xffff0000

08002eb4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08a      	sub	sp, #40	; 0x28
 8002eb8:	af02      	add	r7, sp, #8
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	603b      	str	r3, [r7, #0]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002ec4:	f7ff fa7c 	bl	80023c0 <HAL_GetTick>
 8002ec8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b20      	cmp	r3, #32
 8002ed8:	f040 8111 	bne.w	80030fe <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	2319      	movs	r3, #25
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	4988      	ldr	r1, [pc, #544]	; (8003108 <HAL_I2C_IsDeviceReady+0x254>)
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 f994 	bl	8003214 <I2C_WaitOnFlagUntilTimeout>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e104      	b.n	8003100 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_I2C_IsDeviceReady+0x50>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e0fd      	b.n	8003100 <HAL_I2C_IsDeviceReady+0x24c>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d007      	beq.n	8002f2a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f042 0201 	orr.w	r2, r2, #1
 8002f28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2224      	movs	r2, #36	; 0x24
 8002f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4a70      	ldr	r2, [pc, #448]	; (800310c <HAL_I2C_IsDeviceReady+0x258>)
 8002f4c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f5c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 f952 	bl	8003214 <I2C_WaitOnFlagUntilTimeout>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00d      	beq.n	8002f92 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f84:	d103      	bne.n	8002f8e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f8c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e0b6      	b.n	8003100 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f92:	897b      	ldrh	r3, [r7, #10]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	461a      	mov	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fa0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002fa2:	f7ff fa0d 	bl	80023c0 <HAL_GetTick>
 8002fa6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	bf0c      	ite	eq
 8002fb6:	2301      	moveq	r3, #1
 8002fb8:	2300      	movne	r3, #0
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fcc:	bf0c      	ite	eq
 8002fce:	2301      	moveq	r3, #1
 8002fd0:	2300      	movne	r3, #0
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002fd6:	e025      	b.n	8003024 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fd8:	f7ff f9f2 	bl	80023c0 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d302      	bcc.n	8002fee <HAL_I2C_IsDeviceReady+0x13a>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d103      	bne.n	8002ff6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	22a0      	movs	r2, #160	; 0xa0
 8002ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b02      	cmp	r3, #2
 8003002:	bf0c      	ite	eq
 8003004:	2301      	moveq	r3, #1
 8003006:	2300      	movne	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800301a:	bf0c      	ite	eq
 800301c:	2301      	moveq	r3, #1
 800301e:	2300      	movne	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2ba0      	cmp	r3, #160	; 0xa0
 800302e:	d005      	beq.n	800303c <HAL_I2C_IsDeviceReady+0x188>
 8003030:	7dfb      	ldrb	r3, [r7, #23]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d102      	bne.n	800303c <HAL_I2C_IsDeviceReady+0x188>
 8003036:	7dbb      	ldrb	r3, [r7, #22]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0cd      	beq.n	8002fd8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b02      	cmp	r3, #2
 8003050:	d129      	bne.n	80030a6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003060:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003062:	2300      	movs	r3, #0
 8003064:	613b      	str	r3, [r7, #16]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	613b      	str	r3, [r7, #16]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	2319      	movs	r3, #25
 800307e:	2201      	movs	r2, #1
 8003080:	4921      	ldr	r1, [pc, #132]	; (8003108 <HAL_I2C_IsDeviceReady+0x254>)
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 f8c6 	bl	8003214 <I2C_WaitOnFlagUntilTimeout>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e036      	b.n	8003100 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	e02c      	b.n	8003100 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030be:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	2319      	movs	r3, #25
 80030c6:	2201      	movs	r2, #1
 80030c8:	490f      	ldr	r1, [pc, #60]	; (8003108 <HAL_I2C_IsDeviceReady+0x254>)
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f8a2 	bl	8003214 <I2C_WaitOnFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e012      	b.n	8003100 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	3301      	adds	r3, #1
 80030de:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	f4ff af32 	bcc.w	8002f4e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80030fe:	2302      	movs	r3, #2
  }
}
 8003100:	4618      	mov	r0, r3
 8003102:	3720      	adds	r7, #32
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	00100002 	.word	0x00100002
 800310c:	ffff0000 	.word	0xffff0000

08003110 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af02      	add	r7, sp, #8
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	607a      	str	r2, [r7, #4]
 800311a:	603b      	str	r3, [r7, #0]
 800311c:	460b      	mov	r3, r1
 800311e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	2b08      	cmp	r3, #8
 800312a:	d006      	beq.n	800313a <I2C_MasterRequestWrite+0x2a>
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d003      	beq.n	800313a <I2C_MasterRequestWrite+0x2a>
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003138:	d108      	bne.n	800314c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	e00b      	b.n	8003164 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003150:	2b12      	cmp	r3, #18
 8003152:	d107      	bne.n	8003164 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003162:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 f84f 	bl	8003214 <I2C_WaitOnFlagUntilTimeout>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00d      	beq.n	8003198 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800318a:	d103      	bne.n	8003194 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003192:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e035      	b.n	8003204 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031a0:	d108      	bne.n	80031b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031a2:	897b      	ldrh	r3, [r7, #10]
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	461a      	mov	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031b0:	611a      	str	r2, [r3, #16]
 80031b2:	e01b      	b.n	80031ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80031b4:	897b      	ldrh	r3, [r7, #10]
 80031b6:	11db      	asrs	r3, r3, #7
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	f003 0306 	and.w	r3, r3, #6
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	f063 030f 	orn	r3, r3, #15
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	490e      	ldr	r1, [pc, #56]	; (800320c <I2C_MasterRequestWrite+0xfc>)
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 f875 	bl	80032c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e010      	b.n	8003204 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80031e2:	897b      	ldrh	r3, [r7, #10]
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	4907      	ldr	r1, [pc, #28]	; (8003210 <I2C_MasterRequestWrite+0x100>)
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 f865 	bl	80032c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	00010008 	.word	0x00010008
 8003210:	00010002 	.word	0x00010002

08003214 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	4613      	mov	r3, r2
 8003222:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003224:	e025      	b.n	8003272 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322c:	d021      	beq.n	8003272 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800322e:	f7ff f8c7 	bl	80023c0 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	d302      	bcc.n	8003244 <I2C_WaitOnFlagUntilTimeout+0x30>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d116      	bne.n	8003272 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	f043 0220 	orr.w	r2, r3, #32
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e023      	b.n	80032ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	0c1b      	lsrs	r3, r3, #16
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b01      	cmp	r3, #1
 800327a:	d10d      	bne.n	8003298 <I2C_WaitOnFlagUntilTimeout+0x84>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	43da      	mvns	r2, r3
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	4013      	ands	r3, r2
 8003288:	b29b      	uxth	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	bf0c      	ite	eq
 800328e:	2301      	moveq	r3, #1
 8003290:	2300      	movne	r3, #0
 8003292:	b2db      	uxtb	r3, r3
 8003294:	461a      	mov	r2, r3
 8003296:	e00c      	b.n	80032b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	43da      	mvns	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	4013      	ands	r3, r2
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	bf0c      	ite	eq
 80032aa:	2301      	moveq	r3, #1
 80032ac:	2300      	movne	r3, #0
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	461a      	mov	r2, r3
 80032b2:	79fb      	ldrb	r3, [r7, #7]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d0b6      	beq.n	8003226 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b084      	sub	sp, #16
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	60f8      	str	r0, [r7, #12]
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032d0:	e051      	b.n	8003376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032e0:	d123      	bne.n	800332a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2220      	movs	r2, #32
 8003306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	f043 0204 	orr.w	r2, r3, #4
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e046      	b.n	80033b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003330:	d021      	beq.n	8003376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003332:	f7ff f845 	bl	80023c0 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	429a      	cmp	r2, r3
 8003340:	d302      	bcc.n	8003348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d116      	bne.n	8003376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2220      	movs	r2, #32
 8003352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	f043 0220 	orr.w	r2, r3, #32
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e020      	b.n	80033b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	0c1b      	lsrs	r3, r3, #16
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b01      	cmp	r3, #1
 800337e:	d10c      	bne.n	800339a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	43da      	mvns	r2, r3
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	4013      	ands	r3, r2
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	bf14      	ite	ne
 8003392:	2301      	movne	r3, #1
 8003394:	2300      	moveq	r3, #0
 8003396:	b2db      	uxtb	r3, r3
 8003398:	e00b      	b.n	80033b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	43da      	mvns	r2, r3
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	4013      	ands	r3, r2
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	bf14      	ite	ne
 80033ac:	2301      	movne	r3, #1
 80033ae:	2300      	moveq	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d18d      	bne.n	80032d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033cc:	e02d      	b.n	800342a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 f878 	bl	80034c4 <I2C_IsAcknowledgeFailed>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e02d      	b.n	800343a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e4:	d021      	beq.n	800342a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e6:	f7fe ffeb 	bl	80023c0 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d302      	bcc.n	80033fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d116      	bne.n	800342a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2220      	movs	r2, #32
 8003406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	f043 0220 	orr.w	r2, r3, #32
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e007      	b.n	800343a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003434:	2b80      	cmp	r3, #128	; 0x80
 8003436:	d1ca      	bne.n	80033ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b084      	sub	sp, #16
 8003446:	af00      	add	r7, sp, #0
 8003448:	60f8      	str	r0, [r7, #12]
 800344a:	60b9      	str	r1, [r7, #8]
 800344c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800344e:	e02d      	b.n	80034ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 f837 	bl	80034c4 <I2C_IsAcknowledgeFailed>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e02d      	b.n	80034bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003466:	d021      	beq.n	80034ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003468:	f7fe ffaa 	bl	80023c0 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	429a      	cmp	r2, r3
 8003476:	d302      	bcc.n	800347e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d116      	bne.n	80034ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	f043 0220 	orr.w	r2, r3, #32
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e007      	b.n	80034bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	f003 0304 	and.w	r3, r3, #4
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	d1ca      	bne.n	8003450 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034da:	d11b      	bne.n	8003514 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	f043 0204 	orr.w	r2, r3, #4
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e000      	b.n	8003516 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
	...

08003524 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e264      	b.n	8003a00 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d075      	beq.n	800362e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003542:	4ba3      	ldr	r3, [pc, #652]	; (80037d0 <HAL_RCC_OscConfig+0x2ac>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 030c 	and.w	r3, r3, #12
 800354a:	2b04      	cmp	r3, #4
 800354c:	d00c      	beq.n	8003568 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800354e:	4ba0      	ldr	r3, [pc, #640]	; (80037d0 <HAL_RCC_OscConfig+0x2ac>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003556:	2b08      	cmp	r3, #8
 8003558:	d112      	bne.n	8003580 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800355a:	4b9d      	ldr	r3, [pc, #628]	; (80037d0 <HAL_RCC_OscConfig+0x2ac>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003562:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003566:	d10b      	bne.n	8003580 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003568:	4b99      	ldr	r3, [pc, #612]	; (80037d0 <HAL_RCC_OscConfig+0x2ac>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d05b      	beq.n	800362c <HAL_RCC_OscConfig+0x108>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d157      	bne.n	800362c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e23f      	b.n	8003a00 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003588:	d106      	bne.n	8003598 <HAL_RCC_OscConfig+0x74>
 800358a:	4b91      	ldr	r3, [pc, #580]	; (80037d0 <HAL_RCC_OscConfig+0x2ac>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a90      	ldr	r2, [pc, #576]	; (80037d0 <HAL_RCC_OscConfig+0x2ac>)
 8003590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	e01d      	b.n	80035d4 <HAL_RCC_OscConfig+0xb0>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035a0:	d10c      	bne.n	80035bc <HAL_RCC_OscConfig+0x98>
 80035a2:	4b8b      	ldr	r3, [pc, #556]	; (80037d0 <HAL_RCC_OscConfig+0x2ac>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a8a      	ldr	r2, [pc, #552]	; (80037d0 <HAL_RCC_OscConfig+0x2ac>)
 80035a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	4b88      	ldr	r3, [pc, #544]	; (80037d0 <HAL_RCC_OscConfig+0x2ac>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a87      	ldr	r2, [pc, #540]	; (80037d0 <HAL_RCC_OscConfig+0x2ac>)
 80035b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	e00b      	b.n	80035d4 <HAL_RCC_OscConfig+0xb0>
 80035bc:	4b84      	ldr	r3, [pc, #528]	; (80037d0 <HAL_RCC_OscConfig+0x2ac>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a83      	ldr	r2, [pc, #524]	; (80037d0 <HAL_RCC_OscConfig+0x2ac>)
 80035c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035c6:	6013      	str	r3, [r2, #0]
 80035c8:	4b81      	ldr	r3, [pc, #516]	; (80037d0 <HAL_RCC_OscConfig+0x2ac>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a80      	ldr	r2, [pc, #512]	; (80037d0 <HAL_RCC_OscConfig+0x2ac>)
 80035ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d013      	beq.n	8003604 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035dc:	f7fe fef0 	bl	80023c0 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035e4:	f7fe feec 	bl	80023c0 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b64      	cmp	r3, #100	; 0x64
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e204      	b.n	8003a00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f6:	4b76      	ldr	r3, [pc, #472]	; (80037d0 <HAL_RCC_OscConfig+0x2ac>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f0      	beq.n	80035e4 <HAL_RCC_OscConfig+0xc0>
 8003602:	e014      	b.n	800362e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003604:	f7fe fedc 	bl	80023c0 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800360c:	f7fe fed8 	bl	80023c0 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b64      	cmp	r3, #100	; 0x64
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e1f0      	b.n	8003a00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800361e:	4b6c      	ldr	r3, [pc, #432]	; (80037d0 <HAL_RCC_OscConfig+0x2ac>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f0      	bne.n	800360c <HAL_RCC_OscConfig+0xe8>
 800362a:	e000      	b.n	800362e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800362c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d063      	beq.n	8003702 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800363a:	4b65      	ldr	r3, [pc, #404]	; (80037d0 <HAL_RCC_OscConfig+0x2ac>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 030c 	and.w	r3, r3, #12
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00b      	beq.n	800365e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003646:	4b62      	ldr	r3, [pc, #392]	; (80037d0 <HAL_RCC_OscConfig+0x2ac>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800364e:	2b08      	cmp	r3, #8
 8003650:	d11c      	bne.n	800368c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003652:	4b5f      	ldr	r3, [pc, #380]	; (80037d0 <HAL_RCC_OscConfig+0x2ac>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d116      	bne.n	800368c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800365e:	4b5c      	ldr	r3, [pc, #368]	; (80037d0 <HAL_RCC_OscConfig+0x2ac>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d005      	beq.n	8003676 <HAL_RCC_OscConfig+0x152>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d001      	beq.n	8003676 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e1c4      	b.n	8003a00 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003676:	4b56      	ldr	r3, [pc, #344]	; (80037d0 <HAL_RCC_OscConfig+0x2ac>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	4952      	ldr	r1, [pc, #328]	; (80037d0 <HAL_RCC_OscConfig+0x2ac>)
 8003686:	4313      	orrs	r3, r2
 8003688:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800368a:	e03a      	b.n	8003702 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d020      	beq.n	80036d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003694:	4b4f      	ldr	r3, [pc, #316]	; (80037d4 <HAL_RCC_OscConfig+0x2b0>)
 8003696:	2201      	movs	r2, #1
 8003698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369a:	f7fe fe91 	bl	80023c0 <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a0:	e008      	b.n	80036b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036a2:	f7fe fe8d 	bl	80023c0 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e1a5      	b.n	8003a00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b4:	4b46      	ldr	r3, [pc, #280]	; (80037d0 <HAL_RCC_OscConfig+0x2ac>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0f0      	beq.n	80036a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c0:	4b43      	ldr	r3, [pc, #268]	; (80037d0 <HAL_RCC_OscConfig+0x2ac>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	4940      	ldr	r1, [pc, #256]	; (80037d0 <HAL_RCC_OscConfig+0x2ac>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	600b      	str	r3, [r1, #0]
 80036d4:	e015      	b.n	8003702 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036d6:	4b3f      	ldr	r3, [pc, #252]	; (80037d4 <HAL_RCC_OscConfig+0x2b0>)
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036dc:	f7fe fe70 	bl	80023c0 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036e4:	f7fe fe6c 	bl	80023c0 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e184      	b.n	8003a00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036f6:	4b36      	ldr	r3, [pc, #216]	; (80037d0 <HAL_RCC_OscConfig+0x2ac>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1f0      	bne.n	80036e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d030      	beq.n	8003770 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d016      	beq.n	8003744 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003716:	4b30      	ldr	r3, [pc, #192]	; (80037d8 <HAL_RCC_OscConfig+0x2b4>)
 8003718:	2201      	movs	r2, #1
 800371a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371c:	f7fe fe50 	bl	80023c0 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003724:	f7fe fe4c 	bl	80023c0 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e164      	b.n	8003a00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003736:	4b26      	ldr	r3, [pc, #152]	; (80037d0 <HAL_RCC_OscConfig+0x2ac>)
 8003738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f0      	beq.n	8003724 <HAL_RCC_OscConfig+0x200>
 8003742:	e015      	b.n	8003770 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003744:	4b24      	ldr	r3, [pc, #144]	; (80037d8 <HAL_RCC_OscConfig+0x2b4>)
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800374a:	f7fe fe39 	bl	80023c0 <HAL_GetTick>
 800374e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003750:	e008      	b.n	8003764 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003752:	f7fe fe35 	bl	80023c0 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d901      	bls.n	8003764 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e14d      	b.n	8003a00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003764:	4b1a      	ldr	r3, [pc, #104]	; (80037d0 <HAL_RCC_OscConfig+0x2ac>)
 8003766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1f0      	bne.n	8003752 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 80a0 	beq.w	80038be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800377e:	2300      	movs	r3, #0
 8003780:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003782:	4b13      	ldr	r3, [pc, #76]	; (80037d0 <HAL_RCC_OscConfig+0x2ac>)
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10f      	bne.n	80037ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800378e:	2300      	movs	r3, #0
 8003790:	60bb      	str	r3, [r7, #8]
 8003792:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <HAL_RCC_OscConfig+0x2ac>)
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	4a0e      	ldr	r2, [pc, #56]	; (80037d0 <HAL_RCC_OscConfig+0x2ac>)
 8003798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800379c:	6413      	str	r3, [r2, #64]	; 0x40
 800379e:	4b0c      	ldr	r3, [pc, #48]	; (80037d0 <HAL_RCC_OscConfig+0x2ac>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a6:	60bb      	str	r3, [r7, #8]
 80037a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037aa:	2301      	movs	r3, #1
 80037ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ae:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <HAL_RCC_OscConfig+0x2b8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d121      	bne.n	80037fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ba:	4b08      	ldr	r3, [pc, #32]	; (80037dc <HAL_RCC_OscConfig+0x2b8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a07      	ldr	r2, [pc, #28]	; (80037dc <HAL_RCC_OscConfig+0x2b8>)
 80037c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037c6:	f7fe fdfb 	bl	80023c0 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037cc:	e011      	b.n	80037f2 <HAL_RCC_OscConfig+0x2ce>
 80037ce:	bf00      	nop
 80037d0:	40023800 	.word	0x40023800
 80037d4:	42470000 	.word	0x42470000
 80037d8:	42470e80 	.word	0x42470e80
 80037dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e0:	f7fe fdee 	bl	80023c0 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e106      	b.n	8003a00 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f2:	4b85      	ldr	r3, [pc, #532]	; (8003a08 <HAL_RCC_OscConfig+0x4e4>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0f0      	beq.n	80037e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d106      	bne.n	8003814 <HAL_RCC_OscConfig+0x2f0>
 8003806:	4b81      	ldr	r3, [pc, #516]	; (8003a0c <HAL_RCC_OscConfig+0x4e8>)
 8003808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380a:	4a80      	ldr	r2, [pc, #512]	; (8003a0c <HAL_RCC_OscConfig+0x4e8>)
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	6713      	str	r3, [r2, #112]	; 0x70
 8003812:	e01c      	b.n	800384e <HAL_RCC_OscConfig+0x32a>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2b05      	cmp	r3, #5
 800381a:	d10c      	bne.n	8003836 <HAL_RCC_OscConfig+0x312>
 800381c:	4b7b      	ldr	r3, [pc, #492]	; (8003a0c <HAL_RCC_OscConfig+0x4e8>)
 800381e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003820:	4a7a      	ldr	r2, [pc, #488]	; (8003a0c <HAL_RCC_OscConfig+0x4e8>)
 8003822:	f043 0304 	orr.w	r3, r3, #4
 8003826:	6713      	str	r3, [r2, #112]	; 0x70
 8003828:	4b78      	ldr	r3, [pc, #480]	; (8003a0c <HAL_RCC_OscConfig+0x4e8>)
 800382a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382c:	4a77      	ldr	r2, [pc, #476]	; (8003a0c <HAL_RCC_OscConfig+0x4e8>)
 800382e:	f043 0301 	orr.w	r3, r3, #1
 8003832:	6713      	str	r3, [r2, #112]	; 0x70
 8003834:	e00b      	b.n	800384e <HAL_RCC_OscConfig+0x32a>
 8003836:	4b75      	ldr	r3, [pc, #468]	; (8003a0c <HAL_RCC_OscConfig+0x4e8>)
 8003838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383a:	4a74      	ldr	r2, [pc, #464]	; (8003a0c <HAL_RCC_OscConfig+0x4e8>)
 800383c:	f023 0301 	bic.w	r3, r3, #1
 8003840:	6713      	str	r3, [r2, #112]	; 0x70
 8003842:	4b72      	ldr	r3, [pc, #456]	; (8003a0c <HAL_RCC_OscConfig+0x4e8>)
 8003844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003846:	4a71      	ldr	r2, [pc, #452]	; (8003a0c <HAL_RCC_OscConfig+0x4e8>)
 8003848:	f023 0304 	bic.w	r3, r3, #4
 800384c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d015      	beq.n	8003882 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003856:	f7fe fdb3 	bl	80023c0 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385c:	e00a      	b.n	8003874 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800385e:	f7fe fdaf 	bl	80023c0 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	f241 3288 	movw	r2, #5000	; 0x1388
 800386c:	4293      	cmp	r3, r2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e0c5      	b.n	8003a00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003874:	4b65      	ldr	r3, [pc, #404]	; (8003a0c <HAL_RCC_OscConfig+0x4e8>)
 8003876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0ee      	beq.n	800385e <HAL_RCC_OscConfig+0x33a>
 8003880:	e014      	b.n	80038ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003882:	f7fe fd9d 	bl	80023c0 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003888:	e00a      	b.n	80038a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800388a:	f7fe fd99 	bl	80023c0 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	f241 3288 	movw	r2, #5000	; 0x1388
 8003898:	4293      	cmp	r3, r2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e0af      	b.n	8003a00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a0:	4b5a      	ldr	r3, [pc, #360]	; (8003a0c <HAL_RCC_OscConfig+0x4e8>)
 80038a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1ee      	bne.n	800388a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038ac:	7dfb      	ldrb	r3, [r7, #23]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d105      	bne.n	80038be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038b2:	4b56      	ldr	r3, [pc, #344]	; (8003a0c <HAL_RCC_OscConfig+0x4e8>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	4a55      	ldr	r2, [pc, #340]	; (8003a0c <HAL_RCC_OscConfig+0x4e8>)
 80038b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 809b 	beq.w	80039fe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038c8:	4b50      	ldr	r3, [pc, #320]	; (8003a0c <HAL_RCC_OscConfig+0x4e8>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 030c 	and.w	r3, r3, #12
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	d05c      	beq.n	800398e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d141      	bne.n	8003960 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038dc:	4b4c      	ldr	r3, [pc, #304]	; (8003a10 <HAL_RCC_OscConfig+0x4ec>)
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e2:	f7fe fd6d 	bl	80023c0 <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e8:	e008      	b.n	80038fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ea:	f7fe fd69 	bl	80023c0 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e081      	b.n	8003a00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038fc:	4b43      	ldr	r3, [pc, #268]	; (8003a0c <HAL_RCC_OscConfig+0x4e8>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1f0      	bne.n	80038ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	69da      	ldr	r2, [r3, #28]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	019b      	lsls	r3, r3, #6
 8003918:	431a      	orrs	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391e:	085b      	lsrs	r3, r3, #1
 8003920:	3b01      	subs	r3, #1
 8003922:	041b      	lsls	r3, r3, #16
 8003924:	431a      	orrs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392a:	061b      	lsls	r3, r3, #24
 800392c:	4937      	ldr	r1, [pc, #220]	; (8003a0c <HAL_RCC_OscConfig+0x4e8>)
 800392e:	4313      	orrs	r3, r2
 8003930:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003932:	4b37      	ldr	r3, [pc, #220]	; (8003a10 <HAL_RCC_OscConfig+0x4ec>)
 8003934:	2201      	movs	r2, #1
 8003936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003938:	f7fe fd42 	bl	80023c0 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003940:	f7fe fd3e 	bl	80023c0 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e056      	b.n	8003a00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003952:	4b2e      	ldr	r3, [pc, #184]	; (8003a0c <HAL_RCC_OscConfig+0x4e8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0f0      	beq.n	8003940 <HAL_RCC_OscConfig+0x41c>
 800395e:	e04e      	b.n	80039fe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003960:	4b2b      	ldr	r3, [pc, #172]	; (8003a10 <HAL_RCC_OscConfig+0x4ec>)
 8003962:	2200      	movs	r2, #0
 8003964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003966:	f7fe fd2b 	bl	80023c0 <HAL_GetTick>
 800396a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800396e:	f7fe fd27 	bl	80023c0 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e03f      	b.n	8003a00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003980:	4b22      	ldr	r3, [pc, #136]	; (8003a0c <HAL_RCC_OscConfig+0x4e8>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1f0      	bne.n	800396e <HAL_RCC_OscConfig+0x44a>
 800398c:	e037      	b.n	80039fe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d101      	bne.n	800399a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e032      	b.n	8003a00 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800399a:	4b1c      	ldr	r3, [pc, #112]	; (8003a0c <HAL_RCC_OscConfig+0x4e8>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d028      	beq.n	80039fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d121      	bne.n	80039fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d11a      	bne.n	80039fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039ca:	4013      	ands	r3, r2
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039d0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d111      	bne.n	80039fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e0:	085b      	lsrs	r3, r3, #1
 80039e2:	3b01      	subs	r3, #1
 80039e4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d107      	bne.n	80039fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d001      	beq.n	80039fe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e000      	b.n	8003a00 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3718      	adds	r7, #24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40007000 	.word	0x40007000
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	42470060 	.word	0x42470060

08003a14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e0cc      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a28:	4b68      	ldr	r3, [pc, #416]	; (8003bcc <HAL_RCC_ClockConfig+0x1b8>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d90c      	bls.n	8003a50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a36:	4b65      	ldr	r3, [pc, #404]	; (8003bcc <HAL_RCC_ClockConfig+0x1b8>)
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a3e:	4b63      	ldr	r3, [pc, #396]	; (8003bcc <HAL_RCC_ClockConfig+0x1b8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d001      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e0b8      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d020      	beq.n	8003a9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d005      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a68:	4b59      	ldr	r3, [pc, #356]	; (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	4a58      	ldr	r2, [pc, #352]	; (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0308 	and.w	r3, r3, #8
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d005      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a80:	4b53      	ldr	r3, [pc, #332]	; (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	4a52      	ldr	r2, [pc, #328]	; (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a8c:	4b50      	ldr	r3, [pc, #320]	; (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	494d      	ldr	r1, [pc, #308]	; (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d044      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d107      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab2:	4b47      	ldr	r3, [pc, #284]	; (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d119      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e07f      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d003      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ace:	2b03      	cmp	r3, #3
 8003ad0:	d107      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad2:	4b3f      	ldr	r3, [pc, #252]	; (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d109      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e06f      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae2:	4b3b      	ldr	r3, [pc, #236]	; (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e067      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003af2:	4b37      	ldr	r3, [pc, #220]	; (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f023 0203 	bic.w	r2, r3, #3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	4934      	ldr	r1, [pc, #208]	; (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b04:	f7fe fc5c 	bl	80023c0 <HAL_GetTick>
 8003b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0a:	e00a      	b.n	8003b22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b0c:	f7fe fc58 	bl	80023c0 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e04f      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b22:	4b2b      	ldr	r3, [pc, #172]	; (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 020c 	and.w	r2, r3, #12
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d1eb      	bne.n	8003b0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b34:	4b25      	ldr	r3, [pc, #148]	; (8003bcc <HAL_RCC_ClockConfig+0x1b8>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d20c      	bcs.n	8003b5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b42:	4b22      	ldr	r3, [pc, #136]	; (8003bcc <HAL_RCC_ClockConfig+0x1b8>)
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4a:	4b20      	ldr	r3, [pc, #128]	; (8003bcc <HAL_RCC_ClockConfig+0x1b8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0307 	and.w	r3, r3, #7
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d001      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e032      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d008      	beq.n	8003b7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b68:	4b19      	ldr	r3, [pc, #100]	; (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	4916      	ldr	r1, [pc, #88]	; (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d009      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b86:	4b12      	ldr	r3, [pc, #72]	; (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	490e      	ldr	r1, [pc, #56]	; (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b9a:	f000 f821 	bl	8003be0 <HAL_RCC_GetSysClockFreq>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	091b      	lsrs	r3, r3, #4
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	490a      	ldr	r1, [pc, #40]	; (8003bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003bac:	5ccb      	ldrb	r3, [r1, r3]
 8003bae:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb2:	4a09      	ldr	r2, [pc, #36]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bb6:	4b09      	ldr	r3, [pc, #36]	; (8003bdc <HAL_RCC_ClockConfig+0x1c8>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fe f9c8 	bl	8001f50 <HAL_InitTick>

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40023c00 	.word	0x40023c00
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	0800f518 	.word	0x0800f518
 8003bd8:	20000018 	.word	0x20000018
 8003bdc:	2000001c 	.word	0x2000001c

08003be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be0:	b5b0      	push	{r4, r5, r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003be6:	2100      	movs	r1, #0
 8003be8:	6079      	str	r1, [r7, #4]
 8003bea:	2100      	movs	r1, #0
 8003bec:	60f9      	str	r1, [r7, #12]
 8003bee:	2100      	movs	r1, #0
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bf6:	4952      	ldr	r1, [pc, #328]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003bf8:	6889      	ldr	r1, [r1, #8]
 8003bfa:	f001 010c 	and.w	r1, r1, #12
 8003bfe:	2908      	cmp	r1, #8
 8003c00:	d00d      	beq.n	8003c1e <HAL_RCC_GetSysClockFreq+0x3e>
 8003c02:	2908      	cmp	r1, #8
 8003c04:	f200 8094 	bhi.w	8003d30 <HAL_RCC_GetSysClockFreq+0x150>
 8003c08:	2900      	cmp	r1, #0
 8003c0a:	d002      	beq.n	8003c12 <HAL_RCC_GetSysClockFreq+0x32>
 8003c0c:	2904      	cmp	r1, #4
 8003c0e:	d003      	beq.n	8003c18 <HAL_RCC_GetSysClockFreq+0x38>
 8003c10:	e08e      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c12:	4b4c      	ldr	r3, [pc, #304]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x164>)
 8003c14:	60bb      	str	r3, [r7, #8]
       break;
 8003c16:	e08e      	b.n	8003d36 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c18:	4b4b      	ldr	r3, [pc, #300]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x168>)
 8003c1a:	60bb      	str	r3, [r7, #8]
      break;
 8003c1c:	e08b      	b.n	8003d36 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c1e:	4948      	ldr	r1, [pc, #288]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c20:	6849      	ldr	r1, [r1, #4]
 8003c22:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003c26:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c28:	4945      	ldr	r1, [pc, #276]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c2a:	6849      	ldr	r1, [r1, #4]
 8003c2c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003c30:	2900      	cmp	r1, #0
 8003c32:	d024      	beq.n	8003c7e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c34:	4942      	ldr	r1, [pc, #264]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c36:	6849      	ldr	r1, [r1, #4]
 8003c38:	0989      	lsrs	r1, r1, #6
 8003c3a:	4608      	mov	r0, r1
 8003c3c:	f04f 0100 	mov.w	r1, #0
 8003c40:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003c44:	f04f 0500 	mov.w	r5, #0
 8003c48:	ea00 0204 	and.w	r2, r0, r4
 8003c4c:	ea01 0305 	and.w	r3, r1, r5
 8003c50:	493d      	ldr	r1, [pc, #244]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x168>)
 8003c52:	fb01 f003 	mul.w	r0, r1, r3
 8003c56:	2100      	movs	r1, #0
 8003c58:	fb01 f102 	mul.w	r1, r1, r2
 8003c5c:	1844      	adds	r4, r0, r1
 8003c5e:	493a      	ldr	r1, [pc, #232]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x168>)
 8003c60:	fba2 0101 	umull	r0, r1, r2, r1
 8003c64:	1863      	adds	r3, r4, r1
 8003c66:	4619      	mov	r1, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	f04f 0300 	mov.w	r3, #0
 8003c70:	f7fd f812 	bl	8000c98 <__aeabi_uldivmod>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4613      	mov	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	e04a      	b.n	8003d14 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c7e:	4b30      	ldr	r3, [pc, #192]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	099b      	lsrs	r3, r3, #6
 8003c84:	461a      	mov	r2, r3
 8003c86:	f04f 0300 	mov.w	r3, #0
 8003c8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c8e:	f04f 0100 	mov.w	r1, #0
 8003c92:	ea02 0400 	and.w	r4, r2, r0
 8003c96:	ea03 0501 	and.w	r5, r3, r1
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	4629      	mov	r1, r5
 8003c9e:	f04f 0200 	mov.w	r2, #0
 8003ca2:	f04f 0300 	mov.w	r3, #0
 8003ca6:	014b      	lsls	r3, r1, #5
 8003ca8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003cac:	0142      	lsls	r2, r0, #5
 8003cae:	4610      	mov	r0, r2
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	1b00      	subs	r0, r0, r4
 8003cb4:	eb61 0105 	sbc.w	r1, r1, r5
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	018b      	lsls	r3, r1, #6
 8003cc2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003cc6:	0182      	lsls	r2, r0, #6
 8003cc8:	1a12      	subs	r2, r2, r0
 8003cca:	eb63 0301 	sbc.w	r3, r3, r1
 8003cce:	f04f 0000 	mov.w	r0, #0
 8003cd2:	f04f 0100 	mov.w	r1, #0
 8003cd6:	00d9      	lsls	r1, r3, #3
 8003cd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cdc:	00d0      	lsls	r0, r2, #3
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	1912      	adds	r2, r2, r4
 8003ce4:	eb45 0303 	adc.w	r3, r5, r3
 8003ce8:	f04f 0000 	mov.w	r0, #0
 8003cec:	f04f 0100 	mov.w	r1, #0
 8003cf0:	0299      	lsls	r1, r3, #10
 8003cf2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003cf6:	0290      	lsls	r0, r2, #10
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4610      	mov	r0, r2
 8003cfe:	4619      	mov	r1, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	461a      	mov	r2, r3
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	f7fc ffc6 	bl	8000c98 <__aeabi_uldivmod>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4613      	mov	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d14:	4b0a      	ldr	r3, [pc, #40]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	0c1b      	lsrs	r3, r3, #16
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	3301      	adds	r3, #1
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2c:	60bb      	str	r3, [r7, #8]
      break;
 8003d2e:	e002      	b.n	8003d36 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d30:	4b04      	ldr	r3, [pc, #16]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x164>)
 8003d32:	60bb      	str	r3, [r7, #8]
      break;
 8003d34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d36:	68bb      	ldr	r3, [r7, #8]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bdb0      	pop	{r4, r5, r7, pc}
 8003d40:	40023800 	.word	0x40023800
 8003d44:	00f42400 	.word	0x00f42400
 8003d48:	017d7840 	.word	0x017d7840

08003d4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d50:	4b03      	ldr	r3, [pc, #12]	; (8003d60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d52:	681b      	ldr	r3, [r3, #0]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	20000018 	.word	0x20000018

08003d64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d68:	f7ff fff0 	bl	8003d4c <HAL_RCC_GetHCLKFreq>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	0a9b      	lsrs	r3, r3, #10
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	4903      	ldr	r1, [pc, #12]	; (8003d88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d7a:	5ccb      	ldrb	r3, [r1, r3]
 8003d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40023800 	.word	0x40023800
 8003d88:	0800f528 	.word	0x0800f528

08003d8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d90:	f7ff ffdc 	bl	8003d4c <HAL_RCC_GetHCLKFreq>
 8003d94:	4602      	mov	r2, r0
 8003d96:	4b05      	ldr	r3, [pc, #20]	; (8003dac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	0b5b      	lsrs	r3, r3, #13
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	4903      	ldr	r1, [pc, #12]	; (8003db0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003da2:	5ccb      	ldrb	r3, [r1, r3]
 8003da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40023800 	.word	0x40023800
 8003db0:	0800f528 	.word	0x0800f528

08003db4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	220f      	movs	r2, #15
 8003dc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003dc4:	4b12      	ldr	r3, [pc, #72]	; (8003e10 <HAL_RCC_GetClockConfig+0x5c>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 0203 	and.w	r2, r3, #3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003dd0:	4b0f      	ldr	r3, [pc, #60]	; (8003e10 <HAL_RCC_GetClockConfig+0x5c>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ddc:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <HAL_RCC_GetClockConfig+0x5c>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003de8:	4b09      	ldr	r3, [pc, #36]	; (8003e10 <HAL_RCC_GetClockConfig+0x5c>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	08db      	lsrs	r3, r3, #3
 8003dee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003df6:	4b07      	ldr	r3, [pc, #28]	; (8003e14 <HAL_RCC_GetClockConfig+0x60>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0207 	and.w	r2, r3, #7
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	601a      	str	r2, [r3, #0]
}
 8003e02:	bf00      	nop
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	40023800 	.word	0x40023800
 8003e14:	40023c00 	.word	0x40023c00

08003e18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e07b      	b.n	8003f22 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d108      	bne.n	8003e44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e3a:	d009      	beq.n	8003e50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	61da      	str	r2, [r3, #28]
 8003e42:	e005      	b.n	8003e50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d106      	bne.n	8003e70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7fd fd52 	bl	8001914 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	431a      	orrs	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed4:	ea42 0103 	orr.w	r1, r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003edc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	0c1b      	lsrs	r3, r3, #16
 8003eee:	f003 0104 	and.w	r1, r3, #4
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	f003 0210 	and.w	r2, r3, #16
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	69da      	ldr	r2, [r3, #28]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b082      	sub	sp, #8
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e041      	b.n	8003fc0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d106      	bne.n	8003f56 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f839 	bl	8003fc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2202      	movs	r2, #2
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	3304      	adds	r3, #4
 8003f66:	4619      	mov	r1, r3
 8003f68:	4610      	mov	r0, r2
 8003f6a:	f000 f9c9 	bl	8004300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d001      	beq.n	8003ff4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e044      	b.n	800407e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a1e      	ldr	r2, [pc, #120]	; (800408c <HAL_TIM_Base_Start_IT+0xb0>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d018      	beq.n	8004048 <HAL_TIM_Base_Start_IT+0x6c>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800401e:	d013      	beq.n	8004048 <HAL_TIM_Base_Start_IT+0x6c>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a1a      	ldr	r2, [pc, #104]	; (8004090 <HAL_TIM_Base_Start_IT+0xb4>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d00e      	beq.n	8004048 <HAL_TIM_Base_Start_IT+0x6c>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a19      	ldr	r2, [pc, #100]	; (8004094 <HAL_TIM_Base_Start_IT+0xb8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d009      	beq.n	8004048 <HAL_TIM_Base_Start_IT+0x6c>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a17      	ldr	r2, [pc, #92]	; (8004098 <HAL_TIM_Base_Start_IT+0xbc>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d004      	beq.n	8004048 <HAL_TIM_Base_Start_IT+0x6c>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a16      	ldr	r2, [pc, #88]	; (800409c <HAL_TIM_Base_Start_IT+0xc0>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d111      	bne.n	800406c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b06      	cmp	r3, #6
 8004058:	d010      	beq.n	800407c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f042 0201 	orr.w	r2, r2, #1
 8004068:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800406a:	e007      	b.n	800407c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0201 	orr.w	r2, r2, #1
 800407a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	40010000 	.word	0x40010000
 8004090:	40000400 	.word	0x40000400
 8004094:	40000800 	.word	0x40000800
 8004098:	40000c00 	.word	0x40000c00
 800409c:	40014000 	.word	0x40014000

080040a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d122      	bne.n	80040fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d11b      	bne.n	80040fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f06f 0202 	mvn.w	r2, #2
 80040cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f8ee 	bl	80042c4 <HAL_TIM_IC_CaptureCallback>
 80040e8:	e005      	b.n	80040f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f8e0 	bl	80042b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f8f1 	bl	80042d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	f003 0304 	and.w	r3, r3, #4
 8004106:	2b04      	cmp	r3, #4
 8004108:	d122      	bne.n	8004150 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b04      	cmp	r3, #4
 8004116:	d11b      	bne.n	8004150 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f06f 0204 	mvn.w	r2, #4
 8004120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2202      	movs	r2, #2
 8004126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f8c4 	bl	80042c4 <HAL_TIM_IC_CaptureCallback>
 800413c:	e005      	b.n	800414a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f8b6 	bl	80042b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 f8c7 	bl	80042d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b08      	cmp	r3, #8
 800415c:	d122      	bne.n	80041a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b08      	cmp	r3, #8
 800416a:	d11b      	bne.n	80041a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f06f 0208 	mvn.w	r2, #8
 8004174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2204      	movs	r2, #4
 800417a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f89a 	bl	80042c4 <HAL_TIM_IC_CaptureCallback>
 8004190:	e005      	b.n	800419e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f88c 	bl	80042b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f89d 	bl	80042d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f003 0310 	and.w	r3, r3, #16
 80041ae:	2b10      	cmp	r3, #16
 80041b0:	d122      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f003 0310 	and.w	r3, r3, #16
 80041bc:	2b10      	cmp	r3, #16
 80041be:	d11b      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f06f 0210 	mvn.w	r2, #16
 80041c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2208      	movs	r2, #8
 80041ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f870 	bl	80042c4 <HAL_TIM_IC_CaptureCallback>
 80041e4:	e005      	b.n	80041f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f862 	bl	80042b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f873 	bl	80042d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b01      	cmp	r3, #1
 8004204:	d10e      	bne.n	8004224 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b01      	cmp	r3, #1
 8004212:	d107      	bne.n	8004224 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f06f 0201 	mvn.w	r2, #1
 800421c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7fd fb2a 	bl	8001878 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422e:	2b80      	cmp	r3, #128	; 0x80
 8004230:	d10e      	bne.n	8004250 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800423c:	2b80      	cmp	r3, #128	; 0x80
 800423e:	d107      	bne.n	8004250 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f8e2 	bl	8004414 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425a:	2b40      	cmp	r3, #64	; 0x40
 800425c:	d10e      	bne.n	800427c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004268:	2b40      	cmp	r3, #64	; 0x40
 800426a:	d107      	bne.n	800427c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f838 	bl	80042ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	f003 0320 	and.w	r3, r3, #32
 8004286:	2b20      	cmp	r3, #32
 8004288:	d10e      	bne.n	80042a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f003 0320 	and.w	r3, r3, #32
 8004294:	2b20      	cmp	r3, #32
 8004296:	d107      	bne.n	80042a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f06f 0220 	mvn.w	r2, #32
 80042a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f8ac 	bl	8004400 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042a8:	bf00      	nop
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a34      	ldr	r2, [pc, #208]	; (80043e4 <TIM_Base_SetConfig+0xe4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d00f      	beq.n	8004338 <TIM_Base_SetConfig+0x38>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800431e:	d00b      	beq.n	8004338 <TIM_Base_SetConfig+0x38>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a31      	ldr	r2, [pc, #196]	; (80043e8 <TIM_Base_SetConfig+0xe8>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d007      	beq.n	8004338 <TIM_Base_SetConfig+0x38>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a30      	ldr	r2, [pc, #192]	; (80043ec <TIM_Base_SetConfig+0xec>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d003      	beq.n	8004338 <TIM_Base_SetConfig+0x38>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a2f      	ldr	r2, [pc, #188]	; (80043f0 <TIM_Base_SetConfig+0xf0>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d108      	bne.n	800434a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	4313      	orrs	r3, r2
 8004348:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a25      	ldr	r2, [pc, #148]	; (80043e4 <TIM_Base_SetConfig+0xe4>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d01b      	beq.n	800438a <TIM_Base_SetConfig+0x8a>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004358:	d017      	beq.n	800438a <TIM_Base_SetConfig+0x8a>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a22      	ldr	r2, [pc, #136]	; (80043e8 <TIM_Base_SetConfig+0xe8>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d013      	beq.n	800438a <TIM_Base_SetConfig+0x8a>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a21      	ldr	r2, [pc, #132]	; (80043ec <TIM_Base_SetConfig+0xec>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d00f      	beq.n	800438a <TIM_Base_SetConfig+0x8a>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a20      	ldr	r2, [pc, #128]	; (80043f0 <TIM_Base_SetConfig+0xf0>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d00b      	beq.n	800438a <TIM_Base_SetConfig+0x8a>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a1f      	ldr	r2, [pc, #124]	; (80043f4 <TIM_Base_SetConfig+0xf4>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d007      	beq.n	800438a <TIM_Base_SetConfig+0x8a>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a1e      	ldr	r2, [pc, #120]	; (80043f8 <TIM_Base_SetConfig+0xf8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d003      	beq.n	800438a <TIM_Base_SetConfig+0x8a>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a1d      	ldr	r2, [pc, #116]	; (80043fc <TIM_Base_SetConfig+0xfc>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d108      	bne.n	800439c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	4313      	orrs	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a08      	ldr	r2, [pc, #32]	; (80043e4 <TIM_Base_SetConfig+0xe4>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d103      	bne.n	80043d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	691a      	ldr	r2, [r3, #16]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	615a      	str	r2, [r3, #20]
}
 80043d6:	bf00      	nop
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40010000 	.word	0x40010000
 80043e8:	40000400 	.word	0x40000400
 80043ec:	40000800 	.word	0x40000800
 80043f0:	40000c00 	.word	0x40000c00
 80043f4:	40014000 	.word	0x40014000
 80043f8:	40014400 	.word	0x40014400
 80043fc:	40014800 	.word	0x40014800

08004400 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e03f      	b.n	80044ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d106      	bne.n	8004454 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7fd ff0e 	bl	8002270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2224      	movs	r2, #36	; 0x24
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800446a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 fb9f 	bl	8004bb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004480:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695a      	ldr	r2, [r3, #20]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004490:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b084      	sub	sp, #16
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	60f8      	str	r0, [r7, #12]
 80044ca:	60b9      	str	r1, [r7, #8]
 80044cc:	4613      	mov	r3, r2
 80044ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b20      	cmp	r3, #32
 80044da:	d11d      	bne.n	8004518 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d002      	beq.n	80044e8 <HAL_UART_Receive_IT+0x26>
 80044e2:	88fb      	ldrh	r3, [r7, #6]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d101      	bne.n	80044ec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e016      	b.n	800451a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d101      	bne.n	80044fa <HAL_UART_Receive_IT+0x38>
 80044f6:	2302      	movs	r3, #2
 80044f8:	e00f      	b.n	800451a <HAL_UART_Receive_IT+0x58>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004508:	88fb      	ldrh	r3, [r7, #6]
 800450a:	461a      	mov	r2, r3
 800450c:	68b9      	ldr	r1, [r7, #8]
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f000 f9d4 	bl	80048bc <UART_Start_Receive_IT>
 8004514:	4603      	mov	r3, r0
 8004516:	e000      	b.n	800451a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004518:	2302      	movs	r3, #2
  }
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
	...

08004524 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b08a      	sub	sp, #40	; 0x28
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004544:	2300      	movs	r3, #0
 8004546:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004548:	2300      	movs	r3, #0
 800454a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	f003 030f 	and.w	r3, r3, #15
 8004552:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10d      	bne.n	8004576 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455c:	f003 0320 	and.w	r3, r3, #32
 8004560:	2b00      	cmp	r3, #0
 8004562:	d008      	beq.n	8004576 <HAL_UART_IRQHandler+0x52>
 8004564:	6a3b      	ldr	r3, [r7, #32]
 8004566:	f003 0320 	and.w	r3, r3, #32
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 fa87 	bl	8004a82 <UART_Receive_IT>
      return;
 8004574:	e17c      	b.n	8004870 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 80b1 	beq.w	80046e0 <HAL_UART_IRQHandler+0x1bc>
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b00      	cmp	r3, #0
 8004586:	d105      	bne.n	8004594 <HAL_UART_IRQHandler+0x70>
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 80a6 	beq.w	80046e0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <HAL_UART_IRQHandler+0x90>
 800459e:	6a3b      	ldr	r3, [r7, #32]
 80045a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d005      	beq.n	80045b4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ac:	f043 0201 	orr.w	r2, r3, #1
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	f003 0304 	and.w	r3, r3, #4
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00a      	beq.n	80045d4 <HAL_UART_IRQHandler+0xb0>
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045cc:	f043 0202 	orr.w	r2, r3, #2
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <HAL_UART_IRQHandler+0xd0>
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ec:	f043 0204 	orr.w	r2, r3, #4
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	f003 0308 	and.w	r3, r3, #8
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00f      	beq.n	800461e <HAL_UART_IRQHandler+0xfa>
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	f003 0320 	and.w	r3, r3, #32
 8004604:	2b00      	cmp	r3, #0
 8004606:	d104      	bne.n	8004612 <HAL_UART_IRQHandler+0xee>
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d005      	beq.n	800461e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	f043 0208 	orr.w	r2, r3, #8
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 811f 	beq.w	8004866 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	2b00      	cmp	r3, #0
 8004630:	d007      	beq.n	8004642 <HAL_UART_IRQHandler+0x11e>
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	f003 0320 	and.w	r3, r3, #32
 8004638:	2b00      	cmp	r3, #0
 800463a:	d002      	beq.n	8004642 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 fa20 	bl	8004a82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464c:	2b40      	cmp	r3, #64	; 0x40
 800464e:	bf0c      	ite	eq
 8004650:	2301      	moveq	r3, #1
 8004652:	2300      	movne	r3, #0
 8004654:	b2db      	uxtb	r3, r3
 8004656:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465c:	f003 0308 	and.w	r3, r3, #8
 8004660:	2b00      	cmp	r3, #0
 8004662:	d102      	bne.n	800466a <HAL_UART_IRQHandler+0x146>
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d031      	beq.n	80046ce <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f960 	bl	8004930 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467a:	2b40      	cmp	r3, #64	; 0x40
 800467c:	d123      	bne.n	80046c6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695a      	ldr	r2, [r3, #20]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800468c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	2b00      	cmp	r3, #0
 8004694:	d013      	beq.n	80046be <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469a:	4a77      	ldr	r2, [pc, #476]	; (8004878 <HAL_UART_IRQHandler+0x354>)
 800469c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fd ffea 	bl	800267c <HAL_DMA_Abort_IT>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d016      	beq.n	80046dc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046b8:	4610      	mov	r0, r2
 80046ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046bc:	e00e      	b.n	80046dc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f8e6 	bl	8004890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c4:	e00a      	b.n	80046dc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f8e2 	bl	8004890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046cc:	e006      	b.n	80046dc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f8de 	bl	8004890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80046da:	e0c4      	b.n	8004866 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046dc:	bf00      	nop
    return;
 80046de:	e0c2      	b.n	8004866 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	f040 80a2 	bne.w	800482e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	f003 0310 	and.w	r3, r3, #16
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 809c 	beq.w	800482e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	f003 0310 	and.w	r3, r3, #16
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 8096 	beq.w	800482e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004702:	2300      	movs	r3, #0
 8004704:	60fb      	str	r3, [r7, #12]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004722:	2b40      	cmp	r3, #64	; 0x40
 8004724:	d14f      	bne.n	80047c6 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004730:	8a3b      	ldrh	r3, [r7, #16]
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 8099 	beq.w	800486a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800473c:	8a3a      	ldrh	r2, [r7, #16]
 800473e:	429a      	cmp	r2, r3
 8004740:	f080 8093 	bcs.w	800486a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	8a3a      	ldrh	r2, [r7, #16]
 8004748:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474e:	69db      	ldr	r3, [r3, #28]
 8004750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004754:	d02b      	beq.n	80047ae <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68da      	ldr	r2, [r3, #12]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004764:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695a      	ldr	r2, [r3, #20]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 0201 	bic.w	r2, r2, #1
 8004774:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	695a      	ldr	r2, [r3, #20]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004784:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2220      	movs	r2, #32
 800478a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0210 	bic.w	r2, r2, #16
 80047a2:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7fd fef7 	bl	800259c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	4619      	mov	r1, r3
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f870 	bl	80048a4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80047c4:	e051      	b.n	800486a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047d8:	b29b      	uxth	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d047      	beq.n	800486e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80047de:	8a7b      	ldrh	r3, [r7, #18]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d044      	beq.n	800486e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80047f2:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695a      	ldr	r2, [r3, #20]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0201 	bic.w	r2, r2, #1
 8004802:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0210 	bic.w	r2, r2, #16
 8004820:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004822:	8a7b      	ldrh	r3, [r7, #18]
 8004824:	4619      	mov	r1, r3
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f83c 	bl	80048a4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800482c:	e01f      	b.n	800486e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004834:	2b00      	cmp	r3, #0
 8004836:	d008      	beq.n	800484a <HAL_UART_IRQHandler+0x326>
 8004838:	6a3b      	ldr	r3, [r7, #32]
 800483a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f8b5 	bl	80049b2 <UART_Transmit_IT>
    return;
 8004848:	e012      	b.n	8004870 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00d      	beq.n	8004870 <HAL_UART_IRQHandler+0x34c>
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485a:	2b00      	cmp	r3, #0
 800485c:	d008      	beq.n	8004870 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f8f7 	bl	8004a52 <UART_EndTransmit_IT>
    return;
 8004864:	e004      	b.n	8004870 <HAL_UART_IRQHandler+0x34c>
    return;
 8004866:	bf00      	nop
 8004868:	e002      	b.n	8004870 <HAL_UART_IRQHandler+0x34c>
      return;
 800486a:	bf00      	nop
 800486c:	e000      	b.n	8004870 <HAL_UART_IRQHandler+0x34c>
      return;
 800486e:	bf00      	nop
  }
}
 8004870:	3728      	adds	r7, #40	; 0x28
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	0800498b 	.word	0x0800498b

0800487c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	460b      	mov	r3, r1
 80048ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	4613      	mov	r3, r2
 80048c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	88fa      	ldrh	r2, [r7, #6]
 80048d4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	88fa      	ldrh	r2, [r7, #6]
 80048da:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2222      	movs	r2, #34	; 0x22
 80048e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68da      	ldr	r2, [r3, #12]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004900:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	695a      	ldr	r2, [r3, #20]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f042 0201 	orr.w	r2, r2, #1
 8004910:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68da      	ldr	r2, [r3, #12]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f042 0220 	orr.w	r2, r2, #32
 8004920:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004946:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695a      	ldr	r2, [r3, #20]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 0201 	bic.w	r2, r2, #1
 8004956:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495c:	2b01      	cmp	r3, #1
 800495e:	d107      	bne.n	8004970 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0210 	bic.w	r2, r2, #16
 800496e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b084      	sub	sp, #16
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004996:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f7ff ff73 	bl	8004890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049aa:	bf00      	nop
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b085      	sub	sp, #20
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b21      	cmp	r3, #33	; 0x21
 80049c4:	d13e      	bne.n	8004a44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ce:	d114      	bne.n	80049fa <UART_Transmit_IT+0x48>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d110      	bne.n	80049fa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	461a      	mov	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	1c9a      	adds	r2, r3, #2
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	621a      	str	r2, [r3, #32]
 80049f8:	e008      	b.n	8004a0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	1c59      	adds	r1, r3, #1
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	6211      	str	r1, [r2, #32]
 8004a04:	781a      	ldrb	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	4619      	mov	r1, r3
 8004a1a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10f      	bne.n	8004a40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68da      	ldr	r2, [r3, #12]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a40:	2300      	movs	r3, #0
 8004a42:	e000      	b.n	8004a46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a44:	2302      	movs	r3, #2
  }
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b082      	sub	sp, #8
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68da      	ldr	r2, [r3, #12]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7ff ff02 	bl	800487c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3708      	adds	r7, #8
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b084      	sub	sp, #16
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b22      	cmp	r3, #34	; 0x22
 8004a94:	f040 8087 	bne.w	8004ba6 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa0:	d117      	bne.n	8004ad2 <UART_Receive_IT+0x50>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d113      	bne.n	8004ad2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aca:	1c9a      	adds	r2, r3, #2
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	629a      	str	r2, [r3, #40]	; 0x28
 8004ad0:	e026      	b.n	8004b20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae4:	d007      	beq.n	8004af6 <UART_Receive_IT+0x74>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10a      	bne.n	8004b04 <UART_Receive_IT+0x82>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d106      	bne.n	8004b04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	701a      	strb	r2, [r3, #0]
 8004b02:	e008      	b.n	8004b16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	3b01      	subs	r3, #1
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d136      	bne.n	8004ba2 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68da      	ldr	r2, [r3, #12]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 0220 	bic.w	r2, r2, #32
 8004b42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68da      	ldr	r2, [r3, #12]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	695a      	ldr	r2, [r3, #20]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0201 	bic.w	r2, r2, #1
 8004b62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d10e      	bne.n	8004b92 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 0210 	bic.w	r2, r2, #16
 8004b82:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b88:	4619      	mov	r1, r3
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7ff fe8a 	bl	80048a4 <HAL_UARTEx_RxEventCallback>
 8004b90:	e002      	b.n	8004b98 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7fd fa60 	bl	8002058 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	e002      	b.n	8004ba8 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	e000      	b.n	8004ba8 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004ba6:	2302      	movs	r3, #2
  }
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bb4:	b09f      	sub	sp, #124	; 0x7c
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc6:	68d9      	ldr	r1, [r3, #12]
 8004bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	ea40 0301 	orr.w	r3, r0, r1
 8004bd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	431a      	orrs	r2, r3
 8004be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004bf4:	f021 010c 	bic.w	r1, r1, #12
 8004bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bfe:	430b      	orrs	r3, r1
 8004c00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c0e:	6999      	ldr	r1, [r3, #24]
 8004c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	ea40 0301 	orr.w	r3, r0, r1
 8004c18:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	4bc5      	ldr	r3, [pc, #788]	; (8004f34 <UART_SetConfig+0x384>)
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d004      	beq.n	8004c2e <UART_SetConfig+0x7e>
 8004c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	4bc3      	ldr	r3, [pc, #780]	; (8004f38 <UART_SetConfig+0x388>)
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d103      	bne.n	8004c36 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c2e:	f7ff f8ad 	bl	8003d8c <HAL_RCC_GetPCLK2Freq>
 8004c32:	6778      	str	r0, [r7, #116]	; 0x74
 8004c34:	e002      	b.n	8004c3c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c36:	f7ff f895 	bl	8003d64 <HAL_RCC_GetPCLK1Freq>
 8004c3a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c44:	f040 80b6 	bne.w	8004db4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c4a:	461c      	mov	r4, r3
 8004c4c:	f04f 0500 	mov.w	r5, #0
 8004c50:	4622      	mov	r2, r4
 8004c52:	462b      	mov	r3, r5
 8004c54:	1891      	adds	r1, r2, r2
 8004c56:	6439      	str	r1, [r7, #64]	; 0x40
 8004c58:	415b      	adcs	r3, r3
 8004c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8004c5c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c60:	1912      	adds	r2, r2, r4
 8004c62:	eb45 0303 	adc.w	r3, r5, r3
 8004c66:	f04f 0000 	mov.w	r0, #0
 8004c6a:	f04f 0100 	mov.w	r1, #0
 8004c6e:	00d9      	lsls	r1, r3, #3
 8004c70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c74:	00d0      	lsls	r0, r2, #3
 8004c76:	4602      	mov	r2, r0
 8004c78:	460b      	mov	r3, r1
 8004c7a:	1911      	adds	r1, r2, r4
 8004c7c:	6639      	str	r1, [r7, #96]	; 0x60
 8004c7e:	416b      	adcs	r3, r5
 8004c80:	667b      	str	r3, [r7, #100]	; 0x64
 8004c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	461a      	mov	r2, r3
 8004c88:	f04f 0300 	mov.w	r3, #0
 8004c8c:	1891      	adds	r1, r2, r2
 8004c8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c90:	415b      	adcs	r3, r3
 8004c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c98:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004c9c:	f7fb fffc 	bl	8000c98 <__aeabi_uldivmod>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	4ba5      	ldr	r3, [pc, #660]	; (8004f3c <UART_SetConfig+0x38c>)
 8004ca6:	fba3 2302 	umull	r2, r3, r3, r2
 8004caa:	095b      	lsrs	r3, r3, #5
 8004cac:	011e      	lsls	r6, r3, #4
 8004cae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cb0:	461c      	mov	r4, r3
 8004cb2:	f04f 0500 	mov.w	r5, #0
 8004cb6:	4622      	mov	r2, r4
 8004cb8:	462b      	mov	r3, r5
 8004cba:	1891      	adds	r1, r2, r2
 8004cbc:	6339      	str	r1, [r7, #48]	; 0x30
 8004cbe:	415b      	adcs	r3, r3
 8004cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8004cc2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004cc6:	1912      	adds	r2, r2, r4
 8004cc8:	eb45 0303 	adc.w	r3, r5, r3
 8004ccc:	f04f 0000 	mov.w	r0, #0
 8004cd0:	f04f 0100 	mov.w	r1, #0
 8004cd4:	00d9      	lsls	r1, r3, #3
 8004cd6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004cda:	00d0      	lsls	r0, r2, #3
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	1911      	adds	r1, r2, r4
 8004ce2:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ce4:	416b      	adcs	r3, r5
 8004ce6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	461a      	mov	r2, r3
 8004cee:	f04f 0300 	mov.w	r3, #0
 8004cf2:	1891      	adds	r1, r2, r2
 8004cf4:	62b9      	str	r1, [r7, #40]	; 0x28
 8004cf6:	415b      	adcs	r3, r3
 8004cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cfe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004d02:	f7fb ffc9 	bl	8000c98 <__aeabi_uldivmod>
 8004d06:	4602      	mov	r2, r0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	4b8c      	ldr	r3, [pc, #560]	; (8004f3c <UART_SetConfig+0x38c>)
 8004d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d10:	095b      	lsrs	r3, r3, #5
 8004d12:	2164      	movs	r1, #100	; 0x64
 8004d14:	fb01 f303 	mul.w	r3, r1, r3
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	3332      	adds	r3, #50	; 0x32
 8004d1e:	4a87      	ldr	r2, [pc, #540]	; (8004f3c <UART_SetConfig+0x38c>)
 8004d20:	fba2 2303 	umull	r2, r3, r2, r3
 8004d24:	095b      	lsrs	r3, r3, #5
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d2c:	441e      	add	r6, r3
 8004d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d30:	4618      	mov	r0, r3
 8004d32:	f04f 0100 	mov.w	r1, #0
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	1894      	adds	r4, r2, r2
 8004d3c:	623c      	str	r4, [r7, #32]
 8004d3e:	415b      	adcs	r3, r3
 8004d40:	627b      	str	r3, [r7, #36]	; 0x24
 8004d42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d46:	1812      	adds	r2, r2, r0
 8004d48:	eb41 0303 	adc.w	r3, r1, r3
 8004d4c:	f04f 0400 	mov.w	r4, #0
 8004d50:	f04f 0500 	mov.w	r5, #0
 8004d54:	00dd      	lsls	r5, r3, #3
 8004d56:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d5a:	00d4      	lsls	r4, r2, #3
 8004d5c:	4622      	mov	r2, r4
 8004d5e:	462b      	mov	r3, r5
 8004d60:	1814      	adds	r4, r2, r0
 8004d62:	653c      	str	r4, [r7, #80]	; 0x50
 8004d64:	414b      	adcs	r3, r1
 8004d66:	657b      	str	r3, [r7, #84]	; 0x54
 8004d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	f04f 0300 	mov.w	r3, #0
 8004d72:	1891      	adds	r1, r2, r2
 8004d74:	61b9      	str	r1, [r7, #24]
 8004d76:	415b      	adcs	r3, r3
 8004d78:	61fb      	str	r3, [r7, #28]
 8004d7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d7e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004d82:	f7fb ff89 	bl	8000c98 <__aeabi_uldivmod>
 8004d86:	4602      	mov	r2, r0
 8004d88:	460b      	mov	r3, r1
 8004d8a:	4b6c      	ldr	r3, [pc, #432]	; (8004f3c <UART_SetConfig+0x38c>)
 8004d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d90:	095b      	lsrs	r3, r3, #5
 8004d92:	2164      	movs	r1, #100	; 0x64
 8004d94:	fb01 f303 	mul.w	r3, r1, r3
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	3332      	adds	r3, #50	; 0x32
 8004d9e:	4a67      	ldr	r2, [pc, #412]	; (8004f3c <UART_SetConfig+0x38c>)
 8004da0:	fba2 2303 	umull	r2, r3, r2, r3
 8004da4:	095b      	lsrs	r3, r3, #5
 8004da6:	f003 0207 	and.w	r2, r3, #7
 8004daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4432      	add	r2, r6
 8004db0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004db2:	e0b9      	b.n	8004f28 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004db4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004db6:	461c      	mov	r4, r3
 8004db8:	f04f 0500 	mov.w	r5, #0
 8004dbc:	4622      	mov	r2, r4
 8004dbe:	462b      	mov	r3, r5
 8004dc0:	1891      	adds	r1, r2, r2
 8004dc2:	6139      	str	r1, [r7, #16]
 8004dc4:	415b      	adcs	r3, r3
 8004dc6:	617b      	str	r3, [r7, #20]
 8004dc8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004dcc:	1912      	adds	r2, r2, r4
 8004dce:	eb45 0303 	adc.w	r3, r5, r3
 8004dd2:	f04f 0000 	mov.w	r0, #0
 8004dd6:	f04f 0100 	mov.w	r1, #0
 8004dda:	00d9      	lsls	r1, r3, #3
 8004ddc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004de0:	00d0      	lsls	r0, r2, #3
 8004de2:	4602      	mov	r2, r0
 8004de4:	460b      	mov	r3, r1
 8004de6:	eb12 0804 	adds.w	r8, r2, r4
 8004dea:	eb43 0905 	adc.w	r9, r3, r5
 8004dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f04f 0100 	mov.w	r1, #0
 8004df8:	f04f 0200 	mov.w	r2, #0
 8004dfc:	f04f 0300 	mov.w	r3, #0
 8004e00:	008b      	lsls	r3, r1, #2
 8004e02:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e06:	0082      	lsls	r2, r0, #2
 8004e08:	4640      	mov	r0, r8
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	f7fb ff44 	bl	8000c98 <__aeabi_uldivmod>
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	4b49      	ldr	r3, [pc, #292]	; (8004f3c <UART_SetConfig+0x38c>)
 8004e16:	fba3 2302 	umull	r2, r3, r3, r2
 8004e1a:	095b      	lsrs	r3, r3, #5
 8004e1c:	011e      	lsls	r6, r3, #4
 8004e1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e20:	4618      	mov	r0, r3
 8004e22:	f04f 0100 	mov.w	r1, #0
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	1894      	adds	r4, r2, r2
 8004e2c:	60bc      	str	r4, [r7, #8]
 8004e2e:	415b      	adcs	r3, r3
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e36:	1812      	adds	r2, r2, r0
 8004e38:	eb41 0303 	adc.w	r3, r1, r3
 8004e3c:	f04f 0400 	mov.w	r4, #0
 8004e40:	f04f 0500 	mov.w	r5, #0
 8004e44:	00dd      	lsls	r5, r3, #3
 8004e46:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e4a:	00d4      	lsls	r4, r2, #3
 8004e4c:	4622      	mov	r2, r4
 8004e4e:	462b      	mov	r3, r5
 8004e50:	1814      	adds	r4, r2, r0
 8004e52:	64bc      	str	r4, [r7, #72]	; 0x48
 8004e54:	414b      	adcs	r3, r1
 8004e56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f04f 0100 	mov.w	r1, #0
 8004e62:	f04f 0200 	mov.w	r2, #0
 8004e66:	f04f 0300 	mov.w	r3, #0
 8004e6a:	008b      	lsls	r3, r1, #2
 8004e6c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e70:	0082      	lsls	r2, r0, #2
 8004e72:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004e76:	f7fb ff0f 	bl	8000c98 <__aeabi_uldivmod>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	4b2f      	ldr	r3, [pc, #188]	; (8004f3c <UART_SetConfig+0x38c>)
 8004e80:	fba3 1302 	umull	r1, r3, r3, r2
 8004e84:	095b      	lsrs	r3, r3, #5
 8004e86:	2164      	movs	r1, #100	; 0x64
 8004e88:	fb01 f303 	mul.w	r3, r1, r3
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	3332      	adds	r3, #50	; 0x32
 8004e92:	4a2a      	ldr	r2, [pc, #168]	; (8004f3c <UART_SetConfig+0x38c>)
 8004e94:	fba2 2303 	umull	r2, r3, r2, r3
 8004e98:	095b      	lsrs	r3, r3, #5
 8004e9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e9e:	441e      	add	r6, r3
 8004ea0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f04f 0100 	mov.w	r1, #0
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	1894      	adds	r4, r2, r2
 8004eae:	603c      	str	r4, [r7, #0]
 8004eb0:	415b      	adcs	r3, r3
 8004eb2:	607b      	str	r3, [r7, #4]
 8004eb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eb8:	1812      	adds	r2, r2, r0
 8004eba:	eb41 0303 	adc.w	r3, r1, r3
 8004ebe:	f04f 0400 	mov.w	r4, #0
 8004ec2:	f04f 0500 	mov.w	r5, #0
 8004ec6:	00dd      	lsls	r5, r3, #3
 8004ec8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ecc:	00d4      	lsls	r4, r2, #3
 8004ece:	4622      	mov	r2, r4
 8004ed0:	462b      	mov	r3, r5
 8004ed2:	eb12 0a00 	adds.w	sl, r2, r0
 8004ed6:	eb43 0b01 	adc.w	fp, r3, r1
 8004eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f04f 0100 	mov.w	r1, #0
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	008b      	lsls	r3, r1, #2
 8004eee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ef2:	0082      	lsls	r2, r0, #2
 8004ef4:	4650      	mov	r0, sl
 8004ef6:	4659      	mov	r1, fp
 8004ef8:	f7fb fece 	bl	8000c98 <__aeabi_uldivmod>
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4b0e      	ldr	r3, [pc, #56]	; (8004f3c <UART_SetConfig+0x38c>)
 8004f02:	fba3 1302 	umull	r1, r3, r3, r2
 8004f06:	095b      	lsrs	r3, r3, #5
 8004f08:	2164      	movs	r1, #100	; 0x64
 8004f0a:	fb01 f303 	mul.w	r3, r1, r3
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	011b      	lsls	r3, r3, #4
 8004f12:	3332      	adds	r3, #50	; 0x32
 8004f14:	4a09      	ldr	r2, [pc, #36]	; (8004f3c <UART_SetConfig+0x38c>)
 8004f16:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1a:	095b      	lsrs	r3, r3, #5
 8004f1c:	f003 020f 	and.w	r2, r3, #15
 8004f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4432      	add	r2, r6
 8004f26:	609a      	str	r2, [r3, #8]
}
 8004f28:	bf00      	nop
 8004f2a:	377c      	adds	r7, #124	; 0x7c
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f32:	bf00      	nop
 8004f34:	40011000 	.word	0x40011000
 8004f38:	40011400 	.word	0x40011400
 8004f3c:	51eb851f 	.word	0x51eb851f

08004f40 <__NVIC_SetPriority>:
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	4603      	mov	r3, r0
 8004f48:	6039      	str	r1, [r7, #0]
 8004f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	db0a      	blt.n	8004f6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	490c      	ldr	r1, [pc, #48]	; (8004f8c <__NVIC_SetPriority+0x4c>)
 8004f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f5e:	0112      	lsls	r2, r2, #4
 8004f60:	b2d2      	uxtb	r2, r2
 8004f62:	440b      	add	r3, r1
 8004f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004f68:	e00a      	b.n	8004f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	b2da      	uxtb	r2, r3
 8004f6e:	4908      	ldr	r1, [pc, #32]	; (8004f90 <__NVIC_SetPriority+0x50>)
 8004f70:	79fb      	ldrb	r3, [r7, #7]
 8004f72:	f003 030f 	and.w	r3, r3, #15
 8004f76:	3b04      	subs	r3, #4
 8004f78:	0112      	lsls	r2, r2, #4
 8004f7a:	b2d2      	uxtb	r2, r2
 8004f7c:	440b      	add	r3, r1
 8004f7e:	761a      	strb	r2, [r3, #24]
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	e000e100 	.word	0xe000e100
 8004f90:	e000ed00 	.word	0xe000ed00

08004f94 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004f98:	4b05      	ldr	r3, [pc, #20]	; (8004fb0 <SysTick_Handler+0x1c>)
 8004f9a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004f9c:	f001 fcfe 	bl	800699c <xTaskGetSchedulerState>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d001      	beq.n	8004faa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004fa6:	f002 fae7 	bl	8007578 <xPortSysTickHandler>
  }
}
 8004faa:	bf00      	nop
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	e000e010 	.word	0xe000e010

08004fb4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004fb8:	2100      	movs	r1, #0
 8004fba:	f06f 0004 	mvn.w	r0, #4
 8004fbe:	f7ff ffbf 	bl	8004f40 <__NVIC_SetPriority>
#endif
}
 8004fc2:	bf00      	nop
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fce:	f3ef 8305 	mrs	r3, IPSR
 8004fd2:	603b      	str	r3, [r7, #0]
  return(result);
 8004fd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004fda:	f06f 0305 	mvn.w	r3, #5
 8004fde:	607b      	str	r3, [r7, #4]
 8004fe0:	e00c      	b.n	8004ffc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004fe2:	4b0a      	ldr	r3, [pc, #40]	; (800500c <osKernelInitialize+0x44>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d105      	bne.n	8004ff6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004fea:	4b08      	ldr	r3, [pc, #32]	; (800500c <osKernelInitialize+0x44>)
 8004fec:	2201      	movs	r2, #1
 8004fee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	607b      	str	r3, [r7, #4]
 8004ff4:	e002      	b.n	8004ffc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8004ffa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ffc:	687b      	ldr	r3, [r7, #4]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	20000628 	.word	0x20000628

08005010 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005016:	f3ef 8305 	mrs	r3, IPSR
 800501a:	603b      	str	r3, [r7, #0]
  return(result);
 800501c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005022:	f06f 0305 	mvn.w	r3, #5
 8005026:	607b      	str	r3, [r7, #4]
 8005028:	e010      	b.n	800504c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800502a:	4b0b      	ldr	r3, [pc, #44]	; (8005058 <osKernelStart+0x48>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d109      	bne.n	8005046 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005032:	f7ff ffbf 	bl	8004fb4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005036:	4b08      	ldr	r3, [pc, #32]	; (8005058 <osKernelStart+0x48>)
 8005038:	2202      	movs	r2, #2
 800503a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800503c:	f001 f866 	bl	800610c <vTaskStartScheduler>
      stat = osOK;
 8005040:	2300      	movs	r3, #0
 8005042:	607b      	str	r3, [r7, #4]
 8005044:	e002      	b.n	800504c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005046:	f04f 33ff 	mov.w	r3, #4294967295
 800504a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800504c:	687b      	ldr	r3, [r7, #4]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	20000628 	.word	0x20000628

0800505c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800505c:	b580      	push	{r7, lr}
 800505e:	b08e      	sub	sp, #56	; 0x38
 8005060:	af04      	add	r7, sp, #16
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005068:	2300      	movs	r3, #0
 800506a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800506c:	f3ef 8305 	mrs	r3, IPSR
 8005070:	617b      	str	r3, [r7, #20]
  return(result);
 8005072:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005074:	2b00      	cmp	r3, #0
 8005076:	d17e      	bne.n	8005176 <osThreadNew+0x11a>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d07b      	beq.n	8005176 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800507e:	2340      	movs	r3, #64	; 0x40
 8005080:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005082:	2318      	movs	r3, #24
 8005084:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005086:	2300      	movs	r3, #0
 8005088:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800508a:	f04f 33ff 	mov.w	r3, #4294967295
 800508e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d045      	beq.n	8005122 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d002      	beq.n	80050a4 <osThreadNew+0x48>
        name = attr->name;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d002      	beq.n	80050b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d008      	beq.n	80050ca <osThreadNew+0x6e>
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	2b38      	cmp	r3, #56	; 0x38
 80050bc:	d805      	bhi.n	80050ca <osThreadNew+0x6e>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <osThreadNew+0x72>
        return (NULL);
 80050ca:	2300      	movs	r3, #0
 80050cc:	e054      	b.n	8005178 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	089b      	lsrs	r3, r3, #2
 80050dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00e      	beq.n	8005104 <osThreadNew+0xa8>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	2b5b      	cmp	r3, #91	; 0x5b
 80050ec:	d90a      	bls.n	8005104 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d006      	beq.n	8005104 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d002      	beq.n	8005104 <osThreadNew+0xa8>
        mem = 1;
 80050fe:	2301      	movs	r3, #1
 8005100:	61bb      	str	r3, [r7, #24]
 8005102:	e010      	b.n	8005126 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10c      	bne.n	8005126 <osThreadNew+0xca>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d108      	bne.n	8005126 <osThreadNew+0xca>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d104      	bne.n	8005126 <osThreadNew+0xca>
          mem = 0;
 800511c:	2300      	movs	r3, #0
 800511e:	61bb      	str	r3, [r7, #24]
 8005120:	e001      	b.n	8005126 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005122:	2300      	movs	r3, #0
 8005124:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d110      	bne.n	800514e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005134:	9202      	str	r2, [sp, #8]
 8005136:	9301      	str	r3, [sp, #4]
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	6a3a      	ldr	r2, [r7, #32]
 8005140:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f000 fe0c 	bl	8005d60 <xTaskCreateStatic>
 8005148:	4603      	mov	r3, r0
 800514a:	613b      	str	r3, [r7, #16]
 800514c:	e013      	b.n	8005176 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d110      	bne.n	8005176 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005154:	6a3b      	ldr	r3, [r7, #32]
 8005156:	b29a      	uxth	r2, r3
 8005158:	f107 0310 	add.w	r3, r7, #16
 800515c:	9301      	str	r3, [sp, #4]
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 fe57 	bl	8005e1a <xTaskCreate>
 800516c:	4603      	mov	r3, r0
 800516e:	2b01      	cmp	r3, #1
 8005170:	d001      	beq.n	8005176 <osThreadNew+0x11a>
            hTask = NULL;
 8005172:	2300      	movs	r3, #0
 8005174:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005176:	693b      	ldr	r3, [r7, #16]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3728      	adds	r7, #40	; 0x28
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005188:	f3ef 8305 	mrs	r3, IPSR
 800518c:	60bb      	str	r3, [r7, #8]
  return(result);
 800518e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005190:	2b00      	cmp	r3, #0
 8005192:	d003      	beq.n	800519c <osDelay+0x1c>
    stat = osErrorISR;
 8005194:	f06f 0305 	mvn.w	r3, #5
 8005198:	60fb      	str	r3, [r7, #12]
 800519a:	e007      	b.n	80051ac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800519c:	2300      	movs	r3, #0
 800519e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d002      	beq.n	80051ac <osDelay+0x2c>
      vTaskDelay(ticks);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 ff7c 	bl	80060a4 <vTaskDelay>
    }
  }

  return (stat);
 80051ac:	68fb      	ldr	r3, [r7, #12]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	4a07      	ldr	r2, [pc, #28]	; (80051e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80051c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	4a06      	ldr	r2, [pc, #24]	; (80051e8 <vApplicationGetIdleTaskMemory+0x30>)
 80051ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2240      	movs	r2, #64	; 0x40
 80051d4:	601a      	str	r2, [r3, #0]
}
 80051d6:	bf00      	nop
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	2000062c 	.word	0x2000062c
 80051e8:	20000688 	.word	0x20000688

080051ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4a07      	ldr	r2, [pc, #28]	; (8005218 <vApplicationGetTimerTaskMemory+0x2c>)
 80051fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	4a06      	ldr	r2, [pc, #24]	; (800521c <vApplicationGetTimerTaskMemory+0x30>)
 8005202:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2280      	movs	r2, #128	; 0x80
 8005208:	601a      	str	r2, [r3, #0]
}
 800520a:	bf00      	nop
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	20000788 	.word	0x20000788
 800521c:	200007e4 	.word	0x200007e4

08005220 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f103 0208 	add.w	r2, r3, #8
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f04f 32ff 	mov.w	r2, #4294967295
 8005238:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f103 0208 	add.w	r2, r3, #8
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f103 0208 	add.w	r2, r3, #8
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800526e:	bf00      	nop
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800527a:	b480      	push	{r7}
 800527c:	b085      	sub	sp, #20
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	1c5a      	adds	r2, r3, #1
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	601a      	str	r2, [r3, #0]
}
 80052b6:	bf00      	nop
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052c2:	b480      	push	{r7}
 80052c4:	b085      	sub	sp, #20
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d8:	d103      	bne.n	80052e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	e00c      	b.n	80052fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	3308      	adds	r3, #8
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	e002      	b.n	80052f0 <vListInsert+0x2e>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d2f6      	bcs.n	80052ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	1c5a      	adds	r2, r3, #1
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	601a      	str	r2, [r3, #0]
}
 8005328:	bf00      	nop
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6892      	ldr	r2, [r2, #8]
 800534a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6852      	ldr	r2, [r2, #4]
 8005354:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	429a      	cmp	r2, r3
 800535e:	d103      	bne.n	8005368 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689a      	ldr	r2, [r3, #8]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	1e5a      	subs	r2, r3, #1
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10a      	bne.n	80053b2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800539c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a0:	f383 8811 	msr	BASEPRI, r3
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80053ae:	bf00      	nop
 80053b0:	e7fe      	b.n	80053b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80053b2:	f002 f84f 	bl	8007454 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053be:	68f9      	ldr	r1, [r7, #12]
 80053c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053c2:	fb01 f303 	mul.w	r3, r1, r3
 80053c6:	441a      	add	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e2:	3b01      	subs	r3, #1
 80053e4:	68f9      	ldr	r1, [r7, #12]
 80053e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053e8:	fb01 f303 	mul.w	r3, r1, r3
 80053ec:	441a      	add	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	22ff      	movs	r2, #255	; 0xff
 80053f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	22ff      	movs	r2, #255	; 0xff
 80053fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d114      	bne.n	8005432 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d01a      	beq.n	8005446 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	3310      	adds	r3, #16
 8005414:	4618      	mov	r0, r3
 8005416:	f001 f903 	bl	8006620 <xTaskRemoveFromEventList>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d012      	beq.n	8005446 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005420:	4b0c      	ldr	r3, [pc, #48]	; (8005454 <xQueueGenericReset+0xcc>)
 8005422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005426:	601a      	str	r2, [r3, #0]
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	e009      	b.n	8005446 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	3310      	adds	r3, #16
 8005436:	4618      	mov	r0, r3
 8005438:	f7ff fef2 	bl	8005220 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	3324      	adds	r3, #36	; 0x24
 8005440:	4618      	mov	r0, r3
 8005442:	f7ff feed 	bl	8005220 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005446:	f002 f835 	bl	80074b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800544a:	2301      	movs	r3, #1
}
 800544c:	4618      	mov	r0, r3
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	e000ed04 	.word	0xe000ed04

08005458 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005458:	b580      	push	{r7, lr}
 800545a:	b08e      	sub	sp, #56	; 0x38
 800545c:	af02      	add	r7, sp, #8
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
 8005464:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10a      	bne.n	8005482 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800546c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005470:	f383 8811 	msr	BASEPRI, r3
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	f3bf 8f4f 	dsb	sy
 800547c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800547e:	bf00      	nop
 8005480:	e7fe      	b.n	8005480 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10a      	bne.n	800549e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548c:	f383 8811 	msr	BASEPRI, r3
 8005490:	f3bf 8f6f 	isb	sy
 8005494:	f3bf 8f4f 	dsb	sy
 8005498:	627b      	str	r3, [r7, #36]	; 0x24
}
 800549a:	bf00      	nop
 800549c:	e7fe      	b.n	800549c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d002      	beq.n	80054aa <xQueueGenericCreateStatic+0x52>
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <xQueueGenericCreateStatic+0x56>
 80054aa:	2301      	movs	r3, #1
 80054ac:	e000      	b.n	80054b0 <xQueueGenericCreateStatic+0x58>
 80054ae:	2300      	movs	r3, #0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10a      	bne.n	80054ca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80054b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b8:	f383 8811 	msr	BASEPRI, r3
 80054bc:	f3bf 8f6f 	isb	sy
 80054c0:	f3bf 8f4f 	dsb	sy
 80054c4:	623b      	str	r3, [r7, #32]
}
 80054c6:	bf00      	nop
 80054c8:	e7fe      	b.n	80054c8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d102      	bne.n	80054d6 <xQueueGenericCreateStatic+0x7e>
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <xQueueGenericCreateStatic+0x82>
 80054d6:	2301      	movs	r3, #1
 80054d8:	e000      	b.n	80054dc <xQueueGenericCreateStatic+0x84>
 80054da:	2300      	movs	r3, #0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10a      	bne.n	80054f6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80054e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	61fb      	str	r3, [r7, #28]
}
 80054f2:	bf00      	nop
 80054f4:	e7fe      	b.n	80054f4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80054f6:	2350      	movs	r3, #80	; 0x50
 80054f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2b50      	cmp	r3, #80	; 0x50
 80054fe:	d00a      	beq.n	8005516 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005504:	f383 8811 	msr	BASEPRI, r3
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	61bb      	str	r3, [r7, #24]
}
 8005512:	bf00      	nop
 8005514:	e7fe      	b.n	8005514 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005516:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800551c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00d      	beq.n	800553e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800552a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800552e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005530:	9300      	str	r3, [sp, #0]
 8005532:	4613      	mov	r3, r2
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	68b9      	ldr	r1, [r7, #8]
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f000 f805 	bl	8005548 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800553e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005540:	4618      	mov	r0, r3
 8005542:	3730      	adds	r7, #48	; 0x30
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
 8005554:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d103      	bne.n	8005564 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	601a      	str	r2, [r3, #0]
 8005562:	e002      	b.n	800556a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005576:	2101      	movs	r1, #1
 8005578:	69b8      	ldr	r0, [r7, #24]
 800557a:	f7ff ff05 	bl	8005388 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	78fa      	ldrb	r2, [r7, #3]
 8005582:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005586:	bf00      	nop
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
	...

08005590 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b08e      	sub	sp, #56	; 0x38
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
 800559c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800559e:	2300      	movs	r3, #0
 80055a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80055a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10a      	bne.n	80055c2 <xQueueGenericSend+0x32>
	__asm volatile
 80055ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80055be:	bf00      	nop
 80055c0:	e7fe      	b.n	80055c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d103      	bne.n	80055d0 <xQueueGenericSend+0x40>
 80055c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <xQueueGenericSend+0x44>
 80055d0:	2301      	movs	r3, #1
 80055d2:	e000      	b.n	80055d6 <xQueueGenericSend+0x46>
 80055d4:	2300      	movs	r3, #0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10a      	bne.n	80055f0 <xQueueGenericSend+0x60>
	__asm volatile
 80055da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055de:	f383 8811 	msr	BASEPRI, r3
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	f3bf 8f4f 	dsb	sy
 80055ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80055ec:	bf00      	nop
 80055ee:	e7fe      	b.n	80055ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d103      	bne.n	80055fe <xQueueGenericSend+0x6e>
 80055f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d101      	bne.n	8005602 <xQueueGenericSend+0x72>
 80055fe:	2301      	movs	r3, #1
 8005600:	e000      	b.n	8005604 <xQueueGenericSend+0x74>
 8005602:	2300      	movs	r3, #0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10a      	bne.n	800561e <xQueueGenericSend+0x8e>
	__asm volatile
 8005608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	623b      	str	r3, [r7, #32]
}
 800561a:	bf00      	nop
 800561c:	e7fe      	b.n	800561c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800561e:	f001 f9bd 	bl	800699c <xTaskGetSchedulerState>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d102      	bne.n	800562e <xQueueGenericSend+0x9e>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <xQueueGenericSend+0xa2>
 800562e:	2301      	movs	r3, #1
 8005630:	e000      	b.n	8005634 <xQueueGenericSend+0xa4>
 8005632:	2300      	movs	r3, #0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10a      	bne.n	800564e <xQueueGenericSend+0xbe>
	__asm volatile
 8005638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563c:	f383 8811 	msr	BASEPRI, r3
 8005640:	f3bf 8f6f 	isb	sy
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	61fb      	str	r3, [r7, #28]
}
 800564a:	bf00      	nop
 800564c:	e7fe      	b.n	800564c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800564e:	f001 ff01 	bl	8007454 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565a:	429a      	cmp	r2, r3
 800565c:	d302      	bcc.n	8005664 <xQueueGenericSend+0xd4>
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b02      	cmp	r3, #2
 8005662:	d129      	bne.n	80056b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	68b9      	ldr	r1, [r7, #8]
 8005668:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800566a:	f000 fa0b 	bl	8005a84 <prvCopyDataToQueue>
 800566e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005674:	2b00      	cmp	r3, #0
 8005676:	d010      	beq.n	800569a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567a:	3324      	adds	r3, #36	; 0x24
 800567c:	4618      	mov	r0, r3
 800567e:	f000 ffcf 	bl	8006620 <xTaskRemoveFromEventList>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d013      	beq.n	80056b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005688:	4b3f      	ldr	r3, [pc, #252]	; (8005788 <xQueueGenericSend+0x1f8>)
 800568a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	e00a      	b.n	80056b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800569a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569c:	2b00      	cmp	r3, #0
 800569e:	d007      	beq.n	80056b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80056a0:	4b39      	ldr	r3, [pc, #228]	; (8005788 <xQueueGenericSend+0x1f8>)
 80056a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	f3bf 8f4f 	dsb	sy
 80056ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80056b0:	f001 ff00 	bl	80074b4 <vPortExitCritical>
				return pdPASS;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e063      	b.n	8005780 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d103      	bne.n	80056c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056be:	f001 fef9 	bl	80074b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80056c2:	2300      	movs	r3, #0
 80056c4:	e05c      	b.n	8005780 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d106      	bne.n	80056da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056cc:	f107 0314 	add.w	r3, r7, #20
 80056d0:	4618      	mov	r0, r3
 80056d2:	f001 f809 	bl	80066e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056d6:	2301      	movs	r3, #1
 80056d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056da:	f001 feeb 	bl	80074b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056de:	f000 fd7b 	bl	80061d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056e2:	f001 feb7 	bl	8007454 <vPortEnterCritical>
 80056e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056ec:	b25b      	sxtb	r3, r3
 80056ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f2:	d103      	bne.n	80056fc <xQueueGenericSend+0x16c>
 80056f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005702:	b25b      	sxtb	r3, r3
 8005704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005708:	d103      	bne.n	8005712 <xQueueGenericSend+0x182>
 800570a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005712:	f001 fecf 	bl	80074b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005716:	1d3a      	adds	r2, r7, #4
 8005718:	f107 0314 	add.w	r3, r7, #20
 800571c:	4611      	mov	r1, r2
 800571e:	4618      	mov	r0, r3
 8005720:	f000 fff8 	bl	8006714 <xTaskCheckForTimeOut>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d124      	bne.n	8005774 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800572a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800572c:	f000 faa2 	bl	8005c74 <prvIsQueueFull>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d018      	beq.n	8005768 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005738:	3310      	adds	r3, #16
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	4611      	mov	r1, r2
 800573e:	4618      	mov	r0, r3
 8005740:	f000 ff1e 	bl	8006580 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005744:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005746:	f000 fa2d 	bl	8005ba4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800574a:	f000 fd53 	bl	80061f4 <xTaskResumeAll>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	f47f af7c 	bne.w	800564e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005756:	4b0c      	ldr	r3, [pc, #48]	; (8005788 <xQueueGenericSend+0x1f8>)
 8005758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	e772      	b.n	800564e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005768:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800576a:	f000 fa1b 	bl	8005ba4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800576e:	f000 fd41 	bl	80061f4 <xTaskResumeAll>
 8005772:	e76c      	b.n	800564e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005774:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005776:	f000 fa15 	bl	8005ba4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800577a:	f000 fd3b 	bl	80061f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800577e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005780:	4618      	mov	r0, r3
 8005782:	3738      	adds	r7, #56	; 0x38
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	e000ed04 	.word	0xe000ed04

0800578c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b090      	sub	sp, #64	; 0x40
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
 8005798:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800579e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10a      	bne.n	80057ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80057a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a8:	f383 8811 	msr	BASEPRI, r3
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80057b6:	bf00      	nop
 80057b8:	e7fe      	b.n	80057b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d103      	bne.n	80057c8 <xQueueGenericSendFromISR+0x3c>
 80057c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <xQueueGenericSendFromISR+0x40>
 80057c8:	2301      	movs	r3, #1
 80057ca:	e000      	b.n	80057ce <xQueueGenericSendFromISR+0x42>
 80057cc:	2300      	movs	r3, #0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10a      	bne.n	80057e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80057d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d6:	f383 8811 	msr	BASEPRI, r3
 80057da:	f3bf 8f6f 	isb	sy
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80057e4:	bf00      	nop
 80057e6:	e7fe      	b.n	80057e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d103      	bne.n	80057f6 <xQueueGenericSendFromISR+0x6a>
 80057ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d101      	bne.n	80057fa <xQueueGenericSendFromISR+0x6e>
 80057f6:	2301      	movs	r3, #1
 80057f8:	e000      	b.n	80057fc <xQueueGenericSendFromISR+0x70>
 80057fa:	2300      	movs	r3, #0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10a      	bne.n	8005816 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	623b      	str	r3, [r7, #32]
}
 8005812:	bf00      	nop
 8005814:	e7fe      	b.n	8005814 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005816:	f001 feff 	bl	8007618 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800581a:	f3ef 8211 	mrs	r2, BASEPRI
 800581e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005822:	f383 8811 	msr	BASEPRI, r3
 8005826:	f3bf 8f6f 	isb	sy
 800582a:	f3bf 8f4f 	dsb	sy
 800582e:	61fa      	str	r2, [r7, #28]
 8005830:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005832:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005834:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800583a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800583e:	429a      	cmp	r2, r3
 8005840:	d302      	bcc.n	8005848 <xQueueGenericSendFromISR+0xbc>
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	2b02      	cmp	r3, #2
 8005846:	d12f      	bne.n	80058a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800584e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005856:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	68b9      	ldr	r1, [r7, #8]
 800585c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800585e:	f000 f911 	bl	8005a84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005862:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586a:	d112      	bne.n	8005892 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800586c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	2b00      	cmp	r3, #0
 8005872:	d016      	beq.n	80058a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005876:	3324      	adds	r3, #36	; 0x24
 8005878:	4618      	mov	r0, r3
 800587a:	f000 fed1 	bl	8006620 <xTaskRemoveFromEventList>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00e      	beq.n	80058a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00b      	beq.n	80058a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	601a      	str	r2, [r3, #0]
 8005890:	e007      	b.n	80058a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005892:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005896:	3301      	adds	r3, #1
 8005898:	b2db      	uxtb	r3, r3
 800589a:	b25a      	sxtb	r2, r3
 800589c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800589e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80058a2:	2301      	movs	r3, #1
 80058a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80058a6:	e001      	b.n	80058ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80058a8:	2300      	movs	r3, #0
 80058aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80058b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80058b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3740      	adds	r7, #64	; 0x40
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
	...

080058c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b08c      	sub	sp, #48	; 0x30
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80058d0:	2300      	movs	r3, #0
 80058d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80058d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10a      	bne.n	80058f4 <xQueueReceive+0x30>
	__asm volatile
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	623b      	str	r3, [r7, #32]
}
 80058f0:	bf00      	nop
 80058f2:	e7fe      	b.n	80058f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d103      	bne.n	8005902 <xQueueReceive+0x3e>
 80058fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <xQueueReceive+0x42>
 8005902:	2301      	movs	r3, #1
 8005904:	e000      	b.n	8005908 <xQueueReceive+0x44>
 8005906:	2300      	movs	r3, #0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10a      	bne.n	8005922 <xQueueReceive+0x5e>
	__asm volatile
 800590c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005910:	f383 8811 	msr	BASEPRI, r3
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	61fb      	str	r3, [r7, #28]
}
 800591e:	bf00      	nop
 8005920:	e7fe      	b.n	8005920 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005922:	f001 f83b 	bl	800699c <xTaskGetSchedulerState>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d102      	bne.n	8005932 <xQueueReceive+0x6e>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <xQueueReceive+0x72>
 8005932:	2301      	movs	r3, #1
 8005934:	e000      	b.n	8005938 <xQueueReceive+0x74>
 8005936:	2300      	movs	r3, #0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10a      	bne.n	8005952 <xQueueReceive+0x8e>
	__asm volatile
 800593c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005940:	f383 8811 	msr	BASEPRI, r3
 8005944:	f3bf 8f6f 	isb	sy
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	61bb      	str	r3, [r7, #24]
}
 800594e:	bf00      	nop
 8005950:	e7fe      	b.n	8005950 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005952:	f001 fd7f 	bl	8007454 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	2b00      	cmp	r3, #0
 8005960:	d01f      	beq.n	80059a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005962:	68b9      	ldr	r1, [r7, #8]
 8005964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005966:	f000 f8f7 	bl	8005b58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	1e5a      	subs	r2, r3, #1
 800596e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005970:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00f      	beq.n	800599a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800597a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597c:	3310      	adds	r3, #16
 800597e:	4618      	mov	r0, r3
 8005980:	f000 fe4e 	bl	8006620 <xTaskRemoveFromEventList>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d007      	beq.n	800599a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800598a:	4b3d      	ldr	r3, [pc, #244]	; (8005a80 <xQueueReceive+0x1bc>)
 800598c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800599a:	f001 fd8b 	bl	80074b4 <vPortExitCritical>
				return pdPASS;
 800599e:	2301      	movs	r3, #1
 80059a0:	e069      	b.n	8005a76 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d103      	bne.n	80059b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80059a8:	f001 fd84 	bl	80074b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80059ac:	2300      	movs	r3, #0
 80059ae:	e062      	b.n	8005a76 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d106      	bne.n	80059c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059b6:	f107 0310 	add.w	r3, r7, #16
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 fe94 	bl	80066e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059c0:	2301      	movs	r3, #1
 80059c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059c4:	f001 fd76 	bl	80074b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059c8:	f000 fc06 	bl	80061d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059cc:	f001 fd42 	bl	8007454 <vPortEnterCritical>
 80059d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059d6:	b25b      	sxtb	r3, r3
 80059d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059dc:	d103      	bne.n	80059e6 <xQueueReceive+0x122>
 80059de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059ec:	b25b      	sxtb	r3, r3
 80059ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f2:	d103      	bne.n	80059fc <xQueueReceive+0x138>
 80059f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059fc:	f001 fd5a 	bl	80074b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a00:	1d3a      	adds	r2, r7, #4
 8005a02:	f107 0310 	add.w	r3, r7, #16
 8005a06:	4611      	mov	r1, r2
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f000 fe83 	bl	8006714 <xTaskCheckForTimeOut>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d123      	bne.n	8005a5c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a16:	f000 f917 	bl	8005c48 <prvIsQueueEmpty>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d017      	beq.n	8005a50 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a22:	3324      	adds	r3, #36	; 0x24
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	4611      	mov	r1, r2
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f000 fda9 	bl	8006580 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a30:	f000 f8b8 	bl	8005ba4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a34:	f000 fbde 	bl	80061f4 <xTaskResumeAll>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d189      	bne.n	8005952 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005a3e:	4b10      	ldr	r3, [pc, #64]	; (8005a80 <xQueueReceive+0x1bc>)
 8005a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a44:	601a      	str	r2, [r3, #0]
 8005a46:	f3bf 8f4f 	dsb	sy
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	e780      	b.n	8005952 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005a50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a52:	f000 f8a7 	bl	8005ba4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a56:	f000 fbcd 	bl	80061f4 <xTaskResumeAll>
 8005a5a:	e77a      	b.n	8005952 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005a5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a5e:	f000 f8a1 	bl	8005ba4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a62:	f000 fbc7 	bl	80061f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a68:	f000 f8ee 	bl	8005c48 <prvIsQueueEmpty>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f43f af6f 	beq.w	8005952 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3730      	adds	r7, #48	; 0x30
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	e000ed04 	.word	0xe000ed04

08005a84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b086      	sub	sp, #24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005a90:	2300      	movs	r3, #0
 8005a92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10d      	bne.n	8005abe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d14d      	bne.n	8005b46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 ff92 	bl	80069d8 <xTaskPriorityDisinherit>
 8005ab4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	609a      	str	r2, [r3, #8]
 8005abc:	e043      	b.n	8005b46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d119      	bne.n	8005af8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6858      	ldr	r0, [r3, #4]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005acc:	461a      	mov	r2, r3
 8005ace:	68b9      	ldr	r1, [r7, #8]
 8005ad0:	f001 fff6 	bl	8007ac0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005adc:	441a      	add	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d32b      	bcc.n	8005b46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	605a      	str	r2, [r3, #4]
 8005af6:	e026      	b.n	8005b46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	68d8      	ldr	r0, [r3, #12]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b00:	461a      	mov	r2, r3
 8005b02:	68b9      	ldr	r1, [r7, #8]
 8005b04:	f001 ffdc 	bl	8007ac0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	68da      	ldr	r2, [r3, #12]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b10:	425b      	negs	r3, r3
 8005b12:	441a      	add	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	68da      	ldr	r2, [r3, #12]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d207      	bcs.n	8005b34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	689a      	ldr	r2, [r3, #8]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2c:	425b      	negs	r3, r3
 8005b2e:	441a      	add	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d105      	bne.n	8005b46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d002      	beq.n	8005b46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	3b01      	subs	r3, #1
 8005b44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	1c5a      	adds	r2, r3, #1
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005b4e:	697b      	ldr	r3, [r7, #20]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3718      	adds	r7, #24
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d018      	beq.n	8005b9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68da      	ldr	r2, [r3, #12]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b72:	441a      	add	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68da      	ldr	r2, [r3, #12]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d303      	bcc.n	8005b8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	68d9      	ldr	r1, [r3, #12]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b94:	461a      	mov	r2, r3
 8005b96:	6838      	ldr	r0, [r7, #0]
 8005b98:	f001 ff92 	bl	8007ac0 <memcpy>
	}
}
 8005b9c:	bf00      	nop
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005bac:	f001 fc52 	bl	8007454 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bb6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005bb8:	e011      	b.n	8005bde <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d012      	beq.n	8005be8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	3324      	adds	r3, #36	; 0x24
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 fd2a 	bl	8006620 <xTaskRemoveFromEventList>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005bd2:	f000 fe01 	bl	80067d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005bd6:	7bfb      	ldrb	r3, [r7, #15]
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	dce9      	bgt.n	8005bba <prvUnlockQueue+0x16>
 8005be6:	e000      	b.n	8005bea <prvUnlockQueue+0x46>
					break;
 8005be8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	22ff      	movs	r2, #255	; 0xff
 8005bee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005bf2:	f001 fc5f 	bl	80074b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005bf6:	f001 fc2d 	bl	8007454 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c02:	e011      	b.n	8005c28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d012      	beq.n	8005c32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	3310      	adds	r3, #16
 8005c10:	4618      	mov	r0, r3
 8005c12:	f000 fd05 	bl	8006620 <xTaskRemoveFromEventList>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005c1c:	f000 fddc 	bl	80067d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005c20:	7bbb      	ldrb	r3, [r7, #14]
 8005c22:	3b01      	subs	r3, #1
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	dce9      	bgt.n	8005c04 <prvUnlockQueue+0x60>
 8005c30:	e000      	b.n	8005c34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005c32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	22ff      	movs	r2, #255	; 0xff
 8005c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005c3c:	f001 fc3a 	bl	80074b4 <vPortExitCritical>
}
 8005c40:	bf00      	nop
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c50:	f001 fc00 	bl	8007454 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d102      	bne.n	8005c62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	60fb      	str	r3, [r7, #12]
 8005c60:	e001      	b.n	8005c66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c62:	2300      	movs	r3, #0
 8005c64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c66:	f001 fc25 	bl	80074b4 <vPortExitCritical>

	return xReturn;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c7c:	f001 fbea 	bl	8007454 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d102      	bne.n	8005c92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	e001      	b.n	8005c96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005c92:	2300      	movs	r3, #0
 8005c94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c96:	f001 fc0d 	bl	80074b4 <vPortExitCritical>

	return xReturn;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cae:	2300      	movs	r3, #0
 8005cb0:	60fb      	str	r3, [r7, #12]
 8005cb2:	e014      	b.n	8005cde <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005cb4:	4a0f      	ldr	r2, [pc, #60]	; (8005cf4 <vQueueAddToRegistry+0x50>)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10b      	bne.n	8005cd8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005cc0:	490c      	ldr	r1, [pc, #48]	; (8005cf4 <vQueueAddToRegistry+0x50>)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	683a      	ldr	r2, [r7, #0]
 8005cc6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005cca:	4a0a      	ldr	r2, [pc, #40]	; (8005cf4 <vQueueAddToRegistry+0x50>)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	4413      	add	r3, r2
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005cd6:	e006      	b.n	8005ce6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	60fb      	str	r3, [r7, #12]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2b07      	cmp	r3, #7
 8005ce2:	d9e7      	bls.n	8005cb4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005ce4:	bf00      	nop
 8005ce6:	bf00      	nop
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	20004fe8 	.word	0x20004fe8

08005cf8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005d08:	f001 fba4 	bl	8007454 <vPortEnterCritical>
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d12:	b25b      	sxtb	r3, r3
 8005d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d18:	d103      	bne.n	8005d22 <vQueueWaitForMessageRestricted+0x2a>
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d28:	b25b      	sxtb	r3, r3
 8005d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d2e:	d103      	bne.n	8005d38 <vQueueWaitForMessageRestricted+0x40>
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d38:	f001 fbbc 	bl	80074b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d106      	bne.n	8005d52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	3324      	adds	r3, #36	; 0x24
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	68b9      	ldr	r1, [r7, #8]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f000 fc3b 	bl	80065c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005d52:	6978      	ldr	r0, [r7, #20]
 8005d54:	f7ff ff26 	bl	8005ba4 <prvUnlockQueue>
	}
 8005d58:	bf00      	nop
 8005d5a:	3718      	adds	r7, #24
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b08e      	sub	sp, #56	; 0x38
 8005d64:	af04      	add	r7, sp, #16
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
 8005d6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10a      	bne.n	8005d8a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d78:	f383 8811 	msr	BASEPRI, r3
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	623b      	str	r3, [r7, #32]
}
 8005d86:	bf00      	nop
 8005d88:	e7fe      	b.n	8005d88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10a      	bne.n	8005da6 <xTaskCreateStatic+0x46>
	__asm volatile
 8005d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d94:	f383 8811 	msr	BASEPRI, r3
 8005d98:	f3bf 8f6f 	isb	sy
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	61fb      	str	r3, [r7, #28]
}
 8005da2:	bf00      	nop
 8005da4:	e7fe      	b.n	8005da4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005da6:	235c      	movs	r3, #92	; 0x5c
 8005da8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	2b5c      	cmp	r3, #92	; 0x5c
 8005dae:	d00a      	beq.n	8005dc6 <xTaskCreateStatic+0x66>
	__asm volatile
 8005db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db4:	f383 8811 	msr	BASEPRI, r3
 8005db8:	f3bf 8f6f 	isb	sy
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	61bb      	str	r3, [r7, #24]
}
 8005dc2:	bf00      	nop
 8005dc4:	e7fe      	b.n	8005dc4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005dc6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d01e      	beq.n	8005e0c <xTaskCreateStatic+0xac>
 8005dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d01b      	beq.n	8005e0c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ddc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de0:	2202      	movs	r2, #2
 8005de2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005de6:	2300      	movs	r3, #0
 8005de8:	9303      	str	r3, [sp, #12]
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	9302      	str	r3, [sp, #8]
 8005dee:	f107 0314 	add.w	r3, r7, #20
 8005df2:	9301      	str	r3, [sp, #4]
 8005df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	68b9      	ldr	r1, [r7, #8]
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f000 f850 	bl	8005ea4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e06:	f000 f8dd 	bl	8005fc4 <prvAddNewTaskToReadyList>
 8005e0a:	e001      	b.n	8005e10 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e10:	697b      	ldr	r3, [r7, #20]
	}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3728      	adds	r7, #40	; 0x28
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b08c      	sub	sp, #48	; 0x30
 8005e1e:	af04      	add	r7, sp, #16
 8005e20:	60f8      	str	r0, [r7, #12]
 8005e22:	60b9      	str	r1, [r7, #8]
 8005e24:	603b      	str	r3, [r7, #0]
 8005e26:	4613      	mov	r3, r2
 8005e28:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005e2a:	88fb      	ldrh	r3, [r7, #6]
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f001 fc32 	bl	8007698 <pvPortMalloc>
 8005e34:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00e      	beq.n	8005e5a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005e3c:	205c      	movs	r0, #92	; 0x5c
 8005e3e:	f001 fc2b 	bl	8007698 <pvPortMalloc>
 8005e42:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	631a      	str	r2, [r3, #48]	; 0x30
 8005e50:	e005      	b.n	8005e5e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e52:	6978      	ldr	r0, [r7, #20]
 8005e54:	f001 fcec 	bl	8007830 <vPortFree>
 8005e58:	e001      	b.n	8005e5e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d017      	beq.n	8005e94 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e6c:	88fa      	ldrh	r2, [r7, #6]
 8005e6e:	2300      	movs	r3, #0
 8005e70:	9303      	str	r3, [sp, #12]
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	9302      	str	r3, [sp, #8]
 8005e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e78:	9301      	str	r3, [sp, #4]
 8005e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7c:	9300      	str	r3, [sp, #0]
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	68b9      	ldr	r1, [r7, #8]
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f000 f80e 	bl	8005ea4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e88:	69f8      	ldr	r0, [r7, #28]
 8005e8a:	f000 f89b 	bl	8005fc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	61bb      	str	r3, [r7, #24]
 8005e92:	e002      	b.n	8005e9a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e94:	f04f 33ff 	mov.w	r3, #4294967295
 8005e98:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e9a:	69bb      	ldr	r3, [r7, #24]
	}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3720      	adds	r7, #32
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b088      	sub	sp, #32
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
 8005eb0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	461a      	mov	r2, r3
 8005ebc:	21a5      	movs	r1, #165	; 0xa5
 8005ebe:	f001 fe0d 	bl	8007adc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4413      	add	r3, r2
 8005ed2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	f023 0307 	bic.w	r3, r3, #7
 8005eda:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	f003 0307 	and.w	r3, r3, #7
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00a      	beq.n	8005efc <prvInitialiseNewTask+0x58>
	__asm volatile
 8005ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eea:	f383 8811 	msr	BASEPRI, r3
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	617b      	str	r3, [r7, #20]
}
 8005ef8:	bf00      	nop
 8005efa:	e7fe      	b.n	8005efa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d01f      	beq.n	8005f42 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f02:	2300      	movs	r3, #0
 8005f04:	61fb      	str	r3, [r7, #28]
 8005f06:	e012      	b.n	8005f2e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	7819      	ldrb	r1, [r3, #0]
 8005f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	4413      	add	r3, r2
 8005f16:	3334      	adds	r3, #52	; 0x34
 8005f18:	460a      	mov	r2, r1
 8005f1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	4413      	add	r3, r2
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d006      	beq.n	8005f36 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	61fb      	str	r3, [r7, #28]
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	2b0f      	cmp	r3, #15
 8005f32:	d9e9      	bls.n	8005f08 <prvInitialiseNewTask+0x64>
 8005f34:	e000      	b.n	8005f38 <prvInitialiseNewTask+0x94>
			{
				break;
 8005f36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f40:	e003      	b.n	8005f4a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4c:	2b37      	cmp	r3, #55	; 0x37
 8005f4e:	d901      	bls.n	8005f54 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f50:	2337      	movs	r3, #55	; 0x37
 8005f52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f5e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f62:	2200      	movs	r2, #0
 8005f64:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f68:	3304      	adds	r3, #4
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7ff f978 	bl	8005260 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f72:	3318      	adds	r3, #24
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7ff f973 	bl	8005260 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f92:	2200      	movs	r2, #0
 8005f94:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	68f9      	ldr	r1, [r7, #12]
 8005fa2:	69b8      	ldr	r0, [r7, #24]
 8005fa4:	f001 f928 	bl	80071f8 <pxPortInitialiseStack>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d002      	beq.n	8005fba <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fba:	bf00      	nop
 8005fbc:	3720      	adds	r7, #32
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
	...

08005fc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005fcc:	f001 fa42 	bl	8007454 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005fd0:	4b2d      	ldr	r3, [pc, #180]	; (8006088 <prvAddNewTaskToReadyList+0xc4>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	4a2c      	ldr	r2, [pc, #176]	; (8006088 <prvAddNewTaskToReadyList+0xc4>)
 8005fd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005fda:	4b2c      	ldr	r3, [pc, #176]	; (800608c <prvAddNewTaskToReadyList+0xc8>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d109      	bne.n	8005ff6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005fe2:	4a2a      	ldr	r2, [pc, #168]	; (800608c <prvAddNewTaskToReadyList+0xc8>)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005fe8:	4b27      	ldr	r3, [pc, #156]	; (8006088 <prvAddNewTaskToReadyList+0xc4>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d110      	bne.n	8006012 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ff0:	f000 fc16 	bl	8006820 <prvInitialiseTaskLists>
 8005ff4:	e00d      	b.n	8006012 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005ff6:	4b26      	ldr	r3, [pc, #152]	; (8006090 <prvAddNewTaskToReadyList+0xcc>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d109      	bne.n	8006012 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ffe:	4b23      	ldr	r3, [pc, #140]	; (800608c <prvAddNewTaskToReadyList+0xc8>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006008:	429a      	cmp	r2, r3
 800600a:	d802      	bhi.n	8006012 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800600c:	4a1f      	ldr	r2, [pc, #124]	; (800608c <prvAddNewTaskToReadyList+0xc8>)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006012:	4b20      	ldr	r3, [pc, #128]	; (8006094 <prvAddNewTaskToReadyList+0xd0>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	3301      	adds	r3, #1
 8006018:	4a1e      	ldr	r2, [pc, #120]	; (8006094 <prvAddNewTaskToReadyList+0xd0>)
 800601a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800601c:	4b1d      	ldr	r3, [pc, #116]	; (8006094 <prvAddNewTaskToReadyList+0xd0>)
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006028:	4b1b      	ldr	r3, [pc, #108]	; (8006098 <prvAddNewTaskToReadyList+0xd4>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	429a      	cmp	r2, r3
 800602e:	d903      	bls.n	8006038 <prvAddNewTaskToReadyList+0x74>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006034:	4a18      	ldr	r2, [pc, #96]	; (8006098 <prvAddNewTaskToReadyList+0xd4>)
 8006036:	6013      	str	r3, [r2, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800603c:	4613      	mov	r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4a15      	ldr	r2, [pc, #84]	; (800609c <prvAddNewTaskToReadyList+0xd8>)
 8006046:	441a      	add	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	3304      	adds	r3, #4
 800604c:	4619      	mov	r1, r3
 800604e:	4610      	mov	r0, r2
 8006050:	f7ff f913 	bl	800527a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006054:	f001 fa2e 	bl	80074b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006058:	4b0d      	ldr	r3, [pc, #52]	; (8006090 <prvAddNewTaskToReadyList+0xcc>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00e      	beq.n	800607e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006060:	4b0a      	ldr	r3, [pc, #40]	; (800608c <prvAddNewTaskToReadyList+0xc8>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606a:	429a      	cmp	r2, r3
 800606c:	d207      	bcs.n	800607e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800606e:	4b0c      	ldr	r3, [pc, #48]	; (80060a0 <prvAddNewTaskToReadyList+0xdc>)
 8006070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	f3bf 8f4f 	dsb	sy
 800607a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800607e:	bf00      	nop
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	20000eb8 	.word	0x20000eb8
 800608c:	200009e4 	.word	0x200009e4
 8006090:	20000ec4 	.word	0x20000ec4
 8006094:	20000ed4 	.word	0x20000ed4
 8006098:	20000ec0 	.word	0x20000ec0
 800609c:	200009e8 	.word	0x200009e8
 80060a0:	e000ed04 	.word	0xe000ed04

080060a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80060ac:	2300      	movs	r3, #0
 80060ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d017      	beq.n	80060e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80060b6:	4b13      	ldr	r3, [pc, #76]	; (8006104 <vTaskDelay+0x60>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00a      	beq.n	80060d4 <vTaskDelay+0x30>
	__asm volatile
 80060be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	60bb      	str	r3, [r7, #8]
}
 80060d0:	bf00      	nop
 80060d2:	e7fe      	b.n	80060d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80060d4:	f000 f880 	bl	80061d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80060d8:	2100      	movs	r1, #0
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 fcea 	bl	8006ab4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80060e0:	f000 f888 	bl	80061f4 <xTaskResumeAll>
 80060e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d107      	bne.n	80060fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80060ec:	4b06      	ldr	r3, [pc, #24]	; (8006108 <vTaskDelay+0x64>)
 80060ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060f2:	601a      	str	r2, [r3, #0]
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060fc:	bf00      	nop
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	20000ee0 	.word	0x20000ee0
 8006108:	e000ed04 	.word	0xe000ed04

0800610c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b08a      	sub	sp, #40	; 0x28
 8006110:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006112:	2300      	movs	r3, #0
 8006114:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006116:	2300      	movs	r3, #0
 8006118:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800611a:	463a      	mov	r2, r7
 800611c:	1d39      	adds	r1, r7, #4
 800611e:	f107 0308 	add.w	r3, r7, #8
 8006122:	4618      	mov	r0, r3
 8006124:	f7ff f848 	bl	80051b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006128:	6839      	ldr	r1, [r7, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	9202      	str	r2, [sp, #8]
 8006130:	9301      	str	r3, [sp, #4]
 8006132:	2300      	movs	r3, #0
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	2300      	movs	r3, #0
 8006138:	460a      	mov	r2, r1
 800613a:	4921      	ldr	r1, [pc, #132]	; (80061c0 <vTaskStartScheduler+0xb4>)
 800613c:	4821      	ldr	r0, [pc, #132]	; (80061c4 <vTaskStartScheduler+0xb8>)
 800613e:	f7ff fe0f 	bl	8005d60 <xTaskCreateStatic>
 8006142:	4603      	mov	r3, r0
 8006144:	4a20      	ldr	r2, [pc, #128]	; (80061c8 <vTaskStartScheduler+0xbc>)
 8006146:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006148:	4b1f      	ldr	r3, [pc, #124]	; (80061c8 <vTaskStartScheduler+0xbc>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d002      	beq.n	8006156 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006150:	2301      	movs	r3, #1
 8006152:	617b      	str	r3, [r7, #20]
 8006154:	e001      	b.n	800615a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006156:	2300      	movs	r3, #0
 8006158:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d102      	bne.n	8006166 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006160:	f000 fcfc 	bl	8006b5c <xTimerCreateTimerTask>
 8006164:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d116      	bne.n	800619a <vTaskStartScheduler+0x8e>
	__asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	613b      	str	r3, [r7, #16]
}
 800617e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006180:	4b12      	ldr	r3, [pc, #72]	; (80061cc <vTaskStartScheduler+0xc0>)
 8006182:	f04f 32ff 	mov.w	r2, #4294967295
 8006186:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006188:	4b11      	ldr	r3, [pc, #68]	; (80061d0 <vTaskStartScheduler+0xc4>)
 800618a:	2201      	movs	r2, #1
 800618c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800618e:	4b11      	ldr	r3, [pc, #68]	; (80061d4 <vTaskStartScheduler+0xc8>)
 8006190:	2200      	movs	r2, #0
 8006192:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006194:	f001 f8bc 	bl	8007310 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006198:	e00e      	b.n	80061b8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a0:	d10a      	bne.n	80061b8 <vTaskStartScheduler+0xac>
	__asm volatile
 80061a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a6:	f383 8811 	msr	BASEPRI, r3
 80061aa:	f3bf 8f6f 	isb	sy
 80061ae:	f3bf 8f4f 	dsb	sy
 80061b2:	60fb      	str	r3, [r7, #12]
}
 80061b4:	bf00      	nop
 80061b6:	e7fe      	b.n	80061b6 <vTaskStartScheduler+0xaa>
}
 80061b8:	bf00      	nop
 80061ba:	3718      	adds	r7, #24
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	0800cc98 	.word	0x0800cc98
 80061c4:	080067f1 	.word	0x080067f1
 80061c8:	20000edc 	.word	0x20000edc
 80061cc:	20000ed8 	.word	0x20000ed8
 80061d0:	20000ec4 	.word	0x20000ec4
 80061d4:	20000ebc 	.word	0x20000ebc

080061d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80061d8:	b480      	push	{r7}
 80061da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80061dc:	4b04      	ldr	r3, [pc, #16]	; (80061f0 <vTaskSuspendAll+0x18>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	3301      	adds	r3, #1
 80061e2:	4a03      	ldr	r2, [pc, #12]	; (80061f0 <vTaskSuspendAll+0x18>)
 80061e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80061e6:	bf00      	nop
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr
 80061f0:	20000ee0 	.word	0x20000ee0

080061f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80061fa:	2300      	movs	r3, #0
 80061fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80061fe:	2300      	movs	r3, #0
 8006200:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006202:	4b42      	ldr	r3, [pc, #264]	; (800630c <xTaskResumeAll+0x118>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10a      	bne.n	8006220 <xTaskResumeAll+0x2c>
	__asm volatile
 800620a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620e:	f383 8811 	msr	BASEPRI, r3
 8006212:	f3bf 8f6f 	isb	sy
 8006216:	f3bf 8f4f 	dsb	sy
 800621a:	603b      	str	r3, [r7, #0]
}
 800621c:	bf00      	nop
 800621e:	e7fe      	b.n	800621e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006220:	f001 f918 	bl	8007454 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006224:	4b39      	ldr	r3, [pc, #228]	; (800630c <xTaskResumeAll+0x118>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3b01      	subs	r3, #1
 800622a:	4a38      	ldr	r2, [pc, #224]	; (800630c <xTaskResumeAll+0x118>)
 800622c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800622e:	4b37      	ldr	r3, [pc, #220]	; (800630c <xTaskResumeAll+0x118>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d162      	bne.n	80062fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006236:	4b36      	ldr	r3, [pc, #216]	; (8006310 <xTaskResumeAll+0x11c>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d05e      	beq.n	80062fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800623e:	e02f      	b.n	80062a0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006240:	4b34      	ldr	r3, [pc, #208]	; (8006314 <xTaskResumeAll+0x120>)
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	3318      	adds	r3, #24
 800624c:	4618      	mov	r0, r3
 800624e:	f7ff f871 	bl	8005334 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	3304      	adds	r3, #4
 8006256:	4618      	mov	r0, r3
 8006258:	f7ff f86c 	bl	8005334 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006260:	4b2d      	ldr	r3, [pc, #180]	; (8006318 <xTaskResumeAll+0x124>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	429a      	cmp	r2, r3
 8006266:	d903      	bls.n	8006270 <xTaskResumeAll+0x7c>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626c:	4a2a      	ldr	r2, [pc, #168]	; (8006318 <xTaskResumeAll+0x124>)
 800626e:	6013      	str	r3, [r2, #0]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006274:	4613      	mov	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4a27      	ldr	r2, [pc, #156]	; (800631c <xTaskResumeAll+0x128>)
 800627e:	441a      	add	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	3304      	adds	r3, #4
 8006284:	4619      	mov	r1, r3
 8006286:	4610      	mov	r0, r2
 8006288:	f7fe fff7 	bl	800527a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006290:	4b23      	ldr	r3, [pc, #140]	; (8006320 <xTaskResumeAll+0x12c>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006296:	429a      	cmp	r2, r3
 8006298:	d302      	bcc.n	80062a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800629a:	4b22      	ldr	r3, [pc, #136]	; (8006324 <xTaskResumeAll+0x130>)
 800629c:	2201      	movs	r2, #1
 800629e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062a0:	4b1c      	ldr	r3, [pc, #112]	; (8006314 <xTaskResumeAll+0x120>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1cb      	bne.n	8006240 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d001      	beq.n	80062b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80062ae:	f000 fb55 	bl	800695c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80062b2:	4b1d      	ldr	r3, [pc, #116]	; (8006328 <xTaskResumeAll+0x134>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d010      	beq.n	80062e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80062be:	f000 f847 	bl	8006350 <xTaskIncrementTick>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d002      	beq.n	80062ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80062c8:	4b16      	ldr	r3, [pc, #88]	; (8006324 <xTaskResumeAll+0x130>)
 80062ca:	2201      	movs	r2, #1
 80062cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	3b01      	subs	r3, #1
 80062d2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1f1      	bne.n	80062be <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80062da:	4b13      	ldr	r3, [pc, #76]	; (8006328 <xTaskResumeAll+0x134>)
 80062dc:	2200      	movs	r2, #0
 80062de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80062e0:	4b10      	ldr	r3, [pc, #64]	; (8006324 <xTaskResumeAll+0x130>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d009      	beq.n	80062fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80062e8:	2301      	movs	r3, #1
 80062ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80062ec:	4b0f      	ldr	r3, [pc, #60]	; (800632c <xTaskResumeAll+0x138>)
 80062ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062f2:	601a      	str	r2, [r3, #0]
 80062f4:	f3bf 8f4f 	dsb	sy
 80062f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062fc:	f001 f8da 	bl	80074b4 <vPortExitCritical>

	return xAlreadyYielded;
 8006300:	68bb      	ldr	r3, [r7, #8]
}
 8006302:	4618      	mov	r0, r3
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	20000ee0 	.word	0x20000ee0
 8006310:	20000eb8 	.word	0x20000eb8
 8006314:	20000e78 	.word	0x20000e78
 8006318:	20000ec0 	.word	0x20000ec0
 800631c:	200009e8 	.word	0x200009e8
 8006320:	200009e4 	.word	0x200009e4
 8006324:	20000ecc 	.word	0x20000ecc
 8006328:	20000ec8 	.word	0x20000ec8
 800632c:	e000ed04 	.word	0xe000ed04

08006330 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006336:	4b05      	ldr	r3, [pc, #20]	; (800634c <xTaskGetTickCount+0x1c>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800633c:	687b      	ldr	r3, [r7, #4]
}
 800633e:	4618      	mov	r0, r3
 8006340:	370c      	adds	r7, #12
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	20000ebc 	.word	0x20000ebc

08006350 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006356:	2300      	movs	r3, #0
 8006358:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800635a:	4b4f      	ldr	r3, [pc, #316]	; (8006498 <xTaskIncrementTick+0x148>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	f040 808f 	bne.w	8006482 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006364:	4b4d      	ldr	r3, [pc, #308]	; (800649c <xTaskIncrementTick+0x14c>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	3301      	adds	r3, #1
 800636a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800636c:	4a4b      	ldr	r2, [pc, #300]	; (800649c <xTaskIncrementTick+0x14c>)
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d120      	bne.n	80063ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006378:	4b49      	ldr	r3, [pc, #292]	; (80064a0 <xTaskIncrementTick+0x150>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00a      	beq.n	8006398 <xTaskIncrementTick+0x48>
	__asm volatile
 8006382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006386:	f383 8811 	msr	BASEPRI, r3
 800638a:	f3bf 8f6f 	isb	sy
 800638e:	f3bf 8f4f 	dsb	sy
 8006392:	603b      	str	r3, [r7, #0]
}
 8006394:	bf00      	nop
 8006396:	e7fe      	b.n	8006396 <xTaskIncrementTick+0x46>
 8006398:	4b41      	ldr	r3, [pc, #260]	; (80064a0 <xTaskIncrementTick+0x150>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	60fb      	str	r3, [r7, #12]
 800639e:	4b41      	ldr	r3, [pc, #260]	; (80064a4 <xTaskIncrementTick+0x154>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a3f      	ldr	r2, [pc, #252]	; (80064a0 <xTaskIncrementTick+0x150>)
 80063a4:	6013      	str	r3, [r2, #0]
 80063a6:	4a3f      	ldr	r2, [pc, #252]	; (80064a4 <xTaskIncrementTick+0x154>)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6013      	str	r3, [r2, #0]
 80063ac:	4b3e      	ldr	r3, [pc, #248]	; (80064a8 <xTaskIncrementTick+0x158>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	3301      	adds	r3, #1
 80063b2:	4a3d      	ldr	r2, [pc, #244]	; (80064a8 <xTaskIncrementTick+0x158>)
 80063b4:	6013      	str	r3, [r2, #0]
 80063b6:	f000 fad1 	bl	800695c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80063ba:	4b3c      	ldr	r3, [pc, #240]	; (80064ac <xTaskIncrementTick+0x15c>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d349      	bcc.n	8006458 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063c4:	4b36      	ldr	r3, [pc, #216]	; (80064a0 <xTaskIncrementTick+0x150>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d104      	bne.n	80063d8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063ce:	4b37      	ldr	r3, [pc, #220]	; (80064ac <xTaskIncrementTick+0x15c>)
 80063d0:	f04f 32ff 	mov.w	r2, #4294967295
 80063d4:	601a      	str	r2, [r3, #0]
					break;
 80063d6:	e03f      	b.n	8006458 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063d8:	4b31      	ldr	r3, [pc, #196]	; (80064a0 <xTaskIncrementTick+0x150>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d203      	bcs.n	80063f8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80063f0:	4a2e      	ldr	r2, [pc, #184]	; (80064ac <xTaskIncrementTick+0x15c>)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80063f6:	e02f      	b.n	8006458 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	3304      	adds	r3, #4
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7fe ff99 	bl	8005334 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006406:	2b00      	cmp	r3, #0
 8006408:	d004      	beq.n	8006414 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	3318      	adds	r3, #24
 800640e:	4618      	mov	r0, r3
 8006410:	f7fe ff90 	bl	8005334 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006418:	4b25      	ldr	r3, [pc, #148]	; (80064b0 <xTaskIncrementTick+0x160>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	429a      	cmp	r2, r3
 800641e:	d903      	bls.n	8006428 <xTaskIncrementTick+0xd8>
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006424:	4a22      	ldr	r2, [pc, #136]	; (80064b0 <xTaskIncrementTick+0x160>)
 8006426:	6013      	str	r3, [r2, #0]
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800642c:	4613      	mov	r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4a1f      	ldr	r2, [pc, #124]	; (80064b4 <xTaskIncrementTick+0x164>)
 8006436:	441a      	add	r2, r3
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	3304      	adds	r3, #4
 800643c:	4619      	mov	r1, r3
 800643e:	4610      	mov	r0, r2
 8006440:	f7fe ff1b 	bl	800527a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006448:	4b1b      	ldr	r3, [pc, #108]	; (80064b8 <xTaskIncrementTick+0x168>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644e:	429a      	cmp	r2, r3
 8006450:	d3b8      	bcc.n	80063c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006452:	2301      	movs	r3, #1
 8006454:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006456:	e7b5      	b.n	80063c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006458:	4b17      	ldr	r3, [pc, #92]	; (80064b8 <xTaskIncrementTick+0x168>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800645e:	4915      	ldr	r1, [pc, #84]	; (80064b4 <xTaskIncrementTick+0x164>)
 8006460:	4613      	mov	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	440b      	add	r3, r1
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d901      	bls.n	8006474 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006470:	2301      	movs	r3, #1
 8006472:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006474:	4b11      	ldr	r3, [pc, #68]	; (80064bc <xTaskIncrementTick+0x16c>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d007      	beq.n	800648c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800647c:	2301      	movs	r3, #1
 800647e:	617b      	str	r3, [r7, #20]
 8006480:	e004      	b.n	800648c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006482:	4b0f      	ldr	r3, [pc, #60]	; (80064c0 <xTaskIncrementTick+0x170>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	3301      	adds	r3, #1
 8006488:	4a0d      	ldr	r2, [pc, #52]	; (80064c0 <xTaskIncrementTick+0x170>)
 800648a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800648c:	697b      	ldr	r3, [r7, #20]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3718      	adds	r7, #24
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	20000ee0 	.word	0x20000ee0
 800649c:	20000ebc 	.word	0x20000ebc
 80064a0:	20000e70 	.word	0x20000e70
 80064a4:	20000e74 	.word	0x20000e74
 80064a8:	20000ed0 	.word	0x20000ed0
 80064ac:	20000ed8 	.word	0x20000ed8
 80064b0:	20000ec0 	.word	0x20000ec0
 80064b4:	200009e8 	.word	0x200009e8
 80064b8:	200009e4 	.word	0x200009e4
 80064bc:	20000ecc 	.word	0x20000ecc
 80064c0:	20000ec8 	.word	0x20000ec8

080064c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80064ca:	4b28      	ldr	r3, [pc, #160]	; (800656c <vTaskSwitchContext+0xa8>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d003      	beq.n	80064da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80064d2:	4b27      	ldr	r3, [pc, #156]	; (8006570 <vTaskSwitchContext+0xac>)
 80064d4:	2201      	movs	r2, #1
 80064d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80064d8:	e041      	b.n	800655e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80064da:	4b25      	ldr	r3, [pc, #148]	; (8006570 <vTaskSwitchContext+0xac>)
 80064dc:	2200      	movs	r2, #0
 80064de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064e0:	4b24      	ldr	r3, [pc, #144]	; (8006574 <vTaskSwitchContext+0xb0>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	60fb      	str	r3, [r7, #12]
 80064e6:	e010      	b.n	800650a <vTaskSwitchContext+0x46>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10a      	bne.n	8006504 <vTaskSwitchContext+0x40>
	__asm volatile
 80064ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f2:	f383 8811 	msr	BASEPRI, r3
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	607b      	str	r3, [r7, #4]
}
 8006500:	bf00      	nop
 8006502:	e7fe      	b.n	8006502 <vTaskSwitchContext+0x3e>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	3b01      	subs	r3, #1
 8006508:	60fb      	str	r3, [r7, #12]
 800650a:	491b      	ldr	r1, [pc, #108]	; (8006578 <vTaskSwitchContext+0xb4>)
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	4613      	mov	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	440b      	add	r3, r1
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d0e4      	beq.n	80064e8 <vTaskSwitchContext+0x24>
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	4613      	mov	r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4413      	add	r3, r2
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4a13      	ldr	r2, [pc, #76]	; (8006578 <vTaskSwitchContext+0xb4>)
 800652a:	4413      	add	r3, r2
 800652c:	60bb      	str	r3, [r7, #8]
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	605a      	str	r2, [r3, #4]
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	3308      	adds	r3, #8
 8006540:	429a      	cmp	r2, r3
 8006542:	d104      	bne.n	800654e <vTaskSwitchContext+0x8a>
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	685a      	ldr	r2, [r3, #4]
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	605a      	str	r2, [r3, #4]
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	4a09      	ldr	r2, [pc, #36]	; (800657c <vTaskSwitchContext+0xb8>)
 8006556:	6013      	str	r3, [r2, #0]
 8006558:	4a06      	ldr	r2, [pc, #24]	; (8006574 <vTaskSwitchContext+0xb0>)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6013      	str	r3, [r2, #0]
}
 800655e:	bf00      	nop
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	20000ee0 	.word	0x20000ee0
 8006570:	20000ecc 	.word	0x20000ecc
 8006574:	20000ec0 	.word	0x20000ec0
 8006578:	200009e8 	.word	0x200009e8
 800657c:	200009e4 	.word	0x200009e4

08006580 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10a      	bne.n	80065a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	60fb      	str	r3, [r7, #12]
}
 80065a2:	bf00      	nop
 80065a4:	e7fe      	b.n	80065a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065a6:	4b07      	ldr	r3, [pc, #28]	; (80065c4 <vTaskPlaceOnEventList+0x44>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3318      	adds	r3, #24
 80065ac:	4619      	mov	r1, r3
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f7fe fe87 	bl	80052c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065b4:	2101      	movs	r1, #1
 80065b6:	6838      	ldr	r0, [r7, #0]
 80065b8:	f000 fa7c 	bl	8006ab4 <prvAddCurrentTaskToDelayedList>
}
 80065bc:	bf00      	nop
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	200009e4 	.word	0x200009e4

080065c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b086      	sub	sp, #24
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10a      	bne.n	80065f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80065da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065de:	f383 8811 	msr	BASEPRI, r3
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	617b      	str	r3, [r7, #20]
}
 80065ec:	bf00      	nop
 80065ee:	e7fe      	b.n	80065ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065f0:	4b0a      	ldr	r3, [pc, #40]	; (800661c <vTaskPlaceOnEventListRestricted+0x54>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3318      	adds	r3, #24
 80065f6:	4619      	mov	r1, r3
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f7fe fe3e 	bl	800527a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d002      	beq.n	800660a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006604:	f04f 33ff 	mov.w	r3, #4294967295
 8006608:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800660a:	6879      	ldr	r1, [r7, #4]
 800660c:	68b8      	ldr	r0, [r7, #8]
 800660e:	f000 fa51 	bl	8006ab4 <prvAddCurrentTaskToDelayedList>
	}
 8006612:	bf00      	nop
 8006614:	3718      	adds	r7, #24
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	200009e4 	.word	0x200009e4

08006620 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b086      	sub	sp, #24
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10a      	bne.n	800664c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663a:	f383 8811 	msr	BASEPRI, r3
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	f3bf 8f4f 	dsb	sy
 8006646:	60fb      	str	r3, [r7, #12]
}
 8006648:	bf00      	nop
 800664a:	e7fe      	b.n	800664a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	3318      	adds	r3, #24
 8006650:	4618      	mov	r0, r3
 8006652:	f7fe fe6f 	bl	8005334 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006656:	4b1e      	ldr	r3, [pc, #120]	; (80066d0 <xTaskRemoveFromEventList+0xb0>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d11d      	bne.n	800669a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	3304      	adds	r3, #4
 8006662:	4618      	mov	r0, r3
 8006664:	f7fe fe66 	bl	8005334 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800666c:	4b19      	ldr	r3, [pc, #100]	; (80066d4 <xTaskRemoveFromEventList+0xb4>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	429a      	cmp	r2, r3
 8006672:	d903      	bls.n	800667c <xTaskRemoveFromEventList+0x5c>
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006678:	4a16      	ldr	r2, [pc, #88]	; (80066d4 <xTaskRemoveFromEventList+0xb4>)
 800667a:	6013      	str	r3, [r2, #0]
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006680:	4613      	mov	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	4a13      	ldr	r2, [pc, #76]	; (80066d8 <xTaskRemoveFromEventList+0xb8>)
 800668a:	441a      	add	r2, r3
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	3304      	adds	r3, #4
 8006690:	4619      	mov	r1, r3
 8006692:	4610      	mov	r0, r2
 8006694:	f7fe fdf1 	bl	800527a <vListInsertEnd>
 8006698:	e005      	b.n	80066a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	3318      	adds	r3, #24
 800669e:	4619      	mov	r1, r3
 80066a0:	480e      	ldr	r0, [pc, #56]	; (80066dc <xTaskRemoveFromEventList+0xbc>)
 80066a2:	f7fe fdea 	bl	800527a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066aa:	4b0d      	ldr	r3, [pc, #52]	; (80066e0 <xTaskRemoveFromEventList+0xc0>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d905      	bls.n	80066c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80066b4:	2301      	movs	r3, #1
 80066b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80066b8:	4b0a      	ldr	r3, [pc, #40]	; (80066e4 <xTaskRemoveFromEventList+0xc4>)
 80066ba:	2201      	movs	r2, #1
 80066bc:	601a      	str	r2, [r3, #0]
 80066be:	e001      	b.n	80066c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80066c0:	2300      	movs	r3, #0
 80066c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80066c4:	697b      	ldr	r3, [r7, #20]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3718      	adds	r7, #24
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	20000ee0 	.word	0x20000ee0
 80066d4:	20000ec0 	.word	0x20000ec0
 80066d8:	200009e8 	.word	0x200009e8
 80066dc:	20000e78 	.word	0x20000e78
 80066e0:	200009e4 	.word	0x200009e4
 80066e4:	20000ecc 	.word	0x20000ecc

080066e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80066f0:	4b06      	ldr	r3, [pc, #24]	; (800670c <vTaskInternalSetTimeOutState+0x24>)
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80066f8:	4b05      	ldr	r3, [pc, #20]	; (8006710 <vTaskInternalSetTimeOutState+0x28>)
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	605a      	str	r2, [r3, #4]
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	20000ed0 	.word	0x20000ed0
 8006710:	20000ebc 	.word	0x20000ebc

08006714 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b088      	sub	sp, #32
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10a      	bne.n	800673a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006728:	f383 8811 	msr	BASEPRI, r3
 800672c:	f3bf 8f6f 	isb	sy
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	613b      	str	r3, [r7, #16]
}
 8006736:	bf00      	nop
 8006738:	e7fe      	b.n	8006738 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d10a      	bne.n	8006756 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	60fb      	str	r3, [r7, #12]
}
 8006752:	bf00      	nop
 8006754:	e7fe      	b.n	8006754 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006756:	f000 fe7d 	bl	8007454 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800675a:	4b1d      	ldr	r3, [pc, #116]	; (80067d0 <xTaskCheckForTimeOut+0xbc>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	69ba      	ldr	r2, [r7, #24]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006772:	d102      	bne.n	800677a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006774:	2300      	movs	r3, #0
 8006776:	61fb      	str	r3, [r7, #28]
 8006778:	e023      	b.n	80067c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	4b15      	ldr	r3, [pc, #84]	; (80067d4 <xTaskCheckForTimeOut+0xc0>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	429a      	cmp	r2, r3
 8006784:	d007      	beq.n	8006796 <xTaskCheckForTimeOut+0x82>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	429a      	cmp	r2, r3
 800678e:	d302      	bcc.n	8006796 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006790:	2301      	movs	r3, #1
 8006792:	61fb      	str	r3, [r7, #28]
 8006794:	e015      	b.n	80067c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	429a      	cmp	r2, r3
 800679e:	d20b      	bcs.n	80067b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	1ad2      	subs	r2, r2, r3
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f7ff ff9b 	bl	80066e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80067b2:	2300      	movs	r3, #0
 80067b4:	61fb      	str	r3, [r7, #28]
 80067b6:	e004      	b.n	80067c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	2200      	movs	r2, #0
 80067bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80067be:	2301      	movs	r3, #1
 80067c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80067c2:	f000 fe77 	bl	80074b4 <vPortExitCritical>

	return xReturn;
 80067c6:	69fb      	ldr	r3, [r7, #28]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3720      	adds	r7, #32
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	20000ebc 	.word	0x20000ebc
 80067d4:	20000ed0 	.word	0x20000ed0

080067d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80067d8:	b480      	push	{r7}
 80067da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80067dc:	4b03      	ldr	r3, [pc, #12]	; (80067ec <vTaskMissedYield+0x14>)
 80067de:	2201      	movs	r2, #1
 80067e0:	601a      	str	r2, [r3, #0]
}
 80067e2:	bf00      	nop
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	20000ecc 	.word	0x20000ecc

080067f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80067f8:	f000 f852 	bl	80068a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067fc:	4b06      	ldr	r3, [pc, #24]	; (8006818 <prvIdleTask+0x28>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d9f9      	bls.n	80067f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006804:	4b05      	ldr	r3, [pc, #20]	; (800681c <prvIdleTask+0x2c>)
 8006806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800680a:	601a      	str	r2, [r3, #0]
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006814:	e7f0      	b.n	80067f8 <prvIdleTask+0x8>
 8006816:	bf00      	nop
 8006818:	200009e8 	.word	0x200009e8
 800681c:	e000ed04 	.word	0xe000ed04

08006820 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006826:	2300      	movs	r3, #0
 8006828:	607b      	str	r3, [r7, #4]
 800682a:	e00c      	b.n	8006846 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	4613      	mov	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4a12      	ldr	r2, [pc, #72]	; (8006880 <prvInitialiseTaskLists+0x60>)
 8006838:	4413      	add	r3, r2
 800683a:	4618      	mov	r0, r3
 800683c:	f7fe fcf0 	bl	8005220 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	3301      	adds	r3, #1
 8006844:	607b      	str	r3, [r7, #4]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2b37      	cmp	r3, #55	; 0x37
 800684a:	d9ef      	bls.n	800682c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800684c:	480d      	ldr	r0, [pc, #52]	; (8006884 <prvInitialiseTaskLists+0x64>)
 800684e:	f7fe fce7 	bl	8005220 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006852:	480d      	ldr	r0, [pc, #52]	; (8006888 <prvInitialiseTaskLists+0x68>)
 8006854:	f7fe fce4 	bl	8005220 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006858:	480c      	ldr	r0, [pc, #48]	; (800688c <prvInitialiseTaskLists+0x6c>)
 800685a:	f7fe fce1 	bl	8005220 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800685e:	480c      	ldr	r0, [pc, #48]	; (8006890 <prvInitialiseTaskLists+0x70>)
 8006860:	f7fe fcde 	bl	8005220 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006864:	480b      	ldr	r0, [pc, #44]	; (8006894 <prvInitialiseTaskLists+0x74>)
 8006866:	f7fe fcdb 	bl	8005220 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800686a:	4b0b      	ldr	r3, [pc, #44]	; (8006898 <prvInitialiseTaskLists+0x78>)
 800686c:	4a05      	ldr	r2, [pc, #20]	; (8006884 <prvInitialiseTaskLists+0x64>)
 800686e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006870:	4b0a      	ldr	r3, [pc, #40]	; (800689c <prvInitialiseTaskLists+0x7c>)
 8006872:	4a05      	ldr	r2, [pc, #20]	; (8006888 <prvInitialiseTaskLists+0x68>)
 8006874:	601a      	str	r2, [r3, #0]
}
 8006876:	bf00      	nop
 8006878:	3708      	adds	r7, #8
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	200009e8 	.word	0x200009e8
 8006884:	20000e48 	.word	0x20000e48
 8006888:	20000e5c 	.word	0x20000e5c
 800688c:	20000e78 	.word	0x20000e78
 8006890:	20000e8c 	.word	0x20000e8c
 8006894:	20000ea4 	.word	0x20000ea4
 8006898:	20000e70 	.word	0x20000e70
 800689c:	20000e74 	.word	0x20000e74

080068a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068a6:	e019      	b.n	80068dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80068a8:	f000 fdd4 	bl	8007454 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068ac:	4b10      	ldr	r3, [pc, #64]	; (80068f0 <prvCheckTasksWaitingTermination+0x50>)
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	3304      	adds	r3, #4
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7fe fd3b 	bl	8005334 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80068be:	4b0d      	ldr	r3, [pc, #52]	; (80068f4 <prvCheckTasksWaitingTermination+0x54>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	3b01      	subs	r3, #1
 80068c4:	4a0b      	ldr	r2, [pc, #44]	; (80068f4 <prvCheckTasksWaitingTermination+0x54>)
 80068c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80068c8:	4b0b      	ldr	r3, [pc, #44]	; (80068f8 <prvCheckTasksWaitingTermination+0x58>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	3b01      	subs	r3, #1
 80068ce:	4a0a      	ldr	r2, [pc, #40]	; (80068f8 <prvCheckTasksWaitingTermination+0x58>)
 80068d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80068d2:	f000 fdef 	bl	80074b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f810 	bl	80068fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068dc:	4b06      	ldr	r3, [pc, #24]	; (80068f8 <prvCheckTasksWaitingTermination+0x58>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d1e1      	bne.n	80068a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80068e4:	bf00      	nop
 80068e6:	bf00      	nop
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	20000e8c 	.word	0x20000e8c
 80068f4:	20000eb8 	.word	0x20000eb8
 80068f8:	20000ea0 	.word	0x20000ea0

080068fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800690a:	2b00      	cmp	r3, #0
 800690c:	d108      	bne.n	8006920 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006912:	4618      	mov	r0, r3
 8006914:	f000 ff8c 	bl	8007830 <vPortFree>
				vPortFree( pxTCB );
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 ff89 	bl	8007830 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800691e:	e018      	b.n	8006952 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006926:	2b01      	cmp	r3, #1
 8006928:	d103      	bne.n	8006932 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 ff80 	bl	8007830 <vPortFree>
	}
 8006930:	e00f      	b.n	8006952 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006938:	2b02      	cmp	r3, #2
 800693a:	d00a      	beq.n	8006952 <prvDeleteTCB+0x56>
	__asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006940:	f383 8811 	msr	BASEPRI, r3
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	60fb      	str	r3, [r7, #12]
}
 800694e:	bf00      	nop
 8006950:	e7fe      	b.n	8006950 <prvDeleteTCB+0x54>
	}
 8006952:	bf00      	nop
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
	...

0800695c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006962:	4b0c      	ldr	r3, [pc, #48]	; (8006994 <prvResetNextTaskUnblockTime+0x38>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d104      	bne.n	8006976 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800696c:	4b0a      	ldr	r3, [pc, #40]	; (8006998 <prvResetNextTaskUnblockTime+0x3c>)
 800696e:	f04f 32ff 	mov.w	r2, #4294967295
 8006972:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006974:	e008      	b.n	8006988 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006976:	4b07      	ldr	r3, [pc, #28]	; (8006994 <prvResetNextTaskUnblockTime+0x38>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	4a04      	ldr	r2, [pc, #16]	; (8006998 <prvResetNextTaskUnblockTime+0x3c>)
 8006986:	6013      	str	r3, [r2, #0]
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	20000e70 	.word	0x20000e70
 8006998:	20000ed8 	.word	0x20000ed8

0800699c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80069a2:	4b0b      	ldr	r3, [pc, #44]	; (80069d0 <xTaskGetSchedulerState+0x34>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d102      	bne.n	80069b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80069aa:	2301      	movs	r3, #1
 80069ac:	607b      	str	r3, [r7, #4]
 80069ae:	e008      	b.n	80069c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069b0:	4b08      	ldr	r3, [pc, #32]	; (80069d4 <xTaskGetSchedulerState+0x38>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d102      	bne.n	80069be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80069b8:	2302      	movs	r3, #2
 80069ba:	607b      	str	r3, [r7, #4]
 80069bc:	e001      	b.n	80069c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80069be:	2300      	movs	r3, #0
 80069c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80069c2:	687b      	ldr	r3, [r7, #4]
	}
 80069c4:	4618      	mov	r0, r3
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr
 80069d0:	20000ec4 	.word	0x20000ec4
 80069d4:	20000ee0 	.word	0x20000ee0

080069d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b086      	sub	sp, #24
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80069e4:	2300      	movs	r3, #0
 80069e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d056      	beq.n	8006a9c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80069ee:	4b2e      	ldr	r3, [pc, #184]	; (8006aa8 <xTaskPriorityDisinherit+0xd0>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d00a      	beq.n	8006a0e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80069f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fc:	f383 8811 	msr	BASEPRI, r3
 8006a00:	f3bf 8f6f 	isb	sy
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	60fb      	str	r3, [r7, #12]
}
 8006a0a:	bf00      	nop
 8006a0c:	e7fe      	b.n	8006a0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10a      	bne.n	8006a2c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	60bb      	str	r3, [r7, #8]
}
 8006a28:	bf00      	nop
 8006a2a:	e7fe      	b.n	8006a2a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a30:	1e5a      	subs	r2, r3, #1
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d02c      	beq.n	8006a9c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d128      	bne.n	8006a9c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	3304      	adds	r3, #4
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7fe fc70 	bl	8005334 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a6c:	4b0f      	ldr	r3, [pc, #60]	; (8006aac <xTaskPriorityDisinherit+0xd4>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d903      	bls.n	8006a7c <xTaskPriorityDisinherit+0xa4>
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a78:	4a0c      	ldr	r2, [pc, #48]	; (8006aac <xTaskPriorityDisinherit+0xd4>)
 8006a7a:	6013      	str	r3, [r2, #0]
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a80:	4613      	mov	r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4a09      	ldr	r2, [pc, #36]	; (8006ab0 <xTaskPriorityDisinherit+0xd8>)
 8006a8a:	441a      	add	r2, r3
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	3304      	adds	r3, #4
 8006a90:	4619      	mov	r1, r3
 8006a92:	4610      	mov	r0, r2
 8006a94:	f7fe fbf1 	bl	800527a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a9c:	697b      	ldr	r3, [r7, #20]
	}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3718      	adds	r7, #24
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	200009e4 	.word	0x200009e4
 8006aac:	20000ec0 	.word	0x20000ec0
 8006ab0:	200009e8 	.word	0x200009e8

08006ab4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006abe:	4b21      	ldr	r3, [pc, #132]	; (8006b44 <prvAddCurrentTaskToDelayedList+0x90>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ac4:	4b20      	ldr	r3, [pc, #128]	; (8006b48 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	3304      	adds	r3, #4
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7fe fc32 	bl	8005334 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad6:	d10a      	bne.n	8006aee <prvAddCurrentTaskToDelayedList+0x3a>
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d007      	beq.n	8006aee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ade:	4b1a      	ldr	r3, [pc, #104]	; (8006b48 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	3304      	adds	r3, #4
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	4819      	ldr	r0, [pc, #100]	; (8006b4c <prvAddCurrentTaskToDelayedList+0x98>)
 8006ae8:	f7fe fbc7 	bl	800527a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006aec:	e026      	b.n	8006b3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4413      	add	r3, r2
 8006af4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006af6:	4b14      	ldr	r3, [pc, #80]	; (8006b48 <prvAddCurrentTaskToDelayedList+0x94>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68ba      	ldr	r2, [r7, #8]
 8006afc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d209      	bcs.n	8006b1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b06:	4b12      	ldr	r3, [pc, #72]	; (8006b50 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	4b0f      	ldr	r3, [pc, #60]	; (8006b48 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	3304      	adds	r3, #4
 8006b10:	4619      	mov	r1, r3
 8006b12:	4610      	mov	r0, r2
 8006b14:	f7fe fbd5 	bl	80052c2 <vListInsert>
}
 8006b18:	e010      	b.n	8006b3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b1a:	4b0e      	ldr	r3, [pc, #56]	; (8006b54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	4b0a      	ldr	r3, [pc, #40]	; (8006b48 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	3304      	adds	r3, #4
 8006b24:	4619      	mov	r1, r3
 8006b26:	4610      	mov	r0, r2
 8006b28:	f7fe fbcb 	bl	80052c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b2c:	4b0a      	ldr	r3, [pc, #40]	; (8006b58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68ba      	ldr	r2, [r7, #8]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d202      	bcs.n	8006b3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006b36:	4a08      	ldr	r2, [pc, #32]	; (8006b58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	6013      	str	r3, [r2, #0]
}
 8006b3c:	bf00      	nop
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	20000ebc 	.word	0x20000ebc
 8006b48:	200009e4 	.word	0x200009e4
 8006b4c:	20000ea4 	.word	0x20000ea4
 8006b50:	20000e74 	.word	0x20000e74
 8006b54:	20000e70 	.word	0x20000e70
 8006b58:	20000ed8 	.word	0x20000ed8

08006b5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b08a      	sub	sp, #40	; 0x28
 8006b60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006b62:	2300      	movs	r3, #0
 8006b64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006b66:	f000 fb07 	bl	8007178 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006b6a:	4b1c      	ldr	r3, [pc, #112]	; (8006bdc <xTimerCreateTimerTask+0x80>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d021      	beq.n	8006bb6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006b72:	2300      	movs	r3, #0
 8006b74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006b76:	2300      	movs	r3, #0
 8006b78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b7a:	1d3a      	adds	r2, r7, #4
 8006b7c:	f107 0108 	add.w	r1, r7, #8
 8006b80:	f107 030c 	add.w	r3, r7, #12
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7fe fb31 	bl	80051ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006b8a:	6879      	ldr	r1, [r7, #4]
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	9202      	str	r2, [sp, #8]
 8006b92:	9301      	str	r3, [sp, #4]
 8006b94:	2302      	movs	r3, #2
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	2300      	movs	r3, #0
 8006b9a:	460a      	mov	r2, r1
 8006b9c:	4910      	ldr	r1, [pc, #64]	; (8006be0 <xTimerCreateTimerTask+0x84>)
 8006b9e:	4811      	ldr	r0, [pc, #68]	; (8006be4 <xTimerCreateTimerTask+0x88>)
 8006ba0:	f7ff f8de 	bl	8005d60 <xTaskCreateStatic>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	4a10      	ldr	r2, [pc, #64]	; (8006be8 <xTimerCreateTimerTask+0x8c>)
 8006ba8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006baa:	4b0f      	ldr	r3, [pc, #60]	; (8006be8 <xTimerCreateTimerTask+0x8c>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d001      	beq.n	8006bb6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d10a      	bne.n	8006bd2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc0:	f383 8811 	msr	BASEPRI, r3
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	613b      	str	r3, [r7, #16]
}
 8006bce:	bf00      	nop
 8006bd0:	e7fe      	b.n	8006bd0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006bd2:	697b      	ldr	r3, [r7, #20]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3718      	adds	r7, #24
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	20000f14 	.word	0x20000f14
 8006be0:	0800cca0 	.word	0x0800cca0
 8006be4:	08006d21 	.word	0x08006d21
 8006be8:	20000f18 	.word	0x20000f18

08006bec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b08a      	sub	sp, #40	; 0x28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]
 8006bf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10a      	bne.n	8006c1a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	623b      	str	r3, [r7, #32]
}
 8006c16:	bf00      	nop
 8006c18:	e7fe      	b.n	8006c18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006c1a:	4b1a      	ldr	r3, [pc, #104]	; (8006c84 <xTimerGenericCommand+0x98>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d02a      	beq.n	8006c78 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	2b05      	cmp	r3, #5
 8006c32:	dc18      	bgt.n	8006c66 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006c34:	f7ff feb2 	bl	800699c <xTaskGetSchedulerState>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d109      	bne.n	8006c52 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006c3e:	4b11      	ldr	r3, [pc, #68]	; (8006c84 <xTimerGenericCommand+0x98>)
 8006c40:	6818      	ldr	r0, [r3, #0]
 8006c42:	f107 0110 	add.w	r1, r7, #16
 8006c46:	2300      	movs	r3, #0
 8006c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c4a:	f7fe fca1 	bl	8005590 <xQueueGenericSend>
 8006c4e:	6278      	str	r0, [r7, #36]	; 0x24
 8006c50:	e012      	b.n	8006c78 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006c52:	4b0c      	ldr	r3, [pc, #48]	; (8006c84 <xTimerGenericCommand+0x98>)
 8006c54:	6818      	ldr	r0, [r3, #0]
 8006c56:	f107 0110 	add.w	r1, r7, #16
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f7fe fc97 	bl	8005590 <xQueueGenericSend>
 8006c62:	6278      	str	r0, [r7, #36]	; 0x24
 8006c64:	e008      	b.n	8006c78 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c66:	4b07      	ldr	r3, [pc, #28]	; (8006c84 <xTimerGenericCommand+0x98>)
 8006c68:	6818      	ldr	r0, [r3, #0]
 8006c6a:	f107 0110 	add.w	r1, r7, #16
 8006c6e:	2300      	movs	r3, #0
 8006c70:	683a      	ldr	r2, [r7, #0]
 8006c72:	f7fe fd8b 	bl	800578c <xQueueGenericSendFromISR>
 8006c76:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3728      	adds	r7, #40	; 0x28
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	20000f14 	.word	0x20000f14

08006c88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b088      	sub	sp, #32
 8006c8c:	af02      	add	r7, sp, #8
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c92:	4b22      	ldr	r3, [pc, #136]	; (8006d1c <prvProcessExpiredTimer+0x94>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	3304      	adds	r3, #4
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7fe fb47 	bl	8005334 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cac:	f003 0304 	and.w	r3, r3, #4
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d022      	beq.n	8006cfa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	699a      	ldr	r2, [r3, #24]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	18d1      	adds	r1, r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	683a      	ldr	r2, [r7, #0]
 8006cc0:	6978      	ldr	r0, [r7, #20]
 8006cc2:	f000 f8d1 	bl	8006e68 <prvInsertTimerInActiveList>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d01f      	beq.n	8006d0c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ccc:	2300      	movs	r3, #0
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	6978      	ldr	r0, [r7, #20]
 8006cd8:	f7ff ff88 	bl	8006bec <xTimerGenericCommand>
 8006cdc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d113      	bne.n	8006d0c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce8:	f383 8811 	msr	BASEPRI, r3
 8006cec:	f3bf 8f6f 	isb	sy
 8006cf0:	f3bf 8f4f 	dsb	sy
 8006cf4:	60fb      	str	r3, [r7, #12]
}
 8006cf6:	bf00      	nop
 8006cf8:	e7fe      	b.n	8006cf8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d00:	f023 0301 	bic.w	r3, r3, #1
 8006d04:	b2da      	uxtb	r2, r3
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	6a1b      	ldr	r3, [r3, #32]
 8006d10:	6978      	ldr	r0, [r7, #20]
 8006d12:	4798      	blx	r3
}
 8006d14:	bf00      	nop
 8006d16:	3718      	adds	r7, #24
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	20000f0c 	.word	0x20000f0c

08006d20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d28:	f107 0308 	add.w	r3, r7, #8
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f000 f857 	bl	8006de0 <prvGetNextExpireTime>
 8006d32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	4619      	mov	r1, r3
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f000 f803 	bl	8006d44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006d3e:	f000 f8d5 	bl	8006eec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d42:	e7f1      	b.n	8006d28 <prvTimerTask+0x8>

08006d44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006d4e:	f7ff fa43 	bl	80061d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d52:	f107 0308 	add.w	r3, r7, #8
 8006d56:	4618      	mov	r0, r3
 8006d58:	f000 f866 	bl	8006e28 <prvSampleTimeNow>
 8006d5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d130      	bne.n	8006dc6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10a      	bne.n	8006d80 <prvProcessTimerOrBlockTask+0x3c>
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d806      	bhi.n	8006d80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006d72:	f7ff fa3f 	bl	80061f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d76:	68f9      	ldr	r1, [r7, #12]
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f7ff ff85 	bl	8006c88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006d7e:	e024      	b.n	8006dca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d008      	beq.n	8006d98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d86:	4b13      	ldr	r3, [pc, #76]	; (8006dd4 <prvProcessTimerOrBlockTask+0x90>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d101      	bne.n	8006d94 <prvProcessTimerOrBlockTask+0x50>
 8006d90:	2301      	movs	r3, #1
 8006d92:	e000      	b.n	8006d96 <prvProcessTimerOrBlockTask+0x52>
 8006d94:	2300      	movs	r3, #0
 8006d96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d98:	4b0f      	ldr	r3, [pc, #60]	; (8006dd8 <prvProcessTimerOrBlockTask+0x94>)
 8006d9a:	6818      	ldr	r0, [r3, #0]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	683a      	ldr	r2, [r7, #0]
 8006da4:	4619      	mov	r1, r3
 8006da6:	f7fe ffa7 	bl	8005cf8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006daa:	f7ff fa23 	bl	80061f4 <xTaskResumeAll>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10a      	bne.n	8006dca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006db4:	4b09      	ldr	r3, [pc, #36]	; (8006ddc <prvProcessTimerOrBlockTask+0x98>)
 8006db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dba:	601a      	str	r2, [r3, #0]
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	f3bf 8f6f 	isb	sy
}
 8006dc4:	e001      	b.n	8006dca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006dc6:	f7ff fa15 	bl	80061f4 <xTaskResumeAll>
}
 8006dca:	bf00      	nop
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	20000f10 	.word	0x20000f10
 8006dd8:	20000f14 	.word	0x20000f14
 8006ddc:	e000ed04 	.word	0xe000ed04

08006de0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006de8:	4b0e      	ldr	r3, [pc, #56]	; (8006e24 <prvGetNextExpireTime+0x44>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <prvGetNextExpireTime+0x16>
 8006df2:	2201      	movs	r2, #1
 8006df4:	e000      	b.n	8006df8 <prvGetNextExpireTime+0x18>
 8006df6:	2200      	movs	r2, #0
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d105      	bne.n	8006e10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e04:	4b07      	ldr	r3, [pc, #28]	; (8006e24 <prvGetNextExpireTime+0x44>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	60fb      	str	r3, [r7, #12]
 8006e0e:	e001      	b.n	8006e14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006e10:	2300      	movs	r3, #0
 8006e12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006e14:	68fb      	ldr	r3, [r7, #12]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3714      	adds	r7, #20
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	20000f0c 	.word	0x20000f0c

08006e28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006e30:	f7ff fa7e 	bl	8006330 <xTaskGetTickCount>
 8006e34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006e36:	4b0b      	ldr	r3, [pc, #44]	; (8006e64 <prvSampleTimeNow+0x3c>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d205      	bcs.n	8006e4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006e40:	f000 f936 	bl	80070b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	601a      	str	r2, [r3, #0]
 8006e4a:	e002      	b.n	8006e52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006e52:	4a04      	ldr	r2, [pc, #16]	; (8006e64 <prvSampleTimeNow+0x3c>)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006e58:	68fb      	ldr	r3, [r7, #12]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	20000f1c 	.word	0x20000f1c

08006e68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	607a      	str	r2, [r7, #4]
 8006e74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006e76:	2300      	movs	r3, #0
 8006e78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d812      	bhi.n	8006eb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	1ad2      	subs	r2, r2, r3
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d302      	bcc.n	8006ea2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	617b      	str	r3, [r7, #20]
 8006ea0:	e01b      	b.n	8006eda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006ea2:	4b10      	ldr	r3, [pc, #64]	; (8006ee4 <prvInsertTimerInActiveList+0x7c>)
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	3304      	adds	r3, #4
 8006eaa:	4619      	mov	r1, r3
 8006eac:	4610      	mov	r0, r2
 8006eae:	f7fe fa08 	bl	80052c2 <vListInsert>
 8006eb2:	e012      	b.n	8006eda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d206      	bcs.n	8006eca <prvInsertTimerInActiveList+0x62>
 8006ebc:	68ba      	ldr	r2, [r7, #8]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d302      	bcc.n	8006eca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	617b      	str	r3, [r7, #20]
 8006ec8:	e007      	b.n	8006eda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006eca:	4b07      	ldr	r3, [pc, #28]	; (8006ee8 <prvInsertTimerInActiveList+0x80>)
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	3304      	adds	r3, #4
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	4610      	mov	r0, r2
 8006ed6:	f7fe f9f4 	bl	80052c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006eda:	697b      	ldr	r3, [r7, #20]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3718      	adds	r7, #24
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	20000f10 	.word	0x20000f10
 8006ee8:	20000f0c 	.word	0x20000f0c

08006eec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b08e      	sub	sp, #56	; 0x38
 8006ef0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ef2:	e0ca      	b.n	800708a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	da18      	bge.n	8006f2c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006efa:	1d3b      	adds	r3, r7, #4
 8006efc:	3304      	adds	r3, #4
 8006efe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10a      	bne.n	8006f1c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0a:	f383 8811 	msr	BASEPRI, r3
 8006f0e:	f3bf 8f6f 	isb	sy
 8006f12:	f3bf 8f4f 	dsb	sy
 8006f16:	61fb      	str	r3, [r7, #28]
}
 8006f18:	bf00      	nop
 8006f1a:	e7fe      	b.n	8006f1a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f22:	6850      	ldr	r0, [r2, #4]
 8006f24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f26:	6892      	ldr	r2, [r2, #8]
 8006f28:	4611      	mov	r1, r2
 8006f2a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f2c0 80aa 	blt.w	8007088 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3a:	695b      	ldr	r3, [r3, #20]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d004      	beq.n	8006f4a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f42:	3304      	adds	r3, #4
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7fe f9f5 	bl	8005334 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f4a:	463b      	mov	r3, r7
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7ff ff6b 	bl	8006e28 <prvSampleTimeNow>
 8006f52:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b09      	cmp	r3, #9
 8006f58:	f200 8097 	bhi.w	800708a <prvProcessReceivedCommands+0x19e>
 8006f5c:	a201      	add	r2, pc, #4	; (adr r2, 8006f64 <prvProcessReceivedCommands+0x78>)
 8006f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f62:	bf00      	nop
 8006f64:	08006f8d 	.word	0x08006f8d
 8006f68:	08006f8d 	.word	0x08006f8d
 8006f6c:	08006f8d 	.word	0x08006f8d
 8006f70:	08007001 	.word	0x08007001
 8006f74:	08007015 	.word	0x08007015
 8006f78:	0800705f 	.word	0x0800705f
 8006f7c:	08006f8d 	.word	0x08006f8d
 8006f80:	08006f8d 	.word	0x08006f8d
 8006f84:	08007001 	.word	0x08007001
 8006f88:	08007015 	.word	0x08007015
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f92:	f043 0301 	orr.w	r3, r3, #1
 8006f96:	b2da      	uxtb	r2, r3
 8006f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006f9e:	68ba      	ldr	r2, [r7, #8]
 8006fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	18d1      	adds	r1, r2, r3
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006faa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fac:	f7ff ff5c 	bl	8006e68 <prvInsertTimerInActiveList>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d069      	beq.n	800708a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fbc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fc4:	f003 0304 	and.w	r3, r3, #4
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d05e      	beq.n	800708a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd0:	699b      	ldr	r3, [r3, #24]
 8006fd2:	441a      	add	r2, r3
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	9300      	str	r3, [sp, #0]
 8006fd8:	2300      	movs	r3, #0
 8006fda:	2100      	movs	r1, #0
 8006fdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fde:	f7ff fe05 	bl	8006bec <xTimerGenericCommand>
 8006fe2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006fe4:	6a3b      	ldr	r3, [r7, #32]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d14f      	bne.n	800708a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fee:	f383 8811 	msr	BASEPRI, r3
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	f3bf 8f4f 	dsb	sy
 8006ffa:	61bb      	str	r3, [r7, #24]
}
 8006ffc:	bf00      	nop
 8006ffe:	e7fe      	b.n	8006ffe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007002:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007006:	f023 0301 	bic.w	r3, r3, #1
 800700a:	b2da      	uxtb	r2, r3
 800700c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007012:	e03a      	b.n	800708a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007016:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800701a:	f043 0301 	orr.w	r3, r3, #1
 800701e:	b2da      	uxtb	r2, r3
 8007020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007022:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007026:	68ba      	ldr	r2, [r7, #8]
 8007028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800702c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702e:	699b      	ldr	r3, [r3, #24]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d10a      	bne.n	800704a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007038:	f383 8811 	msr	BASEPRI, r3
 800703c:	f3bf 8f6f 	isb	sy
 8007040:	f3bf 8f4f 	dsb	sy
 8007044:	617b      	str	r3, [r7, #20]
}
 8007046:	bf00      	nop
 8007048:	e7fe      	b.n	8007048 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800704a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704c:	699a      	ldr	r2, [r3, #24]
 800704e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007050:	18d1      	adds	r1, r2, r3
 8007052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007056:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007058:	f7ff ff06 	bl	8006e68 <prvInsertTimerInActiveList>
					break;
 800705c:	e015      	b.n	800708a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800705e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007060:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007064:	f003 0302 	and.w	r3, r3, #2
 8007068:	2b00      	cmp	r3, #0
 800706a:	d103      	bne.n	8007074 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800706c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800706e:	f000 fbdf 	bl	8007830 <vPortFree>
 8007072:	e00a      	b.n	800708a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007076:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800707a:	f023 0301 	bic.w	r3, r3, #1
 800707e:	b2da      	uxtb	r2, r3
 8007080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007082:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007086:	e000      	b.n	800708a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007088:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800708a:	4b08      	ldr	r3, [pc, #32]	; (80070ac <prvProcessReceivedCommands+0x1c0>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	1d39      	adds	r1, r7, #4
 8007090:	2200      	movs	r2, #0
 8007092:	4618      	mov	r0, r3
 8007094:	f7fe fc16 	bl	80058c4 <xQueueReceive>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	f47f af2a 	bne.w	8006ef4 <prvProcessReceivedCommands+0x8>
	}
}
 80070a0:	bf00      	nop
 80070a2:	bf00      	nop
 80070a4:	3730      	adds	r7, #48	; 0x30
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	20000f14 	.word	0x20000f14

080070b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b088      	sub	sp, #32
 80070b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80070b6:	e048      	b.n	800714a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80070b8:	4b2d      	ldr	r3, [pc, #180]	; (8007170 <prvSwitchTimerLists+0xc0>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070c2:	4b2b      	ldr	r3, [pc, #172]	; (8007170 <prvSwitchTimerLists+0xc0>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	3304      	adds	r3, #4
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7fe f92f 	bl	8005334 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070e4:	f003 0304 	and.w	r3, r3, #4
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d02e      	beq.n	800714a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	699b      	ldr	r3, [r3, #24]
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	4413      	add	r3, r2
 80070f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d90e      	bls.n	800711c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800710a:	4b19      	ldr	r3, [pc, #100]	; (8007170 <prvSwitchTimerLists+0xc0>)
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	3304      	adds	r3, #4
 8007112:	4619      	mov	r1, r3
 8007114:	4610      	mov	r0, r2
 8007116:	f7fe f8d4 	bl	80052c2 <vListInsert>
 800711a:	e016      	b.n	800714a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800711c:	2300      	movs	r3, #0
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	2300      	movs	r3, #0
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	2100      	movs	r1, #0
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f7ff fd60 	bl	8006bec <xTimerGenericCommand>
 800712c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10a      	bne.n	800714a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007138:	f383 8811 	msr	BASEPRI, r3
 800713c:	f3bf 8f6f 	isb	sy
 8007140:	f3bf 8f4f 	dsb	sy
 8007144:	603b      	str	r3, [r7, #0]
}
 8007146:	bf00      	nop
 8007148:	e7fe      	b.n	8007148 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800714a:	4b09      	ldr	r3, [pc, #36]	; (8007170 <prvSwitchTimerLists+0xc0>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1b1      	bne.n	80070b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007154:	4b06      	ldr	r3, [pc, #24]	; (8007170 <prvSwitchTimerLists+0xc0>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800715a:	4b06      	ldr	r3, [pc, #24]	; (8007174 <prvSwitchTimerLists+0xc4>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a04      	ldr	r2, [pc, #16]	; (8007170 <prvSwitchTimerLists+0xc0>)
 8007160:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007162:	4a04      	ldr	r2, [pc, #16]	; (8007174 <prvSwitchTimerLists+0xc4>)
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	6013      	str	r3, [r2, #0]
}
 8007168:	bf00      	nop
 800716a:	3718      	adds	r7, #24
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	20000f0c 	.word	0x20000f0c
 8007174:	20000f10 	.word	0x20000f10

08007178 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800717e:	f000 f969 	bl	8007454 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007182:	4b15      	ldr	r3, [pc, #84]	; (80071d8 <prvCheckForValidListAndQueue+0x60>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d120      	bne.n	80071cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800718a:	4814      	ldr	r0, [pc, #80]	; (80071dc <prvCheckForValidListAndQueue+0x64>)
 800718c:	f7fe f848 	bl	8005220 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007190:	4813      	ldr	r0, [pc, #76]	; (80071e0 <prvCheckForValidListAndQueue+0x68>)
 8007192:	f7fe f845 	bl	8005220 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007196:	4b13      	ldr	r3, [pc, #76]	; (80071e4 <prvCheckForValidListAndQueue+0x6c>)
 8007198:	4a10      	ldr	r2, [pc, #64]	; (80071dc <prvCheckForValidListAndQueue+0x64>)
 800719a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800719c:	4b12      	ldr	r3, [pc, #72]	; (80071e8 <prvCheckForValidListAndQueue+0x70>)
 800719e:	4a10      	ldr	r2, [pc, #64]	; (80071e0 <prvCheckForValidListAndQueue+0x68>)
 80071a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80071a2:	2300      	movs	r3, #0
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	4b11      	ldr	r3, [pc, #68]	; (80071ec <prvCheckForValidListAndQueue+0x74>)
 80071a8:	4a11      	ldr	r2, [pc, #68]	; (80071f0 <prvCheckForValidListAndQueue+0x78>)
 80071aa:	2110      	movs	r1, #16
 80071ac:	200a      	movs	r0, #10
 80071ae:	f7fe f953 	bl	8005458 <xQueueGenericCreateStatic>
 80071b2:	4603      	mov	r3, r0
 80071b4:	4a08      	ldr	r2, [pc, #32]	; (80071d8 <prvCheckForValidListAndQueue+0x60>)
 80071b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80071b8:	4b07      	ldr	r3, [pc, #28]	; (80071d8 <prvCheckForValidListAndQueue+0x60>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d005      	beq.n	80071cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80071c0:	4b05      	ldr	r3, [pc, #20]	; (80071d8 <prvCheckForValidListAndQueue+0x60>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	490b      	ldr	r1, [pc, #44]	; (80071f4 <prvCheckForValidListAndQueue+0x7c>)
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fe fd6c 	bl	8005ca4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80071cc:	f000 f972 	bl	80074b4 <vPortExitCritical>
}
 80071d0:	bf00      	nop
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	20000f14 	.word	0x20000f14
 80071dc:	20000ee4 	.word	0x20000ee4
 80071e0:	20000ef8 	.word	0x20000ef8
 80071e4:	20000f0c 	.word	0x20000f0c
 80071e8:	20000f10 	.word	0x20000f10
 80071ec:	20000fc0 	.word	0x20000fc0
 80071f0:	20000f20 	.word	0x20000f20
 80071f4:	0800cca8 	.word	0x0800cca8

080071f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	3b04      	subs	r3, #4
 8007208:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007210:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	3b04      	subs	r3, #4
 8007216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	f023 0201 	bic.w	r2, r3, #1
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	3b04      	subs	r3, #4
 8007226:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007228:	4a0c      	ldr	r2, [pc, #48]	; (800725c <pxPortInitialiseStack+0x64>)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	3b14      	subs	r3, #20
 8007232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	3b04      	subs	r3, #4
 800723e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f06f 0202 	mvn.w	r2, #2
 8007246:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	3b20      	subs	r3, #32
 800724c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800724e:	68fb      	ldr	r3, [r7, #12]
}
 8007250:	4618      	mov	r0, r3
 8007252:	3714      	adds	r7, #20
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr
 800725c:	08007261 	.word	0x08007261

08007260 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007266:	2300      	movs	r3, #0
 8007268:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800726a:	4b12      	ldr	r3, [pc, #72]	; (80072b4 <prvTaskExitError+0x54>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007272:	d00a      	beq.n	800728a <prvTaskExitError+0x2a>
	__asm volatile
 8007274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007278:	f383 8811 	msr	BASEPRI, r3
 800727c:	f3bf 8f6f 	isb	sy
 8007280:	f3bf 8f4f 	dsb	sy
 8007284:	60fb      	str	r3, [r7, #12]
}
 8007286:	bf00      	nop
 8007288:	e7fe      	b.n	8007288 <prvTaskExitError+0x28>
	__asm volatile
 800728a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728e:	f383 8811 	msr	BASEPRI, r3
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	f3bf 8f4f 	dsb	sy
 800729a:	60bb      	str	r3, [r7, #8]
}
 800729c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800729e:	bf00      	nop
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d0fc      	beq.n	80072a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80072a6:	bf00      	nop
 80072a8:	bf00      	nop
 80072aa:	3714      	adds	r7, #20
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr
 80072b4:	20000024 	.word	0x20000024
	...

080072c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80072c0:	4b07      	ldr	r3, [pc, #28]	; (80072e0 <pxCurrentTCBConst2>)
 80072c2:	6819      	ldr	r1, [r3, #0]
 80072c4:	6808      	ldr	r0, [r1, #0]
 80072c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ca:	f380 8809 	msr	PSP, r0
 80072ce:	f3bf 8f6f 	isb	sy
 80072d2:	f04f 0000 	mov.w	r0, #0
 80072d6:	f380 8811 	msr	BASEPRI, r0
 80072da:	4770      	bx	lr
 80072dc:	f3af 8000 	nop.w

080072e0 <pxCurrentTCBConst2>:
 80072e0:	200009e4 	.word	0x200009e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80072e4:	bf00      	nop
 80072e6:	bf00      	nop

080072e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80072e8:	4808      	ldr	r0, [pc, #32]	; (800730c <prvPortStartFirstTask+0x24>)
 80072ea:	6800      	ldr	r0, [r0, #0]
 80072ec:	6800      	ldr	r0, [r0, #0]
 80072ee:	f380 8808 	msr	MSP, r0
 80072f2:	f04f 0000 	mov.w	r0, #0
 80072f6:	f380 8814 	msr	CONTROL, r0
 80072fa:	b662      	cpsie	i
 80072fc:	b661      	cpsie	f
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	f3bf 8f6f 	isb	sy
 8007306:	df00      	svc	0
 8007308:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800730a:	bf00      	nop
 800730c:	e000ed08 	.word	0xe000ed08

08007310 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007316:	4b46      	ldr	r3, [pc, #280]	; (8007430 <xPortStartScheduler+0x120>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a46      	ldr	r2, [pc, #280]	; (8007434 <xPortStartScheduler+0x124>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d10a      	bne.n	8007336 <xPortStartScheduler+0x26>
	__asm volatile
 8007320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	613b      	str	r3, [r7, #16]
}
 8007332:	bf00      	nop
 8007334:	e7fe      	b.n	8007334 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007336:	4b3e      	ldr	r3, [pc, #248]	; (8007430 <xPortStartScheduler+0x120>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a3f      	ldr	r2, [pc, #252]	; (8007438 <xPortStartScheduler+0x128>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d10a      	bne.n	8007356 <xPortStartScheduler+0x46>
	__asm volatile
 8007340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007344:	f383 8811 	msr	BASEPRI, r3
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	60fb      	str	r3, [r7, #12]
}
 8007352:	bf00      	nop
 8007354:	e7fe      	b.n	8007354 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007356:	4b39      	ldr	r3, [pc, #228]	; (800743c <xPortStartScheduler+0x12c>)
 8007358:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	b2db      	uxtb	r3, r3
 8007360:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	22ff      	movs	r2, #255	; 0xff
 8007366:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	b2db      	uxtb	r3, r3
 800736e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007370:	78fb      	ldrb	r3, [r7, #3]
 8007372:	b2db      	uxtb	r3, r3
 8007374:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007378:	b2da      	uxtb	r2, r3
 800737a:	4b31      	ldr	r3, [pc, #196]	; (8007440 <xPortStartScheduler+0x130>)
 800737c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800737e:	4b31      	ldr	r3, [pc, #196]	; (8007444 <xPortStartScheduler+0x134>)
 8007380:	2207      	movs	r2, #7
 8007382:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007384:	e009      	b.n	800739a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007386:	4b2f      	ldr	r3, [pc, #188]	; (8007444 <xPortStartScheduler+0x134>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	3b01      	subs	r3, #1
 800738c:	4a2d      	ldr	r2, [pc, #180]	; (8007444 <xPortStartScheduler+0x134>)
 800738e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007390:	78fb      	ldrb	r3, [r7, #3]
 8007392:	b2db      	uxtb	r3, r3
 8007394:	005b      	lsls	r3, r3, #1
 8007396:	b2db      	uxtb	r3, r3
 8007398:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800739a:	78fb      	ldrb	r3, [r7, #3]
 800739c:	b2db      	uxtb	r3, r3
 800739e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073a2:	2b80      	cmp	r3, #128	; 0x80
 80073a4:	d0ef      	beq.n	8007386 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80073a6:	4b27      	ldr	r3, [pc, #156]	; (8007444 <xPortStartScheduler+0x134>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f1c3 0307 	rsb	r3, r3, #7
 80073ae:	2b04      	cmp	r3, #4
 80073b0:	d00a      	beq.n	80073c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80073b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	60bb      	str	r3, [r7, #8]
}
 80073c4:	bf00      	nop
 80073c6:	e7fe      	b.n	80073c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80073c8:	4b1e      	ldr	r3, [pc, #120]	; (8007444 <xPortStartScheduler+0x134>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	021b      	lsls	r3, r3, #8
 80073ce:	4a1d      	ldr	r2, [pc, #116]	; (8007444 <xPortStartScheduler+0x134>)
 80073d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80073d2:	4b1c      	ldr	r3, [pc, #112]	; (8007444 <xPortStartScheduler+0x134>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80073da:	4a1a      	ldr	r2, [pc, #104]	; (8007444 <xPortStartScheduler+0x134>)
 80073dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80073e6:	4b18      	ldr	r3, [pc, #96]	; (8007448 <xPortStartScheduler+0x138>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a17      	ldr	r2, [pc, #92]	; (8007448 <xPortStartScheduler+0x138>)
 80073ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80073f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80073f2:	4b15      	ldr	r3, [pc, #84]	; (8007448 <xPortStartScheduler+0x138>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a14      	ldr	r2, [pc, #80]	; (8007448 <xPortStartScheduler+0x138>)
 80073f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80073fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80073fe:	f000 f8dd 	bl	80075bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007402:	4b12      	ldr	r3, [pc, #72]	; (800744c <xPortStartScheduler+0x13c>)
 8007404:	2200      	movs	r2, #0
 8007406:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007408:	f000 f8fc 	bl	8007604 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800740c:	4b10      	ldr	r3, [pc, #64]	; (8007450 <xPortStartScheduler+0x140>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a0f      	ldr	r2, [pc, #60]	; (8007450 <xPortStartScheduler+0x140>)
 8007412:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007416:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007418:	f7ff ff66 	bl	80072e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800741c:	f7ff f852 	bl	80064c4 <vTaskSwitchContext>
	prvTaskExitError();
 8007420:	f7ff ff1e 	bl	8007260 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	3718      	adds	r7, #24
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	e000ed00 	.word	0xe000ed00
 8007434:	410fc271 	.word	0x410fc271
 8007438:	410fc270 	.word	0x410fc270
 800743c:	e000e400 	.word	0xe000e400
 8007440:	20001010 	.word	0x20001010
 8007444:	20001014 	.word	0x20001014
 8007448:	e000ed20 	.word	0xe000ed20
 800744c:	20000024 	.word	0x20000024
 8007450:	e000ef34 	.word	0xe000ef34

08007454 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
	__asm volatile
 800745a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745e:	f383 8811 	msr	BASEPRI, r3
 8007462:	f3bf 8f6f 	isb	sy
 8007466:	f3bf 8f4f 	dsb	sy
 800746a:	607b      	str	r3, [r7, #4]
}
 800746c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800746e:	4b0f      	ldr	r3, [pc, #60]	; (80074ac <vPortEnterCritical+0x58>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	3301      	adds	r3, #1
 8007474:	4a0d      	ldr	r2, [pc, #52]	; (80074ac <vPortEnterCritical+0x58>)
 8007476:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007478:	4b0c      	ldr	r3, [pc, #48]	; (80074ac <vPortEnterCritical+0x58>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d10f      	bne.n	80074a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007480:	4b0b      	ldr	r3, [pc, #44]	; (80074b0 <vPortEnterCritical+0x5c>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00a      	beq.n	80074a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800748a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748e:	f383 8811 	msr	BASEPRI, r3
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	603b      	str	r3, [r7, #0]
}
 800749c:	bf00      	nop
 800749e:	e7fe      	b.n	800749e <vPortEnterCritical+0x4a>
	}
}
 80074a0:	bf00      	nop
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr
 80074ac:	20000024 	.word	0x20000024
 80074b0:	e000ed04 	.word	0xe000ed04

080074b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80074ba:	4b12      	ldr	r3, [pc, #72]	; (8007504 <vPortExitCritical+0x50>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10a      	bne.n	80074d8 <vPortExitCritical+0x24>
	__asm volatile
 80074c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c6:	f383 8811 	msr	BASEPRI, r3
 80074ca:	f3bf 8f6f 	isb	sy
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	607b      	str	r3, [r7, #4]
}
 80074d4:	bf00      	nop
 80074d6:	e7fe      	b.n	80074d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80074d8:	4b0a      	ldr	r3, [pc, #40]	; (8007504 <vPortExitCritical+0x50>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	3b01      	subs	r3, #1
 80074de:	4a09      	ldr	r2, [pc, #36]	; (8007504 <vPortExitCritical+0x50>)
 80074e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80074e2:	4b08      	ldr	r3, [pc, #32]	; (8007504 <vPortExitCritical+0x50>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d105      	bne.n	80074f6 <vPortExitCritical+0x42>
 80074ea:	2300      	movs	r3, #0
 80074ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	f383 8811 	msr	BASEPRI, r3
}
 80074f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80074f6:	bf00      	nop
 80074f8:	370c      	adds	r7, #12
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	20000024 	.word	0x20000024
	...

08007510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007510:	f3ef 8009 	mrs	r0, PSP
 8007514:	f3bf 8f6f 	isb	sy
 8007518:	4b15      	ldr	r3, [pc, #84]	; (8007570 <pxCurrentTCBConst>)
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	f01e 0f10 	tst.w	lr, #16
 8007520:	bf08      	it	eq
 8007522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800752a:	6010      	str	r0, [r2, #0]
 800752c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007530:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007534:	f380 8811 	msr	BASEPRI, r0
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	f7fe ffc0 	bl	80064c4 <vTaskSwitchContext>
 8007544:	f04f 0000 	mov.w	r0, #0
 8007548:	f380 8811 	msr	BASEPRI, r0
 800754c:	bc09      	pop	{r0, r3}
 800754e:	6819      	ldr	r1, [r3, #0]
 8007550:	6808      	ldr	r0, [r1, #0]
 8007552:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007556:	f01e 0f10 	tst.w	lr, #16
 800755a:	bf08      	it	eq
 800755c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007560:	f380 8809 	msr	PSP, r0
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	f3af 8000 	nop.w

08007570 <pxCurrentTCBConst>:
 8007570:	200009e4 	.word	0x200009e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007574:	bf00      	nop
 8007576:	bf00      	nop

08007578 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
	__asm volatile
 800757e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	607b      	str	r3, [r7, #4]
}
 8007590:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007592:	f7fe fedd 	bl	8006350 <xTaskIncrementTick>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d003      	beq.n	80075a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800759c:	4b06      	ldr	r3, [pc, #24]	; (80075b8 <xPortSysTickHandler+0x40>)
 800759e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075a2:	601a      	str	r2, [r3, #0]
 80075a4:	2300      	movs	r3, #0
 80075a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	f383 8811 	msr	BASEPRI, r3
}
 80075ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80075b0:	bf00      	nop
 80075b2:	3708      	adds	r7, #8
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	e000ed04 	.word	0xe000ed04

080075bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80075bc:	b480      	push	{r7}
 80075be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80075c0:	4b0b      	ldr	r3, [pc, #44]	; (80075f0 <vPortSetupTimerInterrupt+0x34>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80075c6:	4b0b      	ldr	r3, [pc, #44]	; (80075f4 <vPortSetupTimerInterrupt+0x38>)
 80075c8:	2200      	movs	r2, #0
 80075ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80075cc:	4b0a      	ldr	r3, [pc, #40]	; (80075f8 <vPortSetupTimerInterrupt+0x3c>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a0a      	ldr	r2, [pc, #40]	; (80075fc <vPortSetupTimerInterrupt+0x40>)
 80075d2:	fba2 2303 	umull	r2, r3, r2, r3
 80075d6:	099b      	lsrs	r3, r3, #6
 80075d8:	4a09      	ldr	r2, [pc, #36]	; (8007600 <vPortSetupTimerInterrupt+0x44>)
 80075da:	3b01      	subs	r3, #1
 80075dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80075de:	4b04      	ldr	r3, [pc, #16]	; (80075f0 <vPortSetupTimerInterrupt+0x34>)
 80075e0:	2207      	movs	r2, #7
 80075e2:	601a      	str	r2, [r3, #0]
}
 80075e4:	bf00      	nop
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	e000e010 	.word	0xe000e010
 80075f4:	e000e018 	.word	0xe000e018
 80075f8:	20000018 	.word	0x20000018
 80075fc:	10624dd3 	.word	0x10624dd3
 8007600:	e000e014 	.word	0xe000e014

08007604 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007604:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007614 <vPortEnableVFP+0x10>
 8007608:	6801      	ldr	r1, [r0, #0]
 800760a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800760e:	6001      	str	r1, [r0, #0]
 8007610:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007612:	bf00      	nop
 8007614:	e000ed88 	.word	0xe000ed88

08007618 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800761e:	f3ef 8305 	mrs	r3, IPSR
 8007622:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2b0f      	cmp	r3, #15
 8007628:	d914      	bls.n	8007654 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800762a:	4a17      	ldr	r2, [pc, #92]	; (8007688 <vPortValidateInterruptPriority+0x70>)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	4413      	add	r3, r2
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007634:	4b15      	ldr	r3, [pc, #84]	; (800768c <vPortValidateInterruptPriority+0x74>)
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	7afa      	ldrb	r2, [r7, #11]
 800763a:	429a      	cmp	r2, r3
 800763c:	d20a      	bcs.n	8007654 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800763e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007642:	f383 8811 	msr	BASEPRI, r3
 8007646:	f3bf 8f6f 	isb	sy
 800764a:	f3bf 8f4f 	dsb	sy
 800764e:	607b      	str	r3, [r7, #4]
}
 8007650:	bf00      	nop
 8007652:	e7fe      	b.n	8007652 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007654:	4b0e      	ldr	r3, [pc, #56]	; (8007690 <vPortValidateInterruptPriority+0x78>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800765c:	4b0d      	ldr	r3, [pc, #52]	; (8007694 <vPortValidateInterruptPriority+0x7c>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	429a      	cmp	r2, r3
 8007662:	d90a      	bls.n	800767a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007668:	f383 8811 	msr	BASEPRI, r3
 800766c:	f3bf 8f6f 	isb	sy
 8007670:	f3bf 8f4f 	dsb	sy
 8007674:	603b      	str	r3, [r7, #0]
}
 8007676:	bf00      	nop
 8007678:	e7fe      	b.n	8007678 <vPortValidateInterruptPriority+0x60>
	}
 800767a:	bf00      	nop
 800767c:	3714      	adds	r7, #20
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	e000e3f0 	.word	0xe000e3f0
 800768c:	20001010 	.word	0x20001010
 8007690:	e000ed0c 	.word	0xe000ed0c
 8007694:	20001014 	.word	0x20001014

08007698 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b08a      	sub	sp, #40	; 0x28
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80076a0:	2300      	movs	r3, #0
 80076a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80076a4:	f7fe fd98 	bl	80061d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80076a8:	4b5b      	ldr	r3, [pc, #364]	; (8007818 <pvPortMalloc+0x180>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d101      	bne.n	80076b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80076b0:	f000 f920 	bl	80078f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80076b4:	4b59      	ldr	r3, [pc, #356]	; (800781c <pvPortMalloc+0x184>)
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4013      	ands	r3, r2
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f040 8093 	bne.w	80077e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d01d      	beq.n	8007704 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80076c8:	2208      	movs	r2, #8
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4413      	add	r3, r2
 80076ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f003 0307 	and.w	r3, r3, #7
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d014      	beq.n	8007704 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f023 0307 	bic.w	r3, r3, #7
 80076e0:	3308      	adds	r3, #8
 80076e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f003 0307 	and.w	r3, r3, #7
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00a      	beq.n	8007704 <pvPortMalloc+0x6c>
	__asm volatile
 80076ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f2:	f383 8811 	msr	BASEPRI, r3
 80076f6:	f3bf 8f6f 	isb	sy
 80076fa:	f3bf 8f4f 	dsb	sy
 80076fe:	617b      	str	r3, [r7, #20]
}
 8007700:	bf00      	nop
 8007702:	e7fe      	b.n	8007702 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d06e      	beq.n	80077e8 <pvPortMalloc+0x150>
 800770a:	4b45      	ldr	r3, [pc, #276]	; (8007820 <pvPortMalloc+0x188>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	429a      	cmp	r2, r3
 8007712:	d869      	bhi.n	80077e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007714:	4b43      	ldr	r3, [pc, #268]	; (8007824 <pvPortMalloc+0x18c>)
 8007716:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007718:	4b42      	ldr	r3, [pc, #264]	; (8007824 <pvPortMalloc+0x18c>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800771e:	e004      	b.n	800772a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007722:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800772a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	429a      	cmp	r2, r3
 8007732:	d903      	bls.n	800773c <pvPortMalloc+0xa4>
 8007734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1f1      	bne.n	8007720 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800773c:	4b36      	ldr	r3, [pc, #216]	; (8007818 <pvPortMalloc+0x180>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007742:	429a      	cmp	r2, r3
 8007744:	d050      	beq.n	80077e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007746:	6a3b      	ldr	r3, [r7, #32]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2208      	movs	r2, #8
 800774c:	4413      	add	r3, r2
 800774e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	6a3b      	ldr	r3, [r7, #32]
 8007756:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	1ad2      	subs	r2, r2, r3
 8007760:	2308      	movs	r3, #8
 8007762:	005b      	lsls	r3, r3, #1
 8007764:	429a      	cmp	r2, r3
 8007766:	d91f      	bls.n	80077a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4413      	add	r3, r2
 800776e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	f003 0307 	and.w	r3, r3, #7
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00a      	beq.n	8007790 <pvPortMalloc+0xf8>
	__asm volatile
 800777a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777e:	f383 8811 	msr	BASEPRI, r3
 8007782:	f3bf 8f6f 	isb	sy
 8007786:	f3bf 8f4f 	dsb	sy
 800778a:	613b      	str	r3, [r7, #16]
}
 800778c:	bf00      	nop
 800778e:	e7fe      	b.n	800778e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007792:	685a      	ldr	r2, [r3, #4]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	1ad2      	subs	r2, r2, r3
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800779c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80077a2:	69b8      	ldr	r0, [r7, #24]
 80077a4:	f000 f908 	bl	80079b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80077a8:	4b1d      	ldr	r3, [pc, #116]	; (8007820 <pvPortMalloc+0x188>)
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	4a1b      	ldr	r2, [pc, #108]	; (8007820 <pvPortMalloc+0x188>)
 80077b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80077b6:	4b1a      	ldr	r3, [pc, #104]	; (8007820 <pvPortMalloc+0x188>)
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	4b1b      	ldr	r3, [pc, #108]	; (8007828 <pvPortMalloc+0x190>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d203      	bcs.n	80077ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80077c2:	4b17      	ldr	r3, [pc, #92]	; (8007820 <pvPortMalloc+0x188>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a18      	ldr	r2, [pc, #96]	; (8007828 <pvPortMalloc+0x190>)
 80077c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80077ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077cc:	685a      	ldr	r2, [r3, #4]
 80077ce:	4b13      	ldr	r3, [pc, #76]	; (800781c <pvPortMalloc+0x184>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	431a      	orrs	r2, r3
 80077d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	2200      	movs	r2, #0
 80077dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80077de:	4b13      	ldr	r3, [pc, #76]	; (800782c <pvPortMalloc+0x194>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	3301      	adds	r3, #1
 80077e4:	4a11      	ldr	r2, [pc, #68]	; (800782c <pvPortMalloc+0x194>)
 80077e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80077e8:	f7fe fd04 	bl	80061f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	f003 0307 	and.w	r3, r3, #7
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00a      	beq.n	800780c <pvPortMalloc+0x174>
	__asm volatile
 80077f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fa:	f383 8811 	msr	BASEPRI, r3
 80077fe:	f3bf 8f6f 	isb	sy
 8007802:	f3bf 8f4f 	dsb	sy
 8007806:	60fb      	str	r3, [r7, #12]
}
 8007808:	bf00      	nop
 800780a:	e7fe      	b.n	800780a <pvPortMalloc+0x172>
	return pvReturn;
 800780c:	69fb      	ldr	r3, [r7, #28]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3728      	adds	r7, #40	; 0x28
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	20004c20 	.word	0x20004c20
 800781c:	20004c34 	.word	0x20004c34
 8007820:	20004c24 	.word	0x20004c24
 8007824:	20004c18 	.word	0x20004c18
 8007828:	20004c28 	.word	0x20004c28
 800782c:	20004c2c 	.word	0x20004c2c

08007830 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d04d      	beq.n	80078de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007842:	2308      	movs	r3, #8
 8007844:	425b      	negs	r3, r3
 8007846:	697a      	ldr	r2, [r7, #20]
 8007848:	4413      	add	r3, r2
 800784a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	685a      	ldr	r2, [r3, #4]
 8007854:	4b24      	ldr	r3, [pc, #144]	; (80078e8 <vPortFree+0xb8>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4013      	ands	r3, r2
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10a      	bne.n	8007874 <vPortFree+0x44>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	60fb      	str	r3, [r7, #12]
}
 8007870:	bf00      	nop
 8007872:	e7fe      	b.n	8007872 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00a      	beq.n	8007892 <vPortFree+0x62>
	__asm volatile
 800787c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007880:	f383 8811 	msr	BASEPRI, r3
 8007884:	f3bf 8f6f 	isb	sy
 8007888:	f3bf 8f4f 	dsb	sy
 800788c:	60bb      	str	r3, [r7, #8]
}
 800788e:	bf00      	nop
 8007890:	e7fe      	b.n	8007890 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	685a      	ldr	r2, [r3, #4]
 8007896:	4b14      	ldr	r3, [pc, #80]	; (80078e8 <vPortFree+0xb8>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4013      	ands	r3, r2
 800789c:	2b00      	cmp	r3, #0
 800789e:	d01e      	beq.n	80078de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d11a      	bne.n	80078de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	685a      	ldr	r2, [r3, #4]
 80078ac:	4b0e      	ldr	r3, [pc, #56]	; (80078e8 <vPortFree+0xb8>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	43db      	mvns	r3, r3
 80078b2:	401a      	ands	r2, r3
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80078b8:	f7fe fc8e 	bl	80061d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	685a      	ldr	r2, [r3, #4]
 80078c0:	4b0a      	ldr	r3, [pc, #40]	; (80078ec <vPortFree+0xbc>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4413      	add	r3, r2
 80078c6:	4a09      	ldr	r2, [pc, #36]	; (80078ec <vPortFree+0xbc>)
 80078c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80078ca:	6938      	ldr	r0, [r7, #16]
 80078cc:	f000 f874 	bl	80079b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80078d0:	4b07      	ldr	r3, [pc, #28]	; (80078f0 <vPortFree+0xc0>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	3301      	adds	r3, #1
 80078d6:	4a06      	ldr	r2, [pc, #24]	; (80078f0 <vPortFree+0xc0>)
 80078d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80078da:	f7fe fc8b 	bl	80061f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80078de:	bf00      	nop
 80078e0:	3718      	adds	r7, #24
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	20004c34 	.word	0x20004c34
 80078ec:	20004c24 	.word	0x20004c24
 80078f0:	20004c30 	.word	0x20004c30

080078f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80078f4:	b480      	push	{r7}
 80078f6:	b085      	sub	sp, #20
 80078f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80078fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80078fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007900:	4b27      	ldr	r3, [pc, #156]	; (80079a0 <prvHeapInit+0xac>)
 8007902:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f003 0307 	and.w	r3, r3, #7
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00c      	beq.n	8007928 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	3307      	adds	r3, #7
 8007912:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f023 0307 	bic.w	r3, r3, #7
 800791a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800791c:	68ba      	ldr	r2, [r7, #8]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	4a1f      	ldr	r2, [pc, #124]	; (80079a0 <prvHeapInit+0xac>)
 8007924:	4413      	add	r3, r2
 8007926:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800792c:	4a1d      	ldr	r2, [pc, #116]	; (80079a4 <prvHeapInit+0xb0>)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007932:	4b1c      	ldr	r3, [pc, #112]	; (80079a4 <prvHeapInit+0xb0>)
 8007934:	2200      	movs	r2, #0
 8007936:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	68ba      	ldr	r2, [r7, #8]
 800793c:	4413      	add	r3, r2
 800793e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007940:	2208      	movs	r2, #8
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	1a9b      	subs	r3, r3, r2
 8007946:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f023 0307 	bic.w	r3, r3, #7
 800794e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	4a15      	ldr	r2, [pc, #84]	; (80079a8 <prvHeapInit+0xb4>)
 8007954:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007956:	4b14      	ldr	r3, [pc, #80]	; (80079a8 <prvHeapInit+0xb4>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2200      	movs	r2, #0
 800795c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800795e:	4b12      	ldr	r3, [pc, #72]	; (80079a8 <prvHeapInit+0xb4>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2200      	movs	r2, #0
 8007964:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	1ad2      	subs	r2, r2, r3
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007974:	4b0c      	ldr	r3, [pc, #48]	; (80079a8 <prvHeapInit+0xb4>)
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	4a0a      	ldr	r2, [pc, #40]	; (80079ac <prvHeapInit+0xb8>)
 8007982:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	4a09      	ldr	r2, [pc, #36]	; (80079b0 <prvHeapInit+0xbc>)
 800798a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800798c:	4b09      	ldr	r3, [pc, #36]	; (80079b4 <prvHeapInit+0xc0>)
 800798e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007992:	601a      	str	r2, [r3, #0]
}
 8007994:	bf00      	nop
 8007996:	3714      	adds	r7, #20
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr
 80079a0:	20001018 	.word	0x20001018
 80079a4:	20004c18 	.word	0x20004c18
 80079a8:	20004c20 	.word	0x20004c20
 80079ac:	20004c28 	.word	0x20004c28
 80079b0:	20004c24 	.word	0x20004c24
 80079b4:	20004c34 	.word	0x20004c34

080079b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80079c0:	4b28      	ldr	r3, [pc, #160]	; (8007a64 <prvInsertBlockIntoFreeList+0xac>)
 80079c2:	60fb      	str	r3, [r7, #12]
 80079c4:	e002      	b.n	80079cc <prvInsertBlockIntoFreeList+0x14>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	60fb      	str	r3, [r7, #12]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d8f7      	bhi.n	80079c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	4413      	add	r3, r2
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d108      	bne.n	80079fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	685a      	ldr	r2, [r3, #4]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	441a      	add	r2, r3
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	68ba      	ldr	r2, [r7, #8]
 8007a04:	441a      	add	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d118      	bne.n	8007a40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	4b15      	ldr	r3, [pc, #84]	; (8007a68 <prvInsertBlockIntoFreeList+0xb0>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d00d      	beq.n	8007a36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	685a      	ldr	r2, [r3, #4]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	441a      	add	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	601a      	str	r2, [r3, #0]
 8007a34:	e008      	b.n	8007a48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a36:	4b0c      	ldr	r3, [pc, #48]	; (8007a68 <prvInsertBlockIntoFreeList+0xb0>)
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	601a      	str	r2, [r3, #0]
 8007a3e:	e003      	b.n	8007a48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d002      	beq.n	8007a56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a56:	bf00      	nop
 8007a58:	3714      	adds	r7, #20
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	20004c18 	.word	0x20004c18
 8007a68:	20004c20 	.word	0x20004c20

08007a6c <__errno>:
 8007a6c:	4b01      	ldr	r3, [pc, #4]	; (8007a74 <__errno+0x8>)
 8007a6e:	6818      	ldr	r0, [r3, #0]
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	20000028 	.word	0x20000028

08007a78 <__libc_init_array>:
 8007a78:	b570      	push	{r4, r5, r6, lr}
 8007a7a:	4d0d      	ldr	r5, [pc, #52]	; (8007ab0 <__libc_init_array+0x38>)
 8007a7c:	4c0d      	ldr	r4, [pc, #52]	; (8007ab4 <__libc_init_array+0x3c>)
 8007a7e:	1b64      	subs	r4, r4, r5
 8007a80:	10a4      	asrs	r4, r4, #2
 8007a82:	2600      	movs	r6, #0
 8007a84:	42a6      	cmp	r6, r4
 8007a86:	d109      	bne.n	8007a9c <__libc_init_array+0x24>
 8007a88:	4d0b      	ldr	r5, [pc, #44]	; (8007ab8 <__libc_init_array+0x40>)
 8007a8a:	4c0c      	ldr	r4, [pc, #48]	; (8007abc <__libc_init_array+0x44>)
 8007a8c:	f005 f882 	bl	800cb94 <_init>
 8007a90:	1b64      	subs	r4, r4, r5
 8007a92:	10a4      	asrs	r4, r4, #2
 8007a94:	2600      	movs	r6, #0
 8007a96:	42a6      	cmp	r6, r4
 8007a98:	d105      	bne.n	8007aa6 <__libc_init_array+0x2e>
 8007a9a:	bd70      	pop	{r4, r5, r6, pc}
 8007a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aa0:	4798      	blx	r3
 8007aa2:	3601      	adds	r6, #1
 8007aa4:	e7ee      	b.n	8007a84 <__libc_init_array+0xc>
 8007aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aaa:	4798      	blx	r3
 8007aac:	3601      	adds	r6, #1
 8007aae:	e7f2      	b.n	8007a96 <__libc_init_array+0x1e>
 8007ab0:	0800fa04 	.word	0x0800fa04
 8007ab4:	0800fa04 	.word	0x0800fa04
 8007ab8:	0800fa04 	.word	0x0800fa04
 8007abc:	0800fa08 	.word	0x0800fa08

08007ac0 <memcpy>:
 8007ac0:	440a      	add	r2, r1
 8007ac2:	4291      	cmp	r1, r2
 8007ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ac8:	d100      	bne.n	8007acc <memcpy+0xc>
 8007aca:	4770      	bx	lr
 8007acc:	b510      	push	{r4, lr}
 8007ace:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ad2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ad6:	4291      	cmp	r1, r2
 8007ad8:	d1f9      	bne.n	8007ace <memcpy+0xe>
 8007ada:	bd10      	pop	{r4, pc}

08007adc <memset>:
 8007adc:	4402      	add	r2, r0
 8007ade:	4603      	mov	r3, r0
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d100      	bne.n	8007ae6 <memset+0xa>
 8007ae4:	4770      	bx	lr
 8007ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8007aea:	e7f9      	b.n	8007ae0 <memset+0x4>

08007aec <__cvt>:
 8007aec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007af0:	ec55 4b10 	vmov	r4, r5, d0
 8007af4:	2d00      	cmp	r5, #0
 8007af6:	460e      	mov	r6, r1
 8007af8:	4619      	mov	r1, r3
 8007afa:	462b      	mov	r3, r5
 8007afc:	bfbb      	ittet	lt
 8007afe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007b02:	461d      	movlt	r5, r3
 8007b04:	2300      	movge	r3, #0
 8007b06:	232d      	movlt	r3, #45	; 0x2d
 8007b08:	700b      	strb	r3, [r1, #0]
 8007b0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b0c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007b10:	4691      	mov	r9, r2
 8007b12:	f023 0820 	bic.w	r8, r3, #32
 8007b16:	bfbc      	itt	lt
 8007b18:	4622      	movlt	r2, r4
 8007b1a:	4614      	movlt	r4, r2
 8007b1c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b20:	d005      	beq.n	8007b2e <__cvt+0x42>
 8007b22:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007b26:	d100      	bne.n	8007b2a <__cvt+0x3e>
 8007b28:	3601      	adds	r6, #1
 8007b2a:	2102      	movs	r1, #2
 8007b2c:	e000      	b.n	8007b30 <__cvt+0x44>
 8007b2e:	2103      	movs	r1, #3
 8007b30:	ab03      	add	r3, sp, #12
 8007b32:	9301      	str	r3, [sp, #4]
 8007b34:	ab02      	add	r3, sp, #8
 8007b36:	9300      	str	r3, [sp, #0]
 8007b38:	ec45 4b10 	vmov	d0, r4, r5
 8007b3c:	4653      	mov	r3, sl
 8007b3e:	4632      	mov	r2, r6
 8007b40:	f001 fe5a 	bl	80097f8 <_dtoa_r>
 8007b44:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007b48:	4607      	mov	r7, r0
 8007b4a:	d102      	bne.n	8007b52 <__cvt+0x66>
 8007b4c:	f019 0f01 	tst.w	r9, #1
 8007b50:	d022      	beq.n	8007b98 <__cvt+0xac>
 8007b52:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b56:	eb07 0906 	add.w	r9, r7, r6
 8007b5a:	d110      	bne.n	8007b7e <__cvt+0x92>
 8007b5c:	783b      	ldrb	r3, [r7, #0]
 8007b5e:	2b30      	cmp	r3, #48	; 0x30
 8007b60:	d10a      	bne.n	8007b78 <__cvt+0x8c>
 8007b62:	2200      	movs	r2, #0
 8007b64:	2300      	movs	r3, #0
 8007b66:	4620      	mov	r0, r4
 8007b68:	4629      	mov	r1, r5
 8007b6a:	f7f8 ffb5 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b6e:	b918      	cbnz	r0, 8007b78 <__cvt+0x8c>
 8007b70:	f1c6 0601 	rsb	r6, r6, #1
 8007b74:	f8ca 6000 	str.w	r6, [sl]
 8007b78:	f8da 3000 	ldr.w	r3, [sl]
 8007b7c:	4499      	add	r9, r3
 8007b7e:	2200      	movs	r2, #0
 8007b80:	2300      	movs	r3, #0
 8007b82:	4620      	mov	r0, r4
 8007b84:	4629      	mov	r1, r5
 8007b86:	f7f8 ffa7 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b8a:	b108      	cbz	r0, 8007b90 <__cvt+0xa4>
 8007b8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007b90:	2230      	movs	r2, #48	; 0x30
 8007b92:	9b03      	ldr	r3, [sp, #12]
 8007b94:	454b      	cmp	r3, r9
 8007b96:	d307      	bcc.n	8007ba8 <__cvt+0xbc>
 8007b98:	9b03      	ldr	r3, [sp, #12]
 8007b9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b9c:	1bdb      	subs	r3, r3, r7
 8007b9e:	4638      	mov	r0, r7
 8007ba0:	6013      	str	r3, [r2, #0]
 8007ba2:	b004      	add	sp, #16
 8007ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ba8:	1c59      	adds	r1, r3, #1
 8007baa:	9103      	str	r1, [sp, #12]
 8007bac:	701a      	strb	r2, [r3, #0]
 8007bae:	e7f0      	b.n	8007b92 <__cvt+0xa6>

08007bb0 <__exponent>:
 8007bb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2900      	cmp	r1, #0
 8007bb6:	bfb8      	it	lt
 8007bb8:	4249      	neglt	r1, r1
 8007bba:	f803 2b02 	strb.w	r2, [r3], #2
 8007bbe:	bfb4      	ite	lt
 8007bc0:	222d      	movlt	r2, #45	; 0x2d
 8007bc2:	222b      	movge	r2, #43	; 0x2b
 8007bc4:	2909      	cmp	r1, #9
 8007bc6:	7042      	strb	r2, [r0, #1]
 8007bc8:	dd2a      	ble.n	8007c20 <__exponent+0x70>
 8007bca:	f10d 0407 	add.w	r4, sp, #7
 8007bce:	46a4      	mov	ip, r4
 8007bd0:	270a      	movs	r7, #10
 8007bd2:	46a6      	mov	lr, r4
 8007bd4:	460a      	mov	r2, r1
 8007bd6:	fb91 f6f7 	sdiv	r6, r1, r7
 8007bda:	fb07 1516 	mls	r5, r7, r6, r1
 8007bde:	3530      	adds	r5, #48	; 0x30
 8007be0:	2a63      	cmp	r2, #99	; 0x63
 8007be2:	f104 34ff 	add.w	r4, r4, #4294967295
 8007be6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007bea:	4631      	mov	r1, r6
 8007bec:	dcf1      	bgt.n	8007bd2 <__exponent+0x22>
 8007bee:	3130      	adds	r1, #48	; 0x30
 8007bf0:	f1ae 0502 	sub.w	r5, lr, #2
 8007bf4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007bf8:	1c44      	adds	r4, r0, #1
 8007bfa:	4629      	mov	r1, r5
 8007bfc:	4561      	cmp	r1, ip
 8007bfe:	d30a      	bcc.n	8007c16 <__exponent+0x66>
 8007c00:	f10d 0209 	add.w	r2, sp, #9
 8007c04:	eba2 020e 	sub.w	r2, r2, lr
 8007c08:	4565      	cmp	r5, ip
 8007c0a:	bf88      	it	hi
 8007c0c:	2200      	movhi	r2, #0
 8007c0e:	4413      	add	r3, r2
 8007c10:	1a18      	subs	r0, r3, r0
 8007c12:	b003      	add	sp, #12
 8007c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c1a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007c1e:	e7ed      	b.n	8007bfc <__exponent+0x4c>
 8007c20:	2330      	movs	r3, #48	; 0x30
 8007c22:	3130      	adds	r1, #48	; 0x30
 8007c24:	7083      	strb	r3, [r0, #2]
 8007c26:	70c1      	strb	r1, [r0, #3]
 8007c28:	1d03      	adds	r3, r0, #4
 8007c2a:	e7f1      	b.n	8007c10 <__exponent+0x60>

08007c2c <_printf_float>:
 8007c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c30:	ed2d 8b02 	vpush	{d8}
 8007c34:	b08d      	sub	sp, #52	; 0x34
 8007c36:	460c      	mov	r4, r1
 8007c38:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007c3c:	4616      	mov	r6, r2
 8007c3e:	461f      	mov	r7, r3
 8007c40:	4605      	mov	r5, r0
 8007c42:	f002 ff35 	bl	800aab0 <_localeconv_r>
 8007c46:	f8d0 a000 	ldr.w	sl, [r0]
 8007c4a:	4650      	mov	r0, sl
 8007c4c:	f7f8 fac8 	bl	80001e0 <strlen>
 8007c50:	2300      	movs	r3, #0
 8007c52:	930a      	str	r3, [sp, #40]	; 0x28
 8007c54:	6823      	ldr	r3, [r4, #0]
 8007c56:	9305      	str	r3, [sp, #20]
 8007c58:	f8d8 3000 	ldr.w	r3, [r8]
 8007c5c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007c60:	3307      	adds	r3, #7
 8007c62:	f023 0307 	bic.w	r3, r3, #7
 8007c66:	f103 0208 	add.w	r2, r3, #8
 8007c6a:	f8c8 2000 	str.w	r2, [r8]
 8007c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c72:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007c76:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007c7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c7e:	9307      	str	r3, [sp, #28]
 8007c80:	f8cd 8018 	str.w	r8, [sp, #24]
 8007c84:	ee08 0a10 	vmov	s16, r0
 8007c88:	4b9f      	ldr	r3, [pc, #636]	; (8007f08 <_printf_float+0x2dc>)
 8007c8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c92:	f7f8 ff53 	bl	8000b3c <__aeabi_dcmpun>
 8007c96:	bb88      	cbnz	r0, 8007cfc <_printf_float+0xd0>
 8007c98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c9c:	4b9a      	ldr	r3, [pc, #616]	; (8007f08 <_printf_float+0x2dc>)
 8007c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007ca2:	f7f8 ff2d 	bl	8000b00 <__aeabi_dcmple>
 8007ca6:	bb48      	cbnz	r0, 8007cfc <_printf_float+0xd0>
 8007ca8:	2200      	movs	r2, #0
 8007caa:	2300      	movs	r3, #0
 8007cac:	4640      	mov	r0, r8
 8007cae:	4649      	mov	r1, r9
 8007cb0:	f7f8 ff1c 	bl	8000aec <__aeabi_dcmplt>
 8007cb4:	b110      	cbz	r0, 8007cbc <_printf_float+0x90>
 8007cb6:	232d      	movs	r3, #45	; 0x2d
 8007cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cbc:	4b93      	ldr	r3, [pc, #588]	; (8007f0c <_printf_float+0x2e0>)
 8007cbe:	4894      	ldr	r0, [pc, #592]	; (8007f10 <_printf_float+0x2e4>)
 8007cc0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007cc4:	bf94      	ite	ls
 8007cc6:	4698      	movls	r8, r3
 8007cc8:	4680      	movhi	r8, r0
 8007cca:	2303      	movs	r3, #3
 8007ccc:	6123      	str	r3, [r4, #16]
 8007cce:	9b05      	ldr	r3, [sp, #20]
 8007cd0:	f023 0204 	bic.w	r2, r3, #4
 8007cd4:	6022      	str	r2, [r4, #0]
 8007cd6:	f04f 0900 	mov.w	r9, #0
 8007cda:	9700      	str	r7, [sp, #0]
 8007cdc:	4633      	mov	r3, r6
 8007cde:	aa0b      	add	r2, sp, #44	; 0x2c
 8007ce0:	4621      	mov	r1, r4
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	f000 f9d8 	bl	8008098 <_printf_common>
 8007ce8:	3001      	adds	r0, #1
 8007cea:	f040 8090 	bne.w	8007e0e <_printf_float+0x1e2>
 8007cee:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf2:	b00d      	add	sp, #52	; 0x34
 8007cf4:	ecbd 8b02 	vpop	{d8}
 8007cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cfc:	4642      	mov	r2, r8
 8007cfe:	464b      	mov	r3, r9
 8007d00:	4640      	mov	r0, r8
 8007d02:	4649      	mov	r1, r9
 8007d04:	f7f8 ff1a 	bl	8000b3c <__aeabi_dcmpun>
 8007d08:	b140      	cbz	r0, 8007d1c <_printf_float+0xf0>
 8007d0a:	464b      	mov	r3, r9
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	bfbc      	itt	lt
 8007d10:	232d      	movlt	r3, #45	; 0x2d
 8007d12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007d16:	487f      	ldr	r0, [pc, #508]	; (8007f14 <_printf_float+0x2e8>)
 8007d18:	4b7f      	ldr	r3, [pc, #508]	; (8007f18 <_printf_float+0x2ec>)
 8007d1a:	e7d1      	b.n	8007cc0 <_printf_float+0x94>
 8007d1c:	6863      	ldr	r3, [r4, #4]
 8007d1e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007d22:	9206      	str	r2, [sp, #24]
 8007d24:	1c5a      	adds	r2, r3, #1
 8007d26:	d13f      	bne.n	8007da8 <_printf_float+0x17c>
 8007d28:	2306      	movs	r3, #6
 8007d2a:	6063      	str	r3, [r4, #4]
 8007d2c:	9b05      	ldr	r3, [sp, #20]
 8007d2e:	6861      	ldr	r1, [r4, #4]
 8007d30:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007d34:	2300      	movs	r3, #0
 8007d36:	9303      	str	r3, [sp, #12]
 8007d38:	ab0a      	add	r3, sp, #40	; 0x28
 8007d3a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007d3e:	ab09      	add	r3, sp, #36	; 0x24
 8007d40:	ec49 8b10 	vmov	d0, r8, r9
 8007d44:	9300      	str	r3, [sp, #0]
 8007d46:	6022      	str	r2, [r4, #0]
 8007d48:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	f7ff fecd 	bl	8007aec <__cvt>
 8007d52:	9b06      	ldr	r3, [sp, #24]
 8007d54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d56:	2b47      	cmp	r3, #71	; 0x47
 8007d58:	4680      	mov	r8, r0
 8007d5a:	d108      	bne.n	8007d6e <_printf_float+0x142>
 8007d5c:	1cc8      	adds	r0, r1, #3
 8007d5e:	db02      	blt.n	8007d66 <_printf_float+0x13a>
 8007d60:	6863      	ldr	r3, [r4, #4]
 8007d62:	4299      	cmp	r1, r3
 8007d64:	dd41      	ble.n	8007dea <_printf_float+0x1be>
 8007d66:	f1ab 0b02 	sub.w	fp, fp, #2
 8007d6a:	fa5f fb8b 	uxtb.w	fp, fp
 8007d6e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007d72:	d820      	bhi.n	8007db6 <_printf_float+0x18a>
 8007d74:	3901      	subs	r1, #1
 8007d76:	465a      	mov	r2, fp
 8007d78:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007d7c:	9109      	str	r1, [sp, #36]	; 0x24
 8007d7e:	f7ff ff17 	bl	8007bb0 <__exponent>
 8007d82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d84:	1813      	adds	r3, r2, r0
 8007d86:	2a01      	cmp	r2, #1
 8007d88:	4681      	mov	r9, r0
 8007d8a:	6123      	str	r3, [r4, #16]
 8007d8c:	dc02      	bgt.n	8007d94 <_printf_float+0x168>
 8007d8e:	6822      	ldr	r2, [r4, #0]
 8007d90:	07d2      	lsls	r2, r2, #31
 8007d92:	d501      	bpl.n	8007d98 <_printf_float+0x16c>
 8007d94:	3301      	adds	r3, #1
 8007d96:	6123      	str	r3, [r4, #16]
 8007d98:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d09c      	beq.n	8007cda <_printf_float+0xae>
 8007da0:	232d      	movs	r3, #45	; 0x2d
 8007da2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007da6:	e798      	b.n	8007cda <_printf_float+0xae>
 8007da8:	9a06      	ldr	r2, [sp, #24]
 8007daa:	2a47      	cmp	r2, #71	; 0x47
 8007dac:	d1be      	bne.n	8007d2c <_printf_float+0x100>
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1bc      	bne.n	8007d2c <_printf_float+0x100>
 8007db2:	2301      	movs	r3, #1
 8007db4:	e7b9      	b.n	8007d2a <_printf_float+0xfe>
 8007db6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007dba:	d118      	bne.n	8007dee <_printf_float+0x1c2>
 8007dbc:	2900      	cmp	r1, #0
 8007dbe:	6863      	ldr	r3, [r4, #4]
 8007dc0:	dd0b      	ble.n	8007dda <_printf_float+0x1ae>
 8007dc2:	6121      	str	r1, [r4, #16]
 8007dc4:	b913      	cbnz	r3, 8007dcc <_printf_float+0x1a0>
 8007dc6:	6822      	ldr	r2, [r4, #0]
 8007dc8:	07d0      	lsls	r0, r2, #31
 8007dca:	d502      	bpl.n	8007dd2 <_printf_float+0x1a6>
 8007dcc:	3301      	adds	r3, #1
 8007dce:	440b      	add	r3, r1
 8007dd0:	6123      	str	r3, [r4, #16]
 8007dd2:	65a1      	str	r1, [r4, #88]	; 0x58
 8007dd4:	f04f 0900 	mov.w	r9, #0
 8007dd8:	e7de      	b.n	8007d98 <_printf_float+0x16c>
 8007dda:	b913      	cbnz	r3, 8007de2 <_printf_float+0x1b6>
 8007ddc:	6822      	ldr	r2, [r4, #0]
 8007dde:	07d2      	lsls	r2, r2, #31
 8007de0:	d501      	bpl.n	8007de6 <_printf_float+0x1ba>
 8007de2:	3302      	adds	r3, #2
 8007de4:	e7f4      	b.n	8007dd0 <_printf_float+0x1a4>
 8007de6:	2301      	movs	r3, #1
 8007de8:	e7f2      	b.n	8007dd0 <_printf_float+0x1a4>
 8007dea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007dee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007df0:	4299      	cmp	r1, r3
 8007df2:	db05      	blt.n	8007e00 <_printf_float+0x1d4>
 8007df4:	6823      	ldr	r3, [r4, #0]
 8007df6:	6121      	str	r1, [r4, #16]
 8007df8:	07d8      	lsls	r0, r3, #31
 8007dfa:	d5ea      	bpl.n	8007dd2 <_printf_float+0x1a6>
 8007dfc:	1c4b      	adds	r3, r1, #1
 8007dfe:	e7e7      	b.n	8007dd0 <_printf_float+0x1a4>
 8007e00:	2900      	cmp	r1, #0
 8007e02:	bfd4      	ite	le
 8007e04:	f1c1 0202 	rsble	r2, r1, #2
 8007e08:	2201      	movgt	r2, #1
 8007e0a:	4413      	add	r3, r2
 8007e0c:	e7e0      	b.n	8007dd0 <_printf_float+0x1a4>
 8007e0e:	6823      	ldr	r3, [r4, #0]
 8007e10:	055a      	lsls	r2, r3, #21
 8007e12:	d407      	bmi.n	8007e24 <_printf_float+0x1f8>
 8007e14:	6923      	ldr	r3, [r4, #16]
 8007e16:	4642      	mov	r2, r8
 8007e18:	4631      	mov	r1, r6
 8007e1a:	4628      	mov	r0, r5
 8007e1c:	47b8      	blx	r7
 8007e1e:	3001      	adds	r0, #1
 8007e20:	d12c      	bne.n	8007e7c <_printf_float+0x250>
 8007e22:	e764      	b.n	8007cee <_printf_float+0xc2>
 8007e24:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e28:	f240 80e0 	bls.w	8007fec <_printf_float+0x3c0>
 8007e2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e30:	2200      	movs	r2, #0
 8007e32:	2300      	movs	r3, #0
 8007e34:	f7f8 fe50 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	d034      	beq.n	8007ea6 <_printf_float+0x27a>
 8007e3c:	4a37      	ldr	r2, [pc, #220]	; (8007f1c <_printf_float+0x2f0>)
 8007e3e:	2301      	movs	r3, #1
 8007e40:	4631      	mov	r1, r6
 8007e42:	4628      	mov	r0, r5
 8007e44:	47b8      	blx	r7
 8007e46:	3001      	adds	r0, #1
 8007e48:	f43f af51 	beq.w	8007cee <_printf_float+0xc2>
 8007e4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e50:	429a      	cmp	r2, r3
 8007e52:	db02      	blt.n	8007e5a <_printf_float+0x22e>
 8007e54:	6823      	ldr	r3, [r4, #0]
 8007e56:	07d8      	lsls	r0, r3, #31
 8007e58:	d510      	bpl.n	8007e7c <_printf_float+0x250>
 8007e5a:	ee18 3a10 	vmov	r3, s16
 8007e5e:	4652      	mov	r2, sl
 8007e60:	4631      	mov	r1, r6
 8007e62:	4628      	mov	r0, r5
 8007e64:	47b8      	blx	r7
 8007e66:	3001      	adds	r0, #1
 8007e68:	f43f af41 	beq.w	8007cee <_printf_float+0xc2>
 8007e6c:	f04f 0800 	mov.w	r8, #0
 8007e70:	f104 091a 	add.w	r9, r4, #26
 8007e74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e76:	3b01      	subs	r3, #1
 8007e78:	4543      	cmp	r3, r8
 8007e7a:	dc09      	bgt.n	8007e90 <_printf_float+0x264>
 8007e7c:	6823      	ldr	r3, [r4, #0]
 8007e7e:	079b      	lsls	r3, r3, #30
 8007e80:	f100 8105 	bmi.w	800808e <_printf_float+0x462>
 8007e84:	68e0      	ldr	r0, [r4, #12]
 8007e86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e88:	4298      	cmp	r0, r3
 8007e8a:	bfb8      	it	lt
 8007e8c:	4618      	movlt	r0, r3
 8007e8e:	e730      	b.n	8007cf2 <_printf_float+0xc6>
 8007e90:	2301      	movs	r3, #1
 8007e92:	464a      	mov	r2, r9
 8007e94:	4631      	mov	r1, r6
 8007e96:	4628      	mov	r0, r5
 8007e98:	47b8      	blx	r7
 8007e9a:	3001      	adds	r0, #1
 8007e9c:	f43f af27 	beq.w	8007cee <_printf_float+0xc2>
 8007ea0:	f108 0801 	add.w	r8, r8, #1
 8007ea4:	e7e6      	b.n	8007e74 <_printf_float+0x248>
 8007ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	dc39      	bgt.n	8007f20 <_printf_float+0x2f4>
 8007eac:	4a1b      	ldr	r2, [pc, #108]	; (8007f1c <_printf_float+0x2f0>)
 8007eae:	2301      	movs	r3, #1
 8007eb0:	4631      	mov	r1, r6
 8007eb2:	4628      	mov	r0, r5
 8007eb4:	47b8      	blx	r7
 8007eb6:	3001      	adds	r0, #1
 8007eb8:	f43f af19 	beq.w	8007cee <_printf_float+0xc2>
 8007ebc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	d102      	bne.n	8007eca <_printf_float+0x29e>
 8007ec4:	6823      	ldr	r3, [r4, #0]
 8007ec6:	07d9      	lsls	r1, r3, #31
 8007ec8:	d5d8      	bpl.n	8007e7c <_printf_float+0x250>
 8007eca:	ee18 3a10 	vmov	r3, s16
 8007ece:	4652      	mov	r2, sl
 8007ed0:	4631      	mov	r1, r6
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	47b8      	blx	r7
 8007ed6:	3001      	adds	r0, #1
 8007ed8:	f43f af09 	beq.w	8007cee <_printf_float+0xc2>
 8007edc:	f04f 0900 	mov.w	r9, #0
 8007ee0:	f104 0a1a 	add.w	sl, r4, #26
 8007ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ee6:	425b      	negs	r3, r3
 8007ee8:	454b      	cmp	r3, r9
 8007eea:	dc01      	bgt.n	8007ef0 <_printf_float+0x2c4>
 8007eec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eee:	e792      	b.n	8007e16 <_printf_float+0x1ea>
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	4652      	mov	r2, sl
 8007ef4:	4631      	mov	r1, r6
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	47b8      	blx	r7
 8007efa:	3001      	adds	r0, #1
 8007efc:	f43f aef7 	beq.w	8007cee <_printf_float+0xc2>
 8007f00:	f109 0901 	add.w	r9, r9, #1
 8007f04:	e7ee      	b.n	8007ee4 <_printf_float+0x2b8>
 8007f06:	bf00      	nop
 8007f08:	7fefffff 	.word	0x7fefffff
 8007f0c:	0800f534 	.word	0x0800f534
 8007f10:	0800f538 	.word	0x0800f538
 8007f14:	0800f540 	.word	0x0800f540
 8007f18:	0800f53c 	.word	0x0800f53c
 8007f1c:	0800f949 	.word	0x0800f949
 8007f20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f24:	429a      	cmp	r2, r3
 8007f26:	bfa8      	it	ge
 8007f28:	461a      	movge	r2, r3
 8007f2a:	2a00      	cmp	r2, #0
 8007f2c:	4691      	mov	r9, r2
 8007f2e:	dc37      	bgt.n	8007fa0 <_printf_float+0x374>
 8007f30:	f04f 0b00 	mov.w	fp, #0
 8007f34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f38:	f104 021a 	add.w	r2, r4, #26
 8007f3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f3e:	9305      	str	r3, [sp, #20]
 8007f40:	eba3 0309 	sub.w	r3, r3, r9
 8007f44:	455b      	cmp	r3, fp
 8007f46:	dc33      	bgt.n	8007fb0 <_printf_float+0x384>
 8007f48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	db3b      	blt.n	8007fc8 <_printf_float+0x39c>
 8007f50:	6823      	ldr	r3, [r4, #0]
 8007f52:	07da      	lsls	r2, r3, #31
 8007f54:	d438      	bmi.n	8007fc8 <_printf_float+0x39c>
 8007f56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f58:	9b05      	ldr	r3, [sp, #20]
 8007f5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f5c:	1ad3      	subs	r3, r2, r3
 8007f5e:	eba2 0901 	sub.w	r9, r2, r1
 8007f62:	4599      	cmp	r9, r3
 8007f64:	bfa8      	it	ge
 8007f66:	4699      	movge	r9, r3
 8007f68:	f1b9 0f00 	cmp.w	r9, #0
 8007f6c:	dc35      	bgt.n	8007fda <_printf_float+0x3ae>
 8007f6e:	f04f 0800 	mov.w	r8, #0
 8007f72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f76:	f104 0a1a 	add.w	sl, r4, #26
 8007f7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f7e:	1a9b      	subs	r3, r3, r2
 8007f80:	eba3 0309 	sub.w	r3, r3, r9
 8007f84:	4543      	cmp	r3, r8
 8007f86:	f77f af79 	ble.w	8007e7c <_printf_float+0x250>
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	4652      	mov	r2, sl
 8007f8e:	4631      	mov	r1, r6
 8007f90:	4628      	mov	r0, r5
 8007f92:	47b8      	blx	r7
 8007f94:	3001      	adds	r0, #1
 8007f96:	f43f aeaa 	beq.w	8007cee <_printf_float+0xc2>
 8007f9a:	f108 0801 	add.w	r8, r8, #1
 8007f9e:	e7ec      	b.n	8007f7a <_printf_float+0x34e>
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	4631      	mov	r1, r6
 8007fa4:	4642      	mov	r2, r8
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	47b8      	blx	r7
 8007faa:	3001      	adds	r0, #1
 8007fac:	d1c0      	bne.n	8007f30 <_printf_float+0x304>
 8007fae:	e69e      	b.n	8007cee <_printf_float+0xc2>
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	4631      	mov	r1, r6
 8007fb4:	4628      	mov	r0, r5
 8007fb6:	9205      	str	r2, [sp, #20]
 8007fb8:	47b8      	blx	r7
 8007fba:	3001      	adds	r0, #1
 8007fbc:	f43f ae97 	beq.w	8007cee <_printf_float+0xc2>
 8007fc0:	9a05      	ldr	r2, [sp, #20]
 8007fc2:	f10b 0b01 	add.w	fp, fp, #1
 8007fc6:	e7b9      	b.n	8007f3c <_printf_float+0x310>
 8007fc8:	ee18 3a10 	vmov	r3, s16
 8007fcc:	4652      	mov	r2, sl
 8007fce:	4631      	mov	r1, r6
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	47b8      	blx	r7
 8007fd4:	3001      	adds	r0, #1
 8007fd6:	d1be      	bne.n	8007f56 <_printf_float+0x32a>
 8007fd8:	e689      	b.n	8007cee <_printf_float+0xc2>
 8007fda:	9a05      	ldr	r2, [sp, #20]
 8007fdc:	464b      	mov	r3, r9
 8007fde:	4442      	add	r2, r8
 8007fe0:	4631      	mov	r1, r6
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	47b8      	blx	r7
 8007fe6:	3001      	adds	r0, #1
 8007fe8:	d1c1      	bne.n	8007f6e <_printf_float+0x342>
 8007fea:	e680      	b.n	8007cee <_printf_float+0xc2>
 8007fec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fee:	2a01      	cmp	r2, #1
 8007ff0:	dc01      	bgt.n	8007ff6 <_printf_float+0x3ca>
 8007ff2:	07db      	lsls	r3, r3, #31
 8007ff4:	d538      	bpl.n	8008068 <_printf_float+0x43c>
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	4642      	mov	r2, r8
 8007ffa:	4631      	mov	r1, r6
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	47b8      	blx	r7
 8008000:	3001      	adds	r0, #1
 8008002:	f43f ae74 	beq.w	8007cee <_printf_float+0xc2>
 8008006:	ee18 3a10 	vmov	r3, s16
 800800a:	4652      	mov	r2, sl
 800800c:	4631      	mov	r1, r6
 800800e:	4628      	mov	r0, r5
 8008010:	47b8      	blx	r7
 8008012:	3001      	adds	r0, #1
 8008014:	f43f ae6b 	beq.w	8007cee <_printf_float+0xc2>
 8008018:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800801c:	2200      	movs	r2, #0
 800801e:	2300      	movs	r3, #0
 8008020:	f7f8 fd5a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008024:	b9d8      	cbnz	r0, 800805e <_printf_float+0x432>
 8008026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008028:	f108 0201 	add.w	r2, r8, #1
 800802c:	3b01      	subs	r3, #1
 800802e:	4631      	mov	r1, r6
 8008030:	4628      	mov	r0, r5
 8008032:	47b8      	blx	r7
 8008034:	3001      	adds	r0, #1
 8008036:	d10e      	bne.n	8008056 <_printf_float+0x42a>
 8008038:	e659      	b.n	8007cee <_printf_float+0xc2>
 800803a:	2301      	movs	r3, #1
 800803c:	4652      	mov	r2, sl
 800803e:	4631      	mov	r1, r6
 8008040:	4628      	mov	r0, r5
 8008042:	47b8      	blx	r7
 8008044:	3001      	adds	r0, #1
 8008046:	f43f ae52 	beq.w	8007cee <_printf_float+0xc2>
 800804a:	f108 0801 	add.w	r8, r8, #1
 800804e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008050:	3b01      	subs	r3, #1
 8008052:	4543      	cmp	r3, r8
 8008054:	dcf1      	bgt.n	800803a <_printf_float+0x40e>
 8008056:	464b      	mov	r3, r9
 8008058:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800805c:	e6dc      	b.n	8007e18 <_printf_float+0x1ec>
 800805e:	f04f 0800 	mov.w	r8, #0
 8008062:	f104 0a1a 	add.w	sl, r4, #26
 8008066:	e7f2      	b.n	800804e <_printf_float+0x422>
 8008068:	2301      	movs	r3, #1
 800806a:	4642      	mov	r2, r8
 800806c:	e7df      	b.n	800802e <_printf_float+0x402>
 800806e:	2301      	movs	r3, #1
 8008070:	464a      	mov	r2, r9
 8008072:	4631      	mov	r1, r6
 8008074:	4628      	mov	r0, r5
 8008076:	47b8      	blx	r7
 8008078:	3001      	adds	r0, #1
 800807a:	f43f ae38 	beq.w	8007cee <_printf_float+0xc2>
 800807e:	f108 0801 	add.w	r8, r8, #1
 8008082:	68e3      	ldr	r3, [r4, #12]
 8008084:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008086:	1a5b      	subs	r3, r3, r1
 8008088:	4543      	cmp	r3, r8
 800808a:	dcf0      	bgt.n	800806e <_printf_float+0x442>
 800808c:	e6fa      	b.n	8007e84 <_printf_float+0x258>
 800808e:	f04f 0800 	mov.w	r8, #0
 8008092:	f104 0919 	add.w	r9, r4, #25
 8008096:	e7f4      	b.n	8008082 <_printf_float+0x456>

08008098 <_printf_common>:
 8008098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800809c:	4616      	mov	r6, r2
 800809e:	4699      	mov	r9, r3
 80080a0:	688a      	ldr	r2, [r1, #8]
 80080a2:	690b      	ldr	r3, [r1, #16]
 80080a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080a8:	4293      	cmp	r3, r2
 80080aa:	bfb8      	it	lt
 80080ac:	4613      	movlt	r3, r2
 80080ae:	6033      	str	r3, [r6, #0]
 80080b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080b4:	4607      	mov	r7, r0
 80080b6:	460c      	mov	r4, r1
 80080b8:	b10a      	cbz	r2, 80080be <_printf_common+0x26>
 80080ba:	3301      	adds	r3, #1
 80080bc:	6033      	str	r3, [r6, #0]
 80080be:	6823      	ldr	r3, [r4, #0]
 80080c0:	0699      	lsls	r1, r3, #26
 80080c2:	bf42      	ittt	mi
 80080c4:	6833      	ldrmi	r3, [r6, #0]
 80080c6:	3302      	addmi	r3, #2
 80080c8:	6033      	strmi	r3, [r6, #0]
 80080ca:	6825      	ldr	r5, [r4, #0]
 80080cc:	f015 0506 	ands.w	r5, r5, #6
 80080d0:	d106      	bne.n	80080e0 <_printf_common+0x48>
 80080d2:	f104 0a19 	add.w	sl, r4, #25
 80080d6:	68e3      	ldr	r3, [r4, #12]
 80080d8:	6832      	ldr	r2, [r6, #0]
 80080da:	1a9b      	subs	r3, r3, r2
 80080dc:	42ab      	cmp	r3, r5
 80080de:	dc26      	bgt.n	800812e <_printf_common+0x96>
 80080e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80080e4:	1e13      	subs	r3, r2, #0
 80080e6:	6822      	ldr	r2, [r4, #0]
 80080e8:	bf18      	it	ne
 80080ea:	2301      	movne	r3, #1
 80080ec:	0692      	lsls	r2, r2, #26
 80080ee:	d42b      	bmi.n	8008148 <_printf_common+0xb0>
 80080f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080f4:	4649      	mov	r1, r9
 80080f6:	4638      	mov	r0, r7
 80080f8:	47c0      	blx	r8
 80080fa:	3001      	adds	r0, #1
 80080fc:	d01e      	beq.n	800813c <_printf_common+0xa4>
 80080fe:	6823      	ldr	r3, [r4, #0]
 8008100:	68e5      	ldr	r5, [r4, #12]
 8008102:	6832      	ldr	r2, [r6, #0]
 8008104:	f003 0306 	and.w	r3, r3, #6
 8008108:	2b04      	cmp	r3, #4
 800810a:	bf08      	it	eq
 800810c:	1aad      	subeq	r5, r5, r2
 800810e:	68a3      	ldr	r3, [r4, #8]
 8008110:	6922      	ldr	r2, [r4, #16]
 8008112:	bf0c      	ite	eq
 8008114:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008118:	2500      	movne	r5, #0
 800811a:	4293      	cmp	r3, r2
 800811c:	bfc4      	itt	gt
 800811e:	1a9b      	subgt	r3, r3, r2
 8008120:	18ed      	addgt	r5, r5, r3
 8008122:	2600      	movs	r6, #0
 8008124:	341a      	adds	r4, #26
 8008126:	42b5      	cmp	r5, r6
 8008128:	d11a      	bne.n	8008160 <_printf_common+0xc8>
 800812a:	2000      	movs	r0, #0
 800812c:	e008      	b.n	8008140 <_printf_common+0xa8>
 800812e:	2301      	movs	r3, #1
 8008130:	4652      	mov	r2, sl
 8008132:	4649      	mov	r1, r9
 8008134:	4638      	mov	r0, r7
 8008136:	47c0      	blx	r8
 8008138:	3001      	adds	r0, #1
 800813a:	d103      	bne.n	8008144 <_printf_common+0xac>
 800813c:	f04f 30ff 	mov.w	r0, #4294967295
 8008140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008144:	3501      	adds	r5, #1
 8008146:	e7c6      	b.n	80080d6 <_printf_common+0x3e>
 8008148:	18e1      	adds	r1, r4, r3
 800814a:	1c5a      	adds	r2, r3, #1
 800814c:	2030      	movs	r0, #48	; 0x30
 800814e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008152:	4422      	add	r2, r4
 8008154:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008158:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800815c:	3302      	adds	r3, #2
 800815e:	e7c7      	b.n	80080f0 <_printf_common+0x58>
 8008160:	2301      	movs	r3, #1
 8008162:	4622      	mov	r2, r4
 8008164:	4649      	mov	r1, r9
 8008166:	4638      	mov	r0, r7
 8008168:	47c0      	blx	r8
 800816a:	3001      	adds	r0, #1
 800816c:	d0e6      	beq.n	800813c <_printf_common+0xa4>
 800816e:	3601      	adds	r6, #1
 8008170:	e7d9      	b.n	8008126 <_printf_common+0x8e>
	...

08008174 <_printf_i>:
 8008174:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008178:	460c      	mov	r4, r1
 800817a:	4691      	mov	r9, r2
 800817c:	7e27      	ldrb	r7, [r4, #24]
 800817e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008180:	2f78      	cmp	r7, #120	; 0x78
 8008182:	4680      	mov	r8, r0
 8008184:	469a      	mov	sl, r3
 8008186:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800818a:	d807      	bhi.n	800819c <_printf_i+0x28>
 800818c:	2f62      	cmp	r7, #98	; 0x62
 800818e:	d80a      	bhi.n	80081a6 <_printf_i+0x32>
 8008190:	2f00      	cmp	r7, #0
 8008192:	f000 80d8 	beq.w	8008346 <_printf_i+0x1d2>
 8008196:	2f58      	cmp	r7, #88	; 0x58
 8008198:	f000 80a3 	beq.w	80082e2 <_printf_i+0x16e>
 800819c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80081a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081a4:	e03a      	b.n	800821c <_printf_i+0xa8>
 80081a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081aa:	2b15      	cmp	r3, #21
 80081ac:	d8f6      	bhi.n	800819c <_printf_i+0x28>
 80081ae:	a001      	add	r0, pc, #4	; (adr r0, 80081b4 <_printf_i+0x40>)
 80081b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80081b4:	0800820d 	.word	0x0800820d
 80081b8:	08008221 	.word	0x08008221
 80081bc:	0800819d 	.word	0x0800819d
 80081c0:	0800819d 	.word	0x0800819d
 80081c4:	0800819d 	.word	0x0800819d
 80081c8:	0800819d 	.word	0x0800819d
 80081cc:	08008221 	.word	0x08008221
 80081d0:	0800819d 	.word	0x0800819d
 80081d4:	0800819d 	.word	0x0800819d
 80081d8:	0800819d 	.word	0x0800819d
 80081dc:	0800819d 	.word	0x0800819d
 80081e0:	0800832d 	.word	0x0800832d
 80081e4:	08008251 	.word	0x08008251
 80081e8:	0800830f 	.word	0x0800830f
 80081ec:	0800819d 	.word	0x0800819d
 80081f0:	0800819d 	.word	0x0800819d
 80081f4:	0800834f 	.word	0x0800834f
 80081f8:	0800819d 	.word	0x0800819d
 80081fc:	08008251 	.word	0x08008251
 8008200:	0800819d 	.word	0x0800819d
 8008204:	0800819d 	.word	0x0800819d
 8008208:	08008317 	.word	0x08008317
 800820c:	680b      	ldr	r3, [r1, #0]
 800820e:	1d1a      	adds	r2, r3, #4
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	600a      	str	r2, [r1, #0]
 8008214:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008218:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800821c:	2301      	movs	r3, #1
 800821e:	e0a3      	b.n	8008368 <_printf_i+0x1f4>
 8008220:	6825      	ldr	r5, [r4, #0]
 8008222:	6808      	ldr	r0, [r1, #0]
 8008224:	062e      	lsls	r6, r5, #24
 8008226:	f100 0304 	add.w	r3, r0, #4
 800822a:	d50a      	bpl.n	8008242 <_printf_i+0xce>
 800822c:	6805      	ldr	r5, [r0, #0]
 800822e:	600b      	str	r3, [r1, #0]
 8008230:	2d00      	cmp	r5, #0
 8008232:	da03      	bge.n	800823c <_printf_i+0xc8>
 8008234:	232d      	movs	r3, #45	; 0x2d
 8008236:	426d      	negs	r5, r5
 8008238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800823c:	485e      	ldr	r0, [pc, #376]	; (80083b8 <_printf_i+0x244>)
 800823e:	230a      	movs	r3, #10
 8008240:	e019      	b.n	8008276 <_printf_i+0x102>
 8008242:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008246:	6805      	ldr	r5, [r0, #0]
 8008248:	600b      	str	r3, [r1, #0]
 800824a:	bf18      	it	ne
 800824c:	b22d      	sxthne	r5, r5
 800824e:	e7ef      	b.n	8008230 <_printf_i+0xbc>
 8008250:	680b      	ldr	r3, [r1, #0]
 8008252:	6825      	ldr	r5, [r4, #0]
 8008254:	1d18      	adds	r0, r3, #4
 8008256:	6008      	str	r0, [r1, #0]
 8008258:	0628      	lsls	r0, r5, #24
 800825a:	d501      	bpl.n	8008260 <_printf_i+0xec>
 800825c:	681d      	ldr	r5, [r3, #0]
 800825e:	e002      	b.n	8008266 <_printf_i+0xf2>
 8008260:	0669      	lsls	r1, r5, #25
 8008262:	d5fb      	bpl.n	800825c <_printf_i+0xe8>
 8008264:	881d      	ldrh	r5, [r3, #0]
 8008266:	4854      	ldr	r0, [pc, #336]	; (80083b8 <_printf_i+0x244>)
 8008268:	2f6f      	cmp	r7, #111	; 0x6f
 800826a:	bf0c      	ite	eq
 800826c:	2308      	moveq	r3, #8
 800826e:	230a      	movne	r3, #10
 8008270:	2100      	movs	r1, #0
 8008272:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008276:	6866      	ldr	r6, [r4, #4]
 8008278:	60a6      	str	r6, [r4, #8]
 800827a:	2e00      	cmp	r6, #0
 800827c:	bfa2      	ittt	ge
 800827e:	6821      	ldrge	r1, [r4, #0]
 8008280:	f021 0104 	bicge.w	r1, r1, #4
 8008284:	6021      	strge	r1, [r4, #0]
 8008286:	b90d      	cbnz	r5, 800828c <_printf_i+0x118>
 8008288:	2e00      	cmp	r6, #0
 800828a:	d04d      	beq.n	8008328 <_printf_i+0x1b4>
 800828c:	4616      	mov	r6, r2
 800828e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008292:	fb03 5711 	mls	r7, r3, r1, r5
 8008296:	5dc7      	ldrb	r7, [r0, r7]
 8008298:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800829c:	462f      	mov	r7, r5
 800829e:	42bb      	cmp	r3, r7
 80082a0:	460d      	mov	r5, r1
 80082a2:	d9f4      	bls.n	800828e <_printf_i+0x11a>
 80082a4:	2b08      	cmp	r3, #8
 80082a6:	d10b      	bne.n	80082c0 <_printf_i+0x14c>
 80082a8:	6823      	ldr	r3, [r4, #0]
 80082aa:	07df      	lsls	r7, r3, #31
 80082ac:	d508      	bpl.n	80082c0 <_printf_i+0x14c>
 80082ae:	6923      	ldr	r3, [r4, #16]
 80082b0:	6861      	ldr	r1, [r4, #4]
 80082b2:	4299      	cmp	r1, r3
 80082b4:	bfde      	ittt	le
 80082b6:	2330      	movle	r3, #48	; 0x30
 80082b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80082bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80082c0:	1b92      	subs	r2, r2, r6
 80082c2:	6122      	str	r2, [r4, #16]
 80082c4:	f8cd a000 	str.w	sl, [sp]
 80082c8:	464b      	mov	r3, r9
 80082ca:	aa03      	add	r2, sp, #12
 80082cc:	4621      	mov	r1, r4
 80082ce:	4640      	mov	r0, r8
 80082d0:	f7ff fee2 	bl	8008098 <_printf_common>
 80082d4:	3001      	adds	r0, #1
 80082d6:	d14c      	bne.n	8008372 <_printf_i+0x1fe>
 80082d8:	f04f 30ff 	mov.w	r0, #4294967295
 80082dc:	b004      	add	sp, #16
 80082de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082e2:	4835      	ldr	r0, [pc, #212]	; (80083b8 <_printf_i+0x244>)
 80082e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80082e8:	6823      	ldr	r3, [r4, #0]
 80082ea:	680e      	ldr	r6, [r1, #0]
 80082ec:	061f      	lsls	r7, r3, #24
 80082ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80082f2:	600e      	str	r6, [r1, #0]
 80082f4:	d514      	bpl.n	8008320 <_printf_i+0x1ac>
 80082f6:	07d9      	lsls	r1, r3, #31
 80082f8:	bf44      	itt	mi
 80082fa:	f043 0320 	orrmi.w	r3, r3, #32
 80082fe:	6023      	strmi	r3, [r4, #0]
 8008300:	b91d      	cbnz	r5, 800830a <_printf_i+0x196>
 8008302:	6823      	ldr	r3, [r4, #0]
 8008304:	f023 0320 	bic.w	r3, r3, #32
 8008308:	6023      	str	r3, [r4, #0]
 800830a:	2310      	movs	r3, #16
 800830c:	e7b0      	b.n	8008270 <_printf_i+0xfc>
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	f043 0320 	orr.w	r3, r3, #32
 8008314:	6023      	str	r3, [r4, #0]
 8008316:	2378      	movs	r3, #120	; 0x78
 8008318:	4828      	ldr	r0, [pc, #160]	; (80083bc <_printf_i+0x248>)
 800831a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800831e:	e7e3      	b.n	80082e8 <_printf_i+0x174>
 8008320:	065e      	lsls	r6, r3, #25
 8008322:	bf48      	it	mi
 8008324:	b2ad      	uxthmi	r5, r5
 8008326:	e7e6      	b.n	80082f6 <_printf_i+0x182>
 8008328:	4616      	mov	r6, r2
 800832a:	e7bb      	b.n	80082a4 <_printf_i+0x130>
 800832c:	680b      	ldr	r3, [r1, #0]
 800832e:	6826      	ldr	r6, [r4, #0]
 8008330:	6960      	ldr	r0, [r4, #20]
 8008332:	1d1d      	adds	r5, r3, #4
 8008334:	600d      	str	r5, [r1, #0]
 8008336:	0635      	lsls	r5, r6, #24
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	d501      	bpl.n	8008340 <_printf_i+0x1cc>
 800833c:	6018      	str	r0, [r3, #0]
 800833e:	e002      	b.n	8008346 <_printf_i+0x1d2>
 8008340:	0671      	lsls	r1, r6, #25
 8008342:	d5fb      	bpl.n	800833c <_printf_i+0x1c8>
 8008344:	8018      	strh	r0, [r3, #0]
 8008346:	2300      	movs	r3, #0
 8008348:	6123      	str	r3, [r4, #16]
 800834a:	4616      	mov	r6, r2
 800834c:	e7ba      	b.n	80082c4 <_printf_i+0x150>
 800834e:	680b      	ldr	r3, [r1, #0]
 8008350:	1d1a      	adds	r2, r3, #4
 8008352:	600a      	str	r2, [r1, #0]
 8008354:	681e      	ldr	r6, [r3, #0]
 8008356:	6862      	ldr	r2, [r4, #4]
 8008358:	2100      	movs	r1, #0
 800835a:	4630      	mov	r0, r6
 800835c:	f7f7 ff48 	bl	80001f0 <memchr>
 8008360:	b108      	cbz	r0, 8008366 <_printf_i+0x1f2>
 8008362:	1b80      	subs	r0, r0, r6
 8008364:	6060      	str	r0, [r4, #4]
 8008366:	6863      	ldr	r3, [r4, #4]
 8008368:	6123      	str	r3, [r4, #16]
 800836a:	2300      	movs	r3, #0
 800836c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008370:	e7a8      	b.n	80082c4 <_printf_i+0x150>
 8008372:	6923      	ldr	r3, [r4, #16]
 8008374:	4632      	mov	r2, r6
 8008376:	4649      	mov	r1, r9
 8008378:	4640      	mov	r0, r8
 800837a:	47d0      	blx	sl
 800837c:	3001      	adds	r0, #1
 800837e:	d0ab      	beq.n	80082d8 <_printf_i+0x164>
 8008380:	6823      	ldr	r3, [r4, #0]
 8008382:	079b      	lsls	r3, r3, #30
 8008384:	d413      	bmi.n	80083ae <_printf_i+0x23a>
 8008386:	68e0      	ldr	r0, [r4, #12]
 8008388:	9b03      	ldr	r3, [sp, #12]
 800838a:	4298      	cmp	r0, r3
 800838c:	bfb8      	it	lt
 800838e:	4618      	movlt	r0, r3
 8008390:	e7a4      	b.n	80082dc <_printf_i+0x168>
 8008392:	2301      	movs	r3, #1
 8008394:	4632      	mov	r2, r6
 8008396:	4649      	mov	r1, r9
 8008398:	4640      	mov	r0, r8
 800839a:	47d0      	blx	sl
 800839c:	3001      	adds	r0, #1
 800839e:	d09b      	beq.n	80082d8 <_printf_i+0x164>
 80083a0:	3501      	adds	r5, #1
 80083a2:	68e3      	ldr	r3, [r4, #12]
 80083a4:	9903      	ldr	r1, [sp, #12]
 80083a6:	1a5b      	subs	r3, r3, r1
 80083a8:	42ab      	cmp	r3, r5
 80083aa:	dcf2      	bgt.n	8008392 <_printf_i+0x21e>
 80083ac:	e7eb      	b.n	8008386 <_printf_i+0x212>
 80083ae:	2500      	movs	r5, #0
 80083b0:	f104 0619 	add.w	r6, r4, #25
 80083b4:	e7f5      	b.n	80083a2 <_printf_i+0x22e>
 80083b6:	bf00      	nop
 80083b8:	0800f544 	.word	0x0800f544
 80083bc:	0800f555 	.word	0x0800f555

080083c0 <_scanf_float>:
 80083c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c4:	b087      	sub	sp, #28
 80083c6:	4617      	mov	r7, r2
 80083c8:	9303      	str	r3, [sp, #12]
 80083ca:	688b      	ldr	r3, [r1, #8]
 80083cc:	1e5a      	subs	r2, r3, #1
 80083ce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80083d2:	bf83      	ittte	hi
 80083d4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80083d8:	195b      	addhi	r3, r3, r5
 80083da:	9302      	strhi	r3, [sp, #8]
 80083dc:	2300      	movls	r3, #0
 80083de:	bf86      	itte	hi
 80083e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80083e4:	608b      	strhi	r3, [r1, #8]
 80083e6:	9302      	strls	r3, [sp, #8]
 80083e8:	680b      	ldr	r3, [r1, #0]
 80083ea:	468b      	mov	fp, r1
 80083ec:	2500      	movs	r5, #0
 80083ee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80083f2:	f84b 3b1c 	str.w	r3, [fp], #28
 80083f6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80083fa:	4680      	mov	r8, r0
 80083fc:	460c      	mov	r4, r1
 80083fe:	465e      	mov	r6, fp
 8008400:	46aa      	mov	sl, r5
 8008402:	46a9      	mov	r9, r5
 8008404:	9501      	str	r5, [sp, #4]
 8008406:	68a2      	ldr	r2, [r4, #8]
 8008408:	b152      	cbz	r2, 8008420 <_scanf_float+0x60>
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	2b4e      	cmp	r3, #78	; 0x4e
 8008410:	d864      	bhi.n	80084dc <_scanf_float+0x11c>
 8008412:	2b40      	cmp	r3, #64	; 0x40
 8008414:	d83c      	bhi.n	8008490 <_scanf_float+0xd0>
 8008416:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800841a:	b2c8      	uxtb	r0, r1
 800841c:	280e      	cmp	r0, #14
 800841e:	d93a      	bls.n	8008496 <_scanf_float+0xd6>
 8008420:	f1b9 0f00 	cmp.w	r9, #0
 8008424:	d003      	beq.n	800842e <_scanf_float+0x6e>
 8008426:	6823      	ldr	r3, [r4, #0]
 8008428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800842c:	6023      	str	r3, [r4, #0]
 800842e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008432:	f1ba 0f01 	cmp.w	sl, #1
 8008436:	f200 8113 	bhi.w	8008660 <_scanf_float+0x2a0>
 800843a:	455e      	cmp	r6, fp
 800843c:	f200 8105 	bhi.w	800864a <_scanf_float+0x28a>
 8008440:	2501      	movs	r5, #1
 8008442:	4628      	mov	r0, r5
 8008444:	b007      	add	sp, #28
 8008446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800844a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800844e:	2a0d      	cmp	r2, #13
 8008450:	d8e6      	bhi.n	8008420 <_scanf_float+0x60>
 8008452:	a101      	add	r1, pc, #4	; (adr r1, 8008458 <_scanf_float+0x98>)
 8008454:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008458:	08008597 	.word	0x08008597
 800845c:	08008421 	.word	0x08008421
 8008460:	08008421 	.word	0x08008421
 8008464:	08008421 	.word	0x08008421
 8008468:	080085f7 	.word	0x080085f7
 800846c:	080085cf 	.word	0x080085cf
 8008470:	08008421 	.word	0x08008421
 8008474:	08008421 	.word	0x08008421
 8008478:	080085a5 	.word	0x080085a5
 800847c:	08008421 	.word	0x08008421
 8008480:	08008421 	.word	0x08008421
 8008484:	08008421 	.word	0x08008421
 8008488:	08008421 	.word	0x08008421
 800848c:	0800855d 	.word	0x0800855d
 8008490:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008494:	e7db      	b.n	800844e <_scanf_float+0x8e>
 8008496:	290e      	cmp	r1, #14
 8008498:	d8c2      	bhi.n	8008420 <_scanf_float+0x60>
 800849a:	a001      	add	r0, pc, #4	; (adr r0, 80084a0 <_scanf_float+0xe0>)
 800849c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80084a0:	0800854f 	.word	0x0800854f
 80084a4:	08008421 	.word	0x08008421
 80084a8:	0800854f 	.word	0x0800854f
 80084ac:	080085e3 	.word	0x080085e3
 80084b0:	08008421 	.word	0x08008421
 80084b4:	080084fd 	.word	0x080084fd
 80084b8:	08008539 	.word	0x08008539
 80084bc:	08008539 	.word	0x08008539
 80084c0:	08008539 	.word	0x08008539
 80084c4:	08008539 	.word	0x08008539
 80084c8:	08008539 	.word	0x08008539
 80084cc:	08008539 	.word	0x08008539
 80084d0:	08008539 	.word	0x08008539
 80084d4:	08008539 	.word	0x08008539
 80084d8:	08008539 	.word	0x08008539
 80084dc:	2b6e      	cmp	r3, #110	; 0x6e
 80084de:	d809      	bhi.n	80084f4 <_scanf_float+0x134>
 80084e0:	2b60      	cmp	r3, #96	; 0x60
 80084e2:	d8b2      	bhi.n	800844a <_scanf_float+0x8a>
 80084e4:	2b54      	cmp	r3, #84	; 0x54
 80084e6:	d077      	beq.n	80085d8 <_scanf_float+0x218>
 80084e8:	2b59      	cmp	r3, #89	; 0x59
 80084ea:	d199      	bne.n	8008420 <_scanf_float+0x60>
 80084ec:	2d07      	cmp	r5, #7
 80084ee:	d197      	bne.n	8008420 <_scanf_float+0x60>
 80084f0:	2508      	movs	r5, #8
 80084f2:	e029      	b.n	8008548 <_scanf_float+0x188>
 80084f4:	2b74      	cmp	r3, #116	; 0x74
 80084f6:	d06f      	beq.n	80085d8 <_scanf_float+0x218>
 80084f8:	2b79      	cmp	r3, #121	; 0x79
 80084fa:	e7f6      	b.n	80084ea <_scanf_float+0x12a>
 80084fc:	6821      	ldr	r1, [r4, #0]
 80084fe:	05c8      	lsls	r0, r1, #23
 8008500:	d51a      	bpl.n	8008538 <_scanf_float+0x178>
 8008502:	9b02      	ldr	r3, [sp, #8]
 8008504:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008508:	6021      	str	r1, [r4, #0]
 800850a:	f109 0901 	add.w	r9, r9, #1
 800850e:	b11b      	cbz	r3, 8008518 <_scanf_float+0x158>
 8008510:	3b01      	subs	r3, #1
 8008512:	3201      	adds	r2, #1
 8008514:	9302      	str	r3, [sp, #8]
 8008516:	60a2      	str	r2, [r4, #8]
 8008518:	68a3      	ldr	r3, [r4, #8]
 800851a:	3b01      	subs	r3, #1
 800851c:	60a3      	str	r3, [r4, #8]
 800851e:	6923      	ldr	r3, [r4, #16]
 8008520:	3301      	adds	r3, #1
 8008522:	6123      	str	r3, [r4, #16]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	3b01      	subs	r3, #1
 8008528:	2b00      	cmp	r3, #0
 800852a:	607b      	str	r3, [r7, #4]
 800852c:	f340 8084 	ble.w	8008638 <_scanf_float+0x278>
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	3301      	adds	r3, #1
 8008534:	603b      	str	r3, [r7, #0]
 8008536:	e766      	b.n	8008406 <_scanf_float+0x46>
 8008538:	eb1a 0f05 	cmn.w	sl, r5
 800853c:	f47f af70 	bne.w	8008420 <_scanf_float+0x60>
 8008540:	6822      	ldr	r2, [r4, #0]
 8008542:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008546:	6022      	str	r2, [r4, #0]
 8008548:	f806 3b01 	strb.w	r3, [r6], #1
 800854c:	e7e4      	b.n	8008518 <_scanf_float+0x158>
 800854e:	6822      	ldr	r2, [r4, #0]
 8008550:	0610      	lsls	r0, r2, #24
 8008552:	f57f af65 	bpl.w	8008420 <_scanf_float+0x60>
 8008556:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800855a:	e7f4      	b.n	8008546 <_scanf_float+0x186>
 800855c:	f1ba 0f00 	cmp.w	sl, #0
 8008560:	d10e      	bne.n	8008580 <_scanf_float+0x1c0>
 8008562:	f1b9 0f00 	cmp.w	r9, #0
 8008566:	d10e      	bne.n	8008586 <_scanf_float+0x1c6>
 8008568:	6822      	ldr	r2, [r4, #0]
 800856a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800856e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008572:	d108      	bne.n	8008586 <_scanf_float+0x1c6>
 8008574:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008578:	6022      	str	r2, [r4, #0]
 800857a:	f04f 0a01 	mov.w	sl, #1
 800857e:	e7e3      	b.n	8008548 <_scanf_float+0x188>
 8008580:	f1ba 0f02 	cmp.w	sl, #2
 8008584:	d055      	beq.n	8008632 <_scanf_float+0x272>
 8008586:	2d01      	cmp	r5, #1
 8008588:	d002      	beq.n	8008590 <_scanf_float+0x1d0>
 800858a:	2d04      	cmp	r5, #4
 800858c:	f47f af48 	bne.w	8008420 <_scanf_float+0x60>
 8008590:	3501      	adds	r5, #1
 8008592:	b2ed      	uxtb	r5, r5
 8008594:	e7d8      	b.n	8008548 <_scanf_float+0x188>
 8008596:	f1ba 0f01 	cmp.w	sl, #1
 800859a:	f47f af41 	bne.w	8008420 <_scanf_float+0x60>
 800859e:	f04f 0a02 	mov.w	sl, #2
 80085a2:	e7d1      	b.n	8008548 <_scanf_float+0x188>
 80085a4:	b97d      	cbnz	r5, 80085c6 <_scanf_float+0x206>
 80085a6:	f1b9 0f00 	cmp.w	r9, #0
 80085aa:	f47f af3c 	bne.w	8008426 <_scanf_float+0x66>
 80085ae:	6822      	ldr	r2, [r4, #0]
 80085b0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80085b4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80085b8:	f47f af39 	bne.w	800842e <_scanf_float+0x6e>
 80085bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80085c0:	6022      	str	r2, [r4, #0]
 80085c2:	2501      	movs	r5, #1
 80085c4:	e7c0      	b.n	8008548 <_scanf_float+0x188>
 80085c6:	2d03      	cmp	r5, #3
 80085c8:	d0e2      	beq.n	8008590 <_scanf_float+0x1d0>
 80085ca:	2d05      	cmp	r5, #5
 80085cc:	e7de      	b.n	800858c <_scanf_float+0x1cc>
 80085ce:	2d02      	cmp	r5, #2
 80085d0:	f47f af26 	bne.w	8008420 <_scanf_float+0x60>
 80085d4:	2503      	movs	r5, #3
 80085d6:	e7b7      	b.n	8008548 <_scanf_float+0x188>
 80085d8:	2d06      	cmp	r5, #6
 80085da:	f47f af21 	bne.w	8008420 <_scanf_float+0x60>
 80085de:	2507      	movs	r5, #7
 80085e0:	e7b2      	b.n	8008548 <_scanf_float+0x188>
 80085e2:	6822      	ldr	r2, [r4, #0]
 80085e4:	0591      	lsls	r1, r2, #22
 80085e6:	f57f af1b 	bpl.w	8008420 <_scanf_float+0x60>
 80085ea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80085ee:	6022      	str	r2, [r4, #0]
 80085f0:	f8cd 9004 	str.w	r9, [sp, #4]
 80085f4:	e7a8      	b.n	8008548 <_scanf_float+0x188>
 80085f6:	6822      	ldr	r2, [r4, #0]
 80085f8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80085fc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008600:	d006      	beq.n	8008610 <_scanf_float+0x250>
 8008602:	0550      	lsls	r0, r2, #21
 8008604:	f57f af0c 	bpl.w	8008420 <_scanf_float+0x60>
 8008608:	f1b9 0f00 	cmp.w	r9, #0
 800860c:	f43f af0f 	beq.w	800842e <_scanf_float+0x6e>
 8008610:	0591      	lsls	r1, r2, #22
 8008612:	bf58      	it	pl
 8008614:	9901      	ldrpl	r1, [sp, #4]
 8008616:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800861a:	bf58      	it	pl
 800861c:	eba9 0101 	subpl.w	r1, r9, r1
 8008620:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008624:	bf58      	it	pl
 8008626:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800862a:	6022      	str	r2, [r4, #0]
 800862c:	f04f 0900 	mov.w	r9, #0
 8008630:	e78a      	b.n	8008548 <_scanf_float+0x188>
 8008632:	f04f 0a03 	mov.w	sl, #3
 8008636:	e787      	b.n	8008548 <_scanf_float+0x188>
 8008638:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800863c:	4639      	mov	r1, r7
 800863e:	4640      	mov	r0, r8
 8008640:	4798      	blx	r3
 8008642:	2800      	cmp	r0, #0
 8008644:	f43f aedf 	beq.w	8008406 <_scanf_float+0x46>
 8008648:	e6ea      	b.n	8008420 <_scanf_float+0x60>
 800864a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800864e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008652:	463a      	mov	r2, r7
 8008654:	4640      	mov	r0, r8
 8008656:	4798      	blx	r3
 8008658:	6923      	ldr	r3, [r4, #16]
 800865a:	3b01      	subs	r3, #1
 800865c:	6123      	str	r3, [r4, #16]
 800865e:	e6ec      	b.n	800843a <_scanf_float+0x7a>
 8008660:	1e6b      	subs	r3, r5, #1
 8008662:	2b06      	cmp	r3, #6
 8008664:	d825      	bhi.n	80086b2 <_scanf_float+0x2f2>
 8008666:	2d02      	cmp	r5, #2
 8008668:	d836      	bhi.n	80086d8 <_scanf_float+0x318>
 800866a:	455e      	cmp	r6, fp
 800866c:	f67f aee8 	bls.w	8008440 <_scanf_float+0x80>
 8008670:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008674:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008678:	463a      	mov	r2, r7
 800867a:	4640      	mov	r0, r8
 800867c:	4798      	blx	r3
 800867e:	6923      	ldr	r3, [r4, #16]
 8008680:	3b01      	subs	r3, #1
 8008682:	6123      	str	r3, [r4, #16]
 8008684:	e7f1      	b.n	800866a <_scanf_float+0x2aa>
 8008686:	9802      	ldr	r0, [sp, #8]
 8008688:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800868c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008690:	9002      	str	r0, [sp, #8]
 8008692:	463a      	mov	r2, r7
 8008694:	4640      	mov	r0, r8
 8008696:	4798      	blx	r3
 8008698:	6923      	ldr	r3, [r4, #16]
 800869a:	3b01      	subs	r3, #1
 800869c:	6123      	str	r3, [r4, #16]
 800869e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086a2:	fa5f fa8a 	uxtb.w	sl, sl
 80086a6:	f1ba 0f02 	cmp.w	sl, #2
 80086aa:	d1ec      	bne.n	8008686 <_scanf_float+0x2c6>
 80086ac:	3d03      	subs	r5, #3
 80086ae:	b2ed      	uxtb	r5, r5
 80086b0:	1b76      	subs	r6, r6, r5
 80086b2:	6823      	ldr	r3, [r4, #0]
 80086b4:	05da      	lsls	r2, r3, #23
 80086b6:	d52f      	bpl.n	8008718 <_scanf_float+0x358>
 80086b8:	055b      	lsls	r3, r3, #21
 80086ba:	d510      	bpl.n	80086de <_scanf_float+0x31e>
 80086bc:	455e      	cmp	r6, fp
 80086be:	f67f aebf 	bls.w	8008440 <_scanf_float+0x80>
 80086c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086ca:	463a      	mov	r2, r7
 80086cc:	4640      	mov	r0, r8
 80086ce:	4798      	blx	r3
 80086d0:	6923      	ldr	r3, [r4, #16]
 80086d2:	3b01      	subs	r3, #1
 80086d4:	6123      	str	r3, [r4, #16]
 80086d6:	e7f1      	b.n	80086bc <_scanf_float+0x2fc>
 80086d8:	46aa      	mov	sl, r5
 80086da:	9602      	str	r6, [sp, #8]
 80086dc:	e7df      	b.n	800869e <_scanf_float+0x2de>
 80086de:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80086e2:	6923      	ldr	r3, [r4, #16]
 80086e4:	2965      	cmp	r1, #101	; 0x65
 80086e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80086ea:	f106 35ff 	add.w	r5, r6, #4294967295
 80086ee:	6123      	str	r3, [r4, #16]
 80086f0:	d00c      	beq.n	800870c <_scanf_float+0x34c>
 80086f2:	2945      	cmp	r1, #69	; 0x45
 80086f4:	d00a      	beq.n	800870c <_scanf_float+0x34c>
 80086f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086fa:	463a      	mov	r2, r7
 80086fc:	4640      	mov	r0, r8
 80086fe:	4798      	blx	r3
 8008700:	6923      	ldr	r3, [r4, #16]
 8008702:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008706:	3b01      	subs	r3, #1
 8008708:	1eb5      	subs	r5, r6, #2
 800870a:	6123      	str	r3, [r4, #16]
 800870c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008710:	463a      	mov	r2, r7
 8008712:	4640      	mov	r0, r8
 8008714:	4798      	blx	r3
 8008716:	462e      	mov	r6, r5
 8008718:	6825      	ldr	r5, [r4, #0]
 800871a:	f015 0510 	ands.w	r5, r5, #16
 800871e:	d158      	bne.n	80087d2 <_scanf_float+0x412>
 8008720:	7035      	strb	r5, [r6, #0]
 8008722:	6823      	ldr	r3, [r4, #0]
 8008724:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800872c:	d11c      	bne.n	8008768 <_scanf_float+0x3a8>
 800872e:	9b01      	ldr	r3, [sp, #4]
 8008730:	454b      	cmp	r3, r9
 8008732:	eba3 0209 	sub.w	r2, r3, r9
 8008736:	d124      	bne.n	8008782 <_scanf_float+0x3c2>
 8008738:	2200      	movs	r2, #0
 800873a:	4659      	mov	r1, fp
 800873c:	4640      	mov	r0, r8
 800873e:	f000 ff21 	bl	8009584 <_strtod_r>
 8008742:	9b03      	ldr	r3, [sp, #12]
 8008744:	6821      	ldr	r1, [r4, #0]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f011 0f02 	tst.w	r1, #2
 800874c:	ec57 6b10 	vmov	r6, r7, d0
 8008750:	f103 0204 	add.w	r2, r3, #4
 8008754:	d020      	beq.n	8008798 <_scanf_float+0x3d8>
 8008756:	9903      	ldr	r1, [sp, #12]
 8008758:	600a      	str	r2, [r1, #0]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	e9c3 6700 	strd	r6, r7, [r3]
 8008760:	68e3      	ldr	r3, [r4, #12]
 8008762:	3301      	adds	r3, #1
 8008764:	60e3      	str	r3, [r4, #12]
 8008766:	e66c      	b.n	8008442 <_scanf_float+0x82>
 8008768:	9b04      	ldr	r3, [sp, #16]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d0e4      	beq.n	8008738 <_scanf_float+0x378>
 800876e:	9905      	ldr	r1, [sp, #20]
 8008770:	230a      	movs	r3, #10
 8008772:	462a      	mov	r2, r5
 8008774:	3101      	adds	r1, #1
 8008776:	4640      	mov	r0, r8
 8008778:	f000 ff8e 	bl	8009698 <_strtol_r>
 800877c:	9b04      	ldr	r3, [sp, #16]
 800877e:	9e05      	ldr	r6, [sp, #20]
 8008780:	1ac2      	subs	r2, r0, r3
 8008782:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008786:	429e      	cmp	r6, r3
 8008788:	bf28      	it	cs
 800878a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800878e:	4912      	ldr	r1, [pc, #72]	; (80087d8 <_scanf_float+0x418>)
 8008790:	4630      	mov	r0, r6
 8008792:	f000 f82b 	bl	80087ec <siprintf>
 8008796:	e7cf      	b.n	8008738 <_scanf_float+0x378>
 8008798:	f011 0f04 	tst.w	r1, #4
 800879c:	9903      	ldr	r1, [sp, #12]
 800879e:	600a      	str	r2, [r1, #0]
 80087a0:	d1db      	bne.n	800875a <_scanf_float+0x39a>
 80087a2:	f8d3 8000 	ldr.w	r8, [r3]
 80087a6:	ee10 2a10 	vmov	r2, s0
 80087aa:	ee10 0a10 	vmov	r0, s0
 80087ae:	463b      	mov	r3, r7
 80087b0:	4639      	mov	r1, r7
 80087b2:	f7f8 f9c3 	bl	8000b3c <__aeabi_dcmpun>
 80087b6:	b128      	cbz	r0, 80087c4 <_scanf_float+0x404>
 80087b8:	4808      	ldr	r0, [pc, #32]	; (80087dc <_scanf_float+0x41c>)
 80087ba:	f000 f811 	bl	80087e0 <nanf>
 80087be:	ed88 0a00 	vstr	s0, [r8]
 80087c2:	e7cd      	b.n	8008760 <_scanf_float+0x3a0>
 80087c4:	4630      	mov	r0, r6
 80087c6:	4639      	mov	r1, r7
 80087c8:	f7f8 fa16 	bl	8000bf8 <__aeabi_d2f>
 80087cc:	f8c8 0000 	str.w	r0, [r8]
 80087d0:	e7c6      	b.n	8008760 <_scanf_float+0x3a0>
 80087d2:	2500      	movs	r5, #0
 80087d4:	e635      	b.n	8008442 <_scanf_float+0x82>
 80087d6:	bf00      	nop
 80087d8:	0800f566 	.word	0x0800f566
 80087dc:	0800f99b 	.word	0x0800f99b

080087e0 <nanf>:
 80087e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80087e8 <nanf+0x8>
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop
 80087e8:	7fc00000 	.word	0x7fc00000

080087ec <siprintf>:
 80087ec:	b40e      	push	{r1, r2, r3}
 80087ee:	b500      	push	{lr}
 80087f0:	b09c      	sub	sp, #112	; 0x70
 80087f2:	ab1d      	add	r3, sp, #116	; 0x74
 80087f4:	9002      	str	r0, [sp, #8]
 80087f6:	9006      	str	r0, [sp, #24]
 80087f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80087fc:	4809      	ldr	r0, [pc, #36]	; (8008824 <siprintf+0x38>)
 80087fe:	9107      	str	r1, [sp, #28]
 8008800:	9104      	str	r1, [sp, #16]
 8008802:	4909      	ldr	r1, [pc, #36]	; (8008828 <siprintf+0x3c>)
 8008804:	f853 2b04 	ldr.w	r2, [r3], #4
 8008808:	9105      	str	r1, [sp, #20]
 800880a:	6800      	ldr	r0, [r0, #0]
 800880c:	9301      	str	r3, [sp, #4]
 800880e:	a902      	add	r1, sp, #8
 8008810:	f002 ff4e 	bl	800b6b0 <_svfiprintf_r>
 8008814:	9b02      	ldr	r3, [sp, #8]
 8008816:	2200      	movs	r2, #0
 8008818:	701a      	strb	r2, [r3, #0]
 800881a:	b01c      	add	sp, #112	; 0x70
 800881c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008820:	b003      	add	sp, #12
 8008822:	4770      	bx	lr
 8008824:	20000028 	.word	0x20000028
 8008828:	ffff0208 	.word	0xffff0208

0800882c <siscanf>:
 800882c:	b40e      	push	{r1, r2, r3}
 800882e:	b510      	push	{r4, lr}
 8008830:	b09f      	sub	sp, #124	; 0x7c
 8008832:	ac21      	add	r4, sp, #132	; 0x84
 8008834:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008838:	f854 2b04 	ldr.w	r2, [r4], #4
 800883c:	9201      	str	r2, [sp, #4]
 800883e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008842:	9004      	str	r0, [sp, #16]
 8008844:	9008      	str	r0, [sp, #32]
 8008846:	f7f7 fccb 	bl	80001e0 <strlen>
 800884a:	4b0c      	ldr	r3, [pc, #48]	; (800887c <siscanf+0x50>)
 800884c:	9005      	str	r0, [sp, #20]
 800884e:	9009      	str	r0, [sp, #36]	; 0x24
 8008850:	930d      	str	r3, [sp, #52]	; 0x34
 8008852:	480b      	ldr	r0, [pc, #44]	; (8008880 <siscanf+0x54>)
 8008854:	9a01      	ldr	r2, [sp, #4]
 8008856:	6800      	ldr	r0, [r0, #0]
 8008858:	9403      	str	r4, [sp, #12]
 800885a:	2300      	movs	r3, #0
 800885c:	9311      	str	r3, [sp, #68]	; 0x44
 800885e:	9316      	str	r3, [sp, #88]	; 0x58
 8008860:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008864:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008868:	a904      	add	r1, sp, #16
 800886a:	4623      	mov	r3, r4
 800886c:	f003 f87a 	bl	800b964 <__ssvfiscanf_r>
 8008870:	b01f      	add	sp, #124	; 0x7c
 8008872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008876:	b003      	add	sp, #12
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	080088a7 	.word	0x080088a7
 8008880:	20000028 	.word	0x20000028

08008884 <__sread>:
 8008884:	b510      	push	{r4, lr}
 8008886:	460c      	mov	r4, r1
 8008888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800888c:	f003 fb2e 	bl	800beec <_read_r>
 8008890:	2800      	cmp	r0, #0
 8008892:	bfab      	itete	ge
 8008894:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008896:	89a3      	ldrhlt	r3, [r4, #12]
 8008898:	181b      	addge	r3, r3, r0
 800889a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800889e:	bfac      	ite	ge
 80088a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80088a2:	81a3      	strhlt	r3, [r4, #12]
 80088a4:	bd10      	pop	{r4, pc}

080088a6 <__seofread>:
 80088a6:	2000      	movs	r0, #0
 80088a8:	4770      	bx	lr

080088aa <__swrite>:
 80088aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ae:	461f      	mov	r7, r3
 80088b0:	898b      	ldrh	r3, [r1, #12]
 80088b2:	05db      	lsls	r3, r3, #23
 80088b4:	4605      	mov	r5, r0
 80088b6:	460c      	mov	r4, r1
 80088b8:	4616      	mov	r6, r2
 80088ba:	d505      	bpl.n	80088c8 <__swrite+0x1e>
 80088bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088c0:	2302      	movs	r3, #2
 80088c2:	2200      	movs	r2, #0
 80088c4:	f002 f8f8 	bl	800aab8 <_lseek_r>
 80088c8:	89a3      	ldrh	r3, [r4, #12]
 80088ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088d2:	81a3      	strh	r3, [r4, #12]
 80088d4:	4632      	mov	r2, r6
 80088d6:	463b      	mov	r3, r7
 80088d8:	4628      	mov	r0, r5
 80088da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088de:	f000 bedd 	b.w	800969c <_write_r>

080088e2 <__sseek>:
 80088e2:	b510      	push	{r4, lr}
 80088e4:	460c      	mov	r4, r1
 80088e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088ea:	f002 f8e5 	bl	800aab8 <_lseek_r>
 80088ee:	1c43      	adds	r3, r0, #1
 80088f0:	89a3      	ldrh	r3, [r4, #12]
 80088f2:	bf15      	itete	ne
 80088f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80088f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80088fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80088fe:	81a3      	strheq	r3, [r4, #12]
 8008900:	bf18      	it	ne
 8008902:	81a3      	strhne	r3, [r4, #12]
 8008904:	bd10      	pop	{r4, pc}

08008906 <__sclose>:
 8008906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800890a:	f000 bed9 	b.w	80096c0 <_close_r>

0800890e <strncmp>:
 800890e:	b510      	push	{r4, lr}
 8008910:	b16a      	cbz	r2, 800892e <strncmp+0x20>
 8008912:	3901      	subs	r1, #1
 8008914:	1884      	adds	r4, r0, r2
 8008916:	f810 3b01 	ldrb.w	r3, [r0], #1
 800891a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800891e:	4293      	cmp	r3, r2
 8008920:	d103      	bne.n	800892a <strncmp+0x1c>
 8008922:	42a0      	cmp	r0, r4
 8008924:	d001      	beq.n	800892a <strncmp+0x1c>
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1f5      	bne.n	8008916 <strncmp+0x8>
 800892a:	1a98      	subs	r0, r3, r2
 800892c:	bd10      	pop	{r4, pc}
 800892e:	4610      	mov	r0, r2
 8008930:	e7fc      	b.n	800892c <strncmp+0x1e>

08008932 <sulp>:
 8008932:	b570      	push	{r4, r5, r6, lr}
 8008934:	4604      	mov	r4, r0
 8008936:	460d      	mov	r5, r1
 8008938:	ec45 4b10 	vmov	d0, r4, r5
 800893c:	4616      	mov	r6, r2
 800893e:	f002 fc53 	bl	800b1e8 <__ulp>
 8008942:	ec51 0b10 	vmov	r0, r1, d0
 8008946:	b17e      	cbz	r6, 8008968 <sulp+0x36>
 8008948:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800894c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008950:	2b00      	cmp	r3, #0
 8008952:	dd09      	ble.n	8008968 <sulp+0x36>
 8008954:	051b      	lsls	r3, r3, #20
 8008956:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800895a:	2400      	movs	r4, #0
 800895c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008960:	4622      	mov	r2, r4
 8008962:	462b      	mov	r3, r5
 8008964:	f7f7 fe50 	bl	8000608 <__aeabi_dmul>
 8008968:	bd70      	pop	{r4, r5, r6, pc}
 800896a:	0000      	movs	r0, r0
 800896c:	0000      	movs	r0, r0
	...

08008970 <_strtod_l>:
 8008970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008974:	b0a3      	sub	sp, #140	; 0x8c
 8008976:	461f      	mov	r7, r3
 8008978:	2300      	movs	r3, #0
 800897a:	931e      	str	r3, [sp, #120]	; 0x78
 800897c:	4ba4      	ldr	r3, [pc, #656]	; (8008c10 <_strtod_l+0x2a0>)
 800897e:	9219      	str	r2, [sp, #100]	; 0x64
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	9307      	str	r3, [sp, #28]
 8008984:	4604      	mov	r4, r0
 8008986:	4618      	mov	r0, r3
 8008988:	4688      	mov	r8, r1
 800898a:	f7f7 fc29 	bl	80001e0 <strlen>
 800898e:	f04f 0a00 	mov.w	sl, #0
 8008992:	4605      	mov	r5, r0
 8008994:	f04f 0b00 	mov.w	fp, #0
 8008998:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800899c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800899e:	781a      	ldrb	r2, [r3, #0]
 80089a0:	2a2b      	cmp	r2, #43	; 0x2b
 80089a2:	d04c      	beq.n	8008a3e <_strtod_l+0xce>
 80089a4:	d839      	bhi.n	8008a1a <_strtod_l+0xaa>
 80089a6:	2a0d      	cmp	r2, #13
 80089a8:	d832      	bhi.n	8008a10 <_strtod_l+0xa0>
 80089aa:	2a08      	cmp	r2, #8
 80089ac:	d832      	bhi.n	8008a14 <_strtod_l+0xa4>
 80089ae:	2a00      	cmp	r2, #0
 80089b0:	d03c      	beq.n	8008a2c <_strtod_l+0xbc>
 80089b2:	2300      	movs	r3, #0
 80089b4:	930e      	str	r3, [sp, #56]	; 0x38
 80089b6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80089b8:	7833      	ldrb	r3, [r6, #0]
 80089ba:	2b30      	cmp	r3, #48	; 0x30
 80089bc:	f040 80b4 	bne.w	8008b28 <_strtod_l+0x1b8>
 80089c0:	7873      	ldrb	r3, [r6, #1]
 80089c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80089c6:	2b58      	cmp	r3, #88	; 0x58
 80089c8:	d16c      	bne.n	8008aa4 <_strtod_l+0x134>
 80089ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089cc:	9301      	str	r3, [sp, #4]
 80089ce:	ab1e      	add	r3, sp, #120	; 0x78
 80089d0:	9702      	str	r7, [sp, #8]
 80089d2:	9300      	str	r3, [sp, #0]
 80089d4:	4a8f      	ldr	r2, [pc, #572]	; (8008c14 <_strtod_l+0x2a4>)
 80089d6:	ab1f      	add	r3, sp, #124	; 0x7c
 80089d8:	a91d      	add	r1, sp, #116	; 0x74
 80089da:	4620      	mov	r0, r4
 80089dc:	f001 fd60 	bl	800a4a0 <__gethex>
 80089e0:	f010 0707 	ands.w	r7, r0, #7
 80089e4:	4605      	mov	r5, r0
 80089e6:	d005      	beq.n	80089f4 <_strtod_l+0x84>
 80089e8:	2f06      	cmp	r7, #6
 80089ea:	d12a      	bne.n	8008a42 <_strtod_l+0xd2>
 80089ec:	3601      	adds	r6, #1
 80089ee:	2300      	movs	r3, #0
 80089f0:	961d      	str	r6, [sp, #116]	; 0x74
 80089f2:	930e      	str	r3, [sp, #56]	; 0x38
 80089f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	f040 8596 	bne.w	8009528 <_strtod_l+0xbb8>
 80089fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089fe:	b1db      	cbz	r3, 8008a38 <_strtod_l+0xc8>
 8008a00:	4652      	mov	r2, sl
 8008a02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008a06:	ec43 2b10 	vmov	d0, r2, r3
 8008a0a:	b023      	add	sp, #140	; 0x8c
 8008a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a10:	2a20      	cmp	r2, #32
 8008a12:	d1ce      	bne.n	80089b2 <_strtod_l+0x42>
 8008a14:	3301      	adds	r3, #1
 8008a16:	931d      	str	r3, [sp, #116]	; 0x74
 8008a18:	e7c0      	b.n	800899c <_strtod_l+0x2c>
 8008a1a:	2a2d      	cmp	r2, #45	; 0x2d
 8008a1c:	d1c9      	bne.n	80089b2 <_strtod_l+0x42>
 8008a1e:	2201      	movs	r2, #1
 8008a20:	920e      	str	r2, [sp, #56]	; 0x38
 8008a22:	1c5a      	adds	r2, r3, #1
 8008a24:	921d      	str	r2, [sp, #116]	; 0x74
 8008a26:	785b      	ldrb	r3, [r3, #1]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1c4      	bne.n	80089b6 <_strtod_l+0x46>
 8008a2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008a2e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f040 8576 	bne.w	8009524 <_strtod_l+0xbb4>
 8008a38:	4652      	mov	r2, sl
 8008a3a:	465b      	mov	r3, fp
 8008a3c:	e7e3      	b.n	8008a06 <_strtod_l+0x96>
 8008a3e:	2200      	movs	r2, #0
 8008a40:	e7ee      	b.n	8008a20 <_strtod_l+0xb0>
 8008a42:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008a44:	b13a      	cbz	r2, 8008a56 <_strtod_l+0xe6>
 8008a46:	2135      	movs	r1, #53	; 0x35
 8008a48:	a820      	add	r0, sp, #128	; 0x80
 8008a4a:	f002 fcd8 	bl	800b3fe <__copybits>
 8008a4e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008a50:	4620      	mov	r0, r4
 8008a52:	f002 f89d 	bl	800ab90 <_Bfree>
 8008a56:	3f01      	subs	r7, #1
 8008a58:	2f05      	cmp	r7, #5
 8008a5a:	d807      	bhi.n	8008a6c <_strtod_l+0xfc>
 8008a5c:	e8df f007 	tbb	[pc, r7]
 8008a60:	1d180b0e 	.word	0x1d180b0e
 8008a64:	030e      	.short	0x030e
 8008a66:	f04f 0b00 	mov.w	fp, #0
 8008a6a:	46da      	mov	sl, fp
 8008a6c:	0728      	lsls	r0, r5, #28
 8008a6e:	d5c1      	bpl.n	80089f4 <_strtod_l+0x84>
 8008a70:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008a74:	e7be      	b.n	80089f4 <_strtod_l+0x84>
 8008a76:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8008a7a:	e7f7      	b.n	8008a6c <_strtod_l+0xfc>
 8008a7c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8008a80:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008a82:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008a86:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008a8a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008a8e:	e7ed      	b.n	8008a6c <_strtod_l+0xfc>
 8008a90:	f8df b184 	ldr.w	fp, [pc, #388]	; 8008c18 <_strtod_l+0x2a8>
 8008a94:	f04f 0a00 	mov.w	sl, #0
 8008a98:	e7e8      	b.n	8008a6c <_strtod_l+0xfc>
 8008a9a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008a9e:	f04f 3aff 	mov.w	sl, #4294967295
 8008aa2:	e7e3      	b.n	8008a6c <_strtod_l+0xfc>
 8008aa4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008aa6:	1c5a      	adds	r2, r3, #1
 8008aa8:	921d      	str	r2, [sp, #116]	; 0x74
 8008aaa:	785b      	ldrb	r3, [r3, #1]
 8008aac:	2b30      	cmp	r3, #48	; 0x30
 8008aae:	d0f9      	beq.n	8008aa4 <_strtod_l+0x134>
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d09f      	beq.n	80089f4 <_strtod_l+0x84>
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	f04f 0900 	mov.w	r9, #0
 8008aba:	9304      	str	r3, [sp, #16]
 8008abc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008abe:	930a      	str	r3, [sp, #40]	; 0x28
 8008ac0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008ac4:	464f      	mov	r7, r9
 8008ac6:	220a      	movs	r2, #10
 8008ac8:	981d      	ldr	r0, [sp, #116]	; 0x74
 8008aca:	7806      	ldrb	r6, [r0, #0]
 8008acc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008ad0:	b2d9      	uxtb	r1, r3
 8008ad2:	2909      	cmp	r1, #9
 8008ad4:	d92a      	bls.n	8008b2c <_strtod_l+0x1bc>
 8008ad6:	9907      	ldr	r1, [sp, #28]
 8008ad8:	462a      	mov	r2, r5
 8008ada:	f7ff ff18 	bl	800890e <strncmp>
 8008ade:	b398      	cbz	r0, 8008b48 <_strtod_l+0x1d8>
 8008ae0:	2000      	movs	r0, #0
 8008ae2:	4633      	mov	r3, r6
 8008ae4:	463d      	mov	r5, r7
 8008ae6:	9007      	str	r0, [sp, #28]
 8008ae8:	4602      	mov	r2, r0
 8008aea:	2b65      	cmp	r3, #101	; 0x65
 8008aec:	d001      	beq.n	8008af2 <_strtod_l+0x182>
 8008aee:	2b45      	cmp	r3, #69	; 0x45
 8008af0:	d118      	bne.n	8008b24 <_strtod_l+0x1b4>
 8008af2:	b91d      	cbnz	r5, 8008afc <_strtod_l+0x18c>
 8008af4:	9b04      	ldr	r3, [sp, #16]
 8008af6:	4303      	orrs	r3, r0
 8008af8:	d098      	beq.n	8008a2c <_strtod_l+0xbc>
 8008afa:	2500      	movs	r5, #0
 8008afc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008b00:	f108 0301 	add.w	r3, r8, #1
 8008b04:	931d      	str	r3, [sp, #116]	; 0x74
 8008b06:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008b0a:	2b2b      	cmp	r3, #43	; 0x2b
 8008b0c:	d075      	beq.n	8008bfa <_strtod_l+0x28a>
 8008b0e:	2b2d      	cmp	r3, #45	; 0x2d
 8008b10:	d07b      	beq.n	8008c0a <_strtod_l+0x29a>
 8008b12:	f04f 0c00 	mov.w	ip, #0
 8008b16:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008b1a:	2909      	cmp	r1, #9
 8008b1c:	f240 8082 	bls.w	8008c24 <_strtod_l+0x2b4>
 8008b20:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008b24:	2600      	movs	r6, #0
 8008b26:	e09d      	b.n	8008c64 <_strtod_l+0x2f4>
 8008b28:	2300      	movs	r3, #0
 8008b2a:	e7c4      	b.n	8008ab6 <_strtod_l+0x146>
 8008b2c:	2f08      	cmp	r7, #8
 8008b2e:	bfd8      	it	le
 8008b30:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008b32:	f100 0001 	add.w	r0, r0, #1
 8008b36:	bfda      	itte	le
 8008b38:	fb02 3301 	mlale	r3, r2, r1, r3
 8008b3c:	9309      	strle	r3, [sp, #36]	; 0x24
 8008b3e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008b42:	3701      	adds	r7, #1
 8008b44:	901d      	str	r0, [sp, #116]	; 0x74
 8008b46:	e7bf      	b.n	8008ac8 <_strtod_l+0x158>
 8008b48:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b4a:	195a      	adds	r2, r3, r5
 8008b4c:	921d      	str	r2, [sp, #116]	; 0x74
 8008b4e:	5d5b      	ldrb	r3, [r3, r5]
 8008b50:	2f00      	cmp	r7, #0
 8008b52:	d037      	beq.n	8008bc4 <_strtod_l+0x254>
 8008b54:	9007      	str	r0, [sp, #28]
 8008b56:	463d      	mov	r5, r7
 8008b58:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008b5c:	2a09      	cmp	r2, #9
 8008b5e:	d912      	bls.n	8008b86 <_strtod_l+0x216>
 8008b60:	2201      	movs	r2, #1
 8008b62:	e7c2      	b.n	8008aea <_strtod_l+0x17a>
 8008b64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b66:	1c5a      	adds	r2, r3, #1
 8008b68:	921d      	str	r2, [sp, #116]	; 0x74
 8008b6a:	785b      	ldrb	r3, [r3, #1]
 8008b6c:	3001      	adds	r0, #1
 8008b6e:	2b30      	cmp	r3, #48	; 0x30
 8008b70:	d0f8      	beq.n	8008b64 <_strtod_l+0x1f4>
 8008b72:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008b76:	2a08      	cmp	r2, #8
 8008b78:	f200 84db 	bhi.w	8009532 <_strtod_l+0xbc2>
 8008b7c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008b7e:	9007      	str	r0, [sp, #28]
 8008b80:	2000      	movs	r0, #0
 8008b82:	920a      	str	r2, [sp, #40]	; 0x28
 8008b84:	4605      	mov	r5, r0
 8008b86:	3b30      	subs	r3, #48	; 0x30
 8008b88:	f100 0201 	add.w	r2, r0, #1
 8008b8c:	d014      	beq.n	8008bb8 <_strtod_l+0x248>
 8008b8e:	9907      	ldr	r1, [sp, #28]
 8008b90:	4411      	add	r1, r2
 8008b92:	9107      	str	r1, [sp, #28]
 8008b94:	462a      	mov	r2, r5
 8008b96:	eb00 0e05 	add.w	lr, r0, r5
 8008b9a:	210a      	movs	r1, #10
 8008b9c:	4572      	cmp	r2, lr
 8008b9e:	d113      	bne.n	8008bc8 <_strtod_l+0x258>
 8008ba0:	182a      	adds	r2, r5, r0
 8008ba2:	2a08      	cmp	r2, #8
 8008ba4:	f105 0501 	add.w	r5, r5, #1
 8008ba8:	4405      	add	r5, r0
 8008baa:	dc1c      	bgt.n	8008be6 <_strtod_l+0x276>
 8008bac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bae:	220a      	movs	r2, #10
 8008bb0:	fb02 3301 	mla	r3, r2, r1, r3
 8008bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008bba:	1c59      	adds	r1, r3, #1
 8008bbc:	911d      	str	r1, [sp, #116]	; 0x74
 8008bbe:	785b      	ldrb	r3, [r3, #1]
 8008bc0:	4610      	mov	r0, r2
 8008bc2:	e7c9      	b.n	8008b58 <_strtod_l+0x1e8>
 8008bc4:	4638      	mov	r0, r7
 8008bc6:	e7d2      	b.n	8008b6e <_strtod_l+0x1fe>
 8008bc8:	2a08      	cmp	r2, #8
 8008bca:	dc04      	bgt.n	8008bd6 <_strtod_l+0x266>
 8008bcc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008bce:	434e      	muls	r6, r1
 8008bd0:	9609      	str	r6, [sp, #36]	; 0x24
 8008bd2:	3201      	adds	r2, #1
 8008bd4:	e7e2      	b.n	8008b9c <_strtod_l+0x22c>
 8008bd6:	f102 0c01 	add.w	ip, r2, #1
 8008bda:	f1bc 0f10 	cmp.w	ip, #16
 8008bde:	bfd8      	it	le
 8008be0:	fb01 f909 	mulle.w	r9, r1, r9
 8008be4:	e7f5      	b.n	8008bd2 <_strtod_l+0x262>
 8008be6:	2d10      	cmp	r5, #16
 8008be8:	bfdc      	itt	le
 8008bea:	220a      	movle	r2, #10
 8008bec:	fb02 3909 	mlale	r9, r2, r9, r3
 8008bf0:	e7e1      	b.n	8008bb6 <_strtod_l+0x246>
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	9307      	str	r3, [sp, #28]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	e77c      	b.n	8008af4 <_strtod_l+0x184>
 8008bfa:	f04f 0c00 	mov.w	ip, #0
 8008bfe:	f108 0302 	add.w	r3, r8, #2
 8008c02:	931d      	str	r3, [sp, #116]	; 0x74
 8008c04:	f898 3002 	ldrb.w	r3, [r8, #2]
 8008c08:	e785      	b.n	8008b16 <_strtod_l+0x1a6>
 8008c0a:	f04f 0c01 	mov.w	ip, #1
 8008c0e:	e7f6      	b.n	8008bfe <_strtod_l+0x28e>
 8008c10:	0800f7c0 	.word	0x0800f7c0
 8008c14:	0800f56c 	.word	0x0800f56c
 8008c18:	7ff00000 	.word	0x7ff00000
 8008c1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c1e:	1c59      	adds	r1, r3, #1
 8008c20:	911d      	str	r1, [sp, #116]	; 0x74
 8008c22:	785b      	ldrb	r3, [r3, #1]
 8008c24:	2b30      	cmp	r3, #48	; 0x30
 8008c26:	d0f9      	beq.n	8008c1c <_strtod_l+0x2ac>
 8008c28:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8008c2c:	2908      	cmp	r1, #8
 8008c2e:	f63f af79 	bhi.w	8008b24 <_strtod_l+0x1b4>
 8008c32:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008c36:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c38:	9308      	str	r3, [sp, #32]
 8008c3a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c3c:	1c59      	adds	r1, r3, #1
 8008c3e:	911d      	str	r1, [sp, #116]	; 0x74
 8008c40:	785b      	ldrb	r3, [r3, #1]
 8008c42:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8008c46:	2e09      	cmp	r6, #9
 8008c48:	d937      	bls.n	8008cba <_strtod_l+0x34a>
 8008c4a:	9e08      	ldr	r6, [sp, #32]
 8008c4c:	1b89      	subs	r1, r1, r6
 8008c4e:	2908      	cmp	r1, #8
 8008c50:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008c54:	dc02      	bgt.n	8008c5c <_strtod_l+0x2ec>
 8008c56:	4576      	cmp	r6, lr
 8008c58:	bfa8      	it	ge
 8008c5a:	4676      	movge	r6, lr
 8008c5c:	f1bc 0f00 	cmp.w	ip, #0
 8008c60:	d000      	beq.n	8008c64 <_strtod_l+0x2f4>
 8008c62:	4276      	negs	r6, r6
 8008c64:	2d00      	cmp	r5, #0
 8008c66:	d14f      	bne.n	8008d08 <_strtod_l+0x398>
 8008c68:	9904      	ldr	r1, [sp, #16]
 8008c6a:	4301      	orrs	r1, r0
 8008c6c:	f47f aec2 	bne.w	80089f4 <_strtod_l+0x84>
 8008c70:	2a00      	cmp	r2, #0
 8008c72:	f47f aedb 	bne.w	8008a2c <_strtod_l+0xbc>
 8008c76:	2b69      	cmp	r3, #105	; 0x69
 8008c78:	d027      	beq.n	8008cca <_strtod_l+0x35a>
 8008c7a:	dc24      	bgt.n	8008cc6 <_strtod_l+0x356>
 8008c7c:	2b49      	cmp	r3, #73	; 0x49
 8008c7e:	d024      	beq.n	8008cca <_strtod_l+0x35a>
 8008c80:	2b4e      	cmp	r3, #78	; 0x4e
 8008c82:	f47f aed3 	bne.w	8008a2c <_strtod_l+0xbc>
 8008c86:	499e      	ldr	r1, [pc, #632]	; (8008f00 <_strtod_l+0x590>)
 8008c88:	a81d      	add	r0, sp, #116	; 0x74
 8008c8a:	f001 fe61 	bl	800a950 <__match>
 8008c8e:	2800      	cmp	r0, #0
 8008c90:	f43f aecc 	beq.w	8008a2c <_strtod_l+0xbc>
 8008c94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	2b28      	cmp	r3, #40	; 0x28
 8008c9a:	d12d      	bne.n	8008cf8 <_strtod_l+0x388>
 8008c9c:	4999      	ldr	r1, [pc, #612]	; (8008f04 <_strtod_l+0x594>)
 8008c9e:	aa20      	add	r2, sp, #128	; 0x80
 8008ca0:	a81d      	add	r0, sp, #116	; 0x74
 8008ca2:	f001 fe69 	bl	800a978 <__hexnan>
 8008ca6:	2805      	cmp	r0, #5
 8008ca8:	d126      	bne.n	8008cf8 <_strtod_l+0x388>
 8008caa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cac:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008cb0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008cb4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008cb8:	e69c      	b.n	80089f4 <_strtod_l+0x84>
 8008cba:	210a      	movs	r1, #10
 8008cbc:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008cc0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008cc4:	e7b9      	b.n	8008c3a <_strtod_l+0x2ca>
 8008cc6:	2b6e      	cmp	r3, #110	; 0x6e
 8008cc8:	e7db      	b.n	8008c82 <_strtod_l+0x312>
 8008cca:	498f      	ldr	r1, [pc, #572]	; (8008f08 <_strtod_l+0x598>)
 8008ccc:	a81d      	add	r0, sp, #116	; 0x74
 8008cce:	f001 fe3f 	bl	800a950 <__match>
 8008cd2:	2800      	cmp	r0, #0
 8008cd4:	f43f aeaa 	beq.w	8008a2c <_strtod_l+0xbc>
 8008cd8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008cda:	498c      	ldr	r1, [pc, #560]	; (8008f0c <_strtod_l+0x59c>)
 8008cdc:	3b01      	subs	r3, #1
 8008cde:	a81d      	add	r0, sp, #116	; 0x74
 8008ce0:	931d      	str	r3, [sp, #116]	; 0x74
 8008ce2:	f001 fe35 	bl	800a950 <__match>
 8008ce6:	b910      	cbnz	r0, 8008cee <_strtod_l+0x37e>
 8008ce8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008cea:	3301      	adds	r3, #1
 8008cec:	931d      	str	r3, [sp, #116]	; 0x74
 8008cee:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8008f1c <_strtod_l+0x5ac>
 8008cf2:	f04f 0a00 	mov.w	sl, #0
 8008cf6:	e67d      	b.n	80089f4 <_strtod_l+0x84>
 8008cf8:	4885      	ldr	r0, [pc, #532]	; (8008f10 <_strtod_l+0x5a0>)
 8008cfa:	f003 f909 	bl	800bf10 <nan>
 8008cfe:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008d02:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008d06:	e675      	b.n	80089f4 <_strtod_l+0x84>
 8008d08:	9b07      	ldr	r3, [sp, #28]
 8008d0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d0c:	1af3      	subs	r3, r6, r3
 8008d0e:	2f00      	cmp	r7, #0
 8008d10:	bf08      	it	eq
 8008d12:	462f      	moveq	r7, r5
 8008d14:	2d10      	cmp	r5, #16
 8008d16:	9308      	str	r3, [sp, #32]
 8008d18:	46a8      	mov	r8, r5
 8008d1a:	bfa8      	it	ge
 8008d1c:	f04f 0810 	movge.w	r8, #16
 8008d20:	f7f7 fbf8 	bl	8000514 <__aeabi_ui2d>
 8008d24:	2d09      	cmp	r5, #9
 8008d26:	4682      	mov	sl, r0
 8008d28:	468b      	mov	fp, r1
 8008d2a:	dd13      	ble.n	8008d54 <_strtod_l+0x3e4>
 8008d2c:	4b79      	ldr	r3, [pc, #484]	; (8008f14 <_strtod_l+0x5a4>)
 8008d2e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008d32:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008d36:	f7f7 fc67 	bl	8000608 <__aeabi_dmul>
 8008d3a:	4682      	mov	sl, r0
 8008d3c:	4648      	mov	r0, r9
 8008d3e:	468b      	mov	fp, r1
 8008d40:	f7f7 fbe8 	bl	8000514 <__aeabi_ui2d>
 8008d44:	4602      	mov	r2, r0
 8008d46:	460b      	mov	r3, r1
 8008d48:	4650      	mov	r0, sl
 8008d4a:	4659      	mov	r1, fp
 8008d4c:	f7f7 faa6 	bl	800029c <__adddf3>
 8008d50:	4682      	mov	sl, r0
 8008d52:	468b      	mov	fp, r1
 8008d54:	2d0f      	cmp	r5, #15
 8008d56:	dc38      	bgt.n	8008dca <_strtod_l+0x45a>
 8008d58:	9b08      	ldr	r3, [sp, #32]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	f43f ae4a 	beq.w	80089f4 <_strtod_l+0x84>
 8008d60:	dd24      	ble.n	8008dac <_strtod_l+0x43c>
 8008d62:	2b16      	cmp	r3, #22
 8008d64:	dc0b      	bgt.n	8008d7e <_strtod_l+0x40e>
 8008d66:	4d6b      	ldr	r5, [pc, #428]	; (8008f14 <_strtod_l+0x5a4>)
 8008d68:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008d6c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008d70:	4652      	mov	r2, sl
 8008d72:	465b      	mov	r3, fp
 8008d74:	f7f7 fc48 	bl	8000608 <__aeabi_dmul>
 8008d78:	4682      	mov	sl, r0
 8008d7a:	468b      	mov	fp, r1
 8008d7c:	e63a      	b.n	80089f4 <_strtod_l+0x84>
 8008d7e:	9a08      	ldr	r2, [sp, #32]
 8008d80:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008d84:	4293      	cmp	r3, r2
 8008d86:	db20      	blt.n	8008dca <_strtod_l+0x45a>
 8008d88:	4c62      	ldr	r4, [pc, #392]	; (8008f14 <_strtod_l+0x5a4>)
 8008d8a:	f1c5 050f 	rsb	r5, r5, #15
 8008d8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008d92:	4652      	mov	r2, sl
 8008d94:	465b      	mov	r3, fp
 8008d96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d9a:	f7f7 fc35 	bl	8000608 <__aeabi_dmul>
 8008d9e:	9b08      	ldr	r3, [sp, #32]
 8008da0:	1b5d      	subs	r5, r3, r5
 8008da2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008da6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008daa:	e7e3      	b.n	8008d74 <_strtod_l+0x404>
 8008dac:	9b08      	ldr	r3, [sp, #32]
 8008dae:	3316      	adds	r3, #22
 8008db0:	db0b      	blt.n	8008dca <_strtod_l+0x45a>
 8008db2:	9b07      	ldr	r3, [sp, #28]
 8008db4:	4a57      	ldr	r2, [pc, #348]	; (8008f14 <_strtod_l+0x5a4>)
 8008db6:	1b9e      	subs	r6, r3, r6
 8008db8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008dbc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008dc0:	4650      	mov	r0, sl
 8008dc2:	4659      	mov	r1, fp
 8008dc4:	f7f7 fd4a 	bl	800085c <__aeabi_ddiv>
 8008dc8:	e7d6      	b.n	8008d78 <_strtod_l+0x408>
 8008dca:	9b08      	ldr	r3, [sp, #32]
 8008dcc:	eba5 0808 	sub.w	r8, r5, r8
 8008dd0:	4498      	add	r8, r3
 8008dd2:	f1b8 0f00 	cmp.w	r8, #0
 8008dd6:	dd71      	ble.n	8008ebc <_strtod_l+0x54c>
 8008dd8:	f018 030f 	ands.w	r3, r8, #15
 8008ddc:	d00a      	beq.n	8008df4 <_strtod_l+0x484>
 8008dde:	494d      	ldr	r1, [pc, #308]	; (8008f14 <_strtod_l+0x5a4>)
 8008de0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008de4:	4652      	mov	r2, sl
 8008de6:	465b      	mov	r3, fp
 8008de8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dec:	f7f7 fc0c 	bl	8000608 <__aeabi_dmul>
 8008df0:	4682      	mov	sl, r0
 8008df2:	468b      	mov	fp, r1
 8008df4:	f038 080f 	bics.w	r8, r8, #15
 8008df8:	d04d      	beq.n	8008e96 <_strtod_l+0x526>
 8008dfa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008dfe:	dd22      	ble.n	8008e46 <_strtod_l+0x4d6>
 8008e00:	2500      	movs	r5, #0
 8008e02:	462e      	mov	r6, r5
 8008e04:	9509      	str	r5, [sp, #36]	; 0x24
 8008e06:	9507      	str	r5, [sp, #28]
 8008e08:	2322      	movs	r3, #34	; 0x22
 8008e0a:	f8df b110 	ldr.w	fp, [pc, #272]	; 8008f1c <_strtod_l+0x5ac>
 8008e0e:	6023      	str	r3, [r4, #0]
 8008e10:	f04f 0a00 	mov.w	sl, #0
 8008e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f43f adec 	beq.w	80089f4 <_strtod_l+0x84>
 8008e1c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008e1e:	4620      	mov	r0, r4
 8008e20:	f001 feb6 	bl	800ab90 <_Bfree>
 8008e24:	9907      	ldr	r1, [sp, #28]
 8008e26:	4620      	mov	r0, r4
 8008e28:	f001 feb2 	bl	800ab90 <_Bfree>
 8008e2c:	4631      	mov	r1, r6
 8008e2e:	4620      	mov	r0, r4
 8008e30:	f001 feae 	bl	800ab90 <_Bfree>
 8008e34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e36:	4620      	mov	r0, r4
 8008e38:	f001 feaa 	bl	800ab90 <_Bfree>
 8008e3c:	4629      	mov	r1, r5
 8008e3e:	4620      	mov	r0, r4
 8008e40:	f001 fea6 	bl	800ab90 <_Bfree>
 8008e44:	e5d6      	b.n	80089f4 <_strtod_l+0x84>
 8008e46:	2300      	movs	r3, #0
 8008e48:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008e4c:	4650      	mov	r0, sl
 8008e4e:	4659      	mov	r1, fp
 8008e50:	4699      	mov	r9, r3
 8008e52:	f1b8 0f01 	cmp.w	r8, #1
 8008e56:	dc21      	bgt.n	8008e9c <_strtod_l+0x52c>
 8008e58:	b10b      	cbz	r3, 8008e5e <_strtod_l+0x4ee>
 8008e5a:	4682      	mov	sl, r0
 8008e5c:	468b      	mov	fp, r1
 8008e5e:	4b2e      	ldr	r3, [pc, #184]	; (8008f18 <_strtod_l+0x5a8>)
 8008e60:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008e64:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008e68:	4652      	mov	r2, sl
 8008e6a:	465b      	mov	r3, fp
 8008e6c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008e70:	f7f7 fbca 	bl	8000608 <__aeabi_dmul>
 8008e74:	4b29      	ldr	r3, [pc, #164]	; (8008f1c <_strtod_l+0x5ac>)
 8008e76:	460a      	mov	r2, r1
 8008e78:	400b      	ands	r3, r1
 8008e7a:	4929      	ldr	r1, [pc, #164]	; (8008f20 <_strtod_l+0x5b0>)
 8008e7c:	428b      	cmp	r3, r1
 8008e7e:	4682      	mov	sl, r0
 8008e80:	d8be      	bhi.n	8008e00 <_strtod_l+0x490>
 8008e82:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008e86:	428b      	cmp	r3, r1
 8008e88:	bf86      	itte	hi
 8008e8a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008f24 <_strtod_l+0x5b4>
 8008e8e:	f04f 3aff 	movhi.w	sl, #4294967295
 8008e92:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008e96:	2300      	movs	r3, #0
 8008e98:	9304      	str	r3, [sp, #16]
 8008e9a:	e081      	b.n	8008fa0 <_strtod_l+0x630>
 8008e9c:	f018 0f01 	tst.w	r8, #1
 8008ea0:	d007      	beq.n	8008eb2 <_strtod_l+0x542>
 8008ea2:	4b1d      	ldr	r3, [pc, #116]	; (8008f18 <_strtod_l+0x5a8>)
 8008ea4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eac:	f7f7 fbac 	bl	8000608 <__aeabi_dmul>
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	f109 0901 	add.w	r9, r9, #1
 8008eb6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008eba:	e7ca      	b.n	8008e52 <_strtod_l+0x4e2>
 8008ebc:	d0eb      	beq.n	8008e96 <_strtod_l+0x526>
 8008ebe:	f1c8 0800 	rsb	r8, r8, #0
 8008ec2:	f018 020f 	ands.w	r2, r8, #15
 8008ec6:	d00a      	beq.n	8008ede <_strtod_l+0x56e>
 8008ec8:	4b12      	ldr	r3, [pc, #72]	; (8008f14 <_strtod_l+0x5a4>)
 8008eca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ece:	4650      	mov	r0, sl
 8008ed0:	4659      	mov	r1, fp
 8008ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed6:	f7f7 fcc1 	bl	800085c <__aeabi_ddiv>
 8008eda:	4682      	mov	sl, r0
 8008edc:	468b      	mov	fp, r1
 8008ede:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008ee2:	d0d8      	beq.n	8008e96 <_strtod_l+0x526>
 8008ee4:	f1b8 0f1f 	cmp.w	r8, #31
 8008ee8:	dd1e      	ble.n	8008f28 <_strtod_l+0x5b8>
 8008eea:	2500      	movs	r5, #0
 8008eec:	462e      	mov	r6, r5
 8008eee:	9509      	str	r5, [sp, #36]	; 0x24
 8008ef0:	9507      	str	r5, [sp, #28]
 8008ef2:	2322      	movs	r3, #34	; 0x22
 8008ef4:	f04f 0a00 	mov.w	sl, #0
 8008ef8:	f04f 0b00 	mov.w	fp, #0
 8008efc:	6023      	str	r3, [r4, #0]
 8008efe:	e789      	b.n	8008e14 <_strtod_l+0x4a4>
 8008f00:	0800f541 	.word	0x0800f541
 8008f04:	0800f580 	.word	0x0800f580
 8008f08:	0800f539 	.word	0x0800f539
 8008f0c:	0800f6c4 	.word	0x0800f6c4
 8008f10:	0800f99b 	.word	0x0800f99b
 8008f14:	0800f860 	.word	0x0800f860
 8008f18:	0800f838 	.word	0x0800f838
 8008f1c:	7ff00000 	.word	0x7ff00000
 8008f20:	7ca00000 	.word	0x7ca00000
 8008f24:	7fefffff 	.word	0x7fefffff
 8008f28:	f018 0310 	ands.w	r3, r8, #16
 8008f2c:	bf18      	it	ne
 8008f2e:	236a      	movne	r3, #106	; 0x6a
 8008f30:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80092e8 <_strtod_l+0x978>
 8008f34:	9304      	str	r3, [sp, #16]
 8008f36:	4650      	mov	r0, sl
 8008f38:	4659      	mov	r1, fp
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	f018 0f01 	tst.w	r8, #1
 8008f40:	d004      	beq.n	8008f4c <_strtod_l+0x5dc>
 8008f42:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008f46:	f7f7 fb5f 	bl	8000608 <__aeabi_dmul>
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008f50:	f109 0908 	add.w	r9, r9, #8
 8008f54:	d1f2      	bne.n	8008f3c <_strtod_l+0x5cc>
 8008f56:	b10b      	cbz	r3, 8008f5c <_strtod_l+0x5ec>
 8008f58:	4682      	mov	sl, r0
 8008f5a:	468b      	mov	fp, r1
 8008f5c:	9b04      	ldr	r3, [sp, #16]
 8008f5e:	b1bb      	cbz	r3, 8008f90 <_strtod_l+0x620>
 8008f60:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008f64:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	4659      	mov	r1, fp
 8008f6c:	dd10      	ble.n	8008f90 <_strtod_l+0x620>
 8008f6e:	2b1f      	cmp	r3, #31
 8008f70:	f340 8128 	ble.w	80091c4 <_strtod_l+0x854>
 8008f74:	2b34      	cmp	r3, #52	; 0x34
 8008f76:	bfde      	ittt	le
 8008f78:	3b20      	suble	r3, #32
 8008f7a:	f04f 32ff 	movle.w	r2, #4294967295
 8008f7e:	fa02 f303 	lslle.w	r3, r2, r3
 8008f82:	f04f 0a00 	mov.w	sl, #0
 8008f86:	bfcc      	ite	gt
 8008f88:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008f8c:	ea03 0b01 	andle.w	fp, r3, r1
 8008f90:	2200      	movs	r2, #0
 8008f92:	2300      	movs	r3, #0
 8008f94:	4650      	mov	r0, sl
 8008f96:	4659      	mov	r1, fp
 8008f98:	f7f7 fd9e 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f9c:	2800      	cmp	r0, #0
 8008f9e:	d1a4      	bne.n	8008eea <_strtod_l+0x57a>
 8008fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fa2:	9300      	str	r3, [sp, #0]
 8008fa4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008fa6:	462b      	mov	r3, r5
 8008fa8:	463a      	mov	r2, r7
 8008faa:	4620      	mov	r0, r4
 8008fac:	f001 fe5c 	bl	800ac68 <__s2b>
 8008fb0:	9009      	str	r0, [sp, #36]	; 0x24
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	f43f af24 	beq.w	8008e00 <_strtod_l+0x490>
 8008fb8:	9b07      	ldr	r3, [sp, #28]
 8008fba:	1b9e      	subs	r6, r3, r6
 8008fbc:	9b08      	ldr	r3, [sp, #32]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	bfb4      	ite	lt
 8008fc2:	4633      	movlt	r3, r6
 8008fc4:	2300      	movge	r3, #0
 8008fc6:	9310      	str	r3, [sp, #64]	; 0x40
 8008fc8:	9b08      	ldr	r3, [sp, #32]
 8008fca:	2500      	movs	r5, #0
 8008fcc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008fd0:	9318      	str	r3, [sp, #96]	; 0x60
 8008fd2:	462e      	mov	r6, r5
 8008fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	6859      	ldr	r1, [r3, #4]
 8008fda:	f001 fd99 	bl	800ab10 <_Balloc>
 8008fde:	9007      	str	r0, [sp, #28]
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	f43f af11 	beq.w	8008e08 <_strtod_l+0x498>
 8008fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fe8:	691a      	ldr	r2, [r3, #16]
 8008fea:	3202      	adds	r2, #2
 8008fec:	f103 010c 	add.w	r1, r3, #12
 8008ff0:	0092      	lsls	r2, r2, #2
 8008ff2:	300c      	adds	r0, #12
 8008ff4:	f7fe fd64 	bl	8007ac0 <memcpy>
 8008ff8:	ec4b ab10 	vmov	d0, sl, fp
 8008ffc:	aa20      	add	r2, sp, #128	; 0x80
 8008ffe:	a91f      	add	r1, sp, #124	; 0x7c
 8009000:	4620      	mov	r0, r4
 8009002:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8009006:	f002 f96b 	bl	800b2e0 <__d2b>
 800900a:	901e      	str	r0, [sp, #120]	; 0x78
 800900c:	2800      	cmp	r0, #0
 800900e:	f43f aefb 	beq.w	8008e08 <_strtod_l+0x498>
 8009012:	2101      	movs	r1, #1
 8009014:	4620      	mov	r0, r4
 8009016:	f001 fec1 	bl	800ad9c <__i2b>
 800901a:	4606      	mov	r6, r0
 800901c:	2800      	cmp	r0, #0
 800901e:	f43f aef3 	beq.w	8008e08 <_strtod_l+0x498>
 8009022:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009024:	9904      	ldr	r1, [sp, #16]
 8009026:	2b00      	cmp	r3, #0
 8009028:	bfab      	itete	ge
 800902a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800902c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800902e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8009030:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8009034:	bfac      	ite	ge
 8009036:	eb03 0902 	addge.w	r9, r3, r2
 800903a:	1ad7      	sublt	r7, r2, r3
 800903c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800903e:	eba3 0801 	sub.w	r8, r3, r1
 8009042:	4490      	add	r8, r2
 8009044:	4ba3      	ldr	r3, [pc, #652]	; (80092d4 <_strtod_l+0x964>)
 8009046:	f108 38ff 	add.w	r8, r8, #4294967295
 800904a:	4598      	cmp	r8, r3
 800904c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009050:	f280 80cc 	bge.w	80091ec <_strtod_l+0x87c>
 8009054:	eba3 0308 	sub.w	r3, r3, r8
 8009058:	2b1f      	cmp	r3, #31
 800905a:	eba2 0203 	sub.w	r2, r2, r3
 800905e:	f04f 0101 	mov.w	r1, #1
 8009062:	f300 80b6 	bgt.w	80091d2 <_strtod_l+0x862>
 8009066:	fa01 f303 	lsl.w	r3, r1, r3
 800906a:	9311      	str	r3, [sp, #68]	; 0x44
 800906c:	2300      	movs	r3, #0
 800906e:	930c      	str	r3, [sp, #48]	; 0x30
 8009070:	eb09 0802 	add.w	r8, r9, r2
 8009074:	9b04      	ldr	r3, [sp, #16]
 8009076:	45c1      	cmp	r9, r8
 8009078:	4417      	add	r7, r2
 800907a:	441f      	add	r7, r3
 800907c:	464b      	mov	r3, r9
 800907e:	bfa8      	it	ge
 8009080:	4643      	movge	r3, r8
 8009082:	42bb      	cmp	r3, r7
 8009084:	bfa8      	it	ge
 8009086:	463b      	movge	r3, r7
 8009088:	2b00      	cmp	r3, #0
 800908a:	bfc2      	ittt	gt
 800908c:	eba8 0803 	subgt.w	r8, r8, r3
 8009090:	1aff      	subgt	r7, r7, r3
 8009092:	eba9 0903 	subgt.w	r9, r9, r3
 8009096:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009098:	2b00      	cmp	r3, #0
 800909a:	dd17      	ble.n	80090cc <_strtod_l+0x75c>
 800909c:	4631      	mov	r1, r6
 800909e:	461a      	mov	r2, r3
 80090a0:	4620      	mov	r0, r4
 80090a2:	f001 ff37 	bl	800af14 <__pow5mult>
 80090a6:	4606      	mov	r6, r0
 80090a8:	2800      	cmp	r0, #0
 80090aa:	f43f aead 	beq.w	8008e08 <_strtod_l+0x498>
 80090ae:	4601      	mov	r1, r0
 80090b0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80090b2:	4620      	mov	r0, r4
 80090b4:	f001 fe88 	bl	800adc8 <__multiply>
 80090b8:	900f      	str	r0, [sp, #60]	; 0x3c
 80090ba:	2800      	cmp	r0, #0
 80090bc:	f43f aea4 	beq.w	8008e08 <_strtod_l+0x498>
 80090c0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80090c2:	4620      	mov	r0, r4
 80090c4:	f001 fd64 	bl	800ab90 <_Bfree>
 80090c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090ca:	931e      	str	r3, [sp, #120]	; 0x78
 80090cc:	f1b8 0f00 	cmp.w	r8, #0
 80090d0:	f300 8091 	bgt.w	80091f6 <_strtod_l+0x886>
 80090d4:	9b08      	ldr	r3, [sp, #32]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	dd08      	ble.n	80090ec <_strtod_l+0x77c>
 80090da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80090dc:	9907      	ldr	r1, [sp, #28]
 80090de:	4620      	mov	r0, r4
 80090e0:	f001 ff18 	bl	800af14 <__pow5mult>
 80090e4:	9007      	str	r0, [sp, #28]
 80090e6:	2800      	cmp	r0, #0
 80090e8:	f43f ae8e 	beq.w	8008e08 <_strtod_l+0x498>
 80090ec:	2f00      	cmp	r7, #0
 80090ee:	dd08      	ble.n	8009102 <_strtod_l+0x792>
 80090f0:	9907      	ldr	r1, [sp, #28]
 80090f2:	463a      	mov	r2, r7
 80090f4:	4620      	mov	r0, r4
 80090f6:	f001 ff67 	bl	800afc8 <__lshift>
 80090fa:	9007      	str	r0, [sp, #28]
 80090fc:	2800      	cmp	r0, #0
 80090fe:	f43f ae83 	beq.w	8008e08 <_strtod_l+0x498>
 8009102:	f1b9 0f00 	cmp.w	r9, #0
 8009106:	dd08      	ble.n	800911a <_strtod_l+0x7aa>
 8009108:	4631      	mov	r1, r6
 800910a:	464a      	mov	r2, r9
 800910c:	4620      	mov	r0, r4
 800910e:	f001 ff5b 	bl	800afc8 <__lshift>
 8009112:	4606      	mov	r6, r0
 8009114:	2800      	cmp	r0, #0
 8009116:	f43f ae77 	beq.w	8008e08 <_strtod_l+0x498>
 800911a:	9a07      	ldr	r2, [sp, #28]
 800911c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800911e:	4620      	mov	r0, r4
 8009120:	f001 ffda 	bl	800b0d8 <__mdiff>
 8009124:	4605      	mov	r5, r0
 8009126:	2800      	cmp	r0, #0
 8009128:	f43f ae6e 	beq.w	8008e08 <_strtod_l+0x498>
 800912c:	68c3      	ldr	r3, [r0, #12]
 800912e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009130:	2300      	movs	r3, #0
 8009132:	60c3      	str	r3, [r0, #12]
 8009134:	4631      	mov	r1, r6
 8009136:	f001 ffb3 	bl	800b0a0 <__mcmp>
 800913a:	2800      	cmp	r0, #0
 800913c:	da65      	bge.n	800920a <_strtod_l+0x89a>
 800913e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009140:	ea53 030a 	orrs.w	r3, r3, sl
 8009144:	f040 8087 	bne.w	8009256 <_strtod_l+0x8e6>
 8009148:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800914c:	2b00      	cmp	r3, #0
 800914e:	f040 8082 	bne.w	8009256 <_strtod_l+0x8e6>
 8009152:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009156:	0d1b      	lsrs	r3, r3, #20
 8009158:	051b      	lsls	r3, r3, #20
 800915a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800915e:	d97a      	bls.n	8009256 <_strtod_l+0x8e6>
 8009160:	696b      	ldr	r3, [r5, #20]
 8009162:	b913      	cbnz	r3, 800916a <_strtod_l+0x7fa>
 8009164:	692b      	ldr	r3, [r5, #16]
 8009166:	2b01      	cmp	r3, #1
 8009168:	dd75      	ble.n	8009256 <_strtod_l+0x8e6>
 800916a:	4629      	mov	r1, r5
 800916c:	2201      	movs	r2, #1
 800916e:	4620      	mov	r0, r4
 8009170:	f001 ff2a 	bl	800afc8 <__lshift>
 8009174:	4631      	mov	r1, r6
 8009176:	4605      	mov	r5, r0
 8009178:	f001 ff92 	bl	800b0a0 <__mcmp>
 800917c:	2800      	cmp	r0, #0
 800917e:	dd6a      	ble.n	8009256 <_strtod_l+0x8e6>
 8009180:	9904      	ldr	r1, [sp, #16]
 8009182:	4a55      	ldr	r2, [pc, #340]	; (80092d8 <_strtod_l+0x968>)
 8009184:	465b      	mov	r3, fp
 8009186:	2900      	cmp	r1, #0
 8009188:	f000 8085 	beq.w	8009296 <_strtod_l+0x926>
 800918c:	ea02 010b 	and.w	r1, r2, fp
 8009190:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009194:	dc7f      	bgt.n	8009296 <_strtod_l+0x926>
 8009196:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800919a:	f77f aeaa 	ble.w	8008ef2 <_strtod_l+0x582>
 800919e:	4a4f      	ldr	r2, [pc, #316]	; (80092dc <_strtod_l+0x96c>)
 80091a0:	2300      	movs	r3, #0
 80091a2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80091a6:	4650      	mov	r0, sl
 80091a8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80091ac:	4659      	mov	r1, fp
 80091ae:	f7f7 fa2b 	bl	8000608 <__aeabi_dmul>
 80091b2:	460b      	mov	r3, r1
 80091b4:	4303      	orrs	r3, r0
 80091b6:	bf08      	it	eq
 80091b8:	2322      	moveq	r3, #34	; 0x22
 80091ba:	4682      	mov	sl, r0
 80091bc:	468b      	mov	fp, r1
 80091be:	bf08      	it	eq
 80091c0:	6023      	streq	r3, [r4, #0]
 80091c2:	e62b      	b.n	8008e1c <_strtod_l+0x4ac>
 80091c4:	f04f 32ff 	mov.w	r2, #4294967295
 80091c8:	fa02 f303 	lsl.w	r3, r2, r3
 80091cc:	ea03 0a0a 	and.w	sl, r3, sl
 80091d0:	e6de      	b.n	8008f90 <_strtod_l+0x620>
 80091d2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80091d6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80091da:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80091de:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80091e2:	fa01 f308 	lsl.w	r3, r1, r8
 80091e6:	930c      	str	r3, [sp, #48]	; 0x30
 80091e8:	9111      	str	r1, [sp, #68]	; 0x44
 80091ea:	e741      	b.n	8009070 <_strtod_l+0x700>
 80091ec:	2300      	movs	r3, #0
 80091ee:	930c      	str	r3, [sp, #48]	; 0x30
 80091f0:	2301      	movs	r3, #1
 80091f2:	9311      	str	r3, [sp, #68]	; 0x44
 80091f4:	e73c      	b.n	8009070 <_strtod_l+0x700>
 80091f6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80091f8:	4642      	mov	r2, r8
 80091fa:	4620      	mov	r0, r4
 80091fc:	f001 fee4 	bl	800afc8 <__lshift>
 8009200:	901e      	str	r0, [sp, #120]	; 0x78
 8009202:	2800      	cmp	r0, #0
 8009204:	f47f af66 	bne.w	80090d4 <_strtod_l+0x764>
 8009208:	e5fe      	b.n	8008e08 <_strtod_l+0x498>
 800920a:	465f      	mov	r7, fp
 800920c:	d16e      	bne.n	80092ec <_strtod_l+0x97c>
 800920e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009210:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009214:	b342      	cbz	r2, 8009268 <_strtod_l+0x8f8>
 8009216:	4a32      	ldr	r2, [pc, #200]	; (80092e0 <_strtod_l+0x970>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d128      	bne.n	800926e <_strtod_l+0x8fe>
 800921c:	9b04      	ldr	r3, [sp, #16]
 800921e:	4650      	mov	r0, sl
 8009220:	b1eb      	cbz	r3, 800925e <_strtod_l+0x8ee>
 8009222:	4a2d      	ldr	r2, [pc, #180]	; (80092d8 <_strtod_l+0x968>)
 8009224:	403a      	ands	r2, r7
 8009226:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800922a:	f04f 31ff 	mov.w	r1, #4294967295
 800922e:	d819      	bhi.n	8009264 <_strtod_l+0x8f4>
 8009230:	0d12      	lsrs	r2, r2, #20
 8009232:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009236:	fa01 f303 	lsl.w	r3, r1, r3
 800923a:	4298      	cmp	r0, r3
 800923c:	d117      	bne.n	800926e <_strtod_l+0x8fe>
 800923e:	4b29      	ldr	r3, [pc, #164]	; (80092e4 <_strtod_l+0x974>)
 8009240:	429f      	cmp	r7, r3
 8009242:	d102      	bne.n	800924a <_strtod_l+0x8da>
 8009244:	3001      	adds	r0, #1
 8009246:	f43f addf 	beq.w	8008e08 <_strtod_l+0x498>
 800924a:	4b23      	ldr	r3, [pc, #140]	; (80092d8 <_strtod_l+0x968>)
 800924c:	403b      	ands	r3, r7
 800924e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009252:	f04f 0a00 	mov.w	sl, #0
 8009256:	9b04      	ldr	r3, [sp, #16]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d1a0      	bne.n	800919e <_strtod_l+0x82e>
 800925c:	e5de      	b.n	8008e1c <_strtod_l+0x4ac>
 800925e:	f04f 33ff 	mov.w	r3, #4294967295
 8009262:	e7ea      	b.n	800923a <_strtod_l+0x8ca>
 8009264:	460b      	mov	r3, r1
 8009266:	e7e8      	b.n	800923a <_strtod_l+0x8ca>
 8009268:	ea53 030a 	orrs.w	r3, r3, sl
 800926c:	d088      	beq.n	8009180 <_strtod_l+0x810>
 800926e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009270:	b1db      	cbz	r3, 80092aa <_strtod_l+0x93a>
 8009272:	423b      	tst	r3, r7
 8009274:	d0ef      	beq.n	8009256 <_strtod_l+0x8e6>
 8009276:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009278:	9a04      	ldr	r2, [sp, #16]
 800927a:	4650      	mov	r0, sl
 800927c:	4659      	mov	r1, fp
 800927e:	b1c3      	cbz	r3, 80092b2 <_strtod_l+0x942>
 8009280:	f7ff fb57 	bl	8008932 <sulp>
 8009284:	4602      	mov	r2, r0
 8009286:	460b      	mov	r3, r1
 8009288:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800928c:	f7f7 f806 	bl	800029c <__adddf3>
 8009290:	4682      	mov	sl, r0
 8009292:	468b      	mov	fp, r1
 8009294:	e7df      	b.n	8009256 <_strtod_l+0x8e6>
 8009296:	4013      	ands	r3, r2
 8009298:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800929c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80092a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80092a4:	f04f 3aff 	mov.w	sl, #4294967295
 80092a8:	e7d5      	b.n	8009256 <_strtod_l+0x8e6>
 80092aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80092ac:	ea13 0f0a 	tst.w	r3, sl
 80092b0:	e7e0      	b.n	8009274 <_strtod_l+0x904>
 80092b2:	f7ff fb3e 	bl	8008932 <sulp>
 80092b6:	4602      	mov	r2, r0
 80092b8:	460b      	mov	r3, r1
 80092ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80092be:	f7f6 ffeb 	bl	8000298 <__aeabi_dsub>
 80092c2:	2200      	movs	r2, #0
 80092c4:	2300      	movs	r3, #0
 80092c6:	4682      	mov	sl, r0
 80092c8:	468b      	mov	fp, r1
 80092ca:	f7f7 fc05 	bl	8000ad8 <__aeabi_dcmpeq>
 80092ce:	2800      	cmp	r0, #0
 80092d0:	d0c1      	beq.n	8009256 <_strtod_l+0x8e6>
 80092d2:	e60e      	b.n	8008ef2 <_strtod_l+0x582>
 80092d4:	fffffc02 	.word	0xfffffc02
 80092d8:	7ff00000 	.word	0x7ff00000
 80092dc:	39500000 	.word	0x39500000
 80092e0:	000fffff 	.word	0x000fffff
 80092e4:	7fefffff 	.word	0x7fefffff
 80092e8:	0800f598 	.word	0x0800f598
 80092ec:	4631      	mov	r1, r6
 80092ee:	4628      	mov	r0, r5
 80092f0:	f002 f852 	bl	800b398 <__ratio>
 80092f4:	ec59 8b10 	vmov	r8, r9, d0
 80092f8:	ee10 0a10 	vmov	r0, s0
 80092fc:	2200      	movs	r2, #0
 80092fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009302:	4649      	mov	r1, r9
 8009304:	f7f7 fbfc 	bl	8000b00 <__aeabi_dcmple>
 8009308:	2800      	cmp	r0, #0
 800930a:	d07c      	beq.n	8009406 <_strtod_l+0xa96>
 800930c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800930e:	2b00      	cmp	r3, #0
 8009310:	d04c      	beq.n	80093ac <_strtod_l+0xa3c>
 8009312:	4b95      	ldr	r3, [pc, #596]	; (8009568 <_strtod_l+0xbf8>)
 8009314:	2200      	movs	r2, #0
 8009316:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800931a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009568 <_strtod_l+0xbf8>
 800931e:	f04f 0800 	mov.w	r8, #0
 8009322:	4b92      	ldr	r3, [pc, #584]	; (800956c <_strtod_l+0xbfc>)
 8009324:	403b      	ands	r3, r7
 8009326:	9311      	str	r3, [sp, #68]	; 0x44
 8009328:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800932a:	4b91      	ldr	r3, [pc, #580]	; (8009570 <_strtod_l+0xc00>)
 800932c:	429a      	cmp	r2, r3
 800932e:	f040 80b2 	bne.w	8009496 <_strtod_l+0xb26>
 8009332:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009336:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800933a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800933e:	ec4b ab10 	vmov	d0, sl, fp
 8009342:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8009346:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800934a:	f001 ff4d 	bl	800b1e8 <__ulp>
 800934e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009352:	ec53 2b10 	vmov	r2, r3, d0
 8009356:	f7f7 f957 	bl	8000608 <__aeabi_dmul>
 800935a:	4652      	mov	r2, sl
 800935c:	465b      	mov	r3, fp
 800935e:	f7f6 ff9d 	bl	800029c <__adddf3>
 8009362:	460b      	mov	r3, r1
 8009364:	4981      	ldr	r1, [pc, #516]	; (800956c <_strtod_l+0xbfc>)
 8009366:	4a83      	ldr	r2, [pc, #524]	; (8009574 <_strtod_l+0xc04>)
 8009368:	4019      	ands	r1, r3
 800936a:	4291      	cmp	r1, r2
 800936c:	4682      	mov	sl, r0
 800936e:	d95e      	bls.n	800942e <_strtod_l+0xabe>
 8009370:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009372:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009376:	4293      	cmp	r3, r2
 8009378:	d103      	bne.n	8009382 <_strtod_l+0xa12>
 800937a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800937c:	3301      	adds	r3, #1
 800937e:	f43f ad43 	beq.w	8008e08 <_strtod_l+0x498>
 8009382:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8009580 <_strtod_l+0xc10>
 8009386:	f04f 3aff 	mov.w	sl, #4294967295
 800938a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800938c:	4620      	mov	r0, r4
 800938e:	f001 fbff 	bl	800ab90 <_Bfree>
 8009392:	9907      	ldr	r1, [sp, #28]
 8009394:	4620      	mov	r0, r4
 8009396:	f001 fbfb 	bl	800ab90 <_Bfree>
 800939a:	4631      	mov	r1, r6
 800939c:	4620      	mov	r0, r4
 800939e:	f001 fbf7 	bl	800ab90 <_Bfree>
 80093a2:	4629      	mov	r1, r5
 80093a4:	4620      	mov	r0, r4
 80093a6:	f001 fbf3 	bl	800ab90 <_Bfree>
 80093aa:	e613      	b.n	8008fd4 <_strtod_l+0x664>
 80093ac:	f1ba 0f00 	cmp.w	sl, #0
 80093b0:	d11b      	bne.n	80093ea <_strtod_l+0xa7a>
 80093b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093b6:	b9f3      	cbnz	r3, 80093f6 <_strtod_l+0xa86>
 80093b8:	4b6b      	ldr	r3, [pc, #428]	; (8009568 <_strtod_l+0xbf8>)
 80093ba:	2200      	movs	r2, #0
 80093bc:	4640      	mov	r0, r8
 80093be:	4649      	mov	r1, r9
 80093c0:	f7f7 fb94 	bl	8000aec <__aeabi_dcmplt>
 80093c4:	b9d0      	cbnz	r0, 80093fc <_strtod_l+0xa8c>
 80093c6:	4640      	mov	r0, r8
 80093c8:	4649      	mov	r1, r9
 80093ca:	4b6b      	ldr	r3, [pc, #428]	; (8009578 <_strtod_l+0xc08>)
 80093cc:	2200      	movs	r2, #0
 80093ce:	f7f7 f91b 	bl	8000608 <__aeabi_dmul>
 80093d2:	4680      	mov	r8, r0
 80093d4:	4689      	mov	r9, r1
 80093d6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80093da:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80093de:	931b      	str	r3, [sp, #108]	; 0x6c
 80093e0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80093e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80093e8:	e79b      	b.n	8009322 <_strtod_l+0x9b2>
 80093ea:	f1ba 0f01 	cmp.w	sl, #1
 80093ee:	d102      	bne.n	80093f6 <_strtod_l+0xa86>
 80093f0:	2f00      	cmp	r7, #0
 80093f2:	f43f ad7e 	beq.w	8008ef2 <_strtod_l+0x582>
 80093f6:	4b61      	ldr	r3, [pc, #388]	; (800957c <_strtod_l+0xc0c>)
 80093f8:	2200      	movs	r2, #0
 80093fa:	e78c      	b.n	8009316 <_strtod_l+0x9a6>
 80093fc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009578 <_strtod_l+0xc08>
 8009400:	f04f 0800 	mov.w	r8, #0
 8009404:	e7e7      	b.n	80093d6 <_strtod_l+0xa66>
 8009406:	4b5c      	ldr	r3, [pc, #368]	; (8009578 <_strtod_l+0xc08>)
 8009408:	4640      	mov	r0, r8
 800940a:	4649      	mov	r1, r9
 800940c:	2200      	movs	r2, #0
 800940e:	f7f7 f8fb 	bl	8000608 <__aeabi_dmul>
 8009412:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009414:	4680      	mov	r8, r0
 8009416:	4689      	mov	r9, r1
 8009418:	b933      	cbnz	r3, 8009428 <_strtod_l+0xab8>
 800941a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800941e:	9012      	str	r0, [sp, #72]	; 0x48
 8009420:	9313      	str	r3, [sp, #76]	; 0x4c
 8009422:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009426:	e7dd      	b.n	80093e4 <_strtod_l+0xa74>
 8009428:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800942c:	e7f9      	b.n	8009422 <_strtod_l+0xab2>
 800942e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009432:	9b04      	ldr	r3, [sp, #16]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d1a8      	bne.n	800938a <_strtod_l+0xa1a>
 8009438:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800943c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800943e:	0d1b      	lsrs	r3, r3, #20
 8009440:	051b      	lsls	r3, r3, #20
 8009442:	429a      	cmp	r2, r3
 8009444:	d1a1      	bne.n	800938a <_strtod_l+0xa1a>
 8009446:	4640      	mov	r0, r8
 8009448:	4649      	mov	r1, r9
 800944a:	f7f7 fc3d 	bl	8000cc8 <__aeabi_d2lz>
 800944e:	f7f7 f8ad 	bl	80005ac <__aeabi_l2d>
 8009452:	4602      	mov	r2, r0
 8009454:	460b      	mov	r3, r1
 8009456:	4640      	mov	r0, r8
 8009458:	4649      	mov	r1, r9
 800945a:	f7f6 ff1d 	bl	8000298 <__aeabi_dsub>
 800945e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009460:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009464:	ea43 030a 	orr.w	r3, r3, sl
 8009468:	4313      	orrs	r3, r2
 800946a:	4680      	mov	r8, r0
 800946c:	4689      	mov	r9, r1
 800946e:	d053      	beq.n	8009518 <_strtod_l+0xba8>
 8009470:	a335      	add	r3, pc, #212	; (adr r3, 8009548 <_strtod_l+0xbd8>)
 8009472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009476:	f7f7 fb39 	bl	8000aec <__aeabi_dcmplt>
 800947a:	2800      	cmp	r0, #0
 800947c:	f47f acce 	bne.w	8008e1c <_strtod_l+0x4ac>
 8009480:	a333      	add	r3, pc, #204	; (adr r3, 8009550 <_strtod_l+0xbe0>)
 8009482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009486:	4640      	mov	r0, r8
 8009488:	4649      	mov	r1, r9
 800948a:	f7f7 fb4d 	bl	8000b28 <__aeabi_dcmpgt>
 800948e:	2800      	cmp	r0, #0
 8009490:	f43f af7b 	beq.w	800938a <_strtod_l+0xa1a>
 8009494:	e4c2      	b.n	8008e1c <_strtod_l+0x4ac>
 8009496:	9b04      	ldr	r3, [sp, #16]
 8009498:	b333      	cbz	r3, 80094e8 <_strtod_l+0xb78>
 800949a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800949c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80094a0:	d822      	bhi.n	80094e8 <_strtod_l+0xb78>
 80094a2:	a32d      	add	r3, pc, #180	; (adr r3, 8009558 <_strtod_l+0xbe8>)
 80094a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a8:	4640      	mov	r0, r8
 80094aa:	4649      	mov	r1, r9
 80094ac:	f7f7 fb28 	bl	8000b00 <__aeabi_dcmple>
 80094b0:	b1a0      	cbz	r0, 80094dc <_strtod_l+0xb6c>
 80094b2:	4649      	mov	r1, r9
 80094b4:	4640      	mov	r0, r8
 80094b6:	f7f7 fb7f 	bl	8000bb8 <__aeabi_d2uiz>
 80094ba:	2801      	cmp	r0, #1
 80094bc:	bf38      	it	cc
 80094be:	2001      	movcc	r0, #1
 80094c0:	f7f7 f828 	bl	8000514 <__aeabi_ui2d>
 80094c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094c6:	4680      	mov	r8, r0
 80094c8:	4689      	mov	r9, r1
 80094ca:	bb13      	cbnz	r3, 8009512 <_strtod_l+0xba2>
 80094cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094d0:	9014      	str	r0, [sp, #80]	; 0x50
 80094d2:	9315      	str	r3, [sp, #84]	; 0x54
 80094d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80094d8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80094dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80094e0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80094e4:	1a9b      	subs	r3, r3, r2
 80094e6:	930d      	str	r3, [sp, #52]	; 0x34
 80094e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80094ec:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80094f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80094f4:	f001 fe78 	bl	800b1e8 <__ulp>
 80094f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80094fc:	ec53 2b10 	vmov	r2, r3, d0
 8009500:	f7f7 f882 	bl	8000608 <__aeabi_dmul>
 8009504:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009508:	f7f6 fec8 	bl	800029c <__adddf3>
 800950c:	4682      	mov	sl, r0
 800950e:	468b      	mov	fp, r1
 8009510:	e78f      	b.n	8009432 <_strtod_l+0xac2>
 8009512:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8009516:	e7dd      	b.n	80094d4 <_strtod_l+0xb64>
 8009518:	a311      	add	r3, pc, #68	; (adr r3, 8009560 <_strtod_l+0xbf0>)
 800951a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951e:	f7f7 fae5 	bl	8000aec <__aeabi_dcmplt>
 8009522:	e7b4      	b.n	800948e <_strtod_l+0xb1e>
 8009524:	2300      	movs	r3, #0
 8009526:	930e      	str	r3, [sp, #56]	; 0x38
 8009528:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800952a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800952c:	6013      	str	r3, [r2, #0]
 800952e:	f7ff ba65 	b.w	80089fc <_strtod_l+0x8c>
 8009532:	2b65      	cmp	r3, #101	; 0x65
 8009534:	f43f ab5d 	beq.w	8008bf2 <_strtod_l+0x282>
 8009538:	2b45      	cmp	r3, #69	; 0x45
 800953a:	f43f ab5a 	beq.w	8008bf2 <_strtod_l+0x282>
 800953e:	2201      	movs	r2, #1
 8009540:	f7ff bb92 	b.w	8008c68 <_strtod_l+0x2f8>
 8009544:	f3af 8000 	nop.w
 8009548:	94a03595 	.word	0x94a03595
 800954c:	3fdfffff 	.word	0x3fdfffff
 8009550:	35afe535 	.word	0x35afe535
 8009554:	3fe00000 	.word	0x3fe00000
 8009558:	ffc00000 	.word	0xffc00000
 800955c:	41dfffff 	.word	0x41dfffff
 8009560:	94a03595 	.word	0x94a03595
 8009564:	3fcfffff 	.word	0x3fcfffff
 8009568:	3ff00000 	.word	0x3ff00000
 800956c:	7ff00000 	.word	0x7ff00000
 8009570:	7fe00000 	.word	0x7fe00000
 8009574:	7c9fffff 	.word	0x7c9fffff
 8009578:	3fe00000 	.word	0x3fe00000
 800957c:	bff00000 	.word	0xbff00000
 8009580:	7fefffff 	.word	0x7fefffff

08009584 <_strtod_r>:
 8009584:	4b01      	ldr	r3, [pc, #4]	; (800958c <_strtod_r+0x8>)
 8009586:	f7ff b9f3 	b.w	8008970 <_strtod_l>
 800958a:	bf00      	nop
 800958c:	20000090 	.word	0x20000090

08009590 <_strtol_l.isra.0>:
 8009590:	2b01      	cmp	r3, #1
 8009592:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009596:	d001      	beq.n	800959c <_strtol_l.isra.0+0xc>
 8009598:	2b24      	cmp	r3, #36	; 0x24
 800959a:	d906      	bls.n	80095aa <_strtol_l.isra.0+0x1a>
 800959c:	f7fe fa66 	bl	8007a6c <__errno>
 80095a0:	2316      	movs	r3, #22
 80095a2:	6003      	str	r3, [r0, #0]
 80095a4:	2000      	movs	r0, #0
 80095a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095aa:	4f3a      	ldr	r7, [pc, #232]	; (8009694 <_strtol_l.isra.0+0x104>)
 80095ac:	468e      	mov	lr, r1
 80095ae:	4676      	mov	r6, lr
 80095b0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80095b4:	5de5      	ldrb	r5, [r4, r7]
 80095b6:	f015 0508 	ands.w	r5, r5, #8
 80095ba:	d1f8      	bne.n	80095ae <_strtol_l.isra.0+0x1e>
 80095bc:	2c2d      	cmp	r4, #45	; 0x2d
 80095be:	d134      	bne.n	800962a <_strtol_l.isra.0+0x9a>
 80095c0:	f89e 4000 	ldrb.w	r4, [lr]
 80095c4:	f04f 0801 	mov.w	r8, #1
 80095c8:	f106 0e02 	add.w	lr, r6, #2
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d05c      	beq.n	800968a <_strtol_l.isra.0+0xfa>
 80095d0:	2b10      	cmp	r3, #16
 80095d2:	d10c      	bne.n	80095ee <_strtol_l.isra.0+0x5e>
 80095d4:	2c30      	cmp	r4, #48	; 0x30
 80095d6:	d10a      	bne.n	80095ee <_strtol_l.isra.0+0x5e>
 80095d8:	f89e 4000 	ldrb.w	r4, [lr]
 80095dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80095e0:	2c58      	cmp	r4, #88	; 0x58
 80095e2:	d14d      	bne.n	8009680 <_strtol_l.isra.0+0xf0>
 80095e4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80095e8:	2310      	movs	r3, #16
 80095ea:	f10e 0e02 	add.w	lr, lr, #2
 80095ee:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80095f2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80095f6:	2600      	movs	r6, #0
 80095f8:	fbbc f9f3 	udiv	r9, ip, r3
 80095fc:	4635      	mov	r5, r6
 80095fe:	fb03 ca19 	mls	sl, r3, r9, ip
 8009602:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009606:	2f09      	cmp	r7, #9
 8009608:	d818      	bhi.n	800963c <_strtol_l.isra.0+0xac>
 800960a:	463c      	mov	r4, r7
 800960c:	42a3      	cmp	r3, r4
 800960e:	dd24      	ble.n	800965a <_strtol_l.isra.0+0xca>
 8009610:	2e00      	cmp	r6, #0
 8009612:	db1f      	blt.n	8009654 <_strtol_l.isra.0+0xc4>
 8009614:	45a9      	cmp	r9, r5
 8009616:	d31d      	bcc.n	8009654 <_strtol_l.isra.0+0xc4>
 8009618:	d101      	bne.n	800961e <_strtol_l.isra.0+0x8e>
 800961a:	45a2      	cmp	sl, r4
 800961c:	db1a      	blt.n	8009654 <_strtol_l.isra.0+0xc4>
 800961e:	fb05 4503 	mla	r5, r5, r3, r4
 8009622:	2601      	movs	r6, #1
 8009624:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009628:	e7eb      	b.n	8009602 <_strtol_l.isra.0+0x72>
 800962a:	2c2b      	cmp	r4, #43	; 0x2b
 800962c:	bf08      	it	eq
 800962e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8009632:	46a8      	mov	r8, r5
 8009634:	bf08      	it	eq
 8009636:	f106 0e02 	addeq.w	lr, r6, #2
 800963a:	e7c7      	b.n	80095cc <_strtol_l.isra.0+0x3c>
 800963c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009640:	2f19      	cmp	r7, #25
 8009642:	d801      	bhi.n	8009648 <_strtol_l.isra.0+0xb8>
 8009644:	3c37      	subs	r4, #55	; 0x37
 8009646:	e7e1      	b.n	800960c <_strtol_l.isra.0+0x7c>
 8009648:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800964c:	2f19      	cmp	r7, #25
 800964e:	d804      	bhi.n	800965a <_strtol_l.isra.0+0xca>
 8009650:	3c57      	subs	r4, #87	; 0x57
 8009652:	e7db      	b.n	800960c <_strtol_l.isra.0+0x7c>
 8009654:	f04f 36ff 	mov.w	r6, #4294967295
 8009658:	e7e4      	b.n	8009624 <_strtol_l.isra.0+0x94>
 800965a:	2e00      	cmp	r6, #0
 800965c:	da05      	bge.n	800966a <_strtol_l.isra.0+0xda>
 800965e:	2322      	movs	r3, #34	; 0x22
 8009660:	6003      	str	r3, [r0, #0]
 8009662:	4665      	mov	r5, ip
 8009664:	b942      	cbnz	r2, 8009678 <_strtol_l.isra.0+0xe8>
 8009666:	4628      	mov	r0, r5
 8009668:	e79d      	b.n	80095a6 <_strtol_l.isra.0+0x16>
 800966a:	f1b8 0f00 	cmp.w	r8, #0
 800966e:	d000      	beq.n	8009672 <_strtol_l.isra.0+0xe2>
 8009670:	426d      	negs	r5, r5
 8009672:	2a00      	cmp	r2, #0
 8009674:	d0f7      	beq.n	8009666 <_strtol_l.isra.0+0xd6>
 8009676:	b10e      	cbz	r6, 800967c <_strtol_l.isra.0+0xec>
 8009678:	f10e 31ff 	add.w	r1, lr, #4294967295
 800967c:	6011      	str	r1, [r2, #0]
 800967e:	e7f2      	b.n	8009666 <_strtol_l.isra.0+0xd6>
 8009680:	2430      	movs	r4, #48	; 0x30
 8009682:	2b00      	cmp	r3, #0
 8009684:	d1b3      	bne.n	80095ee <_strtol_l.isra.0+0x5e>
 8009686:	2308      	movs	r3, #8
 8009688:	e7b1      	b.n	80095ee <_strtol_l.isra.0+0x5e>
 800968a:	2c30      	cmp	r4, #48	; 0x30
 800968c:	d0a4      	beq.n	80095d8 <_strtol_l.isra.0+0x48>
 800968e:	230a      	movs	r3, #10
 8009690:	e7ad      	b.n	80095ee <_strtol_l.isra.0+0x5e>
 8009692:	bf00      	nop
 8009694:	0800f5c1 	.word	0x0800f5c1

08009698 <_strtol_r>:
 8009698:	f7ff bf7a 	b.w	8009590 <_strtol_l.isra.0>

0800969c <_write_r>:
 800969c:	b538      	push	{r3, r4, r5, lr}
 800969e:	4d07      	ldr	r5, [pc, #28]	; (80096bc <_write_r+0x20>)
 80096a0:	4604      	mov	r4, r0
 80096a2:	4608      	mov	r0, r1
 80096a4:	4611      	mov	r1, r2
 80096a6:	2200      	movs	r2, #0
 80096a8:	602a      	str	r2, [r5, #0]
 80096aa:	461a      	mov	r2, r3
 80096ac:	f7f8 fd1d 	bl	80020ea <_write>
 80096b0:	1c43      	adds	r3, r0, #1
 80096b2:	d102      	bne.n	80096ba <_write_r+0x1e>
 80096b4:	682b      	ldr	r3, [r5, #0]
 80096b6:	b103      	cbz	r3, 80096ba <_write_r+0x1e>
 80096b8:	6023      	str	r3, [r4, #0]
 80096ba:	bd38      	pop	{r3, r4, r5, pc}
 80096bc:	20005028 	.word	0x20005028

080096c0 <_close_r>:
 80096c0:	b538      	push	{r3, r4, r5, lr}
 80096c2:	4d06      	ldr	r5, [pc, #24]	; (80096dc <_close_r+0x1c>)
 80096c4:	2300      	movs	r3, #0
 80096c6:	4604      	mov	r4, r0
 80096c8:	4608      	mov	r0, r1
 80096ca:	602b      	str	r3, [r5, #0]
 80096cc:	f7f8 fd29 	bl	8002122 <_close>
 80096d0:	1c43      	adds	r3, r0, #1
 80096d2:	d102      	bne.n	80096da <_close_r+0x1a>
 80096d4:	682b      	ldr	r3, [r5, #0]
 80096d6:	b103      	cbz	r3, 80096da <_close_r+0x1a>
 80096d8:	6023      	str	r3, [r4, #0]
 80096da:	bd38      	pop	{r3, r4, r5, pc}
 80096dc:	20005028 	.word	0x20005028

080096e0 <quorem>:
 80096e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e4:	6903      	ldr	r3, [r0, #16]
 80096e6:	690c      	ldr	r4, [r1, #16]
 80096e8:	42a3      	cmp	r3, r4
 80096ea:	4607      	mov	r7, r0
 80096ec:	f2c0 8081 	blt.w	80097f2 <quorem+0x112>
 80096f0:	3c01      	subs	r4, #1
 80096f2:	f101 0814 	add.w	r8, r1, #20
 80096f6:	f100 0514 	add.w	r5, r0, #20
 80096fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096fe:	9301      	str	r3, [sp, #4]
 8009700:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009704:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009708:	3301      	adds	r3, #1
 800970a:	429a      	cmp	r2, r3
 800970c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009710:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009714:	fbb2 f6f3 	udiv	r6, r2, r3
 8009718:	d331      	bcc.n	800977e <quorem+0x9e>
 800971a:	f04f 0e00 	mov.w	lr, #0
 800971e:	4640      	mov	r0, r8
 8009720:	46ac      	mov	ip, r5
 8009722:	46f2      	mov	sl, lr
 8009724:	f850 2b04 	ldr.w	r2, [r0], #4
 8009728:	b293      	uxth	r3, r2
 800972a:	fb06 e303 	mla	r3, r6, r3, lr
 800972e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009732:	b29b      	uxth	r3, r3
 8009734:	ebaa 0303 	sub.w	r3, sl, r3
 8009738:	0c12      	lsrs	r2, r2, #16
 800973a:	f8dc a000 	ldr.w	sl, [ip]
 800973e:	fb06 e202 	mla	r2, r6, r2, lr
 8009742:	fa13 f38a 	uxtah	r3, r3, sl
 8009746:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800974a:	fa1f fa82 	uxth.w	sl, r2
 800974e:	f8dc 2000 	ldr.w	r2, [ip]
 8009752:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009756:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800975a:	b29b      	uxth	r3, r3
 800975c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009760:	4581      	cmp	r9, r0
 8009762:	f84c 3b04 	str.w	r3, [ip], #4
 8009766:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800976a:	d2db      	bcs.n	8009724 <quorem+0x44>
 800976c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009770:	b92b      	cbnz	r3, 800977e <quorem+0x9e>
 8009772:	9b01      	ldr	r3, [sp, #4]
 8009774:	3b04      	subs	r3, #4
 8009776:	429d      	cmp	r5, r3
 8009778:	461a      	mov	r2, r3
 800977a:	d32e      	bcc.n	80097da <quorem+0xfa>
 800977c:	613c      	str	r4, [r7, #16]
 800977e:	4638      	mov	r0, r7
 8009780:	f001 fc8e 	bl	800b0a0 <__mcmp>
 8009784:	2800      	cmp	r0, #0
 8009786:	db24      	blt.n	80097d2 <quorem+0xf2>
 8009788:	3601      	adds	r6, #1
 800978a:	4628      	mov	r0, r5
 800978c:	f04f 0c00 	mov.w	ip, #0
 8009790:	f858 2b04 	ldr.w	r2, [r8], #4
 8009794:	f8d0 e000 	ldr.w	lr, [r0]
 8009798:	b293      	uxth	r3, r2
 800979a:	ebac 0303 	sub.w	r3, ip, r3
 800979e:	0c12      	lsrs	r2, r2, #16
 80097a0:	fa13 f38e 	uxtah	r3, r3, lr
 80097a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80097a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097b2:	45c1      	cmp	r9, r8
 80097b4:	f840 3b04 	str.w	r3, [r0], #4
 80097b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80097bc:	d2e8      	bcs.n	8009790 <quorem+0xb0>
 80097be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097c6:	b922      	cbnz	r2, 80097d2 <quorem+0xf2>
 80097c8:	3b04      	subs	r3, #4
 80097ca:	429d      	cmp	r5, r3
 80097cc:	461a      	mov	r2, r3
 80097ce:	d30a      	bcc.n	80097e6 <quorem+0x106>
 80097d0:	613c      	str	r4, [r7, #16]
 80097d2:	4630      	mov	r0, r6
 80097d4:	b003      	add	sp, #12
 80097d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097da:	6812      	ldr	r2, [r2, #0]
 80097dc:	3b04      	subs	r3, #4
 80097de:	2a00      	cmp	r2, #0
 80097e0:	d1cc      	bne.n	800977c <quorem+0x9c>
 80097e2:	3c01      	subs	r4, #1
 80097e4:	e7c7      	b.n	8009776 <quorem+0x96>
 80097e6:	6812      	ldr	r2, [r2, #0]
 80097e8:	3b04      	subs	r3, #4
 80097ea:	2a00      	cmp	r2, #0
 80097ec:	d1f0      	bne.n	80097d0 <quorem+0xf0>
 80097ee:	3c01      	subs	r4, #1
 80097f0:	e7eb      	b.n	80097ca <quorem+0xea>
 80097f2:	2000      	movs	r0, #0
 80097f4:	e7ee      	b.n	80097d4 <quorem+0xf4>
	...

080097f8 <_dtoa_r>:
 80097f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097fc:	ed2d 8b02 	vpush	{d8}
 8009800:	ec57 6b10 	vmov	r6, r7, d0
 8009804:	b095      	sub	sp, #84	; 0x54
 8009806:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009808:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800980c:	9105      	str	r1, [sp, #20]
 800980e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009812:	4604      	mov	r4, r0
 8009814:	9209      	str	r2, [sp, #36]	; 0x24
 8009816:	930f      	str	r3, [sp, #60]	; 0x3c
 8009818:	b975      	cbnz	r5, 8009838 <_dtoa_r+0x40>
 800981a:	2010      	movs	r0, #16
 800981c:	f001 f95e 	bl	800aadc <malloc>
 8009820:	4602      	mov	r2, r0
 8009822:	6260      	str	r0, [r4, #36]	; 0x24
 8009824:	b920      	cbnz	r0, 8009830 <_dtoa_r+0x38>
 8009826:	4bb2      	ldr	r3, [pc, #712]	; (8009af0 <_dtoa_r+0x2f8>)
 8009828:	21ea      	movs	r1, #234	; 0xea
 800982a:	48b2      	ldr	r0, [pc, #712]	; (8009af4 <_dtoa_r+0x2fc>)
 800982c:	f002 fc88 	bl	800c140 <__assert_func>
 8009830:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009834:	6005      	str	r5, [r0, #0]
 8009836:	60c5      	str	r5, [r0, #12]
 8009838:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800983a:	6819      	ldr	r1, [r3, #0]
 800983c:	b151      	cbz	r1, 8009854 <_dtoa_r+0x5c>
 800983e:	685a      	ldr	r2, [r3, #4]
 8009840:	604a      	str	r2, [r1, #4]
 8009842:	2301      	movs	r3, #1
 8009844:	4093      	lsls	r3, r2
 8009846:	608b      	str	r3, [r1, #8]
 8009848:	4620      	mov	r0, r4
 800984a:	f001 f9a1 	bl	800ab90 <_Bfree>
 800984e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009850:	2200      	movs	r2, #0
 8009852:	601a      	str	r2, [r3, #0]
 8009854:	1e3b      	subs	r3, r7, #0
 8009856:	bfb9      	ittee	lt
 8009858:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800985c:	9303      	strlt	r3, [sp, #12]
 800985e:	2300      	movge	r3, #0
 8009860:	f8c8 3000 	strge.w	r3, [r8]
 8009864:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009868:	4ba3      	ldr	r3, [pc, #652]	; (8009af8 <_dtoa_r+0x300>)
 800986a:	bfbc      	itt	lt
 800986c:	2201      	movlt	r2, #1
 800986e:	f8c8 2000 	strlt.w	r2, [r8]
 8009872:	ea33 0309 	bics.w	r3, r3, r9
 8009876:	d11b      	bne.n	80098b0 <_dtoa_r+0xb8>
 8009878:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800987a:	f242 730f 	movw	r3, #9999	; 0x270f
 800987e:	6013      	str	r3, [r2, #0]
 8009880:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009884:	4333      	orrs	r3, r6
 8009886:	f000 857a 	beq.w	800a37e <_dtoa_r+0xb86>
 800988a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800988c:	b963      	cbnz	r3, 80098a8 <_dtoa_r+0xb0>
 800988e:	4b9b      	ldr	r3, [pc, #620]	; (8009afc <_dtoa_r+0x304>)
 8009890:	e024      	b.n	80098dc <_dtoa_r+0xe4>
 8009892:	4b9b      	ldr	r3, [pc, #620]	; (8009b00 <_dtoa_r+0x308>)
 8009894:	9300      	str	r3, [sp, #0]
 8009896:	3308      	adds	r3, #8
 8009898:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800989a:	6013      	str	r3, [r2, #0]
 800989c:	9800      	ldr	r0, [sp, #0]
 800989e:	b015      	add	sp, #84	; 0x54
 80098a0:	ecbd 8b02 	vpop	{d8}
 80098a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a8:	4b94      	ldr	r3, [pc, #592]	; (8009afc <_dtoa_r+0x304>)
 80098aa:	9300      	str	r3, [sp, #0]
 80098ac:	3303      	adds	r3, #3
 80098ae:	e7f3      	b.n	8009898 <_dtoa_r+0xa0>
 80098b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80098b4:	2200      	movs	r2, #0
 80098b6:	ec51 0b17 	vmov	r0, r1, d7
 80098ba:	2300      	movs	r3, #0
 80098bc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80098c0:	f7f7 f90a 	bl	8000ad8 <__aeabi_dcmpeq>
 80098c4:	4680      	mov	r8, r0
 80098c6:	b158      	cbz	r0, 80098e0 <_dtoa_r+0xe8>
 80098c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80098ca:	2301      	movs	r3, #1
 80098cc:	6013      	str	r3, [r2, #0]
 80098ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f000 8551 	beq.w	800a378 <_dtoa_r+0xb80>
 80098d6:	488b      	ldr	r0, [pc, #556]	; (8009b04 <_dtoa_r+0x30c>)
 80098d8:	6018      	str	r0, [r3, #0]
 80098da:	1e43      	subs	r3, r0, #1
 80098dc:	9300      	str	r3, [sp, #0]
 80098de:	e7dd      	b.n	800989c <_dtoa_r+0xa4>
 80098e0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80098e4:	aa12      	add	r2, sp, #72	; 0x48
 80098e6:	a913      	add	r1, sp, #76	; 0x4c
 80098e8:	4620      	mov	r0, r4
 80098ea:	f001 fcf9 	bl	800b2e0 <__d2b>
 80098ee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80098f2:	4683      	mov	fp, r0
 80098f4:	2d00      	cmp	r5, #0
 80098f6:	d07c      	beq.n	80099f2 <_dtoa_r+0x1fa>
 80098f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098fa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80098fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009902:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009906:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800990a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800990e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009912:	4b7d      	ldr	r3, [pc, #500]	; (8009b08 <_dtoa_r+0x310>)
 8009914:	2200      	movs	r2, #0
 8009916:	4630      	mov	r0, r6
 8009918:	4639      	mov	r1, r7
 800991a:	f7f6 fcbd 	bl	8000298 <__aeabi_dsub>
 800991e:	a36e      	add	r3, pc, #440	; (adr r3, 8009ad8 <_dtoa_r+0x2e0>)
 8009920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009924:	f7f6 fe70 	bl	8000608 <__aeabi_dmul>
 8009928:	a36d      	add	r3, pc, #436	; (adr r3, 8009ae0 <_dtoa_r+0x2e8>)
 800992a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992e:	f7f6 fcb5 	bl	800029c <__adddf3>
 8009932:	4606      	mov	r6, r0
 8009934:	4628      	mov	r0, r5
 8009936:	460f      	mov	r7, r1
 8009938:	f7f6 fdfc 	bl	8000534 <__aeabi_i2d>
 800993c:	a36a      	add	r3, pc, #424	; (adr r3, 8009ae8 <_dtoa_r+0x2f0>)
 800993e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009942:	f7f6 fe61 	bl	8000608 <__aeabi_dmul>
 8009946:	4602      	mov	r2, r0
 8009948:	460b      	mov	r3, r1
 800994a:	4630      	mov	r0, r6
 800994c:	4639      	mov	r1, r7
 800994e:	f7f6 fca5 	bl	800029c <__adddf3>
 8009952:	4606      	mov	r6, r0
 8009954:	460f      	mov	r7, r1
 8009956:	f7f7 f907 	bl	8000b68 <__aeabi_d2iz>
 800995a:	2200      	movs	r2, #0
 800995c:	4682      	mov	sl, r0
 800995e:	2300      	movs	r3, #0
 8009960:	4630      	mov	r0, r6
 8009962:	4639      	mov	r1, r7
 8009964:	f7f7 f8c2 	bl	8000aec <__aeabi_dcmplt>
 8009968:	b148      	cbz	r0, 800997e <_dtoa_r+0x186>
 800996a:	4650      	mov	r0, sl
 800996c:	f7f6 fde2 	bl	8000534 <__aeabi_i2d>
 8009970:	4632      	mov	r2, r6
 8009972:	463b      	mov	r3, r7
 8009974:	f7f7 f8b0 	bl	8000ad8 <__aeabi_dcmpeq>
 8009978:	b908      	cbnz	r0, 800997e <_dtoa_r+0x186>
 800997a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800997e:	f1ba 0f16 	cmp.w	sl, #22
 8009982:	d854      	bhi.n	8009a2e <_dtoa_r+0x236>
 8009984:	4b61      	ldr	r3, [pc, #388]	; (8009b0c <_dtoa_r+0x314>)
 8009986:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800998a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009992:	f7f7 f8ab 	bl	8000aec <__aeabi_dcmplt>
 8009996:	2800      	cmp	r0, #0
 8009998:	d04b      	beq.n	8009a32 <_dtoa_r+0x23a>
 800999a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800999e:	2300      	movs	r3, #0
 80099a0:	930e      	str	r3, [sp, #56]	; 0x38
 80099a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80099a4:	1b5d      	subs	r5, r3, r5
 80099a6:	1e6b      	subs	r3, r5, #1
 80099a8:	9304      	str	r3, [sp, #16]
 80099aa:	bf43      	ittte	mi
 80099ac:	2300      	movmi	r3, #0
 80099ae:	f1c5 0801 	rsbmi	r8, r5, #1
 80099b2:	9304      	strmi	r3, [sp, #16]
 80099b4:	f04f 0800 	movpl.w	r8, #0
 80099b8:	f1ba 0f00 	cmp.w	sl, #0
 80099bc:	db3b      	blt.n	8009a36 <_dtoa_r+0x23e>
 80099be:	9b04      	ldr	r3, [sp, #16]
 80099c0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80099c4:	4453      	add	r3, sl
 80099c6:	9304      	str	r3, [sp, #16]
 80099c8:	2300      	movs	r3, #0
 80099ca:	9306      	str	r3, [sp, #24]
 80099cc:	9b05      	ldr	r3, [sp, #20]
 80099ce:	2b09      	cmp	r3, #9
 80099d0:	d869      	bhi.n	8009aa6 <_dtoa_r+0x2ae>
 80099d2:	2b05      	cmp	r3, #5
 80099d4:	bfc4      	itt	gt
 80099d6:	3b04      	subgt	r3, #4
 80099d8:	9305      	strgt	r3, [sp, #20]
 80099da:	9b05      	ldr	r3, [sp, #20]
 80099dc:	f1a3 0302 	sub.w	r3, r3, #2
 80099e0:	bfcc      	ite	gt
 80099e2:	2500      	movgt	r5, #0
 80099e4:	2501      	movle	r5, #1
 80099e6:	2b03      	cmp	r3, #3
 80099e8:	d869      	bhi.n	8009abe <_dtoa_r+0x2c6>
 80099ea:	e8df f003 	tbb	[pc, r3]
 80099ee:	4e2c      	.short	0x4e2c
 80099f0:	5a4c      	.short	0x5a4c
 80099f2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80099f6:	441d      	add	r5, r3
 80099f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80099fc:	2b20      	cmp	r3, #32
 80099fe:	bfc1      	itttt	gt
 8009a00:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009a04:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009a08:	fa09 f303 	lslgt.w	r3, r9, r3
 8009a0c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009a10:	bfda      	itte	le
 8009a12:	f1c3 0320 	rsble	r3, r3, #32
 8009a16:	fa06 f003 	lslle.w	r0, r6, r3
 8009a1a:	4318      	orrgt	r0, r3
 8009a1c:	f7f6 fd7a 	bl	8000514 <__aeabi_ui2d>
 8009a20:	2301      	movs	r3, #1
 8009a22:	4606      	mov	r6, r0
 8009a24:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009a28:	3d01      	subs	r5, #1
 8009a2a:	9310      	str	r3, [sp, #64]	; 0x40
 8009a2c:	e771      	b.n	8009912 <_dtoa_r+0x11a>
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e7b6      	b.n	80099a0 <_dtoa_r+0x1a8>
 8009a32:	900e      	str	r0, [sp, #56]	; 0x38
 8009a34:	e7b5      	b.n	80099a2 <_dtoa_r+0x1aa>
 8009a36:	f1ca 0300 	rsb	r3, sl, #0
 8009a3a:	9306      	str	r3, [sp, #24]
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	eba8 080a 	sub.w	r8, r8, sl
 8009a42:	930d      	str	r3, [sp, #52]	; 0x34
 8009a44:	e7c2      	b.n	80099cc <_dtoa_r+0x1d4>
 8009a46:	2300      	movs	r3, #0
 8009a48:	9308      	str	r3, [sp, #32]
 8009a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	dc39      	bgt.n	8009ac4 <_dtoa_r+0x2cc>
 8009a50:	f04f 0901 	mov.w	r9, #1
 8009a54:	f8cd 9004 	str.w	r9, [sp, #4]
 8009a58:	464b      	mov	r3, r9
 8009a5a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009a5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009a60:	2200      	movs	r2, #0
 8009a62:	6042      	str	r2, [r0, #4]
 8009a64:	2204      	movs	r2, #4
 8009a66:	f102 0614 	add.w	r6, r2, #20
 8009a6a:	429e      	cmp	r6, r3
 8009a6c:	6841      	ldr	r1, [r0, #4]
 8009a6e:	d92f      	bls.n	8009ad0 <_dtoa_r+0x2d8>
 8009a70:	4620      	mov	r0, r4
 8009a72:	f001 f84d 	bl	800ab10 <_Balloc>
 8009a76:	9000      	str	r0, [sp, #0]
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	d14b      	bne.n	8009b14 <_dtoa_r+0x31c>
 8009a7c:	4b24      	ldr	r3, [pc, #144]	; (8009b10 <_dtoa_r+0x318>)
 8009a7e:	4602      	mov	r2, r0
 8009a80:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009a84:	e6d1      	b.n	800982a <_dtoa_r+0x32>
 8009a86:	2301      	movs	r3, #1
 8009a88:	e7de      	b.n	8009a48 <_dtoa_r+0x250>
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	9308      	str	r3, [sp, #32]
 8009a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a90:	eb0a 0903 	add.w	r9, sl, r3
 8009a94:	f109 0301 	add.w	r3, r9, #1
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	9301      	str	r3, [sp, #4]
 8009a9c:	bfb8      	it	lt
 8009a9e:	2301      	movlt	r3, #1
 8009aa0:	e7dd      	b.n	8009a5e <_dtoa_r+0x266>
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e7f2      	b.n	8009a8c <_dtoa_r+0x294>
 8009aa6:	2501      	movs	r5, #1
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	9305      	str	r3, [sp, #20]
 8009aac:	9508      	str	r5, [sp, #32]
 8009aae:	f04f 39ff 	mov.w	r9, #4294967295
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f8cd 9004 	str.w	r9, [sp, #4]
 8009ab8:	2312      	movs	r3, #18
 8009aba:	9209      	str	r2, [sp, #36]	; 0x24
 8009abc:	e7cf      	b.n	8009a5e <_dtoa_r+0x266>
 8009abe:	2301      	movs	r3, #1
 8009ac0:	9308      	str	r3, [sp, #32]
 8009ac2:	e7f4      	b.n	8009aae <_dtoa_r+0x2b6>
 8009ac4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009ac8:	f8cd 9004 	str.w	r9, [sp, #4]
 8009acc:	464b      	mov	r3, r9
 8009ace:	e7c6      	b.n	8009a5e <_dtoa_r+0x266>
 8009ad0:	3101      	adds	r1, #1
 8009ad2:	6041      	str	r1, [r0, #4]
 8009ad4:	0052      	lsls	r2, r2, #1
 8009ad6:	e7c6      	b.n	8009a66 <_dtoa_r+0x26e>
 8009ad8:	636f4361 	.word	0x636f4361
 8009adc:	3fd287a7 	.word	0x3fd287a7
 8009ae0:	8b60c8b3 	.word	0x8b60c8b3
 8009ae4:	3fc68a28 	.word	0x3fc68a28
 8009ae8:	509f79fb 	.word	0x509f79fb
 8009aec:	3fd34413 	.word	0x3fd34413
 8009af0:	0800f6ce 	.word	0x0800f6ce
 8009af4:	0800f6e5 	.word	0x0800f6e5
 8009af8:	7ff00000 	.word	0x7ff00000
 8009afc:	0800f6ca 	.word	0x0800f6ca
 8009b00:	0800f6c1 	.word	0x0800f6c1
 8009b04:	0800f94a 	.word	0x0800f94a
 8009b08:	3ff80000 	.word	0x3ff80000
 8009b0c:	0800f860 	.word	0x0800f860
 8009b10:	0800f744 	.word	0x0800f744
 8009b14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b16:	9a00      	ldr	r2, [sp, #0]
 8009b18:	601a      	str	r2, [r3, #0]
 8009b1a:	9b01      	ldr	r3, [sp, #4]
 8009b1c:	2b0e      	cmp	r3, #14
 8009b1e:	f200 80ad 	bhi.w	8009c7c <_dtoa_r+0x484>
 8009b22:	2d00      	cmp	r5, #0
 8009b24:	f000 80aa 	beq.w	8009c7c <_dtoa_r+0x484>
 8009b28:	f1ba 0f00 	cmp.w	sl, #0
 8009b2c:	dd36      	ble.n	8009b9c <_dtoa_r+0x3a4>
 8009b2e:	4ac3      	ldr	r2, [pc, #780]	; (8009e3c <_dtoa_r+0x644>)
 8009b30:	f00a 030f 	and.w	r3, sl, #15
 8009b34:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009b38:	ed93 7b00 	vldr	d7, [r3]
 8009b3c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009b40:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009b44:	eeb0 8a47 	vmov.f32	s16, s14
 8009b48:	eef0 8a67 	vmov.f32	s17, s15
 8009b4c:	d016      	beq.n	8009b7c <_dtoa_r+0x384>
 8009b4e:	4bbc      	ldr	r3, [pc, #752]	; (8009e40 <_dtoa_r+0x648>)
 8009b50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009b54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b58:	f7f6 fe80 	bl	800085c <__aeabi_ddiv>
 8009b5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b60:	f007 070f 	and.w	r7, r7, #15
 8009b64:	2503      	movs	r5, #3
 8009b66:	4eb6      	ldr	r6, [pc, #728]	; (8009e40 <_dtoa_r+0x648>)
 8009b68:	b957      	cbnz	r7, 8009b80 <_dtoa_r+0x388>
 8009b6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b6e:	ec53 2b18 	vmov	r2, r3, d8
 8009b72:	f7f6 fe73 	bl	800085c <__aeabi_ddiv>
 8009b76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b7a:	e029      	b.n	8009bd0 <_dtoa_r+0x3d8>
 8009b7c:	2502      	movs	r5, #2
 8009b7e:	e7f2      	b.n	8009b66 <_dtoa_r+0x36e>
 8009b80:	07f9      	lsls	r1, r7, #31
 8009b82:	d508      	bpl.n	8009b96 <_dtoa_r+0x39e>
 8009b84:	ec51 0b18 	vmov	r0, r1, d8
 8009b88:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b8c:	f7f6 fd3c 	bl	8000608 <__aeabi_dmul>
 8009b90:	ec41 0b18 	vmov	d8, r0, r1
 8009b94:	3501      	adds	r5, #1
 8009b96:	107f      	asrs	r7, r7, #1
 8009b98:	3608      	adds	r6, #8
 8009b9a:	e7e5      	b.n	8009b68 <_dtoa_r+0x370>
 8009b9c:	f000 80a6 	beq.w	8009cec <_dtoa_r+0x4f4>
 8009ba0:	f1ca 0600 	rsb	r6, sl, #0
 8009ba4:	4ba5      	ldr	r3, [pc, #660]	; (8009e3c <_dtoa_r+0x644>)
 8009ba6:	4fa6      	ldr	r7, [pc, #664]	; (8009e40 <_dtoa_r+0x648>)
 8009ba8:	f006 020f 	and.w	r2, r6, #15
 8009bac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009bb8:	f7f6 fd26 	bl	8000608 <__aeabi_dmul>
 8009bbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bc0:	1136      	asrs	r6, r6, #4
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	2502      	movs	r5, #2
 8009bc6:	2e00      	cmp	r6, #0
 8009bc8:	f040 8085 	bne.w	8009cd6 <_dtoa_r+0x4de>
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d1d2      	bne.n	8009b76 <_dtoa_r+0x37e>
 8009bd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	f000 808c 	beq.w	8009cf0 <_dtoa_r+0x4f8>
 8009bd8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009bdc:	4b99      	ldr	r3, [pc, #612]	; (8009e44 <_dtoa_r+0x64c>)
 8009bde:	2200      	movs	r2, #0
 8009be0:	4630      	mov	r0, r6
 8009be2:	4639      	mov	r1, r7
 8009be4:	f7f6 ff82 	bl	8000aec <__aeabi_dcmplt>
 8009be8:	2800      	cmp	r0, #0
 8009bea:	f000 8081 	beq.w	8009cf0 <_dtoa_r+0x4f8>
 8009bee:	9b01      	ldr	r3, [sp, #4]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d07d      	beq.n	8009cf0 <_dtoa_r+0x4f8>
 8009bf4:	f1b9 0f00 	cmp.w	r9, #0
 8009bf8:	dd3c      	ble.n	8009c74 <_dtoa_r+0x47c>
 8009bfa:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009bfe:	9307      	str	r3, [sp, #28]
 8009c00:	2200      	movs	r2, #0
 8009c02:	4b91      	ldr	r3, [pc, #580]	; (8009e48 <_dtoa_r+0x650>)
 8009c04:	4630      	mov	r0, r6
 8009c06:	4639      	mov	r1, r7
 8009c08:	f7f6 fcfe 	bl	8000608 <__aeabi_dmul>
 8009c0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c10:	3501      	adds	r5, #1
 8009c12:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009c16:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	f7f6 fc8a 	bl	8000534 <__aeabi_i2d>
 8009c20:	4632      	mov	r2, r6
 8009c22:	463b      	mov	r3, r7
 8009c24:	f7f6 fcf0 	bl	8000608 <__aeabi_dmul>
 8009c28:	4b88      	ldr	r3, [pc, #544]	; (8009e4c <_dtoa_r+0x654>)
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f7f6 fb36 	bl	800029c <__adddf3>
 8009c30:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009c34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c38:	9303      	str	r3, [sp, #12]
 8009c3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d15c      	bne.n	8009cfa <_dtoa_r+0x502>
 8009c40:	4b83      	ldr	r3, [pc, #524]	; (8009e50 <_dtoa_r+0x658>)
 8009c42:	2200      	movs	r2, #0
 8009c44:	4630      	mov	r0, r6
 8009c46:	4639      	mov	r1, r7
 8009c48:	f7f6 fb26 	bl	8000298 <__aeabi_dsub>
 8009c4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c50:	4606      	mov	r6, r0
 8009c52:	460f      	mov	r7, r1
 8009c54:	f7f6 ff68 	bl	8000b28 <__aeabi_dcmpgt>
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	f040 8296 	bne.w	800a18a <_dtoa_r+0x992>
 8009c5e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009c62:	4630      	mov	r0, r6
 8009c64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c68:	4639      	mov	r1, r7
 8009c6a:	f7f6 ff3f 	bl	8000aec <__aeabi_dcmplt>
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	f040 8288 	bne.w	800a184 <_dtoa_r+0x98c>
 8009c74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009c78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	f2c0 8158 	blt.w	8009f34 <_dtoa_r+0x73c>
 8009c84:	f1ba 0f0e 	cmp.w	sl, #14
 8009c88:	f300 8154 	bgt.w	8009f34 <_dtoa_r+0x73c>
 8009c8c:	4b6b      	ldr	r3, [pc, #428]	; (8009e3c <_dtoa_r+0x644>)
 8009c8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009c92:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	f280 80e3 	bge.w	8009e64 <_dtoa_r+0x66c>
 8009c9e:	9b01      	ldr	r3, [sp, #4]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f300 80df 	bgt.w	8009e64 <_dtoa_r+0x66c>
 8009ca6:	f040 826d 	bne.w	800a184 <_dtoa_r+0x98c>
 8009caa:	4b69      	ldr	r3, [pc, #420]	; (8009e50 <_dtoa_r+0x658>)
 8009cac:	2200      	movs	r2, #0
 8009cae:	4640      	mov	r0, r8
 8009cb0:	4649      	mov	r1, r9
 8009cb2:	f7f6 fca9 	bl	8000608 <__aeabi_dmul>
 8009cb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cba:	f7f6 ff2b 	bl	8000b14 <__aeabi_dcmpge>
 8009cbe:	9e01      	ldr	r6, [sp, #4]
 8009cc0:	4637      	mov	r7, r6
 8009cc2:	2800      	cmp	r0, #0
 8009cc4:	f040 8243 	bne.w	800a14e <_dtoa_r+0x956>
 8009cc8:	9d00      	ldr	r5, [sp, #0]
 8009cca:	2331      	movs	r3, #49	; 0x31
 8009ccc:	f805 3b01 	strb.w	r3, [r5], #1
 8009cd0:	f10a 0a01 	add.w	sl, sl, #1
 8009cd4:	e23f      	b.n	800a156 <_dtoa_r+0x95e>
 8009cd6:	07f2      	lsls	r2, r6, #31
 8009cd8:	d505      	bpl.n	8009ce6 <_dtoa_r+0x4ee>
 8009cda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cde:	f7f6 fc93 	bl	8000608 <__aeabi_dmul>
 8009ce2:	3501      	adds	r5, #1
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	1076      	asrs	r6, r6, #1
 8009ce8:	3708      	adds	r7, #8
 8009cea:	e76c      	b.n	8009bc6 <_dtoa_r+0x3ce>
 8009cec:	2502      	movs	r5, #2
 8009cee:	e76f      	b.n	8009bd0 <_dtoa_r+0x3d8>
 8009cf0:	9b01      	ldr	r3, [sp, #4]
 8009cf2:	f8cd a01c 	str.w	sl, [sp, #28]
 8009cf6:	930c      	str	r3, [sp, #48]	; 0x30
 8009cf8:	e78d      	b.n	8009c16 <_dtoa_r+0x41e>
 8009cfa:	9900      	ldr	r1, [sp, #0]
 8009cfc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009cfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d00:	4b4e      	ldr	r3, [pc, #312]	; (8009e3c <_dtoa_r+0x644>)
 8009d02:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d06:	4401      	add	r1, r0
 8009d08:	9102      	str	r1, [sp, #8]
 8009d0a:	9908      	ldr	r1, [sp, #32]
 8009d0c:	eeb0 8a47 	vmov.f32	s16, s14
 8009d10:	eef0 8a67 	vmov.f32	s17, s15
 8009d14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d1c:	2900      	cmp	r1, #0
 8009d1e:	d045      	beq.n	8009dac <_dtoa_r+0x5b4>
 8009d20:	494c      	ldr	r1, [pc, #304]	; (8009e54 <_dtoa_r+0x65c>)
 8009d22:	2000      	movs	r0, #0
 8009d24:	f7f6 fd9a 	bl	800085c <__aeabi_ddiv>
 8009d28:	ec53 2b18 	vmov	r2, r3, d8
 8009d2c:	f7f6 fab4 	bl	8000298 <__aeabi_dsub>
 8009d30:	9d00      	ldr	r5, [sp, #0]
 8009d32:	ec41 0b18 	vmov	d8, r0, r1
 8009d36:	4639      	mov	r1, r7
 8009d38:	4630      	mov	r0, r6
 8009d3a:	f7f6 ff15 	bl	8000b68 <__aeabi_d2iz>
 8009d3e:	900c      	str	r0, [sp, #48]	; 0x30
 8009d40:	f7f6 fbf8 	bl	8000534 <__aeabi_i2d>
 8009d44:	4602      	mov	r2, r0
 8009d46:	460b      	mov	r3, r1
 8009d48:	4630      	mov	r0, r6
 8009d4a:	4639      	mov	r1, r7
 8009d4c:	f7f6 faa4 	bl	8000298 <__aeabi_dsub>
 8009d50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d52:	3330      	adds	r3, #48	; 0x30
 8009d54:	f805 3b01 	strb.w	r3, [r5], #1
 8009d58:	ec53 2b18 	vmov	r2, r3, d8
 8009d5c:	4606      	mov	r6, r0
 8009d5e:	460f      	mov	r7, r1
 8009d60:	f7f6 fec4 	bl	8000aec <__aeabi_dcmplt>
 8009d64:	2800      	cmp	r0, #0
 8009d66:	d165      	bne.n	8009e34 <_dtoa_r+0x63c>
 8009d68:	4632      	mov	r2, r6
 8009d6a:	463b      	mov	r3, r7
 8009d6c:	4935      	ldr	r1, [pc, #212]	; (8009e44 <_dtoa_r+0x64c>)
 8009d6e:	2000      	movs	r0, #0
 8009d70:	f7f6 fa92 	bl	8000298 <__aeabi_dsub>
 8009d74:	ec53 2b18 	vmov	r2, r3, d8
 8009d78:	f7f6 feb8 	bl	8000aec <__aeabi_dcmplt>
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	f040 80b9 	bne.w	8009ef4 <_dtoa_r+0x6fc>
 8009d82:	9b02      	ldr	r3, [sp, #8]
 8009d84:	429d      	cmp	r5, r3
 8009d86:	f43f af75 	beq.w	8009c74 <_dtoa_r+0x47c>
 8009d8a:	4b2f      	ldr	r3, [pc, #188]	; (8009e48 <_dtoa_r+0x650>)
 8009d8c:	ec51 0b18 	vmov	r0, r1, d8
 8009d90:	2200      	movs	r2, #0
 8009d92:	f7f6 fc39 	bl	8000608 <__aeabi_dmul>
 8009d96:	4b2c      	ldr	r3, [pc, #176]	; (8009e48 <_dtoa_r+0x650>)
 8009d98:	ec41 0b18 	vmov	d8, r0, r1
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	4630      	mov	r0, r6
 8009da0:	4639      	mov	r1, r7
 8009da2:	f7f6 fc31 	bl	8000608 <__aeabi_dmul>
 8009da6:	4606      	mov	r6, r0
 8009da8:	460f      	mov	r7, r1
 8009daa:	e7c4      	b.n	8009d36 <_dtoa_r+0x53e>
 8009dac:	ec51 0b17 	vmov	r0, r1, d7
 8009db0:	f7f6 fc2a 	bl	8000608 <__aeabi_dmul>
 8009db4:	9b02      	ldr	r3, [sp, #8]
 8009db6:	9d00      	ldr	r5, [sp, #0]
 8009db8:	930c      	str	r3, [sp, #48]	; 0x30
 8009dba:	ec41 0b18 	vmov	d8, r0, r1
 8009dbe:	4639      	mov	r1, r7
 8009dc0:	4630      	mov	r0, r6
 8009dc2:	f7f6 fed1 	bl	8000b68 <__aeabi_d2iz>
 8009dc6:	9011      	str	r0, [sp, #68]	; 0x44
 8009dc8:	f7f6 fbb4 	bl	8000534 <__aeabi_i2d>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	460b      	mov	r3, r1
 8009dd0:	4630      	mov	r0, r6
 8009dd2:	4639      	mov	r1, r7
 8009dd4:	f7f6 fa60 	bl	8000298 <__aeabi_dsub>
 8009dd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009dda:	3330      	adds	r3, #48	; 0x30
 8009ddc:	f805 3b01 	strb.w	r3, [r5], #1
 8009de0:	9b02      	ldr	r3, [sp, #8]
 8009de2:	429d      	cmp	r5, r3
 8009de4:	4606      	mov	r6, r0
 8009de6:	460f      	mov	r7, r1
 8009de8:	f04f 0200 	mov.w	r2, #0
 8009dec:	d134      	bne.n	8009e58 <_dtoa_r+0x660>
 8009dee:	4b19      	ldr	r3, [pc, #100]	; (8009e54 <_dtoa_r+0x65c>)
 8009df0:	ec51 0b18 	vmov	r0, r1, d8
 8009df4:	f7f6 fa52 	bl	800029c <__adddf3>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	460b      	mov	r3, r1
 8009dfc:	4630      	mov	r0, r6
 8009dfe:	4639      	mov	r1, r7
 8009e00:	f7f6 fe92 	bl	8000b28 <__aeabi_dcmpgt>
 8009e04:	2800      	cmp	r0, #0
 8009e06:	d175      	bne.n	8009ef4 <_dtoa_r+0x6fc>
 8009e08:	ec53 2b18 	vmov	r2, r3, d8
 8009e0c:	4911      	ldr	r1, [pc, #68]	; (8009e54 <_dtoa_r+0x65c>)
 8009e0e:	2000      	movs	r0, #0
 8009e10:	f7f6 fa42 	bl	8000298 <__aeabi_dsub>
 8009e14:	4602      	mov	r2, r0
 8009e16:	460b      	mov	r3, r1
 8009e18:	4630      	mov	r0, r6
 8009e1a:	4639      	mov	r1, r7
 8009e1c:	f7f6 fe66 	bl	8000aec <__aeabi_dcmplt>
 8009e20:	2800      	cmp	r0, #0
 8009e22:	f43f af27 	beq.w	8009c74 <_dtoa_r+0x47c>
 8009e26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e28:	1e6b      	subs	r3, r5, #1
 8009e2a:	930c      	str	r3, [sp, #48]	; 0x30
 8009e2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e30:	2b30      	cmp	r3, #48	; 0x30
 8009e32:	d0f8      	beq.n	8009e26 <_dtoa_r+0x62e>
 8009e34:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009e38:	e04a      	b.n	8009ed0 <_dtoa_r+0x6d8>
 8009e3a:	bf00      	nop
 8009e3c:	0800f860 	.word	0x0800f860
 8009e40:	0800f838 	.word	0x0800f838
 8009e44:	3ff00000 	.word	0x3ff00000
 8009e48:	40240000 	.word	0x40240000
 8009e4c:	401c0000 	.word	0x401c0000
 8009e50:	40140000 	.word	0x40140000
 8009e54:	3fe00000 	.word	0x3fe00000
 8009e58:	4baf      	ldr	r3, [pc, #700]	; (800a118 <_dtoa_r+0x920>)
 8009e5a:	f7f6 fbd5 	bl	8000608 <__aeabi_dmul>
 8009e5e:	4606      	mov	r6, r0
 8009e60:	460f      	mov	r7, r1
 8009e62:	e7ac      	b.n	8009dbe <_dtoa_r+0x5c6>
 8009e64:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009e68:	9d00      	ldr	r5, [sp, #0]
 8009e6a:	4642      	mov	r2, r8
 8009e6c:	464b      	mov	r3, r9
 8009e6e:	4630      	mov	r0, r6
 8009e70:	4639      	mov	r1, r7
 8009e72:	f7f6 fcf3 	bl	800085c <__aeabi_ddiv>
 8009e76:	f7f6 fe77 	bl	8000b68 <__aeabi_d2iz>
 8009e7a:	9002      	str	r0, [sp, #8]
 8009e7c:	f7f6 fb5a 	bl	8000534 <__aeabi_i2d>
 8009e80:	4642      	mov	r2, r8
 8009e82:	464b      	mov	r3, r9
 8009e84:	f7f6 fbc0 	bl	8000608 <__aeabi_dmul>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	4639      	mov	r1, r7
 8009e90:	f7f6 fa02 	bl	8000298 <__aeabi_dsub>
 8009e94:	9e02      	ldr	r6, [sp, #8]
 8009e96:	9f01      	ldr	r7, [sp, #4]
 8009e98:	3630      	adds	r6, #48	; 0x30
 8009e9a:	f805 6b01 	strb.w	r6, [r5], #1
 8009e9e:	9e00      	ldr	r6, [sp, #0]
 8009ea0:	1bae      	subs	r6, r5, r6
 8009ea2:	42b7      	cmp	r7, r6
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	d137      	bne.n	8009f1a <_dtoa_r+0x722>
 8009eaa:	f7f6 f9f7 	bl	800029c <__adddf3>
 8009eae:	4642      	mov	r2, r8
 8009eb0:	464b      	mov	r3, r9
 8009eb2:	4606      	mov	r6, r0
 8009eb4:	460f      	mov	r7, r1
 8009eb6:	f7f6 fe37 	bl	8000b28 <__aeabi_dcmpgt>
 8009eba:	b9c8      	cbnz	r0, 8009ef0 <_dtoa_r+0x6f8>
 8009ebc:	4642      	mov	r2, r8
 8009ebe:	464b      	mov	r3, r9
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	4639      	mov	r1, r7
 8009ec4:	f7f6 fe08 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ec8:	b110      	cbz	r0, 8009ed0 <_dtoa_r+0x6d8>
 8009eca:	9b02      	ldr	r3, [sp, #8]
 8009ecc:	07d9      	lsls	r1, r3, #31
 8009ece:	d40f      	bmi.n	8009ef0 <_dtoa_r+0x6f8>
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	4659      	mov	r1, fp
 8009ed4:	f000 fe5c 	bl	800ab90 <_Bfree>
 8009ed8:	2300      	movs	r3, #0
 8009eda:	702b      	strb	r3, [r5, #0]
 8009edc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ede:	f10a 0001 	add.w	r0, sl, #1
 8009ee2:	6018      	str	r0, [r3, #0]
 8009ee4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	f43f acd8 	beq.w	800989c <_dtoa_r+0xa4>
 8009eec:	601d      	str	r5, [r3, #0]
 8009eee:	e4d5      	b.n	800989c <_dtoa_r+0xa4>
 8009ef0:	f8cd a01c 	str.w	sl, [sp, #28]
 8009ef4:	462b      	mov	r3, r5
 8009ef6:	461d      	mov	r5, r3
 8009ef8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009efc:	2a39      	cmp	r2, #57	; 0x39
 8009efe:	d108      	bne.n	8009f12 <_dtoa_r+0x71a>
 8009f00:	9a00      	ldr	r2, [sp, #0]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d1f7      	bne.n	8009ef6 <_dtoa_r+0x6fe>
 8009f06:	9a07      	ldr	r2, [sp, #28]
 8009f08:	9900      	ldr	r1, [sp, #0]
 8009f0a:	3201      	adds	r2, #1
 8009f0c:	9207      	str	r2, [sp, #28]
 8009f0e:	2230      	movs	r2, #48	; 0x30
 8009f10:	700a      	strb	r2, [r1, #0]
 8009f12:	781a      	ldrb	r2, [r3, #0]
 8009f14:	3201      	adds	r2, #1
 8009f16:	701a      	strb	r2, [r3, #0]
 8009f18:	e78c      	b.n	8009e34 <_dtoa_r+0x63c>
 8009f1a:	4b7f      	ldr	r3, [pc, #508]	; (800a118 <_dtoa_r+0x920>)
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	f7f6 fb73 	bl	8000608 <__aeabi_dmul>
 8009f22:	2200      	movs	r2, #0
 8009f24:	2300      	movs	r3, #0
 8009f26:	4606      	mov	r6, r0
 8009f28:	460f      	mov	r7, r1
 8009f2a:	f7f6 fdd5 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f2e:	2800      	cmp	r0, #0
 8009f30:	d09b      	beq.n	8009e6a <_dtoa_r+0x672>
 8009f32:	e7cd      	b.n	8009ed0 <_dtoa_r+0x6d8>
 8009f34:	9a08      	ldr	r2, [sp, #32]
 8009f36:	2a00      	cmp	r2, #0
 8009f38:	f000 80c4 	beq.w	800a0c4 <_dtoa_r+0x8cc>
 8009f3c:	9a05      	ldr	r2, [sp, #20]
 8009f3e:	2a01      	cmp	r2, #1
 8009f40:	f300 80a8 	bgt.w	800a094 <_dtoa_r+0x89c>
 8009f44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f46:	2a00      	cmp	r2, #0
 8009f48:	f000 80a0 	beq.w	800a08c <_dtoa_r+0x894>
 8009f4c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f50:	9e06      	ldr	r6, [sp, #24]
 8009f52:	4645      	mov	r5, r8
 8009f54:	9a04      	ldr	r2, [sp, #16]
 8009f56:	2101      	movs	r1, #1
 8009f58:	441a      	add	r2, r3
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	4498      	add	r8, r3
 8009f5e:	9204      	str	r2, [sp, #16]
 8009f60:	f000 ff1c 	bl	800ad9c <__i2b>
 8009f64:	4607      	mov	r7, r0
 8009f66:	2d00      	cmp	r5, #0
 8009f68:	dd0b      	ble.n	8009f82 <_dtoa_r+0x78a>
 8009f6a:	9b04      	ldr	r3, [sp, #16]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	dd08      	ble.n	8009f82 <_dtoa_r+0x78a>
 8009f70:	42ab      	cmp	r3, r5
 8009f72:	9a04      	ldr	r2, [sp, #16]
 8009f74:	bfa8      	it	ge
 8009f76:	462b      	movge	r3, r5
 8009f78:	eba8 0803 	sub.w	r8, r8, r3
 8009f7c:	1aed      	subs	r5, r5, r3
 8009f7e:	1ad3      	subs	r3, r2, r3
 8009f80:	9304      	str	r3, [sp, #16]
 8009f82:	9b06      	ldr	r3, [sp, #24]
 8009f84:	b1fb      	cbz	r3, 8009fc6 <_dtoa_r+0x7ce>
 8009f86:	9b08      	ldr	r3, [sp, #32]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f000 809f 	beq.w	800a0cc <_dtoa_r+0x8d4>
 8009f8e:	2e00      	cmp	r6, #0
 8009f90:	dd11      	ble.n	8009fb6 <_dtoa_r+0x7be>
 8009f92:	4639      	mov	r1, r7
 8009f94:	4632      	mov	r2, r6
 8009f96:	4620      	mov	r0, r4
 8009f98:	f000 ffbc 	bl	800af14 <__pow5mult>
 8009f9c:	465a      	mov	r2, fp
 8009f9e:	4601      	mov	r1, r0
 8009fa0:	4607      	mov	r7, r0
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	f000 ff10 	bl	800adc8 <__multiply>
 8009fa8:	4659      	mov	r1, fp
 8009faa:	9007      	str	r0, [sp, #28]
 8009fac:	4620      	mov	r0, r4
 8009fae:	f000 fdef 	bl	800ab90 <_Bfree>
 8009fb2:	9b07      	ldr	r3, [sp, #28]
 8009fb4:	469b      	mov	fp, r3
 8009fb6:	9b06      	ldr	r3, [sp, #24]
 8009fb8:	1b9a      	subs	r2, r3, r6
 8009fba:	d004      	beq.n	8009fc6 <_dtoa_r+0x7ce>
 8009fbc:	4659      	mov	r1, fp
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	f000 ffa8 	bl	800af14 <__pow5mult>
 8009fc4:	4683      	mov	fp, r0
 8009fc6:	2101      	movs	r1, #1
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f000 fee7 	bl	800ad9c <__i2b>
 8009fce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	4606      	mov	r6, r0
 8009fd4:	dd7c      	ble.n	800a0d0 <_dtoa_r+0x8d8>
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	4601      	mov	r1, r0
 8009fda:	4620      	mov	r0, r4
 8009fdc:	f000 ff9a 	bl	800af14 <__pow5mult>
 8009fe0:	9b05      	ldr	r3, [sp, #20]
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	4606      	mov	r6, r0
 8009fe6:	dd76      	ble.n	800a0d6 <_dtoa_r+0x8de>
 8009fe8:	2300      	movs	r3, #0
 8009fea:	9306      	str	r3, [sp, #24]
 8009fec:	6933      	ldr	r3, [r6, #16]
 8009fee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009ff2:	6918      	ldr	r0, [r3, #16]
 8009ff4:	f000 fe82 	bl	800acfc <__hi0bits>
 8009ff8:	f1c0 0020 	rsb	r0, r0, #32
 8009ffc:	9b04      	ldr	r3, [sp, #16]
 8009ffe:	4418      	add	r0, r3
 800a000:	f010 001f 	ands.w	r0, r0, #31
 800a004:	f000 8086 	beq.w	800a114 <_dtoa_r+0x91c>
 800a008:	f1c0 0320 	rsb	r3, r0, #32
 800a00c:	2b04      	cmp	r3, #4
 800a00e:	dd7f      	ble.n	800a110 <_dtoa_r+0x918>
 800a010:	f1c0 001c 	rsb	r0, r0, #28
 800a014:	9b04      	ldr	r3, [sp, #16]
 800a016:	4403      	add	r3, r0
 800a018:	4480      	add	r8, r0
 800a01a:	4405      	add	r5, r0
 800a01c:	9304      	str	r3, [sp, #16]
 800a01e:	f1b8 0f00 	cmp.w	r8, #0
 800a022:	dd05      	ble.n	800a030 <_dtoa_r+0x838>
 800a024:	4659      	mov	r1, fp
 800a026:	4642      	mov	r2, r8
 800a028:	4620      	mov	r0, r4
 800a02a:	f000 ffcd 	bl	800afc8 <__lshift>
 800a02e:	4683      	mov	fp, r0
 800a030:	9b04      	ldr	r3, [sp, #16]
 800a032:	2b00      	cmp	r3, #0
 800a034:	dd05      	ble.n	800a042 <_dtoa_r+0x84a>
 800a036:	4631      	mov	r1, r6
 800a038:	461a      	mov	r2, r3
 800a03a:	4620      	mov	r0, r4
 800a03c:	f000 ffc4 	bl	800afc8 <__lshift>
 800a040:	4606      	mov	r6, r0
 800a042:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a044:	2b00      	cmp	r3, #0
 800a046:	d069      	beq.n	800a11c <_dtoa_r+0x924>
 800a048:	4631      	mov	r1, r6
 800a04a:	4658      	mov	r0, fp
 800a04c:	f001 f828 	bl	800b0a0 <__mcmp>
 800a050:	2800      	cmp	r0, #0
 800a052:	da63      	bge.n	800a11c <_dtoa_r+0x924>
 800a054:	2300      	movs	r3, #0
 800a056:	4659      	mov	r1, fp
 800a058:	220a      	movs	r2, #10
 800a05a:	4620      	mov	r0, r4
 800a05c:	f000 fdba 	bl	800abd4 <__multadd>
 800a060:	9b08      	ldr	r3, [sp, #32]
 800a062:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a066:	4683      	mov	fp, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	f000 818f 	beq.w	800a38c <_dtoa_r+0xb94>
 800a06e:	4639      	mov	r1, r7
 800a070:	2300      	movs	r3, #0
 800a072:	220a      	movs	r2, #10
 800a074:	4620      	mov	r0, r4
 800a076:	f000 fdad 	bl	800abd4 <__multadd>
 800a07a:	f1b9 0f00 	cmp.w	r9, #0
 800a07e:	4607      	mov	r7, r0
 800a080:	f300 808e 	bgt.w	800a1a0 <_dtoa_r+0x9a8>
 800a084:	9b05      	ldr	r3, [sp, #20]
 800a086:	2b02      	cmp	r3, #2
 800a088:	dc50      	bgt.n	800a12c <_dtoa_r+0x934>
 800a08a:	e089      	b.n	800a1a0 <_dtoa_r+0x9a8>
 800a08c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a08e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a092:	e75d      	b.n	8009f50 <_dtoa_r+0x758>
 800a094:	9b01      	ldr	r3, [sp, #4]
 800a096:	1e5e      	subs	r6, r3, #1
 800a098:	9b06      	ldr	r3, [sp, #24]
 800a09a:	42b3      	cmp	r3, r6
 800a09c:	bfbf      	itttt	lt
 800a09e:	9b06      	ldrlt	r3, [sp, #24]
 800a0a0:	9606      	strlt	r6, [sp, #24]
 800a0a2:	1af2      	sublt	r2, r6, r3
 800a0a4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a0a6:	bfb6      	itet	lt
 800a0a8:	189b      	addlt	r3, r3, r2
 800a0aa:	1b9e      	subge	r6, r3, r6
 800a0ac:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a0ae:	9b01      	ldr	r3, [sp, #4]
 800a0b0:	bfb8      	it	lt
 800a0b2:	2600      	movlt	r6, #0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	bfb5      	itete	lt
 800a0b8:	eba8 0503 	sublt.w	r5, r8, r3
 800a0bc:	9b01      	ldrge	r3, [sp, #4]
 800a0be:	2300      	movlt	r3, #0
 800a0c0:	4645      	movge	r5, r8
 800a0c2:	e747      	b.n	8009f54 <_dtoa_r+0x75c>
 800a0c4:	9e06      	ldr	r6, [sp, #24]
 800a0c6:	9f08      	ldr	r7, [sp, #32]
 800a0c8:	4645      	mov	r5, r8
 800a0ca:	e74c      	b.n	8009f66 <_dtoa_r+0x76e>
 800a0cc:	9a06      	ldr	r2, [sp, #24]
 800a0ce:	e775      	b.n	8009fbc <_dtoa_r+0x7c4>
 800a0d0:	9b05      	ldr	r3, [sp, #20]
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	dc18      	bgt.n	800a108 <_dtoa_r+0x910>
 800a0d6:	9b02      	ldr	r3, [sp, #8]
 800a0d8:	b9b3      	cbnz	r3, 800a108 <_dtoa_r+0x910>
 800a0da:	9b03      	ldr	r3, [sp, #12]
 800a0dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0e0:	b9a3      	cbnz	r3, 800a10c <_dtoa_r+0x914>
 800a0e2:	9b03      	ldr	r3, [sp, #12]
 800a0e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0e8:	0d1b      	lsrs	r3, r3, #20
 800a0ea:	051b      	lsls	r3, r3, #20
 800a0ec:	b12b      	cbz	r3, 800a0fa <_dtoa_r+0x902>
 800a0ee:	9b04      	ldr	r3, [sp, #16]
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	9304      	str	r3, [sp, #16]
 800a0f4:	f108 0801 	add.w	r8, r8, #1
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	9306      	str	r3, [sp, #24]
 800a0fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	f47f af74 	bne.w	8009fec <_dtoa_r+0x7f4>
 800a104:	2001      	movs	r0, #1
 800a106:	e779      	b.n	8009ffc <_dtoa_r+0x804>
 800a108:	2300      	movs	r3, #0
 800a10a:	e7f6      	b.n	800a0fa <_dtoa_r+0x902>
 800a10c:	9b02      	ldr	r3, [sp, #8]
 800a10e:	e7f4      	b.n	800a0fa <_dtoa_r+0x902>
 800a110:	d085      	beq.n	800a01e <_dtoa_r+0x826>
 800a112:	4618      	mov	r0, r3
 800a114:	301c      	adds	r0, #28
 800a116:	e77d      	b.n	800a014 <_dtoa_r+0x81c>
 800a118:	40240000 	.word	0x40240000
 800a11c:	9b01      	ldr	r3, [sp, #4]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	dc38      	bgt.n	800a194 <_dtoa_r+0x99c>
 800a122:	9b05      	ldr	r3, [sp, #20]
 800a124:	2b02      	cmp	r3, #2
 800a126:	dd35      	ble.n	800a194 <_dtoa_r+0x99c>
 800a128:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a12c:	f1b9 0f00 	cmp.w	r9, #0
 800a130:	d10d      	bne.n	800a14e <_dtoa_r+0x956>
 800a132:	4631      	mov	r1, r6
 800a134:	464b      	mov	r3, r9
 800a136:	2205      	movs	r2, #5
 800a138:	4620      	mov	r0, r4
 800a13a:	f000 fd4b 	bl	800abd4 <__multadd>
 800a13e:	4601      	mov	r1, r0
 800a140:	4606      	mov	r6, r0
 800a142:	4658      	mov	r0, fp
 800a144:	f000 ffac 	bl	800b0a0 <__mcmp>
 800a148:	2800      	cmp	r0, #0
 800a14a:	f73f adbd 	bgt.w	8009cc8 <_dtoa_r+0x4d0>
 800a14e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a150:	9d00      	ldr	r5, [sp, #0]
 800a152:	ea6f 0a03 	mvn.w	sl, r3
 800a156:	f04f 0800 	mov.w	r8, #0
 800a15a:	4631      	mov	r1, r6
 800a15c:	4620      	mov	r0, r4
 800a15e:	f000 fd17 	bl	800ab90 <_Bfree>
 800a162:	2f00      	cmp	r7, #0
 800a164:	f43f aeb4 	beq.w	8009ed0 <_dtoa_r+0x6d8>
 800a168:	f1b8 0f00 	cmp.w	r8, #0
 800a16c:	d005      	beq.n	800a17a <_dtoa_r+0x982>
 800a16e:	45b8      	cmp	r8, r7
 800a170:	d003      	beq.n	800a17a <_dtoa_r+0x982>
 800a172:	4641      	mov	r1, r8
 800a174:	4620      	mov	r0, r4
 800a176:	f000 fd0b 	bl	800ab90 <_Bfree>
 800a17a:	4639      	mov	r1, r7
 800a17c:	4620      	mov	r0, r4
 800a17e:	f000 fd07 	bl	800ab90 <_Bfree>
 800a182:	e6a5      	b.n	8009ed0 <_dtoa_r+0x6d8>
 800a184:	2600      	movs	r6, #0
 800a186:	4637      	mov	r7, r6
 800a188:	e7e1      	b.n	800a14e <_dtoa_r+0x956>
 800a18a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a18c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a190:	4637      	mov	r7, r6
 800a192:	e599      	b.n	8009cc8 <_dtoa_r+0x4d0>
 800a194:	9b08      	ldr	r3, [sp, #32]
 800a196:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	f000 80fd 	beq.w	800a39a <_dtoa_r+0xba2>
 800a1a0:	2d00      	cmp	r5, #0
 800a1a2:	dd05      	ble.n	800a1b0 <_dtoa_r+0x9b8>
 800a1a4:	4639      	mov	r1, r7
 800a1a6:	462a      	mov	r2, r5
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	f000 ff0d 	bl	800afc8 <__lshift>
 800a1ae:	4607      	mov	r7, r0
 800a1b0:	9b06      	ldr	r3, [sp, #24]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d05c      	beq.n	800a270 <_dtoa_r+0xa78>
 800a1b6:	6879      	ldr	r1, [r7, #4]
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	f000 fca9 	bl	800ab10 <_Balloc>
 800a1be:	4605      	mov	r5, r0
 800a1c0:	b928      	cbnz	r0, 800a1ce <_dtoa_r+0x9d6>
 800a1c2:	4b80      	ldr	r3, [pc, #512]	; (800a3c4 <_dtoa_r+0xbcc>)
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a1ca:	f7ff bb2e 	b.w	800982a <_dtoa_r+0x32>
 800a1ce:	693a      	ldr	r2, [r7, #16]
 800a1d0:	3202      	adds	r2, #2
 800a1d2:	0092      	lsls	r2, r2, #2
 800a1d4:	f107 010c 	add.w	r1, r7, #12
 800a1d8:	300c      	adds	r0, #12
 800a1da:	f7fd fc71 	bl	8007ac0 <memcpy>
 800a1de:	2201      	movs	r2, #1
 800a1e0:	4629      	mov	r1, r5
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	f000 fef0 	bl	800afc8 <__lshift>
 800a1e8:	9b00      	ldr	r3, [sp, #0]
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	9301      	str	r3, [sp, #4]
 800a1ee:	9b00      	ldr	r3, [sp, #0]
 800a1f0:	444b      	add	r3, r9
 800a1f2:	9307      	str	r3, [sp, #28]
 800a1f4:	9b02      	ldr	r3, [sp, #8]
 800a1f6:	f003 0301 	and.w	r3, r3, #1
 800a1fa:	46b8      	mov	r8, r7
 800a1fc:	9306      	str	r3, [sp, #24]
 800a1fe:	4607      	mov	r7, r0
 800a200:	9b01      	ldr	r3, [sp, #4]
 800a202:	4631      	mov	r1, r6
 800a204:	3b01      	subs	r3, #1
 800a206:	4658      	mov	r0, fp
 800a208:	9302      	str	r3, [sp, #8]
 800a20a:	f7ff fa69 	bl	80096e0 <quorem>
 800a20e:	4603      	mov	r3, r0
 800a210:	3330      	adds	r3, #48	; 0x30
 800a212:	9004      	str	r0, [sp, #16]
 800a214:	4641      	mov	r1, r8
 800a216:	4658      	mov	r0, fp
 800a218:	9308      	str	r3, [sp, #32]
 800a21a:	f000 ff41 	bl	800b0a0 <__mcmp>
 800a21e:	463a      	mov	r2, r7
 800a220:	4681      	mov	r9, r0
 800a222:	4631      	mov	r1, r6
 800a224:	4620      	mov	r0, r4
 800a226:	f000 ff57 	bl	800b0d8 <__mdiff>
 800a22a:	68c2      	ldr	r2, [r0, #12]
 800a22c:	9b08      	ldr	r3, [sp, #32]
 800a22e:	4605      	mov	r5, r0
 800a230:	bb02      	cbnz	r2, 800a274 <_dtoa_r+0xa7c>
 800a232:	4601      	mov	r1, r0
 800a234:	4658      	mov	r0, fp
 800a236:	f000 ff33 	bl	800b0a0 <__mcmp>
 800a23a:	9b08      	ldr	r3, [sp, #32]
 800a23c:	4602      	mov	r2, r0
 800a23e:	4629      	mov	r1, r5
 800a240:	4620      	mov	r0, r4
 800a242:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a246:	f000 fca3 	bl	800ab90 <_Bfree>
 800a24a:	9b05      	ldr	r3, [sp, #20]
 800a24c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a24e:	9d01      	ldr	r5, [sp, #4]
 800a250:	ea43 0102 	orr.w	r1, r3, r2
 800a254:	9b06      	ldr	r3, [sp, #24]
 800a256:	430b      	orrs	r3, r1
 800a258:	9b08      	ldr	r3, [sp, #32]
 800a25a:	d10d      	bne.n	800a278 <_dtoa_r+0xa80>
 800a25c:	2b39      	cmp	r3, #57	; 0x39
 800a25e:	d029      	beq.n	800a2b4 <_dtoa_r+0xabc>
 800a260:	f1b9 0f00 	cmp.w	r9, #0
 800a264:	dd01      	ble.n	800a26a <_dtoa_r+0xa72>
 800a266:	9b04      	ldr	r3, [sp, #16]
 800a268:	3331      	adds	r3, #49	; 0x31
 800a26a:	9a02      	ldr	r2, [sp, #8]
 800a26c:	7013      	strb	r3, [r2, #0]
 800a26e:	e774      	b.n	800a15a <_dtoa_r+0x962>
 800a270:	4638      	mov	r0, r7
 800a272:	e7b9      	b.n	800a1e8 <_dtoa_r+0x9f0>
 800a274:	2201      	movs	r2, #1
 800a276:	e7e2      	b.n	800a23e <_dtoa_r+0xa46>
 800a278:	f1b9 0f00 	cmp.w	r9, #0
 800a27c:	db06      	blt.n	800a28c <_dtoa_r+0xa94>
 800a27e:	9905      	ldr	r1, [sp, #20]
 800a280:	ea41 0909 	orr.w	r9, r1, r9
 800a284:	9906      	ldr	r1, [sp, #24]
 800a286:	ea59 0101 	orrs.w	r1, r9, r1
 800a28a:	d120      	bne.n	800a2ce <_dtoa_r+0xad6>
 800a28c:	2a00      	cmp	r2, #0
 800a28e:	ddec      	ble.n	800a26a <_dtoa_r+0xa72>
 800a290:	4659      	mov	r1, fp
 800a292:	2201      	movs	r2, #1
 800a294:	4620      	mov	r0, r4
 800a296:	9301      	str	r3, [sp, #4]
 800a298:	f000 fe96 	bl	800afc8 <__lshift>
 800a29c:	4631      	mov	r1, r6
 800a29e:	4683      	mov	fp, r0
 800a2a0:	f000 fefe 	bl	800b0a0 <__mcmp>
 800a2a4:	2800      	cmp	r0, #0
 800a2a6:	9b01      	ldr	r3, [sp, #4]
 800a2a8:	dc02      	bgt.n	800a2b0 <_dtoa_r+0xab8>
 800a2aa:	d1de      	bne.n	800a26a <_dtoa_r+0xa72>
 800a2ac:	07da      	lsls	r2, r3, #31
 800a2ae:	d5dc      	bpl.n	800a26a <_dtoa_r+0xa72>
 800a2b0:	2b39      	cmp	r3, #57	; 0x39
 800a2b2:	d1d8      	bne.n	800a266 <_dtoa_r+0xa6e>
 800a2b4:	9a02      	ldr	r2, [sp, #8]
 800a2b6:	2339      	movs	r3, #57	; 0x39
 800a2b8:	7013      	strb	r3, [r2, #0]
 800a2ba:	462b      	mov	r3, r5
 800a2bc:	461d      	mov	r5, r3
 800a2be:	3b01      	subs	r3, #1
 800a2c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a2c4:	2a39      	cmp	r2, #57	; 0x39
 800a2c6:	d050      	beq.n	800a36a <_dtoa_r+0xb72>
 800a2c8:	3201      	adds	r2, #1
 800a2ca:	701a      	strb	r2, [r3, #0]
 800a2cc:	e745      	b.n	800a15a <_dtoa_r+0x962>
 800a2ce:	2a00      	cmp	r2, #0
 800a2d0:	dd03      	ble.n	800a2da <_dtoa_r+0xae2>
 800a2d2:	2b39      	cmp	r3, #57	; 0x39
 800a2d4:	d0ee      	beq.n	800a2b4 <_dtoa_r+0xabc>
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	e7c7      	b.n	800a26a <_dtoa_r+0xa72>
 800a2da:	9a01      	ldr	r2, [sp, #4]
 800a2dc:	9907      	ldr	r1, [sp, #28]
 800a2de:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a2e2:	428a      	cmp	r2, r1
 800a2e4:	d02a      	beq.n	800a33c <_dtoa_r+0xb44>
 800a2e6:	4659      	mov	r1, fp
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	220a      	movs	r2, #10
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	f000 fc71 	bl	800abd4 <__multadd>
 800a2f2:	45b8      	cmp	r8, r7
 800a2f4:	4683      	mov	fp, r0
 800a2f6:	f04f 0300 	mov.w	r3, #0
 800a2fa:	f04f 020a 	mov.w	r2, #10
 800a2fe:	4641      	mov	r1, r8
 800a300:	4620      	mov	r0, r4
 800a302:	d107      	bne.n	800a314 <_dtoa_r+0xb1c>
 800a304:	f000 fc66 	bl	800abd4 <__multadd>
 800a308:	4680      	mov	r8, r0
 800a30a:	4607      	mov	r7, r0
 800a30c:	9b01      	ldr	r3, [sp, #4]
 800a30e:	3301      	adds	r3, #1
 800a310:	9301      	str	r3, [sp, #4]
 800a312:	e775      	b.n	800a200 <_dtoa_r+0xa08>
 800a314:	f000 fc5e 	bl	800abd4 <__multadd>
 800a318:	4639      	mov	r1, r7
 800a31a:	4680      	mov	r8, r0
 800a31c:	2300      	movs	r3, #0
 800a31e:	220a      	movs	r2, #10
 800a320:	4620      	mov	r0, r4
 800a322:	f000 fc57 	bl	800abd4 <__multadd>
 800a326:	4607      	mov	r7, r0
 800a328:	e7f0      	b.n	800a30c <_dtoa_r+0xb14>
 800a32a:	f1b9 0f00 	cmp.w	r9, #0
 800a32e:	9a00      	ldr	r2, [sp, #0]
 800a330:	bfcc      	ite	gt
 800a332:	464d      	movgt	r5, r9
 800a334:	2501      	movle	r5, #1
 800a336:	4415      	add	r5, r2
 800a338:	f04f 0800 	mov.w	r8, #0
 800a33c:	4659      	mov	r1, fp
 800a33e:	2201      	movs	r2, #1
 800a340:	4620      	mov	r0, r4
 800a342:	9301      	str	r3, [sp, #4]
 800a344:	f000 fe40 	bl	800afc8 <__lshift>
 800a348:	4631      	mov	r1, r6
 800a34a:	4683      	mov	fp, r0
 800a34c:	f000 fea8 	bl	800b0a0 <__mcmp>
 800a350:	2800      	cmp	r0, #0
 800a352:	dcb2      	bgt.n	800a2ba <_dtoa_r+0xac2>
 800a354:	d102      	bne.n	800a35c <_dtoa_r+0xb64>
 800a356:	9b01      	ldr	r3, [sp, #4]
 800a358:	07db      	lsls	r3, r3, #31
 800a35a:	d4ae      	bmi.n	800a2ba <_dtoa_r+0xac2>
 800a35c:	462b      	mov	r3, r5
 800a35e:	461d      	mov	r5, r3
 800a360:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a364:	2a30      	cmp	r2, #48	; 0x30
 800a366:	d0fa      	beq.n	800a35e <_dtoa_r+0xb66>
 800a368:	e6f7      	b.n	800a15a <_dtoa_r+0x962>
 800a36a:	9a00      	ldr	r2, [sp, #0]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d1a5      	bne.n	800a2bc <_dtoa_r+0xac4>
 800a370:	f10a 0a01 	add.w	sl, sl, #1
 800a374:	2331      	movs	r3, #49	; 0x31
 800a376:	e779      	b.n	800a26c <_dtoa_r+0xa74>
 800a378:	4b13      	ldr	r3, [pc, #76]	; (800a3c8 <_dtoa_r+0xbd0>)
 800a37a:	f7ff baaf 	b.w	80098dc <_dtoa_r+0xe4>
 800a37e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a380:	2b00      	cmp	r3, #0
 800a382:	f47f aa86 	bne.w	8009892 <_dtoa_r+0x9a>
 800a386:	4b11      	ldr	r3, [pc, #68]	; (800a3cc <_dtoa_r+0xbd4>)
 800a388:	f7ff baa8 	b.w	80098dc <_dtoa_r+0xe4>
 800a38c:	f1b9 0f00 	cmp.w	r9, #0
 800a390:	dc03      	bgt.n	800a39a <_dtoa_r+0xba2>
 800a392:	9b05      	ldr	r3, [sp, #20]
 800a394:	2b02      	cmp	r3, #2
 800a396:	f73f aec9 	bgt.w	800a12c <_dtoa_r+0x934>
 800a39a:	9d00      	ldr	r5, [sp, #0]
 800a39c:	4631      	mov	r1, r6
 800a39e:	4658      	mov	r0, fp
 800a3a0:	f7ff f99e 	bl	80096e0 <quorem>
 800a3a4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a3a8:	f805 3b01 	strb.w	r3, [r5], #1
 800a3ac:	9a00      	ldr	r2, [sp, #0]
 800a3ae:	1aaa      	subs	r2, r5, r2
 800a3b0:	4591      	cmp	r9, r2
 800a3b2:	ddba      	ble.n	800a32a <_dtoa_r+0xb32>
 800a3b4:	4659      	mov	r1, fp
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	220a      	movs	r2, #10
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	f000 fc0a 	bl	800abd4 <__multadd>
 800a3c0:	4683      	mov	fp, r0
 800a3c2:	e7eb      	b.n	800a39c <_dtoa_r+0xba4>
 800a3c4:	0800f744 	.word	0x0800f744
 800a3c8:	0800f949 	.word	0x0800f949
 800a3cc:	0800f6c1 	.word	0x0800f6c1

0800a3d0 <rshift>:
 800a3d0:	6903      	ldr	r3, [r0, #16]
 800a3d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a3d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3da:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a3de:	f100 0414 	add.w	r4, r0, #20
 800a3e2:	dd45      	ble.n	800a470 <rshift+0xa0>
 800a3e4:	f011 011f 	ands.w	r1, r1, #31
 800a3e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a3ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a3f0:	d10c      	bne.n	800a40c <rshift+0x3c>
 800a3f2:	f100 0710 	add.w	r7, r0, #16
 800a3f6:	4629      	mov	r1, r5
 800a3f8:	42b1      	cmp	r1, r6
 800a3fa:	d334      	bcc.n	800a466 <rshift+0x96>
 800a3fc:	1a9b      	subs	r3, r3, r2
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	1eea      	subs	r2, r5, #3
 800a402:	4296      	cmp	r6, r2
 800a404:	bf38      	it	cc
 800a406:	2300      	movcc	r3, #0
 800a408:	4423      	add	r3, r4
 800a40a:	e015      	b.n	800a438 <rshift+0x68>
 800a40c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a410:	f1c1 0820 	rsb	r8, r1, #32
 800a414:	40cf      	lsrs	r7, r1
 800a416:	f105 0e04 	add.w	lr, r5, #4
 800a41a:	46a1      	mov	r9, r4
 800a41c:	4576      	cmp	r6, lr
 800a41e:	46f4      	mov	ip, lr
 800a420:	d815      	bhi.n	800a44e <rshift+0x7e>
 800a422:	1a9b      	subs	r3, r3, r2
 800a424:	009a      	lsls	r2, r3, #2
 800a426:	3a04      	subs	r2, #4
 800a428:	3501      	adds	r5, #1
 800a42a:	42ae      	cmp	r6, r5
 800a42c:	bf38      	it	cc
 800a42e:	2200      	movcc	r2, #0
 800a430:	18a3      	adds	r3, r4, r2
 800a432:	50a7      	str	r7, [r4, r2]
 800a434:	b107      	cbz	r7, 800a438 <rshift+0x68>
 800a436:	3304      	adds	r3, #4
 800a438:	1b1a      	subs	r2, r3, r4
 800a43a:	42a3      	cmp	r3, r4
 800a43c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a440:	bf08      	it	eq
 800a442:	2300      	moveq	r3, #0
 800a444:	6102      	str	r2, [r0, #16]
 800a446:	bf08      	it	eq
 800a448:	6143      	streq	r3, [r0, #20]
 800a44a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a44e:	f8dc c000 	ldr.w	ip, [ip]
 800a452:	fa0c fc08 	lsl.w	ip, ip, r8
 800a456:	ea4c 0707 	orr.w	r7, ip, r7
 800a45a:	f849 7b04 	str.w	r7, [r9], #4
 800a45e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a462:	40cf      	lsrs	r7, r1
 800a464:	e7da      	b.n	800a41c <rshift+0x4c>
 800a466:	f851 cb04 	ldr.w	ip, [r1], #4
 800a46a:	f847 cf04 	str.w	ip, [r7, #4]!
 800a46e:	e7c3      	b.n	800a3f8 <rshift+0x28>
 800a470:	4623      	mov	r3, r4
 800a472:	e7e1      	b.n	800a438 <rshift+0x68>

0800a474 <__hexdig_fun>:
 800a474:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a478:	2b09      	cmp	r3, #9
 800a47a:	d802      	bhi.n	800a482 <__hexdig_fun+0xe>
 800a47c:	3820      	subs	r0, #32
 800a47e:	b2c0      	uxtb	r0, r0
 800a480:	4770      	bx	lr
 800a482:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a486:	2b05      	cmp	r3, #5
 800a488:	d801      	bhi.n	800a48e <__hexdig_fun+0x1a>
 800a48a:	3847      	subs	r0, #71	; 0x47
 800a48c:	e7f7      	b.n	800a47e <__hexdig_fun+0xa>
 800a48e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a492:	2b05      	cmp	r3, #5
 800a494:	d801      	bhi.n	800a49a <__hexdig_fun+0x26>
 800a496:	3827      	subs	r0, #39	; 0x27
 800a498:	e7f1      	b.n	800a47e <__hexdig_fun+0xa>
 800a49a:	2000      	movs	r0, #0
 800a49c:	4770      	bx	lr
	...

0800a4a0 <__gethex>:
 800a4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a4:	ed2d 8b02 	vpush	{d8}
 800a4a8:	b089      	sub	sp, #36	; 0x24
 800a4aa:	ee08 0a10 	vmov	s16, r0
 800a4ae:	9304      	str	r3, [sp, #16]
 800a4b0:	4bbc      	ldr	r3, [pc, #752]	; (800a7a4 <__gethex+0x304>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	9301      	str	r3, [sp, #4]
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	468b      	mov	fp, r1
 800a4ba:	4690      	mov	r8, r2
 800a4bc:	f7f5 fe90 	bl	80001e0 <strlen>
 800a4c0:	9b01      	ldr	r3, [sp, #4]
 800a4c2:	f8db 2000 	ldr.w	r2, [fp]
 800a4c6:	4403      	add	r3, r0
 800a4c8:	4682      	mov	sl, r0
 800a4ca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a4ce:	9305      	str	r3, [sp, #20]
 800a4d0:	1c93      	adds	r3, r2, #2
 800a4d2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a4d6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a4da:	32fe      	adds	r2, #254	; 0xfe
 800a4dc:	18d1      	adds	r1, r2, r3
 800a4de:	461f      	mov	r7, r3
 800a4e0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a4e4:	9100      	str	r1, [sp, #0]
 800a4e6:	2830      	cmp	r0, #48	; 0x30
 800a4e8:	d0f8      	beq.n	800a4dc <__gethex+0x3c>
 800a4ea:	f7ff ffc3 	bl	800a474 <__hexdig_fun>
 800a4ee:	4604      	mov	r4, r0
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	d13a      	bne.n	800a56a <__gethex+0xca>
 800a4f4:	9901      	ldr	r1, [sp, #4]
 800a4f6:	4652      	mov	r2, sl
 800a4f8:	4638      	mov	r0, r7
 800a4fa:	f7fe fa08 	bl	800890e <strncmp>
 800a4fe:	4605      	mov	r5, r0
 800a500:	2800      	cmp	r0, #0
 800a502:	d168      	bne.n	800a5d6 <__gethex+0x136>
 800a504:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a508:	eb07 060a 	add.w	r6, r7, sl
 800a50c:	f7ff ffb2 	bl	800a474 <__hexdig_fun>
 800a510:	2800      	cmp	r0, #0
 800a512:	d062      	beq.n	800a5da <__gethex+0x13a>
 800a514:	4633      	mov	r3, r6
 800a516:	7818      	ldrb	r0, [r3, #0]
 800a518:	2830      	cmp	r0, #48	; 0x30
 800a51a:	461f      	mov	r7, r3
 800a51c:	f103 0301 	add.w	r3, r3, #1
 800a520:	d0f9      	beq.n	800a516 <__gethex+0x76>
 800a522:	f7ff ffa7 	bl	800a474 <__hexdig_fun>
 800a526:	2301      	movs	r3, #1
 800a528:	fab0 f480 	clz	r4, r0
 800a52c:	0964      	lsrs	r4, r4, #5
 800a52e:	4635      	mov	r5, r6
 800a530:	9300      	str	r3, [sp, #0]
 800a532:	463a      	mov	r2, r7
 800a534:	4616      	mov	r6, r2
 800a536:	3201      	adds	r2, #1
 800a538:	7830      	ldrb	r0, [r6, #0]
 800a53a:	f7ff ff9b 	bl	800a474 <__hexdig_fun>
 800a53e:	2800      	cmp	r0, #0
 800a540:	d1f8      	bne.n	800a534 <__gethex+0x94>
 800a542:	9901      	ldr	r1, [sp, #4]
 800a544:	4652      	mov	r2, sl
 800a546:	4630      	mov	r0, r6
 800a548:	f7fe f9e1 	bl	800890e <strncmp>
 800a54c:	b980      	cbnz	r0, 800a570 <__gethex+0xd0>
 800a54e:	b94d      	cbnz	r5, 800a564 <__gethex+0xc4>
 800a550:	eb06 050a 	add.w	r5, r6, sl
 800a554:	462a      	mov	r2, r5
 800a556:	4616      	mov	r6, r2
 800a558:	3201      	adds	r2, #1
 800a55a:	7830      	ldrb	r0, [r6, #0]
 800a55c:	f7ff ff8a 	bl	800a474 <__hexdig_fun>
 800a560:	2800      	cmp	r0, #0
 800a562:	d1f8      	bne.n	800a556 <__gethex+0xb6>
 800a564:	1bad      	subs	r5, r5, r6
 800a566:	00ad      	lsls	r5, r5, #2
 800a568:	e004      	b.n	800a574 <__gethex+0xd4>
 800a56a:	2400      	movs	r4, #0
 800a56c:	4625      	mov	r5, r4
 800a56e:	e7e0      	b.n	800a532 <__gethex+0x92>
 800a570:	2d00      	cmp	r5, #0
 800a572:	d1f7      	bne.n	800a564 <__gethex+0xc4>
 800a574:	7833      	ldrb	r3, [r6, #0]
 800a576:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a57a:	2b50      	cmp	r3, #80	; 0x50
 800a57c:	d13b      	bne.n	800a5f6 <__gethex+0x156>
 800a57e:	7873      	ldrb	r3, [r6, #1]
 800a580:	2b2b      	cmp	r3, #43	; 0x2b
 800a582:	d02c      	beq.n	800a5de <__gethex+0x13e>
 800a584:	2b2d      	cmp	r3, #45	; 0x2d
 800a586:	d02e      	beq.n	800a5e6 <__gethex+0x146>
 800a588:	1c71      	adds	r1, r6, #1
 800a58a:	f04f 0900 	mov.w	r9, #0
 800a58e:	7808      	ldrb	r0, [r1, #0]
 800a590:	f7ff ff70 	bl	800a474 <__hexdig_fun>
 800a594:	1e43      	subs	r3, r0, #1
 800a596:	b2db      	uxtb	r3, r3
 800a598:	2b18      	cmp	r3, #24
 800a59a:	d82c      	bhi.n	800a5f6 <__gethex+0x156>
 800a59c:	f1a0 0210 	sub.w	r2, r0, #16
 800a5a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a5a4:	f7ff ff66 	bl	800a474 <__hexdig_fun>
 800a5a8:	1e43      	subs	r3, r0, #1
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	2b18      	cmp	r3, #24
 800a5ae:	d91d      	bls.n	800a5ec <__gethex+0x14c>
 800a5b0:	f1b9 0f00 	cmp.w	r9, #0
 800a5b4:	d000      	beq.n	800a5b8 <__gethex+0x118>
 800a5b6:	4252      	negs	r2, r2
 800a5b8:	4415      	add	r5, r2
 800a5ba:	f8cb 1000 	str.w	r1, [fp]
 800a5be:	b1e4      	cbz	r4, 800a5fa <__gethex+0x15a>
 800a5c0:	9b00      	ldr	r3, [sp, #0]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	bf14      	ite	ne
 800a5c6:	2700      	movne	r7, #0
 800a5c8:	2706      	moveq	r7, #6
 800a5ca:	4638      	mov	r0, r7
 800a5cc:	b009      	add	sp, #36	; 0x24
 800a5ce:	ecbd 8b02 	vpop	{d8}
 800a5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5d6:	463e      	mov	r6, r7
 800a5d8:	4625      	mov	r5, r4
 800a5da:	2401      	movs	r4, #1
 800a5dc:	e7ca      	b.n	800a574 <__gethex+0xd4>
 800a5de:	f04f 0900 	mov.w	r9, #0
 800a5e2:	1cb1      	adds	r1, r6, #2
 800a5e4:	e7d3      	b.n	800a58e <__gethex+0xee>
 800a5e6:	f04f 0901 	mov.w	r9, #1
 800a5ea:	e7fa      	b.n	800a5e2 <__gethex+0x142>
 800a5ec:	230a      	movs	r3, #10
 800a5ee:	fb03 0202 	mla	r2, r3, r2, r0
 800a5f2:	3a10      	subs	r2, #16
 800a5f4:	e7d4      	b.n	800a5a0 <__gethex+0x100>
 800a5f6:	4631      	mov	r1, r6
 800a5f8:	e7df      	b.n	800a5ba <__gethex+0x11a>
 800a5fa:	1bf3      	subs	r3, r6, r7
 800a5fc:	3b01      	subs	r3, #1
 800a5fe:	4621      	mov	r1, r4
 800a600:	2b07      	cmp	r3, #7
 800a602:	dc0b      	bgt.n	800a61c <__gethex+0x17c>
 800a604:	ee18 0a10 	vmov	r0, s16
 800a608:	f000 fa82 	bl	800ab10 <_Balloc>
 800a60c:	4604      	mov	r4, r0
 800a60e:	b940      	cbnz	r0, 800a622 <__gethex+0x182>
 800a610:	4b65      	ldr	r3, [pc, #404]	; (800a7a8 <__gethex+0x308>)
 800a612:	4602      	mov	r2, r0
 800a614:	21de      	movs	r1, #222	; 0xde
 800a616:	4865      	ldr	r0, [pc, #404]	; (800a7ac <__gethex+0x30c>)
 800a618:	f001 fd92 	bl	800c140 <__assert_func>
 800a61c:	3101      	adds	r1, #1
 800a61e:	105b      	asrs	r3, r3, #1
 800a620:	e7ee      	b.n	800a600 <__gethex+0x160>
 800a622:	f100 0914 	add.w	r9, r0, #20
 800a626:	f04f 0b00 	mov.w	fp, #0
 800a62a:	f1ca 0301 	rsb	r3, sl, #1
 800a62e:	f8cd 9008 	str.w	r9, [sp, #8]
 800a632:	f8cd b000 	str.w	fp, [sp]
 800a636:	9306      	str	r3, [sp, #24]
 800a638:	42b7      	cmp	r7, r6
 800a63a:	d340      	bcc.n	800a6be <__gethex+0x21e>
 800a63c:	9802      	ldr	r0, [sp, #8]
 800a63e:	9b00      	ldr	r3, [sp, #0]
 800a640:	f840 3b04 	str.w	r3, [r0], #4
 800a644:	eba0 0009 	sub.w	r0, r0, r9
 800a648:	1080      	asrs	r0, r0, #2
 800a64a:	0146      	lsls	r6, r0, #5
 800a64c:	6120      	str	r0, [r4, #16]
 800a64e:	4618      	mov	r0, r3
 800a650:	f000 fb54 	bl	800acfc <__hi0bits>
 800a654:	1a30      	subs	r0, r6, r0
 800a656:	f8d8 6000 	ldr.w	r6, [r8]
 800a65a:	42b0      	cmp	r0, r6
 800a65c:	dd63      	ble.n	800a726 <__gethex+0x286>
 800a65e:	1b87      	subs	r7, r0, r6
 800a660:	4639      	mov	r1, r7
 800a662:	4620      	mov	r0, r4
 800a664:	f000 feee 	bl	800b444 <__any_on>
 800a668:	4682      	mov	sl, r0
 800a66a:	b1a8      	cbz	r0, 800a698 <__gethex+0x1f8>
 800a66c:	1e7b      	subs	r3, r7, #1
 800a66e:	1159      	asrs	r1, r3, #5
 800a670:	f003 021f 	and.w	r2, r3, #31
 800a674:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a678:	f04f 0a01 	mov.w	sl, #1
 800a67c:	fa0a f202 	lsl.w	r2, sl, r2
 800a680:	420a      	tst	r2, r1
 800a682:	d009      	beq.n	800a698 <__gethex+0x1f8>
 800a684:	4553      	cmp	r3, sl
 800a686:	dd05      	ble.n	800a694 <__gethex+0x1f4>
 800a688:	1eb9      	subs	r1, r7, #2
 800a68a:	4620      	mov	r0, r4
 800a68c:	f000 feda 	bl	800b444 <__any_on>
 800a690:	2800      	cmp	r0, #0
 800a692:	d145      	bne.n	800a720 <__gethex+0x280>
 800a694:	f04f 0a02 	mov.w	sl, #2
 800a698:	4639      	mov	r1, r7
 800a69a:	4620      	mov	r0, r4
 800a69c:	f7ff fe98 	bl	800a3d0 <rshift>
 800a6a0:	443d      	add	r5, r7
 800a6a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a6a6:	42ab      	cmp	r3, r5
 800a6a8:	da4c      	bge.n	800a744 <__gethex+0x2a4>
 800a6aa:	ee18 0a10 	vmov	r0, s16
 800a6ae:	4621      	mov	r1, r4
 800a6b0:	f000 fa6e 	bl	800ab90 <_Bfree>
 800a6b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	6013      	str	r3, [r2, #0]
 800a6ba:	27a3      	movs	r7, #163	; 0xa3
 800a6bc:	e785      	b.n	800a5ca <__gethex+0x12a>
 800a6be:	1e73      	subs	r3, r6, #1
 800a6c0:	9a05      	ldr	r2, [sp, #20]
 800a6c2:	9303      	str	r3, [sp, #12]
 800a6c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d019      	beq.n	800a700 <__gethex+0x260>
 800a6cc:	f1bb 0f20 	cmp.w	fp, #32
 800a6d0:	d107      	bne.n	800a6e2 <__gethex+0x242>
 800a6d2:	9b02      	ldr	r3, [sp, #8]
 800a6d4:	9a00      	ldr	r2, [sp, #0]
 800a6d6:	f843 2b04 	str.w	r2, [r3], #4
 800a6da:	9302      	str	r3, [sp, #8]
 800a6dc:	2300      	movs	r3, #0
 800a6de:	9300      	str	r3, [sp, #0]
 800a6e0:	469b      	mov	fp, r3
 800a6e2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a6e6:	f7ff fec5 	bl	800a474 <__hexdig_fun>
 800a6ea:	9b00      	ldr	r3, [sp, #0]
 800a6ec:	f000 000f 	and.w	r0, r0, #15
 800a6f0:	fa00 f00b 	lsl.w	r0, r0, fp
 800a6f4:	4303      	orrs	r3, r0
 800a6f6:	9300      	str	r3, [sp, #0]
 800a6f8:	f10b 0b04 	add.w	fp, fp, #4
 800a6fc:	9b03      	ldr	r3, [sp, #12]
 800a6fe:	e00d      	b.n	800a71c <__gethex+0x27c>
 800a700:	9b03      	ldr	r3, [sp, #12]
 800a702:	9a06      	ldr	r2, [sp, #24]
 800a704:	4413      	add	r3, r2
 800a706:	42bb      	cmp	r3, r7
 800a708:	d3e0      	bcc.n	800a6cc <__gethex+0x22c>
 800a70a:	4618      	mov	r0, r3
 800a70c:	9901      	ldr	r1, [sp, #4]
 800a70e:	9307      	str	r3, [sp, #28]
 800a710:	4652      	mov	r2, sl
 800a712:	f7fe f8fc 	bl	800890e <strncmp>
 800a716:	9b07      	ldr	r3, [sp, #28]
 800a718:	2800      	cmp	r0, #0
 800a71a:	d1d7      	bne.n	800a6cc <__gethex+0x22c>
 800a71c:	461e      	mov	r6, r3
 800a71e:	e78b      	b.n	800a638 <__gethex+0x198>
 800a720:	f04f 0a03 	mov.w	sl, #3
 800a724:	e7b8      	b.n	800a698 <__gethex+0x1f8>
 800a726:	da0a      	bge.n	800a73e <__gethex+0x29e>
 800a728:	1a37      	subs	r7, r6, r0
 800a72a:	4621      	mov	r1, r4
 800a72c:	ee18 0a10 	vmov	r0, s16
 800a730:	463a      	mov	r2, r7
 800a732:	f000 fc49 	bl	800afc8 <__lshift>
 800a736:	1bed      	subs	r5, r5, r7
 800a738:	4604      	mov	r4, r0
 800a73a:	f100 0914 	add.w	r9, r0, #20
 800a73e:	f04f 0a00 	mov.w	sl, #0
 800a742:	e7ae      	b.n	800a6a2 <__gethex+0x202>
 800a744:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a748:	42a8      	cmp	r0, r5
 800a74a:	dd72      	ble.n	800a832 <__gethex+0x392>
 800a74c:	1b45      	subs	r5, r0, r5
 800a74e:	42ae      	cmp	r6, r5
 800a750:	dc36      	bgt.n	800a7c0 <__gethex+0x320>
 800a752:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a756:	2b02      	cmp	r3, #2
 800a758:	d02a      	beq.n	800a7b0 <__gethex+0x310>
 800a75a:	2b03      	cmp	r3, #3
 800a75c:	d02c      	beq.n	800a7b8 <__gethex+0x318>
 800a75e:	2b01      	cmp	r3, #1
 800a760:	d115      	bne.n	800a78e <__gethex+0x2ee>
 800a762:	42ae      	cmp	r6, r5
 800a764:	d113      	bne.n	800a78e <__gethex+0x2ee>
 800a766:	2e01      	cmp	r6, #1
 800a768:	d10b      	bne.n	800a782 <__gethex+0x2e2>
 800a76a:	9a04      	ldr	r2, [sp, #16]
 800a76c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a770:	6013      	str	r3, [r2, #0]
 800a772:	2301      	movs	r3, #1
 800a774:	6123      	str	r3, [r4, #16]
 800a776:	f8c9 3000 	str.w	r3, [r9]
 800a77a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a77c:	2762      	movs	r7, #98	; 0x62
 800a77e:	601c      	str	r4, [r3, #0]
 800a780:	e723      	b.n	800a5ca <__gethex+0x12a>
 800a782:	1e71      	subs	r1, r6, #1
 800a784:	4620      	mov	r0, r4
 800a786:	f000 fe5d 	bl	800b444 <__any_on>
 800a78a:	2800      	cmp	r0, #0
 800a78c:	d1ed      	bne.n	800a76a <__gethex+0x2ca>
 800a78e:	ee18 0a10 	vmov	r0, s16
 800a792:	4621      	mov	r1, r4
 800a794:	f000 f9fc 	bl	800ab90 <_Bfree>
 800a798:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a79a:	2300      	movs	r3, #0
 800a79c:	6013      	str	r3, [r2, #0]
 800a79e:	2750      	movs	r7, #80	; 0x50
 800a7a0:	e713      	b.n	800a5ca <__gethex+0x12a>
 800a7a2:	bf00      	nop
 800a7a4:	0800f7c0 	.word	0x0800f7c0
 800a7a8:	0800f744 	.word	0x0800f744
 800a7ac:	0800f755 	.word	0x0800f755
 800a7b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d1eb      	bne.n	800a78e <__gethex+0x2ee>
 800a7b6:	e7d8      	b.n	800a76a <__gethex+0x2ca>
 800a7b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d1d5      	bne.n	800a76a <__gethex+0x2ca>
 800a7be:	e7e6      	b.n	800a78e <__gethex+0x2ee>
 800a7c0:	1e6f      	subs	r7, r5, #1
 800a7c2:	f1ba 0f00 	cmp.w	sl, #0
 800a7c6:	d131      	bne.n	800a82c <__gethex+0x38c>
 800a7c8:	b127      	cbz	r7, 800a7d4 <__gethex+0x334>
 800a7ca:	4639      	mov	r1, r7
 800a7cc:	4620      	mov	r0, r4
 800a7ce:	f000 fe39 	bl	800b444 <__any_on>
 800a7d2:	4682      	mov	sl, r0
 800a7d4:	117b      	asrs	r3, r7, #5
 800a7d6:	2101      	movs	r1, #1
 800a7d8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a7dc:	f007 071f 	and.w	r7, r7, #31
 800a7e0:	fa01 f707 	lsl.w	r7, r1, r7
 800a7e4:	421f      	tst	r7, r3
 800a7e6:	4629      	mov	r1, r5
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	bf18      	it	ne
 800a7ec:	f04a 0a02 	orrne.w	sl, sl, #2
 800a7f0:	1b76      	subs	r6, r6, r5
 800a7f2:	f7ff fded 	bl	800a3d0 <rshift>
 800a7f6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a7fa:	2702      	movs	r7, #2
 800a7fc:	f1ba 0f00 	cmp.w	sl, #0
 800a800:	d048      	beq.n	800a894 <__gethex+0x3f4>
 800a802:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a806:	2b02      	cmp	r3, #2
 800a808:	d015      	beq.n	800a836 <__gethex+0x396>
 800a80a:	2b03      	cmp	r3, #3
 800a80c:	d017      	beq.n	800a83e <__gethex+0x39e>
 800a80e:	2b01      	cmp	r3, #1
 800a810:	d109      	bne.n	800a826 <__gethex+0x386>
 800a812:	f01a 0f02 	tst.w	sl, #2
 800a816:	d006      	beq.n	800a826 <__gethex+0x386>
 800a818:	f8d9 0000 	ldr.w	r0, [r9]
 800a81c:	ea4a 0a00 	orr.w	sl, sl, r0
 800a820:	f01a 0f01 	tst.w	sl, #1
 800a824:	d10e      	bne.n	800a844 <__gethex+0x3a4>
 800a826:	f047 0710 	orr.w	r7, r7, #16
 800a82a:	e033      	b.n	800a894 <__gethex+0x3f4>
 800a82c:	f04f 0a01 	mov.w	sl, #1
 800a830:	e7d0      	b.n	800a7d4 <__gethex+0x334>
 800a832:	2701      	movs	r7, #1
 800a834:	e7e2      	b.n	800a7fc <__gethex+0x35c>
 800a836:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a838:	f1c3 0301 	rsb	r3, r3, #1
 800a83c:	9315      	str	r3, [sp, #84]	; 0x54
 800a83e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a840:	2b00      	cmp	r3, #0
 800a842:	d0f0      	beq.n	800a826 <__gethex+0x386>
 800a844:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a848:	f104 0314 	add.w	r3, r4, #20
 800a84c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a850:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a854:	f04f 0c00 	mov.w	ip, #0
 800a858:	4618      	mov	r0, r3
 800a85a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a85e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a862:	d01c      	beq.n	800a89e <__gethex+0x3fe>
 800a864:	3201      	adds	r2, #1
 800a866:	6002      	str	r2, [r0, #0]
 800a868:	2f02      	cmp	r7, #2
 800a86a:	f104 0314 	add.w	r3, r4, #20
 800a86e:	d13f      	bne.n	800a8f0 <__gethex+0x450>
 800a870:	f8d8 2000 	ldr.w	r2, [r8]
 800a874:	3a01      	subs	r2, #1
 800a876:	42b2      	cmp	r2, r6
 800a878:	d10a      	bne.n	800a890 <__gethex+0x3f0>
 800a87a:	1171      	asrs	r1, r6, #5
 800a87c:	2201      	movs	r2, #1
 800a87e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a882:	f006 061f 	and.w	r6, r6, #31
 800a886:	fa02 f606 	lsl.w	r6, r2, r6
 800a88a:	421e      	tst	r6, r3
 800a88c:	bf18      	it	ne
 800a88e:	4617      	movne	r7, r2
 800a890:	f047 0720 	orr.w	r7, r7, #32
 800a894:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a896:	601c      	str	r4, [r3, #0]
 800a898:	9b04      	ldr	r3, [sp, #16]
 800a89a:	601d      	str	r5, [r3, #0]
 800a89c:	e695      	b.n	800a5ca <__gethex+0x12a>
 800a89e:	4299      	cmp	r1, r3
 800a8a0:	f843 cc04 	str.w	ip, [r3, #-4]
 800a8a4:	d8d8      	bhi.n	800a858 <__gethex+0x3b8>
 800a8a6:	68a3      	ldr	r3, [r4, #8]
 800a8a8:	459b      	cmp	fp, r3
 800a8aa:	db19      	blt.n	800a8e0 <__gethex+0x440>
 800a8ac:	6861      	ldr	r1, [r4, #4]
 800a8ae:	ee18 0a10 	vmov	r0, s16
 800a8b2:	3101      	adds	r1, #1
 800a8b4:	f000 f92c 	bl	800ab10 <_Balloc>
 800a8b8:	4681      	mov	r9, r0
 800a8ba:	b918      	cbnz	r0, 800a8c4 <__gethex+0x424>
 800a8bc:	4b1a      	ldr	r3, [pc, #104]	; (800a928 <__gethex+0x488>)
 800a8be:	4602      	mov	r2, r0
 800a8c0:	2184      	movs	r1, #132	; 0x84
 800a8c2:	e6a8      	b.n	800a616 <__gethex+0x176>
 800a8c4:	6922      	ldr	r2, [r4, #16]
 800a8c6:	3202      	adds	r2, #2
 800a8c8:	f104 010c 	add.w	r1, r4, #12
 800a8cc:	0092      	lsls	r2, r2, #2
 800a8ce:	300c      	adds	r0, #12
 800a8d0:	f7fd f8f6 	bl	8007ac0 <memcpy>
 800a8d4:	4621      	mov	r1, r4
 800a8d6:	ee18 0a10 	vmov	r0, s16
 800a8da:	f000 f959 	bl	800ab90 <_Bfree>
 800a8de:	464c      	mov	r4, r9
 800a8e0:	6923      	ldr	r3, [r4, #16]
 800a8e2:	1c5a      	adds	r2, r3, #1
 800a8e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a8e8:	6122      	str	r2, [r4, #16]
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	615a      	str	r2, [r3, #20]
 800a8ee:	e7bb      	b.n	800a868 <__gethex+0x3c8>
 800a8f0:	6922      	ldr	r2, [r4, #16]
 800a8f2:	455a      	cmp	r2, fp
 800a8f4:	dd0b      	ble.n	800a90e <__gethex+0x46e>
 800a8f6:	2101      	movs	r1, #1
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	f7ff fd69 	bl	800a3d0 <rshift>
 800a8fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a902:	3501      	adds	r5, #1
 800a904:	42ab      	cmp	r3, r5
 800a906:	f6ff aed0 	blt.w	800a6aa <__gethex+0x20a>
 800a90a:	2701      	movs	r7, #1
 800a90c:	e7c0      	b.n	800a890 <__gethex+0x3f0>
 800a90e:	f016 061f 	ands.w	r6, r6, #31
 800a912:	d0fa      	beq.n	800a90a <__gethex+0x46a>
 800a914:	449a      	add	sl, r3
 800a916:	f1c6 0620 	rsb	r6, r6, #32
 800a91a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a91e:	f000 f9ed 	bl	800acfc <__hi0bits>
 800a922:	42b0      	cmp	r0, r6
 800a924:	dbe7      	blt.n	800a8f6 <__gethex+0x456>
 800a926:	e7f0      	b.n	800a90a <__gethex+0x46a>
 800a928:	0800f744 	.word	0x0800f744

0800a92c <L_shift>:
 800a92c:	f1c2 0208 	rsb	r2, r2, #8
 800a930:	0092      	lsls	r2, r2, #2
 800a932:	b570      	push	{r4, r5, r6, lr}
 800a934:	f1c2 0620 	rsb	r6, r2, #32
 800a938:	6843      	ldr	r3, [r0, #4]
 800a93a:	6804      	ldr	r4, [r0, #0]
 800a93c:	fa03 f506 	lsl.w	r5, r3, r6
 800a940:	432c      	orrs	r4, r5
 800a942:	40d3      	lsrs	r3, r2
 800a944:	6004      	str	r4, [r0, #0]
 800a946:	f840 3f04 	str.w	r3, [r0, #4]!
 800a94a:	4288      	cmp	r0, r1
 800a94c:	d3f4      	bcc.n	800a938 <L_shift+0xc>
 800a94e:	bd70      	pop	{r4, r5, r6, pc}

0800a950 <__match>:
 800a950:	b530      	push	{r4, r5, lr}
 800a952:	6803      	ldr	r3, [r0, #0]
 800a954:	3301      	adds	r3, #1
 800a956:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a95a:	b914      	cbnz	r4, 800a962 <__match+0x12>
 800a95c:	6003      	str	r3, [r0, #0]
 800a95e:	2001      	movs	r0, #1
 800a960:	bd30      	pop	{r4, r5, pc}
 800a962:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a966:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a96a:	2d19      	cmp	r5, #25
 800a96c:	bf98      	it	ls
 800a96e:	3220      	addls	r2, #32
 800a970:	42a2      	cmp	r2, r4
 800a972:	d0f0      	beq.n	800a956 <__match+0x6>
 800a974:	2000      	movs	r0, #0
 800a976:	e7f3      	b.n	800a960 <__match+0x10>

0800a978 <__hexnan>:
 800a978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a97c:	680b      	ldr	r3, [r1, #0]
 800a97e:	6801      	ldr	r1, [r0, #0]
 800a980:	115e      	asrs	r6, r3, #5
 800a982:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a986:	f013 031f 	ands.w	r3, r3, #31
 800a98a:	b087      	sub	sp, #28
 800a98c:	bf18      	it	ne
 800a98e:	3604      	addne	r6, #4
 800a990:	2500      	movs	r5, #0
 800a992:	1f37      	subs	r7, r6, #4
 800a994:	4682      	mov	sl, r0
 800a996:	4690      	mov	r8, r2
 800a998:	9301      	str	r3, [sp, #4]
 800a99a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a99e:	46b9      	mov	r9, r7
 800a9a0:	463c      	mov	r4, r7
 800a9a2:	9502      	str	r5, [sp, #8]
 800a9a4:	46ab      	mov	fp, r5
 800a9a6:	784a      	ldrb	r2, [r1, #1]
 800a9a8:	1c4b      	adds	r3, r1, #1
 800a9aa:	9303      	str	r3, [sp, #12]
 800a9ac:	b342      	cbz	r2, 800aa00 <__hexnan+0x88>
 800a9ae:	4610      	mov	r0, r2
 800a9b0:	9105      	str	r1, [sp, #20]
 800a9b2:	9204      	str	r2, [sp, #16]
 800a9b4:	f7ff fd5e 	bl	800a474 <__hexdig_fun>
 800a9b8:	2800      	cmp	r0, #0
 800a9ba:	d14f      	bne.n	800aa5c <__hexnan+0xe4>
 800a9bc:	9a04      	ldr	r2, [sp, #16]
 800a9be:	9905      	ldr	r1, [sp, #20]
 800a9c0:	2a20      	cmp	r2, #32
 800a9c2:	d818      	bhi.n	800a9f6 <__hexnan+0x7e>
 800a9c4:	9b02      	ldr	r3, [sp, #8]
 800a9c6:	459b      	cmp	fp, r3
 800a9c8:	dd13      	ble.n	800a9f2 <__hexnan+0x7a>
 800a9ca:	454c      	cmp	r4, r9
 800a9cc:	d206      	bcs.n	800a9dc <__hexnan+0x64>
 800a9ce:	2d07      	cmp	r5, #7
 800a9d0:	dc04      	bgt.n	800a9dc <__hexnan+0x64>
 800a9d2:	462a      	mov	r2, r5
 800a9d4:	4649      	mov	r1, r9
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	f7ff ffa8 	bl	800a92c <L_shift>
 800a9dc:	4544      	cmp	r4, r8
 800a9de:	d950      	bls.n	800aa82 <__hexnan+0x10a>
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	f1a4 0904 	sub.w	r9, r4, #4
 800a9e6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9ea:	f8cd b008 	str.w	fp, [sp, #8]
 800a9ee:	464c      	mov	r4, r9
 800a9f0:	461d      	mov	r5, r3
 800a9f2:	9903      	ldr	r1, [sp, #12]
 800a9f4:	e7d7      	b.n	800a9a6 <__hexnan+0x2e>
 800a9f6:	2a29      	cmp	r2, #41	; 0x29
 800a9f8:	d156      	bne.n	800aaa8 <__hexnan+0x130>
 800a9fa:	3102      	adds	r1, #2
 800a9fc:	f8ca 1000 	str.w	r1, [sl]
 800aa00:	f1bb 0f00 	cmp.w	fp, #0
 800aa04:	d050      	beq.n	800aaa8 <__hexnan+0x130>
 800aa06:	454c      	cmp	r4, r9
 800aa08:	d206      	bcs.n	800aa18 <__hexnan+0xa0>
 800aa0a:	2d07      	cmp	r5, #7
 800aa0c:	dc04      	bgt.n	800aa18 <__hexnan+0xa0>
 800aa0e:	462a      	mov	r2, r5
 800aa10:	4649      	mov	r1, r9
 800aa12:	4620      	mov	r0, r4
 800aa14:	f7ff ff8a 	bl	800a92c <L_shift>
 800aa18:	4544      	cmp	r4, r8
 800aa1a:	d934      	bls.n	800aa86 <__hexnan+0x10e>
 800aa1c:	f1a8 0204 	sub.w	r2, r8, #4
 800aa20:	4623      	mov	r3, r4
 800aa22:	f853 1b04 	ldr.w	r1, [r3], #4
 800aa26:	f842 1f04 	str.w	r1, [r2, #4]!
 800aa2a:	429f      	cmp	r7, r3
 800aa2c:	d2f9      	bcs.n	800aa22 <__hexnan+0xaa>
 800aa2e:	1b3b      	subs	r3, r7, r4
 800aa30:	f023 0303 	bic.w	r3, r3, #3
 800aa34:	3304      	adds	r3, #4
 800aa36:	3401      	adds	r4, #1
 800aa38:	3e03      	subs	r6, #3
 800aa3a:	42b4      	cmp	r4, r6
 800aa3c:	bf88      	it	hi
 800aa3e:	2304      	movhi	r3, #4
 800aa40:	4443      	add	r3, r8
 800aa42:	2200      	movs	r2, #0
 800aa44:	f843 2b04 	str.w	r2, [r3], #4
 800aa48:	429f      	cmp	r7, r3
 800aa4a:	d2fb      	bcs.n	800aa44 <__hexnan+0xcc>
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	b91b      	cbnz	r3, 800aa58 <__hexnan+0xe0>
 800aa50:	4547      	cmp	r7, r8
 800aa52:	d127      	bne.n	800aaa4 <__hexnan+0x12c>
 800aa54:	2301      	movs	r3, #1
 800aa56:	603b      	str	r3, [r7, #0]
 800aa58:	2005      	movs	r0, #5
 800aa5a:	e026      	b.n	800aaaa <__hexnan+0x132>
 800aa5c:	3501      	adds	r5, #1
 800aa5e:	2d08      	cmp	r5, #8
 800aa60:	f10b 0b01 	add.w	fp, fp, #1
 800aa64:	dd06      	ble.n	800aa74 <__hexnan+0xfc>
 800aa66:	4544      	cmp	r4, r8
 800aa68:	d9c3      	bls.n	800a9f2 <__hexnan+0x7a>
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa70:	2501      	movs	r5, #1
 800aa72:	3c04      	subs	r4, #4
 800aa74:	6822      	ldr	r2, [r4, #0]
 800aa76:	f000 000f 	and.w	r0, r0, #15
 800aa7a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800aa7e:	6022      	str	r2, [r4, #0]
 800aa80:	e7b7      	b.n	800a9f2 <__hexnan+0x7a>
 800aa82:	2508      	movs	r5, #8
 800aa84:	e7b5      	b.n	800a9f2 <__hexnan+0x7a>
 800aa86:	9b01      	ldr	r3, [sp, #4]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d0df      	beq.n	800aa4c <__hexnan+0xd4>
 800aa8c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa90:	f1c3 0320 	rsb	r3, r3, #32
 800aa94:	fa22 f303 	lsr.w	r3, r2, r3
 800aa98:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aa9c:	401a      	ands	r2, r3
 800aa9e:	f846 2c04 	str.w	r2, [r6, #-4]
 800aaa2:	e7d3      	b.n	800aa4c <__hexnan+0xd4>
 800aaa4:	3f04      	subs	r7, #4
 800aaa6:	e7d1      	b.n	800aa4c <__hexnan+0xd4>
 800aaa8:	2004      	movs	r0, #4
 800aaaa:	b007      	add	sp, #28
 800aaac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aab0 <_localeconv_r>:
 800aab0:	4800      	ldr	r0, [pc, #0]	; (800aab4 <_localeconv_r+0x4>)
 800aab2:	4770      	bx	lr
 800aab4:	20000180 	.word	0x20000180

0800aab8 <_lseek_r>:
 800aab8:	b538      	push	{r3, r4, r5, lr}
 800aaba:	4d07      	ldr	r5, [pc, #28]	; (800aad8 <_lseek_r+0x20>)
 800aabc:	4604      	mov	r4, r0
 800aabe:	4608      	mov	r0, r1
 800aac0:	4611      	mov	r1, r2
 800aac2:	2200      	movs	r2, #0
 800aac4:	602a      	str	r2, [r5, #0]
 800aac6:	461a      	mov	r2, r3
 800aac8:	f7f7 fb52 	bl	8002170 <_lseek>
 800aacc:	1c43      	adds	r3, r0, #1
 800aace:	d102      	bne.n	800aad6 <_lseek_r+0x1e>
 800aad0:	682b      	ldr	r3, [r5, #0]
 800aad2:	b103      	cbz	r3, 800aad6 <_lseek_r+0x1e>
 800aad4:	6023      	str	r3, [r4, #0]
 800aad6:	bd38      	pop	{r3, r4, r5, pc}
 800aad8:	20005028 	.word	0x20005028

0800aadc <malloc>:
 800aadc:	4b02      	ldr	r3, [pc, #8]	; (800aae8 <malloc+0xc>)
 800aade:	4601      	mov	r1, r0
 800aae0:	6818      	ldr	r0, [r3, #0]
 800aae2:	f000 bd2f 	b.w	800b544 <_malloc_r>
 800aae6:	bf00      	nop
 800aae8:	20000028 	.word	0x20000028

0800aaec <__ascii_mbtowc>:
 800aaec:	b082      	sub	sp, #8
 800aaee:	b901      	cbnz	r1, 800aaf2 <__ascii_mbtowc+0x6>
 800aaf0:	a901      	add	r1, sp, #4
 800aaf2:	b142      	cbz	r2, 800ab06 <__ascii_mbtowc+0x1a>
 800aaf4:	b14b      	cbz	r3, 800ab0a <__ascii_mbtowc+0x1e>
 800aaf6:	7813      	ldrb	r3, [r2, #0]
 800aaf8:	600b      	str	r3, [r1, #0]
 800aafa:	7812      	ldrb	r2, [r2, #0]
 800aafc:	1e10      	subs	r0, r2, #0
 800aafe:	bf18      	it	ne
 800ab00:	2001      	movne	r0, #1
 800ab02:	b002      	add	sp, #8
 800ab04:	4770      	bx	lr
 800ab06:	4610      	mov	r0, r2
 800ab08:	e7fb      	b.n	800ab02 <__ascii_mbtowc+0x16>
 800ab0a:	f06f 0001 	mvn.w	r0, #1
 800ab0e:	e7f8      	b.n	800ab02 <__ascii_mbtowc+0x16>

0800ab10 <_Balloc>:
 800ab10:	b570      	push	{r4, r5, r6, lr}
 800ab12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab14:	4604      	mov	r4, r0
 800ab16:	460d      	mov	r5, r1
 800ab18:	b976      	cbnz	r6, 800ab38 <_Balloc+0x28>
 800ab1a:	2010      	movs	r0, #16
 800ab1c:	f7ff ffde 	bl	800aadc <malloc>
 800ab20:	4602      	mov	r2, r0
 800ab22:	6260      	str	r0, [r4, #36]	; 0x24
 800ab24:	b920      	cbnz	r0, 800ab30 <_Balloc+0x20>
 800ab26:	4b18      	ldr	r3, [pc, #96]	; (800ab88 <_Balloc+0x78>)
 800ab28:	4818      	ldr	r0, [pc, #96]	; (800ab8c <_Balloc+0x7c>)
 800ab2a:	2166      	movs	r1, #102	; 0x66
 800ab2c:	f001 fb08 	bl	800c140 <__assert_func>
 800ab30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab34:	6006      	str	r6, [r0, #0]
 800ab36:	60c6      	str	r6, [r0, #12]
 800ab38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ab3a:	68f3      	ldr	r3, [r6, #12]
 800ab3c:	b183      	cbz	r3, 800ab60 <_Balloc+0x50>
 800ab3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab40:	68db      	ldr	r3, [r3, #12]
 800ab42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab46:	b9b8      	cbnz	r0, 800ab78 <_Balloc+0x68>
 800ab48:	2101      	movs	r1, #1
 800ab4a:	fa01 f605 	lsl.w	r6, r1, r5
 800ab4e:	1d72      	adds	r2, r6, #5
 800ab50:	0092      	lsls	r2, r2, #2
 800ab52:	4620      	mov	r0, r4
 800ab54:	f000 fc97 	bl	800b486 <_calloc_r>
 800ab58:	b160      	cbz	r0, 800ab74 <_Balloc+0x64>
 800ab5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab5e:	e00e      	b.n	800ab7e <_Balloc+0x6e>
 800ab60:	2221      	movs	r2, #33	; 0x21
 800ab62:	2104      	movs	r1, #4
 800ab64:	4620      	mov	r0, r4
 800ab66:	f000 fc8e 	bl	800b486 <_calloc_r>
 800ab6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab6c:	60f0      	str	r0, [r6, #12]
 800ab6e:	68db      	ldr	r3, [r3, #12]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d1e4      	bne.n	800ab3e <_Balloc+0x2e>
 800ab74:	2000      	movs	r0, #0
 800ab76:	bd70      	pop	{r4, r5, r6, pc}
 800ab78:	6802      	ldr	r2, [r0, #0]
 800ab7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab7e:	2300      	movs	r3, #0
 800ab80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab84:	e7f7      	b.n	800ab76 <_Balloc+0x66>
 800ab86:	bf00      	nop
 800ab88:	0800f6ce 	.word	0x0800f6ce
 800ab8c:	0800f7d4 	.word	0x0800f7d4

0800ab90 <_Bfree>:
 800ab90:	b570      	push	{r4, r5, r6, lr}
 800ab92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab94:	4605      	mov	r5, r0
 800ab96:	460c      	mov	r4, r1
 800ab98:	b976      	cbnz	r6, 800abb8 <_Bfree+0x28>
 800ab9a:	2010      	movs	r0, #16
 800ab9c:	f7ff ff9e 	bl	800aadc <malloc>
 800aba0:	4602      	mov	r2, r0
 800aba2:	6268      	str	r0, [r5, #36]	; 0x24
 800aba4:	b920      	cbnz	r0, 800abb0 <_Bfree+0x20>
 800aba6:	4b09      	ldr	r3, [pc, #36]	; (800abcc <_Bfree+0x3c>)
 800aba8:	4809      	ldr	r0, [pc, #36]	; (800abd0 <_Bfree+0x40>)
 800abaa:	218a      	movs	r1, #138	; 0x8a
 800abac:	f001 fac8 	bl	800c140 <__assert_func>
 800abb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abb4:	6006      	str	r6, [r0, #0]
 800abb6:	60c6      	str	r6, [r0, #12]
 800abb8:	b13c      	cbz	r4, 800abca <_Bfree+0x3a>
 800abba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800abbc:	6862      	ldr	r2, [r4, #4]
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800abc4:	6021      	str	r1, [r4, #0]
 800abc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800abca:	bd70      	pop	{r4, r5, r6, pc}
 800abcc:	0800f6ce 	.word	0x0800f6ce
 800abd0:	0800f7d4 	.word	0x0800f7d4

0800abd4 <__multadd>:
 800abd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abd8:	690e      	ldr	r6, [r1, #16]
 800abda:	4607      	mov	r7, r0
 800abdc:	4698      	mov	r8, r3
 800abde:	460c      	mov	r4, r1
 800abe0:	f101 0014 	add.w	r0, r1, #20
 800abe4:	2300      	movs	r3, #0
 800abe6:	6805      	ldr	r5, [r0, #0]
 800abe8:	b2a9      	uxth	r1, r5
 800abea:	fb02 8101 	mla	r1, r2, r1, r8
 800abee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800abf2:	0c2d      	lsrs	r5, r5, #16
 800abf4:	fb02 c505 	mla	r5, r2, r5, ip
 800abf8:	b289      	uxth	r1, r1
 800abfa:	3301      	adds	r3, #1
 800abfc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ac00:	429e      	cmp	r6, r3
 800ac02:	f840 1b04 	str.w	r1, [r0], #4
 800ac06:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ac0a:	dcec      	bgt.n	800abe6 <__multadd+0x12>
 800ac0c:	f1b8 0f00 	cmp.w	r8, #0
 800ac10:	d022      	beq.n	800ac58 <__multadd+0x84>
 800ac12:	68a3      	ldr	r3, [r4, #8]
 800ac14:	42b3      	cmp	r3, r6
 800ac16:	dc19      	bgt.n	800ac4c <__multadd+0x78>
 800ac18:	6861      	ldr	r1, [r4, #4]
 800ac1a:	4638      	mov	r0, r7
 800ac1c:	3101      	adds	r1, #1
 800ac1e:	f7ff ff77 	bl	800ab10 <_Balloc>
 800ac22:	4605      	mov	r5, r0
 800ac24:	b928      	cbnz	r0, 800ac32 <__multadd+0x5e>
 800ac26:	4602      	mov	r2, r0
 800ac28:	4b0d      	ldr	r3, [pc, #52]	; (800ac60 <__multadd+0x8c>)
 800ac2a:	480e      	ldr	r0, [pc, #56]	; (800ac64 <__multadd+0x90>)
 800ac2c:	21b5      	movs	r1, #181	; 0xb5
 800ac2e:	f001 fa87 	bl	800c140 <__assert_func>
 800ac32:	6922      	ldr	r2, [r4, #16]
 800ac34:	3202      	adds	r2, #2
 800ac36:	f104 010c 	add.w	r1, r4, #12
 800ac3a:	0092      	lsls	r2, r2, #2
 800ac3c:	300c      	adds	r0, #12
 800ac3e:	f7fc ff3f 	bl	8007ac0 <memcpy>
 800ac42:	4621      	mov	r1, r4
 800ac44:	4638      	mov	r0, r7
 800ac46:	f7ff ffa3 	bl	800ab90 <_Bfree>
 800ac4a:	462c      	mov	r4, r5
 800ac4c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ac50:	3601      	adds	r6, #1
 800ac52:	f8c3 8014 	str.w	r8, [r3, #20]
 800ac56:	6126      	str	r6, [r4, #16]
 800ac58:	4620      	mov	r0, r4
 800ac5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac5e:	bf00      	nop
 800ac60:	0800f744 	.word	0x0800f744
 800ac64:	0800f7d4 	.word	0x0800f7d4

0800ac68 <__s2b>:
 800ac68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac6c:	460c      	mov	r4, r1
 800ac6e:	4615      	mov	r5, r2
 800ac70:	461f      	mov	r7, r3
 800ac72:	2209      	movs	r2, #9
 800ac74:	3308      	adds	r3, #8
 800ac76:	4606      	mov	r6, r0
 800ac78:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac7c:	2100      	movs	r1, #0
 800ac7e:	2201      	movs	r2, #1
 800ac80:	429a      	cmp	r2, r3
 800ac82:	db09      	blt.n	800ac98 <__s2b+0x30>
 800ac84:	4630      	mov	r0, r6
 800ac86:	f7ff ff43 	bl	800ab10 <_Balloc>
 800ac8a:	b940      	cbnz	r0, 800ac9e <__s2b+0x36>
 800ac8c:	4602      	mov	r2, r0
 800ac8e:	4b19      	ldr	r3, [pc, #100]	; (800acf4 <__s2b+0x8c>)
 800ac90:	4819      	ldr	r0, [pc, #100]	; (800acf8 <__s2b+0x90>)
 800ac92:	21ce      	movs	r1, #206	; 0xce
 800ac94:	f001 fa54 	bl	800c140 <__assert_func>
 800ac98:	0052      	lsls	r2, r2, #1
 800ac9a:	3101      	adds	r1, #1
 800ac9c:	e7f0      	b.n	800ac80 <__s2b+0x18>
 800ac9e:	9b08      	ldr	r3, [sp, #32]
 800aca0:	6143      	str	r3, [r0, #20]
 800aca2:	2d09      	cmp	r5, #9
 800aca4:	f04f 0301 	mov.w	r3, #1
 800aca8:	6103      	str	r3, [r0, #16]
 800acaa:	dd16      	ble.n	800acda <__s2b+0x72>
 800acac:	f104 0909 	add.w	r9, r4, #9
 800acb0:	46c8      	mov	r8, r9
 800acb2:	442c      	add	r4, r5
 800acb4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800acb8:	4601      	mov	r1, r0
 800acba:	3b30      	subs	r3, #48	; 0x30
 800acbc:	220a      	movs	r2, #10
 800acbe:	4630      	mov	r0, r6
 800acc0:	f7ff ff88 	bl	800abd4 <__multadd>
 800acc4:	45a0      	cmp	r8, r4
 800acc6:	d1f5      	bne.n	800acb4 <__s2b+0x4c>
 800acc8:	f1a5 0408 	sub.w	r4, r5, #8
 800accc:	444c      	add	r4, r9
 800acce:	1b2d      	subs	r5, r5, r4
 800acd0:	1963      	adds	r3, r4, r5
 800acd2:	42bb      	cmp	r3, r7
 800acd4:	db04      	blt.n	800ace0 <__s2b+0x78>
 800acd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acda:	340a      	adds	r4, #10
 800acdc:	2509      	movs	r5, #9
 800acde:	e7f6      	b.n	800acce <__s2b+0x66>
 800ace0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ace4:	4601      	mov	r1, r0
 800ace6:	3b30      	subs	r3, #48	; 0x30
 800ace8:	220a      	movs	r2, #10
 800acea:	4630      	mov	r0, r6
 800acec:	f7ff ff72 	bl	800abd4 <__multadd>
 800acf0:	e7ee      	b.n	800acd0 <__s2b+0x68>
 800acf2:	bf00      	nop
 800acf4:	0800f744 	.word	0x0800f744
 800acf8:	0800f7d4 	.word	0x0800f7d4

0800acfc <__hi0bits>:
 800acfc:	0c03      	lsrs	r3, r0, #16
 800acfe:	041b      	lsls	r3, r3, #16
 800ad00:	b9d3      	cbnz	r3, 800ad38 <__hi0bits+0x3c>
 800ad02:	0400      	lsls	r0, r0, #16
 800ad04:	2310      	movs	r3, #16
 800ad06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ad0a:	bf04      	itt	eq
 800ad0c:	0200      	lsleq	r0, r0, #8
 800ad0e:	3308      	addeq	r3, #8
 800ad10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ad14:	bf04      	itt	eq
 800ad16:	0100      	lsleq	r0, r0, #4
 800ad18:	3304      	addeq	r3, #4
 800ad1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ad1e:	bf04      	itt	eq
 800ad20:	0080      	lsleq	r0, r0, #2
 800ad22:	3302      	addeq	r3, #2
 800ad24:	2800      	cmp	r0, #0
 800ad26:	db05      	blt.n	800ad34 <__hi0bits+0x38>
 800ad28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ad2c:	f103 0301 	add.w	r3, r3, #1
 800ad30:	bf08      	it	eq
 800ad32:	2320      	moveq	r3, #32
 800ad34:	4618      	mov	r0, r3
 800ad36:	4770      	bx	lr
 800ad38:	2300      	movs	r3, #0
 800ad3a:	e7e4      	b.n	800ad06 <__hi0bits+0xa>

0800ad3c <__lo0bits>:
 800ad3c:	6803      	ldr	r3, [r0, #0]
 800ad3e:	f013 0207 	ands.w	r2, r3, #7
 800ad42:	4601      	mov	r1, r0
 800ad44:	d00b      	beq.n	800ad5e <__lo0bits+0x22>
 800ad46:	07da      	lsls	r2, r3, #31
 800ad48:	d424      	bmi.n	800ad94 <__lo0bits+0x58>
 800ad4a:	0798      	lsls	r0, r3, #30
 800ad4c:	bf49      	itett	mi
 800ad4e:	085b      	lsrmi	r3, r3, #1
 800ad50:	089b      	lsrpl	r3, r3, #2
 800ad52:	2001      	movmi	r0, #1
 800ad54:	600b      	strmi	r3, [r1, #0]
 800ad56:	bf5c      	itt	pl
 800ad58:	600b      	strpl	r3, [r1, #0]
 800ad5a:	2002      	movpl	r0, #2
 800ad5c:	4770      	bx	lr
 800ad5e:	b298      	uxth	r0, r3
 800ad60:	b9b0      	cbnz	r0, 800ad90 <__lo0bits+0x54>
 800ad62:	0c1b      	lsrs	r3, r3, #16
 800ad64:	2010      	movs	r0, #16
 800ad66:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ad6a:	bf04      	itt	eq
 800ad6c:	0a1b      	lsreq	r3, r3, #8
 800ad6e:	3008      	addeq	r0, #8
 800ad70:	071a      	lsls	r2, r3, #28
 800ad72:	bf04      	itt	eq
 800ad74:	091b      	lsreq	r3, r3, #4
 800ad76:	3004      	addeq	r0, #4
 800ad78:	079a      	lsls	r2, r3, #30
 800ad7a:	bf04      	itt	eq
 800ad7c:	089b      	lsreq	r3, r3, #2
 800ad7e:	3002      	addeq	r0, #2
 800ad80:	07da      	lsls	r2, r3, #31
 800ad82:	d403      	bmi.n	800ad8c <__lo0bits+0x50>
 800ad84:	085b      	lsrs	r3, r3, #1
 800ad86:	f100 0001 	add.w	r0, r0, #1
 800ad8a:	d005      	beq.n	800ad98 <__lo0bits+0x5c>
 800ad8c:	600b      	str	r3, [r1, #0]
 800ad8e:	4770      	bx	lr
 800ad90:	4610      	mov	r0, r2
 800ad92:	e7e8      	b.n	800ad66 <__lo0bits+0x2a>
 800ad94:	2000      	movs	r0, #0
 800ad96:	4770      	bx	lr
 800ad98:	2020      	movs	r0, #32
 800ad9a:	4770      	bx	lr

0800ad9c <__i2b>:
 800ad9c:	b510      	push	{r4, lr}
 800ad9e:	460c      	mov	r4, r1
 800ada0:	2101      	movs	r1, #1
 800ada2:	f7ff feb5 	bl	800ab10 <_Balloc>
 800ada6:	4602      	mov	r2, r0
 800ada8:	b928      	cbnz	r0, 800adb6 <__i2b+0x1a>
 800adaa:	4b05      	ldr	r3, [pc, #20]	; (800adc0 <__i2b+0x24>)
 800adac:	4805      	ldr	r0, [pc, #20]	; (800adc4 <__i2b+0x28>)
 800adae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800adb2:	f001 f9c5 	bl	800c140 <__assert_func>
 800adb6:	2301      	movs	r3, #1
 800adb8:	6144      	str	r4, [r0, #20]
 800adba:	6103      	str	r3, [r0, #16]
 800adbc:	bd10      	pop	{r4, pc}
 800adbe:	bf00      	nop
 800adc0:	0800f744 	.word	0x0800f744
 800adc4:	0800f7d4 	.word	0x0800f7d4

0800adc8 <__multiply>:
 800adc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adcc:	4614      	mov	r4, r2
 800adce:	690a      	ldr	r2, [r1, #16]
 800add0:	6923      	ldr	r3, [r4, #16]
 800add2:	429a      	cmp	r2, r3
 800add4:	bfb8      	it	lt
 800add6:	460b      	movlt	r3, r1
 800add8:	460d      	mov	r5, r1
 800adda:	bfbc      	itt	lt
 800addc:	4625      	movlt	r5, r4
 800adde:	461c      	movlt	r4, r3
 800ade0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ade4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ade8:	68ab      	ldr	r3, [r5, #8]
 800adea:	6869      	ldr	r1, [r5, #4]
 800adec:	eb0a 0709 	add.w	r7, sl, r9
 800adf0:	42bb      	cmp	r3, r7
 800adf2:	b085      	sub	sp, #20
 800adf4:	bfb8      	it	lt
 800adf6:	3101      	addlt	r1, #1
 800adf8:	f7ff fe8a 	bl	800ab10 <_Balloc>
 800adfc:	b930      	cbnz	r0, 800ae0c <__multiply+0x44>
 800adfe:	4602      	mov	r2, r0
 800ae00:	4b42      	ldr	r3, [pc, #264]	; (800af0c <__multiply+0x144>)
 800ae02:	4843      	ldr	r0, [pc, #268]	; (800af10 <__multiply+0x148>)
 800ae04:	f240 115d 	movw	r1, #349	; 0x15d
 800ae08:	f001 f99a 	bl	800c140 <__assert_func>
 800ae0c:	f100 0614 	add.w	r6, r0, #20
 800ae10:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ae14:	4633      	mov	r3, r6
 800ae16:	2200      	movs	r2, #0
 800ae18:	4543      	cmp	r3, r8
 800ae1a:	d31e      	bcc.n	800ae5a <__multiply+0x92>
 800ae1c:	f105 0c14 	add.w	ip, r5, #20
 800ae20:	f104 0314 	add.w	r3, r4, #20
 800ae24:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ae28:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ae2c:	9202      	str	r2, [sp, #8]
 800ae2e:	ebac 0205 	sub.w	r2, ip, r5
 800ae32:	3a15      	subs	r2, #21
 800ae34:	f022 0203 	bic.w	r2, r2, #3
 800ae38:	3204      	adds	r2, #4
 800ae3a:	f105 0115 	add.w	r1, r5, #21
 800ae3e:	458c      	cmp	ip, r1
 800ae40:	bf38      	it	cc
 800ae42:	2204      	movcc	r2, #4
 800ae44:	9201      	str	r2, [sp, #4]
 800ae46:	9a02      	ldr	r2, [sp, #8]
 800ae48:	9303      	str	r3, [sp, #12]
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d808      	bhi.n	800ae60 <__multiply+0x98>
 800ae4e:	2f00      	cmp	r7, #0
 800ae50:	dc55      	bgt.n	800aefe <__multiply+0x136>
 800ae52:	6107      	str	r7, [r0, #16]
 800ae54:	b005      	add	sp, #20
 800ae56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae5a:	f843 2b04 	str.w	r2, [r3], #4
 800ae5e:	e7db      	b.n	800ae18 <__multiply+0x50>
 800ae60:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae64:	f1ba 0f00 	cmp.w	sl, #0
 800ae68:	d020      	beq.n	800aeac <__multiply+0xe4>
 800ae6a:	f105 0e14 	add.w	lr, r5, #20
 800ae6e:	46b1      	mov	r9, r6
 800ae70:	2200      	movs	r2, #0
 800ae72:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ae76:	f8d9 b000 	ldr.w	fp, [r9]
 800ae7a:	b2a1      	uxth	r1, r4
 800ae7c:	fa1f fb8b 	uxth.w	fp, fp
 800ae80:	fb0a b101 	mla	r1, sl, r1, fp
 800ae84:	4411      	add	r1, r2
 800ae86:	f8d9 2000 	ldr.w	r2, [r9]
 800ae8a:	0c24      	lsrs	r4, r4, #16
 800ae8c:	0c12      	lsrs	r2, r2, #16
 800ae8e:	fb0a 2404 	mla	r4, sl, r4, r2
 800ae92:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ae96:	b289      	uxth	r1, r1
 800ae98:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ae9c:	45f4      	cmp	ip, lr
 800ae9e:	f849 1b04 	str.w	r1, [r9], #4
 800aea2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800aea6:	d8e4      	bhi.n	800ae72 <__multiply+0xaa>
 800aea8:	9901      	ldr	r1, [sp, #4]
 800aeaa:	5072      	str	r2, [r6, r1]
 800aeac:	9a03      	ldr	r2, [sp, #12]
 800aeae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aeb2:	3304      	adds	r3, #4
 800aeb4:	f1b9 0f00 	cmp.w	r9, #0
 800aeb8:	d01f      	beq.n	800aefa <__multiply+0x132>
 800aeba:	6834      	ldr	r4, [r6, #0]
 800aebc:	f105 0114 	add.w	r1, r5, #20
 800aec0:	46b6      	mov	lr, r6
 800aec2:	f04f 0a00 	mov.w	sl, #0
 800aec6:	880a      	ldrh	r2, [r1, #0]
 800aec8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800aecc:	fb09 b202 	mla	r2, r9, r2, fp
 800aed0:	4492      	add	sl, r2
 800aed2:	b2a4      	uxth	r4, r4
 800aed4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800aed8:	f84e 4b04 	str.w	r4, [lr], #4
 800aedc:	f851 4b04 	ldr.w	r4, [r1], #4
 800aee0:	f8be 2000 	ldrh.w	r2, [lr]
 800aee4:	0c24      	lsrs	r4, r4, #16
 800aee6:	fb09 2404 	mla	r4, r9, r4, r2
 800aeea:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800aeee:	458c      	cmp	ip, r1
 800aef0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800aef4:	d8e7      	bhi.n	800aec6 <__multiply+0xfe>
 800aef6:	9a01      	ldr	r2, [sp, #4]
 800aef8:	50b4      	str	r4, [r6, r2]
 800aefa:	3604      	adds	r6, #4
 800aefc:	e7a3      	b.n	800ae46 <__multiply+0x7e>
 800aefe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800af02:	2b00      	cmp	r3, #0
 800af04:	d1a5      	bne.n	800ae52 <__multiply+0x8a>
 800af06:	3f01      	subs	r7, #1
 800af08:	e7a1      	b.n	800ae4e <__multiply+0x86>
 800af0a:	bf00      	nop
 800af0c:	0800f744 	.word	0x0800f744
 800af10:	0800f7d4 	.word	0x0800f7d4

0800af14 <__pow5mult>:
 800af14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af18:	4615      	mov	r5, r2
 800af1a:	f012 0203 	ands.w	r2, r2, #3
 800af1e:	4606      	mov	r6, r0
 800af20:	460f      	mov	r7, r1
 800af22:	d007      	beq.n	800af34 <__pow5mult+0x20>
 800af24:	4c25      	ldr	r4, [pc, #148]	; (800afbc <__pow5mult+0xa8>)
 800af26:	3a01      	subs	r2, #1
 800af28:	2300      	movs	r3, #0
 800af2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af2e:	f7ff fe51 	bl	800abd4 <__multadd>
 800af32:	4607      	mov	r7, r0
 800af34:	10ad      	asrs	r5, r5, #2
 800af36:	d03d      	beq.n	800afb4 <__pow5mult+0xa0>
 800af38:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800af3a:	b97c      	cbnz	r4, 800af5c <__pow5mult+0x48>
 800af3c:	2010      	movs	r0, #16
 800af3e:	f7ff fdcd 	bl	800aadc <malloc>
 800af42:	4602      	mov	r2, r0
 800af44:	6270      	str	r0, [r6, #36]	; 0x24
 800af46:	b928      	cbnz	r0, 800af54 <__pow5mult+0x40>
 800af48:	4b1d      	ldr	r3, [pc, #116]	; (800afc0 <__pow5mult+0xac>)
 800af4a:	481e      	ldr	r0, [pc, #120]	; (800afc4 <__pow5mult+0xb0>)
 800af4c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800af50:	f001 f8f6 	bl	800c140 <__assert_func>
 800af54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af58:	6004      	str	r4, [r0, #0]
 800af5a:	60c4      	str	r4, [r0, #12]
 800af5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800af60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af64:	b94c      	cbnz	r4, 800af7a <__pow5mult+0x66>
 800af66:	f240 2171 	movw	r1, #625	; 0x271
 800af6a:	4630      	mov	r0, r6
 800af6c:	f7ff ff16 	bl	800ad9c <__i2b>
 800af70:	2300      	movs	r3, #0
 800af72:	f8c8 0008 	str.w	r0, [r8, #8]
 800af76:	4604      	mov	r4, r0
 800af78:	6003      	str	r3, [r0, #0]
 800af7a:	f04f 0900 	mov.w	r9, #0
 800af7e:	07eb      	lsls	r3, r5, #31
 800af80:	d50a      	bpl.n	800af98 <__pow5mult+0x84>
 800af82:	4639      	mov	r1, r7
 800af84:	4622      	mov	r2, r4
 800af86:	4630      	mov	r0, r6
 800af88:	f7ff ff1e 	bl	800adc8 <__multiply>
 800af8c:	4639      	mov	r1, r7
 800af8e:	4680      	mov	r8, r0
 800af90:	4630      	mov	r0, r6
 800af92:	f7ff fdfd 	bl	800ab90 <_Bfree>
 800af96:	4647      	mov	r7, r8
 800af98:	106d      	asrs	r5, r5, #1
 800af9a:	d00b      	beq.n	800afb4 <__pow5mult+0xa0>
 800af9c:	6820      	ldr	r0, [r4, #0]
 800af9e:	b938      	cbnz	r0, 800afb0 <__pow5mult+0x9c>
 800afa0:	4622      	mov	r2, r4
 800afa2:	4621      	mov	r1, r4
 800afa4:	4630      	mov	r0, r6
 800afa6:	f7ff ff0f 	bl	800adc8 <__multiply>
 800afaa:	6020      	str	r0, [r4, #0]
 800afac:	f8c0 9000 	str.w	r9, [r0]
 800afb0:	4604      	mov	r4, r0
 800afb2:	e7e4      	b.n	800af7e <__pow5mult+0x6a>
 800afb4:	4638      	mov	r0, r7
 800afb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afba:	bf00      	nop
 800afbc:	0800f928 	.word	0x0800f928
 800afc0:	0800f6ce 	.word	0x0800f6ce
 800afc4:	0800f7d4 	.word	0x0800f7d4

0800afc8 <__lshift>:
 800afc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afcc:	460c      	mov	r4, r1
 800afce:	6849      	ldr	r1, [r1, #4]
 800afd0:	6923      	ldr	r3, [r4, #16]
 800afd2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800afd6:	68a3      	ldr	r3, [r4, #8]
 800afd8:	4607      	mov	r7, r0
 800afda:	4691      	mov	r9, r2
 800afdc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800afe0:	f108 0601 	add.w	r6, r8, #1
 800afe4:	42b3      	cmp	r3, r6
 800afe6:	db0b      	blt.n	800b000 <__lshift+0x38>
 800afe8:	4638      	mov	r0, r7
 800afea:	f7ff fd91 	bl	800ab10 <_Balloc>
 800afee:	4605      	mov	r5, r0
 800aff0:	b948      	cbnz	r0, 800b006 <__lshift+0x3e>
 800aff2:	4602      	mov	r2, r0
 800aff4:	4b28      	ldr	r3, [pc, #160]	; (800b098 <__lshift+0xd0>)
 800aff6:	4829      	ldr	r0, [pc, #164]	; (800b09c <__lshift+0xd4>)
 800aff8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800affc:	f001 f8a0 	bl	800c140 <__assert_func>
 800b000:	3101      	adds	r1, #1
 800b002:	005b      	lsls	r3, r3, #1
 800b004:	e7ee      	b.n	800afe4 <__lshift+0x1c>
 800b006:	2300      	movs	r3, #0
 800b008:	f100 0114 	add.w	r1, r0, #20
 800b00c:	f100 0210 	add.w	r2, r0, #16
 800b010:	4618      	mov	r0, r3
 800b012:	4553      	cmp	r3, sl
 800b014:	db33      	blt.n	800b07e <__lshift+0xb6>
 800b016:	6920      	ldr	r0, [r4, #16]
 800b018:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b01c:	f104 0314 	add.w	r3, r4, #20
 800b020:	f019 091f 	ands.w	r9, r9, #31
 800b024:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b028:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b02c:	d02b      	beq.n	800b086 <__lshift+0xbe>
 800b02e:	f1c9 0e20 	rsb	lr, r9, #32
 800b032:	468a      	mov	sl, r1
 800b034:	2200      	movs	r2, #0
 800b036:	6818      	ldr	r0, [r3, #0]
 800b038:	fa00 f009 	lsl.w	r0, r0, r9
 800b03c:	4302      	orrs	r2, r0
 800b03e:	f84a 2b04 	str.w	r2, [sl], #4
 800b042:	f853 2b04 	ldr.w	r2, [r3], #4
 800b046:	459c      	cmp	ip, r3
 800b048:	fa22 f20e 	lsr.w	r2, r2, lr
 800b04c:	d8f3      	bhi.n	800b036 <__lshift+0x6e>
 800b04e:	ebac 0304 	sub.w	r3, ip, r4
 800b052:	3b15      	subs	r3, #21
 800b054:	f023 0303 	bic.w	r3, r3, #3
 800b058:	3304      	adds	r3, #4
 800b05a:	f104 0015 	add.w	r0, r4, #21
 800b05e:	4584      	cmp	ip, r0
 800b060:	bf38      	it	cc
 800b062:	2304      	movcc	r3, #4
 800b064:	50ca      	str	r2, [r1, r3]
 800b066:	b10a      	cbz	r2, 800b06c <__lshift+0xa4>
 800b068:	f108 0602 	add.w	r6, r8, #2
 800b06c:	3e01      	subs	r6, #1
 800b06e:	4638      	mov	r0, r7
 800b070:	612e      	str	r6, [r5, #16]
 800b072:	4621      	mov	r1, r4
 800b074:	f7ff fd8c 	bl	800ab90 <_Bfree>
 800b078:	4628      	mov	r0, r5
 800b07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b07e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b082:	3301      	adds	r3, #1
 800b084:	e7c5      	b.n	800b012 <__lshift+0x4a>
 800b086:	3904      	subs	r1, #4
 800b088:	f853 2b04 	ldr.w	r2, [r3], #4
 800b08c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b090:	459c      	cmp	ip, r3
 800b092:	d8f9      	bhi.n	800b088 <__lshift+0xc0>
 800b094:	e7ea      	b.n	800b06c <__lshift+0xa4>
 800b096:	bf00      	nop
 800b098:	0800f744 	.word	0x0800f744
 800b09c:	0800f7d4 	.word	0x0800f7d4

0800b0a0 <__mcmp>:
 800b0a0:	b530      	push	{r4, r5, lr}
 800b0a2:	6902      	ldr	r2, [r0, #16]
 800b0a4:	690c      	ldr	r4, [r1, #16]
 800b0a6:	1b12      	subs	r2, r2, r4
 800b0a8:	d10e      	bne.n	800b0c8 <__mcmp+0x28>
 800b0aa:	f100 0314 	add.w	r3, r0, #20
 800b0ae:	3114      	adds	r1, #20
 800b0b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b0b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b0b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b0bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b0c0:	42a5      	cmp	r5, r4
 800b0c2:	d003      	beq.n	800b0cc <__mcmp+0x2c>
 800b0c4:	d305      	bcc.n	800b0d2 <__mcmp+0x32>
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	4610      	mov	r0, r2
 800b0ca:	bd30      	pop	{r4, r5, pc}
 800b0cc:	4283      	cmp	r3, r0
 800b0ce:	d3f3      	bcc.n	800b0b8 <__mcmp+0x18>
 800b0d0:	e7fa      	b.n	800b0c8 <__mcmp+0x28>
 800b0d2:	f04f 32ff 	mov.w	r2, #4294967295
 800b0d6:	e7f7      	b.n	800b0c8 <__mcmp+0x28>

0800b0d8 <__mdiff>:
 800b0d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0dc:	460c      	mov	r4, r1
 800b0de:	4606      	mov	r6, r0
 800b0e0:	4611      	mov	r1, r2
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	4617      	mov	r7, r2
 800b0e6:	f7ff ffdb 	bl	800b0a0 <__mcmp>
 800b0ea:	1e05      	subs	r5, r0, #0
 800b0ec:	d110      	bne.n	800b110 <__mdiff+0x38>
 800b0ee:	4629      	mov	r1, r5
 800b0f0:	4630      	mov	r0, r6
 800b0f2:	f7ff fd0d 	bl	800ab10 <_Balloc>
 800b0f6:	b930      	cbnz	r0, 800b106 <__mdiff+0x2e>
 800b0f8:	4b39      	ldr	r3, [pc, #228]	; (800b1e0 <__mdiff+0x108>)
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	f240 2132 	movw	r1, #562	; 0x232
 800b100:	4838      	ldr	r0, [pc, #224]	; (800b1e4 <__mdiff+0x10c>)
 800b102:	f001 f81d 	bl	800c140 <__assert_func>
 800b106:	2301      	movs	r3, #1
 800b108:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b10c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b110:	bfa4      	itt	ge
 800b112:	463b      	movge	r3, r7
 800b114:	4627      	movge	r7, r4
 800b116:	4630      	mov	r0, r6
 800b118:	6879      	ldr	r1, [r7, #4]
 800b11a:	bfa6      	itte	ge
 800b11c:	461c      	movge	r4, r3
 800b11e:	2500      	movge	r5, #0
 800b120:	2501      	movlt	r5, #1
 800b122:	f7ff fcf5 	bl	800ab10 <_Balloc>
 800b126:	b920      	cbnz	r0, 800b132 <__mdiff+0x5a>
 800b128:	4b2d      	ldr	r3, [pc, #180]	; (800b1e0 <__mdiff+0x108>)
 800b12a:	4602      	mov	r2, r0
 800b12c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b130:	e7e6      	b.n	800b100 <__mdiff+0x28>
 800b132:	693e      	ldr	r6, [r7, #16]
 800b134:	60c5      	str	r5, [r0, #12]
 800b136:	6925      	ldr	r5, [r4, #16]
 800b138:	f107 0114 	add.w	r1, r7, #20
 800b13c:	f104 0914 	add.w	r9, r4, #20
 800b140:	f100 0e14 	add.w	lr, r0, #20
 800b144:	f107 0210 	add.w	r2, r7, #16
 800b148:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b14c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b150:	46f2      	mov	sl, lr
 800b152:	2700      	movs	r7, #0
 800b154:	f859 3b04 	ldr.w	r3, [r9], #4
 800b158:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b15c:	fa1f f883 	uxth.w	r8, r3
 800b160:	fa17 f78b 	uxtah	r7, r7, fp
 800b164:	0c1b      	lsrs	r3, r3, #16
 800b166:	eba7 0808 	sub.w	r8, r7, r8
 800b16a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b16e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b172:	fa1f f888 	uxth.w	r8, r8
 800b176:	141f      	asrs	r7, r3, #16
 800b178:	454d      	cmp	r5, r9
 800b17a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b17e:	f84a 3b04 	str.w	r3, [sl], #4
 800b182:	d8e7      	bhi.n	800b154 <__mdiff+0x7c>
 800b184:	1b2b      	subs	r3, r5, r4
 800b186:	3b15      	subs	r3, #21
 800b188:	f023 0303 	bic.w	r3, r3, #3
 800b18c:	3304      	adds	r3, #4
 800b18e:	3415      	adds	r4, #21
 800b190:	42a5      	cmp	r5, r4
 800b192:	bf38      	it	cc
 800b194:	2304      	movcc	r3, #4
 800b196:	4419      	add	r1, r3
 800b198:	4473      	add	r3, lr
 800b19a:	469e      	mov	lr, r3
 800b19c:	460d      	mov	r5, r1
 800b19e:	4565      	cmp	r5, ip
 800b1a0:	d30e      	bcc.n	800b1c0 <__mdiff+0xe8>
 800b1a2:	f10c 0203 	add.w	r2, ip, #3
 800b1a6:	1a52      	subs	r2, r2, r1
 800b1a8:	f022 0203 	bic.w	r2, r2, #3
 800b1ac:	3903      	subs	r1, #3
 800b1ae:	458c      	cmp	ip, r1
 800b1b0:	bf38      	it	cc
 800b1b2:	2200      	movcc	r2, #0
 800b1b4:	441a      	add	r2, r3
 800b1b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b1ba:	b17b      	cbz	r3, 800b1dc <__mdiff+0x104>
 800b1bc:	6106      	str	r6, [r0, #16]
 800b1be:	e7a5      	b.n	800b10c <__mdiff+0x34>
 800b1c0:	f855 8b04 	ldr.w	r8, [r5], #4
 800b1c4:	fa17 f488 	uxtah	r4, r7, r8
 800b1c8:	1422      	asrs	r2, r4, #16
 800b1ca:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b1ce:	b2a4      	uxth	r4, r4
 800b1d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b1d4:	f84e 4b04 	str.w	r4, [lr], #4
 800b1d8:	1417      	asrs	r7, r2, #16
 800b1da:	e7e0      	b.n	800b19e <__mdiff+0xc6>
 800b1dc:	3e01      	subs	r6, #1
 800b1de:	e7ea      	b.n	800b1b6 <__mdiff+0xde>
 800b1e0:	0800f744 	.word	0x0800f744
 800b1e4:	0800f7d4 	.word	0x0800f7d4

0800b1e8 <__ulp>:
 800b1e8:	b082      	sub	sp, #8
 800b1ea:	ed8d 0b00 	vstr	d0, [sp]
 800b1ee:	9b01      	ldr	r3, [sp, #4]
 800b1f0:	4912      	ldr	r1, [pc, #72]	; (800b23c <__ulp+0x54>)
 800b1f2:	4019      	ands	r1, r3
 800b1f4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b1f8:	2900      	cmp	r1, #0
 800b1fa:	dd05      	ble.n	800b208 <__ulp+0x20>
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	460b      	mov	r3, r1
 800b200:	ec43 2b10 	vmov	d0, r2, r3
 800b204:	b002      	add	sp, #8
 800b206:	4770      	bx	lr
 800b208:	4249      	negs	r1, r1
 800b20a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b20e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b212:	f04f 0200 	mov.w	r2, #0
 800b216:	f04f 0300 	mov.w	r3, #0
 800b21a:	da04      	bge.n	800b226 <__ulp+0x3e>
 800b21c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b220:	fa41 f300 	asr.w	r3, r1, r0
 800b224:	e7ec      	b.n	800b200 <__ulp+0x18>
 800b226:	f1a0 0114 	sub.w	r1, r0, #20
 800b22a:	291e      	cmp	r1, #30
 800b22c:	bfda      	itte	le
 800b22e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b232:	fa20 f101 	lsrle.w	r1, r0, r1
 800b236:	2101      	movgt	r1, #1
 800b238:	460a      	mov	r2, r1
 800b23a:	e7e1      	b.n	800b200 <__ulp+0x18>
 800b23c:	7ff00000 	.word	0x7ff00000

0800b240 <__b2d>:
 800b240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b242:	6905      	ldr	r5, [r0, #16]
 800b244:	f100 0714 	add.w	r7, r0, #20
 800b248:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b24c:	1f2e      	subs	r6, r5, #4
 800b24e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b252:	4620      	mov	r0, r4
 800b254:	f7ff fd52 	bl	800acfc <__hi0bits>
 800b258:	f1c0 0320 	rsb	r3, r0, #32
 800b25c:	280a      	cmp	r0, #10
 800b25e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b2dc <__b2d+0x9c>
 800b262:	600b      	str	r3, [r1, #0]
 800b264:	dc14      	bgt.n	800b290 <__b2d+0x50>
 800b266:	f1c0 0e0b 	rsb	lr, r0, #11
 800b26a:	fa24 f10e 	lsr.w	r1, r4, lr
 800b26e:	42b7      	cmp	r7, r6
 800b270:	ea41 030c 	orr.w	r3, r1, ip
 800b274:	bf34      	ite	cc
 800b276:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b27a:	2100      	movcs	r1, #0
 800b27c:	3015      	adds	r0, #21
 800b27e:	fa04 f000 	lsl.w	r0, r4, r0
 800b282:	fa21 f10e 	lsr.w	r1, r1, lr
 800b286:	ea40 0201 	orr.w	r2, r0, r1
 800b28a:	ec43 2b10 	vmov	d0, r2, r3
 800b28e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b290:	42b7      	cmp	r7, r6
 800b292:	bf3a      	itte	cc
 800b294:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b298:	f1a5 0608 	subcc.w	r6, r5, #8
 800b29c:	2100      	movcs	r1, #0
 800b29e:	380b      	subs	r0, #11
 800b2a0:	d017      	beq.n	800b2d2 <__b2d+0x92>
 800b2a2:	f1c0 0c20 	rsb	ip, r0, #32
 800b2a6:	fa04 f500 	lsl.w	r5, r4, r0
 800b2aa:	42be      	cmp	r6, r7
 800b2ac:	fa21 f40c 	lsr.w	r4, r1, ip
 800b2b0:	ea45 0504 	orr.w	r5, r5, r4
 800b2b4:	bf8c      	ite	hi
 800b2b6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b2ba:	2400      	movls	r4, #0
 800b2bc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b2c0:	fa01 f000 	lsl.w	r0, r1, r0
 800b2c4:	fa24 f40c 	lsr.w	r4, r4, ip
 800b2c8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b2cc:	ea40 0204 	orr.w	r2, r0, r4
 800b2d0:	e7db      	b.n	800b28a <__b2d+0x4a>
 800b2d2:	ea44 030c 	orr.w	r3, r4, ip
 800b2d6:	460a      	mov	r2, r1
 800b2d8:	e7d7      	b.n	800b28a <__b2d+0x4a>
 800b2da:	bf00      	nop
 800b2dc:	3ff00000 	.word	0x3ff00000

0800b2e0 <__d2b>:
 800b2e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b2e4:	4689      	mov	r9, r1
 800b2e6:	2101      	movs	r1, #1
 800b2e8:	ec57 6b10 	vmov	r6, r7, d0
 800b2ec:	4690      	mov	r8, r2
 800b2ee:	f7ff fc0f 	bl	800ab10 <_Balloc>
 800b2f2:	4604      	mov	r4, r0
 800b2f4:	b930      	cbnz	r0, 800b304 <__d2b+0x24>
 800b2f6:	4602      	mov	r2, r0
 800b2f8:	4b25      	ldr	r3, [pc, #148]	; (800b390 <__d2b+0xb0>)
 800b2fa:	4826      	ldr	r0, [pc, #152]	; (800b394 <__d2b+0xb4>)
 800b2fc:	f240 310a 	movw	r1, #778	; 0x30a
 800b300:	f000 ff1e 	bl	800c140 <__assert_func>
 800b304:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b308:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b30c:	bb35      	cbnz	r5, 800b35c <__d2b+0x7c>
 800b30e:	2e00      	cmp	r6, #0
 800b310:	9301      	str	r3, [sp, #4]
 800b312:	d028      	beq.n	800b366 <__d2b+0x86>
 800b314:	4668      	mov	r0, sp
 800b316:	9600      	str	r6, [sp, #0]
 800b318:	f7ff fd10 	bl	800ad3c <__lo0bits>
 800b31c:	9900      	ldr	r1, [sp, #0]
 800b31e:	b300      	cbz	r0, 800b362 <__d2b+0x82>
 800b320:	9a01      	ldr	r2, [sp, #4]
 800b322:	f1c0 0320 	rsb	r3, r0, #32
 800b326:	fa02 f303 	lsl.w	r3, r2, r3
 800b32a:	430b      	orrs	r3, r1
 800b32c:	40c2      	lsrs	r2, r0
 800b32e:	6163      	str	r3, [r4, #20]
 800b330:	9201      	str	r2, [sp, #4]
 800b332:	9b01      	ldr	r3, [sp, #4]
 800b334:	61a3      	str	r3, [r4, #24]
 800b336:	2b00      	cmp	r3, #0
 800b338:	bf14      	ite	ne
 800b33a:	2202      	movne	r2, #2
 800b33c:	2201      	moveq	r2, #1
 800b33e:	6122      	str	r2, [r4, #16]
 800b340:	b1d5      	cbz	r5, 800b378 <__d2b+0x98>
 800b342:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b346:	4405      	add	r5, r0
 800b348:	f8c9 5000 	str.w	r5, [r9]
 800b34c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b350:	f8c8 0000 	str.w	r0, [r8]
 800b354:	4620      	mov	r0, r4
 800b356:	b003      	add	sp, #12
 800b358:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b35c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b360:	e7d5      	b.n	800b30e <__d2b+0x2e>
 800b362:	6161      	str	r1, [r4, #20]
 800b364:	e7e5      	b.n	800b332 <__d2b+0x52>
 800b366:	a801      	add	r0, sp, #4
 800b368:	f7ff fce8 	bl	800ad3c <__lo0bits>
 800b36c:	9b01      	ldr	r3, [sp, #4]
 800b36e:	6163      	str	r3, [r4, #20]
 800b370:	2201      	movs	r2, #1
 800b372:	6122      	str	r2, [r4, #16]
 800b374:	3020      	adds	r0, #32
 800b376:	e7e3      	b.n	800b340 <__d2b+0x60>
 800b378:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b37c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b380:	f8c9 0000 	str.w	r0, [r9]
 800b384:	6918      	ldr	r0, [r3, #16]
 800b386:	f7ff fcb9 	bl	800acfc <__hi0bits>
 800b38a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b38e:	e7df      	b.n	800b350 <__d2b+0x70>
 800b390:	0800f744 	.word	0x0800f744
 800b394:	0800f7d4 	.word	0x0800f7d4

0800b398 <__ratio>:
 800b398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b39c:	4688      	mov	r8, r1
 800b39e:	4669      	mov	r1, sp
 800b3a0:	4681      	mov	r9, r0
 800b3a2:	f7ff ff4d 	bl	800b240 <__b2d>
 800b3a6:	a901      	add	r1, sp, #4
 800b3a8:	4640      	mov	r0, r8
 800b3aa:	ec55 4b10 	vmov	r4, r5, d0
 800b3ae:	f7ff ff47 	bl	800b240 <__b2d>
 800b3b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b3b6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b3ba:	eba3 0c02 	sub.w	ip, r3, r2
 800b3be:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b3c2:	1a9b      	subs	r3, r3, r2
 800b3c4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b3c8:	ec51 0b10 	vmov	r0, r1, d0
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	bfd6      	itet	le
 800b3d0:	460a      	movle	r2, r1
 800b3d2:	462a      	movgt	r2, r5
 800b3d4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b3d8:	468b      	mov	fp, r1
 800b3da:	462f      	mov	r7, r5
 800b3dc:	bfd4      	ite	le
 800b3de:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b3e2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	ee10 2a10 	vmov	r2, s0
 800b3ec:	465b      	mov	r3, fp
 800b3ee:	4639      	mov	r1, r7
 800b3f0:	f7f5 fa34 	bl	800085c <__aeabi_ddiv>
 800b3f4:	ec41 0b10 	vmov	d0, r0, r1
 800b3f8:	b003      	add	sp, #12
 800b3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b3fe <__copybits>:
 800b3fe:	3901      	subs	r1, #1
 800b400:	b570      	push	{r4, r5, r6, lr}
 800b402:	1149      	asrs	r1, r1, #5
 800b404:	6914      	ldr	r4, [r2, #16]
 800b406:	3101      	adds	r1, #1
 800b408:	f102 0314 	add.w	r3, r2, #20
 800b40c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b410:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b414:	1f05      	subs	r5, r0, #4
 800b416:	42a3      	cmp	r3, r4
 800b418:	d30c      	bcc.n	800b434 <__copybits+0x36>
 800b41a:	1aa3      	subs	r3, r4, r2
 800b41c:	3b11      	subs	r3, #17
 800b41e:	f023 0303 	bic.w	r3, r3, #3
 800b422:	3211      	adds	r2, #17
 800b424:	42a2      	cmp	r2, r4
 800b426:	bf88      	it	hi
 800b428:	2300      	movhi	r3, #0
 800b42a:	4418      	add	r0, r3
 800b42c:	2300      	movs	r3, #0
 800b42e:	4288      	cmp	r0, r1
 800b430:	d305      	bcc.n	800b43e <__copybits+0x40>
 800b432:	bd70      	pop	{r4, r5, r6, pc}
 800b434:	f853 6b04 	ldr.w	r6, [r3], #4
 800b438:	f845 6f04 	str.w	r6, [r5, #4]!
 800b43c:	e7eb      	b.n	800b416 <__copybits+0x18>
 800b43e:	f840 3b04 	str.w	r3, [r0], #4
 800b442:	e7f4      	b.n	800b42e <__copybits+0x30>

0800b444 <__any_on>:
 800b444:	f100 0214 	add.w	r2, r0, #20
 800b448:	6900      	ldr	r0, [r0, #16]
 800b44a:	114b      	asrs	r3, r1, #5
 800b44c:	4298      	cmp	r0, r3
 800b44e:	b510      	push	{r4, lr}
 800b450:	db11      	blt.n	800b476 <__any_on+0x32>
 800b452:	dd0a      	ble.n	800b46a <__any_on+0x26>
 800b454:	f011 011f 	ands.w	r1, r1, #31
 800b458:	d007      	beq.n	800b46a <__any_on+0x26>
 800b45a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b45e:	fa24 f001 	lsr.w	r0, r4, r1
 800b462:	fa00 f101 	lsl.w	r1, r0, r1
 800b466:	428c      	cmp	r4, r1
 800b468:	d10b      	bne.n	800b482 <__any_on+0x3e>
 800b46a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b46e:	4293      	cmp	r3, r2
 800b470:	d803      	bhi.n	800b47a <__any_on+0x36>
 800b472:	2000      	movs	r0, #0
 800b474:	bd10      	pop	{r4, pc}
 800b476:	4603      	mov	r3, r0
 800b478:	e7f7      	b.n	800b46a <__any_on+0x26>
 800b47a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b47e:	2900      	cmp	r1, #0
 800b480:	d0f5      	beq.n	800b46e <__any_on+0x2a>
 800b482:	2001      	movs	r0, #1
 800b484:	e7f6      	b.n	800b474 <__any_on+0x30>

0800b486 <_calloc_r>:
 800b486:	b513      	push	{r0, r1, r4, lr}
 800b488:	434a      	muls	r2, r1
 800b48a:	4611      	mov	r1, r2
 800b48c:	9201      	str	r2, [sp, #4]
 800b48e:	f000 f859 	bl	800b544 <_malloc_r>
 800b492:	4604      	mov	r4, r0
 800b494:	b118      	cbz	r0, 800b49e <_calloc_r+0x18>
 800b496:	9a01      	ldr	r2, [sp, #4]
 800b498:	2100      	movs	r1, #0
 800b49a:	f7fc fb1f 	bl	8007adc <memset>
 800b49e:	4620      	mov	r0, r4
 800b4a0:	b002      	add	sp, #8
 800b4a2:	bd10      	pop	{r4, pc}

0800b4a4 <_free_r>:
 800b4a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4a6:	2900      	cmp	r1, #0
 800b4a8:	d048      	beq.n	800b53c <_free_r+0x98>
 800b4aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4ae:	9001      	str	r0, [sp, #4]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	f1a1 0404 	sub.w	r4, r1, #4
 800b4b6:	bfb8      	it	lt
 800b4b8:	18e4      	addlt	r4, r4, r3
 800b4ba:	f001 f845 	bl	800c548 <__malloc_lock>
 800b4be:	4a20      	ldr	r2, [pc, #128]	; (800b540 <_free_r+0x9c>)
 800b4c0:	9801      	ldr	r0, [sp, #4]
 800b4c2:	6813      	ldr	r3, [r2, #0]
 800b4c4:	4615      	mov	r5, r2
 800b4c6:	b933      	cbnz	r3, 800b4d6 <_free_r+0x32>
 800b4c8:	6063      	str	r3, [r4, #4]
 800b4ca:	6014      	str	r4, [r2, #0]
 800b4cc:	b003      	add	sp, #12
 800b4ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4d2:	f001 b83f 	b.w	800c554 <__malloc_unlock>
 800b4d6:	42a3      	cmp	r3, r4
 800b4d8:	d90b      	bls.n	800b4f2 <_free_r+0x4e>
 800b4da:	6821      	ldr	r1, [r4, #0]
 800b4dc:	1862      	adds	r2, r4, r1
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	bf04      	itt	eq
 800b4e2:	681a      	ldreq	r2, [r3, #0]
 800b4e4:	685b      	ldreq	r3, [r3, #4]
 800b4e6:	6063      	str	r3, [r4, #4]
 800b4e8:	bf04      	itt	eq
 800b4ea:	1852      	addeq	r2, r2, r1
 800b4ec:	6022      	streq	r2, [r4, #0]
 800b4ee:	602c      	str	r4, [r5, #0]
 800b4f0:	e7ec      	b.n	800b4cc <_free_r+0x28>
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	b10b      	cbz	r3, 800b4fc <_free_r+0x58>
 800b4f8:	42a3      	cmp	r3, r4
 800b4fa:	d9fa      	bls.n	800b4f2 <_free_r+0x4e>
 800b4fc:	6811      	ldr	r1, [r2, #0]
 800b4fe:	1855      	adds	r5, r2, r1
 800b500:	42a5      	cmp	r5, r4
 800b502:	d10b      	bne.n	800b51c <_free_r+0x78>
 800b504:	6824      	ldr	r4, [r4, #0]
 800b506:	4421      	add	r1, r4
 800b508:	1854      	adds	r4, r2, r1
 800b50a:	42a3      	cmp	r3, r4
 800b50c:	6011      	str	r1, [r2, #0]
 800b50e:	d1dd      	bne.n	800b4cc <_free_r+0x28>
 800b510:	681c      	ldr	r4, [r3, #0]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	6053      	str	r3, [r2, #4]
 800b516:	4421      	add	r1, r4
 800b518:	6011      	str	r1, [r2, #0]
 800b51a:	e7d7      	b.n	800b4cc <_free_r+0x28>
 800b51c:	d902      	bls.n	800b524 <_free_r+0x80>
 800b51e:	230c      	movs	r3, #12
 800b520:	6003      	str	r3, [r0, #0]
 800b522:	e7d3      	b.n	800b4cc <_free_r+0x28>
 800b524:	6825      	ldr	r5, [r4, #0]
 800b526:	1961      	adds	r1, r4, r5
 800b528:	428b      	cmp	r3, r1
 800b52a:	bf04      	itt	eq
 800b52c:	6819      	ldreq	r1, [r3, #0]
 800b52e:	685b      	ldreq	r3, [r3, #4]
 800b530:	6063      	str	r3, [r4, #4]
 800b532:	bf04      	itt	eq
 800b534:	1949      	addeq	r1, r1, r5
 800b536:	6021      	streq	r1, [r4, #0]
 800b538:	6054      	str	r4, [r2, #4]
 800b53a:	e7c7      	b.n	800b4cc <_free_r+0x28>
 800b53c:	b003      	add	sp, #12
 800b53e:	bd30      	pop	{r4, r5, pc}
 800b540:	20004c38 	.word	0x20004c38

0800b544 <_malloc_r>:
 800b544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b546:	1ccd      	adds	r5, r1, #3
 800b548:	f025 0503 	bic.w	r5, r5, #3
 800b54c:	3508      	adds	r5, #8
 800b54e:	2d0c      	cmp	r5, #12
 800b550:	bf38      	it	cc
 800b552:	250c      	movcc	r5, #12
 800b554:	2d00      	cmp	r5, #0
 800b556:	4606      	mov	r6, r0
 800b558:	db01      	blt.n	800b55e <_malloc_r+0x1a>
 800b55a:	42a9      	cmp	r1, r5
 800b55c:	d903      	bls.n	800b566 <_malloc_r+0x22>
 800b55e:	230c      	movs	r3, #12
 800b560:	6033      	str	r3, [r6, #0]
 800b562:	2000      	movs	r0, #0
 800b564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b566:	f000 ffef 	bl	800c548 <__malloc_lock>
 800b56a:	4921      	ldr	r1, [pc, #132]	; (800b5f0 <_malloc_r+0xac>)
 800b56c:	680a      	ldr	r2, [r1, #0]
 800b56e:	4614      	mov	r4, r2
 800b570:	b99c      	cbnz	r4, 800b59a <_malloc_r+0x56>
 800b572:	4f20      	ldr	r7, [pc, #128]	; (800b5f4 <_malloc_r+0xb0>)
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	b923      	cbnz	r3, 800b582 <_malloc_r+0x3e>
 800b578:	4621      	mov	r1, r4
 800b57a:	4630      	mov	r0, r6
 800b57c:	f000 fcd0 	bl	800bf20 <_sbrk_r>
 800b580:	6038      	str	r0, [r7, #0]
 800b582:	4629      	mov	r1, r5
 800b584:	4630      	mov	r0, r6
 800b586:	f000 fccb 	bl	800bf20 <_sbrk_r>
 800b58a:	1c43      	adds	r3, r0, #1
 800b58c:	d123      	bne.n	800b5d6 <_malloc_r+0x92>
 800b58e:	230c      	movs	r3, #12
 800b590:	6033      	str	r3, [r6, #0]
 800b592:	4630      	mov	r0, r6
 800b594:	f000 ffde 	bl	800c554 <__malloc_unlock>
 800b598:	e7e3      	b.n	800b562 <_malloc_r+0x1e>
 800b59a:	6823      	ldr	r3, [r4, #0]
 800b59c:	1b5b      	subs	r3, r3, r5
 800b59e:	d417      	bmi.n	800b5d0 <_malloc_r+0x8c>
 800b5a0:	2b0b      	cmp	r3, #11
 800b5a2:	d903      	bls.n	800b5ac <_malloc_r+0x68>
 800b5a4:	6023      	str	r3, [r4, #0]
 800b5a6:	441c      	add	r4, r3
 800b5a8:	6025      	str	r5, [r4, #0]
 800b5aa:	e004      	b.n	800b5b6 <_malloc_r+0x72>
 800b5ac:	6863      	ldr	r3, [r4, #4]
 800b5ae:	42a2      	cmp	r2, r4
 800b5b0:	bf0c      	ite	eq
 800b5b2:	600b      	streq	r3, [r1, #0]
 800b5b4:	6053      	strne	r3, [r2, #4]
 800b5b6:	4630      	mov	r0, r6
 800b5b8:	f000 ffcc 	bl	800c554 <__malloc_unlock>
 800b5bc:	f104 000b 	add.w	r0, r4, #11
 800b5c0:	1d23      	adds	r3, r4, #4
 800b5c2:	f020 0007 	bic.w	r0, r0, #7
 800b5c6:	1ac2      	subs	r2, r0, r3
 800b5c8:	d0cc      	beq.n	800b564 <_malloc_r+0x20>
 800b5ca:	1a1b      	subs	r3, r3, r0
 800b5cc:	50a3      	str	r3, [r4, r2]
 800b5ce:	e7c9      	b.n	800b564 <_malloc_r+0x20>
 800b5d0:	4622      	mov	r2, r4
 800b5d2:	6864      	ldr	r4, [r4, #4]
 800b5d4:	e7cc      	b.n	800b570 <_malloc_r+0x2c>
 800b5d6:	1cc4      	adds	r4, r0, #3
 800b5d8:	f024 0403 	bic.w	r4, r4, #3
 800b5dc:	42a0      	cmp	r0, r4
 800b5de:	d0e3      	beq.n	800b5a8 <_malloc_r+0x64>
 800b5e0:	1a21      	subs	r1, r4, r0
 800b5e2:	4630      	mov	r0, r6
 800b5e4:	f000 fc9c 	bl	800bf20 <_sbrk_r>
 800b5e8:	3001      	adds	r0, #1
 800b5ea:	d1dd      	bne.n	800b5a8 <_malloc_r+0x64>
 800b5ec:	e7cf      	b.n	800b58e <_malloc_r+0x4a>
 800b5ee:	bf00      	nop
 800b5f0:	20004c38 	.word	0x20004c38
 800b5f4:	20004c3c 	.word	0x20004c3c

0800b5f8 <__ssputs_r>:
 800b5f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5fc:	688e      	ldr	r6, [r1, #8]
 800b5fe:	429e      	cmp	r6, r3
 800b600:	4682      	mov	sl, r0
 800b602:	460c      	mov	r4, r1
 800b604:	4690      	mov	r8, r2
 800b606:	461f      	mov	r7, r3
 800b608:	d838      	bhi.n	800b67c <__ssputs_r+0x84>
 800b60a:	898a      	ldrh	r2, [r1, #12]
 800b60c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b610:	d032      	beq.n	800b678 <__ssputs_r+0x80>
 800b612:	6825      	ldr	r5, [r4, #0]
 800b614:	6909      	ldr	r1, [r1, #16]
 800b616:	eba5 0901 	sub.w	r9, r5, r1
 800b61a:	6965      	ldr	r5, [r4, #20]
 800b61c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b620:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b624:	3301      	adds	r3, #1
 800b626:	444b      	add	r3, r9
 800b628:	106d      	asrs	r5, r5, #1
 800b62a:	429d      	cmp	r5, r3
 800b62c:	bf38      	it	cc
 800b62e:	461d      	movcc	r5, r3
 800b630:	0553      	lsls	r3, r2, #21
 800b632:	d531      	bpl.n	800b698 <__ssputs_r+0xa0>
 800b634:	4629      	mov	r1, r5
 800b636:	f7ff ff85 	bl	800b544 <_malloc_r>
 800b63a:	4606      	mov	r6, r0
 800b63c:	b950      	cbnz	r0, 800b654 <__ssputs_r+0x5c>
 800b63e:	230c      	movs	r3, #12
 800b640:	f8ca 3000 	str.w	r3, [sl]
 800b644:	89a3      	ldrh	r3, [r4, #12]
 800b646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b64a:	81a3      	strh	r3, [r4, #12]
 800b64c:	f04f 30ff 	mov.w	r0, #4294967295
 800b650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b654:	6921      	ldr	r1, [r4, #16]
 800b656:	464a      	mov	r2, r9
 800b658:	f7fc fa32 	bl	8007ac0 <memcpy>
 800b65c:	89a3      	ldrh	r3, [r4, #12]
 800b65e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b666:	81a3      	strh	r3, [r4, #12]
 800b668:	6126      	str	r6, [r4, #16]
 800b66a:	6165      	str	r5, [r4, #20]
 800b66c:	444e      	add	r6, r9
 800b66e:	eba5 0509 	sub.w	r5, r5, r9
 800b672:	6026      	str	r6, [r4, #0]
 800b674:	60a5      	str	r5, [r4, #8]
 800b676:	463e      	mov	r6, r7
 800b678:	42be      	cmp	r6, r7
 800b67a:	d900      	bls.n	800b67e <__ssputs_r+0x86>
 800b67c:	463e      	mov	r6, r7
 800b67e:	4632      	mov	r2, r6
 800b680:	6820      	ldr	r0, [r4, #0]
 800b682:	4641      	mov	r1, r8
 800b684:	f000 ff46 	bl	800c514 <memmove>
 800b688:	68a3      	ldr	r3, [r4, #8]
 800b68a:	6822      	ldr	r2, [r4, #0]
 800b68c:	1b9b      	subs	r3, r3, r6
 800b68e:	4432      	add	r2, r6
 800b690:	60a3      	str	r3, [r4, #8]
 800b692:	6022      	str	r2, [r4, #0]
 800b694:	2000      	movs	r0, #0
 800b696:	e7db      	b.n	800b650 <__ssputs_r+0x58>
 800b698:	462a      	mov	r2, r5
 800b69a:	f000 ff61 	bl	800c560 <_realloc_r>
 800b69e:	4606      	mov	r6, r0
 800b6a0:	2800      	cmp	r0, #0
 800b6a2:	d1e1      	bne.n	800b668 <__ssputs_r+0x70>
 800b6a4:	6921      	ldr	r1, [r4, #16]
 800b6a6:	4650      	mov	r0, sl
 800b6a8:	f7ff fefc 	bl	800b4a4 <_free_r>
 800b6ac:	e7c7      	b.n	800b63e <__ssputs_r+0x46>
	...

0800b6b0 <_svfiprintf_r>:
 800b6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6b4:	4698      	mov	r8, r3
 800b6b6:	898b      	ldrh	r3, [r1, #12]
 800b6b8:	061b      	lsls	r3, r3, #24
 800b6ba:	b09d      	sub	sp, #116	; 0x74
 800b6bc:	4607      	mov	r7, r0
 800b6be:	460d      	mov	r5, r1
 800b6c0:	4614      	mov	r4, r2
 800b6c2:	d50e      	bpl.n	800b6e2 <_svfiprintf_r+0x32>
 800b6c4:	690b      	ldr	r3, [r1, #16]
 800b6c6:	b963      	cbnz	r3, 800b6e2 <_svfiprintf_r+0x32>
 800b6c8:	2140      	movs	r1, #64	; 0x40
 800b6ca:	f7ff ff3b 	bl	800b544 <_malloc_r>
 800b6ce:	6028      	str	r0, [r5, #0]
 800b6d0:	6128      	str	r0, [r5, #16]
 800b6d2:	b920      	cbnz	r0, 800b6de <_svfiprintf_r+0x2e>
 800b6d4:	230c      	movs	r3, #12
 800b6d6:	603b      	str	r3, [r7, #0]
 800b6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6dc:	e0d1      	b.n	800b882 <_svfiprintf_r+0x1d2>
 800b6de:	2340      	movs	r3, #64	; 0x40
 800b6e0:	616b      	str	r3, [r5, #20]
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	9309      	str	r3, [sp, #36]	; 0x24
 800b6e6:	2320      	movs	r3, #32
 800b6e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6f0:	2330      	movs	r3, #48	; 0x30
 800b6f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b89c <_svfiprintf_r+0x1ec>
 800b6f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6fa:	f04f 0901 	mov.w	r9, #1
 800b6fe:	4623      	mov	r3, r4
 800b700:	469a      	mov	sl, r3
 800b702:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b706:	b10a      	cbz	r2, 800b70c <_svfiprintf_r+0x5c>
 800b708:	2a25      	cmp	r2, #37	; 0x25
 800b70a:	d1f9      	bne.n	800b700 <_svfiprintf_r+0x50>
 800b70c:	ebba 0b04 	subs.w	fp, sl, r4
 800b710:	d00b      	beq.n	800b72a <_svfiprintf_r+0x7a>
 800b712:	465b      	mov	r3, fp
 800b714:	4622      	mov	r2, r4
 800b716:	4629      	mov	r1, r5
 800b718:	4638      	mov	r0, r7
 800b71a:	f7ff ff6d 	bl	800b5f8 <__ssputs_r>
 800b71e:	3001      	adds	r0, #1
 800b720:	f000 80aa 	beq.w	800b878 <_svfiprintf_r+0x1c8>
 800b724:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b726:	445a      	add	r2, fp
 800b728:	9209      	str	r2, [sp, #36]	; 0x24
 800b72a:	f89a 3000 	ldrb.w	r3, [sl]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	f000 80a2 	beq.w	800b878 <_svfiprintf_r+0x1c8>
 800b734:	2300      	movs	r3, #0
 800b736:	f04f 32ff 	mov.w	r2, #4294967295
 800b73a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b73e:	f10a 0a01 	add.w	sl, sl, #1
 800b742:	9304      	str	r3, [sp, #16]
 800b744:	9307      	str	r3, [sp, #28]
 800b746:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b74a:	931a      	str	r3, [sp, #104]	; 0x68
 800b74c:	4654      	mov	r4, sl
 800b74e:	2205      	movs	r2, #5
 800b750:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b754:	4851      	ldr	r0, [pc, #324]	; (800b89c <_svfiprintf_r+0x1ec>)
 800b756:	f7f4 fd4b 	bl	80001f0 <memchr>
 800b75a:	9a04      	ldr	r2, [sp, #16]
 800b75c:	b9d8      	cbnz	r0, 800b796 <_svfiprintf_r+0xe6>
 800b75e:	06d0      	lsls	r0, r2, #27
 800b760:	bf44      	itt	mi
 800b762:	2320      	movmi	r3, #32
 800b764:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b768:	0711      	lsls	r1, r2, #28
 800b76a:	bf44      	itt	mi
 800b76c:	232b      	movmi	r3, #43	; 0x2b
 800b76e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b772:	f89a 3000 	ldrb.w	r3, [sl]
 800b776:	2b2a      	cmp	r3, #42	; 0x2a
 800b778:	d015      	beq.n	800b7a6 <_svfiprintf_r+0xf6>
 800b77a:	9a07      	ldr	r2, [sp, #28]
 800b77c:	4654      	mov	r4, sl
 800b77e:	2000      	movs	r0, #0
 800b780:	f04f 0c0a 	mov.w	ip, #10
 800b784:	4621      	mov	r1, r4
 800b786:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b78a:	3b30      	subs	r3, #48	; 0x30
 800b78c:	2b09      	cmp	r3, #9
 800b78e:	d94e      	bls.n	800b82e <_svfiprintf_r+0x17e>
 800b790:	b1b0      	cbz	r0, 800b7c0 <_svfiprintf_r+0x110>
 800b792:	9207      	str	r2, [sp, #28]
 800b794:	e014      	b.n	800b7c0 <_svfiprintf_r+0x110>
 800b796:	eba0 0308 	sub.w	r3, r0, r8
 800b79a:	fa09 f303 	lsl.w	r3, r9, r3
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	9304      	str	r3, [sp, #16]
 800b7a2:	46a2      	mov	sl, r4
 800b7a4:	e7d2      	b.n	800b74c <_svfiprintf_r+0x9c>
 800b7a6:	9b03      	ldr	r3, [sp, #12]
 800b7a8:	1d19      	adds	r1, r3, #4
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	9103      	str	r1, [sp, #12]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	bfbb      	ittet	lt
 800b7b2:	425b      	neglt	r3, r3
 800b7b4:	f042 0202 	orrlt.w	r2, r2, #2
 800b7b8:	9307      	strge	r3, [sp, #28]
 800b7ba:	9307      	strlt	r3, [sp, #28]
 800b7bc:	bfb8      	it	lt
 800b7be:	9204      	strlt	r2, [sp, #16]
 800b7c0:	7823      	ldrb	r3, [r4, #0]
 800b7c2:	2b2e      	cmp	r3, #46	; 0x2e
 800b7c4:	d10c      	bne.n	800b7e0 <_svfiprintf_r+0x130>
 800b7c6:	7863      	ldrb	r3, [r4, #1]
 800b7c8:	2b2a      	cmp	r3, #42	; 0x2a
 800b7ca:	d135      	bne.n	800b838 <_svfiprintf_r+0x188>
 800b7cc:	9b03      	ldr	r3, [sp, #12]
 800b7ce:	1d1a      	adds	r2, r3, #4
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	9203      	str	r2, [sp, #12]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	bfb8      	it	lt
 800b7d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b7dc:	3402      	adds	r4, #2
 800b7de:	9305      	str	r3, [sp, #20]
 800b7e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b8ac <_svfiprintf_r+0x1fc>
 800b7e4:	7821      	ldrb	r1, [r4, #0]
 800b7e6:	2203      	movs	r2, #3
 800b7e8:	4650      	mov	r0, sl
 800b7ea:	f7f4 fd01 	bl	80001f0 <memchr>
 800b7ee:	b140      	cbz	r0, 800b802 <_svfiprintf_r+0x152>
 800b7f0:	2340      	movs	r3, #64	; 0x40
 800b7f2:	eba0 000a 	sub.w	r0, r0, sl
 800b7f6:	fa03 f000 	lsl.w	r0, r3, r0
 800b7fa:	9b04      	ldr	r3, [sp, #16]
 800b7fc:	4303      	orrs	r3, r0
 800b7fe:	3401      	adds	r4, #1
 800b800:	9304      	str	r3, [sp, #16]
 800b802:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b806:	4826      	ldr	r0, [pc, #152]	; (800b8a0 <_svfiprintf_r+0x1f0>)
 800b808:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b80c:	2206      	movs	r2, #6
 800b80e:	f7f4 fcef 	bl	80001f0 <memchr>
 800b812:	2800      	cmp	r0, #0
 800b814:	d038      	beq.n	800b888 <_svfiprintf_r+0x1d8>
 800b816:	4b23      	ldr	r3, [pc, #140]	; (800b8a4 <_svfiprintf_r+0x1f4>)
 800b818:	bb1b      	cbnz	r3, 800b862 <_svfiprintf_r+0x1b2>
 800b81a:	9b03      	ldr	r3, [sp, #12]
 800b81c:	3307      	adds	r3, #7
 800b81e:	f023 0307 	bic.w	r3, r3, #7
 800b822:	3308      	adds	r3, #8
 800b824:	9303      	str	r3, [sp, #12]
 800b826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b828:	4433      	add	r3, r6
 800b82a:	9309      	str	r3, [sp, #36]	; 0x24
 800b82c:	e767      	b.n	800b6fe <_svfiprintf_r+0x4e>
 800b82e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b832:	460c      	mov	r4, r1
 800b834:	2001      	movs	r0, #1
 800b836:	e7a5      	b.n	800b784 <_svfiprintf_r+0xd4>
 800b838:	2300      	movs	r3, #0
 800b83a:	3401      	adds	r4, #1
 800b83c:	9305      	str	r3, [sp, #20]
 800b83e:	4619      	mov	r1, r3
 800b840:	f04f 0c0a 	mov.w	ip, #10
 800b844:	4620      	mov	r0, r4
 800b846:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b84a:	3a30      	subs	r2, #48	; 0x30
 800b84c:	2a09      	cmp	r2, #9
 800b84e:	d903      	bls.n	800b858 <_svfiprintf_r+0x1a8>
 800b850:	2b00      	cmp	r3, #0
 800b852:	d0c5      	beq.n	800b7e0 <_svfiprintf_r+0x130>
 800b854:	9105      	str	r1, [sp, #20]
 800b856:	e7c3      	b.n	800b7e0 <_svfiprintf_r+0x130>
 800b858:	fb0c 2101 	mla	r1, ip, r1, r2
 800b85c:	4604      	mov	r4, r0
 800b85e:	2301      	movs	r3, #1
 800b860:	e7f0      	b.n	800b844 <_svfiprintf_r+0x194>
 800b862:	ab03      	add	r3, sp, #12
 800b864:	9300      	str	r3, [sp, #0]
 800b866:	462a      	mov	r2, r5
 800b868:	4b0f      	ldr	r3, [pc, #60]	; (800b8a8 <_svfiprintf_r+0x1f8>)
 800b86a:	a904      	add	r1, sp, #16
 800b86c:	4638      	mov	r0, r7
 800b86e:	f7fc f9dd 	bl	8007c2c <_printf_float>
 800b872:	1c42      	adds	r2, r0, #1
 800b874:	4606      	mov	r6, r0
 800b876:	d1d6      	bne.n	800b826 <_svfiprintf_r+0x176>
 800b878:	89ab      	ldrh	r3, [r5, #12]
 800b87a:	065b      	lsls	r3, r3, #25
 800b87c:	f53f af2c 	bmi.w	800b6d8 <_svfiprintf_r+0x28>
 800b880:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b882:	b01d      	add	sp, #116	; 0x74
 800b884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b888:	ab03      	add	r3, sp, #12
 800b88a:	9300      	str	r3, [sp, #0]
 800b88c:	462a      	mov	r2, r5
 800b88e:	4b06      	ldr	r3, [pc, #24]	; (800b8a8 <_svfiprintf_r+0x1f8>)
 800b890:	a904      	add	r1, sp, #16
 800b892:	4638      	mov	r0, r7
 800b894:	f7fc fc6e 	bl	8008174 <_printf_i>
 800b898:	e7eb      	b.n	800b872 <_svfiprintf_r+0x1c2>
 800b89a:	bf00      	nop
 800b89c:	0800f934 	.word	0x0800f934
 800b8a0:	0800f93e 	.word	0x0800f93e
 800b8a4:	08007c2d 	.word	0x08007c2d
 800b8a8:	0800b5f9 	.word	0x0800b5f9
 800b8ac:	0800f93a 	.word	0x0800f93a

0800b8b0 <_sungetc_r>:
 800b8b0:	b538      	push	{r3, r4, r5, lr}
 800b8b2:	1c4b      	adds	r3, r1, #1
 800b8b4:	4614      	mov	r4, r2
 800b8b6:	d103      	bne.n	800b8c0 <_sungetc_r+0x10>
 800b8b8:	f04f 35ff 	mov.w	r5, #4294967295
 800b8bc:	4628      	mov	r0, r5
 800b8be:	bd38      	pop	{r3, r4, r5, pc}
 800b8c0:	8993      	ldrh	r3, [r2, #12]
 800b8c2:	f023 0320 	bic.w	r3, r3, #32
 800b8c6:	8193      	strh	r3, [r2, #12]
 800b8c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b8ca:	6852      	ldr	r2, [r2, #4]
 800b8cc:	b2cd      	uxtb	r5, r1
 800b8ce:	b18b      	cbz	r3, 800b8f4 <_sungetc_r+0x44>
 800b8d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	dd08      	ble.n	800b8e8 <_sungetc_r+0x38>
 800b8d6:	6823      	ldr	r3, [r4, #0]
 800b8d8:	1e5a      	subs	r2, r3, #1
 800b8da:	6022      	str	r2, [r4, #0]
 800b8dc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b8e0:	6863      	ldr	r3, [r4, #4]
 800b8e2:	3301      	adds	r3, #1
 800b8e4:	6063      	str	r3, [r4, #4]
 800b8e6:	e7e9      	b.n	800b8bc <_sungetc_r+0xc>
 800b8e8:	4621      	mov	r1, r4
 800b8ea:	f000 fbe1 	bl	800c0b0 <__submore>
 800b8ee:	2800      	cmp	r0, #0
 800b8f0:	d0f1      	beq.n	800b8d6 <_sungetc_r+0x26>
 800b8f2:	e7e1      	b.n	800b8b8 <_sungetc_r+0x8>
 800b8f4:	6921      	ldr	r1, [r4, #16]
 800b8f6:	6823      	ldr	r3, [r4, #0]
 800b8f8:	b151      	cbz	r1, 800b910 <_sungetc_r+0x60>
 800b8fa:	4299      	cmp	r1, r3
 800b8fc:	d208      	bcs.n	800b910 <_sungetc_r+0x60>
 800b8fe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b902:	42a9      	cmp	r1, r5
 800b904:	d104      	bne.n	800b910 <_sungetc_r+0x60>
 800b906:	3b01      	subs	r3, #1
 800b908:	3201      	adds	r2, #1
 800b90a:	6023      	str	r3, [r4, #0]
 800b90c:	6062      	str	r2, [r4, #4]
 800b90e:	e7d5      	b.n	800b8bc <_sungetc_r+0xc>
 800b910:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b914:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b918:	6363      	str	r3, [r4, #52]	; 0x34
 800b91a:	2303      	movs	r3, #3
 800b91c:	63a3      	str	r3, [r4, #56]	; 0x38
 800b91e:	4623      	mov	r3, r4
 800b920:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b924:	6023      	str	r3, [r4, #0]
 800b926:	2301      	movs	r3, #1
 800b928:	e7dc      	b.n	800b8e4 <_sungetc_r+0x34>

0800b92a <__ssrefill_r>:
 800b92a:	b510      	push	{r4, lr}
 800b92c:	460c      	mov	r4, r1
 800b92e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b930:	b169      	cbz	r1, 800b94e <__ssrefill_r+0x24>
 800b932:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b936:	4299      	cmp	r1, r3
 800b938:	d001      	beq.n	800b93e <__ssrefill_r+0x14>
 800b93a:	f7ff fdb3 	bl	800b4a4 <_free_r>
 800b93e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b940:	6063      	str	r3, [r4, #4]
 800b942:	2000      	movs	r0, #0
 800b944:	6360      	str	r0, [r4, #52]	; 0x34
 800b946:	b113      	cbz	r3, 800b94e <__ssrefill_r+0x24>
 800b948:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b94a:	6023      	str	r3, [r4, #0]
 800b94c:	bd10      	pop	{r4, pc}
 800b94e:	6923      	ldr	r3, [r4, #16]
 800b950:	6023      	str	r3, [r4, #0]
 800b952:	2300      	movs	r3, #0
 800b954:	6063      	str	r3, [r4, #4]
 800b956:	89a3      	ldrh	r3, [r4, #12]
 800b958:	f043 0320 	orr.w	r3, r3, #32
 800b95c:	81a3      	strh	r3, [r4, #12]
 800b95e:	f04f 30ff 	mov.w	r0, #4294967295
 800b962:	e7f3      	b.n	800b94c <__ssrefill_r+0x22>

0800b964 <__ssvfiscanf_r>:
 800b964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b968:	460c      	mov	r4, r1
 800b96a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800b96e:	2100      	movs	r1, #0
 800b970:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b974:	49b2      	ldr	r1, [pc, #712]	; (800bc40 <__ssvfiscanf_r+0x2dc>)
 800b976:	91a0      	str	r1, [sp, #640]	; 0x280
 800b978:	f10d 0804 	add.w	r8, sp, #4
 800b97c:	49b1      	ldr	r1, [pc, #708]	; (800bc44 <__ssvfiscanf_r+0x2e0>)
 800b97e:	4fb2      	ldr	r7, [pc, #712]	; (800bc48 <__ssvfiscanf_r+0x2e4>)
 800b980:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800bc4c <__ssvfiscanf_r+0x2e8>
 800b984:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b988:	4606      	mov	r6, r0
 800b98a:	91a1      	str	r1, [sp, #644]	; 0x284
 800b98c:	9300      	str	r3, [sp, #0]
 800b98e:	f892 a000 	ldrb.w	sl, [r2]
 800b992:	f1ba 0f00 	cmp.w	sl, #0
 800b996:	f000 8151 	beq.w	800bc3c <__ssvfiscanf_r+0x2d8>
 800b99a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800b99e:	f013 0308 	ands.w	r3, r3, #8
 800b9a2:	f102 0501 	add.w	r5, r2, #1
 800b9a6:	d019      	beq.n	800b9dc <__ssvfiscanf_r+0x78>
 800b9a8:	6863      	ldr	r3, [r4, #4]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	dd0f      	ble.n	800b9ce <__ssvfiscanf_r+0x6a>
 800b9ae:	6823      	ldr	r3, [r4, #0]
 800b9b0:	781a      	ldrb	r2, [r3, #0]
 800b9b2:	5cba      	ldrb	r2, [r7, r2]
 800b9b4:	0712      	lsls	r2, r2, #28
 800b9b6:	d401      	bmi.n	800b9bc <__ssvfiscanf_r+0x58>
 800b9b8:	462a      	mov	r2, r5
 800b9ba:	e7e8      	b.n	800b98e <__ssvfiscanf_r+0x2a>
 800b9bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b9be:	3201      	adds	r2, #1
 800b9c0:	9245      	str	r2, [sp, #276]	; 0x114
 800b9c2:	6862      	ldr	r2, [r4, #4]
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	3a01      	subs	r2, #1
 800b9c8:	6062      	str	r2, [r4, #4]
 800b9ca:	6023      	str	r3, [r4, #0]
 800b9cc:	e7ec      	b.n	800b9a8 <__ssvfiscanf_r+0x44>
 800b9ce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b9d0:	4621      	mov	r1, r4
 800b9d2:	4630      	mov	r0, r6
 800b9d4:	4798      	blx	r3
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	d0e9      	beq.n	800b9ae <__ssvfiscanf_r+0x4a>
 800b9da:	e7ed      	b.n	800b9b8 <__ssvfiscanf_r+0x54>
 800b9dc:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800b9e0:	f040 8083 	bne.w	800baea <__ssvfiscanf_r+0x186>
 800b9e4:	9341      	str	r3, [sp, #260]	; 0x104
 800b9e6:	9343      	str	r3, [sp, #268]	; 0x10c
 800b9e8:	7853      	ldrb	r3, [r2, #1]
 800b9ea:	2b2a      	cmp	r3, #42	; 0x2a
 800b9ec:	bf02      	ittt	eq
 800b9ee:	2310      	moveq	r3, #16
 800b9f0:	1c95      	addeq	r5, r2, #2
 800b9f2:	9341      	streq	r3, [sp, #260]	; 0x104
 800b9f4:	220a      	movs	r2, #10
 800b9f6:	46ab      	mov	fp, r5
 800b9f8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800b9fc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800ba00:	2b09      	cmp	r3, #9
 800ba02:	d91d      	bls.n	800ba40 <__ssvfiscanf_r+0xdc>
 800ba04:	4891      	ldr	r0, [pc, #580]	; (800bc4c <__ssvfiscanf_r+0x2e8>)
 800ba06:	2203      	movs	r2, #3
 800ba08:	f7f4 fbf2 	bl	80001f0 <memchr>
 800ba0c:	b140      	cbz	r0, 800ba20 <__ssvfiscanf_r+0xbc>
 800ba0e:	2301      	movs	r3, #1
 800ba10:	eba0 0009 	sub.w	r0, r0, r9
 800ba14:	fa03 f000 	lsl.w	r0, r3, r0
 800ba18:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ba1a:	4318      	orrs	r0, r3
 800ba1c:	9041      	str	r0, [sp, #260]	; 0x104
 800ba1e:	465d      	mov	r5, fp
 800ba20:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ba24:	2b78      	cmp	r3, #120	; 0x78
 800ba26:	d806      	bhi.n	800ba36 <__ssvfiscanf_r+0xd2>
 800ba28:	2b57      	cmp	r3, #87	; 0x57
 800ba2a:	d810      	bhi.n	800ba4e <__ssvfiscanf_r+0xea>
 800ba2c:	2b25      	cmp	r3, #37	; 0x25
 800ba2e:	d05c      	beq.n	800baea <__ssvfiscanf_r+0x186>
 800ba30:	d856      	bhi.n	800bae0 <__ssvfiscanf_r+0x17c>
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d074      	beq.n	800bb20 <__ssvfiscanf_r+0x1bc>
 800ba36:	2303      	movs	r3, #3
 800ba38:	9347      	str	r3, [sp, #284]	; 0x11c
 800ba3a:	230a      	movs	r3, #10
 800ba3c:	9342      	str	r3, [sp, #264]	; 0x108
 800ba3e:	e081      	b.n	800bb44 <__ssvfiscanf_r+0x1e0>
 800ba40:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ba42:	fb02 1303 	mla	r3, r2, r3, r1
 800ba46:	3b30      	subs	r3, #48	; 0x30
 800ba48:	9343      	str	r3, [sp, #268]	; 0x10c
 800ba4a:	465d      	mov	r5, fp
 800ba4c:	e7d3      	b.n	800b9f6 <__ssvfiscanf_r+0x92>
 800ba4e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800ba52:	2a20      	cmp	r2, #32
 800ba54:	d8ef      	bhi.n	800ba36 <__ssvfiscanf_r+0xd2>
 800ba56:	a101      	add	r1, pc, #4	; (adr r1, 800ba5c <__ssvfiscanf_r+0xf8>)
 800ba58:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ba5c:	0800bb2f 	.word	0x0800bb2f
 800ba60:	0800ba37 	.word	0x0800ba37
 800ba64:	0800ba37 	.word	0x0800ba37
 800ba68:	0800bb8d 	.word	0x0800bb8d
 800ba6c:	0800ba37 	.word	0x0800ba37
 800ba70:	0800ba37 	.word	0x0800ba37
 800ba74:	0800ba37 	.word	0x0800ba37
 800ba78:	0800ba37 	.word	0x0800ba37
 800ba7c:	0800ba37 	.word	0x0800ba37
 800ba80:	0800ba37 	.word	0x0800ba37
 800ba84:	0800ba37 	.word	0x0800ba37
 800ba88:	0800bba3 	.word	0x0800bba3
 800ba8c:	0800bb79 	.word	0x0800bb79
 800ba90:	0800bae7 	.word	0x0800bae7
 800ba94:	0800bae7 	.word	0x0800bae7
 800ba98:	0800bae7 	.word	0x0800bae7
 800ba9c:	0800ba37 	.word	0x0800ba37
 800baa0:	0800bb7d 	.word	0x0800bb7d
 800baa4:	0800ba37 	.word	0x0800ba37
 800baa8:	0800ba37 	.word	0x0800ba37
 800baac:	0800ba37 	.word	0x0800ba37
 800bab0:	0800ba37 	.word	0x0800ba37
 800bab4:	0800bbb3 	.word	0x0800bbb3
 800bab8:	0800bb85 	.word	0x0800bb85
 800babc:	0800bb27 	.word	0x0800bb27
 800bac0:	0800ba37 	.word	0x0800ba37
 800bac4:	0800ba37 	.word	0x0800ba37
 800bac8:	0800bbaf 	.word	0x0800bbaf
 800bacc:	0800ba37 	.word	0x0800ba37
 800bad0:	0800bb79 	.word	0x0800bb79
 800bad4:	0800ba37 	.word	0x0800ba37
 800bad8:	0800ba37 	.word	0x0800ba37
 800badc:	0800bb2f 	.word	0x0800bb2f
 800bae0:	3b45      	subs	r3, #69	; 0x45
 800bae2:	2b02      	cmp	r3, #2
 800bae4:	d8a7      	bhi.n	800ba36 <__ssvfiscanf_r+0xd2>
 800bae6:	2305      	movs	r3, #5
 800bae8:	e02b      	b.n	800bb42 <__ssvfiscanf_r+0x1de>
 800baea:	6863      	ldr	r3, [r4, #4]
 800baec:	2b00      	cmp	r3, #0
 800baee:	dd0d      	ble.n	800bb0c <__ssvfiscanf_r+0x1a8>
 800baf0:	6823      	ldr	r3, [r4, #0]
 800baf2:	781a      	ldrb	r2, [r3, #0]
 800baf4:	4552      	cmp	r2, sl
 800baf6:	f040 80a1 	bne.w	800bc3c <__ssvfiscanf_r+0x2d8>
 800bafa:	3301      	adds	r3, #1
 800bafc:	6862      	ldr	r2, [r4, #4]
 800bafe:	6023      	str	r3, [r4, #0]
 800bb00:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bb02:	3a01      	subs	r2, #1
 800bb04:	3301      	adds	r3, #1
 800bb06:	6062      	str	r2, [r4, #4]
 800bb08:	9345      	str	r3, [sp, #276]	; 0x114
 800bb0a:	e755      	b.n	800b9b8 <__ssvfiscanf_r+0x54>
 800bb0c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bb0e:	4621      	mov	r1, r4
 800bb10:	4630      	mov	r0, r6
 800bb12:	4798      	blx	r3
 800bb14:	2800      	cmp	r0, #0
 800bb16:	d0eb      	beq.n	800baf0 <__ssvfiscanf_r+0x18c>
 800bb18:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bb1a:	2800      	cmp	r0, #0
 800bb1c:	f040 8084 	bne.w	800bc28 <__ssvfiscanf_r+0x2c4>
 800bb20:	f04f 30ff 	mov.w	r0, #4294967295
 800bb24:	e086      	b.n	800bc34 <__ssvfiscanf_r+0x2d0>
 800bb26:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bb28:	f042 0220 	orr.w	r2, r2, #32
 800bb2c:	9241      	str	r2, [sp, #260]	; 0x104
 800bb2e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bb30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb34:	9241      	str	r2, [sp, #260]	; 0x104
 800bb36:	2210      	movs	r2, #16
 800bb38:	2b6f      	cmp	r3, #111	; 0x6f
 800bb3a:	9242      	str	r2, [sp, #264]	; 0x108
 800bb3c:	bf34      	ite	cc
 800bb3e:	2303      	movcc	r3, #3
 800bb40:	2304      	movcs	r3, #4
 800bb42:	9347      	str	r3, [sp, #284]	; 0x11c
 800bb44:	6863      	ldr	r3, [r4, #4]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	dd41      	ble.n	800bbce <__ssvfiscanf_r+0x26a>
 800bb4a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bb4c:	0659      	lsls	r1, r3, #25
 800bb4e:	d404      	bmi.n	800bb5a <__ssvfiscanf_r+0x1f6>
 800bb50:	6823      	ldr	r3, [r4, #0]
 800bb52:	781a      	ldrb	r2, [r3, #0]
 800bb54:	5cba      	ldrb	r2, [r7, r2]
 800bb56:	0712      	lsls	r2, r2, #28
 800bb58:	d440      	bmi.n	800bbdc <__ssvfiscanf_r+0x278>
 800bb5a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bb5c:	2b02      	cmp	r3, #2
 800bb5e:	dc4f      	bgt.n	800bc00 <__ssvfiscanf_r+0x29c>
 800bb60:	466b      	mov	r3, sp
 800bb62:	4622      	mov	r2, r4
 800bb64:	a941      	add	r1, sp, #260	; 0x104
 800bb66:	4630      	mov	r0, r6
 800bb68:	f000 f874 	bl	800bc54 <_scanf_chars>
 800bb6c:	2801      	cmp	r0, #1
 800bb6e:	d065      	beq.n	800bc3c <__ssvfiscanf_r+0x2d8>
 800bb70:	2802      	cmp	r0, #2
 800bb72:	f47f af21 	bne.w	800b9b8 <__ssvfiscanf_r+0x54>
 800bb76:	e7cf      	b.n	800bb18 <__ssvfiscanf_r+0x1b4>
 800bb78:	220a      	movs	r2, #10
 800bb7a:	e7dd      	b.n	800bb38 <__ssvfiscanf_r+0x1d4>
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	9342      	str	r3, [sp, #264]	; 0x108
 800bb80:	2303      	movs	r3, #3
 800bb82:	e7de      	b.n	800bb42 <__ssvfiscanf_r+0x1de>
 800bb84:	2308      	movs	r3, #8
 800bb86:	9342      	str	r3, [sp, #264]	; 0x108
 800bb88:	2304      	movs	r3, #4
 800bb8a:	e7da      	b.n	800bb42 <__ssvfiscanf_r+0x1de>
 800bb8c:	4629      	mov	r1, r5
 800bb8e:	4640      	mov	r0, r8
 800bb90:	f000 f9d6 	bl	800bf40 <__sccl>
 800bb94:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bb96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb9a:	9341      	str	r3, [sp, #260]	; 0x104
 800bb9c:	4605      	mov	r5, r0
 800bb9e:	2301      	movs	r3, #1
 800bba0:	e7cf      	b.n	800bb42 <__ssvfiscanf_r+0x1de>
 800bba2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bba8:	9341      	str	r3, [sp, #260]	; 0x104
 800bbaa:	2300      	movs	r3, #0
 800bbac:	e7c9      	b.n	800bb42 <__ssvfiscanf_r+0x1de>
 800bbae:	2302      	movs	r3, #2
 800bbb0:	e7c7      	b.n	800bb42 <__ssvfiscanf_r+0x1de>
 800bbb2:	9841      	ldr	r0, [sp, #260]	; 0x104
 800bbb4:	06c3      	lsls	r3, r0, #27
 800bbb6:	f53f aeff 	bmi.w	800b9b8 <__ssvfiscanf_r+0x54>
 800bbba:	9b00      	ldr	r3, [sp, #0]
 800bbbc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bbbe:	1d19      	adds	r1, r3, #4
 800bbc0:	9100      	str	r1, [sp, #0]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	07c0      	lsls	r0, r0, #31
 800bbc6:	bf4c      	ite	mi
 800bbc8:	801a      	strhmi	r2, [r3, #0]
 800bbca:	601a      	strpl	r2, [r3, #0]
 800bbcc:	e6f4      	b.n	800b9b8 <__ssvfiscanf_r+0x54>
 800bbce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bbd0:	4621      	mov	r1, r4
 800bbd2:	4630      	mov	r0, r6
 800bbd4:	4798      	blx	r3
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	d0b7      	beq.n	800bb4a <__ssvfiscanf_r+0x1e6>
 800bbda:	e79d      	b.n	800bb18 <__ssvfiscanf_r+0x1b4>
 800bbdc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bbde:	3201      	adds	r2, #1
 800bbe0:	9245      	str	r2, [sp, #276]	; 0x114
 800bbe2:	6862      	ldr	r2, [r4, #4]
 800bbe4:	3a01      	subs	r2, #1
 800bbe6:	2a00      	cmp	r2, #0
 800bbe8:	6062      	str	r2, [r4, #4]
 800bbea:	dd02      	ble.n	800bbf2 <__ssvfiscanf_r+0x28e>
 800bbec:	3301      	adds	r3, #1
 800bbee:	6023      	str	r3, [r4, #0]
 800bbf0:	e7ae      	b.n	800bb50 <__ssvfiscanf_r+0x1ec>
 800bbf2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bbf4:	4621      	mov	r1, r4
 800bbf6:	4630      	mov	r0, r6
 800bbf8:	4798      	blx	r3
 800bbfa:	2800      	cmp	r0, #0
 800bbfc:	d0a8      	beq.n	800bb50 <__ssvfiscanf_r+0x1ec>
 800bbfe:	e78b      	b.n	800bb18 <__ssvfiscanf_r+0x1b4>
 800bc00:	2b04      	cmp	r3, #4
 800bc02:	dc06      	bgt.n	800bc12 <__ssvfiscanf_r+0x2ae>
 800bc04:	466b      	mov	r3, sp
 800bc06:	4622      	mov	r2, r4
 800bc08:	a941      	add	r1, sp, #260	; 0x104
 800bc0a:	4630      	mov	r0, r6
 800bc0c:	f000 f87a 	bl	800bd04 <_scanf_i>
 800bc10:	e7ac      	b.n	800bb6c <__ssvfiscanf_r+0x208>
 800bc12:	4b0f      	ldr	r3, [pc, #60]	; (800bc50 <__ssvfiscanf_r+0x2ec>)
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	f43f aecf 	beq.w	800b9b8 <__ssvfiscanf_r+0x54>
 800bc1a:	466b      	mov	r3, sp
 800bc1c:	4622      	mov	r2, r4
 800bc1e:	a941      	add	r1, sp, #260	; 0x104
 800bc20:	4630      	mov	r0, r6
 800bc22:	f7fc fbcd 	bl	80083c0 <_scanf_float>
 800bc26:	e7a1      	b.n	800bb6c <__ssvfiscanf_r+0x208>
 800bc28:	89a3      	ldrh	r3, [r4, #12]
 800bc2a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bc2e:	bf18      	it	ne
 800bc30:	f04f 30ff 	movne.w	r0, #4294967295
 800bc34:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800bc38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc3c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bc3e:	e7f9      	b.n	800bc34 <__ssvfiscanf_r+0x2d0>
 800bc40:	0800b8b1 	.word	0x0800b8b1
 800bc44:	0800b92b 	.word	0x0800b92b
 800bc48:	0800f5c1 	.word	0x0800f5c1
 800bc4c:	0800f93a 	.word	0x0800f93a
 800bc50:	080083c1 	.word	0x080083c1

0800bc54 <_scanf_chars>:
 800bc54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc58:	4615      	mov	r5, r2
 800bc5a:	688a      	ldr	r2, [r1, #8]
 800bc5c:	4680      	mov	r8, r0
 800bc5e:	460c      	mov	r4, r1
 800bc60:	b932      	cbnz	r2, 800bc70 <_scanf_chars+0x1c>
 800bc62:	698a      	ldr	r2, [r1, #24]
 800bc64:	2a00      	cmp	r2, #0
 800bc66:	bf0c      	ite	eq
 800bc68:	2201      	moveq	r2, #1
 800bc6a:	f04f 32ff 	movne.w	r2, #4294967295
 800bc6e:	608a      	str	r2, [r1, #8]
 800bc70:	6822      	ldr	r2, [r4, #0]
 800bc72:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800bd00 <_scanf_chars+0xac>
 800bc76:	06d1      	lsls	r1, r2, #27
 800bc78:	bf5f      	itttt	pl
 800bc7a:	681a      	ldrpl	r2, [r3, #0]
 800bc7c:	1d11      	addpl	r1, r2, #4
 800bc7e:	6019      	strpl	r1, [r3, #0]
 800bc80:	6816      	ldrpl	r6, [r2, #0]
 800bc82:	2700      	movs	r7, #0
 800bc84:	69a0      	ldr	r0, [r4, #24]
 800bc86:	b188      	cbz	r0, 800bcac <_scanf_chars+0x58>
 800bc88:	2801      	cmp	r0, #1
 800bc8a:	d107      	bne.n	800bc9c <_scanf_chars+0x48>
 800bc8c:	682b      	ldr	r3, [r5, #0]
 800bc8e:	781a      	ldrb	r2, [r3, #0]
 800bc90:	6963      	ldr	r3, [r4, #20]
 800bc92:	5c9b      	ldrb	r3, [r3, r2]
 800bc94:	b953      	cbnz	r3, 800bcac <_scanf_chars+0x58>
 800bc96:	bb27      	cbnz	r7, 800bce2 <_scanf_chars+0x8e>
 800bc98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc9c:	2802      	cmp	r0, #2
 800bc9e:	d120      	bne.n	800bce2 <_scanf_chars+0x8e>
 800bca0:	682b      	ldr	r3, [r5, #0]
 800bca2:	781b      	ldrb	r3, [r3, #0]
 800bca4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800bca8:	071b      	lsls	r3, r3, #28
 800bcaa:	d41a      	bmi.n	800bce2 <_scanf_chars+0x8e>
 800bcac:	6823      	ldr	r3, [r4, #0]
 800bcae:	06da      	lsls	r2, r3, #27
 800bcb0:	bf5e      	ittt	pl
 800bcb2:	682b      	ldrpl	r3, [r5, #0]
 800bcb4:	781b      	ldrbpl	r3, [r3, #0]
 800bcb6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800bcba:	682a      	ldr	r2, [r5, #0]
 800bcbc:	686b      	ldr	r3, [r5, #4]
 800bcbe:	3201      	adds	r2, #1
 800bcc0:	602a      	str	r2, [r5, #0]
 800bcc2:	68a2      	ldr	r2, [r4, #8]
 800bcc4:	3b01      	subs	r3, #1
 800bcc6:	3a01      	subs	r2, #1
 800bcc8:	606b      	str	r3, [r5, #4]
 800bcca:	3701      	adds	r7, #1
 800bccc:	60a2      	str	r2, [r4, #8]
 800bcce:	b142      	cbz	r2, 800bce2 <_scanf_chars+0x8e>
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	dcd7      	bgt.n	800bc84 <_scanf_chars+0x30>
 800bcd4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bcd8:	4629      	mov	r1, r5
 800bcda:	4640      	mov	r0, r8
 800bcdc:	4798      	blx	r3
 800bcde:	2800      	cmp	r0, #0
 800bce0:	d0d0      	beq.n	800bc84 <_scanf_chars+0x30>
 800bce2:	6823      	ldr	r3, [r4, #0]
 800bce4:	f013 0310 	ands.w	r3, r3, #16
 800bce8:	d105      	bne.n	800bcf6 <_scanf_chars+0xa2>
 800bcea:	68e2      	ldr	r2, [r4, #12]
 800bcec:	3201      	adds	r2, #1
 800bcee:	60e2      	str	r2, [r4, #12]
 800bcf0:	69a2      	ldr	r2, [r4, #24]
 800bcf2:	b102      	cbz	r2, 800bcf6 <_scanf_chars+0xa2>
 800bcf4:	7033      	strb	r3, [r6, #0]
 800bcf6:	6923      	ldr	r3, [r4, #16]
 800bcf8:	441f      	add	r7, r3
 800bcfa:	6127      	str	r7, [r4, #16]
 800bcfc:	2000      	movs	r0, #0
 800bcfe:	e7cb      	b.n	800bc98 <_scanf_chars+0x44>
 800bd00:	0800f5c1 	.word	0x0800f5c1

0800bd04 <_scanf_i>:
 800bd04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd08:	4698      	mov	r8, r3
 800bd0a:	4b74      	ldr	r3, [pc, #464]	; (800bedc <_scanf_i+0x1d8>)
 800bd0c:	460c      	mov	r4, r1
 800bd0e:	4682      	mov	sl, r0
 800bd10:	4616      	mov	r6, r2
 800bd12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bd16:	b087      	sub	sp, #28
 800bd18:	ab03      	add	r3, sp, #12
 800bd1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bd1e:	4b70      	ldr	r3, [pc, #448]	; (800bee0 <_scanf_i+0x1dc>)
 800bd20:	69a1      	ldr	r1, [r4, #24]
 800bd22:	4a70      	ldr	r2, [pc, #448]	; (800bee4 <_scanf_i+0x1e0>)
 800bd24:	2903      	cmp	r1, #3
 800bd26:	bf18      	it	ne
 800bd28:	461a      	movne	r2, r3
 800bd2a:	68a3      	ldr	r3, [r4, #8]
 800bd2c:	9201      	str	r2, [sp, #4]
 800bd2e:	1e5a      	subs	r2, r3, #1
 800bd30:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bd34:	bf88      	it	hi
 800bd36:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bd3a:	4627      	mov	r7, r4
 800bd3c:	bf82      	ittt	hi
 800bd3e:	eb03 0905 	addhi.w	r9, r3, r5
 800bd42:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bd46:	60a3      	strhi	r3, [r4, #8]
 800bd48:	f857 3b1c 	ldr.w	r3, [r7], #28
 800bd4c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800bd50:	bf98      	it	ls
 800bd52:	f04f 0900 	movls.w	r9, #0
 800bd56:	6023      	str	r3, [r4, #0]
 800bd58:	463d      	mov	r5, r7
 800bd5a:	f04f 0b00 	mov.w	fp, #0
 800bd5e:	6831      	ldr	r1, [r6, #0]
 800bd60:	ab03      	add	r3, sp, #12
 800bd62:	7809      	ldrb	r1, [r1, #0]
 800bd64:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800bd68:	2202      	movs	r2, #2
 800bd6a:	f7f4 fa41 	bl	80001f0 <memchr>
 800bd6e:	b328      	cbz	r0, 800bdbc <_scanf_i+0xb8>
 800bd70:	f1bb 0f01 	cmp.w	fp, #1
 800bd74:	d159      	bne.n	800be2a <_scanf_i+0x126>
 800bd76:	6862      	ldr	r2, [r4, #4]
 800bd78:	b92a      	cbnz	r2, 800bd86 <_scanf_i+0x82>
 800bd7a:	6822      	ldr	r2, [r4, #0]
 800bd7c:	2308      	movs	r3, #8
 800bd7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bd82:	6063      	str	r3, [r4, #4]
 800bd84:	6022      	str	r2, [r4, #0]
 800bd86:	6822      	ldr	r2, [r4, #0]
 800bd88:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800bd8c:	6022      	str	r2, [r4, #0]
 800bd8e:	68a2      	ldr	r2, [r4, #8]
 800bd90:	1e51      	subs	r1, r2, #1
 800bd92:	60a1      	str	r1, [r4, #8]
 800bd94:	b192      	cbz	r2, 800bdbc <_scanf_i+0xb8>
 800bd96:	6832      	ldr	r2, [r6, #0]
 800bd98:	1c51      	adds	r1, r2, #1
 800bd9a:	6031      	str	r1, [r6, #0]
 800bd9c:	7812      	ldrb	r2, [r2, #0]
 800bd9e:	f805 2b01 	strb.w	r2, [r5], #1
 800bda2:	6872      	ldr	r2, [r6, #4]
 800bda4:	3a01      	subs	r2, #1
 800bda6:	2a00      	cmp	r2, #0
 800bda8:	6072      	str	r2, [r6, #4]
 800bdaa:	dc07      	bgt.n	800bdbc <_scanf_i+0xb8>
 800bdac:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800bdb0:	4631      	mov	r1, r6
 800bdb2:	4650      	mov	r0, sl
 800bdb4:	4790      	blx	r2
 800bdb6:	2800      	cmp	r0, #0
 800bdb8:	f040 8085 	bne.w	800bec6 <_scanf_i+0x1c2>
 800bdbc:	f10b 0b01 	add.w	fp, fp, #1
 800bdc0:	f1bb 0f03 	cmp.w	fp, #3
 800bdc4:	d1cb      	bne.n	800bd5e <_scanf_i+0x5a>
 800bdc6:	6863      	ldr	r3, [r4, #4]
 800bdc8:	b90b      	cbnz	r3, 800bdce <_scanf_i+0xca>
 800bdca:	230a      	movs	r3, #10
 800bdcc:	6063      	str	r3, [r4, #4]
 800bdce:	6863      	ldr	r3, [r4, #4]
 800bdd0:	4945      	ldr	r1, [pc, #276]	; (800bee8 <_scanf_i+0x1e4>)
 800bdd2:	6960      	ldr	r0, [r4, #20]
 800bdd4:	1ac9      	subs	r1, r1, r3
 800bdd6:	f000 f8b3 	bl	800bf40 <__sccl>
 800bdda:	f04f 0b00 	mov.w	fp, #0
 800bdde:	68a3      	ldr	r3, [r4, #8]
 800bde0:	6822      	ldr	r2, [r4, #0]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d03d      	beq.n	800be62 <_scanf_i+0x15e>
 800bde6:	6831      	ldr	r1, [r6, #0]
 800bde8:	6960      	ldr	r0, [r4, #20]
 800bdea:	f891 c000 	ldrb.w	ip, [r1]
 800bdee:	f810 000c 	ldrb.w	r0, [r0, ip]
 800bdf2:	2800      	cmp	r0, #0
 800bdf4:	d035      	beq.n	800be62 <_scanf_i+0x15e>
 800bdf6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800bdfa:	d124      	bne.n	800be46 <_scanf_i+0x142>
 800bdfc:	0510      	lsls	r0, r2, #20
 800bdfe:	d522      	bpl.n	800be46 <_scanf_i+0x142>
 800be00:	f10b 0b01 	add.w	fp, fp, #1
 800be04:	f1b9 0f00 	cmp.w	r9, #0
 800be08:	d003      	beq.n	800be12 <_scanf_i+0x10e>
 800be0a:	3301      	adds	r3, #1
 800be0c:	f109 39ff 	add.w	r9, r9, #4294967295
 800be10:	60a3      	str	r3, [r4, #8]
 800be12:	6873      	ldr	r3, [r6, #4]
 800be14:	3b01      	subs	r3, #1
 800be16:	2b00      	cmp	r3, #0
 800be18:	6073      	str	r3, [r6, #4]
 800be1a:	dd1b      	ble.n	800be54 <_scanf_i+0x150>
 800be1c:	6833      	ldr	r3, [r6, #0]
 800be1e:	3301      	adds	r3, #1
 800be20:	6033      	str	r3, [r6, #0]
 800be22:	68a3      	ldr	r3, [r4, #8]
 800be24:	3b01      	subs	r3, #1
 800be26:	60a3      	str	r3, [r4, #8]
 800be28:	e7d9      	b.n	800bdde <_scanf_i+0xda>
 800be2a:	f1bb 0f02 	cmp.w	fp, #2
 800be2e:	d1ae      	bne.n	800bd8e <_scanf_i+0x8a>
 800be30:	6822      	ldr	r2, [r4, #0]
 800be32:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800be36:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800be3a:	d1bf      	bne.n	800bdbc <_scanf_i+0xb8>
 800be3c:	2310      	movs	r3, #16
 800be3e:	6063      	str	r3, [r4, #4]
 800be40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be44:	e7a2      	b.n	800bd8c <_scanf_i+0x88>
 800be46:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800be4a:	6022      	str	r2, [r4, #0]
 800be4c:	780b      	ldrb	r3, [r1, #0]
 800be4e:	f805 3b01 	strb.w	r3, [r5], #1
 800be52:	e7de      	b.n	800be12 <_scanf_i+0x10e>
 800be54:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800be58:	4631      	mov	r1, r6
 800be5a:	4650      	mov	r0, sl
 800be5c:	4798      	blx	r3
 800be5e:	2800      	cmp	r0, #0
 800be60:	d0df      	beq.n	800be22 <_scanf_i+0x11e>
 800be62:	6823      	ldr	r3, [r4, #0]
 800be64:	05d9      	lsls	r1, r3, #23
 800be66:	d50d      	bpl.n	800be84 <_scanf_i+0x180>
 800be68:	42bd      	cmp	r5, r7
 800be6a:	d909      	bls.n	800be80 <_scanf_i+0x17c>
 800be6c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800be70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800be74:	4632      	mov	r2, r6
 800be76:	4650      	mov	r0, sl
 800be78:	4798      	blx	r3
 800be7a:	f105 39ff 	add.w	r9, r5, #4294967295
 800be7e:	464d      	mov	r5, r9
 800be80:	42bd      	cmp	r5, r7
 800be82:	d028      	beq.n	800bed6 <_scanf_i+0x1d2>
 800be84:	6822      	ldr	r2, [r4, #0]
 800be86:	f012 0210 	ands.w	r2, r2, #16
 800be8a:	d113      	bne.n	800beb4 <_scanf_i+0x1b0>
 800be8c:	702a      	strb	r2, [r5, #0]
 800be8e:	6863      	ldr	r3, [r4, #4]
 800be90:	9e01      	ldr	r6, [sp, #4]
 800be92:	4639      	mov	r1, r7
 800be94:	4650      	mov	r0, sl
 800be96:	47b0      	blx	r6
 800be98:	f8d8 3000 	ldr.w	r3, [r8]
 800be9c:	6821      	ldr	r1, [r4, #0]
 800be9e:	1d1a      	adds	r2, r3, #4
 800bea0:	f8c8 2000 	str.w	r2, [r8]
 800bea4:	f011 0f20 	tst.w	r1, #32
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	d00f      	beq.n	800becc <_scanf_i+0x1c8>
 800beac:	6018      	str	r0, [r3, #0]
 800beae:	68e3      	ldr	r3, [r4, #12]
 800beb0:	3301      	adds	r3, #1
 800beb2:	60e3      	str	r3, [r4, #12]
 800beb4:	1bed      	subs	r5, r5, r7
 800beb6:	44ab      	add	fp, r5
 800beb8:	6925      	ldr	r5, [r4, #16]
 800beba:	445d      	add	r5, fp
 800bebc:	6125      	str	r5, [r4, #16]
 800bebe:	2000      	movs	r0, #0
 800bec0:	b007      	add	sp, #28
 800bec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bec6:	f04f 0b00 	mov.w	fp, #0
 800beca:	e7ca      	b.n	800be62 <_scanf_i+0x15e>
 800becc:	07ca      	lsls	r2, r1, #31
 800bece:	bf4c      	ite	mi
 800bed0:	8018      	strhmi	r0, [r3, #0]
 800bed2:	6018      	strpl	r0, [r3, #0]
 800bed4:	e7eb      	b.n	800beae <_scanf_i+0x1aa>
 800bed6:	2001      	movs	r0, #1
 800bed8:	e7f2      	b.n	800bec0 <_scanf_i+0x1bc>
 800beda:	bf00      	nop
 800bedc:	0800ccb0 	.word	0x0800ccb0
 800bee0:	0800c0ad 	.word	0x0800c0ad
 800bee4:	08009699 	.word	0x08009699
 800bee8:	0800f95e 	.word	0x0800f95e

0800beec <_read_r>:
 800beec:	b538      	push	{r3, r4, r5, lr}
 800beee:	4d07      	ldr	r5, [pc, #28]	; (800bf0c <_read_r+0x20>)
 800bef0:	4604      	mov	r4, r0
 800bef2:	4608      	mov	r0, r1
 800bef4:	4611      	mov	r1, r2
 800bef6:	2200      	movs	r2, #0
 800bef8:	602a      	str	r2, [r5, #0]
 800befa:	461a      	mov	r2, r3
 800befc:	f7f6 f8d8 	bl	80020b0 <_read>
 800bf00:	1c43      	adds	r3, r0, #1
 800bf02:	d102      	bne.n	800bf0a <_read_r+0x1e>
 800bf04:	682b      	ldr	r3, [r5, #0]
 800bf06:	b103      	cbz	r3, 800bf0a <_read_r+0x1e>
 800bf08:	6023      	str	r3, [r4, #0]
 800bf0a:	bd38      	pop	{r3, r4, r5, pc}
 800bf0c:	20005028 	.word	0x20005028

0800bf10 <nan>:
 800bf10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bf18 <nan+0x8>
 800bf14:	4770      	bx	lr
 800bf16:	bf00      	nop
 800bf18:	00000000 	.word	0x00000000
 800bf1c:	7ff80000 	.word	0x7ff80000

0800bf20 <_sbrk_r>:
 800bf20:	b538      	push	{r3, r4, r5, lr}
 800bf22:	4d06      	ldr	r5, [pc, #24]	; (800bf3c <_sbrk_r+0x1c>)
 800bf24:	2300      	movs	r3, #0
 800bf26:	4604      	mov	r4, r0
 800bf28:	4608      	mov	r0, r1
 800bf2a:	602b      	str	r3, [r5, #0]
 800bf2c:	f7f6 f92e 	bl	800218c <_sbrk>
 800bf30:	1c43      	adds	r3, r0, #1
 800bf32:	d102      	bne.n	800bf3a <_sbrk_r+0x1a>
 800bf34:	682b      	ldr	r3, [r5, #0]
 800bf36:	b103      	cbz	r3, 800bf3a <_sbrk_r+0x1a>
 800bf38:	6023      	str	r3, [r4, #0]
 800bf3a:	bd38      	pop	{r3, r4, r5, pc}
 800bf3c:	20005028 	.word	0x20005028

0800bf40 <__sccl>:
 800bf40:	b570      	push	{r4, r5, r6, lr}
 800bf42:	780b      	ldrb	r3, [r1, #0]
 800bf44:	4604      	mov	r4, r0
 800bf46:	2b5e      	cmp	r3, #94	; 0x5e
 800bf48:	bf0b      	itete	eq
 800bf4a:	784b      	ldrbeq	r3, [r1, #1]
 800bf4c:	1c48      	addne	r0, r1, #1
 800bf4e:	1c88      	addeq	r0, r1, #2
 800bf50:	2200      	movne	r2, #0
 800bf52:	bf08      	it	eq
 800bf54:	2201      	moveq	r2, #1
 800bf56:	1e61      	subs	r1, r4, #1
 800bf58:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800bf5c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800bf60:	42a9      	cmp	r1, r5
 800bf62:	d1fb      	bne.n	800bf5c <__sccl+0x1c>
 800bf64:	b90b      	cbnz	r3, 800bf6a <__sccl+0x2a>
 800bf66:	3801      	subs	r0, #1
 800bf68:	bd70      	pop	{r4, r5, r6, pc}
 800bf6a:	f082 0101 	eor.w	r1, r2, #1
 800bf6e:	54e1      	strb	r1, [r4, r3]
 800bf70:	1c42      	adds	r2, r0, #1
 800bf72:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800bf76:	2d2d      	cmp	r5, #45	; 0x2d
 800bf78:	f102 36ff 	add.w	r6, r2, #4294967295
 800bf7c:	4610      	mov	r0, r2
 800bf7e:	d006      	beq.n	800bf8e <__sccl+0x4e>
 800bf80:	2d5d      	cmp	r5, #93	; 0x5d
 800bf82:	d0f1      	beq.n	800bf68 <__sccl+0x28>
 800bf84:	b90d      	cbnz	r5, 800bf8a <__sccl+0x4a>
 800bf86:	4630      	mov	r0, r6
 800bf88:	e7ee      	b.n	800bf68 <__sccl+0x28>
 800bf8a:	462b      	mov	r3, r5
 800bf8c:	e7ef      	b.n	800bf6e <__sccl+0x2e>
 800bf8e:	7816      	ldrb	r6, [r2, #0]
 800bf90:	2e5d      	cmp	r6, #93	; 0x5d
 800bf92:	d0fa      	beq.n	800bf8a <__sccl+0x4a>
 800bf94:	42b3      	cmp	r3, r6
 800bf96:	dcf8      	bgt.n	800bf8a <__sccl+0x4a>
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3001      	adds	r0, #1
 800bf9c:	4286      	cmp	r6, r0
 800bf9e:	5421      	strb	r1, [r4, r0]
 800bfa0:	dcfb      	bgt.n	800bf9a <__sccl+0x5a>
 800bfa2:	43d8      	mvns	r0, r3
 800bfa4:	4430      	add	r0, r6
 800bfa6:	1c5d      	adds	r5, r3, #1
 800bfa8:	42b3      	cmp	r3, r6
 800bfaa:	bfa8      	it	ge
 800bfac:	2000      	movge	r0, #0
 800bfae:	182b      	adds	r3, r5, r0
 800bfb0:	3202      	adds	r2, #2
 800bfb2:	e7de      	b.n	800bf72 <__sccl+0x32>

0800bfb4 <_strtoul_l.isra.0>:
 800bfb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bfb8:	4e3b      	ldr	r6, [pc, #236]	; (800c0a8 <_strtoul_l.isra.0+0xf4>)
 800bfba:	4686      	mov	lr, r0
 800bfbc:	468c      	mov	ip, r1
 800bfbe:	4660      	mov	r0, ip
 800bfc0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800bfc4:	5da5      	ldrb	r5, [r4, r6]
 800bfc6:	f015 0508 	ands.w	r5, r5, #8
 800bfca:	d1f8      	bne.n	800bfbe <_strtoul_l.isra.0+0xa>
 800bfcc:	2c2d      	cmp	r4, #45	; 0x2d
 800bfce:	d134      	bne.n	800c03a <_strtoul_l.isra.0+0x86>
 800bfd0:	f89c 4000 	ldrb.w	r4, [ip]
 800bfd4:	f04f 0801 	mov.w	r8, #1
 800bfd8:	f100 0c02 	add.w	ip, r0, #2
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d05e      	beq.n	800c09e <_strtoul_l.isra.0+0xea>
 800bfe0:	2b10      	cmp	r3, #16
 800bfe2:	d10c      	bne.n	800bffe <_strtoul_l.isra.0+0x4a>
 800bfe4:	2c30      	cmp	r4, #48	; 0x30
 800bfe6:	d10a      	bne.n	800bffe <_strtoul_l.isra.0+0x4a>
 800bfe8:	f89c 0000 	ldrb.w	r0, [ip]
 800bfec:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800bff0:	2858      	cmp	r0, #88	; 0x58
 800bff2:	d14f      	bne.n	800c094 <_strtoul_l.isra.0+0xe0>
 800bff4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800bff8:	2310      	movs	r3, #16
 800bffa:	f10c 0c02 	add.w	ip, ip, #2
 800bffe:	f04f 37ff 	mov.w	r7, #4294967295
 800c002:	2500      	movs	r5, #0
 800c004:	fbb7 f7f3 	udiv	r7, r7, r3
 800c008:	fb03 f907 	mul.w	r9, r3, r7
 800c00c:	ea6f 0909 	mvn.w	r9, r9
 800c010:	4628      	mov	r0, r5
 800c012:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800c016:	2e09      	cmp	r6, #9
 800c018:	d818      	bhi.n	800c04c <_strtoul_l.isra.0+0x98>
 800c01a:	4634      	mov	r4, r6
 800c01c:	42a3      	cmp	r3, r4
 800c01e:	dd24      	ble.n	800c06a <_strtoul_l.isra.0+0xb6>
 800c020:	2d00      	cmp	r5, #0
 800c022:	db1f      	blt.n	800c064 <_strtoul_l.isra.0+0xb0>
 800c024:	4287      	cmp	r7, r0
 800c026:	d31d      	bcc.n	800c064 <_strtoul_l.isra.0+0xb0>
 800c028:	d101      	bne.n	800c02e <_strtoul_l.isra.0+0x7a>
 800c02a:	45a1      	cmp	r9, r4
 800c02c:	db1a      	blt.n	800c064 <_strtoul_l.isra.0+0xb0>
 800c02e:	fb00 4003 	mla	r0, r0, r3, r4
 800c032:	2501      	movs	r5, #1
 800c034:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c038:	e7eb      	b.n	800c012 <_strtoul_l.isra.0+0x5e>
 800c03a:	2c2b      	cmp	r4, #43	; 0x2b
 800c03c:	bf08      	it	eq
 800c03e:	f89c 4000 	ldrbeq.w	r4, [ip]
 800c042:	46a8      	mov	r8, r5
 800c044:	bf08      	it	eq
 800c046:	f100 0c02 	addeq.w	ip, r0, #2
 800c04a:	e7c7      	b.n	800bfdc <_strtoul_l.isra.0+0x28>
 800c04c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800c050:	2e19      	cmp	r6, #25
 800c052:	d801      	bhi.n	800c058 <_strtoul_l.isra.0+0xa4>
 800c054:	3c37      	subs	r4, #55	; 0x37
 800c056:	e7e1      	b.n	800c01c <_strtoul_l.isra.0+0x68>
 800c058:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800c05c:	2e19      	cmp	r6, #25
 800c05e:	d804      	bhi.n	800c06a <_strtoul_l.isra.0+0xb6>
 800c060:	3c57      	subs	r4, #87	; 0x57
 800c062:	e7db      	b.n	800c01c <_strtoul_l.isra.0+0x68>
 800c064:	f04f 35ff 	mov.w	r5, #4294967295
 800c068:	e7e4      	b.n	800c034 <_strtoul_l.isra.0+0x80>
 800c06a:	2d00      	cmp	r5, #0
 800c06c:	da07      	bge.n	800c07e <_strtoul_l.isra.0+0xca>
 800c06e:	2322      	movs	r3, #34	; 0x22
 800c070:	f8ce 3000 	str.w	r3, [lr]
 800c074:	f04f 30ff 	mov.w	r0, #4294967295
 800c078:	b942      	cbnz	r2, 800c08c <_strtoul_l.isra.0+0xd8>
 800c07a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c07e:	f1b8 0f00 	cmp.w	r8, #0
 800c082:	d000      	beq.n	800c086 <_strtoul_l.isra.0+0xd2>
 800c084:	4240      	negs	r0, r0
 800c086:	2a00      	cmp	r2, #0
 800c088:	d0f7      	beq.n	800c07a <_strtoul_l.isra.0+0xc6>
 800c08a:	b10d      	cbz	r5, 800c090 <_strtoul_l.isra.0+0xdc>
 800c08c:	f10c 31ff 	add.w	r1, ip, #4294967295
 800c090:	6011      	str	r1, [r2, #0]
 800c092:	e7f2      	b.n	800c07a <_strtoul_l.isra.0+0xc6>
 800c094:	2430      	movs	r4, #48	; 0x30
 800c096:	2b00      	cmp	r3, #0
 800c098:	d1b1      	bne.n	800bffe <_strtoul_l.isra.0+0x4a>
 800c09a:	2308      	movs	r3, #8
 800c09c:	e7af      	b.n	800bffe <_strtoul_l.isra.0+0x4a>
 800c09e:	2c30      	cmp	r4, #48	; 0x30
 800c0a0:	d0a2      	beq.n	800bfe8 <_strtoul_l.isra.0+0x34>
 800c0a2:	230a      	movs	r3, #10
 800c0a4:	e7ab      	b.n	800bffe <_strtoul_l.isra.0+0x4a>
 800c0a6:	bf00      	nop
 800c0a8:	0800f5c1 	.word	0x0800f5c1

0800c0ac <_strtoul_r>:
 800c0ac:	f7ff bf82 	b.w	800bfb4 <_strtoul_l.isra.0>

0800c0b0 <__submore>:
 800c0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0b4:	460c      	mov	r4, r1
 800c0b6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c0b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0bc:	4299      	cmp	r1, r3
 800c0be:	d11d      	bne.n	800c0fc <__submore+0x4c>
 800c0c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c0c4:	f7ff fa3e 	bl	800b544 <_malloc_r>
 800c0c8:	b918      	cbnz	r0, 800c0d2 <__submore+0x22>
 800c0ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0d6:	63a3      	str	r3, [r4, #56]	; 0x38
 800c0d8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c0dc:	6360      	str	r0, [r4, #52]	; 0x34
 800c0de:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c0e2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c0e6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c0ea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c0ee:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c0f2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c0f6:	6020      	str	r0, [r4, #0]
 800c0f8:	2000      	movs	r0, #0
 800c0fa:	e7e8      	b.n	800c0ce <__submore+0x1e>
 800c0fc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c0fe:	0077      	lsls	r7, r6, #1
 800c100:	463a      	mov	r2, r7
 800c102:	f000 fa2d 	bl	800c560 <_realloc_r>
 800c106:	4605      	mov	r5, r0
 800c108:	2800      	cmp	r0, #0
 800c10a:	d0de      	beq.n	800c0ca <__submore+0x1a>
 800c10c:	eb00 0806 	add.w	r8, r0, r6
 800c110:	4601      	mov	r1, r0
 800c112:	4632      	mov	r2, r6
 800c114:	4640      	mov	r0, r8
 800c116:	f7fb fcd3 	bl	8007ac0 <memcpy>
 800c11a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c11e:	f8c4 8000 	str.w	r8, [r4]
 800c122:	e7e9      	b.n	800c0f8 <__submore+0x48>

0800c124 <__ascii_wctomb>:
 800c124:	b149      	cbz	r1, 800c13a <__ascii_wctomb+0x16>
 800c126:	2aff      	cmp	r2, #255	; 0xff
 800c128:	bf85      	ittet	hi
 800c12a:	238a      	movhi	r3, #138	; 0x8a
 800c12c:	6003      	strhi	r3, [r0, #0]
 800c12e:	700a      	strbls	r2, [r1, #0]
 800c130:	f04f 30ff 	movhi.w	r0, #4294967295
 800c134:	bf98      	it	ls
 800c136:	2001      	movls	r0, #1
 800c138:	4770      	bx	lr
 800c13a:	4608      	mov	r0, r1
 800c13c:	4770      	bx	lr
	...

0800c140 <__assert_func>:
 800c140:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c142:	4614      	mov	r4, r2
 800c144:	461a      	mov	r2, r3
 800c146:	4b09      	ldr	r3, [pc, #36]	; (800c16c <__assert_func+0x2c>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4605      	mov	r5, r0
 800c14c:	68d8      	ldr	r0, [r3, #12]
 800c14e:	b14c      	cbz	r4, 800c164 <__assert_func+0x24>
 800c150:	4b07      	ldr	r3, [pc, #28]	; (800c170 <__assert_func+0x30>)
 800c152:	9100      	str	r1, [sp, #0]
 800c154:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c158:	4906      	ldr	r1, [pc, #24]	; (800c174 <__assert_func+0x34>)
 800c15a:	462b      	mov	r3, r5
 800c15c:	f000 f9a6 	bl	800c4ac <fiprintf>
 800c160:	f000 fc3e 	bl	800c9e0 <abort>
 800c164:	4b04      	ldr	r3, [pc, #16]	; (800c178 <__assert_func+0x38>)
 800c166:	461c      	mov	r4, r3
 800c168:	e7f3      	b.n	800c152 <__assert_func+0x12>
 800c16a:	bf00      	nop
 800c16c:	20000028 	.word	0x20000028
 800c170:	0800f960 	.word	0x0800f960
 800c174:	0800f96d 	.word	0x0800f96d
 800c178:	0800f99b 	.word	0x0800f99b

0800c17c <__sflush_r>:
 800c17c:	898a      	ldrh	r2, [r1, #12]
 800c17e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c182:	4605      	mov	r5, r0
 800c184:	0710      	lsls	r0, r2, #28
 800c186:	460c      	mov	r4, r1
 800c188:	d458      	bmi.n	800c23c <__sflush_r+0xc0>
 800c18a:	684b      	ldr	r3, [r1, #4]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	dc05      	bgt.n	800c19c <__sflush_r+0x20>
 800c190:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c192:	2b00      	cmp	r3, #0
 800c194:	dc02      	bgt.n	800c19c <__sflush_r+0x20>
 800c196:	2000      	movs	r0, #0
 800c198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c19c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c19e:	2e00      	cmp	r6, #0
 800c1a0:	d0f9      	beq.n	800c196 <__sflush_r+0x1a>
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c1a8:	682f      	ldr	r7, [r5, #0]
 800c1aa:	602b      	str	r3, [r5, #0]
 800c1ac:	d032      	beq.n	800c214 <__sflush_r+0x98>
 800c1ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c1b0:	89a3      	ldrh	r3, [r4, #12]
 800c1b2:	075a      	lsls	r2, r3, #29
 800c1b4:	d505      	bpl.n	800c1c2 <__sflush_r+0x46>
 800c1b6:	6863      	ldr	r3, [r4, #4]
 800c1b8:	1ac0      	subs	r0, r0, r3
 800c1ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1bc:	b10b      	cbz	r3, 800c1c2 <__sflush_r+0x46>
 800c1be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c1c0:	1ac0      	subs	r0, r0, r3
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	4602      	mov	r2, r0
 800c1c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1c8:	6a21      	ldr	r1, [r4, #32]
 800c1ca:	4628      	mov	r0, r5
 800c1cc:	47b0      	blx	r6
 800c1ce:	1c43      	adds	r3, r0, #1
 800c1d0:	89a3      	ldrh	r3, [r4, #12]
 800c1d2:	d106      	bne.n	800c1e2 <__sflush_r+0x66>
 800c1d4:	6829      	ldr	r1, [r5, #0]
 800c1d6:	291d      	cmp	r1, #29
 800c1d8:	d82c      	bhi.n	800c234 <__sflush_r+0xb8>
 800c1da:	4a2a      	ldr	r2, [pc, #168]	; (800c284 <__sflush_r+0x108>)
 800c1dc:	40ca      	lsrs	r2, r1
 800c1de:	07d6      	lsls	r6, r2, #31
 800c1e0:	d528      	bpl.n	800c234 <__sflush_r+0xb8>
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	6062      	str	r2, [r4, #4]
 800c1e6:	04d9      	lsls	r1, r3, #19
 800c1e8:	6922      	ldr	r2, [r4, #16]
 800c1ea:	6022      	str	r2, [r4, #0]
 800c1ec:	d504      	bpl.n	800c1f8 <__sflush_r+0x7c>
 800c1ee:	1c42      	adds	r2, r0, #1
 800c1f0:	d101      	bne.n	800c1f6 <__sflush_r+0x7a>
 800c1f2:	682b      	ldr	r3, [r5, #0]
 800c1f4:	b903      	cbnz	r3, 800c1f8 <__sflush_r+0x7c>
 800c1f6:	6560      	str	r0, [r4, #84]	; 0x54
 800c1f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c1fa:	602f      	str	r7, [r5, #0]
 800c1fc:	2900      	cmp	r1, #0
 800c1fe:	d0ca      	beq.n	800c196 <__sflush_r+0x1a>
 800c200:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c204:	4299      	cmp	r1, r3
 800c206:	d002      	beq.n	800c20e <__sflush_r+0x92>
 800c208:	4628      	mov	r0, r5
 800c20a:	f7ff f94b 	bl	800b4a4 <_free_r>
 800c20e:	2000      	movs	r0, #0
 800c210:	6360      	str	r0, [r4, #52]	; 0x34
 800c212:	e7c1      	b.n	800c198 <__sflush_r+0x1c>
 800c214:	6a21      	ldr	r1, [r4, #32]
 800c216:	2301      	movs	r3, #1
 800c218:	4628      	mov	r0, r5
 800c21a:	47b0      	blx	r6
 800c21c:	1c41      	adds	r1, r0, #1
 800c21e:	d1c7      	bne.n	800c1b0 <__sflush_r+0x34>
 800c220:	682b      	ldr	r3, [r5, #0]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d0c4      	beq.n	800c1b0 <__sflush_r+0x34>
 800c226:	2b1d      	cmp	r3, #29
 800c228:	d001      	beq.n	800c22e <__sflush_r+0xb2>
 800c22a:	2b16      	cmp	r3, #22
 800c22c:	d101      	bne.n	800c232 <__sflush_r+0xb6>
 800c22e:	602f      	str	r7, [r5, #0]
 800c230:	e7b1      	b.n	800c196 <__sflush_r+0x1a>
 800c232:	89a3      	ldrh	r3, [r4, #12]
 800c234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c238:	81a3      	strh	r3, [r4, #12]
 800c23a:	e7ad      	b.n	800c198 <__sflush_r+0x1c>
 800c23c:	690f      	ldr	r7, [r1, #16]
 800c23e:	2f00      	cmp	r7, #0
 800c240:	d0a9      	beq.n	800c196 <__sflush_r+0x1a>
 800c242:	0793      	lsls	r3, r2, #30
 800c244:	680e      	ldr	r6, [r1, #0]
 800c246:	bf08      	it	eq
 800c248:	694b      	ldreq	r3, [r1, #20]
 800c24a:	600f      	str	r7, [r1, #0]
 800c24c:	bf18      	it	ne
 800c24e:	2300      	movne	r3, #0
 800c250:	eba6 0807 	sub.w	r8, r6, r7
 800c254:	608b      	str	r3, [r1, #8]
 800c256:	f1b8 0f00 	cmp.w	r8, #0
 800c25a:	dd9c      	ble.n	800c196 <__sflush_r+0x1a>
 800c25c:	6a21      	ldr	r1, [r4, #32]
 800c25e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c260:	4643      	mov	r3, r8
 800c262:	463a      	mov	r2, r7
 800c264:	4628      	mov	r0, r5
 800c266:	47b0      	blx	r6
 800c268:	2800      	cmp	r0, #0
 800c26a:	dc06      	bgt.n	800c27a <__sflush_r+0xfe>
 800c26c:	89a3      	ldrh	r3, [r4, #12]
 800c26e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c272:	81a3      	strh	r3, [r4, #12]
 800c274:	f04f 30ff 	mov.w	r0, #4294967295
 800c278:	e78e      	b.n	800c198 <__sflush_r+0x1c>
 800c27a:	4407      	add	r7, r0
 800c27c:	eba8 0800 	sub.w	r8, r8, r0
 800c280:	e7e9      	b.n	800c256 <__sflush_r+0xda>
 800c282:	bf00      	nop
 800c284:	20400001 	.word	0x20400001

0800c288 <_fflush_r>:
 800c288:	b538      	push	{r3, r4, r5, lr}
 800c28a:	690b      	ldr	r3, [r1, #16]
 800c28c:	4605      	mov	r5, r0
 800c28e:	460c      	mov	r4, r1
 800c290:	b913      	cbnz	r3, 800c298 <_fflush_r+0x10>
 800c292:	2500      	movs	r5, #0
 800c294:	4628      	mov	r0, r5
 800c296:	bd38      	pop	{r3, r4, r5, pc}
 800c298:	b118      	cbz	r0, 800c2a2 <_fflush_r+0x1a>
 800c29a:	6983      	ldr	r3, [r0, #24]
 800c29c:	b90b      	cbnz	r3, 800c2a2 <_fflush_r+0x1a>
 800c29e:	f000 f887 	bl	800c3b0 <__sinit>
 800c2a2:	4b14      	ldr	r3, [pc, #80]	; (800c2f4 <_fflush_r+0x6c>)
 800c2a4:	429c      	cmp	r4, r3
 800c2a6:	d11b      	bne.n	800c2e0 <_fflush_r+0x58>
 800c2a8:	686c      	ldr	r4, [r5, #4]
 800c2aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d0ef      	beq.n	800c292 <_fflush_r+0xa>
 800c2b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c2b4:	07d0      	lsls	r0, r2, #31
 800c2b6:	d404      	bmi.n	800c2c2 <_fflush_r+0x3a>
 800c2b8:	0599      	lsls	r1, r3, #22
 800c2ba:	d402      	bmi.n	800c2c2 <_fflush_r+0x3a>
 800c2bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2be:	f000 f927 	bl	800c510 <__retarget_lock_acquire_recursive>
 800c2c2:	4628      	mov	r0, r5
 800c2c4:	4621      	mov	r1, r4
 800c2c6:	f7ff ff59 	bl	800c17c <__sflush_r>
 800c2ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2cc:	07da      	lsls	r2, r3, #31
 800c2ce:	4605      	mov	r5, r0
 800c2d0:	d4e0      	bmi.n	800c294 <_fflush_r+0xc>
 800c2d2:	89a3      	ldrh	r3, [r4, #12]
 800c2d4:	059b      	lsls	r3, r3, #22
 800c2d6:	d4dd      	bmi.n	800c294 <_fflush_r+0xc>
 800c2d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2da:	f000 f91a 	bl	800c512 <__retarget_lock_release_recursive>
 800c2de:	e7d9      	b.n	800c294 <_fflush_r+0xc>
 800c2e0:	4b05      	ldr	r3, [pc, #20]	; (800c2f8 <_fflush_r+0x70>)
 800c2e2:	429c      	cmp	r4, r3
 800c2e4:	d101      	bne.n	800c2ea <_fflush_r+0x62>
 800c2e6:	68ac      	ldr	r4, [r5, #8]
 800c2e8:	e7df      	b.n	800c2aa <_fflush_r+0x22>
 800c2ea:	4b04      	ldr	r3, [pc, #16]	; (800c2fc <_fflush_r+0x74>)
 800c2ec:	429c      	cmp	r4, r3
 800c2ee:	bf08      	it	eq
 800c2f0:	68ec      	ldreq	r4, [r5, #12]
 800c2f2:	e7da      	b.n	800c2aa <_fflush_r+0x22>
 800c2f4:	0800f9bc 	.word	0x0800f9bc
 800c2f8:	0800f9dc 	.word	0x0800f9dc
 800c2fc:	0800f99c 	.word	0x0800f99c

0800c300 <std>:
 800c300:	2300      	movs	r3, #0
 800c302:	b510      	push	{r4, lr}
 800c304:	4604      	mov	r4, r0
 800c306:	e9c0 3300 	strd	r3, r3, [r0]
 800c30a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c30e:	6083      	str	r3, [r0, #8]
 800c310:	8181      	strh	r1, [r0, #12]
 800c312:	6643      	str	r3, [r0, #100]	; 0x64
 800c314:	81c2      	strh	r2, [r0, #14]
 800c316:	6183      	str	r3, [r0, #24]
 800c318:	4619      	mov	r1, r3
 800c31a:	2208      	movs	r2, #8
 800c31c:	305c      	adds	r0, #92	; 0x5c
 800c31e:	f7fb fbdd 	bl	8007adc <memset>
 800c322:	4b05      	ldr	r3, [pc, #20]	; (800c338 <std+0x38>)
 800c324:	6263      	str	r3, [r4, #36]	; 0x24
 800c326:	4b05      	ldr	r3, [pc, #20]	; (800c33c <std+0x3c>)
 800c328:	62a3      	str	r3, [r4, #40]	; 0x28
 800c32a:	4b05      	ldr	r3, [pc, #20]	; (800c340 <std+0x40>)
 800c32c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c32e:	4b05      	ldr	r3, [pc, #20]	; (800c344 <std+0x44>)
 800c330:	6224      	str	r4, [r4, #32]
 800c332:	6323      	str	r3, [r4, #48]	; 0x30
 800c334:	bd10      	pop	{r4, pc}
 800c336:	bf00      	nop
 800c338:	08008885 	.word	0x08008885
 800c33c:	080088ab 	.word	0x080088ab
 800c340:	080088e3 	.word	0x080088e3
 800c344:	08008907 	.word	0x08008907

0800c348 <_cleanup_r>:
 800c348:	4901      	ldr	r1, [pc, #4]	; (800c350 <_cleanup_r+0x8>)
 800c34a:	f000 b8c1 	b.w	800c4d0 <_fwalk_reent>
 800c34e:	bf00      	nop
 800c350:	0800c289 	.word	0x0800c289

0800c354 <__sfmoreglue>:
 800c354:	b570      	push	{r4, r5, r6, lr}
 800c356:	1e4a      	subs	r2, r1, #1
 800c358:	2568      	movs	r5, #104	; 0x68
 800c35a:	4355      	muls	r5, r2
 800c35c:	460e      	mov	r6, r1
 800c35e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c362:	f7ff f8ef 	bl	800b544 <_malloc_r>
 800c366:	4604      	mov	r4, r0
 800c368:	b140      	cbz	r0, 800c37c <__sfmoreglue+0x28>
 800c36a:	2100      	movs	r1, #0
 800c36c:	e9c0 1600 	strd	r1, r6, [r0]
 800c370:	300c      	adds	r0, #12
 800c372:	60a0      	str	r0, [r4, #8]
 800c374:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c378:	f7fb fbb0 	bl	8007adc <memset>
 800c37c:	4620      	mov	r0, r4
 800c37e:	bd70      	pop	{r4, r5, r6, pc}

0800c380 <__sfp_lock_acquire>:
 800c380:	4801      	ldr	r0, [pc, #4]	; (800c388 <__sfp_lock_acquire+0x8>)
 800c382:	f000 b8c5 	b.w	800c510 <__retarget_lock_acquire_recursive>
 800c386:	bf00      	nop
 800c388:	20005034 	.word	0x20005034

0800c38c <__sfp_lock_release>:
 800c38c:	4801      	ldr	r0, [pc, #4]	; (800c394 <__sfp_lock_release+0x8>)
 800c38e:	f000 b8c0 	b.w	800c512 <__retarget_lock_release_recursive>
 800c392:	bf00      	nop
 800c394:	20005034 	.word	0x20005034

0800c398 <__sinit_lock_acquire>:
 800c398:	4801      	ldr	r0, [pc, #4]	; (800c3a0 <__sinit_lock_acquire+0x8>)
 800c39a:	f000 b8b9 	b.w	800c510 <__retarget_lock_acquire_recursive>
 800c39e:	bf00      	nop
 800c3a0:	2000502f 	.word	0x2000502f

0800c3a4 <__sinit_lock_release>:
 800c3a4:	4801      	ldr	r0, [pc, #4]	; (800c3ac <__sinit_lock_release+0x8>)
 800c3a6:	f000 b8b4 	b.w	800c512 <__retarget_lock_release_recursive>
 800c3aa:	bf00      	nop
 800c3ac:	2000502f 	.word	0x2000502f

0800c3b0 <__sinit>:
 800c3b0:	b510      	push	{r4, lr}
 800c3b2:	4604      	mov	r4, r0
 800c3b4:	f7ff fff0 	bl	800c398 <__sinit_lock_acquire>
 800c3b8:	69a3      	ldr	r3, [r4, #24]
 800c3ba:	b11b      	cbz	r3, 800c3c4 <__sinit+0x14>
 800c3bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3c0:	f7ff bff0 	b.w	800c3a4 <__sinit_lock_release>
 800c3c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c3c8:	6523      	str	r3, [r4, #80]	; 0x50
 800c3ca:	4b13      	ldr	r3, [pc, #76]	; (800c418 <__sinit+0x68>)
 800c3cc:	4a13      	ldr	r2, [pc, #76]	; (800c41c <__sinit+0x6c>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	62a2      	str	r2, [r4, #40]	; 0x28
 800c3d2:	42a3      	cmp	r3, r4
 800c3d4:	bf04      	itt	eq
 800c3d6:	2301      	moveq	r3, #1
 800c3d8:	61a3      	streq	r3, [r4, #24]
 800c3da:	4620      	mov	r0, r4
 800c3dc:	f000 f820 	bl	800c420 <__sfp>
 800c3e0:	6060      	str	r0, [r4, #4]
 800c3e2:	4620      	mov	r0, r4
 800c3e4:	f000 f81c 	bl	800c420 <__sfp>
 800c3e8:	60a0      	str	r0, [r4, #8]
 800c3ea:	4620      	mov	r0, r4
 800c3ec:	f000 f818 	bl	800c420 <__sfp>
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	60e0      	str	r0, [r4, #12]
 800c3f4:	2104      	movs	r1, #4
 800c3f6:	6860      	ldr	r0, [r4, #4]
 800c3f8:	f7ff ff82 	bl	800c300 <std>
 800c3fc:	68a0      	ldr	r0, [r4, #8]
 800c3fe:	2201      	movs	r2, #1
 800c400:	2109      	movs	r1, #9
 800c402:	f7ff ff7d 	bl	800c300 <std>
 800c406:	68e0      	ldr	r0, [r4, #12]
 800c408:	2202      	movs	r2, #2
 800c40a:	2112      	movs	r1, #18
 800c40c:	f7ff ff78 	bl	800c300 <std>
 800c410:	2301      	movs	r3, #1
 800c412:	61a3      	str	r3, [r4, #24]
 800c414:	e7d2      	b.n	800c3bc <__sinit+0xc>
 800c416:	bf00      	nop
 800c418:	0800f530 	.word	0x0800f530
 800c41c:	0800c349 	.word	0x0800c349

0800c420 <__sfp>:
 800c420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c422:	4607      	mov	r7, r0
 800c424:	f7ff ffac 	bl	800c380 <__sfp_lock_acquire>
 800c428:	4b1e      	ldr	r3, [pc, #120]	; (800c4a4 <__sfp+0x84>)
 800c42a:	681e      	ldr	r6, [r3, #0]
 800c42c:	69b3      	ldr	r3, [r6, #24]
 800c42e:	b913      	cbnz	r3, 800c436 <__sfp+0x16>
 800c430:	4630      	mov	r0, r6
 800c432:	f7ff ffbd 	bl	800c3b0 <__sinit>
 800c436:	3648      	adds	r6, #72	; 0x48
 800c438:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c43c:	3b01      	subs	r3, #1
 800c43e:	d503      	bpl.n	800c448 <__sfp+0x28>
 800c440:	6833      	ldr	r3, [r6, #0]
 800c442:	b30b      	cbz	r3, 800c488 <__sfp+0x68>
 800c444:	6836      	ldr	r6, [r6, #0]
 800c446:	e7f7      	b.n	800c438 <__sfp+0x18>
 800c448:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c44c:	b9d5      	cbnz	r5, 800c484 <__sfp+0x64>
 800c44e:	4b16      	ldr	r3, [pc, #88]	; (800c4a8 <__sfp+0x88>)
 800c450:	60e3      	str	r3, [r4, #12]
 800c452:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c456:	6665      	str	r5, [r4, #100]	; 0x64
 800c458:	f000 f859 	bl	800c50e <__retarget_lock_init_recursive>
 800c45c:	f7ff ff96 	bl	800c38c <__sfp_lock_release>
 800c460:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c464:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c468:	6025      	str	r5, [r4, #0]
 800c46a:	61a5      	str	r5, [r4, #24]
 800c46c:	2208      	movs	r2, #8
 800c46e:	4629      	mov	r1, r5
 800c470:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c474:	f7fb fb32 	bl	8007adc <memset>
 800c478:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c47c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c480:	4620      	mov	r0, r4
 800c482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c484:	3468      	adds	r4, #104	; 0x68
 800c486:	e7d9      	b.n	800c43c <__sfp+0x1c>
 800c488:	2104      	movs	r1, #4
 800c48a:	4638      	mov	r0, r7
 800c48c:	f7ff ff62 	bl	800c354 <__sfmoreglue>
 800c490:	4604      	mov	r4, r0
 800c492:	6030      	str	r0, [r6, #0]
 800c494:	2800      	cmp	r0, #0
 800c496:	d1d5      	bne.n	800c444 <__sfp+0x24>
 800c498:	f7ff ff78 	bl	800c38c <__sfp_lock_release>
 800c49c:	230c      	movs	r3, #12
 800c49e:	603b      	str	r3, [r7, #0]
 800c4a0:	e7ee      	b.n	800c480 <__sfp+0x60>
 800c4a2:	bf00      	nop
 800c4a4:	0800f530 	.word	0x0800f530
 800c4a8:	ffff0001 	.word	0xffff0001

0800c4ac <fiprintf>:
 800c4ac:	b40e      	push	{r1, r2, r3}
 800c4ae:	b503      	push	{r0, r1, lr}
 800c4b0:	4601      	mov	r1, r0
 800c4b2:	ab03      	add	r3, sp, #12
 800c4b4:	4805      	ldr	r0, [pc, #20]	; (800c4cc <fiprintf+0x20>)
 800c4b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4ba:	6800      	ldr	r0, [r0, #0]
 800c4bc:	9301      	str	r3, [sp, #4]
 800c4be:	f000 f89f 	bl	800c600 <_vfiprintf_r>
 800c4c2:	b002      	add	sp, #8
 800c4c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4c8:	b003      	add	sp, #12
 800c4ca:	4770      	bx	lr
 800c4cc:	20000028 	.word	0x20000028

0800c4d0 <_fwalk_reent>:
 800c4d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4d4:	4606      	mov	r6, r0
 800c4d6:	4688      	mov	r8, r1
 800c4d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c4dc:	2700      	movs	r7, #0
 800c4de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c4e2:	f1b9 0901 	subs.w	r9, r9, #1
 800c4e6:	d505      	bpl.n	800c4f4 <_fwalk_reent+0x24>
 800c4e8:	6824      	ldr	r4, [r4, #0]
 800c4ea:	2c00      	cmp	r4, #0
 800c4ec:	d1f7      	bne.n	800c4de <_fwalk_reent+0xe>
 800c4ee:	4638      	mov	r0, r7
 800c4f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4f4:	89ab      	ldrh	r3, [r5, #12]
 800c4f6:	2b01      	cmp	r3, #1
 800c4f8:	d907      	bls.n	800c50a <_fwalk_reent+0x3a>
 800c4fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c4fe:	3301      	adds	r3, #1
 800c500:	d003      	beq.n	800c50a <_fwalk_reent+0x3a>
 800c502:	4629      	mov	r1, r5
 800c504:	4630      	mov	r0, r6
 800c506:	47c0      	blx	r8
 800c508:	4307      	orrs	r7, r0
 800c50a:	3568      	adds	r5, #104	; 0x68
 800c50c:	e7e9      	b.n	800c4e2 <_fwalk_reent+0x12>

0800c50e <__retarget_lock_init_recursive>:
 800c50e:	4770      	bx	lr

0800c510 <__retarget_lock_acquire_recursive>:
 800c510:	4770      	bx	lr

0800c512 <__retarget_lock_release_recursive>:
 800c512:	4770      	bx	lr

0800c514 <memmove>:
 800c514:	4288      	cmp	r0, r1
 800c516:	b510      	push	{r4, lr}
 800c518:	eb01 0402 	add.w	r4, r1, r2
 800c51c:	d902      	bls.n	800c524 <memmove+0x10>
 800c51e:	4284      	cmp	r4, r0
 800c520:	4623      	mov	r3, r4
 800c522:	d807      	bhi.n	800c534 <memmove+0x20>
 800c524:	1e43      	subs	r3, r0, #1
 800c526:	42a1      	cmp	r1, r4
 800c528:	d008      	beq.n	800c53c <memmove+0x28>
 800c52a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c52e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c532:	e7f8      	b.n	800c526 <memmove+0x12>
 800c534:	4402      	add	r2, r0
 800c536:	4601      	mov	r1, r0
 800c538:	428a      	cmp	r2, r1
 800c53a:	d100      	bne.n	800c53e <memmove+0x2a>
 800c53c:	bd10      	pop	{r4, pc}
 800c53e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c542:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c546:	e7f7      	b.n	800c538 <memmove+0x24>

0800c548 <__malloc_lock>:
 800c548:	4801      	ldr	r0, [pc, #4]	; (800c550 <__malloc_lock+0x8>)
 800c54a:	f7ff bfe1 	b.w	800c510 <__retarget_lock_acquire_recursive>
 800c54e:	bf00      	nop
 800c550:	20005030 	.word	0x20005030

0800c554 <__malloc_unlock>:
 800c554:	4801      	ldr	r0, [pc, #4]	; (800c55c <__malloc_unlock+0x8>)
 800c556:	f7ff bfdc 	b.w	800c512 <__retarget_lock_release_recursive>
 800c55a:	bf00      	nop
 800c55c:	20005030 	.word	0x20005030

0800c560 <_realloc_r>:
 800c560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c562:	4607      	mov	r7, r0
 800c564:	4614      	mov	r4, r2
 800c566:	460e      	mov	r6, r1
 800c568:	b921      	cbnz	r1, 800c574 <_realloc_r+0x14>
 800c56a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c56e:	4611      	mov	r1, r2
 800c570:	f7fe bfe8 	b.w	800b544 <_malloc_r>
 800c574:	b922      	cbnz	r2, 800c580 <_realloc_r+0x20>
 800c576:	f7fe ff95 	bl	800b4a4 <_free_r>
 800c57a:	4625      	mov	r5, r4
 800c57c:	4628      	mov	r0, r5
 800c57e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c580:	f000 fa9a 	bl	800cab8 <_malloc_usable_size_r>
 800c584:	42a0      	cmp	r0, r4
 800c586:	d20f      	bcs.n	800c5a8 <_realloc_r+0x48>
 800c588:	4621      	mov	r1, r4
 800c58a:	4638      	mov	r0, r7
 800c58c:	f7fe ffda 	bl	800b544 <_malloc_r>
 800c590:	4605      	mov	r5, r0
 800c592:	2800      	cmp	r0, #0
 800c594:	d0f2      	beq.n	800c57c <_realloc_r+0x1c>
 800c596:	4631      	mov	r1, r6
 800c598:	4622      	mov	r2, r4
 800c59a:	f7fb fa91 	bl	8007ac0 <memcpy>
 800c59e:	4631      	mov	r1, r6
 800c5a0:	4638      	mov	r0, r7
 800c5a2:	f7fe ff7f 	bl	800b4a4 <_free_r>
 800c5a6:	e7e9      	b.n	800c57c <_realloc_r+0x1c>
 800c5a8:	4635      	mov	r5, r6
 800c5aa:	e7e7      	b.n	800c57c <_realloc_r+0x1c>

0800c5ac <__sfputc_r>:
 800c5ac:	6893      	ldr	r3, [r2, #8]
 800c5ae:	3b01      	subs	r3, #1
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	b410      	push	{r4}
 800c5b4:	6093      	str	r3, [r2, #8]
 800c5b6:	da08      	bge.n	800c5ca <__sfputc_r+0x1e>
 800c5b8:	6994      	ldr	r4, [r2, #24]
 800c5ba:	42a3      	cmp	r3, r4
 800c5bc:	db01      	blt.n	800c5c2 <__sfputc_r+0x16>
 800c5be:	290a      	cmp	r1, #10
 800c5c0:	d103      	bne.n	800c5ca <__sfputc_r+0x1e>
 800c5c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5c6:	f000 b94b 	b.w	800c860 <__swbuf_r>
 800c5ca:	6813      	ldr	r3, [r2, #0]
 800c5cc:	1c58      	adds	r0, r3, #1
 800c5ce:	6010      	str	r0, [r2, #0]
 800c5d0:	7019      	strb	r1, [r3, #0]
 800c5d2:	4608      	mov	r0, r1
 800c5d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5d8:	4770      	bx	lr

0800c5da <__sfputs_r>:
 800c5da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5dc:	4606      	mov	r6, r0
 800c5de:	460f      	mov	r7, r1
 800c5e0:	4614      	mov	r4, r2
 800c5e2:	18d5      	adds	r5, r2, r3
 800c5e4:	42ac      	cmp	r4, r5
 800c5e6:	d101      	bne.n	800c5ec <__sfputs_r+0x12>
 800c5e8:	2000      	movs	r0, #0
 800c5ea:	e007      	b.n	800c5fc <__sfputs_r+0x22>
 800c5ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5f0:	463a      	mov	r2, r7
 800c5f2:	4630      	mov	r0, r6
 800c5f4:	f7ff ffda 	bl	800c5ac <__sfputc_r>
 800c5f8:	1c43      	adds	r3, r0, #1
 800c5fa:	d1f3      	bne.n	800c5e4 <__sfputs_r+0xa>
 800c5fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c600 <_vfiprintf_r>:
 800c600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c604:	460d      	mov	r5, r1
 800c606:	b09d      	sub	sp, #116	; 0x74
 800c608:	4614      	mov	r4, r2
 800c60a:	4698      	mov	r8, r3
 800c60c:	4606      	mov	r6, r0
 800c60e:	b118      	cbz	r0, 800c618 <_vfiprintf_r+0x18>
 800c610:	6983      	ldr	r3, [r0, #24]
 800c612:	b90b      	cbnz	r3, 800c618 <_vfiprintf_r+0x18>
 800c614:	f7ff fecc 	bl	800c3b0 <__sinit>
 800c618:	4b89      	ldr	r3, [pc, #548]	; (800c840 <_vfiprintf_r+0x240>)
 800c61a:	429d      	cmp	r5, r3
 800c61c:	d11b      	bne.n	800c656 <_vfiprintf_r+0x56>
 800c61e:	6875      	ldr	r5, [r6, #4]
 800c620:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c622:	07d9      	lsls	r1, r3, #31
 800c624:	d405      	bmi.n	800c632 <_vfiprintf_r+0x32>
 800c626:	89ab      	ldrh	r3, [r5, #12]
 800c628:	059a      	lsls	r2, r3, #22
 800c62a:	d402      	bmi.n	800c632 <_vfiprintf_r+0x32>
 800c62c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c62e:	f7ff ff6f 	bl	800c510 <__retarget_lock_acquire_recursive>
 800c632:	89ab      	ldrh	r3, [r5, #12]
 800c634:	071b      	lsls	r3, r3, #28
 800c636:	d501      	bpl.n	800c63c <_vfiprintf_r+0x3c>
 800c638:	692b      	ldr	r3, [r5, #16]
 800c63a:	b9eb      	cbnz	r3, 800c678 <_vfiprintf_r+0x78>
 800c63c:	4629      	mov	r1, r5
 800c63e:	4630      	mov	r0, r6
 800c640:	f000 f960 	bl	800c904 <__swsetup_r>
 800c644:	b1c0      	cbz	r0, 800c678 <_vfiprintf_r+0x78>
 800c646:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c648:	07dc      	lsls	r4, r3, #31
 800c64a:	d50e      	bpl.n	800c66a <_vfiprintf_r+0x6a>
 800c64c:	f04f 30ff 	mov.w	r0, #4294967295
 800c650:	b01d      	add	sp, #116	; 0x74
 800c652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c656:	4b7b      	ldr	r3, [pc, #492]	; (800c844 <_vfiprintf_r+0x244>)
 800c658:	429d      	cmp	r5, r3
 800c65a:	d101      	bne.n	800c660 <_vfiprintf_r+0x60>
 800c65c:	68b5      	ldr	r5, [r6, #8]
 800c65e:	e7df      	b.n	800c620 <_vfiprintf_r+0x20>
 800c660:	4b79      	ldr	r3, [pc, #484]	; (800c848 <_vfiprintf_r+0x248>)
 800c662:	429d      	cmp	r5, r3
 800c664:	bf08      	it	eq
 800c666:	68f5      	ldreq	r5, [r6, #12]
 800c668:	e7da      	b.n	800c620 <_vfiprintf_r+0x20>
 800c66a:	89ab      	ldrh	r3, [r5, #12]
 800c66c:	0598      	lsls	r0, r3, #22
 800c66e:	d4ed      	bmi.n	800c64c <_vfiprintf_r+0x4c>
 800c670:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c672:	f7ff ff4e 	bl	800c512 <__retarget_lock_release_recursive>
 800c676:	e7e9      	b.n	800c64c <_vfiprintf_r+0x4c>
 800c678:	2300      	movs	r3, #0
 800c67a:	9309      	str	r3, [sp, #36]	; 0x24
 800c67c:	2320      	movs	r3, #32
 800c67e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c682:	f8cd 800c 	str.w	r8, [sp, #12]
 800c686:	2330      	movs	r3, #48	; 0x30
 800c688:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c84c <_vfiprintf_r+0x24c>
 800c68c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c690:	f04f 0901 	mov.w	r9, #1
 800c694:	4623      	mov	r3, r4
 800c696:	469a      	mov	sl, r3
 800c698:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c69c:	b10a      	cbz	r2, 800c6a2 <_vfiprintf_r+0xa2>
 800c69e:	2a25      	cmp	r2, #37	; 0x25
 800c6a0:	d1f9      	bne.n	800c696 <_vfiprintf_r+0x96>
 800c6a2:	ebba 0b04 	subs.w	fp, sl, r4
 800c6a6:	d00b      	beq.n	800c6c0 <_vfiprintf_r+0xc0>
 800c6a8:	465b      	mov	r3, fp
 800c6aa:	4622      	mov	r2, r4
 800c6ac:	4629      	mov	r1, r5
 800c6ae:	4630      	mov	r0, r6
 800c6b0:	f7ff ff93 	bl	800c5da <__sfputs_r>
 800c6b4:	3001      	adds	r0, #1
 800c6b6:	f000 80aa 	beq.w	800c80e <_vfiprintf_r+0x20e>
 800c6ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6bc:	445a      	add	r2, fp
 800c6be:	9209      	str	r2, [sp, #36]	; 0x24
 800c6c0:	f89a 3000 	ldrb.w	r3, [sl]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	f000 80a2 	beq.w	800c80e <_vfiprintf_r+0x20e>
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	f04f 32ff 	mov.w	r2, #4294967295
 800c6d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6d4:	f10a 0a01 	add.w	sl, sl, #1
 800c6d8:	9304      	str	r3, [sp, #16]
 800c6da:	9307      	str	r3, [sp, #28]
 800c6dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6e0:	931a      	str	r3, [sp, #104]	; 0x68
 800c6e2:	4654      	mov	r4, sl
 800c6e4:	2205      	movs	r2, #5
 800c6e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6ea:	4858      	ldr	r0, [pc, #352]	; (800c84c <_vfiprintf_r+0x24c>)
 800c6ec:	f7f3 fd80 	bl	80001f0 <memchr>
 800c6f0:	9a04      	ldr	r2, [sp, #16]
 800c6f2:	b9d8      	cbnz	r0, 800c72c <_vfiprintf_r+0x12c>
 800c6f4:	06d1      	lsls	r1, r2, #27
 800c6f6:	bf44      	itt	mi
 800c6f8:	2320      	movmi	r3, #32
 800c6fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6fe:	0713      	lsls	r3, r2, #28
 800c700:	bf44      	itt	mi
 800c702:	232b      	movmi	r3, #43	; 0x2b
 800c704:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c708:	f89a 3000 	ldrb.w	r3, [sl]
 800c70c:	2b2a      	cmp	r3, #42	; 0x2a
 800c70e:	d015      	beq.n	800c73c <_vfiprintf_r+0x13c>
 800c710:	9a07      	ldr	r2, [sp, #28]
 800c712:	4654      	mov	r4, sl
 800c714:	2000      	movs	r0, #0
 800c716:	f04f 0c0a 	mov.w	ip, #10
 800c71a:	4621      	mov	r1, r4
 800c71c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c720:	3b30      	subs	r3, #48	; 0x30
 800c722:	2b09      	cmp	r3, #9
 800c724:	d94e      	bls.n	800c7c4 <_vfiprintf_r+0x1c4>
 800c726:	b1b0      	cbz	r0, 800c756 <_vfiprintf_r+0x156>
 800c728:	9207      	str	r2, [sp, #28]
 800c72a:	e014      	b.n	800c756 <_vfiprintf_r+0x156>
 800c72c:	eba0 0308 	sub.w	r3, r0, r8
 800c730:	fa09 f303 	lsl.w	r3, r9, r3
 800c734:	4313      	orrs	r3, r2
 800c736:	9304      	str	r3, [sp, #16]
 800c738:	46a2      	mov	sl, r4
 800c73a:	e7d2      	b.n	800c6e2 <_vfiprintf_r+0xe2>
 800c73c:	9b03      	ldr	r3, [sp, #12]
 800c73e:	1d19      	adds	r1, r3, #4
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	9103      	str	r1, [sp, #12]
 800c744:	2b00      	cmp	r3, #0
 800c746:	bfbb      	ittet	lt
 800c748:	425b      	neglt	r3, r3
 800c74a:	f042 0202 	orrlt.w	r2, r2, #2
 800c74e:	9307      	strge	r3, [sp, #28]
 800c750:	9307      	strlt	r3, [sp, #28]
 800c752:	bfb8      	it	lt
 800c754:	9204      	strlt	r2, [sp, #16]
 800c756:	7823      	ldrb	r3, [r4, #0]
 800c758:	2b2e      	cmp	r3, #46	; 0x2e
 800c75a:	d10c      	bne.n	800c776 <_vfiprintf_r+0x176>
 800c75c:	7863      	ldrb	r3, [r4, #1]
 800c75e:	2b2a      	cmp	r3, #42	; 0x2a
 800c760:	d135      	bne.n	800c7ce <_vfiprintf_r+0x1ce>
 800c762:	9b03      	ldr	r3, [sp, #12]
 800c764:	1d1a      	adds	r2, r3, #4
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	9203      	str	r2, [sp, #12]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	bfb8      	it	lt
 800c76e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c772:	3402      	adds	r4, #2
 800c774:	9305      	str	r3, [sp, #20]
 800c776:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c85c <_vfiprintf_r+0x25c>
 800c77a:	7821      	ldrb	r1, [r4, #0]
 800c77c:	2203      	movs	r2, #3
 800c77e:	4650      	mov	r0, sl
 800c780:	f7f3 fd36 	bl	80001f0 <memchr>
 800c784:	b140      	cbz	r0, 800c798 <_vfiprintf_r+0x198>
 800c786:	2340      	movs	r3, #64	; 0x40
 800c788:	eba0 000a 	sub.w	r0, r0, sl
 800c78c:	fa03 f000 	lsl.w	r0, r3, r0
 800c790:	9b04      	ldr	r3, [sp, #16]
 800c792:	4303      	orrs	r3, r0
 800c794:	3401      	adds	r4, #1
 800c796:	9304      	str	r3, [sp, #16]
 800c798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c79c:	482c      	ldr	r0, [pc, #176]	; (800c850 <_vfiprintf_r+0x250>)
 800c79e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7a2:	2206      	movs	r2, #6
 800c7a4:	f7f3 fd24 	bl	80001f0 <memchr>
 800c7a8:	2800      	cmp	r0, #0
 800c7aa:	d03f      	beq.n	800c82c <_vfiprintf_r+0x22c>
 800c7ac:	4b29      	ldr	r3, [pc, #164]	; (800c854 <_vfiprintf_r+0x254>)
 800c7ae:	bb1b      	cbnz	r3, 800c7f8 <_vfiprintf_r+0x1f8>
 800c7b0:	9b03      	ldr	r3, [sp, #12]
 800c7b2:	3307      	adds	r3, #7
 800c7b4:	f023 0307 	bic.w	r3, r3, #7
 800c7b8:	3308      	adds	r3, #8
 800c7ba:	9303      	str	r3, [sp, #12]
 800c7bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7be:	443b      	add	r3, r7
 800c7c0:	9309      	str	r3, [sp, #36]	; 0x24
 800c7c2:	e767      	b.n	800c694 <_vfiprintf_r+0x94>
 800c7c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7c8:	460c      	mov	r4, r1
 800c7ca:	2001      	movs	r0, #1
 800c7cc:	e7a5      	b.n	800c71a <_vfiprintf_r+0x11a>
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	3401      	adds	r4, #1
 800c7d2:	9305      	str	r3, [sp, #20]
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	f04f 0c0a 	mov.w	ip, #10
 800c7da:	4620      	mov	r0, r4
 800c7dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7e0:	3a30      	subs	r2, #48	; 0x30
 800c7e2:	2a09      	cmp	r2, #9
 800c7e4:	d903      	bls.n	800c7ee <_vfiprintf_r+0x1ee>
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d0c5      	beq.n	800c776 <_vfiprintf_r+0x176>
 800c7ea:	9105      	str	r1, [sp, #20]
 800c7ec:	e7c3      	b.n	800c776 <_vfiprintf_r+0x176>
 800c7ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7f2:	4604      	mov	r4, r0
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	e7f0      	b.n	800c7da <_vfiprintf_r+0x1da>
 800c7f8:	ab03      	add	r3, sp, #12
 800c7fa:	9300      	str	r3, [sp, #0]
 800c7fc:	462a      	mov	r2, r5
 800c7fe:	4b16      	ldr	r3, [pc, #88]	; (800c858 <_vfiprintf_r+0x258>)
 800c800:	a904      	add	r1, sp, #16
 800c802:	4630      	mov	r0, r6
 800c804:	f7fb fa12 	bl	8007c2c <_printf_float>
 800c808:	4607      	mov	r7, r0
 800c80a:	1c78      	adds	r0, r7, #1
 800c80c:	d1d6      	bne.n	800c7bc <_vfiprintf_r+0x1bc>
 800c80e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c810:	07d9      	lsls	r1, r3, #31
 800c812:	d405      	bmi.n	800c820 <_vfiprintf_r+0x220>
 800c814:	89ab      	ldrh	r3, [r5, #12]
 800c816:	059a      	lsls	r2, r3, #22
 800c818:	d402      	bmi.n	800c820 <_vfiprintf_r+0x220>
 800c81a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c81c:	f7ff fe79 	bl	800c512 <__retarget_lock_release_recursive>
 800c820:	89ab      	ldrh	r3, [r5, #12]
 800c822:	065b      	lsls	r3, r3, #25
 800c824:	f53f af12 	bmi.w	800c64c <_vfiprintf_r+0x4c>
 800c828:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c82a:	e711      	b.n	800c650 <_vfiprintf_r+0x50>
 800c82c:	ab03      	add	r3, sp, #12
 800c82e:	9300      	str	r3, [sp, #0]
 800c830:	462a      	mov	r2, r5
 800c832:	4b09      	ldr	r3, [pc, #36]	; (800c858 <_vfiprintf_r+0x258>)
 800c834:	a904      	add	r1, sp, #16
 800c836:	4630      	mov	r0, r6
 800c838:	f7fb fc9c 	bl	8008174 <_printf_i>
 800c83c:	e7e4      	b.n	800c808 <_vfiprintf_r+0x208>
 800c83e:	bf00      	nop
 800c840:	0800f9bc 	.word	0x0800f9bc
 800c844:	0800f9dc 	.word	0x0800f9dc
 800c848:	0800f99c 	.word	0x0800f99c
 800c84c:	0800f934 	.word	0x0800f934
 800c850:	0800f93e 	.word	0x0800f93e
 800c854:	08007c2d 	.word	0x08007c2d
 800c858:	0800c5db 	.word	0x0800c5db
 800c85c:	0800f93a 	.word	0x0800f93a

0800c860 <__swbuf_r>:
 800c860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c862:	460e      	mov	r6, r1
 800c864:	4614      	mov	r4, r2
 800c866:	4605      	mov	r5, r0
 800c868:	b118      	cbz	r0, 800c872 <__swbuf_r+0x12>
 800c86a:	6983      	ldr	r3, [r0, #24]
 800c86c:	b90b      	cbnz	r3, 800c872 <__swbuf_r+0x12>
 800c86e:	f7ff fd9f 	bl	800c3b0 <__sinit>
 800c872:	4b21      	ldr	r3, [pc, #132]	; (800c8f8 <__swbuf_r+0x98>)
 800c874:	429c      	cmp	r4, r3
 800c876:	d12b      	bne.n	800c8d0 <__swbuf_r+0x70>
 800c878:	686c      	ldr	r4, [r5, #4]
 800c87a:	69a3      	ldr	r3, [r4, #24]
 800c87c:	60a3      	str	r3, [r4, #8]
 800c87e:	89a3      	ldrh	r3, [r4, #12]
 800c880:	071a      	lsls	r2, r3, #28
 800c882:	d52f      	bpl.n	800c8e4 <__swbuf_r+0x84>
 800c884:	6923      	ldr	r3, [r4, #16]
 800c886:	b36b      	cbz	r3, 800c8e4 <__swbuf_r+0x84>
 800c888:	6923      	ldr	r3, [r4, #16]
 800c88a:	6820      	ldr	r0, [r4, #0]
 800c88c:	1ac0      	subs	r0, r0, r3
 800c88e:	6963      	ldr	r3, [r4, #20]
 800c890:	b2f6      	uxtb	r6, r6
 800c892:	4283      	cmp	r3, r0
 800c894:	4637      	mov	r7, r6
 800c896:	dc04      	bgt.n	800c8a2 <__swbuf_r+0x42>
 800c898:	4621      	mov	r1, r4
 800c89a:	4628      	mov	r0, r5
 800c89c:	f7ff fcf4 	bl	800c288 <_fflush_r>
 800c8a0:	bb30      	cbnz	r0, 800c8f0 <__swbuf_r+0x90>
 800c8a2:	68a3      	ldr	r3, [r4, #8]
 800c8a4:	3b01      	subs	r3, #1
 800c8a6:	60a3      	str	r3, [r4, #8]
 800c8a8:	6823      	ldr	r3, [r4, #0]
 800c8aa:	1c5a      	adds	r2, r3, #1
 800c8ac:	6022      	str	r2, [r4, #0]
 800c8ae:	701e      	strb	r6, [r3, #0]
 800c8b0:	6963      	ldr	r3, [r4, #20]
 800c8b2:	3001      	adds	r0, #1
 800c8b4:	4283      	cmp	r3, r0
 800c8b6:	d004      	beq.n	800c8c2 <__swbuf_r+0x62>
 800c8b8:	89a3      	ldrh	r3, [r4, #12]
 800c8ba:	07db      	lsls	r3, r3, #31
 800c8bc:	d506      	bpl.n	800c8cc <__swbuf_r+0x6c>
 800c8be:	2e0a      	cmp	r6, #10
 800c8c0:	d104      	bne.n	800c8cc <__swbuf_r+0x6c>
 800c8c2:	4621      	mov	r1, r4
 800c8c4:	4628      	mov	r0, r5
 800c8c6:	f7ff fcdf 	bl	800c288 <_fflush_r>
 800c8ca:	b988      	cbnz	r0, 800c8f0 <__swbuf_r+0x90>
 800c8cc:	4638      	mov	r0, r7
 800c8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8d0:	4b0a      	ldr	r3, [pc, #40]	; (800c8fc <__swbuf_r+0x9c>)
 800c8d2:	429c      	cmp	r4, r3
 800c8d4:	d101      	bne.n	800c8da <__swbuf_r+0x7a>
 800c8d6:	68ac      	ldr	r4, [r5, #8]
 800c8d8:	e7cf      	b.n	800c87a <__swbuf_r+0x1a>
 800c8da:	4b09      	ldr	r3, [pc, #36]	; (800c900 <__swbuf_r+0xa0>)
 800c8dc:	429c      	cmp	r4, r3
 800c8de:	bf08      	it	eq
 800c8e0:	68ec      	ldreq	r4, [r5, #12]
 800c8e2:	e7ca      	b.n	800c87a <__swbuf_r+0x1a>
 800c8e4:	4621      	mov	r1, r4
 800c8e6:	4628      	mov	r0, r5
 800c8e8:	f000 f80c 	bl	800c904 <__swsetup_r>
 800c8ec:	2800      	cmp	r0, #0
 800c8ee:	d0cb      	beq.n	800c888 <__swbuf_r+0x28>
 800c8f0:	f04f 37ff 	mov.w	r7, #4294967295
 800c8f4:	e7ea      	b.n	800c8cc <__swbuf_r+0x6c>
 800c8f6:	bf00      	nop
 800c8f8:	0800f9bc 	.word	0x0800f9bc
 800c8fc:	0800f9dc 	.word	0x0800f9dc
 800c900:	0800f99c 	.word	0x0800f99c

0800c904 <__swsetup_r>:
 800c904:	4b32      	ldr	r3, [pc, #200]	; (800c9d0 <__swsetup_r+0xcc>)
 800c906:	b570      	push	{r4, r5, r6, lr}
 800c908:	681d      	ldr	r5, [r3, #0]
 800c90a:	4606      	mov	r6, r0
 800c90c:	460c      	mov	r4, r1
 800c90e:	b125      	cbz	r5, 800c91a <__swsetup_r+0x16>
 800c910:	69ab      	ldr	r3, [r5, #24]
 800c912:	b913      	cbnz	r3, 800c91a <__swsetup_r+0x16>
 800c914:	4628      	mov	r0, r5
 800c916:	f7ff fd4b 	bl	800c3b0 <__sinit>
 800c91a:	4b2e      	ldr	r3, [pc, #184]	; (800c9d4 <__swsetup_r+0xd0>)
 800c91c:	429c      	cmp	r4, r3
 800c91e:	d10f      	bne.n	800c940 <__swsetup_r+0x3c>
 800c920:	686c      	ldr	r4, [r5, #4]
 800c922:	89a3      	ldrh	r3, [r4, #12]
 800c924:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c928:	0719      	lsls	r1, r3, #28
 800c92a:	d42c      	bmi.n	800c986 <__swsetup_r+0x82>
 800c92c:	06dd      	lsls	r5, r3, #27
 800c92e:	d411      	bmi.n	800c954 <__swsetup_r+0x50>
 800c930:	2309      	movs	r3, #9
 800c932:	6033      	str	r3, [r6, #0]
 800c934:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c938:	81a3      	strh	r3, [r4, #12]
 800c93a:	f04f 30ff 	mov.w	r0, #4294967295
 800c93e:	e03e      	b.n	800c9be <__swsetup_r+0xba>
 800c940:	4b25      	ldr	r3, [pc, #148]	; (800c9d8 <__swsetup_r+0xd4>)
 800c942:	429c      	cmp	r4, r3
 800c944:	d101      	bne.n	800c94a <__swsetup_r+0x46>
 800c946:	68ac      	ldr	r4, [r5, #8]
 800c948:	e7eb      	b.n	800c922 <__swsetup_r+0x1e>
 800c94a:	4b24      	ldr	r3, [pc, #144]	; (800c9dc <__swsetup_r+0xd8>)
 800c94c:	429c      	cmp	r4, r3
 800c94e:	bf08      	it	eq
 800c950:	68ec      	ldreq	r4, [r5, #12]
 800c952:	e7e6      	b.n	800c922 <__swsetup_r+0x1e>
 800c954:	0758      	lsls	r0, r3, #29
 800c956:	d512      	bpl.n	800c97e <__swsetup_r+0x7a>
 800c958:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c95a:	b141      	cbz	r1, 800c96e <__swsetup_r+0x6a>
 800c95c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c960:	4299      	cmp	r1, r3
 800c962:	d002      	beq.n	800c96a <__swsetup_r+0x66>
 800c964:	4630      	mov	r0, r6
 800c966:	f7fe fd9d 	bl	800b4a4 <_free_r>
 800c96a:	2300      	movs	r3, #0
 800c96c:	6363      	str	r3, [r4, #52]	; 0x34
 800c96e:	89a3      	ldrh	r3, [r4, #12]
 800c970:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c974:	81a3      	strh	r3, [r4, #12]
 800c976:	2300      	movs	r3, #0
 800c978:	6063      	str	r3, [r4, #4]
 800c97a:	6923      	ldr	r3, [r4, #16]
 800c97c:	6023      	str	r3, [r4, #0]
 800c97e:	89a3      	ldrh	r3, [r4, #12]
 800c980:	f043 0308 	orr.w	r3, r3, #8
 800c984:	81a3      	strh	r3, [r4, #12]
 800c986:	6923      	ldr	r3, [r4, #16]
 800c988:	b94b      	cbnz	r3, 800c99e <__swsetup_r+0x9a>
 800c98a:	89a3      	ldrh	r3, [r4, #12]
 800c98c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c994:	d003      	beq.n	800c99e <__swsetup_r+0x9a>
 800c996:	4621      	mov	r1, r4
 800c998:	4630      	mov	r0, r6
 800c99a:	f000 f84d 	bl	800ca38 <__smakebuf_r>
 800c99e:	89a0      	ldrh	r0, [r4, #12]
 800c9a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c9a4:	f010 0301 	ands.w	r3, r0, #1
 800c9a8:	d00a      	beq.n	800c9c0 <__swsetup_r+0xbc>
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	60a3      	str	r3, [r4, #8]
 800c9ae:	6963      	ldr	r3, [r4, #20]
 800c9b0:	425b      	negs	r3, r3
 800c9b2:	61a3      	str	r3, [r4, #24]
 800c9b4:	6923      	ldr	r3, [r4, #16]
 800c9b6:	b943      	cbnz	r3, 800c9ca <__swsetup_r+0xc6>
 800c9b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c9bc:	d1ba      	bne.n	800c934 <__swsetup_r+0x30>
 800c9be:	bd70      	pop	{r4, r5, r6, pc}
 800c9c0:	0781      	lsls	r1, r0, #30
 800c9c2:	bf58      	it	pl
 800c9c4:	6963      	ldrpl	r3, [r4, #20]
 800c9c6:	60a3      	str	r3, [r4, #8]
 800c9c8:	e7f4      	b.n	800c9b4 <__swsetup_r+0xb0>
 800c9ca:	2000      	movs	r0, #0
 800c9cc:	e7f7      	b.n	800c9be <__swsetup_r+0xba>
 800c9ce:	bf00      	nop
 800c9d0:	20000028 	.word	0x20000028
 800c9d4:	0800f9bc 	.word	0x0800f9bc
 800c9d8:	0800f9dc 	.word	0x0800f9dc
 800c9dc:	0800f99c 	.word	0x0800f99c

0800c9e0 <abort>:
 800c9e0:	b508      	push	{r3, lr}
 800c9e2:	2006      	movs	r0, #6
 800c9e4:	f000 f898 	bl	800cb18 <raise>
 800c9e8:	2001      	movs	r0, #1
 800c9ea:	f7f5 fb57 	bl	800209c <_exit>

0800c9ee <__swhatbuf_r>:
 800c9ee:	b570      	push	{r4, r5, r6, lr}
 800c9f0:	460e      	mov	r6, r1
 800c9f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9f6:	2900      	cmp	r1, #0
 800c9f8:	b096      	sub	sp, #88	; 0x58
 800c9fa:	4614      	mov	r4, r2
 800c9fc:	461d      	mov	r5, r3
 800c9fe:	da07      	bge.n	800ca10 <__swhatbuf_r+0x22>
 800ca00:	2300      	movs	r3, #0
 800ca02:	602b      	str	r3, [r5, #0]
 800ca04:	89b3      	ldrh	r3, [r6, #12]
 800ca06:	061a      	lsls	r2, r3, #24
 800ca08:	d410      	bmi.n	800ca2c <__swhatbuf_r+0x3e>
 800ca0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca0e:	e00e      	b.n	800ca2e <__swhatbuf_r+0x40>
 800ca10:	466a      	mov	r2, sp
 800ca12:	f000 f89d 	bl	800cb50 <_fstat_r>
 800ca16:	2800      	cmp	r0, #0
 800ca18:	dbf2      	blt.n	800ca00 <__swhatbuf_r+0x12>
 800ca1a:	9a01      	ldr	r2, [sp, #4]
 800ca1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ca20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ca24:	425a      	negs	r2, r3
 800ca26:	415a      	adcs	r2, r3
 800ca28:	602a      	str	r2, [r5, #0]
 800ca2a:	e7ee      	b.n	800ca0a <__swhatbuf_r+0x1c>
 800ca2c:	2340      	movs	r3, #64	; 0x40
 800ca2e:	2000      	movs	r0, #0
 800ca30:	6023      	str	r3, [r4, #0]
 800ca32:	b016      	add	sp, #88	; 0x58
 800ca34:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ca38 <__smakebuf_r>:
 800ca38:	898b      	ldrh	r3, [r1, #12]
 800ca3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca3c:	079d      	lsls	r5, r3, #30
 800ca3e:	4606      	mov	r6, r0
 800ca40:	460c      	mov	r4, r1
 800ca42:	d507      	bpl.n	800ca54 <__smakebuf_r+0x1c>
 800ca44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ca48:	6023      	str	r3, [r4, #0]
 800ca4a:	6123      	str	r3, [r4, #16]
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	6163      	str	r3, [r4, #20]
 800ca50:	b002      	add	sp, #8
 800ca52:	bd70      	pop	{r4, r5, r6, pc}
 800ca54:	ab01      	add	r3, sp, #4
 800ca56:	466a      	mov	r2, sp
 800ca58:	f7ff ffc9 	bl	800c9ee <__swhatbuf_r>
 800ca5c:	9900      	ldr	r1, [sp, #0]
 800ca5e:	4605      	mov	r5, r0
 800ca60:	4630      	mov	r0, r6
 800ca62:	f7fe fd6f 	bl	800b544 <_malloc_r>
 800ca66:	b948      	cbnz	r0, 800ca7c <__smakebuf_r+0x44>
 800ca68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca6c:	059a      	lsls	r2, r3, #22
 800ca6e:	d4ef      	bmi.n	800ca50 <__smakebuf_r+0x18>
 800ca70:	f023 0303 	bic.w	r3, r3, #3
 800ca74:	f043 0302 	orr.w	r3, r3, #2
 800ca78:	81a3      	strh	r3, [r4, #12]
 800ca7a:	e7e3      	b.n	800ca44 <__smakebuf_r+0xc>
 800ca7c:	4b0d      	ldr	r3, [pc, #52]	; (800cab4 <__smakebuf_r+0x7c>)
 800ca7e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ca80:	89a3      	ldrh	r3, [r4, #12]
 800ca82:	6020      	str	r0, [r4, #0]
 800ca84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca88:	81a3      	strh	r3, [r4, #12]
 800ca8a:	9b00      	ldr	r3, [sp, #0]
 800ca8c:	6163      	str	r3, [r4, #20]
 800ca8e:	9b01      	ldr	r3, [sp, #4]
 800ca90:	6120      	str	r0, [r4, #16]
 800ca92:	b15b      	cbz	r3, 800caac <__smakebuf_r+0x74>
 800ca94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca98:	4630      	mov	r0, r6
 800ca9a:	f000 f86b 	bl	800cb74 <_isatty_r>
 800ca9e:	b128      	cbz	r0, 800caac <__smakebuf_r+0x74>
 800caa0:	89a3      	ldrh	r3, [r4, #12]
 800caa2:	f023 0303 	bic.w	r3, r3, #3
 800caa6:	f043 0301 	orr.w	r3, r3, #1
 800caaa:	81a3      	strh	r3, [r4, #12]
 800caac:	89a0      	ldrh	r0, [r4, #12]
 800caae:	4305      	orrs	r5, r0
 800cab0:	81a5      	strh	r5, [r4, #12]
 800cab2:	e7cd      	b.n	800ca50 <__smakebuf_r+0x18>
 800cab4:	0800c349 	.word	0x0800c349

0800cab8 <_malloc_usable_size_r>:
 800cab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cabc:	1f18      	subs	r0, r3, #4
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	bfbc      	itt	lt
 800cac2:	580b      	ldrlt	r3, [r1, r0]
 800cac4:	18c0      	addlt	r0, r0, r3
 800cac6:	4770      	bx	lr

0800cac8 <_raise_r>:
 800cac8:	291f      	cmp	r1, #31
 800caca:	b538      	push	{r3, r4, r5, lr}
 800cacc:	4604      	mov	r4, r0
 800cace:	460d      	mov	r5, r1
 800cad0:	d904      	bls.n	800cadc <_raise_r+0x14>
 800cad2:	2316      	movs	r3, #22
 800cad4:	6003      	str	r3, [r0, #0]
 800cad6:	f04f 30ff 	mov.w	r0, #4294967295
 800cada:	bd38      	pop	{r3, r4, r5, pc}
 800cadc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cade:	b112      	cbz	r2, 800cae6 <_raise_r+0x1e>
 800cae0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cae4:	b94b      	cbnz	r3, 800cafa <_raise_r+0x32>
 800cae6:	4620      	mov	r0, r4
 800cae8:	f000 f830 	bl	800cb4c <_getpid_r>
 800caec:	462a      	mov	r2, r5
 800caee:	4601      	mov	r1, r0
 800caf0:	4620      	mov	r0, r4
 800caf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800caf6:	f000 b817 	b.w	800cb28 <_kill_r>
 800cafa:	2b01      	cmp	r3, #1
 800cafc:	d00a      	beq.n	800cb14 <_raise_r+0x4c>
 800cafe:	1c59      	adds	r1, r3, #1
 800cb00:	d103      	bne.n	800cb0a <_raise_r+0x42>
 800cb02:	2316      	movs	r3, #22
 800cb04:	6003      	str	r3, [r0, #0]
 800cb06:	2001      	movs	r0, #1
 800cb08:	e7e7      	b.n	800cada <_raise_r+0x12>
 800cb0a:	2400      	movs	r4, #0
 800cb0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cb10:	4628      	mov	r0, r5
 800cb12:	4798      	blx	r3
 800cb14:	2000      	movs	r0, #0
 800cb16:	e7e0      	b.n	800cada <_raise_r+0x12>

0800cb18 <raise>:
 800cb18:	4b02      	ldr	r3, [pc, #8]	; (800cb24 <raise+0xc>)
 800cb1a:	4601      	mov	r1, r0
 800cb1c:	6818      	ldr	r0, [r3, #0]
 800cb1e:	f7ff bfd3 	b.w	800cac8 <_raise_r>
 800cb22:	bf00      	nop
 800cb24:	20000028 	.word	0x20000028

0800cb28 <_kill_r>:
 800cb28:	b538      	push	{r3, r4, r5, lr}
 800cb2a:	4d07      	ldr	r5, [pc, #28]	; (800cb48 <_kill_r+0x20>)
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	4604      	mov	r4, r0
 800cb30:	4608      	mov	r0, r1
 800cb32:	4611      	mov	r1, r2
 800cb34:	602b      	str	r3, [r5, #0]
 800cb36:	f7f5 faa1 	bl	800207c <_kill>
 800cb3a:	1c43      	adds	r3, r0, #1
 800cb3c:	d102      	bne.n	800cb44 <_kill_r+0x1c>
 800cb3e:	682b      	ldr	r3, [r5, #0]
 800cb40:	b103      	cbz	r3, 800cb44 <_kill_r+0x1c>
 800cb42:	6023      	str	r3, [r4, #0]
 800cb44:	bd38      	pop	{r3, r4, r5, pc}
 800cb46:	bf00      	nop
 800cb48:	20005028 	.word	0x20005028

0800cb4c <_getpid_r>:
 800cb4c:	f7f5 ba8e 	b.w	800206c <_getpid>

0800cb50 <_fstat_r>:
 800cb50:	b538      	push	{r3, r4, r5, lr}
 800cb52:	4d07      	ldr	r5, [pc, #28]	; (800cb70 <_fstat_r+0x20>)
 800cb54:	2300      	movs	r3, #0
 800cb56:	4604      	mov	r4, r0
 800cb58:	4608      	mov	r0, r1
 800cb5a:	4611      	mov	r1, r2
 800cb5c:	602b      	str	r3, [r5, #0]
 800cb5e:	f7f5 faec 	bl	800213a <_fstat>
 800cb62:	1c43      	adds	r3, r0, #1
 800cb64:	d102      	bne.n	800cb6c <_fstat_r+0x1c>
 800cb66:	682b      	ldr	r3, [r5, #0]
 800cb68:	b103      	cbz	r3, 800cb6c <_fstat_r+0x1c>
 800cb6a:	6023      	str	r3, [r4, #0]
 800cb6c:	bd38      	pop	{r3, r4, r5, pc}
 800cb6e:	bf00      	nop
 800cb70:	20005028 	.word	0x20005028

0800cb74 <_isatty_r>:
 800cb74:	b538      	push	{r3, r4, r5, lr}
 800cb76:	4d06      	ldr	r5, [pc, #24]	; (800cb90 <_isatty_r+0x1c>)
 800cb78:	2300      	movs	r3, #0
 800cb7a:	4604      	mov	r4, r0
 800cb7c:	4608      	mov	r0, r1
 800cb7e:	602b      	str	r3, [r5, #0]
 800cb80:	f7f5 faeb 	bl	800215a <_isatty>
 800cb84:	1c43      	adds	r3, r0, #1
 800cb86:	d102      	bne.n	800cb8e <_isatty_r+0x1a>
 800cb88:	682b      	ldr	r3, [r5, #0]
 800cb8a:	b103      	cbz	r3, 800cb8e <_isatty_r+0x1a>
 800cb8c:	6023      	str	r3, [r4, #0]
 800cb8e:	bd38      	pop	{r3, r4, r5, pc}
 800cb90:	20005028 	.word	0x20005028

0800cb94 <_init>:
 800cb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb96:	bf00      	nop
 800cb98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb9a:	bc08      	pop	{r3}
 800cb9c:	469e      	mov	lr, r3
 800cb9e:	4770      	bx	lr

0800cba0 <_fini>:
 800cba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cba2:	bf00      	nop
 800cba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cba6:	bc08      	pop	{r3}
 800cba8:	469e      	mov	lr, r3
 800cbaa:	4770      	bx	lr
