
STCubeGenerated.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001193c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e3c  08011ae0  08011ae0  00021ae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801291c  0801291c  000302bc  2**0
                  CONTENTS
  4 .ARM          00000008  0801291c  0801291c  0002291c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012924  08012924  000302bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012924  08012924  00022924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012928  08012928  00022928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002bc  20000000  0801292c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005aa8  200002bc  08012be8  000302bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005d64  08012be8  00035d64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032e7e  00000000  00000000  000302ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006848  00000000  00000000  0006316a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022a0  00000000  00000000  000699b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002040  00000000  00000000  0006bc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ee04  00000000  00000000  0006dc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a64f  00000000  00000000  0008ca9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a18a9  00000000  00000000  000b70eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00158994  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a868  00000000  00000000  001589e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002bc 	.word	0x200002bc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011ac4 	.word	0x08011ac4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c0 	.word	0x200002c0
 80001dc:	08011ac4 	.word	0x08011ac4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001000:	4a08      	ldr	r2, [pc, #32]	; (8001024 <MX_FREERTOS_Init+0x28>)
 8001002:	2100      	movs	r1, #0
 8001004:	4808      	ldr	r0, [pc, #32]	; (8001028 <MX_FREERTOS_Init+0x2c>)
 8001006:	f008 fb4b 	bl	80096a0 <osThreadNew>
 800100a:	4603      	mov	r3, r0
 800100c:	4a07      	ldr	r2, [pc, #28]	; (800102c <MX_FREERTOS_Init+0x30>)
 800100e:	6013      	str	r3, [r2, #0]

  /* creation of Gps */
  GpsHandle = osThreadNew(GpsTask, NULL, &Gps_attributes);
 8001010:	4a07      	ldr	r2, [pc, #28]	; (8001030 <MX_FREERTOS_Init+0x34>)
 8001012:	2100      	movs	r1, #0
 8001014:	4807      	ldr	r0, [pc, #28]	; (8001034 <MX_FREERTOS_Init+0x38>)
 8001016:	f008 fb43 	bl	80096a0 <osThreadNew>
 800101a:	4603      	mov	r3, r0
 800101c:	4a06      	ldr	r2, [pc, #24]	; (8001038 <MX_FREERTOS_Init+0x3c>)
 800101e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	080123f0 	.word	0x080123f0
 8001028:	0800103d 	.word	0x0800103d
 800102c:	20005220 	.word	0x20005220
 8001030:	08012414 	.word	0x08012414
 8001034:	08001051 	.word	0x08001051
 8001038:	20005224 	.word	0x20005224

0800103c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001044:	f00b f832 	bl	800c0ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001048:	2001      	movs	r0, #1
 800104a:	f008 fbbb 	bl	80097c4 <osDelay>
 800104e:	e7fb      	b.n	8001048 <StartDefaultTask+0xc>

08001050 <GpsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GpsTask */
void GpsTask(void *argument)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  for(;;)
  {

	  	char numbers[5];

	  	SSD1306_GotoXY (0,0);
 8001058:	2100      	movs	r1, #0
 800105a:	2000      	movs	r0, #0
 800105c:	f000 fd94 	bl	8001b88 <SSD1306_GotoXY>
	  	SSD1306_Puts ("LAT:", &Font_7x10, 1);
 8001060:	2201      	movs	r2, #1
 8001062:	4921      	ldr	r1, [pc, #132]	; (80010e8 <GpsTask+0x98>)
 8001064:	4821      	ldr	r0, [pc, #132]	; (80010ec <GpsTask+0x9c>)
 8001066:	f000 fe25 	bl	8001cb4 <SSD1306_Puts>

	  	SSD1306_GotoXY (40, 0);
 800106a:	2100      	movs	r1, #0
 800106c:	2028      	movs	r0, #40	; 0x28
 800106e:	f000 fd8b 	bl	8001b88 <SSD1306_GotoXY>
	  	sprintf(numbers, "%f", GPS.dec_latitude);
 8001072:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <GpsTask+0xa0>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fa6e 	bl	8000558 <__aeabi_f2d>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	f107 0008 	add.w	r0, r7, #8
 8001084:	491b      	ldr	r1, [pc, #108]	; (80010f4 <GpsTask+0xa4>)
 8001086:	f00c fb4b 	bl	800d720 <siprintf>
	  	SSD1306_Puts(numbers, &Font_7x10, 1);
 800108a:	f107 0308 	add.w	r3, r7, #8
 800108e:	2201      	movs	r2, #1
 8001090:	4915      	ldr	r1, [pc, #84]	; (80010e8 <GpsTask+0x98>)
 8001092:	4618      	mov	r0, r3
 8001094:	f000 fe0e 	bl	8001cb4 <SSD1306_Puts>

	  	SSD1306_GotoXY (0,32);
 8001098:	2120      	movs	r1, #32
 800109a:	2000      	movs	r0, #0
 800109c:	f000 fd74 	bl	8001b88 <SSD1306_GotoXY>
	  	SSD1306_Puts ("LONG:", &Font_7x10, 1);
 80010a0:	2201      	movs	r2, #1
 80010a2:	4911      	ldr	r1, [pc, #68]	; (80010e8 <GpsTask+0x98>)
 80010a4:	4814      	ldr	r0, [pc, #80]	; (80010f8 <GpsTask+0xa8>)
 80010a6:	f000 fe05 	bl	8001cb4 <SSD1306_Puts>

	  	SSD1306_GotoXY (40, 32);
 80010aa:	2120      	movs	r1, #32
 80010ac:	2028      	movs	r0, #40	; 0x28
 80010ae:	f000 fd6b 	bl	8001b88 <SSD1306_GotoXY>
	  	sprintf(numbers, "%f", GPS.dec_longitude);
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <GpsTask+0xa0>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fa4e 	bl	8000558 <__aeabi_f2d>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	f107 0008 	add.w	r0, r7, #8
 80010c4:	490b      	ldr	r1, [pc, #44]	; (80010f4 <GpsTask+0xa4>)
 80010c6:	f00c fb2b 	bl	800d720 <siprintf>
		SSD1306_Puts(numbers, &Font_7x10, 1);
 80010ca:	f107 0308 	add.w	r3, r7, #8
 80010ce:	2201      	movs	r2, #1
 80010d0:	4905      	ldr	r1, [pc, #20]	; (80010e8 <GpsTask+0x98>)
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 fdee 	bl	8001cb4 <SSD1306_Puts>

	  	SSD1306_UpdateScreen();
 80010d8:	f000 fcb0 	bl	8001a3c <SSD1306_UpdateScreen>


	  	osDelay(500);
 80010dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010e0:	f008 fb70 	bl	80097c4 <osDelay>
  {
 80010e4:	e7b8      	b.n	8001058 <GpsTask+0x8>
 80010e6:	bf00      	nop
 80010e8:	20000000 	.word	0x20000000
 80010ec:	08011af0 	.word	0x08011af0
 80010f0:	20005228 	.word	0x20005228
 80010f4:	08011af8 	.word	0x08011af8
 80010f8:	08011afc 	.word	0x08011afc

080010fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	; 0x28
 8001100:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
 8001110:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	4b2d      	ldr	r3, [pc, #180]	; (80011cc <MX_GPIO_Init+0xd0>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a2c      	ldr	r2, [pc, #176]	; (80011cc <MX_GPIO_Init+0xd0>)
 800111c:	f043 0304 	orr.w	r3, r3, #4
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b2a      	ldr	r3, [pc, #168]	; (80011cc <MX_GPIO_Init+0xd0>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0304 	and.w	r3, r3, #4
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b26      	ldr	r3, [pc, #152]	; (80011cc <MX_GPIO_Init+0xd0>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a25      	ldr	r2, [pc, #148]	; (80011cc <MX_GPIO_Init+0xd0>)
 8001138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b23      	ldr	r3, [pc, #140]	; (80011cc <MX_GPIO_Init+0xd0>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <MX_GPIO_Init+0xd0>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a1e      	ldr	r2, [pc, #120]	; (80011cc <MX_GPIO_Init+0xd0>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <MX_GPIO_Init+0xd0>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	4b18      	ldr	r3, [pc, #96]	; (80011cc <MX_GPIO_Init+0xd0>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a17      	ldr	r2, [pc, #92]	; (80011cc <MX_GPIO_Init+0xd0>)
 8001170:	f043 0302 	orr.w	r3, r3, #2
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <MX_GPIO_Init+0xd0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	f240 3102 	movw	r1, #770	; 0x302
 8001188:	4811      	ldr	r0, [pc, #68]	; (80011d0 <MX_GPIO_Init+0xd4>)
 800118a:	f001 fbcb 	bl	8002924 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9;
 800118e:	f240 3302 	movw	r3, #770	; 0x302
 8001192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001194:	2301      	movs	r3, #1
 8001196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4619      	mov	r1, r3
 80011a6:	480a      	ldr	r0, [pc, #40]	; (80011d0 <MX_GPIO_Init+0xd4>)
 80011a8:	f001 fa38 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011ac:	2304      	movs	r3, #4
 80011ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4619      	mov	r1, r3
 80011be:	4804      	ldr	r0, [pc, #16]	; (80011d0 <MX_GPIO_Init+0xd4>)
 80011c0:	f001 fa2c 	bl	800261c <HAL_GPIO_Init>

}
 80011c4:	bf00      	nop
 80011c6:	3728      	adds	r7, #40	; 0x28
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020400 	.word	0x40020400

080011d4 <GPS_Init>:
	CDC_Transmit_FS((unsigned char *) buf, (uint16_t) strlen(buf));
}
#endif

void GPS_Init()
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 80011d8:	2201      	movs	r2, #1
 80011da:	4903      	ldr	r1, [pc, #12]	; (80011e8 <GPS_Init+0x14>)
 80011dc:	4803      	ldr	r0, [pc, #12]	; (80011ec <GPS_Init+0x18>)
 80011de:	f004 fa5e 	bl	800569e <HAL_UART_Receive_IT>
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200002d8 	.word	0x200002d8
 80011ec:	200053f4 	.word	0x200053f4

080011f0 <GPS_UART_CallBack>:


void GPS_UART_CallBack(){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 80011f4:	4b16      	ldr	r3, [pc, #88]	; (8001250 <GPS_UART_CallBack+0x60>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b0a      	cmp	r3, #10
 80011fa:	d010      	beq.n	800121e <GPS_UART_CallBack+0x2e>
 80011fc:	4b15      	ldr	r3, [pc, #84]	; (8001254 <GPS_UART_CallBack+0x64>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	b25b      	sxtb	r3, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	db0b      	blt.n	800121e <GPS_UART_CallBack+0x2e>
		rx_buffer[rx_index++] = rx_data;
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <GPS_UART_CallBack+0x64>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	1c5a      	adds	r2, r3, #1
 800120c:	b2d1      	uxtb	r1, r2
 800120e:	4a11      	ldr	r2, [pc, #68]	; (8001254 <GPS_UART_CallBack+0x64>)
 8001210:	7011      	strb	r1, [r2, #0]
 8001212:	461a      	mov	r2, r3
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <GPS_UART_CallBack+0x60>)
 8001216:	7819      	ldrb	r1, [r3, #0]
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <GPS_UART_CallBack+0x68>)
 800121a:	5499      	strb	r1, [r3, r2]
 800121c:	e010      	b.n	8001240 <GPS_UART_CallBack+0x50>

		#if (GPS_DEBUG == 1)
		GPS_print((char*)rx_buffer);
		#endif

		if(GPS_validate((char*) rx_buffer))
 800121e:	480e      	ldr	r0, [pc, #56]	; (8001258 <GPS_UART_CallBack+0x68>)
 8001220:	f000 f81e 	bl	8001260 <GPS_validate>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <GPS_UART_CallBack+0x40>
			GPS_parse((char*) rx_buffer);
 800122a:	480b      	ldr	r0, [pc, #44]	; (8001258 <GPS_UART_CallBack+0x68>)
 800122c:	f000 f87a 	bl	8001324 <GPS_parse>
		rx_index = 0;
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <GPS_UART_CallBack+0x64>)
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 8001236:	2280      	movs	r2, #128	; 0x80
 8001238:	2100      	movs	r1, #0
 800123a:	4807      	ldr	r0, [pc, #28]	; (8001258 <GPS_UART_CallBack+0x68>)
 800123c:	f00b fbe8 	bl	800ca10 <memset>
	}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8001240:	2201      	movs	r2, #1
 8001242:	4903      	ldr	r1, [pc, #12]	; (8001250 <GPS_UART_CallBack+0x60>)
 8001244:	4805      	ldr	r0, [pc, #20]	; (800125c <GPS_UART_CallBack+0x6c>)
 8001246:	f004 fa2a 	bl	800569e <HAL_UART_Receive_IT>
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200002d8 	.word	0x200002d8
 8001254:	200002d9 	.word	0x200002d9
 8001258:	20005280 	.word	0x20005280
 800125c:	200053f4 	.word	0x200053f4

08001260 <GPS_validate>:


int GPS_validate(char *nmeastr){
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 800126c:	2300      	movs	r3, #0
 800126e:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b24      	cmp	r3, #36	; 0x24
 800127a:	d103      	bne.n	8001284 <GPS_validate+0x24>
        i++;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	3301      	adds	r3, #1
 8001280:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001282:	e00c      	b.n	800129e <GPS_validate+0x3e>
        return 0;
 8001284:	2300      	movs	r3, #0
 8001286:	e047      	b.n	8001318 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4053      	eors	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        i++;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	3301      	adds	r3, #1
 800129c:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	4413      	add	r3, r2
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d008      	beq.n	80012bc <GPS_validate+0x5c>
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	4413      	add	r3, r2
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b2a      	cmp	r3, #42	; 0x2a
 80012b4:	d002      	beq.n	80012bc <GPS_validate+0x5c>
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	2b4a      	cmp	r3, #74	; 0x4a
 80012ba:	dde5      	ble.n	8001288 <GPS_validate+0x28>
    }

    if(i >= 75){
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	2b4a      	cmp	r3, #74	; 0x4a
 80012c0:	dd01      	ble.n	80012c6 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 80012c2:	2300      	movs	r3, #0
 80012c4:	e028      	b.n	8001318 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	4413      	add	r3, r2
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b2a      	cmp	r3, #42	; 0x2a
 80012d0:	d119      	bne.n	8001306 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	3301      	adds	r3, #1
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	3302      	adds	r3, #2
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 80012ee:	f107 0308 	add.w	r3, r7, #8
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	490a      	ldr	r1, [pc, #40]	; (8001320 <GPS_validate+0xc0>)
 80012f6:	4618      	mov	r0, r3
 80012f8:	f00c fa12 	bl	800d720 <siprintf>
    return((checkcalcstr[0] == check[0])
 80012fc:	7a3a      	ldrb	r2, [r7, #8]
 80012fe:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001300:	429a      	cmp	r2, r3
 8001302:	d108      	bne.n	8001316 <GPS_validate+0xb6>
 8001304:	e001      	b.n	800130a <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8001306:	2300      	movs	r3, #0
 8001308:	e006      	b.n	8001318 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800130a:	7a7a      	ldrb	r2, [r7, #9]
 800130c:	7b7b      	ldrb	r3, [r7, #13]
 800130e:	429a      	cmp	r2, r3
 8001310:	d101      	bne.n	8001316 <GPS_validate+0xb6>
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <GPS_validate+0xb8>
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	08011b04 	.word	0x08011b04

08001324 <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 8001324:	b580      	push	{r7, lr}
 8001326:	b08a      	sub	sp, #40	; 0x28
 8001328:	af08      	add	r7, sp, #32
 800132a:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 800132c:	2206      	movs	r2, #6
 800132e:	494a      	ldr	r1, [pc, #296]	; (8001458 <GPS_parse+0x134>)
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f00c fa86 	bl	800d842 <strncmp>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d137      	bne.n	80013ac <GPS_parse+0x88>
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 800133c:	4b47      	ldr	r3, [pc, #284]	; (800145c <GPS_parse+0x138>)
 800133e:	9307      	str	r3, [sp, #28]
 8001340:	4b47      	ldr	r3, [pc, #284]	; (8001460 <GPS_parse+0x13c>)
 8001342:	9306      	str	r3, [sp, #24]
 8001344:	4b47      	ldr	r3, [pc, #284]	; (8001464 <GPS_parse+0x140>)
 8001346:	9305      	str	r3, [sp, #20]
 8001348:	4b47      	ldr	r3, [pc, #284]	; (8001468 <GPS_parse+0x144>)
 800134a:	9304      	str	r3, [sp, #16]
 800134c:	4b47      	ldr	r3, [pc, #284]	; (800146c <GPS_parse+0x148>)
 800134e:	9303      	str	r3, [sp, #12]
 8001350:	4b47      	ldr	r3, [pc, #284]	; (8001470 <GPS_parse+0x14c>)
 8001352:	9302      	str	r3, [sp, #8]
 8001354:	4b47      	ldr	r3, [pc, #284]	; (8001474 <GPS_parse+0x150>)
 8001356:	9301      	str	r3, [sp, #4]
 8001358:	4b47      	ldr	r3, [pc, #284]	; (8001478 <GPS_parse+0x154>)
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	4b47      	ldr	r3, [pc, #284]	; (800147c <GPS_parse+0x158>)
 800135e:	4a48      	ldr	r2, [pc, #288]	; (8001480 <GPS_parse+0x15c>)
 8001360:	4948      	ldr	r1, [pc, #288]	; (8001484 <GPS_parse+0x160>)
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f00c f9fc 	bl	800d760 <siscanf>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	dd70      	ble.n	8001450 <GPS_parse+0x12c>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 800136e:	4b46      	ldr	r3, [pc, #280]	; (8001488 <GPS_parse+0x164>)
 8001370:	edd3 7a04 	vldr	s15, [r3, #16]
 8001374:	4b44      	ldr	r3, [pc, #272]	; (8001488 <GPS_parse+0x164>)
 8001376:	7e1b      	ldrb	r3, [r3, #24]
 8001378:	4618      	mov	r0, r3
 800137a:	eeb0 0a67 	vmov.f32	s0, s15
 800137e:	f000 f8a7 	bl	80014d0 <GPS_nmea_to_dec>
 8001382:	eef0 7a40 	vmov.f32	s15, s0
 8001386:	4b40      	ldr	r3, [pc, #256]	; (8001488 <GPS_parse+0x164>)
 8001388:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 800138c:	4b3e      	ldr	r3, [pc, #248]	; (8001488 <GPS_parse+0x164>)
 800138e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001392:	4b3d      	ldr	r3, [pc, #244]	; (8001488 <GPS_parse+0x164>)
 8001394:	7e5b      	ldrb	r3, [r3, #25]
 8001396:	4618      	mov	r0, r3
 8001398:	eeb0 0a67 	vmov.f32	s0, s15
 800139c:	f000 f898 	bl	80014d0 <GPS_nmea_to_dec>
 80013a0:	eef0 7a40 	vmov.f32	s15, s0
 80013a4:	4b38      	ldr	r3, [pc, #224]	; (8001488 <GPS_parse+0x164>)
 80013a6:	edc3 7a00 	vstr	s15, [r3]
    		return;
 80013aa:	e051      	b.n	8001450 <GPS_parse+0x12c>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 80013ac:	2206      	movs	r2, #6
 80013ae:	4937      	ldr	r1, [pc, #220]	; (800148c <GPS_parse+0x168>)
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f00c fa46 	bl	800d842 <strncmp>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d114      	bne.n	80013e6 <GPS_parse+0xc2>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 80013bc:	4b34      	ldr	r3, [pc, #208]	; (8001490 <GPS_parse+0x16c>)
 80013be:	9305      	str	r3, [sp, #20]
 80013c0:	4b34      	ldr	r3, [pc, #208]	; (8001494 <GPS_parse+0x170>)
 80013c2:	9304      	str	r3, [sp, #16]
 80013c4:	4b34      	ldr	r3, [pc, #208]	; (8001498 <GPS_parse+0x174>)
 80013c6:	9303      	str	r3, [sp, #12]
 80013c8:	4b29      	ldr	r3, [pc, #164]	; (8001470 <GPS_parse+0x14c>)
 80013ca:	9302      	str	r3, [sp, #8]
 80013cc:	4b29      	ldr	r3, [pc, #164]	; (8001474 <GPS_parse+0x150>)
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	4b29      	ldr	r3, [pc, #164]	; (8001478 <GPS_parse+0x154>)
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	4b29      	ldr	r3, [pc, #164]	; (800147c <GPS_parse+0x158>)
 80013d6:	4a2a      	ldr	r2, [pc, #168]	; (8001480 <GPS_parse+0x15c>)
 80013d8:	4930      	ldr	r1, [pc, #192]	; (800149c <GPS_parse+0x178>)
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f00c f9c0 	bl	800d760 <siscanf>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	e034      	b.n	8001450 <GPS_parse+0x12c>
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 80013e6:	2206      	movs	r2, #6
 80013e8:	492d      	ldr	r1, [pc, #180]	; (80014a0 <GPS_parse+0x17c>)
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f00c fa29 	bl	800d842 <strncmp>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d110      	bne.n	8001418 <GPS_parse+0xf4>
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 80013f6:	4b2b      	ldr	r3, [pc, #172]	; (80014a4 <GPS_parse+0x180>)
 80013f8:	9303      	str	r3, [sp, #12]
 80013fa:	4b21      	ldr	r3, [pc, #132]	; (8001480 <GPS_parse+0x15c>)
 80013fc:	9302      	str	r3, [sp, #8]
 80013fe:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <GPS_parse+0x14c>)
 8001400:	9301      	str	r3, [sp, #4]
 8001402:	4b1c      	ldr	r3, [pc, #112]	; (8001474 <GPS_parse+0x150>)
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	4b1c      	ldr	r3, [pc, #112]	; (8001478 <GPS_parse+0x154>)
 8001408:	4a1c      	ldr	r2, [pc, #112]	; (800147c <GPS_parse+0x158>)
 800140a:	4927      	ldr	r1, [pc, #156]	; (80014a8 <GPS_parse+0x184>)
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f00c f9a7 	bl	800d760 <siscanf>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	e01b      	b.n	8001450 <GPS_parse+0x12c>
            return;
    }
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 8001418:	2206      	movs	r2, #6
 800141a:	4924      	ldr	r1, [pc, #144]	; (80014ac <GPS_parse+0x188>)
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f00c fa10 	bl	800d842 <strncmp>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d113      	bne.n	8001450 <GPS_parse+0x12c>
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8001428:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <GPS_parse+0x18c>)
 800142a:	9305      	str	r3, [sp, #20]
 800142c:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <GPS_parse+0x190>)
 800142e:	9304      	str	r3, [sp, #16]
 8001430:	4b21      	ldr	r3, [pc, #132]	; (80014b8 <GPS_parse+0x194>)
 8001432:	9303      	str	r3, [sp, #12]
 8001434:	4b18      	ldr	r3, [pc, #96]	; (8001498 <GPS_parse+0x174>)
 8001436:	9302      	str	r3, [sp, #8]
 8001438:	4b20      	ldr	r3, [pc, #128]	; (80014bc <GPS_parse+0x198>)
 800143a:	9301      	str	r3, [sp, #4]
 800143c:	4b20      	ldr	r3, [pc, #128]	; (80014c0 <GPS_parse+0x19c>)
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <GPS_parse+0x1a0>)
 8001442:	4a21      	ldr	r2, [pc, #132]	; (80014c8 <GPS_parse+0x1a4>)
 8001444:	4921      	ldr	r1, [pc, #132]	; (80014cc <GPS_parse+0x1a8>)
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f00c f98a 	bl	800d760 <siscanf>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
            return;
    }
}
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	08011b0c 	.word	0x08011b0c
 800145c:	20005254 	.word	0x20005254
 8001460:	20005250 	.word	0x20005250
 8001464:	2000524c 	.word	0x2000524c
 8001468:	20005248 	.word	0x20005248
 800146c:	20005244 	.word	0x20005244
 8001470:	20005241 	.word	0x20005241
 8001474:	20005234 	.word	0x20005234
 8001478:	20005240 	.word	0x20005240
 800147c:	20005238 	.word	0x20005238
 8001480:	2000523c 	.word	0x2000523c
 8001484:	08011b14 	.word	0x08011b14
 8001488:	20005228 	.word	0x20005228
 800148c:	08011b3c 	.word	0x08011b3c
 8001490:	20005260 	.word	0x20005260
 8001494:	2000525c 	.word	0x2000525c
 8001498:	20005258 	.word	0x20005258
 800149c:	08011b44 	.word	0x08011b44
 80014a0:	08011b64 	.word	0x08011b64
 80014a4:	20005264 	.word	0x20005264
 80014a8:	08011b6c 	.word	0x08011b6c
 80014ac:	08011b88 	.word	0x08011b88
 80014b0:	2000527c 	.word	0x2000527c
 80014b4:	20005278 	.word	0x20005278
 80014b8:	20005275 	.word	0x20005275
 80014bc:	20005274 	.word	0x20005274
 80014c0:	20005270 	.word	0x20005270
 80014c4:	2000526c 	.word	0x2000526c
 80014c8:	20005268 	.word	0x20005268
 80014cc:	08011b90 	.word	0x08011b90

080014d0 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 80014d0:	b480      	push	{r7}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80014da:	4603      	mov	r3, r0
 80014dc:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 80014de:	ed97 7a01 	vldr	s14, [r7, #4]
 80014e2:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001564 <GPS_nmea_to_dec+0x94>
 80014e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ee:	ee17 3a90 	vmov	r3, s15
 80014f2:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	2264      	movs	r2, #100	; 0x64
 80014f8:	fb02 f303 	mul.w	r3, r2, r3
 80014fc:	ee07 3a90 	vmov	s15, r3
 8001500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001504:	ed97 7a01 	vldr	s14, [r7, #4]
 8001508:	ee77 7a67 	vsub.f32	s15, s14, s15
 800150c:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8001510:	ed97 7a03 	vldr	s14, [r7, #12]
 8001514:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001568 <GPS_nmea_to_dec+0x98>
 8001518:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800151c:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	ee07 3a90 	vmov	s15, r3
 8001526:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800152a:	ed97 7a02 	vldr	s14, [r7, #8]
 800152e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001532:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8001536:	78fb      	ldrb	r3, [r7, #3]
 8001538:	2b53      	cmp	r3, #83	; 0x53
 800153a:	d002      	beq.n	8001542 <GPS_nmea_to_dec+0x72>
 800153c:	78fb      	ldrb	r3, [r7, #3]
 800153e:	2b57      	cmp	r3, #87	; 0x57
 8001540:	d105      	bne.n	800154e <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8001542:	edd7 7a05 	vldr	s15, [r7, #20]
 8001546:	eef1 7a67 	vneg.f32	s15, s15
 800154a:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	ee07 3a90 	vmov	s15, r3
}
 8001554:	eeb0 0a67 	vmov.f32	s0, s15
 8001558:	371c      	adds	r7, #28
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	42c80000 	.word	0x42c80000
 8001568:	42700000 	.word	0x42700000

0800156c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <MX_I2C1_Init+0x50>)
 8001572:	4a13      	ldr	r2, [pc, #76]	; (80015c0 <MX_I2C1_Init+0x54>)
 8001574:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001576:	4b11      	ldr	r3, [pc, #68]	; (80015bc <MX_I2C1_Init+0x50>)
 8001578:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <MX_I2C1_Init+0x58>)
 800157a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800157c:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <MX_I2C1_Init+0x50>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <MX_I2C1_Init+0x50>)
 8001584:	2200      	movs	r2, #0
 8001586:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <MX_I2C1_Init+0x50>)
 800158a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800158e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001590:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <MX_I2C1_Init+0x50>)
 8001592:	2200      	movs	r2, #0
 8001594:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <MX_I2C1_Init+0x50>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800159c:	4b07      	ldr	r3, [pc, #28]	; (80015bc <MX_I2C1_Init+0x50>)
 800159e:	2200      	movs	r2, #0
 80015a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <MX_I2C1_Init+0x50>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015a8:	4804      	ldr	r0, [pc, #16]	; (80015bc <MX_I2C1_Init+0x50>)
 80015aa:	f001 f9d5 	bl	8002958 <HAL_I2C_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015b4:	f000 f8fa 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20005300 	.word	0x20005300
 80015c0:	40005400 	.word	0x40005400
 80015c4:	00061a80 	.word	0x00061a80

080015c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	; 0x28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a19      	ldr	r2, [pc, #100]	; (800164c <HAL_I2C_MspInit+0x84>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d12b      	bne.n	8001642 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <HAL_I2C_MspInit+0x88>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a17      	ldr	r2, [pc, #92]	; (8001650 <HAL_I2C_MspInit+0x88>)
 80015f4:	f043 0302 	orr.w	r3, r3, #2
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <HAL_I2C_MspInit+0x88>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001606:	23c0      	movs	r3, #192	; 0xc0
 8001608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800160a:	2312      	movs	r3, #18
 800160c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800160e:	2301      	movs	r3, #1
 8001610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001612:	2303      	movs	r3, #3
 8001614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001616:	2304      	movs	r3, #4
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	480c      	ldr	r0, [pc, #48]	; (8001654 <HAL_I2C_MspInit+0x8c>)
 8001622:	f000 fffb 	bl	800261c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <HAL_I2C_MspInit+0x88>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	4a08      	ldr	r2, [pc, #32]	; (8001650 <HAL_I2C_MspInit+0x88>)
 8001630:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001634:	6413      	str	r3, [r2, #64]	; 0x40
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_I2C_MspInit+0x88>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001642:	bf00      	nop
 8001644:	3728      	adds	r7, #40	; 0x28
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40005400 	.word	0x40005400
 8001650:	40023800 	.word	0x40023800
 8001654:	40020400 	.word	0x40020400

08001658 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) GPS_UART_CallBack();
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a04      	ldr	r2, [pc, #16]	; (8001674 <HAL_UART_RxCpltCallback+0x1c>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d101      	bne.n	800166c <HAL_UART_RxCpltCallback+0x14>
 8001668:	f7ff fdc2 	bl	80011f0 <GPS_UART_CallBack>
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	200053f4 	.word	0x200053f4

08001678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800167c:	f000 fdf4 	bl	8002268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001680:	f000 f814 	bl	80016ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001684:	f7ff fd3a 	bl	80010fc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001688:	f7ff ff70 	bl	800156c <MX_I2C1_Init>
  MX_SPI1_Init();
 800168c:	f000 f894 	bl	80017b8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001690:	f000 fd44 	bl	800211c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
  GPS_Init();
 8001694:	f7ff fd9e 	bl	80011d4 <GPS_Init>
  SSD1306_Init();
 8001698:	f000 f90c 	bl	80018b4 <SSD1306_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800169c:	f007 ffb6 	bl	800960c <osKernelInitialize>
  MX_FREERTOS_Init();
 80016a0:	f7ff fcac 	bl	8000ffc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80016a4:	f007 ffd6 	bl	8009654 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <main+0x30>
	...

080016ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b094      	sub	sp, #80	; 0x50
 80016b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016b2:	f107 0320 	add.w	r3, r7, #32
 80016b6:	2230      	movs	r2, #48	; 0x30
 80016b8:	2100      	movs	r1, #0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f00b f9a8 	bl	800ca10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	4b2a      	ldr	r3, [pc, #168]	; (8001780 <SystemClock_Config+0xd4>)
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	4a29      	ldr	r2, [pc, #164]	; (8001780 <SystemClock_Config+0xd4>)
 80016da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016de:	6413      	str	r3, [r2, #64]	; 0x40
 80016e0:	4b27      	ldr	r3, [pc, #156]	; (8001780 <SystemClock_Config+0xd4>)
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80016ec:	2300      	movs	r3, #0
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	4b24      	ldr	r3, [pc, #144]	; (8001784 <SystemClock_Config+0xd8>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016f8:	4a22      	ldr	r2, [pc, #136]	; (8001784 <SystemClock_Config+0xd8>)
 80016fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	4b20      	ldr	r3, [pc, #128]	; (8001784 <SystemClock_Config+0xd8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800170c:	2303      	movs	r3, #3
 800170e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001710:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001716:	2301      	movs	r3, #1
 8001718:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800171a:	2310      	movs	r3, #16
 800171c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800171e:	2302      	movs	r3, #2
 8001720:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001722:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001726:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001728:	230f      	movs	r3, #15
 800172a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800172c:	2390      	movs	r3, #144	; 0x90
 800172e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001730:	2302      	movs	r3, #2
 8001732:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001734:	2305      	movs	r3, #5
 8001736:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001738:	f107 0320 	add.w	r3, r7, #32
 800173c:	4618      	mov	r0, r3
 800173e:	f002 ffdf 	bl	8004700 <HAL_RCC_OscConfig>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001748:	f000 f830 	bl	80017ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800174c:	230f      	movs	r3, #15
 800174e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001750:	2300      	movs	r3, #0
 8001752:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001758:	2300      	movs	r3, #0
 800175a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	2100      	movs	r1, #0
 8001766:	4618      	mov	r0, r3
 8001768:	f003 fa42 	bl	8004bf0 <HAL_RCC_ClockConfig>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001772:	f000 f81b 	bl	80017ac <Error_Handler>
  }
}
 8001776:	bf00      	nop
 8001778:	3750      	adds	r7, #80	; 0x50
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800
 8001784:	40007000 	.word	0x40007000

08001788 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d101      	bne.n	800179e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800179a:	f000 fd87 	bl	80022ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40000400 	.word	0x40000400

080017ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b0:	b672      	cpsid	i
}
 80017b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <Error_Handler+0x8>
	...

080017b8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80017bc:	4b17      	ldr	r3, [pc, #92]	; (800181c <MX_SPI1_Init+0x64>)
 80017be:	4a18      	ldr	r2, [pc, #96]	; (8001820 <MX_SPI1_Init+0x68>)
 80017c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017c2:	4b16      	ldr	r3, [pc, #88]	; (800181c <MX_SPI1_Init+0x64>)
 80017c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017ca:	4b14      	ldr	r3, [pc, #80]	; (800181c <MX_SPI1_Init+0x64>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <MX_SPI1_Init+0x64>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017d6:	4b11      	ldr	r3, [pc, #68]	; (800181c <MX_SPI1_Init+0x64>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <MX_SPI1_Init+0x64>)
 80017de:	2200      	movs	r2, #0
 80017e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <MX_SPI1_Init+0x64>)
 80017e4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017ea:	4b0c      	ldr	r3, [pc, #48]	; (800181c <MX_SPI1_Init+0x64>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017f0:	4b0a      	ldr	r3, [pc, #40]	; (800181c <MX_SPI1_Init+0x64>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <MX_SPI1_Init+0x64>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017fc:	4b07      	ldr	r3, [pc, #28]	; (800181c <MX_SPI1_Init+0x64>)
 80017fe:	2200      	movs	r2, #0
 8001800:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <MX_SPI1_Init+0x64>)
 8001804:	220a      	movs	r2, #10
 8001806:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001808:	4804      	ldr	r0, [pc, #16]	; (800181c <MX_SPI1_Init+0x64>)
 800180a:	f003 fbf3 	bl	8004ff4 <HAL_SPI_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001814:	f7ff ffca 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20005354 	.word	0x20005354
 8001820:	40013000 	.word	0x40013000

08001824 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	; 0x28
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a19      	ldr	r2, [pc, #100]	; (80018a8 <HAL_SPI_MspInit+0x84>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d12b      	bne.n	800189e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	4b18      	ldr	r3, [pc, #96]	; (80018ac <HAL_SPI_MspInit+0x88>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	4a17      	ldr	r2, [pc, #92]	; (80018ac <HAL_SPI_MspInit+0x88>)
 8001850:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001854:	6453      	str	r3, [r2, #68]	; 0x44
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_SPI_MspInit+0x88>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <HAL_SPI_MspInit+0x88>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a10      	ldr	r2, [pc, #64]	; (80018ac <HAL_SPI_MspInit+0x88>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <HAL_SPI_MspInit+0x88>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800187e:	23f0      	movs	r3, #240	; 0xf0
 8001880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	2302      	movs	r3, #2
 8001884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188a:	2303      	movs	r3, #3
 800188c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800188e:	2305      	movs	r3, #5
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4619      	mov	r1, r3
 8001898:	4805      	ldr	r0, [pc, #20]	; (80018b0 <HAL_SPI_MspInit+0x8c>)
 800189a:	f000 febf 	bl	800261c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800189e:	bf00      	nop
 80018a0:	3728      	adds	r7, #40	; 0x28
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40013000 	.word	0x40013000
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020000 	.word	0x40020000

080018b4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80018ba:	f000 fa21 	bl	8001d00 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80018be:	f644 6320 	movw	r3, #20000	; 0x4e20
 80018c2:	2201      	movs	r2, #1
 80018c4:	2178      	movs	r1, #120	; 0x78
 80018c6:	485b      	ldr	r0, [pc, #364]	; (8001a34 <SSD1306_Init+0x180>)
 80018c8:	f001 fa88 	bl	8002ddc <HAL_I2C_IsDeviceReady>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	e0a9      	b.n	8001a2a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80018d6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80018da:	607b      	str	r3, [r7, #4]
	while(p>0)
 80018dc:	e002      	b.n	80018e4 <SSD1306_Init+0x30>
		p--;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	3b01      	subs	r3, #1
 80018e2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f9      	bne.n	80018de <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80018ea:	22ae      	movs	r2, #174	; 0xae
 80018ec:	2100      	movs	r1, #0
 80018ee:	2078      	movs	r0, #120	; 0x78
 80018f0:	f000 fa64 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80018f4:	2220      	movs	r2, #32
 80018f6:	2100      	movs	r1, #0
 80018f8:	2078      	movs	r0, #120	; 0x78
 80018fa:	f000 fa5f 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80018fe:	2210      	movs	r2, #16
 8001900:	2100      	movs	r1, #0
 8001902:	2078      	movs	r0, #120	; 0x78
 8001904:	f000 fa5a 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001908:	22b0      	movs	r2, #176	; 0xb0
 800190a:	2100      	movs	r1, #0
 800190c:	2078      	movs	r0, #120	; 0x78
 800190e:	f000 fa55 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001912:	22c8      	movs	r2, #200	; 0xc8
 8001914:	2100      	movs	r1, #0
 8001916:	2078      	movs	r0, #120	; 0x78
 8001918:	f000 fa50 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800191c:	2200      	movs	r2, #0
 800191e:	2100      	movs	r1, #0
 8001920:	2078      	movs	r0, #120	; 0x78
 8001922:	f000 fa4b 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001926:	2210      	movs	r2, #16
 8001928:	2100      	movs	r1, #0
 800192a:	2078      	movs	r0, #120	; 0x78
 800192c:	f000 fa46 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001930:	2240      	movs	r2, #64	; 0x40
 8001932:	2100      	movs	r1, #0
 8001934:	2078      	movs	r0, #120	; 0x78
 8001936:	f000 fa41 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800193a:	2281      	movs	r2, #129	; 0x81
 800193c:	2100      	movs	r1, #0
 800193e:	2078      	movs	r0, #120	; 0x78
 8001940:	f000 fa3c 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001944:	22ff      	movs	r2, #255	; 0xff
 8001946:	2100      	movs	r1, #0
 8001948:	2078      	movs	r0, #120	; 0x78
 800194a:	f000 fa37 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800194e:	22a1      	movs	r2, #161	; 0xa1
 8001950:	2100      	movs	r1, #0
 8001952:	2078      	movs	r0, #120	; 0x78
 8001954:	f000 fa32 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001958:	22a6      	movs	r2, #166	; 0xa6
 800195a:	2100      	movs	r1, #0
 800195c:	2078      	movs	r0, #120	; 0x78
 800195e:	f000 fa2d 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001962:	22a8      	movs	r2, #168	; 0xa8
 8001964:	2100      	movs	r1, #0
 8001966:	2078      	movs	r0, #120	; 0x78
 8001968:	f000 fa28 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800196c:	223f      	movs	r2, #63	; 0x3f
 800196e:	2100      	movs	r1, #0
 8001970:	2078      	movs	r0, #120	; 0x78
 8001972:	f000 fa23 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001976:	22a4      	movs	r2, #164	; 0xa4
 8001978:	2100      	movs	r1, #0
 800197a:	2078      	movs	r0, #120	; 0x78
 800197c:	f000 fa1e 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001980:	22d3      	movs	r2, #211	; 0xd3
 8001982:	2100      	movs	r1, #0
 8001984:	2078      	movs	r0, #120	; 0x78
 8001986:	f000 fa19 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800198a:	2200      	movs	r2, #0
 800198c:	2100      	movs	r1, #0
 800198e:	2078      	movs	r0, #120	; 0x78
 8001990:	f000 fa14 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001994:	22d5      	movs	r2, #213	; 0xd5
 8001996:	2100      	movs	r1, #0
 8001998:	2078      	movs	r0, #120	; 0x78
 800199a:	f000 fa0f 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800199e:	22f0      	movs	r2, #240	; 0xf0
 80019a0:	2100      	movs	r1, #0
 80019a2:	2078      	movs	r0, #120	; 0x78
 80019a4:	f000 fa0a 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80019a8:	22d9      	movs	r2, #217	; 0xd9
 80019aa:	2100      	movs	r1, #0
 80019ac:	2078      	movs	r0, #120	; 0x78
 80019ae:	f000 fa05 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80019b2:	2222      	movs	r2, #34	; 0x22
 80019b4:	2100      	movs	r1, #0
 80019b6:	2078      	movs	r0, #120	; 0x78
 80019b8:	f000 fa00 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80019bc:	22da      	movs	r2, #218	; 0xda
 80019be:	2100      	movs	r1, #0
 80019c0:	2078      	movs	r0, #120	; 0x78
 80019c2:	f000 f9fb 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80019c6:	2212      	movs	r2, #18
 80019c8:	2100      	movs	r1, #0
 80019ca:	2078      	movs	r0, #120	; 0x78
 80019cc:	f000 f9f6 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80019d0:	22db      	movs	r2, #219	; 0xdb
 80019d2:	2100      	movs	r1, #0
 80019d4:	2078      	movs	r0, #120	; 0x78
 80019d6:	f000 f9f1 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80019da:	2220      	movs	r2, #32
 80019dc:	2100      	movs	r1, #0
 80019de:	2078      	movs	r0, #120	; 0x78
 80019e0:	f000 f9ec 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80019e4:	228d      	movs	r2, #141	; 0x8d
 80019e6:	2100      	movs	r1, #0
 80019e8:	2078      	movs	r0, #120	; 0x78
 80019ea:	f000 f9e7 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80019ee:	2214      	movs	r2, #20
 80019f0:	2100      	movs	r1, #0
 80019f2:	2078      	movs	r0, #120	; 0x78
 80019f4:	f000 f9e2 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80019f8:	22af      	movs	r2, #175	; 0xaf
 80019fa:	2100      	movs	r1, #0
 80019fc:	2078      	movs	r0, #120	; 0x78
 80019fe:	f000 f9dd 	bl	8001dbc <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001a02:	222e      	movs	r2, #46	; 0x2e
 8001a04:	2100      	movs	r1, #0
 8001a06:	2078      	movs	r0, #120	; 0x78
 8001a08:	f000 f9d8 	bl	8001dbc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f000 f843 	bl	8001a98 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001a12:	f000 f813 	bl	8001a3c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001a16:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <SSD1306_Init+0x184>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <SSD1306_Init+0x184>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001a22:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <SSD1306_Init+0x184>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001a28:	2301      	movs	r3, #1
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20005300 	.word	0x20005300
 8001a38:	200006dc 	.word	0x200006dc

08001a3c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001a42:	2300      	movs	r3, #0
 8001a44:	71fb      	strb	r3, [r7, #7]
 8001a46:	e01d      	b.n	8001a84 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	3b50      	subs	r3, #80	; 0x50
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	461a      	mov	r2, r3
 8001a50:	2100      	movs	r1, #0
 8001a52:	2078      	movs	r0, #120	; 0x78
 8001a54:	f000 f9b2 	bl	8001dbc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	2078      	movs	r0, #120	; 0x78
 8001a5e:	f000 f9ad 	bl	8001dbc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001a62:	2210      	movs	r2, #16
 8001a64:	2100      	movs	r1, #0
 8001a66:	2078      	movs	r0, #120	; 0x78
 8001a68:	f000 f9a8 	bl	8001dbc <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	01db      	lsls	r3, r3, #7
 8001a70:	4a08      	ldr	r2, [pc, #32]	; (8001a94 <SSD1306_UpdateScreen+0x58>)
 8001a72:	441a      	add	r2, r3
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	2140      	movs	r1, #64	; 0x40
 8001a78:	2078      	movs	r0, #120	; 0x78
 8001a7a:	f000 f957 	bl	8001d2c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	3301      	adds	r3, #1
 8001a82:	71fb      	strb	r3, [r7, #7]
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	2b07      	cmp	r3, #7
 8001a88:	d9de      	bls.n	8001a48 <SSD1306_UpdateScreen+0xc>
	}
}
 8001a8a:	bf00      	nop
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	200002dc 	.word	0x200002dc

08001a98 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <SSD1306_Fill+0x14>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	e000      	b.n	8001aae <SSD1306_Fill+0x16>
 8001aac:	23ff      	movs	r3, #255	; 0xff
 8001aae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4803      	ldr	r0, [pc, #12]	; (8001ac4 <SSD1306_Fill+0x2c>)
 8001ab6:	f00a ffab 	bl	800ca10 <memset>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200002dc 	.word	0x200002dc

08001ac8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	80fb      	strh	r3, [r7, #6]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	80bb      	strh	r3, [r7, #4]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	70fb      	strb	r3, [r7, #3]
	if (
 8001ada:	88fb      	ldrh	r3, [r7, #6]
 8001adc:	2b7f      	cmp	r3, #127	; 0x7f
 8001ade:	d848      	bhi.n	8001b72 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001ae0:	88bb      	ldrh	r3, [r7, #4]
 8001ae2:	2b3f      	cmp	r3, #63	; 0x3f
 8001ae4:	d845      	bhi.n	8001b72 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001ae6:	4b26      	ldr	r3, [pc, #152]	; (8001b80 <SSD1306_DrawPixel+0xb8>)
 8001ae8:	791b      	ldrb	r3, [r3, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d006      	beq.n	8001afc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001aee:	78fb      	ldrb	r3, [r7, #3]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	bf0c      	ite	eq
 8001af4:	2301      	moveq	r3, #1
 8001af6:	2300      	movne	r3, #0
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d11a      	bne.n	8001b38 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001b02:	88fa      	ldrh	r2, [r7, #6]
 8001b04:	88bb      	ldrh	r3, [r7, #4]
 8001b06:	08db      	lsrs	r3, r3, #3
 8001b08:	b298      	uxth	r0, r3
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	01db      	lsls	r3, r3, #7
 8001b0e:	4413      	add	r3, r2
 8001b10:	4a1c      	ldr	r2, [pc, #112]	; (8001b84 <SSD1306_DrawPixel+0xbc>)
 8001b12:	5cd3      	ldrb	r3, [r2, r3]
 8001b14:	b25a      	sxtb	r2, r3
 8001b16:	88bb      	ldrh	r3, [r7, #4]
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b22:	b25b      	sxtb	r3, r3
 8001b24:	4313      	orrs	r3, r2
 8001b26:	b259      	sxtb	r1, r3
 8001b28:	88fa      	ldrh	r2, [r7, #6]
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	01db      	lsls	r3, r3, #7
 8001b2e:	4413      	add	r3, r2
 8001b30:	b2c9      	uxtb	r1, r1
 8001b32:	4a14      	ldr	r2, [pc, #80]	; (8001b84 <SSD1306_DrawPixel+0xbc>)
 8001b34:	54d1      	strb	r1, [r2, r3]
 8001b36:	e01d      	b.n	8001b74 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001b38:	88fa      	ldrh	r2, [r7, #6]
 8001b3a:	88bb      	ldrh	r3, [r7, #4]
 8001b3c:	08db      	lsrs	r3, r3, #3
 8001b3e:	b298      	uxth	r0, r3
 8001b40:	4603      	mov	r3, r0
 8001b42:	01db      	lsls	r3, r3, #7
 8001b44:	4413      	add	r3, r2
 8001b46:	4a0f      	ldr	r2, [pc, #60]	; (8001b84 <SSD1306_DrawPixel+0xbc>)
 8001b48:	5cd3      	ldrb	r3, [r2, r3]
 8001b4a:	b25a      	sxtb	r2, r3
 8001b4c:	88bb      	ldrh	r3, [r7, #4]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	2101      	movs	r1, #1
 8001b54:	fa01 f303 	lsl.w	r3, r1, r3
 8001b58:	b25b      	sxtb	r3, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	b25b      	sxtb	r3, r3
 8001b5e:	4013      	ands	r3, r2
 8001b60:	b259      	sxtb	r1, r3
 8001b62:	88fa      	ldrh	r2, [r7, #6]
 8001b64:	4603      	mov	r3, r0
 8001b66:	01db      	lsls	r3, r3, #7
 8001b68:	4413      	add	r3, r2
 8001b6a:	b2c9      	uxtb	r1, r1
 8001b6c:	4a05      	ldr	r2, [pc, #20]	; (8001b84 <SSD1306_DrawPixel+0xbc>)
 8001b6e:	54d1      	strb	r1, [r2, r3]
 8001b70:	e000      	b.n	8001b74 <SSD1306_DrawPixel+0xac>
		return;
 8001b72:	bf00      	nop
	}
}
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	200006dc 	.word	0x200006dc
 8001b84:	200002dc 	.word	0x200002dc

08001b88 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	460a      	mov	r2, r1
 8001b92:	80fb      	strh	r3, [r7, #6]
 8001b94:	4613      	mov	r3, r2
 8001b96:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001b98:	4a05      	ldr	r2, [pc, #20]	; (8001bb0 <SSD1306_GotoXY+0x28>)
 8001b9a:	88fb      	ldrh	r3, [r7, #6]
 8001b9c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001b9e:	4a04      	ldr	r2, [pc, #16]	; (8001bb0 <SSD1306_GotoXY+0x28>)
 8001ba0:	88bb      	ldrh	r3, [r7, #4]
 8001ba2:	8053      	strh	r3, [r2, #2]
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	200006dc 	.word	0x200006dc

08001bb4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	6039      	str	r1, [r7, #0]
 8001bbe:	71fb      	strb	r3, [r7, #7]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001bc4:	4b3a      	ldr	r3, [pc, #232]	; (8001cb0 <SSD1306_Putc+0xfc>)
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	4413      	add	r3, r2
	if (
 8001bd0:	2b7f      	cmp	r3, #127	; 0x7f
 8001bd2:	dc07      	bgt.n	8001be4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001bd4:	4b36      	ldr	r3, [pc, #216]	; (8001cb0 <SSD1306_Putc+0xfc>)
 8001bd6:	885b      	ldrh	r3, [r3, #2]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	785b      	ldrb	r3, [r3, #1]
 8001bde:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001be0:	2b3f      	cmp	r3, #63	; 0x3f
 8001be2:	dd01      	ble.n	8001be8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	e05e      	b.n	8001ca6 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	e04b      	b.n	8001c86 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	3b20      	subs	r3, #32
 8001bf6:	6839      	ldr	r1, [r7, #0]
 8001bf8:	7849      	ldrb	r1, [r1, #1]
 8001bfa:	fb01 f303 	mul.w	r3, r1, r3
 8001bfe:	4619      	mov	r1, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	440b      	add	r3, r1
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	4413      	add	r3, r2
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	e030      	b.n	8001c74 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d010      	beq.n	8001c44 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001c22:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <SSD1306_Putc+0xfc>)
 8001c24:	881a      	ldrh	r2, [r3, #0]
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	4413      	add	r3, r2
 8001c2c:	b298      	uxth	r0, r3
 8001c2e:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <SSD1306_Putc+0xfc>)
 8001c30:	885a      	ldrh	r2, [r3, #2]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	4413      	add	r3, r2
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	79ba      	ldrb	r2, [r7, #6]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f7ff ff43 	bl	8001ac8 <SSD1306_DrawPixel>
 8001c42:	e014      	b.n	8001c6e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001c44:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <SSD1306_Putc+0xfc>)
 8001c46:	881a      	ldrh	r2, [r3, #0]
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	b298      	uxth	r0, r3
 8001c50:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <SSD1306_Putc+0xfc>)
 8001c52:	885a      	ldrh	r2, [r3, #2]
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	4413      	add	r3, r2
 8001c5a:	b299      	uxth	r1, r3
 8001c5c:	79bb      	ldrb	r3, [r7, #6]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	bf0c      	ite	eq
 8001c62:	2301      	moveq	r3, #1
 8001c64:	2300      	movne	r3, #0
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	461a      	mov	r2, r3
 8001c6a:	f7ff ff2d 	bl	8001ac8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	3301      	adds	r3, #1
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d3c8      	bcc.n	8001c12 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	3301      	adds	r3, #1
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	785b      	ldrb	r3, [r3, #1]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d3ad      	bcc.n	8001bee <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001c92:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <SSD1306_Putc+0xfc>)
 8001c94:	881a      	ldrh	r2, [r3, #0]
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	4413      	add	r3, r2
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	4b03      	ldr	r3, [pc, #12]	; (8001cb0 <SSD1306_Putc+0xfc>)
 8001ca2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	200006dc 	.word	0x200006dc

08001cb4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001cc2:	e012      	b.n	8001cea <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	79fa      	ldrb	r2, [r7, #7]
 8001cca:	68b9      	ldr	r1, [r7, #8]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff71 	bl	8001bb4 <SSD1306_Putc>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d002      	beq.n	8001ce4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	e008      	b.n	8001cf6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1e8      	bne.n	8001cc4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	781b      	ldrb	r3, [r3, #0]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <ssd1306_I2C_Init+0x28>)
 8001d08:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d0a:	e002      	b.n	8001d12 <ssd1306_I2C_Init+0x12>
		p--;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1f9      	bne.n	8001d0c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001d18:	bf00      	nop
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	0003d090 	.word	0x0003d090

08001d2c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001d2c:	b590      	push	{r4, r7, lr}
 8001d2e:	b0c7      	sub	sp, #284	; 0x11c
 8001d30:	af02      	add	r7, sp, #8
 8001d32:	4604      	mov	r4, r0
 8001d34:	4608      	mov	r0, r1
 8001d36:	4639      	mov	r1, r7
 8001d38:	600a      	str	r2, [r1, #0]
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	1dfb      	adds	r3, r7, #7
 8001d3e:	4622      	mov	r2, r4
 8001d40:	701a      	strb	r2, [r3, #0]
 8001d42:	1dbb      	adds	r3, r7, #6
 8001d44:	4602      	mov	r2, r0
 8001d46:	701a      	strb	r2, [r3, #0]
 8001d48:	1d3b      	adds	r3, r7, #4
 8001d4a:	460a      	mov	r2, r1
 8001d4c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001d4e:	f107 030c 	add.w	r3, r7, #12
 8001d52:	1dba      	adds	r2, r7, #6
 8001d54:	7812      	ldrb	r2, [r2, #0]
 8001d56:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001d58:	2300      	movs	r3, #0
 8001d5a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001d5e:	e010      	b.n	8001d82 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001d60:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d64:	463a      	mov	r2, r7
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	441a      	add	r2, r3
 8001d6a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d6e:	3301      	adds	r3, #1
 8001d70:	7811      	ldrb	r1, [r2, #0]
 8001d72:	f107 020c 	add.w	r2, r7, #12
 8001d76:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001d78:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001d82:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	1d3a      	adds	r2, r7, #4
 8001d8a:	8812      	ldrh	r2, [r2, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d8e7      	bhi.n	8001d60 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001d90:	1dfb      	adds	r3, r7, #7
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	b299      	uxth	r1, r3
 8001d96:	1d3b      	adds	r3, r7, #4
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	f107 020c 	add.w	r2, r7, #12
 8001da2:	200a      	movs	r0, #10
 8001da4:	9000      	str	r0, [sp, #0]
 8001da6:	4804      	ldr	r0, [pc, #16]	; (8001db8 <ssd1306_I2C_WriteMulti+0x8c>)
 8001da8:	f000 ff1a 	bl	8002be0 <HAL_I2C_Master_Transmit>
}
 8001dac:	bf00      	nop
 8001dae:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd90      	pop	{r4, r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20005300 	.word	0x20005300

08001dbc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af02      	add	r7, sp, #8
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	71bb      	strb	r3, [r7, #6]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001dce:	79bb      	ldrb	r3, [r7, #6]
 8001dd0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001dd2:	797b      	ldrb	r3, [r7, #5]
 8001dd4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	b299      	uxth	r1, r3
 8001dda:	f107 020c 	add.w	r2, r7, #12
 8001dde:	230a      	movs	r3, #10
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	2302      	movs	r3, #2
 8001de4:	4803      	ldr	r0, [pc, #12]	; (8001df4 <ssd1306_I2C_Write+0x38>)
 8001de6:	f000 fefb 	bl	8002be0 <HAL_I2C_Master_Transmit>
}
 8001dea:	bf00      	nop
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20005300 	.word	0x20005300

08001df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <HAL_MspInit+0x54>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	4a11      	ldr	r2, [pc, #68]	; (8001e4c <HAL_MspInit+0x54>)
 8001e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0e:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <HAL_MspInit+0x54>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e16:	607b      	str	r3, [r7, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	603b      	str	r3, [r7, #0]
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_MspInit+0x54>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <HAL_MspInit+0x54>)
 8001e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e28:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2a:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <HAL_MspInit+0x54>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e32:	603b      	str	r3, [r7, #0]
 8001e34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e36:	2200      	movs	r2, #0
 8001e38:	210f      	movs	r1, #15
 8001e3a:	f06f 0001 	mvn.w	r0, #1
 8001e3e:	f000 fb31 	bl	80024a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800

08001e50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08c      	sub	sp, #48	; 0x30
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8001e60:	2200      	movs	r2, #0
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	201d      	movs	r0, #29
 8001e66:	f000 fb1d 	bl	80024a4 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e6a:	201d      	movs	r0, #29
 8001e6c:	f000 fb36 	bl	80024dc <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001e70:	2300      	movs	r3, #0
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	4b1e      	ldr	r3, [pc, #120]	; (8001ef0 <HAL_InitTick+0xa0>)
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	4a1d      	ldr	r2, [pc, #116]	; (8001ef0 <HAL_InitTick+0xa0>)
 8001e7a:	f043 0302 	orr.w	r3, r3, #2
 8001e7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e80:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <HAL_InitTick+0xa0>)
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e8c:	f107 0210 	add.w	r2, r7, #16
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	4611      	mov	r1, r2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f003 f87a 	bl	8004f90 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e9c:	f003 f850 	bl	8004f40 <HAL_RCC_GetPCLK1Freq>
 8001ea0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea4:	4a13      	ldr	r2, [pc, #76]	; (8001ef4 <HAL_InitTick+0xa4>)
 8001ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eaa:	0c9b      	lsrs	r3, r3, #18
 8001eac:	3b01      	subs	r3, #1
 8001eae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001eb0:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <HAL_InitTick+0xa8>)
 8001eb2:	4a12      	ldr	r2, [pc, #72]	; (8001efc <HAL_InitTick+0xac>)
 8001eb4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001eb6:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <HAL_InitTick+0xa8>)
 8001eb8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ebc:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001ebe:	4a0e      	ldr	r2, [pc, #56]	; (8001ef8 <HAL_InitTick+0xa8>)
 8001ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec2:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <HAL_InitTick+0xa8>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eca:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <HAL_InitTick+0xa8>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8001ed0:	4809      	ldr	r0, [pc, #36]	; (8001ef8 <HAL_InitTick+0xa8>)
 8001ed2:	f003 f918 	bl	8005106 <HAL_TIM_Base_Init>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d104      	bne.n	8001ee6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8001edc:	4806      	ldr	r0, [pc, #24]	; (8001ef8 <HAL_InitTick+0xa8>)
 8001ede:	f003 f96b 	bl	80051b8 <HAL_TIM_Base_Start_IT>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	e000      	b.n	8001ee8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3730      	adds	r7, #48	; 0x30
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	431bde83 	.word	0x431bde83
 8001ef8:	200053ac 	.word	0x200053ac
 8001efc:	40000400 	.word	0x40000400

08001f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f04:	e7fe      	b.n	8001f04 <NMI_Handler+0x4>

08001f06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f0a:	e7fe      	b.n	8001f0a <HardFault_Handler+0x4>

08001f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f10:	e7fe      	b.n	8001f10 <MemManage_Handler+0x4>

08001f12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f16:	e7fe      	b.n	8001f16 <BusFault_Handler+0x4>

08001f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f1c:	e7fe      	b.n	8001f1c <UsageFault_Handler+0x4>

08001f1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f30:	4802      	ldr	r0, [pc, #8]	; (8001f3c <TIM3_IRQHandler+0x10>)
 8001f32:	f003 f9a3 	bl	800527c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	200053ac 	.word	0x200053ac

08001f40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	HAL_UART_RxCpltCallback(&huart1);
 8001f44:	4803      	ldr	r0, [pc, #12]	; (8001f54 <USART1_IRQHandler+0x14>)
 8001f46:	f7ff fb87 	bl	8001658 <HAL_UART_RxCpltCallback>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f4a:	4802      	ldr	r0, [pc, #8]	; (8001f54 <USART1_IRQHandler+0x14>)
 8001f4c:	f003 fbd8 	bl	8005700 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  //GPS_CallBack();
  /* USER CODE END USART1_IRQn 1 */
}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	200053f4 	.word	0x200053f4

08001f58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f5c:	4802      	ldr	r0, [pc, #8]	; (8001f68 <OTG_FS_IRQHandler+0x10>)
 8001f5e:	f001 fbfd 	bl	800375c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	2000594c 	.word	0x2000594c

08001f6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
	return 1;
 8001f70:	2301      	movs	r3, #1
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <_kill>:

int _kill(int pid, int sig)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f86:	f00a fd0b 	bl	800c9a0 <__errno>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2216      	movs	r2, #22
 8001f8e:	601a      	str	r2, [r3, #0]
	return -1;
 8001f90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <_exit>:

void _exit (int status)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff ffe7 	bl	8001f7c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fae:	e7fe      	b.n	8001fae <_exit+0x12>

08001fb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	e00a      	b.n	8001fd8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fc2:	f3af 8000 	nop.w
 8001fc6:	4601      	mov	r1, r0
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	60ba      	str	r2, [r7, #8]
 8001fce:	b2ca      	uxtb	r2, r1
 8001fd0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	dbf0      	blt.n	8001fc2 <_read+0x12>
	}

return len;
 8001fe0:	687b      	ldr	r3, [r7, #4]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b086      	sub	sp, #24
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	60f8      	str	r0, [r7, #12]
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	e009      	b.n	8002010 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	60ba      	str	r2, [r7, #8]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	3301      	adds	r3, #1
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	429a      	cmp	r2, r3
 8002016:	dbf1      	blt.n	8001ffc <_write+0x12>
	}
	return len;
 8002018:	687b      	ldr	r3, [r7, #4]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <_close>:

int _close(int file)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
	return -1;
 800202a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800204a:	605a      	str	r2, [r3, #4]
	return 0;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <_isatty>:

int _isatty(int file)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
	return 1;
 8002062:	2301      	movs	r3, #1
}
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
	return 0;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002094:	4a14      	ldr	r2, [pc, #80]	; (80020e8 <_sbrk+0x5c>)
 8002096:	4b15      	ldr	r3, [pc, #84]	; (80020ec <_sbrk+0x60>)
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020a0:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <_sbrk+0x64>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d102      	bne.n	80020ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <_sbrk+0x64>)
 80020aa:	4a12      	ldr	r2, [pc, #72]	; (80020f4 <_sbrk+0x68>)
 80020ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ae:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <_sbrk+0x64>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4413      	add	r3, r2
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d207      	bcs.n	80020cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020bc:	f00a fc70 	bl	800c9a0 <__errno>
 80020c0:	4603      	mov	r3, r0
 80020c2:	220c      	movs	r2, #12
 80020c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020c6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ca:	e009      	b.n	80020e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020cc:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <_sbrk+0x64>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020d2:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <_sbrk+0x64>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4413      	add	r3, r2
 80020da:	4a05      	ldr	r2, [pc, #20]	; (80020f0 <_sbrk+0x64>)
 80020dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020de:	68fb      	ldr	r3, [r7, #12]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20010000 	.word	0x20010000
 80020ec:	00000400 	.word	0x00000400
 80020f0:	200006e4 	.word	0x200006e4
 80020f4:	20005d68 	.word	0x20005d68

080020f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020fc:	4b06      	ldr	r3, [pc, #24]	; (8002118 <SystemInit+0x20>)
 80020fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002102:	4a05      	ldr	r2, [pc, #20]	; (8002118 <SystemInit+0x20>)
 8002104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002120:	4b12      	ldr	r3, [pc, #72]	; (800216c <MX_USART1_UART_Init+0x50>)
 8002122:	4a13      	ldr	r2, [pc, #76]	; (8002170 <MX_USART1_UART_Init+0x54>)
 8002124:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002126:	4b11      	ldr	r3, [pc, #68]	; (800216c <MX_USART1_UART_Init+0x50>)
 8002128:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800212c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800212e:	4b0f      	ldr	r3, [pc, #60]	; (800216c <MX_USART1_UART_Init+0x50>)
 8002130:	2200      	movs	r2, #0
 8002132:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002134:	4b0d      	ldr	r3, [pc, #52]	; (800216c <MX_USART1_UART_Init+0x50>)
 8002136:	2200      	movs	r2, #0
 8002138:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800213a:	4b0c      	ldr	r3, [pc, #48]	; (800216c <MX_USART1_UART_Init+0x50>)
 800213c:	2200      	movs	r2, #0
 800213e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002140:	4b0a      	ldr	r3, [pc, #40]	; (800216c <MX_USART1_UART_Init+0x50>)
 8002142:	220c      	movs	r2, #12
 8002144:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002146:	4b09      	ldr	r3, [pc, #36]	; (800216c <MX_USART1_UART_Init+0x50>)
 8002148:	2200      	movs	r2, #0
 800214a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800214c:	4b07      	ldr	r3, [pc, #28]	; (800216c <MX_USART1_UART_Init+0x50>)
 800214e:	2200      	movs	r2, #0
 8002150:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002152:	4806      	ldr	r0, [pc, #24]	; (800216c <MX_USART1_UART_Init+0x50>)
 8002154:	f003 fa56 	bl	8005604 <HAL_UART_Init>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800215e:	f7ff fb25 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_MspInit(&huart1);
 8002162:	4802      	ldr	r0, [pc, #8]	; (800216c <MX_USART1_UART_Init+0x50>)
 8002164:	f000 f806 	bl	8002174 <HAL_UART_MspInit>
  /* USER CODE END USART1_Init 2 */

}
 8002168:	bf00      	nop
 800216a:	bd80      	pop	{r7, pc}
 800216c:	200053f4 	.word	0x200053f4
 8002170:	40011000 	.word	0x40011000

08002174 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08a      	sub	sp, #40	; 0x28
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a1d      	ldr	r2, [pc, #116]	; (8002208 <HAL_UART_MspInit+0x94>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d134      	bne.n	8002200 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	4b1c      	ldr	r3, [pc, #112]	; (800220c <HAL_UART_MspInit+0x98>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	4a1b      	ldr	r2, [pc, #108]	; (800220c <HAL_UART_MspInit+0x98>)
 80021a0:	f043 0310 	orr.w	r3, r3, #16
 80021a4:	6453      	str	r3, [r2, #68]	; 0x44
 80021a6:	4b19      	ldr	r3, [pc, #100]	; (800220c <HAL_UART_MspInit+0x98>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	4b15      	ldr	r3, [pc, #84]	; (800220c <HAL_UART_MspInit+0x98>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	4a14      	ldr	r2, [pc, #80]	; (800220c <HAL_UART_MspInit+0x98>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	6313      	str	r3, [r2, #48]	; 0x30
 80021c2:	4b12      	ldr	r3, [pc, #72]	; (800220c <HAL_UART_MspInit+0x98>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021ce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80021d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021dc:	2303      	movs	r3, #3
 80021de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021e0:	2307      	movs	r3, #7
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	4619      	mov	r1, r3
 80021ea:	4809      	ldr	r0, [pc, #36]	; (8002210 <HAL_UART_MspInit+0x9c>)
 80021ec:	f000 fa16 	bl	800261c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80021f0:	2200      	movs	r2, #0
 80021f2:	2105      	movs	r1, #5
 80021f4:	2025      	movs	r0, #37	; 0x25
 80021f6:	f000 f955 	bl	80024a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021fa:	2025      	movs	r0, #37	; 0x25
 80021fc:	f000 f96e 	bl	80024dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002200:	bf00      	nop
 8002202:	3728      	adds	r7, #40	; 0x28
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40011000 	.word	0x40011000
 800220c:	40023800 	.word	0x40023800
 8002210:	40020000 	.word	0x40020000

08002214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002214:	f8df d034 	ldr.w	sp, [pc, #52]	; 800224c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002218:	480d      	ldr	r0, [pc, #52]	; (8002250 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800221a:	490e      	ldr	r1, [pc, #56]	; (8002254 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800221c:	4a0e      	ldr	r2, [pc, #56]	; (8002258 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800221e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002220:	e002      	b.n	8002228 <LoopCopyDataInit>

08002222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002226:	3304      	adds	r3, #4

08002228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800222a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800222c:	d3f9      	bcc.n	8002222 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800222e:	4a0b      	ldr	r2, [pc, #44]	; (800225c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002230:	4c0b      	ldr	r4, [pc, #44]	; (8002260 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002234:	e001      	b.n	800223a <LoopFillZerobss>

08002236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002238:	3204      	adds	r2, #4

0800223a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800223a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800223c:	d3fb      	bcc.n	8002236 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800223e:	f7ff ff5b 	bl	80020f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002242:	f00a fbb3 	bl	800c9ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002246:	f7ff fa17 	bl	8001678 <main>
  bx  lr    
 800224a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800224c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002254:	200002bc 	.word	0x200002bc
  ldr r2, =_sidata
 8002258:	0801292c 	.word	0x0801292c
  ldr r2, =_sbss
 800225c:	200002bc 	.word	0x200002bc
  ldr r4, =_ebss
 8002260:	20005d64 	.word	0x20005d64

08002264 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002264:	e7fe      	b.n	8002264 <ADC_IRQHandler>
	...

08002268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800226c:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <HAL_Init+0x40>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a0d      	ldr	r2, [pc, #52]	; (80022a8 <HAL_Init+0x40>)
 8002272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002276:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002278:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_Init+0x40>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a0a      	ldr	r2, [pc, #40]	; (80022a8 <HAL_Init+0x40>)
 800227e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002282:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002284:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <HAL_Init+0x40>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a07      	ldr	r2, [pc, #28]	; (80022a8 <HAL_Init+0x40>)
 800228a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002290:	2003      	movs	r0, #3
 8002292:	f000 f8fc 	bl	800248e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002296:	2000      	movs	r0, #0
 8002298:	f7ff fdda 	bl	8001e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800229c:	f7ff fdac 	bl	8001df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40023c00 	.word	0x40023c00

080022ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <HAL_IncTick+0x20>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	461a      	mov	r2, r3
 80022b6:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_IncTick+0x24>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4413      	add	r3, r2
 80022bc:	4a04      	ldr	r2, [pc, #16]	; (80022d0 <HAL_IncTick+0x24>)
 80022be:	6013      	str	r3, [r2, #0]
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000010 	.word	0x20000010
 80022d0:	20005438 	.word	0x20005438

080022d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return uwTick;
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <HAL_GetTick+0x14>)
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	20005438 	.word	0x20005438

080022ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022f4:	f7ff ffee 	bl	80022d4 <HAL_GetTick>
 80022f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002304:	d005      	beq.n	8002312 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002306:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <HAL_Delay+0x44>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4413      	add	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002312:	bf00      	nop
 8002314:	f7ff ffde 	bl	80022d4 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	429a      	cmp	r2, r3
 8002322:	d8f7      	bhi.n	8002314 <HAL_Delay+0x28>
  {
  }
}
 8002324:	bf00      	nop
 8002326:	bf00      	nop
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000010 	.word	0x20000010

08002334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002344:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <__NVIC_SetPriorityGrouping+0x44>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002350:	4013      	ands	r3, r2
 8002352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800235c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002366:	4a04      	ldr	r2, [pc, #16]	; (8002378 <__NVIC_SetPriorityGrouping+0x44>)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	60d3      	str	r3, [r2, #12]
}
 800236c:	bf00      	nop
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002380:	4b04      	ldr	r3, [pc, #16]	; (8002394 <__NVIC_GetPriorityGrouping+0x18>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0a1b      	lsrs	r3, r3, #8
 8002386:	f003 0307 	and.w	r3, r3, #7
}
 800238a:	4618      	mov	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	db0b      	blt.n	80023c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	f003 021f 	and.w	r2, r3, #31
 80023b0:	4907      	ldr	r1, [pc, #28]	; (80023d0 <__NVIC_EnableIRQ+0x38>)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	2001      	movs	r0, #1
 80023ba:	fa00 f202 	lsl.w	r2, r0, r2
 80023be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	e000e100 	.word	0xe000e100

080023d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	6039      	str	r1, [r7, #0]
 80023de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	db0a      	blt.n	80023fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	490c      	ldr	r1, [pc, #48]	; (8002420 <__NVIC_SetPriority+0x4c>)
 80023ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f2:	0112      	lsls	r2, r2, #4
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	440b      	add	r3, r1
 80023f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023fc:	e00a      	b.n	8002414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	b2da      	uxtb	r2, r3
 8002402:	4908      	ldr	r1, [pc, #32]	; (8002424 <__NVIC_SetPriority+0x50>)
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	3b04      	subs	r3, #4
 800240c:	0112      	lsls	r2, r2, #4
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	440b      	add	r3, r1
 8002412:	761a      	strb	r2, [r3, #24]
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	e000e100 	.word	0xe000e100
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002428:	b480      	push	{r7}
 800242a:	b089      	sub	sp, #36	; 0x24
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f1c3 0307 	rsb	r3, r3, #7
 8002442:	2b04      	cmp	r3, #4
 8002444:	bf28      	it	cs
 8002446:	2304      	movcs	r3, #4
 8002448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3304      	adds	r3, #4
 800244e:	2b06      	cmp	r3, #6
 8002450:	d902      	bls.n	8002458 <NVIC_EncodePriority+0x30>
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3b03      	subs	r3, #3
 8002456:	e000      	b.n	800245a <NVIC_EncodePriority+0x32>
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800245c:	f04f 32ff 	mov.w	r2, #4294967295
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43da      	mvns	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	401a      	ands	r2, r3
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002470:	f04f 31ff 	mov.w	r1, #4294967295
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	fa01 f303 	lsl.w	r3, r1, r3
 800247a:	43d9      	mvns	r1, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002480:	4313      	orrs	r3, r2
         );
}
 8002482:	4618      	mov	r0, r3
 8002484:	3724      	adds	r7, #36	; 0x24
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff ff4c 	bl	8002334 <__NVIC_SetPriorityGrouping>
}
 800249c:	bf00      	nop
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024b6:	f7ff ff61 	bl	800237c <__NVIC_GetPriorityGrouping>
 80024ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	68b9      	ldr	r1, [r7, #8]
 80024c0:	6978      	ldr	r0, [r7, #20]
 80024c2:	f7ff ffb1 	bl	8002428 <NVIC_EncodePriority>
 80024c6:	4602      	mov	r2, r0
 80024c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024cc:	4611      	mov	r1, r2
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff ff80 	bl	80023d4 <__NVIC_SetPriority>
}
 80024d4:	bf00      	nop
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff ff54 	bl	8002398 <__NVIC_EnableIRQ>
}
 80024f0:	bf00      	nop
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002504:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002506:	f7ff fee5 	bl	80022d4 <HAL_GetTick>
 800250a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d008      	beq.n	800252a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2280      	movs	r2, #128	; 0x80
 800251c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e052      	b.n	80025d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0216 	bic.w	r2, r2, #22
 8002538:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	695a      	ldr	r2, [r3, #20]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002548:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	2b00      	cmp	r3, #0
 8002550:	d103      	bne.n	800255a <HAL_DMA_Abort+0x62>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002556:	2b00      	cmp	r3, #0
 8002558:	d007      	beq.n	800256a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0208 	bic.w	r2, r2, #8
 8002568:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0201 	bic.w	r2, r2, #1
 8002578:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800257a:	e013      	b.n	80025a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800257c:	f7ff feaa 	bl	80022d4 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b05      	cmp	r3, #5
 8002588:	d90c      	bls.n	80025a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2220      	movs	r2, #32
 800258e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2203      	movs	r2, #3
 800259c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e015      	b.n	80025d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1e4      	bne.n	800257c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b6:	223f      	movs	r2, #63	; 0x3f
 80025b8:	409a      	lsls	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d004      	beq.n	80025f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2280      	movs	r2, #128	; 0x80
 80025f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e00c      	b.n	8002610 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2205      	movs	r2, #5
 80025fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0201 	bic.w	r2, r2, #1
 800260c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800261c:	b480      	push	{r7}
 800261e:	b089      	sub	sp, #36	; 0x24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800262a:	2300      	movs	r3, #0
 800262c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800262e:	2300      	movs	r3, #0
 8002630:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
 8002636:	e159      	b.n	80028ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002638:	2201      	movs	r2, #1
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	4013      	ands	r3, r2
 800264a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	429a      	cmp	r2, r3
 8002652:	f040 8148 	bne.w	80028e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	2b01      	cmp	r3, #1
 8002660:	d005      	beq.n	800266e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800266a:	2b02      	cmp	r3, #2
 800266c:	d130      	bne.n	80026d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	2203      	movs	r2, #3
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4013      	ands	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026a4:	2201      	movs	r2, #1
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	091b      	lsrs	r3, r3, #4
 80026ba:	f003 0201 	and.w	r2, r3, #1
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d017      	beq.n	800270c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	2203      	movs	r2, #3
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 0303 	and.w	r3, r3, #3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d123      	bne.n	8002760 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	08da      	lsrs	r2, r3, #3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3208      	adds	r2, #8
 8002720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002724:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	220f      	movs	r2, #15
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	691a      	ldr	r2, [r3, #16]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	08da      	lsrs	r2, r3, #3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3208      	adds	r2, #8
 800275a:	69b9      	ldr	r1, [r7, #24]
 800275c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	2203      	movs	r2, #3
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 0203 	and.w	r2, r3, #3
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4313      	orrs	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 80a2 	beq.w	80028e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	4b57      	ldr	r3, [pc, #348]	; (8002904 <HAL_GPIO_Init+0x2e8>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4a56      	ldr	r2, [pc, #344]	; (8002904 <HAL_GPIO_Init+0x2e8>)
 80027ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027b0:	6453      	str	r3, [r2, #68]	; 0x44
 80027b2:	4b54      	ldr	r3, [pc, #336]	; (8002904 <HAL_GPIO_Init+0x2e8>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027be:	4a52      	ldr	r2, [pc, #328]	; (8002908 <HAL_GPIO_Init+0x2ec>)
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	089b      	lsrs	r3, r3, #2
 80027c4:	3302      	adds	r3, #2
 80027c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	220f      	movs	r2, #15
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a49      	ldr	r2, [pc, #292]	; (800290c <HAL_GPIO_Init+0x2f0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d019      	beq.n	800281e <HAL_GPIO_Init+0x202>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a48      	ldr	r2, [pc, #288]	; (8002910 <HAL_GPIO_Init+0x2f4>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d013      	beq.n	800281a <HAL_GPIO_Init+0x1fe>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a47      	ldr	r2, [pc, #284]	; (8002914 <HAL_GPIO_Init+0x2f8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d00d      	beq.n	8002816 <HAL_GPIO_Init+0x1fa>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a46      	ldr	r2, [pc, #280]	; (8002918 <HAL_GPIO_Init+0x2fc>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d007      	beq.n	8002812 <HAL_GPIO_Init+0x1f6>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a45      	ldr	r2, [pc, #276]	; (800291c <HAL_GPIO_Init+0x300>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d101      	bne.n	800280e <HAL_GPIO_Init+0x1f2>
 800280a:	2304      	movs	r3, #4
 800280c:	e008      	b.n	8002820 <HAL_GPIO_Init+0x204>
 800280e:	2307      	movs	r3, #7
 8002810:	e006      	b.n	8002820 <HAL_GPIO_Init+0x204>
 8002812:	2303      	movs	r3, #3
 8002814:	e004      	b.n	8002820 <HAL_GPIO_Init+0x204>
 8002816:	2302      	movs	r3, #2
 8002818:	e002      	b.n	8002820 <HAL_GPIO_Init+0x204>
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <HAL_GPIO_Init+0x204>
 800281e:	2300      	movs	r3, #0
 8002820:	69fa      	ldr	r2, [r7, #28]
 8002822:	f002 0203 	and.w	r2, r2, #3
 8002826:	0092      	lsls	r2, r2, #2
 8002828:	4093      	lsls	r3, r2
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4313      	orrs	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002830:	4935      	ldr	r1, [pc, #212]	; (8002908 <HAL_GPIO_Init+0x2ec>)
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	089b      	lsrs	r3, r3, #2
 8002836:	3302      	adds	r3, #2
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800283e:	4b38      	ldr	r3, [pc, #224]	; (8002920 <HAL_GPIO_Init+0x304>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	43db      	mvns	r3, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4013      	ands	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002862:	4a2f      	ldr	r2, [pc, #188]	; (8002920 <HAL_GPIO_Init+0x304>)
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002868:	4b2d      	ldr	r3, [pc, #180]	; (8002920 <HAL_GPIO_Init+0x304>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800288c:	4a24      	ldr	r2, [pc, #144]	; (8002920 <HAL_GPIO_Init+0x304>)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002892:	4b23      	ldr	r3, [pc, #140]	; (8002920 <HAL_GPIO_Init+0x304>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	43db      	mvns	r3, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4013      	ands	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028b6:	4a1a      	ldr	r2, [pc, #104]	; (8002920 <HAL_GPIO_Init+0x304>)
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028bc:	4b18      	ldr	r3, [pc, #96]	; (8002920 <HAL_GPIO_Init+0x304>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028e0:	4a0f      	ldr	r2, [pc, #60]	; (8002920 <HAL_GPIO_Init+0x304>)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	3301      	adds	r3, #1
 80028ea:	61fb      	str	r3, [r7, #28]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	2b0f      	cmp	r3, #15
 80028f0:	f67f aea2 	bls.w	8002638 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028f4:	bf00      	nop
 80028f6:	bf00      	nop
 80028f8:	3724      	adds	r7, #36	; 0x24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40023800 	.word	0x40023800
 8002908:	40013800 	.word	0x40013800
 800290c:	40020000 	.word	0x40020000
 8002910:	40020400 	.word	0x40020400
 8002914:	40020800 	.word	0x40020800
 8002918:	40020c00 	.word	0x40020c00
 800291c:	40021000 	.word	0x40021000
 8002920:	40013c00 	.word	0x40013c00

08002924 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	460b      	mov	r3, r1
 800292e:	807b      	strh	r3, [r7, #2]
 8002930:	4613      	mov	r3, r2
 8002932:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002934:	787b      	ldrb	r3, [r7, #1]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800293a:	887a      	ldrh	r2, [r7, #2]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002940:	e003      	b.n	800294a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002942:	887b      	ldrh	r3, [r7, #2]
 8002944:	041a      	lsls	r2, r3, #16
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	619a      	str	r2, [r3, #24]
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
	...

08002958 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e12b      	b.n	8002bc2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d106      	bne.n	8002984 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7fe fe22 	bl	80015c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2224      	movs	r2, #36	; 0x24
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0201 	bic.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029bc:	f002 fac0 	bl	8004f40 <HAL_RCC_GetPCLK1Freq>
 80029c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	4a81      	ldr	r2, [pc, #516]	; (8002bcc <HAL_I2C_Init+0x274>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d807      	bhi.n	80029dc <HAL_I2C_Init+0x84>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4a80      	ldr	r2, [pc, #512]	; (8002bd0 <HAL_I2C_Init+0x278>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	bf94      	ite	ls
 80029d4:	2301      	movls	r3, #1
 80029d6:	2300      	movhi	r3, #0
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	e006      	b.n	80029ea <HAL_I2C_Init+0x92>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4a7d      	ldr	r2, [pc, #500]	; (8002bd4 <HAL_I2C_Init+0x27c>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	bf94      	ite	ls
 80029e4:	2301      	movls	r3, #1
 80029e6:	2300      	movhi	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e0e7      	b.n	8002bc2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4a78      	ldr	r2, [pc, #480]	; (8002bd8 <HAL_I2C_Init+0x280>)
 80029f6:	fba2 2303 	umull	r2, r3, r2, r3
 80029fa:	0c9b      	lsrs	r3, r3, #18
 80029fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	4a6a      	ldr	r2, [pc, #424]	; (8002bcc <HAL_I2C_Init+0x274>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d802      	bhi.n	8002a2c <HAL_I2C_Init+0xd4>
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	e009      	b.n	8002a40 <HAL_I2C_Init+0xe8>
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a32:	fb02 f303 	mul.w	r3, r2, r3
 8002a36:	4a69      	ldr	r2, [pc, #420]	; (8002bdc <HAL_I2C_Init+0x284>)
 8002a38:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3c:	099b      	lsrs	r3, r3, #6
 8002a3e:	3301      	adds	r3, #1
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6812      	ldr	r2, [r2, #0]
 8002a44:	430b      	orrs	r3, r1
 8002a46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	495c      	ldr	r1, [pc, #368]	; (8002bcc <HAL_I2C_Init+0x274>)
 8002a5c:	428b      	cmp	r3, r1
 8002a5e:	d819      	bhi.n	8002a94 <HAL_I2C_Init+0x13c>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	1e59      	subs	r1, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a6e:	1c59      	adds	r1, r3, #1
 8002a70:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a74:	400b      	ands	r3, r1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <HAL_I2C_Init+0x138>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	1e59      	subs	r1, r3, #1
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a88:	3301      	adds	r3, #1
 8002a8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a8e:	e051      	b.n	8002b34 <HAL_I2C_Init+0x1dc>
 8002a90:	2304      	movs	r3, #4
 8002a92:	e04f      	b.n	8002b34 <HAL_I2C_Init+0x1dc>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d111      	bne.n	8002ac0 <HAL_I2C_Init+0x168>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	1e58      	subs	r0, r3, #1
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6859      	ldr	r1, [r3, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	440b      	add	r3, r1
 8002aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aae:	3301      	adds	r3, #1
 8002ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	bf0c      	ite	eq
 8002ab8:	2301      	moveq	r3, #1
 8002aba:	2300      	movne	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	e012      	b.n	8002ae6 <HAL_I2C_Init+0x18e>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	1e58      	subs	r0, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6859      	ldr	r1, [r3, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	0099      	lsls	r1, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	bf0c      	ite	eq
 8002ae0:	2301      	moveq	r3, #1
 8002ae2:	2300      	movne	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_I2C_Init+0x196>
 8002aea:	2301      	movs	r3, #1
 8002aec:	e022      	b.n	8002b34 <HAL_I2C_Init+0x1dc>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10e      	bne.n	8002b14 <HAL_I2C_Init+0x1bc>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1e58      	subs	r0, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6859      	ldr	r1, [r3, #4]
 8002afe:	460b      	mov	r3, r1
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	440b      	add	r3, r1
 8002b04:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b08:	3301      	adds	r3, #1
 8002b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b12:	e00f      	b.n	8002b34 <HAL_I2C_Init+0x1dc>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	1e58      	subs	r0, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6859      	ldr	r1, [r3, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	0099      	lsls	r1, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	6809      	ldr	r1, [r1, #0]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69da      	ldr	r2, [r3, #28]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6911      	ldr	r1, [r2, #16]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	68d2      	ldr	r2, [r2, #12]
 8002b6e:	4311      	orrs	r1, r2
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6812      	ldr	r2, [r2, #0]
 8002b74:	430b      	orrs	r3, r1
 8002b76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695a      	ldr	r2, [r3, #20]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0201 	orr.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	000186a0 	.word	0x000186a0
 8002bd0:	001e847f 	.word	0x001e847f
 8002bd4:	003d08ff 	.word	0x003d08ff
 8002bd8:	431bde83 	.word	0x431bde83
 8002bdc:	10624dd3 	.word	0x10624dd3

08002be0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af02      	add	r7, sp, #8
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	607a      	str	r2, [r7, #4]
 8002bea:	461a      	mov	r2, r3
 8002bec:	460b      	mov	r3, r1
 8002bee:	817b      	strh	r3, [r7, #10]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bf4:	f7ff fb6e 	bl	80022d4 <HAL_GetTick>
 8002bf8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b20      	cmp	r3, #32
 8002c04:	f040 80e0 	bne.w	8002dc8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	2319      	movs	r3, #25
 8002c0e:	2201      	movs	r2, #1
 8002c10:	4970      	ldr	r1, [pc, #448]	; (8002dd4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 fa92 	bl	800313c <I2C_WaitOnFlagUntilTimeout>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e0d3      	b.n	8002dca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <HAL_I2C_Master_Transmit+0x50>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e0cc      	b.n	8002dca <HAL_I2C_Master_Transmit+0x1ea>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d007      	beq.n	8002c56 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f042 0201 	orr.w	r2, r2, #1
 8002c54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2221      	movs	r2, #33	; 0x21
 8002c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2210      	movs	r2, #16
 8002c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	893a      	ldrh	r2, [r7, #8]
 8002c86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4a50      	ldr	r2, [pc, #320]	; (8002dd8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c98:	8979      	ldrh	r1, [r7, #10]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	6a3a      	ldr	r2, [r7, #32]
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 f9ca 	bl	8003038 <I2C_MasterRequestWrite>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e08d      	b.n	8002dca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cae:	2300      	movs	r3, #0
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	613b      	str	r3, [r7, #16]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002cc4:	e066      	b.n	8002d94 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	6a39      	ldr	r1, [r7, #32]
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 fb0c 	bl	80032e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00d      	beq.n	8002cf2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d107      	bne.n	8002cee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e06b      	b.n	8002dca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	781a      	ldrb	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b04      	cmp	r3, #4
 8002d2e:	d11b      	bne.n	8002d68 <HAL_I2C_Master_Transmit+0x188>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d017      	beq.n	8002d68 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	781a      	ldrb	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	6a39      	ldr	r1, [r7, #32]
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 fafc 	bl	800336a <I2C_WaitOnBTFFlagUntilTimeout>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00d      	beq.n	8002d94 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d107      	bne.n	8002d90 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d8e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e01a      	b.n	8002dca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d194      	bne.n	8002cc6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002daa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2220      	movs	r2, #32
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	e000      	b.n	8002dca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002dc8:	2302      	movs	r3, #2
  }
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3718      	adds	r7, #24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	00100002 	.word	0x00100002
 8002dd8:	ffff0000 	.word	0xffff0000

08002ddc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08a      	sub	sp, #40	; 0x28
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	607a      	str	r2, [r7, #4]
 8002de6:	603b      	str	r3, [r7, #0]
 8002de8:	460b      	mov	r3, r1
 8002dea:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002dec:	f7ff fa72 	bl	80022d4 <HAL_GetTick>
 8002df0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002df2:	2301      	movs	r3, #1
 8002df4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b20      	cmp	r3, #32
 8002e00:	f040 8111 	bne.w	8003026 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	2319      	movs	r3, #25
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	4988      	ldr	r1, [pc, #544]	; (8003030 <HAL_I2C_IsDeviceReady+0x254>)
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 f994 	bl	800313c <I2C_WaitOnFlagUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	e104      	b.n	8003028 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d101      	bne.n	8002e2c <HAL_I2C_IsDeviceReady+0x50>
 8002e28:	2302      	movs	r3, #2
 8002e2a:	e0fd      	b.n	8003028 <HAL_I2C_IsDeviceReady+0x24c>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d007      	beq.n	8002e52 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f042 0201 	orr.w	r2, r2, #1
 8002e50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2224      	movs	r2, #36	; 0x24
 8002e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4a70      	ldr	r2, [pc, #448]	; (8003034 <HAL_I2C_IsDeviceReady+0x258>)
 8002e74:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e84:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 f952 	bl	800313c <I2C_WaitOnFlagUntilTimeout>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00d      	beq.n	8002eba <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eac:	d103      	bne.n	8002eb6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eb4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e0b6      	b.n	8003028 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eba:	897b      	ldrh	r3, [r7, #10]
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ec8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002eca:	f7ff fa03 	bl	80022d4 <HAL_GetTick>
 8002ece:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	bf0c      	ite	eq
 8002ede:	2301      	moveq	r3, #1
 8002ee0:	2300      	movne	r3, #0
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef4:	bf0c      	ite	eq
 8002ef6:	2301      	moveq	r3, #1
 8002ef8:	2300      	movne	r3, #0
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002efe:	e025      	b.n	8002f4c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f00:	f7ff f9e8 	bl	80022d4 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d302      	bcc.n	8002f16 <HAL_I2C_IsDeviceReady+0x13a>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d103      	bne.n	8002f1e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	22a0      	movs	r2, #160	; 0xa0
 8002f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	bf0c      	ite	eq
 8002f2c:	2301      	moveq	r3, #1
 8002f2e:	2300      	movne	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f42:	bf0c      	ite	eq
 8002f44:	2301      	moveq	r3, #1
 8002f46:	2300      	movne	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2ba0      	cmp	r3, #160	; 0xa0
 8002f56:	d005      	beq.n	8002f64 <HAL_I2C_IsDeviceReady+0x188>
 8002f58:	7dfb      	ldrb	r3, [r7, #23]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d102      	bne.n	8002f64 <HAL_I2C_IsDeviceReady+0x188>
 8002f5e:	7dbb      	ldrb	r3, [r7, #22]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0cd      	beq.n	8002f00 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d129      	bne.n	8002fce <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f88:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	613b      	str	r3, [r7, #16]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	613b      	str	r3, [r7, #16]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	613b      	str	r3, [r7, #16]
 8002f9e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	2319      	movs	r3, #25
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	4921      	ldr	r1, [pc, #132]	; (8003030 <HAL_I2C_IsDeviceReady+0x254>)
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 f8c6 	bl	800313c <I2C_WaitOnFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e036      	b.n	8003028 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	e02c      	b.n	8003028 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fdc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fe6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	2319      	movs	r3, #25
 8002fee:	2201      	movs	r2, #1
 8002ff0:	490f      	ldr	r1, [pc, #60]	; (8003030 <HAL_I2C_IsDeviceReady+0x254>)
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 f8a2 	bl	800313c <I2C_WaitOnFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e012      	b.n	8003028 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	3301      	adds	r3, #1
 8003006:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	429a      	cmp	r2, r3
 800300e:	f4ff af32 	bcc.w	8002e76 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2220      	movs	r2, #32
 8003016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e000      	b.n	8003028 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003026:	2302      	movs	r3, #2
  }
}
 8003028:	4618      	mov	r0, r3
 800302a:	3720      	adds	r7, #32
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	00100002 	.word	0x00100002
 8003034:	ffff0000 	.word	0xffff0000

08003038 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b088      	sub	sp, #32
 800303c:	af02      	add	r7, sp, #8
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	607a      	str	r2, [r7, #4]
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	460b      	mov	r3, r1
 8003046:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2b08      	cmp	r3, #8
 8003052:	d006      	beq.n	8003062 <I2C_MasterRequestWrite+0x2a>
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d003      	beq.n	8003062 <I2C_MasterRequestWrite+0x2a>
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003060:	d108      	bne.n	8003074 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	e00b      	b.n	800308c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003078:	2b12      	cmp	r3, #18
 800307a:	d107      	bne.n	800308c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800308a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 f84f 	bl	800313c <I2C_WaitOnFlagUntilTimeout>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00d      	beq.n	80030c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030b2:	d103      	bne.n	80030bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e035      	b.n	800312c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030c8:	d108      	bne.n	80030dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030ca:	897b      	ldrh	r3, [r7, #10]
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	461a      	mov	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030d8:	611a      	str	r2, [r3, #16]
 80030da:	e01b      	b.n	8003114 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030dc:	897b      	ldrh	r3, [r7, #10]
 80030de:	11db      	asrs	r3, r3, #7
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	f003 0306 	and.w	r3, r3, #6
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	f063 030f 	orn	r3, r3, #15
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	490e      	ldr	r1, [pc, #56]	; (8003134 <I2C_MasterRequestWrite+0xfc>)
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 f875 	bl	80031ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e010      	b.n	800312c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800310a:	897b      	ldrh	r3, [r7, #10]
 800310c:	b2da      	uxtb	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	4907      	ldr	r1, [pc, #28]	; (8003138 <I2C_MasterRequestWrite+0x100>)
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 f865 	bl	80031ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e000      	b.n	800312c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	00010008 	.word	0x00010008
 8003138:	00010002 	.word	0x00010002

0800313c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	603b      	str	r3, [r7, #0]
 8003148:	4613      	mov	r3, r2
 800314a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800314c:	e025      	b.n	800319a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003154:	d021      	beq.n	800319a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003156:	f7ff f8bd 	bl	80022d4 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d302      	bcc.n	800316c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d116      	bne.n	800319a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2220      	movs	r2, #32
 8003176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	f043 0220 	orr.w	r2, r3, #32
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e023      	b.n	80031e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	0c1b      	lsrs	r3, r3, #16
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d10d      	bne.n	80031c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	43da      	mvns	r2, r3
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	4013      	ands	r3, r2
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	bf0c      	ite	eq
 80031b6:	2301      	moveq	r3, #1
 80031b8:	2300      	movne	r3, #0
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	461a      	mov	r2, r3
 80031be:	e00c      	b.n	80031da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	43da      	mvns	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4013      	ands	r3, r2
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	bf0c      	ite	eq
 80031d2:	2301      	moveq	r3, #1
 80031d4:	2300      	movne	r3, #0
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	461a      	mov	r2, r3
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d0b6      	beq.n	800314e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b084      	sub	sp, #16
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
 80031f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031f8:	e051      	b.n	800329e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003208:	d123      	bne.n	8003252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003218:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003222:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2220      	movs	r2, #32
 800322e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	f043 0204 	orr.w	r2, r3, #4
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e046      	b.n	80032e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003258:	d021      	beq.n	800329e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800325a:	f7ff f83b 	bl	80022d4 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	429a      	cmp	r2, r3
 8003268:	d302      	bcc.n	8003270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d116      	bne.n	800329e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2220      	movs	r2, #32
 800327a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	f043 0220 	orr.w	r2, r3, #32
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e020      	b.n	80032e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	0c1b      	lsrs	r3, r3, #16
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d10c      	bne.n	80032c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	43da      	mvns	r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	4013      	ands	r3, r2
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	bf14      	ite	ne
 80032ba:	2301      	movne	r3, #1
 80032bc:	2300      	moveq	r3, #0
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	e00b      	b.n	80032da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	43da      	mvns	r2, r3
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	4013      	ands	r3, r2
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	bf14      	ite	ne
 80032d4:	2301      	movne	r3, #1
 80032d6:	2300      	moveq	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d18d      	bne.n	80031fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032f4:	e02d      	b.n	8003352 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 f878 	bl	80033ec <I2C_IsAcknowledgeFailed>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e02d      	b.n	8003362 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330c:	d021      	beq.n	8003352 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800330e:	f7fe ffe1 	bl	80022d4 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	429a      	cmp	r2, r3
 800331c:	d302      	bcc.n	8003324 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d116      	bne.n	8003352 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2220      	movs	r2, #32
 800332e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f043 0220 	orr.w	r2, r3, #32
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e007      	b.n	8003362 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800335c:	2b80      	cmp	r3, #128	; 0x80
 800335e:	d1ca      	bne.n	80032f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b084      	sub	sp, #16
 800336e:	af00      	add	r7, sp, #0
 8003370:	60f8      	str	r0, [r7, #12]
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003376:	e02d      	b.n	80033d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 f837 	bl	80033ec <I2C_IsAcknowledgeFailed>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e02d      	b.n	80033e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338e:	d021      	beq.n	80033d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003390:	f7fe ffa0 	bl	80022d4 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	429a      	cmp	r2, r3
 800339e:	d302      	bcc.n	80033a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d116      	bne.n	80033d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c0:	f043 0220 	orr.w	r2, r3, #32
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e007      	b.n	80033e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	f003 0304 	and.w	r3, r3, #4
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d1ca      	bne.n	8003378 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003402:	d11b      	bne.n	800343c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800340c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	f043 0204 	orr.w	r2, r3, #4
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e000      	b.n	800343e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800344a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800344c:	b08f      	sub	sp, #60	; 0x3c
 800344e:	af0a      	add	r7, sp, #40	; 0x28
 8003450:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e10f      	b.n	800367c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d106      	bne.n	800347c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f008 ff9e 	bl	800c3b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2203      	movs	r2, #3
 8003480:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348c:	2b00      	cmp	r3, #0
 800348e:	d102      	bne.n	8003496 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f002 ff53 	bl	8006346 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	603b      	str	r3, [r7, #0]
 80034a6:	687e      	ldr	r6, [r7, #4]
 80034a8:	466d      	mov	r5, sp
 80034aa:	f106 0410 	add.w	r4, r6, #16
 80034ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80034be:	1d33      	adds	r3, r6, #4
 80034c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034c2:	6838      	ldr	r0, [r7, #0]
 80034c4:	f002 fe2a 	bl	800611c <USB_CoreInit>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d005      	beq.n	80034da <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2202      	movs	r2, #2
 80034d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e0d0      	b.n	800367c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2100      	movs	r1, #0
 80034e0:	4618      	mov	r0, r3
 80034e2:	f002 ff41 	bl	8006368 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034e6:	2300      	movs	r3, #0
 80034e8:	73fb      	strb	r3, [r7, #15]
 80034ea:	e04a      	b.n	8003582 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034ec:	7bfa      	ldrb	r2, [r7, #15]
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	1a9b      	subs	r3, r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	333d      	adds	r3, #61	; 0x3d
 80034fc:	2201      	movs	r2, #1
 80034fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003500:	7bfa      	ldrb	r2, [r7, #15]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	333c      	adds	r3, #60	; 0x3c
 8003510:	7bfa      	ldrb	r2, [r7, #15]
 8003512:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003514:	7bfa      	ldrb	r2, [r7, #15]
 8003516:	7bfb      	ldrb	r3, [r7, #15]
 8003518:	b298      	uxth	r0, r3
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	4613      	mov	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	1a9b      	subs	r3, r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	3342      	adds	r3, #66	; 0x42
 8003528:	4602      	mov	r2, r0
 800352a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800352c:	7bfa      	ldrb	r2, [r7, #15]
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	1a9b      	subs	r3, r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	333f      	adds	r3, #63	; 0x3f
 800353c:	2200      	movs	r2, #0
 800353e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003540:	7bfa      	ldrb	r2, [r7, #15]
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	4613      	mov	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	1a9b      	subs	r3, r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	3344      	adds	r3, #68	; 0x44
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003554:	7bfa      	ldrb	r2, [r7, #15]
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	1a9b      	subs	r3, r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	3348      	adds	r3, #72	; 0x48
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003568:	7bfa      	ldrb	r2, [r7, #15]
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	4613      	mov	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	1a9b      	subs	r3, r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	3350      	adds	r3, #80	; 0x50
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800357c:	7bfb      	ldrb	r3, [r7, #15]
 800357e:	3301      	adds	r3, #1
 8003580:	73fb      	strb	r3, [r7, #15]
 8003582:	7bfa      	ldrb	r2, [r7, #15]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	429a      	cmp	r2, r3
 800358a:	d3af      	bcc.n	80034ec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800358c:	2300      	movs	r3, #0
 800358e:	73fb      	strb	r3, [r7, #15]
 8003590:	e044      	b.n	800361c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003592:	7bfa      	ldrb	r2, [r7, #15]
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	1a9b      	subs	r3, r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80035a4:	2200      	movs	r2, #0
 80035a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035a8:	7bfa      	ldrb	r2, [r7, #15]
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	1a9b      	subs	r3, r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80035ba:	7bfa      	ldrb	r2, [r7, #15]
 80035bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035be:	7bfa      	ldrb	r2, [r7, #15]
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80035d0:	2200      	movs	r2, #0
 80035d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035d4:	7bfa      	ldrb	r2, [r7, #15]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035ea:	7bfa      	ldrb	r2, [r7, #15]
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	1a9b      	subs	r3, r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003600:	7bfa      	ldrb	r2, [r7, #15]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	1a9b      	subs	r3, r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003612:	2200      	movs	r2, #0
 8003614:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003616:	7bfb      	ldrb	r3, [r7, #15]
 8003618:	3301      	adds	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
 800361c:	7bfa      	ldrb	r2, [r7, #15]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	429a      	cmp	r2, r3
 8003624:	d3b5      	bcc.n	8003592 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	603b      	str	r3, [r7, #0]
 800362c:	687e      	ldr	r6, [r7, #4]
 800362e:	466d      	mov	r5, sp
 8003630:	f106 0410 	add.w	r4, r6, #16
 8003634:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003636:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003638:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800363a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800363c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003640:	e885 0003 	stmia.w	r5, {r0, r1}
 8003644:	1d33      	adds	r3, r6, #4
 8003646:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003648:	6838      	ldr	r0, [r7, #0]
 800364a:	f002 feb7 	bl	80063bc <USB_DevInit>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d005      	beq.n	8003660 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e00d      	b.n	800367c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f003 fe23 	bl	80072c0 <USB_DevDisconnect>

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003684 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <HAL_PCD_Start+0x1c>
 800369c:	2302      	movs	r3, #2
 800369e:	e020      	b.n	80036e2 <HAL_PCD_Start+0x5e>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d109      	bne.n	80036c4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d005      	beq.n	80036c4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f002 fe2b 	bl	8006324 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f003 fdd3 	bl	800727e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b084      	sub	sp, #16
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d101      	bne.n	8003706 <HAL_PCD_Stop+0x1c>
 8003702:	2302      	movs	r3, #2
 8003704:	e026      	b.n	8003754 <HAL_PCD_Stop+0x6a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f002 fe17 	bl	8006346 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f003 fdcf 	bl	80072c0 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2110      	movs	r1, #16
 8003728:	4618      	mov	r0, r3
 800372a:	f002 ffab 	bl	8006684 <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003732:	2b01      	cmp	r3, #1
 8003734:	d109      	bne.n	800374a <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800373a:	2b01      	cmp	r3, #1
 800373c:	d005      	beq.n	800374a <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003742:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	639a      	str	r2, [r3, #56]	; 0x38
  }
  __HAL_UNLOCK(hpcd);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800375c:	b590      	push	{r4, r7, lr}
 800375e:	b08d      	sub	sp, #52	; 0x34
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f003 fe58 	bl	8007428 <USB_GetMode>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	f040 839d 	bne.w	8003eba <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f003 fdbc 	bl	8007302 <USB_ReadInterrupts>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 8393 	beq.w	8003eb8 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f003 fdb3 	bl	8007302 <USB_ReadInterrupts>
 800379c:	4603      	mov	r3, r0
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d107      	bne.n	80037b6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	695a      	ldr	r2, [r3, #20]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f002 0202 	and.w	r2, r2, #2
 80037b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f003 fda1 	bl	8007302 <USB_ReadInterrupts>
 80037c0:	4603      	mov	r3, r0
 80037c2:	f003 0310 	and.w	r3, r3, #16
 80037c6:	2b10      	cmp	r3, #16
 80037c8:	d161      	bne.n	800388e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	699a      	ldr	r2, [r3, #24]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0210 	bic.w	r2, r2, #16
 80037d8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	f003 020f 	and.w	r2, r3, #15
 80037e6:	4613      	mov	r3, r2
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	1a9b      	subs	r3, r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	4413      	add	r3, r2
 80037f6:	3304      	adds	r3, #4
 80037f8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	0c5b      	lsrs	r3, r3, #17
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	2b02      	cmp	r3, #2
 8003804:	d124      	bne.n	8003850 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800380c:	4013      	ands	r3, r2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d035      	beq.n	800387e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	091b      	lsrs	r3, r3, #4
 800381a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800381c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003820:	b29b      	uxth	r3, r3
 8003822:	461a      	mov	r2, r3
 8003824:	6a38      	ldr	r0, [r7, #32]
 8003826:	f003 fc07 	bl	8007038 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	091b      	lsrs	r3, r3, #4
 8003832:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003836:	441a      	add	r2, r3
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	699a      	ldr	r2, [r3, #24]
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	091b      	lsrs	r3, r3, #4
 8003844:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003848:	441a      	add	r2, r3
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	619a      	str	r2, [r3, #24]
 800384e:	e016      	b.n	800387e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	0c5b      	lsrs	r3, r3, #17
 8003854:	f003 030f 	and.w	r3, r3, #15
 8003858:	2b06      	cmp	r3, #6
 800385a:	d110      	bne.n	800387e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003862:	2208      	movs	r2, #8
 8003864:	4619      	mov	r1, r3
 8003866:	6a38      	ldr	r0, [r7, #32]
 8003868:	f003 fbe6 	bl	8007038 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	699a      	ldr	r2, [r3, #24]
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	091b      	lsrs	r3, r3, #4
 8003874:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003878:	441a      	add	r2, r3
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	699a      	ldr	r2, [r3, #24]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f042 0210 	orr.w	r2, r2, #16
 800388c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f003 fd35 	bl	8007302 <USB_ReadInterrupts>
 8003898:	4603      	mov	r3, r0
 800389a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800389e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80038a2:	d16e      	bne.n	8003982 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f003 fd3b 	bl	8007328 <USB_ReadDevAllOutEpInterrupt>
 80038b2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80038b4:	e062      	b.n	800397c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80038b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d057      	beq.n	8003970 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	4611      	mov	r1, r2
 80038ca:	4618      	mov	r0, r3
 80038cc:	f003 fd60 	bl	8007390 <USB_ReadDevOutEPInterrupt>
 80038d0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00c      	beq.n	80038f6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	015a      	lsls	r2, r3, #5
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	4413      	add	r3, r2
 80038e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e8:	461a      	mov	r2, r3
 80038ea:	2301      	movs	r3, #1
 80038ec:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80038ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 fd4f 	bl	8004394 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f003 0308 	and.w	r3, r3, #8
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00c      	beq.n	800391a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	4413      	add	r3, r2
 8003908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800390c:	461a      	mov	r2, r3
 800390e:	2308      	movs	r3, #8
 8003910:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003912:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 fe49 	bl	80045ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f003 0310 	and.w	r3, r3, #16
 8003920:	2b00      	cmp	r3, #0
 8003922:	d008      	beq.n	8003936 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	4413      	add	r3, r2
 800392c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003930:	461a      	mov	r2, r3
 8003932:	2310      	movs	r3, #16
 8003934:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f003 0320 	and.w	r3, r3, #32
 800393c:	2b00      	cmp	r3, #0
 800393e:	d008      	beq.n	8003952 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	015a      	lsls	r2, r3, #5
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	4413      	add	r3, r2
 8003948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800394c:	461a      	mov	r2, r3
 800394e:	2320      	movs	r3, #32
 8003950:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d009      	beq.n	8003970 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	4413      	add	r3, r2
 8003964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003968:	461a      	mov	r2, r3
 800396a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800396e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	3301      	adds	r3, #1
 8003974:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003978:	085b      	lsrs	r3, r3, #1
 800397a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800397c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397e:	2b00      	cmp	r3, #0
 8003980:	d199      	bne.n	80038b6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f003 fcbb 	bl	8007302 <USB_ReadInterrupts>
 800398c:	4603      	mov	r3, r0
 800398e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003992:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003996:	f040 80c0 	bne.w	8003b1a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f003 fcdc 	bl	800735c <USB_ReadDevAllInEpInterrupt>
 80039a4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80039aa:	e0b2      	b.n	8003b12 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80039ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 80a7 	beq.w	8003b06 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039be:	b2d2      	uxtb	r2, r2
 80039c0:	4611      	mov	r1, r2
 80039c2:	4618      	mov	r0, r3
 80039c4:	f003 fd02 	bl	80073cc <USB_ReadDevInEPInterrupt>
 80039c8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d057      	beq.n	8003a84 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	2201      	movs	r2, #1
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	43db      	mvns	r3, r3
 80039ee:	69f9      	ldr	r1, [r7, #28]
 80039f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039f4:	4013      	ands	r3, r2
 80039f6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a04:	461a      	mov	r2, r3
 8003a06:	2301      	movs	r3, #1
 8003a08:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d132      	bne.n	8003a78 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a16:	4613      	mov	r3, r2
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	1a9b      	subs	r3, r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	440b      	add	r3, r1
 8003a20:	3348      	adds	r3, #72	; 0x48
 8003a22:	6819      	ldr	r1, [r3, #0]
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a28:	4613      	mov	r3, r2
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	1a9b      	subs	r3, r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4403      	add	r3, r0
 8003a32:	3344      	adds	r3, #68	; 0x44
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4419      	add	r1, r3
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	1a9b      	subs	r3, r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4403      	add	r3, r0
 8003a46:	3348      	adds	r3, #72	; 0x48
 8003a48:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d113      	bne.n	8003a78 <HAL_PCD_IRQHandler+0x31c>
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a54:	4613      	mov	r3, r2
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	1a9b      	subs	r3, r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	3350      	adds	r3, #80	; 0x50
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d108      	bne.n	8003a78 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6818      	ldr	r0, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a70:	461a      	mov	r2, r3
 8003a72:	2101      	movs	r1, #1
 8003a74:	f003 fd0a 	bl	800748c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f008 fd1b 	bl	800c4ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d008      	beq.n	8003aa0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	015a      	lsls	r2, r3, #5
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	4413      	add	r3, r2
 8003a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	2308      	movs	r3, #8
 8003a9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	f003 0310 	and.w	r3, r3, #16
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d008      	beq.n	8003abc <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	015a      	lsls	r2, r3, #5
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	2310      	movs	r3, #16
 8003aba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d008      	beq.n	8003ad8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	015a      	lsls	r2, r3, #5
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	4413      	add	r3, r2
 8003ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	2340      	movs	r3, #64	; 0x40
 8003ad6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d008      	beq.n	8003af4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	015a      	lsls	r2, r3, #5
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	4413      	add	r3, r2
 8003aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aee:	461a      	mov	r2, r3
 8003af0:	2302      	movs	r3, #2
 8003af2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003afe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 fbb9 	bl	8004278 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	3301      	adds	r3, #1
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0e:	085b      	lsrs	r3, r3, #1
 8003b10:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f47f af49 	bne.w	80039ac <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f003 fbef 	bl	8007302 <USB_ReadInterrupts>
 8003b24:	4603      	mov	r3, r0
 8003b26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b2e:	d122      	bne.n	8003b76 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	69fa      	ldr	r2, [r7, #28]
 8003b3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b3e:	f023 0301 	bic.w	r3, r3, #1
 8003b42:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d108      	bne.n	8003b60 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b56:	2100      	movs	r1, #0
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 fdc5 	bl	80046e8 <HAL_PCDEx_LPM_Callback>
 8003b5e:	e002      	b.n	8003b66 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f008 fd17 	bl	800c594 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695a      	ldr	r2, [r3, #20]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003b74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f003 fbc1 	bl	8007302 <USB_ReadInterrupts>
 8003b80:	4603      	mov	r3, r0
 8003b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b8a:	d112      	bne.n	8003bb2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d102      	bne.n	8003ba2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f008 fcd3 	bl	800c548 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695a      	ldr	r2, [r3, #20]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003bb0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f003 fba3 	bl	8007302 <USB_ReadInterrupts>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc6:	f040 80c7 	bne.w	8003d58 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	69fa      	ldr	r2, [r7, #28]
 8003bd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bd8:	f023 0301 	bic.w	r3, r3, #1
 8003bdc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2110      	movs	r1, #16
 8003be4:	4618      	mov	r0, r3
 8003be6:	f002 fd4d 	bl	8006684 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bea:	2300      	movs	r3, #0
 8003bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bee:	e056      	b.n	8003c9e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf2:	015a      	lsls	r2, r3, #5
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c02:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c14:	0151      	lsls	r1, r2, #5
 8003c16:	69fa      	ldr	r2, [r7, #28]
 8003c18:	440a      	add	r2, r1
 8003c1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c22:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c26:	015a      	lsls	r2, r3, #5
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c34:	0151      	lsls	r1, r2, #5
 8003c36:	69fa      	ldr	r2, [r7, #28]
 8003c38:	440a      	add	r2, r1
 8003c3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c42:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c50:	461a      	mov	r2, r3
 8003c52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c56:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c68:	0151      	lsls	r1, r2, #5
 8003c6a:	69fa      	ldr	r2, [r7, #28]
 8003c6c:	440a      	add	r2, r1
 8003c6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c76:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c88:	0151      	lsls	r1, r2, #5
 8003c8a:	69fa      	ldr	r2, [r7, #28]
 8003c8c:	440a      	add	r2, r1
 8003c8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c96:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d3a3      	bcc.n	8003bf0 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	69fa      	ldr	r2, [r7, #28]
 8003cb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cb6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003cba:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d016      	beq.n	8003cf2 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cce:	69fa      	ldr	r2, [r7, #28]
 8003cd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cd4:	f043 030b 	orr.w	r3, r3, #11
 8003cd8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce4:	69fa      	ldr	r2, [r7, #28]
 8003ce6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cea:	f043 030b 	orr.w	r3, r3, #11
 8003cee:	6453      	str	r3, [r2, #68]	; 0x44
 8003cf0:	e015      	b.n	8003d1e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	69fa      	ldr	r2, [r7, #28]
 8003cfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d04:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003d08:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	69fa      	ldr	r2, [r7, #28]
 8003d14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d18:	f043 030b 	orr.w	r3, r3, #11
 8003d1c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	69fa      	ldr	r2, [r7, #28]
 8003d28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d2c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d30:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6818      	ldr	r0, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d42:	461a      	mov	r2, r3
 8003d44:	f003 fba2 	bl	800748c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	695a      	ldr	r2, [r3, #20]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003d56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f003 fad0 	bl	8007302 <USB_ReadInterrupts>
 8003d62:	4603      	mov	r3, r0
 8003d64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d6c:	d124      	bne.n	8003db8 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f003 fb66 	bl	8007444 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f002 fce2 	bl	8006746 <USB_GetDevSpeed>
 8003d82:	4603      	mov	r3, r0
 8003d84:	461a      	mov	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681c      	ldr	r4, [r3, #0]
 8003d8e:	f001 f8cb 	bl	8004f28 <HAL_RCC_GetHCLKFreq>
 8003d92:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	4620      	mov	r0, r4
 8003d9e:	f002 fa1f 	bl	80061e0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f008 fbb1 	bl	800c50a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	695a      	ldr	r2, [r3, #20]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003db6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f003 faa0 	bl	8007302 <USB_ReadInterrupts>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	f003 0308 	and.w	r3, r3, #8
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d10a      	bne.n	8003de2 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f008 fb8e 	bl	800c4ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	695a      	ldr	r2, [r3, #20]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f002 0208 	and.w	r2, r2, #8
 8003de0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f003 fa8b 	bl	8007302 <USB_ReadInterrupts>
 8003dec:	4603      	mov	r3, r0
 8003dee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003df2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003df6:	d10f      	bne.n	8003e18 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	4619      	mov	r1, r3
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f008 fbe6 	bl	800c5d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	695a      	ldr	r2, [r3, #20]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003e16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f003 fa70 	bl	8007302 <USB_ReadInterrupts>
 8003e22:	4603      	mov	r3, r0
 8003e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e2c:	d10f      	bne.n	8003e4e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	4619      	mov	r1, r3
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f008 fbb9 	bl	800c5b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695a      	ldr	r2, [r3, #20]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003e4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f003 fa55 	bl	8007302 <USB_ReadInterrupts>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e62:	d10a      	bne.n	8003e7a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f008 fbc7 	bl	800c5f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695a      	ldr	r2, [r3, #20]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003e78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f003 fa3f 	bl	8007302 <USB_ReadInterrupts>
 8003e84:	4603      	mov	r3, r0
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d115      	bne.n	8003eba <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f008 fbb7 	bl	800c614 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6859      	ldr	r1, [r3, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	605a      	str	r2, [r3, #4]
 8003eb6:	e000      	b.n	8003eba <HAL_PCD_IRQHandler+0x75e>
      return;
 8003eb8:	bf00      	nop
    }
  }
}
 8003eba:	3734      	adds	r7, #52	; 0x34
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd90      	pop	{r4, r7, pc}

08003ec0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d101      	bne.n	8003eda <HAL_PCD_SetAddress+0x1a>
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	e013      	b.n	8003f02 <HAL_PCD_SetAddress+0x42>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	78fa      	ldrb	r2, [r7, #3]
 8003ee6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	78fa      	ldrb	r2, [r7, #3]
 8003ef0:	4611      	mov	r1, r2
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f003 f99d 	bl	8007232 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b084      	sub	sp, #16
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
 8003f12:	4608      	mov	r0, r1
 8003f14:	4611      	mov	r1, r2
 8003f16:	461a      	mov	r2, r3
 8003f18:	4603      	mov	r3, r0
 8003f1a:	70fb      	strb	r3, [r7, #3]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	803b      	strh	r3, [r7, #0]
 8003f20:	4613      	mov	r3, r2
 8003f22:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003f24:	2300      	movs	r3, #0
 8003f26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	da0f      	bge.n	8003f50 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f30:	78fb      	ldrb	r3, [r7, #3]
 8003f32:	f003 020f 	and.w	r2, r3, #15
 8003f36:	4613      	mov	r3, r2
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	1a9b      	subs	r3, r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	3338      	adds	r3, #56	; 0x38
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	4413      	add	r3, r2
 8003f44:	3304      	adds	r3, #4
 8003f46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	705a      	strb	r2, [r3, #1]
 8003f4e:	e00f      	b.n	8003f70 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	f003 020f 	and.w	r2, r3, #15
 8003f56:	4613      	mov	r3, r2
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	1a9b      	subs	r3, r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	4413      	add	r3, r2
 8003f66:	3304      	adds	r3, #4
 8003f68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003f70:	78fb      	ldrb	r3, [r7, #3]
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003f7c:	883a      	ldrh	r2, [r7, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	78ba      	ldrb	r2, [r7, #2]
 8003f86:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	785b      	ldrb	r3, [r3, #1]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d004      	beq.n	8003f9a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003f9a:	78bb      	ldrb	r3, [r7, #2]
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d102      	bne.n	8003fa6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d101      	bne.n	8003fb4 <HAL_PCD_EP_Open+0xaa>
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	e00e      	b.n	8003fd2 <HAL_PCD_EP_Open+0xc8>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68f9      	ldr	r1, [r7, #12]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f002 fbe4 	bl	8006790 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003fd0:	7afb      	ldrb	r3, [r7, #11]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b086      	sub	sp, #24
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	60f8      	str	r0, [r7, #12]
 8003fe2:	607a      	str	r2, [r7, #4]
 8003fe4:	603b      	str	r3, [r7, #0]
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fea:	7afb      	ldrb	r3, [r7, #11]
 8003fec:	f003 020f 	and.w	r2, r3, #15
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	1a9b      	subs	r3, r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	4413      	add	r3, r2
 8004000:	3304      	adds	r3, #4
 8004002:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	2200      	movs	r2, #0
 8004014:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2200      	movs	r2, #0
 800401a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800401c:	7afb      	ldrb	r3, [r7, #11]
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	b2da      	uxtb	r2, r3
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d102      	bne.n	8004036 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004036:	7afb      	ldrb	r3, [r7, #11]
 8004038:	f003 030f 	and.w	r3, r3, #15
 800403c:	2b00      	cmp	r3, #0
 800403e:	d109      	bne.n	8004054 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6818      	ldr	r0, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	b2db      	uxtb	r3, r3
 800404a:	461a      	mov	r2, r3
 800404c:	6979      	ldr	r1, [r7, #20]
 800404e:	f002 fe6b 	bl	8006d28 <USB_EP0StartXfer>
 8004052:	e008      	b.n	8004066 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6818      	ldr	r0, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	b2db      	uxtb	r3, r3
 800405e:	461a      	mov	r2, r3
 8004060:	6979      	ldr	r1, [r7, #20]
 8004062:	f002 fc1d 	bl	80068a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	607a      	str	r2, [r7, #4]
 800407a:	603b      	str	r3, [r7, #0]
 800407c:	460b      	mov	r3, r1
 800407e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004080:	7afb      	ldrb	r3, [r7, #11]
 8004082:	f003 020f 	and.w	r2, r3, #15
 8004086:	4613      	mov	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	1a9b      	subs	r3, r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	3338      	adds	r3, #56	; 0x38
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	4413      	add	r3, r2
 8004094:	3304      	adds	r3, #4
 8004096:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	2200      	movs	r2, #0
 80040a8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	2201      	movs	r2, #1
 80040ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040b0:	7afb      	ldrb	r3, [r7, #11]
 80040b2:	f003 030f 	and.w	r3, r3, #15
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d102      	bne.n	80040ca <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040ca:	7afb      	ldrb	r3, [r7, #11]
 80040cc:	f003 030f 	and.w	r3, r3, #15
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d109      	bne.n	80040e8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6818      	ldr	r0, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	461a      	mov	r2, r3
 80040e0:	6979      	ldr	r1, [r7, #20]
 80040e2:	f002 fe21 	bl	8006d28 <USB_EP0StartXfer>
 80040e6:	e008      	b.n	80040fa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6818      	ldr	r0, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	461a      	mov	r2, r3
 80040f4:	6979      	ldr	r1, [r7, #20]
 80040f6:	f002 fbd3 	bl	80068a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3718      	adds	r7, #24
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	460b      	mov	r3, r1
 800410e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004110:	78fb      	ldrb	r3, [r7, #3]
 8004112:	f003 020f 	and.w	r2, r3, #15
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	429a      	cmp	r2, r3
 800411c:	d901      	bls.n	8004122 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e050      	b.n	80041c4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004122:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004126:	2b00      	cmp	r3, #0
 8004128:	da0f      	bge.n	800414a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800412a:	78fb      	ldrb	r3, [r7, #3]
 800412c:	f003 020f 	and.w	r2, r3, #15
 8004130:	4613      	mov	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	1a9b      	subs	r3, r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	3338      	adds	r3, #56	; 0x38
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	4413      	add	r3, r2
 800413e:	3304      	adds	r3, #4
 8004140:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2201      	movs	r2, #1
 8004146:	705a      	strb	r2, [r3, #1]
 8004148:	e00d      	b.n	8004166 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800414a:	78fa      	ldrb	r2, [r7, #3]
 800414c:	4613      	mov	r3, r2
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	1a9b      	subs	r3, r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	4413      	add	r3, r2
 800415c:	3304      	adds	r3, #4
 800415e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2201      	movs	r2, #1
 800416a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800416c:	78fb      	ldrb	r3, [r7, #3]
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	b2da      	uxtb	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800417e:	2b01      	cmp	r3, #1
 8004180:	d101      	bne.n	8004186 <HAL_PCD_EP_SetStall+0x82>
 8004182:	2302      	movs	r3, #2
 8004184:	e01e      	b.n	80041c4 <HAL_PCD_EP_SetStall+0xc0>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68f9      	ldr	r1, [r7, #12]
 8004194:	4618      	mov	r0, r3
 8004196:	f002 ff78 	bl	800708a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800419a:	78fb      	ldrb	r3, [r7, #3]
 800419c:	f003 030f 	and.w	r3, r3, #15
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10a      	bne.n	80041ba <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6818      	ldr	r0, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	b2d9      	uxtb	r1, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80041b4:	461a      	mov	r2, r3
 80041b6:	f003 f969 	bl	800748c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	460b      	mov	r3, r1
 80041d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80041d8:	78fb      	ldrb	r3, [r7, #3]
 80041da:	f003 020f 	and.w	r2, r3, #15
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d901      	bls.n	80041ea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e042      	b.n	8004270 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	da0f      	bge.n	8004212 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041f2:	78fb      	ldrb	r3, [r7, #3]
 80041f4:	f003 020f 	and.w	r2, r3, #15
 80041f8:	4613      	mov	r3, r2
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	1a9b      	subs	r3, r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	3338      	adds	r3, #56	; 0x38
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	4413      	add	r3, r2
 8004206:	3304      	adds	r3, #4
 8004208:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2201      	movs	r2, #1
 800420e:	705a      	strb	r2, [r3, #1]
 8004210:	e00f      	b.n	8004232 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004212:	78fb      	ldrb	r3, [r7, #3]
 8004214:	f003 020f 	and.w	r2, r3, #15
 8004218:	4613      	mov	r3, r2
 800421a:	00db      	lsls	r3, r3, #3
 800421c:	1a9b      	subs	r3, r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	4413      	add	r3, r2
 8004228:	3304      	adds	r3, #4
 800422a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004238:	78fb      	ldrb	r3, [r7, #3]
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	b2da      	uxtb	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800424a:	2b01      	cmp	r3, #1
 800424c:	d101      	bne.n	8004252 <HAL_PCD_EP_ClrStall+0x86>
 800424e:	2302      	movs	r3, #2
 8004250:	e00e      	b.n	8004270 <HAL_PCD_EP_ClrStall+0xa4>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68f9      	ldr	r1, [r7, #12]
 8004260:	4618      	mov	r0, r3
 8004262:	f002 ff80 	bl	8007166 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b08a      	sub	sp, #40	; 0x28
 800427c:	af02      	add	r7, sp, #8
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	4613      	mov	r3, r2
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	1a9b      	subs	r3, r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	3338      	adds	r3, #56	; 0x38
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	4413      	add	r3, r2
 800429c:	3304      	adds	r3, #4
 800429e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	699a      	ldr	r2, [r3, #24]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d901      	bls.n	80042b0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e06c      	b.n	800438a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	695a      	ldr	r2, [r3, #20]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	69fa      	ldr	r2, [r7, #28]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d902      	bls.n	80042cc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	3303      	adds	r3, #3
 80042d0:	089b      	lsrs	r3, r3, #2
 80042d2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042d4:	e02b      	b.n	800432e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	695a      	ldr	r2, [r3, #20]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	69fa      	ldr	r2, [r7, #28]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d902      	bls.n	80042f2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	3303      	adds	r3, #3
 80042f6:	089b      	lsrs	r3, r3, #2
 80042f8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	68d9      	ldr	r1, [r3, #12]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	b2da      	uxtb	r2, r3
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800430a:	b2db      	uxtb	r3, r3
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	4603      	mov	r3, r0
 8004310:	6978      	ldr	r0, [r7, #20]
 8004312:	f002 fe5c 	bl	8006fce <USB_WritePacket>

    ep->xfer_buff  += len;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	441a      	add	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	699a      	ldr	r2, [r3, #24]
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	441a      	add	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	015a      	lsls	r2, r3, #5
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	4413      	add	r3, r2
 8004336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	b29b      	uxth	r3, r3
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	429a      	cmp	r2, r3
 8004342:	d809      	bhi.n	8004358 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	699a      	ldr	r2, [r3, #24]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800434c:	429a      	cmp	r2, r3
 800434e:	d203      	bcs.n	8004358 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1be      	bne.n	80042d6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	695a      	ldr	r2, [r3, #20]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	429a      	cmp	r2, r3
 8004362:	d811      	bhi.n	8004388 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	2201      	movs	r2, #1
 800436c:	fa02 f303 	lsl.w	r3, r2, r3
 8004370:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004378:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	43db      	mvns	r3, r3
 800437e:	6939      	ldr	r1, [r7, #16]
 8004380:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004384:	4013      	ands	r3, r2
 8004386:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3720      	adds	r7, #32
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
	...

08004394 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	333c      	adds	r3, #60	; 0x3c
 80043ac:	3304      	adds	r3, #4
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	015a      	lsls	r2, r3, #5
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	4413      	add	r3, r2
 80043ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	f040 80a0 	bne.w	800450c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d015      	beq.n	8004402 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4a72      	ldr	r2, [pc, #456]	; (80045a4 <PCD_EP_OutXfrComplete_int+0x210>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	f240 80dd 	bls.w	800459a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f000 80d7 	beq.w	800459a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f8:	461a      	mov	r2, r3
 80043fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043fe:	6093      	str	r3, [r2, #8]
 8004400:	e0cb      	b.n	800459a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	f003 0320 	and.w	r3, r3, #32
 8004408:	2b00      	cmp	r3, #0
 800440a:	d009      	beq.n	8004420 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	4413      	add	r3, r2
 8004414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004418:	461a      	mov	r2, r3
 800441a:	2320      	movs	r3, #32
 800441c:	6093      	str	r3, [r2, #8]
 800441e:	e0bc      	b.n	800459a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004426:	2b00      	cmp	r3, #0
 8004428:	f040 80b7 	bne.w	800459a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4a5d      	ldr	r2, [pc, #372]	; (80045a4 <PCD_EP_OutXfrComplete_int+0x210>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d90f      	bls.n	8004454 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00a      	beq.n	8004454 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	4413      	add	r3, r2
 8004446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800444a:	461a      	mov	r2, r3
 800444c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004450:	6093      	str	r3, [r2, #8]
 8004452:	e0a2      	b.n	800459a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004454:	6879      	ldr	r1, [r7, #4]
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	4613      	mov	r3, r2
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	1a9b      	subs	r3, r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	440b      	add	r3, r1
 8004462:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004466:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	0159      	lsls	r1, r3, #5
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	440b      	add	r3, r1
 8004470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800447a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	4613      	mov	r3, r2
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	1a9b      	subs	r3, r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4403      	add	r3, r0
 800448a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800448e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004490:	6879      	ldr	r1, [r7, #4]
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	4613      	mov	r3, r2
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	1a9b      	subs	r3, r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80044a2:	6819      	ldr	r1, [r3, #0]
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	4613      	mov	r3, r2
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	1a9b      	subs	r3, r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4403      	add	r3, r0
 80044b2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4419      	add	r1, r3
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	4613      	mov	r3, r2
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	1a9b      	subs	r3, r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4403      	add	r3, r0
 80044c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80044cc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d114      	bne.n	80044fe <PCD_EP_OutXfrComplete_int+0x16a>
 80044d4:	6879      	ldr	r1, [r7, #4]
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	4613      	mov	r3, r2
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	1a9b      	subs	r3, r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	440b      	add	r3, r1
 80044e2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d108      	bne.n	80044fe <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6818      	ldr	r0, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80044f6:	461a      	mov	r2, r3
 80044f8:	2101      	movs	r1, #1
 80044fa:	f002 ffc7 	bl	800748c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	4619      	mov	r1, r3
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f007 ffbd 	bl	800c484 <HAL_PCD_DataOutStageCallback>
 800450a:	e046      	b.n	800459a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4a26      	ldr	r2, [pc, #152]	; (80045a8 <PCD_EP_OutXfrComplete_int+0x214>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d124      	bne.n	800455e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00a      	beq.n	8004534 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	4413      	add	r3, r2
 8004526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800452a:	461a      	mov	r2, r3
 800452c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004530:	6093      	str	r3, [r2, #8]
 8004532:	e032      	b.n	800459a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f003 0320 	and.w	r3, r3, #32
 800453a:	2b00      	cmp	r3, #0
 800453c:	d008      	beq.n	8004550 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	015a      	lsls	r2, r3, #5
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	4413      	add	r3, r2
 8004546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800454a:	461a      	mov	r2, r3
 800454c:	2320      	movs	r3, #32
 800454e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	b2db      	uxtb	r3, r3
 8004554:	4619      	mov	r1, r3
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f007 ff94 	bl	800c484 <HAL_PCD_DataOutStageCallback>
 800455c:	e01d      	b.n	800459a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d114      	bne.n	800458e <PCD_EP_OutXfrComplete_int+0x1fa>
 8004564:	6879      	ldr	r1, [r7, #4]
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	4613      	mov	r3, r2
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	1a9b      	subs	r3, r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	440b      	add	r3, r1
 8004572:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d108      	bne.n	800458e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6818      	ldr	r0, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004586:	461a      	mov	r2, r3
 8004588:	2100      	movs	r1, #0
 800458a:	f002 ff7f 	bl	800748c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	b2db      	uxtb	r3, r3
 8004592:	4619      	mov	r1, r3
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f007 ff75 	bl	800c484 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	4f54300a 	.word	0x4f54300a
 80045a8:	4f54310a 	.word	0x4f54310a

080045ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	333c      	adds	r3, #60	; 0x3c
 80045c4:	3304      	adds	r3, #4
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	015a      	lsls	r2, r3, #5
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	4413      	add	r3, r2
 80045d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4a15      	ldr	r2, [pc, #84]	; (8004634 <PCD_EP_OutSetupPacket_int+0x88>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d90e      	bls.n	8004600 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d009      	beq.n	8004600 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f8:	461a      	mov	r2, r3
 80045fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f007 ff2d 	bl	800c460 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4a0a      	ldr	r2, [pc, #40]	; (8004634 <PCD_EP_OutSetupPacket_int+0x88>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d90c      	bls.n	8004628 <PCD_EP_OutSetupPacket_int+0x7c>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d108      	bne.n	8004628 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6818      	ldr	r0, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004620:	461a      	mov	r2, r3
 8004622:	2101      	movs	r1, #1
 8004624:	f002 ff32 	bl	800748c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3718      	adds	r7, #24
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	4f54300a 	.word	0x4f54300a

08004638 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	460b      	mov	r3, r1
 8004642:	70fb      	strb	r3, [r7, #3]
 8004644:	4613      	mov	r3, r2
 8004646:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004650:	78fb      	ldrb	r3, [r7, #3]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d107      	bne.n	8004666 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004656:	883b      	ldrh	r3, [r7, #0]
 8004658:	0419      	lsls	r1, r3, #16
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	430a      	orrs	r2, r1
 8004662:	629a      	str	r2, [r3, #40]	; 0x28
 8004664:	e028      	b.n	80046b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466c:	0c1b      	lsrs	r3, r3, #16
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	4413      	add	r3, r2
 8004672:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004674:	2300      	movs	r3, #0
 8004676:	73fb      	strb	r3, [r7, #15]
 8004678:	e00d      	b.n	8004696 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	7bfb      	ldrb	r3, [r7, #15]
 8004680:	3340      	adds	r3, #64	; 0x40
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	0c1b      	lsrs	r3, r3, #16
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	4413      	add	r3, r2
 800468e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004690:	7bfb      	ldrb	r3, [r7, #15]
 8004692:	3301      	adds	r3, #1
 8004694:	73fb      	strb	r3, [r7, #15]
 8004696:	7bfa      	ldrb	r2, [r7, #15]
 8004698:	78fb      	ldrb	r3, [r7, #3]
 800469a:	3b01      	subs	r3, #1
 800469c:	429a      	cmp	r2, r3
 800469e:	d3ec      	bcc.n	800467a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80046a0:	883b      	ldrh	r3, [r7, #0]
 80046a2:	0418      	lsls	r0, r3, #16
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6819      	ldr	r1, [r3, #0]
 80046a8:	78fb      	ldrb	r3, [r7, #3]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	4302      	orrs	r2, r0
 80046b0:	3340      	adds	r3, #64	; 0x40
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	440b      	add	r3, r1
 80046b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b083      	sub	sp, #12
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
 80046ce:	460b      	mov	r3, r1
 80046d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	887a      	ldrh	r2, [r7, #2]
 80046d8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	460b      	mov	r3, r1
 80046f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e264      	b.n	8004bdc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d075      	beq.n	800480a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800471e:	4ba3      	ldr	r3, [pc, #652]	; (80049ac <HAL_RCC_OscConfig+0x2ac>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 030c 	and.w	r3, r3, #12
 8004726:	2b04      	cmp	r3, #4
 8004728:	d00c      	beq.n	8004744 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800472a:	4ba0      	ldr	r3, [pc, #640]	; (80049ac <HAL_RCC_OscConfig+0x2ac>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004732:	2b08      	cmp	r3, #8
 8004734:	d112      	bne.n	800475c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004736:	4b9d      	ldr	r3, [pc, #628]	; (80049ac <HAL_RCC_OscConfig+0x2ac>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800473e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004742:	d10b      	bne.n	800475c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004744:	4b99      	ldr	r3, [pc, #612]	; (80049ac <HAL_RCC_OscConfig+0x2ac>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d05b      	beq.n	8004808 <HAL_RCC_OscConfig+0x108>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d157      	bne.n	8004808 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e23f      	b.n	8004bdc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004764:	d106      	bne.n	8004774 <HAL_RCC_OscConfig+0x74>
 8004766:	4b91      	ldr	r3, [pc, #580]	; (80049ac <HAL_RCC_OscConfig+0x2ac>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a90      	ldr	r2, [pc, #576]	; (80049ac <HAL_RCC_OscConfig+0x2ac>)
 800476c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	e01d      	b.n	80047b0 <HAL_RCC_OscConfig+0xb0>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800477c:	d10c      	bne.n	8004798 <HAL_RCC_OscConfig+0x98>
 800477e:	4b8b      	ldr	r3, [pc, #556]	; (80049ac <HAL_RCC_OscConfig+0x2ac>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a8a      	ldr	r2, [pc, #552]	; (80049ac <HAL_RCC_OscConfig+0x2ac>)
 8004784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	4b88      	ldr	r3, [pc, #544]	; (80049ac <HAL_RCC_OscConfig+0x2ac>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a87      	ldr	r2, [pc, #540]	; (80049ac <HAL_RCC_OscConfig+0x2ac>)
 8004790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004794:	6013      	str	r3, [r2, #0]
 8004796:	e00b      	b.n	80047b0 <HAL_RCC_OscConfig+0xb0>
 8004798:	4b84      	ldr	r3, [pc, #528]	; (80049ac <HAL_RCC_OscConfig+0x2ac>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a83      	ldr	r2, [pc, #524]	; (80049ac <HAL_RCC_OscConfig+0x2ac>)
 800479e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047a2:	6013      	str	r3, [r2, #0]
 80047a4:	4b81      	ldr	r3, [pc, #516]	; (80049ac <HAL_RCC_OscConfig+0x2ac>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a80      	ldr	r2, [pc, #512]	; (80049ac <HAL_RCC_OscConfig+0x2ac>)
 80047aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d013      	beq.n	80047e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b8:	f7fd fd8c 	bl	80022d4 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047c0:	f7fd fd88 	bl	80022d4 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b64      	cmp	r3, #100	; 0x64
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e204      	b.n	8004bdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047d2:	4b76      	ldr	r3, [pc, #472]	; (80049ac <HAL_RCC_OscConfig+0x2ac>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d0f0      	beq.n	80047c0 <HAL_RCC_OscConfig+0xc0>
 80047de:	e014      	b.n	800480a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e0:	f7fd fd78 	bl	80022d4 <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047e8:	f7fd fd74 	bl	80022d4 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b64      	cmp	r3, #100	; 0x64
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e1f0      	b.n	8004bdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047fa:	4b6c      	ldr	r3, [pc, #432]	; (80049ac <HAL_RCC_OscConfig+0x2ac>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1f0      	bne.n	80047e8 <HAL_RCC_OscConfig+0xe8>
 8004806:	e000      	b.n	800480a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d063      	beq.n	80048de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004816:	4b65      	ldr	r3, [pc, #404]	; (80049ac <HAL_RCC_OscConfig+0x2ac>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 030c 	and.w	r3, r3, #12
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00b      	beq.n	800483a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004822:	4b62      	ldr	r3, [pc, #392]	; (80049ac <HAL_RCC_OscConfig+0x2ac>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800482a:	2b08      	cmp	r3, #8
 800482c:	d11c      	bne.n	8004868 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800482e:	4b5f      	ldr	r3, [pc, #380]	; (80049ac <HAL_RCC_OscConfig+0x2ac>)
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d116      	bne.n	8004868 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800483a:	4b5c      	ldr	r3, [pc, #368]	; (80049ac <HAL_RCC_OscConfig+0x2ac>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d005      	beq.n	8004852 <HAL_RCC_OscConfig+0x152>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d001      	beq.n	8004852 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e1c4      	b.n	8004bdc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004852:	4b56      	ldr	r3, [pc, #344]	; (80049ac <HAL_RCC_OscConfig+0x2ac>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	4952      	ldr	r1, [pc, #328]	; (80049ac <HAL_RCC_OscConfig+0x2ac>)
 8004862:	4313      	orrs	r3, r2
 8004864:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004866:	e03a      	b.n	80048de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d020      	beq.n	80048b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004870:	4b4f      	ldr	r3, [pc, #316]	; (80049b0 <HAL_RCC_OscConfig+0x2b0>)
 8004872:	2201      	movs	r2, #1
 8004874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004876:	f7fd fd2d 	bl	80022d4 <HAL_GetTick>
 800487a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800487c:	e008      	b.n	8004890 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800487e:	f7fd fd29 	bl	80022d4 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d901      	bls.n	8004890 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e1a5      	b.n	8004bdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004890:	4b46      	ldr	r3, [pc, #280]	; (80049ac <HAL_RCC_OscConfig+0x2ac>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d0f0      	beq.n	800487e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800489c:	4b43      	ldr	r3, [pc, #268]	; (80049ac <HAL_RCC_OscConfig+0x2ac>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	00db      	lsls	r3, r3, #3
 80048aa:	4940      	ldr	r1, [pc, #256]	; (80049ac <HAL_RCC_OscConfig+0x2ac>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	600b      	str	r3, [r1, #0]
 80048b0:	e015      	b.n	80048de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048b2:	4b3f      	ldr	r3, [pc, #252]	; (80049b0 <HAL_RCC_OscConfig+0x2b0>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b8:	f7fd fd0c 	bl	80022d4 <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048be:	e008      	b.n	80048d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048c0:	f7fd fd08 	bl	80022d4 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e184      	b.n	8004bdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048d2:	4b36      	ldr	r3, [pc, #216]	; (80049ac <HAL_RCC_OscConfig+0x2ac>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1f0      	bne.n	80048c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0308 	and.w	r3, r3, #8
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d030      	beq.n	800494c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d016      	beq.n	8004920 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048f2:	4b30      	ldr	r3, [pc, #192]	; (80049b4 <HAL_RCC_OscConfig+0x2b4>)
 80048f4:	2201      	movs	r2, #1
 80048f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f8:	f7fd fcec 	bl	80022d4 <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004900:	f7fd fce8 	bl	80022d4 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e164      	b.n	8004bdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004912:	4b26      	ldr	r3, [pc, #152]	; (80049ac <HAL_RCC_OscConfig+0x2ac>)
 8004914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0f0      	beq.n	8004900 <HAL_RCC_OscConfig+0x200>
 800491e:	e015      	b.n	800494c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004920:	4b24      	ldr	r3, [pc, #144]	; (80049b4 <HAL_RCC_OscConfig+0x2b4>)
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004926:	f7fd fcd5 	bl	80022d4 <HAL_GetTick>
 800492a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800492c:	e008      	b.n	8004940 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800492e:	f7fd fcd1 	bl	80022d4 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e14d      	b.n	8004bdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004940:	4b1a      	ldr	r3, [pc, #104]	; (80049ac <HAL_RCC_OscConfig+0x2ac>)
 8004942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1f0      	bne.n	800492e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 80a0 	beq.w	8004a9a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800495a:	2300      	movs	r3, #0
 800495c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800495e:	4b13      	ldr	r3, [pc, #76]	; (80049ac <HAL_RCC_OscConfig+0x2ac>)
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10f      	bne.n	800498a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800496a:	2300      	movs	r3, #0
 800496c:	60bb      	str	r3, [r7, #8]
 800496e:	4b0f      	ldr	r3, [pc, #60]	; (80049ac <HAL_RCC_OscConfig+0x2ac>)
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	4a0e      	ldr	r2, [pc, #56]	; (80049ac <HAL_RCC_OscConfig+0x2ac>)
 8004974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004978:	6413      	str	r3, [r2, #64]	; 0x40
 800497a:	4b0c      	ldr	r3, [pc, #48]	; (80049ac <HAL_RCC_OscConfig+0x2ac>)
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004982:	60bb      	str	r3, [r7, #8]
 8004984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004986:	2301      	movs	r3, #1
 8004988:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800498a:	4b0b      	ldr	r3, [pc, #44]	; (80049b8 <HAL_RCC_OscConfig+0x2b8>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004992:	2b00      	cmp	r3, #0
 8004994:	d121      	bne.n	80049da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004996:	4b08      	ldr	r3, [pc, #32]	; (80049b8 <HAL_RCC_OscConfig+0x2b8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a07      	ldr	r2, [pc, #28]	; (80049b8 <HAL_RCC_OscConfig+0x2b8>)
 800499c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049a2:	f7fd fc97 	bl	80022d4 <HAL_GetTick>
 80049a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a8:	e011      	b.n	80049ce <HAL_RCC_OscConfig+0x2ce>
 80049aa:	bf00      	nop
 80049ac:	40023800 	.word	0x40023800
 80049b0:	42470000 	.word	0x42470000
 80049b4:	42470e80 	.word	0x42470e80
 80049b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049bc:	f7fd fc8a 	bl	80022d4 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e106      	b.n	8004bdc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ce:	4b85      	ldr	r3, [pc, #532]	; (8004be4 <HAL_RCC_OscConfig+0x4e4>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0f0      	beq.n	80049bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d106      	bne.n	80049f0 <HAL_RCC_OscConfig+0x2f0>
 80049e2:	4b81      	ldr	r3, [pc, #516]	; (8004be8 <HAL_RCC_OscConfig+0x4e8>)
 80049e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e6:	4a80      	ldr	r2, [pc, #512]	; (8004be8 <HAL_RCC_OscConfig+0x4e8>)
 80049e8:	f043 0301 	orr.w	r3, r3, #1
 80049ec:	6713      	str	r3, [r2, #112]	; 0x70
 80049ee:	e01c      	b.n	8004a2a <HAL_RCC_OscConfig+0x32a>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	2b05      	cmp	r3, #5
 80049f6:	d10c      	bne.n	8004a12 <HAL_RCC_OscConfig+0x312>
 80049f8:	4b7b      	ldr	r3, [pc, #492]	; (8004be8 <HAL_RCC_OscConfig+0x4e8>)
 80049fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fc:	4a7a      	ldr	r2, [pc, #488]	; (8004be8 <HAL_RCC_OscConfig+0x4e8>)
 80049fe:	f043 0304 	orr.w	r3, r3, #4
 8004a02:	6713      	str	r3, [r2, #112]	; 0x70
 8004a04:	4b78      	ldr	r3, [pc, #480]	; (8004be8 <HAL_RCC_OscConfig+0x4e8>)
 8004a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a08:	4a77      	ldr	r2, [pc, #476]	; (8004be8 <HAL_RCC_OscConfig+0x4e8>)
 8004a0a:	f043 0301 	orr.w	r3, r3, #1
 8004a0e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a10:	e00b      	b.n	8004a2a <HAL_RCC_OscConfig+0x32a>
 8004a12:	4b75      	ldr	r3, [pc, #468]	; (8004be8 <HAL_RCC_OscConfig+0x4e8>)
 8004a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a16:	4a74      	ldr	r2, [pc, #464]	; (8004be8 <HAL_RCC_OscConfig+0x4e8>)
 8004a18:	f023 0301 	bic.w	r3, r3, #1
 8004a1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a1e:	4b72      	ldr	r3, [pc, #456]	; (8004be8 <HAL_RCC_OscConfig+0x4e8>)
 8004a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a22:	4a71      	ldr	r2, [pc, #452]	; (8004be8 <HAL_RCC_OscConfig+0x4e8>)
 8004a24:	f023 0304 	bic.w	r3, r3, #4
 8004a28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d015      	beq.n	8004a5e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a32:	f7fd fc4f 	bl	80022d4 <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a38:	e00a      	b.n	8004a50 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a3a:	f7fd fc4b 	bl	80022d4 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e0c5      	b.n	8004bdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a50:	4b65      	ldr	r3, [pc, #404]	; (8004be8 <HAL_RCC_OscConfig+0x4e8>)
 8004a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0ee      	beq.n	8004a3a <HAL_RCC_OscConfig+0x33a>
 8004a5c:	e014      	b.n	8004a88 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a5e:	f7fd fc39 	bl	80022d4 <HAL_GetTick>
 8004a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a64:	e00a      	b.n	8004a7c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a66:	f7fd fc35 	bl	80022d4 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e0af      	b.n	8004bdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a7c:	4b5a      	ldr	r3, [pc, #360]	; (8004be8 <HAL_RCC_OscConfig+0x4e8>)
 8004a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1ee      	bne.n	8004a66 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a88:	7dfb      	ldrb	r3, [r7, #23]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d105      	bne.n	8004a9a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a8e:	4b56      	ldr	r3, [pc, #344]	; (8004be8 <HAL_RCC_OscConfig+0x4e8>)
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	4a55      	ldr	r2, [pc, #340]	; (8004be8 <HAL_RCC_OscConfig+0x4e8>)
 8004a94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 809b 	beq.w	8004bda <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004aa4:	4b50      	ldr	r3, [pc, #320]	; (8004be8 <HAL_RCC_OscConfig+0x4e8>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 030c 	and.w	r3, r3, #12
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d05c      	beq.n	8004b6a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d141      	bne.n	8004b3c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ab8:	4b4c      	ldr	r3, [pc, #304]	; (8004bec <HAL_RCC_OscConfig+0x4ec>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004abe:	f7fd fc09 	bl	80022d4 <HAL_GetTick>
 8004ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac4:	e008      	b.n	8004ad8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ac6:	f7fd fc05 	bl	80022d4 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e081      	b.n	8004bdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ad8:	4b43      	ldr	r3, [pc, #268]	; (8004be8 <HAL_RCC_OscConfig+0x4e8>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1f0      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	69da      	ldr	r2, [r3, #28]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	431a      	orrs	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	019b      	lsls	r3, r3, #6
 8004af4:	431a      	orrs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afa:	085b      	lsrs	r3, r3, #1
 8004afc:	3b01      	subs	r3, #1
 8004afe:	041b      	lsls	r3, r3, #16
 8004b00:	431a      	orrs	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b06:	061b      	lsls	r3, r3, #24
 8004b08:	4937      	ldr	r1, [pc, #220]	; (8004be8 <HAL_RCC_OscConfig+0x4e8>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b0e:	4b37      	ldr	r3, [pc, #220]	; (8004bec <HAL_RCC_OscConfig+0x4ec>)
 8004b10:	2201      	movs	r2, #1
 8004b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b14:	f7fd fbde 	bl	80022d4 <HAL_GetTick>
 8004b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b1c:	f7fd fbda 	bl	80022d4 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e056      	b.n	8004bdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b2e:	4b2e      	ldr	r3, [pc, #184]	; (8004be8 <HAL_RCC_OscConfig+0x4e8>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0f0      	beq.n	8004b1c <HAL_RCC_OscConfig+0x41c>
 8004b3a:	e04e      	b.n	8004bda <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b3c:	4b2b      	ldr	r3, [pc, #172]	; (8004bec <HAL_RCC_OscConfig+0x4ec>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b42:	f7fd fbc7 	bl	80022d4 <HAL_GetTick>
 8004b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b48:	e008      	b.n	8004b5c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b4a:	f7fd fbc3 	bl	80022d4 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d901      	bls.n	8004b5c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e03f      	b.n	8004bdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b5c:	4b22      	ldr	r3, [pc, #136]	; (8004be8 <HAL_RCC_OscConfig+0x4e8>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1f0      	bne.n	8004b4a <HAL_RCC_OscConfig+0x44a>
 8004b68:	e037      	b.n	8004bda <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d101      	bne.n	8004b76 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e032      	b.n	8004bdc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b76:	4b1c      	ldr	r3, [pc, #112]	; (8004be8 <HAL_RCC_OscConfig+0x4e8>)
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d028      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d121      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d11a      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d111      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbc:	085b      	lsrs	r3, r3, #1
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d107      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d001      	beq.n	8004bda <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3718      	adds	r7, #24
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	40007000 	.word	0x40007000
 8004be8:	40023800 	.word	0x40023800
 8004bec:	42470060 	.word	0x42470060

08004bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e0cc      	b.n	8004d9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c04:	4b68      	ldr	r3, [pc, #416]	; (8004da8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d90c      	bls.n	8004c2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c12:	4b65      	ldr	r3, [pc, #404]	; (8004da8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	b2d2      	uxtb	r2, r2
 8004c18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c1a:	4b63      	ldr	r3, [pc, #396]	; (8004da8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d001      	beq.n	8004c2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e0b8      	b.n	8004d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d020      	beq.n	8004c7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0304 	and.w	r3, r3, #4
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d005      	beq.n	8004c50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c44:	4b59      	ldr	r3, [pc, #356]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	4a58      	ldr	r2, [pc, #352]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004c4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0308 	and.w	r3, r3, #8
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d005      	beq.n	8004c68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c5c:	4b53      	ldr	r3, [pc, #332]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	4a52      	ldr	r2, [pc, #328]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c68:	4b50      	ldr	r3, [pc, #320]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	494d      	ldr	r1, [pc, #308]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d044      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d107      	bne.n	8004c9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c8e:	4b47      	ldr	r3, [pc, #284]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d119      	bne.n	8004cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e07f      	b.n	8004d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d003      	beq.n	8004cae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004caa:	2b03      	cmp	r3, #3
 8004cac:	d107      	bne.n	8004cbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cae:	4b3f      	ldr	r3, [pc, #252]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d109      	bne.n	8004cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e06f      	b.n	8004d9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cbe:	4b3b      	ldr	r3, [pc, #236]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e067      	b.n	8004d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cce:	4b37      	ldr	r3, [pc, #220]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f023 0203 	bic.w	r2, r3, #3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	4934      	ldr	r1, [pc, #208]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ce0:	f7fd faf8 	bl	80022d4 <HAL_GetTick>
 8004ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ce6:	e00a      	b.n	8004cfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ce8:	f7fd faf4 	bl	80022d4 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e04f      	b.n	8004d9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cfe:	4b2b      	ldr	r3, [pc, #172]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 020c 	and.w	r2, r3, #12
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d1eb      	bne.n	8004ce8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d10:	4b25      	ldr	r3, [pc, #148]	; (8004da8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0307 	and.w	r3, r3, #7
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d20c      	bcs.n	8004d38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d1e:	4b22      	ldr	r3, [pc, #136]	; (8004da8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d26:	4b20      	ldr	r3, [pc, #128]	; (8004da8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0307 	and.w	r3, r3, #7
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d001      	beq.n	8004d38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e032      	b.n	8004d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d008      	beq.n	8004d56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d44:	4b19      	ldr	r3, [pc, #100]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	4916      	ldr	r1, [pc, #88]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0308 	and.w	r3, r3, #8
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d009      	beq.n	8004d76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d62:	4b12      	ldr	r3, [pc, #72]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	490e      	ldr	r1, [pc, #56]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d76:	f000 f821 	bl	8004dbc <HAL_RCC_GetSysClockFreq>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	4b0b      	ldr	r3, [pc, #44]	; (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	091b      	lsrs	r3, r3, #4
 8004d82:	f003 030f 	and.w	r3, r3, #15
 8004d86:	490a      	ldr	r1, [pc, #40]	; (8004db0 <HAL_RCC_ClockConfig+0x1c0>)
 8004d88:	5ccb      	ldrb	r3, [r1, r3]
 8004d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d8e:	4a09      	ldr	r2, [pc, #36]	; (8004db4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d92:	4b09      	ldr	r3, [pc, #36]	; (8004db8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fd f85a 	bl	8001e50 <HAL_InitTick>

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	40023c00 	.word	0x40023c00
 8004dac:	40023800 	.word	0x40023800
 8004db0:	08012438 	.word	0x08012438
 8004db4:	20000008 	.word	0x20000008
 8004db8:	2000000c 	.word	0x2000000c

08004dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dbc:	b5b0      	push	{r4, r5, r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	6079      	str	r1, [r7, #4]
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	60f9      	str	r1, [r7, #12]
 8004dca:	2100      	movs	r1, #0
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004dce:	2100      	movs	r1, #0
 8004dd0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dd2:	4952      	ldr	r1, [pc, #328]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x160>)
 8004dd4:	6889      	ldr	r1, [r1, #8]
 8004dd6:	f001 010c 	and.w	r1, r1, #12
 8004dda:	2908      	cmp	r1, #8
 8004ddc:	d00d      	beq.n	8004dfa <HAL_RCC_GetSysClockFreq+0x3e>
 8004dde:	2908      	cmp	r1, #8
 8004de0:	f200 8094 	bhi.w	8004f0c <HAL_RCC_GetSysClockFreq+0x150>
 8004de4:	2900      	cmp	r1, #0
 8004de6:	d002      	beq.n	8004dee <HAL_RCC_GetSysClockFreq+0x32>
 8004de8:	2904      	cmp	r1, #4
 8004dea:	d003      	beq.n	8004df4 <HAL_RCC_GetSysClockFreq+0x38>
 8004dec:	e08e      	b.n	8004f0c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004dee:	4b4c      	ldr	r3, [pc, #304]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x164>)
 8004df0:	60bb      	str	r3, [r7, #8]
       break;
 8004df2:	e08e      	b.n	8004f12 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004df4:	4b4b      	ldr	r3, [pc, #300]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x168>)
 8004df6:	60bb      	str	r3, [r7, #8]
      break;
 8004df8:	e08b      	b.n	8004f12 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dfa:	4948      	ldr	r1, [pc, #288]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x160>)
 8004dfc:	6849      	ldr	r1, [r1, #4]
 8004dfe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004e02:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e04:	4945      	ldr	r1, [pc, #276]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x160>)
 8004e06:	6849      	ldr	r1, [r1, #4]
 8004e08:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004e0c:	2900      	cmp	r1, #0
 8004e0e:	d024      	beq.n	8004e5a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e10:	4942      	ldr	r1, [pc, #264]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x160>)
 8004e12:	6849      	ldr	r1, [r1, #4]
 8004e14:	0989      	lsrs	r1, r1, #6
 8004e16:	4608      	mov	r0, r1
 8004e18:	f04f 0100 	mov.w	r1, #0
 8004e1c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004e20:	f04f 0500 	mov.w	r5, #0
 8004e24:	ea00 0204 	and.w	r2, r0, r4
 8004e28:	ea01 0305 	and.w	r3, r1, r5
 8004e2c:	493d      	ldr	r1, [pc, #244]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x168>)
 8004e2e:	fb01 f003 	mul.w	r0, r1, r3
 8004e32:	2100      	movs	r1, #0
 8004e34:	fb01 f102 	mul.w	r1, r1, r2
 8004e38:	1844      	adds	r4, r0, r1
 8004e3a:	493a      	ldr	r1, [pc, #232]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x168>)
 8004e3c:	fba2 0101 	umull	r0, r1, r2, r1
 8004e40:	1863      	adds	r3, r4, r1
 8004e42:	4619      	mov	r1, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	461a      	mov	r2, r3
 8004e48:	f04f 0300 	mov.w	r3, #0
 8004e4c:	f7fb ff24 	bl	8000c98 <__aeabi_uldivmod>
 8004e50:	4602      	mov	r2, r0
 8004e52:	460b      	mov	r3, r1
 8004e54:	4613      	mov	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	e04a      	b.n	8004ef0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e5a:	4b30      	ldr	r3, [pc, #192]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x160>)
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	099b      	lsrs	r3, r3, #6
 8004e60:	461a      	mov	r2, r3
 8004e62:	f04f 0300 	mov.w	r3, #0
 8004e66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e6a:	f04f 0100 	mov.w	r1, #0
 8004e6e:	ea02 0400 	and.w	r4, r2, r0
 8004e72:	ea03 0501 	and.w	r5, r3, r1
 8004e76:	4620      	mov	r0, r4
 8004e78:	4629      	mov	r1, r5
 8004e7a:	f04f 0200 	mov.w	r2, #0
 8004e7e:	f04f 0300 	mov.w	r3, #0
 8004e82:	014b      	lsls	r3, r1, #5
 8004e84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e88:	0142      	lsls	r2, r0, #5
 8004e8a:	4610      	mov	r0, r2
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	1b00      	subs	r0, r0, r4
 8004e90:	eb61 0105 	sbc.w	r1, r1, r5
 8004e94:	f04f 0200 	mov.w	r2, #0
 8004e98:	f04f 0300 	mov.w	r3, #0
 8004e9c:	018b      	lsls	r3, r1, #6
 8004e9e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ea2:	0182      	lsls	r2, r0, #6
 8004ea4:	1a12      	subs	r2, r2, r0
 8004ea6:	eb63 0301 	sbc.w	r3, r3, r1
 8004eaa:	f04f 0000 	mov.w	r0, #0
 8004eae:	f04f 0100 	mov.w	r1, #0
 8004eb2:	00d9      	lsls	r1, r3, #3
 8004eb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004eb8:	00d0      	lsls	r0, r2, #3
 8004eba:	4602      	mov	r2, r0
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	1912      	adds	r2, r2, r4
 8004ec0:	eb45 0303 	adc.w	r3, r5, r3
 8004ec4:	f04f 0000 	mov.w	r0, #0
 8004ec8:	f04f 0100 	mov.w	r1, #0
 8004ecc:	0299      	lsls	r1, r3, #10
 8004ece:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004ed2:	0290      	lsls	r0, r2, #10
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4610      	mov	r0, r2
 8004eda:	4619      	mov	r1, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	f04f 0300 	mov.w	r3, #0
 8004ee4:	f7fb fed8 	bl	8000c98 <__aeabi_uldivmod>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	4613      	mov	r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ef0:	4b0a      	ldr	r3, [pc, #40]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x160>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	0c1b      	lsrs	r3, r3, #16
 8004ef6:	f003 0303 	and.w	r3, r3, #3
 8004efa:	3301      	adds	r3, #1
 8004efc:	005b      	lsls	r3, r3, #1
 8004efe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f08:	60bb      	str	r3, [r7, #8]
      break;
 8004f0a:	e002      	b.n	8004f12 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f0c:	4b04      	ldr	r3, [pc, #16]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x164>)
 8004f0e:	60bb      	str	r3, [r7, #8]
      break;
 8004f10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f12:	68bb      	ldr	r3, [r7, #8]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bdb0      	pop	{r4, r5, r7, pc}
 8004f1c:	40023800 	.word	0x40023800
 8004f20:	00f42400 	.word	0x00f42400
 8004f24:	017d7840 	.word	0x017d7840

08004f28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f2c:	4b03      	ldr	r3, [pc, #12]	; (8004f3c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	20000008 	.word	0x20000008

08004f40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f44:	f7ff fff0 	bl	8004f28 <HAL_RCC_GetHCLKFreq>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	0a9b      	lsrs	r3, r3, #10
 8004f50:	f003 0307 	and.w	r3, r3, #7
 8004f54:	4903      	ldr	r1, [pc, #12]	; (8004f64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f56:	5ccb      	ldrb	r3, [r1, r3]
 8004f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	40023800 	.word	0x40023800
 8004f64:	08012448 	.word	0x08012448

08004f68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f6c:	f7ff ffdc 	bl	8004f28 <HAL_RCC_GetHCLKFreq>
 8004f70:	4602      	mov	r2, r0
 8004f72:	4b05      	ldr	r3, [pc, #20]	; (8004f88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	0b5b      	lsrs	r3, r3, #13
 8004f78:	f003 0307 	and.w	r3, r3, #7
 8004f7c:	4903      	ldr	r1, [pc, #12]	; (8004f8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f7e:	5ccb      	ldrb	r3, [r1, r3]
 8004f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	40023800 	.word	0x40023800
 8004f8c:	08012448 	.word	0x08012448

08004f90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	220f      	movs	r2, #15
 8004f9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004fa0:	4b12      	ldr	r3, [pc, #72]	; (8004fec <HAL_RCC_GetClockConfig+0x5c>)
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f003 0203 	and.w	r2, r3, #3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004fac:	4b0f      	ldr	r3, [pc, #60]	; (8004fec <HAL_RCC_GetClockConfig+0x5c>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004fb8:	4b0c      	ldr	r3, [pc, #48]	; (8004fec <HAL_RCC_GetClockConfig+0x5c>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004fc4:	4b09      	ldr	r3, [pc, #36]	; (8004fec <HAL_RCC_GetClockConfig+0x5c>)
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	08db      	lsrs	r3, r3, #3
 8004fca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004fd2:	4b07      	ldr	r3, [pc, #28]	; (8004ff0 <HAL_RCC_GetClockConfig+0x60>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0207 	and.w	r2, r3, #7
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	601a      	str	r2, [r3, #0]
}
 8004fde:	bf00      	nop
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	40023c00 	.word	0x40023c00

08004ff4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e07b      	b.n	80050fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	2b00      	cmp	r3, #0
 800500c:	d108      	bne.n	8005020 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005016:	d009      	beq.n	800502c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	61da      	str	r2, [r3, #28]
 800501e:	e005      	b.n	800502c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d106      	bne.n	800504c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f7fc fbec 	bl	8001824 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2202      	movs	r2, #2
 8005050:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005062:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005074:	431a      	orrs	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	431a      	orrs	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	431a      	orrs	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800509c:	431a      	orrs	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a1b      	ldr	r3, [r3, #32]
 80050ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b0:	ea42 0103 	orr.w	r1, r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	0c1b      	lsrs	r3, r3, #16
 80050ca:	f003 0104 	and.w	r1, r3, #4
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	f003 0210 	and.w	r2, r3, #16
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	69da      	ldr	r2, [r3, #28]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3708      	adds	r7, #8
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b082      	sub	sp, #8
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e041      	b.n	800519c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	d106      	bne.n	8005132 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f839 	bl	80051a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2202      	movs	r2, #2
 8005136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	3304      	adds	r3, #4
 8005142:	4619      	mov	r1, r3
 8005144:	4610      	mov	r0, r2
 8005146:	f000 f9c9 	bl	80054dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d001      	beq.n	80051d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e044      	b.n	800525a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68da      	ldr	r2, [r3, #12]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0201 	orr.w	r2, r2, #1
 80051e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a1e      	ldr	r2, [pc, #120]	; (8005268 <HAL_TIM_Base_Start_IT+0xb0>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d018      	beq.n	8005224 <HAL_TIM_Base_Start_IT+0x6c>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051fa:	d013      	beq.n	8005224 <HAL_TIM_Base_Start_IT+0x6c>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a1a      	ldr	r2, [pc, #104]	; (800526c <HAL_TIM_Base_Start_IT+0xb4>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d00e      	beq.n	8005224 <HAL_TIM_Base_Start_IT+0x6c>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a19      	ldr	r2, [pc, #100]	; (8005270 <HAL_TIM_Base_Start_IT+0xb8>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d009      	beq.n	8005224 <HAL_TIM_Base_Start_IT+0x6c>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a17      	ldr	r2, [pc, #92]	; (8005274 <HAL_TIM_Base_Start_IT+0xbc>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d004      	beq.n	8005224 <HAL_TIM_Base_Start_IT+0x6c>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a16      	ldr	r2, [pc, #88]	; (8005278 <HAL_TIM_Base_Start_IT+0xc0>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d111      	bne.n	8005248 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f003 0307 	and.w	r3, r3, #7
 800522e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2b06      	cmp	r3, #6
 8005234:	d010      	beq.n	8005258 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f042 0201 	orr.w	r2, r2, #1
 8005244:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005246:	e007      	b.n	8005258 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 0201 	orr.w	r2, r2, #1
 8005256:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	40010000 	.word	0x40010000
 800526c:	40000400 	.word	0x40000400
 8005270:	40000800 	.word	0x40000800
 8005274:	40000c00 	.word	0x40000c00
 8005278:	40014000 	.word	0x40014000

0800527c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b02      	cmp	r3, #2
 8005290:	d122      	bne.n	80052d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b02      	cmp	r3, #2
 800529e:	d11b      	bne.n	80052d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f06f 0202 	mvn.w	r2, #2
 80052a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	f003 0303 	and.w	r3, r3, #3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f8ee 	bl	80054a0 <HAL_TIM_IC_CaptureCallback>
 80052c4:	e005      	b.n	80052d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f8e0 	bl	800548c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f8f1 	bl	80054b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f003 0304 	and.w	r3, r3, #4
 80052e2:	2b04      	cmp	r3, #4
 80052e4:	d122      	bne.n	800532c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f003 0304 	and.w	r3, r3, #4
 80052f0:	2b04      	cmp	r3, #4
 80052f2:	d11b      	bne.n	800532c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f06f 0204 	mvn.w	r2, #4
 80052fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2202      	movs	r2, #2
 8005302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f8c4 	bl	80054a0 <HAL_TIM_IC_CaptureCallback>
 8005318:	e005      	b.n	8005326 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f8b6 	bl	800548c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 f8c7 	bl	80054b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	f003 0308 	and.w	r3, r3, #8
 8005336:	2b08      	cmp	r3, #8
 8005338:	d122      	bne.n	8005380 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f003 0308 	and.w	r3, r3, #8
 8005344:	2b08      	cmp	r3, #8
 8005346:	d11b      	bne.n	8005380 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f06f 0208 	mvn.w	r2, #8
 8005350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2204      	movs	r2, #4
 8005356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	f003 0303 	and.w	r3, r3, #3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f89a 	bl	80054a0 <HAL_TIM_IC_CaptureCallback>
 800536c:	e005      	b.n	800537a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f88c 	bl	800548c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f89d 	bl	80054b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	f003 0310 	and.w	r3, r3, #16
 800538a:	2b10      	cmp	r3, #16
 800538c:	d122      	bne.n	80053d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f003 0310 	and.w	r3, r3, #16
 8005398:	2b10      	cmp	r3, #16
 800539a:	d11b      	bne.n	80053d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f06f 0210 	mvn.w	r2, #16
 80053a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2208      	movs	r2, #8
 80053aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f870 	bl	80054a0 <HAL_TIM_IC_CaptureCallback>
 80053c0:	e005      	b.n	80053ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f862 	bl	800548c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f873 	bl	80054b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d10e      	bne.n	8005400 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d107      	bne.n	8005400 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f06f 0201 	mvn.w	r2, #1
 80053f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7fc f9c4 	bl	8001788 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540a:	2b80      	cmp	r3, #128	; 0x80
 800540c:	d10e      	bne.n	800542c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005418:	2b80      	cmp	r3, #128	; 0x80
 800541a:	d107      	bne.n	800542c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f8e2 	bl	80055f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005436:	2b40      	cmp	r3, #64	; 0x40
 8005438:	d10e      	bne.n	8005458 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005444:	2b40      	cmp	r3, #64	; 0x40
 8005446:	d107      	bne.n	8005458 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f838 	bl	80054c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	f003 0320 	and.w	r3, r3, #32
 8005462:	2b20      	cmp	r3, #32
 8005464:	d10e      	bne.n	8005484 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	f003 0320 	and.w	r3, r3, #32
 8005470:	2b20      	cmp	r3, #32
 8005472:	d107      	bne.n	8005484 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f06f 0220 	mvn.w	r2, #32
 800547c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f8ac 	bl	80055dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005484:	bf00      	nop
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a34      	ldr	r2, [pc, #208]	; (80055c0 <TIM_Base_SetConfig+0xe4>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d00f      	beq.n	8005514 <TIM_Base_SetConfig+0x38>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054fa:	d00b      	beq.n	8005514 <TIM_Base_SetConfig+0x38>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a31      	ldr	r2, [pc, #196]	; (80055c4 <TIM_Base_SetConfig+0xe8>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d007      	beq.n	8005514 <TIM_Base_SetConfig+0x38>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a30      	ldr	r2, [pc, #192]	; (80055c8 <TIM_Base_SetConfig+0xec>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d003      	beq.n	8005514 <TIM_Base_SetConfig+0x38>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a2f      	ldr	r2, [pc, #188]	; (80055cc <TIM_Base_SetConfig+0xf0>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d108      	bne.n	8005526 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	4313      	orrs	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a25      	ldr	r2, [pc, #148]	; (80055c0 <TIM_Base_SetConfig+0xe4>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d01b      	beq.n	8005566 <TIM_Base_SetConfig+0x8a>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005534:	d017      	beq.n	8005566 <TIM_Base_SetConfig+0x8a>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a22      	ldr	r2, [pc, #136]	; (80055c4 <TIM_Base_SetConfig+0xe8>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d013      	beq.n	8005566 <TIM_Base_SetConfig+0x8a>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a21      	ldr	r2, [pc, #132]	; (80055c8 <TIM_Base_SetConfig+0xec>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d00f      	beq.n	8005566 <TIM_Base_SetConfig+0x8a>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a20      	ldr	r2, [pc, #128]	; (80055cc <TIM_Base_SetConfig+0xf0>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d00b      	beq.n	8005566 <TIM_Base_SetConfig+0x8a>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a1f      	ldr	r2, [pc, #124]	; (80055d0 <TIM_Base_SetConfig+0xf4>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d007      	beq.n	8005566 <TIM_Base_SetConfig+0x8a>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a1e      	ldr	r2, [pc, #120]	; (80055d4 <TIM_Base_SetConfig+0xf8>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d003      	beq.n	8005566 <TIM_Base_SetConfig+0x8a>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a1d      	ldr	r2, [pc, #116]	; (80055d8 <TIM_Base_SetConfig+0xfc>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d108      	bne.n	8005578 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800556c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	4313      	orrs	r3, r2
 8005576:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	4313      	orrs	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a08      	ldr	r2, [pc, #32]	; (80055c0 <TIM_Base_SetConfig+0xe4>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d103      	bne.n	80055ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	691a      	ldr	r2, [r3, #16]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	615a      	str	r2, [r3, #20]
}
 80055b2:	bf00      	nop
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	40010000 	.word	0x40010000
 80055c4:	40000400 	.word	0x40000400
 80055c8:	40000800 	.word	0x40000800
 80055cc:	40000c00 	.word	0x40000c00
 80055d0:	40014000 	.word	0x40014000
 80055d4:	40014400 	.word	0x40014400
 80055d8:	40014800 	.word	0x40014800

080055dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e03f      	b.n	8005696 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d106      	bne.n	8005630 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7fc fda2 	bl	8002174 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2224      	movs	r2, #36	; 0x24
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68da      	ldr	r2, [r3, #12]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005646:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 fb9f 	bl	8005d8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	691a      	ldr	r2, [r3, #16]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800565c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	695a      	ldr	r2, [r3, #20]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800566c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68da      	ldr	r2, [r3, #12]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800567c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2220      	movs	r2, #32
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2220      	movs	r2, #32
 8005690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b084      	sub	sp, #16
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	60f8      	str	r0, [r7, #12]
 80056a6:	60b9      	str	r1, [r7, #8]
 80056a8:	4613      	mov	r3, r2
 80056aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b20      	cmp	r3, #32
 80056b6:	d11d      	bne.n	80056f4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d002      	beq.n	80056c4 <HAL_UART_Receive_IT+0x26>
 80056be:	88fb      	ldrh	r3, [r7, #6]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e016      	b.n	80056f6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d101      	bne.n	80056d6 <HAL_UART_Receive_IT+0x38>
 80056d2:	2302      	movs	r3, #2
 80056d4:	e00f      	b.n	80056f6 <HAL_UART_Receive_IT+0x58>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80056e4:	88fb      	ldrh	r3, [r7, #6]
 80056e6:	461a      	mov	r2, r3
 80056e8:	68b9      	ldr	r1, [r7, #8]
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f000 f9d4 	bl	8005a98 <UART_Start_Receive_IT>
 80056f0:	4603      	mov	r3, r0
 80056f2:	e000      	b.n	80056f6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80056f4:	2302      	movs	r3, #2
  }
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
	...

08005700 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b08a      	sub	sp, #40	; 0x28
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005720:	2300      	movs	r3, #0
 8005722:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005724:	2300      	movs	r3, #0
 8005726:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572a:	f003 030f 	and.w	r3, r3, #15
 800572e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10d      	bne.n	8005752 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	f003 0320 	and.w	r3, r3, #32
 800573c:	2b00      	cmp	r3, #0
 800573e:	d008      	beq.n	8005752 <HAL_UART_IRQHandler+0x52>
 8005740:	6a3b      	ldr	r3, [r7, #32]
 8005742:	f003 0320 	and.w	r3, r3, #32
 8005746:	2b00      	cmp	r3, #0
 8005748:	d003      	beq.n	8005752 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 fa87 	bl	8005c5e <UART_Receive_IT>
      return;
 8005750:	e17c      	b.n	8005a4c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 80b1 	beq.w	80058bc <HAL_UART_IRQHandler+0x1bc>
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	f003 0301 	and.w	r3, r3, #1
 8005760:	2b00      	cmp	r3, #0
 8005762:	d105      	bne.n	8005770 <HAL_UART_IRQHandler+0x70>
 8005764:	6a3b      	ldr	r3, [r7, #32]
 8005766:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 80a6 	beq.w	80058bc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00a      	beq.n	8005790 <HAL_UART_IRQHandler+0x90>
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005780:	2b00      	cmp	r3, #0
 8005782:	d005      	beq.n	8005790 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005788:	f043 0201 	orr.w	r2, r3, #1
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	f003 0304 	and.w	r3, r3, #4
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00a      	beq.n	80057b0 <HAL_UART_IRQHandler+0xb0>
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d005      	beq.n	80057b0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a8:	f043 0202 	orr.w	r2, r3, #2
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00a      	beq.n	80057d0 <HAL_UART_IRQHandler+0xd0>
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d005      	beq.n	80057d0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c8:	f043 0204 	orr.w	r2, r3, #4
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	f003 0308 	and.w	r3, r3, #8
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00f      	beq.n	80057fa <HAL_UART_IRQHandler+0xfa>
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	f003 0320 	and.w	r3, r3, #32
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d104      	bne.n	80057ee <HAL_UART_IRQHandler+0xee>
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d005      	beq.n	80057fa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	f043 0208 	orr.w	r2, r3, #8
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f000 811f 	beq.w	8005a42 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	f003 0320 	and.w	r3, r3, #32
 800580a:	2b00      	cmp	r3, #0
 800580c:	d007      	beq.n	800581e <HAL_UART_IRQHandler+0x11e>
 800580e:	6a3b      	ldr	r3, [r7, #32]
 8005810:	f003 0320 	and.w	r3, r3, #32
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 fa20 	bl	8005c5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005828:	2b40      	cmp	r3, #64	; 0x40
 800582a:	bf0c      	ite	eq
 800582c:	2301      	moveq	r3, #1
 800582e:	2300      	movne	r3, #0
 8005830:	b2db      	uxtb	r3, r3
 8005832:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005838:	f003 0308 	and.w	r3, r3, #8
 800583c:	2b00      	cmp	r3, #0
 800583e:	d102      	bne.n	8005846 <HAL_UART_IRQHandler+0x146>
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d031      	beq.n	80058aa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f960 	bl	8005b0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005856:	2b40      	cmp	r3, #64	; 0x40
 8005858:	d123      	bne.n	80058a2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	695a      	ldr	r2, [r3, #20]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005868:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586e:	2b00      	cmp	r3, #0
 8005870:	d013      	beq.n	800589a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005876:	4a77      	ldr	r2, [pc, #476]	; (8005a54 <HAL_UART_IRQHandler+0x354>)
 8005878:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587e:	4618      	mov	r0, r3
 8005880:	f7fc feaa 	bl	80025d8 <HAL_DMA_Abort_IT>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d016      	beq.n	80058b8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005894:	4610      	mov	r0, r2
 8005896:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005898:	e00e      	b.n	80058b8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f8e6 	bl	8005a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a0:	e00a      	b.n	80058b8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f8e2 	bl	8005a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a8:	e006      	b.n	80058b8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f8de 	bl	8005a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80058b6:	e0c4      	b.n	8005a42 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058b8:	bf00      	nop
    return;
 80058ba:	e0c2      	b.n	8005a42 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	f040 80a2 	bne.w	8005a0a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	f003 0310 	and.w	r3, r3, #16
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f000 809c 	beq.w	8005a0a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	f003 0310 	and.w	r3, r3, #16
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 8096 	beq.w	8005a0a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058de:	2300      	movs	r3, #0
 80058e0:	60fb      	str	r3, [r7, #12]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	60fb      	str	r3, [r7, #12]
 80058f2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fe:	2b40      	cmp	r3, #64	; 0x40
 8005900:	d14f      	bne.n	80059a2 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800590c:	8a3b      	ldrh	r3, [r7, #16]
 800590e:	2b00      	cmp	r3, #0
 8005910:	f000 8099 	beq.w	8005a46 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005918:	8a3a      	ldrh	r2, [r7, #16]
 800591a:	429a      	cmp	r2, r3
 800591c:	f080 8093 	bcs.w	8005a46 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	8a3a      	ldrh	r2, [r7, #16]
 8005924:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005930:	d02b      	beq.n	800598a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68da      	ldr	r2, [r3, #12]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005940:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	695a      	ldr	r2, [r3, #20]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 0201 	bic.w	r2, r2, #1
 8005950:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	695a      	ldr	r2, [r3, #20]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005960:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2220      	movs	r2, #32
 8005966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68da      	ldr	r2, [r3, #12]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 0210 	bic.w	r2, r2, #16
 800597e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005984:	4618      	mov	r0, r3
 8005986:	f7fc fdb7 	bl	80024f8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005992:	b29b      	uxth	r3, r3
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	b29b      	uxth	r3, r3
 8005998:	4619      	mov	r1, r3
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f870 	bl	8005a80 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80059a0:	e051      	b.n	8005a46 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d047      	beq.n	8005a4a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80059ba:	8a7b      	ldrh	r3, [r7, #18]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d044      	beq.n	8005a4a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68da      	ldr	r2, [r3, #12]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80059ce:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	695a      	ldr	r2, [r3, #20]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f022 0201 	bic.w	r2, r2, #1
 80059de:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2220      	movs	r2, #32
 80059e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68da      	ldr	r2, [r3, #12]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 0210 	bic.w	r2, r2, #16
 80059fc:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059fe:	8a7b      	ldrh	r3, [r7, #18]
 8005a00:	4619      	mov	r1, r3
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f83c 	bl	8005a80 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005a08:	e01f      	b.n	8005a4a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d008      	beq.n	8005a26 <HAL_UART_IRQHandler+0x326>
 8005a14:	6a3b      	ldr	r3, [r7, #32]
 8005a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d003      	beq.n	8005a26 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f8b5 	bl	8005b8e <UART_Transmit_IT>
    return;
 8005a24:	e012      	b.n	8005a4c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00d      	beq.n	8005a4c <HAL_UART_IRQHandler+0x34c>
 8005a30:	6a3b      	ldr	r3, [r7, #32]
 8005a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d008      	beq.n	8005a4c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f8f7 	bl	8005c2e <UART_EndTransmit_IT>
    return;
 8005a40:	e004      	b.n	8005a4c <HAL_UART_IRQHandler+0x34c>
    return;
 8005a42:	bf00      	nop
 8005a44:	e002      	b.n	8005a4c <HAL_UART_IRQHandler+0x34c>
      return;
 8005a46:	bf00      	nop
 8005a48:	e000      	b.n	8005a4c <HAL_UART_IRQHandler+0x34c>
      return;
 8005a4a:	bf00      	nop
  }
}
 8005a4c:	3728      	adds	r7, #40	; 0x28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	08005b67 	.word	0x08005b67

08005a58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	88fa      	ldrh	r2, [r7, #6]
 8005ab0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	88fa      	ldrh	r2, [r7, #6]
 8005ab6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2222      	movs	r2, #34	; 0x22
 8005ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68da      	ldr	r2, [r3, #12]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005adc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	695a      	ldr	r2, [r3, #20]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f042 0201 	orr.w	r2, r2, #1
 8005aec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68da      	ldr	r2, [r3, #12]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f042 0220 	orr.w	r2, r2, #32
 8005afc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3714      	adds	r7, #20
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b22:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	695a      	ldr	r2, [r3, #20]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f022 0201 	bic.w	r2, r2, #1
 8005b32:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d107      	bne.n	8005b4c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68da      	ldr	r2, [r3, #12]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f022 0210 	bic.w	r2, r2, #16
 8005b4a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b5a:	bf00      	nop
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b084      	sub	sp, #16
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f7ff ff73 	bl	8005a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b86:	bf00      	nop
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b085      	sub	sp, #20
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b21      	cmp	r3, #33	; 0x21
 8005ba0:	d13e      	bne.n	8005c20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005baa:	d114      	bne.n	8005bd6 <UART_Transmit_IT+0x48>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d110      	bne.n	8005bd6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	881b      	ldrh	r3, [r3, #0]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bc8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	1c9a      	adds	r2, r3, #2
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	621a      	str	r2, [r3, #32]
 8005bd4:	e008      	b.n	8005be8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	1c59      	adds	r1, r3, #1
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	6211      	str	r1, [r2, #32]
 8005be0:	781a      	ldrb	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10f      	bne.n	8005c1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68da      	ldr	r2, [r3, #12]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	e000      	b.n	8005c22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c20:	2302      	movs	r3, #2
  }
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3714      	adds	r7, #20
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b082      	sub	sp, #8
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68da      	ldr	r2, [r3, #12]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2220      	movs	r2, #32
 8005c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7ff ff02 	bl	8005a58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b084      	sub	sp, #16
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b22      	cmp	r3, #34	; 0x22
 8005c70:	f040 8087 	bne.w	8005d82 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c7c:	d117      	bne.n	8005cae <UART_Receive_IT+0x50>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d113      	bne.n	8005cae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c86:	2300      	movs	r3, #0
 8005c88:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca6:	1c9a      	adds	r2, r3, #2
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	629a      	str	r2, [r3, #40]	; 0x28
 8005cac:	e026      	b.n	8005cfc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc0:	d007      	beq.n	8005cd2 <UART_Receive_IT+0x74>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10a      	bne.n	8005ce0 <UART_Receive_IT+0x82>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d106      	bne.n	8005ce0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	701a      	strb	r2, [r3, #0]
 8005cde:	e008      	b.n	8005cf2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cec:	b2da      	uxtb	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf6:	1c5a      	adds	r2, r3, #1
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	3b01      	subs	r3, #1
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	4619      	mov	r1, r3
 8005d0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d136      	bne.n	8005d7e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68da      	ldr	r2, [r3, #12]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f022 0220 	bic.w	r2, r2, #32
 8005d1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68da      	ldr	r2, [r3, #12]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	695a      	ldr	r2, [r3, #20]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 0201 	bic.w	r2, r2, #1
 8005d3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2220      	movs	r2, #32
 8005d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d10e      	bne.n	8005d6e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68da      	ldr	r2, [r3, #12]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f022 0210 	bic.w	r2, r2, #16
 8005d5e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d64:	4619      	mov	r1, r3
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7ff fe8a 	bl	8005a80 <HAL_UARTEx_RxEventCallback>
 8005d6c:	e002      	b.n	8005d74 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7fb fc72 	bl	8001658 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	e002      	b.n	8005d84 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	e000      	b.n	8005d84 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005d82:	2302      	movs	r3, #2
  }
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d90:	b09f      	sub	sp, #124	; 0x7c
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da2:	68d9      	ldr	r1, [r3, #12]
 8005da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	ea40 0301 	orr.w	r3, r0, r1
 8005dac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db0:	689a      	ldr	r2, [r3, #8]
 8005db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	431a      	orrs	r2, r3
 8005db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dba:	695b      	ldr	r3, [r3, #20]
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005dd0:	f021 010c 	bic.w	r1, r1, #12
 8005dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005dda:	430b      	orrs	r3, r1
 8005ddc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dea:	6999      	ldr	r1, [r3, #24]
 8005dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	ea40 0301 	orr.w	r3, r0, r1
 8005df4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	4bc5      	ldr	r3, [pc, #788]	; (8006110 <UART_SetConfig+0x384>)
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d004      	beq.n	8005e0a <UART_SetConfig+0x7e>
 8005e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	4bc3      	ldr	r3, [pc, #780]	; (8006114 <UART_SetConfig+0x388>)
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d103      	bne.n	8005e12 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e0a:	f7ff f8ad 	bl	8004f68 <HAL_RCC_GetPCLK2Freq>
 8005e0e:	6778      	str	r0, [r7, #116]	; 0x74
 8005e10:	e002      	b.n	8005e18 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e12:	f7ff f895 	bl	8004f40 <HAL_RCC_GetPCLK1Freq>
 8005e16:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e20:	f040 80b6 	bne.w	8005f90 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e26:	461c      	mov	r4, r3
 8005e28:	f04f 0500 	mov.w	r5, #0
 8005e2c:	4622      	mov	r2, r4
 8005e2e:	462b      	mov	r3, r5
 8005e30:	1891      	adds	r1, r2, r2
 8005e32:	6439      	str	r1, [r7, #64]	; 0x40
 8005e34:	415b      	adcs	r3, r3
 8005e36:	647b      	str	r3, [r7, #68]	; 0x44
 8005e38:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e3c:	1912      	adds	r2, r2, r4
 8005e3e:	eb45 0303 	adc.w	r3, r5, r3
 8005e42:	f04f 0000 	mov.w	r0, #0
 8005e46:	f04f 0100 	mov.w	r1, #0
 8005e4a:	00d9      	lsls	r1, r3, #3
 8005e4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e50:	00d0      	lsls	r0, r2, #3
 8005e52:	4602      	mov	r2, r0
 8005e54:	460b      	mov	r3, r1
 8005e56:	1911      	adds	r1, r2, r4
 8005e58:	6639      	str	r1, [r7, #96]	; 0x60
 8005e5a:	416b      	adcs	r3, r5
 8005e5c:	667b      	str	r3, [r7, #100]	; 0x64
 8005e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	461a      	mov	r2, r3
 8005e64:	f04f 0300 	mov.w	r3, #0
 8005e68:	1891      	adds	r1, r2, r2
 8005e6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e6c:	415b      	adcs	r3, r3
 8005e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e74:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005e78:	f7fa ff0e 	bl	8000c98 <__aeabi_uldivmod>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	460b      	mov	r3, r1
 8005e80:	4ba5      	ldr	r3, [pc, #660]	; (8006118 <UART_SetConfig+0x38c>)
 8005e82:	fba3 2302 	umull	r2, r3, r3, r2
 8005e86:	095b      	lsrs	r3, r3, #5
 8005e88:	011e      	lsls	r6, r3, #4
 8005e8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e8c:	461c      	mov	r4, r3
 8005e8e:	f04f 0500 	mov.w	r5, #0
 8005e92:	4622      	mov	r2, r4
 8005e94:	462b      	mov	r3, r5
 8005e96:	1891      	adds	r1, r2, r2
 8005e98:	6339      	str	r1, [r7, #48]	; 0x30
 8005e9a:	415b      	adcs	r3, r3
 8005e9c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e9e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005ea2:	1912      	adds	r2, r2, r4
 8005ea4:	eb45 0303 	adc.w	r3, r5, r3
 8005ea8:	f04f 0000 	mov.w	r0, #0
 8005eac:	f04f 0100 	mov.w	r1, #0
 8005eb0:	00d9      	lsls	r1, r3, #3
 8005eb2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005eb6:	00d0      	lsls	r0, r2, #3
 8005eb8:	4602      	mov	r2, r0
 8005eba:	460b      	mov	r3, r1
 8005ebc:	1911      	adds	r1, r2, r4
 8005ebe:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ec0:	416b      	adcs	r3, r5
 8005ec2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	f04f 0300 	mov.w	r3, #0
 8005ece:	1891      	adds	r1, r2, r2
 8005ed0:	62b9      	str	r1, [r7, #40]	; 0x28
 8005ed2:	415b      	adcs	r3, r3
 8005ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ed6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005eda:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005ede:	f7fa fedb 	bl	8000c98 <__aeabi_uldivmod>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	4b8c      	ldr	r3, [pc, #560]	; (8006118 <UART_SetConfig+0x38c>)
 8005ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8005eec:	095b      	lsrs	r3, r3, #5
 8005eee:	2164      	movs	r1, #100	; 0x64
 8005ef0:	fb01 f303 	mul.w	r3, r1, r3
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	3332      	adds	r3, #50	; 0x32
 8005efa:	4a87      	ldr	r2, [pc, #540]	; (8006118 <UART_SetConfig+0x38c>)
 8005efc:	fba2 2303 	umull	r2, r3, r2, r3
 8005f00:	095b      	lsrs	r3, r3, #5
 8005f02:	005b      	lsls	r3, r3, #1
 8005f04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f08:	441e      	add	r6, r3
 8005f0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f04f 0100 	mov.w	r1, #0
 8005f12:	4602      	mov	r2, r0
 8005f14:	460b      	mov	r3, r1
 8005f16:	1894      	adds	r4, r2, r2
 8005f18:	623c      	str	r4, [r7, #32]
 8005f1a:	415b      	adcs	r3, r3
 8005f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f22:	1812      	adds	r2, r2, r0
 8005f24:	eb41 0303 	adc.w	r3, r1, r3
 8005f28:	f04f 0400 	mov.w	r4, #0
 8005f2c:	f04f 0500 	mov.w	r5, #0
 8005f30:	00dd      	lsls	r5, r3, #3
 8005f32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f36:	00d4      	lsls	r4, r2, #3
 8005f38:	4622      	mov	r2, r4
 8005f3a:	462b      	mov	r3, r5
 8005f3c:	1814      	adds	r4, r2, r0
 8005f3e:	653c      	str	r4, [r7, #80]	; 0x50
 8005f40:	414b      	adcs	r3, r1
 8005f42:	657b      	str	r3, [r7, #84]	; 0x54
 8005f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	f04f 0300 	mov.w	r3, #0
 8005f4e:	1891      	adds	r1, r2, r2
 8005f50:	61b9      	str	r1, [r7, #24]
 8005f52:	415b      	adcs	r3, r3
 8005f54:	61fb      	str	r3, [r7, #28]
 8005f56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f5a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005f5e:	f7fa fe9b 	bl	8000c98 <__aeabi_uldivmod>
 8005f62:	4602      	mov	r2, r0
 8005f64:	460b      	mov	r3, r1
 8005f66:	4b6c      	ldr	r3, [pc, #432]	; (8006118 <UART_SetConfig+0x38c>)
 8005f68:	fba3 1302 	umull	r1, r3, r3, r2
 8005f6c:	095b      	lsrs	r3, r3, #5
 8005f6e:	2164      	movs	r1, #100	; 0x64
 8005f70:	fb01 f303 	mul.w	r3, r1, r3
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	00db      	lsls	r3, r3, #3
 8005f78:	3332      	adds	r3, #50	; 0x32
 8005f7a:	4a67      	ldr	r2, [pc, #412]	; (8006118 <UART_SetConfig+0x38c>)
 8005f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f80:	095b      	lsrs	r3, r3, #5
 8005f82:	f003 0207 	and.w	r2, r3, #7
 8005f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4432      	add	r2, r6
 8005f8c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f8e:	e0b9      	b.n	8006104 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f92:	461c      	mov	r4, r3
 8005f94:	f04f 0500 	mov.w	r5, #0
 8005f98:	4622      	mov	r2, r4
 8005f9a:	462b      	mov	r3, r5
 8005f9c:	1891      	adds	r1, r2, r2
 8005f9e:	6139      	str	r1, [r7, #16]
 8005fa0:	415b      	adcs	r3, r3
 8005fa2:	617b      	str	r3, [r7, #20]
 8005fa4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005fa8:	1912      	adds	r2, r2, r4
 8005faa:	eb45 0303 	adc.w	r3, r5, r3
 8005fae:	f04f 0000 	mov.w	r0, #0
 8005fb2:	f04f 0100 	mov.w	r1, #0
 8005fb6:	00d9      	lsls	r1, r3, #3
 8005fb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fbc:	00d0      	lsls	r0, r2, #3
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	eb12 0804 	adds.w	r8, r2, r4
 8005fc6:	eb43 0905 	adc.w	r9, r3, r5
 8005fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f04f 0100 	mov.w	r1, #0
 8005fd4:	f04f 0200 	mov.w	r2, #0
 8005fd8:	f04f 0300 	mov.w	r3, #0
 8005fdc:	008b      	lsls	r3, r1, #2
 8005fde:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005fe2:	0082      	lsls	r2, r0, #2
 8005fe4:	4640      	mov	r0, r8
 8005fe6:	4649      	mov	r1, r9
 8005fe8:	f7fa fe56 	bl	8000c98 <__aeabi_uldivmod>
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	4b49      	ldr	r3, [pc, #292]	; (8006118 <UART_SetConfig+0x38c>)
 8005ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ff6:	095b      	lsrs	r3, r3, #5
 8005ff8:	011e      	lsls	r6, r3, #4
 8005ffa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f04f 0100 	mov.w	r1, #0
 8006002:	4602      	mov	r2, r0
 8006004:	460b      	mov	r3, r1
 8006006:	1894      	adds	r4, r2, r2
 8006008:	60bc      	str	r4, [r7, #8]
 800600a:	415b      	adcs	r3, r3
 800600c:	60fb      	str	r3, [r7, #12]
 800600e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006012:	1812      	adds	r2, r2, r0
 8006014:	eb41 0303 	adc.w	r3, r1, r3
 8006018:	f04f 0400 	mov.w	r4, #0
 800601c:	f04f 0500 	mov.w	r5, #0
 8006020:	00dd      	lsls	r5, r3, #3
 8006022:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006026:	00d4      	lsls	r4, r2, #3
 8006028:	4622      	mov	r2, r4
 800602a:	462b      	mov	r3, r5
 800602c:	1814      	adds	r4, r2, r0
 800602e:	64bc      	str	r4, [r7, #72]	; 0x48
 8006030:	414b      	adcs	r3, r1
 8006032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	4618      	mov	r0, r3
 800603a:	f04f 0100 	mov.w	r1, #0
 800603e:	f04f 0200 	mov.w	r2, #0
 8006042:	f04f 0300 	mov.w	r3, #0
 8006046:	008b      	lsls	r3, r1, #2
 8006048:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800604c:	0082      	lsls	r2, r0, #2
 800604e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006052:	f7fa fe21 	bl	8000c98 <__aeabi_uldivmod>
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	4b2f      	ldr	r3, [pc, #188]	; (8006118 <UART_SetConfig+0x38c>)
 800605c:	fba3 1302 	umull	r1, r3, r3, r2
 8006060:	095b      	lsrs	r3, r3, #5
 8006062:	2164      	movs	r1, #100	; 0x64
 8006064:	fb01 f303 	mul.w	r3, r1, r3
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	011b      	lsls	r3, r3, #4
 800606c:	3332      	adds	r3, #50	; 0x32
 800606e:	4a2a      	ldr	r2, [pc, #168]	; (8006118 <UART_SetConfig+0x38c>)
 8006070:	fba2 2303 	umull	r2, r3, r2, r3
 8006074:	095b      	lsrs	r3, r3, #5
 8006076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800607a:	441e      	add	r6, r3
 800607c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800607e:	4618      	mov	r0, r3
 8006080:	f04f 0100 	mov.w	r1, #0
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	1894      	adds	r4, r2, r2
 800608a:	603c      	str	r4, [r7, #0]
 800608c:	415b      	adcs	r3, r3
 800608e:	607b      	str	r3, [r7, #4]
 8006090:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006094:	1812      	adds	r2, r2, r0
 8006096:	eb41 0303 	adc.w	r3, r1, r3
 800609a:	f04f 0400 	mov.w	r4, #0
 800609e:	f04f 0500 	mov.w	r5, #0
 80060a2:	00dd      	lsls	r5, r3, #3
 80060a4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80060a8:	00d4      	lsls	r4, r2, #3
 80060aa:	4622      	mov	r2, r4
 80060ac:	462b      	mov	r3, r5
 80060ae:	eb12 0a00 	adds.w	sl, r2, r0
 80060b2:	eb43 0b01 	adc.w	fp, r3, r1
 80060b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	4618      	mov	r0, r3
 80060bc:	f04f 0100 	mov.w	r1, #0
 80060c0:	f04f 0200 	mov.w	r2, #0
 80060c4:	f04f 0300 	mov.w	r3, #0
 80060c8:	008b      	lsls	r3, r1, #2
 80060ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80060ce:	0082      	lsls	r2, r0, #2
 80060d0:	4650      	mov	r0, sl
 80060d2:	4659      	mov	r1, fp
 80060d4:	f7fa fde0 	bl	8000c98 <__aeabi_uldivmod>
 80060d8:	4602      	mov	r2, r0
 80060da:	460b      	mov	r3, r1
 80060dc:	4b0e      	ldr	r3, [pc, #56]	; (8006118 <UART_SetConfig+0x38c>)
 80060de:	fba3 1302 	umull	r1, r3, r3, r2
 80060e2:	095b      	lsrs	r3, r3, #5
 80060e4:	2164      	movs	r1, #100	; 0x64
 80060e6:	fb01 f303 	mul.w	r3, r1, r3
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	011b      	lsls	r3, r3, #4
 80060ee:	3332      	adds	r3, #50	; 0x32
 80060f0:	4a09      	ldr	r2, [pc, #36]	; (8006118 <UART_SetConfig+0x38c>)
 80060f2:	fba2 2303 	umull	r2, r3, r2, r3
 80060f6:	095b      	lsrs	r3, r3, #5
 80060f8:	f003 020f 	and.w	r2, r3, #15
 80060fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4432      	add	r2, r6
 8006102:	609a      	str	r2, [r3, #8]
}
 8006104:	bf00      	nop
 8006106:	377c      	adds	r7, #124	; 0x7c
 8006108:	46bd      	mov	sp, r7
 800610a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800610e:	bf00      	nop
 8006110:	40011000 	.word	0x40011000
 8006114:	40011400 	.word	0x40011400
 8006118:	51eb851f 	.word	0x51eb851f

0800611c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800611c:	b084      	sub	sp, #16
 800611e:	b580      	push	{r7, lr}
 8006120:	b084      	sub	sp, #16
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	f107 001c 	add.w	r0, r7, #28
 800612a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800612e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006130:	2b01      	cmp	r3, #1
 8006132:	d122      	bne.n	800617a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006138:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800615c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800615e:	2b01      	cmp	r3, #1
 8006160:	d105      	bne.n	800616e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f001 f9ea 	bl	8007548 <USB_CoreReset>
 8006174:	4603      	mov	r3, r0
 8006176:	73fb      	strb	r3, [r7, #15]
 8006178:	e01a      	b.n	80061b0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f001 f9de 	bl	8007548 <USB_CoreReset>
 800618c:	4603      	mov	r3, r0
 800618e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006192:	2b00      	cmp	r3, #0
 8006194:	d106      	bne.n	80061a4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	639a      	str	r2, [r3, #56]	; 0x38
 80061a2:	e005      	b.n	80061b0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80061b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d10b      	bne.n	80061ce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f043 0206 	orr.w	r2, r3, #6
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f043 0220 	orr.w	r2, r3, #32
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80061ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061da:	b004      	add	sp, #16
 80061dc:	4770      	bx	lr
	...

080061e0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b087      	sub	sp, #28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	4613      	mov	r3, r2
 80061ec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80061ee:	79fb      	ldrb	r3, [r7, #7]
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d165      	bne.n	80062c0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	4a41      	ldr	r2, [pc, #260]	; (80062fc <USB_SetTurnaroundTime+0x11c>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d906      	bls.n	800620a <USB_SetTurnaroundTime+0x2a>
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	4a40      	ldr	r2, [pc, #256]	; (8006300 <USB_SetTurnaroundTime+0x120>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d202      	bcs.n	800620a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006204:	230f      	movs	r3, #15
 8006206:	617b      	str	r3, [r7, #20]
 8006208:	e062      	b.n	80062d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	4a3c      	ldr	r2, [pc, #240]	; (8006300 <USB_SetTurnaroundTime+0x120>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d306      	bcc.n	8006220 <USB_SetTurnaroundTime+0x40>
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	4a3b      	ldr	r2, [pc, #236]	; (8006304 <USB_SetTurnaroundTime+0x124>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d202      	bcs.n	8006220 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800621a:	230e      	movs	r3, #14
 800621c:	617b      	str	r3, [r7, #20]
 800621e:	e057      	b.n	80062d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	4a38      	ldr	r2, [pc, #224]	; (8006304 <USB_SetTurnaroundTime+0x124>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d306      	bcc.n	8006236 <USB_SetTurnaroundTime+0x56>
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	4a37      	ldr	r2, [pc, #220]	; (8006308 <USB_SetTurnaroundTime+0x128>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d202      	bcs.n	8006236 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006230:	230d      	movs	r3, #13
 8006232:	617b      	str	r3, [r7, #20]
 8006234:	e04c      	b.n	80062d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	4a33      	ldr	r2, [pc, #204]	; (8006308 <USB_SetTurnaroundTime+0x128>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d306      	bcc.n	800624c <USB_SetTurnaroundTime+0x6c>
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	4a32      	ldr	r2, [pc, #200]	; (800630c <USB_SetTurnaroundTime+0x12c>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d802      	bhi.n	800624c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006246:	230c      	movs	r3, #12
 8006248:	617b      	str	r3, [r7, #20]
 800624a:	e041      	b.n	80062d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	4a2f      	ldr	r2, [pc, #188]	; (800630c <USB_SetTurnaroundTime+0x12c>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d906      	bls.n	8006262 <USB_SetTurnaroundTime+0x82>
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	4a2e      	ldr	r2, [pc, #184]	; (8006310 <USB_SetTurnaroundTime+0x130>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d802      	bhi.n	8006262 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800625c:	230b      	movs	r3, #11
 800625e:	617b      	str	r3, [r7, #20]
 8006260:	e036      	b.n	80062d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	4a2a      	ldr	r2, [pc, #168]	; (8006310 <USB_SetTurnaroundTime+0x130>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d906      	bls.n	8006278 <USB_SetTurnaroundTime+0x98>
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	4a29      	ldr	r2, [pc, #164]	; (8006314 <USB_SetTurnaroundTime+0x134>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d802      	bhi.n	8006278 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006272:	230a      	movs	r3, #10
 8006274:	617b      	str	r3, [r7, #20]
 8006276:	e02b      	b.n	80062d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	4a26      	ldr	r2, [pc, #152]	; (8006314 <USB_SetTurnaroundTime+0x134>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d906      	bls.n	800628e <USB_SetTurnaroundTime+0xae>
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	4a25      	ldr	r2, [pc, #148]	; (8006318 <USB_SetTurnaroundTime+0x138>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d202      	bcs.n	800628e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006288:	2309      	movs	r3, #9
 800628a:	617b      	str	r3, [r7, #20]
 800628c:	e020      	b.n	80062d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	4a21      	ldr	r2, [pc, #132]	; (8006318 <USB_SetTurnaroundTime+0x138>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d306      	bcc.n	80062a4 <USB_SetTurnaroundTime+0xc4>
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	4a20      	ldr	r2, [pc, #128]	; (800631c <USB_SetTurnaroundTime+0x13c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d802      	bhi.n	80062a4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800629e:	2308      	movs	r3, #8
 80062a0:	617b      	str	r3, [r7, #20]
 80062a2:	e015      	b.n	80062d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	4a1d      	ldr	r2, [pc, #116]	; (800631c <USB_SetTurnaroundTime+0x13c>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d906      	bls.n	80062ba <USB_SetTurnaroundTime+0xda>
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	4a1c      	ldr	r2, [pc, #112]	; (8006320 <USB_SetTurnaroundTime+0x140>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d202      	bcs.n	80062ba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80062b4:	2307      	movs	r3, #7
 80062b6:	617b      	str	r3, [r7, #20]
 80062b8:	e00a      	b.n	80062d0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80062ba:	2306      	movs	r3, #6
 80062bc:	617b      	str	r3, [r7, #20]
 80062be:	e007      	b.n	80062d0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80062c0:	79fb      	ldrb	r3, [r7, #7]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d102      	bne.n	80062cc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80062c6:	2309      	movs	r3, #9
 80062c8:	617b      	str	r3, [r7, #20]
 80062ca:	e001      	b.n	80062d0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80062cc:	2309      	movs	r3, #9
 80062ce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	68da      	ldr	r2, [r3, #12]
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	029b      	lsls	r3, r3, #10
 80062e4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80062e8:	431a      	orrs	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	371c      	adds	r7, #28
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	00d8acbf 	.word	0x00d8acbf
 8006300:	00e4e1c0 	.word	0x00e4e1c0
 8006304:	00f42400 	.word	0x00f42400
 8006308:	01067380 	.word	0x01067380
 800630c:	011a499f 	.word	0x011a499f
 8006310:	01312cff 	.word	0x01312cff
 8006314:	014ca43f 	.word	0x014ca43f
 8006318:	016e3600 	.word	0x016e3600
 800631c:	01a6ab1f 	.word	0x01a6ab1f
 8006320:	01e84800 	.word	0x01e84800

08006324 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	f043 0201 	orr.w	r2, r3, #1
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006346:	b480      	push	{r7}
 8006348:	b083      	sub	sp, #12
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f023 0201 	bic.w	r2, r3, #1
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	460b      	mov	r3, r1
 8006372:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006380:	78fb      	ldrb	r3, [r7, #3]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d106      	bne.n	8006394 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	60da      	str	r2, [r3, #12]
 8006392:	e00b      	b.n	80063ac <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006394:	78fb      	ldrb	r3, [r7, #3]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d106      	bne.n	80063a8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	60da      	str	r2, [r3, #12]
 80063a6:	e001      	b.n	80063ac <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e003      	b.n	80063b4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80063ac:	2032      	movs	r0, #50	; 0x32
 80063ae:	f7fb ff9d 	bl	80022ec <HAL_Delay>

  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3708      	adds	r7, #8
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063bc:	b084      	sub	sp, #16
 80063be:	b580      	push	{r7, lr}
 80063c0:	b086      	sub	sp, #24
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
 80063c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80063ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80063ce:	2300      	movs	r3, #0
 80063d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80063d6:	2300      	movs	r3, #0
 80063d8:	613b      	str	r3, [r7, #16]
 80063da:	e009      	b.n	80063f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	3340      	adds	r3, #64	; 0x40
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	2200      	movs	r2, #0
 80063e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	3301      	adds	r3, #1
 80063ee:	613b      	str	r3, [r7, #16]
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	2b0e      	cmp	r3, #14
 80063f4:	d9f2      	bls.n	80063dc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80063f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d11c      	bne.n	8006436 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800640a:	f043 0302 	orr.w	r3, r3, #2
 800640e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006414:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006420:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	639a      	str	r2, [r3, #56]	; 0x38
 8006434:	e00b      	b.n	800644e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006446:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006454:	461a      	mov	r2, r3
 8006456:	2300      	movs	r3, #0
 8006458:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006460:	4619      	mov	r1, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006468:	461a      	mov	r2, r3
 800646a:	680b      	ldr	r3, [r1, #0]
 800646c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800646e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006470:	2b01      	cmp	r3, #1
 8006472:	d10c      	bne.n	800648e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006476:	2b00      	cmp	r3, #0
 8006478:	d104      	bne.n	8006484 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800647a:	2100      	movs	r1, #0
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f949 	bl	8006714 <USB_SetDevSpeed>
 8006482:	e008      	b.n	8006496 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006484:	2101      	movs	r1, #1
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 f944 	bl	8006714 <USB_SetDevSpeed>
 800648c:	e003      	b.n	8006496 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800648e:	2103      	movs	r1, #3
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f93f 	bl	8006714 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006496:	2110      	movs	r1, #16
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 f8f3 	bl	8006684 <USB_FlushTxFifo>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d001      	beq.n	80064a8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f911 	bl	80066d0 <USB_FlushRxFifo>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d001      	beq.n	80064b8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064be:	461a      	mov	r2, r3
 80064c0:	2300      	movs	r3, #0
 80064c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ca:	461a      	mov	r2, r3
 80064cc:	2300      	movs	r3, #0
 80064ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064d6:	461a      	mov	r2, r3
 80064d8:	2300      	movs	r3, #0
 80064da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064dc:	2300      	movs	r3, #0
 80064de:	613b      	str	r3, [r7, #16]
 80064e0:	e043      	b.n	800656a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064f8:	d118      	bne.n	800652c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10a      	bne.n	8006516 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	015a      	lsls	r2, r3, #5
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	4413      	add	r3, r2
 8006508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800650c:	461a      	mov	r2, r3
 800650e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006512:	6013      	str	r3, [r2, #0]
 8006514:	e013      	b.n	800653e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	015a      	lsls	r2, r3, #5
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	4413      	add	r3, r2
 800651e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006522:	461a      	mov	r2, r3
 8006524:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006528:	6013      	str	r3, [r2, #0]
 800652a:	e008      	b.n	800653e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	015a      	lsls	r2, r3, #5
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	4413      	add	r3, r2
 8006534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006538:	461a      	mov	r2, r3
 800653a:	2300      	movs	r3, #0
 800653c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	4413      	add	r3, r2
 8006546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800654a:	461a      	mov	r2, r3
 800654c:	2300      	movs	r3, #0
 800654e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	015a      	lsls	r2, r3, #5
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	4413      	add	r3, r2
 8006558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800655c:	461a      	mov	r2, r3
 800655e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006562:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	3301      	adds	r3, #1
 8006568:	613b      	str	r3, [r7, #16]
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	429a      	cmp	r2, r3
 8006570:	d3b7      	bcc.n	80064e2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006572:	2300      	movs	r3, #0
 8006574:	613b      	str	r3, [r7, #16]
 8006576:	e043      	b.n	8006600 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	4413      	add	r3, r2
 8006580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800658a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800658e:	d118      	bne.n	80065c2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10a      	bne.n	80065ac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	015a      	lsls	r2, r3, #5
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	4413      	add	r3, r2
 800659e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a2:	461a      	mov	r2, r3
 80065a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80065a8:	6013      	str	r3, [r2, #0]
 80065aa:	e013      	b.n	80065d4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b8:	461a      	mov	r2, r3
 80065ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80065be:	6013      	str	r3, [r2, #0]
 80065c0:	e008      	b.n	80065d4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	015a      	lsls	r2, r3, #5
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ce:	461a      	mov	r2, r3
 80065d0:	2300      	movs	r3, #0
 80065d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	015a      	lsls	r2, r3, #5
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	4413      	add	r3, r2
 80065dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e0:	461a      	mov	r2, r3
 80065e2:	2300      	movs	r3, #0
 80065e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f2:	461a      	mov	r2, r3
 80065f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	3301      	adds	r3, #1
 80065fe:	613b      	str	r3, [r7, #16]
 8006600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	429a      	cmp	r2, r3
 8006606:	d3b7      	bcc.n	8006578 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006616:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800661a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006628:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800662a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662c:	2b00      	cmp	r3, #0
 800662e:	d105      	bne.n	800663c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	f043 0210 	orr.w	r2, r3, #16
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	699a      	ldr	r2, [r3, #24]
 8006640:	4b0f      	ldr	r3, [pc, #60]	; (8006680 <USB_DevInit+0x2c4>)
 8006642:	4313      	orrs	r3, r2
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800664a:	2b00      	cmp	r3, #0
 800664c:	d005      	beq.n	800665a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	f043 0208 	orr.w	r2, r3, #8
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800665a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800665c:	2b01      	cmp	r3, #1
 800665e:	d107      	bne.n	8006670 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006668:	f043 0304 	orr.w	r3, r3, #4
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006670:	7dfb      	ldrb	r3, [r7, #23]
}
 8006672:	4618      	mov	r0, r3
 8006674:	3718      	adds	r7, #24
 8006676:	46bd      	mov	sp, r7
 8006678:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800667c:	b004      	add	sp, #16
 800667e:	4770      	bx	lr
 8006680:	803c3800 	.word	0x803c3800

08006684 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800668e:	2300      	movs	r3, #0
 8006690:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	019b      	lsls	r3, r3, #6
 8006696:	f043 0220 	orr.w	r2, r3, #32
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	3301      	adds	r3, #1
 80066a2:	60fb      	str	r3, [r7, #12]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4a09      	ldr	r2, [pc, #36]	; (80066cc <USB_FlushTxFifo+0x48>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d901      	bls.n	80066b0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80066ac:	2303      	movs	r3, #3
 80066ae:	e006      	b.n	80066be <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	f003 0320 	and.w	r3, r3, #32
 80066b8:	2b20      	cmp	r3, #32
 80066ba:	d0f0      	beq.n	800669e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	00030d40 	.word	0x00030d40

080066d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80066d8:	2300      	movs	r3, #0
 80066da:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2210      	movs	r2, #16
 80066e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	3301      	adds	r3, #1
 80066e6:	60fb      	str	r3, [r7, #12]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	4a09      	ldr	r2, [pc, #36]	; (8006710 <USB_FlushRxFifo+0x40>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d901      	bls.n	80066f4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e006      	b.n	8006702 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	f003 0310 	and.w	r3, r3, #16
 80066fc:	2b10      	cmp	r3, #16
 80066fe:	d0f0      	beq.n	80066e2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	00030d40 	.word	0x00030d40

08006714 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	460b      	mov	r3, r1
 800671e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	78fb      	ldrb	r3, [r7, #3]
 800672e:	68f9      	ldr	r1, [r7, #12]
 8006730:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006734:	4313      	orrs	r3, r2
 8006736:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3714      	adds	r7, #20
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006746:	b480      	push	{r7}
 8006748:	b087      	sub	sp, #28
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f003 0306 	and.w	r3, r3, #6
 800675e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d102      	bne.n	800676c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006766:	2300      	movs	r3, #0
 8006768:	75fb      	strb	r3, [r7, #23]
 800676a:	e00a      	b.n	8006782 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2b02      	cmp	r3, #2
 8006770:	d002      	beq.n	8006778 <USB_GetDevSpeed+0x32>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2b06      	cmp	r3, #6
 8006776:	d102      	bne.n	800677e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006778:	2302      	movs	r3, #2
 800677a:	75fb      	strb	r3, [r7, #23]
 800677c:	e001      	b.n	8006782 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800677e:	230f      	movs	r3, #15
 8006780:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006782:	7dfb      	ldrb	r3, [r7, #23]
}
 8006784:	4618      	mov	r0, r3
 8006786:	371c      	adds	r7, #28
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	785b      	ldrb	r3, [r3, #1]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d13a      	bne.n	8006822 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b2:	69da      	ldr	r2, [r3, #28]
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	f003 030f 	and.w	r3, r3, #15
 80067bc:	2101      	movs	r1, #1
 80067be:	fa01 f303 	lsl.w	r3, r1, r3
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	68f9      	ldr	r1, [r7, #12]
 80067c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067ca:	4313      	orrs	r3, r2
 80067cc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	015a      	lsls	r2, r3, #5
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	4413      	add	r3, r2
 80067d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d155      	bne.n	8006890 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	015a      	lsls	r2, r3, #5
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	4413      	add	r3, r2
 80067ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	78db      	ldrb	r3, [r3, #3]
 80067fe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006800:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	059b      	lsls	r3, r3, #22
 8006806:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006808:	4313      	orrs	r3, r2
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	0151      	lsls	r1, r2, #5
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	440a      	add	r2, r1
 8006812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800681a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800681e:	6013      	str	r3, [r2, #0]
 8006820:	e036      	b.n	8006890 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006828:	69da      	ldr	r2, [r3, #28]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	f003 030f 	and.w	r3, r3, #15
 8006832:	2101      	movs	r1, #1
 8006834:	fa01 f303 	lsl.w	r3, r1, r3
 8006838:	041b      	lsls	r3, r3, #16
 800683a:	68f9      	ldr	r1, [r7, #12]
 800683c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006840:	4313      	orrs	r3, r2
 8006842:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	4413      	add	r3, r2
 800684c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d11a      	bne.n	8006890 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	015a      	lsls	r2, r3, #5
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	4413      	add	r3, r2
 8006862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	78db      	ldrb	r3, [r3, #3]
 8006874:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006876:	430b      	orrs	r3, r1
 8006878:	4313      	orrs	r3, r2
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	0151      	lsls	r1, r2, #5
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	440a      	add	r2, r1
 8006882:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800688a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800688e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3714      	adds	r7, #20
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
	...

080068a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b08a      	sub	sp, #40	; 0x28
 80068a4:	af02      	add	r7, sp, #8
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	4613      	mov	r3, r2
 80068ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	785b      	ldrb	r3, [r3, #1]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	f040 815c 	bne.w	8006b7a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d132      	bne.n	8006930 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	015a      	lsls	r2, r3, #5
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	4413      	add	r3, r2
 80068d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	69ba      	ldr	r2, [r7, #24]
 80068da:	0151      	lsls	r1, r2, #5
 80068dc:	69fa      	ldr	r2, [r7, #28]
 80068de:	440a      	add	r2, r1
 80068e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80068e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80068ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	69ba      	ldr	r2, [r7, #24]
 80068fe:	0151      	lsls	r1, r2, #5
 8006900:	69fa      	ldr	r2, [r7, #28]
 8006902:	440a      	add	r2, r1
 8006904:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006908:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800690c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	015a      	lsls	r2, r3, #5
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	4413      	add	r3, r2
 8006916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	69ba      	ldr	r2, [r7, #24]
 800691e:	0151      	lsls	r1, r2, #5
 8006920:	69fa      	ldr	r2, [r7, #28]
 8006922:	440a      	add	r2, r1
 8006924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006928:	0cdb      	lsrs	r3, r3, #19
 800692a:	04db      	lsls	r3, r3, #19
 800692c:	6113      	str	r3, [r2, #16]
 800692e:	e074      	b.n	8006a1a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	015a      	lsls	r2, r3, #5
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	4413      	add	r3, r2
 8006938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	0151      	lsls	r1, r2, #5
 8006942:	69fa      	ldr	r2, [r7, #28]
 8006944:	440a      	add	r2, r1
 8006946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800694a:	0cdb      	lsrs	r3, r3, #19
 800694c:	04db      	lsls	r3, r3, #19
 800694e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	4413      	add	r3, r2
 8006958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	69ba      	ldr	r2, [r7, #24]
 8006960:	0151      	lsls	r1, r2, #5
 8006962:	69fa      	ldr	r2, [r7, #28]
 8006964:	440a      	add	r2, r1
 8006966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800696a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800696e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006972:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	015a      	lsls	r2, r3, #5
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	4413      	add	r3, r2
 800697c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006980:	691a      	ldr	r2, [r3, #16]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	6959      	ldr	r1, [r3, #20]
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	440b      	add	r3, r1
 800698c:	1e59      	subs	r1, r3, #1
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	fbb1 f3f3 	udiv	r3, r1, r3
 8006996:	04d9      	lsls	r1, r3, #19
 8006998:	4b9d      	ldr	r3, [pc, #628]	; (8006c10 <USB_EPStartXfer+0x370>)
 800699a:	400b      	ands	r3, r1
 800699c:	69b9      	ldr	r1, [r7, #24]
 800699e:	0148      	lsls	r0, r1, #5
 80069a0:	69f9      	ldr	r1, [r7, #28]
 80069a2:	4401      	add	r1, r0
 80069a4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80069a8:	4313      	orrs	r3, r2
 80069aa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	015a      	lsls	r2, r3, #5
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	4413      	add	r3, r2
 80069b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b8:	691a      	ldr	r2, [r3, #16]
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069c2:	69b9      	ldr	r1, [r7, #24]
 80069c4:	0148      	lsls	r0, r1, #5
 80069c6:	69f9      	ldr	r1, [r7, #28]
 80069c8:	4401      	add	r1, r0
 80069ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80069ce:	4313      	orrs	r3, r2
 80069d0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	78db      	ldrb	r3, [r3, #3]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d11f      	bne.n	8006a1a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	015a      	lsls	r2, r3, #5
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	69ba      	ldr	r2, [r7, #24]
 80069ea:	0151      	lsls	r1, r2, #5
 80069ec:	69fa      	ldr	r2, [r7, #28]
 80069ee:	440a      	add	r2, r1
 80069f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069f4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80069f8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	69ba      	ldr	r2, [r7, #24]
 8006a0a:	0151      	lsls	r1, r2, #5
 8006a0c:	69fa      	ldr	r2, [r7, #28]
 8006a0e:	440a      	add	r2, r1
 8006a10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a18:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006a1a:	79fb      	ldrb	r3, [r7, #7]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d14b      	bne.n	8006ab8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d009      	beq.n	8006a3c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a34:	461a      	mov	r2, r3
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	78db      	ldrb	r3, [r3, #3]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d128      	bne.n	8006a96 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d110      	bne.n	8006a76 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	015a      	lsls	r2, r3, #5
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	69ba      	ldr	r2, [r7, #24]
 8006a64:	0151      	lsls	r1, r2, #5
 8006a66:	69fa      	ldr	r2, [r7, #28]
 8006a68:	440a      	add	r2, r1
 8006a6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a72:	6013      	str	r3, [r2, #0]
 8006a74:	e00f      	b.n	8006a96 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	015a      	lsls	r2, r3, #5
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	69ba      	ldr	r2, [r7, #24]
 8006a86:	0151      	lsls	r1, r2, #5
 8006a88:	69fa      	ldr	r2, [r7, #28]
 8006a8a:	440a      	add	r2, r1
 8006a8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a94:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	015a      	lsls	r2, r3, #5
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	69ba      	ldr	r2, [r7, #24]
 8006aa6:	0151      	lsls	r1, r2, #5
 8006aa8:	69fa      	ldr	r2, [r7, #28]
 8006aaa:	440a      	add	r2, r1
 8006aac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ab0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ab4:	6013      	str	r3, [r2, #0]
 8006ab6:	e12f      	b.n	8006d18 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	69ba      	ldr	r2, [r7, #24]
 8006ac8:	0151      	lsls	r1, r2, #5
 8006aca:	69fa      	ldr	r2, [r7, #28]
 8006acc:	440a      	add	r2, r1
 8006ace:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ad2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ad6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	78db      	ldrb	r3, [r3, #3]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d015      	beq.n	8006b0c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	695b      	ldr	r3, [r3, #20]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 8117 	beq.w	8006d18 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006af0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	f003 030f 	and.w	r3, r3, #15
 8006afa:	2101      	movs	r1, #1
 8006afc:	fa01 f303 	lsl.w	r3, r1, r3
 8006b00:	69f9      	ldr	r1, [r7, #28]
 8006b02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b06:	4313      	orrs	r3, r2
 8006b08:	634b      	str	r3, [r1, #52]	; 0x34
 8006b0a:	e105      	b.n	8006d18 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d110      	bne.n	8006b3e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	015a      	lsls	r2, r3, #5
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	4413      	add	r3, r2
 8006b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	69ba      	ldr	r2, [r7, #24]
 8006b2c:	0151      	lsls	r1, r2, #5
 8006b2e:	69fa      	ldr	r2, [r7, #28]
 8006b30:	440a      	add	r2, r1
 8006b32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b3a:	6013      	str	r3, [r2, #0]
 8006b3c:	e00f      	b.n	8006b5e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	015a      	lsls	r2, r3, #5
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	4413      	add	r3, r2
 8006b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	69ba      	ldr	r2, [r7, #24]
 8006b4e:	0151      	lsls	r1, r2, #5
 8006b50:	69fa      	ldr	r2, [r7, #28]
 8006b52:	440a      	add	r2, r1
 8006b54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b5c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	68d9      	ldr	r1, [r3, #12]
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	781a      	ldrb	r2, [r3, #0]
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	b298      	uxth	r0, r3
 8006b6c:	79fb      	ldrb	r3, [r7, #7]
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	4603      	mov	r3, r0
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f000 fa2b 	bl	8006fce <USB_WritePacket>
 8006b78:	e0ce      	b.n	8006d18 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	015a      	lsls	r2, r3, #5
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	4413      	add	r3, r2
 8006b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	69ba      	ldr	r2, [r7, #24]
 8006b8a:	0151      	lsls	r1, r2, #5
 8006b8c:	69fa      	ldr	r2, [r7, #28]
 8006b8e:	440a      	add	r2, r1
 8006b90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b94:	0cdb      	lsrs	r3, r3, #19
 8006b96:	04db      	lsls	r3, r3, #19
 8006b98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	015a      	lsls	r2, r3, #5
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	69ba      	ldr	r2, [r7, #24]
 8006baa:	0151      	lsls	r1, r2, #5
 8006bac:	69fa      	ldr	r2, [r7, #28]
 8006bae:	440a      	add	r2, r1
 8006bb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bb4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006bb8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006bbc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d126      	bne.n	8006c14 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	015a      	lsls	r2, r3, #5
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd2:	691a      	ldr	r2, [r3, #16]
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bdc:	69b9      	ldr	r1, [r7, #24]
 8006bde:	0148      	lsls	r0, r1, #5
 8006be0:	69f9      	ldr	r1, [r7, #28]
 8006be2:	4401      	add	r1, r0
 8006be4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006be8:	4313      	orrs	r3, r2
 8006bea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	015a      	lsls	r2, r3, #5
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	69ba      	ldr	r2, [r7, #24]
 8006bfc:	0151      	lsls	r1, r2, #5
 8006bfe:	69fa      	ldr	r2, [r7, #28]
 8006c00:	440a      	add	r2, r1
 8006c02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c0a:	6113      	str	r3, [r2, #16]
 8006c0c:	e036      	b.n	8006c7c <USB_EPStartXfer+0x3dc>
 8006c0e:	bf00      	nop
 8006c10:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	695a      	ldr	r2, [r3, #20]
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	1e5a      	subs	r2, r3, #1
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c28:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	015a      	lsls	r2, r3, #5
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	4413      	add	r3, r2
 8006c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c36:	691a      	ldr	r2, [r3, #16]
 8006c38:	8afb      	ldrh	r3, [r7, #22]
 8006c3a:	04d9      	lsls	r1, r3, #19
 8006c3c:	4b39      	ldr	r3, [pc, #228]	; (8006d24 <USB_EPStartXfer+0x484>)
 8006c3e:	400b      	ands	r3, r1
 8006c40:	69b9      	ldr	r1, [r7, #24]
 8006c42:	0148      	lsls	r0, r1, #5
 8006c44:	69f9      	ldr	r1, [r7, #28]
 8006c46:	4401      	add	r1, r0
 8006c48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5c:	691a      	ldr	r2, [r3, #16]
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	8af9      	ldrh	r1, [r7, #22]
 8006c64:	fb01 f303 	mul.w	r3, r1, r3
 8006c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c6c:	69b9      	ldr	r1, [r7, #24]
 8006c6e:	0148      	lsls	r0, r1, #5
 8006c70:	69f9      	ldr	r1, [r7, #28]
 8006c72:	4401      	add	r1, r0
 8006c74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006c7c:	79fb      	ldrb	r3, [r7, #7]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d10d      	bne.n	8006c9e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d009      	beq.n	8006c9e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	68d9      	ldr	r1, [r3, #12]
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	015a      	lsls	r2, r3, #5
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c9a:	460a      	mov	r2, r1
 8006c9c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	78db      	ldrb	r3, [r3, #3]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d128      	bne.n	8006cf8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d110      	bne.n	8006cd8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	015a      	lsls	r2, r3, #5
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	69ba      	ldr	r2, [r7, #24]
 8006cc6:	0151      	lsls	r1, r2, #5
 8006cc8:	69fa      	ldr	r2, [r7, #28]
 8006cca:	440a      	add	r2, r1
 8006ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006cd4:	6013      	str	r3, [r2, #0]
 8006cd6:	e00f      	b.n	8006cf8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	69ba      	ldr	r2, [r7, #24]
 8006ce8:	0151      	lsls	r1, r2, #5
 8006cea:	69fa      	ldr	r2, [r7, #28]
 8006cec:	440a      	add	r2, r1
 8006cee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cf6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	69ba      	ldr	r2, [r7, #24]
 8006d08:	0151      	lsls	r1, r2, #5
 8006d0a:	69fa      	ldr	r2, [r7, #28]
 8006d0c:	440a      	add	r2, r1
 8006d0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3720      	adds	r7, #32
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	1ff80000 	.word	0x1ff80000

08006d28 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b087      	sub	sp, #28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	4613      	mov	r3, r2
 8006d34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	785b      	ldrb	r3, [r3, #1]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	f040 80cd 	bne.w	8006ee4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d132      	bne.n	8006db8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	015a      	lsls	r2, r3, #5
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	4413      	add	r3, r2
 8006d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	693a      	ldr	r2, [r7, #16]
 8006d62:	0151      	lsls	r1, r2, #5
 8006d64:	697a      	ldr	r2, [r7, #20]
 8006d66:	440a      	add	r2, r1
 8006d68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	015a      	lsls	r2, r3, #5
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	0151      	lsls	r1, r2, #5
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	440a      	add	r2, r1
 8006d8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	015a      	lsls	r2, r3, #5
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	0151      	lsls	r1, r2, #5
 8006da8:	697a      	ldr	r2, [r7, #20]
 8006daa:	440a      	add	r2, r1
 8006dac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006db0:	0cdb      	lsrs	r3, r3, #19
 8006db2:	04db      	lsls	r3, r3, #19
 8006db4:	6113      	str	r3, [r2, #16]
 8006db6:	e04e      	b.n	8006e56 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	015a      	lsls	r2, r3, #5
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	0151      	lsls	r1, r2, #5
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	440a      	add	r2, r1
 8006dce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dd2:	0cdb      	lsrs	r3, r3, #19
 8006dd4:	04db      	lsls	r3, r3, #19
 8006dd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	0151      	lsls	r1, r2, #5
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	440a      	add	r2, r1
 8006dee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006df2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006df6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006dfa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	695a      	ldr	r2, [r3, #20]
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d903      	bls.n	8006e10 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	689a      	ldr	r2, [r3, #8]
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	015a      	lsls	r2, r3, #5
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	0151      	lsls	r1, r2, #5
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	440a      	add	r2, r1
 8006e26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	015a      	lsls	r2, r3, #5
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	4413      	add	r3, r2
 8006e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e3c:	691a      	ldr	r2, [r3, #16]
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e46:	6939      	ldr	r1, [r7, #16]
 8006e48:	0148      	lsls	r0, r1, #5
 8006e4a:	6979      	ldr	r1, [r7, #20]
 8006e4c:	4401      	add	r1, r0
 8006e4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e52:	4313      	orrs	r3, r2
 8006e54:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006e56:	79fb      	ldrb	r3, [r7, #7]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d11e      	bne.n	8006e9a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d009      	beq.n	8006e78 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	015a      	lsls	r2, r3, #5
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e70:	461a      	mov	r2, r3
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	0151      	lsls	r1, r2, #5
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	440a      	add	r2, r1
 8006e8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e96:	6013      	str	r3, [r2, #0]
 8006e98:	e092      	b.n	8006fc0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	015a      	lsls	r2, r3, #5
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	0151      	lsls	r1, r2, #5
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	440a      	add	r2, r1
 8006eb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006eb8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d07e      	beq.n	8006fc0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ec8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	f003 030f 	and.w	r3, r3, #15
 8006ed2:	2101      	movs	r1, #1
 8006ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ed8:	6979      	ldr	r1, [r7, #20]
 8006eda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	634b      	str	r3, [r1, #52]	; 0x34
 8006ee2:	e06d      	b.n	8006fc0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	0151      	lsls	r1, r2, #5
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	440a      	add	r2, r1
 8006efa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006efe:	0cdb      	lsrs	r3, r3, #19
 8006f00:	04db      	lsls	r3, r3, #19
 8006f02:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	015a      	lsls	r2, r3, #5
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	693a      	ldr	r2, [r7, #16]
 8006f14:	0151      	lsls	r1, r2, #5
 8006f16:	697a      	ldr	r2, [r7, #20]
 8006f18:	440a      	add	r2, r1
 8006f1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f1e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f22:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f26:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	695b      	ldr	r3, [r3, #20]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d003      	beq.n	8006f38 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	689a      	ldr	r2, [r3, #8]
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	015a      	lsls	r2, r3, #5
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	693a      	ldr	r2, [r7, #16]
 8006f48:	0151      	lsls	r1, r2, #5
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	440a      	add	r2, r1
 8006f4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f56:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	015a      	lsls	r2, r3, #5
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f64:	691a      	ldr	r2, [r3, #16]
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f6e:	6939      	ldr	r1, [r7, #16]
 8006f70:	0148      	lsls	r0, r1, #5
 8006f72:	6979      	ldr	r1, [r7, #20]
 8006f74:	4401      	add	r1, r0
 8006f76:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006f7e:	79fb      	ldrb	r3, [r7, #7]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d10d      	bne.n	8006fa0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d009      	beq.n	8006fa0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	68d9      	ldr	r1, [r3, #12]
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	015a      	lsls	r2, r3, #5
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	4413      	add	r3, r2
 8006f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f9c:	460a      	mov	r2, r1
 8006f9e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	015a      	lsls	r2, r3, #5
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	693a      	ldr	r2, [r7, #16]
 8006fb0:	0151      	lsls	r1, r2, #5
 8006fb2:	697a      	ldr	r2, [r7, #20]
 8006fb4:	440a      	add	r2, r1
 8006fb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006fbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	371c      	adds	r7, #28
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b089      	sub	sp, #36	; 0x24
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	60f8      	str	r0, [r7, #12]
 8006fd6:	60b9      	str	r1, [r7, #8]
 8006fd8:	4611      	mov	r1, r2
 8006fda:	461a      	mov	r2, r3
 8006fdc:	460b      	mov	r3, r1
 8006fde:	71fb      	strb	r3, [r7, #7]
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006fec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d11a      	bne.n	800702a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006ff4:	88bb      	ldrh	r3, [r7, #4]
 8006ff6:	3303      	adds	r3, #3
 8006ff8:	089b      	lsrs	r3, r3, #2
 8006ffa:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	61bb      	str	r3, [r7, #24]
 8007000:	e00f      	b.n	8007022 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007002:	79fb      	ldrb	r3, [r7, #7]
 8007004:	031a      	lsls	r2, r3, #12
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	4413      	add	r3, r2
 800700a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800700e:	461a      	mov	r2, r3
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	3304      	adds	r3, #4
 800701a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	3301      	adds	r3, #1
 8007020:	61bb      	str	r3, [r7, #24]
 8007022:	69ba      	ldr	r2, [r7, #24]
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	429a      	cmp	r2, r3
 8007028:	d3eb      	bcc.n	8007002 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3724      	adds	r7, #36	; 0x24
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007038:	b480      	push	{r7}
 800703a:	b089      	sub	sp, #36	; 0x24
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	4613      	mov	r3, r2
 8007044:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800704e:	88fb      	ldrh	r3, [r7, #6]
 8007050:	3303      	adds	r3, #3
 8007052:	089b      	lsrs	r3, r3, #2
 8007054:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007056:	2300      	movs	r3, #0
 8007058:	61bb      	str	r3, [r7, #24]
 800705a:	e00b      	b.n	8007074 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	601a      	str	r2, [r3, #0]
    pDest++;
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	3304      	adds	r3, #4
 800706c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	3301      	adds	r3, #1
 8007072:	61bb      	str	r3, [r7, #24]
 8007074:	69ba      	ldr	r2, [r7, #24]
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	429a      	cmp	r2, r3
 800707a:	d3ef      	bcc.n	800705c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800707c:	69fb      	ldr	r3, [r7, #28]
}
 800707e:	4618      	mov	r0, r3
 8007080:	3724      	adds	r7, #36	; 0x24
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr

0800708a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800708a:	b480      	push	{r7}
 800708c:	b085      	sub	sp, #20
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
 8007092:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	785b      	ldrb	r3, [r3, #1]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d12c      	bne.n	8007100 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	015a      	lsls	r2, r3, #5
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	db12      	blt.n	80070de <USB_EPSetStall+0x54>
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00f      	beq.n	80070de <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	015a      	lsls	r2, r3, #5
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	4413      	add	r3, r2
 80070c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	0151      	lsls	r1, r2, #5
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	440a      	add	r2, r1
 80070d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80070dc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	015a      	lsls	r2, r3, #5
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	4413      	add	r3, r2
 80070e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	0151      	lsls	r1, r2, #5
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	440a      	add	r2, r1
 80070f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80070fc:	6013      	str	r3, [r2, #0]
 80070fe:	e02b      	b.n	8007158 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4413      	add	r3, r2
 8007108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	db12      	blt.n	8007138 <USB_EPSetStall+0xae>
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00f      	beq.n	8007138 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	015a      	lsls	r2, r3, #5
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	4413      	add	r3, r2
 8007120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	0151      	lsls	r1, r2, #5
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	440a      	add	r2, r1
 800712e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007132:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007136:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	015a      	lsls	r2, r3, #5
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	4413      	add	r3, r2
 8007140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68ba      	ldr	r2, [r7, #8]
 8007148:	0151      	lsls	r1, r2, #5
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	440a      	add	r2, r1
 800714e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007152:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007156:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007166:	b480      	push	{r7}
 8007168:	b085      	sub	sp, #20
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
 800716e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	785b      	ldrb	r3, [r3, #1]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d128      	bne.n	80071d4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	015a      	lsls	r2, r3, #5
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	4413      	add	r3, r2
 800718a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	0151      	lsls	r1, r2, #5
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	440a      	add	r2, r1
 8007198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800719c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80071a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	78db      	ldrb	r3, [r3, #3]
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	d003      	beq.n	80071b2 <USB_EPClearStall+0x4c>
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	78db      	ldrb	r3, [r3, #3]
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d138      	bne.n	8007224 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	015a      	lsls	r2, r3, #5
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	4413      	add	r3, r2
 80071ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	0151      	lsls	r1, r2, #5
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	440a      	add	r2, r1
 80071c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071d0:	6013      	str	r3, [r2, #0]
 80071d2:	e027      	b.n	8007224 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	015a      	lsls	r2, r3, #5
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	4413      	add	r3, r2
 80071dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	0151      	lsls	r1, r2, #5
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	440a      	add	r2, r1
 80071ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80071f2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	78db      	ldrb	r3, [r3, #3]
 80071f8:	2b03      	cmp	r3, #3
 80071fa:	d003      	beq.n	8007204 <USB_EPClearStall+0x9e>
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	78db      	ldrb	r3, [r3, #3]
 8007200:	2b02      	cmp	r3, #2
 8007202:	d10f      	bne.n	8007224 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4413      	add	r3, r2
 800720c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68ba      	ldr	r2, [r7, #8]
 8007214:	0151      	lsls	r1, r2, #5
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	440a      	add	r2, r1
 800721a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800721e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007222:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007232:	b480      	push	{r7}
 8007234:	b085      	sub	sp, #20
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	460b      	mov	r3, r1
 800723c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007250:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007254:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	78fb      	ldrb	r3, [r7, #3]
 8007260:	011b      	lsls	r3, r3, #4
 8007262:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007266:	68f9      	ldr	r1, [r7, #12]
 8007268:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800726c:	4313      	orrs	r3, r2
 800726e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3714      	adds	r7, #20
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800727e:	b480      	push	{r7}
 8007280:	b085      	sub	sp, #20
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007298:	f023 0303 	bic.w	r3, r3, #3
 800729c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072ac:	f023 0302 	bic.w	r3, r3, #2
 80072b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3714      	adds	r7, #20
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80072da:	f023 0303 	bic.w	r3, r3, #3
 80072de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072ee:	f043 0302 	orr.w	r3, r3, #2
 80072f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3714      	adds	r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007302:	b480      	push	{r7}
 8007304:	b085      	sub	sp, #20
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	4013      	ands	r3, r2
 8007318:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800731a:	68fb      	ldr	r3, [r7, #12]
}
 800731c:	4618      	mov	r0, r3
 800731e:	3714      	adds	r7, #20
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007344:	69db      	ldr	r3, [r3, #28]
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	4013      	ands	r3, r2
 800734a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	0c1b      	lsrs	r3, r3, #16
}
 8007350:	4618      	mov	r0, r3
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800735c:	b480      	push	{r7}
 800735e:	b085      	sub	sp, #20
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007378:	69db      	ldr	r3, [r3, #28]
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	4013      	ands	r3, r2
 800737e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	b29b      	uxth	r3, r3
}
 8007384:	4618      	mov	r0, r3
 8007386:	3714      	adds	r7, #20
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	460b      	mov	r3, r1
 800739a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80073a0:	78fb      	ldrb	r3, [r7, #3]
 80073a2:	015a      	lsls	r2, r3, #5
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	4413      	add	r3, r2
 80073a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073b6:	695b      	ldr	r3, [r3, #20]
 80073b8:	68ba      	ldr	r2, [r7, #8]
 80073ba:	4013      	ands	r3, r2
 80073bc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80073be:	68bb      	ldr	r3, [r7, #8]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b087      	sub	sp, #28
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	460b      	mov	r3, r1
 80073d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ee:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80073f0:	78fb      	ldrb	r3, [r7, #3]
 80073f2:	f003 030f 	and.w	r3, r3, #15
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	fa22 f303 	lsr.w	r3, r2, r3
 80073fc:	01db      	lsls	r3, r3, #7
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	4313      	orrs	r3, r2
 8007404:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007406:	78fb      	ldrb	r3, [r7, #3]
 8007408:	015a      	lsls	r2, r3, #5
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	4413      	add	r3, r2
 800740e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	4013      	ands	r3, r2
 8007418:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800741a:	68bb      	ldr	r3, [r7, #8]
}
 800741c:	4618      	mov	r0, r3
 800741e:	371c      	adds	r7, #28
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	695b      	ldr	r3, [r3, #20]
 8007434:	f003 0301 	and.w	r3, r3, #1
}
 8007438:	4618      	mov	r0, r3
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800745e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007462:	f023 0307 	bic.w	r3, r3, #7
 8007466:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800747a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
	...

0800748c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800748c:	b480      	push	{r7}
 800748e:	b087      	sub	sp, #28
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	460b      	mov	r3, r1
 8007496:	607a      	str	r2, [r7, #4]
 8007498:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	333c      	adds	r3, #60	; 0x3c
 80074a2:	3304      	adds	r3, #4
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	4a26      	ldr	r2, [pc, #152]	; (8007544 <USB_EP0_OutStart+0xb8>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d90a      	bls.n	80074c6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074c0:	d101      	bne.n	80074c6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80074c2:	2300      	movs	r3, #0
 80074c4:	e037      	b.n	8007536 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074cc:	461a      	mov	r2, r3
 80074ce:	2300      	movs	r3, #0
 80074d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074f4:	f043 0318 	orr.w	r3, r3, #24
 80074f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007508:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800750c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800750e:	7afb      	ldrb	r3, [r7, #11]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d10f      	bne.n	8007534 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800751a:	461a      	mov	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	697a      	ldr	r2, [r7, #20]
 800752a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800752e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007532:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	371c      	adds	r7, #28
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	4f54300a 	.word	0x4f54300a

08007548 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007550:	2300      	movs	r3, #0
 8007552:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	3301      	adds	r3, #1
 8007558:	60fb      	str	r3, [r7, #12]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	4a13      	ldr	r2, [pc, #76]	; (80075ac <USB_CoreReset+0x64>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d901      	bls.n	8007566 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e01b      	b.n	800759e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	2b00      	cmp	r3, #0
 800756c:	daf2      	bge.n	8007554 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800756e:	2300      	movs	r3, #0
 8007570:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	f043 0201 	orr.w	r2, r3, #1
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	3301      	adds	r3, #1
 8007582:	60fb      	str	r3, [r7, #12]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	4a09      	ldr	r2, [pc, #36]	; (80075ac <USB_CoreReset+0x64>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d901      	bls.n	8007590 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800758c:	2303      	movs	r3, #3
 800758e:	e006      	b.n	800759e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	f003 0301 	and.w	r3, r3, #1
 8007598:	2b01      	cmp	r3, #1
 800759a:	d0f0      	beq.n	800757e <USB_CoreReset+0x36>

  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3714      	adds	r7, #20
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr
 80075aa:	bf00      	nop
 80075ac:	00030d40 	.word	0x00030d40

080075b0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80075b0:	b480      	push	{r7}
 80075b2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80075b4:	f3bf 8f4f 	dsb	sy
}
 80075b8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80075ba:	4b06      	ldr	r3, [pc, #24]	; (80075d4 <__NVIC_SystemReset+0x24>)
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80075c2:	4904      	ldr	r1, [pc, #16]	; (80075d4 <__NVIC_SystemReset+0x24>)
 80075c4:	4b04      	ldr	r3, [pc, #16]	; (80075d8 <__NVIC_SystemReset+0x28>)
 80075c6:	4313      	orrs	r3, r2
 80075c8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80075ca:	f3bf 8f4f 	dsb	sy
}
 80075ce:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80075d0:	bf00      	nop
 80075d2:	e7fd      	b.n	80075d0 <__NVIC_SystemReset+0x20>
 80075d4:	e000ed00 	.word	0xe000ed00
 80075d8:	05fa0004 	.word	0x05fa0004

080075dc <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	460b      	mov	r3, r1
 80075e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 80075e8:	f240 401c 	movw	r0, #1052	; 0x41c
 80075ec:	f005 f994 	bl	800c918 <USBD_static_malloc>
 80075f0:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d105      	bne.n	8007604 <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007600:	2302      	movs	r3, #2
 8007602:	e03f      	b.n	8007684 <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  hdfu->alt_setting = 0U;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800761a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wblock_num = 0U;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2200      	movs	r2, #0
 8007622:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2200      	movs	r2, #0
 8007632:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2202      	movs	r2, #2
 800763a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[1] = 0U;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
  hdfu->dev_status[2] = 0U;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
  hdfu->dev_status[3] = 0U;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2202      	movs	r2, #2
 8007662:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[5] = 0U;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	4798      	blx	r3
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d001      	beq.n	8007682 <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 800767e:	2303      	movs	r3, #3
 8007680:	e000      	b.n	8007684 <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	460b      	mov	r3, r1
 8007696:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d101      	bne.n	80076a6 <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 80076a2:	2302      	movs	r3, #2
 80076a4:	e027      	b.n	80076f6 <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076ac:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2202      	movs	r2, #2
 80076c2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2202      	movs	r2, #2
 80076d2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076e6:	4618      	mov	r0, r3
 80076e8:	f005 f924 	bl	800c934 <USBD_static_free>
  pdev->pClassData = NULL;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
	...

08007700 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b088      	sub	sp, #32
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007710:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8007712:	2300      	movs	r3, #0
 8007714:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 8007716:	2300      	movs	r3, #0
 8007718:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 800771a:	2300      	movs	r3, #0
 800771c:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 800771e:	2300      	movs	r3, #0
 8007720:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d101      	bne.n	800772c <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8007728:	2303      	movs	r3, #3
 800772a:	e0d5      	b.n	80078d8 <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007734:	2b00      	cmp	r3, #0
 8007736:	d03e      	beq.n	80077b6 <USBD_DFU_Setup+0xb6>
 8007738:	2b20      	cmp	r3, #32
 800773a:	f040 80c5 	bne.w	80078c8 <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	785b      	ldrb	r3, [r3, #1]
 8007742:	2b06      	cmp	r3, #6
 8007744:	d82f      	bhi.n	80077a6 <USBD_DFU_Setup+0xa6>
 8007746:	a201      	add	r2, pc, #4	; (adr r2, 800774c <USBD_DFU_Setup+0x4c>)
 8007748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800774c:	0800779d 	.word	0x0800779d
 8007750:	08007769 	.word	0x08007769
 8007754:	08007773 	.word	0x08007773
 8007758:	0800777d 	.word	0x0800777d
 800775c:	08007785 	.word	0x08007785
 8007760:	0800778d 	.word	0x0800778d
 8007764:	08007795 	.word	0x08007795
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fa6c 	bl	8007c48 <DFU_Download>
          break;
 8007770:	e020      	b.n	80077b4 <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 8007772:	6839      	ldr	r1, [r7, #0]
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fad3 	bl	8007d20 <DFU_Upload>
          break;
 800777a:	e01b      	b.n	80077b4 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 fba9 	bl	8007ed4 <DFU_GetStatus>
          break;
 8007782:	e017      	b.n	80077b4 <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 fc5b 	bl	8008040 <DFU_ClearStatus>
          break;
 800778a:	e013      	b.n	80077b4 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 fcab 	bl	80080e8 <DFU_GetState>
          break;
 8007792:	e00f      	b.n	80077b4 <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 fcbf 	bl	8008118 <DFU_Abort>
          break;
 800779a:	e00b      	b.n	80077b4 <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 800779c:	6839      	ldr	r1, [r7, #0]
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f9ee 	bl	8007b80 <DFU_Detach>
          break;
 80077a4:	e006      	b.n	80077b4 <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 80077a6:	6839      	ldr	r1, [r7, #0]
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f001 fdf9 	bl	80093a0 <USBD_CtlError>
          ret = USBD_FAIL;
 80077ae:	2303      	movs	r3, #3
 80077b0:	77fb      	strb	r3, [r7, #31]
          break;
 80077b2:	bf00      	nop
      }
      break;
 80077b4:	e08f      	b.n	80078d6 <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	785b      	ldrb	r3, [r3, #1]
 80077ba:	2b0b      	cmp	r3, #11
 80077bc:	d87b      	bhi.n	80078b6 <USBD_DFU_Setup+0x1b6>
 80077be:	a201      	add	r2, pc, #4	; (adr r2, 80077c4 <USBD_DFU_Setup+0xc4>)
 80077c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c4:	080077f5 	.word	0x080077f5
 80077c8:	080078c5 	.word	0x080078c5
 80077cc:	080078b7 	.word	0x080078b7
 80077d0:	080078b7 	.word	0x080078b7
 80077d4:	080078b7 	.word	0x080078b7
 80077d8:	080078b7 	.word	0x080078b7
 80077dc:	0800781f 	.word	0x0800781f
 80077e0:	080078b7 	.word	0x080078b7
 80077e4:	080078b7 	.word	0x080078b7
 80077e8:	080078b7 	.word	0x080078b7
 80077ec:	08007849 	.word	0x08007849
 80077f0:	08007875 	.word	0x08007875
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	2b03      	cmp	r3, #3
 80077fe:	d107      	bne.n	8007810 <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007800:	f107 030e 	add.w	r3, r7, #14
 8007804:	2202      	movs	r2, #2
 8007806:	4619      	mov	r1, r3
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f001 fe3a 	bl	8009482 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800780e:	e05a      	b.n	80078c6 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8007810:	6839      	ldr	r1, [r7, #0]
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f001 fdc4 	bl	80093a0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007818:	2303      	movs	r3, #3
 800781a:	77fb      	strb	r3, [r7, #31]
          break;
 800781c:	e053      	b.n	80078c6 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	885b      	ldrh	r3, [r3, #2]
 8007822:	0a1b      	lsrs	r3, r3, #8
 8007824:	b29b      	uxth	r3, r3
 8007826:	2b21      	cmp	r3, #33	; 0x21
 8007828:	d107      	bne.n	800783a <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 800782a:	4b2d      	ldr	r3, [pc, #180]	; (80078e0 <USBD_DFU_Setup+0x1e0>)
 800782c:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	88db      	ldrh	r3, [r3, #6]
 8007832:	2b09      	cmp	r3, #9
 8007834:	bf28      	it	cs
 8007836:	2309      	movcs	r3, #9
 8007838:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 800783a:	8afb      	ldrh	r3, [r7, #22]
 800783c:	461a      	mov	r2, r3
 800783e:	69b9      	ldr	r1, [r7, #24]
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f001 fe1e 	bl	8009482 <USBD_CtlSendData>
          break;
 8007846:	e03e      	b.n	80078c6 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b03      	cmp	r3, #3
 8007852:	d108      	bne.n	8007866 <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800785a:	2201      	movs	r2, #1
 800785c:	4619      	mov	r1, r3
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f001 fe0f 	bl	8009482 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007864:	e02f      	b.n	80078c6 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f001 fd99 	bl	80093a0 <USBD_CtlError>
            ret = USBD_FAIL;
 800786e:	2303      	movs	r3, #3
 8007870:	77fb      	strb	r3, [r7, #31]
          break;
 8007872:	e028      	b.n	80078c6 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	885b      	ldrh	r3, [r3, #2]
 8007878:	b2db      	uxtb	r3, r3
 800787a:	2b00      	cmp	r3, #0
 800787c:	d114      	bne.n	80078a8 <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007884:	b2db      	uxtb	r3, r3
 8007886:	2b03      	cmp	r3, #3
 8007888:	d107      	bne.n	800789a <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	885b      	ldrh	r3, [r3, #2]
 800788e:	b2db      	uxtb	r3, r3
 8007890:	461a      	mov	r2, r3
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007898:	e015      	b.n	80078c6 <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 800789a:	6839      	ldr	r1, [r7, #0]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f001 fd7f 	bl	80093a0 <USBD_CtlError>
              ret = USBD_FAIL;
 80078a2:	2303      	movs	r3, #3
 80078a4:	77fb      	strb	r3, [r7, #31]
          break;
 80078a6:	e00e      	b.n	80078c6 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 80078a8:	6839      	ldr	r1, [r7, #0]
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f001 fd78 	bl	80093a0 <USBD_CtlError>
            ret = USBD_FAIL;
 80078b0:	2303      	movs	r3, #3
 80078b2:	77fb      	strb	r3, [r7, #31]
          break;
 80078b4:	e007      	b.n	80078c6 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f001 fd71 	bl	80093a0 <USBD_CtlError>
          ret = USBD_FAIL;
 80078be:	2303      	movs	r3, #3
 80078c0:	77fb      	strb	r3, [r7, #31]
          break;
 80078c2:	e000      	b.n	80078c6 <USBD_DFU_Setup+0x1c6>
          break;
 80078c4:	bf00      	nop
      }
      break;
 80078c6:	e006      	b.n	80078d6 <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 80078c8:	6839      	ldr	r1, [r7, #0]
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f001 fd68 	bl	80093a0 <USBD_CtlError>
      ret = USBD_FAIL;
 80078d0:	2303      	movs	r3, #3
 80078d2:	77fb      	strb	r3, [r7, #31]
      break;
 80078d4:	bf00      	nop
  }

  return (uint8_t)ret;
 80078d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3720      	adds	r7, #32
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	20000062 	.word	0x20000062

080078e4 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	221b      	movs	r2, #27
 80078f0:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 80078f2:	4b03      	ldr	r3, [pc, #12]	; (8007900 <USBD_DFU_GetCfgDesc+0x1c>)
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr
 8007900:	20000050 	.word	0x20000050

08007904 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b088      	sub	sp, #32
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007928:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007930:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d101      	bne.n	800793c <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007938:	2303      	movs	r3, #3
 800793a:	e0ce      	b.n	8007ada <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007942:	2b04      	cmp	r3, #4
 8007944:	f040 80bd 	bne.w	8007ac2 <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800794e:	2b00      	cmp	r3, #0
 8007950:	d17c      	bne.n	8007a4c <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007958:	2b01      	cmp	r3, #1
 800795a:	f000 8093 	beq.w	8007a84 <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007964:	2b05      	cmp	r3, #5
 8007966:	d15e      	bne.n	8007a26 <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	2b21      	cmp	r3, #33	; 0x21
 800796e:	d124      	bne.n	80079ba <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	785b      	ldrb	r3, [r3, #1]
 8007974:	461a      	mov	r2, r3
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	789b      	ldrb	r3, [r3, #2]
 8007986:	021b      	lsls	r3, r3, #8
 8007988:	441a      	add	r2, r3
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	78db      	ldrb	r3, [r3, #3]
 800799a:	041b      	lsls	r3, r3, #16
 800799c:	441a      	add	r2, r3
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	791b      	ldrb	r3, [r3, #4]
 80079ae:	061b      	lsls	r3, r3, #24
 80079b0:	441a      	add	r2, r3
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80079b8:	e064      	b.n	8007a84 <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	2b41      	cmp	r3, #65	; 0x41
 80079c0:	d12f      	bne.n	8007a22 <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	785b      	ldrb	r3, [r3, #1]
 80079c6:	461a      	mov	r2, r3
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	789b      	ldrb	r3, [r3, #2]
 80079d8:	021b      	lsls	r3, r3, #8
 80079da:	441a      	add	r2, r3
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	78db      	ldrb	r3, [r3, #3]
 80079ec:	041b      	lsls	r3, r3, #16
 80079ee:	441a      	add	r2, r3
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	791b      	ldrb	r3, [r3, #4]
 8007a00:	061b      	lsls	r3, r3, #24
 8007a02:	441a      	add	r2, r3
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	69fa      	ldr	r2, [r7, #28]
 8007a10:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 8007a14:	4610      	mov	r0, r2
 8007a16:	4798      	blx	r3
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d032      	beq.n	8007a84 <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	e05b      	b.n	8007ada <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 8007a22:	2303      	movs	r3, #3
 8007a24:	e059      	b.n	8007ada <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 8007a36:	2300      	movs	r3, #0
 8007a38:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 8007a3e:	f107 030c 	add.w	r3, r7, #12
 8007a42:	4619      	mov	r1, r3
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f001 fcab 	bl	80093a0 <USBD_CtlError>
 8007a4a:	e01b      	b.n	8007a84 <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d916      	bls.n	8007a84 <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007a5c:	3b02      	subs	r3, #2
 8007a5e:	029a      	lsls	r2, r3, #10
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007a66:	4413      	add	r3, r2
 8007a68:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	69f8      	ldr	r0, [r7, #28]
 8007a70:	6979      	ldr	r1, [r7, #20]
 8007a72:	69fa      	ldr	r2, [r7, #28]
 8007a74:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8007a78:	4798      	blx	r3
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d001      	beq.n	8007a84 <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 8007a80:	2303      	movs	r3, #3
 8007a82:	e02a      	b.n	8007ada <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	2203      	movs	r2, #3
 8007a98:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8007ac0:	e00a      	b.n	8007ad8 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007ac8:	2b07      	cmp	r3, #7
 8007aca:	d103      	bne.n	8007ad4 <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 fb75 	bl	80081bc <DFU_Leave>
 8007ad2:	e001      	b.n	8007ad8 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	e000      	b.n	8007ada <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3720      	adds	r7, #32
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 8007ae2:	b480      	push	{r7}
 8007ae4:	b083      	sub	sp, #12
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	370c      	adds	r7, #12
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	220a      	movs	r2, #10
 8007b04:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 8007b06:	4b03      	ldr	r3, [pc, #12]	; (8007b14 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr
 8007b14:	2000006c 	.word	0x2000006c

08007b18 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	460b      	mov	r3, r1
 8007b22:	607a      	str	r2, [r7, #4]
 8007b24:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b2c:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8007b2e:	7afb      	ldrb	r3, [r7, #11]
 8007b30:	2b06      	cmp	r3, #6
 8007b32:	d808      	bhi.n	8007b46 <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	4905      	ldr	r1, [pc, #20]	; (8007b50 <USBD_DFU_GetUsrStringDesc+0x38>)
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f001 fc40 	bl	80093c2 <USBD_GetString>
    return USBD_StrDesc;
 8007b42:	4b03      	ldr	r3, [pc, #12]	; (8007b50 <USBD_DFU_GetUsrStringDesc+0x38>)
 8007b44:	e000      	b.n	8007b48 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 8007b46:	2300      	movs	r3, #0
  }
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3718      	adds	r7, #24
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	200006e8 	.word	0x200006e8

08007b54 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d101      	bne.n	8007b68 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e004      	b.n	8007b72 <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	370c      	adds	r7, #12
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr
	...

08007b80 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b90:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d051      	beq.n	8007c3c <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d013      	beq.n	8007bca <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8007ba8:	2b03      	cmp	r3, #3
 8007baa:	d00e      	beq.n	8007bca <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8007bb2:	2b05      	cmp	r3, #5
 8007bb4:	d009      	beq.n	8007bca <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8007bbc:	2b06      	cmp	r3, #6
 8007bbe:	d004      	beq.n	8007bca <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8007bc6:	2b09      	cmp	r3, #9
 8007bc8:	d125      	bne.n	8007c16 <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2202      	movs	r2, #2
 8007bce:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 8007c16:	4b0b      	ldr	r3, [pc, #44]	; (8007c44 <DFU_Detach+0xc4>)
 8007c18:	7d5b      	ldrb	r3, [r3, #21]
 8007c1a:	f003 0310 	and.w	r3, r3, #16
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d006      	beq.n	8007c30 <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 fb7b 	bl	800831e <USBD_Stop>
    (void)USBD_Start(pdev);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fb6c 	bl	8008306 <USBD_Start>
 8007c2e:	e006      	b.n	8007c3e <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	885b      	ldrh	r3, [r3, #2]
 8007c34:	4618      	mov	r0, r3
 8007c36:	f7fa fb59 	bl	80022ec <HAL_Delay>
 8007c3a:	e000      	b.n	8007c3e <DFU_Detach+0xbe>
    return;
 8007c3c:	bf00      	nop
  }
}
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	20000050 	.word	0x20000050

08007c48 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c58:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d05b      	beq.n	8007d18 <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	88db      	ldrh	r3, [r3, #6]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d02d      	beq.n	8007cc4 <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d004      	beq.n	8007c7c <DFU_Download+0x34>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007c78:	2b05      	cmp	r3, #5
 8007c7a:	d11e      	bne.n	8007cba <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	885b      	ldrh	r3, [r3, #2]
 8007c80:	461a      	mov	r2, r3
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	88db      	ldrh	r3, [r3, #6]
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2203      	movs	r2, #3
 8007c98:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8007ca8:	68f9      	ldr	r1, [r7, #12]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f001 fc11 	bl	80094da <USBD_CtlPrepareRx>
 8007cb8:	e02f      	b.n	8007d1a <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8007cba:	6839      	ldr	r1, [r7, #0]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f001 fb6f 	bl	80093a0 <USBD_CtlError>
 8007cc2:	e02a      	b.n	8007d1a <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007cca:	2b05      	cmp	r3, #5
 8007ccc:	d004      	beq.n	8007cd8 <DFU_Download+0x90>
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	d11a      	bne.n	8007d0e <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2206      	movs	r2, #6
 8007ce4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8007d0c:	e005      	b.n	8007d1a <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8007d0e:	6839      	ldr	r1, [r7, #0]
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f001 fb45 	bl	80093a0 <USBD_CtlError>
 8007d16:	e000      	b.n	8007d1a <DFU_Download+0xd2>
    return;
 8007d18:	bf00      	nop
    }
  }
}
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b086      	sub	sp, #24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d30:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d38:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f000 80c4 	beq.w	8007eca <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	88db      	ldrh	r3, [r3, #6]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f000 80a8 	beq.w	8007e9c <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d005      	beq.n	8007d62 <DFU_Upload+0x42>
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007d5c:	2b09      	cmp	r3, #9
 8007d5e:	f040 8090 	bne.w	8007e82 <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	885b      	ldrh	r3, [r3, #2]
 8007d66:	461a      	mov	r2, r3
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	88db      	ldrh	r3, [r3, #6]
 8007d72:	461a      	mov	r2, r3
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d12c      	bne.n	8007dde <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d8a:	2b03      	cmp	r3, #3
 8007d8c:	d901      	bls.n	8007d92 <DFU_Upload+0x72>
 8007d8e:	2202      	movs	r2, #2
 8007d90:	e000      	b.n	8007d94 <DFU_Upload+0x74>
 8007d92:	2209      	movs	r2, #9
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	2221      	movs	r2, #33	; 0x21
 8007dc8:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	2241      	movs	r2, #65	; 0x41
 8007dce:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	2203      	movs	r2, #3
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f001 fb53 	bl	8009482 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8007ddc:	e076      	b.n	8007ecc <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d931      	bls.n	8007e4c <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	2209      	movs	r2, #9
 8007dec:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007e1a:	3b02      	subs	r3, #2
 8007e1c:	029a      	lsls	r2, r3, #10
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8007e24:	4413      	add	r3, r2
 8007e26:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	695b      	ldr	r3, [r3, #20]
 8007e2c:	68f8      	ldr	r0, [r7, #12]
 8007e2e:	6979      	ldr	r1, [r7, #20]
 8007e30:	697a      	ldr	r2, [r7, #20]
 8007e32:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8007e36:	4798      	blx	r3
 8007e38:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e40:	461a      	mov	r2, r3
 8007e42:	68b9      	ldr	r1, [r7, #8]
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f001 fb1c 	bl	8009482 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8007e4a:	e03f      	b.n	8007ecc <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	220f      	movs	r2, #15
 8007e50:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f001 fa90 	bl	80093a0 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 8007e80:	e024      	b.n	8007ecc <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8007e92:	6839      	ldr	r1, [r7, #0]
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f001 fa83 	bl	80093a0 <USBD_CtlError>
 8007e9a:	e017      	b.n	8007ecc <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	2202      	movs	r2, #2
 8007ea0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8007ec8:	e000      	b.n	8007ecc <DFU_Upload+0x1ac>
    return;
 8007eca:	bf00      	nop
  }
}
 8007ecc:	3718      	adds	r7, #24
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
	...

08007ed4 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ee2:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007eea:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f000 80a0 	beq.w	8008034 <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	d002      	beq.n	8007f04 <DFU_GetStatus+0x30>
 8007efe:	2b06      	cmp	r3, #6
 8007f00:	d051      	beq.n	8007fa6 <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 8007f02:	e08e      	b.n	8008022 <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d034      	beq.n	8007f78 <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2204      	movs	r2, #4
 8007f12:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d10e      	bne.n	8007f62 <DFU_GetStatus+0x8e>
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	2b41      	cmp	r3, #65	; 0x41
 8007f4a:	d10a      	bne.n	8007f62 <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	699b      	ldr	r3, [r3, #24]
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	4798      	blx	r3
      break;
 8007f60:	e05f      	b.n	8008022 <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	699b      	ldr	r3, [r3, #24]
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8007f72:	2101      	movs	r1, #1
 8007f74:	4798      	blx	r3
      break;
 8007f76:	e054      	b.n	8008022 <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2205      	movs	r2, #5
 8007f7c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8007fa4:	e03d      	b.n	8008022 <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d116      	bne.n	8007fde <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2207      	movs	r2, #7
 8007fb4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8007fdc:	e020      	b.n	8008020 <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d11b      	bne.n	8008020 <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 8007fe8:	4b14      	ldr	r3, [pc, #80]	; (800803c <DFU_GetStatus+0x168>)
 8007fea:	7d1b      	ldrb	r3, [r3, #20]
 8007fec:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d015      	beq.n	8008020 <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2202      	movs	r2, #2
 8007ff8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
          hdfu->dev_status[1] = 0U;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
          hdfu->dev_status[2] = 0U;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
          hdfu->dev_status[3] = 0U;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8008020:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8008028:	2206      	movs	r2, #6
 800802a:	4619      	mov	r1, r3
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f001 fa28 	bl	8009482 <USBD_CtlSendData>
 8008032:	e000      	b.n	8008036 <DFU_GetStatus+0x162>
    return;
 8008034:	bf00      	nop
}
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	20000050 	.word	0x20000050

08008040 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800804e:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d042      	beq.n	80080dc <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800805c:	2b0a      	cmp	r3, #10
 800805e:	d11e      	bne.n	800809e <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2202      	movs	r2, #2
 8008064:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2200      	movs	r2, #0
 8008074:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2200      	movs	r2, #0
 800807c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 800809c:	e01f      	b.n	80080de <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	220a      	movs	r2, #10
 80080a2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	220e      	movs	r2, #14
 80080aa:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 80080da:	e000      	b.n	80080de <DFU_ClearStatus+0x9e>
    return;
 80080dc:	bf00      	nop
  }
}
 80080de:	3714      	adds	r7, #20
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080f6:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d008      	beq.n	8008110 <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8008104:	2201      	movs	r2, #1
 8008106:	4619      	mov	r1, r3
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f001 f9ba 	bl	8009482 <USBD_CtlSendData>
 800810e:	e000      	b.n	8008112 <DFU_GetState+0x2a>
    return;
 8008110:	bf00      	nop
}
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008126:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d03f      	beq.n	80081ae <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008134:	2b02      	cmp	r3, #2
 8008136:	d013      	beq.n	8008160 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800813e:	2b03      	cmp	r3, #3
 8008140:	d00e      	beq.n	8008160 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008148:	2b05      	cmp	r3, #5
 800814a:	d009      	beq.n	8008160 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8008152:	2b06      	cmp	r3, #6
 8008154:	d004      	beq.n	8008160 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800815c:	2b09      	cmp	r3, #9
 800815e:	d127      	bne.n	80081b0 <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2202      	movs	r2, #2
 8008164:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2200      	movs	r2, #0
 8008174:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2200      	movs	r2, #0
 800817c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2200      	movs	r2, #0
 8008184:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2200      	movs	r2, #0
 8008198:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2200      	movs	r2, #0
 80081a0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80081ac:	e000      	b.n	80081b0 <DFU_Abort+0x98>
    return;
 80081ae:	bf00      	nop
  }
}
 80081b0:	3714      	adds	r7, #20
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr
	...

080081bc <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081ca:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d03b      	beq.n	800824a <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 80081da:	4b1e      	ldr	r3, [pc, #120]	; (8008254 <DFU_Leave+0x98>)
 80081dc:	7d1b      	ldrb	r3, [r3, #20]
 80081de:	f003 0304 	and.w	r3, r3, #4
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d016      	beq.n	8008214 <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2206      	movs	r2, #6
 80081ea:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2200      	movs	r2, #0
 8008202:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 8008212:	e01b      	b.n	800824c <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2208      	movs	r2, #8
 8008218:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2200      	movs	r2, #0
 8008220:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2200      	movs	r2, #0
 8008228:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2200      	movs	r2, #0
 8008230:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 f86c 	bl	800831e <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 8008246:	f7ff f9b3 	bl	80075b0 <__NVIC_SystemReset>
    return;
 800824a:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	20000050 	.word	0x20000050

08008258 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b086      	sub	sp, #24
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	4613      	mov	r3, r2
 8008264:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d101      	bne.n	8008270 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800826c:	2303      	movs	r3, #3
 800826e:	e01f      	b.n	80082b0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2200      	movs	r2, #0
 8008274:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d003      	beq.n	8008296 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	68ba      	ldr	r2, [r7, #8]
 8008292:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2201      	movs	r2, #1
 800829a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	79fa      	ldrb	r2, [r7, #7]
 80082a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f004 f9c3 	bl	800c630 <USBD_LL_Init>
 80082aa:	4603      	mov	r3, r0
 80082ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 80082ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3718      	adds	r7, #24
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80082c2:	2300      	movs	r3, #0
 80082c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d101      	bne.n	80082d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80082cc:	2303      	movs	r3, #3
 80082ce:	e016      	b.n	80082fe <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	683a      	ldr	r2, [r7, #0]
 80082d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00b      	beq.n	80082fc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ec:	f107 020e 	add.w	r2, r7, #14
 80082f0:	4610      	mov	r0, r2
 80082f2:	4798      	blx	r3
 80082f4:	4602      	mov	r2, r0
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b082      	sub	sp, #8
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f004 f9da 	bl	800c6c8 <USBD_LL_Start>
 8008314:	4603      	mov	r3, r0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3708      	adds	r7, #8
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b082      	sub	sp, #8
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f004 f9e9 	bl	800c6fe <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008332:	2b00      	cmp	r3, #0
 8008334:	d009      	beq.n	800834a <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	6852      	ldr	r2, [r2, #4]
 8008342:	b2d2      	uxtb	r2, r2
 8008344:	4611      	mov	r1, r2
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	4798      	blx	r3
  }

  return USBD_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	370c      	adds	r7, #12
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr

0800836a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b084      	sub	sp, #16
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
 8008372:	460b      	mov	r3, r1
 8008374:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008376:	2303      	movs	r3, #3
 8008378:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008380:	2b00      	cmp	r3, #0
 8008382:	d009      	beq.n	8008398 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	78fa      	ldrb	r2, [r7, #3]
 800838e:	4611      	mov	r1, r2
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	4798      	blx	r3
 8008394:	4603      	mov	r3, r0
 8008396:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008398:	7bfb      	ldrb	r3, [r7, #15]
}
 800839a:	4618      	mov	r0, r3
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b082      	sub	sp, #8
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
 80083aa:	460b      	mov	r3, r1
 80083ac:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d007      	beq.n	80083c8 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	78fa      	ldrb	r2, [r7, #3]
 80083c2:	4611      	mov	r1, r2
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	4798      	blx	r3
  }

  return USBD_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3708      	adds	r7, #8
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b084      	sub	sp, #16
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
 80083da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80083e2:	6839      	ldr	r1, [r7, #0]
 80083e4:	4618      	mov	r0, r3
 80083e6:	f000 ffa1 	bl	800932c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2201      	movs	r2, #1
 80083ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80083f8:	461a      	mov	r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008406:	f003 031f 	and.w	r3, r3, #31
 800840a:	2b02      	cmp	r3, #2
 800840c:	d01a      	beq.n	8008444 <USBD_LL_SetupStage+0x72>
 800840e:	2b02      	cmp	r3, #2
 8008410:	d822      	bhi.n	8008458 <USBD_LL_SetupStage+0x86>
 8008412:	2b00      	cmp	r3, #0
 8008414:	d002      	beq.n	800841c <USBD_LL_SetupStage+0x4a>
 8008416:	2b01      	cmp	r3, #1
 8008418:	d00a      	beq.n	8008430 <USBD_LL_SetupStage+0x5e>
 800841a:	e01d      	b.n	8008458 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008422:	4619      	mov	r1, r3
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fa61 	bl	80088ec <USBD_StdDevReq>
 800842a:	4603      	mov	r3, r0
 800842c:	73fb      	strb	r3, [r7, #15]
      break;
 800842e:	e020      	b.n	8008472 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008436:	4619      	mov	r1, r3
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 fac5 	bl	80089c8 <USBD_StdItfReq>
 800843e:	4603      	mov	r3, r0
 8008440:	73fb      	strb	r3, [r7, #15]
      break;
 8008442:	e016      	b.n	8008472 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800844a:	4619      	mov	r1, r3
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 fb04 	bl	8008a5a <USBD_StdEPReq>
 8008452:	4603      	mov	r3, r0
 8008454:	73fb      	strb	r3, [r7, #15]
      break;
 8008456:	e00c      	b.n	8008472 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800845e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008462:	b2db      	uxtb	r3, r3
 8008464:	4619      	mov	r1, r3
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f004 f98a 	bl	800c780 <USBD_LL_StallEP>
 800846c:	4603      	mov	r3, r0
 800846e:	73fb      	strb	r3, [r7, #15]
      break;
 8008470:	bf00      	nop
  }

  return ret;
 8008472:	7bfb      	ldrb	r3, [r7, #15]
}
 8008474:	4618      	mov	r0, r3
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b086      	sub	sp, #24
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	460b      	mov	r3, r1
 8008486:	607a      	str	r2, [r7, #4]
 8008488:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800848a:	7afb      	ldrb	r3, [r7, #11]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d138      	bne.n	8008502 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008496:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800849e:	2b03      	cmp	r3, #3
 80084a0:	d14a      	bne.n	8008538 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	689a      	ldr	r2, [r3, #8]
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d913      	bls.n	80084d6 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	689a      	ldr	r2, [r3, #8]
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	1ad2      	subs	r2, r2, r3
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	68da      	ldr	r2, [r3, #12]
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	4293      	cmp	r3, r2
 80084c6:	bf28      	it	cs
 80084c8:	4613      	movcs	r3, r2
 80084ca:	461a      	mov	r2, r3
 80084cc:	6879      	ldr	r1, [r7, #4]
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f001 f820 	bl	8009514 <USBD_CtlContinueRx>
 80084d4:	e030      	b.n	8008538 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	2b03      	cmp	r3, #3
 80084e0:	d10b      	bne.n	80084fa <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d005      	beq.n	80084fa <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	f001 f81b 	bl	8009536 <USBD_CtlSendStatus>
 8008500:	e01a      	b.n	8008538 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008508:	b2db      	uxtb	r3, r3
 800850a:	2b03      	cmp	r3, #3
 800850c:	d114      	bne.n	8008538 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008514:	699b      	ldr	r3, [r3, #24]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00e      	beq.n	8008538 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008520:	699b      	ldr	r3, [r3, #24]
 8008522:	7afa      	ldrb	r2, [r7, #11]
 8008524:	4611      	mov	r1, r2
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	4798      	blx	r3
 800852a:	4603      	mov	r3, r0
 800852c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800852e:	7dfb      	ldrb	r3, [r7, #23]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d001      	beq.n	8008538 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008534:	7dfb      	ldrb	r3, [r7, #23]
 8008536:	e000      	b.n	800853a <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3718      	adds	r7, #24
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b086      	sub	sp, #24
 8008546:	af00      	add	r7, sp, #0
 8008548:	60f8      	str	r0, [r7, #12]
 800854a:	460b      	mov	r3, r1
 800854c:	607a      	str	r2, [r7, #4]
 800854e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008550:	7afb      	ldrb	r3, [r7, #11]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d16b      	bne.n	800862e <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	3314      	adds	r3, #20
 800855a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008562:	2b02      	cmp	r3, #2
 8008564:	d156      	bne.n	8008614 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	689a      	ldr	r2, [r3, #8]
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	429a      	cmp	r2, r3
 8008570:	d914      	bls.n	800859c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	689a      	ldr	r2, [r3, #8]
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	1ad2      	subs	r2, r2, r3
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	461a      	mov	r2, r3
 8008586:	6879      	ldr	r1, [r7, #4]
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	f000 ff95 	bl	80094b8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800858e:	2300      	movs	r3, #0
 8008590:	2200      	movs	r2, #0
 8008592:	2100      	movs	r1, #0
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f004 f99d 	bl	800c8d4 <USBD_LL_PrepareReceive>
 800859a:	e03b      	b.n	8008614 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	68da      	ldr	r2, [r3, #12]
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d11c      	bne.n	80085e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	685a      	ldr	r2, [r3, #4]
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d316      	bcc.n	80085e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	685a      	ldr	r2, [r3, #4]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80085be:	429a      	cmp	r2, r3
 80085c0:	d20f      	bcs.n	80085e2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80085c2:	2200      	movs	r2, #0
 80085c4:	2100      	movs	r1, #0
 80085c6:	68f8      	ldr	r0, [r7, #12]
 80085c8:	f000 ff76 	bl	80094b8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085d4:	2300      	movs	r3, #0
 80085d6:	2200      	movs	r2, #0
 80085d8:	2100      	movs	r1, #0
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	f004 f97a 	bl	800c8d4 <USBD_LL_PrepareReceive>
 80085e0:	e018      	b.n	8008614 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	2b03      	cmp	r3, #3
 80085ec:	d10b      	bne.n	8008606 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d005      	beq.n	8008606 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008606:	2180      	movs	r1, #128	; 0x80
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f004 f8b9 	bl	800c780 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800860e:	68f8      	ldr	r0, [r7, #12]
 8008610:	f000 ffa4 	bl	800955c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800861a:	2b01      	cmp	r3, #1
 800861c:	d122      	bne.n	8008664 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	f7ff fe98 	bl	8008354 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2200      	movs	r2, #0
 8008628:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800862c:	e01a      	b.n	8008664 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008634:	b2db      	uxtb	r3, r3
 8008636:	2b03      	cmp	r3, #3
 8008638:	d114      	bne.n	8008664 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008640:	695b      	ldr	r3, [r3, #20]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d00e      	beq.n	8008664 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800864c:	695b      	ldr	r3, [r3, #20]
 800864e:	7afa      	ldrb	r2, [r7, #11]
 8008650:	4611      	mov	r1, r2
 8008652:	68f8      	ldr	r0, [r7, #12]
 8008654:	4798      	blx	r3
 8008656:	4603      	mov	r3, r0
 8008658:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800865a:	7dfb      	ldrb	r3, [r7, #23]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d001      	beq.n	8008664 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008660:	7dfb      	ldrb	r3, [r7, #23]
 8008662:	e000      	b.n	8008666 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3718      	adds	r7, #24
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b082      	sub	sp, #8
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2201      	movs	r2, #1
 800867a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800869a:	2b00      	cmp	r3, #0
 800869c:	d101      	bne.n	80086a2 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800869e:	2303      	movs	r3, #3
 80086a0:	e02f      	b.n	8008702 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00f      	beq.n	80086cc <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d009      	beq.n	80086cc <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	6852      	ldr	r2, [r2, #4]
 80086c4:	b2d2      	uxtb	r2, r2
 80086c6:	4611      	mov	r1, r2
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086cc:	2340      	movs	r3, #64	; 0x40
 80086ce:	2200      	movs	r2, #0
 80086d0:	2100      	movs	r1, #0
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f004 f82e 	bl	800c734 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2240      	movs	r2, #64	; 0x40
 80086e4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086e8:	2340      	movs	r3, #64	; 0x40
 80086ea:	2200      	movs	r2, #0
 80086ec:	2180      	movs	r1, #128	; 0x80
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f004 f820 	bl	800c734 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2240      	movs	r2, #64	; 0x40
 80086fe:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3708      	adds	r7, #8
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800870a:	b480      	push	{r7}
 800870c:	b083      	sub	sp, #12
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
 8008712:	460b      	mov	r3, r1
 8008714:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	78fa      	ldrb	r2, [r7, #3]
 800871a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	370c      	adds	r7, #12
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr

0800872a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800872a:	b480      	push	{r7}
 800872c:	b083      	sub	sp, #12
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008738:	b2da      	uxtb	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2204      	movs	r2, #4
 8008744:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	370c      	adds	r7, #12
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr

08008756 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008756:	b480      	push	{r7}
 8008758:	b083      	sub	sp, #12
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008764:	b2db      	uxtb	r3, r3
 8008766:	2b04      	cmp	r3, #4
 8008768:	d106      	bne.n	8008778 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008770:	b2da      	uxtb	r2, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008778:	2300      	movs	r3, #0
}
 800877a:	4618      	mov	r0, r3
 800877c:	370c      	adds	r7, #12
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr

08008786 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008786:	b580      	push	{r7, lr}
 8008788:	b082      	sub	sp, #8
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008794:	2b00      	cmp	r3, #0
 8008796:	d101      	bne.n	800879c <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008798:	2303      	movs	r3, #3
 800879a:	e012      	b.n	80087c2 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	2b03      	cmp	r3, #3
 80087a6:	d10b      	bne.n	80087c0 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087ae:	69db      	ldr	r3, [r3, #28]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d005      	beq.n	80087c0 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087ba:	69db      	ldr	r3, [r3, #28]
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3708      	adds	r7, #8
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b082      	sub	sp, #8
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
 80087d2:	460b      	mov	r3, r1
 80087d4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d101      	bne.n	80087e4 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80087e0:	2303      	movs	r3, #3
 80087e2:	e014      	b.n	800880e <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	2b03      	cmp	r3, #3
 80087ee:	d10d      	bne.n	800880c <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087f6:	6a1b      	ldr	r3, [r3, #32]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d007      	beq.n	800880c <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008802:	6a1b      	ldr	r3, [r3, #32]
 8008804:	78fa      	ldrb	r2, [r7, #3]
 8008806:	4611      	mov	r1, r2
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3708      	adds	r7, #8
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b082      	sub	sp, #8
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
 800881e:	460b      	mov	r3, r1
 8008820:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008828:	2b00      	cmp	r3, #0
 800882a:	d101      	bne.n	8008830 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800882c:	2303      	movs	r3, #3
 800882e:	e014      	b.n	800885a <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008836:	b2db      	uxtb	r3, r3
 8008838:	2b03      	cmp	r3, #3
 800883a:	d10d      	bne.n	8008858 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008844:	2b00      	cmp	r3, #0
 8008846:	d007      	beq.n	8008858 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800884e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008850:	78fa      	ldrb	r2, [r7, #3]
 8008852:	4611      	mov	r1, r2
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008862:	b480      	push	{r7}
 8008864:	b083      	sub	sp, #12
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800888e:	2b00      	cmp	r3, #0
 8008890:	d009      	beq.n	80088a6 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	6852      	ldr	r2, [r2, #4]
 800889e:	b2d2      	uxtb	r2, r2
 80088a0:	4611      	mov	r1, r2
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	4798      	blx	r3
  }

  return USBD_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3708      	adds	r7, #8
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b087      	sub	sp, #28
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	3301      	adds	r3, #1
 80088c6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80088ce:	8a3b      	ldrh	r3, [r7, #16]
 80088d0:	021b      	lsls	r3, r3, #8
 80088d2:	b21a      	sxth	r2, r3
 80088d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80088d8:	4313      	orrs	r3, r2
 80088da:	b21b      	sxth	r3, r3
 80088dc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80088de:	89fb      	ldrh	r3, [r7, #14]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	371c      	adds	r7, #28
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088f6:	2300      	movs	r3, #0
 80088f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008902:	2b40      	cmp	r3, #64	; 0x40
 8008904:	d005      	beq.n	8008912 <USBD_StdDevReq+0x26>
 8008906:	2b40      	cmp	r3, #64	; 0x40
 8008908:	d853      	bhi.n	80089b2 <USBD_StdDevReq+0xc6>
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00b      	beq.n	8008926 <USBD_StdDevReq+0x3a>
 800890e:	2b20      	cmp	r3, #32
 8008910:	d14f      	bne.n	80089b2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	6839      	ldr	r1, [r7, #0]
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	4798      	blx	r3
 8008920:	4603      	mov	r3, r0
 8008922:	73fb      	strb	r3, [r7, #15]
      break;
 8008924:	e04a      	b.n	80089bc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	785b      	ldrb	r3, [r3, #1]
 800892a:	2b09      	cmp	r3, #9
 800892c:	d83b      	bhi.n	80089a6 <USBD_StdDevReq+0xba>
 800892e:	a201      	add	r2, pc, #4	; (adr r2, 8008934 <USBD_StdDevReq+0x48>)
 8008930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008934:	08008989 	.word	0x08008989
 8008938:	0800899d 	.word	0x0800899d
 800893c:	080089a7 	.word	0x080089a7
 8008940:	08008993 	.word	0x08008993
 8008944:	080089a7 	.word	0x080089a7
 8008948:	08008967 	.word	0x08008967
 800894c:	0800895d 	.word	0x0800895d
 8008950:	080089a7 	.word	0x080089a7
 8008954:	0800897f 	.word	0x0800897f
 8008958:	08008971 	.word	0x08008971
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800895c:	6839      	ldr	r1, [r7, #0]
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f9de 	bl	8008d20 <USBD_GetDescriptor>
          break;
 8008964:	e024      	b.n	80089b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008966:	6839      	ldr	r1, [r7, #0]
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 fb55 	bl	8009018 <USBD_SetAddress>
          break;
 800896e:	e01f      	b.n	80089b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fb94 	bl	80090a0 <USBD_SetConfig>
 8008978:	4603      	mov	r3, r0
 800897a:	73fb      	strb	r3, [r7, #15]
          break;
 800897c:	e018      	b.n	80089b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800897e:	6839      	ldr	r1, [r7, #0]
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 fc33 	bl	80091ec <USBD_GetConfig>
          break;
 8008986:	e013      	b.n	80089b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008988:	6839      	ldr	r1, [r7, #0]
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fc64 	bl	8009258 <USBD_GetStatus>
          break;
 8008990:	e00e      	b.n	80089b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008992:	6839      	ldr	r1, [r7, #0]
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 fc93 	bl	80092c0 <USBD_SetFeature>
          break;
 800899a:	e009      	b.n	80089b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800899c:	6839      	ldr	r1, [r7, #0]
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 fca2 	bl	80092e8 <USBD_ClrFeature>
          break;
 80089a4:	e004      	b.n	80089b0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80089a6:	6839      	ldr	r1, [r7, #0]
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 fcf9 	bl	80093a0 <USBD_CtlError>
          break;
 80089ae:	bf00      	nop
      }
      break;
 80089b0:	e004      	b.n	80089bc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80089b2:	6839      	ldr	r1, [r7, #0]
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 fcf3 	bl	80093a0 <USBD_CtlError>
      break;
 80089ba:	bf00      	nop
  }

  return ret;
 80089bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop

080089c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089d2:	2300      	movs	r3, #0
 80089d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089de:	2b40      	cmp	r3, #64	; 0x40
 80089e0:	d005      	beq.n	80089ee <USBD_StdItfReq+0x26>
 80089e2:	2b40      	cmp	r3, #64	; 0x40
 80089e4:	d82f      	bhi.n	8008a46 <USBD_StdItfReq+0x7e>
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d001      	beq.n	80089ee <USBD_StdItfReq+0x26>
 80089ea:	2b20      	cmp	r3, #32
 80089ec:	d12b      	bne.n	8008a46 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	3b01      	subs	r3, #1
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d81d      	bhi.n	8008a38 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	889b      	ldrh	r3, [r3, #4]
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d813      	bhi.n	8008a2e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	6839      	ldr	r1, [r7, #0]
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	4798      	blx	r3
 8008a14:	4603      	mov	r3, r0
 8008a16:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	88db      	ldrh	r3, [r3, #6]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d110      	bne.n	8008a42 <USBD_StdItfReq+0x7a>
 8008a20:	7bfb      	ldrb	r3, [r7, #15]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d10d      	bne.n	8008a42 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 fd85 	bl	8009536 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008a2c:	e009      	b.n	8008a42 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008a2e:	6839      	ldr	r1, [r7, #0]
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fcb5 	bl	80093a0 <USBD_CtlError>
          break;
 8008a36:	e004      	b.n	8008a42 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008a38:	6839      	ldr	r1, [r7, #0]
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 fcb0 	bl	80093a0 <USBD_CtlError>
          break;
 8008a40:	e000      	b.n	8008a44 <USBD_StdItfReq+0x7c>
          break;
 8008a42:	bf00      	nop
      }
      break;
 8008a44:	e004      	b.n	8008a50 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008a46:	6839      	ldr	r1, [r7, #0]
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 fca9 	bl	80093a0 <USBD_CtlError>
      break;
 8008a4e:	bf00      	nop
  }

  return ret;
 8008a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3710      	adds	r7, #16
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b084      	sub	sp, #16
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
 8008a62:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a64:	2300      	movs	r3, #0
 8008a66:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	889b      	ldrh	r3, [r3, #4]
 8008a6c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a76:	2b40      	cmp	r3, #64	; 0x40
 8008a78:	d007      	beq.n	8008a8a <USBD_StdEPReq+0x30>
 8008a7a:	2b40      	cmp	r3, #64	; 0x40
 8008a7c:	f200 8145 	bhi.w	8008d0a <USBD_StdEPReq+0x2b0>
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00c      	beq.n	8008a9e <USBD_StdEPReq+0x44>
 8008a84:	2b20      	cmp	r3, #32
 8008a86:	f040 8140 	bne.w	8008d0a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	4798      	blx	r3
 8008a98:	4603      	mov	r3, r0
 8008a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a9c:	e13a      	b.n	8008d14 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	785b      	ldrb	r3, [r3, #1]
 8008aa2:	2b03      	cmp	r3, #3
 8008aa4:	d007      	beq.n	8008ab6 <USBD_StdEPReq+0x5c>
 8008aa6:	2b03      	cmp	r3, #3
 8008aa8:	f300 8129 	bgt.w	8008cfe <USBD_StdEPReq+0x2a4>
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d07f      	beq.n	8008bb0 <USBD_StdEPReq+0x156>
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d03c      	beq.n	8008b2e <USBD_StdEPReq+0xd4>
 8008ab4:	e123      	b.n	8008cfe <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d002      	beq.n	8008ac8 <USBD_StdEPReq+0x6e>
 8008ac2:	2b03      	cmp	r3, #3
 8008ac4:	d016      	beq.n	8008af4 <USBD_StdEPReq+0x9a>
 8008ac6:	e02c      	b.n	8008b22 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ac8:	7bbb      	ldrb	r3, [r7, #14]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00d      	beq.n	8008aea <USBD_StdEPReq+0x90>
 8008ace:	7bbb      	ldrb	r3, [r7, #14]
 8008ad0:	2b80      	cmp	r3, #128	; 0x80
 8008ad2:	d00a      	beq.n	8008aea <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ad4:	7bbb      	ldrb	r3, [r7, #14]
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f003 fe51 	bl	800c780 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ade:	2180      	movs	r1, #128	; 0x80
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f003 fe4d 	bl	800c780 <USBD_LL_StallEP>
 8008ae6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ae8:	e020      	b.n	8008b2c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008aea:	6839      	ldr	r1, [r7, #0]
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 fc57 	bl	80093a0 <USBD_CtlError>
              break;
 8008af2:	e01b      	b.n	8008b2c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	885b      	ldrh	r3, [r3, #2]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d10e      	bne.n	8008b1a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008afc:	7bbb      	ldrb	r3, [r7, #14]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d00b      	beq.n	8008b1a <USBD_StdEPReq+0xc0>
 8008b02:	7bbb      	ldrb	r3, [r7, #14]
 8008b04:	2b80      	cmp	r3, #128	; 0x80
 8008b06:	d008      	beq.n	8008b1a <USBD_StdEPReq+0xc0>
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	88db      	ldrh	r3, [r3, #6]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d104      	bne.n	8008b1a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b10:	7bbb      	ldrb	r3, [r7, #14]
 8008b12:	4619      	mov	r1, r3
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f003 fe33 	bl	800c780 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 fd0b 	bl	8009536 <USBD_CtlSendStatus>

              break;
 8008b20:	e004      	b.n	8008b2c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008b22:	6839      	ldr	r1, [r7, #0]
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 fc3b 	bl	80093a0 <USBD_CtlError>
              break;
 8008b2a:	bf00      	nop
          }
          break;
 8008b2c:	e0ec      	b.n	8008d08 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	d002      	beq.n	8008b40 <USBD_StdEPReq+0xe6>
 8008b3a:	2b03      	cmp	r3, #3
 8008b3c:	d016      	beq.n	8008b6c <USBD_StdEPReq+0x112>
 8008b3e:	e030      	b.n	8008ba2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b40:	7bbb      	ldrb	r3, [r7, #14]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00d      	beq.n	8008b62 <USBD_StdEPReq+0x108>
 8008b46:	7bbb      	ldrb	r3, [r7, #14]
 8008b48:	2b80      	cmp	r3, #128	; 0x80
 8008b4a:	d00a      	beq.n	8008b62 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b4c:	7bbb      	ldrb	r3, [r7, #14]
 8008b4e:	4619      	mov	r1, r3
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f003 fe15 	bl	800c780 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b56:	2180      	movs	r1, #128	; 0x80
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f003 fe11 	bl	800c780 <USBD_LL_StallEP>
 8008b5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b60:	e025      	b.n	8008bae <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008b62:	6839      	ldr	r1, [r7, #0]
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 fc1b 	bl	80093a0 <USBD_CtlError>
              break;
 8008b6a:	e020      	b.n	8008bae <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	885b      	ldrh	r3, [r3, #2]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d11b      	bne.n	8008bac <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008b74:	7bbb      	ldrb	r3, [r7, #14]
 8008b76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d004      	beq.n	8008b88 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008b7e:	7bbb      	ldrb	r3, [r7, #14]
 8008b80:	4619      	mov	r1, r3
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f003 fe1b 	bl	800c7be <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 fcd4 	bl	8009536 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	6839      	ldr	r1, [r7, #0]
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	4798      	blx	r3
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008ba0:	e004      	b.n	8008bac <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008ba2:	6839      	ldr	r1, [r7, #0]
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 fbfb 	bl	80093a0 <USBD_CtlError>
              break;
 8008baa:	e000      	b.n	8008bae <USBD_StdEPReq+0x154>
              break;
 8008bac:	bf00      	nop
          }
          break;
 8008bae:	e0ab      	b.n	8008d08 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d002      	beq.n	8008bc2 <USBD_StdEPReq+0x168>
 8008bbc:	2b03      	cmp	r3, #3
 8008bbe:	d032      	beq.n	8008c26 <USBD_StdEPReq+0x1cc>
 8008bc0:	e097      	b.n	8008cf2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bc2:	7bbb      	ldrb	r3, [r7, #14]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d007      	beq.n	8008bd8 <USBD_StdEPReq+0x17e>
 8008bc8:	7bbb      	ldrb	r3, [r7, #14]
 8008bca:	2b80      	cmp	r3, #128	; 0x80
 8008bcc:	d004      	beq.n	8008bd8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008bce:	6839      	ldr	r1, [r7, #0]
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 fbe5 	bl	80093a0 <USBD_CtlError>
                break;
 8008bd6:	e091      	b.n	8008cfc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	da0b      	bge.n	8008bf8 <USBD_StdEPReq+0x19e>
 8008be0:	7bbb      	ldrb	r3, [r7, #14]
 8008be2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008be6:	4613      	mov	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4413      	add	r3, r2
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	3310      	adds	r3, #16
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	4413      	add	r3, r2
 8008bf4:	3304      	adds	r3, #4
 8008bf6:	e00b      	b.n	8008c10 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008bf8:	7bbb      	ldrb	r3, [r7, #14]
 8008bfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bfe:	4613      	mov	r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	4413      	add	r3, r2
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	3304      	adds	r3, #4
 8008c10:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	2200      	movs	r2, #0
 8008c16:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	2202      	movs	r2, #2
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 fc2f 	bl	8009482 <USBD_CtlSendData>
              break;
 8008c24:	e06a      	b.n	8008cfc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008c26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	da11      	bge.n	8008c52 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c2e:	7bbb      	ldrb	r3, [r7, #14]
 8008c30:	f003 020f 	and.w	r2, r3, #15
 8008c34:	6879      	ldr	r1, [r7, #4]
 8008c36:	4613      	mov	r3, r2
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4413      	add	r3, r2
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	440b      	add	r3, r1
 8008c40:	3324      	adds	r3, #36	; 0x24
 8008c42:	881b      	ldrh	r3, [r3, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d117      	bne.n	8008c78 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008c48:	6839      	ldr	r1, [r7, #0]
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 fba8 	bl	80093a0 <USBD_CtlError>
                  break;
 8008c50:	e054      	b.n	8008cfc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008c52:	7bbb      	ldrb	r3, [r7, #14]
 8008c54:	f003 020f 	and.w	r2, r3, #15
 8008c58:	6879      	ldr	r1, [r7, #4]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4413      	add	r3, r2
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	440b      	add	r3, r1
 8008c64:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008c68:	881b      	ldrh	r3, [r3, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d104      	bne.n	8008c78 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008c6e:	6839      	ldr	r1, [r7, #0]
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 fb95 	bl	80093a0 <USBD_CtlError>
                  break;
 8008c76:	e041      	b.n	8008cfc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	da0b      	bge.n	8008c98 <USBD_StdEPReq+0x23e>
 8008c80:	7bbb      	ldrb	r3, [r7, #14]
 8008c82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c86:	4613      	mov	r3, r2
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	4413      	add	r3, r2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	3310      	adds	r3, #16
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	4413      	add	r3, r2
 8008c94:	3304      	adds	r3, #4
 8008c96:	e00b      	b.n	8008cb0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c98:	7bbb      	ldrb	r3, [r7, #14]
 8008c9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	4413      	add	r3, r2
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	4413      	add	r3, r2
 8008cae:	3304      	adds	r3, #4
 8008cb0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008cb2:	7bbb      	ldrb	r3, [r7, #14]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d002      	beq.n	8008cbe <USBD_StdEPReq+0x264>
 8008cb8:	7bbb      	ldrb	r3, [r7, #14]
 8008cba:	2b80      	cmp	r3, #128	; 0x80
 8008cbc:	d103      	bne.n	8008cc6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	601a      	str	r2, [r3, #0]
 8008cc4:	e00e      	b.n	8008ce4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008cc6:	7bbb      	ldrb	r3, [r7, #14]
 8008cc8:	4619      	mov	r1, r3
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f003 fd96 	bl	800c7fc <USBD_LL_IsStallEP>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d003      	beq.n	8008cde <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	601a      	str	r2, [r3, #0]
 8008cdc:	e002      	b.n	8008ce4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	2202      	movs	r2, #2
 8008ce8:	4619      	mov	r1, r3
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 fbc9 	bl	8009482 <USBD_CtlSendData>
              break;
 8008cf0:	e004      	b.n	8008cfc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008cf2:	6839      	ldr	r1, [r7, #0]
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 fb53 	bl	80093a0 <USBD_CtlError>
              break;
 8008cfa:	bf00      	nop
          }
          break;
 8008cfc:	e004      	b.n	8008d08 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008cfe:	6839      	ldr	r1, [r7, #0]
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 fb4d 	bl	80093a0 <USBD_CtlError>
          break;
 8008d06:	bf00      	nop
      }
      break;
 8008d08:	e004      	b.n	8008d14 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008d0a:	6839      	ldr	r1, [r7, #0]
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 fb47 	bl	80093a0 <USBD_CtlError>
      break;
 8008d12:	bf00      	nop
  }

  return ret;
 8008d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3710      	adds	r7, #16
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
	...

08008d20 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008d32:	2300      	movs	r3, #0
 8008d34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	885b      	ldrh	r3, [r3, #2]
 8008d3a:	0a1b      	lsrs	r3, r3, #8
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	2b06      	cmp	r3, #6
 8008d42:	f200 813b 	bhi.w	8008fbc <USBD_GetDescriptor+0x29c>
 8008d46:	a201      	add	r2, pc, #4	; (adr r2, 8008d4c <USBD_GetDescriptor+0x2c>)
 8008d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d4c:	08008d69 	.word	0x08008d69
 8008d50:	08008d81 	.word	0x08008d81
 8008d54:	08008dc1 	.word	0x08008dc1
 8008d58:	08008fbd 	.word	0x08008fbd
 8008d5c:	08008fbd 	.word	0x08008fbd
 8008d60:	08008f5d 	.word	0x08008f5d
 8008d64:	08008f89 	.word	0x08008f89
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	7c12      	ldrb	r2, [r2, #16]
 8008d74:	f107 0108 	add.w	r1, r7, #8
 8008d78:	4610      	mov	r0, r2
 8008d7a:	4798      	blx	r3
 8008d7c:	60f8      	str	r0, [r7, #12]
      break;
 8008d7e:	e125      	b.n	8008fcc <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	7c1b      	ldrb	r3, [r3, #16]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d10d      	bne.n	8008da4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d90:	f107 0208 	add.w	r2, r7, #8
 8008d94:	4610      	mov	r0, r2
 8008d96:	4798      	blx	r3
 8008d98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	2202      	movs	r2, #2
 8008da0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008da2:	e113      	b.n	8008fcc <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dac:	f107 0208 	add.w	r2, r7, #8
 8008db0:	4610      	mov	r0, r2
 8008db2:	4798      	blx	r3
 8008db4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	3301      	adds	r3, #1
 8008dba:	2202      	movs	r2, #2
 8008dbc:	701a      	strb	r2, [r3, #0]
      break;
 8008dbe:	e105      	b.n	8008fcc <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	885b      	ldrh	r3, [r3, #2]
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	2b05      	cmp	r3, #5
 8008dc8:	f200 80ac 	bhi.w	8008f24 <USBD_GetDescriptor+0x204>
 8008dcc:	a201      	add	r2, pc, #4	; (adr r2, 8008dd4 <USBD_GetDescriptor+0xb4>)
 8008dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd2:	bf00      	nop
 8008dd4:	08008ded 	.word	0x08008ded
 8008dd8:	08008e21 	.word	0x08008e21
 8008ddc:	08008e55 	.word	0x08008e55
 8008de0:	08008e89 	.word	0x08008e89
 8008de4:	08008ebd 	.word	0x08008ebd
 8008de8:	08008ef1 	.word	0x08008ef1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d00b      	beq.n	8008e10 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	7c12      	ldrb	r2, [r2, #16]
 8008e04:	f107 0108 	add.w	r1, r7, #8
 8008e08:	4610      	mov	r0, r2
 8008e0a:	4798      	blx	r3
 8008e0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e0e:	e0a4      	b.n	8008f5a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008e10:	6839      	ldr	r1, [r7, #0]
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 fac4 	bl	80093a0 <USBD_CtlError>
            err++;
 8008e18:	7afb      	ldrb	r3, [r7, #11]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	72fb      	strb	r3, [r7, #11]
          break;
 8008e1e:	e09c      	b.n	8008f5a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00b      	beq.n	8008e44 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	7c12      	ldrb	r2, [r2, #16]
 8008e38:	f107 0108 	add.w	r1, r7, #8
 8008e3c:	4610      	mov	r0, r2
 8008e3e:	4798      	blx	r3
 8008e40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e42:	e08a      	b.n	8008f5a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008e44:	6839      	ldr	r1, [r7, #0]
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 faaa 	bl	80093a0 <USBD_CtlError>
            err++;
 8008e4c:	7afb      	ldrb	r3, [r7, #11]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	72fb      	strb	r3, [r7, #11]
          break;
 8008e52:	e082      	b.n	8008f5a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d00b      	beq.n	8008e78 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	7c12      	ldrb	r2, [r2, #16]
 8008e6c:	f107 0108 	add.w	r1, r7, #8
 8008e70:	4610      	mov	r0, r2
 8008e72:	4798      	blx	r3
 8008e74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e76:	e070      	b.n	8008f5a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008e78:	6839      	ldr	r1, [r7, #0]
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 fa90 	bl	80093a0 <USBD_CtlError>
            err++;
 8008e80:	7afb      	ldrb	r3, [r7, #11]
 8008e82:	3301      	adds	r3, #1
 8008e84:	72fb      	strb	r3, [r7, #11]
          break;
 8008e86:	e068      	b.n	8008f5a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d00b      	beq.n	8008eac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e9a:	691b      	ldr	r3, [r3, #16]
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	7c12      	ldrb	r2, [r2, #16]
 8008ea0:	f107 0108 	add.w	r1, r7, #8
 8008ea4:	4610      	mov	r0, r2
 8008ea6:	4798      	blx	r3
 8008ea8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eaa:	e056      	b.n	8008f5a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008eac:	6839      	ldr	r1, [r7, #0]
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 fa76 	bl	80093a0 <USBD_CtlError>
            err++;
 8008eb4:	7afb      	ldrb	r3, [r7, #11]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	72fb      	strb	r3, [r7, #11]
          break;
 8008eba:	e04e      	b.n	8008f5a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ec2:	695b      	ldr	r3, [r3, #20]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d00b      	beq.n	8008ee0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ece:	695b      	ldr	r3, [r3, #20]
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	7c12      	ldrb	r2, [r2, #16]
 8008ed4:	f107 0108 	add.w	r1, r7, #8
 8008ed8:	4610      	mov	r0, r2
 8008eda:	4798      	blx	r3
 8008edc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ede:	e03c      	b.n	8008f5a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008ee0:	6839      	ldr	r1, [r7, #0]
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 fa5c 	bl	80093a0 <USBD_CtlError>
            err++;
 8008ee8:	7afb      	ldrb	r3, [r7, #11]
 8008eea:	3301      	adds	r3, #1
 8008eec:	72fb      	strb	r3, [r7, #11]
          break;
 8008eee:	e034      	b.n	8008f5a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ef6:	699b      	ldr	r3, [r3, #24]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00b      	beq.n	8008f14 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f02:	699b      	ldr	r3, [r3, #24]
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	7c12      	ldrb	r2, [r2, #16]
 8008f08:	f107 0108 	add.w	r1, r7, #8
 8008f0c:	4610      	mov	r0, r2
 8008f0e:	4798      	blx	r3
 8008f10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f12:	e022      	b.n	8008f5a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008f14:	6839      	ldr	r1, [r7, #0]
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 fa42 	bl	80093a0 <USBD_CtlError>
            err++;
 8008f1c:	7afb      	ldrb	r3, [r7, #11]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	72fb      	strb	r3, [r7, #11]
          break;
 8008f22:	e01a      	b.n	8008f5a <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d00c      	beq.n	8008f4a <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f38:	683a      	ldr	r2, [r7, #0]
 8008f3a:	8852      	ldrh	r2, [r2, #2]
 8008f3c:	b2d1      	uxtb	r1, r2
 8008f3e:	f107 0208 	add.w	r2, r7, #8
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	4798      	blx	r3
 8008f46:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 8008f48:	e006      	b.n	8008f58 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 8008f4a:	6839      	ldr	r1, [r7, #0]
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 fa27 	bl	80093a0 <USBD_CtlError>
            err++;
 8008f52:	7afb      	ldrb	r3, [r7, #11]
 8008f54:	3301      	adds	r3, #1
 8008f56:	72fb      	strb	r3, [r7, #11]
          break;
 8008f58:	bf00      	nop
      }
      break;
 8008f5a:	e037      	b.n	8008fcc <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	7c1b      	ldrb	r3, [r3, #16]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d109      	bne.n	8008f78 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f6c:	f107 0208 	add.w	r2, r7, #8
 8008f70:	4610      	mov	r0, r2
 8008f72:	4798      	blx	r3
 8008f74:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f76:	e029      	b.n	8008fcc <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8008f78:	6839      	ldr	r1, [r7, #0]
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fa10 	bl	80093a0 <USBD_CtlError>
        err++;
 8008f80:	7afb      	ldrb	r3, [r7, #11]
 8008f82:	3301      	adds	r3, #1
 8008f84:	72fb      	strb	r3, [r7, #11]
      break;
 8008f86:	e021      	b.n	8008fcc <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	7c1b      	ldrb	r3, [r3, #16]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d10d      	bne.n	8008fac <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f98:	f107 0208 	add.w	r2, r7, #8
 8008f9c:	4610      	mov	r0, r2
 8008f9e:	4798      	blx	r3
 8008fa0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	2207      	movs	r2, #7
 8008fa8:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008faa:	e00f      	b.n	8008fcc <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8008fac:	6839      	ldr	r1, [r7, #0]
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f9f6 	bl	80093a0 <USBD_CtlError>
        err++;
 8008fb4:	7afb      	ldrb	r3, [r7, #11]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	72fb      	strb	r3, [r7, #11]
      break;
 8008fba:	e007      	b.n	8008fcc <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8008fbc:	6839      	ldr	r1, [r7, #0]
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f9ee 	bl	80093a0 <USBD_CtlError>
      err++;
 8008fc4:	7afb      	ldrb	r3, [r7, #11]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	72fb      	strb	r3, [r7, #11]
      break;
 8008fca:	bf00      	nop
  }

  if (err != 0U)
 8008fcc:	7afb      	ldrb	r3, [r7, #11]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d11e      	bne.n	8009010 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	88db      	ldrh	r3, [r3, #6]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d016      	beq.n	8009008 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 8008fda:	893b      	ldrh	r3, [r7, #8]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00e      	beq.n	8008ffe <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	88da      	ldrh	r2, [r3, #6]
 8008fe4:	893b      	ldrh	r3, [r7, #8]
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	bf28      	it	cs
 8008fea:	4613      	movcs	r3, r2
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ff0:	893b      	ldrh	r3, [r7, #8]
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	68f9      	ldr	r1, [r7, #12]
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 fa43 	bl	8009482 <USBD_CtlSendData>
 8008ffc:	e009      	b.n	8009012 <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008ffe:	6839      	ldr	r1, [r7, #0]
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 f9cd 	bl	80093a0 <USBD_CtlError>
 8009006:	e004      	b.n	8009012 <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 fa94 	bl	8009536 <USBD_CtlSendStatus>
 800900e:	e000      	b.n	8009012 <USBD_GetDescriptor+0x2f2>
    return;
 8009010:	bf00      	nop
  }
}
 8009012:	3710      	adds	r7, #16
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	889b      	ldrh	r3, [r3, #4]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d131      	bne.n	800908e <USBD_SetAddress+0x76>
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	88db      	ldrh	r3, [r3, #6]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d12d      	bne.n	800908e <USBD_SetAddress+0x76>
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	885b      	ldrh	r3, [r3, #2]
 8009036:	2b7f      	cmp	r3, #127	; 0x7f
 8009038:	d829      	bhi.n	800908e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	885b      	ldrh	r3, [r3, #2]
 800903e:	b2db      	uxtb	r3, r3
 8009040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009044:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800904c:	b2db      	uxtb	r3, r3
 800904e:	2b03      	cmp	r3, #3
 8009050:	d104      	bne.n	800905c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009052:	6839      	ldr	r1, [r7, #0]
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 f9a3 	bl	80093a0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800905a:	e01d      	b.n	8009098 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	7bfa      	ldrb	r2, [r7, #15]
 8009060:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009064:	7bfb      	ldrb	r3, [r7, #15]
 8009066:	4619      	mov	r1, r3
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f003 fbf3 	bl	800c854 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 fa61 	bl	8009536 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009074:	7bfb      	ldrb	r3, [r7, #15]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d004      	beq.n	8009084 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2202      	movs	r2, #2
 800907e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009082:	e009      	b.n	8009098 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800908c:	e004      	b.n	8009098 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800908e:	6839      	ldr	r1, [r7, #0]
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 f985 	bl	80093a0 <USBD_CtlError>
  }
}
 8009096:	bf00      	nop
 8009098:	bf00      	nop
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090aa:	2300      	movs	r3, #0
 80090ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	885b      	ldrh	r3, [r3, #2]
 80090b2:	b2da      	uxtb	r2, r3
 80090b4:	4b4c      	ldr	r3, [pc, #304]	; (80091e8 <USBD_SetConfig+0x148>)
 80090b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80090b8:	4b4b      	ldr	r3, [pc, #300]	; (80091e8 <USBD_SetConfig+0x148>)
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d905      	bls.n	80090cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80090c0:	6839      	ldr	r1, [r7, #0]
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f96c 	bl	80093a0 <USBD_CtlError>
    return USBD_FAIL;
 80090c8:	2303      	movs	r3, #3
 80090ca:	e088      	b.n	80091de <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	d002      	beq.n	80090de <USBD_SetConfig+0x3e>
 80090d8:	2b03      	cmp	r3, #3
 80090da:	d025      	beq.n	8009128 <USBD_SetConfig+0x88>
 80090dc:	e071      	b.n	80091c2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80090de:	4b42      	ldr	r3, [pc, #264]	; (80091e8 <USBD_SetConfig+0x148>)
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d01c      	beq.n	8009120 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80090e6:	4b40      	ldr	r3, [pc, #256]	; (80091e8 <USBD_SetConfig+0x148>)
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	461a      	mov	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80090f0:	4b3d      	ldr	r3, [pc, #244]	; (80091e8 <USBD_SetConfig+0x148>)
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	4619      	mov	r1, r3
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f7ff f937 	bl	800836a <USBD_SetClassConfig>
 80090fc:	4603      	mov	r3, r0
 80090fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009100:	7bfb      	ldrb	r3, [r7, #15]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d004      	beq.n	8009110 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009106:	6839      	ldr	r1, [r7, #0]
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f949 	bl	80093a0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800910e:	e065      	b.n	80091dc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 fa10 	bl	8009536 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2203      	movs	r2, #3
 800911a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800911e:	e05d      	b.n	80091dc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 fa08 	bl	8009536 <USBD_CtlSendStatus>
      break;
 8009126:	e059      	b.n	80091dc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009128:	4b2f      	ldr	r3, [pc, #188]	; (80091e8 <USBD_SetConfig+0x148>)
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d112      	bne.n	8009156 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2202      	movs	r2, #2
 8009134:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009138:	4b2b      	ldr	r3, [pc, #172]	; (80091e8 <USBD_SetConfig+0x148>)
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	461a      	mov	r2, r3
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009142:	4b29      	ldr	r3, [pc, #164]	; (80091e8 <USBD_SetConfig+0x148>)
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	4619      	mov	r1, r3
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f7ff f92a 	bl	80083a2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f9f1 	bl	8009536 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009154:	e042      	b.n	80091dc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009156:	4b24      	ldr	r3, [pc, #144]	; (80091e8 <USBD_SetConfig+0x148>)
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	461a      	mov	r2, r3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	429a      	cmp	r2, r3
 8009162:	d02a      	beq.n	80091ba <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	b2db      	uxtb	r3, r3
 800916a:	4619      	mov	r1, r3
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f7ff f918 	bl	80083a2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009172:	4b1d      	ldr	r3, [pc, #116]	; (80091e8 <USBD_SetConfig+0x148>)
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	461a      	mov	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800917c:	4b1a      	ldr	r3, [pc, #104]	; (80091e8 <USBD_SetConfig+0x148>)
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	4619      	mov	r1, r3
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7ff f8f1 	bl	800836a <USBD_SetClassConfig>
 8009188:	4603      	mov	r3, r0
 800918a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800918c:	7bfb      	ldrb	r3, [r7, #15]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00f      	beq.n	80091b2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009192:	6839      	ldr	r1, [r7, #0]
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 f903 	bl	80093a0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	4619      	mov	r1, r3
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f7ff f8fd 	bl	80083a2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2202      	movs	r2, #2
 80091ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80091b0:	e014      	b.n	80091dc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 f9bf 	bl	8009536 <USBD_CtlSendStatus>
      break;
 80091b8:	e010      	b.n	80091dc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 f9bb 	bl	8009536 <USBD_CtlSendStatus>
      break;
 80091c0:	e00c      	b.n	80091dc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80091c2:	6839      	ldr	r1, [r7, #0]
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 f8eb 	bl	80093a0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80091ca:	4b07      	ldr	r3, [pc, #28]	; (80091e8 <USBD_SetConfig+0x148>)
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	4619      	mov	r1, r3
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f7ff f8e6 	bl	80083a2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80091d6:	2303      	movs	r3, #3
 80091d8:	73fb      	strb	r3, [r7, #15]
      break;
 80091da:	bf00      	nop
  }

  return ret;
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	200007e7 	.word	0x200007e7

080091ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	88db      	ldrh	r3, [r3, #6]
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d004      	beq.n	8009208 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80091fe:	6839      	ldr	r1, [r7, #0]
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 f8cd 	bl	80093a0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009206:	e023      	b.n	8009250 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800920e:	b2db      	uxtb	r3, r3
 8009210:	2b02      	cmp	r3, #2
 8009212:	dc02      	bgt.n	800921a <USBD_GetConfig+0x2e>
 8009214:	2b00      	cmp	r3, #0
 8009216:	dc03      	bgt.n	8009220 <USBD_GetConfig+0x34>
 8009218:	e015      	b.n	8009246 <USBD_GetConfig+0x5a>
 800921a:	2b03      	cmp	r3, #3
 800921c:	d00b      	beq.n	8009236 <USBD_GetConfig+0x4a>
 800921e:	e012      	b.n	8009246 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	3308      	adds	r3, #8
 800922a:	2201      	movs	r2, #1
 800922c:	4619      	mov	r1, r3
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f927 	bl	8009482 <USBD_CtlSendData>
        break;
 8009234:	e00c      	b.n	8009250 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	3304      	adds	r3, #4
 800923a:	2201      	movs	r2, #1
 800923c:	4619      	mov	r1, r3
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f91f 	bl	8009482 <USBD_CtlSendData>
        break;
 8009244:	e004      	b.n	8009250 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009246:	6839      	ldr	r1, [r7, #0]
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 f8a9 	bl	80093a0 <USBD_CtlError>
        break;
 800924e:	bf00      	nop
}
 8009250:	bf00      	nop
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009268:	b2db      	uxtb	r3, r3
 800926a:	3b01      	subs	r3, #1
 800926c:	2b02      	cmp	r3, #2
 800926e:	d81e      	bhi.n	80092ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	88db      	ldrh	r3, [r3, #6]
 8009274:	2b02      	cmp	r3, #2
 8009276:	d004      	beq.n	8009282 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009278:	6839      	ldr	r1, [r7, #0]
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 f890 	bl	80093a0 <USBD_CtlError>
        break;
 8009280:	e01a      	b.n	80092b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2201      	movs	r2, #1
 8009286:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800928e:	2b00      	cmp	r3, #0
 8009290:	d005      	beq.n	800929e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	f043 0202 	orr.w	r2, r3, #2
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	330c      	adds	r3, #12
 80092a2:	2202      	movs	r2, #2
 80092a4:	4619      	mov	r1, r3
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 f8eb 	bl	8009482 <USBD_CtlSendData>
      break;
 80092ac:	e004      	b.n	80092b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80092ae:	6839      	ldr	r1, [r7, #0]
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 f875 	bl	80093a0 <USBD_CtlError>
      break;
 80092b6:	bf00      	nop
  }
}
 80092b8:	bf00      	nop
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	885b      	ldrh	r3, [r3, #2]
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d106      	bne.n	80092e0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 f92b 	bl	8009536 <USBD_CtlSendStatus>
  }
}
 80092e0:	bf00      	nop
 80092e2:	3708      	adds	r7, #8
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	3b01      	subs	r3, #1
 80092fc:	2b02      	cmp	r3, #2
 80092fe:	d80b      	bhi.n	8009318 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	885b      	ldrh	r3, [r3, #2]
 8009304:	2b01      	cmp	r3, #1
 8009306:	d10c      	bne.n	8009322 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2200      	movs	r2, #0
 800930c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 f910 	bl	8009536 <USBD_CtlSendStatus>
      }
      break;
 8009316:	e004      	b.n	8009322 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009318:	6839      	ldr	r1, [r7, #0]
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f840 	bl	80093a0 <USBD_CtlError>
      break;
 8009320:	e000      	b.n	8009324 <USBD_ClrFeature+0x3c>
      break;
 8009322:	bf00      	nop
  }
}
 8009324:	bf00      	nop
 8009326:	3708      	adds	r7, #8
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	781a      	ldrb	r2, [r3, #0]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	3301      	adds	r3, #1
 8009346:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	781a      	ldrb	r2, [r3, #0]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	3301      	adds	r3, #1
 8009354:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009356:	68f8      	ldr	r0, [r7, #12]
 8009358:	f7ff faaa 	bl	80088b0 <SWAPBYTE>
 800935c:	4603      	mov	r3, r0
 800935e:	461a      	mov	r2, r3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	3301      	adds	r3, #1
 8009368:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	3301      	adds	r3, #1
 800936e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f7ff fa9d 	bl	80088b0 <SWAPBYTE>
 8009376:	4603      	mov	r3, r0
 8009378:	461a      	mov	r2, r3
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	3301      	adds	r3, #1
 8009382:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	3301      	adds	r3, #1
 8009388:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f7ff fa90 	bl	80088b0 <SWAPBYTE>
 8009390:	4603      	mov	r3, r0
 8009392:	461a      	mov	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	80da      	strh	r2, [r3, #6]
}
 8009398:	bf00      	nop
 800939a:	3710      	adds	r7, #16
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80093aa:	2180      	movs	r1, #128	; 0x80
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f003 f9e7 	bl	800c780 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80093b2:	2100      	movs	r1, #0
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f003 f9e3 	bl	800c780 <USBD_LL_StallEP>
}
 80093ba:	bf00      	nop
 80093bc:	3708      	adds	r7, #8
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80093c2:	b580      	push	{r7, lr}
 80093c4:	b086      	sub	sp, #24
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	60f8      	str	r0, [r7, #12]
 80093ca:	60b9      	str	r1, [r7, #8]
 80093cc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80093ce:	2300      	movs	r3, #0
 80093d0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d036      	beq.n	8009446 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80093dc:	6938      	ldr	r0, [r7, #16]
 80093de:	f000 f836 	bl	800944e <USBD_GetLen>
 80093e2:	4603      	mov	r3, r0
 80093e4:	3301      	adds	r3, #1
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	005b      	lsls	r3, r3, #1
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80093f0:	7dfb      	ldrb	r3, [r7, #23]
 80093f2:	68ba      	ldr	r2, [r7, #8]
 80093f4:	4413      	add	r3, r2
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	7812      	ldrb	r2, [r2, #0]
 80093fa:	701a      	strb	r2, [r3, #0]
  idx++;
 80093fc:	7dfb      	ldrb	r3, [r7, #23]
 80093fe:	3301      	adds	r3, #1
 8009400:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009402:	7dfb      	ldrb	r3, [r7, #23]
 8009404:	68ba      	ldr	r2, [r7, #8]
 8009406:	4413      	add	r3, r2
 8009408:	2203      	movs	r2, #3
 800940a:	701a      	strb	r2, [r3, #0]
  idx++;
 800940c:	7dfb      	ldrb	r3, [r7, #23]
 800940e:	3301      	adds	r3, #1
 8009410:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009412:	e013      	b.n	800943c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009414:	7dfb      	ldrb	r3, [r7, #23]
 8009416:	68ba      	ldr	r2, [r7, #8]
 8009418:	4413      	add	r3, r2
 800941a:	693a      	ldr	r2, [r7, #16]
 800941c:	7812      	ldrb	r2, [r2, #0]
 800941e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	3301      	adds	r3, #1
 8009424:	613b      	str	r3, [r7, #16]
    idx++;
 8009426:	7dfb      	ldrb	r3, [r7, #23]
 8009428:	3301      	adds	r3, #1
 800942a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800942c:	7dfb      	ldrb	r3, [r7, #23]
 800942e:	68ba      	ldr	r2, [r7, #8]
 8009430:	4413      	add	r3, r2
 8009432:	2200      	movs	r2, #0
 8009434:	701a      	strb	r2, [r3, #0]
    idx++;
 8009436:	7dfb      	ldrb	r3, [r7, #23]
 8009438:	3301      	adds	r3, #1
 800943a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d1e7      	bne.n	8009414 <USBD_GetString+0x52>
 8009444:	e000      	b.n	8009448 <USBD_GetString+0x86>
    return;
 8009446:	bf00      	nop
  }
}
 8009448:	3718      	adds	r7, #24
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800944e:	b480      	push	{r7}
 8009450:	b085      	sub	sp, #20
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009456:	2300      	movs	r3, #0
 8009458:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800945e:	e005      	b.n	800946c <USBD_GetLen+0x1e>
  {
    len++;
 8009460:	7bfb      	ldrb	r3, [r7, #15]
 8009462:	3301      	adds	r3, #1
 8009464:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	3301      	adds	r3, #1
 800946a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d1f5      	bne.n	8009460 <USBD_GetLen+0x12>
  }

  return len;
 8009474:	7bfb      	ldrb	r3, [r7, #15]
}
 8009476:	4618      	mov	r0, r3
 8009478:	3714      	adds	r7, #20
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr

08009482 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b084      	sub	sp, #16
 8009486:	af00      	add	r7, sp, #0
 8009488:	60f8      	str	r0, [r7, #12]
 800948a:	60b9      	str	r1, [r7, #8]
 800948c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2202      	movs	r2, #2
 8009492:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	2100      	movs	r1, #0
 80094a8:	68f8      	ldr	r0, [r7, #12]
 80094aa:	f003 f9f2 	bl	800c892 <USBD_LL_Transmit>

  return USBD_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3710      	adds	r7, #16
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	2100      	movs	r1, #0
 80094ca:	68f8      	ldr	r0, [r7, #12]
 80094cc:	f003 f9e1 	bl	800c892 <USBD_LL_Transmit>

  return USBD_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b084      	sub	sp, #16
 80094de:	af00      	add	r7, sp, #0
 80094e0:	60f8      	str	r0, [r7, #12]
 80094e2:	60b9      	str	r1, [r7, #8]
 80094e4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2203      	movs	r2, #3
 80094ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	68ba      	ldr	r2, [r7, #8]
 8009502:	2100      	movs	r1, #0
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f003 f9e5 	bl	800c8d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	3710      	adds	r7, #16
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	68ba      	ldr	r2, [r7, #8]
 8009524:	2100      	movs	r1, #0
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f003 f9d4 	bl	800c8d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b082      	sub	sp, #8
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2204      	movs	r2, #4
 8009542:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009546:	2300      	movs	r3, #0
 8009548:	2200      	movs	r2, #0
 800954a:	2100      	movs	r1, #0
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f003 f9a0 	bl	800c892 <USBD_LL_Transmit>

  return USBD_OK;
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	3708      	adds	r7, #8
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2205      	movs	r2, #5
 8009568:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800956c:	2300      	movs	r3, #0
 800956e:	2200      	movs	r2, #0
 8009570:	2100      	movs	r1, #0
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f003 f9ae 	bl	800c8d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009578:	2300      	movs	r3, #0
}
 800957a:	4618      	mov	r0, r3
 800957c:	3708      	adds	r7, #8
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
	...

08009584 <__NVIC_SetPriority>:
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	4603      	mov	r3, r0
 800958c:	6039      	str	r1, [r7, #0]
 800958e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009594:	2b00      	cmp	r3, #0
 8009596:	db0a      	blt.n	80095ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	b2da      	uxtb	r2, r3
 800959c:	490c      	ldr	r1, [pc, #48]	; (80095d0 <__NVIC_SetPriority+0x4c>)
 800959e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095a2:	0112      	lsls	r2, r2, #4
 80095a4:	b2d2      	uxtb	r2, r2
 80095a6:	440b      	add	r3, r1
 80095a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80095ac:	e00a      	b.n	80095c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	b2da      	uxtb	r2, r3
 80095b2:	4908      	ldr	r1, [pc, #32]	; (80095d4 <__NVIC_SetPriority+0x50>)
 80095b4:	79fb      	ldrb	r3, [r7, #7]
 80095b6:	f003 030f 	and.w	r3, r3, #15
 80095ba:	3b04      	subs	r3, #4
 80095bc:	0112      	lsls	r2, r2, #4
 80095be:	b2d2      	uxtb	r2, r2
 80095c0:	440b      	add	r3, r1
 80095c2:	761a      	strb	r2, [r3, #24]
}
 80095c4:	bf00      	nop
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr
 80095d0:	e000e100 	.word	0xe000e100
 80095d4:	e000ed00 	.word	0xe000ed00

080095d8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80095d8:	b580      	push	{r7, lr}
 80095da:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80095dc:	4b05      	ldr	r3, [pc, #20]	; (80095f4 <SysTick_Handler+0x1c>)
 80095de:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80095e0:	f001 fcfe 	bl	800afe0 <xTaskGetSchedulerState>
 80095e4:	4603      	mov	r3, r0
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d001      	beq.n	80095ee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80095ea:	f002 fae5 	bl	800bbb8 <xPortSysTickHandler>
  }
}
 80095ee:	bf00      	nop
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	e000e010 	.word	0xe000e010

080095f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80095f8:	b580      	push	{r7, lr}
 80095fa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80095fc:	2100      	movs	r1, #0
 80095fe:	f06f 0004 	mvn.w	r0, #4
 8009602:	f7ff ffbf 	bl	8009584 <__NVIC_SetPriority>
#endif
}
 8009606:	bf00      	nop
 8009608:	bd80      	pop	{r7, pc}
	...

0800960c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009612:	f3ef 8305 	mrs	r3, IPSR
 8009616:	603b      	str	r3, [r7, #0]
  return(result);
 8009618:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800961a:	2b00      	cmp	r3, #0
 800961c:	d003      	beq.n	8009626 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800961e:	f06f 0305 	mvn.w	r3, #5
 8009622:	607b      	str	r3, [r7, #4]
 8009624:	e00c      	b.n	8009640 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009626:	4b0a      	ldr	r3, [pc, #40]	; (8009650 <osKernelInitialize+0x44>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d105      	bne.n	800963a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800962e:	4b08      	ldr	r3, [pc, #32]	; (8009650 <osKernelInitialize+0x44>)
 8009630:	2201      	movs	r2, #1
 8009632:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009634:	2300      	movs	r3, #0
 8009636:	607b      	str	r3, [r7, #4]
 8009638:	e002      	b.n	8009640 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800963a:	f04f 33ff 	mov.w	r3, #4294967295
 800963e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009640:	687b      	ldr	r3, [r7, #4]
}
 8009642:	4618      	mov	r0, r3
 8009644:	370c      	adds	r7, #12
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr
 800964e:	bf00      	nop
 8009650:	200007e8 	.word	0x200007e8

08009654 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800965a:	f3ef 8305 	mrs	r3, IPSR
 800965e:	603b      	str	r3, [r7, #0]
  return(result);
 8009660:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009662:	2b00      	cmp	r3, #0
 8009664:	d003      	beq.n	800966e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009666:	f06f 0305 	mvn.w	r3, #5
 800966a:	607b      	str	r3, [r7, #4]
 800966c:	e010      	b.n	8009690 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800966e:	4b0b      	ldr	r3, [pc, #44]	; (800969c <osKernelStart+0x48>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	2b01      	cmp	r3, #1
 8009674:	d109      	bne.n	800968a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009676:	f7ff ffbf 	bl	80095f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800967a:	4b08      	ldr	r3, [pc, #32]	; (800969c <osKernelStart+0x48>)
 800967c:	2202      	movs	r2, #2
 800967e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009680:	f001 f866 	bl	800a750 <vTaskStartScheduler>
      stat = osOK;
 8009684:	2300      	movs	r3, #0
 8009686:	607b      	str	r3, [r7, #4]
 8009688:	e002      	b.n	8009690 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800968a:	f04f 33ff 	mov.w	r3, #4294967295
 800968e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009690:	687b      	ldr	r3, [r7, #4]
}
 8009692:	4618      	mov	r0, r3
 8009694:	3708      	adds	r7, #8
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	200007e8 	.word	0x200007e8

080096a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b08e      	sub	sp, #56	; 0x38
 80096a4:	af04      	add	r7, sp, #16
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80096ac:	2300      	movs	r3, #0
 80096ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096b0:	f3ef 8305 	mrs	r3, IPSR
 80096b4:	617b      	str	r3, [r7, #20]
  return(result);
 80096b6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d17e      	bne.n	80097ba <osThreadNew+0x11a>
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d07b      	beq.n	80097ba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80096c2:	2340      	movs	r3, #64	; 0x40
 80096c4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80096c6:	2318      	movs	r3, #24
 80096c8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80096ca:	2300      	movs	r3, #0
 80096cc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80096ce:	f04f 33ff 	mov.w	r3, #4294967295
 80096d2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d045      	beq.n	8009766 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d002      	beq.n	80096e8 <osThreadNew+0x48>
        name = attr->name;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	699b      	ldr	r3, [r3, #24]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d002      	beq.n	80096f6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	699b      	ldr	r3, [r3, #24]
 80096f4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80096f6:	69fb      	ldr	r3, [r7, #28]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d008      	beq.n	800970e <osThreadNew+0x6e>
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	2b38      	cmp	r3, #56	; 0x38
 8009700:	d805      	bhi.n	800970e <osThreadNew+0x6e>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	f003 0301 	and.w	r3, r3, #1
 800970a:	2b00      	cmp	r3, #0
 800970c:	d001      	beq.n	8009712 <osThreadNew+0x72>
        return (NULL);
 800970e:	2300      	movs	r3, #0
 8009710:	e054      	b.n	80097bc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	695b      	ldr	r3, [r3, #20]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d003      	beq.n	8009722 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	695b      	ldr	r3, [r3, #20]
 800971e:	089b      	lsrs	r3, r3, #2
 8009720:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00e      	beq.n	8009748 <osThreadNew+0xa8>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	68db      	ldr	r3, [r3, #12]
 800972e:	2b5b      	cmp	r3, #91	; 0x5b
 8009730:	d90a      	bls.n	8009748 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009736:	2b00      	cmp	r3, #0
 8009738:	d006      	beq.n	8009748 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	695b      	ldr	r3, [r3, #20]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d002      	beq.n	8009748 <osThreadNew+0xa8>
        mem = 1;
 8009742:	2301      	movs	r3, #1
 8009744:	61bb      	str	r3, [r7, #24]
 8009746:	e010      	b.n	800976a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d10c      	bne.n	800976a <osThreadNew+0xca>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d108      	bne.n	800976a <osThreadNew+0xca>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	691b      	ldr	r3, [r3, #16]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d104      	bne.n	800976a <osThreadNew+0xca>
          mem = 0;
 8009760:	2300      	movs	r3, #0
 8009762:	61bb      	str	r3, [r7, #24]
 8009764:	e001      	b.n	800976a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009766:	2300      	movs	r3, #0
 8009768:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	2b01      	cmp	r3, #1
 800976e:	d110      	bne.n	8009792 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009778:	9202      	str	r2, [sp, #8]
 800977a:	9301      	str	r3, [sp, #4]
 800977c:	69fb      	ldr	r3, [r7, #28]
 800977e:	9300      	str	r3, [sp, #0]
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	6a3a      	ldr	r2, [r7, #32]
 8009784:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009786:	68f8      	ldr	r0, [r7, #12]
 8009788:	f000 fe0c 	bl	800a3a4 <xTaskCreateStatic>
 800978c:	4603      	mov	r3, r0
 800978e:	613b      	str	r3, [r7, #16]
 8009790:	e013      	b.n	80097ba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009792:	69bb      	ldr	r3, [r7, #24]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d110      	bne.n	80097ba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009798:	6a3b      	ldr	r3, [r7, #32]
 800979a:	b29a      	uxth	r2, r3
 800979c:	f107 0310 	add.w	r3, r7, #16
 80097a0:	9301      	str	r3, [sp, #4]
 80097a2:	69fb      	ldr	r3, [r7, #28]
 80097a4:	9300      	str	r3, [sp, #0]
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80097aa:	68f8      	ldr	r0, [r7, #12]
 80097ac:	f000 fe57 	bl	800a45e <xTaskCreate>
 80097b0:	4603      	mov	r3, r0
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d001      	beq.n	80097ba <osThreadNew+0x11a>
            hTask = NULL;
 80097b6:	2300      	movs	r3, #0
 80097b8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80097ba:	693b      	ldr	r3, [r7, #16]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3728      	adds	r7, #40	; 0x28
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097cc:	f3ef 8305 	mrs	r3, IPSR
 80097d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80097d2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d003      	beq.n	80097e0 <osDelay+0x1c>
    stat = osErrorISR;
 80097d8:	f06f 0305 	mvn.w	r3, #5
 80097dc:	60fb      	str	r3, [r7, #12]
 80097de:	e007      	b.n	80097f0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80097e0:	2300      	movs	r3, #0
 80097e2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d002      	beq.n	80097f0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 ff7c 	bl	800a6e8 <vTaskDelay>
    }
  }

  return (stat);
 80097f0:	68fb      	ldr	r3, [r7, #12]
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
	...

080097fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80097fc:	b480      	push	{r7}
 80097fe:	b085      	sub	sp, #20
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	4a07      	ldr	r2, [pc, #28]	; (8009828 <vApplicationGetIdleTaskMemory+0x2c>)
 800980c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	4a06      	ldr	r2, [pc, #24]	; (800982c <vApplicationGetIdleTaskMemory+0x30>)
 8009812:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2240      	movs	r2, #64	; 0x40
 8009818:	601a      	str	r2, [r3, #0]
}
 800981a:	bf00      	nop
 800981c:	3714      	adds	r7, #20
 800981e:	46bd      	mov	sp, r7
 8009820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009824:	4770      	bx	lr
 8009826:	bf00      	nop
 8009828:	200007ec 	.word	0x200007ec
 800982c:	20000848 	.word	0x20000848

08009830 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009830:	b480      	push	{r7}
 8009832:	b085      	sub	sp, #20
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	4a07      	ldr	r2, [pc, #28]	; (800985c <vApplicationGetTimerTaskMemory+0x2c>)
 8009840:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	4a06      	ldr	r2, [pc, #24]	; (8009860 <vApplicationGetTimerTaskMemory+0x30>)
 8009846:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2280      	movs	r2, #128	; 0x80
 800984c:	601a      	str	r2, [r3, #0]
}
 800984e:	bf00      	nop
 8009850:	3714      	adds	r7, #20
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop
 800985c:	20000948 	.word	0x20000948
 8009860:	200009a4 	.word	0x200009a4

08009864 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f103 0208 	add.w	r2, r3, #8
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f04f 32ff 	mov.w	r2, #4294967295
 800987c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f103 0208 	add.w	r2, r3, #8
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f103 0208 	add.w	r2, r3, #8
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2200      	movs	r2, #0
 8009896:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009898:	bf00      	nop
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80098b2:	bf00      	nop
 80098b4:	370c      	adds	r7, #12
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr

080098be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80098be:	b480      	push	{r7}
 80098c0:	b085      	sub	sp, #20
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
 80098c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	68fa      	ldr	r2, [r7, #12]
 80098d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	689a      	ldr	r2, [r3, #8]
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	683a      	ldr	r2, [r7, #0]
 80098e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	683a      	ldr	r2, [r7, #0]
 80098e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	1c5a      	adds	r2, r3, #1
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	601a      	str	r2, [r3, #0]
}
 80098fa:	bf00      	nop
 80098fc:	3714      	adds	r7, #20
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr

08009906 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009906:	b480      	push	{r7}
 8009908:	b085      	sub	sp, #20
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
 800990e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800991c:	d103      	bne.n	8009926 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	691b      	ldr	r3, [r3, #16]
 8009922:	60fb      	str	r3, [r7, #12]
 8009924:	e00c      	b.n	8009940 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	3308      	adds	r3, #8
 800992a:	60fb      	str	r3, [r7, #12]
 800992c:	e002      	b.n	8009934 <vListInsert+0x2e>
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	60fb      	str	r3, [r7, #12]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	68ba      	ldr	r2, [r7, #8]
 800993c:	429a      	cmp	r2, r3
 800993e:	d2f6      	bcs.n	800992e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	685a      	ldr	r2, [r3, #4]
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	683a      	ldr	r2, [r7, #0]
 800994e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	68fa      	ldr	r2, [r7, #12]
 8009954:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	683a      	ldr	r2, [r7, #0]
 800995a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	1c5a      	adds	r2, r3, #1
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	601a      	str	r2, [r3, #0]
}
 800996c:	bf00      	nop
 800996e:	3714      	adds	r7, #20
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009978:	b480      	push	{r7}
 800997a:	b085      	sub	sp, #20
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	6892      	ldr	r2, [r2, #8]
 800998e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	6852      	ldr	r2, [r2, #4]
 8009998:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d103      	bne.n	80099ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	689a      	ldr	r2, [r3, #8]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	1e5a      	subs	r2, r3, #1
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3714      	adds	r7, #20
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d10a      	bne.n	80099f6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80099e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e4:	f383 8811 	msr	BASEPRI, r3
 80099e8:	f3bf 8f6f 	isb	sy
 80099ec:	f3bf 8f4f 	dsb	sy
 80099f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80099f2:	bf00      	nop
 80099f4:	e7fe      	b.n	80099f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80099f6:	f002 f84d 	bl	800ba94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a02:	68f9      	ldr	r1, [r7, #12]
 8009a04:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009a06:	fb01 f303 	mul.w	r3, r1, r3
 8009a0a:	441a      	add	r2, r3
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2200      	movs	r2, #0
 8009a14:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681a      	ldr	r2, [r3, #0]
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a26:	3b01      	subs	r3, #1
 8009a28:	68f9      	ldr	r1, [r7, #12]
 8009a2a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009a2c:	fb01 f303 	mul.w	r3, r1, r3
 8009a30:	441a      	add	r2, r3
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	22ff      	movs	r2, #255	; 0xff
 8009a3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	22ff      	movs	r2, #255	; 0xff
 8009a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d114      	bne.n	8009a76 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	691b      	ldr	r3, [r3, #16]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d01a      	beq.n	8009a8a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	3310      	adds	r3, #16
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f001 f903 	bl	800ac64 <xTaskRemoveFromEventList>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d012      	beq.n	8009a8a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009a64:	4b0c      	ldr	r3, [pc, #48]	; (8009a98 <xQueueGenericReset+0xcc>)
 8009a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a6a:	601a      	str	r2, [r3, #0]
 8009a6c:	f3bf 8f4f 	dsb	sy
 8009a70:	f3bf 8f6f 	isb	sy
 8009a74:	e009      	b.n	8009a8a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	3310      	adds	r3, #16
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7ff fef2 	bl	8009864 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	3324      	adds	r3, #36	; 0x24
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7ff feed 	bl	8009864 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009a8a:	f002 f833 	bl	800baf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009a8e:	2301      	movs	r3, #1
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3710      	adds	r7, #16
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	e000ed04 	.word	0xe000ed04

08009a9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b08e      	sub	sp, #56	; 0x38
 8009aa0:	af02      	add	r7, sp, #8
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	607a      	str	r2, [r7, #4]
 8009aa8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d10a      	bne.n	8009ac6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab4:	f383 8811 	msr	BASEPRI, r3
 8009ab8:	f3bf 8f6f 	isb	sy
 8009abc:	f3bf 8f4f 	dsb	sy
 8009ac0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009ac2:	bf00      	nop
 8009ac4:	e7fe      	b.n	8009ac4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d10a      	bne.n	8009ae2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad0:	f383 8811 	msr	BASEPRI, r3
 8009ad4:	f3bf 8f6f 	isb	sy
 8009ad8:	f3bf 8f4f 	dsb	sy
 8009adc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ade:	bf00      	nop
 8009ae0:	e7fe      	b.n	8009ae0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d002      	beq.n	8009aee <xQueueGenericCreateStatic+0x52>
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d001      	beq.n	8009af2 <xQueueGenericCreateStatic+0x56>
 8009aee:	2301      	movs	r3, #1
 8009af0:	e000      	b.n	8009af4 <xQueueGenericCreateStatic+0x58>
 8009af2:	2300      	movs	r3, #0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d10a      	bne.n	8009b0e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afc:	f383 8811 	msr	BASEPRI, r3
 8009b00:	f3bf 8f6f 	isb	sy
 8009b04:	f3bf 8f4f 	dsb	sy
 8009b08:	623b      	str	r3, [r7, #32]
}
 8009b0a:	bf00      	nop
 8009b0c:	e7fe      	b.n	8009b0c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d102      	bne.n	8009b1a <xQueueGenericCreateStatic+0x7e>
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d101      	bne.n	8009b1e <xQueueGenericCreateStatic+0x82>
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e000      	b.n	8009b20 <xQueueGenericCreateStatic+0x84>
 8009b1e:	2300      	movs	r3, #0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d10a      	bne.n	8009b3a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b28:	f383 8811 	msr	BASEPRI, r3
 8009b2c:	f3bf 8f6f 	isb	sy
 8009b30:	f3bf 8f4f 	dsb	sy
 8009b34:	61fb      	str	r3, [r7, #28]
}
 8009b36:	bf00      	nop
 8009b38:	e7fe      	b.n	8009b38 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009b3a:	2350      	movs	r3, #80	; 0x50
 8009b3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	2b50      	cmp	r3, #80	; 0x50
 8009b42:	d00a      	beq.n	8009b5a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b48:	f383 8811 	msr	BASEPRI, r3
 8009b4c:	f3bf 8f6f 	isb	sy
 8009b50:	f3bf 8f4f 	dsb	sy
 8009b54:	61bb      	str	r3, [r7, #24]
}
 8009b56:	bf00      	nop
 8009b58:	e7fe      	b.n	8009b58 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009b5a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d00d      	beq.n	8009b82 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b68:	2201      	movs	r2, #1
 8009b6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009b6e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b74:	9300      	str	r3, [sp, #0]
 8009b76:	4613      	mov	r3, r2
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	68b9      	ldr	r1, [r7, #8]
 8009b7c:	68f8      	ldr	r0, [r7, #12]
 8009b7e:	f000 f805 	bl	8009b8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3730      	adds	r7, #48	; 0x30
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	60b9      	str	r1, [r7, #8]
 8009b96:	607a      	str	r2, [r7, #4]
 8009b98:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d103      	bne.n	8009ba8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009ba0:	69bb      	ldr	r3, [r7, #24]
 8009ba2:	69ba      	ldr	r2, [r7, #24]
 8009ba4:	601a      	str	r2, [r3, #0]
 8009ba6:	e002      	b.n	8009bae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	68fa      	ldr	r2, [r7, #12]
 8009bb2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009bb4:	69bb      	ldr	r3, [r7, #24]
 8009bb6:	68ba      	ldr	r2, [r7, #8]
 8009bb8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009bba:	2101      	movs	r1, #1
 8009bbc:	69b8      	ldr	r0, [r7, #24]
 8009bbe:	f7ff ff05 	bl	80099cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	78fa      	ldrb	r2, [r7, #3]
 8009bc6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009bca:	bf00      	nop
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
	...

08009bd4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b08e      	sub	sp, #56	; 0x38
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	607a      	str	r2, [r7, #4]
 8009be0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009be2:	2300      	movs	r3, #0
 8009be4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d10a      	bne.n	8009c06 <xQueueGenericSend+0x32>
	__asm volatile
 8009bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf4:	f383 8811 	msr	BASEPRI, r3
 8009bf8:	f3bf 8f6f 	isb	sy
 8009bfc:	f3bf 8f4f 	dsb	sy
 8009c00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009c02:	bf00      	nop
 8009c04:	e7fe      	b.n	8009c04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d103      	bne.n	8009c14 <xQueueGenericSend+0x40>
 8009c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d101      	bne.n	8009c18 <xQueueGenericSend+0x44>
 8009c14:	2301      	movs	r3, #1
 8009c16:	e000      	b.n	8009c1a <xQueueGenericSend+0x46>
 8009c18:	2300      	movs	r3, #0
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d10a      	bne.n	8009c34 <xQueueGenericSend+0x60>
	__asm volatile
 8009c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c22:	f383 8811 	msr	BASEPRI, r3
 8009c26:	f3bf 8f6f 	isb	sy
 8009c2a:	f3bf 8f4f 	dsb	sy
 8009c2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009c30:	bf00      	nop
 8009c32:	e7fe      	b.n	8009c32 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	2b02      	cmp	r3, #2
 8009c38:	d103      	bne.n	8009c42 <xQueueGenericSend+0x6e>
 8009c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d101      	bne.n	8009c46 <xQueueGenericSend+0x72>
 8009c42:	2301      	movs	r3, #1
 8009c44:	e000      	b.n	8009c48 <xQueueGenericSend+0x74>
 8009c46:	2300      	movs	r3, #0
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d10a      	bne.n	8009c62 <xQueueGenericSend+0x8e>
	__asm volatile
 8009c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c50:	f383 8811 	msr	BASEPRI, r3
 8009c54:	f3bf 8f6f 	isb	sy
 8009c58:	f3bf 8f4f 	dsb	sy
 8009c5c:	623b      	str	r3, [r7, #32]
}
 8009c5e:	bf00      	nop
 8009c60:	e7fe      	b.n	8009c60 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c62:	f001 f9bd 	bl	800afe0 <xTaskGetSchedulerState>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d102      	bne.n	8009c72 <xQueueGenericSend+0x9e>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d101      	bne.n	8009c76 <xQueueGenericSend+0xa2>
 8009c72:	2301      	movs	r3, #1
 8009c74:	e000      	b.n	8009c78 <xQueueGenericSend+0xa4>
 8009c76:	2300      	movs	r3, #0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d10a      	bne.n	8009c92 <xQueueGenericSend+0xbe>
	__asm volatile
 8009c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c80:	f383 8811 	msr	BASEPRI, r3
 8009c84:	f3bf 8f6f 	isb	sy
 8009c88:	f3bf 8f4f 	dsb	sy
 8009c8c:	61fb      	str	r3, [r7, #28]
}
 8009c8e:	bf00      	nop
 8009c90:	e7fe      	b.n	8009c90 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c92:	f001 feff 	bl	800ba94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d302      	bcc.n	8009ca8 <xQueueGenericSend+0xd4>
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	2b02      	cmp	r3, #2
 8009ca6:	d129      	bne.n	8009cfc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ca8:	683a      	ldr	r2, [r7, #0]
 8009caa:	68b9      	ldr	r1, [r7, #8]
 8009cac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009cae:	f000 fa0b 	bl	800a0c8 <prvCopyDataToQueue>
 8009cb2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d010      	beq.n	8009cde <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cbe:	3324      	adds	r3, #36	; 0x24
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f000 ffcf 	bl	800ac64 <xTaskRemoveFromEventList>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d013      	beq.n	8009cf4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009ccc:	4b3f      	ldr	r3, [pc, #252]	; (8009dcc <xQueueGenericSend+0x1f8>)
 8009cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cd2:	601a      	str	r2, [r3, #0]
 8009cd4:	f3bf 8f4f 	dsb	sy
 8009cd8:	f3bf 8f6f 	isb	sy
 8009cdc:	e00a      	b.n	8009cf4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d007      	beq.n	8009cf4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009ce4:	4b39      	ldr	r3, [pc, #228]	; (8009dcc <xQueueGenericSend+0x1f8>)
 8009ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cea:	601a      	str	r2, [r3, #0]
 8009cec:	f3bf 8f4f 	dsb	sy
 8009cf0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009cf4:	f001 fefe 	bl	800baf4 <vPortExitCritical>
				return pdPASS;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	e063      	b.n	8009dc4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d103      	bne.n	8009d0a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d02:	f001 fef7 	bl	800baf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009d06:	2300      	movs	r3, #0
 8009d08:	e05c      	b.n	8009dc4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d106      	bne.n	8009d1e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d10:	f107 0314 	add.w	r3, r7, #20
 8009d14:	4618      	mov	r0, r3
 8009d16:	f001 f809 	bl	800ad2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d1e:	f001 fee9 	bl	800baf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d22:	f000 fd7b 	bl	800a81c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d26:	f001 feb5 	bl	800ba94 <vPortEnterCritical>
 8009d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d30:	b25b      	sxtb	r3, r3
 8009d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d36:	d103      	bne.n	8009d40 <xQueueGenericSend+0x16c>
 8009d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d46:	b25b      	sxtb	r3, r3
 8009d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d4c:	d103      	bne.n	8009d56 <xQueueGenericSend+0x182>
 8009d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d50:	2200      	movs	r2, #0
 8009d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d56:	f001 fecd 	bl	800baf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d5a:	1d3a      	adds	r2, r7, #4
 8009d5c:	f107 0314 	add.w	r3, r7, #20
 8009d60:	4611      	mov	r1, r2
 8009d62:	4618      	mov	r0, r3
 8009d64:	f000 fff8 	bl	800ad58 <xTaskCheckForTimeOut>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d124      	bne.n	8009db8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009d6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d70:	f000 faa2 	bl	800a2b8 <prvIsQueueFull>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d018      	beq.n	8009dac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7c:	3310      	adds	r3, #16
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	4611      	mov	r1, r2
 8009d82:	4618      	mov	r0, r3
 8009d84:	f000 ff1e 	bl	800abc4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009d88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d8a:	f000 fa2d 	bl	800a1e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009d8e:	f000 fd53 	bl	800a838 <xTaskResumeAll>
 8009d92:	4603      	mov	r3, r0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	f47f af7c 	bne.w	8009c92 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009d9a:	4b0c      	ldr	r3, [pc, #48]	; (8009dcc <xQueueGenericSend+0x1f8>)
 8009d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009da0:	601a      	str	r2, [r3, #0]
 8009da2:	f3bf 8f4f 	dsb	sy
 8009da6:	f3bf 8f6f 	isb	sy
 8009daa:	e772      	b.n	8009c92 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009dac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009dae:	f000 fa1b 	bl	800a1e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009db2:	f000 fd41 	bl	800a838 <xTaskResumeAll>
 8009db6:	e76c      	b.n	8009c92 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009db8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009dba:	f000 fa15 	bl	800a1e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009dbe:	f000 fd3b 	bl	800a838 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009dc2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3738      	adds	r7, #56	; 0x38
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	e000ed04 	.word	0xe000ed04

08009dd0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b090      	sub	sp, #64	; 0x40
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	607a      	str	r2, [r7, #4]
 8009ddc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d10a      	bne.n	8009dfe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dec:	f383 8811 	msr	BASEPRI, r3
 8009df0:	f3bf 8f6f 	isb	sy
 8009df4:	f3bf 8f4f 	dsb	sy
 8009df8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009dfa:	bf00      	nop
 8009dfc:	e7fe      	b.n	8009dfc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d103      	bne.n	8009e0c <xQueueGenericSendFromISR+0x3c>
 8009e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d101      	bne.n	8009e10 <xQueueGenericSendFromISR+0x40>
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	e000      	b.n	8009e12 <xQueueGenericSendFromISR+0x42>
 8009e10:	2300      	movs	r3, #0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d10a      	bne.n	8009e2c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1a:	f383 8811 	msr	BASEPRI, r3
 8009e1e:	f3bf 8f6f 	isb	sy
 8009e22:	f3bf 8f4f 	dsb	sy
 8009e26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e28:	bf00      	nop
 8009e2a:	e7fe      	b.n	8009e2a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	2b02      	cmp	r3, #2
 8009e30:	d103      	bne.n	8009e3a <xQueueGenericSendFromISR+0x6a>
 8009e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d101      	bne.n	8009e3e <xQueueGenericSendFromISR+0x6e>
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	e000      	b.n	8009e40 <xQueueGenericSendFromISR+0x70>
 8009e3e:	2300      	movs	r3, #0
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d10a      	bne.n	8009e5a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e48:	f383 8811 	msr	BASEPRI, r3
 8009e4c:	f3bf 8f6f 	isb	sy
 8009e50:	f3bf 8f4f 	dsb	sy
 8009e54:	623b      	str	r3, [r7, #32]
}
 8009e56:	bf00      	nop
 8009e58:	e7fe      	b.n	8009e58 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e5a:	f001 fefd 	bl	800bc58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009e5e:	f3ef 8211 	mrs	r2, BASEPRI
 8009e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e66:	f383 8811 	msr	BASEPRI, r3
 8009e6a:	f3bf 8f6f 	isb	sy
 8009e6e:	f3bf 8f4f 	dsb	sy
 8009e72:	61fa      	str	r2, [r7, #28]
 8009e74:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009e76:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009e78:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d302      	bcc.n	8009e8c <xQueueGenericSendFromISR+0xbc>
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	2b02      	cmp	r3, #2
 8009e8a:	d12f      	bne.n	8009eec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e9c:	683a      	ldr	r2, [r7, #0]
 8009e9e:	68b9      	ldr	r1, [r7, #8]
 8009ea0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009ea2:	f000 f911 	bl	800a0c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009ea6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eae:	d112      	bne.n	8009ed6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d016      	beq.n	8009ee6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eba:	3324      	adds	r3, #36	; 0x24
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f000 fed1 	bl	800ac64 <xTaskRemoveFromEventList>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d00e      	beq.n	8009ee6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d00b      	beq.n	8009ee6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	601a      	str	r2, [r3, #0]
 8009ed4:	e007      	b.n	8009ee6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009ed6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009eda:	3301      	adds	r3, #1
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	b25a      	sxtb	r2, r3
 8009ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009eea:	e001      	b.n	8009ef0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009eec:	2300      	movs	r3, #0
 8009eee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ef2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009efa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3740      	adds	r7, #64	; 0x40
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
	...

08009f08 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b08c      	sub	sp, #48	; 0x30
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009f14:	2300      	movs	r3, #0
 8009f16:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d10a      	bne.n	8009f38 <xQueueReceive+0x30>
	__asm volatile
 8009f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f26:	f383 8811 	msr	BASEPRI, r3
 8009f2a:	f3bf 8f6f 	isb	sy
 8009f2e:	f3bf 8f4f 	dsb	sy
 8009f32:	623b      	str	r3, [r7, #32]
}
 8009f34:	bf00      	nop
 8009f36:	e7fe      	b.n	8009f36 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d103      	bne.n	8009f46 <xQueueReceive+0x3e>
 8009f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d101      	bne.n	8009f4a <xQueueReceive+0x42>
 8009f46:	2301      	movs	r3, #1
 8009f48:	e000      	b.n	8009f4c <xQueueReceive+0x44>
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d10a      	bne.n	8009f66 <xQueueReceive+0x5e>
	__asm volatile
 8009f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f54:	f383 8811 	msr	BASEPRI, r3
 8009f58:	f3bf 8f6f 	isb	sy
 8009f5c:	f3bf 8f4f 	dsb	sy
 8009f60:	61fb      	str	r3, [r7, #28]
}
 8009f62:	bf00      	nop
 8009f64:	e7fe      	b.n	8009f64 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f66:	f001 f83b 	bl	800afe0 <xTaskGetSchedulerState>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d102      	bne.n	8009f76 <xQueueReceive+0x6e>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d101      	bne.n	8009f7a <xQueueReceive+0x72>
 8009f76:	2301      	movs	r3, #1
 8009f78:	e000      	b.n	8009f7c <xQueueReceive+0x74>
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d10a      	bne.n	8009f96 <xQueueReceive+0x8e>
	__asm volatile
 8009f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f84:	f383 8811 	msr	BASEPRI, r3
 8009f88:	f3bf 8f6f 	isb	sy
 8009f8c:	f3bf 8f4f 	dsb	sy
 8009f90:	61bb      	str	r3, [r7, #24]
}
 8009f92:	bf00      	nop
 8009f94:	e7fe      	b.n	8009f94 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f96:	f001 fd7d 	bl	800ba94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f9e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d01f      	beq.n	8009fe6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009fa6:	68b9      	ldr	r1, [r7, #8]
 8009fa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009faa:	f000 f8f7 	bl	800a19c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb0:	1e5a      	subs	r2, r3, #1
 8009fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb8:	691b      	ldr	r3, [r3, #16]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d00f      	beq.n	8009fde <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc0:	3310      	adds	r3, #16
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f000 fe4e 	bl	800ac64 <xTaskRemoveFromEventList>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d007      	beq.n	8009fde <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009fce:	4b3d      	ldr	r3, [pc, #244]	; (800a0c4 <xQueueReceive+0x1bc>)
 8009fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fd4:	601a      	str	r2, [r3, #0]
 8009fd6:	f3bf 8f4f 	dsb	sy
 8009fda:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009fde:	f001 fd89 	bl	800baf4 <vPortExitCritical>
				return pdPASS;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e069      	b.n	800a0ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d103      	bne.n	8009ff4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009fec:	f001 fd82 	bl	800baf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	e062      	b.n	800a0ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d106      	bne.n	800a008 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009ffa:	f107 0310 	add.w	r3, r7, #16
 8009ffe:	4618      	mov	r0, r3
 800a000:	f000 fe94 	bl	800ad2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a004:	2301      	movs	r3, #1
 800a006:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a008:	f001 fd74 	bl	800baf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a00c:	f000 fc06 	bl	800a81c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a010:	f001 fd40 	bl	800ba94 <vPortEnterCritical>
 800a014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a016:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a01a:	b25b      	sxtb	r3, r3
 800a01c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a020:	d103      	bne.n	800a02a <xQueueReceive+0x122>
 800a022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a024:	2200      	movs	r2, #0
 800a026:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a030:	b25b      	sxtb	r3, r3
 800a032:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a036:	d103      	bne.n	800a040 <xQueueReceive+0x138>
 800a038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a03a:	2200      	movs	r2, #0
 800a03c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a040:	f001 fd58 	bl	800baf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a044:	1d3a      	adds	r2, r7, #4
 800a046:	f107 0310 	add.w	r3, r7, #16
 800a04a:	4611      	mov	r1, r2
 800a04c:	4618      	mov	r0, r3
 800a04e:	f000 fe83 	bl	800ad58 <xTaskCheckForTimeOut>
 800a052:	4603      	mov	r3, r0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d123      	bne.n	800a0a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a058:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a05a:	f000 f917 	bl	800a28c <prvIsQueueEmpty>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d017      	beq.n	800a094 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a066:	3324      	adds	r3, #36	; 0x24
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	4611      	mov	r1, r2
 800a06c:	4618      	mov	r0, r3
 800a06e:	f000 fda9 	bl	800abc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a072:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a074:	f000 f8b8 	bl	800a1e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a078:	f000 fbde 	bl	800a838 <xTaskResumeAll>
 800a07c:	4603      	mov	r3, r0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d189      	bne.n	8009f96 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a082:	4b10      	ldr	r3, [pc, #64]	; (800a0c4 <xQueueReceive+0x1bc>)
 800a084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a088:	601a      	str	r2, [r3, #0]
 800a08a:	f3bf 8f4f 	dsb	sy
 800a08e:	f3bf 8f6f 	isb	sy
 800a092:	e780      	b.n	8009f96 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a094:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a096:	f000 f8a7 	bl	800a1e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a09a:	f000 fbcd 	bl	800a838 <xTaskResumeAll>
 800a09e:	e77a      	b.n	8009f96 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a0a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0a2:	f000 f8a1 	bl	800a1e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a0a6:	f000 fbc7 	bl	800a838 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a0aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0ac:	f000 f8ee 	bl	800a28c <prvIsQueueEmpty>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	f43f af6f 	beq.w	8009f96 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a0b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3730      	adds	r7, #48	; 0x30
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	e000ed04 	.word	0xe000ed04

0800a0c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b086      	sub	sp, #24
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d10d      	bne.n	800a102 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d14d      	bne.n	800a18a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	689b      	ldr	r3, [r3, #8]
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f000 ff92 	bl	800b01c <xTaskPriorityDisinherit>
 800a0f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	609a      	str	r2, [r3, #8]
 800a100:	e043      	b.n	800a18a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d119      	bne.n	800a13c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	6858      	ldr	r0, [r3, #4]
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a110:	461a      	mov	r2, r3
 800a112:	68b9      	ldr	r1, [r7, #8]
 800a114:	f002 fc6e 	bl	800c9f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	685a      	ldr	r2, [r3, #4]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a120:	441a      	add	r2, r3
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	685a      	ldr	r2, [r3, #4]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d32b      	bcc.n	800a18a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	605a      	str	r2, [r3, #4]
 800a13a:	e026      	b.n	800a18a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	68d8      	ldr	r0, [r3, #12]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a144:	461a      	mov	r2, r3
 800a146:	68b9      	ldr	r1, [r7, #8]
 800a148:	f002 fc54 	bl	800c9f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	68da      	ldr	r2, [r3, #12]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a154:	425b      	negs	r3, r3
 800a156:	441a      	add	r2, r3
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	68da      	ldr	r2, [r3, #12]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	429a      	cmp	r2, r3
 800a166:	d207      	bcs.n	800a178 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	689a      	ldr	r2, [r3, #8]
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a170:	425b      	negs	r3, r3
 800a172:	441a      	add	r2, r3
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b02      	cmp	r3, #2
 800a17c:	d105      	bne.n	800a18a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d002      	beq.n	800a18a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	3b01      	subs	r3, #1
 800a188:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	1c5a      	adds	r2, r3, #1
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a192:	697b      	ldr	r3, [r7, #20]
}
 800a194:	4618      	mov	r0, r3
 800a196:	3718      	adds	r7, #24
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d018      	beq.n	800a1e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	68da      	ldr	r2, [r3, #12]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b6:	441a      	add	r2, r3
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	68da      	ldr	r2, [r3, #12]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d303      	bcc.n	800a1d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	68d9      	ldr	r1, [r3, #12]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d8:	461a      	mov	r2, r3
 800a1da:	6838      	ldr	r0, [r7, #0]
 800a1dc:	f002 fc0a 	bl	800c9f4 <memcpy>
	}
}
 800a1e0:	bf00      	nop
 800a1e2:	3708      	adds	r7, #8
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a1f0:	f001 fc50 	bl	800ba94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a1fc:	e011      	b.n	800a222 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a202:	2b00      	cmp	r3, #0
 800a204:	d012      	beq.n	800a22c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	3324      	adds	r3, #36	; 0x24
 800a20a:	4618      	mov	r0, r3
 800a20c:	f000 fd2a 	bl	800ac64 <xTaskRemoveFromEventList>
 800a210:	4603      	mov	r3, r0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d001      	beq.n	800a21a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a216:	f000 fe01 	bl	800ae1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a21a:	7bfb      	ldrb	r3, [r7, #15]
 800a21c:	3b01      	subs	r3, #1
 800a21e:	b2db      	uxtb	r3, r3
 800a220:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a226:	2b00      	cmp	r3, #0
 800a228:	dce9      	bgt.n	800a1fe <prvUnlockQueue+0x16>
 800a22a:	e000      	b.n	800a22e <prvUnlockQueue+0x46>
					break;
 800a22c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	22ff      	movs	r2, #255	; 0xff
 800a232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a236:	f001 fc5d 	bl	800baf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a23a:	f001 fc2b 	bl	800ba94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a244:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a246:	e011      	b.n	800a26c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	691b      	ldr	r3, [r3, #16]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d012      	beq.n	800a276 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	3310      	adds	r3, #16
 800a254:	4618      	mov	r0, r3
 800a256:	f000 fd05 	bl	800ac64 <xTaskRemoveFromEventList>
 800a25a:	4603      	mov	r3, r0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d001      	beq.n	800a264 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a260:	f000 fddc 	bl	800ae1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a264:	7bbb      	ldrb	r3, [r7, #14]
 800a266:	3b01      	subs	r3, #1
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a26c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a270:	2b00      	cmp	r3, #0
 800a272:	dce9      	bgt.n	800a248 <prvUnlockQueue+0x60>
 800a274:	e000      	b.n	800a278 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a276:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	22ff      	movs	r2, #255	; 0xff
 800a27c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a280:	f001 fc38 	bl	800baf4 <vPortExitCritical>
}
 800a284:	bf00      	nop
 800a286:	3710      	adds	r7, #16
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a294:	f001 fbfe 	bl	800ba94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d102      	bne.n	800a2a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	60fb      	str	r3, [r7, #12]
 800a2a4:	e001      	b.n	800a2aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a2aa:	f001 fc23 	bl	800baf4 <vPortExitCritical>

	return xReturn;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3710      	adds	r7, #16
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a2c0:	f001 fbe8 	bl	800ba94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d102      	bne.n	800a2d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	60fb      	str	r3, [r7, #12]
 800a2d4:	e001      	b.n	800a2da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a2da:	f001 fc0b 	bl	800baf4 <vPortExitCritical>

	return xReturn;
 800a2de:	68fb      	ldr	r3, [r7, #12]
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3710      	adds	r7, #16
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b085      	sub	sp, #20
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	60fb      	str	r3, [r7, #12]
 800a2f6:	e014      	b.n	800a322 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a2f8:	4a0f      	ldr	r2, [pc, #60]	; (800a338 <vQueueAddToRegistry+0x50>)
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d10b      	bne.n	800a31c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a304:	490c      	ldr	r1, [pc, #48]	; (800a338 <vQueueAddToRegistry+0x50>)
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	683a      	ldr	r2, [r7, #0]
 800a30a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a30e:	4a0a      	ldr	r2, [pc, #40]	; (800a338 <vQueueAddToRegistry+0x50>)
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	00db      	lsls	r3, r3, #3
 800a314:	4413      	add	r3, r2
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a31a:	e006      	b.n	800a32a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	3301      	adds	r3, #1
 800a320:	60fb      	str	r3, [r7, #12]
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2b07      	cmp	r3, #7
 800a326:	d9e7      	bls.n	800a2f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a328:	bf00      	nop
 800a32a:	bf00      	nop
 800a32c:	3714      	adds	r7, #20
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr
 800a336:	bf00      	nop
 800a338:	2000543c 	.word	0x2000543c

0800a33c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b086      	sub	sp, #24
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a34c:	f001 fba2 	bl	800ba94 <vPortEnterCritical>
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a356:	b25b      	sxtb	r3, r3
 800a358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a35c:	d103      	bne.n	800a366 <vQueueWaitForMessageRestricted+0x2a>
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	2200      	movs	r2, #0
 800a362:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a36c:	b25b      	sxtb	r3, r3
 800a36e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a372:	d103      	bne.n	800a37c <vQueueWaitForMessageRestricted+0x40>
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	2200      	movs	r2, #0
 800a378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a37c:	f001 fbba 	bl	800baf4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a384:	2b00      	cmp	r3, #0
 800a386:	d106      	bne.n	800a396 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	3324      	adds	r3, #36	; 0x24
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	68b9      	ldr	r1, [r7, #8]
 800a390:	4618      	mov	r0, r3
 800a392:	f000 fc3b 	bl	800ac0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a396:	6978      	ldr	r0, [r7, #20]
 800a398:	f7ff ff26 	bl	800a1e8 <prvUnlockQueue>
	}
 800a39c:	bf00      	nop
 800a39e:	3718      	adds	r7, #24
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b08e      	sub	sp, #56	; 0x38
 800a3a8:	af04      	add	r7, sp, #16
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	60b9      	str	r1, [r7, #8]
 800a3ae:	607a      	str	r2, [r7, #4]
 800a3b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a3b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d10a      	bne.n	800a3ce <xTaskCreateStatic+0x2a>
	__asm volatile
 800a3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3bc:	f383 8811 	msr	BASEPRI, r3
 800a3c0:	f3bf 8f6f 	isb	sy
 800a3c4:	f3bf 8f4f 	dsb	sy
 800a3c8:	623b      	str	r3, [r7, #32]
}
 800a3ca:	bf00      	nop
 800a3cc:	e7fe      	b.n	800a3cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d10a      	bne.n	800a3ea <xTaskCreateStatic+0x46>
	__asm volatile
 800a3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d8:	f383 8811 	msr	BASEPRI, r3
 800a3dc:	f3bf 8f6f 	isb	sy
 800a3e0:	f3bf 8f4f 	dsb	sy
 800a3e4:	61fb      	str	r3, [r7, #28]
}
 800a3e6:	bf00      	nop
 800a3e8:	e7fe      	b.n	800a3e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a3ea:	235c      	movs	r3, #92	; 0x5c
 800a3ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	2b5c      	cmp	r3, #92	; 0x5c
 800a3f2:	d00a      	beq.n	800a40a <xTaskCreateStatic+0x66>
	__asm volatile
 800a3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f8:	f383 8811 	msr	BASEPRI, r3
 800a3fc:	f3bf 8f6f 	isb	sy
 800a400:	f3bf 8f4f 	dsb	sy
 800a404:	61bb      	str	r3, [r7, #24]
}
 800a406:	bf00      	nop
 800a408:	e7fe      	b.n	800a408 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a40a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d01e      	beq.n	800a450 <xTaskCreateStatic+0xac>
 800a412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a414:	2b00      	cmp	r3, #0
 800a416:	d01b      	beq.n	800a450 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a41a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a420:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a424:	2202      	movs	r2, #2
 800a426:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a42a:	2300      	movs	r3, #0
 800a42c:	9303      	str	r3, [sp, #12]
 800a42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a430:	9302      	str	r3, [sp, #8]
 800a432:	f107 0314 	add.w	r3, r7, #20
 800a436:	9301      	str	r3, [sp, #4]
 800a438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43a:	9300      	str	r3, [sp, #0]
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	68b9      	ldr	r1, [r7, #8]
 800a442:	68f8      	ldr	r0, [r7, #12]
 800a444:	f000 f850 	bl	800a4e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a448:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a44a:	f000 f8dd 	bl	800a608 <prvAddNewTaskToReadyList>
 800a44e:	e001      	b.n	800a454 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a450:	2300      	movs	r3, #0
 800a452:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a454:	697b      	ldr	r3, [r7, #20]
	}
 800a456:	4618      	mov	r0, r3
 800a458:	3728      	adds	r7, #40	; 0x28
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}

0800a45e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a45e:	b580      	push	{r7, lr}
 800a460:	b08c      	sub	sp, #48	; 0x30
 800a462:	af04      	add	r7, sp, #16
 800a464:	60f8      	str	r0, [r7, #12]
 800a466:	60b9      	str	r1, [r7, #8]
 800a468:	603b      	str	r3, [r7, #0]
 800a46a:	4613      	mov	r3, r2
 800a46c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a46e:	88fb      	ldrh	r3, [r7, #6]
 800a470:	009b      	lsls	r3, r3, #2
 800a472:	4618      	mov	r0, r3
 800a474:	f001 fc30 	bl	800bcd8 <pvPortMalloc>
 800a478:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d00e      	beq.n	800a49e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a480:	205c      	movs	r0, #92	; 0x5c
 800a482:	f001 fc29 	bl	800bcd8 <pvPortMalloc>
 800a486:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a488:	69fb      	ldr	r3, [r7, #28]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d003      	beq.n	800a496 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a48e:	69fb      	ldr	r3, [r7, #28]
 800a490:	697a      	ldr	r2, [r7, #20]
 800a492:	631a      	str	r2, [r3, #48]	; 0x30
 800a494:	e005      	b.n	800a4a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a496:	6978      	ldr	r0, [r7, #20]
 800a498:	f001 fcea 	bl	800be70 <vPortFree>
 800a49c:	e001      	b.n	800a4a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a4a2:	69fb      	ldr	r3, [r7, #28]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d017      	beq.n	800a4d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a4a8:	69fb      	ldr	r3, [r7, #28]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a4b0:	88fa      	ldrh	r2, [r7, #6]
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	9303      	str	r3, [sp, #12]
 800a4b6:	69fb      	ldr	r3, [r7, #28]
 800a4b8:	9302      	str	r3, [sp, #8]
 800a4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4bc:	9301      	str	r3, [sp, #4]
 800a4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c0:	9300      	str	r3, [sp, #0]
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	68b9      	ldr	r1, [r7, #8]
 800a4c6:	68f8      	ldr	r0, [r7, #12]
 800a4c8:	f000 f80e 	bl	800a4e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a4cc:	69f8      	ldr	r0, [r7, #28]
 800a4ce:	f000 f89b 	bl	800a608 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	61bb      	str	r3, [r7, #24]
 800a4d6:	e002      	b.n	800a4de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a4d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a4de:	69bb      	ldr	r3, [r7, #24]
	}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3720      	adds	r7, #32
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b088      	sub	sp, #32
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	60f8      	str	r0, [r7, #12]
 800a4f0:	60b9      	str	r1, [r7, #8]
 800a4f2:	607a      	str	r2, [r7, #4]
 800a4f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	461a      	mov	r2, r3
 800a500:	21a5      	movs	r1, #165	; 0xa5
 800a502:	f002 fa85 	bl	800ca10 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a508:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a510:	3b01      	subs	r3, #1
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	4413      	add	r3, r2
 800a516:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a518:	69bb      	ldr	r3, [r7, #24]
 800a51a:	f023 0307 	bic.w	r3, r3, #7
 800a51e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	f003 0307 	and.w	r3, r3, #7
 800a526:	2b00      	cmp	r3, #0
 800a528:	d00a      	beq.n	800a540 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a52e:	f383 8811 	msr	BASEPRI, r3
 800a532:	f3bf 8f6f 	isb	sy
 800a536:	f3bf 8f4f 	dsb	sy
 800a53a:	617b      	str	r3, [r7, #20]
}
 800a53c:	bf00      	nop
 800a53e:	e7fe      	b.n	800a53e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d01f      	beq.n	800a586 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a546:	2300      	movs	r3, #0
 800a548:	61fb      	str	r3, [r7, #28]
 800a54a:	e012      	b.n	800a572 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a54c:	68ba      	ldr	r2, [r7, #8]
 800a54e:	69fb      	ldr	r3, [r7, #28]
 800a550:	4413      	add	r3, r2
 800a552:	7819      	ldrb	r1, [r3, #0]
 800a554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a556:	69fb      	ldr	r3, [r7, #28]
 800a558:	4413      	add	r3, r2
 800a55a:	3334      	adds	r3, #52	; 0x34
 800a55c:	460a      	mov	r2, r1
 800a55e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a560:	68ba      	ldr	r2, [r7, #8]
 800a562:	69fb      	ldr	r3, [r7, #28]
 800a564:	4413      	add	r3, r2
 800a566:	781b      	ldrb	r3, [r3, #0]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d006      	beq.n	800a57a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a56c:	69fb      	ldr	r3, [r7, #28]
 800a56e:	3301      	adds	r3, #1
 800a570:	61fb      	str	r3, [r7, #28]
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	2b0f      	cmp	r3, #15
 800a576:	d9e9      	bls.n	800a54c <prvInitialiseNewTask+0x64>
 800a578:	e000      	b.n	800a57c <prvInitialiseNewTask+0x94>
			{
				break;
 800a57a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57e:	2200      	movs	r2, #0
 800a580:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a584:	e003      	b.n	800a58e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a588:	2200      	movs	r2, #0
 800a58a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a590:	2b37      	cmp	r3, #55	; 0x37
 800a592:	d901      	bls.n	800a598 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a594:	2337      	movs	r3, #55	; 0x37
 800a596:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a59c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ac:	3304      	adds	r3, #4
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7ff f978 	bl	80098a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b6:	3318      	adds	r3, #24
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f7ff f973 	bl	80098a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a5e2:	683a      	ldr	r2, [r7, #0]
 800a5e4:	68f9      	ldr	r1, [r7, #12]
 800a5e6:	69b8      	ldr	r0, [r7, #24]
 800a5e8:	f001 f928 	bl	800b83c <pxPortInitialiseStack>
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d002      	beq.n	800a5fe <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5fe:	bf00      	nop
 800a600:	3720      	adds	r7, #32
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
	...

0800a608 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a610:	f001 fa40 	bl	800ba94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a614:	4b2d      	ldr	r3, [pc, #180]	; (800a6cc <prvAddNewTaskToReadyList+0xc4>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	3301      	adds	r3, #1
 800a61a:	4a2c      	ldr	r2, [pc, #176]	; (800a6cc <prvAddNewTaskToReadyList+0xc4>)
 800a61c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a61e:	4b2c      	ldr	r3, [pc, #176]	; (800a6d0 <prvAddNewTaskToReadyList+0xc8>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d109      	bne.n	800a63a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a626:	4a2a      	ldr	r2, [pc, #168]	; (800a6d0 <prvAddNewTaskToReadyList+0xc8>)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a62c:	4b27      	ldr	r3, [pc, #156]	; (800a6cc <prvAddNewTaskToReadyList+0xc4>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	2b01      	cmp	r3, #1
 800a632:	d110      	bne.n	800a656 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a634:	f000 fc16 	bl	800ae64 <prvInitialiseTaskLists>
 800a638:	e00d      	b.n	800a656 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a63a:	4b26      	ldr	r3, [pc, #152]	; (800a6d4 <prvAddNewTaskToReadyList+0xcc>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d109      	bne.n	800a656 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a642:	4b23      	ldr	r3, [pc, #140]	; (800a6d0 <prvAddNewTaskToReadyList+0xc8>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d802      	bhi.n	800a656 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a650:	4a1f      	ldr	r2, [pc, #124]	; (800a6d0 <prvAddNewTaskToReadyList+0xc8>)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a656:	4b20      	ldr	r3, [pc, #128]	; (800a6d8 <prvAddNewTaskToReadyList+0xd0>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	3301      	adds	r3, #1
 800a65c:	4a1e      	ldr	r2, [pc, #120]	; (800a6d8 <prvAddNewTaskToReadyList+0xd0>)
 800a65e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a660:	4b1d      	ldr	r3, [pc, #116]	; (800a6d8 <prvAddNewTaskToReadyList+0xd0>)
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a66c:	4b1b      	ldr	r3, [pc, #108]	; (800a6dc <prvAddNewTaskToReadyList+0xd4>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	429a      	cmp	r2, r3
 800a672:	d903      	bls.n	800a67c <prvAddNewTaskToReadyList+0x74>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a678:	4a18      	ldr	r2, [pc, #96]	; (800a6dc <prvAddNewTaskToReadyList+0xd4>)
 800a67a:	6013      	str	r3, [r2, #0]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a680:	4613      	mov	r3, r2
 800a682:	009b      	lsls	r3, r3, #2
 800a684:	4413      	add	r3, r2
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	4a15      	ldr	r2, [pc, #84]	; (800a6e0 <prvAddNewTaskToReadyList+0xd8>)
 800a68a:	441a      	add	r2, r3
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	3304      	adds	r3, #4
 800a690:	4619      	mov	r1, r3
 800a692:	4610      	mov	r0, r2
 800a694:	f7ff f913 	bl	80098be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a698:	f001 fa2c 	bl	800baf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a69c:	4b0d      	ldr	r3, [pc, #52]	; (800a6d4 <prvAddNewTaskToReadyList+0xcc>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d00e      	beq.n	800a6c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a6a4:	4b0a      	ldr	r3, [pc, #40]	; (800a6d0 <prvAddNewTaskToReadyList+0xc8>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d207      	bcs.n	800a6c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a6b2:	4b0c      	ldr	r3, [pc, #48]	; (800a6e4 <prvAddNewTaskToReadyList+0xdc>)
 800a6b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6b8:	601a      	str	r2, [r3, #0]
 800a6ba:	f3bf 8f4f 	dsb	sy
 800a6be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6c2:	bf00      	nop
 800a6c4:	3708      	adds	r7, #8
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
 800a6ca:	bf00      	nop
 800a6cc:	20001078 	.word	0x20001078
 800a6d0:	20000ba4 	.word	0x20000ba4
 800a6d4:	20001084 	.word	0x20001084
 800a6d8:	20001094 	.word	0x20001094
 800a6dc:	20001080 	.word	0x20001080
 800a6e0:	20000ba8 	.word	0x20000ba8
 800a6e4:	e000ed04 	.word	0xe000ed04

0800a6e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d017      	beq.n	800a72a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a6fa:	4b13      	ldr	r3, [pc, #76]	; (800a748 <vTaskDelay+0x60>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d00a      	beq.n	800a718 <vTaskDelay+0x30>
	__asm volatile
 800a702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a706:	f383 8811 	msr	BASEPRI, r3
 800a70a:	f3bf 8f6f 	isb	sy
 800a70e:	f3bf 8f4f 	dsb	sy
 800a712:	60bb      	str	r3, [r7, #8]
}
 800a714:	bf00      	nop
 800a716:	e7fe      	b.n	800a716 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a718:	f000 f880 	bl	800a81c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a71c:	2100      	movs	r1, #0
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f000 fcea 	bl	800b0f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a724:	f000 f888 	bl	800a838 <xTaskResumeAll>
 800a728:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d107      	bne.n	800a740 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a730:	4b06      	ldr	r3, [pc, #24]	; (800a74c <vTaskDelay+0x64>)
 800a732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a736:	601a      	str	r2, [r3, #0]
 800a738:	f3bf 8f4f 	dsb	sy
 800a73c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a740:	bf00      	nop
 800a742:	3710      	adds	r7, #16
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}
 800a748:	200010a0 	.word	0x200010a0
 800a74c:	e000ed04 	.word	0xe000ed04

0800a750 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b08a      	sub	sp, #40	; 0x28
 800a754:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a756:	2300      	movs	r3, #0
 800a758:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a75a:	2300      	movs	r3, #0
 800a75c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a75e:	463a      	mov	r2, r7
 800a760:	1d39      	adds	r1, r7, #4
 800a762:	f107 0308 	add.w	r3, r7, #8
 800a766:	4618      	mov	r0, r3
 800a768:	f7ff f848 	bl	80097fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a76c:	6839      	ldr	r1, [r7, #0]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	68ba      	ldr	r2, [r7, #8]
 800a772:	9202      	str	r2, [sp, #8]
 800a774:	9301      	str	r3, [sp, #4]
 800a776:	2300      	movs	r3, #0
 800a778:	9300      	str	r3, [sp, #0]
 800a77a:	2300      	movs	r3, #0
 800a77c:	460a      	mov	r2, r1
 800a77e:	4921      	ldr	r1, [pc, #132]	; (800a804 <vTaskStartScheduler+0xb4>)
 800a780:	4821      	ldr	r0, [pc, #132]	; (800a808 <vTaskStartScheduler+0xb8>)
 800a782:	f7ff fe0f 	bl	800a3a4 <xTaskCreateStatic>
 800a786:	4603      	mov	r3, r0
 800a788:	4a20      	ldr	r2, [pc, #128]	; (800a80c <vTaskStartScheduler+0xbc>)
 800a78a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a78c:	4b1f      	ldr	r3, [pc, #124]	; (800a80c <vTaskStartScheduler+0xbc>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d002      	beq.n	800a79a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a794:	2301      	movs	r3, #1
 800a796:	617b      	str	r3, [r7, #20]
 800a798:	e001      	b.n	800a79e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a79a:	2300      	movs	r3, #0
 800a79c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d102      	bne.n	800a7aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a7a4:	f000 fcfc 	bl	800b1a0 <xTimerCreateTimerTask>
 800a7a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d116      	bne.n	800a7de <vTaskStartScheduler+0x8e>
	__asm volatile
 800a7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b4:	f383 8811 	msr	BASEPRI, r3
 800a7b8:	f3bf 8f6f 	isb	sy
 800a7bc:	f3bf 8f4f 	dsb	sy
 800a7c0:	613b      	str	r3, [r7, #16]
}
 800a7c2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a7c4:	4b12      	ldr	r3, [pc, #72]	; (800a810 <vTaskStartScheduler+0xc0>)
 800a7c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a7cc:	4b11      	ldr	r3, [pc, #68]	; (800a814 <vTaskStartScheduler+0xc4>)
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a7d2:	4b11      	ldr	r3, [pc, #68]	; (800a818 <vTaskStartScheduler+0xc8>)
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a7d8:	f001 f8ba 	bl	800b950 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a7dc:	e00e      	b.n	800a7fc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7e4:	d10a      	bne.n	800a7fc <vTaskStartScheduler+0xac>
	__asm volatile
 800a7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ea:	f383 8811 	msr	BASEPRI, r3
 800a7ee:	f3bf 8f6f 	isb	sy
 800a7f2:	f3bf 8f4f 	dsb	sy
 800a7f6:	60fb      	str	r3, [r7, #12]
}
 800a7f8:	bf00      	nop
 800a7fa:	e7fe      	b.n	800a7fa <vTaskStartScheduler+0xaa>
}
 800a7fc:	bf00      	nop
 800a7fe:	3718      	adds	r7, #24
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}
 800a804:	08011bb0 	.word	0x08011bb0
 800a808:	0800ae35 	.word	0x0800ae35
 800a80c:	2000109c 	.word	0x2000109c
 800a810:	20001098 	.word	0x20001098
 800a814:	20001084 	.word	0x20001084
 800a818:	2000107c 	.word	0x2000107c

0800a81c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a81c:	b480      	push	{r7}
 800a81e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a820:	4b04      	ldr	r3, [pc, #16]	; (800a834 <vTaskSuspendAll+0x18>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	3301      	adds	r3, #1
 800a826:	4a03      	ldr	r2, [pc, #12]	; (800a834 <vTaskSuspendAll+0x18>)
 800a828:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a82a:	bf00      	nop
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr
 800a834:	200010a0 	.word	0x200010a0

0800a838 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a83e:	2300      	movs	r3, #0
 800a840:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a842:	2300      	movs	r3, #0
 800a844:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a846:	4b42      	ldr	r3, [pc, #264]	; (800a950 <xTaskResumeAll+0x118>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d10a      	bne.n	800a864 <xTaskResumeAll+0x2c>
	__asm volatile
 800a84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a852:	f383 8811 	msr	BASEPRI, r3
 800a856:	f3bf 8f6f 	isb	sy
 800a85a:	f3bf 8f4f 	dsb	sy
 800a85e:	603b      	str	r3, [r7, #0]
}
 800a860:	bf00      	nop
 800a862:	e7fe      	b.n	800a862 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a864:	f001 f916 	bl	800ba94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a868:	4b39      	ldr	r3, [pc, #228]	; (800a950 <xTaskResumeAll+0x118>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	3b01      	subs	r3, #1
 800a86e:	4a38      	ldr	r2, [pc, #224]	; (800a950 <xTaskResumeAll+0x118>)
 800a870:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a872:	4b37      	ldr	r3, [pc, #220]	; (800a950 <xTaskResumeAll+0x118>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d162      	bne.n	800a940 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a87a:	4b36      	ldr	r3, [pc, #216]	; (800a954 <xTaskResumeAll+0x11c>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d05e      	beq.n	800a940 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a882:	e02f      	b.n	800a8e4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a884:	4b34      	ldr	r3, [pc, #208]	; (800a958 <xTaskResumeAll+0x120>)
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	68db      	ldr	r3, [r3, #12]
 800a88a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	3318      	adds	r3, #24
 800a890:	4618      	mov	r0, r3
 800a892:	f7ff f871 	bl	8009978 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	3304      	adds	r3, #4
 800a89a:	4618      	mov	r0, r3
 800a89c:	f7ff f86c 	bl	8009978 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8a4:	4b2d      	ldr	r3, [pc, #180]	; (800a95c <xTaskResumeAll+0x124>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d903      	bls.n	800a8b4 <xTaskResumeAll+0x7c>
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8b0:	4a2a      	ldr	r2, [pc, #168]	; (800a95c <xTaskResumeAll+0x124>)
 800a8b2:	6013      	str	r3, [r2, #0]
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8b8:	4613      	mov	r3, r2
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	4413      	add	r3, r2
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	4a27      	ldr	r2, [pc, #156]	; (800a960 <xTaskResumeAll+0x128>)
 800a8c2:	441a      	add	r2, r3
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	3304      	adds	r3, #4
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	4610      	mov	r0, r2
 800a8cc:	f7fe fff7 	bl	80098be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8d4:	4b23      	ldr	r3, [pc, #140]	; (800a964 <xTaskResumeAll+0x12c>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d302      	bcc.n	800a8e4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a8de:	4b22      	ldr	r3, [pc, #136]	; (800a968 <xTaskResumeAll+0x130>)
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a8e4:	4b1c      	ldr	r3, [pc, #112]	; (800a958 <xTaskResumeAll+0x120>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d1cb      	bne.n	800a884 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d001      	beq.n	800a8f6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a8f2:	f000 fb55 	bl	800afa0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a8f6:	4b1d      	ldr	r3, [pc, #116]	; (800a96c <xTaskResumeAll+0x134>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d010      	beq.n	800a924 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a902:	f000 f847 	bl	800a994 <xTaskIncrementTick>
 800a906:	4603      	mov	r3, r0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d002      	beq.n	800a912 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a90c:	4b16      	ldr	r3, [pc, #88]	; (800a968 <xTaskResumeAll+0x130>)
 800a90e:	2201      	movs	r2, #1
 800a910:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	3b01      	subs	r3, #1
 800a916:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d1f1      	bne.n	800a902 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a91e:	4b13      	ldr	r3, [pc, #76]	; (800a96c <xTaskResumeAll+0x134>)
 800a920:	2200      	movs	r2, #0
 800a922:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a924:	4b10      	ldr	r3, [pc, #64]	; (800a968 <xTaskResumeAll+0x130>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d009      	beq.n	800a940 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a92c:	2301      	movs	r3, #1
 800a92e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a930:	4b0f      	ldr	r3, [pc, #60]	; (800a970 <xTaskResumeAll+0x138>)
 800a932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a936:	601a      	str	r2, [r3, #0]
 800a938:	f3bf 8f4f 	dsb	sy
 800a93c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a940:	f001 f8d8 	bl	800baf4 <vPortExitCritical>

	return xAlreadyYielded;
 800a944:	68bb      	ldr	r3, [r7, #8]
}
 800a946:	4618      	mov	r0, r3
 800a948:	3710      	adds	r7, #16
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
 800a94e:	bf00      	nop
 800a950:	200010a0 	.word	0x200010a0
 800a954:	20001078 	.word	0x20001078
 800a958:	20001038 	.word	0x20001038
 800a95c:	20001080 	.word	0x20001080
 800a960:	20000ba8 	.word	0x20000ba8
 800a964:	20000ba4 	.word	0x20000ba4
 800a968:	2000108c 	.word	0x2000108c
 800a96c:	20001088 	.word	0x20001088
 800a970:	e000ed04 	.word	0xe000ed04

0800a974 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a974:	b480      	push	{r7}
 800a976:	b083      	sub	sp, #12
 800a978:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a97a:	4b05      	ldr	r3, [pc, #20]	; (800a990 <xTaskGetTickCount+0x1c>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a980:	687b      	ldr	r3, [r7, #4]
}
 800a982:	4618      	mov	r0, r3
 800a984:	370c      	adds	r7, #12
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr
 800a98e:	bf00      	nop
 800a990:	2000107c 	.word	0x2000107c

0800a994 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b086      	sub	sp, #24
 800a998:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a99a:	2300      	movs	r3, #0
 800a99c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a99e:	4b4f      	ldr	r3, [pc, #316]	; (800aadc <xTaskIncrementTick+0x148>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	f040 808f 	bne.w	800aac6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a9a8:	4b4d      	ldr	r3, [pc, #308]	; (800aae0 <xTaskIncrementTick+0x14c>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a9b0:	4a4b      	ldr	r2, [pc, #300]	; (800aae0 <xTaskIncrementTick+0x14c>)
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d120      	bne.n	800a9fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a9bc:	4b49      	ldr	r3, [pc, #292]	; (800aae4 <xTaskIncrementTick+0x150>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d00a      	beq.n	800a9dc <xTaskIncrementTick+0x48>
	__asm volatile
 800a9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ca:	f383 8811 	msr	BASEPRI, r3
 800a9ce:	f3bf 8f6f 	isb	sy
 800a9d2:	f3bf 8f4f 	dsb	sy
 800a9d6:	603b      	str	r3, [r7, #0]
}
 800a9d8:	bf00      	nop
 800a9da:	e7fe      	b.n	800a9da <xTaskIncrementTick+0x46>
 800a9dc:	4b41      	ldr	r3, [pc, #260]	; (800aae4 <xTaskIncrementTick+0x150>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	60fb      	str	r3, [r7, #12]
 800a9e2:	4b41      	ldr	r3, [pc, #260]	; (800aae8 <xTaskIncrementTick+0x154>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	4a3f      	ldr	r2, [pc, #252]	; (800aae4 <xTaskIncrementTick+0x150>)
 800a9e8:	6013      	str	r3, [r2, #0]
 800a9ea:	4a3f      	ldr	r2, [pc, #252]	; (800aae8 <xTaskIncrementTick+0x154>)
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	6013      	str	r3, [r2, #0]
 800a9f0:	4b3e      	ldr	r3, [pc, #248]	; (800aaec <xTaskIncrementTick+0x158>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	4a3d      	ldr	r2, [pc, #244]	; (800aaec <xTaskIncrementTick+0x158>)
 800a9f8:	6013      	str	r3, [r2, #0]
 800a9fa:	f000 fad1 	bl	800afa0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a9fe:	4b3c      	ldr	r3, [pc, #240]	; (800aaf0 <xTaskIncrementTick+0x15c>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	693a      	ldr	r2, [r7, #16]
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d349      	bcc.n	800aa9c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa08:	4b36      	ldr	r3, [pc, #216]	; (800aae4 <xTaskIncrementTick+0x150>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d104      	bne.n	800aa1c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa12:	4b37      	ldr	r3, [pc, #220]	; (800aaf0 <xTaskIncrementTick+0x15c>)
 800aa14:	f04f 32ff 	mov.w	r2, #4294967295
 800aa18:	601a      	str	r2, [r3, #0]
					break;
 800aa1a:	e03f      	b.n	800aa9c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa1c:	4b31      	ldr	r3, [pc, #196]	; (800aae4 <xTaskIncrementTick+0x150>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	68db      	ldr	r3, [r3, #12]
 800aa24:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aa2c:	693a      	ldr	r2, [r7, #16]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d203      	bcs.n	800aa3c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aa34:	4a2e      	ldr	r2, [pc, #184]	; (800aaf0 <xTaskIncrementTick+0x15c>)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aa3a:	e02f      	b.n	800aa9c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	3304      	adds	r3, #4
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7fe ff99 	bl	8009978 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d004      	beq.n	800aa58 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	3318      	adds	r3, #24
 800aa52:	4618      	mov	r0, r3
 800aa54:	f7fe ff90 	bl	8009978 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa5c:	4b25      	ldr	r3, [pc, #148]	; (800aaf4 <xTaskIncrementTick+0x160>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d903      	bls.n	800aa6c <xTaskIncrementTick+0xd8>
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa68:	4a22      	ldr	r2, [pc, #136]	; (800aaf4 <xTaskIncrementTick+0x160>)
 800aa6a:	6013      	str	r3, [r2, #0]
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa70:	4613      	mov	r3, r2
 800aa72:	009b      	lsls	r3, r3, #2
 800aa74:	4413      	add	r3, r2
 800aa76:	009b      	lsls	r3, r3, #2
 800aa78:	4a1f      	ldr	r2, [pc, #124]	; (800aaf8 <xTaskIncrementTick+0x164>)
 800aa7a:	441a      	add	r2, r3
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	3304      	adds	r3, #4
 800aa80:	4619      	mov	r1, r3
 800aa82:	4610      	mov	r0, r2
 800aa84:	f7fe ff1b 	bl	80098be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa8c:	4b1b      	ldr	r3, [pc, #108]	; (800aafc <xTaskIncrementTick+0x168>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d3b8      	bcc.n	800aa08 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800aa96:	2301      	movs	r3, #1
 800aa98:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa9a:	e7b5      	b.n	800aa08 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aa9c:	4b17      	ldr	r3, [pc, #92]	; (800aafc <xTaskIncrementTick+0x168>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaa2:	4915      	ldr	r1, [pc, #84]	; (800aaf8 <xTaskIncrementTick+0x164>)
 800aaa4:	4613      	mov	r3, r2
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	4413      	add	r3, r2
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	440b      	add	r3, r1
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d901      	bls.n	800aab8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800aab4:	2301      	movs	r3, #1
 800aab6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800aab8:	4b11      	ldr	r3, [pc, #68]	; (800ab00 <xTaskIncrementTick+0x16c>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d007      	beq.n	800aad0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800aac0:	2301      	movs	r3, #1
 800aac2:	617b      	str	r3, [r7, #20]
 800aac4:	e004      	b.n	800aad0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800aac6:	4b0f      	ldr	r3, [pc, #60]	; (800ab04 <xTaskIncrementTick+0x170>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	3301      	adds	r3, #1
 800aacc:	4a0d      	ldr	r2, [pc, #52]	; (800ab04 <xTaskIncrementTick+0x170>)
 800aace:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800aad0:	697b      	ldr	r3, [r7, #20]
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3718      	adds	r7, #24
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	200010a0 	.word	0x200010a0
 800aae0:	2000107c 	.word	0x2000107c
 800aae4:	20001030 	.word	0x20001030
 800aae8:	20001034 	.word	0x20001034
 800aaec:	20001090 	.word	0x20001090
 800aaf0:	20001098 	.word	0x20001098
 800aaf4:	20001080 	.word	0x20001080
 800aaf8:	20000ba8 	.word	0x20000ba8
 800aafc:	20000ba4 	.word	0x20000ba4
 800ab00:	2000108c 	.word	0x2000108c
 800ab04:	20001088 	.word	0x20001088

0800ab08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b085      	sub	sp, #20
 800ab0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ab0e:	4b28      	ldr	r3, [pc, #160]	; (800abb0 <vTaskSwitchContext+0xa8>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d003      	beq.n	800ab1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ab16:	4b27      	ldr	r3, [pc, #156]	; (800abb4 <vTaskSwitchContext+0xac>)
 800ab18:	2201      	movs	r2, #1
 800ab1a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ab1c:	e041      	b.n	800aba2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800ab1e:	4b25      	ldr	r3, [pc, #148]	; (800abb4 <vTaskSwitchContext+0xac>)
 800ab20:	2200      	movs	r2, #0
 800ab22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab24:	4b24      	ldr	r3, [pc, #144]	; (800abb8 <vTaskSwitchContext+0xb0>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	60fb      	str	r3, [r7, #12]
 800ab2a:	e010      	b.n	800ab4e <vTaskSwitchContext+0x46>
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d10a      	bne.n	800ab48 <vTaskSwitchContext+0x40>
	__asm volatile
 800ab32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab36:	f383 8811 	msr	BASEPRI, r3
 800ab3a:	f3bf 8f6f 	isb	sy
 800ab3e:	f3bf 8f4f 	dsb	sy
 800ab42:	607b      	str	r3, [r7, #4]
}
 800ab44:	bf00      	nop
 800ab46:	e7fe      	b.n	800ab46 <vTaskSwitchContext+0x3e>
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	3b01      	subs	r3, #1
 800ab4c:	60fb      	str	r3, [r7, #12]
 800ab4e:	491b      	ldr	r1, [pc, #108]	; (800abbc <vTaskSwitchContext+0xb4>)
 800ab50:	68fa      	ldr	r2, [r7, #12]
 800ab52:	4613      	mov	r3, r2
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	4413      	add	r3, r2
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	440b      	add	r3, r1
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d0e4      	beq.n	800ab2c <vTaskSwitchContext+0x24>
 800ab62:	68fa      	ldr	r2, [r7, #12]
 800ab64:	4613      	mov	r3, r2
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	4413      	add	r3, r2
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	4a13      	ldr	r2, [pc, #76]	; (800abbc <vTaskSwitchContext+0xb4>)
 800ab6e:	4413      	add	r3, r2
 800ab70:	60bb      	str	r3, [r7, #8]
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	685a      	ldr	r2, [r3, #4]
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	605a      	str	r2, [r3, #4]
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	685a      	ldr	r2, [r3, #4]
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	3308      	adds	r3, #8
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d104      	bne.n	800ab92 <vTaskSwitchContext+0x8a>
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	685a      	ldr	r2, [r3, #4]
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	605a      	str	r2, [r3, #4]
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	4a09      	ldr	r2, [pc, #36]	; (800abc0 <vTaskSwitchContext+0xb8>)
 800ab9a:	6013      	str	r3, [r2, #0]
 800ab9c:	4a06      	ldr	r2, [pc, #24]	; (800abb8 <vTaskSwitchContext+0xb0>)
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	6013      	str	r3, [r2, #0]
}
 800aba2:	bf00      	nop
 800aba4:	3714      	adds	r7, #20
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr
 800abae:	bf00      	nop
 800abb0:	200010a0 	.word	0x200010a0
 800abb4:	2000108c 	.word	0x2000108c
 800abb8:	20001080 	.word	0x20001080
 800abbc:	20000ba8 	.word	0x20000ba8
 800abc0:	20000ba4 	.word	0x20000ba4

0800abc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d10a      	bne.n	800abea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800abd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd8:	f383 8811 	msr	BASEPRI, r3
 800abdc:	f3bf 8f6f 	isb	sy
 800abe0:	f3bf 8f4f 	dsb	sy
 800abe4:	60fb      	str	r3, [r7, #12]
}
 800abe6:	bf00      	nop
 800abe8:	e7fe      	b.n	800abe8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800abea:	4b07      	ldr	r3, [pc, #28]	; (800ac08 <vTaskPlaceOnEventList+0x44>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	3318      	adds	r3, #24
 800abf0:	4619      	mov	r1, r3
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f7fe fe87 	bl	8009906 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800abf8:	2101      	movs	r1, #1
 800abfa:	6838      	ldr	r0, [r7, #0]
 800abfc:	f000 fa7c 	bl	800b0f8 <prvAddCurrentTaskToDelayedList>
}
 800ac00:	bf00      	nop
 800ac02:	3710      	adds	r7, #16
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	20000ba4 	.word	0x20000ba4

0800ac0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b086      	sub	sp, #24
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	60f8      	str	r0, [r7, #12]
 800ac14:	60b9      	str	r1, [r7, #8]
 800ac16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d10a      	bne.n	800ac34 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ac1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac22:	f383 8811 	msr	BASEPRI, r3
 800ac26:	f3bf 8f6f 	isb	sy
 800ac2a:	f3bf 8f4f 	dsb	sy
 800ac2e:	617b      	str	r3, [r7, #20]
}
 800ac30:	bf00      	nop
 800ac32:	e7fe      	b.n	800ac32 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ac34:	4b0a      	ldr	r3, [pc, #40]	; (800ac60 <vTaskPlaceOnEventListRestricted+0x54>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	3318      	adds	r3, #24
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	68f8      	ldr	r0, [r7, #12]
 800ac3e:	f7fe fe3e 	bl	80098be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d002      	beq.n	800ac4e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ac48:	f04f 33ff 	mov.w	r3, #4294967295
 800ac4c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ac4e:	6879      	ldr	r1, [r7, #4]
 800ac50:	68b8      	ldr	r0, [r7, #8]
 800ac52:	f000 fa51 	bl	800b0f8 <prvAddCurrentTaskToDelayedList>
	}
 800ac56:	bf00      	nop
 800ac58:	3718      	adds	r7, #24
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}
 800ac5e:	bf00      	nop
 800ac60:	20000ba4 	.word	0x20000ba4

0800ac64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b086      	sub	sp, #24
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	68db      	ldr	r3, [r3, #12]
 800ac72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d10a      	bne.n	800ac90 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ac7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7e:	f383 8811 	msr	BASEPRI, r3
 800ac82:	f3bf 8f6f 	isb	sy
 800ac86:	f3bf 8f4f 	dsb	sy
 800ac8a:	60fb      	str	r3, [r7, #12]
}
 800ac8c:	bf00      	nop
 800ac8e:	e7fe      	b.n	800ac8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	3318      	adds	r3, #24
 800ac94:	4618      	mov	r0, r3
 800ac96:	f7fe fe6f 	bl	8009978 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac9a:	4b1e      	ldr	r3, [pc, #120]	; (800ad14 <xTaskRemoveFromEventList+0xb0>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d11d      	bne.n	800acde <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	3304      	adds	r3, #4
 800aca6:	4618      	mov	r0, r3
 800aca8:	f7fe fe66 	bl	8009978 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acb0:	4b19      	ldr	r3, [pc, #100]	; (800ad18 <xTaskRemoveFromEventList+0xb4>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d903      	bls.n	800acc0 <xTaskRemoveFromEventList+0x5c>
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acbc:	4a16      	ldr	r2, [pc, #88]	; (800ad18 <xTaskRemoveFromEventList+0xb4>)
 800acbe:	6013      	str	r3, [r2, #0]
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acc4:	4613      	mov	r3, r2
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	4413      	add	r3, r2
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	4a13      	ldr	r2, [pc, #76]	; (800ad1c <xTaskRemoveFromEventList+0xb8>)
 800acce:	441a      	add	r2, r3
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	3304      	adds	r3, #4
 800acd4:	4619      	mov	r1, r3
 800acd6:	4610      	mov	r0, r2
 800acd8:	f7fe fdf1 	bl	80098be <vListInsertEnd>
 800acdc:	e005      	b.n	800acea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	3318      	adds	r3, #24
 800ace2:	4619      	mov	r1, r3
 800ace4:	480e      	ldr	r0, [pc, #56]	; (800ad20 <xTaskRemoveFromEventList+0xbc>)
 800ace6:	f7fe fdea 	bl	80098be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acee:	4b0d      	ldr	r3, [pc, #52]	; (800ad24 <xTaskRemoveFromEventList+0xc0>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d905      	bls.n	800ad04 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800acf8:	2301      	movs	r3, #1
 800acfa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800acfc:	4b0a      	ldr	r3, [pc, #40]	; (800ad28 <xTaskRemoveFromEventList+0xc4>)
 800acfe:	2201      	movs	r2, #1
 800ad00:	601a      	str	r2, [r3, #0]
 800ad02:	e001      	b.n	800ad08 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ad04:	2300      	movs	r3, #0
 800ad06:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ad08:	697b      	ldr	r3, [r7, #20]
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3718      	adds	r7, #24
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
 800ad12:	bf00      	nop
 800ad14:	200010a0 	.word	0x200010a0
 800ad18:	20001080 	.word	0x20001080
 800ad1c:	20000ba8 	.word	0x20000ba8
 800ad20:	20001038 	.word	0x20001038
 800ad24:	20000ba4 	.word	0x20000ba4
 800ad28:	2000108c 	.word	0x2000108c

0800ad2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ad34:	4b06      	ldr	r3, [pc, #24]	; (800ad50 <vTaskInternalSetTimeOutState+0x24>)
 800ad36:	681a      	ldr	r2, [r3, #0]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ad3c:	4b05      	ldr	r3, [pc, #20]	; (800ad54 <vTaskInternalSetTimeOutState+0x28>)
 800ad3e:	681a      	ldr	r2, [r3, #0]
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	605a      	str	r2, [r3, #4]
}
 800ad44:	bf00      	nop
 800ad46:	370c      	adds	r7, #12
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr
 800ad50:	20001090 	.word	0x20001090
 800ad54:	2000107c 	.word	0x2000107c

0800ad58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b088      	sub	sp, #32
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d10a      	bne.n	800ad7e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ad68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6c:	f383 8811 	msr	BASEPRI, r3
 800ad70:	f3bf 8f6f 	isb	sy
 800ad74:	f3bf 8f4f 	dsb	sy
 800ad78:	613b      	str	r3, [r7, #16]
}
 800ad7a:	bf00      	nop
 800ad7c:	e7fe      	b.n	800ad7c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d10a      	bne.n	800ad9a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ad84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad88:	f383 8811 	msr	BASEPRI, r3
 800ad8c:	f3bf 8f6f 	isb	sy
 800ad90:	f3bf 8f4f 	dsb	sy
 800ad94:	60fb      	str	r3, [r7, #12]
}
 800ad96:	bf00      	nop
 800ad98:	e7fe      	b.n	800ad98 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ad9a:	f000 fe7b 	bl	800ba94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ad9e:	4b1d      	ldr	r3, [pc, #116]	; (800ae14 <xTaskCheckForTimeOut+0xbc>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	69ba      	ldr	r2, [r7, #24]
 800adaa:	1ad3      	subs	r3, r2, r3
 800adac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adb6:	d102      	bne.n	800adbe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800adb8:	2300      	movs	r3, #0
 800adba:	61fb      	str	r3, [r7, #28]
 800adbc:	e023      	b.n	800ae06 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	4b15      	ldr	r3, [pc, #84]	; (800ae18 <xTaskCheckForTimeOut+0xc0>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d007      	beq.n	800adda <xTaskCheckForTimeOut+0x82>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	69ba      	ldr	r2, [r7, #24]
 800add0:	429a      	cmp	r2, r3
 800add2:	d302      	bcc.n	800adda <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800add4:	2301      	movs	r3, #1
 800add6:	61fb      	str	r3, [r7, #28]
 800add8:	e015      	b.n	800ae06 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	697a      	ldr	r2, [r7, #20]
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d20b      	bcs.n	800adfc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	681a      	ldr	r2, [r3, #0]
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	1ad2      	subs	r2, r2, r3
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f7ff ff9b 	bl	800ad2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800adf6:	2300      	movs	r3, #0
 800adf8:	61fb      	str	r3, [r7, #28]
 800adfa:	e004      	b.n	800ae06 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	2200      	movs	r2, #0
 800ae00:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ae02:	2301      	movs	r3, #1
 800ae04:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ae06:	f000 fe75 	bl	800baf4 <vPortExitCritical>

	return xReturn;
 800ae0a:	69fb      	ldr	r3, [r7, #28]
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3720      	adds	r7, #32
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}
 800ae14:	2000107c 	.word	0x2000107c
 800ae18:	20001090 	.word	0x20001090

0800ae1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ae20:	4b03      	ldr	r3, [pc, #12]	; (800ae30 <vTaskMissedYield+0x14>)
 800ae22:	2201      	movs	r2, #1
 800ae24:	601a      	str	r2, [r3, #0]
}
 800ae26:	bf00      	nop
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr
 800ae30:	2000108c 	.word	0x2000108c

0800ae34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b082      	sub	sp, #8
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ae3c:	f000 f852 	bl	800aee4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ae40:	4b06      	ldr	r3, [pc, #24]	; (800ae5c <prvIdleTask+0x28>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	2b01      	cmp	r3, #1
 800ae46:	d9f9      	bls.n	800ae3c <prvIdleTask+0x8>
			{
				taskYIELD();
 800ae48:	4b05      	ldr	r3, [pc, #20]	; (800ae60 <prvIdleTask+0x2c>)
 800ae4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae4e:	601a      	str	r2, [r3, #0]
 800ae50:	f3bf 8f4f 	dsb	sy
 800ae54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ae58:	e7f0      	b.n	800ae3c <prvIdleTask+0x8>
 800ae5a:	bf00      	nop
 800ae5c:	20000ba8 	.word	0x20000ba8
 800ae60:	e000ed04 	.word	0xe000ed04

0800ae64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	607b      	str	r3, [r7, #4]
 800ae6e:	e00c      	b.n	800ae8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	4613      	mov	r3, r2
 800ae74:	009b      	lsls	r3, r3, #2
 800ae76:	4413      	add	r3, r2
 800ae78:	009b      	lsls	r3, r3, #2
 800ae7a:	4a12      	ldr	r2, [pc, #72]	; (800aec4 <prvInitialiseTaskLists+0x60>)
 800ae7c:	4413      	add	r3, r2
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7fe fcf0 	bl	8009864 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	3301      	adds	r3, #1
 800ae88:	607b      	str	r3, [r7, #4]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2b37      	cmp	r3, #55	; 0x37
 800ae8e:	d9ef      	bls.n	800ae70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ae90:	480d      	ldr	r0, [pc, #52]	; (800aec8 <prvInitialiseTaskLists+0x64>)
 800ae92:	f7fe fce7 	bl	8009864 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ae96:	480d      	ldr	r0, [pc, #52]	; (800aecc <prvInitialiseTaskLists+0x68>)
 800ae98:	f7fe fce4 	bl	8009864 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ae9c:	480c      	ldr	r0, [pc, #48]	; (800aed0 <prvInitialiseTaskLists+0x6c>)
 800ae9e:	f7fe fce1 	bl	8009864 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aea2:	480c      	ldr	r0, [pc, #48]	; (800aed4 <prvInitialiseTaskLists+0x70>)
 800aea4:	f7fe fcde 	bl	8009864 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aea8:	480b      	ldr	r0, [pc, #44]	; (800aed8 <prvInitialiseTaskLists+0x74>)
 800aeaa:	f7fe fcdb 	bl	8009864 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aeae:	4b0b      	ldr	r3, [pc, #44]	; (800aedc <prvInitialiseTaskLists+0x78>)
 800aeb0:	4a05      	ldr	r2, [pc, #20]	; (800aec8 <prvInitialiseTaskLists+0x64>)
 800aeb2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aeb4:	4b0a      	ldr	r3, [pc, #40]	; (800aee0 <prvInitialiseTaskLists+0x7c>)
 800aeb6:	4a05      	ldr	r2, [pc, #20]	; (800aecc <prvInitialiseTaskLists+0x68>)
 800aeb8:	601a      	str	r2, [r3, #0]
}
 800aeba:	bf00      	nop
 800aebc:	3708      	adds	r7, #8
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}
 800aec2:	bf00      	nop
 800aec4:	20000ba8 	.word	0x20000ba8
 800aec8:	20001008 	.word	0x20001008
 800aecc:	2000101c 	.word	0x2000101c
 800aed0:	20001038 	.word	0x20001038
 800aed4:	2000104c 	.word	0x2000104c
 800aed8:	20001064 	.word	0x20001064
 800aedc:	20001030 	.word	0x20001030
 800aee0:	20001034 	.word	0x20001034

0800aee4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aeea:	e019      	b.n	800af20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aeec:	f000 fdd2 	bl	800ba94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aef0:	4b10      	ldr	r3, [pc, #64]	; (800af34 <prvCheckTasksWaitingTermination+0x50>)
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	68db      	ldr	r3, [r3, #12]
 800aef6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	3304      	adds	r3, #4
 800aefc:	4618      	mov	r0, r3
 800aefe:	f7fe fd3b 	bl	8009978 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800af02:	4b0d      	ldr	r3, [pc, #52]	; (800af38 <prvCheckTasksWaitingTermination+0x54>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	3b01      	subs	r3, #1
 800af08:	4a0b      	ldr	r2, [pc, #44]	; (800af38 <prvCheckTasksWaitingTermination+0x54>)
 800af0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800af0c:	4b0b      	ldr	r3, [pc, #44]	; (800af3c <prvCheckTasksWaitingTermination+0x58>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	3b01      	subs	r3, #1
 800af12:	4a0a      	ldr	r2, [pc, #40]	; (800af3c <prvCheckTasksWaitingTermination+0x58>)
 800af14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800af16:	f000 fded 	bl	800baf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 f810 	bl	800af40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800af20:	4b06      	ldr	r3, [pc, #24]	; (800af3c <prvCheckTasksWaitingTermination+0x58>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d1e1      	bne.n	800aeec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800af28:	bf00      	nop
 800af2a:	bf00      	nop
 800af2c:	3708      	adds	r7, #8
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	2000104c 	.word	0x2000104c
 800af38:	20001078 	.word	0x20001078
 800af3c:	20001060 	.word	0x20001060

0800af40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800af40:	b580      	push	{r7, lr}
 800af42:	b084      	sub	sp, #16
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d108      	bne.n	800af64 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af56:	4618      	mov	r0, r3
 800af58:	f000 ff8a 	bl	800be70 <vPortFree>
				vPortFree( pxTCB );
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 ff87 	bl	800be70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800af62:	e018      	b.n	800af96 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d103      	bne.n	800af76 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 ff7e 	bl	800be70 <vPortFree>
	}
 800af74:	e00f      	b.n	800af96 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800af7c:	2b02      	cmp	r3, #2
 800af7e:	d00a      	beq.n	800af96 <prvDeleteTCB+0x56>
	__asm volatile
 800af80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af84:	f383 8811 	msr	BASEPRI, r3
 800af88:	f3bf 8f6f 	isb	sy
 800af8c:	f3bf 8f4f 	dsb	sy
 800af90:	60fb      	str	r3, [r7, #12]
}
 800af92:	bf00      	nop
 800af94:	e7fe      	b.n	800af94 <prvDeleteTCB+0x54>
	}
 800af96:	bf00      	nop
 800af98:	3710      	adds	r7, #16
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}
	...

0800afa0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800afa0:	b480      	push	{r7}
 800afa2:	b083      	sub	sp, #12
 800afa4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800afa6:	4b0c      	ldr	r3, [pc, #48]	; (800afd8 <prvResetNextTaskUnblockTime+0x38>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d104      	bne.n	800afba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800afb0:	4b0a      	ldr	r3, [pc, #40]	; (800afdc <prvResetNextTaskUnblockTime+0x3c>)
 800afb2:	f04f 32ff 	mov.w	r2, #4294967295
 800afb6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800afb8:	e008      	b.n	800afcc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afba:	4b07      	ldr	r3, [pc, #28]	; (800afd8 <prvResetNextTaskUnblockTime+0x38>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	68db      	ldr	r3, [r3, #12]
 800afc0:	68db      	ldr	r3, [r3, #12]
 800afc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	4a04      	ldr	r2, [pc, #16]	; (800afdc <prvResetNextTaskUnblockTime+0x3c>)
 800afca:	6013      	str	r3, [r2, #0]
}
 800afcc:	bf00      	nop
 800afce:	370c      	adds	r7, #12
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr
 800afd8:	20001030 	.word	0x20001030
 800afdc:	20001098 	.word	0x20001098

0800afe0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800afe0:	b480      	push	{r7}
 800afe2:	b083      	sub	sp, #12
 800afe4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800afe6:	4b0b      	ldr	r3, [pc, #44]	; (800b014 <xTaskGetSchedulerState+0x34>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d102      	bne.n	800aff4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800afee:	2301      	movs	r3, #1
 800aff0:	607b      	str	r3, [r7, #4]
 800aff2:	e008      	b.n	800b006 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aff4:	4b08      	ldr	r3, [pc, #32]	; (800b018 <xTaskGetSchedulerState+0x38>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d102      	bne.n	800b002 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800affc:	2302      	movs	r3, #2
 800affe:	607b      	str	r3, [r7, #4]
 800b000:	e001      	b.n	800b006 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b002:	2300      	movs	r3, #0
 800b004:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b006:	687b      	ldr	r3, [r7, #4]
	}
 800b008:	4618      	mov	r0, r3
 800b00a:	370c      	adds	r7, #12
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr
 800b014:	20001084 	.word	0x20001084
 800b018:	200010a0 	.word	0x200010a0

0800b01c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b086      	sub	sp, #24
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b028:	2300      	movs	r3, #0
 800b02a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d056      	beq.n	800b0e0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b032:	4b2e      	ldr	r3, [pc, #184]	; (800b0ec <xTaskPriorityDisinherit+0xd0>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	693a      	ldr	r2, [r7, #16]
 800b038:	429a      	cmp	r2, r3
 800b03a:	d00a      	beq.n	800b052 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b040:	f383 8811 	msr	BASEPRI, r3
 800b044:	f3bf 8f6f 	isb	sy
 800b048:	f3bf 8f4f 	dsb	sy
 800b04c:	60fb      	str	r3, [r7, #12]
}
 800b04e:	bf00      	nop
 800b050:	e7fe      	b.n	800b050 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b056:	2b00      	cmp	r3, #0
 800b058:	d10a      	bne.n	800b070 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05e:	f383 8811 	msr	BASEPRI, r3
 800b062:	f3bf 8f6f 	isb	sy
 800b066:	f3bf 8f4f 	dsb	sy
 800b06a:	60bb      	str	r3, [r7, #8]
}
 800b06c:	bf00      	nop
 800b06e:	e7fe      	b.n	800b06e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b074:	1e5a      	subs	r2, r3, #1
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b082:	429a      	cmp	r2, r3
 800b084:	d02c      	beq.n	800b0e0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d128      	bne.n	800b0e0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	3304      	adds	r3, #4
 800b092:	4618      	mov	r0, r3
 800b094:	f7fe fc70 	bl	8009978 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0b0:	4b0f      	ldr	r3, [pc, #60]	; (800b0f0 <xTaskPriorityDisinherit+0xd4>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d903      	bls.n	800b0c0 <xTaskPriorityDisinherit+0xa4>
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0bc:	4a0c      	ldr	r2, [pc, #48]	; (800b0f0 <xTaskPriorityDisinherit+0xd4>)
 800b0be:	6013      	str	r3, [r2, #0]
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0c4:	4613      	mov	r3, r2
 800b0c6:	009b      	lsls	r3, r3, #2
 800b0c8:	4413      	add	r3, r2
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	4a09      	ldr	r2, [pc, #36]	; (800b0f4 <xTaskPriorityDisinherit+0xd8>)
 800b0ce:	441a      	add	r2, r3
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	3304      	adds	r3, #4
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	4610      	mov	r0, r2
 800b0d8:	f7fe fbf1 	bl	80098be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b0dc:	2301      	movs	r3, #1
 800b0de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b0e0:	697b      	ldr	r3, [r7, #20]
	}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3718      	adds	r7, #24
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
 800b0ea:	bf00      	nop
 800b0ec:	20000ba4 	.word	0x20000ba4
 800b0f0:	20001080 	.word	0x20001080
 800b0f4:	20000ba8 	.word	0x20000ba8

0800b0f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b102:	4b21      	ldr	r3, [pc, #132]	; (800b188 <prvAddCurrentTaskToDelayedList+0x90>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b108:	4b20      	ldr	r3, [pc, #128]	; (800b18c <prvAddCurrentTaskToDelayedList+0x94>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	3304      	adds	r3, #4
 800b10e:	4618      	mov	r0, r3
 800b110:	f7fe fc32 	bl	8009978 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b11a:	d10a      	bne.n	800b132 <prvAddCurrentTaskToDelayedList+0x3a>
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d007      	beq.n	800b132 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b122:	4b1a      	ldr	r3, [pc, #104]	; (800b18c <prvAddCurrentTaskToDelayedList+0x94>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	3304      	adds	r3, #4
 800b128:	4619      	mov	r1, r3
 800b12a:	4819      	ldr	r0, [pc, #100]	; (800b190 <prvAddCurrentTaskToDelayedList+0x98>)
 800b12c:	f7fe fbc7 	bl	80098be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b130:	e026      	b.n	800b180 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b132:	68fa      	ldr	r2, [r7, #12]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	4413      	add	r3, r2
 800b138:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b13a:	4b14      	ldr	r3, [pc, #80]	; (800b18c <prvAddCurrentTaskToDelayedList+0x94>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	68ba      	ldr	r2, [r7, #8]
 800b140:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b142:	68ba      	ldr	r2, [r7, #8]
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	429a      	cmp	r2, r3
 800b148:	d209      	bcs.n	800b15e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b14a:	4b12      	ldr	r3, [pc, #72]	; (800b194 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b14c:	681a      	ldr	r2, [r3, #0]
 800b14e:	4b0f      	ldr	r3, [pc, #60]	; (800b18c <prvAddCurrentTaskToDelayedList+0x94>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	3304      	adds	r3, #4
 800b154:	4619      	mov	r1, r3
 800b156:	4610      	mov	r0, r2
 800b158:	f7fe fbd5 	bl	8009906 <vListInsert>
}
 800b15c:	e010      	b.n	800b180 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b15e:	4b0e      	ldr	r3, [pc, #56]	; (800b198 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	4b0a      	ldr	r3, [pc, #40]	; (800b18c <prvAddCurrentTaskToDelayedList+0x94>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	3304      	adds	r3, #4
 800b168:	4619      	mov	r1, r3
 800b16a:	4610      	mov	r0, r2
 800b16c:	f7fe fbcb 	bl	8009906 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b170:	4b0a      	ldr	r3, [pc, #40]	; (800b19c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	68ba      	ldr	r2, [r7, #8]
 800b176:	429a      	cmp	r2, r3
 800b178:	d202      	bcs.n	800b180 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b17a:	4a08      	ldr	r2, [pc, #32]	; (800b19c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	6013      	str	r3, [r2, #0]
}
 800b180:	bf00      	nop
 800b182:	3710      	adds	r7, #16
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}
 800b188:	2000107c 	.word	0x2000107c
 800b18c:	20000ba4 	.word	0x20000ba4
 800b190:	20001064 	.word	0x20001064
 800b194:	20001034 	.word	0x20001034
 800b198:	20001030 	.word	0x20001030
 800b19c:	20001098 	.word	0x20001098

0800b1a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b08a      	sub	sp, #40	; 0x28
 800b1a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b1aa:	f000 fb07 	bl	800b7bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b1ae:	4b1c      	ldr	r3, [pc, #112]	; (800b220 <xTimerCreateTimerTask+0x80>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d021      	beq.n	800b1fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b1be:	1d3a      	adds	r2, r7, #4
 800b1c0:	f107 0108 	add.w	r1, r7, #8
 800b1c4:	f107 030c 	add.w	r3, r7, #12
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f7fe fb31 	bl	8009830 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b1ce:	6879      	ldr	r1, [r7, #4]
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	68fa      	ldr	r2, [r7, #12]
 800b1d4:	9202      	str	r2, [sp, #8]
 800b1d6:	9301      	str	r3, [sp, #4]
 800b1d8:	2302      	movs	r3, #2
 800b1da:	9300      	str	r3, [sp, #0]
 800b1dc:	2300      	movs	r3, #0
 800b1de:	460a      	mov	r2, r1
 800b1e0:	4910      	ldr	r1, [pc, #64]	; (800b224 <xTimerCreateTimerTask+0x84>)
 800b1e2:	4811      	ldr	r0, [pc, #68]	; (800b228 <xTimerCreateTimerTask+0x88>)
 800b1e4:	f7ff f8de 	bl	800a3a4 <xTaskCreateStatic>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	4a10      	ldr	r2, [pc, #64]	; (800b22c <xTimerCreateTimerTask+0x8c>)
 800b1ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b1ee:	4b0f      	ldr	r3, [pc, #60]	; (800b22c <xTimerCreateTimerTask+0x8c>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d001      	beq.n	800b1fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d10a      	bne.n	800b216 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b204:	f383 8811 	msr	BASEPRI, r3
 800b208:	f3bf 8f6f 	isb	sy
 800b20c:	f3bf 8f4f 	dsb	sy
 800b210:	613b      	str	r3, [r7, #16]
}
 800b212:	bf00      	nop
 800b214:	e7fe      	b.n	800b214 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b216:	697b      	ldr	r3, [r7, #20]
}
 800b218:	4618      	mov	r0, r3
 800b21a:	3718      	adds	r7, #24
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}
 800b220:	200010d4 	.word	0x200010d4
 800b224:	08011bb8 	.word	0x08011bb8
 800b228:	0800b365 	.word	0x0800b365
 800b22c:	200010d8 	.word	0x200010d8

0800b230 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b08a      	sub	sp, #40	; 0x28
 800b234:	af00      	add	r7, sp, #0
 800b236:	60f8      	str	r0, [r7, #12]
 800b238:	60b9      	str	r1, [r7, #8]
 800b23a:	607a      	str	r2, [r7, #4]
 800b23c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b23e:	2300      	movs	r3, #0
 800b240:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d10a      	bne.n	800b25e <xTimerGenericCommand+0x2e>
	__asm volatile
 800b248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24c:	f383 8811 	msr	BASEPRI, r3
 800b250:	f3bf 8f6f 	isb	sy
 800b254:	f3bf 8f4f 	dsb	sy
 800b258:	623b      	str	r3, [r7, #32]
}
 800b25a:	bf00      	nop
 800b25c:	e7fe      	b.n	800b25c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b25e:	4b1a      	ldr	r3, [pc, #104]	; (800b2c8 <xTimerGenericCommand+0x98>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d02a      	beq.n	800b2bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	2b05      	cmp	r3, #5
 800b276:	dc18      	bgt.n	800b2aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b278:	f7ff feb2 	bl	800afe0 <xTaskGetSchedulerState>
 800b27c:	4603      	mov	r3, r0
 800b27e:	2b02      	cmp	r3, #2
 800b280:	d109      	bne.n	800b296 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b282:	4b11      	ldr	r3, [pc, #68]	; (800b2c8 <xTimerGenericCommand+0x98>)
 800b284:	6818      	ldr	r0, [r3, #0]
 800b286:	f107 0110 	add.w	r1, r7, #16
 800b28a:	2300      	movs	r3, #0
 800b28c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b28e:	f7fe fca1 	bl	8009bd4 <xQueueGenericSend>
 800b292:	6278      	str	r0, [r7, #36]	; 0x24
 800b294:	e012      	b.n	800b2bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b296:	4b0c      	ldr	r3, [pc, #48]	; (800b2c8 <xTimerGenericCommand+0x98>)
 800b298:	6818      	ldr	r0, [r3, #0]
 800b29a:	f107 0110 	add.w	r1, r7, #16
 800b29e:	2300      	movs	r3, #0
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f7fe fc97 	bl	8009bd4 <xQueueGenericSend>
 800b2a6:	6278      	str	r0, [r7, #36]	; 0x24
 800b2a8:	e008      	b.n	800b2bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b2aa:	4b07      	ldr	r3, [pc, #28]	; (800b2c8 <xTimerGenericCommand+0x98>)
 800b2ac:	6818      	ldr	r0, [r3, #0]
 800b2ae:	f107 0110 	add.w	r1, r7, #16
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	683a      	ldr	r2, [r7, #0]
 800b2b6:	f7fe fd8b 	bl	8009dd0 <xQueueGenericSendFromISR>
 800b2ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3728      	adds	r7, #40	; 0x28
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	200010d4 	.word	0x200010d4

0800b2cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b088      	sub	sp, #32
 800b2d0:	af02      	add	r7, sp, #8
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2d6:	4b22      	ldr	r3, [pc, #136]	; (800b360 <prvProcessExpiredTimer+0x94>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	68db      	ldr	r3, [r3, #12]
 800b2dc:	68db      	ldr	r3, [r3, #12]
 800b2de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	3304      	adds	r3, #4
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f7fe fb47 	bl	8009978 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2f0:	f003 0304 	and.w	r3, r3, #4
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d022      	beq.n	800b33e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	699a      	ldr	r2, [r3, #24]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	18d1      	adds	r1, r2, r3
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	683a      	ldr	r2, [r7, #0]
 800b304:	6978      	ldr	r0, [r7, #20]
 800b306:	f000 f8d1 	bl	800b4ac <prvInsertTimerInActiveList>
 800b30a:	4603      	mov	r3, r0
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d01f      	beq.n	800b350 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b310:	2300      	movs	r3, #0
 800b312:	9300      	str	r3, [sp, #0]
 800b314:	2300      	movs	r3, #0
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	2100      	movs	r1, #0
 800b31a:	6978      	ldr	r0, [r7, #20]
 800b31c:	f7ff ff88 	bl	800b230 <xTimerGenericCommand>
 800b320:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d113      	bne.n	800b350 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b32c:	f383 8811 	msr	BASEPRI, r3
 800b330:	f3bf 8f6f 	isb	sy
 800b334:	f3bf 8f4f 	dsb	sy
 800b338:	60fb      	str	r3, [r7, #12]
}
 800b33a:	bf00      	nop
 800b33c:	e7fe      	b.n	800b33c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b344:	f023 0301 	bic.w	r3, r3, #1
 800b348:	b2da      	uxtb	r2, r3
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	6a1b      	ldr	r3, [r3, #32]
 800b354:	6978      	ldr	r0, [r7, #20]
 800b356:	4798      	blx	r3
}
 800b358:	bf00      	nop
 800b35a:	3718      	adds	r7, #24
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}
 800b360:	200010cc 	.word	0x200010cc

0800b364 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b084      	sub	sp, #16
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b36c:	f107 0308 	add.w	r3, r7, #8
 800b370:	4618      	mov	r0, r3
 800b372:	f000 f857 	bl	800b424 <prvGetNextExpireTime>
 800b376:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	4619      	mov	r1, r3
 800b37c:	68f8      	ldr	r0, [r7, #12]
 800b37e:	f000 f803 	bl	800b388 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b382:	f000 f8d5 	bl	800b530 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b386:	e7f1      	b.n	800b36c <prvTimerTask+0x8>

0800b388 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b084      	sub	sp, #16
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b392:	f7ff fa43 	bl	800a81c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b396:	f107 0308 	add.w	r3, r7, #8
 800b39a:	4618      	mov	r0, r3
 800b39c:	f000 f866 	bl	800b46c <prvSampleTimeNow>
 800b3a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d130      	bne.n	800b40a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d10a      	bne.n	800b3c4 <prvProcessTimerOrBlockTask+0x3c>
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d806      	bhi.n	800b3c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b3b6:	f7ff fa3f 	bl	800a838 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b3ba:	68f9      	ldr	r1, [r7, #12]
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f7ff ff85 	bl	800b2cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b3c2:	e024      	b.n	800b40e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d008      	beq.n	800b3dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b3ca:	4b13      	ldr	r3, [pc, #76]	; (800b418 <prvProcessTimerOrBlockTask+0x90>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d101      	bne.n	800b3d8 <prvProcessTimerOrBlockTask+0x50>
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	e000      	b.n	800b3da <prvProcessTimerOrBlockTask+0x52>
 800b3d8:	2300      	movs	r3, #0
 800b3da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b3dc:	4b0f      	ldr	r3, [pc, #60]	; (800b41c <prvProcessTimerOrBlockTask+0x94>)
 800b3de:	6818      	ldr	r0, [r3, #0]
 800b3e0:	687a      	ldr	r2, [r7, #4]
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	1ad3      	subs	r3, r2, r3
 800b3e6:	683a      	ldr	r2, [r7, #0]
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	f7fe ffa7 	bl	800a33c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b3ee:	f7ff fa23 	bl	800a838 <xTaskResumeAll>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d10a      	bne.n	800b40e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b3f8:	4b09      	ldr	r3, [pc, #36]	; (800b420 <prvProcessTimerOrBlockTask+0x98>)
 800b3fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3fe:	601a      	str	r2, [r3, #0]
 800b400:	f3bf 8f4f 	dsb	sy
 800b404:	f3bf 8f6f 	isb	sy
}
 800b408:	e001      	b.n	800b40e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b40a:	f7ff fa15 	bl	800a838 <xTaskResumeAll>
}
 800b40e:	bf00      	nop
 800b410:	3710      	adds	r7, #16
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
 800b416:	bf00      	nop
 800b418:	200010d0 	.word	0x200010d0
 800b41c:	200010d4 	.word	0x200010d4
 800b420:	e000ed04 	.word	0xe000ed04

0800b424 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b424:	b480      	push	{r7}
 800b426:	b085      	sub	sp, #20
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b42c:	4b0e      	ldr	r3, [pc, #56]	; (800b468 <prvGetNextExpireTime+0x44>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d101      	bne.n	800b43a <prvGetNextExpireTime+0x16>
 800b436:	2201      	movs	r2, #1
 800b438:	e000      	b.n	800b43c <prvGetNextExpireTime+0x18>
 800b43a:	2200      	movs	r2, #0
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d105      	bne.n	800b454 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b448:	4b07      	ldr	r3, [pc, #28]	; (800b468 <prvGetNextExpireTime+0x44>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	68db      	ldr	r3, [r3, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	60fb      	str	r3, [r7, #12]
 800b452:	e001      	b.n	800b458 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b454:	2300      	movs	r3, #0
 800b456:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b458:	68fb      	ldr	r3, [r7, #12]
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3714      	adds	r7, #20
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr
 800b466:	bf00      	nop
 800b468:	200010cc 	.word	0x200010cc

0800b46c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b474:	f7ff fa7e 	bl	800a974 <xTaskGetTickCount>
 800b478:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b47a:	4b0b      	ldr	r3, [pc, #44]	; (800b4a8 <prvSampleTimeNow+0x3c>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	68fa      	ldr	r2, [r7, #12]
 800b480:	429a      	cmp	r2, r3
 800b482:	d205      	bcs.n	800b490 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b484:	f000 f936 	bl	800b6f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2201      	movs	r2, #1
 800b48c:	601a      	str	r2, [r3, #0]
 800b48e:	e002      	b.n	800b496 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2200      	movs	r2, #0
 800b494:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b496:	4a04      	ldr	r2, [pc, #16]	; (800b4a8 <prvSampleTimeNow+0x3c>)
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b49c:	68fb      	ldr	r3, [r7, #12]
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3710      	adds	r7, #16
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
 800b4a6:	bf00      	nop
 800b4a8:	200010dc 	.word	0x200010dc

0800b4ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b086      	sub	sp, #24
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	60f8      	str	r0, [r7, #12]
 800b4b4:	60b9      	str	r1, [r7, #8]
 800b4b6:	607a      	str	r2, [r7, #4]
 800b4b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	68ba      	ldr	r2, [r7, #8]
 800b4c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	68fa      	ldr	r2, [r7, #12]
 800b4c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b4ca:	68ba      	ldr	r2, [r7, #8]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	429a      	cmp	r2, r3
 800b4d0:	d812      	bhi.n	800b4f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4d2:	687a      	ldr	r2, [r7, #4]
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	1ad2      	subs	r2, r2, r3
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	699b      	ldr	r3, [r3, #24]
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d302      	bcc.n	800b4e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	617b      	str	r3, [r7, #20]
 800b4e4:	e01b      	b.n	800b51e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b4e6:	4b10      	ldr	r3, [pc, #64]	; (800b528 <prvInsertTimerInActiveList+0x7c>)
 800b4e8:	681a      	ldr	r2, [r3, #0]
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	3304      	adds	r3, #4
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	4610      	mov	r0, r2
 800b4f2:	f7fe fa08 	bl	8009906 <vListInsert>
 800b4f6:	e012      	b.n	800b51e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b4f8:	687a      	ldr	r2, [r7, #4]
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d206      	bcs.n	800b50e <prvInsertTimerInActiveList+0x62>
 800b500:	68ba      	ldr	r2, [r7, #8]
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	429a      	cmp	r2, r3
 800b506:	d302      	bcc.n	800b50e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b508:	2301      	movs	r3, #1
 800b50a:	617b      	str	r3, [r7, #20]
 800b50c:	e007      	b.n	800b51e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b50e:	4b07      	ldr	r3, [pc, #28]	; (800b52c <prvInsertTimerInActiveList+0x80>)
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	3304      	adds	r3, #4
 800b516:	4619      	mov	r1, r3
 800b518:	4610      	mov	r0, r2
 800b51a:	f7fe f9f4 	bl	8009906 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b51e:	697b      	ldr	r3, [r7, #20]
}
 800b520:	4618      	mov	r0, r3
 800b522:	3718      	adds	r7, #24
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}
 800b528:	200010d0 	.word	0x200010d0
 800b52c:	200010cc 	.word	0x200010cc

0800b530 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b08e      	sub	sp, #56	; 0x38
 800b534:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b536:	e0ca      	b.n	800b6ce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	da18      	bge.n	800b570 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b53e:	1d3b      	adds	r3, r7, #4
 800b540:	3304      	adds	r3, #4
 800b542:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b546:	2b00      	cmp	r3, #0
 800b548:	d10a      	bne.n	800b560 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b54e:	f383 8811 	msr	BASEPRI, r3
 800b552:	f3bf 8f6f 	isb	sy
 800b556:	f3bf 8f4f 	dsb	sy
 800b55a:	61fb      	str	r3, [r7, #28]
}
 800b55c:	bf00      	nop
 800b55e:	e7fe      	b.n	800b55e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b566:	6850      	ldr	r0, [r2, #4]
 800b568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b56a:	6892      	ldr	r2, [r2, #8]
 800b56c:	4611      	mov	r1, r2
 800b56e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2b00      	cmp	r3, #0
 800b574:	f2c0 80aa 	blt.w	800b6cc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b57e:	695b      	ldr	r3, [r3, #20]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d004      	beq.n	800b58e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b586:	3304      	adds	r3, #4
 800b588:	4618      	mov	r0, r3
 800b58a:	f7fe f9f5 	bl	8009978 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b58e:	463b      	mov	r3, r7
 800b590:	4618      	mov	r0, r3
 800b592:	f7ff ff6b 	bl	800b46c <prvSampleTimeNow>
 800b596:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2b09      	cmp	r3, #9
 800b59c:	f200 8097 	bhi.w	800b6ce <prvProcessReceivedCommands+0x19e>
 800b5a0:	a201      	add	r2, pc, #4	; (adr r2, 800b5a8 <prvProcessReceivedCommands+0x78>)
 800b5a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5a6:	bf00      	nop
 800b5a8:	0800b5d1 	.word	0x0800b5d1
 800b5ac:	0800b5d1 	.word	0x0800b5d1
 800b5b0:	0800b5d1 	.word	0x0800b5d1
 800b5b4:	0800b645 	.word	0x0800b645
 800b5b8:	0800b659 	.word	0x0800b659
 800b5bc:	0800b6a3 	.word	0x0800b6a3
 800b5c0:	0800b5d1 	.word	0x0800b5d1
 800b5c4:	0800b5d1 	.word	0x0800b5d1
 800b5c8:	0800b645 	.word	0x0800b645
 800b5cc:	0800b659 	.word	0x0800b659
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5d6:	f043 0301 	orr.w	r3, r3, #1
 800b5da:	b2da      	uxtb	r2, r3
 800b5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b5e2:	68ba      	ldr	r2, [r7, #8]
 800b5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e6:	699b      	ldr	r3, [r3, #24]
 800b5e8:	18d1      	adds	r1, r2, r3
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5f0:	f7ff ff5c 	bl	800b4ac <prvInsertTimerInActiveList>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d069      	beq.n	800b6ce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5fc:	6a1b      	ldr	r3, [r3, #32]
 800b5fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b600:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b604:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b608:	f003 0304 	and.w	r3, r3, #4
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d05e      	beq.n	800b6ce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b610:	68ba      	ldr	r2, [r7, #8]
 800b612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b614:	699b      	ldr	r3, [r3, #24]
 800b616:	441a      	add	r2, r3
 800b618:	2300      	movs	r3, #0
 800b61a:	9300      	str	r3, [sp, #0]
 800b61c:	2300      	movs	r3, #0
 800b61e:	2100      	movs	r1, #0
 800b620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b622:	f7ff fe05 	bl	800b230 <xTimerGenericCommand>
 800b626:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b628:	6a3b      	ldr	r3, [r7, #32]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d14f      	bne.n	800b6ce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b632:	f383 8811 	msr	BASEPRI, r3
 800b636:	f3bf 8f6f 	isb	sy
 800b63a:	f3bf 8f4f 	dsb	sy
 800b63e:	61bb      	str	r3, [r7, #24]
}
 800b640:	bf00      	nop
 800b642:	e7fe      	b.n	800b642 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b646:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b64a:	f023 0301 	bic.w	r3, r3, #1
 800b64e:	b2da      	uxtb	r2, r3
 800b650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b652:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b656:	e03a      	b.n	800b6ce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b65e:	f043 0301 	orr.w	r3, r3, #1
 800b662:	b2da      	uxtb	r2, r3
 800b664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b666:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b66a:	68ba      	ldr	r2, [r7, #8]
 800b66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b66e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b672:	699b      	ldr	r3, [r3, #24]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d10a      	bne.n	800b68e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b67c:	f383 8811 	msr	BASEPRI, r3
 800b680:	f3bf 8f6f 	isb	sy
 800b684:	f3bf 8f4f 	dsb	sy
 800b688:	617b      	str	r3, [r7, #20]
}
 800b68a:	bf00      	nop
 800b68c:	e7fe      	b.n	800b68c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b690:	699a      	ldr	r2, [r3, #24]
 800b692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b694:	18d1      	adds	r1, r2, r3
 800b696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b69a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b69c:	f7ff ff06 	bl	800b4ac <prvInsertTimerInActiveList>
					break;
 800b6a0:	e015      	b.n	800b6ce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6a8:	f003 0302 	and.w	r3, r3, #2
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d103      	bne.n	800b6b8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b6b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6b2:	f000 fbdd 	bl	800be70 <vPortFree>
 800b6b6:	e00a      	b.n	800b6ce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6be:	f023 0301 	bic.w	r3, r3, #1
 800b6c2:	b2da      	uxtb	r2, r3
 800b6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b6ca:	e000      	b.n	800b6ce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b6cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b6ce:	4b08      	ldr	r3, [pc, #32]	; (800b6f0 <prvProcessReceivedCommands+0x1c0>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	1d39      	adds	r1, r7, #4
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f7fe fc16 	bl	8009f08 <xQueueReceive>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	f47f af2a 	bne.w	800b538 <prvProcessReceivedCommands+0x8>
	}
}
 800b6e4:	bf00      	nop
 800b6e6:	bf00      	nop
 800b6e8:	3730      	adds	r7, #48	; 0x30
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	200010d4 	.word	0x200010d4

0800b6f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b088      	sub	sp, #32
 800b6f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b6fa:	e048      	b.n	800b78e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b6fc:	4b2d      	ldr	r3, [pc, #180]	; (800b7b4 <prvSwitchTimerLists+0xc0>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	68db      	ldr	r3, [r3, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b706:	4b2b      	ldr	r3, [pc, #172]	; (800b7b4 <prvSwitchTimerLists+0xc0>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	68db      	ldr	r3, [r3, #12]
 800b70c:	68db      	ldr	r3, [r3, #12]
 800b70e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	3304      	adds	r3, #4
 800b714:	4618      	mov	r0, r3
 800b716:	f7fe f92f 	bl	8009978 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	6a1b      	ldr	r3, [r3, #32]
 800b71e:	68f8      	ldr	r0, [r7, #12]
 800b720:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b728:	f003 0304 	and.w	r3, r3, #4
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d02e      	beq.n	800b78e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	699b      	ldr	r3, [r3, #24]
 800b734:	693a      	ldr	r2, [r7, #16]
 800b736:	4413      	add	r3, r2
 800b738:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b73a:	68ba      	ldr	r2, [r7, #8]
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	429a      	cmp	r2, r3
 800b740:	d90e      	bls.n	800b760 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	68ba      	ldr	r2, [r7, #8]
 800b746:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	68fa      	ldr	r2, [r7, #12]
 800b74c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b74e:	4b19      	ldr	r3, [pc, #100]	; (800b7b4 <prvSwitchTimerLists+0xc0>)
 800b750:	681a      	ldr	r2, [r3, #0]
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	3304      	adds	r3, #4
 800b756:	4619      	mov	r1, r3
 800b758:	4610      	mov	r0, r2
 800b75a:	f7fe f8d4 	bl	8009906 <vListInsert>
 800b75e:	e016      	b.n	800b78e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b760:	2300      	movs	r3, #0
 800b762:	9300      	str	r3, [sp, #0]
 800b764:	2300      	movs	r3, #0
 800b766:	693a      	ldr	r2, [r7, #16]
 800b768:	2100      	movs	r1, #0
 800b76a:	68f8      	ldr	r0, [r7, #12]
 800b76c:	f7ff fd60 	bl	800b230 <xTimerGenericCommand>
 800b770:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d10a      	bne.n	800b78e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77c:	f383 8811 	msr	BASEPRI, r3
 800b780:	f3bf 8f6f 	isb	sy
 800b784:	f3bf 8f4f 	dsb	sy
 800b788:	603b      	str	r3, [r7, #0]
}
 800b78a:	bf00      	nop
 800b78c:	e7fe      	b.n	800b78c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b78e:	4b09      	ldr	r3, [pc, #36]	; (800b7b4 <prvSwitchTimerLists+0xc0>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d1b1      	bne.n	800b6fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b798:	4b06      	ldr	r3, [pc, #24]	; (800b7b4 <prvSwitchTimerLists+0xc0>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b79e:	4b06      	ldr	r3, [pc, #24]	; (800b7b8 <prvSwitchTimerLists+0xc4>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	4a04      	ldr	r2, [pc, #16]	; (800b7b4 <prvSwitchTimerLists+0xc0>)
 800b7a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b7a6:	4a04      	ldr	r2, [pc, #16]	; (800b7b8 <prvSwitchTimerLists+0xc4>)
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	6013      	str	r3, [r2, #0]
}
 800b7ac:	bf00      	nop
 800b7ae:	3718      	adds	r7, #24
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}
 800b7b4:	200010cc 	.word	0x200010cc
 800b7b8:	200010d0 	.word	0x200010d0

0800b7bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b082      	sub	sp, #8
 800b7c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b7c2:	f000 f967 	bl	800ba94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b7c6:	4b15      	ldr	r3, [pc, #84]	; (800b81c <prvCheckForValidListAndQueue+0x60>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d120      	bne.n	800b810 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b7ce:	4814      	ldr	r0, [pc, #80]	; (800b820 <prvCheckForValidListAndQueue+0x64>)
 800b7d0:	f7fe f848 	bl	8009864 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b7d4:	4813      	ldr	r0, [pc, #76]	; (800b824 <prvCheckForValidListAndQueue+0x68>)
 800b7d6:	f7fe f845 	bl	8009864 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b7da:	4b13      	ldr	r3, [pc, #76]	; (800b828 <prvCheckForValidListAndQueue+0x6c>)
 800b7dc:	4a10      	ldr	r2, [pc, #64]	; (800b820 <prvCheckForValidListAndQueue+0x64>)
 800b7de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b7e0:	4b12      	ldr	r3, [pc, #72]	; (800b82c <prvCheckForValidListAndQueue+0x70>)
 800b7e2:	4a10      	ldr	r2, [pc, #64]	; (800b824 <prvCheckForValidListAndQueue+0x68>)
 800b7e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	9300      	str	r3, [sp, #0]
 800b7ea:	4b11      	ldr	r3, [pc, #68]	; (800b830 <prvCheckForValidListAndQueue+0x74>)
 800b7ec:	4a11      	ldr	r2, [pc, #68]	; (800b834 <prvCheckForValidListAndQueue+0x78>)
 800b7ee:	2110      	movs	r1, #16
 800b7f0:	200a      	movs	r0, #10
 800b7f2:	f7fe f953 	bl	8009a9c <xQueueGenericCreateStatic>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	4a08      	ldr	r2, [pc, #32]	; (800b81c <prvCheckForValidListAndQueue+0x60>)
 800b7fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b7fc:	4b07      	ldr	r3, [pc, #28]	; (800b81c <prvCheckForValidListAndQueue+0x60>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d005      	beq.n	800b810 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b804:	4b05      	ldr	r3, [pc, #20]	; (800b81c <prvCheckForValidListAndQueue+0x60>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	490b      	ldr	r1, [pc, #44]	; (800b838 <prvCheckForValidListAndQueue+0x7c>)
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7fe fd6c 	bl	800a2e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b810:	f000 f970 	bl	800baf4 <vPortExitCritical>
}
 800b814:	bf00      	nop
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	200010d4 	.word	0x200010d4
 800b820:	200010a4 	.word	0x200010a4
 800b824:	200010b8 	.word	0x200010b8
 800b828:	200010cc 	.word	0x200010cc
 800b82c:	200010d0 	.word	0x200010d0
 800b830:	20001180 	.word	0x20001180
 800b834:	200010e0 	.word	0x200010e0
 800b838:	08011bc0 	.word	0x08011bc0

0800b83c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b83c:	b480      	push	{r7}
 800b83e:	b085      	sub	sp, #20
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	60b9      	str	r1, [r7, #8]
 800b846:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	3b04      	subs	r3, #4
 800b84c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b854:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	3b04      	subs	r3, #4
 800b85a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	f023 0201 	bic.w	r2, r3, #1
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	3b04      	subs	r3, #4
 800b86a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b86c:	4a0c      	ldr	r2, [pc, #48]	; (800b8a0 <pxPortInitialiseStack+0x64>)
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	3b14      	subs	r3, #20
 800b876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b878:	687a      	ldr	r2, [r7, #4]
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	3b04      	subs	r3, #4
 800b882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	f06f 0202 	mvn.w	r2, #2
 800b88a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	3b20      	subs	r3, #32
 800b890:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b892:	68fb      	ldr	r3, [r7, #12]
}
 800b894:	4618      	mov	r0, r3
 800b896:	3714      	adds	r7, #20
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr
 800b8a0:	0800b8a5 	.word	0x0800b8a5

0800b8a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b085      	sub	sp, #20
 800b8a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b8ae:	4b12      	ldr	r3, [pc, #72]	; (800b8f8 <prvTaskExitError+0x54>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8b6:	d00a      	beq.n	800b8ce <prvTaskExitError+0x2a>
	__asm volatile
 800b8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8bc:	f383 8811 	msr	BASEPRI, r3
 800b8c0:	f3bf 8f6f 	isb	sy
 800b8c4:	f3bf 8f4f 	dsb	sy
 800b8c8:	60fb      	str	r3, [r7, #12]
}
 800b8ca:	bf00      	nop
 800b8cc:	e7fe      	b.n	800b8cc <prvTaskExitError+0x28>
	__asm volatile
 800b8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d2:	f383 8811 	msr	BASEPRI, r3
 800b8d6:	f3bf 8f6f 	isb	sy
 800b8da:	f3bf 8f4f 	dsb	sy
 800b8de:	60bb      	str	r3, [r7, #8]
}
 800b8e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b8e2:	bf00      	nop
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d0fc      	beq.n	800b8e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b8ea:	bf00      	nop
 800b8ec:	bf00      	nop
 800b8ee:	3714      	adds	r7, #20
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr
 800b8f8:	20000078 	.word	0x20000078
 800b8fc:	00000000 	.word	0x00000000

0800b900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b900:	4b07      	ldr	r3, [pc, #28]	; (800b920 <pxCurrentTCBConst2>)
 800b902:	6819      	ldr	r1, [r3, #0]
 800b904:	6808      	ldr	r0, [r1, #0]
 800b906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b90a:	f380 8809 	msr	PSP, r0
 800b90e:	f3bf 8f6f 	isb	sy
 800b912:	f04f 0000 	mov.w	r0, #0
 800b916:	f380 8811 	msr	BASEPRI, r0
 800b91a:	4770      	bx	lr
 800b91c:	f3af 8000 	nop.w

0800b920 <pxCurrentTCBConst2>:
 800b920:	20000ba4 	.word	0x20000ba4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b924:	bf00      	nop
 800b926:	bf00      	nop

0800b928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b928:	4808      	ldr	r0, [pc, #32]	; (800b94c <prvPortStartFirstTask+0x24>)
 800b92a:	6800      	ldr	r0, [r0, #0]
 800b92c:	6800      	ldr	r0, [r0, #0]
 800b92e:	f380 8808 	msr	MSP, r0
 800b932:	f04f 0000 	mov.w	r0, #0
 800b936:	f380 8814 	msr	CONTROL, r0
 800b93a:	b662      	cpsie	i
 800b93c:	b661      	cpsie	f
 800b93e:	f3bf 8f4f 	dsb	sy
 800b942:	f3bf 8f6f 	isb	sy
 800b946:	df00      	svc	0
 800b948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b94a:	bf00      	nop
 800b94c:	e000ed08 	.word	0xe000ed08

0800b950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b086      	sub	sp, #24
 800b954:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b956:	4b46      	ldr	r3, [pc, #280]	; (800ba70 <xPortStartScheduler+0x120>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4a46      	ldr	r2, [pc, #280]	; (800ba74 <xPortStartScheduler+0x124>)
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d10a      	bne.n	800b976 <xPortStartScheduler+0x26>
	__asm volatile
 800b960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b964:	f383 8811 	msr	BASEPRI, r3
 800b968:	f3bf 8f6f 	isb	sy
 800b96c:	f3bf 8f4f 	dsb	sy
 800b970:	613b      	str	r3, [r7, #16]
}
 800b972:	bf00      	nop
 800b974:	e7fe      	b.n	800b974 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b976:	4b3e      	ldr	r3, [pc, #248]	; (800ba70 <xPortStartScheduler+0x120>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4a3f      	ldr	r2, [pc, #252]	; (800ba78 <xPortStartScheduler+0x128>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d10a      	bne.n	800b996 <xPortStartScheduler+0x46>
	__asm volatile
 800b980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b984:	f383 8811 	msr	BASEPRI, r3
 800b988:	f3bf 8f6f 	isb	sy
 800b98c:	f3bf 8f4f 	dsb	sy
 800b990:	60fb      	str	r3, [r7, #12]
}
 800b992:	bf00      	nop
 800b994:	e7fe      	b.n	800b994 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b996:	4b39      	ldr	r3, [pc, #228]	; (800ba7c <xPortStartScheduler+0x12c>)
 800b998:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	781b      	ldrb	r3, [r3, #0]
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	22ff      	movs	r2, #255	; 0xff
 800b9a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	781b      	ldrb	r3, [r3, #0]
 800b9ac:	b2db      	uxtb	r3, r3
 800b9ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b9b0:	78fb      	ldrb	r3, [r7, #3]
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b9b8:	b2da      	uxtb	r2, r3
 800b9ba:	4b31      	ldr	r3, [pc, #196]	; (800ba80 <xPortStartScheduler+0x130>)
 800b9bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b9be:	4b31      	ldr	r3, [pc, #196]	; (800ba84 <xPortStartScheduler+0x134>)
 800b9c0:	2207      	movs	r2, #7
 800b9c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b9c4:	e009      	b.n	800b9da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b9c6:	4b2f      	ldr	r3, [pc, #188]	; (800ba84 <xPortStartScheduler+0x134>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	3b01      	subs	r3, #1
 800b9cc:	4a2d      	ldr	r2, [pc, #180]	; (800ba84 <xPortStartScheduler+0x134>)
 800b9ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b9d0:	78fb      	ldrb	r3, [r7, #3]
 800b9d2:	b2db      	uxtb	r3, r3
 800b9d4:	005b      	lsls	r3, r3, #1
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b9da:	78fb      	ldrb	r3, [r7, #3]
 800b9dc:	b2db      	uxtb	r3, r3
 800b9de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9e2:	2b80      	cmp	r3, #128	; 0x80
 800b9e4:	d0ef      	beq.n	800b9c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b9e6:	4b27      	ldr	r3, [pc, #156]	; (800ba84 <xPortStartScheduler+0x134>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f1c3 0307 	rsb	r3, r3, #7
 800b9ee:	2b04      	cmp	r3, #4
 800b9f0:	d00a      	beq.n	800ba08 <xPortStartScheduler+0xb8>
	__asm volatile
 800b9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f6:	f383 8811 	msr	BASEPRI, r3
 800b9fa:	f3bf 8f6f 	isb	sy
 800b9fe:	f3bf 8f4f 	dsb	sy
 800ba02:	60bb      	str	r3, [r7, #8]
}
 800ba04:	bf00      	nop
 800ba06:	e7fe      	b.n	800ba06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ba08:	4b1e      	ldr	r3, [pc, #120]	; (800ba84 <xPortStartScheduler+0x134>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	021b      	lsls	r3, r3, #8
 800ba0e:	4a1d      	ldr	r2, [pc, #116]	; (800ba84 <xPortStartScheduler+0x134>)
 800ba10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ba12:	4b1c      	ldr	r3, [pc, #112]	; (800ba84 <xPortStartScheduler+0x134>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ba1a:	4a1a      	ldr	r2, [pc, #104]	; (800ba84 <xPortStartScheduler+0x134>)
 800ba1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	b2da      	uxtb	r2, r3
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ba26:	4b18      	ldr	r3, [pc, #96]	; (800ba88 <xPortStartScheduler+0x138>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4a17      	ldr	r2, [pc, #92]	; (800ba88 <xPortStartScheduler+0x138>)
 800ba2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ba30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ba32:	4b15      	ldr	r3, [pc, #84]	; (800ba88 <xPortStartScheduler+0x138>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4a14      	ldr	r2, [pc, #80]	; (800ba88 <xPortStartScheduler+0x138>)
 800ba38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ba3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ba3e:	f000 f8dd 	bl	800bbfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ba42:	4b12      	ldr	r3, [pc, #72]	; (800ba8c <xPortStartScheduler+0x13c>)
 800ba44:	2200      	movs	r2, #0
 800ba46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ba48:	f000 f8fc 	bl	800bc44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ba4c:	4b10      	ldr	r3, [pc, #64]	; (800ba90 <xPortStartScheduler+0x140>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4a0f      	ldr	r2, [pc, #60]	; (800ba90 <xPortStartScheduler+0x140>)
 800ba52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ba56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ba58:	f7ff ff66 	bl	800b928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ba5c:	f7ff f854 	bl	800ab08 <vTaskSwitchContext>
	prvTaskExitError();
 800ba60:	f7ff ff20 	bl	800b8a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ba64:	2300      	movs	r3, #0
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3718      	adds	r7, #24
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
 800ba6e:	bf00      	nop
 800ba70:	e000ed00 	.word	0xe000ed00
 800ba74:	410fc271 	.word	0x410fc271
 800ba78:	410fc270 	.word	0x410fc270
 800ba7c:	e000e400 	.word	0xe000e400
 800ba80:	200011d0 	.word	0x200011d0
 800ba84:	200011d4 	.word	0x200011d4
 800ba88:	e000ed20 	.word	0xe000ed20
 800ba8c:	20000078 	.word	0x20000078
 800ba90:	e000ef34 	.word	0xe000ef34

0800ba94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ba94:	b480      	push	{r7}
 800ba96:	b083      	sub	sp, #12
 800ba98:	af00      	add	r7, sp, #0
	__asm volatile
 800ba9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9e:	f383 8811 	msr	BASEPRI, r3
 800baa2:	f3bf 8f6f 	isb	sy
 800baa6:	f3bf 8f4f 	dsb	sy
 800baaa:	607b      	str	r3, [r7, #4]
}
 800baac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800baae:	4b0f      	ldr	r3, [pc, #60]	; (800baec <vPortEnterCritical+0x58>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	3301      	adds	r3, #1
 800bab4:	4a0d      	ldr	r2, [pc, #52]	; (800baec <vPortEnterCritical+0x58>)
 800bab6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bab8:	4b0c      	ldr	r3, [pc, #48]	; (800baec <vPortEnterCritical+0x58>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	2b01      	cmp	r3, #1
 800babe:	d10f      	bne.n	800bae0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bac0:	4b0b      	ldr	r3, [pc, #44]	; (800baf0 <vPortEnterCritical+0x5c>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	b2db      	uxtb	r3, r3
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d00a      	beq.n	800bae0 <vPortEnterCritical+0x4c>
	__asm volatile
 800baca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bace:	f383 8811 	msr	BASEPRI, r3
 800bad2:	f3bf 8f6f 	isb	sy
 800bad6:	f3bf 8f4f 	dsb	sy
 800bada:	603b      	str	r3, [r7, #0]
}
 800badc:	bf00      	nop
 800bade:	e7fe      	b.n	800bade <vPortEnterCritical+0x4a>
	}
}
 800bae0:	bf00      	nop
 800bae2:	370c      	adds	r7, #12
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr
 800baec:	20000078 	.word	0x20000078
 800baf0:	e000ed04 	.word	0xe000ed04

0800baf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800baf4:	b480      	push	{r7}
 800baf6:	b083      	sub	sp, #12
 800baf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bafa:	4b12      	ldr	r3, [pc, #72]	; (800bb44 <vPortExitCritical+0x50>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d10a      	bne.n	800bb18 <vPortExitCritical+0x24>
	__asm volatile
 800bb02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb06:	f383 8811 	msr	BASEPRI, r3
 800bb0a:	f3bf 8f6f 	isb	sy
 800bb0e:	f3bf 8f4f 	dsb	sy
 800bb12:	607b      	str	r3, [r7, #4]
}
 800bb14:	bf00      	nop
 800bb16:	e7fe      	b.n	800bb16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bb18:	4b0a      	ldr	r3, [pc, #40]	; (800bb44 <vPortExitCritical+0x50>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	3b01      	subs	r3, #1
 800bb1e:	4a09      	ldr	r2, [pc, #36]	; (800bb44 <vPortExitCritical+0x50>)
 800bb20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bb22:	4b08      	ldr	r3, [pc, #32]	; (800bb44 <vPortExitCritical+0x50>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d105      	bne.n	800bb36 <vPortExitCritical+0x42>
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	f383 8811 	msr	BASEPRI, r3
}
 800bb34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bb36:	bf00      	nop
 800bb38:	370c      	adds	r7, #12
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr
 800bb42:	bf00      	nop
 800bb44:	20000078 	.word	0x20000078
	...

0800bb50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bb50:	f3ef 8009 	mrs	r0, PSP
 800bb54:	f3bf 8f6f 	isb	sy
 800bb58:	4b15      	ldr	r3, [pc, #84]	; (800bbb0 <pxCurrentTCBConst>)
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	f01e 0f10 	tst.w	lr, #16
 800bb60:	bf08      	it	eq
 800bb62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bb66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb6a:	6010      	str	r0, [r2, #0]
 800bb6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bb70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bb74:	f380 8811 	msr	BASEPRI, r0
 800bb78:	f3bf 8f4f 	dsb	sy
 800bb7c:	f3bf 8f6f 	isb	sy
 800bb80:	f7fe ffc2 	bl	800ab08 <vTaskSwitchContext>
 800bb84:	f04f 0000 	mov.w	r0, #0
 800bb88:	f380 8811 	msr	BASEPRI, r0
 800bb8c:	bc09      	pop	{r0, r3}
 800bb8e:	6819      	ldr	r1, [r3, #0]
 800bb90:	6808      	ldr	r0, [r1, #0]
 800bb92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb96:	f01e 0f10 	tst.w	lr, #16
 800bb9a:	bf08      	it	eq
 800bb9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bba0:	f380 8809 	msr	PSP, r0
 800bba4:	f3bf 8f6f 	isb	sy
 800bba8:	4770      	bx	lr
 800bbaa:	bf00      	nop
 800bbac:	f3af 8000 	nop.w

0800bbb0 <pxCurrentTCBConst>:
 800bbb0:	20000ba4 	.word	0x20000ba4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bbb4:	bf00      	nop
 800bbb6:	bf00      	nop

0800bbb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b082      	sub	sp, #8
 800bbbc:	af00      	add	r7, sp, #0
	__asm volatile
 800bbbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc2:	f383 8811 	msr	BASEPRI, r3
 800bbc6:	f3bf 8f6f 	isb	sy
 800bbca:	f3bf 8f4f 	dsb	sy
 800bbce:	607b      	str	r3, [r7, #4]
}
 800bbd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bbd2:	f7fe fedf 	bl	800a994 <xTaskIncrementTick>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d003      	beq.n	800bbe4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bbdc:	4b06      	ldr	r3, [pc, #24]	; (800bbf8 <xPortSysTickHandler+0x40>)
 800bbde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbe2:	601a      	str	r2, [r3, #0]
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	f383 8811 	msr	BASEPRI, r3
}
 800bbee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bbf0:	bf00      	nop
 800bbf2:	3708      	adds	r7, #8
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	e000ed04 	.word	0xe000ed04

0800bbfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bc00:	4b0b      	ldr	r3, [pc, #44]	; (800bc30 <vPortSetupTimerInterrupt+0x34>)
 800bc02:	2200      	movs	r2, #0
 800bc04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bc06:	4b0b      	ldr	r3, [pc, #44]	; (800bc34 <vPortSetupTimerInterrupt+0x38>)
 800bc08:	2200      	movs	r2, #0
 800bc0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bc0c:	4b0a      	ldr	r3, [pc, #40]	; (800bc38 <vPortSetupTimerInterrupt+0x3c>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4a0a      	ldr	r2, [pc, #40]	; (800bc3c <vPortSetupTimerInterrupt+0x40>)
 800bc12:	fba2 2303 	umull	r2, r3, r2, r3
 800bc16:	099b      	lsrs	r3, r3, #6
 800bc18:	4a09      	ldr	r2, [pc, #36]	; (800bc40 <vPortSetupTimerInterrupt+0x44>)
 800bc1a:	3b01      	subs	r3, #1
 800bc1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bc1e:	4b04      	ldr	r3, [pc, #16]	; (800bc30 <vPortSetupTimerInterrupt+0x34>)
 800bc20:	2207      	movs	r2, #7
 800bc22:	601a      	str	r2, [r3, #0]
}
 800bc24:	bf00      	nop
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr
 800bc2e:	bf00      	nop
 800bc30:	e000e010 	.word	0xe000e010
 800bc34:	e000e018 	.word	0xe000e018
 800bc38:	20000008 	.word	0x20000008
 800bc3c:	10624dd3 	.word	0x10624dd3
 800bc40:	e000e014 	.word	0xe000e014

0800bc44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bc44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bc54 <vPortEnableVFP+0x10>
 800bc48:	6801      	ldr	r1, [r0, #0]
 800bc4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bc4e:	6001      	str	r1, [r0, #0]
 800bc50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bc52:	bf00      	nop
 800bc54:	e000ed88 	.word	0xe000ed88

0800bc58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bc58:	b480      	push	{r7}
 800bc5a:	b085      	sub	sp, #20
 800bc5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bc5e:	f3ef 8305 	mrs	r3, IPSR
 800bc62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2b0f      	cmp	r3, #15
 800bc68:	d914      	bls.n	800bc94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bc6a:	4a17      	ldr	r2, [pc, #92]	; (800bcc8 <vPortValidateInterruptPriority+0x70>)
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	4413      	add	r3, r2
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bc74:	4b15      	ldr	r3, [pc, #84]	; (800bccc <vPortValidateInterruptPriority+0x74>)
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	7afa      	ldrb	r2, [r7, #11]
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d20a      	bcs.n	800bc94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc82:	f383 8811 	msr	BASEPRI, r3
 800bc86:	f3bf 8f6f 	isb	sy
 800bc8a:	f3bf 8f4f 	dsb	sy
 800bc8e:	607b      	str	r3, [r7, #4]
}
 800bc90:	bf00      	nop
 800bc92:	e7fe      	b.n	800bc92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bc94:	4b0e      	ldr	r3, [pc, #56]	; (800bcd0 <vPortValidateInterruptPriority+0x78>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bc9c:	4b0d      	ldr	r3, [pc, #52]	; (800bcd4 <vPortValidateInterruptPriority+0x7c>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d90a      	bls.n	800bcba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca8:	f383 8811 	msr	BASEPRI, r3
 800bcac:	f3bf 8f6f 	isb	sy
 800bcb0:	f3bf 8f4f 	dsb	sy
 800bcb4:	603b      	str	r3, [r7, #0]
}
 800bcb6:	bf00      	nop
 800bcb8:	e7fe      	b.n	800bcb8 <vPortValidateInterruptPriority+0x60>
	}
 800bcba:	bf00      	nop
 800bcbc:	3714      	adds	r7, #20
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr
 800bcc6:	bf00      	nop
 800bcc8:	e000e3f0 	.word	0xe000e3f0
 800bccc:	200011d0 	.word	0x200011d0
 800bcd0:	e000ed0c 	.word	0xe000ed0c
 800bcd4:	200011d4 	.word	0x200011d4

0800bcd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b08a      	sub	sp, #40	; 0x28
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bce0:	2300      	movs	r3, #0
 800bce2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bce4:	f7fe fd9a 	bl	800a81c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bce8:	4b5b      	ldr	r3, [pc, #364]	; (800be58 <pvPortMalloc+0x180>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d101      	bne.n	800bcf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bcf0:	f000 f920 	bl	800bf34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bcf4:	4b59      	ldr	r3, [pc, #356]	; (800be5c <pvPortMalloc+0x184>)
 800bcf6:	681a      	ldr	r2, [r3, #0]
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	4013      	ands	r3, r2
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	f040 8093 	bne.w	800be28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d01d      	beq.n	800bd44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bd08:	2208      	movs	r2, #8
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f003 0307 	and.w	r3, r3, #7
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d014      	beq.n	800bd44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f023 0307 	bic.w	r3, r3, #7
 800bd20:	3308      	adds	r3, #8
 800bd22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f003 0307 	and.w	r3, r3, #7
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d00a      	beq.n	800bd44 <pvPortMalloc+0x6c>
	__asm volatile
 800bd2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd32:	f383 8811 	msr	BASEPRI, r3
 800bd36:	f3bf 8f6f 	isb	sy
 800bd3a:	f3bf 8f4f 	dsb	sy
 800bd3e:	617b      	str	r3, [r7, #20]
}
 800bd40:	bf00      	nop
 800bd42:	e7fe      	b.n	800bd42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d06e      	beq.n	800be28 <pvPortMalloc+0x150>
 800bd4a:	4b45      	ldr	r3, [pc, #276]	; (800be60 <pvPortMalloc+0x188>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d869      	bhi.n	800be28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bd54:	4b43      	ldr	r3, [pc, #268]	; (800be64 <pvPortMalloc+0x18c>)
 800bd56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bd58:	4b42      	ldr	r3, [pc, #264]	; (800be64 <pvPortMalloc+0x18c>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bd5e:	e004      	b.n	800bd6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bd6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd6c:	685b      	ldr	r3, [r3, #4]
 800bd6e:	687a      	ldr	r2, [r7, #4]
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d903      	bls.n	800bd7c <pvPortMalloc+0xa4>
 800bd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d1f1      	bne.n	800bd60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bd7c:	4b36      	ldr	r3, [pc, #216]	; (800be58 <pvPortMalloc+0x180>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d050      	beq.n	800be28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bd86:	6a3b      	ldr	r3, [r7, #32]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	2208      	movs	r2, #8
 800bd8c:	4413      	add	r3, r2
 800bd8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	6a3b      	ldr	r3, [r7, #32]
 800bd96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bd98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd9a:	685a      	ldr	r2, [r3, #4]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	1ad2      	subs	r2, r2, r3
 800bda0:	2308      	movs	r3, #8
 800bda2:	005b      	lsls	r3, r3, #1
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d91f      	bls.n	800bde8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bda8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	4413      	add	r3, r2
 800bdae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bdb0:	69bb      	ldr	r3, [r7, #24]
 800bdb2:	f003 0307 	and.w	r3, r3, #7
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d00a      	beq.n	800bdd0 <pvPortMalloc+0xf8>
	__asm volatile
 800bdba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdbe:	f383 8811 	msr	BASEPRI, r3
 800bdc2:	f3bf 8f6f 	isb	sy
 800bdc6:	f3bf 8f4f 	dsb	sy
 800bdca:	613b      	str	r3, [r7, #16]
}
 800bdcc:	bf00      	nop
 800bdce:	e7fe      	b.n	800bdce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd2:	685a      	ldr	r2, [r3, #4]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	1ad2      	subs	r2, r2, r3
 800bdd8:	69bb      	ldr	r3, [r7, #24]
 800bdda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdde:	687a      	ldr	r2, [r7, #4]
 800bde0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bde2:	69b8      	ldr	r0, [r7, #24]
 800bde4:	f000 f908 	bl	800bff8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bde8:	4b1d      	ldr	r3, [pc, #116]	; (800be60 <pvPortMalloc+0x188>)
 800bdea:	681a      	ldr	r2, [r3, #0]
 800bdec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdee:	685b      	ldr	r3, [r3, #4]
 800bdf0:	1ad3      	subs	r3, r2, r3
 800bdf2:	4a1b      	ldr	r2, [pc, #108]	; (800be60 <pvPortMalloc+0x188>)
 800bdf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bdf6:	4b1a      	ldr	r3, [pc, #104]	; (800be60 <pvPortMalloc+0x188>)
 800bdf8:	681a      	ldr	r2, [r3, #0]
 800bdfa:	4b1b      	ldr	r3, [pc, #108]	; (800be68 <pvPortMalloc+0x190>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d203      	bcs.n	800be0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800be02:	4b17      	ldr	r3, [pc, #92]	; (800be60 <pvPortMalloc+0x188>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4a18      	ldr	r2, [pc, #96]	; (800be68 <pvPortMalloc+0x190>)
 800be08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800be0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0c:	685a      	ldr	r2, [r3, #4]
 800be0e:	4b13      	ldr	r3, [pc, #76]	; (800be5c <pvPortMalloc+0x184>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	431a      	orrs	r2, r3
 800be14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800be18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1a:	2200      	movs	r2, #0
 800be1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800be1e:	4b13      	ldr	r3, [pc, #76]	; (800be6c <pvPortMalloc+0x194>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	3301      	adds	r3, #1
 800be24:	4a11      	ldr	r2, [pc, #68]	; (800be6c <pvPortMalloc+0x194>)
 800be26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800be28:	f7fe fd06 	bl	800a838 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800be2c:	69fb      	ldr	r3, [r7, #28]
 800be2e:	f003 0307 	and.w	r3, r3, #7
 800be32:	2b00      	cmp	r3, #0
 800be34:	d00a      	beq.n	800be4c <pvPortMalloc+0x174>
	__asm volatile
 800be36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3a:	f383 8811 	msr	BASEPRI, r3
 800be3e:	f3bf 8f6f 	isb	sy
 800be42:	f3bf 8f4f 	dsb	sy
 800be46:	60fb      	str	r3, [r7, #12]
}
 800be48:	bf00      	nop
 800be4a:	e7fe      	b.n	800be4a <pvPortMalloc+0x172>
	return pvReturn;
 800be4c:	69fb      	ldr	r3, [r7, #28]
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3728      	adds	r7, #40	; 0x28
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}
 800be56:	bf00      	nop
 800be58:	20004de0 	.word	0x20004de0
 800be5c:	20004df4 	.word	0x20004df4
 800be60:	20004de4 	.word	0x20004de4
 800be64:	20004dd8 	.word	0x20004dd8
 800be68:	20004de8 	.word	0x20004de8
 800be6c:	20004dec 	.word	0x20004dec

0800be70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b086      	sub	sp, #24
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d04d      	beq.n	800bf1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800be82:	2308      	movs	r3, #8
 800be84:	425b      	negs	r3, r3
 800be86:	697a      	ldr	r2, [r7, #20]
 800be88:	4413      	add	r3, r2
 800be8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	685a      	ldr	r2, [r3, #4]
 800be94:	4b24      	ldr	r3, [pc, #144]	; (800bf28 <vPortFree+0xb8>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	4013      	ands	r3, r2
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d10a      	bne.n	800beb4 <vPortFree+0x44>
	__asm volatile
 800be9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea2:	f383 8811 	msr	BASEPRI, r3
 800bea6:	f3bf 8f6f 	isb	sy
 800beaa:	f3bf 8f4f 	dsb	sy
 800beae:	60fb      	str	r3, [r7, #12]
}
 800beb0:	bf00      	nop
 800beb2:	e7fe      	b.n	800beb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d00a      	beq.n	800bed2 <vPortFree+0x62>
	__asm volatile
 800bebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec0:	f383 8811 	msr	BASEPRI, r3
 800bec4:	f3bf 8f6f 	isb	sy
 800bec8:	f3bf 8f4f 	dsb	sy
 800becc:	60bb      	str	r3, [r7, #8]
}
 800bece:	bf00      	nop
 800bed0:	e7fe      	b.n	800bed0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	685a      	ldr	r2, [r3, #4]
 800bed6:	4b14      	ldr	r3, [pc, #80]	; (800bf28 <vPortFree+0xb8>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	4013      	ands	r3, r2
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d01e      	beq.n	800bf1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d11a      	bne.n	800bf1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	685a      	ldr	r2, [r3, #4]
 800beec:	4b0e      	ldr	r3, [pc, #56]	; (800bf28 <vPortFree+0xb8>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	43db      	mvns	r3, r3
 800bef2:	401a      	ands	r2, r3
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bef8:	f7fe fc90 	bl	800a81c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	685a      	ldr	r2, [r3, #4]
 800bf00:	4b0a      	ldr	r3, [pc, #40]	; (800bf2c <vPortFree+0xbc>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4413      	add	r3, r2
 800bf06:	4a09      	ldr	r2, [pc, #36]	; (800bf2c <vPortFree+0xbc>)
 800bf08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bf0a:	6938      	ldr	r0, [r7, #16]
 800bf0c:	f000 f874 	bl	800bff8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bf10:	4b07      	ldr	r3, [pc, #28]	; (800bf30 <vPortFree+0xc0>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	3301      	adds	r3, #1
 800bf16:	4a06      	ldr	r2, [pc, #24]	; (800bf30 <vPortFree+0xc0>)
 800bf18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bf1a:	f7fe fc8d 	bl	800a838 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bf1e:	bf00      	nop
 800bf20:	3718      	adds	r7, #24
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
 800bf26:	bf00      	nop
 800bf28:	20004df4 	.word	0x20004df4
 800bf2c:	20004de4 	.word	0x20004de4
 800bf30:	20004df0 	.word	0x20004df0

0800bf34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bf34:	b480      	push	{r7}
 800bf36:	b085      	sub	sp, #20
 800bf38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bf3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bf3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bf40:	4b27      	ldr	r3, [pc, #156]	; (800bfe0 <prvHeapInit+0xac>)
 800bf42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f003 0307 	and.w	r3, r3, #7
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d00c      	beq.n	800bf68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	3307      	adds	r3, #7
 800bf52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f023 0307 	bic.w	r3, r3, #7
 800bf5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bf5c:	68ba      	ldr	r2, [r7, #8]
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	1ad3      	subs	r3, r2, r3
 800bf62:	4a1f      	ldr	r2, [pc, #124]	; (800bfe0 <prvHeapInit+0xac>)
 800bf64:	4413      	add	r3, r2
 800bf66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bf6c:	4a1d      	ldr	r2, [pc, #116]	; (800bfe4 <prvHeapInit+0xb0>)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bf72:	4b1c      	ldr	r3, [pc, #112]	; (800bfe4 <prvHeapInit+0xb0>)
 800bf74:	2200      	movs	r2, #0
 800bf76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	68ba      	ldr	r2, [r7, #8]
 800bf7c:	4413      	add	r3, r2
 800bf7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bf80:	2208      	movs	r2, #8
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	1a9b      	subs	r3, r3, r2
 800bf86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	f023 0307 	bic.w	r3, r3, #7
 800bf8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	4a15      	ldr	r2, [pc, #84]	; (800bfe8 <prvHeapInit+0xb4>)
 800bf94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bf96:	4b14      	ldr	r3, [pc, #80]	; (800bfe8 <prvHeapInit+0xb4>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bf9e:	4b12      	ldr	r3, [pc, #72]	; (800bfe8 <prvHeapInit+0xb4>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	68fa      	ldr	r2, [r7, #12]
 800bfae:	1ad2      	subs	r2, r2, r3
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bfb4:	4b0c      	ldr	r3, [pc, #48]	; (800bfe8 <prvHeapInit+0xb4>)
 800bfb6:	681a      	ldr	r2, [r3, #0]
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	4a0a      	ldr	r2, [pc, #40]	; (800bfec <prvHeapInit+0xb8>)
 800bfc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	4a09      	ldr	r2, [pc, #36]	; (800bff0 <prvHeapInit+0xbc>)
 800bfca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bfcc:	4b09      	ldr	r3, [pc, #36]	; (800bff4 <prvHeapInit+0xc0>)
 800bfce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bfd2:	601a      	str	r2, [r3, #0]
}
 800bfd4:	bf00      	nop
 800bfd6:	3714      	adds	r7, #20
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr
 800bfe0:	200011d8 	.word	0x200011d8
 800bfe4:	20004dd8 	.word	0x20004dd8
 800bfe8:	20004de0 	.word	0x20004de0
 800bfec:	20004de8 	.word	0x20004de8
 800bff0:	20004de4 	.word	0x20004de4
 800bff4:	20004df4 	.word	0x20004df4

0800bff8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bff8:	b480      	push	{r7}
 800bffa:	b085      	sub	sp, #20
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c000:	4b28      	ldr	r3, [pc, #160]	; (800c0a4 <prvInsertBlockIntoFreeList+0xac>)
 800c002:	60fb      	str	r3, [r7, #12]
 800c004:	e002      	b.n	800c00c <prvInsertBlockIntoFreeList+0x14>
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	60fb      	str	r3, [r7, #12]
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	687a      	ldr	r2, [r7, #4]
 800c012:	429a      	cmp	r2, r3
 800c014:	d8f7      	bhi.n	800c006 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	68ba      	ldr	r2, [r7, #8]
 800c020:	4413      	add	r3, r2
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	429a      	cmp	r2, r3
 800c026:	d108      	bne.n	800c03a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	685a      	ldr	r2, [r3, #4]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	685b      	ldr	r3, [r3, #4]
 800c030:	441a      	add	r2, r3
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	685b      	ldr	r3, [r3, #4]
 800c042:	68ba      	ldr	r2, [r7, #8]
 800c044:	441a      	add	r2, r3
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d118      	bne.n	800c080 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681a      	ldr	r2, [r3, #0]
 800c052:	4b15      	ldr	r3, [pc, #84]	; (800c0a8 <prvInsertBlockIntoFreeList+0xb0>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	429a      	cmp	r2, r3
 800c058:	d00d      	beq.n	800c076 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	685a      	ldr	r2, [r3, #4]
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	685b      	ldr	r3, [r3, #4]
 800c064:	441a      	add	r2, r3
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	681a      	ldr	r2, [r3, #0]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	601a      	str	r2, [r3, #0]
 800c074:	e008      	b.n	800c088 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c076:	4b0c      	ldr	r3, [pc, #48]	; (800c0a8 <prvInsertBlockIntoFreeList+0xb0>)
 800c078:	681a      	ldr	r2, [r3, #0]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	601a      	str	r2, [r3, #0]
 800c07e:	e003      	b.n	800c088 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681a      	ldr	r2, [r3, #0]
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c088:	68fa      	ldr	r2, [r7, #12]
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d002      	beq.n	800c096 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	687a      	ldr	r2, [r7, #4]
 800c094:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c096:	bf00      	nop
 800c098:	3714      	adds	r7, #20
 800c09a:	46bd      	mov	sp, r7
 800c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a0:	4770      	bx	lr
 800c0a2:	bf00      	nop
 800c0a4:	20004dd8 	.word	0x20004dd8
 800c0a8:	20004de0 	.word	0x20004de0

0800c0ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	4912      	ldr	r1, [pc, #72]	; (800c0fc <MX_USB_DEVICE_Init+0x50>)
 800c0b4:	4812      	ldr	r0, [pc, #72]	; (800c100 <MX_USB_DEVICE_Init+0x54>)
 800c0b6:	f7fc f8cf 	bl	8008258 <USBD_Init>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d001      	beq.n	800c0c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c0c0:	f7f5 fb74 	bl	80017ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 800c0c4:	490f      	ldr	r1, [pc, #60]	; (800c104 <MX_USB_DEVICE_Init+0x58>)
 800c0c6:	480e      	ldr	r0, [pc, #56]	; (800c100 <MX_USB_DEVICE_Init+0x54>)
 800c0c8:	f7fc f8f6 	bl	80082b8 <USBD_RegisterClass>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d001      	beq.n	800c0d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c0d2:	f7f5 fb6b 	bl	80017ac <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 800c0d6:	490c      	ldr	r1, [pc, #48]	; (800c108 <MX_USB_DEVICE_Init+0x5c>)
 800c0d8:	4809      	ldr	r0, [pc, #36]	; (800c100 <MX_USB_DEVICE_Init+0x54>)
 800c0da:	f7fb fd3b 	bl	8007b54 <USBD_DFU_RegisterMedia>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d001      	beq.n	800c0e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c0e4:	f7f5 fb62 	bl	80017ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c0e8:	4805      	ldr	r0, [pc, #20]	; (800c100 <MX_USB_DEVICE_Init+0x54>)
 800c0ea:	f7fc f90c 	bl	8008306 <USBD_Start>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d001      	beq.n	800c0f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c0f4:	f7f5 fb5a 	bl	80017ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c0f8:	bf00      	nop
 800c0fa:	bd80      	pop	{r7, pc}
 800c0fc:	2000007c 	.word	0x2000007c
 800c100:	2000547c 	.word	0x2000547c
 800c104:	20000014 	.word	0x20000014
 800c108:	200000cc 	.word	0x200000cc

0800c10c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c10c:	b480      	push	{r7}
 800c10e:	b083      	sub	sp, #12
 800c110:	af00      	add	r7, sp, #0
 800c112:	4603      	mov	r3, r0
 800c114:	6039      	str	r1, [r7, #0]
 800c116:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	2212      	movs	r2, #18
 800c11c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c11e:	4b03      	ldr	r3, [pc, #12]	; (800c12c <USBD_FS_DeviceDescriptor+0x20>)
}
 800c120:	4618      	mov	r0, r3
 800c122:	370c      	adds	r7, #12
 800c124:	46bd      	mov	sp, r7
 800c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12a:	4770      	bx	lr
 800c12c:	20000098 	.word	0x20000098

0800c130 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c130:	b480      	push	{r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
 800c136:	4603      	mov	r3, r0
 800c138:	6039      	str	r1, [r7, #0]
 800c13a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	2204      	movs	r2, #4
 800c140:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c142:	4b03      	ldr	r3, [pc, #12]	; (800c150 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c144:	4618      	mov	r0, r3
 800c146:	370c      	adds	r7, #12
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr
 800c150:	200000ac 	.word	0x200000ac

0800c154 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b082      	sub	sp, #8
 800c158:	af00      	add	r7, sp, #0
 800c15a:	4603      	mov	r3, r0
 800c15c:	6039      	str	r1, [r7, #0]
 800c15e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c160:	79fb      	ldrb	r3, [r7, #7]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d105      	bne.n	800c172 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c166:	683a      	ldr	r2, [r7, #0]
 800c168:	4907      	ldr	r1, [pc, #28]	; (800c188 <USBD_FS_ProductStrDescriptor+0x34>)
 800c16a:	4808      	ldr	r0, [pc, #32]	; (800c18c <USBD_FS_ProductStrDescriptor+0x38>)
 800c16c:	f7fd f929 	bl	80093c2 <USBD_GetString>
 800c170:	e004      	b.n	800c17c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c172:	683a      	ldr	r2, [r7, #0]
 800c174:	4904      	ldr	r1, [pc, #16]	; (800c188 <USBD_FS_ProductStrDescriptor+0x34>)
 800c176:	4805      	ldr	r0, [pc, #20]	; (800c18c <USBD_FS_ProductStrDescriptor+0x38>)
 800c178:	f7fd f923 	bl	80093c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c17c:	4b02      	ldr	r3, [pc, #8]	; (800c188 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c17e:	4618      	mov	r0, r3
 800c180:	3708      	adds	r7, #8
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}
 800c186:	bf00      	nop
 800c188:	2000574c 	.word	0x2000574c
 800c18c:	08011bc8 	.word	0x08011bc8

0800c190 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b082      	sub	sp, #8
 800c194:	af00      	add	r7, sp, #0
 800c196:	4603      	mov	r3, r0
 800c198:	6039      	str	r1, [r7, #0]
 800c19a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c19c:	683a      	ldr	r2, [r7, #0]
 800c19e:	4904      	ldr	r1, [pc, #16]	; (800c1b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c1a0:	4804      	ldr	r0, [pc, #16]	; (800c1b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c1a2:	f7fd f90e 	bl	80093c2 <USBD_GetString>
  return USBD_StrDesc;
 800c1a6:	4b02      	ldr	r3, [pc, #8]	; (800c1b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3708      	adds	r7, #8
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}
 800c1b0:	2000574c 	.word	0x2000574c
 800c1b4:	08011be8 	.word	0x08011be8

0800c1b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b082      	sub	sp, #8
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	4603      	mov	r3, r0
 800c1c0:	6039      	str	r1, [r7, #0]
 800c1c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	221a      	movs	r2, #26
 800c1c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c1ca:	f000 f843 	bl	800c254 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c1ce:	4b02      	ldr	r3, [pc, #8]	; (800c1d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3708      	adds	r7, #8
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}
 800c1d8:	200000b0 	.word	0x200000b0

0800c1dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b082      	sub	sp, #8
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	6039      	str	r1, [r7, #0]
 800c1e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c1e8:	79fb      	ldrb	r3, [r7, #7]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d105      	bne.n	800c1fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c1ee:	683a      	ldr	r2, [r7, #0]
 800c1f0:	4907      	ldr	r1, [pc, #28]	; (800c210 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c1f2:	4808      	ldr	r0, [pc, #32]	; (800c214 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c1f4:	f7fd f8e5 	bl	80093c2 <USBD_GetString>
 800c1f8:	e004      	b.n	800c204 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c1fa:	683a      	ldr	r2, [r7, #0]
 800c1fc:	4904      	ldr	r1, [pc, #16]	; (800c210 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c1fe:	4805      	ldr	r0, [pc, #20]	; (800c214 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c200:	f7fd f8df 	bl	80093c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c204:	4b02      	ldr	r3, [pc, #8]	; (800c210 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c206:	4618      	mov	r0, r3
 800c208:	3708      	adds	r7, #8
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}
 800c20e:	bf00      	nop
 800c210:	2000574c 	.word	0x2000574c
 800c214:	08011bfc 	.word	0x08011bfc

0800c218 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b082      	sub	sp, #8
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	4603      	mov	r3, r0
 800c220:	6039      	str	r1, [r7, #0]
 800c222:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c224:	79fb      	ldrb	r3, [r7, #7]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d105      	bne.n	800c236 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c22a:	683a      	ldr	r2, [r7, #0]
 800c22c:	4907      	ldr	r1, [pc, #28]	; (800c24c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c22e:	4808      	ldr	r0, [pc, #32]	; (800c250 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c230:	f7fd f8c7 	bl	80093c2 <USBD_GetString>
 800c234:	e004      	b.n	800c240 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c236:	683a      	ldr	r2, [r7, #0]
 800c238:	4904      	ldr	r1, [pc, #16]	; (800c24c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c23a:	4805      	ldr	r0, [pc, #20]	; (800c250 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c23c:	f7fd f8c1 	bl	80093c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c240:	4b02      	ldr	r3, [pc, #8]	; (800c24c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c242:	4618      	mov	r0, r3
 800c244:	3708      	adds	r7, #8
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
 800c24a:	bf00      	nop
 800c24c:	2000574c 	.word	0x2000574c
 800c250:	08011c08 	.word	0x08011c08

0800c254 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c25a:	4b0f      	ldr	r3, [pc, #60]	; (800c298 <Get_SerialNum+0x44>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c260:	4b0e      	ldr	r3, [pc, #56]	; (800c29c <Get_SerialNum+0x48>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c266:	4b0e      	ldr	r3, [pc, #56]	; (800c2a0 <Get_SerialNum+0x4c>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c26c:	68fa      	ldr	r2, [r7, #12]
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	4413      	add	r3, r2
 800c272:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d009      	beq.n	800c28e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c27a:	2208      	movs	r2, #8
 800c27c:	4909      	ldr	r1, [pc, #36]	; (800c2a4 <Get_SerialNum+0x50>)
 800c27e:	68f8      	ldr	r0, [r7, #12]
 800c280:	f000 f814 	bl	800c2ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c284:	2204      	movs	r2, #4
 800c286:	4908      	ldr	r1, [pc, #32]	; (800c2a8 <Get_SerialNum+0x54>)
 800c288:	68b8      	ldr	r0, [r7, #8]
 800c28a:	f000 f80f 	bl	800c2ac <IntToUnicode>
  }
}
 800c28e:	bf00      	nop
 800c290:	3710      	adds	r7, #16
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
 800c296:	bf00      	nop
 800c298:	1fff7a10 	.word	0x1fff7a10
 800c29c:	1fff7a14 	.word	0x1fff7a14
 800c2a0:	1fff7a18 	.word	0x1fff7a18
 800c2a4:	200000b2 	.word	0x200000b2
 800c2a8:	200000c2 	.word	0x200000c2

0800c2ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b087      	sub	sp, #28
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	60f8      	str	r0, [r7, #12]
 800c2b4:	60b9      	str	r1, [r7, #8]
 800c2b6:	4613      	mov	r3, r2
 800c2b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c2be:	2300      	movs	r3, #0
 800c2c0:	75fb      	strb	r3, [r7, #23]
 800c2c2:	e027      	b.n	800c314 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	0f1b      	lsrs	r3, r3, #28
 800c2c8:	2b09      	cmp	r3, #9
 800c2ca:	d80b      	bhi.n	800c2e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	0f1b      	lsrs	r3, r3, #28
 800c2d0:	b2da      	uxtb	r2, r3
 800c2d2:	7dfb      	ldrb	r3, [r7, #23]
 800c2d4:	005b      	lsls	r3, r3, #1
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	440b      	add	r3, r1
 800c2dc:	3230      	adds	r2, #48	; 0x30
 800c2de:	b2d2      	uxtb	r2, r2
 800c2e0:	701a      	strb	r2, [r3, #0]
 800c2e2:	e00a      	b.n	800c2fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	0f1b      	lsrs	r3, r3, #28
 800c2e8:	b2da      	uxtb	r2, r3
 800c2ea:	7dfb      	ldrb	r3, [r7, #23]
 800c2ec:	005b      	lsls	r3, r3, #1
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	440b      	add	r3, r1
 800c2f4:	3237      	adds	r2, #55	; 0x37
 800c2f6:	b2d2      	uxtb	r2, r2
 800c2f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	011b      	lsls	r3, r3, #4
 800c2fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c300:	7dfb      	ldrb	r3, [r7, #23]
 800c302:	005b      	lsls	r3, r3, #1
 800c304:	3301      	adds	r3, #1
 800c306:	68ba      	ldr	r2, [r7, #8]
 800c308:	4413      	add	r3, r2
 800c30a:	2200      	movs	r2, #0
 800c30c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c30e:	7dfb      	ldrb	r3, [r7, #23]
 800c310:	3301      	adds	r3, #1
 800c312:	75fb      	strb	r3, [r7, #23]
 800c314:	7dfa      	ldrb	r2, [r7, #23]
 800c316:	79fb      	ldrb	r3, [r7, #7]
 800c318:	429a      	cmp	r2, r3
 800c31a:	d3d3      	bcc.n	800c2c4 <IntToUnicode+0x18>
  }
}
 800c31c:	bf00      	nop
 800c31e:	bf00      	nop
 800c320:	371c      	adds	r7, #28
 800c322:	46bd      	mov	sp, r7
 800c324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c328:	4770      	bx	lr

0800c32a <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 800c32a:	b480      	push	{r7}
 800c32c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 800c32e:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800c330:	4618      	mov	r0, r3
 800c332:	46bd      	mov	sp, r7
 800c334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c338:	4770      	bx	lr

0800c33a <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 800c33a:	b480      	push	{r7}
 800c33c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 800c33e:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800c340:	4618      	mov	r0, r3
 800c342:	46bd      	mov	sp, r7
 800c344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c348:	4770      	bx	lr

0800c34a <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 800c34a:	b480      	push	{r7}
 800c34c:	b083      	sub	sp, #12
 800c34e:	af00      	add	r7, sp, #0
 800c350:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 800c352:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800c354:	4618      	mov	r0, r3
 800c356:	370c      	adds	r7, #12
 800c358:	46bd      	mov	sp, r7
 800c35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35e:	4770      	bx	lr

0800c360 <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800c360:	b480      	push	{r7}
 800c362:	b085      	sub	sp, #20
 800c364:	af00      	add	r7, sp, #0
 800c366:	60f8      	str	r0, [r7, #12]
 800c368:	60b9      	str	r1, [r7, #8]
 800c36a:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 800c36c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3714      	adds	r7, #20
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr

0800c37a <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800c37a:	b480      	push	{r7}
 800c37c:	b085      	sub	sp, #20
 800c37e:	af00      	add	r7, sp, #0
 800c380:	60f8      	str	r0, [r7, #12]
 800c382:	60b9      	str	r1, [r7, #8]
 800c384:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 800c386:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3714      	adds	r7, #20
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr

0800c394 <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 800c394:	b480      	push	{r7}
 800c396:	b085      	sub	sp, #20
 800c398:	af00      	add	r7, sp, #0
 800c39a:	60f8      	str	r0, [r7, #12]
 800c39c:	460b      	mov	r3, r1
 800c39e:	607a      	str	r2, [r7, #4]
 800c3a0:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 800c3a2:	7afb      	ldrb	r3, [r7, #11]
 800c3a4:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 800c3a6:	bf00      	nop
  }
  return (USBD_OK);
 800c3a8:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3714      	adds	r7, #20
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b4:	4770      	bx	lr
	...

0800c3b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b08a      	sub	sp, #40	; 0x28
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c3c0:	f107 0314 	add.w	r3, r7, #20
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	601a      	str	r2, [r3, #0]
 800c3c8:	605a      	str	r2, [r3, #4]
 800c3ca:	609a      	str	r2, [r3, #8]
 800c3cc:	60da      	str	r2, [r3, #12]
 800c3ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c3d8:	d13a      	bne.n	800c450 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c3da:	2300      	movs	r3, #0
 800c3dc:	613b      	str	r3, [r7, #16]
 800c3de:	4b1e      	ldr	r3, [pc, #120]	; (800c458 <HAL_PCD_MspInit+0xa0>)
 800c3e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3e2:	4a1d      	ldr	r2, [pc, #116]	; (800c458 <HAL_PCD_MspInit+0xa0>)
 800c3e4:	f043 0301 	orr.w	r3, r3, #1
 800c3e8:	6313      	str	r3, [r2, #48]	; 0x30
 800c3ea:	4b1b      	ldr	r3, [pc, #108]	; (800c458 <HAL_PCD_MspInit+0xa0>)
 800c3ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3ee:	f003 0301 	and.w	r3, r3, #1
 800c3f2:	613b      	str	r3, [r7, #16]
 800c3f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c3f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c3fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c3fc:	2302      	movs	r3, #2
 800c3fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c400:	2300      	movs	r3, #0
 800c402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c404:	2303      	movs	r3, #3
 800c406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c408:	230a      	movs	r3, #10
 800c40a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c40c:	f107 0314 	add.w	r3, r7, #20
 800c410:	4619      	mov	r1, r3
 800c412:	4812      	ldr	r0, [pc, #72]	; (800c45c <HAL_PCD_MspInit+0xa4>)
 800c414:	f7f6 f902 	bl	800261c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c418:	4b0f      	ldr	r3, [pc, #60]	; (800c458 <HAL_PCD_MspInit+0xa0>)
 800c41a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c41c:	4a0e      	ldr	r2, [pc, #56]	; (800c458 <HAL_PCD_MspInit+0xa0>)
 800c41e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c422:	6353      	str	r3, [r2, #52]	; 0x34
 800c424:	2300      	movs	r3, #0
 800c426:	60fb      	str	r3, [r7, #12]
 800c428:	4b0b      	ldr	r3, [pc, #44]	; (800c458 <HAL_PCD_MspInit+0xa0>)
 800c42a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c42c:	4a0a      	ldr	r2, [pc, #40]	; (800c458 <HAL_PCD_MspInit+0xa0>)
 800c42e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c432:	6453      	str	r3, [r2, #68]	; 0x44
 800c434:	4b08      	ldr	r3, [pc, #32]	; (800c458 <HAL_PCD_MspInit+0xa0>)
 800c436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c43c:	60fb      	str	r3, [r7, #12]
 800c43e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c440:	2200      	movs	r2, #0
 800c442:	2105      	movs	r1, #5
 800c444:	2043      	movs	r0, #67	; 0x43
 800c446:	f7f6 f82d 	bl	80024a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c44a:	2043      	movs	r0, #67	; 0x43
 800c44c:	f7f6 f846 	bl	80024dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c450:	bf00      	nop
 800c452:	3728      	adds	r7, #40	; 0x28
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}
 800c458:	40023800 	.word	0x40023800
 800c45c:	40020000 	.word	0x40020000

0800c460 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b082      	sub	sp, #8
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c474:	4619      	mov	r1, r3
 800c476:	4610      	mov	r0, r2
 800c478:	f7fb ffab 	bl	80083d2 <USBD_LL_SetupStage>
}
 800c47c:	bf00      	nop
 800c47e:	3708      	adds	r7, #8
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}

0800c484 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b082      	sub	sp, #8
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	460b      	mov	r3, r1
 800c48e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c496:	78fa      	ldrb	r2, [r7, #3]
 800c498:	6879      	ldr	r1, [r7, #4]
 800c49a:	4613      	mov	r3, r2
 800c49c:	00db      	lsls	r3, r3, #3
 800c49e:	1a9b      	subs	r3, r3, r2
 800c4a0:	009b      	lsls	r3, r3, #2
 800c4a2:	440b      	add	r3, r1
 800c4a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c4a8:	681a      	ldr	r2, [r3, #0]
 800c4aa:	78fb      	ldrb	r3, [r7, #3]
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	f7fb ffe5 	bl	800847c <USBD_LL_DataOutStage>
}
 800c4b2:	bf00      	nop
 800c4b4:	3708      	adds	r7, #8
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}

0800c4ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4ba:	b580      	push	{r7, lr}
 800c4bc:	b082      	sub	sp, #8
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	6078      	str	r0, [r7, #4]
 800c4c2:	460b      	mov	r3, r1
 800c4c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c4cc:	78fa      	ldrb	r2, [r7, #3]
 800c4ce:	6879      	ldr	r1, [r7, #4]
 800c4d0:	4613      	mov	r3, r2
 800c4d2:	00db      	lsls	r3, r3, #3
 800c4d4:	1a9b      	subs	r3, r3, r2
 800c4d6:	009b      	lsls	r3, r3, #2
 800c4d8:	440b      	add	r3, r1
 800c4da:	3348      	adds	r3, #72	; 0x48
 800c4dc:	681a      	ldr	r2, [r3, #0]
 800c4de:	78fb      	ldrb	r3, [r7, #3]
 800c4e0:	4619      	mov	r1, r3
 800c4e2:	f7fc f82e 	bl	8008542 <USBD_LL_DataInStage>
}
 800c4e6:	bf00      	nop
 800c4e8:	3708      	adds	r7, #8
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}

0800c4ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4ee:	b580      	push	{r7, lr}
 800c4f0:	b082      	sub	sp, #8
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f7fc f942 	bl	8008786 <USBD_LL_SOF>
}
 800c502:	bf00      	nop
 800c504:	3708      	adds	r7, #8
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}

0800c50a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c50a:	b580      	push	{r7, lr}
 800c50c:	b084      	sub	sp, #16
 800c50e:	af00      	add	r7, sp, #0
 800c510:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c512:	2301      	movs	r3, #1
 800c514:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	68db      	ldr	r3, [r3, #12]
 800c51a:	2b02      	cmp	r3, #2
 800c51c:	d001      	beq.n	800c522 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c51e:	f7f5 f945 	bl	80017ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c528:	7bfa      	ldrb	r2, [r7, #15]
 800c52a:	4611      	mov	r1, r2
 800c52c:	4618      	mov	r0, r3
 800c52e:	f7fc f8ec 	bl	800870a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c538:	4618      	mov	r0, r3
 800c53a:	f7fc f898 	bl	800866e <USBD_LL_Reset>
}
 800c53e:	bf00      	nop
 800c540:	3710      	adds	r7, #16
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
	...

0800c548 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c556:	4618      	mov	r0, r3
 800c558:	f7fc f8e7 	bl	800872a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	687a      	ldr	r2, [r7, #4]
 800c568:	6812      	ldr	r2, [r2, #0]
 800c56a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c56e:	f043 0301 	orr.w	r3, r3, #1
 800c572:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6a1b      	ldr	r3, [r3, #32]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d005      	beq.n	800c588 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c57c:	4b04      	ldr	r3, [pc, #16]	; (800c590 <HAL_PCD_SuspendCallback+0x48>)
 800c57e:	691b      	ldr	r3, [r3, #16]
 800c580:	4a03      	ldr	r2, [pc, #12]	; (800c590 <HAL_PCD_SuspendCallback+0x48>)
 800c582:	f043 0306 	orr.w	r3, r3, #6
 800c586:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c588:	bf00      	nop
 800c58a:	3708      	adds	r7, #8
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	e000ed00 	.word	0xe000ed00

0800c594 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b082      	sub	sp, #8
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f7fc f8d7 	bl	8008756 <USBD_LL_Resume>
}
 800c5a8:	bf00      	nop
 800c5aa:	3708      	adds	r7, #8
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b082      	sub	sp, #8
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c5c2:	78fa      	ldrb	r2, [r7, #3]
 800c5c4:	4611      	mov	r1, r2
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f7fc f925 	bl	8008816 <USBD_LL_IsoOUTIncomplete>
}
 800c5cc:	bf00      	nop
 800c5ce:	3708      	adds	r7, #8
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b082      	sub	sp, #8
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	460b      	mov	r3, r1
 800c5de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c5e6:	78fa      	ldrb	r2, [r7, #3]
 800c5e8:	4611      	mov	r1, r2
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7fc f8ed 	bl	80087ca <USBD_LL_IsoINIncomplete>
}
 800c5f0:	bf00      	nop
 800c5f2:	3708      	adds	r7, #8
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}

0800c5f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c606:	4618      	mov	r0, r3
 800c608:	f7fc f92b 	bl	8008862 <USBD_LL_DevConnected>
}
 800c60c:	bf00      	nop
 800c60e:	3708      	adds	r7, #8
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b082      	sub	sp, #8
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c622:	4618      	mov	r0, r3
 800c624:	f7fc f928 	bl	8008878 <USBD_LL_DevDisconnected>
}
 800c628:	bf00      	nop
 800c62a:	3708      	adds	r7, #8
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}

0800c630 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b082      	sub	sp, #8
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	781b      	ldrb	r3, [r3, #0]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d13c      	bne.n	800c6ba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c640:	4a20      	ldr	r2, [pc, #128]	; (800c6c4 <USBD_LL_Init+0x94>)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	4a1e      	ldr	r2, [pc, #120]	; (800c6c4 <USBD_LL_Init+0x94>)
 800c64c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c650:	4b1c      	ldr	r3, [pc, #112]	; (800c6c4 <USBD_LL_Init+0x94>)
 800c652:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c656:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c658:	4b1a      	ldr	r3, [pc, #104]	; (800c6c4 <USBD_LL_Init+0x94>)
 800c65a:	2204      	movs	r2, #4
 800c65c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c65e:	4b19      	ldr	r3, [pc, #100]	; (800c6c4 <USBD_LL_Init+0x94>)
 800c660:	2202      	movs	r2, #2
 800c662:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c664:	4b17      	ldr	r3, [pc, #92]	; (800c6c4 <USBD_LL_Init+0x94>)
 800c666:	2200      	movs	r2, #0
 800c668:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c66a:	4b16      	ldr	r3, [pc, #88]	; (800c6c4 <USBD_LL_Init+0x94>)
 800c66c:	2202      	movs	r2, #2
 800c66e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c670:	4b14      	ldr	r3, [pc, #80]	; (800c6c4 <USBD_LL_Init+0x94>)
 800c672:	2200      	movs	r2, #0
 800c674:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c676:	4b13      	ldr	r3, [pc, #76]	; (800c6c4 <USBD_LL_Init+0x94>)
 800c678:	2200      	movs	r2, #0
 800c67a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c67c:	4b11      	ldr	r3, [pc, #68]	; (800c6c4 <USBD_LL_Init+0x94>)
 800c67e:	2200      	movs	r2, #0
 800c680:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c682:	4b10      	ldr	r3, [pc, #64]	; (800c6c4 <USBD_LL_Init+0x94>)
 800c684:	2200      	movs	r2, #0
 800c686:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c688:	4b0e      	ldr	r3, [pc, #56]	; (800c6c4 <USBD_LL_Init+0x94>)
 800c68a:	2200      	movs	r2, #0
 800c68c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c68e:	480d      	ldr	r0, [pc, #52]	; (800c6c4 <USBD_LL_Init+0x94>)
 800c690:	f7f6 fedb 	bl	800344a <HAL_PCD_Init>
 800c694:	4603      	mov	r3, r0
 800c696:	2b00      	cmp	r3, #0
 800c698:	d001      	beq.n	800c69e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c69a:	f7f5 f887 	bl	80017ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c69e:	2180      	movs	r1, #128	; 0x80
 800c6a0:	4808      	ldr	r0, [pc, #32]	; (800c6c4 <USBD_LL_Init+0x94>)
 800c6a2:	f7f8 f810 	bl	80046c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c6a6:	2240      	movs	r2, #64	; 0x40
 800c6a8:	2100      	movs	r1, #0
 800c6aa:	4806      	ldr	r0, [pc, #24]	; (800c6c4 <USBD_LL_Init+0x94>)
 800c6ac:	f7f7 ffc4 	bl	8004638 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c6b0:	2280      	movs	r2, #128	; 0x80
 800c6b2:	2101      	movs	r1, #1
 800c6b4:	4803      	ldr	r0, [pc, #12]	; (800c6c4 <USBD_LL_Init+0x94>)
 800c6b6:	f7f7 ffbf 	bl	8004638 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c6ba:	2300      	movs	r3, #0
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3708      	adds	r7, #8
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}
 800c6c4:	2000594c 	.word	0x2000594c

0800c6c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b084      	sub	sp, #16
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f7f6 ffd0 	bl	8003684 <HAL_PCD_Start>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6e8:	7bfb      	ldrb	r3, [r7, #15]
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f000 f92c 	bl	800c948 <USBD_Get_USB_Status>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3710      	adds	r7, #16
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}

0800c6fe <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800c6fe:	b580      	push	{r7, lr}
 800c700:	b084      	sub	sp, #16
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c706:	2300      	movs	r3, #0
 800c708:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c70a:	2300      	movs	r3, #0
 800c70c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c714:	4618      	mov	r0, r3
 800c716:	f7f6 ffe8 	bl	80036ea <HAL_PCD_Stop>
 800c71a:	4603      	mov	r3, r0
 800c71c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c71e:	7bfb      	ldrb	r3, [r7, #15]
 800c720:	4618      	mov	r0, r3
 800c722:	f000 f911 	bl	800c948 <USBD_Get_USB_Status>
 800c726:	4603      	mov	r3, r0
 800c728:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c72a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3710      	adds	r7, #16
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b084      	sub	sp, #16
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	4608      	mov	r0, r1
 800c73e:	4611      	mov	r1, r2
 800c740:	461a      	mov	r2, r3
 800c742:	4603      	mov	r3, r0
 800c744:	70fb      	strb	r3, [r7, #3]
 800c746:	460b      	mov	r3, r1
 800c748:	70bb      	strb	r3, [r7, #2]
 800c74a:	4613      	mov	r3, r2
 800c74c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c74e:	2300      	movs	r3, #0
 800c750:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c752:	2300      	movs	r3, #0
 800c754:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c75c:	78bb      	ldrb	r3, [r7, #2]
 800c75e:	883a      	ldrh	r2, [r7, #0]
 800c760:	78f9      	ldrb	r1, [r7, #3]
 800c762:	f7f7 fbd2 	bl	8003f0a <HAL_PCD_EP_Open>
 800c766:	4603      	mov	r3, r0
 800c768:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c76a:	7bfb      	ldrb	r3, [r7, #15]
 800c76c:	4618      	mov	r0, r3
 800c76e:	f000 f8eb 	bl	800c948 <USBD_Get_USB_Status>
 800c772:	4603      	mov	r3, r0
 800c774:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c776:	7bbb      	ldrb	r3, [r7, #14]
}
 800c778:	4618      	mov	r0, r3
 800c77a:	3710      	adds	r7, #16
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b084      	sub	sp, #16
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	460b      	mov	r3, r1
 800c78a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c78c:	2300      	movs	r3, #0
 800c78e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c790:	2300      	movs	r3, #0
 800c792:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c79a:	78fa      	ldrb	r2, [r7, #3]
 800c79c:	4611      	mov	r1, r2
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f7f7 fcb0 	bl	8004104 <HAL_PCD_EP_SetStall>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7a8:	7bfb      	ldrb	r3, [r7, #15]
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f000 f8cc 	bl	800c948 <USBD_Get_USB_Status>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3710      	adds	r7, #16
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}

0800c7be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7be:	b580      	push	{r7, lr}
 800c7c0:	b084      	sub	sp, #16
 800c7c2:	af00      	add	r7, sp, #0
 800c7c4:	6078      	str	r0, [r7, #4]
 800c7c6:	460b      	mov	r3, r1
 800c7c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c7d8:	78fa      	ldrb	r2, [r7, #3]
 800c7da:	4611      	mov	r1, r2
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f7f7 fcf5 	bl	80041cc <HAL_PCD_EP_ClrStall>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7e6:	7bfb      	ldrb	r3, [r7, #15]
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f000 f8ad 	bl	800c948 <USBD_Get_USB_Status>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3710      	adds	r7, #16
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}

0800c7fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	b085      	sub	sp, #20
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	460b      	mov	r3, r1
 800c806:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c80e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c810:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c814:	2b00      	cmp	r3, #0
 800c816:	da0b      	bge.n	800c830 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c818:	78fb      	ldrb	r3, [r7, #3]
 800c81a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c81e:	68f9      	ldr	r1, [r7, #12]
 800c820:	4613      	mov	r3, r2
 800c822:	00db      	lsls	r3, r3, #3
 800c824:	1a9b      	subs	r3, r3, r2
 800c826:	009b      	lsls	r3, r3, #2
 800c828:	440b      	add	r3, r1
 800c82a:	333e      	adds	r3, #62	; 0x3e
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	e00b      	b.n	800c848 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c830:	78fb      	ldrb	r3, [r7, #3]
 800c832:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c836:	68f9      	ldr	r1, [r7, #12]
 800c838:	4613      	mov	r3, r2
 800c83a:	00db      	lsls	r3, r3, #3
 800c83c:	1a9b      	subs	r3, r3, r2
 800c83e:	009b      	lsls	r3, r3, #2
 800c840:	440b      	add	r3, r1
 800c842:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c846:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3714      	adds	r7, #20
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr

0800c854 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b084      	sub	sp, #16
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	460b      	mov	r3, r1
 800c85e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c860:	2300      	movs	r3, #0
 800c862:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c864:	2300      	movs	r3, #0
 800c866:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c86e:	78fa      	ldrb	r2, [r7, #3]
 800c870:	4611      	mov	r1, r2
 800c872:	4618      	mov	r0, r3
 800c874:	f7f7 fb24 	bl	8003ec0 <HAL_PCD_SetAddress>
 800c878:	4603      	mov	r3, r0
 800c87a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c87c:	7bfb      	ldrb	r3, [r7, #15]
 800c87e:	4618      	mov	r0, r3
 800c880:	f000 f862 	bl	800c948 <USBD_Get_USB_Status>
 800c884:	4603      	mov	r3, r0
 800c886:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c888:	7bbb      	ldrb	r3, [r7, #14]
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3710      	adds	r7, #16
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}

0800c892 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c892:	b580      	push	{r7, lr}
 800c894:	b086      	sub	sp, #24
 800c896:	af00      	add	r7, sp, #0
 800c898:	60f8      	str	r0, [r7, #12]
 800c89a:	607a      	str	r2, [r7, #4]
 800c89c:	603b      	str	r3, [r7, #0]
 800c89e:	460b      	mov	r3, r1
 800c8a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c8b0:	7af9      	ldrb	r1, [r7, #11]
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	687a      	ldr	r2, [r7, #4]
 800c8b6:	f7f7 fbdb 	bl	8004070 <HAL_PCD_EP_Transmit>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8be:	7dfb      	ldrb	r3, [r7, #23]
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f000 f841 	bl	800c948 <USBD_Get_USB_Status>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c8ca:	7dbb      	ldrb	r3, [r7, #22]
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3718      	adds	r7, #24
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}

0800c8d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b086      	sub	sp, #24
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	60f8      	str	r0, [r7, #12]
 800c8dc:	607a      	str	r2, [r7, #4]
 800c8de:	603b      	str	r3, [r7, #0]
 800c8e0:	460b      	mov	r3, r1
 800c8e2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c8f2:	7af9      	ldrb	r1, [r7, #11]
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	687a      	ldr	r2, [r7, #4]
 800c8f8:	f7f7 fb6f 	bl	8003fda <HAL_PCD_EP_Receive>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c900:	7dfb      	ldrb	r3, [r7, #23]
 800c902:	4618      	mov	r0, r3
 800c904:	f000 f820 	bl	800c948 <USBD_Get_USB_Status>
 800c908:	4603      	mov	r3, r0
 800c90a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c90c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3718      	adds	r7, #24
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}
	...

0800c918 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c918:	b480      	push	{r7}
 800c91a:	b083      	sub	sp, #12
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c920:	4b03      	ldr	r3, [pc, #12]	; (800c930 <USBD_static_malloc+0x18>)
}
 800c922:	4618      	mov	r0, r3
 800c924:	370c      	adds	r7, #12
 800c926:	46bd      	mov	sp, r7
 800c928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92c:	4770      	bx	lr
 800c92e:	bf00      	nop
 800c930:	20004df8 	.word	0x20004df8

0800c934 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c934:	b480      	push	{r7}
 800c936:	b083      	sub	sp, #12
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]

}
 800c93c:	bf00      	nop
 800c93e:	370c      	adds	r7, #12
 800c940:	46bd      	mov	sp, r7
 800c942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c946:	4770      	bx	lr

0800c948 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c948:	b480      	push	{r7}
 800c94a:	b085      	sub	sp, #20
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	4603      	mov	r3, r0
 800c950:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c952:	2300      	movs	r3, #0
 800c954:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c956:	79fb      	ldrb	r3, [r7, #7]
 800c958:	2b03      	cmp	r3, #3
 800c95a:	d817      	bhi.n	800c98c <USBD_Get_USB_Status+0x44>
 800c95c:	a201      	add	r2, pc, #4	; (adr r2, 800c964 <USBD_Get_USB_Status+0x1c>)
 800c95e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c962:	bf00      	nop
 800c964:	0800c975 	.word	0x0800c975
 800c968:	0800c97b 	.word	0x0800c97b
 800c96c:	0800c981 	.word	0x0800c981
 800c970:	0800c987 	.word	0x0800c987
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c974:	2300      	movs	r3, #0
 800c976:	73fb      	strb	r3, [r7, #15]
    break;
 800c978:	e00b      	b.n	800c992 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c97a:	2303      	movs	r3, #3
 800c97c:	73fb      	strb	r3, [r7, #15]
    break;
 800c97e:	e008      	b.n	800c992 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c980:	2301      	movs	r3, #1
 800c982:	73fb      	strb	r3, [r7, #15]
    break;
 800c984:	e005      	b.n	800c992 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c986:	2303      	movs	r3, #3
 800c988:	73fb      	strb	r3, [r7, #15]
    break;
 800c98a:	e002      	b.n	800c992 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c98c:	2303      	movs	r3, #3
 800c98e:	73fb      	strb	r3, [r7, #15]
    break;
 800c990:	bf00      	nop
  }
  return usb_status;
 800c992:	7bfb      	ldrb	r3, [r7, #15]
}
 800c994:	4618      	mov	r0, r3
 800c996:	3714      	adds	r7, #20
 800c998:	46bd      	mov	sp, r7
 800c99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99e:	4770      	bx	lr

0800c9a0 <__errno>:
 800c9a0:	4b01      	ldr	r3, [pc, #4]	; (800c9a8 <__errno+0x8>)
 800c9a2:	6818      	ldr	r0, [r3, #0]
 800c9a4:	4770      	bx	lr
 800c9a6:	bf00      	nop
 800c9a8:	200000e8 	.word	0x200000e8

0800c9ac <__libc_init_array>:
 800c9ac:	b570      	push	{r4, r5, r6, lr}
 800c9ae:	4d0d      	ldr	r5, [pc, #52]	; (800c9e4 <__libc_init_array+0x38>)
 800c9b0:	4c0d      	ldr	r4, [pc, #52]	; (800c9e8 <__libc_init_array+0x3c>)
 800c9b2:	1b64      	subs	r4, r4, r5
 800c9b4:	10a4      	asrs	r4, r4, #2
 800c9b6:	2600      	movs	r6, #0
 800c9b8:	42a6      	cmp	r6, r4
 800c9ba:	d109      	bne.n	800c9d0 <__libc_init_array+0x24>
 800c9bc:	4d0b      	ldr	r5, [pc, #44]	; (800c9ec <__libc_init_array+0x40>)
 800c9be:	4c0c      	ldr	r4, [pc, #48]	; (800c9f0 <__libc_init_array+0x44>)
 800c9c0:	f005 f880 	bl	8011ac4 <_init>
 800c9c4:	1b64      	subs	r4, r4, r5
 800c9c6:	10a4      	asrs	r4, r4, #2
 800c9c8:	2600      	movs	r6, #0
 800c9ca:	42a6      	cmp	r6, r4
 800c9cc:	d105      	bne.n	800c9da <__libc_init_array+0x2e>
 800c9ce:	bd70      	pop	{r4, r5, r6, pc}
 800c9d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9d4:	4798      	blx	r3
 800c9d6:	3601      	adds	r6, #1
 800c9d8:	e7ee      	b.n	800c9b8 <__libc_init_array+0xc>
 800c9da:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9de:	4798      	blx	r3
 800c9e0:	3601      	adds	r6, #1
 800c9e2:	e7f2      	b.n	800c9ca <__libc_init_array+0x1e>
 800c9e4:	08012924 	.word	0x08012924
 800c9e8:	08012924 	.word	0x08012924
 800c9ec:	08012924 	.word	0x08012924
 800c9f0:	08012928 	.word	0x08012928

0800c9f4 <memcpy>:
 800c9f4:	440a      	add	r2, r1
 800c9f6:	4291      	cmp	r1, r2
 800c9f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c9fc:	d100      	bne.n	800ca00 <memcpy+0xc>
 800c9fe:	4770      	bx	lr
 800ca00:	b510      	push	{r4, lr}
 800ca02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca06:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca0a:	4291      	cmp	r1, r2
 800ca0c:	d1f9      	bne.n	800ca02 <memcpy+0xe>
 800ca0e:	bd10      	pop	{r4, pc}

0800ca10 <memset>:
 800ca10:	4402      	add	r2, r0
 800ca12:	4603      	mov	r3, r0
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d100      	bne.n	800ca1a <memset+0xa>
 800ca18:	4770      	bx	lr
 800ca1a:	f803 1b01 	strb.w	r1, [r3], #1
 800ca1e:	e7f9      	b.n	800ca14 <memset+0x4>

0800ca20 <__cvt>:
 800ca20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca24:	ec55 4b10 	vmov	r4, r5, d0
 800ca28:	2d00      	cmp	r5, #0
 800ca2a:	460e      	mov	r6, r1
 800ca2c:	4619      	mov	r1, r3
 800ca2e:	462b      	mov	r3, r5
 800ca30:	bfbb      	ittet	lt
 800ca32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ca36:	461d      	movlt	r5, r3
 800ca38:	2300      	movge	r3, #0
 800ca3a:	232d      	movlt	r3, #45	; 0x2d
 800ca3c:	700b      	strb	r3, [r1, #0]
 800ca3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca40:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ca44:	4691      	mov	r9, r2
 800ca46:	f023 0820 	bic.w	r8, r3, #32
 800ca4a:	bfbc      	itt	lt
 800ca4c:	4622      	movlt	r2, r4
 800ca4e:	4614      	movlt	r4, r2
 800ca50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ca54:	d005      	beq.n	800ca62 <__cvt+0x42>
 800ca56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ca5a:	d100      	bne.n	800ca5e <__cvt+0x3e>
 800ca5c:	3601      	adds	r6, #1
 800ca5e:	2102      	movs	r1, #2
 800ca60:	e000      	b.n	800ca64 <__cvt+0x44>
 800ca62:	2103      	movs	r1, #3
 800ca64:	ab03      	add	r3, sp, #12
 800ca66:	9301      	str	r3, [sp, #4]
 800ca68:	ab02      	add	r3, sp, #8
 800ca6a:	9300      	str	r3, [sp, #0]
 800ca6c:	ec45 4b10 	vmov	d0, r4, r5
 800ca70:	4653      	mov	r3, sl
 800ca72:	4632      	mov	r2, r6
 800ca74:	f001 fe58 	bl	800e728 <_dtoa_r>
 800ca78:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ca7c:	4607      	mov	r7, r0
 800ca7e:	d102      	bne.n	800ca86 <__cvt+0x66>
 800ca80:	f019 0f01 	tst.w	r9, #1
 800ca84:	d022      	beq.n	800cacc <__cvt+0xac>
 800ca86:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ca8a:	eb07 0906 	add.w	r9, r7, r6
 800ca8e:	d110      	bne.n	800cab2 <__cvt+0x92>
 800ca90:	783b      	ldrb	r3, [r7, #0]
 800ca92:	2b30      	cmp	r3, #48	; 0x30
 800ca94:	d10a      	bne.n	800caac <__cvt+0x8c>
 800ca96:	2200      	movs	r2, #0
 800ca98:	2300      	movs	r3, #0
 800ca9a:	4620      	mov	r0, r4
 800ca9c:	4629      	mov	r1, r5
 800ca9e:	f7f4 f81b 	bl	8000ad8 <__aeabi_dcmpeq>
 800caa2:	b918      	cbnz	r0, 800caac <__cvt+0x8c>
 800caa4:	f1c6 0601 	rsb	r6, r6, #1
 800caa8:	f8ca 6000 	str.w	r6, [sl]
 800caac:	f8da 3000 	ldr.w	r3, [sl]
 800cab0:	4499      	add	r9, r3
 800cab2:	2200      	movs	r2, #0
 800cab4:	2300      	movs	r3, #0
 800cab6:	4620      	mov	r0, r4
 800cab8:	4629      	mov	r1, r5
 800caba:	f7f4 f80d 	bl	8000ad8 <__aeabi_dcmpeq>
 800cabe:	b108      	cbz	r0, 800cac4 <__cvt+0xa4>
 800cac0:	f8cd 900c 	str.w	r9, [sp, #12]
 800cac4:	2230      	movs	r2, #48	; 0x30
 800cac6:	9b03      	ldr	r3, [sp, #12]
 800cac8:	454b      	cmp	r3, r9
 800caca:	d307      	bcc.n	800cadc <__cvt+0xbc>
 800cacc:	9b03      	ldr	r3, [sp, #12]
 800cace:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cad0:	1bdb      	subs	r3, r3, r7
 800cad2:	4638      	mov	r0, r7
 800cad4:	6013      	str	r3, [r2, #0]
 800cad6:	b004      	add	sp, #16
 800cad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cadc:	1c59      	adds	r1, r3, #1
 800cade:	9103      	str	r1, [sp, #12]
 800cae0:	701a      	strb	r2, [r3, #0]
 800cae2:	e7f0      	b.n	800cac6 <__cvt+0xa6>

0800cae4 <__exponent>:
 800cae4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cae6:	4603      	mov	r3, r0
 800cae8:	2900      	cmp	r1, #0
 800caea:	bfb8      	it	lt
 800caec:	4249      	neglt	r1, r1
 800caee:	f803 2b02 	strb.w	r2, [r3], #2
 800caf2:	bfb4      	ite	lt
 800caf4:	222d      	movlt	r2, #45	; 0x2d
 800caf6:	222b      	movge	r2, #43	; 0x2b
 800caf8:	2909      	cmp	r1, #9
 800cafa:	7042      	strb	r2, [r0, #1]
 800cafc:	dd2a      	ble.n	800cb54 <__exponent+0x70>
 800cafe:	f10d 0407 	add.w	r4, sp, #7
 800cb02:	46a4      	mov	ip, r4
 800cb04:	270a      	movs	r7, #10
 800cb06:	46a6      	mov	lr, r4
 800cb08:	460a      	mov	r2, r1
 800cb0a:	fb91 f6f7 	sdiv	r6, r1, r7
 800cb0e:	fb07 1516 	mls	r5, r7, r6, r1
 800cb12:	3530      	adds	r5, #48	; 0x30
 800cb14:	2a63      	cmp	r2, #99	; 0x63
 800cb16:	f104 34ff 	add.w	r4, r4, #4294967295
 800cb1a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cb1e:	4631      	mov	r1, r6
 800cb20:	dcf1      	bgt.n	800cb06 <__exponent+0x22>
 800cb22:	3130      	adds	r1, #48	; 0x30
 800cb24:	f1ae 0502 	sub.w	r5, lr, #2
 800cb28:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cb2c:	1c44      	adds	r4, r0, #1
 800cb2e:	4629      	mov	r1, r5
 800cb30:	4561      	cmp	r1, ip
 800cb32:	d30a      	bcc.n	800cb4a <__exponent+0x66>
 800cb34:	f10d 0209 	add.w	r2, sp, #9
 800cb38:	eba2 020e 	sub.w	r2, r2, lr
 800cb3c:	4565      	cmp	r5, ip
 800cb3e:	bf88      	it	hi
 800cb40:	2200      	movhi	r2, #0
 800cb42:	4413      	add	r3, r2
 800cb44:	1a18      	subs	r0, r3, r0
 800cb46:	b003      	add	sp, #12
 800cb48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb4e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cb52:	e7ed      	b.n	800cb30 <__exponent+0x4c>
 800cb54:	2330      	movs	r3, #48	; 0x30
 800cb56:	3130      	adds	r1, #48	; 0x30
 800cb58:	7083      	strb	r3, [r0, #2]
 800cb5a:	70c1      	strb	r1, [r0, #3]
 800cb5c:	1d03      	adds	r3, r0, #4
 800cb5e:	e7f1      	b.n	800cb44 <__exponent+0x60>

0800cb60 <_printf_float>:
 800cb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb64:	ed2d 8b02 	vpush	{d8}
 800cb68:	b08d      	sub	sp, #52	; 0x34
 800cb6a:	460c      	mov	r4, r1
 800cb6c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cb70:	4616      	mov	r6, r2
 800cb72:	461f      	mov	r7, r3
 800cb74:	4605      	mov	r5, r0
 800cb76:	f002 ff33 	bl	800f9e0 <_localeconv_r>
 800cb7a:	f8d0 a000 	ldr.w	sl, [r0]
 800cb7e:	4650      	mov	r0, sl
 800cb80:	f7f3 fb2e 	bl	80001e0 <strlen>
 800cb84:	2300      	movs	r3, #0
 800cb86:	930a      	str	r3, [sp, #40]	; 0x28
 800cb88:	6823      	ldr	r3, [r4, #0]
 800cb8a:	9305      	str	r3, [sp, #20]
 800cb8c:	f8d8 3000 	ldr.w	r3, [r8]
 800cb90:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cb94:	3307      	adds	r3, #7
 800cb96:	f023 0307 	bic.w	r3, r3, #7
 800cb9a:	f103 0208 	add.w	r2, r3, #8
 800cb9e:	f8c8 2000 	str.w	r2, [r8]
 800cba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cbaa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cbae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cbb2:	9307      	str	r3, [sp, #28]
 800cbb4:	f8cd 8018 	str.w	r8, [sp, #24]
 800cbb8:	ee08 0a10 	vmov	s16, r0
 800cbbc:	4b9f      	ldr	r3, [pc, #636]	; (800ce3c <_printf_float+0x2dc>)
 800cbbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cbc2:	f04f 32ff 	mov.w	r2, #4294967295
 800cbc6:	f7f3 ffb9 	bl	8000b3c <__aeabi_dcmpun>
 800cbca:	bb88      	cbnz	r0, 800cc30 <_printf_float+0xd0>
 800cbcc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cbd0:	4b9a      	ldr	r3, [pc, #616]	; (800ce3c <_printf_float+0x2dc>)
 800cbd2:	f04f 32ff 	mov.w	r2, #4294967295
 800cbd6:	f7f3 ff93 	bl	8000b00 <__aeabi_dcmple>
 800cbda:	bb48      	cbnz	r0, 800cc30 <_printf_float+0xd0>
 800cbdc:	2200      	movs	r2, #0
 800cbde:	2300      	movs	r3, #0
 800cbe0:	4640      	mov	r0, r8
 800cbe2:	4649      	mov	r1, r9
 800cbe4:	f7f3 ff82 	bl	8000aec <__aeabi_dcmplt>
 800cbe8:	b110      	cbz	r0, 800cbf0 <_printf_float+0x90>
 800cbea:	232d      	movs	r3, #45	; 0x2d
 800cbec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbf0:	4b93      	ldr	r3, [pc, #588]	; (800ce40 <_printf_float+0x2e0>)
 800cbf2:	4894      	ldr	r0, [pc, #592]	; (800ce44 <_printf_float+0x2e4>)
 800cbf4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cbf8:	bf94      	ite	ls
 800cbfa:	4698      	movls	r8, r3
 800cbfc:	4680      	movhi	r8, r0
 800cbfe:	2303      	movs	r3, #3
 800cc00:	6123      	str	r3, [r4, #16]
 800cc02:	9b05      	ldr	r3, [sp, #20]
 800cc04:	f023 0204 	bic.w	r2, r3, #4
 800cc08:	6022      	str	r2, [r4, #0]
 800cc0a:	f04f 0900 	mov.w	r9, #0
 800cc0e:	9700      	str	r7, [sp, #0]
 800cc10:	4633      	mov	r3, r6
 800cc12:	aa0b      	add	r2, sp, #44	; 0x2c
 800cc14:	4621      	mov	r1, r4
 800cc16:	4628      	mov	r0, r5
 800cc18:	f000 f9d8 	bl	800cfcc <_printf_common>
 800cc1c:	3001      	adds	r0, #1
 800cc1e:	f040 8090 	bne.w	800cd42 <_printf_float+0x1e2>
 800cc22:	f04f 30ff 	mov.w	r0, #4294967295
 800cc26:	b00d      	add	sp, #52	; 0x34
 800cc28:	ecbd 8b02 	vpop	{d8}
 800cc2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc30:	4642      	mov	r2, r8
 800cc32:	464b      	mov	r3, r9
 800cc34:	4640      	mov	r0, r8
 800cc36:	4649      	mov	r1, r9
 800cc38:	f7f3 ff80 	bl	8000b3c <__aeabi_dcmpun>
 800cc3c:	b140      	cbz	r0, 800cc50 <_printf_float+0xf0>
 800cc3e:	464b      	mov	r3, r9
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	bfbc      	itt	lt
 800cc44:	232d      	movlt	r3, #45	; 0x2d
 800cc46:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cc4a:	487f      	ldr	r0, [pc, #508]	; (800ce48 <_printf_float+0x2e8>)
 800cc4c:	4b7f      	ldr	r3, [pc, #508]	; (800ce4c <_printf_float+0x2ec>)
 800cc4e:	e7d1      	b.n	800cbf4 <_printf_float+0x94>
 800cc50:	6863      	ldr	r3, [r4, #4]
 800cc52:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cc56:	9206      	str	r2, [sp, #24]
 800cc58:	1c5a      	adds	r2, r3, #1
 800cc5a:	d13f      	bne.n	800ccdc <_printf_float+0x17c>
 800cc5c:	2306      	movs	r3, #6
 800cc5e:	6063      	str	r3, [r4, #4]
 800cc60:	9b05      	ldr	r3, [sp, #20]
 800cc62:	6861      	ldr	r1, [r4, #4]
 800cc64:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cc68:	2300      	movs	r3, #0
 800cc6a:	9303      	str	r3, [sp, #12]
 800cc6c:	ab0a      	add	r3, sp, #40	; 0x28
 800cc6e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cc72:	ab09      	add	r3, sp, #36	; 0x24
 800cc74:	ec49 8b10 	vmov	d0, r8, r9
 800cc78:	9300      	str	r3, [sp, #0]
 800cc7a:	6022      	str	r2, [r4, #0]
 800cc7c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cc80:	4628      	mov	r0, r5
 800cc82:	f7ff fecd 	bl	800ca20 <__cvt>
 800cc86:	9b06      	ldr	r3, [sp, #24]
 800cc88:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc8a:	2b47      	cmp	r3, #71	; 0x47
 800cc8c:	4680      	mov	r8, r0
 800cc8e:	d108      	bne.n	800cca2 <_printf_float+0x142>
 800cc90:	1cc8      	adds	r0, r1, #3
 800cc92:	db02      	blt.n	800cc9a <_printf_float+0x13a>
 800cc94:	6863      	ldr	r3, [r4, #4]
 800cc96:	4299      	cmp	r1, r3
 800cc98:	dd41      	ble.n	800cd1e <_printf_float+0x1be>
 800cc9a:	f1ab 0b02 	sub.w	fp, fp, #2
 800cc9e:	fa5f fb8b 	uxtb.w	fp, fp
 800cca2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cca6:	d820      	bhi.n	800ccea <_printf_float+0x18a>
 800cca8:	3901      	subs	r1, #1
 800ccaa:	465a      	mov	r2, fp
 800ccac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ccb0:	9109      	str	r1, [sp, #36]	; 0x24
 800ccb2:	f7ff ff17 	bl	800cae4 <__exponent>
 800ccb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ccb8:	1813      	adds	r3, r2, r0
 800ccba:	2a01      	cmp	r2, #1
 800ccbc:	4681      	mov	r9, r0
 800ccbe:	6123      	str	r3, [r4, #16]
 800ccc0:	dc02      	bgt.n	800ccc8 <_printf_float+0x168>
 800ccc2:	6822      	ldr	r2, [r4, #0]
 800ccc4:	07d2      	lsls	r2, r2, #31
 800ccc6:	d501      	bpl.n	800cccc <_printf_float+0x16c>
 800ccc8:	3301      	adds	r3, #1
 800ccca:	6123      	str	r3, [r4, #16]
 800cccc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d09c      	beq.n	800cc0e <_printf_float+0xae>
 800ccd4:	232d      	movs	r3, #45	; 0x2d
 800ccd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccda:	e798      	b.n	800cc0e <_printf_float+0xae>
 800ccdc:	9a06      	ldr	r2, [sp, #24]
 800ccde:	2a47      	cmp	r2, #71	; 0x47
 800cce0:	d1be      	bne.n	800cc60 <_printf_float+0x100>
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d1bc      	bne.n	800cc60 <_printf_float+0x100>
 800cce6:	2301      	movs	r3, #1
 800cce8:	e7b9      	b.n	800cc5e <_printf_float+0xfe>
 800ccea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ccee:	d118      	bne.n	800cd22 <_printf_float+0x1c2>
 800ccf0:	2900      	cmp	r1, #0
 800ccf2:	6863      	ldr	r3, [r4, #4]
 800ccf4:	dd0b      	ble.n	800cd0e <_printf_float+0x1ae>
 800ccf6:	6121      	str	r1, [r4, #16]
 800ccf8:	b913      	cbnz	r3, 800cd00 <_printf_float+0x1a0>
 800ccfa:	6822      	ldr	r2, [r4, #0]
 800ccfc:	07d0      	lsls	r0, r2, #31
 800ccfe:	d502      	bpl.n	800cd06 <_printf_float+0x1a6>
 800cd00:	3301      	adds	r3, #1
 800cd02:	440b      	add	r3, r1
 800cd04:	6123      	str	r3, [r4, #16]
 800cd06:	65a1      	str	r1, [r4, #88]	; 0x58
 800cd08:	f04f 0900 	mov.w	r9, #0
 800cd0c:	e7de      	b.n	800cccc <_printf_float+0x16c>
 800cd0e:	b913      	cbnz	r3, 800cd16 <_printf_float+0x1b6>
 800cd10:	6822      	ldr	r2, [r4, #0]
 800cd12:	07d2      	lsls	r2, r2, #31
 800cd14:	d501      	bpl.n	800cd1a <_printf_float+0x1ba>
 800cd16:	3302      	adds	r3, #2
 800cd18:	e7f4      	b.n	800cd04 <_printf_float+0x1a4>
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	e7f2      	b.n	800cd04 <_printf_float+0x1a4>
 800cd1e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cd22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd24:	4299      	cmp	r1, r3
 800cd26:	db05      	blt.n	800cd34 <_printf_float+0x1d4>
 800cd28:	6823      	ldr	r3, [r4, #0]
 800cd2a:	6121      	str	r1, [r4, #16]
 800cd2c:	07d8      	lsls	r0, r3, #31
 800cd2e:	d5ea      	bpl.n	800cd06 <_printf_float+0x1a6>
 800cd30:	1c4b      	adds	r3, r1, #1
 800cd32:	e7e7      	b.n	800cd04 <_printf_float+0x1a4>
 800cd34:	2900      	cmp	r1, #0
 800cd36:	bfd4      	ite	le
 800cd38:	f1c1 0202 	rsble	r2, r1, #2
 800cd3c:	2201      	movgt	r2, #1
 800cd3e:	4413      	add	r3, r2
 800cd40:	e7e0      	b.n	800cd04 <_printf_float+0x1a4>
 800cd42:	6823      	ldr	r3, [r4, #0]
 800cd44:	055a      	lsls	r2, r3, #21
 800cd46:	d407      	bmi.n	800cd58 <_printf_float+0x1f8>
 800cd48:	6923      	ldr	r3, [r4, #16]
 800cd4a:	4642      	mov	r2, r8
 800cd4c:	4631      	mov	r1, r6
 800cd4e:	4628      	mov	r0, r5
 800cd50:	47b8      	blx	r7
 800cd52:	3001      	adds	r0, #1
 800cd54:	d12c      	bne.n	800cdb0 <_printf_float+0x250>
 800cd56:	e764      	b.n	800cc22 <_printf_float+0xc2>
 800cd58:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cd5c:	f240 80e0 	bls.w	800cf20 <_printf_float+0x3c0>
 800cd60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cd64:	2200      	movs	r2, #0
 800cd66:	2300      	movs	r3, #0
 800cd68:	f7f3 feb6 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd6c:	2800      	cmp	r0, #0
 800cd6e:	d034      	beq.n	800cdda <_printf_float+0x27a>
 800cd70:	4a37      	ldr	r2, [pc, #220]	; (800ce50 <_printf_float+0x2f0>)
 800cd72:	2301      	movs	r3, #1
 800cd74:	4631      	mov	r1, r6
 800cd76:	4628      	mov	r0, r5
 800cd78:	47b8      	blx	r7
 800cd7a:	3001      	adds	r0, #1
 800cd7c:	f43f af51 	beq.w	800cc22 <_printf_float+0xc2>
 800cd80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd84:	429a      	cmp	r2, r3
 800cd86:	db02      	blt.n	800cd8e <_printf_float+0x22e>
 800cd88:	6823      	ldr	r3, [r4, #0]
 800cd8a:	07d8      	lsls	r0, r3, #31
 800cd8c:	d510      	bpl.n	800cdb0 <_printf_float+0x250>
 800cd8e:	ee18 3a10 	vmov	r3, s16
 800cd92:	4652      	mov	r2, sl
 800cd94:	4631      	mov	r1, r6
 800cd96:	4628      	mov	r0, r5
 800cd98:	47b8      	blx	r7
 800cd9a:	3001      	adds	r0, #1
 800cd9c:	f43f af41 	beq.w	800cc22 <_printf_float+0xc2>
 800cda0:	f04f 0800 	mov.w	r8, #0
 800cda4:	f104 091a 	add.w	r9, r4, #26
 800cda8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdaa:	3b01      	subs	r3, #1
 800cdac:	4543      	cmp	r3, r8
 800cdae:	dc09      	bgt.n	800cdc4 <_printf_float+0x264>
 800cdb0:	6823      	ldr	r3, [r4, #0]
 800cdb2:	079b      	lsls	r3, r3, #30
 800cdb4:	f100 8105 	bmi.w	800cfc2 <_printf_float+0x462>
 800cdb8:	68e0      	ldr	r0, [r4, #12]
 800cdba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdbc:	4298      	cmp	r0, r3
 800cdbe:	bfb8      	it	lt
 800cdc0:	4618      	movlt	r0, r3
 800cdc2:	e730      	b.n	800cc26 <_printf_float+0xc6>
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	464a      	mov	r2, r9
 800cdc8:	4631      	mov	r1, r6
 800cdca:	4628      	mov	r0, r5
 800cdcc:	47b8      	blx	r7
 800cdce:	3001      	adds	r0, #1
 800cdd0:	f43f af27 	beq.w	800cc22 <_printf_float+0xc2>
 800cdd4:	f108 0801 	add.w	r8, r8, #1
 800cdd8:	e7e6      	b.n	800cda8 <_printf_float+0x248>
 800cdda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	dc39      	bgt.n	800ce54 <_printf_float+0x2f4>
 800cde0:	4a1b      	ldr	r2, [pc, #108]	; (800ce50 <_printf_float+0x2f0>)
 800cde2:	2301      	movs	r3, #1
 800cde4:	4631      	mov	r1, r6
 800cde6:	4628      	mov	r0, r5
 800cde8:	47b8      	blx	r7
 800cdea:	3001      	adds	r0, #1
 800cdec:	f43f af19 	beq.w	800cc22 <_printf_float+0xc2>
 800cdf0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cdf4:	4313      	orrs	r3, r2
 800cdf6:	d102      	bne.n	800cdfe <_printf_float+0x29e>
 800cdf8:	6823      	ldr	r3, [r4, #0]
 800cdfa:	07d9      	lsls	r1, r3, #31
 800cdfc:	d5d8      	bpl.n	800cdb0 <_printf_float+0x250>
 800cdfe:	ee18 3a10 	vmov	r3, s16
 800ce02:	4652      	mov	r2, sl
 800ce04:	4631      	mov	r1, r6
 800ce06:	4628      	mov	r0, r5
 800ce08:	47b8      	blx	r7
 800ce0a:	3001      	adds	r0, #1
 800ce0c:	f43f af09 	beq.w	800cc22 <_printf_float+0xc2>
 800ce10:	f04f 0900 	mov.w	r9, #0
 800ce14:	f104 0a1a 	add.w	sl, r4, #26
 800ce18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce1a:	425b      	negs	r3, r3
 800ce1c:	454b      	cmp	r3, r9
 800ce1e:	dc01      	bgt.n	800ce24 <_printf_float+0x2c4>
 800ce20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce22:	e792      	b.n	800cd4a <_printf_float+0x1ea>
 800ce24:	2301      	movs	r3, #1
 800ce26:	4652      	mov	r2, sl
 800ce28:	4631      	mov	r1, r6
 800ce2a:	4628      	mov	r0, r5
 800ce2c:	47b8      	blx	r7
 800ce2e:	3001      	adds	r0, #1
 800ce30:	f43f aef7 	beq.w	800cc22 <_printf_float+0xc2>
 800ce34:	f109 0901 	add.w	r9, r9, #1
 800ce38:	e7ee      	b.n	800ce18 <_printf_float+0x2b8>
 800ce3a:	bf00      	nop
 800ce3c:	7fefffff 	.word	0x7fefffff
 800ce40:	08012454 	.word	0x08012454
 800ce44:	08012458 	.word	0x08012458
 800ce48:	08012460 	.word	0x08012460
 800ce4c:	0801245c 	.word	0x0801245c
 800ce50:	08012869 	.word	0x08012869
 800ce54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	bfa8      	it	ge
 800ce5c:	461a      	movge	r2, r3
 800ce5e:	2a00      	cmp	r2, #0
 800ce60:	4691      	mov	r9, r2
 800ce62:	dc37      	bgt.n	800ced4 <_printf_float+0x374>
 800ce64:	f04f 0b00 	mov.w	fp, #0
 800ce68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ce6c:	f104 021a 	add.w	r2, r4, #26
 800ce70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ce72:	9305      	str	r3, [sp, #20]
 800ce74:	eba3 0309 	sub.w	r3, r3, r9
 800ce78:	455b      	cmp	r3, fp
 800ce7a:	dc33      	bgt.n	800cee4 <_printf_float+0x384>
 800ce7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce80:	429a      	cmp	r2, r3
 800ce82:	db3b      	blt.n	800cefc <_printf_float+0x39c>
 800ce84:	6823      	ldr	r3, [r4, #0]
 800ce86:	07da      	lsls	r2, r3, #31
 800ce88:	d438      	bmi.n	800cefc <_printf_float+0x39c>
 800ce8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce8c:	9b05      	ldr	r3, [sp, #20]
 800ce8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ce90:	1ad3      	subs	r3, r2, r3
 800ce92:	eba2 0901 	sub.w	r9, r2, r1
 800ce96:	4599      	cmp	r9, r3
 800ce98:	bfa8      	it	ge
 800ce9a:	4699      	movge	r9, r3
 800ce9c:	f1b9 0f00 	cmp.w	r9, #0
 800cea0:	dc35      	bgt.n	800cf0e <_printf_float+0x3ae>
 800cea2:	f04f 0800 	mov.w	r8, #0
 800cea6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ceaa:	f104 0a1a 	add.w	sl, r4, #26
 800ceae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ceb2:	1a9b      	subs	r3, r3, r2
 800ceb4:	eba3 0309 	sub.w	r3, r3, r9
 800ceb8:	4543      	cmp	r3, r8
 800ceba:	f77f af79 	ble.w	800cdb0 <_printf_float+0x250>
 800cebe:	2301      	movs	r3, #1
 800cec0:	4652      	mov	r2, sl
 800cec2:	4631      	mov	r1, r6
 800cec4:	4628      	mov	r0, r5
 800cec6:	47b8      	blx	r7
 800cec8:	3001      	adds	r0, #1
 800ceca:	f43f aeaa 	beq.w	800cc22 <_printf_float+0xc2>
 800cece:	f108 0801 	add.w	r8, r8, #1
 800ced2:	e7ec      	b.n	800ceae <_printf_float+0x34e>
 800ced4:	4613      	mov	r3, r2
 800ced6:	4631      	mov	r1, r6
 800ced8:	4642      	mov	r2, r8
 800ceda:	4628      	mov	r0, r5
 800cedc:	47b8      	blx	r7
 800cede:	3001      	adds	r0, #1
 800cee0:	d1c0      	bne.n	800ce64 <_printf_float+0x304>
 800cee2:	e69e      	b.n	800cc22 <_printf_float+0xc2>
 800cee4:	2301      	movs	r3, #1
 800cee6:	4631      	mov	r1, r6
 800cee8:	4628      	mov	r0, r5
 800ceea:	9205      	str	r2, [sp, #20]
 800ceec:	47b8      	blx	r7
 800ceee:	3001      	adds	r0, #1
 800cef0:	f43f ae97 	beq.w	800cc22 <_printf_float+0xc2>
 800cef4:	9a05      	ldr	r2, [sp, #20]
 800cef6:	f10b 0b01 	add.w	fp, fp, #1
 800cefa:	e7b9      	b.n	800ce70 <_printf_float+0x310>
 800cefc:	ee18 3a10 	vmov	r3, s16
 800cf00:	4652      	mov	r2, sl
 800cf02:	4631      	mov	r1, r6
 800cf04:	4628      	mov	r0, r5
 800cf06:	47b8      	blx	r7
 800cf08:	3001      	adds	r0, #1
 800cf0a:	d1be      	bne.n	800ce8a <_printf_float+0x32a>
 800cf0c:	e689      	b.n	800cc22 <_printf_float+0xc2>
 800cf0e:	9a05      	ldr	r2, [sp, #20]
 800cf10:	464b      	mov	r3, r9
 800cf12:	4442      	add	r2, r8
 800cf14:	4631      	mov	r1, r6
 800cf16:	4628      	mov	r0, r5
 800cf18:	47b8      	blx	r7
 800cf1a:	3001      	adds	r0, #1
 800cf1c:	d1c1      	bne.n	800cea2 <_printf_float+0x342>
 800cf1e:	e680      	b.n	800cc22 <_printf_float+0xc2>
 800cf20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf22:	2a01      	cmp	r2, #1
 800cf24:	dc01      	bgt.n	800cf2a <_printf_float+0x3ca>
 800cf26:	07db      	lsls	r3, r3, #31
 800cf28:	d538      	bpl.n	800cf9c <_printf_float+0x43c>
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	4642      	mov	r2, r8
 800cf2e:	4631      	mov	r1, r6
 800cf30:	4628      	mov	r0, r5
 800cf32:	47b8      	blx	r7
 800cf34:	3001      	adds	r0, #1
 800cf36:	f43f ae74 	beq.w	800cc22 <_printf_float+0xc2>
 800cf3a:	ee18 3a10 	vmov	r3, s16
 800cf3e:	4652      	mov	r2, sl
 800cf40:	4631      	mov	r1, r6
 800cf42:	4628      	mov	r0, r5
 800cf44:	47b8      	blx	r7
 800cf46:	3001      	adds	r0, #1
 800cf48:	f43f ae6b 	beq.w	800cc22 <_printf_float+0xc2>
 800cf4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cf50:	2200      	movs	r2, #0
 800cf52:	2300      	movs	r3, #0
 800cf54:	f7f3 fdc0 	bl	8000ad8 <__aeabi_dcmpeq>
 800cf58:	b9d8      	cbnz	r0, 800cf92 <_printf_float+0x432>
 800cf5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf5c:	f108 0201 	add.w	r2, r8, #1
 800cf60:	3b01      	subs	r3, #1
 800cf62:	4631      	mov	r1, r6
 800cf64:	4628      	mov	r0, r5
 800cf66:	47b8      	blx	r7
 800cf68:	3001      	adds	r0, #1
 800cf6a:	d10e      	bne.n	800cf8a <_printf_float+0x42a>
 800cf6c:	e659      	b.n	800cc22 <_printf_float+0xc2>
 800cf6e:	2301      	movs	r3, #1
 800cf70:	4652      	mov	r2, sl
 800cf72:	4631      	mov	r1, r6
 800cf74:	4628      	mov	r0, r5
 800cf76:	47b8      	blx	r7
 800cf78:	3001      	adds	r0, #1
 800cf7a:	f43f ae52 	beq.w	800cc22 <_printf_float+0xc2>
 800cf7e:	f108 0801 	add.w	r8, r8, #1
 800cf82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf84:	3b01      	subs	r3, #1
 800cf86:	4543      	cmp	r3, r8
 800cf88:	dcf1      	bgt.n	800cf6e <_printf_float+0x40e>
 800cf8a:	464b      	mov	r3, r9
 800cf8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cf90:	e6dc      	b.n	800cd4c <_printf_float+0x1ec>
 800cf92:	f04f 0800 	mov.w	r8, #0
 800cf96:	f104 0a1a 	add.w	sl, r4, #26
 800cf9a:	e7f2      	b.n	800cf82 <_printf_float+0x422>
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	4642      	mov	r2, r8
 800cfa0:	e7df      	b.n	800cf62 <_printf_float+0x402>
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	464a      	mov	r2, r9
 800cfa6:	4631      	mov	r1, r6
 800cfa8:	4628      	mov	r0, r5
 800cfaa:	47b8      	blx	r7
 800cfac:	3001      	adds	r0, #1
 800cfae:	f43f ae38 	beq.w	800cc22 <_printf_float+0xc2>
 800cfb2:	f108 0801 	add.w	r8, r8, #1
 800cfb6:	68e3      	ldr	r3, [r4, #12]
 800cfb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cfba:	1a5b      	subs	r3, r3, r1
 800cfbc:	4543      	cmp	r3, r8
 800cfbe:	dcf0      	bgt.n	800cfa2 <_printf_float+0x442>
 800cfc0:	e6fa      	b.n	800cdb8 <_printf_float+0x258>
 800cfc2:	f04f 0800 	mov.w	r8, #0
 800cfc6:	f104 0919 	add.w	r9, r4, #25
 800cfca:	e7f4      	b.n	800cfb6 <_printf_float+0x456>

0800cfcc <_printf_common>:
 800cfcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfd0:	4616      	mov	r6, r2
 800cfd2:	4699      	mov	r9, r3
 800cfd4:	688a      	ldr	r2, [r1, #8]
 800cfd6:	690b      	ldr	r3, [r1, #16]
 800cfd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	bfb8      	it	lt
 800cfe0:	4613      	movlt	r3, r2
 800cfe2:	6033      	str	r3, [r6, #0]
 800cfe4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cfe8:	4607      	mov	r7, r0
 800cfea:	460c      	mov	r4, r1
 800cfec:	b10a      	cbz	r2, 800cff2 <_printf_common+0x26>
 800cfee:	3301      	adds	r3, #1
 800cff0:	6033      	str	r3, [r6, #0]
 800cff2:	6823      	ldr	r3, [r4, #0]
 800cff4:	0699      	lsls	r1, r3, #26
 800cff6:	bf42      	ittt	mi
 800cff8:	6833      	ldrmi	r3, [r6, #0]
 800cffa:	3302      	addmi	r3, #2
 800cffc:	6033      	strmi	r3, [r6, #0]
 800cffe:	6825      	ldr	r5, [r4, #0]
 800d000:	f015 0506 	ands.w	r5, r5, #6
 800d004:	d106      	bne.n	800d014 <_printf_common+0x48>
 800d006:	f104 0a19 	add.w	sl, r4, #25
 800d00a:	68e3      	ldr	r3, [r4, #12]
 800d00c:	6832      	ldr	r2, [r6, #0]
 800d00e:	1a9b      	subs	r3, r3, r2
 800d010:	42ab      	cmp	r3, r5
 800d012:	dc26      	bgt.n	800d062 <_printf_common+0x96>
 800d014:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d018:	1e13      	subs	r3, r2, #0
 800d01a:	6822      	ldr	r2, [r4, #0]
 800d01c:	bf18      	it	ne
 800d01e:	2301      	movne	r3, #1
 800d020:	0692      	lsls	r2, r2, #26
 800d022:	d42b      	bmi.n	800d07c <_printf_common+0xb0>
 800d024:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d028:	4649      	mov	r1, r9
 800d02a:	4638      	mov	r0, r7
 800d02c:	47c0      	blx	r8
 800d02e:	3001      	adds	r0, #1
 800d030:	d01e      	beq.n	800d070 <_printf_common+0xa4>
 800d032:	6823      	ldr	r3, [r4, #0]
 800d034:	68e5      	ldr	r5, [r4, #12]
 800d036:	6832      	ldr	r2, [r6, #0]
 800d038:	f003 0306 	and.w	r3, r3, #6
 800d03c:	2b04      	cmp	r3, #4
 800d03e:	bf08      	it	eq
 800d040:	1aad      	subeq	r5, r5, r2
 800d042:	68a3      	ldr	r3, [r4, #8]
 800d044:	6922      	ldr	r2, [r4, #16]
 800d046:	bf0c      	ite	eq
 800d048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d04c:	2500      	movne	r5, #0
 800d04e:	4293      	cmp	r3, r2
 800d050:	bfc4      	itt	gt
 800d052:	1a9b      	subgt	r3, r3, r2
 800d054:	18ed      	addgt	r5, r5, r3
 800d056:	2600      	movs	r6, #0
 800d058:	341a      	adds	r4, #26
 800d05a:	42b5      	cmp	r5, r6
 800d05c:	d11a      	bne.n	800d094 <_printf_common+0xc8>
 800d05e:	2000      	movs	r0, #0
 800d060:	e008      	b.n	800d074 <_printf_common+0xa8>
 800d062:	2301      	movs	r3, #1
 800d064:	4652      	mov	r2, sl
 800d066:	4649      	mov	r1, r9
 800d068:	4638      	mov	r0, r7
 800d06a:	47c0      	blx	r8
 800d06c:	3001      	adds	r0, #1
 800d06e:	d103      	bne.n	800d078 <_printf_common+0xac>
 800d070:	f04f 30ff 	mov.w	r0, #4294967295
 800d074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d078:	3501      	adds	r5, #1
 800d07a:	e7c6      	b.n	800d00a <_printf_common+0x3e>
 800d07c:	18e1      	adds	r1, r4, r3
 800d07e:	1c5a      	adds	r2, r3, #1
 800d080:	2030      	movs	r0, #48	; 0x30
 800d082:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d086:	4422      	add	r2, r4
 800d088:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d08c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d090:	3302      	adds	r3, #2
 800d092:	e7c7      	b.n	800d024 <_printf_common+0x58>
 800d094:	2301      	movs	r3, #1
 800d096:	4622      	mov	r2, r4
 800d098:	4649      	mov	r1, r9
 800d09a:	4638      	mov	r0, r7
 800d09c:	47c0      	blx	r8
 800d09e:	3001      	adds	r0, #1
 800d0a0:	d0e6      	beq.n	800d070 <_printf_common+0xa4>
 800d0a2:	3601      	adds	r6, #1
 800d0a4:	e7d9      	b.n	800d05a <_printf_common+0x8e>
	...

0800d0a8 <_printf_i>:
 800d0a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0ac:	460c      	mov	r4, r1
 800d0ae:	4691      	mov	r9, r2
 800d0b0:	7e27      	ldrb	r7, [r4, #24]
 800d0b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d0b4:	2f78      	cmp	r7, #120	; 0x78
 800d0b6:	4680      	mov	r8, r0
 800d0b8:	469a      	mov	sl, r3
 800d0ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d0be:	d807      	bhi.n	800d0d0 <_printf_i+0x28>
 800d0c0:	2f62      	cmp	r7, #98	; 0x62
 800d0c2:	d80a      	bhi.n	800d0da <_printf_i+0x32>
 800d0c4:	2f00      	cmp	r7, #0
 800d0c6:	f000 80d8 	beq.w	800d27a <_printf_i+0x1d2>
 800d0ca:	2f58      	cmp	r7, #88	; 0x58
 800d0cc:	f000 80a3 	beq.w	800d216 <_printf_i+0x16e>
 800d0d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d0d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d0d8:	e03a      	b.n	800d150 <_printf_i+0xa8>
 800d0da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d0de:	2b15      	cmp	r3, #21
 800d0e0:	d8f6      	bhi.n	800d0d0 <_printf_i+0x28>
 800d0e2:	a001      	add	r0, pc, #4	; (adr r0, 800d0e8 <_printf_i+0x40>)
 800d0e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d0e8:	0800d141 	.word	0x0800d141
 800d0ec:	0800d155 	.word	0x0800d155
 800d0f0:	0800d0d1 	.word	0x0800d0d1
 800d0f4:	0800d0d1 	.word	0x0800d0d1
 800d0f8:	0800d0d1 	.word	0x0800d0d1
 800d0fc:	0800d0d1 	.word	0x0800d0d1
 800d100:	0800d155 	.word	0x0800d155
 800d104:	0800d0d1 	.word	0x0800d0d1
 800d108:	0800d0d1 	.word	0x0800d0d1
 800d10c:	0800d0d1 	.word	0x0800d0d1
 800d110:	0800d0d1 	.word	0x0800d0d1
 800d114:	0800d261 	.word	0x0800d261
 800d118:	0800d185 	.word	0x0800d185
 800d11c:	0800d243 	.word	0x0800d243
 800d120:	0800d0d1 	.word	0x0800d0d1
 800d124:	0800d0d1 	.word	0x0800d0d1
 800d128:	0800d283 	.word	0x0800d283
 800d12c:	0800d0d1 	.word	0x0800d0d1
 800d130:	0800d185 	.word	0x0800d185
 800d134:	0800d0d1 	.word	0x0800d0d1
 800d138:	0800d0d1 	.word	0x0800d0d1
 800d13c:	0800d24b 	.word	0x0800d24b
 800d140:	680b      	ldr	r3, [r1, #0]
 800d142:	1d1a      	adds	r2, r3, #4
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	600a      	str	r2, [r1, #0]
 800d148:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d14c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d150:	2301      	movs	r3, #1
 800d152:	e0a3      	b.n	800d29c <_printf_i+0x1f4>
 800d154:	6825      	ldr	r5, [r4, #0]
 800d156:	6808      	ldr	r0, [r1, #0]
 800d158:	062e      	lsls	r6, r5, #24
 800d15a:	f100 0304 	add.w	r3, r0, #4
 800d15e:	d50a      	bpl.n	800d176 <_printf_i+0xce>
 800d160:	6805      	ldr	r5, [r0, #0]
 800d162:	600b      	str	r3, [r1, #0]
 800d164:	2d00      	cmp	r5, #0
 800d166:	da03      	bge.n	800d170 <_printf_i+0xc8>
 800d168:	232d      	movs	r3, #45	; 0x2d
 800d16a:	426d      	negs	r5, r5
 800d16c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d170:	485e      	ldr	r0, [pc, #376]	; (800d2ec <_printf_i+0x244>)
 800d172:	230a      	movs	r3, #10
 800d174:	e019      	b.n	800d1aa <_printf_i+0x102>
 800d176:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d17a:	6805      	ldr	r5, [r0, #0]
 800d17c:	600b      	str	r3, [r1, #0]
 800d17e:	bf18      	it	ne
 800d180:	b22d      	sxthne	r5, r5
 800d182:	e7ef      	b.n	800d164 <_printf_i+0xbc>
 800d184:	680b      	ldr	r3, [r1, #0]
 800d186:	6825      	ldr	r5, [r4, #0]
 800d188:	1d18      	adds	r0, r3, #4
 800d18a:	6008      	str	r0, [r1, #0]
 800d18c:	0628      	lsls	r0, r5, #24
 800d18e:	d501      	bpl.n	800d194 <_printf_i+0xec>
 800d190:	681d      	ldr	r5, [r3, #0]
 800d192:	e002      	b.n	800d19a <_printf_i+0xf2>
 800d194:	0669      	lsls	r1, r5, #25
 800d196:	d5fb      	bpl.n	800d190 <_printf_i+0xe8>
 800d198:	881d      	ldrh	r5, [r3, #0]
 800d19a:	4854      	ldr	r0, [pc, #336]	; (800d2ec <_printf_i+0x244>)
 800d19c:	2f6f      	cmp	r7, #111	; 0x6f
 800d19e:	bf0c      	ite	eq
 800d1a0:	2308      	moveq	r3, #8
 800d1a2:	230a      	movne	r3, #10
 800d1a4:	2100      	movs	r1, #0
 800d1a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d1aa:	6866      	ldr	r6, [r4, #4]
 800d1ac:	60a6      	str	r6, [r4, #8]
 800d1ae:	2e00      	cmp	r6, #0
 800d1b0:	bfa2      	ittt	ge
 800d1b2:	6821      	ldrge	r1, [r4, #0]
 800d1b4:	f021 0104 	bicge.w	r1, r1, #4
 800d1b8:	6021      	strge	r1, [r4, #0]
 800d1ba:	b90d      	cbnz	r5, 800d1c0 <_printf_i+0x118>
 800d1bc:	2e00      	cmp	r6, #0
 800d1be:	d04d      	beq.n	800d25c <_printf_i+0x1b4>
 800d1c0:	4616      	mov	r6, r2
 800d1c2:	fbb5 f1f3 	udiv	r1, r5, r3
 800d1c6:	fb03 5711 	mls	r7, r3, r1, r5
 800d1ca:	5dc7      	ldrb	r7, [r0, r7]
 800d1cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d1d0:	462f      	mov	r7, r5
 800d1d2:	42bb      	cmp	r3, r7
 800d1d4:	460d      	mov	r5, r1
 800d1d6:	d9f4      	bls.n	800d1c2 <_printf_i+0x11a>
 800d1d8:	2b08      	cmp	r3, #8
 800d1da:	d10b      	bne.n	800d1f4 <_printf_i+0x14c>
 800d1dc:	6823      	ldr	r3, [r4, #0]
 800d1de:	07df      	lsls	r7, r3, #31
 800d1e0:	d508      	bpl.n	800d1f4 <_printf_i+0x14c>
 800d1e2:	6923      	ldr	r3, [r4, #16]
 800d1e4:	6861      	ldr	r1, [r4, #4]
 800d1e6:	4299      	cmp	r1, r3
 800d1e8:	bfde      	ittt	le
 800d1ea:	2330      	movle	r3, #48	; 0x30
 800d1ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d1f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d1f4:	1b92      	subs	r2, r2, r6
 800d1f6:	6122      	str	r2, [r4, #16]
 800d1f8:	f8cd a000 	str.w	sl, [sp]
 800d1fc:	464b      	mov	r3, r9
 800d1fe:	aa03      	add	r2, sp, #12
 800d200:	4621      	mov	r1, r4
 800d202:	4640      	mov	r0, r8
 800d204:	f7ff fee2 	bl	800cfcc <_printf_common>
 800d208:	3001      	adds	r0, #1
 800d20a:	d14c      	bne.n	800d2a6 <_printf_i+0x1fe>
 800d20c:	f04f 30ff 	mov.w	r0, #4294967295
 800d210:	b004      	add	sp, #16
 800d212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d216:	4835      	ldr	r0, [pc, #212]	; (800d2ec <_printf_i+0x244>)
 800d218:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d21c:	6823      	ldr	r3, [r4, #0]
 800d21e:	680e      	ldr	r6, [r1, #0]
 800d220:	061f      	lsls	r7, r3, #24
 800d222:	f856 5b04 	ldr.w	r5, [r6], #4
 800d226:	600e      	str	r6, [r1, #0]
 800d228:	d514      	bpl.n	800d254 <_printf_i+0x1ac>
 800d22a:	07d9      	lsls	r1, r3, #31
 800d22c:	bf44      	itt	mi
 800d22e:	f043 0320 	orrmi.w	r3, r3, #32
 800d232:	6023      	strmi	r3, [r4, #0]
 800d234:	b91d      	cbnz	r5, 800d23e <_printf_i+0x196>
 800d236:	6823      	ldr	r3, [r4, #0]
 800d238:	f023 0320 	bic.w	r3, r3, #32
 800d23c:	6023      	str	r3, [r4, #0]
 800d23e:	2310      	movs	r3, #16
 800d240:	e7b0      	b.n	800d1a4 <_printf_i+0xfc>
 800d242:	6823      	ldr	r3, [r4, #0]
 800d244:	f043 0320 	orr.w	r3, r3, #32
 800d248:	6023      	str	r3, [r4, #0]
 800d24a:	2378      	movs	r3, #120	; 0x78
 800d24c:	4828      	ldr	r0, [pc, #160]	; (800d2f0 <_printf_i+0x248>)
 800d24e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d252:	e7e3      	b.n	800d21c <_printf_i+0x174>
 800d254:	065e      	lsls	r6, r3, #25
 800d256:	bf48      	it	mi
 800d258:	b2ad      	uxthmi	r5, r5
 800d25a:	e7e6      	b.n	800d22a <_printf_i+0x182>
 800d25c:	4616      	mov	r6, r2
 800d25e:	e7bb      	b.n	800d1d8 <_printf_i+0x130>
 800d260:	680b      	ldr	r3, [r1, #0]
 800d262:	6826      	ldr	r6, [r4, #0]
 800d264:	6960      	ldr	r0, [r4, #20]
 800d266:	1d1d      	adds	r5, r3, #4
 800d268:	600d      	str	r5, [r1, #0]
 800d26a:	0635      	lsls	r5, r6, #24
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	d501      	bpl.n	800d274 <_printf_i+0x1cc>
 800d270:	6018      	str	r0, [r3, #0]
 800d272:	e002      	b.n	800d27a <_printf_i+0x1d2>
 800d274:	0671      	lsls	r1, r6, #25
 800d276:	d5fb      	bpl.n	800d270 <_printf_i+0x1c8>
 800d278:	8018      	strh	r0, [r3, #0]
 800d27a:	2300      	movs	r3, #0
 800d27c:	6123      	str	r3, [r4, #16]
 800d27e:	4616      	mov	r6, r2
 800d280:	e7ba      	b.n	800d1f8 <_printf_i+0x150>
 800d282:	680b      	ldr	r3, [r1, #0]
 800d284:	1d1a      	adds	r2, r3, #4
 800d286:	600a      	str	r2, [r1, #0]
 800d288:	681e      	ldr	r6, [r3, #0]
 800d28a:	6862      	ldr	r2, [r4, #4]
 800d28c:	2100      	movs	r1, #0
 800d28e:	4630      	mov	r0, r6
 800d290:	f7f2 ffae 	bl	80001f0 <memchr>
 800d294:	b108      	cbz	r0, 800d29a <_printf_i+0x1f2>
 800d296:	1b80      	subs	r0, r0, r6
 800d298:	6060      	str	r0, [r4, #4]
 800d29a:	6863      	ldr	r3, [r4, #4]
 800d29c:	6123      	str	r3, [r4, #16]
 800d29e:	2300      	movs	r3, #0
 800d2a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2a4:	e7a8      	b.n	800d1f8 <_printf_i+0x150>
 800d2a6:	6923      	ldr	r3, [r4, #16]
 800d2a8:	4632      	mov	r2, r6
 800d2aa:	4649      	mov	r1, r9
 800d2ac:	4640      	mov	r0, r8
 800d2ae:	47d0      	blx	sl
 800d2b0:	3001      	adds	r0, #1
 800d2b2:	d0ab      	beq.n	800d20c <_printf_i+0x164>
 800d2b4:	6823      	ldr	r3, [r4, #0]
 800d2b6:	079b      	lsls	r3, r3, #30
 800d2b8:	d413      	bmi.n	800d2e2 <_printf_i+0x23a>
 800d2ba:	68e0      	ldr	r0, [r4, #12]
 800d2bc:	9b03      	ldr	r3, [sp, #12]
 800d2be:	4298      	cmp	r0, r3
 800d2c0:	bfb8      	it	lt
 800d2c2:	4618      	movlt	r0, r3
 800d2c4:	e7a4      	b.n	800d210 <_printf_i+0x168>
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	4632      	mov	r2, r6
 800d2ca:	4649      	mov	r1, r9
 800d2cc:	4640      	mov	r0, r8
 800d2ce:	47d0      	blx	sl
 800d2d0:	3001      	adds	r0, #1
 800d2d2:	d09b      	beq.n	800d20c <_printf_i+0x164>
 800d2d4:	3501      	adds	r5, #1
 800d2d6:	68e3      	ldr	r3, [r4, #12]
 800d2d8:	9903      	ldr	r1, [sp, #12]
 800d2da:	1a5b      	subs	r3, r3, r1
 800d2dc:	42ab      	cmp	r3, r5
 800d2de:	dcf2      	bgt.n	800d2c6 <_printf_i+0x21e>
 800d2e0:	e7eb      	b.n	800d2ba <_printf_i+0x212>
 800d2e2:	2500      	movs	r5, #0
 800d2e4:	f104 0619 	add.w	r6, r4, #25
 800d2e8:	e7f5      	b.n	800d2d6 <_printf_i+0x22e>
 800d2ea:	bf00      	nop
 800d2ec:	08012464 	.word	0x08012464
 800d2f0:	08012475 	.word	0x08012475

0800d2f4 <_scanf_float>:
 800d2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2f8:	b087      	sub	sp, #28
 800d2fa:	4617      	mov	r7, r2
 800d2fc:	9303      	str	r3, [sp, #12]
 800d2fe:	688b      	ldr	r3, [r1, #8]
 800d300:	1e5a      	subs	r2, r3, #1
 800d302:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d306:	bf83      	ittte	hi
 800d308:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d30c:	195b      	addhi	r3, r3, r5
 800d30e:	9302      	strhi	r3, [sp, #8]
 800d310:	2300      	movls	r3, #0
 800d312:	bf86      	itte	hi
 800d314:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d318:	608b      	strhi	r3, [r1, #8]
 800d31a:	9302      	strls	r3, [sp, #8]
 800d31c:	680b      	ldr	r3, [r1, #0]
 800d31e:	468b      	mov	fp, r1
 800d320:	2500      	movs	r5, #0
 800d322:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d326:	f84b 3b1c 	str.w	r3, [fp], #28
 800d32a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d32e:	4680      	mov	r8, r0
 800d330:	460c      	mov	r4, r1
 800d332:	465e      	mov	r6, fp
 800d334:	46aa      	mov	sl, r5
 800d336:	46a9      	mov	r9, r5
 800d338:	9501      	str	r5, [sp, #4]
 800d33a:	68a2      	ldr	r2, [r4, #8]
 800d33c:	b152      	cbz	r2, 800d354 <_scanf_float+0x60>
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	781b      	ldrb	r3, [r3, #0]
 800d342:	2b4e      	cmp	r3, #78	; 0x4e
 800d344:	d864      	bhi.n	800d410 <_scanf_float+0x11c>
 800d346:	2b40      	cmp	r3, #64	; 0x40
 800d348:	d83c      	bhi.n	800d3c4 <_scanf_float+0xd0>
 800d34a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800d34e:	b2c8      	uxtb	r0, r1
 800d350:	280e      	cmp	r0, #14
 800d352:	d93a      	bls.n	800d3ca <_scanf_float+0xd6>
 800d354:	f1b9 0f00 	cmp.w	r9, #0
 800d358:	d003      	beq.n	800d362 <_scanf_float+0x6e>
 800d35a:	6823      	ldr	r3, [r4, #0]
 800d35c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d360:	6023      	str	r3, [r4, #0]
 800d362:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d366:	f1ba 0f01 	cmp.w	sl, #1
 800d36a:	f200 8113 	bhi.w	800d594 <_scanf_float+0x2a0>
 800d36e:	455e      	cmp	r6, fp
 800d370:	f200 8105 	bhi.w	800d57e <_scanf_float+0x28a>
 800d374:	2501      	movs	r5, #1
 800d376:	4628      	mov	r0, r5
 800d378:	b007      	add	sp, #28
 800d37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d37e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800d382:	2a0d      	cmp	r2, #13
 800d384:	d8e6      	bhi.n	800d354 <_scanf_float+0x60>
 800d386:	a101      	add	r1, pc, #4	; (adr r1, 800d38c <_scanf_float+0x98>)
 800d388:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d38c:	0800d4cb 	.word	0x0800d4cb
 800d390:	0800d355 	.word	0x0800d355
 800d394:	0800d355 	.word	0x0800d355
 800d398:	0800d355 	.word	0x0800d355
 800d39c:	0800d52b 	.word	0x0800d52b
 800d3a0:	0800d503 	.word	0x0800d503
 800d3a4:	0800d355 	.word	0x0800d355
 800d3a8:	0800d355 	.word	0x0800d355
 800d3ac:	0800d4d9 	.word	0x0800d4d9
 800d3b0:	0800d355 	.word	0x0800d355
 800d3b4:	0800d355 	.word	0x0800d355
 800d3b8:	0800d355 	.word	0x0800d355
 800d3bc:	0800d355 	.word	0x0800d355
 800d3c0:	0800d491 	.word	0x0800d491
 800d3c4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d3c8:	e7db      	b.n	800d382 <_scanf_float+0x8e>
 800d3ca:	290e      	cmp	r1, #14
 800d3cc:	d8c2      	bhi.n	800d354 <_scanf_float+0x60>
 800d3ce:	a001      	add	r0, pc, #4	; (adr r0, 800d3d4 <_scanf_float+0xe0>)
 800d3d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d3d4:	0800d483 	.word	0x0800d483
 800d3d8:	0800d355 	.word	0x0800d355
 800d3dc:	0800d483 	.word	0x0800d483
 800d3e0:	0800d517 	.word	0x0800d517
 800d3e4:	0800d355 	.word	0x0800d355
 800d3e8:	0800d431 	.word	0x0800d431
 800d3ec:	0800d46d 	.word	0x0800d46d
 800d3f0:	0800d46d 	.word	0x0800d46d
 800d3f4:	0800d46d 	.word	0x0800d46d
 800d3f8:	0800d46d 	.word	0x0800d46d
 800d3fc:	0800d46d 	.word	0x0800d46d
 800d400:	0800d46d 	.word	0x0800d46d
 800d404:	0800d46d 	.word	0x0800d46d
 800d408:	0800d46d 	.word	0x0800d46d
 800d40c:	0800d46d 	.word	0x0800d46d
 800d410:	2b6e      	cmp	r3, #110	; 0x6e
 800d412:	d809      	bhi.n	800d428 <_scanf_float+0x134>
 800d414:	2b60      	cmp	r3, #96	; 0x60
 800d416:	d8b2      	bhi.n	800d37e <_scanf_float+0x8a>
 800d418:	2b54      	cmp	r3, #84	; 0x54
 800d41a:	d077      	beq.n	800d50c <_scanf_float+0x218>
 800d41c:	2b59      	cmp	r3, #89	; 0x59
 800d41e:	d199      	bne.n	800d354 <_scanf_float+0x60>
 800d420:	2d07      	cmp	r5, #7
 800d422:	d197      	bne.n	800d354 <_scanf_float+0x60>
 800d424:	2508      	movs	r5, #8
 800d426:	e029      	b.n	800d47c <_scanf_float+0x188>
 800d428:	2b74      	cmp	r3, #116	; 0x74
 800d42a:	d06f      	beq.n	800d50c <_scanf_float+0x218>
 800d42c:	2b79      	cmp	r3, #121	; 0x79
 800d42e:	e7f6      	b.n	800d41e <_scanf_float+0x12a>
 800d430:	6821      	ldr	r1, [r4, #0]
 800d432:	05c8      	lsls	r0, r1, #23
 800d434:	d51a      	bpl.n	800d46c <_scanf_float+0x178>
 800d436:	9b02      	ldr	r3, [sp, #8]
 800d438:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d43c:	6021      	str	r1, [r4, #0]
 800d43e:	f109 0901 	add.w	r9, r9, #1
 800d442:	b11b      	cbz	r3, 800d44c <_scanf_float+0x158>
 800d444:	3b01      	subs	r3, #1
 800d446:	3201      	adds	r2, #1
 800d448:	9302      	str	r3, [sp, #8]
 800d44a:	60a2      	str	r2, [r4, #8]
 800d44c:	68a3      	ldr	r3, [r4, #8]
 800d44e:	3b01      	subs	r3, #1
 800d450:	60a3      	str	r3, [r4, #8]
 800d452:	6923      	ldr	r3, [r4, #16]
 800d454:	3301      	adds	r3, #1
 800d456:	6123      	str	r3, [r4, #16]
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	3b01      	subs	r3, #1
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	607b      	str	r3, [r7, #4]
 800d460:	f340 8084 	ble.w	800d56c <_scanf_float+0x278>
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	3301      	adds	r3, #1
 800d468:	603b      	str	r3, [r7, #0]
 800d46a:	e766      	b.n	800d33a <_scanf_float+0x46>
 800d46c:	eb1a 0f05 	cmn.w	sl, r5
 800d470:	f47f af70 	bne.w	800d354 <_scanf_float+0x60>
 800d474:	6822      	ldr	r2, [r4, #0]
 800d476:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d47a:	6022      	str	r2, [r4, #0]
 800d47c:	f806 3b01 	strb.w	r3, [r6], #1
 800d480:	e7e4      	b.n	800d44c <_scanf_float+0x158>
 800d482:	6822      	ldr	r2, [r4, #0]
 800d484:	0610      	lsls	r0, r2, #24
 800d486:	f57f af65 	bpl.w	800d354 <_scanf_float+0x60>
 800d48a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d48e:	e7f4      	b.n	800d47a <_scanf_float+0x186>
 800d490:	f1ba 0f00 	cmp.w	sl, #0
 800d494:	d10e      	bne.n	800d4b4 <_scanf_float+0x1c0>
 800d496:	f1b9 0f00 	cmp.w	r9, #0
 800d49a:	d10e      	bne.n	800d4ba <_scanf_float+0x1c6>
 800d49c:	6822      	ldr	r2, [r4, #0]
 800d49e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d4a2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d4a6:	d108      	bne.n	800d4ba <_scanf_float+0x1c6>
 800d4a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d4ac:	6022      	str	r2, [r4, #0]
 800d4ae:	f04f 0a01 	mov.w	sl, #1
 800d4b2:	e7e3      	b.n	800d47c <_scanf_float+0x188>
 800d4b4:	f1ba 0f02 	cmp.w	sl, #2
 800d4b8:	d055      	beq.n	800d566 <_scanf_float+0x272>
 800d4ba:	2d01      	cmp	r5, #1
 800d4bc:	d002      	beq.n	800d4c4 <_scanf_float+0x1d0>
 800d4be:	2d04      	cmp	r5, #4
 800d4c0:	f47f af48 	bne.w	800d354 <_scanf_float+0x60>
 800d4c4:	3501      	adds	r5, #1
 800d4c6:	b2ed      	uxtb	r5, r5
 800d4c8:	e7d8      	b.n	800d47c <_scanf_float+0x188>
 800d4ca:	f1ba 0f01 	cmp.w	sl, #1
 800d4ce:	f47f af41 	bne.w	800d354 <_scanf_float+0x60>
 800d4d2:	f04f 0a02 	mov.w	sl, #2
 800d4d6:	e7d1      	b.n	800d47c <_scanf_float+0x188>
 800d4d8:	b97d      	cbnz	r5, 800d4fa <_scanf_float+0x206>
 800d4da:	f1b9 0f00 	cmp.w	r9, #0
 800d4de:	f47f af3c 	bne.w	800d35a <_scanf_float+0x66>
 800d4e2:	6822      	ldr	r2, [r4, #0]
 800d4e4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d4e8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d4ec:	f47f af39 	bne.w	800d362 <_scanf_float+0x6e>
 800d4f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d4f4:	6022      	str	r2, [r4, #0]
 800d4f6:	2501      	movs	r5, #1
 800d4f8:	e7c0      	b.n	800d47c <_scanf_float+0x188>
 800d4fa:	2d03      	cmp	r5, #3
 800d4fc:	d0e2      	beq.n	800d4c4 <_scanf_float+0x1d0>
 800d4fe:	2d05      	cmp	r5, #5
 800d500:	e7de      	b.n	800d4c0 <_scanf_float+0x1cc>
 800d502:	2d02      	cmp	r5, #2
 800d504:	f47f af26 	bne.w	800d354 <_scanf_float+0x60>
 800d508:	2503      	movs	r5, #3
 800d50a:	e7b7      	b.n	800d47c <_scanf_float+0x188>
 800d50c:	2d06      	cmp	r5, #6
 800d50e:	f47f af21 	bne.w	800d354 <_scanf_float+0x60>
 800d512:	2507      	movs	r5, #7
 800d514:	e7b2      	b.n	800d47c <_scanf_float+0x188>
 800d516:	6822      	ldr	r2, [r4, #0]
 800d518:	0591      	lsls	r1, r2, #22
 800d51a:	f57f af1b 	bpl.w	800d354 <_scanf_float+0x60>
 800d51e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d522:	6022      	str	r2, [r4, #0]
 800d524:	f8cd 9004 	str.w	r9, [sp, #4]
 800d528:	e7a8      	b.n	800d47c <_scanf_float+0x188>
 800d52a:	6822      	ldr	r2, [r4, #0]
 800d52c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d530:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d534:	d006      	beq.n	800d544 <_scanf_float+0x250>
 800d536:	0550      	lsls	r0, r2, #21
 800d538:	f57f af0c 	bpl.w	800d354 <_scanf_float+0x60>
 800d53c:	f1b9 0f00 	cmp.w	r9, #0
 800d540:	f43f af0f 	beq.w	800d362 <_scanf_float+0x6e>
 800d544:	0591      	lsls	r1, r2, #22
 800d546:	bf58      	it	pl
 800d548:	9901      	ldrpl	r1, [sp, #4]
 800d54a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d54e:	bf58      	it	pl
 800d550:	eba9 0101 	subpl.w	r1, r9, r1
 800d554:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d558:	bf58      	it	pl
 800d55a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d55e:	6022      	str	r2, [r4, #0]
 800d560:	f04f 0900 	mov.w	r9, #0
 800d564:	e78a      	b.n	800d47c <_scanf_float+0x188>
 800d566:	f04f 0a03 	mov.w	sl, #3
 800d56a:	e787      	b.n	800d47c <_scanf_float+0x188>
 800d56c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d570:	4639      	mov	r1, r7
 800d572:	4640      	mov	r0, r8
 800d574:	4798      	blx	r3
 800d576:	2800      	cmp	r0, #0
 800d578:	f43f aedf 	beq.w	800d33a <_scanf_float+0x46>
 800d57c:	e6ea      	b.n	800d354 <_scanf_float+0x60>
 800d57e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d582:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d586:	463a      	mov	r2, r7
 800d588:	4640      	mov	r0, r8
 800d58a:	4798      	blx	r3
 800d58c:	6923      	ldr	r3, [r4, #16]
 800d58e:	3b01      	subs	r3, #1
 800d590:	6123      	str	r3, [r4, #16]
 800d592:	e6ec      	b.n	800d36e <_scanf_float+0x7a>
 800d594:	1e6b      	subs	r3, r5, #1
 800d596:	2b06      	cmp	r3, #6
 800d598:	d825      	bhi.n	800d5e6 <_scanf_float+0x2f2>
 800d59a:	2d02      	cmp	r5, #2
 800d59c:	d836      	bhi.n	800d60c <_scanf_float+0x318>
 800d59e:	455e      	cmp	r6, fp
 800d5a0:	f67f aee8 	bls.w	800d374 <_scanf_float+0x80>
 800d5a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d5a8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d5ac:	463a      	mov	r2, r7
 800d5ae:	4640      	mov	r0, r8
 800d5b0:	4798      	blx	r3
 800d5b2:	6923      	ldr	r3, [r4, #16]
 800d5b4:	3b01      	subs	r3, #1
 800d5b6:	6123      	str	r3, [r4, #16]
 800d5b8:	e7f1      	b.n	800d59e <_scanf_float+0x2aa>
 800d5ba:	9802      	ldr	r0, [sp, #8]
 800d5bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d5c0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800d5c4:	9002      	str	r0, [sp, #8]
 800d5c6:	463a      	mov	r2, r7
 800d5c8:	4640      	mov	r0, r8
 800d5ca:	4798      	blx	r3
 800d5cc:	6923      	ldr	r3, [r4, #16]
 800d5ce:	3b01      	subs	r3, #1
 800d5d0:	6123      	str	r3, [r4, #16]
 800d5d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d5d6:	fa5f fa8a 	uxtb.w	sl, sl
 800d5da:	f1ba 0f02 	cmp.w	sl, #2
 800d5de:	d1ec      	bne.n	800d5ba <_scanf_float+0x2c6>
 800d5e0:	3d03      	subs	r5, #3
 800d5e2:	b2ed      	uxtb	r5, r5
 800d5e4:	1b76      	subs	r6, r6, r5
 800d5e6:	6823      	ldr	r3, [r4, #0]
 800d5e8:	05da      	lsls	r2, r3, #23
 800d5ea:	d52f      	bpl.n	800d64c <_scanf_float+0x358>
 800d5ec:	055b      	lsls	r3, r3, #21
 800d5ee:	d510      	bpl.n	800d612 <_scanf_float+0x31e>
 800d5f0:	455e      	cmp	r6, fp
 800d5f2:	f67f aebf 	bls.w	800d374 <_scanf_float+0x80>
 800d5f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d5fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d5fe:	463a      	mov	r2, r7
 800d600:	4640      	mov	r0, r8
 800d602:	4798      	blx	r3
 800d604:	6923      	ldr	r3, [r4, #16]
 800d606:	3b01      	subs	r3, #1
 800d608:	6123      	str	r3, [r4, #16]
 800d60a:	e7f1      	b.n	800d5f0 <_scanf_float+0x2fc>
 800d60c:	46aa      	mov	sl, r5
 800d60e:	9602      	str	r6, [sp, #8]
 800d610:	e7df      	b.n	800d5d2 <_scanf_float+0x2de>
 800d612:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d616:	6923      	ldr	r3, [r4, #16]
 800d618:	2965      	cmp	r1, #101	; 0x65
 800d61a:	f103 33ff 	add.w	r3, r3, #4294967295
 800d61e:	f106 35ff 	add.w	r5, r6, #4294967295
 800d622:	6123      	str	r3, [r4, #16]
 800d624:	d00c      	beq.n	800d640 <_scanf_float+0x34c>
 800d626:	2945      	cmp	r1, #69	; 0x45
 800d628:	d00a      	beq.n	800d640 <_scanf_float+0x34c>
 800d62a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d62e:	463a      	mov	r2, r7
 800d630:	4640      	mov	r0, r8
 800d632:	4798      	blx	r3
 800d634:	6923      	ldr	r3, [r4, #16]
 800d636:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d63a:	3b01      	subs	r3, #1
 800d63c:	1eb5      	subs	r5, r6, #2
 800d63e:	6123      	str	r3, [r4, #16]
 800d640:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d644:	463a      	mov	r2, r7
 800d646:	4640      	mov	r0, r8
 800d648:	4798      	blx	r3
 800d64a:	462e      	mov	r6, r5
 800d64c:	6825      	ldr	r5, [r4, #0]
 800d64e:	f015 0510 	ands.w	r5, r5, #16
 800d652:	d158      	bne.n	800d706 <_scanf_float+0x412>
 800d654:	7035      	strb	r5, [r6, #0]
 800d656:	6823      	ldr	r3, [r4, #0]
 800d658:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d65c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d660:	d11c      	bne.n	800d69c <_scanf_float+0x3a8>
 800d662:	9b01      	ldr	r3, [sp, #4]
 800d664:	454b      	cmp	r3, r9
 800d666:	eba3 0209 	sub.w	r2, r3, r9
 800d66a:	d124      	bne.n	800d6b6 <_scanf_float+0x3c2>
 800d66c:	2200      	movs	r2, #0
 800d66e:	4659      	mov	r1, fp
 800d670:	4640      	mov	r0, r8
 800d672:	f000 ff1f 	bl	800e4b4 <_strtod_r>
 800d676:	9b03      	ldr	r3, [sp, #12]
 800d678:	6821      	ldr	r1, [r4, #0]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	f011 0f02 	tst.w	r1, #2
 800d680:	ec57 6b10 	vmov	r6, r7, d0
 800d684:	f103 0204 	add.w	r2, r3, #4
 800d688:	d020      	beq.n	800d6cc <_scanf_float+0x3d8>
 800d68a:	9903      	ldr	r1, [sp, #12]
 800d68c:	600a      	str	r2, [r1, #0]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	e9c3 6700 	strd	r6, r7, [r3]
 800d694:	68e3      	ldr	r3, [r4, #12]
 800d696:	3301      	adds	r3, #1
 800d698:	60e3      	str	r3, [r4, #12]
 800d69a:	e66c      	b.n	800d376 <_scanf_float+0x82>
 800d69c:	9b04      	ldr	r3, [sp, #16]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d0e4      	beq.n	800d66c <_scanf_float+0x378>
 800d6a2:	9905      	ldr	r1, [sp, #20]
 800d6a4:	230a      	movs	r3, #10
 800d6a6:	462a      	mov	r2, r5
 800d6a8:	3101      	adds	r1, #1
 800d6aa:	4640      	mov	r0, r8
 800d6ac:	f000 ff8c 	bl	800e5c8 <_strtol_r>
 800d6b0:	9b04      	ldr	r3, [sp, #16]
 800d6b2:	9e05      	ldr	r6, [sp, #20]
 800d6b4:	1ac2      	subs	r2, r0, r3
 800d6b6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d6ba:	429e      	cmp	r6, r3
 800d6bc:	bf28      	it	cs
 800d6be:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d6c2:	4912      	ldr	r1, [pc, #72]	; (800d70c <_scanf_float+0x418>)
 800d6c4:	4630      	mov	r0, r6
 800d6c6:	f000 f82b 	bl	800d720 <siprintf>
 800d6ca:	e7cf      	b.n	800d66c <_scanf_float+0x378>
 800d6cc:	f011 0f04 	tst.w	r1, #4
 800d6d0:	9903      	ldr	r1, [sp, #12]
 800d6d2:	600a      	str	r2, [r1, #0]
 800d6d4:	d1db      	bne.n	800d68e <_scanf_float+0x39a>
 800d6d6:	f8d3 8000 	ldr.w	r8, [r3]
 800d6da:	ee10 2a10 	vmov	r2, s0
 800d6de:	ee10 0a10 	vmov	r0, s0
 800d6e2:	463b      	mov	r3, r7
 800d6e4:	4639      	mov	r1, r7
 800d6e6:	f7f3 fa29 	bl	8000b3c <__aeabi_dcmpun>
 800d6ea:	b128      	cbz	r0, 800d6f8 <_scanf_float+0x404>
 800d6ec:	4808      	ldr	r0, [pc, #32]	; (800d710 <_scanf_float+0x41c>)
 800d6ee:	f000 f811 	bl	800d714 <nanf>
 800d6f2:	ed88 0a00 	vstr	s0, [r8]
 800d6f6:	e7cd      	b.n	800d694 <_scanf_float+0x3a0>
 800d6f8:	4630      	mov	r0, r6
 800d6fa:	4639      	mov	r1, r7
 800d6fc:	f7f3 fa7c 	bl	8000bf8 <__aeabi_d2f>
 800d700:	f8c8 0000 	str.w	r0, [r8]
 800d704:	e7c6      	b.n	800d694 <_scanf_float+0x3a0>
 800d706:	2500      	movs	r5, #0
 800d708:	e635      	b.n	800d376 <_scanf_float+0x82>
 800d70a:	bf00      	nop
 800d70c:	08012486 	.word	0x08012486
 800d710:	080128bb 	.word	0x080128bb

0800d714 <nanf>:
 800d714:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d71c <nanf+0x8>
 800d718:	4770      	bx	lr
 800d71a:	bf00      	nop
 800d71c:	7fc00000 	.word	0x7fc00000

0800d720 <siprintf>:
 800d720:	b40e      	push	{r1, r2, r3}
 800d722:	b500      	push	{lr}
 800d724:	b09c      	sub	sp, #112	; 0x70
 800d726:	ab1d      	add	r3, sp, #116	; 0x74
 800d728:	9002      	str	r0, [sp, #8]
 800d72a:	9006      	str	r0, [sp, #24]
 800d72c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d730:	4809      	ldr	r0, [pc, #36]	; (800d758 <siprintf+0x38>)
 800d732:	9107      	str	r1, [sp, #28]
 800d734:	9104      	str	r1, [sp, #16]
 800d736:	4909      	ldr	r1, [pc, #36]	; (800d75c <siprintf+0x3c>)
 800d738:	f853 2b04 	ldr.w	r2, [r3], #4
 800d73c:	9105      	str	r1, [sp, #20]
 800d73e:	6800      	ldr	r0, [r0, #0]
 800d740:	9301      	str	r3, [sp, #4]
 800d742:	a902      	add	r1, sp, #8
 800d744:	f002 ff4c 	bl	80105e0 <_svfiprintf_r>
 800d748:	9b02      	ldr	r3, [sp, #8]
 800d74a:	2200      	movs	r2, #0
 800d74c:	701a      	strb	r2, [r3, #0]
 800d74e:	b01c      	add	sp, #112	; 0x70
 800d750:	f85d eb04 	ldr.w	lr, [sp], #4
 800d754:	b003      	add	sp, #12
 800d756:	4770      	bx	lr
 800d758:	200000e8 	.word	0x200000e8
 800d75c:	ffff0208 	.word	0xffff0208

0800d760 <siscanf>:
 800d760:	b40e      	push	{r1, r2, r3}
 800d762:	b510      	push	{r4, lr}
 800d764:	b09f      	sub	sp, #124	; 0x7c
 800d766:	ac21      	add	r4, sp, #132	; 0x84
 800d768:	f44f 7101 	mov.w	r1, #516	; 0x204
 800d76c:	f854 2b04 	ldr.w	r2, [r4], #4
 800d770:	9201      	str	r2, [sp, #4]
 800d772:	f8ad 101c 	strh.w	r1, [sp, #28]
 800d776:	9004      	str	r0, [sp, #16]
 800d778:	9008      	str	r0, [sp, #32]
 800d77a:	f7f2 fd31 	bl	80001e0 <strlen>
 800d77e:	4b0c      	ldr	r3, [pc, #48]	; (800d7b0 <siscanf+0x50>)
 800d780:	9005      	str	r0, [sp, #20]
 800d782:	9009      	str	r0, [sp, #36]	; 0x24
 800d784:	930d      	str	r3, [sp, #52]	; 0x34
 800d786:	480b      	ldr	r0, [pc, #44]	; (800d7b4 <siscanf+0x54>)
 800d788:	9a01      	ldr	r2, [sp, #4]
 800d78a:	6800      	ldr	r0, [r0, #0]
 800d78c:	9403      	str	r4, [sp, #12]
 800d78e:	2300      	movs	r3, #0
 800d790:	9311      	str	r3, [sp, #68]	; 0x44
 800d792:	9316      	str	r3, [sp, #88]	; 0x58
 800d794:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d798:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d79c:	a904      	add	r1, sp, #16
 800d79e:	4623      	mov	r3, r4
 800d7a0:	f003 f878 	bl	8010894 <__ssvfiscanf_r>
 800d7a4:	b01f      	add	sp, #124	; 0x7c
 800d7a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7aa:	b003      	add	sp, #12
 800d7ac:	4770      	bx	lr
 800d7ae:	bf00      	nop
 800d7b0:	0800d7db 	.word	0x0800d7db
 800d7b4:	200000e8 	.word	0x200000e8

0800d7b8 <__sread>:
 800d7b8:	b510      	push	{r4, lr}
 800d7ba:	460c      	mov	r4, r1
 800d7bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7c0:	f003 fb2c 	bl	8010e1c <_read_r>
 800d7c4:	2800      	cmp	r0, #0
 800d7c6:	bfab      	itete	ge
 800d7c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d7ca:	89a3      	ldrhlt	r3, [r4, #12]
 800d7cc:	181b      	addge	r3, r3, r0
 800d7ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d7d2:	bfac      	ite	ge
 800d7d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d7d6:	81a3      	strhlt	r3, [r4, #12]
 800d7d8:	bd10      	pop	{r4, pc}

0800d7da <__seofread>:
 800d7da:	2000      	movs	r0, #0
 800d7dc:	4770      	bx	lr

0800d7de <__swrite>:
 800d7de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7e2:	461f      	mov	r7, r3
 800d7e4:	898b      	ldrh	r3, [r1, #12]
 800d7e6:	05db      	lsls	r3, r3, #23
 800d7e8:	4605      	mov	r5, r0
 800d7ea:	460c      	mov	r4, r1
 800d7ec:	4616      	mov	r6, r2
 800d7ee:	d505      	bpl.n	800d7fc <__swrite+0x1e>
 800d7f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7f4:	2302      	movs	r3, #2
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	f002 f8f6 	bl	800f9e8 <_lseek_r>
 800d7fc:	89a3      	ldrh	r3, [r4, #12]
 800d7fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d802:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d806:	81a3      	strh	r3, [r4, #12]
 800d808:	4632      	mov	r2, r6
 800d80a:	463b      	mov	r3, r7
 800d80c:	4628      	mov	r0, r5
 800d80e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d812:	f000 bedb 	b.w	800e5cc <_write_r>

0800d816 <__sseek>:
 800d816:	b510      	push	{r4, lr}
 800d818:	460c      	mov	r4, r1
 800d81a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d81e:	f002 f8e3 	bl	800f9e8 <_lseek_r>
 800d822:	1c43      	adds	r3, r0, #1
 800d824:	89a3      	ldrh	r3, [r4, #12]
 800d826:	bf15      	itete	ne
 800d828:	6560      	strne	r0, [r4, #84]	; 0x54
 800d82a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d82e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d832:	81a3      	strheq	r3, [r4, #12]
 800d834:	bf18      	it	ne
 800d836:	81a3      	strhne	r3, [r4, #12]
 800d838:	bd10      	pop	{r4, pc}

0800d83a <__sclose>:
 800d83a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d83e:	f000 bed7 	b.w	800e5f0 <_close_r>

0800d842 <strncmp>:
 800d842:	b510      	push	{r4, lr}
 800d844:	b16a      	cbz	r2, 800d862 <strncmp+0x20>
 800d846:	3901      	subs	r1, #1
 800d848:	1884      	adds	r4, r0, r2
 800d84a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d84e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d852:	4293      	cmp	r3, r2
 800d854:	d103      	bne.n	800d85e <strncmp+0x1c>
 800d856:	42a0      	cmp	r0, r4
 800d858:	d001      	beq.n	800d85e <strncmp+0x1c>
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d1f5      	bne.n	800d84a <strncmp+0x8>
 800d85e:	1a98      	subs	r0, r3, r2
 800d860:	bd10      	pop	{r4, pc}
 800d862:	4610      	mov	r0, r2
 800d864:	e7fc      	b.n	800d860 <strncmp+0x1e>

0800d866 <sulp>:
 800d866:	b570      	push	{r4, r5, r6, lr}
 800d868:	4604      	mov	r4, r0
 800d86a:	460d      	mov	r5, r1
 800d86c:	ec45 4b10 	vmov	d0, r4, r5
 800d870:	4616      	mov	r6, r2
 800d872:	f002 fc51 	bl	8010118 <__ulp>
 800d876:	ec51 0b10 	vmov	r0, r1, d0
 800d87a:	b17e      	cbz	r6, 800d89c <sulp+0x36>
 800d87c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d880:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d884:	2b00      	cmp	r3, #0
 800d886:	dd09      	ble.n	800d89c <sulp+0x36>
 800d888:	051b      	lsls	r3, r3, #20
 800d88a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d88e:	2400      	movs	r4, #0
 800d890:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d894:	4622      	mov	r2, r4
 800d896:	462b      	mov	r3, r5
 800d898:	f7f2 feb6 	bl	8000608 <__aeabi_dmul>
 800d89c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d8a0 <_strtod_l>:
 800d8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8a4:	b0a3      	sub	sp, #140	; 0x8c
 800d8a6:	461f      	mov	r7, r3
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	931e      	str	r3, [sp, #120]	; 0x78
 800d8ac:	4ba4      	ldr	r3, [pc, #656]	; (800db40 <_strtod_l+0x2a0>)
 800d8ae:	9219      	str	r2, [sp, #100]	; 0x64
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	9307      	str	r3, [sp, #28]
 800d8b4:	4604      	mov	r4, r0
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	4688      	mov	r8, r1
 800d8ba:	f7f2 fc91 	bl	80001e0 <strlen>
 800d8be:	f04f 0a00 	mov.w	sl, #0
 800d8c2:	4605      	mov	r5, r0
 800d8c4:	f04f 0b00 	mov.w	fp, #0
 800d8c8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d8cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d8ce:	781a      	ldrb	r2, [r3, #0]
 800d8d0:	2a2b      	cmp	r2, #43	; 0x2b
 800d8d2:	d04c      	beq.n	800d96e <_strtod_l+0xce>
 800d8d4:	d839      	bhi.n	800d94a <_strtod_l+0xaa>
 800d8d6:	2a0d      	cmp	r2, #13
 800d8d8:	d832      	bhi.n	800d940 <_strtod_l+0xa0>
 800d8da:	2a08      	cmp	r2, #8
 800d8dc:	d832      	bhi.n	800d944 <_strtod_l+0xa4>
 800d8de:	2a00      	cmp	r2, #0
 800d8e0:	d03c      	beq.n	800d95c <_strtod_l+0xbc>
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	930e      	str	r3, [sp, #56]	; 0x38
 800d8e6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d8e8:	7833      	ldrb	r3, [r6, #0]
 800d8ea:	2b30      	cmp	r3, #48	; 0x30
 800d8ec:	f040 80b4 	bne.w	800da58 <_strtod_l+0x1b8>
 800d8f0:	7873      	ldrb	r3, [r6, #1]
 800d8f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d8f6:	2b58      	cmp	r3, #88	; 0x58
 800d8f8:	d16c      	bne.n	800d9d4 <_strtod_l+0x134>
 800d8fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d8fc:	9301      	str	r3, [sp, #4]
 800d8fe:	ab1e      	add	r3, sp, #120	; 0x78
 800d900:	9702      	str	r7, [sp, #8]
 800d902:	9300      	str	r3, [sp, #0]
 800d904:	4a8f      	ldr	r2, [pc, #572]	; (800db44 <_strtod_l+0x2a4>)
 800d906:	ab1f      	add	r3, sp, #124	; 0x7c
 800d908:	a91d      	add	r1, sp, #116	; 0x74
 800d90a:	4620      	mov	r0, r4
 800d90c:	f001 fd60 	bl	800f3d0 <__gethex>
 800d910:	f010 0707 	ands.w	r7, r0, #7
 800d914:	4605      	mov	r5, r0
 800d916:	d005      	beq.n	800d924 <_strtod_l+0x84>
 800d918:	2f06      	cmp	r7, #6
 800d91a:	d12a      	bne.n	800d972 <_strtod_l+0xd2>
 800d91c:	3601      	adds	r6, #1
 800d91e:	2300      	movs	r3, #0
 800d920:	961d      	str	r6, [sp, #116]	; 0x74
 800d922:	930e      	str	r3, [sp, #56]	; 0x38
 800d924:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d926:	2b00      	cmp	r3, #0
 800d928:	f040 8596 	bne.w	800e458 <_strtod_l+0xbb8>
 800d92c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d92e:	b1db      	cbz	r3, 800d968 <_strtod_l+0xc8>
 800d930:	4652      	mov	r2, sl
 800d932:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d936:	ec43 2b10 	vmov	d0, r2, r3
 800d93a:	b023      	add	sp, #140	; 0x8c
 800d93c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d940:	2a20      	cmp	r2, #32
 800d942:	d1ce      	bne.n	800d8e2 <_strtod_l+0x42>
 800d944:	3301      	adds	r3, #1
 800d946:	931d      	str	r3, [sp, #116]	; 0x74
 800d948:	e7c0      	b.n	800d8cc <_strtod_l+0x2c>
 800d94a:	2a2d      	cmp	r2, #45	; 0x2d
 800d94c:	d1c9      	bne.n	800d8e2 <_strtod_l+0x42>
 800d94e:	2201      	movs	r2, #1
 800d950:	920e      	str	r2, [sp, #56]	; 0x38
 800d952:	1c5a      	adds	r2, r3, #1
 800d954:	921d      	str	r2, [sp, #116]	; 0x74
 800d956:	785b      	ldrb	r3, [r3, #1]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d1c4      	bne.n	800d8e6 <_strtod_l+0x46>
 800d95c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d95e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800d962:	2b00      	cmp	r3, #0
 800d964:	f040 8576 	bne.w	800e454 <_strtod_l+0xbb4>
 800d968:	4652      	mov	r2, sl
 800d96a:	465b      	mov	r3, fp
 800d96c:	e7e3      	b.n	800d936 <_strtod_l+0x96>
 800d96e:	2200      	movs	r2, #0
 800d970:	e7ee      	b.n	800d950 <_strtod_l+0xb0>
 800d972:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d974:	b13a      	cbz	r2, 800d986 <_strtod_l+0xe6>
 800d976:	2135      	movs	r1, #53	; 0x35
 800d978:	a820      	add	r0, sp, #128	; 0x80
 800d97a:	f002 fcd8 	bl	801032e <__copybits>
 800d97e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d980:	4620      	mov	r0, r4
 800d982:	f002 f89d 	bl	800fac0 <_Bfree>
 800d986:	3f01      	subs	r7, #1
 800d988:	2f05      	cmp	r7, #5
 800d98a:	d807      	bhi.n	800d99c <_strtod_l+0xfc>
 800d98c:	e8df f007 	tbb	[pc, r7]
 800d990:	1d180b0e 	.word	0x1d180b0e
 800d994:	030e      	.short	0x030e
 800d996:	f04f 0b00 	mov.w	fp, #0
 800d99a:	46da      	mov	sl, fp
 800d99c:	0728      	lsls	r0, r5, #28
 800d99e:	d5c1      	bpl.n	800d924 <_strtod_l+0x84>
 800d9a0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d9a4:	e7be      	b.n	800d924 <_strtod_l+0x84>
 800d9a6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800d9aa:	e7f7      	b.n	800d99c <_strtod_l+0xfc>
 800d9ac:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800d9b0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d9b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d9b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d9ba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d9be:	e7ed      	b.n	800d99c <_strtod_l+0xfc>
 800d9c0:	f8df b184 	ldr.w	fp, [pc, #388]	; 800db48 <_strtod_l+0x2a8>
 800d9c4:	f04f 0a00 	mov.w	sl, #0
 800d9c8:	e7e8      	b.n	800d99c <_strtod_l+0xfc>
 800d9ca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d9ce:	f04f 3aff 	mov.w	sl, #4294967295
 800d9d2:	e7e3      	b.n	800d99c <_strtod_l+0xfc>
 800d9d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d9d6:	1c5a      	adds	r2, r3, #1
 800d9d8:	921d      	str	r2, [sp, #116]	; 0x74
 800d9da:	785b      	ldrb	r3, [r3, #1]
 800d9dc:	2b30      	cmp	r3, #48	; 0x30
 800d9de:	d0f9      	beq.n	800d9d4 <_strtod_l+0x134>
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d09f      	beq.n	800d924 <_strtod_l+0x84>
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	f04f 0900 	mov.w	r9, #0
 800d9ea:	9304      	str	r3, [sp, #16]
 800d9ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d9ee:	930a      	str	r3, [sp, #40]	; 0x28
 800d9f0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d9f4:	464f      	mov	r7, r9
 800d9f6:	220a      	movs	r2, #10
 800d9f8:	981d      	ldr	r0, [sp, #116]	; 0x74
 800d9fa:	7806      	ldrb	r6, [r0, #0]
 800d9fc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800da00:	b2d9      	uxtb	r1, r3
 800da02:	2909      	cmp	r1, #9
 800da04:	d92a      	bls.n	800da5c <_strtod_l+0x1bc>
 800da06:	9907      	ldr	r1, [sp, #28]
 800da08:	462a      	mov	r2, r5
 800da0a:	f7ff ff1a 	bl	800d842 <strncmp>
 800da0e:	b398      	cbz	r0, 800da78 <_strtod_l+0x1d8>
 800da10:	2000      	movs	r0, #0
 800da12:	4633      	mov	r3, r6
 800da14:	463d      	mov	r5, r7
 800da16:	9007      	str	r0, [sp, #28]
 800da18:	4602      	mov	r2, r0
 800da1a:	2b65      	cmp	r3, #101	; 0x65
 800da1c:	d001      	beq.n	800da22 <_strtod_l+0x182>
 800da1e:	2b45      	cmp	r3, #69	; 0x45
 800da20:	d118      	bne.n	800da54 <_strtod_l+0x1b4>
 800da22:	b91d      	cbnz	r5, 800da2c <_strtod_l+0x18c>
 800da24:	9b04      	ldr	r3, [sp, #16]
 800da26:	4303      	orrs	r3, r0
 800da28:	d098      	beq.n	800d95c <_strtod_l+0xbc>
 800da2a:	2500      	movs	r5, #0
 800da2c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800da30:	f108 0301 	add.w	r3, r8, #1
 800da34:	931d      	str	r3, [sp, #116]	; 0x74
 800da36:	f898 3001 	ldrb.w	r3, [r8, #1]
 800da3a:	2b2b      	cmp	r3, #43	; 0x2b
 800da3c:	d075      	beq.n	800db2a <_strtod_l+0x28a>
 800da3e:	2b2d      	cmp	r3, #45	; 0x2d
 800da40:	d07b      	beq.n	800db3a <_strtod_l+0x29a>
 800da42:	f04f 0c00 	mov.w	ip, #0
 800da46:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800da4a:	2909      	cmp	r1, #9
 800da4c:	f240 8082 	bls.w	800db54 <_strtod_l+0x2b4>
 800da50:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800da54:	2600      	movs	r6, #0
 800da56:	e09d      	b.n	800db94 <_strtod_l+0x2f4>
 800da58:	2300      	movs	r3, #0
 800da5a:	e7c4      	b.n	800d9e6 <_strtod_l+0x146>
 800da5c:	2f08      	cmp	r7, #8
 800da5e:	bfd8      	it	le
 800da60:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800da62:	f100 0001 	add.w	r0, r0, #1
 800da66:	bfda      	itte	le
 800da68:	fb02 3301 	mlale	r3, r2, r1, r3
 800da6c:	9309      	strle	r3, [sp, #36]	; 0x24
 800da6e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800da72:	3701      	adds	r7, #1
 800da74:	901d      	str	r0, [sp, #116]	; 0x74
 800da76:	e7bf      	b.n	800d9f8 <_strtod_l+0x158>
 800da78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800da7a:	195a      	adds	r2, r3, r5
 800da7c:	921d      	str	r2, [sp, #116]	; 0x74
 800da7e:	5d5b      	ldrb	r3, [r3, r5]
 800da80:	2f00      	cmp	r7, #0
 800da82:	d037      	beq.n	800daf4 <_strtod_l+0x254>
 800da84:	9007      	str	r0, [sp, #28]
 800da86:	463d      	mov	r5, r7
 800da88:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800da8c:	2a09      	cmp	r2, #9
 800da8e:	d912      	bls.n	800dab6 <_strtod_l+0x216>
 800da90:	2201      	movs	r2, #1
 800da92:	e7c2      	b.n	800da1a <_strtod_l+0x17a>
 800da94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800da96:	1c5a      	adds	r2, r3, #1
 800da98:	921d      	str	r2, [sp, #116]	; 0x74
 800da9a:	785b      	ldrb	r3, [r3, #1]
 800da9c:	3001      	adds	r0, #1
 800da9e:	2b30      	cmp	r3, #48	; 0x30
 800daa0:	d0f8      	beq.n	800da94 <_strtod_l+0x1f4>
 800daa2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800daa6:	2a08      	cmp	r2, #8
 800daa8:	f200 84db 	bhi.w	800e462 <_strtod_l+0xbc2>
 800daac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800daae:	9007      	str	r0, [sp, #28]
 800dab0:	2000      	movs	r0, #0
 800dab2:	920a      	str	r2, [sp, #40]	; 0x28
 800dab4:	4605      	mov	r5, r0
 800dab6:	3b30      	subs	r3, #48	; 0x30
 800dab8:	f100 0201 	add.w	r2, r0, #1
 800dabc:	d014      	beq.n	800dae8 <_strtod_l+0x248>
 800dabe:	9907      	ldr	r1, [sp, #28]
 800dac0:	4411      	add	r1, r2
 800dac2:	9107      	str	r1, [sp, #28]
 800dac4:	462a      	mov	r2, r5
 800dac6:	eb00 0e05 	add.w	lr, r0, r5
 800daca:	210a      	movs	r1, #10
 800dacc:	4572      	cmp	r2, lr
 800dace:	d113      	bne.n	800daf8 <_strtod_l+0x258>
 800dad0:	182a      	adds	r2, r5, r0
 800dad2:	2a08      	cmp	r2, #8
 800dad4:	f105 0501 	add.w	r5, r5, #1
 800dad8:	4405      	add	r5, r0
 800dada:	dc1c      	bgt.n	800db16 <_strtod_l+0x276>
 800dadc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dade:	220a      	movs	r2, #10
 800dae0:	fb02 3301 	mla	r3, r2, r1, r3
 800dae4:	9309      	str	r3, [sp, #36]	; 0x24
 800dae6:	2200      	movs	r2, #0
 800dae8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800daea:	1c59      	adds	r1, r3, #1
 800daec:	911d      	str	r1, [sp, #116]	; 0x74
 800daee:	785b      	ldrb	r3, [r3, #1]
 800daf0:	4610      	mov	r0, r2
 800daf2:	e7c9      	b.n	800da88 <_strtod_l+0x1e8>
 800daf4:	4638      	mov	r0, r7
 800daf6:	e7d2      	b.n	800da9e <_strtod_l+0x1fe>
 800daf8:	2a08      	cmp	r2, #8
 800dafa:	dc04      	bgt.n	800db06 <_strtod_l+0x266>
 800dafc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800dafe:	434e      	muls	r6, r1
 800db00:	9609      	str	r6, [sp, #36]	; 0x24
 800db02:	3201      	adds	r2, #1
 800db04:	e7e2      	b.n	800dacc <_strtod_l+0x22c>
 800db06:	f102 0c01 	add.w	ip, r2, #1
 800db0a:	f1bc 0f10 	cmp.w	ip, #16
 800db0e:	bfd8      	it	le
 800db10:	fb01 f909 	mulle.w	r9, r1, r9
 800db14:	e7f5      	b.n	800db02 <_strtod_l+0x262>
 800db16:	2d10      	cmp	r5, #16
 800db18:	bfdc      	itt	le
 800db1a:	220a      	movle	r2, #10
 800db1c:	fb02 3909 	mlale	r9, r2, r9, r3
 800db20:	e7e1      	b.n	800dae6 <_strtod_l+0x246>
 800db22:	2300      	movs	r3, #0
 800db24:	9307      	str	r3, [sp, #28]
 800db26:	2201      	movs	r2, #1
 800db28:	e77c      	b.n	800da24 <_strtod_l+0x184>
 800db2a:	f04f 0c00 	mov.w	ip, #0
 800db2e:	f108 0302 	add.w	r3, r8, #2
 800db32:	931d      	str	r3, [sp, #116]	; 0x74
 800db34:	f898 3002 	ldrb.w	r3, [r8, #2]
 800db38:	e785      	b.n	800da46 <_strtod_l+0x1a6>
 800db3a:	f04f 0c01 	mov.w	ip, #1
 800db3e:	e7f6      	b.n	800db2e <_strtod_l+0x28e>
 800db40:	080126e0 	.word	0x080126e0
 800db44:	0801248c 	.word	0x0801248c
 800db48:	7ff00000 	.word	0x7ff00000
 800db4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800db4e:	1c59      	adds	r1, r3, #1
 800db50:	911d      	str	r1, [sp, #116]	; 0x74
 800db52:	785b      	ldrb	r3, [r3, #1]
 800db54:	2b30      	cmp	r3, #48	; 0x30
 800db56:	d0f9      	beq.n	800db4c <_strtod_l+0x2ac>
 800db58:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800db5c:	2908      	cmp	r1, #8
 800db5e:	f63f af79 	bhi.w	800da54 <_strtod_l+0x1b4>
 800db62:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800db66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800db68:	9308      	str	r3, [sp, #32]
 800db6a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800db6c:	1c59      	adds	r1, r3, #1
 800db6e:	911d      	str	r1, [sp, #116]	; 0x74
 800db70:	785b      	ldrb	r3, [r3, #1]
 800db72:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800db76:	2e09      	cmp	r6, #9
 800db78:	d937      	bls.n	800dbea <_strtod_l+0x34a>
 800db7a:	9e08      	ldr	r6, [sp, #32]
 800db7c:	1b89      	subs	r1, r1, r6
 800db7e:	2908      	cmp	r1, #8
 800db80:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800db84:	dc02      	bgt.n	800db8c <_strtod_l+0x2ec>
 800db86:	4576      	cmp	r6, lr
 800db88:	bfa8      	it	ge
 800db8a:	4676      	movge	r6, lr
 800db8c:	f1bc 0f00 	cmp.w	ip, #0
 800db90:	d000      	beq.n	800db94 <_strtod_l+0x2f4>
 800db92:	4276      	negs	r6, r6
 800db94:	2d00      	cmp	r5, #0
 800db96:	d14f      	bne.n	800dc38 <_strtod_l+0x398>
 800db98:	9904      	ldr	r1, [sp, #16]
 800db9a:	4301      	orrs	r1, r0
 800db9c:	f47f aec2 	bne.w	800d924 <_strtod_l+0x84>
 800dba0:	2a00      	cmp	r2, #0
 800dba2:	f47f aedb 	bne.w	800d95c <_strtod_l+0xbc>
 800dba6:	2b69      	cmp	r3, #105	; 0x69
 800dba8:	d027      	beq.n	800dbfa <_strtod_l+0x35a>
 800dbaa:	dc24      	bgt.n	800dbf6 <_strtod_l+0x356>
 800dbac:	2b49      	cmp	r3, #73	; 0x49
 800dbae:	d024      	beq.n	800dbfa <_strtod_l+0x35a>
 800dbb0:	2b4e      	cmp	r3, #78	; 0x4e
 800dbb2:	f47f aed3 	bne.w	800d95c <_strtod_l+0xbc>
 800dbb6:	499e      	ldr	r1, [pc, #632]	; (800de30 <_strtod_l+0x590>)
 800dbb8:	a81d      	add	r0, sp, #116	; 0x74
 800dbba:	f001 fe61 	bl	800f880 <__match>
 800dbbe:	2800      	cmp	r0, #0
 800dbc0:	f43f aecc 	beq.w	800d95c <_strtod_l+0xbc>
 800dbc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dbc6:	781b      	ldrb	r3, [r3, #0]
 800dbc8:	2b28      	cmp	r3, #40	; 0x28
 800dbca:	d12d      	bne.n	800dc28 <_strtod_l+0x388>
 800dbcc:	4999      	ldr	r1, [pc, #612]	; (800de34 <_strtod_l+0x594>)
 800dbce:	aa20      	add	r2, sp, #128	; 0x80
 800dbd0:	a81d      	add	r0, sp, #116	; 0x74
 800dbd2:	f001 fe69 	bl	800f8a8 <__hexnan>
 800dbd6:	2805      	cmp	r0, #5
 800dbd8:	d126      	bne.n	800dc28 <_strtod_l+0x388>
 800dbda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dbdc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800dbe0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800dbe4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800dbe8:	e69c      	b.n	800d924 <_strtod_l+0x84>
 800dbea:	210a      	movs	r1, #10
 800dbec:	fb01 3e0e 	mla	lr, r1, lr, r3
 800dbf0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800dbf4:	e7b9      	b.n	800db6a <_strtod_l+0x2ca>
 800dbf6:	2b6e      	cmp	r3, #110	; 0x6e
 800dbf8:	e7db      	b.n	800dbb2 <_strtod_l+0x312>
 800dbfa:	498f      	ldr	r1, [pc, #572]	; (800de38 <_strtod_l+0x598>)
 800dbfc:	a81d      	add	r0, sp, #116	; 0x74
 800dbfe:	f001 fe3f 	bl	800f880 <__match>
 800dc02:	2800      	cmp	r0, #0
 800dc04:	f43f aeaa 	beq.w	800d95c <_strtod_l+0xbc>
 800dc08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dc0a:	498c      	ldr	r1, [pc, #560]	; (800de3c <_strtod_l+0x59c>)
 800dc0c:	3b01      	subs	r3, #1
 800dc0e:	a81d      	add	r0, sp, #116	; 0x74
 800dc10:	931d      	str	r3, [sp, #116]	; 0x74
 800dc12:	f001 fe35 	bl	800f880 <__match>
 800dc16:	b910      	cbnz	r0, 800dc1e <_strtod_l+0x37e>
 800dc18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dc1a:	3301      	adds	r3, #1
 800dc1c:	931d      	str	r3, [sp, #116]	; 0x74
 800dc1e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800de4c <_strtod_l+0x5ac>
 800dc22:	f04f 0a00 	mov.w	sl, #0
 800dc26:	e67d      	b.n	800d924 <_strtod_l+0x84>
 800dc28:	4885      	ldr	r0, [pc, #532]	; (800de40 <_strtod_l+0x5a0>)
 800dc2a:	f003 f909 	bl	8010e40 <nan>
 800dc2e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800dc32:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800dc36:	e675      	b.n	800d924 <_strtod_l+0x84>
 800dc38:	9b07      	ldr	r3, [sp, #28]
 800dc3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc3c:	1af3      	subs	r3, r6, r3
 800dc3e:	2f00      	cmp	r7, #0
 800dc40:	bf08      	it	eq
 800dc42:	462f      	moveq	r7, r5
 800dc44:	2d10      	cmp	r5, #16
 800dc46:	9308      	str	r3, [sp, #32]
 800dc48:	46a8      	mov	r8, r5
 800dc4a:	bfa8      	it	ge
 800dc4c:	f04f 0810 	movge.w	r8, #16
 800dc50:	f7f2 fc60 	bl	8000514 <__aeabi_ui2d>
 800dc54:	2d09      	cmp	r5, #9
 800dc56:	4682      	mov	sl, r0
 800dc58:	468b      	mov	fp, r1
 800dc5a:	dd13      	ble.n	800dc84 <_strtod_l+0x3e4>
 800dc5c:	4b79      	ldr	r3, [pc, #484]	; (800de44 <_strtod_l+0x5a4>)
 800dc5e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800dc62:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800dc66:	f7f2 fccf 	bl	8000608 <__aeabi_dmul>
 800dc6a:	4682      	mov	sl, r0
 800dc6c:	4648      	mov	r0, r9
 800dc6e:	468b      	mov	fp, r1
 800dc70:	f7f2 fc50 	bl	8000514 <__aeabi_ui2d>
 800dc74:	4602      	mov	r2, r0
 800dc76:	460b      	mov	r3, r1
 800dc78:	4650      	mov	r0, sl
 800dc7a:	4659      	mov	r1, fp
 800dc7c:	f7f2 fb0e 	bl	800029c <__adddf3>
 800dc80:	4682      	mov	sl, r0
 800dc82:	468b      	mov	fp, r1
 800dc84:	2d0f      	cmp	r5, #15
 800dc86:	dc38      	bgt.n	800dcfa <_strtod_l+0x45a>
 800dc88:	9b08      	ldr	r3, [sp, #32]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	f43f ae4a 	beq.w	800d924 <_strtod_l+0x84>
 800dc90:	dd24      	ble.n	800dcdc <_strtod_l+0x43c>
 800dc92:	2b16      	cmp	r3, #22
 800dc94:	dc0b      	bgt.n	800dcae <_strtod_l+0x40e>
 800dc96:	4d6b      	ldr	r5, [pc, #428]	; (800de44 <_strtod_l+0x5a4>)
 800dc98:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800dc9c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dca0:	4652      	mov	r2, sl
 800dca2:	465b      	mov	r3, fp
 800dca4:	f7f2 fcb0 	bl	8000608 <__aeabi_dmul>
 800dca8:	4682      	mov	sl, r0
 800dcaa:	468b      	mov	fp, r1
 800dcac:	e63a      	b.n	800d924 <_strtod_l+0x84>
 800dcae:	9a08      	ldr	r2, [sp, #32]
 800dcb0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800dcb4:	4293      	cmp	r3, r2
 800dcb6:	db20      	blt.n	800dcfa <_strtod_l+0x45a>
 800dcb8:	4c62      	ldr	r4, [pc, #392]	; (800de44 <_strtod_l+0x5a4>)
 800dcba:	f1c5 050f 	rsb	r5, r5, #15
 800dcbe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800dcc2:	4652      	mov	r2, sl
 800dcc4:	465b      	mov	r3, fp
 800dcc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcca:	f7f2 fc9d 	bl	8000608 <__aeabi_dmul>
 800dcce:	9b08      	ldr	r3, [sp, #32]
 800dcd0:	1b5d      	subs	r5, r3, r5
 800dcd2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800dcd6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800dcda:	e7e3      	b.n	800dca4 <_strtod_l+0x404>
 800dcdc:	9b08      	ldr	r3, [sp, #32]
 800dcde:	3316      	adds	r3, #22
 800dce0:	db0b      	blt.n	800dcfa <_strtod_l+0x45a>
 800dce2:	9b07      	ldr	r3, [sp, #28]
 800dce4:	4a57      	ldr	r2, [pc, #348]	; (800de44 <_strtod_l+0x5a4>)
 800dce6:	1b9e      	subs	r6, r3, r6
 800dce8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800dcec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dcf0:	4650      	mov	r0, sl
 800dcf2:	4659      	mov	r1, fp
 800dcf4:	f7f2 fdb2 	bl	800085c <__aeabi_ddiv>
 800dcf8:	e7d6      	b.n	800dca8 <_strtod_l+0x408>
 800dcfa:	9b08      	ldr	r3, [sp, #32]
 800dcfc:	eba5 0808 	sub.w	r8, r5, r8
 800dd00:	4498      	add	r8, r3
 800dd02:	f1b8 0f00 	cmp.w	r8, #0
 800dd06:	dd71      	ble.n	800ddec <_strtod_l+0x54c>
 800dd08:	f018 030f 	ands.w	r3, r8, #15
 800dd0c:	d00a      	beq.n	800dd24 <_strtod_l+0x484>
 800dd0e:	494d      	ldr	r1, [pc, #308]	; (800de44 <_strtod_l+0x5a4>)
 800dd10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dd14:	4652      	mov	r2, sl
 800dd16:	465b      	mov	r3, fp
 800dd18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd1c:	f7f2 fc74 	bl	8000608 <__aeabi_dmul>
 800dd20:	4682      	mov	sl, r0
 800dd22:	468b      	mov	fp, r1
 800dd24:	f038 080f 	bics.w	r8, r8, #15
 800dd28:	d04d      	beq.n	800ddc6 <_strtod_l+0x526>
 800dd2a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800dd2e:	dd22      	ble.n	800dd76 <_strtod_l+0x4d6>
 800dd30:	2500      	movs	r5, #0
 800dd32:	462e      	mov	r6, r5
 800dd34:	9509      	str	r5, [sp, #36]	; 0x24
 800dd36:	9507      	str	r5, [sp, #28]
 800dd38:	2322      	movs	r3, #34	; 0x22
 800dd3a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800de4c <_strtod_l+0x5ac>
 800dd3e:	6023      	str	r3, [r4, #0]
 800dd40:	f04f 0a00 	mov.w	sl, #0
 800dd44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	f43f adec 	beq.w	800d924 <_strtod_l+0x84>
 800dd4c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800dd4e:	4620      	mov	r0, r4
 800dd50:	f001 feb6 	bl	800fac0 <_Bfree>
 800dd54:	9907      	ldr	r1, [sp, #28]
 800dd56:	4620      	mov	r0, r4
 800dd58:	f001 feb2 	bl	800fac0 <_Bfree>
 800dd5c:	4631      	mov	r1, r6
 800dd5e:	4620      	mov	r0, r4
 800dd60:	f001 feae 	bl	800fac0 <_Bfree>
 800dd64:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dd66:	4620      	mov	r0, r4
 800dd68:	f001 feaa 	bl	800fac0 <_Bfree>
 800dd6c:	4629      	mov	r1, r5
 800dd6e:	4620      	mov	r0, r4
 800dd70:	f001 fea6 	bl	800fac0 <_Bfree>
 800dd74:	e5d6      	b.n	800d924 <_strtod_l+0x84>
 800dd76:	2300      	movs	r3, #0
 800dd78:	ea4f 1828 	mov.w	r8, r8, asr #4
 800dd7c:	4650      	mov	r0, sl
 800dd7e:	4659      	mov	r1, fp
 800dd80:	4699      	mov	r9, r3
 800dd82:	f1b8 0f01 	cmp.w	r8, #1
 800dd86:	dc21      	bgt.n	800ddcc <_strtod_l+0x52c>
 800dd88:	b10b      	cbz	r3, 800dd8e <_strtod_l+0x4ee>
 800dd8a:	4682      	mov	sl, r0
 800dd8c:	468b      	mov	fp, r1
 800dd8e:	4b2e      	ldr	r3, [pc, #184]	; (800de48 <_strtod_l+0x5a8>)
 800dd90:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800dd94:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800dd98:	4652      	mov	r2, sl
 800dd9a:	465b      	mov	r3, fp
 800dd9c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800dda0:	f7f2 fc32 	bl	8000608 <__aeabi_dmul>
 800dda4:	4b29      	ldr	r3, [pc, #164]	; (800de4c <_strtod_l+0x5ac>)
 800dda6:	460a      	mov	r2, r1
 800dda8:	400b      	ands	r3, r1
 800ddaa:	4929      	ldr	r1, [pc, #164]	; (800de50 <_strtod_l+0x5b0>)
 800ddac:	428b      	cmp	r3, r1
 800ddae:	4682      	mov	sl, r0
 800ddb0:	d8be      	bhi.n	800dd30 <_strtod_l+0x490>
 800ddb2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ddb6:	428b      	cmp	r3, r1
 800ddb8:	bf86      	itte	hi
 800ddba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800de54 <_strtod_l+0x5b4>
 800ddbe:	f04f 3aff 	movhi.w	sl, #4294967295
 800ddc2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	9304      	str	r3, [sp, #16]
 800ddca:	e081      	b.n	800ded0 <_strtod_l+0x630>
 800ddcc:	f018 0f01 	tst.w	r8, #1
 800ddd0:	d007      	beq.n	800dde2 <_strtod_l+0x542>
 800ddd2:	4b1d      	ldr	r3, [pc, #116]	; (800de48 <_strtod_l+0x5a8>)
 800ddd4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800ddd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dddc:	f7f2 fc14 	bl	8000608 <__aeabi_dmul>
 800dde0:	2301      	movs	r3, #1
 800dde2:	f109 0901 	add.w	r9, r9, #1
 800dde6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ddea:	e7ca      	b.n	800dd82 <_strtod_l+0x4e2>
 800ddec:	d0eb      	beq.n	800ddc6 <_strtod_l+0x526>
 800ddee:	f1c8 0800 	rsb	r8, r8, #0
 800ddf2:	f018 020f 	ands.w	r2, r8, #15
 800ddf6:	d00a      	beq.n	800de0e <_strtod_l+0x56e>
 800ddf8:	4b12      	ldr	r3, [pc, #72]	; (800de44 <_strtod_l+0x5a4>)
 800ddfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ddfe:	4650      	mov	r0, sl
 800de00:	4659      	mov	r1, fp
 800de02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de06:	f7f2 fd29 	bl	800085c <__aeabi_ddiv>
 800de0a:	4682      	mov	sl, r0
 800de0c:	468b      	mov	fp, r1
 800de0e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800de12:	d0d8      	beq.n	800ddc6 <_strtod_l+0x526>
 800de14:	f1b8 0f1f 	cmp.w	r8, #31
 800de18:	dd1e      	ble.n	800de58 <_strtod_l+0x5b8>
 800de1a:	2500      	movs	r5, #0
 800de1c:	462e      	mov	r6, r5
 800de1e:	9509      	str	r5, [sp, #36]	; 0x24
 800de20:	9507      	str	r5, [sp, #28]
 800de22:	2322      	movs	r3, #34	; 0x22
 800de24:	f04f 0a00 	mov.w	sl, #0
 800de28:	f04f 0b00 	mov.w	fp, #0
 800de2c:	6023      	str	r3, [r4, #0]
 800de2e:	e789      	b.n	800dd44 <_strtod_l+0x4a4>
 800de30:	08012461 	.word	0x08012461
 800de34:	080124a0 	.word	0x080124a0
 800de38:	08012459 	.word	0x08012459
 800de3c:	080125e4 	.word	0x080125e4
 800de40:	080128bb 	.word	0x080128bb
 800de44:	08012780 	.word	0x08012780
 800de48:	08012758 	.word	0x08012758
 800de4c:	7ff00000 	.word	0x7ff00000
 800de50:	7ca00000 	.word	0x7ca00000
 800de54:	7fefffff 	.word	0x7fefffff
 800de58:	f018 0310 	ands.w	r3, r8, #16
 800de5c:	bf18      	it	ne
 800de5e:	236a      	movne	r3, #106	; 0x6a
 800de60:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800e218 <_strtod_l+0x978>
 800de64:	9304      	str	r3, [sp, #16]
 800de66:	4650      	mov	r0, sl
 800de68:	4659      	mov	r1, fp
 800de6a:	2300      	movs	r3, #0
 800de6c:	f018 0f01 	tst.w	r8, #1
 800de70:	d004      	beq.n	800de7c <_strtod_l+0x5dc>
 800de72:	e9d9 2300 	ldrd	r2, r3, [r9]
 800de76:	f7f2 fbc7 	bl	8000608 <__aeabi_dmul>
 800de7a:	2301      	movs	r3, #1
 800de7c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800de80:	f109 0908 	add.w	r9, r9, #8
 800de84:	d1f2      	bne.n	800de6c <_strtod_l+0x5cc>
 800de86:	b10b      	cbz	r3, 800de8c <_strtod_l+0x5ec>
 800de88:	4682      	mov	sl, r0
 800de8a:	468b      	mov	fp, r1
 800de8c:	9b04      	ldr	r3, [sp, #16]
 800de8e:	b1bb      	cbz	r3, 800dec0 <_strtod_l+0x620>
 800de90:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800de94:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800de98:	2b00      	cmp	r3, #0
 800de9a:	4659      	mov	r1, fp
 800de9c:	dd10      	ble.n	800dec0 <_strtod_l+0x620>
 800de9e:	2b1f      	cmp	r3, #31
 800dea0:	f340 8128 	ble.w	800e0f4 <_strtod_l+0x854>
 800dea4:	2b34      	cmp	r3, #52	; 0x34
 800dea6:	bfde      	ittt	le
 800dea8:	3b20      	suble	r3, #32
 800deaa:	f04f 32ff 	movle.w	r2, #4294967295
 800deae:	fa02 f303 	lslle.w	r3, r2, r3
 800deb2:	f04f 0a00 	mov.w	sl, #0
 800deb6:	bfcc      	ite	gt
 800deb8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800debc:	ea03 0b01 	andle.w	fp, r3, r1
 800dec0:	2200      	movs	r2, #0
 800dec2:	2300      	movs	r3, #0
 800dec4:	4650      	mov	r0, sl
 800dec6:	4659      	mov	r1, fp
 800dec8:	f7f2 fe06 	bl	8000ad8 <__aeabi_dcmpeq>
 800decc:	2800      	cmp	r0, #0
 800dece:	d1a4      	bne.n	800de1a <_strtod_l+0x57a>
 800ded0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ded2:	9300      	str	r3, [sp, #0]
 800ded4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ded6:	462b      	mov	r3, r5
 800ded8:	463a      	mov	r2, r7
 800deda:	4620      	mov	r0, r4
 800dedc:	f001 fe5c 	bl	800fb98 <__s2b>
 800dee0:	9009      	str	r0, [sp, #36]	; 0x24
 800dee2:	2800      	cmp	r0, #0
 800dee4:	f43f af24 	beq.w	800dd30 <_strtod_l+0x490>
 800dee8:	9b07      	ldr	r3, [sp, #28]
 800deea:	1b9e      	subs	r6, r3, r6
 800deec:	9b08      	ldr	r3, [sp, #32]
 800deee:	2b00      	cmp	r3, #0
 800def0:	bfb4      	ite	lt
 800def2:	4633      	movlt	r3, r6
 800def4:	2300      	movge	r3, #0
 800def6:	9310      	str	r3, [sp, #64]	; 0x40
 800def8:	9b08      	ldr	r3, [sp, #32]
 800defa:	2500      	movs	r5, #0
 800defc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800df00:	9318      	str	r3, [sp, #96]	; 0x60
 800df02:	462e      	mov	r6, r5
 800df04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df06:	4620      	mov	r0, r4
 800df08:	6859      	ldr	r1, [r3, #4]
 800df0a:	f001 fd99 	bl	800fa40 <_Balloc>
 800df0e:	9007      	str	r0, [sp, #28]
 800df10:	2800      	cmp	r0, #0
 800df12:	f43f af11 	beq.w	800dd38 <_strtod_l+0x498>
 800df16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df18:	691a      	ldr	r2, [r3, #16]
 800df1a:	3202      	adds	r2, #2
 800df1c:	f103 010c 	add.w	r1, r3, #12
 800df20:	0092      	lsls	r2, r2, #2
 800df22:	300c      	adds	r0, #12
 800df24:	f7fe fd66 	bl	800c9f4 <memcpy>
 800df28:	ec4b ab10 	vmov	d0, sl, fp
 800df2c:	aa20      	add	r2, sp, #128	; 0x80
 800df2e:	a91f      	add	r1, sp, #124	; 0x7c
 800df30:	4620      	mov	r0, r4
 800df32:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800df36:	f002 f96b 	bl	8010210 <__d2b>
 800df3a:	901e      	str	r0, [sp, #120]	; 0x78
 800df3c:	2800      	cmp	r0, #0
 800df3e:	f43f aefb 	beq.w	800dd38 <_strtod_l+0x498>
 800df42:	2101      	movs	r1, #1
 800df44:	4620      	mov	r0, r4
 800df46:	f001 fec1 	bl	800fccc <__i2b>
 800df4a:	4606      	mov	r6, r0
 800df4c:	2800      	cmp	r0, #0
 800df4e:	f43f aef3 	beq.w	800dd38 <_strtod_l+0x498>
 800df52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800df54:	9904      	ldr	r1, [sp, #16]
 800df56:	2b00      	cmp	r3, #0
 800df58:	bfab      	itete	ge
 800df5a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800df5c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800df5e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800df60:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800df64:	bfac      	ite	ge
 800df66:	eb03 0902 	addge.w	r9, r3, r2
 800df6a:	1ad7      	sublt	r7, r2, r3
 800df6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800df6e:	eba3 0801 	sub.w	r8, r3, r1
 800df72:	4490      	add	r8, r2
 800df74:	4ba3      	ldr	r3, [pc, #652]	; (800e204 <_strtod_l+0x964>)
 800df76:	f108 38ff 	add.w	r8, r8, #4294967295
 800df7a:	4598      	cmp	r8, r3
 800df7c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800df80:	f280 80cc 	bge.w	800e11c <_strtod_l+0x87c>
 800df84:	eba3 0308 	sub.w	r3, r3, r8
 800df88:	2b1f      	cmp	r3, #31
 800df8a:	eba2 0203 	sub.w	r2, r2, r3
 800df8e:	f04f 0101 	mov.w	r1, #1
 800df92:	f300 80b6 	bgt.w	800e102 <_strtod_l+0x862>
 800df96:	fa01 f303 	lsl.w	r3, r1, r3
 800df9a:	9311      	str	r3, [sp, #68]	; 0x44
 800df9c:	2300      	movs	r3, #0
 800df9e:	930c      	str	r3, [sp, #48]	; 0x30
 800dfa0:	eb09 0802 	add.w	r8, r9, r2
 800dfa4:	9b04      	ldr	r3, [sp, #16]
 800dfa6:	45c1      	cmp	r9, r8
 800dfa8:	4417      	add	r7, r2
 800dfaa:	441f      	add	r7, r3
 800dfac:	464b      	mov	r3, r9
 800dfae:	bfa8      	it	ge
 800dfb0:	4643      	movge	r3, r8
 800dfb2:	42bb      	cmp	r3, r7
 800dfb4:	bfa8      	it	ge
 800dfb6:	463b      	movge	r3, r7
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	bfc2      	ittt	gt
 800dfbc:	eba8 0803 	subgt.w	r8, r8, r3
 800dfc0:	1aff      	subgt	r7, r7, r3
 800dfc2:	eba9 0903 	subgt.w	r9, r9, r3
 800dfc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	dd17      	ble.n	800dffc <_strtod_l+0x75c>
 800dfcc:	4631      	mov	r1, r6
 800dfce:	461a      	mov	r2, r3
 800dfd0:	4620      	mov	r0, r4
 800dfd2:	f001 ff37 	bl	800fe44 <__pow5mult>
 800dfd6:	4606      	mov	r6, r0
 800dfd8:	2800      	cmp	r0, #0
 800dfda:	f43f aead 	beq.w	800dd38 <_strtod_l+0x498>
 800dfde:	4601      	mov	r1, r0
 800dfe0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800dfe2:	4620      	mov	r0, r4
 800dfe4:	f001 fe88 	bl	800fcf8 <__multiply>
 800dfe8:	900f      	str	r0, [sp, #60]	; 0x3c
 800dfea:	2800      	cmp	r0, #0
 800dfec:	f43f aea4 	beq.w	800dd38 <_strtod_l+0x498>
 800dff0:	991e      	ldr	r1, [sp, #120]	; 0x78
 800dff2:	4620      	mov	r0, r4
 800dff4:	f001 fd64 	bl	800fac0 <_Bfree>
 800dff8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dffa:	931e      	str	r3, [sp, #120]	; 0x78
 800dffc:	f1b8 0f00 	cmp.w	r8, #0
 800e000:	f300 8091 	bgt.w	800e126 <_strtod_l+0x886>
 800e004:	9b08      	ldr	r3, [sp, #32]
 800e006:	2b00      	cmp	r3, #0
 800e008:	dd08      	ble.n	800e01c <_strtod_l+0x77c>
 800e00a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e00c:	9907      	ldr	r1, [sp, #28]
 800e00e:	4620      	mov	r0, r4
 800e010:	f001 ff18 	bl	800fe44 <__pow5mult>
 800e014:	9007      	str	r0, [sp, #28]
 800e016:	2800      	cmp	r0, #0
 800e018:	f43f ae8e 	beq.w	800dd38 <_strtod_l+0x498>
 800e01c:	2f00      	cmp	r7, #0
 800e01e:	dd08      	ble.n	800e032 <_strtod_l+0x792>
 800e020:	9907      	ldr	r1, [sp, #28]
 800e022:	463a      	mov	r2, r7
 800e024:	4620      	mov	r0, r4
 800e026:	f001 ff67 	bl	800fef8 <__lshift>
 800e02a:	9007      	str	r0, [sp, #28]
 800e02c:	2800      	cmp	r0, #0
 800e02e:	f43f ae83 	beq.w	800dd38 <_strtod_l+0x498>
 800e032:	f1b9 0f00 	cmp.w	r9, #0
 800e036:	dd08      	ble.n	800e04a <_strtod_l+0x7aa>
 800e038:	4631      	mov	r1, r6
 800e03a:	464a      	mov	r2, r9
 800e03c:	4620      	mov	r0, r4
 800e03e:	f001 ff5b 	bl	800fef8 <__lshift>
 800e042:	4606      	mov	r6, r0
 800e044:	2800      	cmp	r0, #0
 800e046:	f43f ae77 	beq.w	800dd38 <_strtod_l+0x498>
 800e04a:	9a07      	ldr	r2, [sp, #28]
 800e04c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e04e:	4620      	mov	r0, r4
 800e050:	f001 ffda 	bl	8010008 <__mdiff>
 800e054:	4605      	mov	r5, r0
 800e056:	2800      	cmp	r0, #0
 800e058:	f43f ae6e 	beq.w	800dd38 <_strtod_l+0x498>
 800e05c:	68c3      	ldr	r3, [r0, #12]
 800e05e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e060:	2300      	movs	r3, #0
 800e062:	60c3      	str	r3, [r0, #12]
 800e064:	4631      	mov	r1, r6
 800e066:	f001 ffb3 	bl	800ffd0 <__mcmp>
 800e06a:	2800      	cmp	r0, #0
 800e06c:	da65      	bge.n	800e13a <_strtod_l+0x89a>
 800e06e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e070:	ea53 030a 	orrs.w	r3, r3, sl
 800e074:	f040 8087 	bne.w	800e186 <_strtod_l+0x8e6>
 800e078:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	f040 8082 	bne.w	800e186 <_strtod_l+0x8e6>
 800e082:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e086:	0d1b      	lsrs	r3, r3, #20
 800e088:	051b      	lsls	r3, r3, #20
 800e08a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e08e:	d97a      	bls.n	800e186 <_strtod_l+0x8e6>
 800e090:	696b      	ldr	r3, [r5, #20]
 800e092:	b913      	cbnz	r3, 800e09a <_strtod_l+0x7fa>
 800e094:	692b      	ldr	r3, [r5, #16]
 800e096:	2b01      	cmp	r3, #1
 800e098:	dd75      	ble.n	800e186 <_strtod_l+0x8e6>
 800e09a:	4629      	mov	r1, r5
 800e09c:	2201      	movs	r2, #1
 800e09e:	4620      	mov	r0, r4
 800e0a0:	f001 ff2a 	bl	800fef8 <__lshift>
 800e0a4:	4631      	mov	r1, r6
 800e0a6:	4605      	mov	r5, r0
 800e0a8:	f001 ff92 	bl	800ffd0 <__mcmp>
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	dd6a      	ble.n	800e186 <_strtod_l+0x8e6>
 800e0b0:	9904      	ldr	r1, [sp, #16]
 800e0b2:	4a55      	ldr	r2, [pc, #340]	; (800e208 <_strtod_l+0x968>)
 800e0b4:	465b      	mov	r3, fp
 800e0b6:	2900      	cmp	r1, #0
 800e0b8:	f000 8085 	beq.w	800e1c6 <_strtod_l+0x926>
 800e0bc:	ea02 010b 	and.w	r1, r2, fp
 800e0c0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e0c4:	dc7f      	bgt.n	800e1c6 <_strtod_l+0x926>
 800e0c6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e0ca:	f77f aeaa 	ble.w	800de22 <_strtod_l+0x582>
 800e0ce:	4a4f      	ldr	r2, [pc, #316]	; (800e20c <_strtod_l+0x96c>)
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800e0d6:	4650      	mov	r0, sl
 800e0d8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800e0dc:	4659      	mov	r1, fp
 800e0de:	f7f2 fa93 	bl	8000608 <__aeabi_dmul>
 800e0e2:	460b      	mov	r3, r1
 800e0e4:	4303      	orrs	r3, r0
 800e0e6:	bf08      	it	eq
 800e0e8:	2322      	moveq	r3, #34	; 0x22
 800e0ea:	4682      	mov	sl, r0
 800e0ec:	468b      	mov	fp, r1
 800e0ee:	bf08      	it	eq
 800e0f0:	6023      	streq	r3, [r4, #0]
 800e0f2:	e62b      	b.n	800dd4c <_strtod_l+0x4ac>
 800e0f4:	f04f 32ff 	mov.w	r2, #4294967295
 800e0f8:	fa02 f303 	lsl.w	r3, r2, r3
 800e0fc:	ea03 0a0a 	and.w	sl, r3, sl
 800e100:	e6de      	b.n	800dec0 <_strtod_l+0x620>
 800e102:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800e106:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800e10a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800e10e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800e112:	fa01 f308 	lsl.w	r3, r1, r8
 800e116:	930c      	str	r3, [sp, #48]	; 0x30
 800e118:	9111      	str	r1, [sp, #68]	; 0x44
 800e11a:	e741      	b.n	800dfa0 <_strtod_l+0x700>
 800e11c:	2300      	movs	r3, #0
 800e11e:	930c      	str	r3, [sp, #48]	; 0x30
 800e120:	2301      	movs	r3, #1
 800e122:	9311      	str	r3, [sp, #68]	; 0x44
 800e124:	e73c      	b.n	800dfa0 <_strtod_l+0x700>
 800e126:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e128:	4642      	mov	r2, r8
 800e12a:	4620      	mov	r0, r4
 800e12c:	f001 fee4 	bl	800fef8 <__lshift>
 800e130:	901e      	str	r0, [sp, #120]	; 0x78
 800e132:	2800      	cmp	r0, #0
 800e134:	f47f af66 	bne.w	800e004 <_strtod_l+0x764>
 800e138:	e5fe      	b.n	800dd38 <_strtod_l+0x498>
 800e13a:	465f      	mov	r7, fp
 800e13c:	d16e      	bne.n	800e21c <_strtod_l+0x97c>
 800e13e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e140:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e144:	b342      	cbz	r2, 800e198 <_strtod_l+0x8f8>
 800e146:	4a32      	ldr	r2, [pc, #200]	; (800e210 <_strtod_l+0x970>)
 800e148:	4293      	cmp	r3, r2
 800e14a:	d128      	bne.n	800e19e <_strtod_l+0x8fe>
 800e14c:	9b04      	ldr	r3, [sp, #16]
 800e14e:	4650      	mov	r0, sl
 800e150:	b1eb      	cbz	r3, 800e18e <_strtod_l+0x8ee>
 800e152:	4a2d      	ldr	r2, [pc, #180]	; (800e208 <_strtod_l+0x968>)
 800e154:	403a      	ands	r2, r7
 800e156:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800e15a:	f04f 31ff 	mov.w	r1, #4294967295
 800e15e:	d819      	bhi.n	800e194 <_strtod_l+0x8f4>
 800e160:	0d12      	lsrs	r2, r2, #20
 800e162:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e166:	fa01 f303 	lsl.w	r3, r1, r3
 800e16a:	4298      	cmp	r0, r3
 800e16c:	d117      	bne.n	800e19e <_strtod_l+0x8fe>
 800e16e:	4b29      	ldr	r3, [pc, #164]	; (800e214 <_strtod_l+0x974>)
 800e170:	429f      	cmp	r7, r3
 800e172:	d102      	bne.n	800e17a <_strtod_l+0x8da>
 800e174:	3001      	adds	r0, #1
 800e176:	f43f addf 	beq.w	800dd38 <_strtod_l+0x498>
 800e17a:	4b23      	ldr	r3, [pc, #140]	; (800e208 <_strtod_l+0x968>)
 800e17c:	403b      	ands	r3, r7
 800e17e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800e182:	f04f 0a00 	mov.w	sl, #0
 800e186:	9b04      	ldr	r3, [sp, #16]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d1a0      	bne.n	800e0ce <_strtod_l+0x82e>
 800e18c:	e5de      	b.n	800dd4c <_strtod_l+0x4ac>
 800e18e:	f04f 33ff 	mov.w	r3, #4294967295
 800e192:	e7ea      	b.n	800e16a <_strtod_l+0x8ca>
 800e194:	460b      	mov	r3, r1
 800e196:	e7e8      	b.n	800e16a <_strtod_l+0x8ca>
 800e198:	ea53 030a 	orrs.w	r3, r3, sl
 800e19c:	d088      	beq.n	800e0b0 <_strtod_l+0x810>
 800e19e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e1a0:	b1db      	cbz	r3, 800e1da <_strtod_l+0x93a>
 800e1a2:	423b      	tst	r3, r7
 800e1a4:	d0ef      	beq.n	800e186 <_strtod_l+0x8e6>
 800e1a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e1a8:	9a04      	ldr	r2, [sp, #16]
 800e1aa:	4650      	mov	r0, sl
 800e1ac:	4659      	mov	r1, fp
 800e1ae:	b1c3      	cbz	r3, 800e1e2 <_strtod_l+0x942>
 800e1b0:	f7ff fb59 	bl	800d866 <sulp>
 800e1b4:	4602      	mov	r2, r0
 800e1b6:	460b      	mov	r3, r1
 800e1b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e1bc:	f7f2 f86e 	bl	800029c <__adddf3>
 800e1c0:	4682      	mov	sl, r0
 800e1c2:	468b      	mov	fp, r1
 800e1c4:	e7df      	b.n	800e186 <_strtod_l+0x8e6>
 800e1c6:	4013      	ands	r3, r2
 800e1c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e1cc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e1d0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e1d4:	f04f 3aff 	mov.w	sl, #4294967295
 800e1d8:	e7d5      	b.n	800e186 <_strtod_l+0x8e6>
 800e1da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e1dc:	ea13 0f0a 	tst.w	r3, sl
 800e1e0:	e7e0      	b.n	800e1a4 <_strtod_l+0x904>
 800e1e2:	f7ff fb40 	bl	800d866 <sulp>
 800e1e6:	4602      	mov	r2, r0
 800e1e8:	460b      	mov	r3, r1
 800e1ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e1ee:	f7f2 f853 	bl	8000298 <__aeabi_dsub>
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	4682      	mov	sl, r0
 800e1f8:	468b      	mov	fp, r1
 800e1fa:	f7f2 fc6d 	bl	8000ad8 <__aeabi_dcmpeq>
 800e1fe:	2800      	cmp	r0, #0
 800e200:	d0c1      	beq.n	800e186 <_strtod_l+0x8e6>
 800e202:	e60e      	b.n	800de22 <_strtod_l+0x582>
 800e204:	fffffc02 	.word	0xfffffc02
 800e208:	7ff00000 	.word	0x7ff00000
 800e20c:	39500000 	.word	0x39500000
 800e210:	000fffff 	.word	0x000fffff
 800e214:	7fefffff 	.word	0x7fefffff
 800e218:	080124b8 	.word	0x080124b8
 800e21c:	4631      	mov	r1, r6
 800e21e:	4628      	mov	r0, r5
 800e220:	f002 f852 	bl	80102c8 <__ratio>
 800e224:	ec59 8b10 	vmov	r8, r9, d0
 800e228:	ee10 0a10 	vmov	r0, s0
 800e22c:	2200      	movs	r2, #0
 800e22e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e232:	4649      	mov	r1, r9
 800e234:	f7f2 fc64 	bl	8000b00 <__aeabi_dcmple>
 800e238:	2800      	cmp	r0, #0
 800e23a:	d07c      	beq.n	800e336 <_strtod_l+0xa96>
 800e23c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d04c      	beq.n	800e2dc <_strtod_l+0xa3c>
 800e242:	4b95      	ldr	r3, [pc, #596]	; (800e498 <_strtod_l+0xbf8>)
 800e244:	2200      	movs	r2, #0
 800e246:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e24a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800e498 <_strtod_l+0xbf8>
 800e24e:	f04f 0800 	mov.w	r8, #0
 800e252:	4b92      	ldr	r3, [pc, #584]	; (800e49c <_strtod_l+0xbfc>)
 800e254:	403b      	ands	r3, r7
 800e256:	9311      	str	r3, [sp, #68]	; 0x44
 800e258:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e25a:	4b91      	ldr	r3, [pc, #580]	; (800e4a0 <_strtod_l+0xc00>)
 800e25c:	429a      	cmp	r2, r3
 800e25e:	f040 80b2 	bne.w	800e3c6 <_strtod_l+0xb26>
 800e262:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e266:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e26a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800e26e:	ec4b ab10 	vmov	d0, sl, fp
 800e272:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800e276:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e27a:	f001 ff4d 	bl	8010118 <__ulp>
 800e27e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e282:	ec53 2b10 	vmov	r2, r3, d0
 800e286:	f7f2 f9bf 	bl	8000608 <__aeabi_dmul>
 800e28a:	4652      	mov	r2, sl
 800e28c:	465b      	mov	r3, fp
 800e28e:	f7f2 f805 	bl	800029c <__adddf3>
 800e292:	460b      	mov	r3, r1
 800e294:	4981      	ldr	r1, [pc, #516]	; (800e49c <_strtod_l+0xbfc>)
 800e296:	4a83      	ldr	r2, [pc, #524]	; (800e4a4 <_strtod_l+0xc04>)
 800e298:	4019      	ands	r1, r3
 800e29a:	4291      	cmp	r1, r2
 800e29c:	4682      	mov	sl, r0
 800e29e:	d95e      	bls.n	800e35e <_strtod_l+0xabe>
 800e2a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e2a2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e2a6:	4293      	cmp	r3, r2
 800e2a8:	d103      	bne.n	800e2b2 <_strtod_l+0xa12>
 800e2aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2ac:	3301      	adds	r3, #1
 800e2ae:	f43f ad43 	beq.w	800dd38 <_strtod_l+0x498>
 800e2b2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800e4b0 <_strtod_l+0xc10>
 800e2b6:	f04f 3aff 	mov.w	sl, #4294967295
 800e2ba:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e2bc:	4620      	mov	r0, r4
 800e2be:	f001 fbff 	bl	800fac0 <_Bfree>
 800e2c2:	9907      	ldr	r1, [sp, #28]
 800e2c4:	4620      	mov	r0, r4
 800e2c6:	f001 fbfb 	bl	800fac0 <_Bfree>
 800e2ca:	4631      	mov	r1, r6
 800e2cc:	4620      	mov	r0, r4
 800e2ce:	f001 fbf7 	bl	800fac0 <_Bfree>
 800e2d2:	4629      	mov	r1, r5
 800e2d4:	4620      	mov	r0, r4
 800e2d6:	f001 fbf3 	bl	800fac0 <_Bfree>
 800e2da:	e613      	b.n	800df04 <_strtod_l+0x664>
 800e2dc:	f1ba 0f00 	cmp.w	sl, #0
 800e2e0:	d11b      	bne.n	800e31a <_strtod_l+0xa7a>
 800e2e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e2e6:	b9f3      	cbnz	r3, 800e326 <_strtod_l+0xa86>
 800e2e8:	4b6b      	ldr	r3, [pc, #428]	; (800e498 <_strtod_l+0xbf8>)
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	4640      	mov	r0, r8
 800e2ee:	4649      	mov	r1, r9
 800e2f0:	f7f2 fbfc 	bl	8000aec <__aeabi_dcmplt>
 800e2f4:	b9d0      	cbnz	r0, 800e32c <_strtod_l+0xa8c>
 800e2f6:	4640      	mov	r0, r8
 800e2f8:	4649      	mov	r1, r9
 800e2fa:	4b6b      	ldr	r3, [pc, #428]	; (800e4a8 <_strtod_l+0xc08>)
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	f7f2 f983 	bl	8000608 <__aeabi_dmul>
 800e302:	4680      	mov	r8, r0
 800e304:	4689      	mov	r9, r1
 800e306:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e30a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800e30e:	931b      	str	r3, [sp, #108]	; 0x6c
 800e310:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800e314:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e318:	e79b      	b.n	800e252 <_strtod_l+0x9b2>
 800e31a:	f1ba 0f01 	cmp.w	sl, #1
 800e31e:	d102      	bne.n	800e326 <_strtod_l+0xa86>
 800e320:	2f00      	cmp	r7, #0
 800e322:	f43f ad7e 	beq.w	800de22 <_strtod_l+0x582>
 800e326:	4b61      	ldr	r3, [pc, #388]	; (800e4ac <_strtod_l+0xc0c>)
 800e328:	2200      	movs	r2, #0
 800e32a:	e78c      	b.n	800e246 <_strtod_l+0x9a6>
 800e32c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800e4a8 <_strtod_l+0xc08>
 800e330:	f04f 0800 	mov.w	r8, #0
 800e334:	e7e7      	b.n	800e306 <_strtod_l+0xa66>
 800e336:	4b5c      	ldr	r3, [pc, #368]	; (800e4a8 <_strtod_l+0xc08>)
 800e338:	4640      	mov	r0, r8
 800e33a:	4649      	mov	r1, r9
 800e33c:	2200      	movs	r2, #0
 800e33e:	f7f2 f963 	bl	8000608 <__aeabi_dmul>
 800e342:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e344:	4680      	mov	r8, r0
 800e346:	4689      	mov	r9, r1
 800e348:	b933      	cbnz	r3, 800e358 <_strtod_l+0xab8>
 800e34a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e34e:	9012      	str	r0, [sp, #72]	; 0x48
 800e350:	9313      	str	r3, [sp, #76]	; 0x4c
 800e352:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800e356:	e7dd      	b.n	800e314 <_strtod_l+0xa74>
 800e358:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800e35c:	e7f9      	b.n	800e352 <_strtod_l+0xab2>
 800e35e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e362:	9b04      	ldr	r3, [sp, #16]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d1a8      	bne.n	800e2ba <_strtod_l+0xa1a>
 800e368:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e36c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e36e:	0d1b      	lsrs	r3, r3, #20
 800e370:	051b      	lsls	r3, r3, #20
 800e372:	429a      	cmp	r2, r3
 800e374:	d1a1      	bne.n	800e2ba <_strtod_l+0xa1a>
 800e376:	4640      	mov	r0, r8
 800e378:	4649      	mov	r1, r9
 800e37a:	f7f2 fca5 	bl	8000cc8 <__aeabi_d2lz>
 800e37e:	f7f2 f915 	bl	80005ac <__aeabi_l2d>
 800e382:	4602      	mov	r2, r0
 800e384:	460b      	mov	r3, r1
 800e386:	4640      	mov	r0, r8
 800e388:	4649      	mov	r1, r9
 800e38a:	f7f1 ff85 	bl	8000298 <__aeabi_dsub>
 800e38e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e390:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e394:	ea43 030a 	orr.w	r3, r3, sl
 800e398:	4313      	orrs	r3, r2
 800e39a:	4680      	mov	r8, r0
 800e39c:	4689      	mov	r9, r1
 800e39e:	d053      	beq.n	800e448 <_strtod_l+0xba8>
 800e3a0:	a335      	add	r3, pc, #212	; (adr r3, 800e478 <_strtod_l+0xbd8>)
 800e3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3a6:	f7f2 fba1 	bl	8000aec <__aeabi_dcmplt>
 800e3aa:	2800      	cmp	r0, #0
 800e3ac:	f47f acce 	bne.w	800dd4c <_strtod_l+0x4ac>
 800e3b0:	a333      	add	r3, pc, #204	; (adr r3, 800e480 <_strtod_l+0xbe0>)
 800e3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b6:	4640      	mov	r0, r8
 800e3b8:	4649      	mov	r1, r9
 800e3ba:	f7f2 fbb5 	bl	8000b28 <__aeabi_dcmpgt>
 800e3be:	2800      	cmp	r0, #0
 800e3c0:	f43f af7b 	beq.w	800e2ba <_strtod_l+0xa1a>
 800e3c4:	e4c2      	b.n	800dd4c <_strtod_l+0x4ac>
 800e3c6:	9b04      	ldr	r3, [sp, #16]
 800e3c8:	b333      	cbz	r3, 800e418 <_strtod_l+0xb78>
 800e3ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e3cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e3d0:	d822      	bhi.n	800e418 <_strtod_l+0xb78>
 800e3d2:	a32d      	add	r3, pc, #180	; (adr r3, 800e488 <_strtod_l+0xbe8>)
 800e3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3d8:	4640      	mov	r0, r8
 800e3da:	4649      	mov	r1, r9
 800e3dc:	f7f2 fb90 	bl	8000b00 <__aeabi_dcmple>
 800e3e0:	b1a0      	cbz	r0, 800e40c <_strtod_l+0xb6c>
 800e3e2:	4649      	mov	r1, r9
 800e3e4:	4640      	mov	r0, r8
 800e3e6:	f7f2 fbe7 	bl	8000bb8 <__aeabi_d2uiz>
 800e3ea:	2801      	cmp	r0, #1
 800e3ec:	bf38      	it	cc
 800e3ee:	2001      	movcc	r0, #1
 800e3f0:	f7f2 f890 	bl	8000514 <__aeabi_ui2d>
 800e3f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e3f6:	4680      	mov	r8, r0
 800e3f8:	4689      	mov	r9, r1
 800e3fa:	bb13      	cbnz	r3, 800e442 <_strtod_l+0xba2>
 800e3fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e400:	9014      	str	r0, [sp, #80]	; 0x50
 800e402:	9315      	str	r3, [sp, #84]	; 0x54
 800e404:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800e408:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e40c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e40e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e410:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e414:	1a9b      	subs	r3, r3, r2
 800e416:	930d      	str	r3, [sp, #52]	; 0x34
 800e418:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e41c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e420:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e424:	f001 fe78 	bl	8010118 <__ulp>
 800e428:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e42c:	ec53 2b10 	vmov	r2, r3, d0
 800e430:	f7f2 f8ea 	bl	8000608 <__aeabi_dmul>
 800e434:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e438:	f7f1 ff30 	bl	800029c <__adddf3>
 800e43c:	4682      	mov	sl, r0
 800e43e:	468b      	mov	fp, r1
 800e440:	e78f      	b.n	800e362 <_strtod_l+0xac2>
 800e442:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800e446:	e7dd      	b.n	800e404 <_strtod_l+0xb64>
 800e448:	a311      	add	r3, pc, #68	; (adr r3, 800e490 <_strtod_l+0xbf0>)
 800e44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e44e:	f7f2 fb4d 	bl	8000aec <__aeabi_dcmplt>
 800e452:	e7b4      	b.n	800e3be <_strtod_l+0xb1e>
 800e454:	2300      	movs	r3, #0
 800e456:	930e      	str	r3, [sp, #56]	; 0x38
 800e458:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e45a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e45c:	6013      	str	r3, [r2, #0]
 800e45e:	f7ff ba65 	b.w	800d92c <_strtod_l+0x8c>
 800e462:	2b65      	cmp	r3, #101	; 0x65
 800e464:	f43f ab5d 	beq.w	800db22 <_strtod_l+0x282>
 800e468:	2b45      	cmp	r3, #69	; 0x45
 800e46a:	f43f ab5a 	beq.w	800db22 <_strtod_l+0x282>
 800e46e:	2201      	movs	r2, #1
 800e470:	f7ff bb92 	b.w	800db98 <_strtod_l+0x2f8>
 800e474:	f3af 8000 	nop.w
 800e478:	94a03595 	.word	0x94a03595
 800e47c:	3fdfffff 	.word	0x3fdfffff
 800e480:	35afe535 	.word	0x35afe535
 800e484:	3fe00000 	.word	0x3fe00000
 800e488:	ffc00000 	.word	0xffc00000
 800e48c:	41dfffff 	.word	0x41dfffff
 800e490:	94a03595 	.word	0x94a03595
 800e494:	3fcfffff 	.word	0x3fcfffff
 800e498:	3ff00000 	.word	0x3ff00000
 800e49c:	7ff00000 	.word	0x7ff00000
 800e4a0:	7fe00000 	.word	0x7fe00000
 800e4a4:	7c9fffff 	.word	0x7c9fffff
 800e4a8:	3fe00000 	.word	0x3fe00000
 800e4ac:	bff00000 	.word	0xbff00000
 800e4b0:	7fefffff 	.word	0x7fefffff

0800e4b4 <_strtod_r>:
 800e4b4:	4b01      	ldr	r3, [pc, #4]	; (800e4bc <_strtod_r+0x8>)
 800e4b6:	f7ff b9f3 	b.w	800d8a0 <_strtod_l>
 800e4ba:	bf00      	nop
 800e4bc:	20000150 	.word	0x20000150

0800e4c0 <_strtol_l.isra.0>:
 800e4c0:	2b01      	cmp	r3, #1
 800e4c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4c6:	d001      	beq.n	800e4cc <_strtol_l.isra.0+0xc>
 800e4c8:	2b24      	cmp	r3, #36	; 0x24
 800e4ca:	d906      	bls.n	800e4da <_strtol_l.isra.0+0x1a>
 800e4cc:	f7fe fa68 	bl	800c9a0 <__errno>
 800e4d0:	2316      	movs	r3, #22
 800e4d2:	6003      	str	r3, [r0, #0]
 800e4d4:	2000      	movs	r0, #0
 800e4d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4da:	4f3a      	ldr	r7, [pc, #232]	; (800e5c4 <_strtol_l.isra.0+0x104>)
 800e4dc:	468e      	mov	lr, r1
 800e4de:	4676      	mov	r6, lr
 800e4e0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800e4e4:	5de5      	ldrb	r5, [r4, r7]
 800e4e6:	f015 0508 	ands.w	r5, r5, #8
 800e4ea:	d1f8      	bne.n	800e4de <_strtol_l.isra.0+0x1e>
 800e4ec:	2c2d      	cmp	r4, #45	; 0x2d
 800e4ee:	d134      	bne.n	800e55a <_strtol_l.isra.0+0x9a>
 800e4f0:	f89e 4000 	ldrb.w	r4, [lr]
 800e4f4:	f04f 0801 	mov.w	r8, #1
 800e4f8:	f106 0e02 	add.w	lr, r6, #2
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d05c      	beq.n	800e5ba <_strtol_l.isra.0+0xfa>
 800e500:	2b10      	cmp	r3, #16
 800e502:	d10c      	bne.n	800e51e <_strtol_l.isra.0+0x5e>
 800e504:	2c30      	cmp	r4, #48	; 0x30
 800e506:	d10a      	bne.n	800e51e <_strtol_l.isra.0+0x5e>
 800e508:	f89e 4000 	ldrb.w	r4, [lr]
 800e50c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e510:	2c58      	cmp	r4, #88	; 0x58
 800e512:	d14d      	bne.n	800e5b0 <_strtol_l.isra.0+0xf0>
 800e514:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800e518:	2310      	movs	r3, #16
 800e51a:	f10e 0e02 	add.w	lr, lr, #2
 800e51e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800e522:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e526:	2600      	movs	r6, #0
 800e528:	fbbc f9f3 	udiv	r9, ip, r3
 800e52c:	4635      	mov	r5, r6
 800e52e:	fb03 ca19 	mls	sl, r3, r9, ip
 800e532:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800e536:	2f09      	cmp	r7, #9
 800e538:	d818      	bhi.n	800e56c <_strtol_l.isra.0+0xac>
 800e53a:	463c      	mov	r4, r7
 800e53c:	42a3      	cmp	r3, r4
 800e53e:	dd24      	ble.n	800e58a <_strtol_l.isra.0+0xca>
 800e540:	2e00      	cmp	r6, #0
 800e542:	db1f      	blt.n	800e584 <_strtol_l.isra.0+0xc4>
 800e544:	45a9      	cmp	r9, r5
 800e546:	d31d      	bcc.n	800e584 <_strtol_l.isra.0+0xc4>
 800e548:	d101      	bne.n	800e54e <_strtol_l.isra.0+0x8e>
 800e54a:	45a2      	cmp	sl, r4
 800e54c:	db1a      	blt.n	800e584 <_strtol_l.isra.0+0xc4>
 800e54e:	fb05 4503 	mla	r5, r5, r3, r4
 800e552:	2601      	movs	r6, #1
 800e554:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800e558:	e7eb      	b.n	800e532 <_strtol_l.isra.0+0x72>
 800e55a:	2c2b      	cmp	r4, #43	; 0x2b
 800e55c:	bf08      	it	eq
 800e55e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800e562:	46a8      	mov	r8, r5
 800e564:	bf08      	it	eq
 800e566:	f106 0e02 	addeq.w	lr, r6, #2
 800e56a:	e7c7      	b.n	800e4fc <_strtol_l.isra.0+0x3c>
 800e56c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800e570:	2f19      	cmp	r7, #25
 800e572:	d801      	bhi.n	800e578 <_strtol_l.isra.0+0xb8>
 800e574:	3c37      	subs	r4, #55	; 0x37
 800e576:	e7e1      	b.n	800e53c <_strtol_l.isra.0+0x7c>
 800e578:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800e57c:	2f19      	cmp	r7, #25
 800e57e:	d804      	bhi.n	800e58a <_strtol_l.isra.0+0xca>
 800e580:	3c57      	subs	r4, #87	; 0x57
 800e582:	e7db      	b.n	800e53c <_strtol_l.isra.0+0x7c>
 800e584:	f04f 36ff 	mov.w	r6, #4294967295
 800e588:	e7e4      	b.n	800e554 <_strtol_l.isra.0+0x94>
 800e58a:	2e00      	cmp	r6, #0
 800e58c:	da05      	bge.n	800e59a <_strtol_l.isra.0+0xda>
 800e58e:	2322      	movs	r3, #34	; 0x22
 800e590:	6003      	str	r3, [r0, #0]
 800e592:	4665      	mov	r5, ip
 800e594:	b942      	cbnz	r2, 800e5a8 <_strtol_l.isra.0+0xe8>
 800e596:	4628      	mov	r0, r5
 800e598:	e79d      	b.n	800e4d6 <_strtol_l.isra.0+0x16>
 800e59a:	f1b8 0f00 	cmp.w	r8, #0
 800e59e:	d000      	beq.n	800e5a2 <_strtol_l.isra.0+0xe2>
 800e5a0:	426d      	negs	r5, r5
 800e5a2:	2a00      	cmp	r2, #0
 800e5a4:	d0f7      	beq.n	800e596 <_strtol_l.isra.0+0xd6>
 800e5a6:	b10e      	cbz	r6, 800e5ac <_strtol_l.isra.0+0xec>
 800e5a8:	f10e 31ff 	add.w	r1, lr, #4294967295
 800e5ac:	6011      	str	r1, [r2, #0]
 800e5ae:	e7f2      	b.n	800e596 <_strtol_l.isra.0+0xd6>
 800e5b0:	2430      	movs	r4, #48	; 0x30
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d1b3      	bne.n	800e51e <_strtol_l.isra.0+0x5e>
 800e5b6:	2308      	movs	r3, #8
 800e5b8:	e7b1      	b.n	800e51e <_strtol_l.isra.0+0x5e>
 800e5ba:	2c30      	cmp	r4, #48	; 0x30
 800e5bc:	d0a4      	beq.n	800e508 <_strtol_l.isra.0+0x48>
 800e5be:	230a      	movs	r3, #10
 800e5c0:	e7ad      	b.n	800e51e <_strtol_l.isra.0+0x5e>
 800e5c2:	bf00      	nop
 800e5c4:	080124e1 	.word	0x080124e1

0800e5c8 <_strtol_r>:
 800e5c8:	f7ff bf7a 	b.w	800e4c0 <_strtol_l.isra.0>

0800e5cc <_write_r>:
 800e5cc:	b538      	push	{r3, r4, r5, lr}
 800e5ce:	4d07      	ldr	r5, [pc, #28]	; (800e5ec <_write_r+0x20>)
 800e5d0:	4604      	mov	r4, r0
 800e5d2:	4608      	mov	r0, r1
 800e5d4:	4611      	mov	r1, r2
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	602a      	str	r2, [r5, #0]
 800e5da:	461a      	mov	r2, r3
 800e5dc:	f7f3 fd05 	bl	8001fea <_write>
 800e5e0:	1c43      	adds	r3, r0, #1
 800e5e2:	d102      	bne.n	800e5ea <_write_r+0x1e>
 800e5e4:	682b      	ldr	r3, [r5, #0]
 800e5e6:	b103      	cbz	r3, 800e5ea <_write_r+0x1e>
 800e5e8:	6023      	str	r3, [r4, #0]
 800e5ea:	bd38      	pop	{r3, r4, r5, pc}
 800e5ec:	20005d54 	.word	0x20005d54

0800e5f0 <_close_r>:
 800e5f0:	b538      	push	{r3, r4, r5, lr}
 800e5f2:	4d06      	ldr	r5, [pc, #24]	; (800e60c <_close_r+0x1c>)
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	4604      	mov	r4, r0
 800e5f8:	4608      	mov	r0, r1
 800e5fa:	602b      	str	r3, [r5, #0]
 800e5fc:	f7f3 fd11 	bl	8002022 <_close>
 800e600:	1c43      	adds	r3, r0, #1
 800e602:	d102      	bne.n	800e60a <_close_r+0x1a>
 800e604:	682b      	ldr	r3, [r5, #0]
 800e606:	b103      	cbz	r3, 800e60a <_close_r+0x1a>
 800e608:	6023      	str	r3, [r4, #0]
 800e60a:	bd38      	pop	{r3, r4, r5, pc}
 800e60c:	20005d54 	.word	0x20005d54

0800e610 <quorem>:
 800e610:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e614:	6903      	ldr	r3, [r0, #16]
 800e616:	690c      	ldr	r4, [r1, #16]
 800e618:	42a3      	cmp	r3, r4
 800e61a:	4607      	mov	r7, r0
 800e61c:	f2c0 8081 	blt.w	800e722 <quorem+0x112>
 800e620:	3c01      	subs	r4, #1
 800e622:	f101 0814 	add.w	r8, r1, #20
 800e626:	f100 0514 	add.w	r5, r0, #20
 800e62a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e62e:	9301      	str	r3, [sp, #4]
 800e630:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e634:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e638:	3301      	adds	r3, #1
 800e63a:	429a      	cmp	r2, r3
 800e63c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e640:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e644:	fbb2 f6f3 	udiv	r6, r2, r3
 800e648:	d331      	bcc.n	800e6ae <quorem+0x9e>
 800e64a:	f04f 0e00 	mov.w	lr, #0
 800e64e:	4640      	mov	r0, r8
 800e650:	46ac      	mov	ip, r5
 800e652:	46f2      	mov	sl, lr
 800e654:	f850 2b04 	ldr.w	r2, [r0], #4
 800e658:	b293      	uxth	r3, r2
 800e65a:	fb06 e303 	mla	r3, r6, r3, lr
 800e65e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e662:	b29b      	uxth	r3, r3
 800e664:	ebaa 0303 	sub.w	r3, sl, r3
 800e668:	0c12      	lsrs	r2, r2, #16
 800e66a:	f8dc a000 	ldr.w	sl, [ip]
 800e66e:	fb06 e202 	mla	r2, r6, r2, lr
 800e672:	fa13 f38a 	uxtah	r3, r3, sl
 800e676:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e67a:	fa1f fa82 	uxth.w	sl, r2
 800e67e:	f8dc 2000 	ldr.w	r2, [ip]
 800e682:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800e686:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e68a:	b29b      	uxth	r3, r3
 800e68c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e690:	4581      	cmp	r9, r0
 800e692:	f84c 3b04 	str.w	r3, [ip], #4
 800e696:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e69a:	d2db      	bcs.n	800e654 <quorem+0x44>
 800e69c:	f855 300b 	ldr.w	r3, [r5, fp]
 800e6a0:	b92b      	cbnz	r3, 800e6ae <quorem+0x9e>
 800e6a2:	9b01      	ldr	r3, [sp, #4]
 800e6a4:	3b04      	subs	r3, #4
 800e6a6:	429d      	cmp	r5, r3
 800e6a8:	461a      	mov	r2, r3
 800e6aa:	d32e      	bcc.n	800e70a <quorem+0xfa>
 800e6ac:	613c      	str	r4, [r7, #16]
 800e6ae:	4638      	mov	r0, r7
 800e6b0:	f001 fc8e 	bl	800ffd0 <__mcmp>
 800e6b4:	2800      	cmp	r0, #0
 800e6b6:	db24      	blt.n	800e702 <quorem+0xf2>
 800e6b8:	3601      	adds	r6, #1
 800e6ba:	4628      	mov	r0, r5
 800e6bc:	f04f 0c00 	mov.w	ip, #0
 800e6c0:	f858 2b04 	ldr.w	r2, [r8], #4
 800e6c4:	f8d0 e000 	ldr.w	lr, [r0]
 800e6c8:	b293      	uxth	r3, r2
 800e6ca:	ebac 0303 	sub.w	r3, ip, r3
 800e6ce:	0c12      	lsrs	r2, r2, #16
 800e6d0:	fa13 f38e 	uxtah	r3, r3, lr
 800e6d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e6d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e6dc:	b29b      	uxth	r3, r3
 800e6de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e6e2:	45c1      	cmp	r9, r8
 800e6e4:	f840 3b04 	str.w	r3, [r0], #4
 800e6e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e6ec:	d2e8      	bcs.n	800e6c0 <quorem+0xb0>
 800e6ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e6f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e6f6:	b922      	cbnz	r2, 800e702 <quorem+0xf2>
 800e6f8:	3b04      	subs	r3, #4
 800e6fa:	429d      	cmp	r5, r3
 800e6fc:	461a      	mov	r2, r3
 800e6fe:	d30a      	bcc.n	800e716 <quorem+0x106>
 800e700:	613c      	str	r4, [r7, #16]
 800e702:	4630      	mov	r0, r6
 800e704:	b003      	add	sp, #12
 800e706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e70a:	6812      	ldr	r2, [r2, #0]
 800e70c:	3b04      	subs	r3, #4
 800e70e:	2a00      	cmp	r2, #0
 800e710:	d1cc      	bne.n	800e6ac <quorem+0x9c>
 800e712:	3c01      	subs	r4, #1
 800e714:	e7c7      	b.n	800e6a6 <quorem+0x96>
 800e716:	6812      	ldr	r2, [r2, #0]
 800e718:	3b04      	subs	r3, #4
 800e71a:	2a00      	cmp	r2, #0
 800e71c:	d1f0      	bne.n	800e700 <quorem+0xf0>
 800e71e:	3c01      	subs	r4, #1
 800e720:	e7eb      	b.n	800e6fa <quorem+0xea>
 800e722:	2000      	movs	r0, #0
 800e724:	e7ee      	b.n	800e704 <quorem+0xf4>
	...

0800e728 <_dtoa_r>:
 800e728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e72c:	ed2d 8b02 	vpush	{d8}
 800e730:	ec57 6b10 	vmov	r6, r7, d0
 800e734:	b095      	sub	sp, #84	; 0x54
 800e736:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e738:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e73c:	9105      	str	r1, [sp, #20]
 800e73e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800e742:	4604      	mov	r4, r0
 800e744:	9209      	str	r2, [sp, #36]	; 0x24
 800e746:	930f      	str	r3, [sp, #60]	; 0x3c
 800e748:	b975      	cbnz	r5, 800e768 <_dtoa_r+0x40>
 800e74a:	2010      	movs	r0, #16
 800e74c:	f001 f95e 	bl	800fa0c <malloc>
 800e750:	4602      	mov	r2, r0
 800e752:	6260      	str	r0, [r4, #36]	; 0x24
 800e754:	b920      	cbnz	r0, 800e760 <_dtoa_r+0x38>
 800e756:	4bb2      	ldr	r3, [pc, #712]	; (800ea20 <_dtoa_r+0x2f8>)
 800e758:	21ea      	movs	r1, #234	; 0xea
 800e75a:	48b2      	ldr	r0, [pc, #712]	; (800ea24 <_dtoa_r+0x2fc>)
 800e75c:	f002 fc88 	bl	8011070 <__assert_func>
 800e760:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e764:	6005      	str	r5, [r0, #0]
 800e766:	60c5      	str	r5, [r0, #12]
 800e768:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e76a:	6819      	ldr	r1, [r3, #0]
 800e76c:	b151      	cbz	r1, 800e784 <_dtoa_r+0x5c>
 800e76e:	685a      	ldr	r2, [r3, #4]
 800e770:	604a      	str	r2, [r1, #4]
 800e772:	2301      	movs	r3, #1
 800e774:	4093      	lsls	r3, r2
 800e776:	608b      	str	r3, [r1, #8]
 800e778:	4620      	mov	r0, r4
 800e77a:	f001 f9a1 	bl	800fac0 <_Bfree>
 800e77e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e780:	2200      	movs	r2, #0
 800e782:	601a      	str	r2, [r3, #0]
 800e784:	1e3b      	subs	r3, r7, #0
 800e786:	bfb9      	ittee	lt
 800e788:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e78c:	9303      	strlt	r3, [sp, #12]
 800e78e:	2300      	movge	r3, #0
 800e790:	f8c8 3000 	strge.w	r3, [r8]
 800e794:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e798:	4ba3      	ldr	r3, [pc, #652]	; (800ea28 <_dtoa_r+0x300>)
 800e79a:	bfbc      	itt	lt
 800e79c:	2201      	movlt	r2, #1
 800e79e:	f8c8 2000 	strlt.w	r2, [r8]
 800e7a2:	ea33 0309 	bics.w	r3, r3, r9
 800e7a6:	d11b      	bne.n	800e7e0 <_dtoa_r+0xb8>
 800e7a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e7aa:	f242 730f 	movw	r3, #9999	; 0x270f
 800e7ae:	6013      	str	r3, [r2, #0]
 800e7b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e7b4:	4333      	orrs	r3, r6
 800e7b6:	f000 857a 	beq.w	800f2ae <_dtoa_r+0xb86>
 800e7ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e7bc:	b963      	cbnz	r3, 800e7d8 <_dtoa_r+0xb0>
 800e7be:	4b9b      	ldr	r3, [pc, #620]	; (800ea2c <_dtoa_r+0x304>)
 800e7c0:	e024      	b.n	800e80c <_dtoa_r+0xe4>
 800e7c2:	4b9b      	ldr	r3, [pc, #620]	; (800ea30 <_dtoa_r+0x308>)
 800e7c4:	9300      	str	r3, [sp, #0]
 800e7c6:	3308      	adds	r3, #8
 800e7c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e7ca:	6013      	str	r3, [r2, #0]
 800e7cc:	9800      	ldr	r0, [sp, #0]
 800e7ce:	b015      	add	sp, #84	; 0x54
 800e7d0:	ecbd 8b02 	vpop	{d8}
 800e7d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7d8:	4b94      	ldr	r3, [pc, #592]	; (800ea2c <_dtoa_r+0x304>)
 800e7da:	9300      	str	r3, [sp, #0]
 800e7dc:	3303      	adds	r3, #3
 800e7de:	e7f3      	b.n	800e7c8 <_dtoa_r+0xa0>
 800e7e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	ec51 0b17 	vmov	r0, r1, d7
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800e7f0:	f7f2 f972 	bl	8000ad8 <__aeabi_dcmpeq>
 800e7f4:	4680      	mov	r8, r0
 800e7f6:	b158      	cbz	r0, 800e810 <_dtoa_r+0xe8>
 800e7f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	6013      	str	r3, [r2, #0]
 800e7fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e800:	2b00      	cmp	r3, #0
 800e802:	f000 8551 	beq.w	800f2a8 <_dtoa_r+0xb80>
 800e806:	488b      	ldr	r0, [pc, #556]	; (800ea34 <_dtoa_r+0x30c>)
 800e808:	6018      	str	r0, [r3, #0]
 800e80a:	1e43      	subs	r3, r0, #1
 800e80c:	9300      	str	r3, [sp, #0]
 800e80e:	e7dd      	b.n	800e7cc <_dtoa_r+0xa4>
 800e810:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e814:	aa12      	add	r2, sp, #72	; 0x48
 800e816:	a913      	add	r1, sp, #76	; 0x4c
 800e818:	4620      	mov	r0, r4
 800e81a:	f001 fcf9 	bl	8010210 <__d2b>
 800e81e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e822:	4683      	mov	fp, r0
 800e824:	2d00      	cmp	r5, #0
 800e826:	d07c      	beq.n	800e922 <_dtoa_r+0x1fa>
 800e828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e82a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800e82e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e832:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800e836:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e83a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e83e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e842:	4b7d      	ldr	r3, [pc, #500]	; (800ea38 <_dtoa_r+0x310>)
 800e844:	2200      	movs	r2, #0
 800e846:	4630      	mov	r0, r6
 800e848:	4639      	mov	r1, r7
 800e84a:	f7f1 fd25 	bl	8000298 <__aeabi_dsub>
 800e84e:	a36e      	add	r3, pc, #440	; (adr r3, 800ea08 <_dtoa_r+0x2e0>)
 800e850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e854:	f7f1 fed8 	bl	8000608 <__aeabi_dmul>
 800e858:	a36d      	add	r3, pc, #436	; (adr r3, 800ea10 <_dtoa_r+0x2e8>)
 800e85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e85e:	f7f1 fd1d 	bl	800029c <__adddf3>
 800e862:	4606      	mov	r6, r0
 800e864:	4628      	mov	r0, r5
 800e866:	460f      	mov	r7, r1
 800e868:	f7f1 fe64 	bl	8000534 <__aeabi_i2d>
 800e86c:	a36a      	add	r3, pc, #424	; (adr r3, 800ea18 <_dtoa_r+0x2f0>)
 800e86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e872:	f7f1 fec9 	bl	8000608 <__aeabi_dmul>
 800e876:	4602      	mov	r2, r0
 800e878:	460b      	mov	r3, r1
 800e87a:	4630      	mov	r0, r6
 800e87c:	4639      	mov	r1, r7
 800e87e:	f7f1 fd0d 	bl	800029c <__adddf3>
 800e882:	4606      	mov	r6, r0
 800e884:	460f      	mov	r7, r1
 800e886:	f7f2 f96f 	bl	8000b68 <__aeabi_d2iz>
 800e88a:	2200      	movs	r2, #0
 800e88c:	4682      	mov	sl, r0
 800e88e:	2300      	movs	r3, #0
 800e890:	4630      	mov	r0, r6
 800e892:	4639      	mov	r1, r7
 800e894:	f7f2 f92a 	bl	8000aec <__aeabi_dcmplt>
 800e898:	b148      	cbz	r0, 800e8ae <_dtoa_r+0x186>
 800e89a:	4650      	mov	r0, sl
 800e89c:	f7f1 fe4a 	bl	8000534 <__aeabi_i2d>
 800e8a0:	4632      	mov	r2, r6
 800e8a2:	463b      	mov	r3, r7
 800e8a4:	f7f2 f918 	bl	8000ad8 <__aeabi_dcmpeq>
 800e8a8:	b908      	cbnz	r0, 800e8ae <_dtoa_r+0x186>
 800e8aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e8ae:	f1ba 0f16 	cmp.w	sl, #22
 800e8b2:	d854      	bhi.n	800e95e <_dtoa_r+0x236>
 800e8b4:	4b61      	ldr	r3, [pc, #388]	; (800ea3c <_dtoa_r+0x314>)
 800e8b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e8c2:	f7f2 f913 	bl	8000aec <__aeabi_dcmplt>
 800e8c6:	2800      	cmp	r0, #0
 800e8c8:	d04b      	beq.n	800e962 <_dtoa_r+0x23a>
 800e8ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	930e      	str	r3, [sp, #56]	; 0x38
 800e8d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e8d4:	1b5d      	subs	r5, r3, r5
 800e8d6:	1e6b      	subs	r3, r5, #1
 800e8d8:	9304      	str	r3, [sp, #16]
 800e8da:	bf43      	ittte	mi
 800e8dc:	2300      	movmi	r3, #0
 800e8de:	f1c5 0801 	rsbmi	r8, r5, #1
 800e8e2:	9304      	strmi	r3, [sp, #16]
 800e8e4:	f04f 0800 	movpl.w	r8, #0
 800e8e8:	f1ba 0f00 	cmp.w	sl, #0
 800e8ec:	db3b      	blt.n	800e966 <_dtoa_r+0x23e>
 800e8ee:	9b04      	ldr	r3, [sp, #16]
 800e8f0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800e8f4:	4453      	add	r3, sl
 800e8f6:	9304      	str	r3, [sp, #16]
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	9306      	str	r3, [sp, #24]
 800e8fc:	9b05      	ldr	r3, [sp, #20]
 800e8fe:	2b09      	cmp	r3, #9
 800e900:	d869      	bhi.n	800e9d6 <_dtoa_r+0x2ae>
 800e902:	2b05      	cmp	r3, #5
 800e904:	bfc4      	itt	gt
 800e906:	3b04      	subgt	r3, #4
 800e908:	9305      	strgt	r3, [sp, #20]
 800e90a:	9b05      	ldr	r3, [sp, #20]
 800e90c:	f1a3 0302 	sub.w	r3, r3, #2
 800e910:	bfcc      	ite	gt
 800e912:	2500      	movgt	r5, #0
 800e914:	2501      	movle	r5, #1
 800e916:	2b03      	cmp	r3, #3
 800e918:	d869      	bhi.n	800e9ee <_dtoa_r+0x2c6>
 800e91a:	e8df f003 	tbb	[pc, r3]
 800e91e:	4e2c      	.short	0x4e2c
 800e920:	5a4c      	.short	0x5a4c
 800e922:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800e926:	441d      	add	r5, r3
 800e928:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e92c:	2b20      	cmp	r3, #32
 800e92e:	bfc1      	itttt	gt
 800e930:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e934:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e938:	fa09 f303 	lslgt.w	r3, r9, r3
 800e93c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e940:	bfda      	itte	le
 800e942:	f1c3 0320 	rsble	r3, r3, #32
 800e946:	fa06 f003 	lslle.w	r0, r6, r3
 800e94a:	4318      	orrgt	r0, r3
 800e94c:	f7f1 fde2 	bl	8000514 <__aeabi_ui2d>
 800e950:	2301      	movs	r3, #1
 800e952:	4606      	mov	r6, r0
 800e954:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e958:	3d01      	subs	r5, #1
 800e95a:	9310      	str	r3, [sp, #64]	; 0x40
 800e95c:	e771      	b.n	800e842 <_dtoa_r+0x11a>
 800e95e:	2301      	movs	r3, #1
 800e960:	e7b6      	b.n	800e8d0 <_dtoa_r+0x1a8>
 800e962:	900e      	str	r0, [sp, #56]	; 0x38
 800e964:	e7b5      	b.n	800e8d2 <_dtoa_r+0x1aa>
 800e966:	f1ca 0300 	rsb	r3, sl, #0
 800e96a:	9306      	str	r3, [sp, #24]
 800e96c:	2300      	movs	r3, #0
 800e96e:	eba8 080a 	sub.w	r8, r8, sl
 800e972:	930d      	str	r3, [sp, #52]	; 0x34
 800e974:	e7c2      	b.n	800e8fc <_dtoa_r+0x1d4>
 800e976:	2300      	movs	r3, #0
 800e978:	9308      	str	r3, [sp, #32]
 800e97a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	dc39      	bgt.n	800e9f4 <_dtoa_r+0x2cc>
 800e980:	f04f 0901 	mov.w	r9, #1
 800e984:	f8cd 9004 	str.w	r9, [sp, #4]
 800e988:	464b      	mov	r3, r9
 800e98a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e98e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e990:	2200      	movs	r2, #0
 800e992:	6042      	str	r2, [r0, #4]
 800e994:	2204      	movs	r2, #4
 800e996:	f102 0614 	add.w	r6, r2, #20
 800e99a:	429e      	cmp	r6, r3
 800e99c:	6841      	ldr	r1, [r0, #4]
 800e99e:	d92f      	bls.n	800ea00 <_dtoa_r+0x2d8>
 800e9a0:	4620      	mov	r0, r4
 800e9a2:	f001 f84d 	bl	800fa40 <_Balloc>
 800e9a6:	9000      	str	r0, [sp, #0]
 800e9a8:	2800      	cmp	r0, #0
 800e9aa:	d14b      	bne.n	800ea44 <_dtoa_r+0x31c>
 800e9ac:	4b24      	ldr	r3, [pc, #144]	; (800ea40 <_dtoa_r+0x318>)
 800e9ae:	4602      	mov	r2, r0
 800e9b0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e9b4:	e6d1      	b.n	800e75a <_dtoa_r+0x32>
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	e7de      	b.n	800e978 <_dtoa_r+0x250>
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	9308      	str	r3, [sp, #32]
 800e9be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9c0:	eb0a 0903 	add.w	r9, sl, r3
 800e9c4:	f109 0301 	add.w	r3, r9, #1
 800e9c8:	2b01      	cmp	r3, #1
 800e9ca:	9301      	str	r3, [sp, #4]
 800e9cc:	bfb8      	it	lt
 800e9ce:	2301      	movlt	r3, #1
 800e9d0:	e7dd      	b.n	800e98e <_dtoa_r+0x266>
 800e9d2:	2301      	movs	r3, #1
 800e9d4:	e7f2      	b.n	800e9bc <_dtoa_r+0x294>
 800e9d6:	2501      	movs	r5, #1
 800e9d8:	2300      	movs	r3, #0
 800e9da:	9305      	str	r3, [sp, #20]
 800e9dc:	9508      	str	r5, [sp, #32]
 800e9de:	f04f 39ff 	mov.w	r9, #4294967295
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	f8cd 9004 	str.w	r9, [sp, #4]
 800e9e8:	2312      	movs	r3, #18
 800e9ea:	9209      	str	r2, [sp, #36]	; 0x24
 800e9ec:	e7cf      	b.n	800e98e <_dtoa_r+0x266>
 800e9ee:	2301      	movs	r3, #1
 800e9f0:	9308      	str	r3, [sp, #32]
 800e9f2:	e7f4      	b.n	800e9de <_dtoa_r+0x2b6>
 800e9f4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e9f8:	f8cd 9004 	str.w	r9, [sp, #4]
 800e9fc:	464b      	mov	r3, r9
 800e9fe:	e7c6      	b.n	800e98e <_dtoa_r+0x266>
 800ea00:	3101      	adds	r1, #1
 800ea02:	6041      	str	r1, [r0, #4]
 800ea04:	0052      	lsls	r2, r2, #1
 800ea06:	e7c6      	b.n	800e996 <_dtoa_r+0x26e>
 800ea08:	636f4361 	.word	0x636f4361
 800ea0c:	3fd287a7 	.word	0x3fd287a7
 800ea10:	8b60c8b3 	.word	0x8b60c8b3
 800ea14:	3fc68a28 	.word	0x3fc68a28
 800ea18:	509f79fb 	.word	0x509f79fb
 800ea1c:	3fd34413 	.word	0x3fd34413
 800ea20:	080125ee 	.word	0x080125ee
 800ea24:	08012605 	.word	0x08012605
 800ea28:	7ff00000 	.word	0x7ff00000
 800ea2c:	080125ea 	.word	0x080125ea
 800ea30:	080125e1 	.word	0x080125e1
 800ea34:	0801286a 	.word	0x0801286a
 800ea38:	3ff80000 	.word	0x3ff80000
 800ea3c:	08012780 	.word	0x08012780
 800ea40:	08012664 	.word	0x08012664
 800ea44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea46:	9a00      	ldr	r2, [sp, #0]
 800ea48:	601a      	str	r2, [r3, #0]
 800ea4a:	9b01      	ldr	r3, [sp, #4]
 800ea4c:	2b0e      	cmp	r3, #14
 800ea4e:	f200 80ad 	bhi.w	800ebac <_dtoa_r+0x484>
 800ea52:	2d00      	cmp	r5, #0
 800ea54:	f000 80aa 	beq.w	800ebac <_dtoa_r+0x484>
 800ea58:	f1ba 0f00 	cmp.w	sl, #0
 800ea5c:	dd36      	ble.n	800eacc <_dtoa_r+0x3a4>
 800ea5e:	4ac3      	ldr	r2, [pc, #780]	; (800ed6c <_dtoa_r+0x644>)
 800ea60:	f00a 030f 	and.w	r3, sl, #15
 800ea64:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ea68:	ed93 7b00 	vldr	d7, [r3]
 800ea6c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ea70:	ea4f 172a 	mov.w	r7, sl, asr #4
 800ea74:	eeb0 8a47 	vmov.f32	s16, s14
 800ea78:	eef0 8a67 	vmov.f32	s17, s15
 800ea7c:	d016      	beq.n	800eaac <_dtoa_r+0x384>
 800ea7e:	4bbc      	ldr	r3, [pc, #752]	; (800ed70 <_dtoa_r+0x648>)
 800ea80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ea84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ea88:	f7f1 fee8 	bl	800085c <__aeabi_ddiv>
 800ea8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea90:	f007 070f 	and.w	r7, r7, #15
 800ea94:	2503      	movs	r5, #3
 800ea96:	4eb6      	ldr	r6, [pc, #728]	; (800ed70 <_dtoa_r+0x648>)
 800ea98:	b957      	cbnz	r7, 800eab0 <_dtoa_r+0x388>
 800ea9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea9e:	ec53 2b18 	vmov	r2, r3, d8
 800eaa2:	f7f1 fedb 	bl	800085c <__aeabi_ddiv>
 800eaa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eaaa:	e029      	b.n	800eb00 <_dtoa_r+0x3d8>
 800eaac:	2502      	movs	r5, #2
 800eaae:	e7f2      	b.n	800ea96 <_dtoa_r+0x36e>
 800eab0:	07f9      	lsls	r1, r7, #31
 800eab2:	d508      	bpl.n	800eac6 <_dtoa_r+0x39e>
 800eab4:	ec51 0b18 	vmov	r0, r1, d8
 800eab8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800eabc:	f7f1 fda4 	bl	8000608 <__aeabi_dmul>
 800eac0:	ec41 0b18 	vmov	d8, r0, r1
 800eac4:	3501      	adds	r5, #1
 800eac6:	107f      	asrs	r7, r7, #1
 800eac8:	3608      	adds	r6, #8
 800eaca:	e7e5      	b.n	800ea98 <_dtoa_r+0x370>
 800eacc:	f000 80a6 	beq.w	800ec1c <_dtoa_r+0x4f4>
 800ead0:	f1ca 0600 	rsb	r6, sl, #0
 800ead4:	4ba5      	ldr	r3, [pc, #660]	; (800ed6c <_dtoa_r+0x644>)
 800ead6:	4fa6      	ldr	r7, [pc, #664]	; (800ed70 <_dtoa_r+0x648>)
 800ead8:	f006 020f 	and.w	r2, r6, #15
 800eadc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eae4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800eae8:	f7f1 fd8e 	bl	8000608 <__aeabi_dmul>
 800eaec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eaf0:	1136      	asrs	r6, r6, #4
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	2502      	movs	r5, #2
 800eaf6:	2e00      	cmp	r6, #0
 800eaf8:	f040 8085 	bne.w	800ec06 <_dtoa_r+0x4de>
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d1d2      	bne.n	800eaa6 <_dtoa_r+0x37e>
 800eb00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	f000 808c 	beq.w	800ec20 <_dtoa_r+0x4f8>
 800eb08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800eb0c:	4b99      	ldr	r3, [pc, #612]	; (800ed74 <_dtoa_r+0x64c>)
 800eb0e:	2200      	movs	r2, #0
 800eb10:	4630      	mov	r0, r6
 800eb12:	4639      	mov	r1, r7
 800eb14:	f7f1 ffea 	bl	8000aec <__aeabi_dcmplt>
 800eb18:	2800      	cmp	r0, #0
 800eb1a:	f000 8081 	beq.w	800ec20 <_dtoa_r+0x4f8>
 800eb1e:	9b01      	ldr	r3, [sp, #4]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d07d      	beq.n	800ec20 <_dtoa_r+0x4f8>
 800eb24:	f1b9 0f00 	cmp.w	r9, #0
 800eb28:	dd3c      	ble.n	800eba4 <_dtoa_r+0x47c>
 800eb2a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800eb2e:	9307      	str	r3, [sp, #28]
 800eb30:	2200      	movs	r2, #0
 800eb32:	4b91      	ldr	r3, [pc, #580]	; (800ed78 <_dtoa_r+0x650>)
 800eb34:	4630      	mov	r0, r6
 800eb36:	4639      	mov	r1, r7
 800eb38:	f7f1 fd66 	bl	8000608 <__aeabi_dmul>
 800eb3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb40:	3501      	adds	r5, #1
 800eb42:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800eb46:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800eb4a:	4628      	mov	r0, r5
 800eb4c:	f7f1 fcf2 	bl	8000534 <__aeabi_i2d>
 800eb50:	4632      	mov	r2, r6
 800eb52:	463b      	mov	r3, r7
 800eb54:	f7f1 fd58 	bl	8000608 <__aeabi_dmul>
 800eb58:	4b88      	ldr	r3, [pc, #544]	; (800ed7c <_dtoa_r+0x654>)
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	f7f1 fb9e 	bl	800029c <__adddf3>
 800eb60:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800eb64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb68:	9303      	str	r3, [sp, #12]
 800eb6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d15c      	bne.n	800ec2a <_dtoa_r+0x502>
 800eb70:	4b83      	ldr	r3, [pc, #524]	; (800ed80 <_dtoa_r+0x658>)
 800eb72:	2200      	movs	r2, #0
 800eb74:	4630      	mov	r0, r6
 800eb76:	4639      	mov	r1, r7
 800eb78:	f7f1 fb8e 	bl	8000298 <__aeabi_dsub>
 800eb7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eb80:	4606      	mov	r6, r0
 800eb82:	460f      	mov	r7, r1
 800eb84:	f7f1 ffd0 	bl	8000b28 <__aeabi_dcmpgt>
 800eb88:	2800      	cmp	r0, #0
 800eb8a:	f040 8296 	bne.w	800f0ba <_dtoa_r+0x992>
 800eb8e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800eb92:	4630      	mov	r0, r6
 800eb94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eb98:	4639      	mov	r1, r7
 800eb9a:	f7f1 ffa7 	bl	8000aec <__aeabi_dcmplt>
 800eb9e:	2800      	cmp	r0, #0
 800eba0:	f040 8288 	bne.w	800f0b4 <_dtoa_r+0x98c>
 800eba4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800eba8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ebac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	f2c0 8158 	blt.w	800ee64 <_dtoa_r+0x73c>
 800ebb4:	f1ba 0f0e 	cmp.w	sl, #14
 800ebb8:	f300 8154 	bgt.w	800ee64 <_dtoa_r+0x73c>
 800ebbc:	4b6b      	ldr	r3, [pc, #428]	; (800ed6c <_dtoa_r+0x644>)
 800ebbe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ebc2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ebc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	f280 80e3 	bge.w	800ed94 <_dtoa_r+0x66c>
 800ebce:	9b01      	ldr	r3, [sp, #4]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	f300 80df 	bgt.w	800ed94 <_dtoa_r+0x66c>
 800ebd6:	f040 826d 	bne.w	800f0b4 <_dtoa_r+0x98c>
 800ebda:	4b69      	ldr	r3, [pc, #420]	; (800ed80 <_dtoa_r+0x658>)
 800ebdc:	2200      	movs	r2, #0
 800ebde:	4640      	mov	r0, r8
 800ebe0:	4649      	mov	r1, r9
 800ebe2:	f7f1 fd11 	bl	8000608 <__aeabi_dmul>
 800ebe6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ebea:	f7f1 ff93 	bl	8000b14 <__aeabi_dcmpge>
 800ebee:	9e01      	ldr	r6, [sp, #4]
 800ebf0:	4637      	mov	r7, r6
 800ebf2:	2800      	cmp	r0, #0
 800ebf4:	f040 8243 	bne.w	800f07e <_dtoa_r+0x956>
 800ebf8:	9d00      	ldr	r5, [sp, #0]
 800ebfa:	2331      	movs	r3, #49	; 0x31
 800ebfc:	f805 3b01 	strb.w	r3, [r5], #1
 800ec00:	f10a 0a01 	add.w	sl, sl, #1
 800ec04:	e23f      	b.n	800f086 <_dtoa_r+0x95e>
 800ec06:	07f2      	lsls	r2, r6, #31
 800ec08:	d505      	bpl.n	800ec16 <_dtoa_r+0x4ee>
 800ec0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec0e:	f7f1 fcfb 	bl	8000608 <__aeabi_dmul>
 800ec12:	3501      	adds	r5, #1
 800ec14:	2301      	movs	r3, #1
 800ec16:	1076      	asrs	r6, r6, #1
 800ec18:	3708      	adds	r7, #8
 800ec1a:	e76c      	b.n	800eaf6 <_dtoa_r+0x3ce>
 800ec1c:	2502      	movs	r5, #2
 800ec1e:	e76f      	b.n	800eb00 <_dtoa_r+0x3d8>
 800ec20:	9b01      	ldr	r3, [sp, #4]
 800ec22:	f8cd a01c 	str.w	sl, [sp, #28]
 800ec26:	930c      	str	r3, [sp, #48]	; 0x30
 800ec28:	e78d      	b.n	800eb46 <_dtoa_r+0x41e>
 800ec2a:	9900      	ldr	r1, [sp, #0]
 800ec2c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ec2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ec30:	4b4e      	ldr	r3, [pc, #312]	; (800ed6c <_dtoa_r+0x644>)
 800ec32:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ec36:	4401      	add	r1, r0
 800ec38:	9102      	str	r1, [sp, #8]
 800ec3a:	9908      	ldr	r1, [sp, #32]
 800ec3c:	eeb0 8a47 	vmov.f32	s16, s14
 800ec40:	eef0 8a67 	vmov.f32	s17, s15
 800ec44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ec48:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ec4c:	2900      	cmp	r1, #0
 800ec4e:	d045      	beq.n	800ecdc <_dtoa_r+0x5b4>
 800ec50:	494c      	ldr	r1, [pc, #304]	; (800ed84 <_dtoa_r+0x65c>)
 800ec52:	2000      	movs	r0, #0
 800ec54:	f7f1 fe02 	bl	800085c <__aeabi_ddiv>
 800ec58:	ec53 2b18 	vmov	r2, r3, d8
 800ec5c:	f7f1 fb1c 	bl	8000298 <__aeabi_dsub>
 800ec60:	9d00      	ldr	r5, [sp, #0]
 800ec62:	ec41 0b18 	vmov	d8, r0, r1
 800ec66:	4639      	mov	r1, r7
 800ec68:	4630      	mov	r0, r6
 800ec6a:	f7f1 ff7d 	bl	8000b68 <__aeabi_d2iz>
 800ec6e:	900c      	str	r0, [sp, #48]	; 0x30
 800ec70:	f7f1 fc60 	bl	8000534 <__aeabi_i2d>
 800ec74:	4602      	mov	r2, r0
 800ec76:	460b      	mov	r3, r1
 800ec78:	4630      	mov	r0, r6
 800ec7a:	4639      	mov	r1, r7
 800ec7c:	f7f1 fb0c 	bl	8000298 <__aeabi_dsub>
 800ec80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec82:	3330      	adds	r3, #48	; 0x30
 800ec84:	f805 3b01 	strb.w	r3, [r5], #1
 800ec88:	ec53 2b18 	vmov	r2, r3, d8
 800ec8c:	4606      	mov	r6, r0
 800ec8e:	460f      	mov	r7, r1
 800ec90:	f7f1 ff2c 	bl	8000aec <__aeabi_dcmplt>
 800ec94:	2800      	cmp	r0, #0
 800ec96:	d165      	bne.n	800ed64 <_dtoa_r+0x63c>
 800ec98:	4632      	mov	r2, r6
 800ec9a:	463b      	mov	r3, r7
 800ec9c:	4935      	ldr	r1, [pc, #212]	; (800ed74 <_dtoa_r+0x64c>)
 800ec9e:	2000      	movs	r0, #0
 800eca0:	f7f1 fafa 	bl	8000298 <__aeabi_dsub>
 800eca4:	ec53 2b18 	vmov	r2, r3, d8
 800eca8:	f7f1 ff20 	bl	8000aec <__aeabi_dcmplt>
 800ecac:	2800      	cmp	r0, #0
 800ecae:	f040 80b9 	bne.w	800ee24 <_dtoa_r+0x6fc>
 800ecb2:	9b02      	ldr	r3, [sp, #8]
 800ecb4:	429d      	cmp	r5, r3
 800ecb6:	f43f af75 	beq.w	800eba4 <_dtoa_r+0x47c>
 800ecba:	4b2f      	ldr	r3, [pc, #188]	; (800ed78 <_dtoa_r+0x650>)
 800ecbc:	ec51 0b18 	vmov	r0, r1, d8
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	f7f1 fca1 	bl	8000608 <__aeabi_dmul>
 800ecc6:	4b2c      	ldr	r3, [pc, #176]	; (800ed78 <_dtoa_r+0x650>)
 800ecc8:	ec41 0b18 	vmov	d8, r0, r1
 800eccc:	2200      	movs	r2, #0
 800ecce:	4630      	mov	r0, r6
 800ecd0:	4639      	mov	r1, r7
 800ecd2:	f7f1 fc99 	bl	8000608 <__aeabi_dmul>
 800ecd6:	4606      	mov	r6, r0
 800ecd8:	460f      	mov	r7, r1
 800ecda:	e7c4      	b.n	800ec66 <_dtoa_r+0x53e>
 800ecdc:	ec51 0b17 	vmov	r0, r1, d7
 800ece0:	f7f1 fc92 	bl	8000608 <__aeabi_dmul>
 800ece4:	9b02      	ldr	r3, [sp, #8]
 800ece6:	9d00      	ldr	r5, [sp, #0]
 800ece8:	930c      	str	r3, [sp, #48]	; 0x30
 800ecea:	ec41 0b18 	vmov	d8, r0, r1
 800ecee:	4639      	mov	r1, r7
 800ecf0:	4630      	mov	r0, r6
 800ecf2:	f7f1 ff39 	bl	8000b68 <__aeabi_d2iz>
 800ecf6:	9011      	str	r0, [sp, #68]	; 0x44
 800ecf8:	f7f1 fc1c 	bl	8000534 <__aeabi_i2d>
 800ecfc:	4602      	mov	r2, r0
 800ecfe:	460b      	mov	r3, r1
 800ed00:	4630      	mov	r0, r6
 800ed02:	4639      	mov	r1, r7
 800ed04:	f7f1 fac8 	bl	8000298 <__aeabi_dsub>
 800ed08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ed0a:	3330      	adds	r3, #48	; 0x30
 800ed0c:	f805 3b01 	strb.w	r3, [r5], #1
 800ed10:	9b02      	ldr	r3, [sp, #8]
 800ed12:	429d      	cmp	r5, r3
 800ed14:	4606      	mov	r6, r0
 800ed16:	460f      	mov	r7, r1
 800ed18:	f04f 0200 	mov.w	r2, #0
 800ed1c:	d134      	bne.n	800ed88 <_dtoa_r+0x660>
 800ed1e:	4b19      	ldr	r3, [pc, #100]	; (800ed84 <_dtoa_r+0x65c>)
 800ed20:	ec51 0b18 	vmov	r0, r1, d8
 800ed24:	f7f1 faba 	bl	800029c <__adddf3>
 800ed28:	4602      	mov	r2, r0
 800ed2a:	460b      	mov	r3, r1
 800ed2c:	4630      	mov	r0, r6
 800ed2e:	4639      	mov	r1, r7
 800ed30:	f7f1 fefa 	bl	8000b28 <__aeabi_dcmpgt>
 800ed34:	2800      	cmp	r0, #0
 800ed36:	d175      	bne.n	800ee24 <_dtoa_r+0x6fc>
 800ed38:	ec53 2b18 	vmov	r2, r3, d8
 800ed3c:	4911      	ldr	r1, [pc, #68]	; (800ed84 <_dtoa_r+0x65c>)
 800ed3e:	2000      	movs	r0, #0
 800ed40:	f7f1 faaa 	bl	8000298 <__aeabi_dsub>
 800ed44:	4602      	mov	r2, r0
 800ed46:	460b      	mov	r3, r1
 800ed48:	4630      	mov	r0, r6
 800ed4a:	4639      	mov	r1, r7
 800ed4c:	f7f1 fece 	bl	8000aec <__aeabi_dcmplt>
 800ed50:	2800      	cmp	r0, #0
 800ed52:	f43f af27 	beq.w	800eba4 <_dtoa_r+0x47c>
 800ed56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ed58:	1e6b      	subs	r3, r5, #1
 800ed5a:	930c      	str	r3, [sp, #48]	; 0x30
 800ed5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ed60:	2b30      	cmp	r3, #48	; 0x30
 800ed62:	d0f8      	beq.n	800ed56 <_dtoa_r+0x62e>
 800ed64:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ed68:	e04a      	b.n	800ee00 <_dtoa_r+0x6d8>
 800ed6a:	bf00      	nop
 800ed6c:	08012780 	.word	0x08012780
 800ed70:	08012758 	.word	0x08012758
 800ed74:	3ff00000 	.word	0x3ff00000
 800ed78:	40240000 	.word	0x40240000
 800ed7c:	401c0000 	.word	0x401c0000
 800ed80:	40140000 	.word	0x40140000
 800ed84:	3fe00000 	.word	0x3fe00000
 800ed88:	4baf      	ldr	r3, [pc, #700]	; (800f048 <_dtoa_r+0x920>)
 800ed8a:	f7f1 fc3d 	bl	8000608 <__aeabi_dmul>
 800ed8e:	4606      	mov	r6, r0
 800ed90:	460f      	mov	r7, r1
 800ed92:	e7ac      	b.n	800ecee <_dtoa_r+0x5c6>
 800ed94:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ed98:	9d00      	ldr	r5, [sp, #0]
 800ed9a:	4642      	mov	r2, r8
 800ed9c:	464b      	mov	r3, r9
 800ed9e:	4630      	mov	r0, r6
 800eda0:	4639      	mov	r1, r7
 800eda2:	f7f1 fd5b 	bl	800085c <__aeabi_ddiv>
 800eda6:	f7f1 fedf 	bl	8000b68 <__aeabi_d2iz>
 800edaa:	9002      	str	r0, [sp, #8]
 800edac:	f7f1 fbc2 	bl	8000534 <__aeabi_i2d>
 800edb0:	4642      	mov	r2, r8
 800edb2:	464b      	mov	r3, r9
 800edb4:	f7f1 fc28 	bl	8000608 <__aeabi_dmul>
 800edb8:	4602      	mov	r2, r0
 800edba:	460b      	mov	r3, r1
 800edbc:	4630      	mov	r0, r6
 800edbe:	4639      	mov	r1, r7
 800edc0:	f7f1 fa6a 	bl	8000298 <__aeabi_dsub>
 800edc4:	9e02      	ldr	r6, [sp, #8]
 800edc6:	9f01      	ldr	r7, [sp, #4]
 800edc8:	3630      	adds	r6, #48	; 0x30
 800edca:	f805 6b01 	strb.w	r6, [r5], #1
 800edce:	9e00      	ldr	r6, [sp, #0]
 800edd0:	1bae      	subs	r6, r5, r6
 800edd2:	42b7      	cmp	r7, r6
 800edd4:	4602      	mov	r2, r0
 800edd6:	460b      	mov	r3, r1
 800edd8:	d137      	bne.n	800ee4a <_dtoa_r+0x722>
 800edda:	f7f1 fa5f 	bl	800029c <__adddf3>
 800edde:	4642      	mov	r2, r8
 800ede0:	464b      	mov	r3, r9
 800ede2:	4606      	mov	r6, r0
 800ede4:	460f      	mov	r7, r1
 800ede6:	f7f1 fe9f 	bl	8000b28 <__aeabi_dcmpgt>
 800edea:	b9c8      	cbnz	r0, 800ee20 <_dtoa_r+0x6f8>
 800edec:	4642      	mov	r2, r8
 800edee:	464b      	mov	r3, r9
 800edf0:	4630      	mov	r0, r6
 800edf2:	4639      	mov	r1, r7
 800edf4:	f7f1 fe70 	bl	8000ad8 <__aeabi_dcmpeq>
 800edf8:	b110      	cbz	r0, 800ee00 <_dtoa_r+0x6d8>
 800edfa:	9b02      	ldr	r3, [sp, #8]
 800edfc:	07d9      	lsls	r1, r3, #31
 800edfe:	d40f      	bmi.n	800ee20 <_dtoa_r+0x6f8>
 800ee00:	4620      	mov	r0, r4
 800ee02:	4659      	mov	r1, fp
 800ee04:	f000 fe5c 	bl	800fac0 <_Bfree>
 800ee08:	2300      	movs	r3, #0
 800ee0a:	702b      	strb	r3, [r5, #0]
 800ee0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee0e:	f10a 0001 	add.w	r0, sl, #1
 800ee12:	6018      	str	r0, [r3, #0]
 800ee14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	f43f acd8 	beq.w	800e7cc <_dtoa_r+0xa4>
 800ee1c:	601d      	str	r5, [r3, #0]
 800ee1e:	e4d5      	b.n	800e7cc <_dtoa_r+0xa4>
 800ee20:	f8cd a01c 	str.w	sl, [sp, #28]
 800ee24:	462b      	mov	r3, r5
 800ee26:	461d      	mov	r5, r3
 800ee28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ee2c:	2a39      	cmp	r2, #57	; 0x39
 800ee2e:	d108      	bne.n	800ee42 <_dtoa_r+0x71a>
 800ee30:	9a00      	ldr	r2, [sp, #0]
 800ee32:	429a      	cmp	r2, r3
 800ee34:	d1f7      	bne.n	800ee26 <_dtoa_r+0x6fe>
 800ee36:	9a07      	ldr	r2, [sp, #28]
 800ee38:	9900      	ldr	r1, [sp, #0]
 800ee3a:	3201      	adds	r2, #1
 800ee3c:	9207      	str	r2, [sp, #28]
 800ee3e:	2230      	movs	r2, #48	; 0x30
 800ee40:	700a      	strb	r2, [r1, #0]
 800ee42:	781a      	ldrb	r2, [r3, #0]
 800ee44:	3201      	adds	r2, #1
 800ee46:	701a      	strb	r2, [r3, #0]
 800ee48:	e78c      	b.n	800ed64 <_dtoa_r+0x63c>
 800ee4a:	4b7f      	ldr	r3, [pc, #508]	; (800f048 <_dtoa_r+0x920>)
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	f7f1 fbdb 	bl	8000608 <__aeabi_dmul>
 800ee52:	2200      	movs	r2, #0
 800ee54:	2300      	movs	r3, #0
 800ee56:	4606      	mov	r6, r0
 800ee58:	460f      	mov	r7, r1
 800ee5a:	f7f1 fe3d 	bl	8000ad8 <__aeabi_dcmpeq>
 800ee5e:	2800      	cmp	r0, #0
 800ee60:	d09b      	beq.n	800ed9a <_dtoa_r+0x672>
 800ee62:	e7cd      	b.n	800ee00 <_dtoa_r+0x6d8>
 800ee64:	9a08      	ldr	r2, [sp, #32]
 800ee66:	2a00      	cmp	r2, #0
 800ee68:	f000 80c4 	beq.w	800eff4 <_dtoa_r+0x8cc>
 800ee6c:	9a05      	ldr	r2, [sp, #20]
 800ee6e:	2a01      	cmp	r2, #1
 800ee70:	f300 80a8 	bgt.w	800efc4 <_dtoa_r+0x89c>
 800ee74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ee76:	2a00      	cmp	r2, #0
 800ee78:	f000 80a0 	beq.w	800efbc <_dtoa_r+0x894>
 800ee7c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ee80:	9e06      	ldr	r6, [sp, #24]
 800ee82:	4645      	mov	r5, r8
 800ee84:	9a04      	ldr	r2, [sp, #16]
 800ee86:	2101      	movs	r1, #1
 800ee88:	441a      	add	r2, r3
 800ee8a:	4620      	mov	r0, r4
 800ee8c:	4498      	add	r8, r3
 800ee8e:	9204      	str	r2, [sp, #16]
 800ee90:	f000 ff1c 	bl	800fccc <__i2b>
 800ee94:	4607      	mov	r7, r0
 800ee96:	2d00      	cmp	r5, #0
 800ee98:	dd0b      	ble.n	800eeb2 <_dtoa_r+0x78a>
 800ee9a:	9b04      	ldr	r3, [sp, #16]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	dd08      	ble.n	800eeb2 <_dtoa_r+0x78a>
 800eea0:	42ab      	cmp	r3, r5
 800eea2:	9a04      	ldr	r2, [sp, #16]
 800eea4:	bfa8      	it	ge
 800eea6:	462b      	movge	r3, r5
 800eea8:	eba8 0803 	sub.w	r8, r8, r3
 800eeac:	1aed      	subs	r5, r5, r3
 800eeae:	1ad3      	subs	r3, r2, r3
 800eeb0:	9304      	str	r3, [sp, #16]
 800eeb2:	9b06      	ldr	r3, [sp, #24]
 800eeb4:	b1fb      	cbz	r3, 800eef6 <_dtoa_r+0x7ce>
 800eeb6:	9b08      	ldr	r3, [sp, #32]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	f000 809f 	beq.w	800effc <_dtoa_r+0x8d4>
 800eebe:	2e00      	cmp	r6, #0
 800eec0:	dd11      	ble.n	800eee6 <_dtoa_r+0x7be>
 800eec2:	4639      	mov	r1, r7
 800eec4:	4632      	mov	r2, r6
 800eec6:	4620      	mov	r0, r4
 800eec8:	f000 ffbc 	bl	800fe44 <__pow5mult>
 800eecc:	465a      	mov	r2, fp
 800eece:	4601      	mov	r1, r0
 800eed0:	4607      	mov	r7, r0
 800eed2:	4620      	mov	r0, r4
 800eed4:	f000 ff10 	bl	800fcf8 <__multiply>
 800eed8:	4659      	mov	r1, fp
 800eeda:	9007      	str	r0, [sp, #28]
 800eedc:	4620      	mov	r0, r4
 800eede:	f000 fdef 	bl	800fac0 <_Bfree>
 800eee2:	9b07      	ldr	r3, [sp, #28]
 800eee4:	469b      	mov	fp, r3
 800eee6:	9b06      	ldr	r3, [sp, #24]
 800eee8:	1b9a      	subs	r2, r3, r6
 800eeea:	d004      	beq.n	800eef6 <_dtoa_r+0x7ce>
 800eeec:	4659      	mov	r1, fp
 800eeee:	4620      	mov	r0, r4
 800eef0:	f000 ffa8 	bl	800fe44 <__pow5mult>
 800eef4:	4683      	mov	fp, r0
 800eef6:	2101      	movs	r1, #1
 800eef8:	4620      	mov	r0, r4
 800eefa:	f000 fee7 	bl	800fccc <__i2b>
 800eefe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	4606      	mov	r6, r0
 800ef04:	dd7c      	ble.n	800f000 <_dtoa_r+0x8d8>
 800ef06:	461a      	mov	r2, r3
 800ef08:	4601      	mov	r1, r0
 800ef0a:	4620      	mov	r0, r4
 800ef0c:	f000 ff9a 	bl	800fe44 <__pow5mult>
 800ef10:	9b05      	ldr	r3, [sp, #20]
 800ef12:	2b01      	cmp	r3, #1
 800ef14:	4606      	mov	r6, r0
 800ef16:	dd76      	ble.n	800f006 <_dtoa_r+0x8de>
 800ef18:	2300      	movs	r3, #0
 800ef1a:	9306      	str	r3, [sp, #24]
 800ef1c:	6933      	ldr	r3, [r6, #16]
 800ef1e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ef22:	6918      	ldr	r0, [r3, #16]
 800ef24:	f000 fe82 	bl	800fc2c <__hi0bits>
 800ef28:	f1c0 0020 	rsb	r0, r0, #32
 800ef2c:	9b04      	ldr	r3, [sp, #16]
 800ef2e:	4418      	add	r0, r3
 800ef30:	f010 001f 	ands.w	r0, r0, #31
 800ef34:	f000 8086 	beq.w	800f044 <_dtoa_r+0x91c>
 800ef38:	f1c0 0320 	rsb	r3, r0, #32
 800ef3c:	2b04      	cmp	r3, #4
 800ef3e:	dd7f      	ble.n	800f040 <_dtoa_r+0x918>
 800ef40:	f1c0 001c 	rsb	r0, r0, #28
 800ef44:	9b04      	ldr	r3, [sp, #16]
 800ef46:	4403      	add	r3, r0
 800ef48:	4480      	add	r8, r0
 800ef4a:	4405      	add	r5, r0
 800ef4c:	9304      	str	r3, [sp, #16]
 800ef4e:	f1b8 0f00 	cmp.w	r8, #0
 800ef52:	dd05      	ble.n	800ef60 <_dtoa_r+0x838>
 800ef54:	4659      	mov	r1, fp
 800ef56:	4642      	mov	r2, r8
 800ef58:	4620      	mov	r0, r4
 800ef5a:	f000 ffcd 	bl	800fef8 <__lshift>
 800ef5e:	4683      	mov	fp, r0
 800ef60:	9b04      	ldr	r3, [sp, #16]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	dd05      	ble.n	800ef72 <_dtoa_r+0x84a>
 800ef66:	4631      	mov	r1, r6
 800ef68:	461a      	mov	r2, r3
 800ef6a:	4620      	mov	r0, r4
 800ef6c:	f000 ffc4 	bl	800fef8 <__lshift>
 800ef70:	4606      	mov	r6, r0
 800ef72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d069      	beq.n	800f04c <_dtoa_r+0x924>
 800ef78:	4631      	mov	r1, r6
 800ef7a:	4658      	mov	r0, fp
 800ef7c:	f001 f828 	bl	800ffd0 <__mcmp>
 800ef80:	2800      	cmp	r0, #0
 800ef82:	da63      	bge.n	800f04c <_dtoa_r+0x924>
 800ef84:	2300      	movs	r3, #0
 800ef86:	4659      	mov	r1, fp
 800ef88:	220a      	movs	r2, #10
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	f000 fdba 	bl	800fb04 <__multadd>
 800ef90:	9b08      	ldr	r3, [sp, #32]
 800ef92:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ef96:	4683      	mov	fp, r0
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	f000 818f 	beq.w	800f2bc <_dtoa_r+0xb94>
 800ef9e:	4639      	mov	r1, r7
 800efa0:	2300      	movs	r3, #0
 800efa2:	220a      	movs	r2, #10
 800efa4:	4620      	mov	r0, r4
 800efa6:	f000 fdad 	bl	800fb04 <__multadd>
 800efaa:	f1b9 0f00 	cmp.w	r9, #0
 800efae:	4607      	mov	r7, r0
 800efb0:	f300 808e 	bgt.w	800f0d0 <_dtoa_r+0x9a8>
 800efb4:	9b05      	ldr	r3, [sp, #20]
 800efb6:	2b02      	cmp	r3, #2
 800efb8:	dc50      	bgt.n	800f05c <_dtoa_r+0x934>
 800efba:	e089      	b.n	800f0d0 <_dtoa_r+0x9a8>
 800efbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800efbe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800efc2:	e75d      	b.n	800ee80 <_dtoa_r+0x758>
 800efc4:	9b01      	ldr	r3, [sp, #4]
 800efc6:	1e5e      	subs	r6, r3, #1
 800efc8:	9b06      	ldr	r3, [sp, #24]
 800efca:	42b3      	cmp	r3, r6
 800efcc:	bfbf      	itttt	lt
 800efce:	9b06      	ldrlt	r3, [sp, #24]
 800efd0:	9606      	strlt	r6, [sp, #24]
 800efd2:	1af2      	sublt	r2, r6, r3
 800efd4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800efd6:	bfb6      	itet	lt
 800efd8:	189b      	addlt	r3, r3, r2
 800efda:	1b9e      	subge	r6, r3, r6
 800efdc:	930d      	strlt	r3, [sp, #52]	; 0x34
 800efde:	9b01      	ldr	r3, [sp, #4]
 800efe0:	bfb8      	it	lt
 800efe2:	2600      	movlt	r6, #0
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	bfb5      	itete	lt
 800efe8:	eba8 0503 	sublt.w	r5, r8, r3
 800efec:	9b01      	ldrge	r3, [sp, #4]
 800efee:	2300      	movlt	r3, #0
 800eff0:	4645      	movge	r5, r8
 800eff2:	e747      	b.n	800ee84 <_dtoa_r+0x75c>
 800eff4:	9e06      	ldr	r6, [sp, #24]
 800eff6:	9f08      	ldr	r7, [sp, #32]
 800eff8:	4645      	mov	r5, r8
 800effa:	e74c      	b.n	800ee96 <_dtoa_r+0x76e>
 800effc:	9a06      	ldr	r2, [sp, #24]
 800effe:	e775      	b.n	800eeec <_dtoa_r+0x7c4>
 800f000:	9b05      	ldr	r3, [sp, #20]
 800f002:	2b01      	cmp	r3, #1
 800f004:	dc18      	bgt.n	800f038 <_dtoa_r+0x910>
 800f006:	9b02      	ldr	r3, [sp, #8]
 800f008:	b9b3      	cbnz	r3, 800f038 <_dtoa_r+0x910>
 800f00a:	9b03      	ldr	r3, [sp, #12]
 800f00c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f010:	b9a3      	cbnz	r3, 800f03c <_dtoa_r+0x914>
 800f012:	9b03      	ldr	r3, [sp, #12]
 800f014:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f018:	0d1b      	lsrs	r3, r3, #20
 800f01a:	051b      	lsls	r3, r3, #20
 800f01c:	b12b      	cbz	r3, 800f02a <_dtoa_r+0x902>
 800f01e:	9b04      	ldr	r3, [sp, #16]
 800f020:	3301      	adds	r3, #1
 800f022:	9304      	str	r3, [sp, #16]
 800f024:	f108 0801 	add.w	r8, r8, #1
 800f028:	2301      	movs	r3, #1
 800f02a:	9306      	str	r3, [sp, #24]
 800f02c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f02e:	2b00      	cmp	r3, #0
 800f030:	f47f af74 	bne.w	800ef1c <_dtoa_r+0x7f4>
 800f034:	2001      	movs	r0, #1
 800f036:	e779      	b.n	800ef2c <_dtoa_r+0x804>
 800f038:	2300      	movs	r3, #0
 800f03a:	e7f6      	b.n	800f02a <_dtoa_r+0x902>
 800f03c:	9b02      	ldr	r3, [sp, #8]
 800f03e:	e7f4      	b.n	800f02a <_dtoa_r+0x902>
 800f040:	d085      	beq.n	800ef4e <_dtoa_r+0x826>
 800f042:	4618      	mov	r0, r3
 800f044:	301c      	adds	r0, #28
 800f046:	e77d      	b.n	800ef44 <_dtoa_r+0x81c>
 800f048:	40240000 	.word	0x40240000
 800f04c:	9b01      	ldr	r3, [sp, #4]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	dc38      	bgt.n	800f0c4 <_dtoa_r+0x99c>
 800f052:	9b05      	ldr	r3, [sp, #20]
 800f054:	2b02      	cmp	r3, #2
 800f056:	dd35      	ble.n	800f0c4 <_dtoa_r+0x99c>
 800f058:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f05c:	f1b9 0f00 	cmp.w	r9, #0
 800f060:	d10d      	bne.n	800f07e <_dtoa_r+0x956>
 800f062:	4631      	mov	r1, r6
 800f064:	464b      	mov	r3, r9
 800f066:	2205      	movs	r2, #5
 800f068:	4620      	mov	r0, r4
 800f06a:	f000 fd4b 	bl	800fb04 <__multadd>
 800f06e:	4601      	mov	r1, r0
 800f070:	4606      	mov	r6, r0
 800f072:	4658      	mov	r0, fp
 800f074:	f000 ffac 	bl	800ffd0 <__mcmp>
 800f078:	2800      	cmp	r0, #0
 800f07a:	f73f adbd 	bgt.w	800ebf8 <_dtoa_r+0x4d0>
 800f07e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f080:	9d00      	ldr	r5, [sp, #0]
 800f082:	ea6f 0a03 	mvn.w	sl, r3
 800f086:	f04f 0800 	mov.w	r8, #0
 800f08a:	4631      	mov	r1, r6
 800f08c:	4620      	mov	r0, r4
 800f08e:	f000 fd17 	bl	800fac0 <_Bfree>
 800f092:	2f00      	cmp	r7, #0
 800f094:	f43f aeb4 	beq.w	800ee00 <_dtoa_r+0x6d8>
 800f098:	f1b8 0f00 	cmp.w	r8, #0
 800f09c:	d005      	beq.n	800f0aa <_dtoa_r+0x982>
 800f09e:	45b8      	cmp	r8, r7
 800f0a0:	d003      	beq.n	800f0aa <_dtoa_r+0x982>
 800f0a2:	4641      	mov	r1, r8
 800f0a4:	4620      	mov	r0, r4
 800f0a6:	f000 fd0b 	bl	800fac0 <_Bfree>
 800f0aa:	4639      	mov	r1, r7
 800f0ac:	4620      	mov	r0, r4
 800f0ae:	f000 fd07 	bl	800fac0 <_Bfree>
 800f0b2:	e6a5      	b.n	800ee00 <_dtoa_r+0x6d8>
 800f0b4:	2600      	movs	r6, #0
 800f0b6:	4637      	mov	r7, r6
 800f0b8:	e7e1      	b.n	800f07e <_dtoa_r+0x956>
 800f0ba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f0bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f0c0:	4637      	mov	r7, r6
 800f0c2:	e599      	b.n	800ebf8 <_dtoa_r+0x4d0>
 800f0c4:	9b08      	ldr	r3, [sp, #32]
 800f0c6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	f000 80fd 	beq.w	800f2ca <_dtoa_r+0xba2>
 800f0d0:	2d00      	cmp	r5, #0
 800f0d2:	dd05      	ble.n	800f0e0 <_dtoa_r+0x9b8>
 800f0d4:	4639      	mov	r1, r7
 800f0d6:	462a      	mov	r2, r5
 800f0d8:	4620      	mov	r0, r4
 800f0da:	f000 ff0d 	bl	800fef8 <__lshift>
 800f0de:	4607      	mov	r7, r0
 800f0e0:	9b06      	ldr	r3, [sp, #24]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d05c      	beq.n	800f1a0 <_dtoa_r+0xa78>
 800f0e6:	6879      	ldr	r1, [r7, #4]
 800f0e8:	4620      	mov	r0, r4
 800f0ea:	f000 fca9 	bl	800fa40 <_Balloc>
 800f0ee:	4605      	mov	r5, r0
 800f0f0:	b928      	cbnz	r0, 800f0fe <_dtoa_r+0x9d6>
 800f0f2:	4b80      	ldr	r3, [pc, #512]	; (800f2f4 <_dtoa_r+0xbcc>)
 800f0f4:	4602      	mov	r2, r0
 800f0f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f0fa:	f7ff bb2e 	b.w	800e75a <_dtoa_r+0x32>
 800f0fe:	693a      	ldr	r2, [r7, #16]
 800f100:	3202      	adds	r2, #2
 800f102:	0092      	lsls	r2, r2, #2
 800f104:	f107 010c 	add.w	r1, r7, #12
 800f108:	300c      	adds	r0, #12
 800f10a:	f7fd fc73 	bl	800c9f4 <memcpy>
 800f10e:	2201      	movs	r2, #1
 800f110:	4629      	mov	r1, r5
 800f112:	4620      	mov	r0, r4
 800f114:	f000 fef0 	bl	800fef8 <__lshift>
 800f118:	9b00      	ldr	r3, [sp, #0]
 800f11a:	3301      	adds	r3, #1
 800f11c:	9301      	str	r3, [sp, #4]
 800f11e:	9b00      	ldr	r3, [sp, #0]
 800f120:	444b      	add	r3, r9
 800f122:	9307      	str	r3, [sp, #28]
 800f124:	9b02      	ldr	r3, [sp, #8]
 800f126:	f003 0301 	and.w	r3, r3, #1
 800f12a:	46b8      	mov	r8, r7
 800f12c:	9306      	str	r3, [sp, #24]
 800f12e:	4607      	mov	r7, r0
 800f130:	9b01      	ldr	r3, [sp, #4]
 800f132:	4631      	mov	r1, r6
 800f134:	3b01      	subs	r3, #1
 800f136:	4658      	mov	r0, fp
 800f138:	9302      	str	r3, [sp, #8]
 800f13a:	f7ff fa69 	bl	800e610 <quorem>
 800f13e:	4603      	mov	r3, r0
 800f140:	3330      	adds	r3, #48	; 0x30
 800f142:	9004      	str	r0, [sp, #16]
 800f144:	4641      	mov	r1, r8
 800f146:	4658      	mov	r0, fp
 800f148:	9308      	str	r3, [sp, #32]
 800f14a:	f000 ff41 	bl	800ffd0 <__mcmp>
 800f14e:	463a      	mov	r2, r7
 800f150:	4681      	mov	r9, r0
 800f152:	4631      	mov	r1, r6
 800f154:	4620      	mov	r0, r4
 800f156:	f000 ff57 	bl	8010008 <__mdiff>
 800f15a:	68c2      	ldr	r2, [r0, #12]
 800f15c:	9b08      	ldr	r3, [sp, #32]
 800f15e:	4605      	mov	r5, r0
 800f160:	bb02      	cbnz	r2, 800f1a4 <_dtoa_r+0xa7c>
 800f162:	4601      	mov	r1, r0
 800f164:	4658      	mov	r0, fp
 800f166:	f000 ff33 	bl	800ffd0 <__mcmp>
 800f16a:	9b08      	ldr	r3, [sp, #32]
 800f16c:	4602      	mov	r2, r0
 800f16e:	4629      	mov	r1, r5
 800f170:	4620      	mov	r0, r4
 800f172:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800f176:	f000 fca3 	bl	800fac0 <_Bfree>
 800f17a:	9b05      	ldr	r3, [sp, #20]
 800f17c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f17e:	9d01      	ldr	r5, [sp, #4]
 800f180:	ea43 0102 	orr.w	r1, r3, r2
 800f184:	9b06      	ldr	r3, [sp, #24]
 800f186:	430b      	orrs	r3, r1
 800f188:	9b08      	ldr	r3, [sp, #32]
 800f18a:	d10d      	bne.n	800f1a8 <_dtoa_r+0xa80>
 800f18c:	2b39      	cmp	r3, #57	; 0x39
 800f18e:	d029      	beq.n	800f1e4 <_dtoa_r+0xabc>
 800f190:	f1b9 0f00 	cmp.w	r9, #0
 800f194:	dd01      	ble.n	800f19a <_dtoa_r+0xa72>
 800f196:	9b04      	ldr	r3, [sp, #16]
 800f198:	3331      	adds	r3, #49	; 0x31
 800f19a:	9a02      	ldr	r2, [sp, #8]
 800f19c:	7013      	strb	r3, [r2, #0]
 800f19e:	e774      	b.n	800f08a <_dtoa_r+0x962>
 800f1a0:	4638      	mov	r0, r7
 800f1a2:	e7b9      	b.n	800f118 <_dtoa_r+0x9f0>
 800f1a4:	2201      	movs	r2, #1
 800f1a6:	e7e2      	b.n	800f16e <_dtoa_r+0xa46>
 800f1a8:	f1b9 0f00 	cmp.w	r9, #0
 800f1ac:	db06      	blt.n	800f1bc <_dtoa_r+0xa94>
 800f1ae:	9905      	ldr	r1, [sp, #20]
 800f1b0:	ea41 0909 	orr.w	r9, r1, r9
 800f1b4:	9906      	ldr	r1, [sp, #24]
 800f1b6:	ea59 0101 	orrs.w	r1, r9, r1
 800f1ba:	d120      	bne.n	800f1fe <_dtoa_r+0xad6>
 800f1bc:	2a00      	cmp	r2, #0
 800f1be:	ddec      	ble.n	800f19a <_dtoa_r+0xa72>
 800f1c0:	4659      	mov	r1, fp
 800f1c2:	2201      	movs	r2, #1
 800f1c4:	4620      	mov	r0, r4
 800f1c6:	9301      	str	r3, [sp, #4]
 800f1c8:	f000 fe96 	bl	800fef8 <__lshift>
 800f1cc:	4631      	mov	r1, r6
 800f1ce:	4683      	mov	fp, r0
 800f1d0:	f000 fefe 	bl	800ffd0 <__mcmp>
 800f1d4:	2800      	cmp	r0, #0
 800f1d6:	9b01      	ldr	r3, [sp, #4]
 800f1d8:	dc02      	bgt.n	800f1e0 <_dtoa_r+0xab8>
 800f1da:	d1de      	bne.n	800f19a <_dtoa_r+0xa72>
 800f1dc:	07da      	lsls	r2, r3, #31
 800f1de:	d5dc      	bpl.n	800f19a <_dtoa_r+0xa72>
 800f1e0:	2b39      	cmp	r3, #57	; 0x39
 800f1e2:	d1d8      	bne.n	800f196 <_dtoa_r+0xa6e>
 800f1e4:	9a02      	ldr	r2, [sp, #8]
 800f1e6:	2339      	movs	r3, #57	; 0x39
 800f1e8:	7013      	strb	r3, [r2, #0]
 800f1ea:	462b      	mov	r3, r5
 800f1ec:	461d      	mov	r5, r3
 800f1ee:	3b01      	subs	r3, #1
 800f1f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f1f4:	2a39      	cmp	r2, #57	; 0x39
 800f1f6:	d050      	beq.n	800f29a <_dtoa_r+0xb72>
 800f1f8:	3201      	adds	r2, #1
 800f1fa:	701a      	strb	r2, [r3, #0]
 800f1fc:	e745      	b.n	800f08a <_dtoa_r+0x962>
 800f1fe:	2a00      	cmp	r2, #0
 800f200:	dd03      	ble.n	800f20a <_dtoa_r+0xae2>
 800f202:	2b39      	cmp	r3, #57	; 0x39
 800f204:	d0ee      	beq.n	800f1e4 <_dtoa_r+0xabc>
 800f206:	3301      	adds	r3, #1
 800f208:	e7c7      	b.n	800f19a <_dtoa_r+0xa72>
 800f20a:	9a01      	ldr	r2, [sp, #4]
 800f20c:	9907      	ldr	r1, [sp, #28]
 800f20e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f212:	428a      	cmp	r2, r1
 800f214:	d02a      	beq.n	800f26c <_dtoa_r+0xb44>
 800f216:	4659      	mov	r1, fp
 800f218:	2300      	movs	r3, #0
 800f21a:	220a      	movs	r2, #10
 800f21c:	4620      	mov	r0, r4
 800f21e:	f000 fc71 	bl	800fb04 <__multadd>
 800f222:	45b8      	cmp	r8, r7
 800f224:	4683      	mov	fp, r0
 800f226:	f04f 0300 	mov.w	r3, #0
 800f22a:	f04f 020a 	mov.w	r2, #10
 800f22e:	4641      	mov	r1, r8
 800f230:	4620      	mov	r0, r4
 800f232:	d107      	bne.n	800f244 <_dtoa_r+0xb1c>
 800f234:	f000 fc66 	bl	800fb04 <__multadd>
 800f238:	4680      	mov	r8, r0
 800f23a:	4607      	mov	r7, r0
 800f23c:	9b01      	ldr	r3, [sp, #4]
 800f23e:	3301      	adds	r3, #1
 800f240:	9301      	str	r3, [sp, #4]
 800f242:	e775      	b.n	800f130 <_dtoa_r+0xa08>
 800f244:	f000 fc5e 	bl	800fb04 <__multadd>
 800f248:	4639      	mov	r1, r7
 800f24a:	4680      	mov	r8, r0
 800f24c:	2300      	movs	r3, #0
 800f24e:	220a      	movs	r2, #10
 800f250:	4620      	mov	r0, r4
 800f252:	f000 fc57 	bl	800fb04 <__multadd>
 800f256:	4607      	mov	r7, r0
 800f258:	e7f0      	b.n	800f23c <_dtoa_r+0xb14>
 800f25a:	f1b9 0f00 	cmp.w	r9, #0
 800f25e:	9a00      	ldr	r2, [sp, #0]
 800f260:	bfcc      	ite	gt
 800f262:	464d      	movgt	r5, r9
 800f264:	2501      	movle	r5, #1
 800f266:	4415      	add	r5, r2
 800f268:	f04f 0800 	mov.w	r8, #0
 800f26c:	4659      	mov	r1, fp
 800f26e:	2201      	movs	r2, #1
 800f270:	4620      	mov	r0, r4
 800f272:	9301      	str	r3, [sp, #4]
 800f274:	f000 fe40 	bl	800fef8 <__lshift>
 800f278:	4631      	mov	r1, r6
 800f27a:	4683      	mov	fp, r0
 800f27c:	f000 fea8 	bl	800ffd0 <__mcmp>
 800f280:	2800      	cmp	r0, #0
 800f282:	dcb2      	bgt.n	800f1ea <_dtoa_r+0xac2>
 800f284:	d102      	bne.n	800f28c <_dtoa_r+0xb64>
 800f286:	9b01      	ldr	r3, [sp, #4]
 800f288:	07db      	lsls	r3, r3, #31
 800f28a:	d4ae      	bmi.n	800f1ea <_dtoa_r+0xac2>
 800f28c:	462b      	mov	r3, r5
 800f28e:	461d      	mov	r5, r3
 800f290:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f294:	2a30      	cmp	r2, #48	; 0x30
 800f296:	d0fa      	beq.n	800f28e <_dtoa_r+0xb66>
 800f298:	e6f7      	b.n	800f08a <_dtoa_r+0x962>
 800f29a:	9a00      	ldr	r2, [sp, #0]
 800f29c:	429a      	cmp	r2, r3
 800f29e:	d1a5      	bne.n	800f1ec <_dtoa_r+0xac4>
 800f2a0:	f10a 0a01 	add.w	sl, sl, #1
 800f2a4:	2331      	movs	r3, #49	; 0x31
 800f2a6:	e779      	b.n	800f19c <_dtoa_r+0xa74>
 800f2a8:	4b13      	ldr	r3, [pc, #76]	; (800f2f8 <_dtoa_r+0xbd0>)
 800f2aa:	f7ff baaf 	b.w	800e80c <_dtoa_r+0xe4>
 800f2ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	f47f aa86 	bne.w	800e7c2 <_dtoa_r+0x9a>
 800f2b6:	4b11      	ldr	r3, [pc, #68]	; (800f2fc <_dtoa_r+0xbd4>)
 800f2b8:	f7ff baa8 	b.w	800e80c <_dtoa_r+0xe4>
 800f2bc:	f1b9 0f00 	cmp.w	r9, #0
 800f2c0:	dc03      	bgt.n	800f2ca <_dtoa_r+0xba2>
 800f2c2:	9b05      	ldr	r3, [sp, #20]
 800f2c4:	2b02      	cmp	r3, #2
 800f2c6:	f73f aec9 	bgt.w	800f05c <_dtoa_r+0x934>
 800f2ca:	9d00      	ldr	r5, [sp, #0]
 800f2cc:	4631      	mov	r1, r6
 800f2ce:	4658      	mov	r0, fp
 800f2d0:	f7ff f99e 	bl	800e610 <quorem>
 800f2d4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f2d8:	f805 3b01 	strb.w	r3, [r5], #1
 800f2dc:	9a00      	ldr	r2, [sp, #0]
 800f2de:	1aaa      	subs	r2, r5, r2
 800f2e0:	4591      	cmp	r9, r2
 800f2e2:	ddba      	ble.n	800f25a <_dtoa_r+0xb32>
 800f2e4:	4659      	mov	r1, fp
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	220a      	movs	r2, #10
 800f2ea:	4620      	mov	r0, r4
 800f2ec:	f000 fc0a 	bl	800fb04 <__multadd>
 800f2f0:	4683      	mov	fp, r0
 800f2f2:	e7eb      	b.n	800f2cc <_dtoa_r+0xba4>
 800f2f4:	08012664 	.word	0x08012664
 800f2f8:	08012869 	.word	0x08012869
 800f2fc:	080125e1 	.word	0x080125e1

0800f300 <rshift>:
 800f300:	6903      	ldr	r3, [r0, #16]
 800f302:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f306:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f30a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f30e:	f100 0414 	add.w	r4, r0, #20
 800f312:	dd45      	ble.n	800f3a0 <rshift+0xa0>
 800f314:	f011 011f 	ands.w	r1, r1, #31
 800f318:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f31c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f320:	d10c      	bne.n	800f33c <rshift+0x3c>
 800f322:	f100 0710 	add.w	r7, r0, #16
 800f326:	4629      	mov	r1, r5
 800f328:	42b1      	cmp	r1, r6
 800f32a:	d334      	bcc.n	800f396 <rshift+0x96>
 800f32c:	1a9b      	subs	r3, r3, r2
 800f32e:	009b      	lsls	r3, r3, #2
 800f330:	1eea      	subs	r2, r5, #3
 800f332:	4296      	cmp	r6, r2
 800f334:	bf38      	it	cc
 800f336:	2300      	movcc	r3, #0
 800f338:	4423      	add	r3, r4
 800f33a:	e015      	b.n	800f368 <rshift+0x68>
 800f33c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f340:	f1c1 0820 	rsb	r8, r1, #32
 800f344:	40cf      	lsrs	r7, r1
 800f346:	f105 0e04 	add.w	lr, r5, #4
 800f34a:	46a1      	mov	r9, r4
 800f34c:	4576      	cmp	r6, lr
 800f34e:	46f4      	mov	ip, lr
 800f350:	d815      	bhi.n	800f37e <rshift+0x7e>
 800f352:	1a9b      	subs	r3, r3, r2
 800f354:	009a      	lsls	r2, r3, #2
 800f356:	3a04      	subs	r2, #4
 800f358:	3501      	adds	r5, #1
 800f35a:	42ae      	cmp	r6, r5
 800f35c:	bf38      	it	cc
 800f35e:	2200      	movcc	r2, #0
 800f360:	18a3      	adds	r3, r4, r2
 800f362:	50a7      	str	r7, [r4, r2]
 800f364:	b107      	cbz	r7, 800f368 <rshift+0x68>
 800f366:	3304      	adds	r3, #4
 800f368:	1b1a      	subs	r2, r3, r4
 800f36a:	42a3      	cmp	r3, r4
 800f36c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f370:	bf08      	it	eq
 800f372:	2300      	moveq	r3, #0
 800f374:	6102      	str	r2, [r0, #16]
 800f376:	bf08      	it	eq
 800f378:	6143      	streq	r3, [r0, #20]
 800f37a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f37e:	f8dc c000 	ldr.w	ip, [ip]
 800f382:	fa0c fc08 	lsl.w	ip, ip, r8
 800f386:	ea4c 0707 	orr.w	r7, ip, r7
 800f38a:	f849 7b04 	str.w	r7, [r9], #4
 800f38e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f392:	40cf      	lsrs	r7, r1
 800f394:	e7da      	b.n	800f34c <rshift+0x4c>
 800f396:	f851 cb04 	ldr.w	ip, [r1], #4
 800f39a:	f847 cf04 	str.w	ip, [r7, #4]!
 800f39e:	e7c3      	b.n	800f328 <rshift+0x28>
 800f3a0:	4623      	mov	r3, r4
 800f3a2:	e7e1      	b.n	800f368 <rshift+0x68>

0800f3a4 <__hexdig_fun>:
 800f3a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f3a8:	2b09      	cmp	r3, #9
 800f3aa:	d802      	bhi.n	800f3b2 <__hexdig_fun+0xe>
 800f3ac:	3820      	subs	r0, #32
 800f3ae:	b2c0      	uxtb	r0, r0
 800f3b0:	4770      	bx	lr
 800f3b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f3b6:	2b05      	cmp	r3, #5
 800f3b8:	d801      	bhi.n	800f3be <__hexdig_fun+0x1a>
 800f3ba:	3847      	subs	r0, #71	; 0x47
 800f3bc:	e7f7      	b.n	800f3ae <__hexdig_fun+0xa>
 800f3be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f3c2:	2b05      	cmp	r3, #5
 800f3c4:	d801      	bhi.n	800f3ca <__hexdig_fun+0x26>
 800f3c6:	3827      	subs	r0, #39	; 0x27
 800f3c8:	e7f1      	b.n	800f3ae <__hexdig_fun+0xa>
 800f3ca:	2000      	movs	r0, #0
 800f3cc:	4770      	bx	lr
	...

0800f3d0 <__gethex>:
 800f3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3d4:	ed2d 8b02 	vpush	{d8}
 800f3d8:	b089      	sub	sp, #36	; 0x24
 800f3da:	ee08 0a10 	vmov	s16, r0
 800f3de:	9304      	str	r3, [sp, #16]
 800f3e0:	4bbc      	ldr	r3, [pc, #752]	; (800f6d4 <__gethex+0x304>)
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	9301      	str	r3, [sp, #4]
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	468b      	mov	fp, r1
 800f3ea:	4690      	mov	r8, r2
 800f3ec:	f7f0 fef8 	bl	80001e0 <strlen>
 800f3f0:	9b01      	ldr	r3, [sp, #4]
 800f3f2:	f8db 2000 	ldr.w	r2, [fp]
 800f3f6:	4403      	add	r3, r0
 800f3f8:	4682      	mov	sl, r0
 800f3fa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f3fe:	9305      	str	r3, [sp, #20]
 800f400:	1c93      	adds	r3, r2, #2
 800f402:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f406:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f40a:	32fe      	adds	r2, #254	; 0xfe
 800f40c:	18d1      	adds	r1, r2, r3
 800f40e:	461f      	mov	r7, r3
 800f410:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f414:	9100      	str	r1, [sp, #0]
 800f416:	2830      	cmp	r0, #48	; 0x30
 800f418:	d0f8      	beq.n	800f40c <__gethex+0x3c>
 800f41a:	f7ff ffc3 	bl	800f3a4 <__hexdig_fun>
 800f41e:	4604      	mov	r4, r0
 800f420:	2800      	cmp	r0, #0
 800f422:	d13a      	bne.n	800f49a <__gethex+0xca>
 800f424:	9901      	ldr	r1, [sp, #4]
 800f426:	4652      	mov	r2, sl
 800f428:	4638      	mov	r0, r7
 800f42a:	f7fe fa0a 	bl	800d842 <strncmp>
 800f42e:	4605      	mov	r5, r0
 800f430:	2800      	cmp	r0, #0
 800f432:	d168      	bne.n	800f506 <__gethex+0x136>
 800f434:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f438:	eb07 060a 	add.w	r6, r7, sl
 800f43c:	f7ff ffb2 	bl	800f3a4 <__hexdig_fun>
 800f440:	2800      	cmp	r0, #0
 800f442:	d062      	beq.n	800f50a <__gethex+0x13a>
 800f444:	4633      	mov	r3, r6
 800f446:	7818      	ldrb	r0, [r3, #0]
 800f448:	2830      	cmp	r0, #48	; 0x30
 800f44a:	461f      	mov	r7, r3
 800f44c:	f103 0301 	add.w	r3, r3, #1
 800f450:	d0f9      	beq.n	800f446 <__gethex+0x76>
 800f452:	f7ff ffa7 	bl	800f3a4 <__hexdig_fun>
 800f456:	2301      	movs	r3, #1
 800f458:	fab0 f480 	clz	r4, r0
 800f45c:	0964      	lsrs	r4, r4, #5
 800f45e:	4635      	mov	r5, r6
 800f460:	9300      	str	r3, [sp, #0]
 800f462:	463a      	mov	r2, r7
 800f464:	4616      	mov	r6, r2
 800f466:	3201      	adds	r2, #1
 800f468:	7830      	ldrb	r0, [r6, #0]
 800f46a:	f7ff ff9b 	bl	800f3a4 <__hexdig_fun>
 800f46e:	2800      	cmp	r0, #0
 800f470:	d1f8      	bne.n	800f464 <__gethex+0x94>
 800f472:	9901      	ldr	r1, [sp, #4]
 800f474:	4652      	mov	r2, sl
 800f476:	4630      	mov	r0, r6
 800f478:	f7fe f9e3 	bl	800d842 <strncmp>
 800f47c:	b980      	cbnz	r0, 800f4a0 <__gethex+0xd0>
 800f47e:	b94d      	cbnz	r5, 800f494 <__gethex+0xc4>
 800f480:	eb06 050a 	add.w	r5, r6, sl
 800f484:	462a      	mov	r2, r5
 800f486:	4616      	mov	r6, r2
 800f488:	3201      	adds	r2, #1
 800f48a:	7830      	ldrb	r0, [r6, #0]
 800f48c:	f7ff ff8a 	bl	800f3a4 <__hexdig_fun>
 800f490:	2800      	cmp	r0, #0
 800f492:	d1f8      	bne.n	800f486 <__gethex+0xb6>
 800f494:	1bad      	subs	r5, r5, r6
 800f496:	00ad      	lsls	r5, r5, #2
 800f498:	e004      	b.n	800f4a4 <__gethex+0xd4>
 800f49a:	2400      	movs	r4, #0
 800f49c:	4625      	mov	r5, r4
 800f49e:	e7e0      	b.n	800f462 <__gethex+0x92>
 800f4a0:	2d00      	cmp	r5, #0
 800f4a2:	d1f7      	bne.n	800f494 <__gethex+0xc4>
 800f4a4:	7833      	ldrb	r3, [r6, #0]
 800f4a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f4aa:	2b50      	cmp	r3, #80	; 0x50
 800f4ac:	d13b      	bne.n	800f526 <__gethex+0x156>
 800f4ae:	7873      	ldrb	r3, [r6, #1]
 800f4b0:	2b2b      	cmp	r3, #43	; 0x2b
 800f4b2:	d02c      	beq.n	800f50e <__gethex+0x13e>
 800f4b4:	2b2d      	cmp	r3, #45	; 0x2d
 800f4b6:	d02e      	beq.n	800f516 <__gethex+0x146>
 800f4b8:	1c71      	adds	r1, r6, #1
 800f4ba:	f04f 0900 	mov.w	r9, #0
 800f4be:	7808      	ldrb	r0, [r1, #0]
 800f4c0:	f7ff ff70 	bl	800f3a4 <__hexdig_fun>
 800f4c4:	1e43      	subs	r3, r0, #1
 800f4c6:	b2db      	uxtb	r3, r3
 800f4c8:	2b18      	cmp	r3, #24
 800f4ca:	d82c      	bhi.n	800f526 <__gethex+0x156>
 800f4cc:	f1a0 0210 	sub.w	r2, r0, #16
 800f4d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f4d4:	f7ff ff66 	bl	800f3a4 <__hexdig_fun>
 800f4d8:	1e43      	subs	r3, r0, #1
 800f4da:	b2db      	uxtb	r3, r3
 800f4dc:	2b18      	cmp	r3, #24
 800f4de:	d91d      	bls.n	800f51c <__gethex+0x14c>
 800f4e0:	f1b9 0f00 	cmp.w	r9, #0
 800f4e4:	d000      	beq.n	800f4e8 <__gethex+0x118>
 800f4e6:	4252      	negs	r2, r2
 800f4e8:	4415      	add	r5, r2
 800f4ea:	f8cb 1000 	str.w	r1, [fp]
 800f4ee:	b1e4      	cbz	r4, 800f52a <__gethex+0x15a>
 800f4f0:	9b00      	ldr	r3, [sp, #0]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	bf14      	ite	ne
 800f4f6:	2700      	movne	r7, #0
 800f4f8:	2706      	moveq	r7, #6
 800f4fa:	4638      	mov	r0, r7
 800f4fc:	b009      	add	sp, #36	; 0x24
 800f4fe:	ecbd 8b02 	vpop	{d8}
 800f502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f506:	463e      	mov	r6, r7
 800f508:	4625      	mov	r5, r4
 800f50a:	2401      	movs	r4, #1
 800f50c:	e7ca      	b.n	800f4a4 <__gethex+0xd4>
 800f50e:	f04f 0900 	mov.w	r9, #0
 800f512:	1cb1      	adds	r1, r6, #2
 800f514:	e7d3      	b.n	800f4be <__gethex+0xee>
 800f516:	f04f 0901 	mov.w	r9, #1
 800f51a:	e7fa      	b.n	800f512 <__gethex+0x142>
 800f51c:	230a      	movs	r3, #10
 800f51e:	fb03 0202 	mla	r2, r3, r2, r0
 800f522:	3a10      	subs	r2, #16
 800f524:	e7d4      	b.n	800f4d0 <__gethex+0x100>
 800f526:	4631      	mov	r1, r6
 800f528:	e7df      	b.n	800f4ea <__gethex+0x11a>
 800f52a:	1bf3      	subs	r3, r6, r7
 800f52c:	3b01      	subs	r3, #1
 800f52e:	4621      	mov	r1, r4
 800f530:	2b07      	cmp	r3, #7
 800f532:	dc0b      	bgt.n	800f54c <__gethex+0x17c>
 800f534:	ee18 0a10 	vmov	r0, s16
 800f538:	f000 fa82 	bl	800fa40 <_Balloc>
 800f53c:	4604      	mov	r4, r0
 800f53e:	b940      	cbnz	r0, 800f552 <__gethex+0x182>
 800f540:	4b65      	ldr	r3, [pc, #404]	; (800f6d8 <__gethex+0x308>)
 800f542:	4602      	mov	r2, r0
 800f544:	21de      	movs	r1, #222	; 0xde
 800f546:	4865      	ldr	r0, [pc, #404]	; (800f6dc <__gethex+0x30c>)
 800f548:	f001 fd92 	bl	8011070 <__assert_func>
 800f54c:	3101      	adds	r1, #1
 800f54e:	105b      	asrs	r3, r3, #1
 800f550:	e7ee      	b.n	800f530 <__gethex+0x160>
 800f552:	f100 0914 	add.w	r9, r0, #20
 800f556:	f04f 0b00 	mov.w	fp, #0
 800f55a:	f1ca 0301 	rsb	r3, sl, #1
 800f55e:	f8cd 9008 	str.w	r9, [sp, #8]
 800f562:	f8cd b000 	str.w	fp, [sp]
 800f566:	9306      	str	r3, [sp, #24]
 800f568:	42b7      	cmp	r7, r6
 800f56a:	d340      	bcc.n	800f5ee <__gethex+0x21e>
 800f56c:	9802      	ldr	r0, [sp, #8]
 800f56e:	9b00      	ldr	r3, [sp, #0]
 800f570:	f840 3b04 	str.w	r3, [r0], #4
 800f574:	eba0 0009 	sub.w	r0, r0, r9
 800f578:	1080      	asrs	r0, r0, #2
 800f57a:	0146      	lsls	r6, r0, #5
 800f57c:	6120      	str	r0, [r4, #16]
 800f57e:	4618      	mov	r0, r3
 800f580:	f000 fb54 	bl	800fc2c <__hi0bits>
 800f584:	1a30      	subs	r0, r6, r0
 800f586:	f8d8 6000 	ldr.w	r6, [r8]
 800f58a:	42b0      	cmp	r0, r6
 800f58c:	dd63      	ble.n	800f656 <__gethex+0x286>
 800f58e:	1b87      	subs	r7, r0, r6
 800f590:	4639      	mov	r1, r7
 800f592:	4620      	mov	r0, r4
 800f594:	f000 feee 	bl	8010374 <__any_on>
 800f598:	4682      	mov	sl, r0
 800f59a:	b1a8      	cbz	r0, 800f5c8 <__gethex+0x1f8>
 800f59c:	1e7b      	subs	r3, r7, #1
 800f59e:	1159      	asrs	r1, r3, #5
 800f5a0:	f003 021f 	and.w	r2, r3, #31
 800f5a4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f5a8:	f04f 0a01 	mov.w	sl, #1
 800f5ac:	fa0a f202 	lsl.w	r2, sl, r2
 800f5b0:	420a      	tst	r2, r1
 800f5b2:	d009      	beq.n	800f5c8 <__gethex+0x1f8>
 800f5b4:	4553      	cmp	r3, sl
 800f5b6:	dd05      	ble.n	800f5c4 <__gethex+0x1f4>
 800f5b8:	1eb9      	subs	r1, r7, #2
 800f5ba:	4620      	mov	r0, r4
 800f5bc:	f000 feda 	bl	8010374 <__any_on>
 800f5c0:	2800      	cmp	r0, #0
 800f5c2:	d145      	bne.n	800f650 <__gethex+0x280>
 800f5c4:	f04f 0a02 	mov.w	sl, #2
 800f5c8:	4639      	mov	r1, r7
 800f5ca:	4620      	mov	r0, r4
 800f5cc:	f7ff fe98 	bl	800f300 <rshift>
 800f5d0:	443d      	add	r5, r7
 800f5d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f5d6:	42ab      	cmp	r3, r5
 800f5d8:	da4c      	bge.n	800f674 <__gethex+0x2a4>
 800f5da:	ee18 0a10 	vmov	r0, s16
 800f5de:	4621      	mov	r1, r4
 800f5e0:	f000 fa6e 	bl	800fac0 <_Bfree>
 800f5e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	6013      	str	r3, [r2, #0]
 800f5ea:	27a3      	movs	r7, #163	; 0xa3
 800f5ec:	e785      	b.n	800f4fa <__gethex+0x12a>
 800f5ee:	1e73      	subs	r3, r6, #1
 800f5f0:	9a05      	ldr	r2, [sp, #20]
 800f5f2:	9303      	str	r3, [sp, #12]
 800f5f4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f5f8:	4293      	cmp	r3, r2
 800f5fa:	d019      	beq.n	800f630 <__gethex+0x260>
 800f5fc:	f1bb 0f20 	cmp.w	fp, #32
 800f600:	d107      	bne.n	800f612 <__gethex+0x242>
 800f602:	9b02      	ldr	r3, [sp, #8]
 800f604:	9a00      	ldr	r2, [sp, #0]
 800f606:	f843 2b04 	str.w	r2, [r3], #4
 800f60a:	9302      	str	r3, [sp, #8]
 800f60c:	2300      	movs	r3, #0
 800f60e:	9300      	str	r3, [sp, #0]
 800f610:	469b      	mov	fp, r3
 800f612:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f616:	f7ff fec5 	bl	800f3a4 <__hexdig_fun>
 800f61a:	9b00      	ldr	r3, [sp, #0]
 800f61c:	f000 000f 	and.w	r0, r0, #15
 800f620:	fa00 f00b 	lsl.w	r0, r0, fp
 800f624:	4303      	orrs	r3, r0
 800f626:	9300      	str	r3, [sp, #0]
 800f628:	f10b 0b04 	add.w	fp, fp, #4
 800f62c:	9b03      	ldr	r3, [sp, #12]
 800f62e:	e00d      	b.n	800f64c <__gethex+0x27c>
 800f630:	9b03      	ldr	r3, [sp, #12]
 800f632:	9a06      	ldr	r2, [sp, #24]
 800f634:	4413      	add	r3, r2
 800f636:	42bb      	cmp	r3, r7
 800f638:	d3e0      	bcc.n	800f5fc <__gethex+0x22c>
 800f63a:	4618      	mov	r0, r3
 800f63c:	9901      	ldr	r1, [sp, #4]
 800f63e:	9307      	str	r3, [sp, #28]
 800f640:	4652      	mov	r2, sl
 800f642:	f7fe f8fe 	bl	800d842 <strncmp>
 800f646:	9b07      	ldr	r3, [sp, #28]
 800f648:	2800      	cmp	r0, #0
 800f64a:	d1d7      	bne.n	800f5fc <__gethex+0x22c>
 800f64c:	461e      	mov	r6, r3
 800f64e:	e78b      	b.n	800f568 <__gethex+0x198>
 800f650:	f04f 0a03 	mov.w	sl, #3
 800f654:	e7b8      	b.n	800f5c8 <__gethex+0x1f8>
 800f656:	da0a      	bge.n	800f66e <__gethex+0x29e>
 800f658:	1a37      	subs	r7, r6, r0
 800f65a:	4621      	mov	r1, r4
 800f65c:	ee18 0a10 	vmov	r0, s16
 800f660:	463a      	mov	r2, r7
 800f662:	f000 fc49 	bl	800fef8 <__lshift>
 800f666:	1bed      	subs	r5, r5, r7
 800f668:	4604      	mov	r4, r0
 800f66a:	f100 0914 	add.w	r9, r0, #20
 800f66e:	f04f 0a00 	mov.w	sl, #0
 800f672:	e7ae      	b.n	800f5d2 <__gethex+0x202>
 800f674:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f678:	42a8      	cmp	r0, r5
 800f67a:	dd72      	ble.n	800f762 <__gethex+0x392>
 800f67c:	1b45      	subs	r5, r0, r5
 800f67e:	42ae      	cmp	r6, r5
 800f680:	dc36      	bgt.n	800f6f0 <__gethex+0x320>
 800f682:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f686:	2b02      	cmp	r3, #2
 800f688:	d02a      	beq.n	800f6e0 <__gethex+0x310>
 800f68a:	2b03      	cmp	r3, #3
 800f68c:	d02c      	beq.n	800f6e8 <__gethex+0x318>
 800f68e:	2b01      	cmp	r3, #1
 800f690:	d115      	bne.n	800f6be <__gethex+0x2ee>
 800f692:	42ae      	cmp	r6, r5
 800f694:	d113      	bne.n	800f6be <__gethex+0x2ee>
 800f696:	2e01      	cmp	r6, #1
 800f698:	d10b      	bne.n	800f6b2 <__gethex+0x2e2>
 800f69a:	9a04      	ldr	r2, [sp, #16]
 800f69c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f6a0:	6013      	str	r3, [r2, #0]
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	6123      	str	r3, [r4, #16]
 800f6a6:	f8c9 3000 	str.w	r3, [r9]
 800f6aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f6ac:	2762      	movs	r7, #98	; 0x62
 800f6ae:	601c      	str	r4, [r3, #0]
 800f6b0:	e723      	b.n	800f4fa <__gethex+0x12a>
 800f6b2:	1e71      	subs	r1, r6, #1
 800f6b4:	4620      	mov	r0, r4
 800f6b6:	f000 fe5d 	bl	8010374 <__any_on>
 800f6ba:	2800      	cmp	r0, #0
 800f6bc:	d1ed      	bne.n	800f69a <__gethex+0x2ca>
 800f6be:	ee18 0a10 	vmov	r0, s16
 800f6c2:	4621      	mov	r1, r4
 800f6c4:	f000 f9fc 	bl	800fac0 <_Bfree>
 800f6c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	6013      	str	r3, [r2, #0]
 800f6ce:	2750      	movs	r7, #80	; 0x50
 800f6d0:	e713      	b.n	800f4fa <__gethex+0x12a>
 800f6d2:	bf00      	nop
 800f6d4:	080126e0 	.word	0x080126e0
 800f6d8:	08012664 	.word	0x08012664
 800f6dc:	08012675 	.word	0x08012675
 800f6e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d1eb      	bne.n	800f6be <__gethex+0x2ee>
 800f6e6:	e7d8      	b.n	800f69a <__gethex+0x2ca>
 800f6e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d1d5      	bne.n	800f69a <__gethex+0x2ca>
 800f6ee:	e7e6      	b.n	800f6be <__gethex+0x2ee>
 800f6f0:	1e6f      	subs	r7, r5, #1
 800f6f2:	f1ba 0f00 	cmp.w	sl, #0
 800f6f6:	d131      	bne.n	800f75c <__gethex+0x38c>
 800f6f8:	b127      	cbz	r7, 800f704 <__gethex+0x334>
 800f6fa:	4639      	mov	r1, r7
 800f6fc:	4620      	mov	r0, r4
 800f6fe:	f000 fe39 	bl	8010374 <__any_on>
 800f702:	4682      	mov	sl, r0
 800f704:	117b      	asrs	r3, r7, #5
 800f706:	2101      	movs	r1, #1
 800f708:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f70c:	f007 071f 	and.w	r7, r7, #31
 800f710:	fa01 f707 	lsl.w	r7, r1, r7
 800f714:	421f      	tst	r7, r3
 800f716:	4629      	mov	r1, r5
 800f718:	4620      	mov	r0, r4
 800f71a:	bf18      	it	ne
 800f71c:	f04a 0a02 	orrne.w	sl, sl, #2
 800f720:	1b76      	subs	r6, r6, r5
 800f722:	f7ff fded 	bl	800f300 <rshift>
 800f726:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f72a:	2702      	movs	r7, #2
 800f72c:	f1ba 0f00 	cmp.w	sl, #0
 800f730:	d048      	beq.n	800f7c4 <__gethex+0x3f4>
 800f732:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f736:	2b02      	cmp	r3, #2
 800f738:	d015      	beq.n	800f766 <__gethex+0x396>
 800f73a:	2b03      	cmp	r3, #3
 800f73c:	d017      	beq.n	800f76e <__gethex+0x39e>
 800f73e:	2b01      	cmp	r3, #1
 800f740:	d109      	bne.n	800f756 <__gethex+0x386>
 800f742:	f01a 0f02 	tst.w	sl, #2
 800f746:	d006      	beq.n	800f756 <__gethex+0x386>
 800f748:	f8d9 0000 	ldr.w	r0, [r9]
 800f74c:	ea4a 0a00 	orr.w	sl, sl, r0
 800f750:	f01a 0f01 	tst.w	sl, #1
 800f754:	d10e      	bne.n	800f774 <__gethex+0x3a4>
 800f756:	f047 0710 	orr.w	r7, r7, #16
 800f75a:	e033      	b.n	800f7c4 <__gethex+0x3f4>
 800f75c:	f04f 0a01 	mov.w	sl, #1
 800f760:	e7d0      	b.n	800f704 <__gethex+0x334>
 800f762:	2701      	movs	r7, #1
 800f764:	e7e2      	b.n	800f72c <__gethex+0x35c>
 800f766:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f768:	f1c3 0301 	rsb	r3, r3, #1
 800f76c:	9315      	str	r3, [sp, #84]	; 0x54
 800f76e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f770:	2b00      	cmp	r3, #0
 800f772:	d0f0      	beq.n	800f756 <__gethex+0x386>
 800f774:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f778:	f104 0314 	add.w	r3, r4, #20
 800f77c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f780:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f784:	f04f 0c00 	mov.w	ip, #0
 800f788:	4618      	mov	r0, r3
 800f78a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f78e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f792:	d01c      	beq.n	800f7ce <__gethex+0x3fe>
 800f794:	3201      	adds	r2, #1
 800f796:	6002      	str	r2, [r0, #0]
 800f798:	2f02      	cmp	r7, #2
 800f79a:	f104 0314 	add.w	r3, r4, #20
 800f79e:	d13f      	bne.n	800f820 <__gethex+0x450>
 800f7a0:	f8d8 2000 	ldr.w	r2, [r8]
 800f7a4:	3a01      	subs	r2, #1
 800f7a6:	42b2      	cmp	r2, r6
 800f7a8:	d10a      	bne.n	800f7c0 <__gethex+0x3f0>
 800f7aa:	1171      	asrs	r1, r6, #5
 800f7ac:	2201      	movs	r2, #1
 800f7ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f7b2:	f006 061f 	and.w	r6, r6, #31
 800f7b6:	fa02 f606 	lsl.w	r6, r2, r6
 800f7ba:	421e      	tst	r6, r3
 800f7bc:	bf18      	it	ne
 800f7be:	4617      	movne	r7, r2
 800f7c0:	f047 0720 	orr.w	r7, r7, #32
 800f7c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f7c6:	601c      	str	r4, [r3, #0]
 800f7c8:	9b04      	ldr	r3, [sp, #16]
 800f7ca:	601d      	str	r5, [r3, #0]
 800f7cc:	e695      	b.n	800f4fa <__gethex+0x12a>
 800f7ce:	4299      	cmp	r1, r3
 800f7d0:	f843 cc04 	str.w	ip, [r3, #-4]
 800f7d4:	d8d8      	bhi.n	800f788 <__gethex+0x3b8>
 800f7d6:	68a3      	ldr	r3, [r4, #8]
 800f7d8:	459b      	cmp	fp, r3
 800f7da:	db19      	blt.n	800f810 <__gethex+0x440>
 800f7dc:	6861      	ldr	r1, [r4, #4]
 800f7de:	ee18 0a10 	vmov	r0, s16
 800f7e2:	3101      	adds	r1, #1
 800f7e4:	f000 f92c 	bl	800fa40 <_Balloc>
 800f7e8:	4681      	mov	r9, r0
 800f7ea:	b918      	cbnz	r0, 800f7f4 <__gethex+0x424>
 800f7ec:	4b1a      	ldr	r3, [pc, #104]	; (800f858 <__gethex+0x488>)
 800f7ee:	4602      	mov	r2, r0
 800f7f0:	2184      	movs	r1, #132	; 0x84
 800f7f2:	e6a8      	b.n	800f546 <__gethex+0x176>
 800f7f4:	6922      	ldr	r2, [r4, #16]
 800f7f6:	3202      	adds	r2, #2
 800f7f8:	f104 010c 	add.w	r1, r4, #12
 800f7fc:	0092      	lsls	r2, r2, #2
 800f7fe:	300c      	adds	r0, #12
 800f800:	f7fd f8f8 	bl	800c9f4 <memcpy>
 800f804:	4621      	mov	r1, r4
 800f806:	ee18 0a10 	vmov	r0, s16
 800f80a:	f000 f959 	bl	800fac0 <_Bfree>
 800f80e:	464c      	mov	r4, r9
 800f810:	6923      	ldr	r3, [r4, #16]
 800f812:	1c5a      	adds	r2, r3, #1
 800f814:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f818:	6122      	str	r2, [r4, #16]
 800f81a:	2201      	movs	r2, #1
 800f81c:	615a      	str	r2, [r3, #20]
 800f81e:	e7bb      	b.n	800f798 <__gethex+0x3c8>
 800f820:	6922      	ldr	r2, [r4, #16]
 800f822:	455a      	cmp	r2, fp
 800f824:	dd0b      	ble.n	800f83e <__gethex+0x46e>
 800f826:	2101      	movs	r1, #1
 800f828:	4620      	mov	r0, r4
 800f82a:	f7ff fd69 	bl	800f300 <rshift>
 800f82e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f832:	3501      	adds	r5, #1
 800f834:	42ab      	cmp	r3, r5
 800f836:	f6ff aed0 	blt.w	800f5da <__gethex+0x20a>
 800f83a:	2701      	movs	r7, #1
 800f83c:	e7c0      	b.n	800f7c0 <__gethex+0x3f0>
 800f83e:	f016 061f 	ands.w	r6, r6, #31
 800f842:	d0fa      	beq.n	800f83a <__gethex+0x46a>
 800f844:	449a      	add	sl, r3
 800f846:	f1c6 0620 	rsb	r6, r6, #32
 800f84a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800f84e:	f000 f9ed 	bl	800fc2c <__hi0bits>
 800f852:	42b0      	cmp	r0, r6
 800f854:	dbe7      	blt.n	800f826 <__gethex+0x456>
 800f856:	e7f0      	b.n	800f83a <__gethex+0x46a>
 800f858:	08012664 	.word	0x08012664

0800f85c <L_shift>:
 800f85c:	f1c2 0208 	rsb	r2, r2, #8
 800f860:	0092      	lsls	r2, r2, #2
 800f862:	b570      	push	{r4, r5, r6, lr}
 800f864:	f1c2 0620 	rsb	r6, r2, #32
 800f868:	6843      	ldr	r3, [r0, #4]
 800f86a:	6804      	ldr	r4, [r0, #0]
 800f86c:	fa03 f506 	lsl.w	r5, r3, r6
 800f870:	432c      	orrs	r4, r5
 800f872:	40d3      	lsrs	r3, r2
 800f874:	6004      	str	r4, [r0, #0]
 800f876:	f840 3f04 	str.w	r3, [r0, #4]!
 800f87a:	4288      	cmp	r0, r1
 800f87c:	d3f4      	bcc.n	800f868 <L_shift+0xc>
 800f87e:	bd70      	pop	{r4, r5, r6, pc}

0800f880 <__match>:
 800f880:	b530      	push	{r4, r5, lr}
 800f882:	6803      	ldr	r3, [r0, #0]
 800f884:	3301      	adds	r3, #1
 800f886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f88a:	b914      	cbnz	r4, 800f892 <__match+0x12>
 800f88c:	6003      	str	r3, [r0, #0]
 800f88e:	2001      	movs	r0, #1
 800f890:	bd30      	pop	{r4, r5, pc}
 800f892:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f896:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f89a:	2d19      	cmp	r5, #25
 800f89c:	bf98      	it	ls
 800f89e:	3220      	addls	r2, #32
 800f8a0:	42a2      	cmp	r2, r4
 800f8a2:	d0f0      	beq.n	800f886 <__match+0x6>
 800f8a4:	2000      	movs	r0, #0
 800f8a6:	e7f3      	b.n	800f890 <__match+0x10>

0800f8a8 <__hexnan>:
 800f8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8ac:	680b      	ldr	r3, [r1, #0]
 800f8ae:	6801      	ldr	r1, [r0, #0]
 800f8b0:	115e      	asrs	r6, r3, #5
 800f8b2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f8b6:	f013 031f 	ands.w	r3, r3, #31
 800f8ba:	b087      	sub	sp, #28
 800f8bc:	bf18      	it	ne
 800f8be:	3604      	addne	r6, #4
 800f8c0:	2500      	movs	r5, #0
 800f8c2:	1f37      	subs	r7, r6, #4
 800f8c4:	4682      	mov	sl, r0
 800f8c6:	4690      	mov	r8, r2
 800f8c8:	9301      	str	r3, [sp, #4]
 800f8ca:	f846 5c04 	str.w	r5, [r6, #-4]
 800f8ce:	46b9      	mov	r9, r7
 800f8d0:	463c      	mov	r4, r7
 800f8d2:	9502      	str	r5, [sp, #8]
 800f8d4:	46ab      	mov	fp, r5
 800f8d6:	784a      	ldrb	r2, [r1, #1]
 800f8d8:	1c4b      	adds	r3, r1, #1
 800f8da:	9303      	str	r3, [sp, #12]
 800f8dc:	b342      	cbz	r2, 800f930 <__hexnan+0x88>
 800f8de:	4610      	mov	r0, r2
 800f8e0:	9105      	str	r1, [sp, #20]
 800f8e2:	9204      	str	r2, [sp, #16]
 800f8e4:	f7ff fd5e 	bl	800f3a4 <__hexdig_fun>
 800f8e8:	2800      	cmp	r0, #0
 800f8ea:	d14f      	bne.n	800f98c <__hexnan+0xe4>
 800f8ec:	9a04      	ldr	r2, [sp, #16]
 800f8ee:	9905      	ldr	r1, [sp, #20]
 800f8f0:	2a20      	cmp	r2, #32
 800f8f2:	d818      	bhi.n	800f926 <__hexnan+0x7e>
 800f8f4:	9b02      	ldr	r3, [sp, #8]
 800f8f6:	459b      	cmp	fp, r3
 800f8f8:	dd13      	ble.n	800f922 <__hexnan+0x7a>
 800f8fa:	454c      	cmp	r4, r9
 800f8fc:	d206      	bcs.n	800f90c <__hexnan+0x64>
 800f8fe:	2d07      	cmp	r5, #7
 800f900:	dc04      	bgt.n	800f90c <__hexnan+0x64>
 800f902:	462a      	mov	r2, r5
 800f904:	4649      	mov	r1, r9
 800f906:	4620      	mov	r0, r4
 800f908:	f7ff ffa8 	bl	800f85c <L_shift>
 800f90c:	4544      	cmp	r4, r8
 800f90e:	d950      	bls.n	800f9b2 <__hexnan+0x10a>
 800f910:	2300      	movs	r3, #0
 800f912:	f1a4 0904 	sub.w	r9, r4, #4
 800f916:	f844 3c04 	str.w	r3, [r4, #-4]
 800f91a:	f8cd b008 	str.w	fp, [sp, #8]
 800f91e:	464c      	mov	r4, r9
 800f920:	461d      	mov	r5, r3
 800f922:	9903      	ldr	r1, [sp, #12]
 800f924:	e7d7      	b.n	800f8d6 <__hexnan+0x2e>
 800f926:	2a29      	cmp	r2, #41	; 0x29
 800f928:	d156      	bne.n	800f9d8 <__hexnan+0x130>
 800f92a:	3102      	adds	r1, #2
 800f92c:	f8ca 1000 	str.w	r1, [sl]
 800f930:	f1bb 0f00 	cmp.w	fp, #0
 800f934:	d050      	beq.n	800f9d8 <__hexnan+0x130>
 800f936:	454c      	cmp	r4, r9
 800f938:	d206      	bcs.n	800f948 <__hexnan+0xa0>
 800f93a:	2d07      	cmp	r5, #7
 800f93c:	dc04      	bgt.n	800f948 <__hexnan+0xa0>
 800f93e:	462a      	mov	r2, r5
 800f940:	4649      	mov	r1, r9
 800f942:	4620      	mov	r0, r4
 800f944:	f7ff ff8a 	bl	800f85c <L_shift>
 800f948:	4544      	cmp	r4, r8
 800f94a:	d934      	bls.n	800f9b6 <__hexnan+0x10e>
 800f94c:	f1a8 0204 	sub.w	r2, r8, #4
 800f950:	4623      	mov	r3, r4
 800f952:	f853 1b04 	ldr.w	r1, [r3], #4
 800f956:	f842 1f04 	str.w	r1, [r2, #4]!
 800f95a:	429f      	cmp	r7, r3
 800f95c:	d2f9      	bcs.n	800f952 <__hexnan+0xaa>
 800f95e:	1b3b      	subs	r3, r7, r4
 800f960:	f023 0303 	bic.w	r3, r3, #3
 800f964:	3304      	adds	r3, #4
 800f966:	3401      	adds	r4, #1
 800f968:	3e03      	subs	r6, #3
 800f96a:	42b4      	cmp	r4, r6
 800f96c:	bf88      	it	hi
 800f96e:	2304      	movhi	r3, #4
 800f970:	4443      	add	r3, r8
 800f972:	2200      	movs	r2, #0
 800f974:	f843 2b04 	str.w	r2, [r3], #4
 800f978:	429f      	cmp	r7, r3
 800f97a:	d2fb      	bcs.n	800f974 <__hexnan+0xcc>
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	b91b      	cbnz	r3, 800f988 <__hexnan+0xe0>
 800f980:	4547      	cmp	r7, r8
 800f982:	d127      	bne.n	800f9d4 <__hexnan+0x12c>
 800f984:	2301      	movs	r3, #1
 800f986:	603b      	str	r3, [r7, #0]
 800f988:	2005      	movs	r0, #5
 800f98a:	e026      	b.n	800f9da <__hexnan+0x132>
 800f98c:	3501      	adds	r5, #1
 800f98e:	2d08      	cmp	r5, #8
 800f990:	f10b 0b01 	add.w	fp, fp, #1
 800f994:	dd06      	ble.n	800f9a4 <__hexnan+0xfc>
 800f996:	4544      	cmp	r4, r8
 800f998:	d9c3      	bls.n	800f922 <__hexnan+0x7a>
 800f99a:	2300      	movs	r3, #0
 800f99c:	f844 3c04 	str.w	r3, [r4, #-4]
 800f9a0:	2501      	movs	r5, #1
 800f9a2:	3c04      	subs	r4, #4
 800f9a4:	6822      	ldr	r2, [r4, #0]
 800f9a6:	f000 000f 	and.w	r0, r0, #15
 800f9aa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f9ae:	6022      	str	r2, [r4, #0]
 800f9b0:	e7b7      	b.n	800f922 <__hexnan+0x7a>
 800f9b2:	2508      	movs	r5, #8
 800f9b4:	e7b5      	b.n	800f922 <__hexnan+0x7a>
 800f9b6:	9b01      	ldr	r3, [sp, #4]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d0df      	beq.n	800f97c <__hexnan+0xd4>
 800f9bc:	f04f 32ff 	mov.w	r2, #4294967295
 800f9c0:	f1c3 0320 	rsb	r3, r3, #32
 800f9c4:	fa22 f303 	lsr.w	r3, r2, r3
 800f9c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f9cc:	401a      	ands	r2, r3
 800f9ce:	f846 2c04 	str.w	r2, [r6, #-4]
 800f9d2:	e7d3      	b.n	800f97c <__hexnan+0xd4>
 800f9d4:	3f04      	subs	r7, #4
 800f9d6:	e7d1      	b.n	800f97c <__hexnan+0xd4>
 800f9d8:	2004      	movs	r0, #4
 800f9da:	b007      	add	sp, #28
 800f9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f9e0 <_localeconv_r>:
 800f9e0:	4800      	ldr	r0, [pc, #0]	; (800f9e4 <_localeconv_r+0x4>)
 800f9e2:	4770      	bx	lr
 800f9e4:	20000240 	.word	0x20000240

0800f9e8 <_lseek_r>:
 800f9e8:	b538      	push	{r3, r4, r5, lr}
 800f9ea:	4d07      	ldr	r5, [pc, #28]	; (800fa08 <_lseek_r+0x20>)
 800f9ec:	4604      	mov	r4, r0
 800f9ee:	4608      	mov	r0, r1
 800f9f0:	4611      	mov	r1, r2
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	602a      	str	r2, [r5, #0]
 800f9f6:	461a      	mov	r2, r3
 800f9f8:	f7f2 fb3a 	bl	8002070 <_lseek>
 800f9fc:	1c43      	adds	r3, r0, #1
 800f9fe:	d102      	bne.n	800fa06 <_lseek_r+0x1e>
 800fa00:	682b      	ldr	r3, [r5, #0]
 800fa02:	b103      	cbz	r3, 800fa06 <_lseek_r+0x1e>
 800fa04:	6023      	str	r3, [r4, #0]
 800fa06:	bd38      	pop	{r3, r4, r5, pc}
 800fa08:	20005d54 	.word	0x20005d54

0800fa0c <malloc>:
 800fa0c:	4b02      	ldr	r3, [pc, #8]	; (800fa18 <malloc+0xc>)
 800fa0e:	4601      	mov	r1, r0
 800fa10:	6818      	ldr	r0, [r3, #0]
 800fa12:	f000 bd2f 	b.w	8010474 <_malloc_r>
 800fa16:	bf00      	nop
 800fa18:	200000e8 	.word	0x200000e8

0800fa1c <__ascii_mbtowc>:
 800fa1c:	b082      	sub	sp, #8
 800fa1e:	b901      	cbnz	r1, 800fa22 <__ascii_mbtowc+0x6>
 800fa20:	a901      	add	r1, sp, #4
 800fa22:	b142      	cbz	r2, 800fa36 <__ascii_mbtowc+0x1a>
 800fa24:	b14b      	cbz	r3, 800fa3a <__ascii_mbtowc+0x1e>
 800fa26:	7813      	ldrb	r3, [r2, #0]
 800fa28:	600b      	str	r3, [r1, #0]
 800fa2a:	7812      	ldrb	r2, [r2, #0]
 800fa2c:	1e10      	subs	r0, r2, #0
 800fa2e:	bf18      	it	ne
 800fa30:	2001      	movne	r0, #1
 800fa32:	b002      	add	sp, #8
 800fa34:	4770      	bx	lr
 800fa36:	4610      	mov	r0, r2
 800fa38:	e7fb      	b.n	800fa32 <__ascii_mbtowc+0x16>
 800fa3a:	f06f 0001 	mvn.w	r0, #1
 800fa3e:	e7f8      	b.n	800fa32 <__ascii_mbtowc+0x16>

0800fa40 <_Balloc>:
 800fa40:	b570      	push	{r4, r5, r6, lr}
 800fa42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fa44:	4604      	mov	r4, r0
 800fa46:	460d      	mov	r5, r1
 800fa48:	b976      	cbnz	r6, 800fa68 <_Balloc+0x28>
 800fa4a:	2010      	movs	r0, #16
 800fa4c:	f7ff ffde 	bl	800fa0c <malloc>
 800fa50:	4602      	mov	r2, r0
 800fa52:	6260      	str	r0, [r4, #36]	; 0x24
 800fa54:	b920      	cbnz	r0, 800fa60 <_Balloc+0x20>
 800fa56:	4b18      	ldr	r3, [pc, #96]	; (800fab8 <_Balloc+0x78>)
 800fa58:	4818      	ldr	r0, [pc, #96]	; (800fabc <_Balloc+0x7c>)
 800fa5a:	2166      	movs	r1, #102	; 0x66
 800fa5c:	f001 fb08 	bl	8011070 <__assert_func>
 800fa60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fa64:	6006      	str	r6, [r0, #0]
 800fa66:	60c6      	str	r6, [r0, #12]
 800fa68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fa6a:	68f3      	ldr	r3, [r6, #12]
 800fa6c:	b183      	cbz	r3, 800fa90 <_Balloc+0x50>
 800fa6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa70:	68db      	ldr	r3, [r3, #12]
 800fa72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fa76:	b9b8      	cbnz	r0, 800faa8 <_Balloc+0x68>
 800fa78:	2101      	movs	r1, #1
 800fa7a:	fa01 f605 	lsl.w	r6, r1, r5
 800fa7e:	1d72      	adds	r2, r6, #5
 800fa80:	0092      	lsls	r2, r2, #2
 800fa82:	4620      	mov	r0, r4
 800fa84:	f000 fc97 	bl	80103b6 <_calloc_r>
 800fa88:	b160      	cbz	r0, 800faa4 <_Balloc+0x64>
 800fa8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fa8e:	e00e      	b.n	800faae <_Balloc+0x6e>
 800fa90:	2221      	movs	r2, #33	; 0x21
 800fa92:	2104      	movs	r1, #4
 800fa94:	4620      	mov	r0, r4
 800fa96:	f000 fc8e 	bl	80103b6 <_calloc_r>
 800fa9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa9c:	60f0      	str	r0, [r6, #12]
 800fa9e:	68db      	ldr	r3, [r3, #12]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d1e4      	bne.n	800fa6e <_Balloc+0x2e>
 800faa4:	2000      	movs	r0, #0
 800faa6:	bd70      	pop	{r4, r5, r6, pc}
 800faa8:	6802      	ldr	r2, [r0, #0]
 800faaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800faae:	2300      	movs	r3, #0
 800fab0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fab4:	e7f7      	b.n	800faa6 <_Balloc+0x66>
 800fab6:	bf00      	nop
 800fab8:	080125ee 	.word	0x080125ee
 800fabc:	080126f4 	.word	0x080126f4

0800fac0 <_Bfree>:
 800fac0:	b570      	push	{r4, r5, r6, lr}
 800fac2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fac4:	4605      	mov	r5, r0
 800fac6:	460c      	mov	r4, r1
 800fac8:	b976      	cbnz	r6, 800fae8 <_Bfree+0x28>
 800faca:	2010      	movs	r0, #16
 800facc:	f7ff ff9e 	bl	800fa0c <malloc>
 800fad0:	4602      	mov	r2, r0
 800fad2:	6268      	str	r0, [r5, #36]	; 0x24
 800fad4:	b920      	cbnz	r0, 800fae0 <_Bfree+0x20>
 800fad6:	4b09      	ldr	r3, [pc, #36]	; (800fafc <_Bfree+0x3c>)
 800fad8:	4809      	ldr	r0, [pc, #36]	; (800fb00 <_Bfree+0x40>)
 800fada:	218a      	movs	r1, #138	; 0x8a
 800fadc:	f001 fac8 	bl	8011070 <__assert_func>
 800fae0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fae4:	6006      	str	r6, [r0, #0]
 800fae6:	60c6      	str	r6, [r0, #12]
 800fae8:	b13c      	cbz	r4, 800fafa <_Bfree+0x3a>
 800faea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800faec:	6862      	ldr	r2, [r4, #4]
 800faee:	68db      	ldr	r3, [r3, #12]
 800faf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800faf4:	6021      	str	r1, [r4, #0]
 800faf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fafa:	bd70      	pop	{r4, r5, r6, pc}
 800fafc:	080125ee 	.word	0x080125ee
 800fb00:	080126f4 	.word	0x080126f4

0800fb04 <__multadd>:
 800fb04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb08:	690e      	ldr	r6, [r1, #16]
 800fb0a:	4607      	mov	r7, r0
 800fb0c:	4698      	mov	r8, r3
 800fb0e:	460c      	mov	r4, r1
 800fb10:	f101 0014 	add.w	r0, r1, #20
 800fb14:	2300      	movs	r3, #0
 800fb16:	6805      	ldr	r5, [r0, #0]
 800fb18:	b2a9      	uxth	r1, r5
 800fb1a:	fb02 8101 	mla	r1, r2, r1, r8
 800fb1e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800fb22:	0c2d      	lsrs	r5, r5, #16
 800fb24:	fb02 c505 	mla	r5, r2, r5, ip
 800fb28:	b289      	uxth	r1, r1
 800fb2a:	3301      	adds	r3, #1
 800fb2c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800fb30:	429e      	cmp	r6, r3
 800fb32:	f840 1b04 	str.w	r1, [r0], #4
 800fb36:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800fb3a:	dcec      	bgt.n	800fb16 <__multadd+0x12>
 800fb3c:	f1b8 0f00 	cmp.w	r8, #0
 800fb40:	d022      	beq.n	800fb88 <__multadd+0x84>
 800fb42:	68a3      	ldr	r3, [r4, #8]
 800fb44:	42b3      	cmp	r3, r6
 800fb46:	dc19      	bgt.n	800fb7c <__multadd+0x78>
 800fb48:	6861      	ldr	r1, [r4, #4]
 800fb4a:	4638      	mov	r0, r7
 800fb4c:	3101      	adds	r1, #1
 800fb4e:	f7ff ff77 	bl	800fa40 <_Balloc>
 800fb52:	4605      	mov	r5, r0
 800fb54:	b928      	cbnz	r0, 800fb62 <__multadd+0x5e>
 800fb56:	4602      	mov	r2, r0
 800fb58:	4b0d      	ldr	r3, [pc, #52]	; (800fb90 <__multadd+0x8c>)
 800fb5a:	480e      	ldr	r0, [pc, #56]	; (800fb94 <__multadd+0x90>)
 800fb5c:	21b5      	movs	r1, #181	; 0xb5
 800fb5e:	f001 fa87 	bl	8011070 <__assert_func>
 800fb62:	6922      	ldr	r2, [r4, #16]
 800fb64:	3202      	adds	r2, #2
 800fb66:	f104 010c 	add.w	r1, r4, #12
 800fb6a:	0092      	lsls	r2, r2, #2
 800fb6c:	300c      	adds	r0, #12
 800fb6e:	f7fc ff41 	bl	800c9f4 <memcpy>
 800fb72:	4621      	mov	r1, r4
 800fb74:	4638      	mov	r0, r7
 800fb76:	f7ff ffa3 	bl	800fac0 <_Bfree>
 800fb7a:	462c      	mov	r4, r5
 800fb7c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800fb80:	3601      	adds	r6, #1
 800fb82:	f8c3 8014 	str.w	r8, [r3, #20]
 800fb86:	6126      	str	r6, [r4, #16]
 800fb88:	4620      	mov	r0, r4
 800fb8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb8e:	bf00      	nop
 800fb90:	08012664 	.word	0x08012664
 800fb94:	080126f4 	.word	0x080126f4

0800fb98 <__s2b>:
 800fb98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb9c:	460c      	mov	r4, r1
 800fb9e:	4615      	mov	r5, r2
 800fba0:	461f      	mov	r7, r3
 800fba2:	2209      	movs	r2, #9
 800fba4:	3308      	adds	r3, #8
 800fba6:	4606      	mov	r6, r0
 800fba8:	fb93 f3f2 	sdiv	r3, r3, r2
 800fbac:	2100      	movs	r1, #0
 800fbae:	2201      	movs	r2, #1
 800fbb0:	429a      	cmp	r2, r3
 800fbb2:	db09      	blt.n	800fbc8 <__s2b+0x30>
 800fbb4:	4630      	mov	r0, r6
 800fbb6:	f7ff ff43 	bl	800fa40 <_Balloc>
 800fbba:	b940      	cbnz	r0, 800fbce <__s2b+0x36>
 800fbbc:	4602      	mov	r2, r0
 800fbbe:	4b19      	ldr	r3, [pc, #100]	; (800fc24 <__s2b+0x8c>)
 800fbc0:	4819      	ldr	r0, [pc, #100]	; (800fc28 <__s2b+0x90>)
 800fbc2:	21ce      	movs	r1, #206	; 0xce
 800fbc4:	f001 fa54 	bl	8011070 <__assert_func>
 800fbc8:	0052      	lsls	r2, r2, #1
 800fbca:	3101      	adds	r1, #1
 800fbcc:	e7f0      	b.n	800fbb0 <__s2b+0x18>
 800fbce:	9b08      	ldr	r3, [sp, #32]
 800fbd0:	6143      	str	r3, [r0, #20]
 800fbd2:	2d09      	cmp	r5, #9
 800fbd4:	f04f 0301 	mov.w	r3, #1
 800fbd8:	6103      	str	r3, [r0, #16]
 800fbda:	dd16      	ble.n	800fc0a <__s2b+0x72>
 800fbdc:	f104 0909 	add.w	r9, r4, #9
 800fbe0:	46c8      	mov	r8, r9
 800fbe2:	442c      	add	r4, r5
 800fbe4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fbe8:	4601      	mov	r1, r0
 800fbea:	3b30      	subs	r3, #48	; 0x30
 800fbec:	220a      	movs	r2, #10
 800fbee:	4630      	mov	r0, r6
 800fbf0:	f7ff ff88 	bl	800fb04 <__multadd>
 800fbf4:	45a0      	cmp	r8, r4
 800fbf6:	d1f5      	bne.n	800fbe4 <__s2b+0x4c>
 800fbf8:	f1a5 0408 	sub.w	r4, r5, #8
 800fbfc:	444c      	add	r4, r9
 800fbfe:	1b2d      	subs	r5, r5, r4
 800fc00:	1963      	adds	r3, r4, r5
 800fc02:	42bb      	cmp	r3, r7
 800fc04:	db04      	blt.n	800fc10 <__s2b+0x78>
 800fc06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc0a:	340a      	adds	r4, #10
 800fc0c:	2509      	movs	r5, #9
 800fc0e:	e7f6      	b.n	800fbfe <__s2b+0x66>
 800fc10:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fc14:	4601      	mov	r1, r0
 800fc16:	3b30      	subs	r3, #48	; 0x30
 800fc18:	220a      	movs	r2, #10
 800fc1a:	4630      	mov	r0, r6
 800fc1c:	f7ff ff72 	bl	800fb04 <__multadd>
 800fc20:	e7ee      	b.n	800fc00 <__s2b+0x68>
 800fc22:	bf00      	nop
 800fc24:	08012664 	.word	0x08012664
 800fc28:	080126f4 	.word	0x080126f4

0800fc2c <__hi0bits>:
 800fc2c:	0c03      	lsrs	r3, r0, #16
 800fc2e:	041b      	lsls	r3, r3, #16
 800fc30:	b9d3      	cbnz	r3, 800fc68 <__hi0bits+0x3c>
 800fc32:	0400      	lsls	r0, r0, #16
 800fc34:	2310      	movs	r3, #16
 800fc36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fc3a:	bf04      	itt	eq
 800fc3c:	0200      	lsleq	r0, r0, #8
 800fc3e:	3308      	addeq	r3, #8
 800fc40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fc44:	bf04      	itt	eq
 800fc46:	0100      	lsleq	r0, r0, #4
 800fc48:	3304      	addeq	r3, #4
 800fc4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fc4e:	bf04      	itt	eq
 800fc50:	0080      	lsleq	r0, r0, #2
 800fc52:	3302      	addeq	r3, #2
 800fc54:	2800      	cmp	r0, #0
 800fc56:	db05      	blt.n	800fc64 <__hi0bits+0x38>
 800fc58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fc5c:	f103 0301 	add.w	r3, r3, #1
 800fc60:	bf08      	it	eq
 800fc62:	2320      	moveq	r3, #32
 800fc64:	4618      	mov	r0, r3
 800fc66:	4770      	bx	lr
 800fc68:	2300      	movs	r3, #0
 800fc6a:	e7e4      	b.n	800fc36 <__hi0bits+0xa>

0800fc6c <__lo0bits>:
 800fc6c:	6803      	ldr	r3, [r0, #0]
 800fc6e:	f013 0207 	ands.w	r2, r3, #7
 800fc72:	4601      	mov	r1, r0
 800fc74:	d00b      	beq.n	800fc8e <__lo0bits+0x22>
 800fc76:	07da      	lsls	r2, r3, #31
 800fc78:	d424      	bmi.n	800fcc4 <__lo0bits+0x58>
 800fc7a:	0798      	lsls	r0, r3, #30
 800fc7c:	bf49      	itett	mi
 800fc7e:	085b      	lsrmi	r3, r3, #1
 800fc80:	089b      	lsrpl	r3, r3, #2
 800fc82:	2001      	movmi	r0, #1
 800fc84:	600b      	strmi	r3, [r1, #0]
 800fc86:	bf5c      	itt	pl
 800fc88:	600b      	strpl	r3, [r1, #0]
 800fc8a:	2002      	movpl	r0, #2
 800fc8c:	4770      	bx	lr
 800fc8e:	b298      	uxth	r0, r3
 800fc90:	b9b0      	cbnz	r0, 800fcc0 <__lo0bits+0x54>
 800fc92:	0c1b      	lsrs	r3, r3, #16
 800fc94:	2010      	movs	r0, #16
 800fc96:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fc9a:	bf04      	itt	eq
 800fc9c:	0a1b      	lsreq	r3, r3, #8
 800fc9e:	3008      	addeq	r0, #8
 800fca0:	071a      	lsls	r2, r3, #28
 800fca2:	bf04      	itt	eq
 800fca4:	091b      	lsreq	r3, r3, #4
 800fca6:	3004      	addeq	r0, #4
 800fca8:	079a      	lsls	r2, r3, #30
 800fcaa:	bf04      	itt	eq
 800fcac:	089b      	lsreq	r3, r3, #2
 800fcae:	3002      	addeq	r0, #2
 800fcb0:	07da      	lsls	r2, r3, #31
 800fcb2:	d403      	bmi.n	800fcbc <__lo0bits+0x50>
 800fcb4:	085b      	lsrs	r3, r3, #1
 800fcb6:	f100 0001 	add.w	r0, r0, #1
 800fcba:	d005      	beq.n	800fcc8 <__lo0bits+0x5c>
 800fcbc:	600b      	str	r3, [r1, #0]
 800fcbe:	4770      	bx	lr
 800fcc0:	4610      	mov	r0, r2
 800fcc2:	e7e8      	b.n	800fc96 <__lo0bits+0x2a>
 800fcc4:	2000      	movs	r0, #0
 800fcc6:	4770      	bx	lr
 800fcc8:	2020      	movs	r0, #32
 800fcca:	4770      	bx	lr

0800fccc <__i2b>:
 800fccc:	b510      	push	{r4, lr}
 800fcce:	460c      	mov	r4, r1
 800fcd0:	2101      	movs	r1, #1
 800fcd2:	f7ff feb5 	bl	800fa40 <_Balloc>
 800fcd6:	4602      	mov	r2, r0
 800fcd8:	b928      	cbnz	r0, 800fce6 <__i2b+0x1a>
 800fcda:	4b05      	ldr	r3, [pc, #20]	; (800fcf0 <__i2b+0x24>)
 800fcdc:	4805      	ldr	r0, [pc, #20]	; (800fcf4 <__i2b+0x28>)
 800fcde:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fce2:	f001 f9c5 	bl	8011070 <__assert_func>
 800fce6:	2301      	movs	r3, #1
 800fce8:	6144      	str	r4, [r0, #20]
 800fcea:	6103      	str	r3, [r0, #16]
 800fcec:	bd10      	pop	{r4, pc}
 800fcee:	bf00      	nop
 800fcf0:	08012664 	.word	0x08012664
 800fcf4:	080126f4 	.word	0x080126f4

0800fcf8 <__multiply>:
 800fcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcfc:	4614      	mov	r4, r2
 800fcfe:	690a      	ldr	r2, [r1, #16]
 800fd00:	6923      	ldr	r3, [r4, #16]
 800fd02:	429a      	cmp	r2, r3
 800fd04:	bfb8      	it	lt
 800fd06:	460b      	movlt	r3, r1
 800fd08:	460d      	mov	r5, r1
 800fd0a:	bfbc      	itt	lt
 800fd0c:	4625      	movlt	r5, r4
 800fd0e:	461c      	movlt	r4, r3
 800fd10:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800fd14:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800fd18:	68ab      	ldr	r3, [r5, #8]
 800fd1a:	6869      	ldr	r1, [r5, #4]
 800fd1c:	eb0a 0709 	add.w	r7, sl, r9
 800fd20:	42bb      	cmp	r3, r7
 800fd22:	b085      	sub	sp, #20
 800fd24:	bfb8      	it	lt
 800fd26:	3101      	addlt	r1, #1
 800fd28:	f7ff fe8a 	bl	800fa40 <_Balloc>
 800fd2c:	b930      	cbnz	r0, 800fd3c <__multiply+0x44>
 800fd2e:	4602      	mov	r2, r0
 800fd30:	4b42      	ldr	r3, [pc, #264]	; (800fe3c <__multiply+0x144>)
 800fd32:	4843      	ldr	r0, [pc, #268]	; (800fe40 <__multiply+0x148>)
 800fd34:	f240 115d 	movw	r1, #349	; 0x15d
 800fd38:	f001 f99a 	bl	8011070 <__assert_func>
 800fd3c:	f100 0614 	add.w	r6, r0, #20
 800fd40:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800fd44:	4633      	mov	r3, r6
 800fd46:	2200      	movs	r2, #0
 800fd48:	4543      	cmp	r3, r8
 800fd4a:	d31e      	bcc.n	800fd8a <__multiply+0x92>
 800fd4c:	f105 0c14 	add.w	ip, r5, #20
 800fd50:	f104 0314 	add.w	r3, r4, #20
 800fd54:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800fd58:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800fd5c:	9202      	str	r2, [sp, #8]
 800fd5e:	ebac 0205 	sub.w	r2, ip, r5
 800fd62:	3a15      	subs	r2, #21
 800fd64:	f022 0203 	bic.w	r2, r2, #3
 800fd68:	3204      	adds	r2, #4
 800fd6a:	f105 0115 	add.w	r1, r5, #21
 800fd6e:	458c      	cmp	ip, r1
 800fd70:	bf38      	it	cc
 800fd72:	2204      	movcc	r2, #4
 800fd74:	9201      	str	r2, [sp, #4]
 800fd76:	9a02      	ldr	r2, [sp, #8]
 800fd78:	9303      	str	r3, [sp, #12]
 800fd7a:	429a      	cmp	r2, r3
 800fd7c:	d808      	bhi.n	800fd90 <__multiply+0x98>
 800fd7e:	2f00      	cmp	r7, #0
 800fd80:	dc55      	bgt.n	800fe2e <__multiply+0x136>
 800fd82:	6107      	str	r7, [r0, #16]
 800fd84:	b005      	add	sp, #20
 800fd86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd8a:	f843 2b04 	str.w	r2, [r3], #4
 800fd8e:	e7db      	b.n	800fd48 <__multiply+0x50>
 800fd90:	f8b3 a000 	ldrh.w	sl, [r3]
 800fd94:	f1ba 0f00 	cmp.w	sl, #0
 800fd98:	d020      	beq.n	800fddc <__multiply+0xe4>
 800fd9a:	f105 0e14 	add.w	lr, r5, #20
 800fd9e:	46b1      	mov	r9, r6
 800fda0:	2200      	movs	r2, #0
 800fda2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800fda6:	f8d9 b000 	ldr.w	fp, [r9]
 800fdaa:	b2a1      	uxth	r1, r4
 800fdac:	fa1f fb8b 	uxth.w	fp, fp
 800fdb0:	fb0a b101 	mla	r1, sl, r1, fp
 800fdb4:	4411      	add	r1, r2
 800fdb6:	f8d9 2000 	ldr.w	r2, [r9]
 800fdba:	0c24      	lsrs	r4, r4, #16
 800fdbc:	0c12      	lsrs	r2, r2, #16
 800fdbe:	fb0a 2404 	mla	r4, sl, r4, r2
 800fdc2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800fdc6:	b289      	uxth	r1, r1
 800fdc8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800fdcc:	45f4      	cmp	ip, lr
 800fdce:	f849 1b04 	str.w	r1, [r9], #4
 800fdd2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800fdd6:	d8e4      	bhi.n	800fda2 <__multiply+0xaa>
 800fdd8:	9901      	ldr	r1, [sp, #4]
 800fdda:	5072      	str	r2, [r6, r1]
 800fddc:	9a03      	ldr	r2, [sp, #12]
 800fdde:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fde2:	3304      	adds	r3, #4
 800fde4:	f1b9 0f00 	cmp.w	r9, #0
 800fde8:	d01f      	beq.n	800fe2a <__multiply+0x132>
 800fdea:	6834      	ldr	r4, [r6, #0]
 800fdec:	f105 0114 	add.w	r1, r5, #20
 800fdf0:	46b6      	mov	lr, r6
 800fdf2:	f04f 0a00 	mov.w	sl, #0
 800fdf6:	880a      	ldrh	r2, [r1, #0]
 800fdf8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800fdfc:	fb09 b202 	mla	r2, r9, r2, fp
 800fe00:	4492      	add	sl, r2
 800fe02:	b2a4      	uxth	r4, r4
 800fe04:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800fe08:	f84e 4b04 	str.w	r4, [lr], #4
 800fe0c:	f851 4b04 	ldr.w	r4, [r1], #4
 800fe10:	f8be 2000 	ldrh.w	r2, [lr]
 800fe14:	0c24      	lsrs	r4, r4, #16
 800fe16:	fb09 2404 	mla	r4, r9, r4, r2
 800fe1a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800fe1e:	458c      	cmp	ip, r1
 800fe20:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800fe24:	d8e7      	bhi.n	800fdf6 <__multiply+0xfe>
 800fe26:	9a01      	ldr	r2, [sp, #4]
 800fe28:	50b4      	str	r4, [r6, r2]
 800fe2a:	3604      	adds	r6, #4
 800fe2c:	e7a3      	b.n	800fd76 <__multiply+0x7e>
 800fe2e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d1a5      	bne.n	800fd82 <__multiply+0x8a>
 800fe36:	3f01      	subs	r7, #1
 800fe38:	e7a1      	b.n	800fd7e <__multiply+0x86>
 800fe3a:	bf00      	nop
 800fe3c:	08012664 	.word	0x08012664
 800fe40:	080126f4 	.word	0x080126f4

0800fe44 <__pow5mult>:
 800fe44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe48:	4615      	mov	r5, r2
 800fe4a:	f012 0203 	ands.w	r2, r2, #3
 800fe4e:	4606      	mov	r6, r0
 800fe50:	460f      	mov	r7, r1
 800fe52:	d007      	beq.n	800fe64 <__pow5mult+0x20>
 800fe54:	4c25      	ldr	r4, [pc, #148]	; (800feec <__pow5mult+0xa8>)
 800fe56:	3a01      	subs	r2, #1
 800fe58:	2300      	movs	r3, #0
 800fe5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fe5e:	f7ff fe51 	bl	800fb04 <__multadd>
 800fe62:	4607      	mov	r7, r0
 800fe64:	10ad      	asrs	r5, r5, #2
 800fe66:	d03d      	beq.n	800fee4 <__pow5mult+0xa0>
 800fe68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fe6a:	b97c      	cbnz	r4, 800fe8c <__pow5mult+0x48>
 800fe6c:	2010      	movs	r0, #16
 800fe6e:	f7ff fdcd 	bl	800fa0c <malloc>
 800fe72:	4602      	mov	r2, r0
 800fe74:	6270      	str	r0, [r6, #36]	; 0x24
 800fe76:	b928      	cbnz	r0, 800fe84 <__pow5mult+0x40>
 800fe78:	4b1d      	ldr	r3, [pc, #116]	; (800fef0 <__pow5mult+0xac>)
 800fe7a:	481e      	ldr	r0, [pc, #120]	; (800fef4 <__pow5mult+0xb0>)
 800fe7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fe80:	f001 f8f6 	bl	8011070 <__assert_func>
 800fe84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fe88:	6004      	str	r4, [r0, #0]
 800fe8a:	60c4      	str	r4, [r0, #12]
 800fe8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fe90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fe94:	b94c      	cbnz	r4, 800feaa <__pow5mult+0x66>
 800fe96:	f240 2171 	movw	r1, #625	; 0x271
 800fe9a:	4630      	mov	r0, r6
 800fe9c:	f7ff ff16 	bl	800fccc <__i2b>
 800fea0:	2300      	movs	r3, #0
 800fea2:	f8c8 0008 	str.w	r0, [r8, #8]
 800fea6:	4604      	mov	r4, r0
 800fea8:	6003      	str	r3, [r0, #0]
 800feaa:	f04f 0900 	mov.w	r9, #0
 800feae:	07eb      	lsls	r3, r5, #31
 800feb0:	d50a      	bpl.n	800fec8 <__pow5mult+0x84>
 800feb2:	4639      	mov	r1, r7
 800feb4:	4622      	mov	r2, r4
 800feb6:	4630      	mov	r0, r6
 800feb8:	f7ff ff1e 	bl	800fcf8 <__multiply>
 800febc:	4639      	mov	r1, r7
 800febe:	4680      	mov	r8, r0
 800fec0:	4630      	mov	r0, r6
 800fec2:	f7ff fdfd 	bl	800fac0 <_Bfree>
 800fec6:	4647      	mov	r7, r8
 800fec8:	106d      	asrs	r5, r5, #1
 800feca:	d00b      	beq.n	800fee4 <__pow5mult+0xa0>
 800fecc:	6820      	ldr	r0, [r4, #0]
 800fece:	b938      	cbnz	r0, 800fee0 <__pow5mult+0x9c>
 800fed0:	4622      	mov	r2, r4
 800fed2:	4621      	mov	r1, r4
 800fed4:	4630      	mov	r0, r6
 800fed6:	f7ff ff0f 	bl	800fcf8 <__multiply>
 800feda:	6020      	str	r0, [r4, #0]
 800fedc:	f8c0 9000 	str.w	r9, [r0]
 800fee0:	4604      	mov	r4, r0
 800fee2:	e7e4      	b.n	800feae <__pow5mult+0x6a>
 800fee4:	4638      	mov	r0, r7
 800fee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800feea:	bf00      	nop
 800feec:	08012848 	.word	0x08012848
 800fef0:	080125ee 	.word	0x080125ee
 800fef4:	080126f4 	.word	0x080126f4

0800fef8 <__lshift>:
 800fef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fefc:	460c      	mov	r4, r1
 800fefe:	6849      	ldr	r1, [r1, #4]
 800ff00:	6923      	ldr	r3, [r4, #16]
 800ff02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ff06:	68a3      	ldr	r3, [r4, #8]
 800ff08:	4607      	mov	r7, r0
 800ff0a:	4691      	mov	r9, r2
 800ff0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ff10:	f108 0601 	add.w	r6, r8, #1
 800ff14:	42b3      	cmp	r3, r6
 800ff16:	db0b      	blt.n	800ff30 <__lshift+0x38>
 800ff18:	4638      	mov	r0, r7
 800ff1a:	f7ff fd91 	bl	800fa40 <_Balloc>
 800ff1e:	4605      	mov	r5, r0
 800ff20:	b948      	cbnz	r0, 800ff36 <__lshift+0x3e>
 800ff22:	4602      	mov	r2, r0
 800ff24:	4b28      	ldr	r3, [pc, #160]	; (800ffc8 <__lshift+0xd0>)
 800ff26:	4829      	ldr	r0, [pc, #164]	; (800ffcc <__lshift+0xd4>)
 800ff28:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ff2c:	f001 f8a0 	bl	8011070 <__assert_func>
 800ff30:	3101      	adds	r1, #1
 800ff32:	005b      	lsls	r3, r3, #1
 800ff34:	e7ee      	b.n	800ff14 <__lshift+0x1c>
 800ff36:	2300      	movs	r3, #0
 800ff38:	f100 0114 	add.w	r1, r0, #20
 800ff3c:	f100 0210 	add.w	r2, r0, #16
 800ff40:	4618      	mov	r0, r3
 800ff42:	4553      	cmp	r3, sl
 800ff44:	db33      	blt.n	800ffae <__lshift+0xb6>
 800ff46:	6920      	ldr	r0, [r4, #16]
 800ff48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ff4c:	f104 0314 	add.w	r3, r4, #20
 800ff50:	f019 091f 	ands.w	r9, r9, #31
 800ff54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ff58:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ff5c:	d02b      	beq.n	800ffb6 <__lshift+0xbe>
 800ff5e:	f1c9 0e20 	rsb	lr, r9, #32
 800ff62:	468a      	mov	sl, r1
 800ff64:	2200      	movs	r2, #0
 800ff66:	6818      	ldr	r0, [r3, #0]
 800ff68:	fa00 f009 	lsl.w	r0, r0, r9
 800ff6c:	4302      	orrs	r2, r0
 800ff6e:	f84a 2b04 	str.w	r2, [sl], #4
 800ff72:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff76:	459c      	cmp	ip, r3
 800ff78:	fa22 f20e 	lsr.w	r2, r2, lr
 800ff7c:	d8f3      	bhi.n	800ff66 <__lshift+0x6e>
 800ff7e:	ebac 0304 	sub.w	r3, ip, r4
 800ff82:	3b15      	subs	r3, #21
 800ff84:	f023 0303 	bic.w	r3, r3, #3
 800ff88:	3304      	adds	r3, #4
 800ff8a:	f104 0015 	add.w	r0, r4, #21
 800ff8e:	4584      	cmp	ip, r0
 800ff90:	bf38      	it	cc
 800ff92:	2304      	movcc	r3, #4
 800ff94:	50ca      	str	r2, [r1, r3]
 800ff96:	b10a      	cbz	r2, 800ff9c <__lshift+0xa4>
 800ff98:	f108 0602 	add.w	r6, r8, #2
 800ff9c:	3e01      	subs	r6, #1
 800ff9e:	4638      	mov	r0, r7
 800ffa0:	612e      	str	r6, [r5, #16]
 800ffa2:	4621      	mov	r1, r4
 800ffa4:	f7ff fd8c 	bl	800fac0 <_Bfree>
 800ffa8:	4628      	mov	r0, r5
 800ffaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffae:	f842 0f04 	str.w	r0, [r2, #4]!
 800ffb2:	3301      	adds	r3, #1
 800ffb4:	e7c5      	b.n	800ff42 <__lshift+0x4a>
 800ffb6:	3904      	subs	r1, #4
 800ffb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffbc:	f841 2f04 	str.w	r2, [r1, #4]!
 800ffc0:	459c      	cmp	ip, r3
 800ffc2:	d8f9      	bhi.n	800ffb8 <__lshift+0xc0>
 800ffc4:	e7ea      	b.n	800ff9c <__lshift+0xa4>
 800ffc6:	bf00      	nop
 800ffc8:	08012664 	.word	0x08012664
 800ffcc:	080126f4 	.word	0x080126f4

0800ffd0 <__mcmp>:
 800ffd0:	b530      	push	{r4, r5, lr}
 800ffd2:	6902      	ldr	r2, [r0, #16]
 800ffd4:	690c      	ldr	r4, [r1, #16]
 800ffd6:	1b12      	subs	r2, r2, r4
 800ffd8:	d10e      	bne.n	800fff8 <__mcmp+0x28>
 800ffda:	f100 0314 	add.w	r3, r0, #20
 800ffde:	3114      	adds	r1, #20
 800ffe0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ffe4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ffe8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ffec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fff0:	42a5      	cmp	r5, r4
 800fff2:	d003      	beq.n	800fffc <__mcmp+0x2c>
 800fff4:	d305      	bcc.n	8010002 <__mcmp+0x32>
 800fff6:	2201      	movs	r2, #1
 800fff8:	4610      	mov	r0, r2
 800fffa:	bd30      	pop	{r4, r5, pc}
 800fffc:	4283      	cmp	r3, r0
 800fffe:	d3f3      	bcc.n	800ffe8 <__mcmp+0x18>
 8010000:	e7fa      	b.n	800fff8 <__mcmp+0x28>
 8010002:	f04f 32ff 	mov.w	r2, #4294967295
 8010006:	e7f7      	b.n	800fff8 <__mcmp+0x28>

08010008 <__mdiff>:
 8010008:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801000c:	460c      	mov	r4, r1
 801000e:	4606      	mov	r6, r0
 8010010:	4611      	mov	r1, r2
 8010012:	4620      	mov	r0, r4
 8010014:	4617      	mov	r7, r2
 8010016:	f7ff ffdb 	bl	800ffd0 <__mcmp>
 801001a:	1e05      	subs	r5, r0, #0
 801001c:	d110      	bne.n	8010040 <__mdiff+0x38>
 801001e:	4629      	mov	r1, r5
 8010020:	4630      	mov	r0, r6
 8010022:	f7ff fd0d 	bl	800fa40 <_Balloc>
 8010026:	b930      	cbnz	r0, 8010036 <__mdiff+0x2e>
 8010028:	4b39      	ldr	r3, [pc, #228]	; (8010110 <__mdiff+0x108>)
 801002a:	4602      	mov	r2, r0
 801002c:	f240 2132 	movw	r1, #562	; 0x232
 8010030:	4838      	ldr	r0, [pc, #224]	; (8010114 <__mdiff+0x10c>)
 8010032:	f001 f81d 	bl	8011070 <__assert_func>
 8010036:	2301      	movs	r3, #1
 8010038:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801003c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010040:	bfa4      	itt	ge
 8010042:	463b      	movge	r3, r7
 8010044:	4627      	movge	r7, r4
 8010046:	4630      	mov	r0, r6
 8010048:	6879      	ldr	r1, [r7, #4]
 801004a:	bfa6      	itte	ge
 801004c:	461c      	movge	r4, r3
 801004e:	2500      	movge	r5, #0
 8010050:	2501      	movlt	r5, #1
 8010052:	f7ff fcf5 	bl	800fa40 <_Balloc>
 8010056:	b920      	cbnz	r0, 8010062 <__mdiff+0x5a>
 8010058:	4b2d      	ldr	r3, [pc, #180]	; (8010110 <__mdiff+0x108>)
 801005a:	4602      	mov	r2, r0
 801005c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010060:	e7e6      	b.n	8010030 <__mdiff+0x28>
 8010062:	693e      	ldr	r6, [r7, #16]
 8010064:	60c5      	str	r5, [r0, #12]
 8010066:	6925      	ldr	r5, [r4, #16]
 8010068:	f107 0114 	add.w	r1, r7, #20
 801006c:	f104 0914 	add.w	r9, r4, #20
 8010070:	f100 0e14 	add.w	lr, r0, #20
 8010074:	f107 0210 	add.w	r2, r7, #16
 8010078:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801007c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8010080:	46f2      	mov	sl, lr
 8010082:	2700      	movs	r7, #0
 8010084:	f859 3b04 	ldr.w	r3, [r9], #4
 8010088:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801008c:	fa1f f883 	uxth.w	r8, r3
 8010090:	fa17 f78b 	uxtah	r7, r7, fp
 8010094:	0c1b      	lsrs	r3, r3, #16
 8010096:	eba7 0808 	sub.w	r8, r7, r8
 801009a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801009e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80100a2:	fa1f f888 	uxth.w	r8, r8
 80100a6:	141f      	asrs	r7, r3, #16
 80100a8:	454d      	cmp	r5, r9
 80100aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80100ae:	f84a 3b04 	str.w	r3, [sl], #4
 80100b2:	d8e7      	bhi.n	8010084 <__mdiff+0x7c>
 80100b4:	1b2b      	subs	r3, r5, r4
 80100b6:	3b15      	subs	r3, #21
 80100b8:	f023 0303 	bic.w	r3, r3, #3
 80100bc:	3304      	adds	r3, #4
 80100be:	3415      	adds	r4, #21
 80100c0:	42a5      	cmp	r5, r4
 80100c2:	bf38      	it	cc
 80100c4:	2304      	movcc	r3, #4
 80100c6:	4419      	add	r1, r3
 80100c8:	4473      	add	r3, lr
 80100ca:	469e      	mov	lr, r3
 80100cc:	460d      	mov	r5, r1
 80100ce:	4565      	cmp	r5, ip
 80100d0:	d30e      	bcc.n	80100f0 <__mdiff+0xe8>
 80100d2:	f10c 0203 	add.w	r2, ip, #3
 80100d6:	1a52      	subs	r2, r2, r1
 80100d8:	f022 0203 	bic.w	r2, r2, #3
 80100dc:	3903      	subs	r1, #3
 80100de:	458c      	cmp	ip, r1
 80100e0:	bf38      	it	cc
 80100e2:	2200      	movcc	r2, #0
 80100e4:	441a      	add	r2, r3
 80100e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80100ea:	b17b      	cbz	r3, 801010c <__mdiff+0x104>
 80100ec:	6106      	str	r6, [r0, #16]
 80100ee:	e7a5      	b.n	801003c <__mdiff+0x34>
 80100f0:	f855 8b04 	ldr.w	r8, [r5], #4
 80100f4:	fa17 f488 	uxtah	r4, r7, r8
 80100f8:	1422      	asrs	r2, r4, #16
 80100fa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80100fe:	b2a4      	uxth	r4, r4
 8010100:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010104:	f84e 4b04 	str.w	r4, [lr], #4
 8010108:	1417      	asrs	r7, r2, #16
 801010a:	e7e0      	b.n	80100ce <__mdiff+0xc6>
 801010c:	3e01      	subs	r6, #1
 801010e:	e7ea      	b.n	80100e6 <__mdiff+0xde>
 8010110:	08012664 	.word	0x08012664
 8010114:	080126f4 	.word	0x080126f4

08010118 <__ulp>:
 8010118:	b082      	sub	sp, #8
 801011a:	ed8d 0b00 	vstr	d0, [sp]
 801011e:	9b01      	ldr	r3, [sp, #4]
 8010120:	4912      	ldr	r1, [pc, #72]	; (801016c <__ulp+0x54>)
 8010122:	4019      	ands	r1, r3
 8010124:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010128:	2900      	cmp	r1, #0
 801012a:	dd05      	ble.n	8010138 <__ulp+0x20>
 801012c:	2200      	movs	r2, #0
 801012e:	460b      	mov	r3, r1
 8010130:	ec43 2b10 	vmov	d0, r2, r3
 8010134:	b002      	add	sp, #8
 8010136:	4770      	bx	lr
 8010138:	4249      	negs	r1, r1
 801013a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801013e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010142:	f04f 0200 	mov.w	r2, #0
 8010146:	f04f 0300 	mov.w	r3, #0
 801014a:	da04      	bge.n	8010156 <__ulp+0x3e>
 801014c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010150:	fa41 f300 	asr.w	r3, r1, r0
 8010154:	e7ec      	b.n	8010130 <__ulp+0x18>
 8010156:	f1a0 0114 	sub.w	r1, r0, #20
 801015a:	291e      	cmp	r1, #30
 801015c:	bfda      	itte	le
 801015e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010162:	fa20 f101 	lsrle.w	r1, r0, r1
 8010166:	2101      	movgt	r1, #1
 8010168:	460a      	mov	r2, r1
 801016a:	e7e1      	b.n	8010130 <__ulp+0x18>
 801016c:	7ff00000 	.word	0x7ff00000

08010170 <__b2d>:
 8010170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010172:	6905      	ldr	r5, [r0, #16]
 8010174:	f100 0714 	add.w	r7, r0, #20
 8010178:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801017c:	1f2e      	subs	r6, r5, #4
 801017e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010182:	4620      	mov	r0, r4
 8010184:	f7ff fd52 	bl	800fc2c <__hi0bits>
 8010188:	f1c0 0320 	rsb	r3, r0, #32
 801018c:	280a      	cmp	r0, #10
 801018e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801020c <__b2d+0x9c>
 8010192:	600b      	str	r3, [r1, #0]
 8010194:	dc14      	bgt.n	80101c0 <__b2d+0x50>
 8010196:	f1c0 0e0b 	rsb	lr, r0, #11
 801019a:	fa24 f10e 	lsr.w	r1, r4, lr
 801019e:	42b7      	cmp	r7, r6
 80101a0:	ea41 030c 	orr.w	r3, r1, ip
 80101a4:	bf34      	ite	cc
 80101a6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80101aa:	2100      	movcs	r1, #0
 80101ac:	3015      	adds	r0, #21
 80101ae:	fa04 f000 	lsl.w	r0, r4, r0
 80101b2:	fa21 f10e 	lsr.w	r1, r1, lr
 80101b6:	ea40 0201 	orr.w	r2, r0, r1
 80101ba:	ec43 2b10 	vmov	d0, r2, r3
 80101be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101c0:	42b7      	cmp	r7, r6
 80101c2:	bf3a      	itte	cc
 80101c4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80101c8:	f1a5 0608 	subcc.w	r6, r5, #8
 80101cc:	2100      	movcs	r1, #0
 80101ce:	380b      	subs	r0, #11
 80101d0:	d017      	beq.n	8010202 <__b2d+0x92>
 80101d2:	f1c0 0c20 	rsb	ip, r0, #32
 80101d6:	fa04 f500 	lsl.w	r5, r4, r0
 80101da:	42be      	cmp	r6, r7
 80101dc:	fa21 f40c 	lsr.w	r4, r1, ip
 80101e0:	ea45 0504 	orr.w	r5, r5, r4
 80101e4:	bf8c      	ite	hi
 80101e6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80101ea:	2400      	movls	r4, #0
 80101ec:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80101f0:	fa01 f000 	lsl.w	r0, r1, r0
 80101f4:	fa24 f40c 	lsr.w	r4, r4, ip
 80101f8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80101fc:	ea40 0204 	orr.w	r2, r0, r4
 8010200:	e7db      	b.n	80101ba <__b2d+0x4a>
 8010202:	ea44 030c 	orr.w	r3, r4, ip
 8010206:	460a      	mov	r2, r1
 8010208:	e7d7      	b.n	80101ba <__b2d+0x4a>
 801020a:	bf00      	nop
 801020c:	3ff00000 	.word	0x3ff00000

08010210 <__d2b>:
 8010210:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010214:	4689      	mov	r9, r1
 8010216:	2101      	movs	r1, #1
 8010218:	ec57 6b10 	vmov	r6, r7, d0
 801021c:	4690      	mov	r8, r2
 801021e:	f7ff fc0f 	bl	800fa40 <_Balloc>
 8010222:	4604      	mov	r4, r0
 8010224:	b930      	cbnz	r0, 8010234 <__d2b+0x24>
 8010226:	4602      	mov	r2, r0
 8010228:	4b25      	ldr	r3, [pc, #148]	; (80102c0 <__d2b+0xb0>)
 801022a:	4826      	ldr	r0, [pc, #152]	; (80102c4 <__d2b+0xb4>)
 801022c:	f240 310a 	movw	r1, #778	; 0x30a
 8010230:	f000 ff1e 	bl	8011070 <__assert_func>
 8010234:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010238:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801023c:	bb35      	cbnz	r5, 801028c <__d2b+0x7c>
 801023e:	2e00      	cmp	r6, #0
 8010240:	9301      	str	r3, [sp, #4]
 8010242:	d028      	beq.n	8010296 <__d2b+0x86>
 8010244:	4668      	mov	r0, sp
 8010246:	9600      	str	r6, [sp, #0]
 8010248:	f7ff fd10 	bl	800fc6c <__lo0bits>
 801024c:	9900      	ldr	r1, [sp, #0]
 801024e:	b300      	cbz	r0, 8010292 <__d2b+0x82>
 8010250:	9a01      	ldr	r2, [sp, #4]
 8010252:	f1c0 0320 	rsb	r3, r0, #32
 8010256:	fa02 f303 	lsl.w	r3, r2, r3
 801025a:	430b      	orrs	r3, r1
 801025c:	40c2      	lsrs	r2, r0
 801025e:	6163      	str	r3, [r4, #20]
 8010260:	9201      	str	r2, [sp, #4]
 8010262:	9b01      	ldr	r3, [sp, #4]
 8010264:	61a3      	str	r3, [r4, #24]
 8010266:	2b00      	cmp	r3, #0
 8010268:	bf14      	ite	ne
 801026a:	2202      	movne	r2, #2
 801026c:	2201      	moveq	r2, #1
 801026e:	6122      	str	r2, [r4, #16]
 8010270:	b1d5      	cbz	r5, 80102a8 <__d2b+0x98>
 8010272:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010276:	4405      	add	r5, r0
 8010278:	f8c9 5000 	str.w	r5, [r9]
 801027c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010280:	f8c8 0000 	str.w	r0, [r8]
 8010284:	4620      	mov	r0, r4
 8010286:	b003      	add	sp, #12
 8010288:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801028c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010290:	e7d5      	b.n	801023e <__d2b+0x2e>
 8010292:	6161      	str	r1, [r4, #20]
 8010294:	e7e5      	b.n	8010262 <__d2b+0x52>
 8010296:	a801      	add	r0, sp, #4
 8010298:	f7ff fce8 	bl	800fc6c <__lo0bits>
 801029c:	9b01      	ldr	r3, [sp, #4]
 801029e:	6163      	str	r3, [r4, #20]
 80102a0:	2201      	movs	r2, #1
 80102a2:	6122      	str	r2, [r4, #16]
 80102a4:	3020      	adds	r0, #32
 80102a6:	e7e3      	b.n	8010270 <__d2b+0x60>
 80102a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80102ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80102b0:	f8c9 0000 	str.w	r0, [r9]
 80102b4:	6918      	ldr	r0, [r3, #16]
 80102b6:	f7ff fcb9 	bl	800fc2c <__hi0bits>
 80102ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80102be:	e7df      	b.n	8010280 <__d2b+0x70>
 80102c0:	08012664 	.word	0x08012664
 80102c4:	080126f4 	.word	0x080126f4

080102c8 <__ratio>:
 80102c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102cc:	4688      	mov	r8, r1
 80102ce:	4669      	mov	r1, sp
 80102d0:	4681      	mov	r9, r0
 80102d2:	f7ff ff4d 	bl	8010170 <__b2d>
 80102d6:	a901      	add	r1, sp, #4
 80102d8:	4640      	mov	r0, r8
 80102da:	ec55 4b10 	vmov	r4, r5, d0
 80102de:	f7ff ff47 	bl	8010170 <__b2d>
 80102e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80102e6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80102ea:	eba3 0c02 	sub.w	ip, r3, r2
 80102ee:	e9dd 3200 	ldrd	r3, r2, [sp]
 80102f2:	1a9b      	subs	r3, r3, r2
 80102f4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80102f8:	ec51 0b10 	vmov	r0, r1, d0
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	bfd6      	itet	le
 8010300:	460a      	movle	r2, r1
 8010302:	462a      	movgt	r2, r5
 8010304:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010308:	468b      	mov	fp, r1
 801030a:	462f      	mov	r7, r5
 801030c:	bfd4      	ite	le
 801030e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010312:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010316:	4620      	mov	r0, r4
 8010318:	ee10 2a10 	vmov	r2, s0
 801031c:	465b      	mov	r3, fp
 801031e:	4639      	mov	r1, r7
 8010320:	f7f0 fa9c 	bl	800085c <__aeabi_ddiv>
 8010324:	ec41 0b10 	vmov	d0, r0, r1
 8010328:	b003      	add	sp, #12
 801032a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801032e <__copybits>:
 801032e:	3901      	subs	r1, #1
 8010330:	b570      	push	{r4, r5, r6, lr}
 8010332:	1149      	asrs	r1, r1, #5
 8010334:	6914      	ldr	r4, [r2, #16]
 8010336:	3101      	adds	r1, #1
 8010338:	f102 0314 	add.w	r3, r2, #20
 801033c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010340:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010344:	1f05      	subs	r5, r0, #4
 8010346:	42a3      	cmp	r3, r4
 8010348:	d30c      	bcc.n	8010364 <__copybits+0x36>
 801034a:	1aa3      	subs	r3, r4, r2
 801034c:	3b11      	subs	r3, #17
 801034e:	f023 0303 	bic.w	r3, r3, #3
 8010352:	3211      	adds	r2, #17
 8010354:	42a2      	cmp	r2, r4
 8010356:	bf88      	it	hi
 8010358:	2300      	movhi	r3, #0
 801035a:	4418      	add	r0, r3
 801035c:	2300      	movs	r3, #0
 801035e:	4288      	cmp	r0, r1
 8010360:	d305      	bcc.n	801036e <__copybits+0x40>
 8010362:	bd70      	pop	{r4, r5, r6, pc}
 8010364:	f853 6b04 	ldr.w	r6, [r3], #4
 8010368:	f845 6f04 	str.w	r6, [r5, #4]!
 801036c:	e7eb      	b.n	8010346 <__copybits+0x18>
 801036e:	f840 3b04 	str.w	r3, [r0], #4
 8010372:	e7f4      	b.n	801035e <__copybits+0x30>

08010374 <__any_on>:
 8010374:	f100 0214 	add.w	r2, r0, #20
 8010378:	6900      	ldr	r0, [r0, #16]
 801037a:	114b      	asrs	r3, r1, #5
 801037c:	4298      	cmp	r0, r3
 801037e:	b510      	push	{r4, lr}
 8010380:	db11      	blt.n	80103a6 <__any_on+0x32>
 8010382:	dd0a      	ble.n	801039a <__any_on+0x26>
 8010384:	f011 011f 	ands.w	r1, r1, #31
 8010388:	d007      	beq.n	801039a <__any_on+0x26>
 801038a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801038e:	fa24 f001 	lsr.w	r0, r4, r1
 8010392:	fa00 f101 	lsl.w	r1, r0, r1
 8010396:	428c      	cmp	r4, r1
 8010398:	d10b      	bne.n	80103b2 <__any_on+0x3e>
 801039a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801039e:	4293      	cmp	r3, r2
 80103a0:	d803      	bhi.n	80103aa <__any_on+0x36>
 80103a2:	2000      	movs	r0, #0
 80103a4:	bd10      	pop	{r4, pc}
 80103a6:	4603      	mov	r3, r0
 80103a8:	e7f7      	b.n	801039a <__any_on+0x26>
 80103aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80103ae:	2900      	cmp	r1, #0
 80103b0:	d0f5      	beq.n	801039e <__any_on+0x2a>
 80103b2:	2001      	movs	r0, #1
 80103b4:	e7f6      	b.n	80103a4 <__any_on+0x30>

080103b6 <_calloc_r>:
 80103b6:	b513      	push	{r0, r1, r4, lr}
 80103b8:	434a      	muls	r2, r1
 80103ba:	4611      	mov	r1, r2
 80103bc:	9201      	str	r2, [sp, #4]
 80103be:	f000 f859 	bl	8010474 <_malloc_r>
 80103c2:	4604      	mov	r4, r0
 80103c4:	b118      	cbz	r0, 80103ce <_calloc_r+0x18>
 80103c6:	9a01      	ldr	r2, [sp, #4]
 80103c8:	2100      	movs	r1, #0
 80103ca:	f7fc fb21 	bl	800ca10 <memset>
 80103ce:	4620      	mov	r0, r4
 80103d0:	b002      	add	sp, #8
 80103d2:	bd10      	pop	{r4, pc}

080103d4 <_free_r>:
 80103d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80103d6:	2900      	cmp	r1, #0
 80103d8:	d048      	beq.n	801046c <_free_r+0x98>
 80103da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103de:	9001      	str	r0, [sp, #4]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	f1a1 0404 	sub.w	r4, r1, #4
 80103e6:	bfb8      	it	lt
 80103e8:	18e4      	addlt	r4, r4, r3
 80103ea:	f001 f845 	bl	8011478 <__malloc_lock>
 80103ee:	4a20      	ldr	r2, [pc, #128]	; (8010470 <_free_r+0x9c>)
 80103f0:	9801      	ldr	r0, [sp, #4]
 80103f2:	6813      	ldr	r3, [r2, #0]
 80103f4:	4615      	mov	r5, r2
 80103f6:	b933      	cbnz	r3, 8010406 <_free_r+0x32>
 80103f8:	6063      	str	r3, [r4, #4]
 80103fa:	6014      	str	r4, [r2, #0]
 80103fc:	b003      	add	sp, #12
 80103fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010402:	f001 b83f 	b.w	8011484 <__malloc_unlock>
 8010406:	42a3      	cmp	r3, r4
 8010408:	d90b      	bls.n	8010422 <_free_r+0x4e>
 801040a:	6821      	ldr	r1, [r4, #0]
 801040c:	1862      	adds	r2, r4, r1
 801040e:	4293      	cmp	r3, r2
 8010410:	bf04      	itt	eq
 8010412:	681a      	ldreq	r2, [r3, #0]
 8010414:	685b      	ldreq	r3, [r3, #4]
 8010416:	6063      	str	r3, [r4, #4]
 8010418:	bf04      	itt	eq
 801041a:	1852      	addeq	r2, r2, r1
 801041c:	6022      	streq	r2, [r4, #0]
 801041e:	602c      	str	r4, [r5, #0]
 8010420:	e7ec      	b.n	80103fc <_free_r+0x28>
 8010422:	461a      	mov	r2, r3
 8010424:	685b      	ldr	r3, [r3, #4]
 8010426:	b10b      	cbz	r3, 801042c <_free_r+0x58>
 8010428:	42a3      	cmp	r3, r4
 801042a:	d9fa      	bls.n	8010422 <_free_r+0x4e>
 801042c:	6811      	ldr	r1, [r2, #0]
 801042e:	1855      	adds	r5, r2, r1
 8010430:	42a5      	cmp	r5, r4
 8010432:	d10b      	bne.n	801044c <_free_r+0x78>
 8010434:	6824      	ldr	r4, [r4, #0]
 8010436:	4421      	add	r1, r4
 8010438:	1854      	adds	r4, r2, r1
 801043a:	42a3      	cmp	r3, r4
 801043c:	6011      	str	r1, [r2, #0]
 801043e:	d1dd      	bne.n	80103fc <_free_r+0x28>
 8010440:	681c      	ldr	r4, [r3, #0]
 8010442:	685b      	ldr	r3, [r3, #4]
 8010444:	6053      	str	r3, [r2, #4]
 8010446:	4421      	add	r1, r4
 8010448:	6011      	str	r1, [r2, #0]
 801044a:	e7d7      	b.n	80103fc <_free_r+0x28>
 801044c:	d902      	bls.n	8010454 <_free_r+0x80>
 801044e:	230c      	movs	r3, #12
 8010450:	6003      	str	r3, [r0, #0]
 8010452:	e7d3      	b.n	80103fc <_free_r+0x28>
 8010454:	6825      	ldr	r5, [r4, #0]
 8010456:	1961      	adds	r1, r4, r5
 8010458:	428b      	cmp	r3, r1
 801045a:	bf04      	itt	eq
 801045c:	6819      	ldreq	r1, [r3, #0]
 801045e:	685b      	ldreq	r3, [r3, #4]
 8010460:	6063      	str	r3, [r4, #4]
 8010462:	bf04      	itt	eq
 8010464:	1949      	addeq	r1, r1, r5
 8010466:	6021      	streq	r1, [r4, #0]
 8010468:	6054      	str	r4, [r2, #4]
 801046a:	e7c7      	b.n	80103fc <_free_r+0x28>
 801046c:	b003      	add	sp, #12
 801046e:	bd30      	pop	{r4, r5, pc}
 8010470:	20005218 	.word	0x20005218

08010474 <_malloc_r>:
 8010474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010476:	1ccd      	adds	r5, r1, #3
 8010478:	f025 0503 	bic.w	r5, r5, #3
 801047c:	3508      	adds	r5, #8
 801047e:	2d0c      	cmp	r5, #12
 8010480:	bf38      	it	cc
 8010482:	250c      	movcc	r5, #12
 8010484:	2d00      	cmp	r5, #0
 8010486:	4606      	mov	r6, r0
 8010488:	db01      	blt.n	801048e <_malloc_r+0x1a>
 801048a:	42a9      	cmp	r1, r5
 801048c:	d903      	bls.n	8010496 <_malloc_r+0x22>
 801048e:	230c      	movs	r3, #12
 8010490:	6033      	str	r3, [r6, #0]
 8010492:	2000      	movs	r0, #0
 8010494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010496:	f000 ffef 	bl	8011478 <__malloc_lock>
 801049a:	4921      	ldr	r1, [pc, #132]	; (8010520 <_malloc_r+0xac>)
 801049c:	680a      	ldr	r2, [r1, #0]
 801049e:	4614      	mov	r4, r2
 80104a0:	b99c      	cbnz	r4, 80104ca <_malloc_r+0x56>
 80104a2:	4f20      	ldr	r7, [pc, #128]	; (8010524 <_malloc_r+0xb0>)
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	b923      	cbnz	r3, 80104b2 <_malloc_r+0x3e>
 80104a8:	4621      	mov	r1, r4
 80104aa:	4630      	mov	r0, r6
 80104ac:	f000 fcd0 	bl	8010e50 <_sbrk_r>
 80104b0:	6038      	str	r0, [r7, #0]
 80104b2:	4629      	mov	r1, r5
 80104b4:	4630      	mov	r0, r6
 80104b6:	f000 fccb 	bl	8010e50 <_sbrk_r>
 80104ba:	1c43      	adds	r3, r0, #1
 80104bc:	d123      	bne.n	8010506 <_malloc_r+0x92>
 80104be:	230c      	movs	r3, #12
 80104c0:	6033      	str	r3, [r6, #0]
 80104c2:	4630      	mov	r0, r6
 80104c4:	f000 ffde 	bl	8011484 <__malloc_unlock>
 80104c8:	e7e3      	b.n	8010492 <_malloc_r+0x1e>
 80104ca:	6823      	ldr	r3, [r4, #0]
 80104cc:	1b5b      	subs	r3, r3, r5
 80104ce:	d417      	bmi.n	8010500 <_malloc_r+0x8c>
 80104d0:	2b0b      	cmp	r3, #11
 80104d2:	d903      	bls.n	80104dc <_malloc_r+0x68>
 80104d4:	6023      	str	r3, [r4, #0]
 80104d6:	441c      	add	r4, r3
 80104d8:	6025      	str	r5, [r4, #0]
 80104da:	e004      	b.n	80104e6 <_malloc_r+0x72>
 80104dc:	6863      	ldr	r3, [r4, #4]
 80104de:	42a2      	cmp	r2, r4
 80104e0:	bf0c      	ite	eq
 80104e2:	600b      	streq	r3, [r1, #0]
 80104e4:	6053      	strne	r3, [r2, #4]
 80104e6:	4630      	mov	r0, r6
 80104e8:	f000 ffcc 	bl	8011484 <__malloc_unlock>
 80104ec:	f104 000b 	add.w	r0, r4, #11
 80104f0:	1d23      	adds	r3, r4, #4
 80104f2:	f020 0007 	bic.w	r0, r0, #7
 80104f6:	1ac2      	subs	r2, r0, r3
 80104f8:	d0cc      	beq.n	8010494 <_malloc_r+0x20>
 80104fa:	1a1b      	subs	r3, r3, r0
 80104fc:	50a3      	str	r3, [r4, r2]
 80104fe:	e7c9      	b.n	8010494 <_malloc_r+0x20>
 8010500:	4622      	mov	r2, r4
 8010502:	6864      	ldr	r4, [r4, #4]
 8010504:	e7cc      	b.n	80104a0 <_malloc_r+0x2c>
 8010506:	1cc4      	adds	r4, r0, #3
 8010508:	f024 0403 	bic.w	r4, r4, #3
 801050c:	42a0      	cmp	r0, r4
 801050e:	d0e3      	beq.n	80104d8 <_malloc_r+0x64>
 8010510:	1a21      	subs	r1, r4, r0
 8010512:	4630      	mov	r0, r6
 8010514:	f000 fc9c 	bl	8010e50 <_sbrk_r>
 8010518:	3001      	adds	r0, #1
 801051a:	d1dd      	bne.n	80104d8 <_malloc_r+0x64>
 801051c:	e7cf      	b.n	80104be <_malloc_r+0x4a>
 801051e:	bf00      	nop
 8010520:	20005218 	.word	0x20005218
 8010524:	2000521c 	.word	0x2000521c

08010528 <__ssputs_r>:
 8010528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801052c:	688e      	ldr	r6, [r1, #8]
 801052e:	429e      	cmp	r6, r3
 8010530:	4682      	mov	sl, r0
 8010532:	460c      	mov	r4, r1
 8010534:	4690      	mov	r8, r2
 8010536:	461f      	mov	r7, r3
 8010538:	d838      	bhi.n	80105ac <__ssputs_r+0x84>
 801053a:	898a      	ldrh	r2, [r1, #12]
 801053c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010540:	d032      	beq.n	80105a8 <__ssputs_r+0x80>
 8010542:	6825      	ldr	r5, [r4, #0]
 8010544:	6909      	ldr	r1, [r1, #16]
 8010546:	eba5 0901 	sub.w	r9, r5, r1
 801054a:	6965      	ldr	r5, [r4, #20]
 801054c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010550:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010554:	3301      	adds	r3, #1
 8010556:	444b      	add	r3, r9
 8010558:	106d      	asrs	r5, r5, #1
 801055a:	429d      	cmp	r5, r3
 801055c:	bf38      	it	cc
 801055e:	461d      	movcc	r5, r3
 8010560:	0553      	lsls	r3, r2, #21
 8010562:	d531      	bpl.n	80105c8 <__ssputs_r+0xa0>
 8010564:	4629      	mov	r1, r5
 8010566:	f7ff ff85 	bl	8010474 <_malloc_r>
 801056a:	4606      	mov	r6, r0
 801056c:	b950      	cbnz	r0, 8010584 <__ssputs_r+0x5c>
 801056e:	230c      	movs	r3, #12
 8010570:	f8ca 3000 	str.w	r3, [sl]
 8010574:	89a3      	ldrh	r3, [r4, #12]
 8010576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801057a:	81a3      	strh	r3, [r4, #12]
 801057c:	f04f 30ff 	mov.w	r0, #4294967295
 8010580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010584:	6921      	ldr	r1, [r4, #16]
 8010586:	464a      	mov	r2, r9
 8010588:	f7fc fa34 	bl	800c9f4 <memcpy>
 801058c:	89a3      	ldrh	r3, [r4, #12]
 801058e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010596:	81a3      	strh	r3, [r4, #12]
 8010598:	6126      	str	r6, [r4, #16]
 801059a:	6165      	str	r5, [r4, #20]
 801059c:	444e      	add	r6, r9
 801059e:	eba5 0509 	sub.w	r5, r5, r9
 80105a2:	6026      	str	r6, [r4, #0]
 80105a4:	60a5      	str	r5, [r4, #8]
 80105a6:	463e      	mov	r6, r7
 80105a8:	42be      	cmp	r6, r7
 80105aa:	d900      	bls.n	80105ae <__ssputs_r+0x86>
 80105ac:	463e      	mov	r6, r7
 80105ae:	4632      	mov	r2, r6
 80105b0:	6820      	ldr	r0, [r4, #0]
 80105b2:	4641      	mov	r1, r8
 80105b4:	f000 ff46 	bl	8011444 <memmove>
 80105b8:	68a3      	ldr	r3, [r4, #8]
 80105ba:	6822      	ldr	r2, [r4, #0]
 80105bc:	1b9b      	subs	r3, r3, r6
 80105be:	4432      	add	r2, r6
 80105c0:	60a3      	str	r3, [r4, #8]
 80105c2:	6022      	str	r2, [r4, #0]
 80105c4:	2000      	movs	r0, #0
 80105c6:	e7db      	b.n	8010580 <__ssputs_r+0x58>
 80105c8:	462a      	mov	r2, r5
 80105ca:	f000 ff61 	bl	8011490 <_realloc_r>
 80105ce:	4606      	mov	r6, r0
 80105d0:	2800      	cmp	r0, #0
 80105d2:	d1e1      	bne.n	8010598 <__ssputs_r+0x70>
 80105d4:	6921      	ldr	r1, [r4, #16]
 80105d6:	4650      	mov	r0, sl
 80105d8:	f7ff fefc 	bl	80103d4 <_free_r>
 80105dc:	e7c7      	b.n	801056e <__ssputs_r+0x46>
	...

080105e0 <_svfiprintf_r>:
 80105e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105e4:	4698      	mov	r8, r3
 80105e6:	898b      	ldrh	r3, [r1, #12]
 80105e8:	061b      	lsls	r3, r3, #24
 80105ea:	b09d      	sub	sp, #116	; 0x74
 80105ec:	4607      	mov	r7, r0
 80105ee:	460d      	mov	r5, r1
 80105f0:	4614      	mov	r4, r2
 80105f2:	d50e      	bpl.n	8010612 <_svfiprintf_r+0x32>
 80105f4:	690b      	ldr	r3, [r1, #16]
 80105f6:	b963      	cbnz	r3, 8010612 <_svfiprintf_r+0x32>
 80105f8:	2140      	movs	r1, #64	; 0x40
 80105fa:	f7ff ff3b 	bl	8010474 <_malloc_r>
 80105fe:	6028      	str	r0, [r5, #0]
 8010600:	6128      	str	r0, [r5, #16]
 8010602:	b920      	cbnz	r0, 801060e <_svfiprintf_r+0x2e>
 8010604:	230c      	movs	r3, #12
 8010606:	603b      	str	r3, [r7, #0]
 8010608:	f04f 30ff 	mov.w	r0, #4294967295
 801060c:	e0d1      	b.n	80107b2 <_svfiprintf_r+0x1d2>
 801060e:	2340      	movs	r3, #64	; 0x40
 8010610:	616b      	str	r3, [r5, #20]
 8010612:	2300      	movs	r3, #0
 8010614:	9309      	str	r3, [sp, #36]	; 0x24
 8010616:	2320      	movs	r3, #32
 8010618:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801061c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010620:	2330      	movs	r3, #48	; 0x30
 8010622:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80107cc <_svfiprintf_r+0x1ec>
 8010626:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801062a:	f04f 0901 	mov.w	r9, #1
 801062e:	4623      	mov	r3, r4
 8010630:	469a      	mov	sl, r3
 8010632:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010636:	b10a      	cbz	r2, 801063c <_svfiprintf_r+0x5c>
 8010638:	2a25      	cmp	r2, #37	; 0x25
 801063a:	d1f9      	bne.n	8010630 <_svfiprintf_r+0x50>
 801063c:	ebba 0b04 	subs.w	fp, sl, r4
 8010640:	d00b      	beq.n	801065a <_svfiprintf_r+0x7a>
 8010642:	465b      	mov	r3, fp
 8010644:	4622      	mov	r2, r4
 8010646:	4629      	mov	r1, r5
 8010648:	4638      	mov	r0, r7
 801064a:	f7ff ff6d 	bl	8010528 <__ssputs_r>
 801064e:	3001      	adds	r0, #1
 8010650:	f000 80aa 	beq.w	80107a8 <_svfiprintf_r+0x1c8>
 8010654:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010656:	445a      	add	r2, fp
 8010658:	9209      	str	r2, [sp, #36]	; 0x24
 801065a:	f89a 3000 	ldrb.w	r3, [sl]
 801065e:	2b00      	cmp	r3, #0
 8010660:	f000 80a2 	beq.w	80107a8 <_svfiprintf_r+0x1c8>
 8010664:	2300      	movs	r3, #0
 8010666:	f04f 32ff 	mov.w	r2, #4294967295
 801066a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801066e:	f10a 0a01 	add.w	sl, sl, #1
 8010672:	9304      	str	r3, [sp, #16]
 8010674:	9307      	str	r3, [sp, #28]
 8010676:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801067a:	931a      	str	r3, [sp, #104]	; 0x68
 801067c:	4654      	mov	r4, sl
 801067e:	2205      	movs	r2, #5
 8010680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010684:	4851      	ldr	r0, [pc, #324]	; (80107cc <_svfiprintf_r+0x1ec>)
 8010686:	f7ef fdb3 	bl	80001f0 <memchr>
 801068a:	9a04      	ldr	r2, [sp, #16]
 801068c:	b9d8      	cbnz	r0, 80106c6 <_svfiprintf_r+0xe6>
 801068e:	06d0      	lsls	r0, r2, #27
 8010690:	bf44      	itt	mi
 8010692:	2320      	movmi	r3, #32
 8010694:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010698:	0711      	lsls	r1, r2, #28
 801069a:	bf44      	itt	mi
 801069c:	232b      	movmi	r3, #43	; 0x2b
 801069e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80106a2:	f89a 3000 	ldrb.w	r3, [sl]
 80106a6:	2b2a      	cmp	r3, #42	; 0x2a
 80106a8:	d015      	beq.n	80106d6 <_svfiprintf_r+0xf6>
 80106aa:	9a07      	ldr	r2, [sp, #28]
 80106ac:	4654      	mov	r4, sl
 80106ae:	2000      	movs	r0, #0
 80106b0:	f04f 0c0a 	mov.w	ip, #10
 80106b4:	4621      	mov	r1, r4
 80106b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80106ba:	3b30      	subs	r3, #48	; 0x30
 80106bc:	2b09      	cmp	r3, #9
 80106be:	d94e      	bls.n	801075e <_svfiprintf_r+0x17e>
 80106c0:	b1b0      	cbz	r0, 80106f0 <_svfiprintf_r+0x110>
 80106c2:	9207      	str	r2, [sp, #28]
 80106c4:	e014      	b.n	80106f0 <_svfiprintf_r+0x110>
 80106c6:	eba0 0308 	sub.w	r3, r0, r8
 80106ca:	fa09 f303 	lsl.w	r3, r9, r3
 80106ce:	4313      	orrs	r3, r2
 80106d0:	9304      	str	r3, [sp, #16]
 80106d2:	46a2      	mov	sl, r4
 80106d4:	e7d2      	b.n	801067c <_svfiprintf_r+0x9c>
 80106d6:	9b03      	ldr	r3, [sp, #12]
 80106d8:	1d19      	adds	r1, r3, #4
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	9103      	str	r1, [sp, #12]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	bfbb      	ittet	lt
 80106e2:	425b      	neglt	r3, r3
 80106e4:	f042 0202 	orrlt.w	r2, r2, #2
 80106e8:	9307      	strge	r3, [sp, #28]
 80106ea:	9307      	strlt	r3, [sp, #28]
 80106ec:	bfb8      	it	lt
 80106ee:	9204      	strlt	r2, [sp, #16]
 80106f0:	7823      	ldrb	r3, [r4, #0]
 80106f2:	2b2e      	cmp	r3, #46	; 0x2e
 80106f4:	d10c      	bne.n	8010710 <_svfiprintf_r+0x130>
 80106f6:	7863      	ldrb	r3, [r4, #1]
 80106f8:	2b2a      	cmp	r3, #42	; 0x2a
 80106fa:	d135      	bne.n	8010768 <_svfiprintf_r+0x188>
 80106fc:	9b03      	ldr	r3, [sp, #12]
 80106fe:	1d1a      	adds	r2, r3, #4
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	9203      	str	r2, [sp, #12]
 8010704:	2b00      	cmp	r3, #0
 8010706:	bfb8      	it	lt
 8010708:	f04f 33ff 	movlt.w	r3, #4294967295
 801070c:	3402      	adds	r4, #2
 801070e:	9305      	str	r3, [sp, #20]
 8010710:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80107dc <_svfiprintf_r+0x1fc>
 8010714:	7821      	ldrb	r1, [r4, #0]
 8010716:	2203      	movs	r2, #3
 8010718:	4650      	mov	r0, sl
 801071a:	f7ef fd69 	bl	80001f0 <memchr>
 801071e:	b140      	cbz	r0, 8010732 <_svfiprintf_r+0x152>
 8010720:	2340      	movs	r3, #64	; 0x40
 8010722:	eba0 000a 	sub.w	r0, r0, sl
 8010726:	fa03 f000 	lsl.w	r0, r3, r0
 801072a:	9b04      	ldr	r3, [sp, #16]
 801072c:	4303      	orrs	r3, r0
 801072e:	3401      	adds	r4, #1
 8010730:	9304      	str	r3, [sp, #16]
 8010732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010736:	4826      	ldr	r0, [pc, #152]	; (80107d0 <_svfiprintf_r+0x1f0>)
 8010738:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801073c:	2206      	movs	r2, #6
 801073e:	f7ef fd57 	bl	80001f0 <memchr>
 8010742:	2800      	cmp	r0, #0
 8010744:	d038      	beq.n	80107b8 <_svfiprintf_r+0x1d8>
 8010746:	4b23      	ldr	r3, [pc, #140]	; (80107d4 <_svfiprintf_r+0x1f4>)
 8010748:	bb1b      	cbnz	r3, 8010792 <_svfiprintf_r+0x1b2>
 801074a:	9b03      	ldr	r3, [sp, #12]
 801074c:	3307      	adds	r3, #7
 801074e:	f023 0307 	bic.w	r3, r3, #7
 8010752:	3308      	adds	r3, #8
 8010754:	9303      	str	r3, [sp, #12]
 8010756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010758:	4433      	add	r3, r6
 801075a:	9309      	str	r3, [sp, #36]	; 0x24
 801075c:	e767      	b.n	801062e <_svfiprintf_r+0x4e>
 801075e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010762:	460c      	mov	r4, r1
 8010764:	2001      	movs	r0, #1
 8010766:	e7a5      	b.n	80106b4 <_svfiprintf_r+0xd4>
 8010768:	2300      	movs	r3, #0
 801076a:	3401      	adds	r4, #1
 801076c:	9305      	str	r3, [sp, #20]
 801076e:	4619      	mov	r1, r3
 8010770:	f04f 0c0a 	mov.w	ip, #10
 8010774:	4620      	mov	r0, r4
 8010776:	f810 2b01 	ldrb.w	r2, [r0], #1
 801077a:	3a30      	subs	r2, #48	; 0x30
 801077c:	2a09      	cmp	r2, #9
 801077e:	d903      	bls.n	8010788 <_svfiprintf_r+0x1a8>
 8010780:	2b00      	cmp	r3, #0
 8010782:	d0c5      	beq.n	8010710 <_svfiprintf_r+0x130>
 8010784:	9105      	str	r1, [sp, #20]
 8010786:	e7c3      	b.n	8010710 <_svfiprintf_r+0x130>
 8010788:	fb0c 2101 	mla	r1, ip, r1, r2
 801078c:	4604      	mov	r4, r0
 801078e:	2301      	movs	r3, #1
 8010790:	e7f0      	b.n	8010774 <_svfiprintf_r+0x194>
 8010792:	ab03      	add	r3, sp, #12
 8010794:	9300      	str	r3, [sp, #0]
 8010796:	462a      	mov	r2, r5
 8010798:	4b0f      	ldr	r3, [pc, #60]	; (80107d8 <_svfiprintf_r+0x1f8>)
 801079a:	a904      	add	r1, sp, #16
 801079c:	4638      	mov	r0, r7
 801079e:	f7fc f9df 	bl	800cb60 <_printf_float>
 80107a2:	1c42      	adds	r2, r0, #1
 80107a4:	4606      	mov	r6, r0
 80107a6:	d1d6      	bne.n	8010756 <_svfiprintf_r+0x176>
 80107a8:	89ab      	ldrh	r3, [r5, #12]
 80107aa:	065b      	lsls	r3, r3, #25
 80107ac:	f53f af2c 	bmi.w	8010608 <_svfiprintf_r+0x28>
 80107b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80107b2:	b01d      	add	sp, #116	; 0x74
 80107b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107b8:	ab03      	add	r3, sp, #12
 80107ba:	9300      	str	r3, [sp, #0]
 80107bc:	462a      	mov	r2, r5
 80107be:	4b06      	ldr	r3, [pc, #24]	; (80107d8 <_svfiprintf_r+0x1f8>)
 80107c0:	a904      	add	r1, sp, #16
 80107c2:	4638      	mov	r0, r7
 80107c4:	f7fc fc70 	bl	800d0a8 <_printf_i>
 80107c8:	e7eb      	b.n	80107a2 <_svfiprintf_r+0x1c2>
 80107ca:	bf00      	nop
 80107cc:	08012854 	.word	0x08012854
 80107d0:	0801285e 	.word	0x0801285e
 80107d4:	0800cb61 	.word	0x0800cb61
 80107d8:	08010529 	.word	0x08010529
 80107dc:	0801285a 	.word	0x0801285a

080107e0 <_sungetc_r>:
 80107e0:	b538      	push	{r3, r4, r5, lr}
 80107e2:	1c4b      	adds	r3, r1, #1
 80107e4:	4614      	mov	r4, r2
 80107e6:	d103      	bne.n	80107f0 <_sungetc_r+0x10>
 80107e8:	f04f 35ff 	mov.w	r5, #4294967295
 80107ec:	4628      	mov	r0, r5
 80107ee:	bd38      	pop	{r3, r4, r5, pc}
 80107f0:	8993      	ldrh	r3, [r2, #12]
 80107f2:	f023 0320 	bic.w	r3, r3, #32
 80107f6:	8193      	strh	r3, [r2, #12]
 80107f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80107fa:	6852      	ldr	r2, [r2, #4]
 80107fc:	b2cd      	uxtb	r5, r1
 80107fe:	b18b      	cbz	r3, 8010824 <_sungetc_r+0x44>
 8010800:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010802:	4293      	cmp	r3, r2
 8010804:	dd08      	ble.n	8010818 <_sungetc_r+0x38>
 8010806:	6823      	ldr	r3, [r4, #0]
 8010808:	1e5a      	subs	r2, r3, #1
 801080a:	6022      	str	r2, [r4, #0]
 801080c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8010810:	6863      	ldr	r3, [r4, #4]
 8010812:	3301      	adds	r3, #1
 8010814:	6063      	str	r3, [r4, #4]
 8010816:	e7e9      	b.n	80107ec <_sungetc_r+0xc>
 8010818:	4621      	mov	r1, r4
 801081a:	f000 fbe1 	bl	8010fe0 <__submore>
 801081e:	2800      	cmp	r0, #0
 8010820:	d0f1      	beq.n	8010806 <_sungetc_r+0x26>
 8010822:	e7e1      	b.n	80107e8 <_sungetc_r+0x8>
 8010824:	6921      	ldr	r1, [r4, #16]
 8010826:	6823      	ldr	r3, [r4, #0]
 8010828:	b151      	cbz	r1, 8010840 <_sungetc_r+0x60>
 801082a:	4299      	cmp	r1, r3
 801082c:	d208      	bcs.n	8010840 <_sungetc_r+0x60>
 801082e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8010832:	42a9      	cmp	r1, r5
 8010834:	d104      	bne.n	8010840 <_sungetc_r+0x60>
 8010836:	3b01      	subs	r3, #1
 8010838:	3201      	adds	r2, #1
 801083a:	6023      	str	r3, [r4, #0]
 801083c:	6062      	str	r2, [r4, #4]
 801083e:	e7d5      	b.n	80107ec <_sungetc_r+0xc>
 8010840:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8010844:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010848:	6363      	str	r3, [r4, #52]	; 0x34
 801084a:	2303      	movs	r3, #3
 801084c:	63a3      	str	r3, [r4, #56]	; 0x38
 801084e:	4623      	mov	r3, r4
 8010850:	f803 5f46 	strb.w	r5, [r3, #70]!
 8010854:	6023      	str	r3, [r4, #0]
 8010856:	2301      	movs	r3, #1
 8010858:	e7dc      	b.n	8010814 <_sungetc_r+0x34>

0801085a <__ssrefill_r>:
 801085a:	b510      	push	{r4, lr}
 801085c:	460c      	mov	r4, r1
 801085e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010860:	b169      	cbz	r1, 801087e <__ssrefill_r+0x24>
 8010862:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010866:	4299      	cmp	r1, r3
 8010868:	d001      	beq.n	801086e <__ssrefill_r+0x14>
 801086a:	f7ff fdb3 	bl	80103d4 <_free_r>
 801086e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010870:	6063      	str	r3, [r4, #4]
 8010872:	2000      	movs	r0, #0
 8010874:	6360      	str	r0, [r4, #52]	; 0x34
 8010876:	b113      	cbz	r3, 801087e <__ssrefill_r+0x24>
 8010878:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801087a:	6023      	str	r3, [r4, #0]
 801087c:	bd10      	pop	{r4, pc}
 801087e:	6923      	ldr	r3, [r4, #16]
 8010880:	6023      	str	r3, [r4, #0]
 8010882:	2300      	movs	r3, #0
 8010884:	6063      	str	r3, [r4, #4]
 8010886:	89a3      	ldrh	r3, [r4, #12]
 8010888:	f043 0320 	orr.w	r3, r3, #32
 801088c:	81a3      	strh	r3, [r4, #12]
 801088e:	f04f 30ff 	mov.w	r0, #4294967295
 8010892:	e7f3      	b.n	801087c <__ssrefill_r+0x22>

08010894 <__ssvfiscanf_r>:
 8010894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010898:	460c      	mov	r4, r1
 801089a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801089e:	2100      	movs	r1, #0
 80108a0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80108a4:	49b2      	ldr	r1, [pc, #712]	; (8010b70 <__ssvfiscanf_r+0x2dc>)
 80108a6:	91a0      	str	r1, [sp, #640]	; 0x280
 80108a8:	f10d 0804 	add.w	r8, sp, #4
 80108ac:	49b1      	ldr	r1, [pc, #708]	; (8010b74 <__ssvfiscanf_r+0x2e0>)
 80108ae:	4fb2      	ldr	r7, [pc, #712]	; (8010b78 <__ssvfiscanf_r+0x2e4>)
 80108b0:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8010b7c <__ssvfiscanf_r+0x2e8>
 80108b4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80108b8:	4606      	mov	r6, r0
 80108ba:	91a1      	str	r1, [sp, #644]	; 0x284
 80108bc:	9300      	str	r3, [sp, #0]
 80108be:	f892 a000 	ldrb.w	sl, [r2]
 80108c2:	f1ba 0f00 	cmp.w	sl, #0
 80108c6:	f000 8151 	beq.w	8010b6c <__ssvfiscanf_r+0x2d8>
 80108ca:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80108ce:	f013 0308 	ands.w	r3, r3, #8
 80108d2:	f102 0501 	add.w	r5, r2, #1
 80108d6:	d019      	beq.n	801090c <__ssvfiscanf_r+0x78>
 80108d8:	6863      	ldr	r3, [r4, #4]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	dd0f      	ble.n	80108fe <__ssvfiscanf_r+0x6a>
 80108de:	6823      	ldr	r3, [r4, #0]
 80108e0:	781a      	ldrb	r2, [r3, #0]
 80108e2:	5cba      	ldrb	r2, [r7, r2]
 80108e4:	0712      	lsls	r2, r2, #28
 80108e6:	d401      	bmi.n	80108ec <__ssvfiscanf_r+0x58>
 80108e8:	462a      	mov	r2, r5
 80108ea:	e7e8      	b.n	80108be <__ssvfiscanf_r+0x2a>
 80108ec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80108ee:	3201      	adds	r2, #1
 80108f0:	9245      	str	r2, [sp, #276]	; 0x114
 80108f2:	6862      	ldr	r2, [r4, #4]
 80108f4:	3301      	adds	r3, #1
 80108f6:	3a01      	subs	r2, #1
 80108f8:	6062      	str	r2, [r4, #4]
 80108fa:	6023      	str	r3, [r4, #0]
 80108fc:	e7ec      	b.n	80108d8 <__ssvfiscanf_r+0x44>
 80108fe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010900:	4621      	mov	r1, r4
 8010902:	4630      	mov	r0, r6
 8010904:	4798      	blx	r3
 8010906:	2800      	cmp	r0, #0
 8010908:	d0e9      	beq.n	80108de <__ssvfiscanf_r+0x4a>
 801090a:	e7ed      	b.n	80108e8 <__ssvfiscanf_r+0x54>
 801090c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8010910:	f040 8083 	bne.w	8010a1a <__ssvfiscanf_r+0x186>
 8010914:	9341      	str	r3, [sp, #260]	; 0x104
 8010916:	9343      	str	r3, [sp, #268]	; 0x10c
 8010918:	7853      	ldrb	r3, [r2, #1]
 801091a:	2b2a      	cmp	r3, #42	; 0x2a
 801091c:	bf02      	ittt	eq
 801091e:	2310      	moveq	r3, #16
 8010920:	1c95      	addeq	r5, r2, #2
 8010922:	9341      	streq	r3, [sp, #260]	; 0x104
 8010924:	220a      	movs	r2, #10
 8010926:	46ab      	mov	fp, r5
 8010928:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801092c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8010930:	2b09      	cmp	r3, #9
 8010932:	d91d      	bls.n	8010970 <__ssvfiscanf_r+0xdc>
 8010934:	4891      	ldr	r0, [pc, #580]	; (8010b7c <__ssvfiscanf_r+0x2e8>)
 8010936:	2203      	movs	r2, #3
 8010938:	f7ef fc5a 	bl	80001f0 <memchr>
 801093c:	b140      	cbz	r0, 8010950 <__ssvfiscanf_r+0xbc>
 801093e:	2301      	movs	r3, #1
 8010940:	eba0 0009 	sub.w	r0, r0, r9
 8010944:	fa03 f000 	lsl.w	r0, r3, r0
 8010948:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801094a:	4318      	orrs	r0, r3
 801094c:	9041      	str	r0, [sp, #260]	; 0x104
 801094e:	465d      	mov	r5, fp
 8010950:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010954:	2b78      	cmp	r3, #120	; 0x78
 8010956:	d806      	bhi.n	8010966 <__ssvfiscanf_r+0xd2>
 8010958:	2b57      	cmp	r3, #87	; 0x57
 801095a:	d810      	bhi.n	801097e <__ssvfiscanf_r+0xea>
 801095c:	2b25      	cmp	r3, #37	; 0x25
 801095e:	d05c      	beq.n	8010a1a <__ssvfiscanf_r+0x186>
 8010960:	d856      	bhi.n	8010a10 <__ssvfiscanf_r+0x17c>
 8010962:	2b00      	cmp	r3, #0
 8010964:	d074      	beq.n	8010a50 <__ssvfiscanf_r+0x1bc>
 8010966:	2303      	movs	r3, #3
 8010968:	9347      	str	r3, [sp, #284]	; 0x11c
 801096a:	230a      	movs	r3, #10
 801096c:	9342      	str	r3, [sp, #264]	; 0x108
 801096e:	e081      	b.n	8010a74 <__ssvfiscanf_r+0x1e0>
 8010970:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8010972:	fb02 1303 	mla	r3, r2, r3, r1
 8010976:	3b30      	subs	r3, #48	; 0x30
 8010978:	9343      	str	r3, [sp, #268]	; 0x10c
 801097a:	465d      	mov	r5, fp
 801097c:	e7d3      	b.n	8010926 <__ssvfiscanf_r+0x92>
 801097e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8010982:	2a20      	cmp	r2, #32
 8010984:	d8ef      	bhi.n	8010966 <__ssvfiscanf_r+0xd2>
 8010986:	a101      	add	r1, pc, #4	; (adr r1, 801098c <__ssvfiscanf_r+0xf8>)
 8010988:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801098c:	08010a5f 	.word	0x08010a5f
 8010990:	08010967 	.word	0x08010967
 8010994:	08010967 	.word	0x08010967
 8010998:	08010abd 	.word	0x08010abd
 801099c:	08010967 	.word	0x08010967
 80109a0:	08010967 	.word	0x08010967
 80109a4:	08010967 	.word	0x08010967
 80109a8:	08010967 	.word	0x08010967
 80109ac:	08010967 	.word	0x08010967
 80109b0:	08010967 	.word	0x08010967
 80109b4:	08010967 	.word	0x08010967
 80109b8:	08010ad3 	.word	0x08010ad3
 80109bc:	08010aa9 	.word	0x08010aa9
 80109c0:	08010a17 	.word	0x08010a17
 80109c4:	08010a17 	.word	0x08010a17
 80109c8:	08010a17 	.word	0x08010a17
 80109cc:	08010967 	.word	0x08010967
 80109d0:	08010aad 	.word	0x08010aad
 80109d4:	08010967 	.word	0x08010967
 80109d8:	08010967 	.word	0x08010967
 80109dc:	08010967 	.word	0x08010967
 80109e0:	08010967 	.word	0x08010967
 80109e4:	08010ae3 	.word	0x08010ae3
 80109e8:	08010ab5 	.word	0x08010ab5
 80109ec:	08010a57 	.word	0x08010a57
 80109f0:	08010967 	.word	0x08010967
 80109f4:	08010967 	.word	0x08010967
 80109f8:	08010adf 	.word	0x08010adf
 80109fc:	08010967 	.word	0x08010967
 8010a00:	08010aa9 	.word	0x08010aa9
 8010a04:	08010967 	.word	0x08010967
 8010a08:	08010967 	.word	0x08010967
 8010a0c:	08010a5f 	.word	0x08010a5f
 8010a10:	3b45      	subs	r3, #69	; 0x45
 8010a12:	2b02      	cmp	r3, #2
 8010a14:	d8a7      	bhi.n	8010966 <__ssvfiscanf_r+0xd2>
 8010a16:	2305      	movs	r3, #5
 8010a18:	e02b      	b.n	8010a72 <__ssvfiscanf_r+0x1de>
 8010a1a:	6863      	ldr	r3, [r4, #4]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	dd0d      	ble.n	8010a3c <__ssvfiscanf_r+0x1a8>
 8010a20:	6823      	ldr	r3, [r4, #0]
 8010a22:	781a      	ldrb	r2, [r3, #0]
 8010a24:	4552      	cmp	r2, sl
 8010a26:	f040 80a1 	bne.w	8010b6c <__ssvfiscanf_r+0x2d8>
 8010a2a:	3301      	adds	r3, #1
 8010a2c:	6862      	ldr	r2, [r4, #4]
 8010a2e:	6023      	str	r3, [r4, #0]
 8010a30:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8010a32:	3a01      	subs	r2, #1
 8010a34:	3301      	adds	r3, #1
 8010a36:	6062      	str	r2, [r4, #4]
 8010a38:	9345      	str	r3, [sp, #276]	; 0x114
 8010a3a:	e755      	b.n	80108e8 <__ssvfiscanf_r+0x54>
 8010a3c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010a3e:	4621      	mov	r1, r4
 8010a40:	4630      	mov	r0, r6
 8010a42:	4798      	blx	r3
 8010a44:	2800      	cmp	r0, #0
 8010a46:	d0eb      	beq.n	8010a20 <__ssvfiscanf_r+0x18c>
 8010a48:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010a4a:	2800      	cmp	r0, #0
 8010a4c:	f040 8084 	bne.w	8010b58 <__ssvfiscanf_r+0x2c4>
 8010a50:	f04f 30ff 	mov.w	r0, #4294967295
 8010a54:	e086      	b.n	8010b64 <__ssvfiscanf_r+0x2d0>
 8010a56:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010a58:	f042 0220 	orr.w	r2, r2, #32
 8010a5c:	9241      	str	r2, [sp, #260]	; 0x104
 8010a5e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010a64:	9241      	str	r2, [sp, #260]	; 0x104
 8010a66:	2210      	movs	r2, #16
 8010a68:	2b6f      	cmp	r3, #111	; 0x6f
 8010a6a:	9242      	str	r2, [sp, #264]	; 0x108
 8010a6c:	bf34      	ite	cc
 8010a6e:	2303      	movcc	r3, #3
 8010a70:	2304      	movcs	r3, #4
 8010a72:	9347      	str	r3, [sp, #284]	; 0x11c
 8010a74:	6863      	ldr	r3, [r4, #4]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	dd41      	ble.n	8010afe <__ssvfiscanf_r+0x26a>
 8010a7a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010a7c:	0659      	lsls	r1, r3, #25
 8010a7e:	d404      	bmi.n	8010a8a <__ssvfiscanf_r+0x1f6>
 8010a80:	6823      	ldr	r3, [r4, #0]
 8010a82:	781a      	ldrb	r2, [r3, #0]
 8010a84:	5cba      	ldrb	r2, [r7, r2]
 8010a86:	0712      	lsls	r2, r2, #28
 8010a88:	d440      	bmi.n	8010b0c <__ssvfiscanf_r+0x278>
 8010a8a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8010a8c:	2b02      	cmp	r3, #2
 8010a8e:	dc4f      	bgt.n	8010b30 <__ssvfiscanf_r+0x29c>
 8010a90:	466b      	mov	r3, sp
 8010a92:	4622      	mov	r2, r4
 8010a94:	a941      	add	r1, sp, #260	; 0x104
 8010a96:	4630      	mov	r0, r6
 8010a98:	f000 f874 	bl	8010b84 <_scanf_chars>
 8010a9c:	2801      	cmp	r0, #1
 8010a9e:	d065      	beq.n	8010b6c <__ssvfiscanf_r+0x2d8>
 8010aa0:	2802      	cmp	r0, #2
 8010aa2:	f47f af21 	bne.w	80108e8 <__ssvfiscanf_r+0x54>
 8010aa6:	e7cf      	b.n	8010a48 <__ssvfiscanf_r+0x1b4>
 8010aa8:	220a      	movs	r2, #10
 8010aaa:	e7dd      	b.n	8010a68 <__ssvfiscanf_r+0x1d4>
 8010aac:	2300      	movs	r3, #0
 8010aae:	9342      	str	r3, [sp, #264]	; 0x108
 8010ab0:	2303      	movs	r3, #3
 8010ab2:	e7de      	b.n	8010a72 <__ssvfiscanf_r+0x1de>
 8010ab4:	2308      	movs	r3, #8
 8010ab6:	9342      	str	r3, [sp, #264]	; 0x108
 8010ab8:	2304      	movs	r3, #4
 8010aba:	e7da      	b.n	8010a72 <__ssvfiscanf_r+0x1de>
 8010abc:	4629      	mov	r1, r5
 8010abe:	4640      	mov	r0, r8
 8010ac0:	f000 f9d6 	bl	8010e70 <__sccl>
 8010ac4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010ac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010aca:	9341      	str	r3, [sp, #260]	; 0x104
 8010acc:	4605      	mov	r5, r0
 8010ace:	2301      	movs	r3, #1
 8010ad0:	e7cf      	b.n	8010a72 <__ssvfiscanf_r+0x1de>
 8010ad2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ad8:	9341      	str	r3, [sp, #260]	; 0x104
 8010ada:	2300      	movs	r3, #0
 8010adc:	e7c9      	b.n	8010a72 <__ssvfiscanf_r+0x1de>
 8010ade:	2302      	movs	r3, #2
 8010ae0:	e7c7      	b.n	8010a72 <__ssvfiscanf_r+0x1de>
 8010ae2:	9841      	ldr	r0, [sp, #260]	; 0x104
 8010ae4:	06c3      	lsls	r3, r0, #27
 8010ae6:	f53f aeff 	bmi.w	80108e8 <__ssvfiscanf_r+0x54>
 8010aea:	9b00      	ldr	r3, [sp, #0]
 8010aec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010aee:	1d19      	adds	r1, r3, #4
 8010af0:	9100      	str	r1, [sp, #0]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	07c0      	lsls	r0, r0, #31
 8010af6:	bf4c      	ite	mi
 8010af8:	801a      	strhmi	r2, [r3, #0]
 8010afa:	601a      	strpl	r2, [r3, #0]
 8010afc:	e6f4      	b.n	80108e8 <__ssvfiscanf_r+0x54>
 8010afe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010b00:	4621      	mov	r1, r4
 8010b02:	4630      	mov	r0, r6
 8010b04:	4798      	blx	r3
 8010b06:	2800      	cmp	r0, #0
 8010b08:	d0b7      	beq.n	8010a7a <__ssvfiscanf_r+0x1e6>
 8010b0a:	e79d      	b.n	8010a48 <__ssvfiscanf_r+0x1b4>
 8010b0c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010b0e:	3201      	adds	r2, #1
 8010b10:	9245      	str	r2, [sp, #276]	; 0x114
 8010b12:	6862      	ldr	r2, [r4, #4]
 8010b14:	3a01      	subs	r2, #1
 8010b16:	2a00      	cmp	r2, #0
 8010b18:	6062      	str	r2, [r4, #4]
 8010b1a:	dd02      	ble.n	8010b22 <__ssvfiscanf_r+0x28e>
 8010b1c:	3301      	adds	r3, #1
 8010b1e:	6023      	str	r3, [r4, #0]
 8010b20:	e7ae      	b.n	8010a80 <__ssvfiscanf_r+0x1ec>
 8010b22:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010b24:	4621      	mov	r1, r4
 8010b26:	4630      	mov	r0, r6
 8010b28:	4798      	blx	r3
 8010b2a:	2800      	cmp	r0, #0
 8010b2c:	d0a8      	beq.n	8010a80 <__ssvfiscanf_r+0x1ec>
 8010b2e:	e78b      	b.n	8010a48 <__ssvfiscanf_r+0x1b4>
 8010b30:	2b04      	cmp	r3, #4
 8010b32:	dc06      	bgt.n	8010b42 <__ssvfiscanf_r+0x2ae>
 8010b34:	466b      	mov	r3, sp
 8010b36:	4622      	mov	r2, r4
 8010b38:	a941      	add	r1, sp, #260	; 0x104
 8010b3a:	4630      	mov	r0, r6
 8010b3c:	f000 f87a 	bl	8010c34 <_scanf_i>
 8010b40:	e7ac      	b.n	8010a9c <__ssvfiscanf_r+0x208>
 8010b42:	4b0f      	ldr	r3, [pc, #60]	; (8010b80 <__ssvfiscanf_r+0x2ec>)
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	f43f aecf 	beq.w	80108e8 <__ssvfiscanf_r+0x54>
 8010b4a:	466b      	mov	r3, sp
 8010b4c:	4622      	mov	r2, r4
 8010b4e:	a941      	add	r1, sp, #260	; 0x104
 8010b50:	4630      	mov	r0, r6
 8010b52:	f7fc fbcf 	bl	800d2f4 <_scanf_float>
 8010b56:	e7a1      	b.n	8010a9c <__ssvfiscanf_r+0x208>
 8010b58:	89a3      	ldrh	r3, [r4, #12]
 8010b5a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010b5e:	bf18      	it	ne
 8010b60:	f04f 30ff 	movne.w	r0, #4294967295
 8010b64:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8010b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b6c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010b6e:	e7f9      	b.n	8010b64 <__ssvfiscanf_r+0x2d0>
 8010b70:	080107e1 	.word	0x080107e1
 8010b74:	0801085b 	.word	0x0801085b
 8010b78:	080124e1 	.word	0x080124e1
 8010b7c:	0801285a 	.word	0x0801285a
 8010b80:	0800d2f5 	.word	0x0800d2f5

08010b84 <_scanf_chars>:
 8010b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b88:	4615      	mov	r5, r2
 8010b8a:	688a      	ldr	r2, [r1, #8]
 8010b8c:	4680      	mov	r8, r0
 8010b8e:	460c      	mov	r4, r1
 8010b90:	b932      	cbnz	r2, 8010ba0 <_scanf_chars+0x1c>
 8010b92:	698a      	ldr	r2, [r1, #24]
 8010b94:	2a00      	cmp	r2, #0
 8010b96:	bf0c      	ite	eq
 8010b98:	2201      	moveq	r2, #1
 8010b9a:	f04f 32ff 	movne.w	r2, #4294967295
 8010b9e:	608a      	str	r2, [r1, #8]
 8010ba0:	6822      	ldr	r2, [r4, #0]
 8010ba2:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8010c30 <_scanf_chars+0xac>
 8010ba6:	06d1      	lsls	r1, r2, #27
 8010ba8:	bf5f      	itttt	pl
 8010baa:	681a      	ldrpl	r2, [r3, #0]
 8010bac:	1d11      	addpl	r1, r2, #4
 8010bae:	6019      	strpl	r1, [r3, #0]
 8010bb0:	6816      	ldrpl	r6, [r2, #0]
 8010bb2:	2700      	movs	r7, #0
 8010bb4:	69a0      	ldr	r0, [r4, #24]
 8010bb6:	b188      	cbz	r0, 8010bdc <_scanf_chars+0x58>
 8010bb8:	2801      	cmp	r0, #1
 8010bba:	d107      	bne.n	8010bcc <_scanf_chars+0x48>
 8010bbc:	682b      	ldr	r3, [r5, #0]
 8010bbe:	781a      	ldrb	r2, [r3, #0]
 8010bc0:	6963      	ldr	r3, [r4, #20]
 8010bc2:	5c9b      	ldrb	r3, [r3, r2]
 8010bc4:	b953      	cbnz	r3, 8010bdc <_scanf_chars+0x58>
 8010bc6:	bb27      	cbnz	r7, 8010c12 <_scanf_chars+0x8e>
 8010bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bcc:	2802      	cmp	r0, #2
 8010bce:	d120      	bne.n	8010c12 <_scanf_chars+0x8e>
 8010bd0:	682b      	ldr	r3, [r5, #0]
 8010bd2:	781b      	ldrb	r3, [r3, #0]
 8010bd4:	f813 3009 	ldrb.w	r3, [r3, r9]
 8010bd8:	071b      	lsls	r3, r3, #28
 8010bda:	d41a      	bmi.n	8010c12 <_scanf_chars+0x8e>
 8010bdc:	6823      	ldr	r3, [r4, #0]
 8010bde:	06da      	lsls	r2, r3, #27
 8010be0:	bf5e      	ittt	pl
 8010be2:	682b      	ldrpl	r3, [r5, #0]
 8010be4:	781b      	ldrbpl	r3, [r3, #0]
 8010be6:	f806 3b01 	strbpl.w	r3, [r6], #1
 8010bea:	682a      	ldr	r2, [r5, #0]
 8010bec:	686b      	ldr	r3, [r5, #4]
 8010bee:	3201      	adds	r2, #1
 8010bf0:	602a      	str	r2, [r5, #0]
 8010bf2:	68a2      	ldr	r2, [r4, #8]
 8010bf4:	3b01      	subs	r3, #1
 8010bf6:	3a01      	subs	r2, #1
 8010bf8:	606b      	str	r3, [r5, #4]
 8010bfa:	3701      	adds	r7, #1
 8010bfc:	60a2      	str	r2, [r4, #8]
 8010bfe:	b142      	cbz	r2, 8010c12 <_scanf_chars+0x8e>
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	dcd7      	bgt.n	8010bb4 <_scanf_chars+0x30>
 8010c04:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010c08:	4629      	mov	r1, r5
 8010c0a:	4640      	mov	r0, r8
 8010c0c:	4798      	blx	r3
 8010c0e:	2800      	cmp	r0, #0
 8010c10:	d0d0      	beq.n	8010bb4 <_scanf_chars+0x30>
 8010c12:	6823      	ldr	r3, [r4, #0]
 8010c14:	f013 0310 	ands.w	r3, r3, #16
 8010c18:	d105      	bne.n	8010c26 <_scanf_chars+0xa2>
 8010c1a:	68e2      	ldr	r2, [r4, #12]
 8010c1c:	3201      	adds	r2, #1
 8010c1e:	60e2      	str	r2, [r4, #12]
 8010c20:	69a2      	ldr	r2, [r4, #24]
 8010c22:	b102      	cbz	r2, 8010c26 <_scanf_chars+0xa2>
 8010c24:	7033      	strb	r3, [r6, #0]
 8010c26:	6923      	ldr	r3, [r4, #16]
 8010c28:	441f      	add	r7, r3
 8010c2a:	6127      	str	r7, [r4, #16]
 8010c2c:	2000      	movs	r0, #0
 8010c2e:	e7cb      	b.n	8010bc8 <_scanf_chars+0x44>
 8010c30:	080124e1 	.word	0x080124e1

08010c34 <_scanf_i>:
 8010c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c38:	4698      	mov	r8, r3
 8010c3a:	4b74      	ldr	r3, [pc, #464]	; (8010e0c <_scanf_i+0x1d8>)
 8010c3c:	460c      	mov	r4, r1
 8010c3e:	4682      	mov	sl, r0
 8010c40:	4616      	mov	r6, r2
 8010c42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010c46:	b087      	sub	sp, #28
 8010c48:	ab03      	add	r3, sp, #12
 8010c4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010c4e:	4b70      	ldr	r3, [pc, #448]	; (8010e10 <_scanf_i+0x1dc>)
 8010c50:	69a1      	ldr	r1, [r4, #24]
 8010c52:	4a70      	ldr	r2, [pc, #448]	; (8010e14 <_scanf_i+0x1e0>)
 8010c54:	2903      	cmp	r1, #3
 8010c56:	bf18      	it	ne
 8010c58:	461a      	movne	r2, r3
 8010c5a:	68a3      	ldr	r3, [r4, #8]
 8010c5c:	9201      	str	r2, [sp, #4]
 8010c5e:	1e5a      	subs	r2, r3, #1
 8010c60:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010c64:	bf88      	it	hi
 8010c66:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010c6a:	4627      	mov	r7, r4
 8010c6c:	bf82      	ittt	hi
 8010c6e:	eb03 0905 	addhi.w	r9, r3, r5
 8010c72:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010c76:	60a3      	strhi	r3, [r4, #8]
 8010c78:	f857 3b1c 	ldr.w	r3, [r7], #28
 8010c7c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8010c80:	bf98      	it	ls
 8010c82:	f04f 0900 	movls.w	r9, #0
 8010c86:	6023      	str	r3, [r4, #0]
 8010c88:	463d      	mov	r5, r7
 8010c8a:	f04f 0b00 	mov.w	fp, #0
 8010c8e:	6831      	ldr	r1, [r6, #0]
 8010c90:	ab03      	add	r3, sp, #12
 8010c92:	7809      	ldrb	r1, [r1, #0]
 8010c94:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8010c98:	2202      	movs	r2, #2
 8010c9a:	f7ef faa9 	bl	80001f0 <memchr>
 8010c9e:	b328      	cbz	r0, 8010cec <_scanf_i+0xb8>
 8010ca0:	f1bb 0f01 	cmp.w	fp, #1
 8010ca4:	d159      	bne.n	8010d5a <_scanf_i+0x126>
 8010ca6:	6862      	ldr	r2, [r4, #4]
 8010ca8:	b92a      	cbnz	r2, 8010cb6 <_scanf_i+0x82>
 8010caa:	6822      	ldr	r2, [r4, #0]
 8010cac:	2308      	movs	r3, #8
 8010cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010cb2:	6063      	str	r3, [r4, #4]
 8010cb4:	6022      	str	r2, [r4, #0]
 8010cb6:	6822      	ldr	r2, [r4, #0]
 8010cb8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8010cbc:	6022      	str	r2, [r4, #0]
 8010cbe:	68a2      	ldr	r2, [r4, #8]
 8010cc0:	1e51      	subs	r1, r2, #1
 8010cc2:	60a1      	str	r1, [r4, #8]
 8010cc4:	b192      	cbz	r2, 8010cec <_scanf_i+0xb8>
 8010cc6:	6832      	ldr	r2, [r6, #0]
 8010cc8:	1c51      	adds	r1, r2, #1
 8010cca:	6031      	str	r1, [r6, #0]
 8010ccc:	7812      	ldrb	r2, [r2, #0]
 8010cce:	f805 2b01 	strb.w	r2, [r5], #1
 8010cd2:	6872      	ldr	r2, [r6, #4]
 8010cd4:	3a01      	subs	r2, #1
 8010cd6:	2a00      	cmp	r2, #0
 8010cd8:	6072      	str	r2, [r6, #4]
 8010cda:	dc07      	bgt.n	8010cec <_scanf_i+0xb8>
 8010cdc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8010ce0:	4631      	mov	r1, r6
 8010ce2:	4650      	mov	r0, sl
 8010ce4:	4790      	blx	r2
 8010ce6:	2800      	cmp	r0, #0
 8010ce8:	f040 8085 	bne.w	8010df6 <_scanf_i+0x1c2>
 8010cec:	f10b 0b01 	add.w	fp, fp, #1
 8010cf0:	f1bb 0f03 	cmp.w	fp, #3
 8010cf4:	d1cb      	bne.n	8010c8e <_scanf_i+0x5a>
 8010cf6:	6863      	ldr	r3, [r4, #4]
 8010cf8:	b90b      	cbnz	r3, 8010cfe <_scanf_i+0xca>
 8010cfa:	230a      	movs	r3, #10
 8010cfc:	6063      	str	r3, [r4, #4]
 8010cfe:	6863      	ldr	r3, [r4, #4]
 8010d00:	4945      	ldr	r1, [pc, #276]	; (8010e18 <_scanf_i+0x1e4>)
 8010d02:	6960      	ldr	r0, [r4, #20]
 8010d04:	1ac9      	subs	r1, r1, r3
 8010d06:	f000 f8b3 	bl	8010e70 <__sccl>
 8010d0a:	f04f 0b00 	mov.w	fp, #0
 8010d0e:	68a3      	ldr	r3, [r4, #8]
 8010d10:	6822      	ldr	r2, [r4, #0]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d03d      	beq.n	8010d92 <_scanf_i+0x15e>
 8010d16:	6831      	ldr	r1, [r6, #0]
 8010d18:	6960      	ldr	r0, [r4, #20]
 8010d1a:	f891 c000 	ldrb.w	ip, [r1]
 8010d1e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8010d22:	2800      	cmp	r0, #0
 8010d24:	d035      	beq.n	8010d92 <_scanf_i+0x15e>
 8010d26:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8010d2a:	d124      	bne.n	8010d76 <_scanf_i+0x142>
 8010d2c:	0510      	lsls	r0, r2, #20
 8010d2e:	d522      	bpl.n	8010d76 <_scanf_i+0x142>
 8010d30:	f10b 0b01 	add.w	fp, fp, #1
 8010d34:	f1b9 0f00 	cmp.w	r9, #0
 8010d38:	d003      	beq.n	8010d42 <_scanf_i+0x10e>
 8010d3a:	3301      	adds	r3, #1
 8010d3c:	f109 39ff 	add.w	r9, r9, #4294967295
 8010d40:	60a3      	str	r3, [r4, #8]
 8010d42:	6873      	ldr	r3, [r6, #4]
 8010d44:	3b01      	subs	r3, #1
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	6073      	str	r3, [r6, #4]
 8010d4a:	dd1b      	ble.n	8010d84 <_scanf_i+0x150>
 8010d4c:	6833      	ldr	r3, [r6, #0]
 8010d4e:	3301      	adds	r3, #1
 8010d50:	6033      	str	r3, [r6, #0]
 8010d52:	68a3      	ldr	r3, [r4, #8]
 8010d54:	3b01      	subs	r3, #1
 8010d56:	60a3      	str	r3, [r4, #8]
 8010d58:	e7d9      	b.n	8010d0e <_scanf_i+0xda>
 8010d5a:	f1bb 0f02 	cmp.w	fp, #2
 8010d5e:	d1ae      	bne.n	8010cbe <_scanf_i+0x8a>
 8010d60:	6822      	ldr	r2, [r4, #0]
 8010d62:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8010d66:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8010d6a:	d1bf      	bne.n	8010cec <_scanf_i+0xb8>
 8010d6c:	2310      	movs	r3, #16
 8010d6e:	6063      	str	r3, [r4, #4]
 8010d70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010d74:	e7a2      	b.n	8010cbc <_scanf_i+0x88>
 8010d76:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8010d7a:	6022      	str	r2, [r4, #0]
 8010d7c:	780b      	ldrb	r3, [r1, #0]
 8010d7e:	f805 3b01 	strb.w	r3, [r5], #1
 8010d82:	e7de      	b.n	8010d42 <_scanf_i+0x10e>
 8010d84:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010d88:	4631      	mov	r1, r6
 8010d8a:	4650      	mov	r0, sl
 8010d8c:	4798      	blx	r3
 8010d8e:	2800      	cmp	r0, #0
 8010d90:	d0df      	beq.n	8010d52 <_scanf_i+0x11e>
 8010d92:	6823      	ldr	r3, [r4, #0]
 8010d94:	05d9      	lsls	r1, r3, #23
 8010d96:	d50d      	bpl.n	8010db4 <_scanf_i+0x180>
 8010d98:	42bd      	cmp	r5, r7
 8010d9a:	d909      	bls.n	8010db0 <_scanf_i+0x17c>
 8010d9c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010da0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010da4:	4632      	mov	r2, r6
 8010da6:	4650      	mov	r0, sl
 8010da8:	4798      	blx	r3
 8010daa:	f105 39ff 	add.w	r9, r5, #4294967295
 8010dae:	464d      	mov	r5, r9
 8010db0:	42bd      	cmp	r5, r7
 8010db2:	d028      	beq.n	8010e06 <_scanf_i+0x1d2>
 8010db4:	6822      	ldr	r2, [r4, #0]
 8010db6:	f012 0210 	ands.w	r2, r2, #16
 8010dba:	d113      	bne.n	8010de4 <_scanf_i+0x1b0>
 8010dbc:	702a      	strb	r2, [r5, #0]
 8010dbe:	6863      	ldr	r3, [r4, #4]
 8010dc0:	9e01      	ldr	r6, [sp, #4]
 8010dc2:	4639      	mov	r1, r7
 8010dc4:	4650      	mov	r0, sl
 8010dc6:	47b0      	blx	r6
 8010dc8:	f8d8 3000 	ldr.w	r3, [r8]
 8010dcc:	6821      	ldr	r1, [r4, #0]
 8010dce:	1d1a      	adds	r2, r3, #4
 8010dd0:	f8c8 2000 	str.w	r2, [r8]
 8010dd4:	f011 0f20 	tst.w	r1, #32
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	d00f      	beq.n	8010dfc <_scanf_i+0x1c8>
 8010ddc:	6018      	str	r0, [r3, #0]
 8010dde:	68e3      	ldr	r3, [r4, #12]
 8010de0:	3301      	adds	r3, #1
 8010de2:	60e3      	str	r3, [r4, #12]
 8010de4:	1bed      	subs	r5, r5, r7
 8010de6:	44ab      	add	fp, r5
 8010de8:	6925      	ldr	r5, [r4, #16]
 8010dea:	445d      	add	r5, fp
 8010dec:	6125      	str	r5, [r4, #16]
 8010dee:	2000      	movs	r0, #0
 8010df0:	b007      	add	sp, #28
 8010df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010df6:	f04f 0b00 	mov.w	fp, #0
 8010dfa:	e7ca      	b.n	8010d92 <_scanf_i+0x15e>
 8010dfc:	07ca      	lsls	r2, r1, #31
 8010dfe:	bf4c      	ite	mi
 8010e00:	8018      	strhmi	r0, [r3, #0]
 8010e02:	6018      	strpl	r0, [r3, #0]
 8010e04:	e7eb      	b.n	8010dde <_scanf_i+0x1aa>
 8010e06:	2001      	movs	r0, #1
 8010e08:	e7f2      	b.n	8010df0 <_scanf_i+0x1bc>
 8010e0a:	bf00      	nop
 8010e0c:	08011c78 	.word	0x08011c78
 8010e10:	08010fdd 	.word	0x08010fdd
 8010e14:	0800e5c9 	.word	0x0800e5c9
 8010e18:	0801287e 	.word	0x0801287e

08010e1c <_read_r>:
 8010e1c:	b538      	push	{r3, r4, r5, lr}
 8010e1e:	4d07      	ldr	r5, [pc, #28]	; (8010e3c <_read_r+0x20>)
 8010e20:	4604      	mov	r4, r0
 8010e22:	4608      	mov	r0, r1
 8010e24:	4611      	mov	r1, r2
 8010e26:	2200      	movs	r2, #0
 8010e28:	602a      	str	r2, [r5, #0]
 8010e2a:	461a      	mov	r2, r3
 8010e2c:	f7f1 f8c0 	bl	8001fb0 <_read>
 8010e30:	1c43      	adds	r3, r0, #1
 8010e32:	d102      	bne.n	8010e3a <_read_r+0x1e>
 8010e34:	682b      	ldr	r3, [r5, #0]
 8010e36:	b103      	cbz	r3, 8010e3a <_read_r+0x1e>
 8010e38:	6023      	str	r3, [r4, #0]
 8010e3a:	bd38      	pop	{r3, r4, r5, pc}
 8010e3c:	20005d54 	.word	0x20005d54

08010e40 <nan>:
 8010e40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010e48 <nan+0x8>
 8010e44:	4770      	bx	lr
 8010e46:	bf00      	nop
 8010e48:	00000000 	.word	0x00000000
 8010e4c:	7ff80000 	.word	0x7ff80000

08010e50 <_sbrk_r>:
 8010e50:	b538      	push	{r3, r4, r5, lr}
 8010e52:	4d06      	ldr	r5, [pc, #24]	; (8010e6c <_sbrk_r+0x1c>)
 8010e54:	2300      	movs	r3, #0
 8010e56:	4604      	mov	r4, r0
 8010e58:	4608      	mov	r0, r1
 8010e5a:	602b      	str	r3, [r5, #0]
 8010e5c:	f7f1 f916 	bl	800208c <_sbrk>
 8010e60:	1c43      	adds	r3, r0, #1
 8010e62:	d102      	bne.n	8010e6a <_sbrk_r+0x1a>
 8010e64:	682b      	ldr	r3, [r5, #0]
 8010e66:	b103      	cbz	r3, 8010e6a <_sbrk_r+0x1a>
 8010e68:	6023      	str	r3, [r4, #0]
 8010e6a:	bd38      	pop	{r3, r4, r5, pc}
 8010e6c:	20005d54 	.word	0x20005d54

08010e70 <__sccl>:
 8010e70:	b570      	push	{r4, r5, r6, lr}
 8010e72:	780b      	ldrb	r3, [r1, #0]
 8010e74:	4604      	mov	r4, r0
 8010e76:	2b5e      	cmp	r3, #94	; 0x5e
 8010e78:	bf0b      	itete	eq
 8010e7a:	784b      	ldrbeq	r3, [r1, #1]
 8010e7c:	1c48      	addne	r0, r1, #1
 8010e7e:	1c88      	addeq	r0, r1, #2
 8010e80:	2200      	movne	r2, #0
 8010e82:	bf08      	it	eq
 8010e84:	2201      	moveq	r2, #1
 8010e86:	1e61      	subs	r1, r4, #1
 8010e88:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8010e8c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8010e90:	42a9      	cmp	r1, r5
 8010e92:	d1fb      	bne.n	8010e8c <__sccl+0x1c>
 8010e94:	b90b      	cbnz	r3, 8010e9a <__sccl+0x2a>
 8010e96:	3801      	subs	r0, #1
 8010e98:	bd70      	pop	{r4, r5, r6, pc}
 8010e9a:	f082 0101 	eor.w	r1, r2, #1
 8010e9e:	54e1      	strb	r1, [r4, r3]
 8010ea0:	1c42      	adds	r2, r0, #1
 8010ea2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8010ea6:	2d2d      	cmp	r5, #45	; 0x2d
 8010ea8:	f102 36ff 	add.w	r6, r2, #4294967295
 8010eac:	4610      	mov	r0, r2
 8010eae:	d006      	beq.n	8010ebe <__sccl+0x4e>
 8010eb0:	2d5d      	cmp	r5, #93	; 0x5d
 8010eb2:	d0f1      	beq.n	8010e98 <__sccl+0x28>
 8010eb4:	b90d      	cbnz	r5, 8010eba <__sccl+0x4a>
 8010eb6:	4630      	mov	r0, r6
 8010eb8:	e7ee      	b.n	8010e98 <__sccl+0x28>
 8010eba:	462b      	mov	r3, r5
 8010ebc:	e7ef      	b.n	8010e9e <__sccl+0x2e>
 8010ebe:	7816      	ldrb	r6, [r2, #0]
 8010ec0:	2e5d      	cmp	r6, #93	; 0x5d
 8010ec2:	d0fa      	beq.n	8010eba <__sccl+0x4a>
 8010ec4:	42b3      	cmp	r3, r6
 8010ec6:	dcf8      	bgt.n	8010eba <__sccl+0x4a>
 8010ec8:	4618      	mov	r0, r3
 8010eca:	3001      	adds	r0, #1
 8010ecc:	4286      	cmp	r6, r0
 8010ece:	5421      	strb	r1, [r4, r0]
 8010ed0:	dcfb      	bgt.n	8010eca <__sccl+0x5a>
 8010ed2:	43d8      	mvns	r0, r3
 8010ed4:	4430      	add	r0, r6
 8010ed6:	1c5d      	adds	r5, r3, #1
 8010ed8:	42b3      	cmp	r3, r6
 8010eda:	bfa8      	it	ge
 8010edc:	2000      	movge	r0, #0
 8010ede:	182b      	adds	r3, r5, r0
 8010ee0:	3202      	adds	r2, #2
 8010ee2:	e7de      	b.n	8010ea2 <__sccl+0x32>

08010ee4 <_strtoul_l.isra.0>:
 8010ee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ee8:	4e3b      	ldr	r6, [pc, #236]	; (8010fd8 <_strtoul_l.isra.0+0xf4>)
 8010eea:	4686      	mov	lr, r0
 8010eec:	468c      	mov	ip, r1
 8010eee:	4660      	mov	r0, ip
 8010ef0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8010ef4:	5da5      	ldrb	r5, [r4, r6]
 8010ef6:	f015 0508 	ands.w	r5, r5, #8
 8010efa:	d1f8      	bne.n	8010eee <_strtoul_l.isra.0+0xa>
 8010efc:	2c2d      	cmp	r4, #45	; 0x2d
 8010efe:	d134      	bne.n	8010f6a <_strtoul_l.isra.0+0x86>
 8010f00:	f89c 4000 	ldrb.w	r4, [ip]
 8010f04:	f04f 0801 	mov.w	r8, #1
 8010f08:	f100 0c02 	add.w	ip, r0, #2
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d05e      	beq.n	8010fce <_strtoul_l.isra.0+0xea>
 8010f10:	2b10      	cmp	r3, #16
 8010f12:	d10c      	bne.n	8010f2e <_strtoul_l.isra.0+0x4a>
 8010f14:	2c30      	cmp	r4, #48	; 0x30
 8010f16:	d10a      	bne.n	8010f2e <_strtoul_l.isra.0+0x4a>
 8010f18:	f89c 0000 	ldrb.w	r0, [ip]
 8010f1c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8010f20:	2858      	cmp	r0, #88	; 0x58
 8010f22:	d14f      	bne.n	8010fc4 <_strtoul_l.isra.0+0xe0>
 8010f24:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8010f28:	2310      	movs	r3, #16
 8010f2a:	f10c 0c02 	add.w	ip, ip, #2
 8010f2e:	f04f 37ff 	mov.w	r7, #4294967295
 8010f32:	2500      	movs	r5, #0
 8010f34:	fbb7 f7f3 	udiv	r7, r7, r3
 8010f38:	fb03 f907 	mul.w	r9, r3, r7
 8010f3c:	ea6f 0909 	mvn.w	r9, r9
 8010f40:	4628      	mov	r0, r5
 8010f42:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8010f46:	2e09      	cmp	r6, #9
 8010f48:	d818      	bhi.n	8010f7c <_strtoul_l.isra.0+0x98>
 8010f4a:	4634      	mov	r4, r6
 8010f4c:	42a3      	cmp	r3, r4
 8010f4e:	dd24      	ble.n	8010f9a <_strtoul_l.isra.0+0xb6>
 8010f50:	2d00      	cmp	r5, #0
 8010f52:	db1f      	blt.n	8010f94 <_strtoul_l.isra.0+0xb0>
 8010f54:	4287      	cmp	r7, r0
 8010f56:	d31d      	bcc.n	8010f94 <_strtoul_l.isra.0+0xb0>
 8010f58:	d101      	bne.n	8010f5e <_strtoul_l.isra.0+0x7a>
 8010f5a:	45a1      	cmp	r9, r4
 8010f5c:	db1a      	blt.n	8010f94 <_strtoul_l.isra.0+0xb0>
 8010f5e:	fb00 4003 	mla	r0, r0, r3, r4
 8010f62:	2501      	movs	r5, #1
 8010f64:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8010f68:	e7eb      	b.n	8010f42 <_strtoul_l.isra.0+0x5e>
 8010f6a:	2c2b      	cmp	r4, #43	; 0x2b
 8010f6c:	bf08      	it	eq
 8010f6e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8010f72:	46a8      	mov	r8, r5
 8010f74:	bf08      	it	eq
 8010f76:	f100 0c02 	addeq.w	ip, r0, #2
 8010f7a:	e7c7      	b.n	8010f0c <_strtoul_l.isra.0+0x28>
 8010f7c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8010f80:	2e19      	cmp	r6, #25
 8010f82:	d801      	bhi.n	8010f88 <_strtoul_l.isra.0+0xa4>
 8010f84:	3c37      	subs	r4, #55	; 0x37
 8010f86:	e7e1      	b.n	8010f4c <_strtoul_l.isra.0+0x68>
 8010f88:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8010f8c:	2e19      	cmp	r6, #25
 8010f8e:	d804      	bhi.n	8010f9a <_strtoul_l.isra.0+0xb6>
 8010f90:	3c57      	subs	r4, #87	; 0x57
 8010f92:	e7db      	b.n	8010f4c <_strtoul_l.isra.0+0x68>
 8010f94:	f04f 35ff 	mov.w	r5, #4294967295
 8010f98:	e7e4      	b.n	8010f64 <_strtoul_l.isra.0+0x80>
 8010f9a:	2d00      	cmp	r5, #0
 8010f9c:	da07      	bge.n	8010fae <_strtoul_l.isra.0+0xca>
 8010f9e:	2322      	movs	r3, #34	; 0x22
 8010fa0:	f8ce 3000 	str.w	r3, [lr]
 8010fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8010fa8:	b942      	cbnz	r2, 8010fbc <_strtoul_l.isra.0+0xd8>
 8010faa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010fae:	f1b8 0f00 	cmp.w	r8, #0
 8010fb2:	d000      	beq.n	8010fb6 <_strtoul_l.isra.0+0xd2>
 8010fb4:	4240      	negs	r0, r0
 8010fb6:	2a00      	cmp	r2, #0
 8010fb8:	d0f7      	beq.n	8010faa <_strtoul_l.isra.0+0xc6>
 8010fba:	b10d      	cbz	r5, 8010fc0 <_strtoul_l.isra.0+0xdc>
 8010fbc:	f10c 31ff 	add.w	r1, ip, #4294967295
 8010fc0:	6011      	str	r1, [r2, #0]
 8010fc2:	e7f2      	b.n	8010faa <_strtoul_l.isra.0+0xc6>
 8010fc4:	2430      	movs	r4, #48	; 0x30
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d1b1      	bne.n	8010f2e <_strtoul_l.isra.0+0x4a>
 8010fca:	2308      	movs	r3, #8
 8010fcc:	e7af      	b.n	8010f2e <_strtoul_l.isra.0+0x4a>
 8010fce:	2c30      	cmp	r4, #48	; 0x30
 8010fd0:	d0a2      	beq.n	8010f18 <_strtoul_l.isra.0+0x34>
 8010fd2:	230a      	movs	r3, #10
 8010fd4:	e7ab      	b.n	8010f2e <_strtoul_l.isra.0+0x4a>
 8010fd6:	bf00      	nop
 8010fd8:	080124e1 	.word	0x080124e1

08010fdc <_strtoul_r>:
 8010fdc:	f7ff bf82 	b.w	8010ee4 <_strtoul_l.isra.0>

08010fe0 <__submore>:
 8010fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fe4:	460c      	mov	r4, r1
 8010fe6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010fe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010fec:	4299      	cmp	r1, r3
 8010fee:	d11d      	bne.n	801102c <__submore+0x4c>
 8010ff0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010ff4:	f7ff fa3e 	bl	8010474 <_malloc_r>
 8010ff8:	b918      	cbnz	r0, 8011002 <__submore+0x22>
 8010ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8010ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011002:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011006:	63a3      	str	r3, [r4, #56]	; 0x38
 8011008:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801100c:	6360      	str	r0, [r4, #52]	; 0x34
 801100e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8011012:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8011016:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801101a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801101e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8011022:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8011026:	6020      	str	r0, [r4, #0]
 8011028:	2000      	movs	r0, #0
 801102a:	e7e8      	b.n	8010ffe <__submore+0x1e>
 801102c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801102e:	0077      	lsls	r7, r6, #1
 8011030:	463a      	mov	r2, r7
 8011032:	f000 fa2d 	bl	8011490 <_realloc_r>
 8011036:	4605      	mov	r5, r0
 8011038:	2800      	cmp	r0, #0
 801103a:	d0de      	beq.n	8010ffa <__submore+0x1a>
 801103c:	eb00 0806 	add.w	r8, r0, r6
 8011040:	4601      	mov	r1, r0
 8011042:	4632      	mov	r2, r6
 8011044:	4640      	mov	r0, r8
 8011046:	f7fb fcd5 	bl	800c9f4 <memcpy>
 801104a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801104e:	f8c4 8000 	str.w	r8, [r4]
 8011052:	e7e9      	b.n	8011028 <__submore+0x48>

08011054 <__ascii_wctomb>:
 8011054:	b149      	cbz	r1, 801106a <__ascii_wctomb+0x16>
 8011056:	2aff      	cmp	r2, #255	; 0xff
 8011058:	bf85      	ittet	hi
 801105a:	238a      	movhi	r3, #138	; 0x8a
 801105c:	6003      	strhi	r3, [r0, #0]
 801105e:	700a      	strbls	r2, [r1, #0]
 8011060:	f04f 30ff 	movhi.w	r0, #4294967295
 8011064:	bf98      	it	ls
 8011066:	2001      	movls	r0, #1
 8011068:	4770      	bx	lr
 801106a:	4608      	mov	r0, r1
 801106c:	4770      	bx	lr
	...

08011070 <__assert_func>:
 8011070:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011072:	4614      	mov	r4, r2
 8011074:	461a      	mov	r2, r3
 8011076:	4b09      	ldr	r3, [pc, #36]	; (801109c <__assert_func+0x2c>)
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	4605      	mov	r5, r0
 801107c:	68d8      	ldr	r0, [r3, #12]
 801107e:	b14c      	cbz	r4, 8011094 <__assert_func+0x24>
 8011080:	4b07      	ldr	r3, [pc, #28]	; (80110a0 <__assert_func+0x30>)
 8011082:	9100      	str	r1, [sp, #0]
 8011084:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011088:	4906      	ldr	r1, [pc, #24]	; (80110a4 <__assert_func+0x34>)
 801108a:	462b      	mov	r3, r5
 801108c:	f000 f9a6 	bl	80113dc <fiprintf>
 8011090:	f000 fc3e 	bl	8011910 <abort>
 8011094:	4b04      	ldr	r3, [pc, #16]	; (80110a8 <__assert_func+0x38>)
 8011096:	461c      	mov	r4, r3
 8011098:	e7f3      	b.n	8011082 <__assert_func+0x12>
 801109a:	bf00      	nop
 801109c:	200000e8 	.word	0x200000e8
 80110a0:	08012880 	.word	0x08012880
 80110a4:	0801288d 	.word	0x0801288d
 80110a8:	080128bb 	.word	0x080128bb

080110ac <__sflush_r>:
 80110ac:	898a      	ldrh	r2, [r1, #12]
 80110ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110b2:	4605      	mov	r5, r0
 80110b4:	0710      	lsls	r0, r2, #28
 80110b6:	460c      	mov	r4, r1
 80110b8:	d458      	bmi.n	801116c <__sflush_r+0xc0>
 80110ba:	684b      	ldr	r3, [r1, #4]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	dc05      	bgt.n	80110cc <__sflush_r+0x20>
 80110c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	dc02      	bgt.n	80110cc <__sflush_r+0x20>
 80110c6:	2000      	movs	r0, #0
 80110c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80110ce:	2e00      	cmp	r6, #0
 80110d0:	d0f9      	beq.n	80110c6 <__sflush_r+0x1a>
 80110d2:	2300      	movs	r3, #0
 80110d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80110d8:	682f      	ldr	r7, [r5, #0]
 80110da:	602b      	str	r3, [r5, #0]
 80110dc:	d032      	beq.n	8011144 <__sflush_r+0x98>
 80110de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80110e0:	89a3      	ldrh	r3, [r4, #12]
 80110e2:	075a      	lsls	r2, r3, #29
 80110e4:	d505      	bpl.n	80110f2 <__sflush_r+0x46>
 80110e6:	6863      	ldr	r3, [r4, #4]
 80110e8:	1ac0      	subs	r0, r0, r3
 80110ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80110ec:	b10b      	cbz	r3, 80110f2 <__sflush_r+0x46>
 80110ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80110f0:	1ac0      	subs	r0, r0, r3
 80110f2:	2300      	movs	r3, #0
 80110f4:	4602      	mov	r2, r0
 80110f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80110f8:	6a21      	ldr	r1, [r4, #32]
 80110fa:	4628      	mov	r0, r5
 80110fc:	47b0      	blx	r6
 80110fe:	1c43      	adds	r3, r0, #1
 8011100:	89a3      	ldrh	r3, [r4, #12]
 8011102:	d106      	bne.n	8011112 <__sflush_r+0x66>
 8011104:	6829      	ldr	r1, [r5, #0]
 8011106:	291d      	cmp	r1, #29
 8011108:	d82c      	bhi.n	8011164 <__sflush_r+0xb8>
 801110a:	4a2a      	ldr	r2, [pc, #168]	; (80111b4 <__sflush_r+0x108>)
 801110c:	40ca      	lsrs	r2, r1
 801110e:	07d6      	lsls	r6, r2, #31
 8011110:	d528      	bpl.n	8011164 <__sflush_r+0xb8>
 8011112:	2200      	movs	r2, #0
 8011114:	6062      	str	r2, [r4, #4]
 8011116:	04d9      	lsls	r1, r3, #19
 8011118:	6922      	ldr	r2, [r4, #16]
 801111a:	6022      	str	r2, [r4, #0]
 801111c:	d504      	bpl.n	8011128 <__sflush_r+0x7c>
 801111e:	1c42      	adds	r2, r0, #1
 8011120:	d101      	bne.n	8011126 <__sflush_r+0x7a>
 8011122:	682b      	ldr	r3, [r5, #0]
 8011124:	b903      	cbnz	r3, 8011128 <__sflush_r+0x7c>
 8011126:	6560      	str	r0, [r4, #84]	; 0x54
 8011128:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801112a:	602f      	str	r7, [r5, #0]
 801112c:	2900      	cmp	r1, #0
 801112e:	d0ca      	beq.n	80110c6 <__sflush_r+0x1a>
 8011130:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011134:	4299      	cmp	r1, r3
 8011136:	d002      	beq.n	801113e <__sflush_r+0x92>
 8011138:	4628      	mov	r0, r5
 801113a:	f7ff f94b 	bl	80103d4 <_free_r>
 801113e:	2000      	movs	r0, #0
 8011140:	6360      	str	r0, [r4, #52]	; 0x34
 8011142:	e7c1      	b.n	80110c8 <__sflush_r+0x1c>
 8011144:	6a21      	ldr	r1, [r4, #32]
 8011146:	2301      	movs	r3, #1
 8011148:	4628      	mov	r0, r5
 801114a:	47b0      	blx	r6
 801114c:	1c41      	adds	r1, r0, #1
 801114e:	d1c7      	bne.n	80110e0 <__sflush_r+0x34>
 8011150:	682b      	ldr	r3, [r5, #0]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d0c4      	beq.n	80110e0 <__sflush_r+0x34>
 8011156:	2b1d      	cmp	r3, #29
 8011158:	d001      	beq.n	801115e <__sflush_r+0xb2>
 801115a:	2b16      	cmp	r3, #22
 801115c:	d101      	bne.n	8011162 <__sflush_r+0xb6>
 801115e:	602f      	str	r7, [r5, #0]
 8011160:	e7b1      	b.n	80110c6 <__sflush_r+0x1a>
 8011162:	89a3      	ldrh	r3, [r4, #12]
 8011164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011168:	81a3      	strh	r3, [r4, #12]
 801116a:	e7ad      	b.n	80110c8 <__sflush_r+0x1c>
 801116c:	690f      	ldr	r7, [r1, #16]
 801116e:	2f00      	cmp	r7, #0
 8011170:	d0a9      	beq.n	80110c6 <__sflush_r+0x1a>
 8011172:	0793      	lsls	r3, r2, #30
 8011174:	680e      	ldr	r6, [r1, #0]
 8011176:	bf08      	it	eq
 8011178:	694b      	ldreq	r3, [r1, #20]
 801117a:	600f      	str	r7, [r1, #0]
 801117c:	bf18      	it	ne
 801117e:	2300      	movne	r3, #0
 8011180:	eba6 0807 	sub.w	r8, r6, r7
 8011184:	608b      	str	r3, [r1, #8]
 8011186:	f1b8 0f00 	cmp.w	r8, #0
 801118a:	dd9c      	ble.n	80110c6 <__sflush_r+0x1a>
 801118c:	6a21      	ldr	r1, [r4, #32]
 801118e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011190:	4643      	mov	r3, r8
 8011192:	463a      	mov	r2, r7
 8011194:	4628      	mov	r0, r5
 8011196:	47b0      	blx	r6
 8011198:	2800      	cmp	r0, #0
 801119a:	dc06      	bgt.n	80111aa <__sflush_r+0xfe>
 801119c:	89a3      	ldrh	r3, [r4, #12]
 801119e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111a2:	81a3      	strh	r3, [r4, #12]
 80111a4:	f04f 30ff 	mov.w	r0, #4294967295
 80111a8:	e78e      	b.n	80110c8 <__sflush_r+0x1c>
 80111aa:	4407      	add	r7, r0
 80111ac:	eba8 0800 	sub.w	r8, r8, r0
 80111b0:	e7e9      	b.n	8011186 <__sflush_r+0xda>
 80111b2:	bf00      	nop
 80111b4:	20400001 	.word	0x20400001

080111b8 <_fflush_r>:
 80111b8:	b538      	push	{r3, r4, r5, lr}
 80111ba:	690b      	ldr	r3, [r1, #16]
 80111bc:	4605      	mov	r5, r0
 80111be:	460c      	mov	r4, r1
 80111c0:	b913      	cbnz	r3, 80111c8 <_fflush_r+0x10>
 80111c2:	2500      	movs	r5, #0
 80111c4:	4628      	mov	r0, r5
 80111c6:	bd38      	pop	{r3, r4, r5, pc}
 80111c8:	b118      	cbz	r0, 80111d2 <_fflush_r+0x1a>
 80111ca:	6983      	ldr	r3, [r0, #24]
 80111cc:	b90b      	cbnz	r3, 80111d2 <_fflush_r+0x1a>
 80111ce:	f000 f887 	bl	80112e0 <__sinit>
 80111d2:	4b14      	ldr	r3, [pc, #80]	; (8011224 <_fflush_r+0x6c>)
 80111d4:	429c      	cmp	r4, r3
 80111d6:	d11b      	bne.n	8011210 <_fflush_r+0x58>
 80111d8:	686c      	ldr	r4, [r5, #4]
 80111da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d0ef      	beq.n	80111c2 <_fflush_r+0xa>
 80111e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80111e4:	07d0      	lsls	r0, r2, #31
 80111e6:	d404      	bmi.n	80111f2 <_fflush_r+0x3a>
 80111e8:	0599      	lsls	r1, r3, #22
 80111ea:	d402      	bmi.n	80111f2 <_fflush_r+0x3a>
 80111ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80111ee:	f000 f927 	bl	8011440 <__retarget_lock_acquire_recursive>
 80111f2:	4628      	mov	r0, r5
 80111f4:	4621      	mov	r1, r4
 80111f6:	f7ff ff59 	bl	80110ac <__sflush_r>
 80111fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80111fc:	07da      	lsls	r2, r3, #31
 80111fe:	4605      	mov	r5, r0
 8011200:	d4e0      	bmi.n	80111c4 <_fflush_r+0xc>
 8011202:	89a3      	ldrh	r3, [r4, #12]
 8011204:	059b      	lsls	r3, r3, #22
 8011206:	d4dd      	bmi.n	80111c4 <_fflush_r+0xc>
 8011208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801120a:	f000 f91a 	bl	8011442 <__retarget_lock_release_recursive>
 801120e:	e7d9      	b.n	80111c4 <_fflush_r+0xc>
 8011210:	4b05      	ldr	r3, [pc, #20]	; (8011228 <_fflush_r+0x70>)
 8011212:	429c      	cmp	r4, r3
 8011214:	d101      	bne.n	801121a <_fflush_r+0x62>
 8011216:	68ac      	ldr	r4, [r5, #8]
 8011218:	e7df      	b.n	80111da <_fflush_r+0x22>
 801121a:	4b04      	ldr	r3, [pc, #16]	; (801122c <_fflush_r+0x74>)
 801121c:	429c      	cmp	r4, r3
 801121e:	bf08      	it	eq
 8011220:	68ec      	ldreq	r4, [r5, #12]
 8011222:	e7da      	b.n	80111da <_fflush_r+0x22>
 8011224:	080128dc 	.word	0x080128dc
 8011228:	080128fc 	.word	0x080128fc
 801122c:	080128bc 	.word	0x080128bc

08011230 <std>:
 8011230:	2300      	movs	r3, #0
 8011232:	b510      	push	{r4, lr}
 8011234:	4604      	mov	r4, r0
 8011236:	e9c0 3300 	strd	r3, r3, [r0]
 801123a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801123e:	6083      	str	r3, [r0, #8]
 8011240:	8181      	strh	r1, [r0, #12]
 8011242:	6643      	str	r3, [r0, #100]	; 0x64
 8011244:	81c2      	strh	r2, [r0, #14]
 8011246:	6183      	str	r3, [r0, #24]
 8011248:	4619      	mov	r1, r3
 801124a:	2208      	movs	r2, #8
 801124c:	305c      	adds	r0, #92	; 0x5c
 801124e:	f7fb fbdf 	bl	800ca10 <memset>
 8011252:	4b05      	ldr	r3, [pc, #20]	; (8011268 <std+0x38>)
 8011254:	6263      	str	r3, [r4, #36]	; 0x24
 8011256:	4b05      	ldr	r3, [pc, #20]	; (801126c <std+0x3c>)
 8011258:	62a3      	str	r3, [r4, #40]	; 0x28
 801125a:	4b05      	ldr	r3, [pc, #20]	; (8011270 <std+0x40>)
 801125c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801125e:	4b05      	ldr	r3, [pc, #20]	; (8011274 <std+0x44>)
 8011260:	6224      	str	r4, [r4, #32]
 8011262:	6323      	str	r3, [r4, #48]	; 0x30
 8011264:	bd10      	pop	{r4, pc}
 8011266:	bf00      	nop
 8011268:	0800d7b9 	.word	0x0800d7b9
 801126c:	0800d7df 	.word	0x0800d7df
 8011270:	0800d817 	.word	0x0800d817
 8011274:	0800d83b 	.word	0x0800d83b

08011278 <_cleanup_r>:
 8011278:	4901      	ldr	r1, [pc, #4]	; (8011280 <_cleanup_r+0x8>)
 801127a:	f000 b8c1 	b.w	8011400 <_fwalk_reent>
 801127e:	bf00      	nop
 8011280:	080111b9 	.word	0x080111b9

08011284 <__sfmoreglue>:
 8011284:	b570      	push	{r4, r5, r6, lr}
 8011286:	1e4a      	subs	r2, r1, #1
 8011288:	2568      	movs	r5, #104	; 0x68
 801128a:	4355      	muls	r5, r2
 801128c:	460e      	mov	r6, r1
 801128e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011292:	f7ff f8ef 	bl	8010474 <_malloc_r>
 8011296:	4604      	mov	r4, r0
 8011298:	b140      	cbz	r0, 80112ac <__sfmoreglue+0x28>
 801129a:	2100      	movs	r1, #0
 801129c:	e9c0 1600 	strd	r1, r6, [r0]
 80112a0:	300c      	adds	r0, #12
 80112a2:	60a0      	str	r0, [r4, #8]
 80112a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80112a8:	f7fb fbb2 	bl	800ca10 <memset>
 80112ac:	4620      	mov	r0, r4
 80112ae:	bd70      	pop	{r4, r5, r6, pc}

080112b0 <__sfp_lock_acquire>:
 80112b0:	4801      	ldr	r0, [pc, #4]	; (80112b8 <__sfp_lock_acquire+0x8>)
 80112b2:	f000 b8c5 	b.w	8011440 <__retarget_lock_acquire_recursive>
 80112b6:	bf00      	nop
 80112b8:	20005d60 	.word	0x20005d60

080112bc <__sfp_lock_release>:
 80112bc:	4801      	ldr	r0, [pc, #4]	; (80112c4 <__sfp_lock_release+0x8>)
 80112be:	f000 b8c0 	b.w	8011442 <__retarget_lock_release_recursive>
 80112c2:	bf00      	nop
 80112c4:	20005d60 	.word	0x20005d60

080112c8 <__sinit_lock_acquire>:
 80112c8:	4801      	ldr	r0, [pc, #4]	; (80112d0 <__sinit_lock_acquire+0x8>)
 80112ca:	f000 b8b9 	b.w	8011440 <__retarget_lock_acquire_recursive>
 80112ce:	bf00      	nop
 80112d0:	20005d5b 	.word	0x20005d5b

080112d4 <__sinit_lock_release>:
 80112d4:	4801      	ldr	r0, [pc, #4]	; (80112dc <__sinit_lock_release+0x8>)
 80112d6:	f000 b8b4 	b.w	8011442 <__retarget_lock_release_recursive>
 80112da:	bf00      	nop
 80112dc:	20005d5b 	.word	0x20005d5b

080112e0 <__sinit>:
 80112e0:	b510      	push	{r4, lr}
 80112e2:	4604      	mov	r4, r0
 80112e4:	f7ff fff0 	bl	80112c8 <__sinit_lock_acquire>
 80112e8:	69a3      	ldr	r3, [r4, #24]
 80112ea:	b11b      	cbz	r3, 80112f4 <__sinit+0x14>
 80112ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80112f0:	f7ff bff0 	b.w	80112d4 <__sinit_lock_release>
 80112f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80112f8:	6523      	str	r3, [r4, #80]	; 0x50
 80112fa:	4b13      	ldr	r3, [pc, #76]	; (8011348 <__sinit+0x68>)
 80112fc:	4a13      	ldr	r2, [pc, #76]	; (801134c <__sinit+0x6c>)
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	62a2      	str	r2, [r4, #40]	; 0x28
 8011302:	42a3      	cmp	r3, r4
 8011304:	bf04      	itt	eq
 8011306:	2301      	moveq	r3, #1
 8011308:	61a3      	streq	r3, [r4, #24]
 801130a:	4620      	mov	r0, r4
 801130c:	f000 f820 	bl	8011350 <__sfp>
 8011310:	6060      	str	r0, [r4, #4]
 8011312:	4620      	mov	r0, r4
 8011314:	f000 f81c 	bl	8011350 <__sfp>
 8011318:	60a0      	str	r0, [r4, #8]
 801131a:	4620      	mov	r0, r4
 801131c:	f000 f818 	bl	8011350 <__sfp>
 8011320:	2200      	movs	r2, #0
 8011322:	60e0      	str	r0, [r4, #12]
 8011324:	2104      	movs	r1, #4
 8011326:	6860      	ldr	r0, [r4, #4]
 8011328:	f7ff ff82 	bl	8011230 <std>
 801132c:	68a0      	ldr	r0, [r4, #8]
 801132e:	2201      	movs	r2, #1
 8011330:	2109      	movs	r1, #9
 8011332:	f7ff ff7d 	bl	8011230 <std>
 8011336:	68e0      	ldr	r0, [r4, #12]
 8011338:	2202      	movs	r2, #2
 801133a:	2112      	movs	r1, #18
 801133c:	f7ff ff78 	bl	8011230 <std>
 8011340:	2301      	movs	r3, #1
 8011342:	61a3      	str	r3, [r4, #24]
 8011344:	e7d2      	b.n	80112ec <__sinit+0xc>
 8011346:	bf00      	nop
 8011348:	08012450 	.word	0x08012450
 801134c:	08011279 	.word	0x08011279

08011350 <__sfp>:
 8011350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011352:	4607      	mov	r7, r0
 8011354:	f7ff ffac 	bl	80112b0 <__sfp_lock_acquire>
 8011358:	4b1e      	ldr	r3, [pc, #120]	; (80113d4 <__sfp+0x84>)
 801135a:	681e      	ldr	r6, [r3, #0]
 801135c:	69b3      	ldr	r3, [r6, #24]
 801135e:	b913      	cbnz	r3, 8011366 <__sfp+0x16>
 8011360:	4630      	mov	r0, r6
 8011362:	f7ff ffbd 	bl	80112e0 <__sinit>
 8011366:	3648      	adds	r6, #72	; 0x48
 8011368:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801136c:	3b01      	subs	r3, #1
 801136e:	d503      	bpl.n	8011378 <__sfp+0x28>
 8011370:	6833      	ldr	r3, [r6, #0]
 8011372:	b30b      	cbz	r3, 80113b8 <__sfp+0x68>
 8011374:	6836      	ldr	r6, [r6, #0]
 8011376:	e7f7      	b.n	8011368 <__sfp+0x18>
 8011378:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801137c:	b9d5      	cbnz	r5, 80113b4 <__sfp+0x64>
 801137e:	4b16      	ldr	r3, [pc, #88]	; (80113d8 <__sfp+0x88>)
 8011380:	60e3      	str	r3, [r4, #12]
 8011382:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011386:	6665      	str	r5, [r4, #100]	; 0x64
 8011388:	f000 f859 	bl	801143e <__retarget_lock_init_recursive>
 801138c:	f7ff ff96 	bl	80112bc <__sfp_lock_release>
 8011390:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011394:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011398:	6025      	str	r5, [r4, #0]
 801139a:	61a5      	str	r5, [r4, #24]
 801139c:	2208      	movs	r2, #8
 801139e:	4629      	mov	r1, r5
 80113a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80113a4:	f7fb fb34 	bl	800ca10 <memset>
 80113a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80113ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80113b0:	4620      	mov	r0, r4
 80113b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113b4:	3468      	adds	r4, #104	; 0x68
 80113b6:	e7d9      	b.n	801136c <__sfp+0x1c>
 80113b8:	2104      	movs	r1, #4
 80113ba:	4638      	mov	r0, r7
 80113bc:	f7ff ff62 	bl	8011284 <__sfmoreglue>
 80113c0:	4604      	mov	r4, r0
 80113c2:	6030      	str	r0, [r6, #0]
 80113c4:	2800      	cmp	r0, #0
 80113c6:	d1d5      	bne.n	8011374 <__sfp+0x24>
 80113c8:	f7ff ff78 	bl	80112bc <__sfp_lock_release>
 80113cc:	230c      	movs	r3, #12
 80113ce:	603b      	str	r3, [r7, #0]
 80113d0:	e7ee      	b.n	80113b0 <__sfp+0x60>
 80113d2:	bf00      	nop
 80113d4:	08012450 	.word	0x08012450
 80113d8:	ffff0001 	.word	0xffff0001

080113dc <fiprintf>:
 80113dc:	b40e      	push	{r1, r2, r3}
 80113de:	b503      	push	{r0, r1, lr}
 80113e0:	4601      	mov	r1, r0
 80113e2:	ab03      	add	r3, sp, #12
 80113e4:	4805      	ldr	r0, [pc, #20]	; (80113fc <fiprintf+0x20>)
 80113e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80113ea:	6800      	ldr	r0, [r0, #0]
 80113ec:	9301      	str	r3, [sp, #4]
 80113ee:	f000 f89f 	bl	8011530 <_vfiprintf_r>
 80113f2:	b002      	add	sp, #8
 80113f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80113f8:	b003      	add	sp, #12
 80113fa:	4770      	bx	lr
 80113fc:	200000e8 	.word	0x200000e8

08011400 <_fwalk_reent>:
 8011400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011404:	4606      	mov	r6, r0
 8011406:	4688      	mov	r8, r1
 8011408:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801140c:	2700      	movs	r7, #0
 801140e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011412:	f1b9 0901 	subs.w	r9, r9, #1
 8011416:	d505      	bpl.n	8011424 <_fwalk_reent+0x24>
 8011418:	6824      	ldr	r4, [r4, #0]
 801141a:	2c00      	cmp	r4, #0
 801141c:	d1f7      	bne.n	801140e <_fwalk_reent+0xe>
 801141e:	4638      	mov	r0, r7
 8011420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011424:	89ab      	ldrh	r3, [r5, #12]
 8011426:	2b01      	cmp	r3, #1
 8011428:	d907      	bls.n	801143a <_fwalk_reent+0x3a>
 801142a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801142e:	3301      	adds	r3, #1
 8011430:	d003      	beq.n	801143a <_fwalk_reent+0x3a>
 8011432:	4629      	mov	r1, r5
 8011434:	4630      	mov	r0, r6
 8011436:	47c0      	blx	r8
 8011438:	4307      	orrs	r7, r0
 801143a:	3568      	adds	r5, #104	; 0x68
 801143c:	e7e9      	b.n	8011412 <_fwalk_reent+0x12>

0801143e <__retarget_lock_init_recursive>:
 801143e:	4770      	bx	lr

08011440 <__retarget_lock_acquire_recursive>:
 8011440:	4770      	bx	lr

08011442 <__retarget_lock_release_recursive>:
 8011442:	4770      	bx	lr

08011444 <memmove>:
 8011444:	4288      	cmp	r0, r1
 8011446:	b510      	push	{r4, lr}
 8011448:	eb01 0402 	add.w	r4, r1, r2
 801144c:	d902      	bls.n	8011454 <memmove+0x10>
 801144e:	4284      	cmp	r4, r0
 8011450:	4623      	mov	r3, r4
 8011452:	d807      	bhi.n	8011464 <memmove+0x20>
 8011454:	1e43      	subs	r3, r0, #1
 8011456:	42a1      	cmp	r1, r4
 8011458:	d008      	beq.n	801146c <memmove+0x28>
 801145a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801145e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011462:	e7f8      	b.n	8011456 <memmove+0x12>
 8011464:	4402      	add	r2, r0
 8011466:	4601      	mov	r1, r0
 8011468:	428a      	cmp	r2, r1
 801146a:	d100      	bne.n	801146e <memmove+0x2a>
 801146c:	bd10      	pop	{r4, pc}
 801146e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011472:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011476:	e7f7      	b.n	8011468 <memmove+0x24>

08011478 <__malloc_lock>:
 8011478:	4801      	ldr	r0, [pc, #4]	; (8011480 <__malloc_lock+0x8>)
 801147a:	f7ff bfe1 	b.w	8011440 <__retarget_lock_acquire_recursive>
 801147e:	bf00      	nop
 8011480:	20005d5c 	.word	0x20005d5c

08011484 <__malloc_unlock>:
 8011484:	4801      	ldr	r0, [pc, #4]	; (801148c <__malloc_unlock+0x8>)
 8011486:	f7ff bfdc 	b.w	8011442 <__retarget_lock_release_recursive>
 801148a:	bf00      	nop
 801148c:	20005d5c 	.word	0x20005d5c

08011490 <_realloc_r>:
 8011490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011492:	4607      	mov	r7, r0
 8011494:	4614      	mov	r4, r2
 8011496:	460e      	mov	r6, r1
 8011498:	b921      	cbnz	r1, 80114a4 <_realloc_r+0x14>
 801149a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801149e:	4611      	mov	r1, r2
 80114a0:	f7fe bfe8 	b.w	8010474 <_malloc_r>
 80114a4:	b922      	cbnz	r2, 80114b0 <_realloc_r+0x20>
 80114a6:	f7fe ff95 	bl	80103d4 <_free_r>
 80114aa:	4625      	mov	r5, r4
 80114ac:	4628      	mov	r0, r5
 80114ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114b0:	f000 fa9a 	bl	80119e8 <_malloc_usable_size_r>
 80114b4:	42a0      	cmp	r0, r4
 80114b6:	d20f      	bcs.n	80114d8 <_realloc_r+0x48>
 80114b8:	4621      	mov	r1, r4
 80114ba:	4638      	mov	r0, r7
 80114bc:	f7fe ffda 	bl	8010474 <_malloc_r>
 80114c0:	4605      	mov	r5, r0
 80114c2:	2800      	cmp	r0, #0
 80114c4:	d0f2      	beq.n	80114ac <_realloc_r+0x1c>
 80114c6:	4631      	mov	r1, r6
 80114c8:	4622      	mov	r2, r4
 80114ca:	f7fb fa93 	bl	800c9f4 <memcpy>
 80114ce:	4631      	mov	r1, r6
 80114d0:	4638      	mov	r0, r7
 80114d2:	f7fe ff7f 	bl	80103d4 <_free_r>
 80114d6:	e7e9      	b.n	80114ac <_realloc_r+0x1c>
 80114d8:	4635      	mov	r5, r6
 80114da:	e7e7      	b.n	80114ac <_realloc_r+0x1c>

080114dc <__sfputc_r>:
 80114dc:	6893      	ldr	r3, [r2, #8]
 80114de:	3b01      	subs	r3, #1
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	b410      	push	{r4}
 80114e4:	6093      	str	r3, [r2, #8]
 80114e6:	da08      	bge.n	80114fa <__sfputc_r+0x1e>
 80114e8:	6994      	ldr	r4, [r2, #24]
 80114ea:	42a3      	cmp	r3, r4
 80114ec:	db01      	blt.n	80114f2 <__sfputc_r+0x16>
 80114ee:	290a      	cmp	r1, #10
 80114f0:	d103      	bne.n	80114fa <__sfputc_r+0x1e>
 80114f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114f6:	f000 b94b 	b.w	8011790 <__swbuf_r>
 80114fa:	6813      	ldr	r3, [r2, #0]
 80114fc:	1c58      	adds	r0, r3, #1
 80114fe:	6010      	str	r0, [r2, #0]
 8011500:	7019      	strb	r1, [r3, #0]
 8011502:	4608      	mov	r0, r1
 8011504:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011508:	4770      	bx	lr

0801150a <__sfputs_r>:
 801150a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801150c:	4606      	mov	r6, r0
 801150e:	460f      	mov	r7, r1
 8011510:	4614      	mov	r4, r2
 8011512:	18d5      	adds	r5, r2, r3
 8011514:	42ac      	cmp	r4, r5
 8011516:	d101      	bne.n	801151c <__sfputs_r+0x12>
 8011518:	2000      	movs	r0, #0
 801151a:	e007      	b.n	801152c <__sfputs_r+0x22>
 801151c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011520:	463a      	mov	r2, r7
 8011522:	4630      	mov	r0, r6
 8011524:	f7ff ffda 	bl	80114dc <__sfputc_r>
 8011528:	1c43      	adds	r3, r0, #1
 801152a:	d1f3      	bne.n	8011514 <__sfputs_r+0xa>
 801152c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011530 <_vfiprintf_r>:
 8011530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011534:	460d      	mov	r5, r1
 8011536:	b09d      	sub	sp, #116	; 0x74
 8011538:	4614      	mov	r4, r2
 801153a:	4698      	mov	r8, r3
 801153c:	4606      	mov	r6, r0
 801153e:	b118      	cbz	r0, 8011548 <_vfiprintf_r+0x18>
 8011540:	6983      	ldr	r3, [r0, #24]
 8011542:	b90b      	cbnz	r3, 8011548 <_vfiprintf_r+0x18>
 8011544:	f7ff fecc 	bl	80112e0 <__sinit>
 8011548:	4b89      	ldr	r3, [pc, #548]	; (8011770 <_vfiprintf_r+0x240>)
 801154a:	429d      	cmp	r5, r3
 801154c:	d11b      	bne.n	8011586 <_vfiprintf_r+0x56>
 801154e:	6875      	ldr	r5, [r6, #4]
 8011550:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011552:	07d9      	lsls	r1, r3, #31
 8011554:	d405      	bmi.n	8011562 <_vfiprintf_r+0x32>
 8011556:	89ab      	ldrh	r3, [r5, #12]
 8011558:	059a      	lsls	r2, r3, #22
 801155a:	d402      	bmi.n	8011562 <_vfiprintf_r+0x32>
 801155c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801155e:	f7ff ff6f 	bl	8011440 <__retarget_lock_acquire_recursive>
 8011562:	89ab      	ldrh	r3, [r5, #12]
 8011564:	071b      	lsls	r3, r3, #28
 8011566:	d501      	bpl.n	801156c <_vfiprintf_r+0x3c>
 8011568:	692b      	ldr	r3, [r5, #16]
 801156a:	b9eb      	cbnz	r3, 80115a8 <_vfiprintf_r+0x78>
 801156c:	4629      	mov	r1, r5
 801156e:	4630      	mov	r0, r6
 8011570:	f000 f960 	bl	8011834 <__swsetup_r>
 8011574:	b1c0      	cbz	r0, 80115a8 <_vfiprintf_r+0x78>
 8011576:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011578:	07dc      	lsls	r4, r3, #31
 801157a:	d50e      	bpl.n	801159a <_vfiprintf_r+0x6a>
 801157c:	f04f 30ff 	mov.w	r0, #4294967295
 8011580:	b01d      	add	sp, #116	; 0x74
 8011582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011586:	4b7b      	ldr	r3, [pc, #492]	; (8011774 <_vfiprintf_r+0x244>)
 8011588:	429d      	cmp	r5, r3
 801158a:	d101      	bne.n	8011590 <_vfiprintf_r+0x60>
 801158c:	68b5      	ldr	r5, [r6, #8]
 801158e:	e7df      	b.n	8011550 <_vfiprintf_r+0x20>
 8011590:	4b79      	ldr	r3, [pc, #484]	; (8011778 <_vfiprintf_r+0x248>)
 8011592:	429d      	cmp	r5, r3
 8011594:	bf08      	it	eq
 8011596:	68f5      	ldreq	r5, [r6, #12]
 8011598:	e7da      	b.n	8011550 <_vfiprintf_r+0x20>
 801159a:	89ab      	ldrh	r3, [r5, #12]
 801159c:	0598      	lsls	r0, r3, #22
 801159e:	d4ed      	bmi.n	801157c <_vfiprintf_r+0x4c>
 80115a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80115a2:	f7ff ff4e 	bl	8011442 <__retarget_lock_release_recursive>
 80115a6:	e7e9      	b.n	801157c <_vfiprintf_r+0x4c>
 80115a8:	2300      	movs	r3, #0
 80115aa:	9309      	str	r3, [sp, #36]	; 0x24
 80115ac:	2320      	movs	r3, #32
 80115ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80115b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80115b6:	2330      	movs	r3, #48	; 0x30
 80115b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801177c <_vfiprintf_r+0x24c>
 80115bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80115c0:	f04f 0901 	mov.w	r9, #1
 80115c4:	4623      	mov	r3, r4
 80115c6:	469a      	mov	sl, r3
 80115c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80115cc:	b10a      	cbz	r2, 80115d2 <_vfiprintf_r+0xa2>
 80115ce:	2a25      	cmp	r2, #37	; 0x25
 80115d0:	d1f9      	bne.n	80115c6 <_vfiprintf_r+0x96>
 80115d2:	ebba 0b04 	subs.w	fp, sl, r4
 80115d6:	d00b      	beq.n	80115f0 <_vfiprintf_r+0xc0>
 80115d8:	465b      	mov	r3, fp
 80115da:	4622      	mov	r2, r4
 80115dc:	4629      	mov	r1, r5
 80115de:	4630      	mov	r0, r6
 80115e0:	f7ff ff93 	bl	801150a <__sfputs_r>
 80115e4:	3001      	adds	r0, #1
 80115e6:	f000 80aa 	beq.w	801173e <_vfiprintf_r+0x20e>
 80115ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80115ec:	445a      	add	r2, fp
 80115ee:	9209      	str	r2, [sp, #36]	; 0x24
 80115f0:	f89a 3000 	ldrb.w	r3, [sl]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	f000 80a2 	beq.w	801173e <_vfiprintf_r+0x20e>
 80115fa:	2300      	movs	r3, #0
 80115fc:	f04f 32ff 	mov.w	r2, #4294967295
 8011600:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011604:	f10a 0a01 	add.w	sl, sl, #1
 8011608:	9304      	str	r3, [sp, #16]
 801160a:	9307      	str	r3, [sp, #28]
 801160c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011610:	931a      	str	r3, [sp, #104]	; 0x68
 8011612:	4654      	mov	r4, sl
 8011614:	2205      	movs	r2, #5
 8011616:	f814 1b01 	ldrb.w	r1, [r4], #1
 801161a:	4858      	ldr	r0, [pc, #352]	; (801177c <_vfiprintf_r+0x24c>)
 801161c:	f7ee fde8 	bl	80001f0 <memchr>
 8011620:	9a04      	ldr	r2, [sp, #16]
 8011622:	b9d8      	cbnz	r0, 801165c <_vfiprintf_r+0x12c>
 8011624:	06d1      	lsls	r1, r2, #27
 8011626:	bf44      	itt	mi
 8011628:	2320      	movmi	r3, #32
 801162a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801162e:	0713      	lsls	r3, r2, #28
 8011630:	bf44      	itt	mi
 8011632:	232b      	movmi	r3, #43	; 0x2b
 8011634:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011638:	f89a 3000 	ldrb.w	r3, [sl]
 801163c:	2b2a      	cmp	r3, #42	; 0x2a
 801163e:	d015      	beq.n	801166c <_vfiprintf_r+0x13c>
 8011640:	9a07      	ldr	r2, [sp, #28]
 8011642:	4654      	mov	r4, sl
 8011644:	2000      	movs	r0, #0
 8011646:	f04f 0c0a 	mov.w	ip, #10
 801164a:	4621      	mov	r1, r4
 801164c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011650:	3b30      	subs	r3, #48	; 0x30
 8011652:	2b09      	cmp	r3, #9
 8011654:	d94e      	bls.n	80116f4 <_vfiprintf_r+0x1c4>
 8011656:	b1b0      	cbz	r0, 8011686 <_vfiprintf_r+0x156>
 8011658:	9207      	str	r2, [sp, #28]
 801165a:	e014      	b.n	8011686 <_vfiprintf_r+0x156>
 801165c:	eba0 0308 	sub.w	r3, r0, r8
 8011660:	fa09 f303 	lsl.w	r3, r9, r3
 8011664:	4313      	orrs	r3, r2
 8011666:	9304      	str	r3, [sp, #16]
 8011668:	46a2      	mov	sl, r4
 801166a:	e7d2      	b.n	8011612 <_vfiprintf_r+0xe2>
 801166c:	9b03      	ldr	r3, [sp, #12]
 801166e:	1d19      	adds	r1, r3, #4
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	9103      	str	r1, [sp, #12]
 8011674:	2b00      	cmp	r3, #0
 8011676:	bfbb      	ittet	lt
 8011678:	425b      	neglt	r3, r3
 801167a:	f042 0202 	orrlt.w	r2, r2, #2
 801167e:	9307      	strge	r3, [sp, #28]
 8011680:	9307      	strlt	r3, [sp, #28]
 8011682:	bfb8      	it	lt
 8011684:	9204      	strlt	r2, [sp, #16]
 8011686:	7823      	ldrb	r3, [r4, #0]
 8011688:	2b2e      	cmp	r3, #46	; 0x2e
 801168a:	d10c      	bne.n	80116a6 <_vfiprintf_r+0x176>
 801168c:	7863      	ldrb	r3, [r4, #1]
 801168e:	2b2a      	cmp	r3, #42	; 0x2a
 8011690:	d135      	bne.n	80116fe <_vfiprintf_r+0x1ce>
 8011692:	9b03      	ldr	r3, [sp, #12]
 8011694:	1d1a      	adds	r2, r3, #4
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	9203      	str	r2, [sp, #12]
 801169a:	2b00      	cmp	r3, #0
 801169c:	bfb8      	it	lt
 801169e:	f04f 33ff 	movlt.w	r3, #4294967295
 80116a2:	3402      	adds	r4, #2
 80116a4:	9305      	str	r3, [sp, #20]
 80116a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801178c <_vfiprintf_r+0x25c>
 80116aa:	7821      	ldrb	r1, [r4, #0]
 80116ac:	2203      	movs	r2, #3
 80116ae:	4650      	mov	r0, sl
 80116b0:	f7ee fd9e 	bl	80001f0 <memchr>
 80116b4:	b140      	cbz	r0, 80116c8 <_vfiprintf_r+0x198>
 80116b6:	2340      	movs	r3, #64	; 0x40
 80116b8:	eba0 000a 	sub.w	r0, r0, sl
 80116bc:	fa03 f000 	lsl.w	r0, r3, r0
 80116c0:	9b04      	ldr	r3, [sp, #16]
 80116c2:	4303      	orrs	r3, r0
 80116c4:	3401      	adds	r4, #1
 80116c6:	9304      	str	r3, [sp, #16]
 80116c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116cc:	482c      	ldr	r0, [pc, #176]	; (8011780 <_vfiprintf_r+0x250>)
 80116ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80116d2:	2206      	movs	r2, #6
 80116d4:	f7ee fd8c 	bl	80001f0 <memchr>
 80116d8:	2800      	cmp	r0, #0
 80116da:	d03f      	beq.n	801175c <_vfiprintf_r+0x22c>
 80116dc:	4b29      	ldr	r3, [pc, #164]	; (8011784 <_vfiprintf_r+0x254>)
 80116de:	bb1b      	cbnz	r3, 8011728 <_vfiprintf_r+0x1f8>
 80116e0:	9b03      	ldr	r3, [sp, #12]
 80116e2:	3307      	adds	r3, #7
 80116e4:	f023 0307 	bic.w	r3, r3, #7
 80116e8:	3308      	adds	r3, #8
 80116ea:	9303      	str	r3, [sp, #12]
 80116ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116ee:	443b      	add	r3, r7
 80116f0:	9309      	str	r3, [sp, #36]	; 0x24
 80116f2:	e767      	b.n	80115c4 <_vfiprintf_r+0x94>
 80116f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80116f8:	460c      	mov	r4, r1
 80116fa:	2001      	movs	r0, #1
 80116fc:	e7a5      	b.n	801164a <_vfiprintf_r+0x11a>
 80116fe:	2300      	movs	r3, #0
 8011700:	3401      	adds	r4, #1
 8011702:	9305      	str	r3, [sp, #20]
 8011704:	4619      	mov	r1, r3
 8011706:	f04f 0c0a 	mov.w	ip, #10
 801170a:	4620      	mov	r0, r4
 801170c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011710:	3a30      	subs	r2, #48	; 0x30
 8011712:	2a09      	cmp	r2, #9
 8011714:	d903      	bls.n	801171e <_vfiprintf_r+0x1ee>
 8011716:	2b00      	cmp	r3, #0
 8011718:	d0c5      	beq.n	80116a6 <_vfiprintf_r+0x176>
 801171a:	9105      	str	r1, [sp, #20]
 801171c:	e7c3      	b.n	80116a6 <_vfiprintf_r+0x176>
 801171e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011722:	4604      	mov	r4, r0
 8011724:	2301      	movs	r3, #1
 8011726:	e7f0      	b.n	801170a <_vfiprintf_r+0x1da>
 8011728:	ab03      	add	r3, sp, #12
 801172a:	9300      	str	r3, [sp, #0]
 801172c:	462a      	mov	r2, r5
 801172e:	4b16      	ldr	r3, [pc, #88]	; (8011788 <_vfiprintf_r+0x258>)
 8011730:	a904      	add	r1, sp, #16
 8011732:	4630      	mov	r0, r6
 8011734:	f7fb fa14 	bl	800cb60 <_printf_float>
 8011738:	4607      	mov	r7, r0
 801173a:	1c78      	adds	r0, r7, #1
 801173c:	d1d6      	bne.n	80116ec <_vfiprintf_r+0x1bc>
 801173e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011740:	07d9      	lsls	r1, r3, #31
 8011742:	d405      	bmi.n	8011750 <_vfiprintf_r+0x220>
 8011744:	89ab      	ldrh	r3, [r5, #12]
 8011746:	059a      	lsls	r2, r3, #22
 8011748:	d402      	bmi.n	8011750 <_vfiprintf_r+0x220>
 801174a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801174c:	f7ff fe79 	bl	8011442 <__retarget_lock_release_recursive>
 8011750:	89ab      	ldrh	r3, [r5, #12]
 8011752:	065b      	lsls	r3, r3, #25
 8011754:	f53f af12 	bmi.w	801157c <_vfiprintf_r+0x4c>
 8011758:	9809      	ldr	r0, [sp, #36]	; 0x24
 801175a:	e711      	b.n	8011580 <_vfiprintf_r+0x50>
 801175c:	ab03      	add	r3, sp, #12
 801175e:	9300      	str	r3, [sp, #0]
 8011760:	462a      	mov	r2, r5
 8011762:	4b09      	ldr	r3, [pc, #36]	; (8011788 <_vfiprintf_r+0x258>)
 8011764:	a904      	add	r1, sp, #16
 8011766:	4630      	mov	r0, r6
 8011768:	f7fb fc9e 	bl	800d0a8 <_printf_i>
 801176c:	e7e4      	b.n	8011738 <_vfiprintf_r+0x208>
 801176e:	bf00      	nop
 8011770:	080128dc 	.word	0x080128dc
 8011774:	080128fc 	.word	0x080128fc
 8011778:	080128bc 	.word	0x080128bc
 801177c:	08012854 	.word	0x08012854
 8011780:	0801285e 	.word	0x0801285e
 8011784:	0800cb61 	.word	0x0800cb61
 8011788:	0801150b 	.word	0x0801150b
 801178c:	0801285a 	.word	0x0801285a

08011790 <__swbuf_r>:
 8011790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011792:	460e      	mov	r6, r1
 8011794:	4614      	mov	r4, r2
 8011796:	4605      	mov	r5, r0
 8011798:	b118      	cbz	r0, 80117a2 <__swbuf_r+0x12>
 801179a:	6983      	ldr	r3, [r0, #24]
 801179c:	b90b      	cbnz	r3, 80117a2 <__swbuf_r+0x12>
 801179e:	f7ff fd9f 	bl	80112e0 <__sinit>
 80117a2:	4b21      	ldr	r3, [pc, #132]	; (8011828 <__swbuf_r+0x98>)
 80117a4:	429c      	cmp	r4, r3
 80117a6:	d12b      	bne.n	8011800 <__swbuf_r+0x70>
 80117a8:	686c      	ldr	r4, [r5, #4]
 80117aa:	69a3      	ldr	r3, [r4, #24]
 80117ac:	60a3      	str	r3, [r4, #8]
 80117ae:	89a3      	ldrh	r3, [r4, #12]
 80117b0:	071a      	lsls	r2, r3, #28
 80117b2:	d52f      	bpl.n	8011814 <__swbuf_r+0x84>
 80117b4:	6923      	ldr	r3, [r4, #16]
 80117b6:	b36b      	cbz	r3, 8011814 <__swbuf_r+0x84>
 80117b8:	6923      	ldr	r3, [r4, #16]
 80117ba:	6820      	ldr	r0, [r4, #0]
 80117bc:	1ac0      	subs	r0, r0, r3
 80117be:	6963      	ldr	r3, [r4, #20]
 80117c0:	b2f6      	uxtb	r6, r6
 80117c2:	4283      	cmp	r3, r0
 80117c4:	4637      	mov	r7, r6
 80117c6:	dc04      	bgt.n	80117d2 <__swbuf_r+0x42>
 80117c8:	4621      	mov	r1, r4
 80117ca:	4628      	mov	r0, r5
 80117cc:	f7ff fcf4 	bl	80111b8 <_fflush_r>
 80117d0:	bb30      	cbnz	r0, 8011820 <__swbuf_r+0x90>
 80117d2:	68a3      	ldr	r3, [r4, #8]
 80117d4:	3b01      	subs	r3, #1
 80117d6:	60a3      	str	r3, [r4, #8]
 80117d8:	6823      	ldr	r3, [r4, #0]
 80117da:	1c5a      	adds	r2, r3, #1
 80117dc:	6022      	str	r2, [r4, #0]
 80117de:	701e      	strb	r6, [r3, #0]
 80117e0:	6963      	ldr	r3, [r4, #20]
 80117e2:	3001      	adds	r0, #1
 80117e4:	4283      	cmp	r3, r0
 80117e6:	d004      	beq.n	80117f2 <__swbuf_r+0x62>
 80117e8:	89a3      	ldrh	r3, [r4, #12]
 80117ea:	07db      	lsls	r3, r3, #31
 80117ec:	d506      	bpl.n	80117fc <__swbuf_r+0x6c>
 80117ee:	2e0a      	cmp	r6, #10
 80117f0:	d104      	bne.n	80117fc <__swbuf_r+0x6c>
 80117f2:	4621      	mov	r1, r4
 80117f4:	4628      	mov	r0, r5
 80117f6:	f7ff fcdf 	bl	80111b8 <_fflush_r>
 80117fa:	b988      	cbnz	r0, 8011820 <__swbuf_r+0x90>
 80117fc:	4638      	mov	r0, r7
 80117fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011800:	4b0a      	ldr	r3, [pc, #40]	; (801182c <__swbuf_r+0x9c>)
 8011802:	429c      	cmp	r4, r3
 8011804:	d101      	bne.n	801180a <__swbuf_r+0x7a>
 8011806:	68ac      	ldr	r4, [r5, #8]
 8011808:	e7cf      	b.n	80117aa <__swbuf_r+0x1a>
 801180a:	4b09      	ldr	r3, [pc, #36]	; (8011830 <__swbuf_r+0xa0>)
 801180c:	429c      	cmp	r4, r3
 801180e:	bf08      	it	eq
 8011810:	68ec      	ldreq	r4, [r5, #12]
 8011812:	e7ca      	b.n	80117aa <__swbuf_r+0x1a>
 8011814:	4621      	mov	r1, r4
 8011816:	4628      	mov	r0, r5
 8011818:	f000 f80c 	bl	8011834 <__swsetup_r>
 801181c:	2800      	cmp	r0, #0
 801181e:	d0cb      	beq.n	80117b8 <__swbuf_r+0x28>
 8011820:	f04f 37ff 	mov.w	r7, #4294967295
 8011824:	e7ea      	b.n	80117fc <__swbuf_r+0x6c>
 8011826:	bf00      	nop
 8011828:	080128dc 	.word	0x080128dc
 801182c:	080128fc 	.word	0x080128fc
 8011830:	080128bc 	.word	0x080128bc

08011834 <__swsetup_r>:
 8011834:	4b32      	ldr	r3, [pc, #200]	; (8011900 <__swsetup_r+0xcc>)
 8011836:	b570      	push	{r4, r5, r6, lr}
 8011838:	681d      	ldr	r5, [r3, #0]
 801183a:	4606      	mov	r6, r0
 801183c:	460c      	mov	r4, r1
 801183e:	b125      	cbz	r5, 801184a <__swsetup_r+0x16>
 8011840:	69ab      	ldr	r3, [r5, #24]
 8011842:	b913      	cbnz	r3, 801184a <__swsetup_r+0x16>
 8011844:	4628      	mov	r0, r5
 8011846:	f7ff fd4b 	bl	80112e0 <__sinit>
 801184a:	4b2e      	ldr	r3, [pc, #184]	; (8011904 <__swsetup_r+0xd0>)
 801184c:	429c      	cmp	r4, r3
 801184e:	d10f      	bne.n	8011870 <__swsetup_r+0x3c>
 8011850:	686c      	ldr	r4, [r5, #4]
 8011852:	89a3      	ldrh	r3, [r4, #12]
 8011854:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011858:	0719      	lsls	r1, r3, #28
 801185a:	d42c      	bmi.n	80118b6 <__swsetup_r+0x82>
 801185c:	06dd      	lsls	r5, r3, #27
 801185e:	d411      	bmi.n	8011884 <__swsetup_r+0x50>
 8011860:	2309      	movs	r3, #9
 8011862:	6033      	str	r3, [r6, #0]
 8011864:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011868:	81a3      	strh	r3, [r4, #12]
 801186a:	f04f 30ff 	mov.w	r0, #4294967295
 801186e:	e03e      	b.n	80118ee <__swsetup_r+0xba>
 8011870:	4b25      	ldr	r3, [pc, #148]	; (8011908 <__swsetup_r+0xd4>)
 8011872:	429c      	cmp	r4, r3
 8011874:	d101      	bne.n	801187a <__swsetup_r+0x46>
 8011876:	68ac      	ldr	r4, [r5, #8]
 8011878:	e7eb      	b.n	8011852 <__swsetup_r+0x1e>
 801187a:	4b24      	ldr	r3, [pc, #144]	; (801190c <__swsetup_r+0xd8>)
 801187c:	429c      	cmp	r4, r3
 801187e:	bf08      	it	eq
 8011880:	68ec      	ldreq	r4, [r5, #12]
 8011882:	e7e6      	b.n	8011852 <__swsetup_r+0x1e>
 8011884:	0758      	lsls	r0, r3, #29
 8011886:	d512      	bpl.n	80118ae <__swsetup_r+0x7a>
 8011888:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801188a:	b141      	cbz	r1, 801189e <__swsetup_r+0x6a>
 801188c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011890:	4299      	cmp	r1, r3
 8011892:	d002      	beq.n	801189a <__swsetup_r+0x66>
 8011894:	4630      	mov	r0, r6
 8011896:	f7fe fd9d 	bl	80103d4 <_free_r>
 801189a:	2300      	movs	r3, #0
 801189c:	6363      	str	r3, [r4, #52]	; 0x34
 801189e:	89a3      	ldrh	r3, [r4, #12]
 80118a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80118a4:	81a3      	strh	r3, [r4, #12]
 80118a6:	2300      	movs	r3, #0
 80118a8:	6063      	str	r3, [r4, #4]
 80118aa:	6923      	ldr	r3, [r4, #16]
 80118ac:	6023      	str	r3, [r4, #0]
 80118ae:	89a3      	ldrh	r3, [r4, #12]
 80118b0:	f043 0308 	orr.w	r3, r3, #8
 80118b4:	81a3      	strh	r3, [r4, #12]
 80118b6:	6923      	ldr	r3, [r4, #16]
 80118b8:	b94b      	cbnz	r3, 80118ce <__swsetup_r+0x9a>
 80118ba:	89a3      	ldrh	r3, [r4, #12]
 80118bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80118c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80118c4:	d003      	beq.n	80118ce <__swsetup_r+0x9a>
 80118c6:	4621      	mov	r1, r4
 80118c8:	4630      	mov	r0, r6
 80118ca:	f000 f84d 	bl	8011968 <__smakebuf_r>
 80118ce:	89a0      	ldrh	r0, [r4, #12]
 80118d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80118d4:	f010 0301 	ands.w	r3, r0, #1
 80118d8:	d00a      	beq.n	80118f0 <__swsetup_r+0xbc>
 80118da:	2300      	movs	r3, #0
 80118dc:	60a3      	str	r3, [r4, #8]
 80118de:	6963      	ldr	r3, [r4, #20]
 80118e0:	425b      	negs	r3, r3
 80118e2:	61a3      	str	r3, [r4, #24]
 80118e4:	6923      	ldr	r3, [r4, #16]
 80118e6:	b943      	cbnz	r3, 80118fa <__swsetup_r+0xc6>
 80118e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80118ec:	d1ba      	bne.n	8011864 <__swsetup_r+0x30>
 80118ee:	bd70      	pop	{r4, r5, r6, pc}
 80118f0:	0781      	lsls	r1, r0, #30
 80118f2:	bf58      	it	pl
 80118f4:	6963      	ldrpl	r3, [r4, #20]
 80118f6:	60a3      	str	r3, [r4, #8]
 80118f8:	e7f4      	b.n	80118e4 <__swsetup_r+0xb0>
 80118fa:	2000      	movs	r0, #0
 80118fc:	e7f7      	b.n	80118ee <__swsetup_r+0xba>
 80118fe:	bf00      	nop
 8011900:	200000e8 	.word	0x200000e8
 8011904:	080128dc 	.word	0x080128dc
 8011908:	080128fc 	.word	0x080128fc
 801190c:	080128bc 	.word	0x080128bc

08011910 <abort>:
 8011910:	b508      	push	{r3, lr}
 8011912:	2006      	movs	r0, #6
 8011914:	f000 f898 	bl	8011a48 <raise>
 8011918:	2001      	movs	r0, #1
 801191a:	f7f0 fb3f 	bl	8001f9c <_exit>

0801191e <__swhatbuf_r>:
 801191e:	b570      	push	{r4, r5, r6, lr}
 8011920:	460e      	mov	r6, r1
 8011922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011926:	2900      	cmp	r1, #0
 8011928:	b096      	sub	sp, #88	; 0x58
 801192a:	4614      	mov	r4, r2
 801192c:	461d      	mov	r5, r3
 801192e:	da07      	bge.n	8011940 <__swhatbuf_r+0x22>
 8011930:	2300      	movs	r3, #0
 8011932:	602b      	str	r3, [r5, #0]
 8011934:	89b3      	ldrh	r3, [r6, #12]
 8011936:	061a      	lsls	r2, r3, #24
 8011938:	d410      	bmi.n	801195c <__swhatbuf_r+0x3e>
 801193a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801193e:	e00e      	b.n	801195e <__swhatbuf_r+0x40>
 8011940:	466a      	mov	r2, sp
 8011942:	f000 f89d 	bl	8011a80 <_fstat_r>
 8011946:	2800      	cmp	r0, #0
 8011948:	dbf2      	blt.n	8011930 <__swhatbuf_r+0x12>
 801194a:	9a01      	ldr	r2, [sp, #4]
 801194c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011950:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011954:	425a      	negs	r2, r3
 8011956:	415a      	adcs	r2, r3
 8011958:	602a      	str	r2, [r5, #0]
 801195a:	e7ee      	b.n	801193a <__swhatbuf_r+0x1c>
 801195c:	2340      	movs	r3, #64	; 0x40
 801195e:	2000      	movs	r0, #0
 8011960:	6023      	str	r3, [r4, #0]
 8011962:	b016      	add	sp, #88	; 0x58
 8011964:	bd70      	pop	{r4, r5, r6, pc}
	...

08011968 <__smakebuf_r>:
 8011968:	898b      	ldrh	r3, [r1, #12]
 801196a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801196c:	079d      	lsls	r5, r3, #30
 801196e:	4606      	mov	r6, r0
 8011970:	460c      	mov	r4, r1
 8011972:	d507      	bpl.n	8011984 <__smakebuf_r+0x1c>
 8011974:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011978:	6023      	str	r3, [r4, #0]
 801197a:	6123      	str	r3, [r4, #16]
 801197c:	2301      	movs	r3, #1
 801197e:	6163      	str	r3, [r4, #20]
 8011980:	b002      	add	sp, #8
 8011982:	bd70      	pop	{r4, r5, r6, pc}
 8011984:	ab01      	add	r3, sp, #4
 8011986:	466a      	mov	r2, sp
 8011988:	f7ff ffc9 	bl	801191e <__swhatbuf_r>
 801198c:	9900      	ldr	r1, [sp, #0]
 801198e:	4605      	mov	r5, r0
 8011990:	4630      	mov	r0, r6
 8011992:	f7fe fd6f 	bl	8010474 <_malloc_r>
 8011996:	b948      	cbnz	r0, 80119ac <__smakebuf_r+0x44>
 8011998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801199c:	059a      	lsls	r2, r3, #22
 801199e:	d4ef      	bmi.n	8011980 <__smakebuf_r+0x18>
 80119a0:	f023 0303 	bic.w	r3, r3, #3
 80119a4:	f043 0302 	orr.w	r3, r3, #2
 80119a8:	81a3      	strh	r3, [r4, #12]
 80119aa:	e7e3      	b.n	8011974 <__smakebuf_r+0xc>
 80119ac:	4b0d      	ldr	r3, [pc, #52]	; (80119e4 <__smakebuf_r+0x7c>)
 80119ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80119b0:	89a3      	ldrh	r3, [r4, #12]
 80119b2:	6020      	str	r0, [r4, #0]
 80119b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80119b8:	81a3      	strh	r3, [r4, #12]
 80119ba:	9b00      	ldr	r3, [sp, #0]
 80119bc:	6163      	str	r3, [r4, #20]
 80119be:	9b01      	ldr	r3, [sp, #4]
 80119c0:	6120      	str	r0, [r4, #16]
 80119c2:	b15b      	cbz	r3, 80119dc <__smakebuf_r+0x74>
 80119c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80119c8:	4630      	mov	r0, r6
 80119ca:	f000 f86b 	bl	8011aa4 <_isatty_r>
 80119ce:	b128      	cbz	r0, 80119dc <__smakebuf_r+0x74>
 80119d0:	89a3      	ldrh	r3, [r4, #12]
 80119d2:	f023 0303 	bic.w	r3, r3, #3
 80119d6:	f043 0301 	orr.w	r3, r3, #1
 80119da:	81a3      	strh	r3, [r4, #12]
 80119dc:	89a0      	ldrh	r0, [r4, #12]
 80119de:	4305      	orrs	r5, r0
 80119e0:	81a5      	strh	r5, [r4, #12]
 80119e2:	e7cd      	b.n	8011980 <__smakebuf_r+0x18>
 80119e4:	08011279 	.word	0x08011279

080119e8 <_malloc_usable_size_r>:
 80119e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119ec:	1f18      	subs	r0, r3, #4
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	bfbc      	itt	lt
 80119f2:	580b      	ldrlt	r3, [r1, r0]
 80119f4:	18c0      	addlt	r0, r0, r3
 80119f6:	4770      	bx	lr

080119f8 <_raise_r>:
 80119f8:	291f      	cmp	r1, #31
 80119fa:	b538      	push	{r3, r4, r5, lr}
 80119fc:	4604      	mov	r4, r0
 80119fe:	460d      	mov	r5, r1
 8011a00:	d904      	bls.n	8011a0c <_raise_r+0x14>
 8011a02:	2316      	movs	r3, #22
 8011a04:	6003      	str	r3, [r0, #0]
 8011a06:	f04f 30ff 	mov.w	r0, #4294967295
 8011a0a:	bd38      	pop	{r3, r4, r5, pc}
 8011a0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011a0e:	b112      	cbz	r2, 8011a16 <_raise_r+0x1e>
 8011a10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011a14:	b94b      	cbnz	r3, 8011a2a <_raise_r+0x32>
 8011a16:	4620      	mov	r0, r4
 8011a18:	f000 f830 	bl	8011a7c <_getpid_r>
 8011a1c:	462a      	mov	r2, r5
 8011a1e:	4601      	mov	r1, r0
 8011a20:	4620      	mov	r0, r4
 8011a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a26:	f000 b817 	b.w	8011a58 <_kill_r>
 8011a2a:	2b01      	cmp	r3, #1
 8011a2c:	d00a      	beq.n	8011a44 <_raise_r+0x4c>
 8011a2e:	1c59      	adds	r1, r3, #1
 8011a30:	d103      	bne.n	8011a3a <_raise_r+0x42>
 8011a32:	2316      	movs	r3, #22
 8011a34:	6003      	str	r3, [r0, #0]
 8011a36:	2001      	movs	r0, #1
 8011a38:	e7e7      	b.n	8011a0a <_raise_r+0x12>
 8011a3a:	2400      	movs	r4, #0
 8011a3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011a40:	4628      	mov	r0, r5
 8011a42:	4798      	blx	r3
 8011a44:	2000      	movs	r0, #0
 8011a46:	e7e0      	b.n	8011a0a <_raise_r+0x12>

08011a48 <raise>:
 8011a48:	4b02      	ldr	r3, [pc, #8]	; (8011a54 <raise+0xc>)
 8011a4a:	4601      	mov	r1, r0
 8011a4c:	6818      	ldr	r0, [r3, #0]
 8011a4e:	f7ff bfd3 	b.w	80119f8 <_raise_r>
 8011a52:	bf00      	nop
 8011a54:	200000e8 	.word	0x200000e8

08011a58 <_kill_r>:
 8011a58:	b538      	push	{r3, r4, r5, lr}
 8011a5a:	4d07      	ldr	r5, [pc, #28]	; (8011a78 <_kill_r+0x20>)
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	4604      	mov	r4, r0
 8011a60:	4608      	mov	r0, r1
 8011a62:	4611      	mov	r1, r2
 8011a64:	602b      	str	r3, [r5, #0]
 8011a66:	f7f0 fa89 	bl	8001f7c <_kill>
 8011a6a:	1c43      	adds	r3, r0, #1
 8011a6c:	d102      	bne.n	8011a74 <_kill_r+0x1c>
 8011a6e:	682b      	ldr	r3, [r5, #0]
 8011a70:	b103      	cbz	r3, 8011a74 <_kill_r+0x1c>
 8011a72:	6023      	str	r3, [r4, #0]
 8011a74:	bd38      	pop	{r3, r4, r5, pc}
 8011a76:	bf00      	nop
 8011a78:	20005d54 	.word	0x20005d54

08011a7c <_getpid_r>:
 8011a7c:	f7f0 ba76 	b.w	8001f6c <_getpid>

08011a80 <_fstat_r>:
 8011a80:	b538      	push	{r3, r4, r5, lr}
 8011a82:	4d07      	ldr	r5, [pc, #28]	; (8011aa0 <_fstat_r+0x20>)
 8011a84:	2300      	movs	r3, #0
 8011a86:	4604      	mov	r4, r0
 8011a88:	4608      	mov	r0, r1
 8011a8a:	4611      	mov	r1, r2
 8011a8c:	602b      	str	r3, [r5, #0]
 8011a8e:	f7f0 fad4 	bl	800203a <_fstat>
 8011a92:	1c43      	adds	r3, r0, #1
 8011a94:	d102      	bne.n	8011a9c <_fstat_r+0x1c>
 8011a96:	682b      	ldr	r3, [r5, #0]
 8011a98:	b103      	cbz	r3, 8011a9c <_fstat_r+0x1c>
 8011a9a:	6023      	str	r3, [r4, #0]
 8011a9c:	bd38      	pop	{r3, r4, r5, pc}
 8011a9e:	bf00      	nop
 8011aa0:	20005d54 	.word	0x20005d54

08011aa4 <_isatty_r>:
 8011aa4:	b538      	push	{r3, r4, r5, lr}
 8011aa6:	4d06      	ldr	r5, [pc, #24]	; (8011ac0 <_isatty_r+0x1c>)
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	4604      	mov	r4, r0
 8011aac:	4608      	mov	r0, r1
 8011aae:	602b      	str	r3, [r5, #0]
 8011ab0:	f7f0 fad3 	bl	800205a <_isatty>
 8011ab4:	1c43      	adds	r3, r0, #1
 8011ab6:	d102      	bne.n	8011abe <_isatty_r+0x1a>
 8011ab8:	682b      	ldr	r3, [r5, #0]
 8011aba:	b103      	cbz	r3, 8011abe <_isatty_r+0x1a>
 8011abc:	6023      	str	r3, [r4, #0]
 8011abe:	bd38      	pop	{r3, r4, r5, pc}
 8011ac0:	20005d54 	.word	0x20005d54

08011ac4 <_init>:
 8011ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ac6:	bf00      	nop
 8011ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011aca:	bc08      	pop	{r3}
 8011acc:	469e      	mov	lr, r3
 8011ace:	4770      	bx	lr

08011ad0 <_fini>:
 8011ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ad2:	bf00      	nop
 8011ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ad6:	bc08      	pop	{r3}
 8011ad8:	469e      	mov	lr, r3
 8011ada:	4770      	bx	lr
